{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "TypeDeclaration[1073-39484]:TypeDeclaration[1073-39267]"
    }, {
      "left" : "private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
      "right" : "private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
      "info" : "FieldDeclaration[2206-2264]:FieldDeclaration[2206-2264]"
    }, {
      "left" : "private static final int DEFAULT_BUFFER_SIZE = 8192;",
      "right" : "private static final int DEFAULT_BUFFER_SIZE = 8192;",
      "info" : "FieldDeclaration[2270-2322]:FieldDeclaration[2270-2322]"
    }, {
      "left" : "public static final int MIME_CHUNK_SIZE = 76;",
      "right" : "public static final int MIME_CHUNK_SIZE = 76;",
      "info" : "FieldDeclaration[2328-2698]:FieldDeclaration[2328-2698]"
    }, {
      "left" : "public static final int PEM_CHUNK_SIZE = 64;",
      "right" : "public static final int PEM_CHUNK_SIZE = 64;",
      "info" : "FieldDeclaration[2704-3078]:FieldDeclaration[2704-3078]"
    }, {
      "left" : "static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
      "right" : "static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
      "info" : "FieldDeclaration[3084-3409]:FieldDeclaration[3084-3409]"
    }, {
      "left" : "private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
      "right" : "private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
      "info" : "FieldDeclaration[3415-4197]:FieldDeclaration[3415-4197]"
    }, {
      "left" : "private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
      "right" : "private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
      "info" : "FieldDeclaration[4203-4887]:FieldDeclaration[4203-4887]"
    }, {
      "left" : "private static final byte PAD = '=';",
      "right" : "private static final byte PAD = '=';",
      "info" : "FieldDeclaration[4893-4977]:FieldDeclaration[4893-4977]"
    }, {
      "left" : "private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
      "right" : "private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
      "info" : "FieldDeclaration[4983-6320]:FieldDeclaration[4983-6320]"
    }, {
      "left" : "private static final int MASK_6BITS = 0x3f;",
      "right" : "private static final int MASK_6BITS = 0x3f;",
      "info" : "FieldDeclaration[6326-6428]:FieldDeclaration[6326-6428]"
    }, {
      "left" : "private static final int MASK_8BITS = 0xff;",
      "right" : "private static final int MASK_8BITS = 0xff;",
      "info" : "FieldDeclaration[6434-6547]:FieldDeclaration[6434-6547]"
    }, {
      "left" : "private final byte[] encodeTable;",
      "right" : "private final byte[] encodeTable;",
      "info" : "FieldDeclaration[6817-7132]:FieldDeclaration[6817-7132]"
    }, {
      "left" : "private final int lineLength;",
      "right" : "private final int lineLength;",
      "info" : "FieldDeclaration[7138-7319]:FieldDeclaration[7138-7319]"
    }, {
      "left" : "private final byte[] lineSeparator;",
      "right" : "private final byte[] lineSeparator;",
      "info" : "FieldDeclaration[7325-7465]:FieldDeclaration[7325-7465]"
    }, {
      "left" : "private final int decodeSize;",
      "right" : "private final int decodeSize;",
      "info" : "FieldDeclaration[7471-7688]:FieldDeclaration[7471-7688]"
    }, {
      "left" : "private final int encodeSize;",
      "right" : "private final int encodeSize;",
      "info" : "FieldDeclaration[7694-7911]:FieldDeclaration[7694-7911]"
    }, {
      "left" : "private byte[] buffer;",
      "right" : "private byte[] buffer;",
      "info" : "FieldDeclaration[7917-7984]:FieldDeclaration[7917-7984]"
    }, {
      "left" : "private int pos;",
      "right" : "private int pos;",
      "info" : "FieldDeclaration[7990-8092]:FieldDeclaration[7990-8092]"
    }, {
      "left" : "private int readPos;",
      "right" : "private int readPos;",
      "info" : "FieldDeclaration[8098-8203]:FieldDeclaration[8098-8203]"
    }, {
      "left" : "private int currentLinePos;",
      "right" : "private int currentLinePos;",
      "info" : "FieldDeclaration[8209-8457]:FieldDeclaration[8209-8457]"
    }, {
      "left" : "private int modulus;",
      "right" : "private int modulus;",
      "info" : "FieldDeclaration[8463-8644]:FieldDeclaration[8463-8644]"
    }, {
      "left" : "private boolean eof;",
      "right" : "private boolean eof;",
      "info" : "FieldDeclaration[8650-8839]:FieldDeclaration[8650-8839]"
    }, {
      "left" : "private int x;",
      "right" : "private int x;",
      "info" : "FieldDeclaration[8845-9048]:FieldDeclaration[8845-9048]"
    }, {
      "left" : "public Base64()",
      "right" : "public Base64()",
      "info" : "MethodDeclaration[9054-9412]:MethodDeclaration[9054-9412]"
    }, {
      "left" : "public Base64(boolean urlSafe)",
      "right" : "public Base64(boolean urlSafe)",
      "info" : "MethodDeclaration[9418-10043]:MethodDeclaration[9418-10043]"
    }, {
      "left" : "public Base64(int lineLength)",
      "right" : "public Base64(int lineLength)",
      "info" : "MethodDeclaration[10049-10915]:MethodDeclaration[10049-10915]"
    }, {
      "left" : "public Base64(int lineLength, byte[] lineSeparator)",
      "right" : "public Base64(int lineLength, byte[] lineSeparator)",
      "info" : "MethodDeclaration[10921-12047]:MethodDeclaration[10921-12047]"
    }, {
      "left" : "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
      "right" : "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
      "info" : "MethodDeclaration[12053-14285]:MethodDeclaration[12053-14285]"
    }, {
      "left" : "public boolean isUrlSafe()",
      "right" : "public boolean isUrlSafe()",
      "info" : "MethodDeclaration[14291-14570]:MethodDeclaration[14291-14570]"
    }, {
      "left" : "boolean hasData()",
      "right" : "boolean hasData()",
      "info" : "MethodDeclaration[14576-14809]:MethodDeclaration[14576-14809]"
    }, {
      "left" : "int avail()",
      "right" : "int avail()",
      "info" : "MethodDeclaration[14815-15041]:MethodDeclaration[14815-15041]"
    }, {
      "left" : "private void resizeBuffer()",
      "right" : "private void resizeBuffer()",
      "info" : "MethodDeclaration[15047-15433]:MethodDeclaration[15047-15433]"
    }, {
      "left" : "int readResults(byte[] b, int bPos, int bAvail)",
      "right" : "int readResults(byte[] b, int bPos, int bAvail)",
      "info" : "MethodDeclaration[15439-16391]:MethodDeclaration[15439-16391]"
    }, {
      "left" : "void encode(byte[] in, int inPos, int inAvail)",
      "right" : "void encode(byte[] in, int inPos, int inAvail)",
      "info" : "MethodDeclaration[16614-20215]:MethodDeclaration[16397-19998]"
    }, {
      "left" : "void decode(byte[] in, int inPos, int inAvail)",
      "right" : "void decode(byte[] in, int inPos, int inAvail)",
      "info" : "MethodDeclaration[20221-23263]:MethodDeclaration[20004-23046]"
    }, {
      "left" : "public static boolean isBase64(byte octet)",
      "right" : "public static boolean isBase64(byte octet)",
      "info" : "MethodDeclaration[23269-23719]:MethodDeclaration[23052-23502]"
    }, {
      "left" : "public static boolean isArrayByteBase64(byte[] arrayOctet)",
      "right" : "public static boolean isArrayByteBase64(byte[] arrayOctet)",
      "info" : "MethodDeclaration[23725-24395]:MethodDeclaration[23508-24178]"
    }, {
      "left" : "private static boolean containsBase64Byte(byte[] arrayOctet)",
      "right" : "private static boolean containsBase64Byte(byte[] arrayOctet)",
      "info" : "MethodDeclaration[24401-24935]:MethodDeclaration[24184-24718]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData)",
      "info" : "MethodDeclaration[24941-25305]:MethodDeclaration[24724-25088]"
    }, {
      "left" : "public static String encodeBase64String(byte[] binaryData)",
      "right" : "public static String encodeBase64String(byte[] binaryData)",
      "info" : "MethodDeclaration[25311-25712]:MethodDeclaration[25094-25495]"
    }, {
      "left" : "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
      "info" : "MethodDeclaration[25722-26216]:MethodDeclaration[25505-25999]"
    }, {
      "left" : "public static String encodeBase64URLSafeString(byte[] binaryData)",
      "right" : "public static String encodeBase64URLSafeString(byte[] binaryData)",
      "info" : "MethodDeclaration[26222-26721]:MethodDeclaration[26005-26504]"
    }, {
      "left" : "public static byte[] encodeBase64Chunked(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64Chunked(byte[] binaryData)",
      "info" : "MethodDeclaration[26731-27107]:MethodDeclaration[26514-26890]"
    }, {
      "left" : "public Object decode(Object pObject) throws DecoderException",
      "right" : "public Object decode(Object pObject) throws DecoderException",
      "info" : "MethodDeclaration[27113-28040]:MethodDeclaration[26896-27823]"
    }, {
      "left" : "public byte[] decode(String pArray)",
      "right" : "public byte[] decode(String pArray)",
      "info" : "MethodDeclaration[28046-28389]:MethodDeclaration[27829-28172]"
    }, {
      "left" : "public byte[] decode(byte[] pArray)",
      "right" : "public byte[] decode(byte[] pArray)",
      "info" : "MethodDeclaration[28395-28982]:MethodDeclaration[28178-28765]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
      "info" : "MethodDeclaration[28988-29658]:MethodDeclaration[28771-29441]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
      "info" : "MethodDeclaration[29664-30523]:MethodDeclaration[29447-30306]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
      "info" : "MethodDeclaration[30529-31995]:MethodDeclaration[30312-31778]"
    }, {
      "left" : "public static byte[] decodeBase64(String base64String)",
      "right" : "public static byte[] decodeBase64(String base64String)",
      "info" : "MethodDeclaration[32001-32318]:MethodDeclaration[31784-32101]"
    }, {
      "left" : "public static byte[] decodeBase64(byte[] base64Data)",
      "right" : "public static byte[] decodeBase64(byte[] base64Data)",
      "info" : "MethodDeclaration[32324-32618]:MethodDeclaration[32107-32401]"
    }, {
      "left" : "static byte[] discardWhitespace(byte[] data)",
      "right" : "static byte[] discardWhitespace(byte[] data)",
      "info" : "MethodDeclaration[32624-33517]:MethodDeclaration[32407-33300]"
    }, {
      "left" : "private static boolean isWhiteSpace(byte byteToCheck)",
      "right" : "private static boolean isWhiteSpace(byte byteToCheck)",
      "info" : "MethodDeclaration[33523-33998]:MethodDeclaration[33306-33781]"
    }, {
      "left" : "public Object encode(Object pObject) throws EncoderException",
      "right" : "public Object encode(Object pObject) throws EncoderException",
      "info" : "MethodDeclaration[34052-34837]:MethodDeclaration[33835-34620]"
    }, {
      "left" : "public String encodeToString(byte[] pArray)",
      "right" : "public String encodeToString(byte[] pArray)",
      "info" : "MethodDeclaration[34843-35242]:MethodDeclaration[34626-35025]"
    }, {
      "left" : "public byte[] encode(byte[] pArray)",
      "right" : "public byte[] encode(byte[] pArray)",
      "info" : "MethodDeclaration[35248-35884]:MethodDeclaration[35031-35667]"
    }, {
      "left" : "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
      "right" : "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
      "info" : "MethodDeclaration[35890-37063]:MethodDeclaration[35673-36846]"
    }, {
      "left" : "public static BigInteger decodeInteger(byte[] pArray)",
      "right" : "public static BigInteger decodeInteger(byte[] pArray)",
      "info" : "MethodDeclaration[37127-37497]:MethodDeclaration[36910-37280]"
    }, {
      "left" : "public static byte[] encodeInteger(BigInteger bigInt)",
      "right" : "public static byte[] encodeInteger(BigInteger bigInt)",
      "info" : "MethodDeclaration[37503-38084]:MethodDeclaration[37286-37867]"
    }, {
      "left" : "static byte[] toIntegerBytes(BigInteger bigInt)",
      "right" : "static byte[] toIntegerBytes(BigInteger bigInt)",
      "info" : "MethodDeclaration[38090-39227]:MethodDeclaration[37873-39010]"
    }, {
      "left" : "private void reset()",
      "right" : "private void reset()",
      "info" : "MethodDeclaration[39233-39481]:MethodDeclaration[39016-39264]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2140-2146]:Modifier[2140-2146]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2147-2152]:TYPE_DECLARATION_KIND[2147-2152]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[2153-2159]:SimpleName[2153-2159]"
    }, {
      "left" : "BinaryEncoder",
      "right" : "BinaryEncoder",
      "info" : "SimpleType[2171-2184]:SimpleType[2171-2184]"
    }, {
      "left" : "BinaryDecoder",
      "right" : "BinaryDecoder",
      "info" : "SimpleType[2186-2199]:SimpleType[2186-2199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9372-9378]:Modifier[9372-9378]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[9379-9385]:SimpleName[9379-9385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9388-9412]:Block[9388-9412]"
    }, {
      "left" : "this(0);",
      "right" : "this(0);",
      "info" : "ConstructorInvocation[9398-9406]:ConstructorInvocation[9398-9406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9948-9954]:Modifier[9948-9954]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[9955-9961]:SimpleName[9955-9961]"
    }, {
      "left" : "boolean urlSafe",
      "right" : "boolean urlSafe",
      "info" : "SingleVariableDeclaration[9962-9977]:SingleVariableDeclaration[9962-9977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9979-10043]:Block[9979-10043]"
    }, {
      "left" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
      "right" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
      "info" : "ConstructorInvocation[9989-10037]:ConstructorInvocation[9989-10037]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10835-10841]:Modifier[10835-10841]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[10842-10848]:SimpleName[10842-10848]"
    }, {
      "left" : "int lineLength",
      "right" : "int lineLength",
      "info" : "SingleVariableDeclaration[10849-10863]:SingleVariableDeclaration[10849-10863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10865-10915]:Block[10865-10915]"
    }, {
      "left" : "this(lineLength, CHUNK_SEPARATOR);",
      "right" : "this(lineLength, CHUNK_SEPARATOR);",
      "info" : "ConstructorInvocation[10875-10909]:ConstructorInvocation[10875-10909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11940-11946]:Modifier[11940-11946]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[11947-11953]:SimpleName[11947-11953]"
    }, {
      "left" : "int lineLength",
      "right" : "int lineLength",
      "info" : "SingleVariableDeclaration[11954-11968]:SingleVariableDeclaration[11954-11968]"
    }, {
      "left" : "byte[] lineSeparator",
      "right" : "byte[] lineSeparator",
      "info" : "SingleVariableDeclaration[11970-11990]:SingleVariableDeclaration[11970-11990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11992-12047]:Block[11992-12047]"
    }, {
      "left" : "this(lineLength, lineSeparator, false);",
      "right" : "this(lineLength, lineSeparator, false);",
      "info" : "ConstructorInvocation[12002-12041]:ConstructorInvocation[12002-12041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13296-13302]:Modifier[13296-13302]"
    }, {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "SimpleName[13303-13309]:SimpleName[13303-13309]"
    }, {
      "left" : "int lineLength",
      "right" : "int lineLength",
      "info" : "SingleVariableDeclaration[13310-13324]:SingleVariableDeclaration[13310-13324]"
    }, {
      "left" : "byte[] lineSeparator",
      "right" : "byte[] lineSeparator",
      "info" : "SingleVariableDeclaration[13326-13346]:SingleVariableDeclaration[13326-13346]"
    }, {
      "left" : "boolean urlSafe",
      "right" : "boolean urlSafe",
      "info" : "SingleVariableDeclaration[13348-13363]:SingleVariableDeclaration[13348-13363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13365-14285]:Block[13365-14285]"
    }, {
      "left" : "if (lineSeparator == null)",
      "right" : "if (lineSeparator == null)",
      "info" : "IfStatement[13375-13542]:IfStatement[13375-13542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13402-13542]:Block[13402-13542]"
    }, {
      "left" : "lineLength = 0;",
      "right" : "lineLength = 0;",
      "info" : "ExpressionStatement[13416-13431]:ExpressionStatement[13416-13431]"
    }, {
      "left" : "lineSeparator = CHUNK_SEPARATOR;",
      "right" : "lineSeparator = CHUNK_SEPARATOR;",
      "info" : "ExpressionStatement[13473-13505]:ExpressionStatement[13473-13505]"
    }, {
      "left" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
      "right" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
      "info" : "ExpressionStatement[13551-13611]:ExpressionStatement[13551-13611]"
    }, {
      "left" : "this.lineSeparator = new byte[lineSeparator.length];",
      "right" : "this.lineSeparator = new byte[lineSeparator.length];",
      "info" : "ExpressionStatement[13620-13672]:ExpressionStatement[13620-13672]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
      "info" : "ExpressionStatement[13681-13761]:ExpressionStatement[13681-13761]"
    }, {
      "left" : "if (lineLength > 0)",
      "right" : "if (lineLength > 0)",
      "info" : "IfStatement[13770-13907]:IfStatement[13770-13907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13790-13857]:Block[13790-13857]"
    }, {
      "left" : "this.encodeSize = 4 + lineSeparator.length;",
      "right" : "this.encodeSize = 4 + lineSeparator.length;",
      "info" : "ExpressionStatement[13804-13847]:ExpressionStatement[13804-13847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13863-13907]:Block[13863-13907]"
    }, {
      "left" : "this.encodeSize = 4;",
      "right" : "this.encodeSize = 4;",
      "info" : "ExpressionStatement[13877-13897]:ExpressionStatement[13877-13897]"
    }, {
      "left" : "this.decodeSize = this.encodeSize - 1;",
      "right" : "this.decodeSize = this.encodeSize - 1;",
      "info" : "ExpressionStatement[13916-13954]:ExpressionStatement[13916-13954]"
    }, {
      "left" : "if (containsBase64Byte(lineSeparator))",
      "right" : "if (containsBase64Byte(lineSeparator))",
      "info" : "IfStatement[13963-14195]:IfStatement[13963-14195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14002-14195]:Block[14002-14195]"
    }, {
      "left" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
      "right" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
      "info" : "VariableDeclarationStatement[14016-14070]:VariableDeclarationStatement[14016-14070]"
    }, {
      "left" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
      "right" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
      "info" : "ThrowStatement[14083-14185]:ThrowStatement[14083-14185]"
    }, {
      "left" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
      "right" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
      "info" : "ExpressionStatement[14204-14279]:ExpressionStatement[14204-14279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14478-14484]:Modifier[14478-14484]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14485-14492]:PrimitiveType[14485-14492]"
    }, {
      "left" : "isUrlSafe",
      "right" : "isUrlSafe",
      "info" : "SimpleName[14493-14502]:SimpleName[14493-14502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14505-14570]:Block[14505-14570]"
    }, {
      "left" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
      "right" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
      "info" : "ReturnStatement[14515-14564]:ReturnStatement[14515-14564]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14748-14755]:PrimitiveType[14748-14755]"
    }, {
      "left" : "hasData",
      "right" : "hasData",
      "info" : "SimpleName[14756-14763]:SimpleName[14756-14763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-14809]:Block[14766-14809]"
    }, {
      "left" : "return this.buffer != null;",
      "right" : "return this.buffer != null;",
      "info" : "ReturnStatement[14776-14803]:ReturnStatement[14776-14803]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14971-14974]:PrimitiveType[14971-14974]"
    }, {
      "left" : "avail",
      "right" : "avail",
      "info" : "SimpleName[14975-14980]:SimpleName[14975-14980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14983-15041]:Block[14983-15041]"
    }, {
      "left" : "return buffer != null ? pos - readPos : 0;",
      "right" : "return buffer != null ? pos - readPos : 0;",
      "info" : "ReturnStatement[14993-15035]:ReturnStatement[14993-15035]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15078-15085]:Modifier[15078-15085]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15086-15090]:PrimitiveType[15086-15090]"
    }, {
      "left" : "resizeBuffer",
      "right" : "resizeBuffer",
      "info" : "SimpleName[15091-15103]:SimpleName[15091-15103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15106-15433]:Block[15106-15433]"
    }, {
      "left" : "if (buffer == null)",
      "right" : "if (buffer == null)",
      "info" : "IfStatement[15116-15427]:IfStatement[15116-15427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15136-15245]:Block[15136-15245]"
    }, {
      "left" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
      "right" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
      "info" : "ExpressionStatement[15150-15189]:ExpressionStatement[15150-15189]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[15202-15210]:ExpressionStatement[15202-15210]"
    }, {
      "left" : "readPos = 0;",
      "right" : "readPos = 0;",
      "info" : "ExpressionStatement[15223-15235]:ExpressionStatement[15223-15235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15251-15427]:Block[15251-15427]"
    }, {
      "left" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
      "right" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
      "info" : "VariableDeclarationStatement[15265-15331]:VariableDeclarationStatement[15265-15331]"
    }, {
      "left" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
      "right" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
      "info" : "ExpressionStatement[15344-15393]:ExpressionStatement[15344-15393]"
    }, {
      "left" : "buffer = b;",
      "right" : "buffer = b;",
      "info" : "ExpressionStatement[15406-15417]:ExpressionStatement[15406-15417]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16026-16029]:PrimitiveType[16026-16029]"
    }, {
      "left" : "readResults",
      "right" : "readResults",
      "info" : "SimpleName[16030-16041]:SimpleName[16030-16041]"
    }, {
      "left" : "byte[] b",
      "right" : "byte[] b",
      "info" : "SingleVariableDeclaration[16042-16050]:SingleVariableDeclaration[16042-16050]"
    }, {
      "left" : "int bPos",
      "right" : "int bPos",
      "info" : "SingleVariableDeclaration[16052-16060]:SingleVariableDeclaration[16052-16060]"
    }, {
      "left" : "int bAvail",
      "right" : "int bAvail",
      "info" : "SingleVariableDeclaration[16062-16072]:SingleVariableDeclaration[16062-16072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16074-16391]:Block[16074-16391]"
    }, {
      "left" : "if (buffer != null)",
      "right" : "if (buffer != null)",
      "info" : "IfStatement[16084-16356]:IfStatement[16084-16356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16104-16356]:Block[16104-16356]"
    }, {
      "left" : "int len = Math.min(avail(), bAvail);",
      "right" : "int len = Math.min(avail(), bAvail);",
      "info" : "VariableDeclarationStatement[16118-16154]:VariableDeclarationStatement[16118-16154]"
    }, {
      "left" : "System.arraycopy(buffer, readPos, b, bPos, len);",
      "right" : "System.arraycopy(buffer, readPos, b, bPos, len);",
      "info" : "ExpressionStatement[16167-16215]:ExpressionStatement[16167-16215]"
    }, {
      "left" : "readPos += len;",
      "right" : "readPos += len;",
      "info" : "ExpressionStatement[16228-16243]:ExpressionStatement[16228-16243]"
    }, {
      "left" : "if (readPos >= pos)",
      "right" : "if (readPos >= pos)",
      "info" : "IfStatement[16256-16322]:IfStatement[16256-16322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16276-16322]:Block[16276-16322]"
    }, {
      "left" : "buffer = null;",
      "right" : "buffer = null;",
      "info" : "ExpressionStatement[16294-16308]:ExpressionStatement[16294-16308]"
    }, {
      "left" : "return len;",
      "right" : "return len;",
      "info" : "ReturnStatement[16335-16346]:ReturnStatement[16335-16346]"
    }, {
      "left" : "return eof ? -1 : 0;",
      "right" : "return eof ? -1 : 0;",
      "info" : "ReturnStatement[16365-16385]:ReturnStatement[16365-16385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17398-17402]:PrimitiveType[17181-17185]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[17403-17409]:SimpleName[17186-17192]"
    }, {
      "left" : "byte[] in",
      "right" : "byte[] in",
      "info" : "SingleVariableDeclaration[17410-17419]:SingleVariableDeclaration[17193-17202]"
    }, {
      "left" : "int inPos",
      "right" : "int inPos",
      "info" : "SingleVariableDeclaration[17421-17430]:SingleVariableDeclaration[17204-17213]"
    }, {
      "left" : "int inAvail",
      "right" : "int inAvail",
      "info" : "SingleVariableDeclaration[17432-17443]:SingleVariableDeclaration[17215-17226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17445-20215]:Block[17228-19998]"
    }, {
      "left" : "if (eof)",
      "right" : "if (eof)",
      "info" : "IfStatement[17455-17495]:IfStatement[17238-17278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17464-17495]:Block[17247-17278]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17478-17485]:ReturnStatement[17261-17268]"
    }, {
      "left" : "if (inAvail < 0)",
      "right" : "if (inAvail < 0)",
      "info" : "IfStatement[17606-20209]:IfStatement[17389-19992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17623-19145]:Block[17406-18928]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[17637-17648]:ExpressionStatement[17420-17431]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "info" : "IfStatement[17661-17764]:IfStatement[17444-17547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17717-17764]:Block[17500-17547]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[17735-17750]:ExpressionStatement[17518-17533]"
    }, {
      "left" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
      "right" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[17777-18730]:SwitchStatement[17560-18513]"
    }, {
      "left" : "case 1 :",
      "right" : "case 1 :",
      "info" : "SwitchCase[17812-17820]:SwitchCase[17595-17603]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
      "info" : "ExpressionStatement[17841-17892]:ExpressionStatement[17624-17675]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
      "info" : "ExpressionStatement[17913-17964]:ExpressionStatement[17696-17747]"
    }, {
      "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "info" : "IfStatement[18059-18214]:IfStatement[17842-17997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18101-18214]:Block[17884-17997]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[18127-18147]:ExpressionStatement[17910-17930]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[18172-18192]:ExpressionStatement[17955-17975]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18235-18241]:BreakStatement[18018-18024]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[18259-18267]:SwitchCase[18042-18050]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
      "info" : "ExpressionStatement[18288-18340]:ExpressionStatement[18071-18123]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
      "info" : "ExpressionStatement[18361-18412]:ExpressionStatement[18144-18195]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
      "info" : "ExpressionStatement[18433-18484]:ExpressionStatement[18216-18267]"
    }, {
      "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "info" : "IfStatement[18579-18689]:IfStatement[18362-18472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18621-18689]:Block[18404-18472]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[18647-18667]:ExpressionStatement[18430-18450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18710-18716]:BreakStatement[18493-18499]"
    }, {
      "left" : "byte b = lineSeparator[lineSeparator.length - 1];",
      "right" : "byte b = lineSeparator[lineSeparator.length - 1];",
      "info" : "VariableDeclarationStatement[18873-18922]:VariableDeclarationStatement[18656-18705]"
    }, {
      "left" : "if (lineLength > 0 && pos > 0 && buffer[pos-1] != b)",
      "right" : "if (lineLength > 0 && pos > 0 && buffer[pos-1] != b)",
      "info" : "IfStatement[18935-19135]:IfStatement[18718-18918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18988-19135]:Block[18771-18918]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "info" : "ExpressionStatement[19006-19076]:ExpressionStatement[18789-18859]"
    }, {
      "left" : "pos += lineSeparator.length;",
      "right" : "pos += lineSeparator.length;",
      "info" : "ExpressionStatement[19093-19121]:ExpressionStatement[18876-18904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19151-20209]:Block[18934-19992]"
    }, {
      "left" : "for (int i = 0; i < inAvail; i++)",
      "right" : "for (int i = 0; i < inAvail; i++)",
      "info" : "ForStatement[19165-20199]:ForStatement[18948-19982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19199-20199]:Block[18982-19982]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "info" : "IfStatement[19217-19328]:IfStatement[19000-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19273-19328]:Block[19056-19111]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[19295-19310]:ExpressionStatement[19078-19093]"
    }, {
      "left" : "modulus = (++modulus) % 3;",
      "right" : "modulus = (++modulus) % 3;",
      "info" : "ExpressionStatement[19345-19371]:ExpressionStatement[19128-19154]"
    }, {
      "left" : "int b = in[inPos++];",
      "right" : "int b = in[inPos++];",
      "info" : "VariableDeclarationStatement[19388-19408]:VariableDeclarationStatement[19171-19191]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[19425-19485]:IfStatement[19208-19268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19436-19485]:Block[19219-19268]"
    }, {
      "left" : "b += 256;",
      "right" : "b += 256;",
      "info" : "ExpressionStatement[19458-19467]:ExpressionStatement[19241-19250]"
    }, {
      "left" : "x = (x << 8) + b;",
      "right" : "x = (x << 8) + b;",
      "info" : "ExpressionStatement[19502-19519]:ExpressionStatement[19285-19302]"
    }, {
      "left" : "if (0 == modulus)",
      "right" : "if (0 == modulus)",
      "info" : "IfStatement[19536-20185]:IfStatement[19319-19968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19554-20185]:Block[19337-19968]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
      "info" : "ExpressionStatement[19576-19628]:ExpressionStatement[19359-19411]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
      "info" : "ExpressionStatement[19649-19701]:ExpressionStatement[19432-19484]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
      "info" : "ExpressionStatement[19722-19773]:ExpressionStatement[19505-19556]"
    }, {
      "left" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
      "info" : "ExpressionStatement[19794-19838]:ExpressionStatement[19577-19621]"
    }, {
      "left" : "currentLinePos += 4;",
      "right" : "currentLinePos += 4;",
      "info" : "ExpressionStatement[19859-19879]:ExpressionStatement[19642-19662]"
    }, {
      "left" : "if (lineLength > 0 && lineLength <= currentLinePos)",
      "right" : "if (lineLength > 0 && lineLength <= currentLinePos)",
      "info" : "IfStatement[19900-20167]:IfStatement[19683-19950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19952-20167]:Block[19735-19950]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "info" : "ExpressionStatement[19978-20048]:ExpressionStatement[19761-19831]"
    }, {
      "left" : "pos += lineSeparator.length;",
      "right" : "pos += lineSeparator.length;",
      "info" : "ExpressionStatement[20073-20101]:ExpressionStatement[19856-19884]"
    }, {
      "left" : "currentLinePos = 0;",
      "right" : "currentLinePos = 0;",
      "info" : "ExpressionStatement[20126-20145]:ExpressionStatement[19909-19928]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21360-21364]:PrimitiveType[21143-21147]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[21365-21371]:SimpleName[21148-21154]"
    }, {
      "left" : "byte[] in",
      "right" : "byte[] in",
      "info" : "SingleVariableDeclaration[21372-21381]:SingleVariableDeclaration[21155-21164]"
    }, {
      "left" : "int inPos",
      "right" : "int inPos",
      "info" : "SingleVariableDeclaration[21383-21392]:SingleVariableDeclaration[21166-21175]"
    }, {
      "left" : "int inAvail",
      "right" : "int inAvail",
      "info" : "SingleVariableDeclaration[21394-21405]:SingleVariableDeclaration[21177-21188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21407-23263]:Block[21190-23046]"
    }, {
      "left" : "if (eof)",
      "right" : "if (eof)",
      "info" : "IfStatement[21417-21457]:IfStatement[21200-21240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21426-21457]:Block[21209-21240]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21440-21447]:ReturnStatement[21223-21230]"
    }, {
      "left" : "if (inAvail < 0)",
      "right" : "if (inAvail < 0)",
      "info" : "IfStatement[21466-21518]:IfStatement[21249-21301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21483-21518]:Block[21266-21301]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[21497-21508]:ExpressionStatement[21280-21291]"
    }, {
      "left" : "for (int i = 0; i < inAvail; i++)",
      "right" : "for (int i = 0; i < inAvail; i++)",
      "info" : "ForStatement[21527-22443]:ForStatement[21310-22226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21561-22443]:Block[21344-22226]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "info" : "IfStatement[21575-21678]:IfStatement[21358-21461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21631-21678]:Block[21414-21461]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[21649-21664]:ExpressionStatement[21432-21447]"
    }, {
      "left" : "byte b = in[inPos++];",
      "right" : "byte b = in[inPos++];",
      "info" : "VariableDeclarationStatement[21691-21712]:VariableDeclarationStatement[21474-21495]"
    }, {
      "left" : "if (b == PAD)",
      "right" : "if (b == PAD)",
      "info" : "IfStatement[21725-22433]:IfStatement[21508-22216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21739-21836]:Block[21522-21619]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[21788-21799]:ExpressionStatement[21571-21582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21816-21822]:BreakStatement[21599-21605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21842-22433]:Block[21625-22216]"
    }, {
      "left" : "if (b >= 0 && b < DECODE_TABLE.length)",
      "right" : "if (b >= 0 && b < DECODE_TABLE.length)",
      "info" : "IfStatement[21860-22419]:IfStatement[21643-22202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21899-22419]:Block[21682-22202]"
    }, {
      "left" : "int result = DECODE_TABLE[b];",
      "right" : "int result = DECODE_TABLE[b];",
      "info" : "VariableDeclarationStatement[21921-21950]:VariableDeclarationStatement[21704-21733]"
    }, {
      "left" : "if (result >= 0)",
      "right" : "if (result >= 0)",
      "info" : "IfStatement[21971-22401]:IfStatement[21754-22184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21988-22401]:Block[21771-22184]"
    }, {
      "left" : "modulus = (++modulus) % 4;",
      "right" : "modulus = (++modulus) % 4;",
      "info" : "ExpressionStatement[22014-22040]:ExpressionStatement[21797-21823]"
    }, {
      "left" : "x = (x << 6) + result;",
      "right" : "x = (x << 6) + result;",
      "info" : "ExpressionStatement[22065-22087]:ExpressionStatement[21848-21870]"
    }, {
      "left" : "if (modulus == 0)",
      "right" : "if (modulus == 0)",
      "info" : "IfStatement[22112-22379]:IfStatement[21895-22162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22130-22379]:Block[21913-22162]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[22160-22208]:ExpressionStatement[21943-21991]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "info" : "ExpressionStatement[22237-22284]:ExpressionStatement[22020-22067]"
    }, {
      "left" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
      "info" : "ExpressionStatement[22313-22353]:ExpressionStatement[22096-22136]"
    }, {
      "left" : "if (eof && modulus != 0)",
      "right" : "if (eof && modulus != 0)",
      "info" : "IfStatement[22681-23257]:IfStatement[22464-23040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22706-23257]:Block[22489-23040]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "info" : "IfStatement[22720-22823]:IfStatement[22503-22606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22776-22823]:Block[22559-22606]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[22794-22809]:ExpressionStatement[22577-22592]"
    }, {
      "left" : "x = x << 6;",
      "right" : "x = x << 6;",
      "info" : "ExpressionStatement[22849-22860]:ExpressionStatement[22632-22643]"
    }, {
      "left" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
      "right" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
      "info" : "SwitchStatement[22873-23247]:SwitchStatement[22656-23030]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[22908-22916]:SwitchCase[22691-22699]"
    }, {
      "left" : "x = x << 6;",
      "right" : "x = x << 6;",
      "info" : "ExpressionStatement[22937-22948]:ExpressionStatement[22720-22731]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[22969-23017]:ExpressionStatement[22752-22800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23038-23044]:BreakStatement[22821-22827]"
    }, {
      "left" : "case 3 :",
      "right" : "case 3 :",
      "info" : "SwitchCase[23061-23069]:SwitchCase[22844-22852]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[23090-23138]:ExpressionStatement[22873-22921]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "info" : "ExpressionStatement[23159-23206]:ExpressionStatement[22942-22989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23227-23233]:BreakStatement[23010-23016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23564-23570]:Modifier[23347-23353]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23571-23577]:Modifier[23354-23360]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23578-23585]:PrimitiveType[23361-23368]"
    }, {
      "left" : "isBase64",
      "right" : "isBase64",
      "info" : "SimpleName[23586-23594]:SimpleName[23369-23377]"
    }, {
      "left" : "byte octet",
      "right" : "byte octet",
      "info" : "SingleVariableDeclaration[23595-23605]:SingleVariableDeclaration[23378-23388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23607-23719]:Block[23390-23502]"
    }, {
      "left" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
      "right" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
      "info" : "ReturnStatement[23617-23713]:ReturnStatement[23400-23496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24124-24130]:Modifier[23907-23913]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24131-24137]:Modifier[23914-23920]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24138-24145]:PrimitiveType[23921-23928]"
    }, {
      "left" : "isArrayByteBase64",
      "right" : "isArrayByteBase64",
      "info" : "SimpleName[24146-24163]:SimpleName[23929-23946]"
    }, {
      "left" : "byte[] arrayOctet",
      "right" : "byte[] arrayOctet",
      "info" : "SingleVariableDeclaration[24164-24181]:SingleVariableDeclaration[23947-23964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24183-24395]:Block[23966-24178]"
    }, {
      "left" : "for (int i = 0; i < arrayOctet.length; i++)",
      "right" : "for (int i = 0; i < arrayOctet.length; i++)",
      "info" : "ForStatement[24193-24368]:ForStatement[23976-24151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24237-24368]:Block[24020-24151]"
    }, {
      "left" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
      "right" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
      "info" : "IfStatement[24251-24358]:IfStatement[24034-24141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24313-24358]:Block[24096-24141]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24331-24344]:ReturnStatement[24114-24127]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24377-24389]:ReturnStatement[24160-24172]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24695-24702]:Modifier[24478-24485]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24703-24709]:Modifier[24486-24492]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24710-24717]:PrimitiveType[24493-24500]"
    }, {
      "left" : "containsBase64Byte",
      "right" : "containsBase64Byte",
      "info" : "SimpleName[24718-24736]:SimpleName[24501-24519]"
    }, {
      "left" : "byte[] arrayOctet",
      "right" : "byte[] arrayOctet",
      "info" : "SingleVariableDeclaration[24737-24754]:SingleVariableDeclaration[24520-24537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24756-24935]:Block[24539-24718]"
    }, {
      "left" : "for (int i = 0; i < arrayOctet.length; i++)",
      "right" : "for (int i = 0; i < arrayOctet.length; i++)",
      "info" : "ForStatement[24766-24907]:ForStatement[24549-24690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24810-24907]:Block[24593-24690]"
    }, {
      "left" : "if (isBase64(arrayOctet[i]))",
      "right" : "if (isBase64(arrayOctet[i]))",
      "info" : "IfStatement[24824-24897]:IfStatement[24607-24680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24853-24897]:Block[24636-24680]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24871-24883]:ReturnStatement[24654-24666]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24916-24929]:ReturnStatement[24699-24712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25197-25203]:Modifier[24980-24986]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25204-25210]:Modifier[24987-24993]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[25211-25217]:ArrayType[24994-25000]"
    }, {
      "left" : "encodeBase64",
      "right" : "encodeBase64",
      "info" : "SimpleName[25218-25230]:SimpleName[25001-25013]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[25231-25248]:SingleVariableDeclaration[25014-25031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25250-25305]:Block[25033-25088]"
    }, {
      "left" : "return encodeBase64(binaryData, false);",
      "right" : "return encodeBase64(binaryData, false);",
      "info" : "ReturnStatement[25260-25299]:ReturnStatement[25043-25082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25571-25577]:Modifier[25354-25360]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25578-25584]:Modifier[25361-25367]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25585-25591]:SimpleType[25368-25374]"
    }, {
      "left" : "encodeBase64String",
      "right" : "encodeBase64String",
      "info" : "SimpleName[25592-25610]:SimpleName[25375-25393]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[25611-25628]:SingleVariableDeclaration[25394-25411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25630-25712]:Block[25413-25495]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
      "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
      "info" : "ReturnStatement[25640-25706]:ReturnStatement[25423-25489]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26095-26101]:Modifier[25878-25884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26102-26108]:Modifier[25885-25891]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[26109-26115]:ArrayType[25892-25898]"
    }, {
      "left" : "encodeBase64URLSafe",
      "right" : "encodeBase64URLSafe",
      "info" : "SimpleName[26116-26135]:SimpleName[25899-25918]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[26136-26153]:SingleVariableDeclaration[25919-25936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26155-26216]:Block[25938-25999]"
    }, {
      "left" : "return encodeBase64(binaryData, false, true);",
      "right" : "return encodeBase64(binaryData, false, true);",
      "info" : "ReturnStatement[26165-26210]:ReturnStatement[25948-25993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26567-26573]:Modifier[26350-26356]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26574-26580]:Modifier[26357-26363]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[26581-26587]:SimpleType[26364-26370]"
    }, {
      "left" : "encodeBase64URLSafeString",
      "right" : "encodeBase64URLSafeString",
      "info" : "SimpleName[26588-26613]:SimpleName[26371-26396]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[26614-26631]:SingleVariableDeclaration[26397-26414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26633-26721]:Block[26416-26504]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
      "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
      "info" : "ReturnStatement[26643-26715]:ReturnStatement[26426-26498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26993-26999]:Modifier[26776-26782]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27000-27006]:Modifier[26783-26789]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[27007-27013]:ArrayType[26790-26796]"
    }, {
      "left" : "encodeBase64Chunked",
      "right" : "encodeBase64Chunked",
      "info" : "SimpleName[27014-27033]:SimpleName[26797-26816]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[27034-27051]:SingleVariableDeclaration[26817-26834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27053-27107]:Block[26836-26890]"
    }, {
      "left" : "return encodeBase64(binaryData, true);",
      "right" : "return encodeBase64(binaryData, true);",
      "info" : "ReturnStatement[27063-27101]:ReturnStatement[26846-26884]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27651-27657]:Modifier[27434-27440]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[27658-27664]:SimpleType[27441-27447]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[27665-27671]:SimpleName[27448-27454]"
    }, {
      "left" : "Object pObject",
      "right" : "Object pObject",
      "info" : "SingleVariableDeclaration[27672-27686]:SingleVariableDeclaration[27455-27469]"
    }, {
      "left" : "DecoderException",
      "right" : "DecoderException",
      "info" : "SimpleType[27695-27711]:SimpleType[27478-27494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27712-28040]:Block[27495-27823]"
    }, {
      "left" : "if (pObject instanceof byte[])",
      "right" : "if (pObject instanceof byte[])",
      "info" : "IfStatement[27730-28034]:IfStatement[27513-27817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27761-27817]:Block[27544-27600]"
    }, {
      "left" : "return decode((byte[]) pObject);",
      "right" : "return decode((byte[]) pObject);",
      "info" : "ReturnStatement[27775-27807]:ReturnStatement[27558-27590]"
    }, {
      "left" : "if (pObject instanceof String)",
      "right" : "if (pObject instanceof String)",
      "info" : "IfStatement[27823-28034]:IfStatement[27606-27817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27854-27910]:Block[27637-27693]"
    }, {
      "left" : "return decode((String) pObject);",
      "right" : "return decode((String) pObject);",
      "info" : "ReturnStatement[27868-27900]:ReturnStatement[27651-27683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27916-28034]:Block[27699-27817]"
    }, {
      "left" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
      "right" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
      "info" : "ThrowStatement[27930-28024]:ThrowStatement[27713-27807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28289-28295]:Modifier[28072-28078]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[28296-28302]:ArrayType[28079-28085]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[28303-28309]:SimpleName[28086-28092]"
    }, {
      "left" : "String pArray",
      "right" : "String pArray",
      "info" : "SingleVariableDeclaration[28310-28323]:SingleVariableDeclaration[28093-28106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28325-28389]:Block[28108-28172]"
    }, {
      "left" : "return decode(StringUtils.getBytesUtf8(pArray));",
      "right" : "return decode(StringUtils.getBytesUtf8(pArray));",
      "info" : "ReturnStatement[28335-28383]:ReturnStatement[28118-28166]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28625-28631]:Modifier[28408-28414]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[28632-28638]:ArrayType[28415-28421]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[28639-28645]:SimpleName[28422-28428]"
    }, {
      "left" : "byte[] pArray",
      "right" : "byte[] pArray",
      "info" : "SingleVariableDeclaration[28646-28659]:SingleVariableDeclaration[28429-28442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28661-28982]:Block[28444-28765]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[28671-28679]:ExpressionStatement[28454-28462]"
    }, {
      "left" : "if (pArray == null || pArray.length == 0)",
      "right" : "if (pArray == null || pArray.length == 0)",
      "info" : "IfStatement[28688-28768]:IfStatement[28471-28551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28730-28768]:Block[28513-28551]"
    }, {
      "left" : "return pArray;",
      "right" : "return pArray;",
      "info" : "ReturnStatement[28744-28758]:ReturnStatement[28527-28541]"
    }, {
      "left" : "decode(pArray, 0, pArray.length);",
      "right" : "decode(pArray, 0, pArray.length);",
      "info" : "ExpressionStatement[28777-28810]:ExpressionStatement[28560-28593]"
    }, {
      "left" : "decode(pArray, 0, -1);",
      "right" : "decode(pArray, 0, -1);",
      "info" : "ExpressionStatement[28819-28841]:ExpressionStatement[28602-28624]"
    }, {
      "left" : "byte[] result = new byte[pos];",
      "right" : "byte[] result = new byte[pos];",
      "info" : "VariableDeclarationStatement[28876-28906]:VariableDeclarationStatement[28659-28689]"
    }, {
      "left" : "readResults(result, 0, result.length);",
      "right" : "readResults(result, 0, result.length);",
      "info" : "ExpressionStatement[28915-28953]:ExpressionStatement[28698-28736]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28962-28976]:ReturnStatement[28745-28759]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29520-29526]:Modifier[29303-29309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29527-29533]:Modifier[29310-29316]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[29534-29540]:ArrayType[29317-29323]"
    }, {
      "left" : "encodeBase64",
      "right" : "encodeBase64",
      "info" : "SimpleName[29541-29553]:SimpleName[29324-29336]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[29554-29571]:SingleVariableDeclaration[29337-29354]"
    }, {
      "left" : "boolean isChunked",
      "right" : "boolean isChunked",
      "info" : "SingleVariableDeclaration[29573-29590]:SingleVariableDeclaration[29356-29373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29592-29658]:Block[29375-29441]"
    }, {
      "left" : "return encodeBase64(binaryData, isChunked, false);",
      "right" : "return encodeBase64(binaryData, isChunked, false);",
      "info" : "ReturnStatement[29602-29652]:ReturnStatement[29385-29435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30347-30353]:Modifier[30130-30136]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30354-30360]:Modifier[30137-30143]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[30361-30367]:ArrayType[30144-30150]"
    }, {
      "left" : "encodeBase64",
      "right" : "encodeBase64",
      "info" : "SimpleName[30368-30380]:SimpleName[30151-30163]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[30381-30398]:SingleVariableDeclaration[30164-30181]"
    }, {
      "left" : "boolean isChunked",
      "right" : "boolean isChunked",
      "info" : "SingleVariableDeclaration[30400-30417]:SingleVariableDeclaration[30183-30200]"
    }, {
      "left" : "boolean urlSafe",
      "right" : "boolean urlSafe",
      "info" : "SingleVariableDeclaration[30419-30434]:SingleVariableDeclaration[30202-30217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30436-30523]:Block[30219-30306]"
    }, {
      "left" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
      "right" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[30446-30517]:ReturnStatement[30229-30300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31281-31287]:Modifier[31064-31070]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31288-31294]:Modifier[31071-31077]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[31295-31301]:ArrayType[31078-31084]"
    }, {
      "left" : "encodeBase64",
      "right" : "encodeBase64",
      "info" : "SimpleName[31302-31314]:SimpleName[31085-31097]"
    }, {
      "left" : "byte[] binaryData",
      "right" : "byte[] binaryData",
      "info" : "SingleVariableDeclaration[31315-31332]:SingleVariableDeclaration[31098-31115]"
    }, {
      "left" : "boolean isChunked",
      "right" : "boolean isChunked",
      "info" : "SingleVariableDeclaration[31334-31351]:SingleVariableDeclaration[31117-31134]"
    }, {
      "left" : "boolean urlSafe",
      "right" : "boolean urlSafe",
      "info" : "SingleVariableDeclaration[31353-31368]:SingleVariableDeclaration[31136-31151]"
    }, {
      "left" : "int maxResultSize",
      "right" : "int maxResultSize",
      "info" : "SingleVariableDeclaration[31370-31387]:SingleVariableDeclaration[31153-31170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31389-31995]:Block[31172-31778]"
    }, {
      "left" : "if (binaryData == null || binaryData.length == 0)",
      "right" : "if (binaryData == null || binaryData.length == 0)",
      "info" : "IfStatement[31399-31491]:IfStatement[31182-31274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31449-31491]:Block[31232-31274]"
    }, {
      "left" : "return binaryData;",
      "right" : "return binaryData;",
      "info" : "ReturnStatement[31463-31481]:ReturnStatement[31246-31264]"
    }, {
      "left" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
      "right" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
      "info" : "VariableDeclarationStatement[31501-31574]:VariableDeclarationStatement[31284-31357]"
    }, {
      "left" : "if (len > maxResultSize)",
      "right" : "if (len > maxResultSize)",
      "info" : "IfStatement[31583-31837]:IfStatement[31366-31620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31608-31837]:Block[31391-31620]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
      "right" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
      "info" : "ThrowStatement[31622-31827]:ThrowStatement[31405-31610]"
    }, {
      "left" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
      "right" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
      "info" : "VariableDeclarationStatement[31863-31950]:VariableDeclarationStatement[31646-31733]"
    }, {
      "left" : "return b64.encode(binaryData);",
      "right" : "return b64.encode(binaryData);",
      "info" : "ReturnStatement[31959-31989]:ReturnStatement[31742-31772]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32206-32212]:Modifier[31989-31995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32213-32219]:Modifier[31996-32002]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[32220-32226]:ArrayType[32003-32009]"
    }, {
      "left" : "decodeBase64",
      "right" : "decodeBase64",
      "info" : "SimpleName[32227-32239]:SimpleName[32010-32022]"
    }, {
      "left" : "String base64String",
      "right" : "String base64String",
      "info" : "SingleVariableDeclaration[32240-32259]:SingleVariableDeclaration[32023-32042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32261-32318]:Block[32044-32101]"
    }, {
      "left" : "return new Base64().decode(base64String);",
      "right" : "return new Base64().decode(base64String);",
      "info" : "ReturnStatement[32271-32312]:ReturnStatement[32054-32095]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32510-32516]:Modifier[32293-32299]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32517-32523]:Modifier[32300-32306]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[32524-32530]:ArrayType[32307-32313]"
    }, {
      "left" : "decodeBase64",
      "right" : "decodeBase64",
      "info" : "SimpleName[32531-32543]:SimpleName[32314-32326]"
    }, {
      "left" : "byte[] base64Data",
      "right" : "byte[] base64Data",
      "info" : "SingleVariableDeclaration[32544-32561]:SingleVariableDeclaration[32327-32344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32563-32618]:Block[32346-32401]"
    }, {
      "left" : "return new Base64().decode(base64Data);",
      "right" : "return new Base64().decode(base64Data);",
      "info" : "ReturnStatement[32573-32612]:ReturnStatement[32356-32395]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32911-32917]:Modifier[32694-32700]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[32918-32924]:ArrayType[32701-32707]"
    }, {
      "left" : "discardWhitespace",
      "right" : "discardWhitespace",
      "info" : "SimpleName[32925-32942]:SimpleName[32708-32725]"
    }, {
      "left" : "byte[] data",
      "right" : "byte[] data",
      "info" : "SingleVariableDeclaration[32943-32954]:SingleVariableDeclaration[32726-32737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32956-33517]:Block[32739-33300]"
    }, {
      "left" : "byte groomedData[] = new byte[data.length];",
      "right" : "byte groomedData[] = new byte[data.length];",
      "info" : "VariableDeclarationStatement[32966-33009]:VariableDeclarationStatement[32749-32792]"
    }, {
      "left" : "int bytesCopied = 0;",
      "right" : "int bytesCopied = 0;",
      "info" : "VariableDeclarationStatement[33018-33038]:VariableDeclarationStatement[32801-32821]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[33047-33363]:ForStatement[32830-33146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33085-33363]:Block[32868-33146]"
    }, {
      "left" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
      "right" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
      "info" : "SwitchStatement[33099-33353]:SwitchStatement[32882-33136]"
    }, {
      "left" : "case ' ' :",
      "right" : "case ' ' :",
      "info" : "SwitchCase[33134-33144]:SwitchCase[32917-32927]"
    }, {
      "left" : "case '\\n' :",
      "right" : "case '\\n' :",
      "info" : "SwitchCase[33161-33172]:SwitchCase[32944-32955]"
    }, {
      "left" : "case '\\r' :",
      "right" : "case '\\r' :",
      "info" : "SwitchCase[33189-33200]:SwitchCase[32972-32983]"
    }, {
      "left" : "case '\\t' :",
      "right" : "case '\\t' :",
      "info" : "SwitchCase[33217-33228]:SwitchCase[33000-33011]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33249-33255]:BreakStatement[33032-33038]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[33272-33281]:SwitchCase[33055-33064]"
    }, {
      "left" : "groomedData[bytesCopied++] = data[i];",
      "right" : "groomedData[bytesCopied++] = data[i];",
      "info" : "ExpressionStatement[33302-33339]:ExpressionStatement[33085-33122]"
    }, {
      "left" : "byte packedData[] = new byte[bytesCopied];",
      "right" : "byte packedData[] = new byte[bytesCopied];",
      "info" : "VariableDeclarationStatement[33372-33414]:VariableDeclarationStatement[33155-33197]"
    }, {
      "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
      "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
      "info" : "ExpressionStatement[33423-33484]:ExpressionStatement[33206-33267]"
    }, {
      "left" : "return packedData;",
      "right" : "return packedData;",
      "info" : "ReturnStatement[33493-33511]:ReturnStatement[33276-33294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33720-33727]:Modifier[33503-33510]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33728-33734]:Modifier[33511-33517]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33735-33742]:PrimitiveType[33518-33525]"
    }, {
      "left" : "isWhiteSpace",
      "right" : "isWhiteSpace",
      "info" : "SimpleName[33743-33755]:SimpleName[33526-33538]"
    }, {
      "left" : "byte byteToCheck",
      "right" : "byte byteToCheck",
      "info" : "SingleVariableDeclaration[33756-33772]:SingleVariableDeclaration[33539-33555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33774-33998]:Block[33557-33781]"
    }, {
      "left" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
      "right" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
      "info" : "SwitchStatement[33784-33992]:SwitchStatement[33567-33775]"
    }, {
      "left" : "case ' ' :",
      "right" : "case ' ' :",
      "info" : "SwitchCase[33819-33829]:SwitchCase[33602-33612]"
    }, {
      "left" : "case '\\n' :",
      "right" : "case '\\n' :",
      "info" : "SwitchCase[33842-33853]:SwitchCase[33625-33636]"
    }, {
      "left" : "case '\\r' :",
      "right" : "case '\\r' :",
      "info" : "SwitchCase[33866-33877]:SwitchCase[33649-33660]"
    }, {
      "left" : "case '\\t' :",
      "right" : "case '\\t' :",
      "info" : "SwitchCase[33890-33901]:SwitchCase[33673-33684]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33918-33930]:ReturnStatement[33701-33713]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[33943-33952]:SwitchCase[33726-33735]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33969-33982]:ReturnStatement[33752-33765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34579-34585]:Modifier[34362-34368]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[34586-34592]:SimpleType[34369-34375]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[34593-34599]:SimpleName[34376-34382]"
    }, {
      "left" : "Object pObject",
      "right" : "Object pObject",
      "info" : "SingleVariableDeclaration[34600-34614]:SingleVariableDeclaration[34383-34397]"
    }, {
      "left" : "EncoderException",
      "right" : "EncoderException",
      "info" : "SimpleType[34623-34639]:SimpleType[34406-34422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34640-34837]:Block[34423-34620]"
    }, {
      "left" : "if (!(pObject instanceof byte[]))",
      "right" : "if (!(pObject instanceof byte[]))",
      "info" : "IfStatement[34650-34790]:IfStatement[34433-34573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34684-34790]:Block[34467-34573]"
    }, {
      "left" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
      "right" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
      "info" : "ThrowStatement[34698-34780]:ThrowStatement[34481-34563]"
    }, {
      "left" : "return encode((byte[]) pObject);",
      "right" : "return encode((byte[]) pObject);",
      "info" : "ReturnStatement[34799-34831]:ReturnStatement[34582-34614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35133-35139]:Modifier[34916-34922]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35140-35146]:SimpleType[34923-34929]"
    }, {
      "left" : "encodeToString",
      "right" : "encodeToString",
      "info" : "SimpleName[35147-35161]:SimpleName[34930-34944]"
    }, {
      "left" : "byte[] pArray",
      "right" : "byte[] pArray",
      "info" : "SingleVariableDeclaration[35162-35175]:SingleVariableDeclaration[34945-34958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35177-35242]:Block[34960-35025]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encode(pArray));",
      "right" : "return StringUtils.newStringUtf8(encode(pArray));",
      "info" : "ReturnStatement[35187-35236]:ReturnStatement[34970-35019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35521-35527]:Modifier[35304-35310]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[35528-35534]:ArrayType[35311-35317]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[35535-35541]:SimpleName[35318-35324]"
    }, {
      "left" : "byte[] pArray",
      "right" : "byte[] pArray",
      "info" : "SingleVariableDeclaration[35542-35555]:SingleVariableDeclaration[35325-35338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35557-35884]:Block[35340-35667]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[35567-35575]:ExpressionStatement[35350-35358]"
    }, {
      "left" : "if (pArray == null || pArray.length == 0)",
      "right" : "if (pArray == null || pArray.length == 0)",
      "info" : "IfStatement[35592-35672]:IfStatement[35375-35455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35634-35672]:Block[35417-35455]"
    }, {
      "left" : "return pArray;",
      "right" : "return pArray;",
      "info" : "ReturnStatement[35648-35662]:ReturnStatement[35431-35445]"
    }, {
      "left" : "encode(pArray, 0, pArray.length);",
      "right" : "encode(pArray, 0, pArray.length);",
      "info" : "ExpressionStatement[35681-35714]:ExpressionStatement[35464-35497]"
    }, {
      "left" : "encode(pArray, 0, -1);",
      "right" : "encode(pArray, 0, -1);",
      "info" : "ExpressionStatement[35723-35745]:ExpressionStatement[35506-35528]"
    }, {
      "left" : "byte[] buf = new byte[pos - readPos];",
      "right" : "byte[] buf = new byte[pos - readPos];",
      "info" : "VariableDeclarationStatement[35780-35817]:VariableDeclarationStatement[35563-35600]"
    }, {
      "left" : "readResults(buf, 0, buf.length);",
      "right" : "readResults(buf, 0, buf.length);",
      "info" : "ExpressionStatement[35826-35858]:ExpressionStatement[35609-35641]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[35867-35878]:ReturnStatement[35650-35661]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36456-36463]:Modifier[36239-36246]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36464-36470]:Modifier[36247-36253]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[36471-36475]:PrimitiveType[36254-36258]"
    }, {
      "left" : "getEncodeLength",
      "right" : "getEncodeLength",
      "info" : "SimpleName[36476-36491]:SimpleName[36259-36274]"
    }, {
      "left" : "byte[] pArray",
      "right" : "byte[] pArray",
      "info" : "SingleVariableDeclaration[36492-36505]:SingleVariableDeclaration[36275-36288]"
    }, {
      "left" : "int chunkSize",
      "right" : "int chunkSize",
      "info" : "SingleVariableDeclaration[36507-36520]:SingleVariableDeclaration[36290-36303]"
    }, {
      "left" : "byte[] chunkSeparator",
      "right" : "byte[] chunkSeparator",
      "info" : "SingleVariableDeclaration[36522-36543]:SingleVariableDeclaration[36305-36326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36545-37063]:Block[36328-36846]"
    }, {
      "left" : "chunkSize = (chunkSize / 4) * 4;",
      "right" : "chunkSize = (chunkSize / 4) * 4;",
      "info" : "ExpressionStatement[36607-36639]:ExpressionStatement[36390-36422]"
    }, {
      "left" : "long len = (pArray.length * 4) / 3;",
      "right" : "long len = (pArray.length * 4) / 3;",
      "info" : "VariableDeclarationStatement[36649-36684]:VariableDeclarationStatement[36432-36467]"
    }, {
      "left" : "long mod = len % 4;",
      "right" : "long mod = len % 4;",
      "info" : "VariableDeclarationStatement[36693-36712]:VariableDeclarationStatement[36476-36495]"
    }, {
      "left" : "if (mod != 0)",
      "right" : "if (mod != 0)",
      "info" : "IfStatement[36721-36774]:IfStatement[36504-36557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36735-36774]:Block[36518-36557]"
    }, {
      "left" : "len += 4 - mod;",
      "right" : "len += 4 - mod;",
      "info" : "ExpressionStatement[36749-36764]:ExpressionStatement[36532-36547]"
    }, {
      "left" : "if (chunkSize > 0)",
      "right" : "if (chunkSize > 0)",
      "info" : "IfStatement[36783-37037]:IfStatement[36566-36820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36802-37037]:Block[36585-36820]"
    }, {
      "left" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
      "right" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
      "info" : "VariableDeclarationStatement[36816-36866]:VariableDeclarationStatement[36599-36649]"
    }, {
      "left" : "len += (len / chunkSize) * chunkSeparator.length;",
      "right" : "len += (len / chunkSize) * chunkSeparator.length;",
      "info" : "ExpressionStatement[36879-36928]:ExpressionStatement[36662-36711]"
    }, {
      "left" : "if (!lenChunksPerfectly)",
      "right" : "if (!lenChunksPerfectly)",
      "info" : "IfStatement[36941-37027]:IfStatement[36724-36810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36966-37027]:Block[36749-36810]"
    }, {
      "left" : "len += chunkSeparator.length;",
      "right" : "len += chunkSeparator.length;",
      "info" : "ExpressionStatement[36984-37013]:ExpressionStatement[36767-36796]"
    }, {
      "left" : "return len;",
      "right" : "return len;",
      "info" : "ReturnStatement[37046-37057]:ReturnStatement[36829-36840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37380-37386]:Modifier[37163-37169]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37387-37393]:Modifier[37170-37176]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[37394-37404]:SimpleType[37177-37187]"
    }, {
      "left" : "decodeInteger",
      "right" : "decodeInteger",
      "info" : "SimpleName[37405-37418]:SimpleName[37188-37201]"
    }, {
      "left" : "byte[] pArray",
      "right" : "byte[] pArray",
      "info" : "SingleVariableDeclaration[37419-37432]:SingleVariableDeclaration[37202-37215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37434-37497]:Block[37217-37280]"
    }, {
      "left" : "return new BigInteger(1, decodeBase64(pArray));",
      "right" : "return new BigInteger(1, decodeBase64(pArray));",
      "info" : "ReturnStatement[37444-37491]:ReturnStatement[37227-37274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37835-37841]:Modifier[37618-37624]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37842-37848]:Modifier[37625-37631]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[37849-37855]:ArrayType[37632-37638]"
    }, {
      "left" : "encodeInteger",
      "right" : "encodeInteger",
      "info" : "SimpleName[37856-37869]:SimpleName[37639-37652]"
    }, {
      "left" : "BigInteger bigInt",
      "right" : "BigInteger bigInt",
      "info" : "SingleVariableDeclaration[37870-37887]:SingleVariableDeclaration[37653-37670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37889-38084]:Block[37672-37867]"
    }, {
      "left" : "if (bigInt == null)",
      "right" : "if (bigInt == null)",
      "info" : "IfStatement[37899-38018]:IfStatement[37682-37801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37919-38018]:Block[37702-37801]"
    }, {
      "left" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
      "right" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
      "info" : "ThrowStatement[37933-38008]:ThrowStatement[37716-37791]"
    }, {
      "left" : "return encodeBase64(toIntegerBytes(bigInt), false);",
      "right" : "return encodeBase64(toIntegerBytes(bigInt), false);",
      "info" : "ReturnStatement[38027-38078]:ReturnStatement[37810-37861]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38354-38360]:Modifier[38137-38143]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[38361-38367]:ArrayType[38144-38150]"
    }, {
      "left" : "toIntegerBytes",
      "right" : "toIntegerBytes",
      "info" : "SimpleName[38368-38382]:SimpleName[38151-38165]"
    }, {
      "left" : "BigInteger bigInt",
      "right" : "BigInteger bigInt",
      "info" : "SingleVariableDeclaration[38383-38400]:SingleVariableDeclaration[38166-38183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38402-39227]:Block[38185-39010]"
    }, {
      "left" : "int bitlen = bigInt.bitLength();",
      "right" : "int bitlen = bigInt.bitLength();",
      "info" : "VariableDeclarationStatement[38412-38444]:VariableDeclarationStatement[38195-38227]"
    }, {
      "left" : "bitlen = ((bitlen + 7) >> 3) << 3;",
      "right" : "bitlen = ((bitlen + 7) >> 3) << 3;",
      "info" : "ExpressionStatement[38477-38511]:ExpressionStatement[38260-38294]"
    }, {
      "left" : "byte[] bigBytes = bigInt.toByteArray();",
      "right" : "byte[] bigBytes = bigInt.toByteArray();",
      "info" : "VariableDeclarationStatement[38520-38559]:VariableDeclarationStatement[38303-38342]"
    }, {
      "left" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
      "right" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
      "info" : "IfStatement[38569-38698]:IfStatement[38352-38481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38658-38698]:Block[38441-38481]"
    }, {
      "left" : "return bigBytes;",
      "right" : "return bigBytes;",
      "info" : "ReturnStatement[38672-38688]:ReturnStatement[38455-38471]"
    }, {
      "left" : "int startSrc = 0;",
      "right" : "int startSrc = 0;",
      "info" : "VariableDeclarationStatement[38768-38785]:VariableDeclarationStatement[38551-38568]"
    }, {
      "left" : "int len = bigBytes.length;",
      "right" : "int len = bigBytes.length;",
      "info" : "VariableDeclarationStatement[38794-38820]:VariableDeclarationStatement[38577-38603]"
    }, {
      "left" : "if ((bigInt.bitLength() % 8) == 0)",
      "right" : "if ((bigInt.bitLength() % 8) == 0)",
      "info" : "IfStatement[38902-38993]:IfStatement[38685-38776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38937-38993]:Block[38720-38776]"
    }, {
      "left" : "startSrc = 1;",
      "right" : "startSrc = 1;",
      "info" : "ExpressionStatement[38951-38964]:ExpressionStatement[38734-38747]"
    }, {
      "left" : "len--;",
      "right" : "len--;",
      "info" : "ExpressionStatement[38977-38983]:ExpressionStatement[38760-38766]"
    }, {
      "left" : "int startDst = bitlen / 8 - len;",
      "right" : "int startDst = bitlen / 8 - len;",
      "info" : "VariableDeclarationStatement[39002-39034]:VariableDeclarationStatement[38785-38817]"
    }, {
      "left" : "byte[] resizedBytes = new byte[bitlen / 8];",
      "right" : "byte[] resizedBytes = new byte[bitlen / 8];",
      "info" : "VariableDeclarationStatement[39074-39117]:VariableDeclarationStatement[38857-38900]"
    }, {
      "left" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
      "right" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
      "info" : "ExpressionStatement[39126-39192]:ExpressionStatement[38909-38975]"
    }, {
      "left" : "return resizedBytes;",
      "right" : "return resizedBytes;",
      "info" : "ReturnStatement[39201-39221]:ReturnStatement[38984-39004]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39322-39329]:Modifier[39105-39112]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39330-39334]:PrimitiveType[39113-39117]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[39335-39340]:SimpleName[39118-39123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39343-39481]:Block[39126-39264]"
    }, {
      "left" : "buffer = null;",
      "right" : "buffer = null;",
      "info" : "ExpressionStatement[39353-39367]:ExpressionStatement[39136-39150]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[39376-39384]:ExpressionStatement[39159-39167]"
    }, {
      "left" : "readPos = 0;",
      "right" : "readPos = 0;",
      "info" : "ExpressionStatement[39393-39405]:ExpressionStatement[39176-39188]"
    }, {
      "left" : "currentLinePos = 0;",
      "right" : "currentLinePos = 0;",
      "info" : "ExpressionStatement[39414-39433]:ExpressionStatement[39197-39216]"
    }, {
      "left" : "modulus = 0;",
      "right" : "modulus = 0;",
      "info" : "ExpressionStatement[39442-39454]:ExpressionStatement[39225-39237]"
    }, {
      "left" : "eof = false;",
      "right" : "eof = false;",
      "info" : "ExpressionStatement[39463-39475]:ExpressionStatement[39246-39258]"
    } ]
  },
  "interFileMappings" : { }
}