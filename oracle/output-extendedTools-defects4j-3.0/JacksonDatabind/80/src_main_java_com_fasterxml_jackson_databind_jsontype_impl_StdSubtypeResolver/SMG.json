{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StdSubtypeResolver",
      "right" : "StdSubtypeResolver",
      "info" : "TypeDeclaration[452-12129]:TypeDeclaration[452-12221]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[614-662]:FieldDeclaration[614-662]"
    }, {
      "left" : "protected LinkedHashSet<NamedType> _registeredSubtypes;",
      "right" : "protected LinkedHashSet<NamedType> _registeredSubtypes;",
      "info" : "FieldDeclaration[668-723]:FieldDeclaration[668-723]"
    }, {
      "left" : "public StdSubtypeResolver()",
      "right" : "public StdSubtypeResolver()",
      "info" : "MethodDeclaration[729-760]:MethodDeclaration[729-760]"
    }, {
      "left" : "public void registerSubtypes(NamedType... types)",
      "right" : "public void registerSubtypes(NamedType... types)",
      "info" : "MethodDeclaration[938-1223]:MethodDeclaration[938-1223]"
    }, {
      "left" : "public void registerSubtypes(Class<?>... classes)",
      "right" : "public void registerSubtypes(Class<?>... classes)",
      "info" : "MethodDeclaration[1229-1514]:MethodDeclaration[1229-1514]"
    }, {
      "left" : "public Collection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config, \n            AnnotatedMember property, JavaType baseType)",
      "right" : "public Collection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config, \n            AnnotatedMember property, JavaType baseType)",
      "info" : "MethodDeclaration[1707-3586]:MethodDeclaration[1707-3632]"
    }, {
      "left" : "public Collection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config,\n            AnnotatedClass type)",
      "right" : "public Collection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config,\n            AnnotatedClass type)",
      "info" : "MethodDeclaration[3592-4802]:MethodDeclaration[3638-4848]"
    }, {
      "left" : "public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config, \n            AnnotatedMember property, JavaType baseType)",
      "right" : "public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config, \n            AnnotatedMember property, JavaType baseType)",
      "info" : "MethodDeclaration[4997-6896]:MethodDeclaration[5043-6988]"
    }, {
      "left" : "public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config,\n            AnnotatedClass baseType)",
      "right" : "public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config,\n            AnnotatedClass baseType)",
      "info" : "MethodDeclaration[6902-7980]:MethodDeclaration[6994-8072]"
    }, {
      "left" : "protected void _collectAndResolve(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig<?> config, AnnotationIntrospector ai,\n            HashMap<NamedType, NamedType> collectedSubtypes)",
      "right" : "protected void _collectAndResolve(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig<?> config, AnnotationIntrospector ai,\n            HashMap<NamedType, NamedType> collectedSubtypes)",
      "info" : "MethodDeclaration[8154-9731]:MethodDeclaration[8246-9823]"
    }, {
      "left" : "protected void _collectAndResolveByTypeId(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig<?> config,\n            Set<Class<?>> typesHandled, Map<String,NamedType> byName)",
      "right" : "protected void _collectAndResolveByTypeId(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig<?> config,\n            Set<Class<?>> typesHandled, Map<String,NamedType> byName)",
      "info" : "MethodDeclaration[9737-11076]:MethodDeclaration[9829-11168]"
    }, {
      "left" : "protected Collection<NamedType> _combineNamedAndUnnamed(Class<?> rawBase,\n            Set<Class<?>> typesHandled, Map<String,NamedType> byName)",
      "right" : "protected Collection<NamedType> _combineNamedAndUnnamed(Class<?> rawBase,\n            Set<Class<?>> typesHandled, Map<String,NamedType> byName)",
      "info" : "MethodDeclaration[11082-12127]:MethodDeclaration[11174-12219]"
    } ],
    "mappings" : [
 {
      "left" : "SubtypeResolver",
      "right" : "SubtypeResolver",
      "info" : "SimpleType[556-571]:SimpleType[556-571]"
    }, {
      "left" : "java.io.Serializable",
      "right" : "java.io.Serializable",
      "info" : "SimpleType[587-607]:SimpleType[587-607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[729-735]:Modifier[729-735]"
    }, {
      "left" : "StdSubtypeResolver",
      "right" : "StdSubtypeResolver",
      "info" : "SimpleName[736-754]:SimpleName[736-754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[757-760]:Block[757-760]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[938-947]:MarkerAnnotation[938-947]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[956-962]:Modifier[956-962]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[963-967]:PrimitiveType[963-967]"
    }, {
      "left" : "registerSubtypes",
      "right" : "registerSubtypes",
      "info" : "SimpleName[968-984]:SimpleName[968-984]"
    }, {
      "left" : "NamedType... types",
      "right" : "NamedType... types",
      "info" : "SingleVariableDeclaration[985-1003]:SingleVariableDeclaration[985-1003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1005-1223]:Block[1005-1223]"
    }, {
      "left" : "if (_registeredSubtypes == null)",
      "right" : "if (_registeredSubtypes == null)",
      "info" : "IfStatement[1015-1125]:IfStatement[1015-1125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1048-1125]:Block[1048-1125]"
    }, {
      "left" : "_registeredSubtypes = new LinkedHashSet<NamedType>();",
      "right" : "_registeredSubtypes = new LinkedHashSet<NamedType>();",
      "info" : "ExpressionStatement[1062-1115]:ExpressionStatement[1062-1115]"
    }, {
      "left" : "for (NamedType type : types)",
      "right" : "for (NamedType type : types)",
      "info" : "EnhancedForStatement[1134-1217]:EnhancedForStatement[1134-1217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1163-1217]:Block[1163-1217]"
    }, {
      "left" : "_registeredSubtypes.add(type);",
      "right" : "_registeredSubtypes.add(type);",
      "info" : "ExpressionStatement[1177-1207]:ExpressionStatement[1177-1207]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1229-1238]:MarkerAnnotation[1229-1238]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1243-1249]:Modifier[1243-1249]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1250-1254]:PrimitiveType[1250-1254]"
    }, {
      "left" : "registerSubtypes",
      "right" : "registerSubtypes",
      "info" : "SimpleName[1255-1271]:SimpleName[1255-1271]"
    }, {
      "left" : "Class<?>... classes",
      "right" : "Class<?>... classes",
      "info" : "SingleVariableDeclaration[1272-1291]:SingleVariableDeclaration[1272-1291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1293-1514]:Block[1293-1514]"
    }, {
      "left" : "NamedType[] types = new NamedType[classes.length];",
      "right" : "NamedType[] types = new NamedType[classes.length];",
      "info" : "VariableDeclarationStatement[1303-1353]:VariableDeclarationStatement[1303-1353]"
    }, {
      "left" : "for (int i = 0, len = classes.length; i < len; ++i)",
      "right" : "for (int i = 0, len = classes.length; i < len; ++i)",
      "info" : "ForStatement[1362-1475]:ForStatement[1362-1475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1414-1475]:Block[1414-1475]"
    }, {
      "left" : "types[i] = new NamedType(classes[i]);",
      "right" : "types[i] = new NamedType(classes[i]);",
      "info" : "ExpressionStatement[1428-1465]:ExpressionStatement[1428-1465]"
    }, {
      "left" : "registerSubtypes(types);",
      "right" : "registerSubtypes(types);",
      "info" : "ExpressionStatement[1484-1508]:ExpressionStatement[1484-1508]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1707-1716]:MarkerAnnotation[1707-1716]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1721-1727]:Modifier[1721-1727]"
    }, {
      "left" : "Collection<NamedType>",
      "right" : "Collection<NamedType>",
      "info" : "ParameterizedType[1728-1749]:ParameterizedType[1728-1749]"
    }, {
      "left" : "collectAndResolveSubtypesByClass",
      "right" : "collectAndResolveSubtypesByClass",
      "info" : "SimpleName[1750-1782]:SimpleName[1750-1782]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[1783-1805]:SingleVariableDeclaration[1783-1805]"
    }, {
      "left" : "AnnotatedMember property",
      "right" : "AnnotatedMember property",
      "info" : "SingleVariableDeclaration[1820-1844]:SingleVariableDeclaration[1820-1844]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[1846-1863]:SingleVariableDeclaration[1846-1863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1869-3586]:Block[1869-3632]"
    }, {
      "left" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[1879-1948]:VariableDeclarationStatement[1879-1948]"
    }, {
      "left" : "Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();",
      "right" : "Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[2019-2106]:VariableDeclarationStatement[2019-2106]"
    }, {
      "left" : "HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType>();",
      "right" : "HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType>();",
      "info" : "VariableDeclarationStatement[2124-2202]:VariableDeclarationStatement[2124-2202]"
    }, {
      "left" : "if (_registeredSubtypes != null)",
      "right" : "if (_registeredSubtypes != null)",
      "info" : "IfStatement[2277-2760]:IfStatement[2277-2760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2310-2760]:Block[2310-2760]"
    }, {
      "left" : "for (NamedType subtype : _registeredSubtypes)",
      "right" : "for (NamedType subtype : _registeredSubtypes)",
      "info" : "EnhancedForStatement[2324-2750]:EnhancedForStatement[2324-2750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2370-2750]:Block[2370-2750]"
    }, {
      "left" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "right" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "info" : "IfStatement[2437-2736]:IfStatement[2437-2736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2486-2736]:Block[2486-2736]"
    }, {
      "left" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "right" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "info" : "VariableDeclarationStatement[2515-2640]:VariableDeclarationStatement[2515-2640]"
    }, {
      "left" : "_collectAndResolve(curr, subtype, config, ai, collected);",
      "right" : "_collectAndResolve(curr, subtype, config, ai, collected);",
      "info" : "ExpressionStatement[2661-2718]:ExpressionStatement[2661-2718]"
    }, {
      "left" : "Collection<NamedType> st = ai.findSubtypes(property);",
      "right" : "Collection<NamedType> st = ai.findSubtypes(property);",
      "info" : "VariableDeclarationStatement[2834-2887]:VariableDeclarationStatement[2866-2919]"
    }, {
      "left" : "if (st != null)",
      "right" : "if (st != null)",
      "info" : "IfStatement[2900-3209]:IfStatement[2932-3245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-3209]:Block[2948-3245]"
    }, {
      "left" : "for (NamedType nt : st)",
      "right" : "for (NamedType nt : st)",
      "info" : "EnhancedForStatement[2934-3187]:EnhancedForStatement[2966-3219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2958-3187]:Block[2990-3219]"
    }, {
      "left" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            nt.getType());",
      "right" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            nt.getType());",
      "info" : "VariableDeclarationStatement[2980-3098]:VariableDeclarationStatement[3012-3130]"
    }, {
      "left" : "_collectAndResolve(ac, nt, config, ai, collected);",
      "right" : "_collectAndResolve(ac, nt, config, ai, collected);",
      "info" : "ExpressionStatement[3119-3169]:ExpressionStatement[3151-3201]"
    }, {
      "left" : "NamedType rootType = new NamedType(rawBase, null);",
      "right" : "NamedType rootType = new NamedType(rawBase, null);",
      "info" : "VariableDeclarationStatement[3219-3269]:VariableDeclarationStatement[3265-3315]"
    }, {
      "left" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);",
      "right" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);",
      "info" : "VariableDeclarationStatement[3278-3363]:VariableDeclarationStatement[3324-3409]"
    }, {
      "left" : "_collectAndResolve(ac, rootType, config, ai, collected);",
      "right" : "_collectAndResolve(ac, rootType, config, ai, collected);",
      "info" : "ExpressionStatement[3462-3518]:ExpressionStatement[3508-3564]"
    }, {
      "left" : "return new ArrayList<NamedType>(collected.values());",
      "right" : "return new ArrayList<NamedType>(collected.values());",
      "info" : "ReturnStatement[3528-3580]:ReturnStatement[3574-3626]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3592-3601]:MarkerAnnotation[3638-3647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3606-3612]:Modifier[3652-3658]"
    }, {
      "left" : "Collection<NamedType>",
      "right" : "Collection<NamedType>",
      "info" : "ParameterizedType[3613-3634]:ParameterizedType[3659-3680]"
    }, {
      "left" : "collectAndResolveSubtypesByClass",
      "right" : "collectAndResolveSubtypesByClass",
      "info" : "SimpleName[3635-3667]:SimpleName[3681-3713]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[3668-3690]:SingleVariableDeclaration[3714-3736]"
    }, {
      "left" : "AnnotatedClass type",
      "right" : "AnnotatedClass type",
      "info" : "SingleVariableDeclaration[3704-3723]:SingleVariableDeclaration[3750-3769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3729-4802]:Block[3775-4848]"
    }, {
      "left" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[3739-3808]:VariableDeclarationStatement[3785-3854]"
    }, {
      "left" : "HashMap<NamedType, NamedType> subtypes = new HashMap<NamedType, NamedType>();",
      "right" : "HashMap<NamedType, NamedType> subtypes = new HashMap<NamedType, NamedType>();",
      "info" : "VariableDeclarationStatement[3817-3894]:VariableDeclarationStatement[3863-3940]"
    }, {
      "left" : "if (_registeredSubtypes != null)",
      "right" : "if (_registeredSubtypes != null)",
      "info" : "IfStatement[3989-4521]:IfStatement[4035-4567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4022-4521]:Block[4068-4567]"
    }, {
      "left" : "Class<?> rawBase = type.getRawType();",
      "right" : "Class<?> rawBase = type.getRawType();",
      "info" : "VariableDeclarationStatement[4036-4073]:VariableDeclarationStatement[4082-4119]"
    }, {
      "left" : "for (NamedType subtype : _registeredSubtypes)",
      "right" : "for (NamedType subtype : _registeredSubtypes)",
      "info" : "EnhancedForStatement[4086-4511]:EnhancedForStatement[4132-4557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4132-4511]:Block[4178-4557]"
    }, {
      "left" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "right" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "info" : "IfStatement[4199-4497]:IfStatement[4245-4543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4248-4497]:Block[4294-4543]"
    }, {
      "left" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "right" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "info" : "VariableDeclarationStatement[4277-4402]:VariableDeclarationStatement[4323-4448]"
    }, {
      "left" : "_collectAndResolve(curr, subtype, config, ai, subtypes);",
      "right" : "_collectAndResolve(curr, subtype, config, ai, subtypes);",
      "info" : "ExpressionStatement[4423-4479]:ExpressionStatement[4469-4525]"
    }, {
      "left" : "NamedType rootType = new NamedType(type.getRawType(), null);",
      "right" : "NamedType rootType = new NamedType(type.getRawType(), null);",
      "info" : "VariableDeclarationStatement[4610-4670]:VariableDeclarationStatement[4656-4716]"
    }, {
      "left" : "_collectAndResolve(type, rootType, config, ai, subtypes);",
      "right" : "_collectAndResolve(type, rootType, config, ai, subtypes);",
      "info" : "ExpressionStatement[4679-4736]:ExpressionStatement[4725-4782]"
    }, {
      "left" : "return new ArrayList<NamedType>(subtypes.values());",
      "right" : "return new ArrayList<NamedType>(subtypes.values());",
      "info" : "ReturnStatement[4745-4796]:ReturnStatement[4791-4842]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4997-5006]:MarkerAnnotation[5043-5052]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5011-5017]:Modifier[5057-5063]"
    }, {
      "left" : "Collection<NamedType>",
      "right" : "Collection<NamedType>",
      "info" : "ParameterizedType[5018-5039]:ParameterizedType[5064-5085]"
    }, {
      "left" : "collectAndResolveSubtypesByTypeId",
      "right" : "collectAndResolveSubtypesByTypeId",
      "info" : "SimpleName[5040-5073]:SimpleName[5086-5119]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[5074-5096]:SingleVariableDeclaration[5120-5142]"
    }, {
      "left" : "AnnotatedMember property",
      "right" : "AnnotatedMember property",
      "info" : "SingleVariableDeclaration[5111-5135]:SingleVariableDeclaration[5157-5181]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[5137-5154]:SingleVariableDeclaration[5183-5200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5160-6896]:Block[5206-6988]"
    }, {
      "left" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[5170-5239]:VariableDeclarationStatement[5216-5285]"
    }, {
      "left" : "Class<?> rawBase = baseType.getRawClass();",
      "right" : "Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[5248-5290]:VariableDeclarationStatement[5294-5336]"
    }, {
      "left" : "Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
      "right" : "Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
      "info" : "VariableDeclarationStatement[5373-5426]:VariableDeclarationStatement[5419-5472]"
    }, {
      "left" : "Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
      "right" : "Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
      "info" : "VariableDeclarationStatement[5435-5504]:VariableDeclarationStatement[5481-5550]"
    }, {
      "left" : "NamedType rootType = new NamedType(rawBase, null);",
      "right" : "NamedType rootType = new NamedType(rawBase, null);",
      "info" : "VariableDeclarationStatement[5584-5634]:VariableDeclarationStatement[5630-5680]"
    }, {
      "left" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                rawBase);",
      "right" : "AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                rawBase);",
      "info" : "VariableDeclarationStatement[5643-5744]:VariableDeclarationStatement[5689-5790]"
    }, {
      "left" : "_collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);",
      "info" : "ExpressionStatement[5753-5824]:ExpressionStatement[5799-5870]"
    }, {
      "left" : "Collection<NamedType> st = ai.findSubtypes(property);",
      "right" : "Collection<NamedType> st = ai.findSubtypes(property);",
      "info" : "VariableDeclarationStatement[5893-5946]:VariableDeclarationStatement[5971-6024]"
    }, {
      "left" : "if (st != null)",
      "right" : "if (st != null)",
      "info" : "IfStatement[5959-6240]:IfStatement[6037-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5975-6240]:Block[6053-6322]"
    }, {
      "left" : "for (NamedType nt : st)",
      "right" : "for (NamedType nt : st)",
      "info" : "EnhancedForStatement[5993-6218]:EnhancedForStatement[6071-6296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6017-6218]:Block[6095-6296]"
    }, {
      "left" : "ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());",
      "right" : "ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());",
      "info" : "ExpressionStatement[6039-6114]:ExpressionStatement[6117-6192]"
    }, {
      "left" : "_collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);",
      "info" : "ExpressionStatement[6135-6200]:ExpressionStatement[6213-6278]"
    }, {
      "left" : "if (_registeredSubtypes != null)",
      "right" : "if (_registeredSubtypes != null)",
      "info" : "IfStatement[6321-6819]:IfStatement[6413-6911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6354-6819]:Block[6446-6911]"
    }, {
      "left" : "for (NamedType subtype : _registeredSubtypes)",
      "right" : "for (NamedType subtype : _registeredSubtypes)",
      "info" : "EnhancedForStatement[6368-6809]:EnhancedForStatement[6460-6901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6414-6809]:Block[6506-6901]"
    }, {
      "left" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "right" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "info" : "IfStatement[6481-6795]:IfStatement[6573-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6530-6795]:Block[6622-6887]"
    }, {
      "left" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "right" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "info" : "VariableDeclarationStatement[6559-6684]:VariableDeclarationStatement[6651-6776]"
    }, {
      "left" : "_collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);",
      "info" : "ExpressionStatement[6705-6777]:ExpressionStatement[6797-6869]"
    }, {
      "left" : "return _combineNamedAndUnnamed(rawBase, typesHandled, byName);",
      "right" : "return _combineNamedAndUnnamed(rawBase, typesHandled, byName);",
      "info" : "ReturnStatement[6828-6890]:ReturnStatement[6920-6982]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6902-6911]:MarkerAnnotation[6994-7003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6916-6922]:Modifier[7008-7014]"
    }, {
      "left" : "Collection<NamedType>",
      "right" : "Collection<NamedType>",
      "info" : "ParameterizedType[6923-6944]:ParameterizedType[7015-7036]"
    }, {
      "left" : "collectAndResolveSubtypesByTypeId",
      "right" : "collectAndResolveSubtypesByTypeId",
      "info" : "SimpleName[6945-6978]:SimpleName[7037-7070]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[6979-7001]:SingleVariableDeclaration[7071-7093]"
    }, {
      "left" : "AnnotatedClass baseType",
      "right" : "AnnotatedClass baseType",
      "info" : "SingleVariableDeclaration[7015-7038]:SingleVariableDeclaration[7107-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7044-7980]:Block[7136-8072]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawType();",
      "right" : "final Class<?> rawBase = baseType.getRawType();",
      "info" : "VariableDeclarationStatement[7054-7101]:VariableDeclarationStatement[7146-7193]"
    }, {
      "left" : "Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
      "right" : "Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
      "info" : "VariableDeclarationStatement[7110-7163]:VariableDeclarationStatement[7202-7255]"
    }, {
      "left" : "Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
      "right" : "Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
      "info" : "VariableDeclarationStatement[7172-7241]:VariableDeclarationStatement[7264-7333]"
    }, {
      "left" : "NamedType rootType = new NamedType(rawBase, null);",
      "right" : "NamedType rootType = new NamedType(rawBase, null);",
      "info" : "VariableDeclarationStatement[7251-7301]:VariableDeclarationStatement[7343-7393]"
    }, {
      "left" : "_collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);",
      "info" : "ExpressionStatement[7310-7387]:ExpressionStatement[7402-7479]"
    }, {
      "left" : "if (_registeredSubtypes != null)",
      "right" : "if (_registeredSubtypes != null)",
      "info" : "IfStatement[7405-7903]:IfStatement[7497-7995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7438-7903]:Block[7530-7995]"
    }, {
      "left" : "for (NamedType subtype : _registeredSubtypes)",
      "right" : "for (NamedType subtype : _registeredSubtypes)",
      "info" : "EnhancedForStatement[7452-7893]:EnhancedForStatement[7544-7985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7498-7893]:Block[7590-7985]"
    }, {
      "left" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "right" : "if (rawBase.isAssignableFrom(subtype.getType()))",
      "info" : "IfStatement[7565-7879]:IfStatement[7657-7971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7614-7879]:Block[7706-7971]"
    }, {
      "left" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "right" : "AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "info" : "VariableDeclarationStatement[7643-7768]:VariableDeclarationStatement[7735-7860]"
    }, {
      "left" : "_collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);",
      "info" : "ExpressionStatement[7789-7861]:ExpressionStatement[7881-7953]"
    }, {
      "left" : "return _combineNamedAndUnnamed(rawBase, typesHandled, byName);",
      "right" : "return _combineNamedAndUnnamed(rawBase, typesHandled, byName);",
      "info" : "ReturnStatement[7912-7974]:ReturnStatement[8004-8066]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8305-8314]:Modifier[8397-8406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8315-8319]:PrimitiveType[8407-8411]"
    }, {
      "left" : "_collectAndResolve",
      "right" : "_collectAndResolve",
      "info" : "SimpleName[8320-8338]:SimpleName[8412-8430]"
    }, {
      "left" : "AnnotatedClass annotatedType",
      "right" : "AnnotatedClass annotatedType",
      "info" : "SingleVariableDeclaration[8339-8367]:SingleVariableDeclaration[8431-8459]"
    }, {
      "left" : "NamedType namedType",
      "right" : "NamedType namedType",
      "info" : "SingleVariableDeclaration[8369-8388]:SingleVariableDeclaration[8461-8480]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[8402-8424]:SingleVariableDeclaration[8494-8516]"
    }, {
      "left" : "AnnotationIntrospector ai",
      "right" : "AnnotationIntrospector ai",
      "info" : "SingleVariableDeclaration[8426-8451]:SingleVariableDeclaration[8518-8543]"
    }, {
      "left" : "HashMap<NamedType, NamedType> collectedSubtypes",
      "right" : "HashMap<NamedType, NamedType> collectedSubtypes",
      "info" : "SingleVariableDeclaration[8465-8512]:SingleVariableDeclaration[8557-8604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8518-9731]:Block[8610-9823]"
    }, {
      "left" : "if (!namedType.hasName())",
      "right" : "if (!namedType.hasName())",
      "info" : "IfStatement[8528-8739]:IfStatement[8620-8831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8554-8739]:Block[8646-8831]"
    }, {
      "left" : "String name = ai.findTypeName(annotatedType);",
      "right" : "String name = ai.findTypeName(annotatedType);",
      "info" : "VariableDeclarationStatement[8568-8613]:VariableDeclarationStatement[8660-8705]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[8626-8729]:IfStatement[8718-8821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8644-8729]:Block[8736-8821]"
    }, {
      "left" : "namedType = new NamedType(namedType.getType(), name);",
      "right" : "namedType = new NamedType(namedType.getType(), name);",
      "info" : "ExpressionStatement[8662-8715]:ExpressionStatement[8754-8807]"
    }, {
      "left" : "if (collectedSubtypes.containsKey(namedType))",
      "right" : "if (collectedSubtypes.containsKey(namedType))",
      "info" : "IfStatement[8810-9199]:IfStatement[8902-9291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8856-9199]:Block[8948-9291]"
    }, {
      "left" : "if (namedType.hasName())",
      "right" : "if (namedType.hasName())",
      "info" : "IfStatement[8940-9169]:IfStatement[9032-9261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8965-9169]:Block[9057-9261]"
    }, {
      "left" : "NamedType prev = collectedSubtypes.get(namedType);",
      "right" : "NamedType prev = collectedSubtypes.get(namedType);",
      "info" : "VariableDeclarationStatement[8983-9033]:VariableDeclarationStatement[9075-9125]"
    }, {
      "left" : "if (!prev.hasName())",
      "right" : "if (!prev.hasName())",
      "info" : "IfStatement[9050-9155]:IfStatement[9142-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9071-9155]:Block[9163-9247]"
    }, {
      "left" : "collectedSubtypes.put(namedType, namedType);",
      "right" : "collectedSubtypes.put(namedType, namedType);",
      "info" : "ExpressionStatement[9093-9137]:ExpressionStatement[9185-9229]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9182-9189]:ReturnStatement[9274-9281]"
    }, {
      "left" : "collectedSubtypes.put(namedType, namedType);",
      "right" : "collectedSubtypes.put(namedType, namedType);",
      "info" : "ExpressionStatement[9268-9312]:ExpressionStatement[9360-9404]"
    }, {
      "left" : "Collection<NamedType> st = ai.findSubtypes(annotatedType);",
      "right" : "Collection<NamedType> st = ai.findSubtypes(annotatedType);",
      "info" : "VariableDeclarationStatement[9321-9379]:VariableDeclarationStatement[9413-9471]"
    }, {
      "left" : "if (st != null && !st.isEmpty())",
      "right" : "if (st != null && !st.isEmpty())",
      "info" : "IfStatement[9388-9725]:IfStatement[9480-9817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9421-9725]:Block[9513-9817]"
    }, {
      "left" : "for (NamedType subtype : st)",
      "right" : "for (NamedType subtype : st)",
      "info" : "EnhancedForStatement[9435-9715]:EnhancedForStatement[9527-9807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9464-9715]:Block[9556-9807]"
    }, {
      "left" : "AnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                        subtype.getType());",
      "right" : "AnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                        subtype.getType());",
      "info" : "VariableDeclarationStatement[9482-9611]:VariableDeclarationStatement[9574-9703]"
    }, {
      "left" : "_collectAndResolve(subtypeClass, subtype, config, ai, collectedSubtypes);",
      "right" : "_collectAndResolve(subtypeClass, subtype, config, ai, collectedSubtypes);",
      "info" : "ExpressionStatement[9628-9701]:ExpressionStatement[9720-9793]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9883-9892]:Modifier[9975-9984]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9893-9897]:PrimitiveType[9985-9989]"
    }, {
      "left" : "_collectAndResolveByTypeId",
      "right" : "_collectAndResolveByTypeId",
      "info" : "SimpleName[9898-9924]:SimpleName[9990-10016]"
    }, {
      "left" : "AnnotatedClass annotatedType",
      "right" : "AnnotatedClass annotatedType",
      "info" : "SingleVariableDeclaration[9925-9953]:SingleVariableDeclaration[10017-10045]"
    }, {
      "left" : "NamedType namedType",
      "right" : "NamedType namedType",
      "info" : "SingleVariableDeclaration[9955-9974]:SingleVariableDeclaration[10047-10066]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[9988-10010]:SingleVariableDeclaration[10080-10102]"
    }, {
      "left" : "Set<Class<?>> typesHandled",
      "right" : "Set<Class<?>> typesHandled",
      "info" : "SingleVariableDeclaration[10024-10050]:SingleVariableDeclaration[10116-10142]"
    }, {
      "left" : "Map<String,NamedType> byName",
      "right" : "Map<String,NamedType> byName",
      "info" : "SingleVariableDeclaration[10052-10080]:SingleVariableDeclaration[10144-10172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10086-11076]:Block[10178-11168]"
    }, {
      "left" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[10096-10165]:VariableDeclarationStatement[10188-10257]"
    }, {
      "left" : "if (!namedType.hasName())",
      "right" : "if (!namedType.hasName())",
      "info" : "IfStatement[10174-10385]:IfStatement[10266-10477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10200-10385]:Block[10292-10477]"
    }, {
      "left" : "String name = ai.findTypeName(annotatedType);",
      "right" : "String name = ai.findTypeName(annotatedType);",
      "info" : "VariableDeclarationStatement[10214-10259]:VariableDeclarationStatement[10306-10351]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[10272-10375]:IfStatement[10364-10467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10290-10375]:Block[10382-10467]"
    }, {
      "left" : "namedType = new NamedType(namedType.getType(), name);",
      "right" : "namedType = new NamedType(namedType.getType(), name);",
      "info" : "ExpressionStatement[10308-10361]:ExpressionStatement[10400-10453]"
    }, {
      "left" : "if (namedType.hasName())",
      "right" : "if (namedType.hasName())",
      "info" : "IfStatement[10394-10486]:IfStatement[10486-10578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10419-10486]:Block[10511-10578]"
    }, {
      "left" : "byName.put(namedType.getName(), namedType);",
      "right" : "byName.put(namedType.getName(), namedType);",
      "info" : "ExpressionStatement[10433-10476]:ExpressionStatement[10525-10568]"
    }, {
      "left" : "if (typesHandled.add(namedType.getType()))",
      "right" : "if (typesHandled.add(namedType.getType()))",
      "info" : "IfStatement[10564-11070]:IfStatement[10656-11162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10607-11070]:Block[10699-11162]"
    }, {
      "left" : "Collection<NamedType> st = ai.findSubtypes(annotatedType);",
      "right" : "Collection<NamedType> st = ai.findSubtypes(annotatedType);",
      "info" : "VariableDeclarationStatement[10621-10679]:VariableDeclarationStatement[10713-10771]"
    }, {
      "left" : "if (st != null && !st.isEmpty())",
      "right" : "if (st != null && !st.isEmpty())",
      "info" : "IfStatement[10692-11060]:IfStatement[10784-11152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10725-11060]:Block[10817-11152]"
    }, {
      "left" : "for (NamedType subtype : st)",
      "right" : "for (NamedType subtype : st)",
      "info" : "EnhancedForStatement[10743-11046]:EnhancedForStatement[10835-11138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10772-11046]:Block[10864-11138]"
    }, {
      "left" : "AnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "right" : "AnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());",
      "info" : "VariableDeclarationStatement[10794-10927]:VariableDeclarationStatement[10886-11019]"
    }, {
      "left" : "_collectAndResolveByTypeId(subtypeClass, subtype, config, typesHandled, byName);",
      "right" : "_collectAndResolveByTypeId(subtypeClass, subtype, config, typesHandled, byName);",
      "info" : "ExpressionStatement[10948-11028]:ExpressionStatement[11040-11120]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11210-11219]:Modifier[11302-11311]"
    }, {
      "left" : "Collection<NamedType>",
      "right" : "Collection<NamedType>",
      "info" : "ParameterizedType[11220-11241]:ParameterizedType[11312-11333]"
    }, {
      "left" : "_combineNamedAndUnnamed",
      "right" : "_combineNamedAndUnnamed",
      "info" : "SimpleName[11242-11265]:SimpleName[11334-11357]"
    }, {
      "left" : "Class<?> rawBase",
      "right" : "Class<?> rawBase",
      "info" : "SingleVariableDeclaration[11266-11282]:SingleVariableDeclaration[11358-11374]"
    }, {
      "left" : "Set<Class<?>> typesHandled",
      "right" : "Set<Class<?>> typesHandled",
      "info" : "SingleVariableDeclaration[11296-11322]:SingleVariableDeclaration[11388-11414]"
    }, {
      "left" : "Map<String,NamedType> byName",
      "right" : "Map<String,NamedType> byName",
      "info" : "SingleVariableDeclaration[11324-11352]:SingleVariableDeclaration[11416-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11358-12127]:Block[11450-12219]"
    }, {
      "left" : "ArrayList<NamedType> result = new ArrayList<NamedType>(byName.values());",
      "right" : "ArrayList<NamedType> result = new ArrayList<NamedType>(byName.values());",
      "info" : "VariableDeclarationStatement[11368-11440]:VariableDeclarationStatement[11460-11532]"
    }, {
      "left" : "for (NamedType t : byName.values())",
      "right" : "for (NamedType t : byName.values())",
      "info" : "EnhancedForStatement[11641-11734]:EnhancedForStatement[11733-11826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11677-11734]:Block[11769-11826]"
    }, {
      "left" : "typesHandled.remove(t.getType());",
      "right" : "typesHandled.remove(t.getType());",
      "info" : "ExpressionStatement[11691-11724]:ExpressionStatement[11783-11816]"
    }, {
      "left" : "for (Class<?> cls : typesHandled)",
      "right" : "for (Class<?> cls : typesHandled)",
      "info" : "EnhancedForStatement[11743-12098]:EnhancedForStatement[11835-12190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11777-12098]:Block[11869-12190]"
    }, {
      "left" : "if ((cls == rawBase) && Modifier.isAbstract(cls.getModifiers()))",
      "right" : "if ((cls == rawBase) && Modifier.isAbstract(cls.getModifiers()))",
      "info" : "IfStatement[11938-12044]:IfStatement[12030-12136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12003-12044]:Block[12095-12136]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12021-12030]:ContinueStatement[12113-12122]"
    }, {
      "left" : "result.add(new NamedType(cls));",
      "right" : "result.add(new NamedType(cls));",
      "info" : "ExpressionStatement[12057-12088]:ExpressionStatement[12149-12180]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12107-12121]:ReturnStatement[12199-12213]"
    } ]
  },
  "interFileMappings" : { }
}