{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1432-30659]:TypeDeclaration[1432-31239]"
  }, {
    "left" : "/** Selected GL profile */\n  public static GLProfile profile;",
    "right" : "/** Selected GL profile */\n  public static GLProfile profile;",
    "info" : "FieldDeclaration[1482-1543]:FieldDeclaration[1482-1543]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1547-1557]:FieldDeclaration[1547-1557]"
  }, {
    "left" : "GLWindow window;",
    "right" : "GLWindow window;",
    "info" : "FieldDeclaration[1561-1577]:FieldDeclaration[1561-1577]"
  }, {
    "left" : "FPSAnimator animator;",
    "right" : "FPSAnimator animator;",
    "info" : "FieldDeclaration[1580-1601]:FieldDeclaration[1580-1601]"
  }, {
    "left" : "Rectangle screenRect;",
    "right" : "Rectangle screenRect;",
    "info" : "FieldDeclaration[1604-1625]:FieldDeclaration[1604-1625]"
  }, {
    "left" : "PApplet sketch;",
    "right" : "PApplet sketch;",
    "info" : "FieldDeclaration[1629-1644]:FieldDeclaration[1629-1644]"
  }, {
    "left" : "PGraphics graphics;",
    "right" : "PGraphics graphics;",
    "info" : "FieldDeclaration[1647-1666]:FieldDeclaration[1647-1666]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1670-1682]:FieldDeclaration[1670-1682]"
  }, {
    "left" : "int sketchY;",
    "right" : "int sketchY;",
    "info" : "FieldDeclaration[1685-1697]:FieldDeclaration[1685-1697]"
  }, {
    "left" : "int sketchWidth;",
    "right" : "int sketchWidth;",
    "info" : "FieldDeclaration[1700-1716]:FieldDeclaration[1700-1716]"
  }, {
    "left" : "int sketchHeight;",
    "right" : "int sketchHeight;",
    "info" : "FieldDeclaration[1719-1736]:FieldDeclaration[1719-1736]"
  }, {
    "left" : "Display display;",
    "right" : "Display display;",
    "info" : "FieldDeclaration[1740-1756]:FieldDeclaration[1740-1756]"
  }, {
    "left" : "Screen screen;",
    "right" : "Screen screen;",
    "info" : "FieldDeclaration[1759-1773]:FieldDeclaration[1759-1773]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1776-1805]:FieldDeclaration[1776-1805]"
  }, {
    "left" : "MonitorDevice displayDevice;",
    "right" : "MonitorDevice displayDevice;",
    "info" : "FieldDeclaration[1808-1836]:FieldDeclaration[1808-1836]"
  }, {
    "left" : "Throwable drawException;",
    "right" : "Throwable drawException;",
    "info" : "FieldDeclaration[1839-1863]:FieldDeclaration[1839-1863]"
  }, {
    "left" : "Object waitObject = new Object();",
    "right" : "Object waitObject = new Object();",
    "info" : "FieldDeclaration[1866-1899]:FieldDeclaration[1866-1899]"
  }, {
    "left" : "NewtCanvasAWT canvas;",
    "right" : "NewtCanvasAWT canvas;",
    "info" : "FieldDeclaration[1903-1924]:FieldDeclaration[1903-1924]"
  }, {
    "left" : "float[] currentPixelScale = {0, 0};",
    "right" : "float[] currentPixelScale = {0, 0};",
    "info" : "FieldDeclaration[1928-1963]:FieldDeclaration[1994-2029]"
  }, {
    "left" : "boolean presentMode = false;",
    "right" : "boolean presentMode = false;",
    "info" : "FieldDeclaration[1967-1995]:FieldDeclaration[2033-2061]"
  }, {
    "left" : "float offsetX;",
    "right" : "float offsetX;",
    "info" : "FieldDeclaration[1998-2012]:FieldDeclaration[2064-2078]"
  }, {
    "left" : "float offsetY;",
    "right" : "float offsetY;",
    "info" : "FieldDeclaration[2015-2029]:FieldDeclaration[2081-2095]"
  }, {
    "left" : "public graphics PGraphics)",
    "right" : "public graphics PGraphics)",
    "info" : "MethodDeclaration[2034-2165]:MethodDeclaration[2100-2231]"
  }, {
    "left" : "public sketch PApplet) : void",
    "right" : "public sketch PApplet) : void",
    "info" : "MethodDeclaration[2170-2570]:MethodDeclaration[2236-2636]"
  }, {
    "left" : "public void initFrame(PApplet sketch) {/*, int backgroundColor,\n                        int deviceIndex, boolean fullScreen,\n                        boolean spanDisplays) {*/\n    this.sketch = sketch;\n    initIcons();\n    initScreen();\n    initGL();\n    initWindow();\n    initListeners();\n    initAnimator();\n    window.setVisible(true);\n  }",
    "right" : "public void initFrame(PApplet sketch) {/*, int backgroundColor,\n                        int deviceIndex, boolean fullScreen,\n                        boolean spanDisplays) {*/\n    this.sketch = sketch;\n    initIcons();\n    initScreen();\n    initGL();\n    initWindow();\n    initListeners();\n    initAnimator();\n  }",
    "info" : "MethodDeclaration[2575-2916]:MethodDeclaration[2641-2953]"
  }, {
    "left" : "protected void initScreen() {\n    display = NewtFactory.createDisplay(null);\n    display.addReference();\n    screen = NewtFactory.createScreen(display, 0);\n    screen.addReference();\n\n    monitors = new ArrayList<MonitorDevice>();\n    GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    GraphicsDevice[] devices = environment.getScreenDevices();\n    for (GraphicsDevice device: devices) {\n      String did = device.getIDstring();\n      String[] parts = did.split(\"Display\");\n      String id1 = \"\";\n      if (1 < parts.length) {\n        id1 = parts[1].trim();\n      }\n      MonitorDevice monitor = null;\n      for (int i = 0; i < screen.getMonitorDevices().size(); i++) {\n        MonitorDevice mon = screen.getMonitorDevices().get(i);\n        String mid = String.valueOf(mon.getId());\n        if (id1.equals(mid)) {\n//          System.out.println(\"Monitor \" + monitor.getId() + \" ************\");\n//          System.out.println(monitor.toString());\n//          System.out.println(monitor.getViewportInWindowUnits());\n//          System.out.println(monitor.getViewport());\n          monitor = mon;\n          break;\n        }\n      }\n      if (monitor == null) {\n        // Didn't find a matching monitor, try using less stringent id check\n        for (int i = 0; i < screen.getMonitorDevices().size(); i++) {\n          MonitorDevice mon = screen.getMonitorDevices().get(i);\n          String mid = String.valueOf(mon.getId());\n          if (-1 < did.indexOf(mid)) {\n            monitor = mon;\n            break;\n          }\n        }\n      }\n      if (monitor != null) {\n        monitors.add(monitor);\n      }\n    }\n  }",
    "right" : "protected void initScreen() {\n    display = NewtFactory.createDisplay(null);\n    display.addReference();\n    screen = NewtFactory.createScreen(display, 0);\n    screen.addReference();\n\n    monitors = new ArrayList<MonitorDevice>();\n    GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    GraphicsDevice[] devices = environment.getScreenDevices();\n    for (GraphicsDevice device: devices) {\n      String did = device.getIDstring();\n      String[] parts = did.split(\"Display\");\n      String id1 = \"\";\n      if (1 < parts.length) {\n        id1 = parts[1].trim();\n      }\n      MonitorDevice monitor = null;\n      for (int i = 0; i < screen.getMonitorDevices().size(); i++) {\n        MonitorDevice mon = screen.getMonitorDevices().get(i);\n        String mid = String.valueOf(mon.getId());\n        if (id1.equals(mid)) {\n//          System.out.println(\"Monitor \" + monitor.getId() + \" ************\");\n//          System.out.println(monitor.toString());\n//          System.out.println(monitor.getViewportInWindowUnits());\n//          System.out.println(monitor.getViewport());\n          monitor = mon;\n          break;\n        }\n      }\n      if (monitor == null) {\n        // Didn't find a matching monitor, try using less stringent id check\n        for (int i = 0; i < screen.getMonitorDevices().size(); i++) {\n          MonitorDevice mon = screen.getMonitorDevices().get(i);\n          String mid = String.valueOf(mon.getId());\n          if (-1 < did.indexOf(mid)) {\n            monitor = mon;\n            break;\n          }\n        }\n      }\n      if (monitor != null) {\n        monitors.add(monitor);\n      }\n    }\n  }",
    "info" : "MethodDeclaration[2921-4573]:MethodDeclaration[2958-4610]"
  }, {
    "left" : "protected void initGL() {\n//  System.out.println(\"*******************************\");\n    if (profile == null) {\n      if (PJOGL.PROFILE == 2) {\n        try {\n          profile = GLProfile.getGL2ES1();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxFixedFunc(true);\n        }\n      } else if (PJOGL.PROFILE == 3) {\n        try {\n          profile = GLProfile.getGL2GL3();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxProgrammable(true);\n        }\n        if (!profile.isGL3()) {\n          PGraphics.showWarning(\"Requested profile GL3 but is not available, got: \" + profile);\n        }\n      } else if (PJOGL.PROFILE == 4) {\n        try {\n          profile = GLProfile.getGL4ES3();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxProgrammable(true);\n        }\n        if (!profile.isGL4()) {\n          PGraphics.showWarning(\"Requested profile GL4 but is not available, got: \" + profile);\n        }\n      } else throw new RuntimeException(PGL.UNSUPPORTED_GLPROF_ERROR);\n    }\n\n    // Setting up the desired capabilities;\n    GLCapabilities caps = new GLCapabilities(profile);\n    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);\n    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);\n    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);\n\n//  caps.setPBuffer(false);\n//  caps.setFBO(false);\n\n    pgl.reqNumSamples = PGL.smoothToSamples(graphics.smooth);\n    caps.setSampleBuffers(true);\n    caps.setNumSamples(pgl.reqNumSamples);\n    caps.setBackgroundOpaque(true);\n    caps.setOnscreen(true);\n    pgl.capabilities = caps;\n  }",
    "right" : "protected void initGL() {\n//  System.out.println(\"*******************************\");\n    if (profile == null) {\n      if (PJOGL.PROFILE == 2) {\n        try {\n          profile = GLProfile.getGL2ES1();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxFixedFunc(true);\n        }\n      } else if (PJOGL.PROFILE == 3) {\n        try {\n          profile = GLProfile.getGL2GL3();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxProgrammable(true);\n        }\n        if (!profile.isGL3()) {\n          PGraphics.showWarning(\"Requested profile GL3 but is not available, got: \" + profile);\n        }\n      } else if (PJOGL.PROFILE == 4) {\n        try {\n          profile = GLProfile.getGL4ES3();\n        } catch (GLException ex) {\n          profile = GLProfile.getMaxProgrammable(true);\n        }\n        if (!profile.isGL4()) {\n          PGraphics.showWarning(\"Requested profile GL4 but is not available, got: \" + profile);\n        }\n      } else throw new RuntimeException(PGL.UNSUPPORTED_GLPROF_ERROR);\n    }\n\n    // Setting up the desired capabilities;\n    GLCapabilities caps = new GLCapabilities(profile);\n    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);\n    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);\n    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);\n\n//  caps.setPBuffer(false);\n//  caps.setFBO(false);\n\n    pgl.reqNumSamples = PGL.smoothToSamples(graphics.smooth);\n    caps.setSampleBuffers(true);\n    caps.setNumSamples(pgl.reqNumSamples);\n    caps.setBackgroundOpaque(true);\n    caps.setOnscreen(true);\n    pgl.capabilities = caps;\n  }",
    "info" : "MethodDeclaration[4577-6162]:MethodDeclaration[4614-6199]"
  }, {
    "left" : "protected void initWindow() {\n    window = GLWindow.create(screen, pgl.capabilities);\n    if (displayDevice == null) {\n      displayDevice = window.getMainMonitor();\n    }\n\n    int displayNum = sketch.sketchDisplay();\n    if (displayNum > 0) {  // if -1, use the default device\n      if (displayNum <= monitors.size()) {\n        displayDevice = monitors.get(displayNum - 1);\n      } else {\n        System.err.format(\"Display %d does not exist, \" +\n          \"using the default display instead.%n\", displayNum);\n        for (int i = 0; i < monitors.size(); i++) {\n          System.err.format(\"Display %d is %s%n\", i+1, monitors.get(i));\n        }\n      }\n    }\n\n    boolean spanDisplays = sketch.sketchDisplay() == PConstants.SPAN;\n    screenRect = spanDisplays ?\n      new Rectangle(0, 0, screen.getWidth(), screen.getHeight()) :\n      new Rectangle(0, 0,\n                    displayDevice.getViewportInWindowUnits().getWidth(),\n                    displayDevice.getViewportInWindowUnits().getHeight());\n\n    // Set the displayWidth/Height variables inside PApplet, so that they're\n    // usable and can even be returned by the sketchWidth()/Height() methods.\n    sketch.displayWidth = screenRect.width;\n    sketch.displayHeight = screenRect.height;\n\n    sketchWidth = sketch.sketchWidth();\n    sketchHeight = sketch.sketchHeight();\n\n    boolean fullScreen = sketch.sketchFullScreen();\n    // Sketch has already requested to be the same as the screen's\n    // width and height, so let's roll with full screen mode.\n    if (screenRect.width == sketchWidth &&\n        screenRect.height == sketchHeight) {\n      fullScreen = true;\n      sketch.fullScreen();\n    }\n\n    if (fullScreen || spanDisplays) {\n      sketchWidth = screenRect.width;\n      sketchHeight = screenRect.height;\n    }\n\n    float[] reqSurfacePixelScale;\n    if (graphics.is2X()) {\n       // Retina\n       reqSurfacePixelScale = new float[] { ScalableSurface.AUTOMAX_PIXELSCALE,\n                                            ScalableSurface.AUTOMAX_PIXELSCALE };\n    } else {\n      // Non-retina\n      reqSurfacePixelScale = new float[] { ScalableSurface.IDENTITY_PIXELSCALE,\n                                           ScalableSurface.IDENTITY_PIXELSCALE };\n    }\n    window.setSurfaceScale(reqSurfacePixelScale);\n    window.setSize(sketchWidth, sketchHeight);\n    setSize(sketchWidth, sketchHeight);\n    sketchX = displayDevice.getViewportInWindowUnits().getX();\n    sketchY = displayDevice.getViewportInWindowUnits().getY();\n    if (fullScreen) {\n      PApplet.hideMenuBar();\n      window.setTopLevelPosition(sketchX, sketchY);\n      if (spanDisplays) {\n        window.setFullscreen(monitors);\n      } else {\n        window.setFullscreen(true);\n      }\n    }\n  }",
    "right" : "protected void initWindow() {\n    window = GLWindow.create(screen, pgl.capabilities);\n    if (displayDevice == null) {\n      displayDevice = window.getMainMonitor();\n    }\n\n    int displayNum = sketch.sketchDisplay();\n    if (displayNum > 0) {  // if -1, use the default device\n      if (displayNum <= monitors.size()) {\n        displayDevice = monitors.get(displayNum - 1);\n      } else {\n        System.err.format(\"Display %d does not exist, \" +\n          \"using the default display instead.%n\", displayNum);\n        for (int i = 0; i < monitors.size(); i++) {\n          System.err.format(\"Display %d is %s%n\", i+1, monitors.get(i));\n        }\n      }\n    }\n\n    boolean spanDisplays = sketch.sketchDisplay() == PConstants.SPAN;\n    screenRect = spanDisplays ?\n      new Rectangle(0, 0, screen.getWidth(), screen.getHeight()) :\n      new Rectangle(0, 0,\n                    displayDevice.getViewportInWindowUnits().getWidth(),\n                    displayDevice.getViewportInWindowUnits().getHeight());\n\n    // Set the displayWidth/Height variables inside PApplet, so that they're\n    // usable and can even be returned by the sketchWidth()/Height() methods.\n    sketch.displayWidth = screenRect.width;\n    sketch.displayHeight = screenRect.height;\n\n    sketchWidth = sketch.sketchWidth();\n    sketchHeight = sketch.sketchHeight();\n\n    boolean fullScreen = sketch.sketchFullScreen();\n    // Sketch has already requested to be the same as the screen's\n    // width and height, so let's roll with full screen mode.\n    if (screenRect.width == sketchWidth &&\n        screenRect.height == sketchHeight) {\n      fullScreen = true;\n      sketch.fullScreen();\n    }\n\n    if (fullScreen || spanDisplays) {\n      sketchWidth = screenRect.width;\n      sketchHeight = screenRect.height;\n    }\n\n    float[] reqSurfacePixelScale;\n    if (graphics.is2X()) {\n       // Retina\n       reqSurfacePixelScale = new float[] { ScalableSurface.AUTOMAX_PIXELSCALE,\n                                            ScalableSurface.AUTOMAX_PIXELSCALE };\n    } else {\n      // Non-retina\n      reqSurfacePixelScale = new float[] { ScalableSurface.IDENTITY_PIXELSCALE,\n                                           ScalableSurface.IDENTITY_PIXELSCALE };\n    }\n    window.setSurfaceScale(reqSurfacePixelScale);\n    window.setSize(sketchWidth, sketchHeight);\n    setSize(sketchWidth, sketchHeight);\n    sketchX = displayDevice.getViewportInWindowUnits().getX();\n    sketchY = displayDevice.getViewportInWindowUnits().getY();\n    if (fullScreen) {\n      PApplet.hideMenuBar();\n      window.setTopLevelPosition(sketchX, sketchY);\n      placedWindow = true;\n      if (spanDisplays) {\n        window.setFullscreen(monitors);\n      } else {\n        window.setFullscreen(true);\n      }\n    }\n  }",
    "info" : "MethodDeclaration[6167-8893]:MethodDeclaration[6204-8957]"
  }, {
    "left" : "protected void initListeners() {\n    NEWTMouseListener mouseListener = new NEWTMouseListener();\n    window.addMouseListener(mouseListener);\n    NEWTKeyListener keyListener = new NEWTKeyListener();\n    window.addKeyListener(keyListener);\n    NEWTWindowListener winListener = new NEWTWindowListener();\n    window.addWindowListener(winListener);\n\n    DrawListener drawlistener = new DrawListener();\n    window.addGLEventListener(drawlistener);\n  }",
    "right" : "protected void initListeners() {\n    NEWTMouseListener mouseListener = new NEWTMouseListener();\n    window.addMouseListener(mouseListener);\n    NEWTKeyListener keyListener = new NEWTKeyListener();\n    window.addKeyListener(keyListener);\n    NEWTWindowListener winListener = new NEWTWindowListener();\n    window.addWindowListener(winListener);\n\n    DrawListener drawlistener = new DrawListener();\n    window.addGLEventListener(drawlistener);\n  }",
    "info" : "MethodDeclaration[8898-9342]:MethodDeclaration[8962-9406]"
  }, {
    "left" : "protected void initAnimator() {\n//  System.err.println(\"1. create animator\");\n    animator = new FPSAnimator(window, 60);\n    drawException = null;\n    animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {\n      @Override\n      public void uncaughtException(final GLAnimatorControl animator,\n                                    final GLAutoDrawable drawable,\n                                    final Throwable cause) {\n        synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }\n      }\n    });\n\n    new Thread(new Runnable() {\n      public void run() {\n        synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }\n      }\n    }).start();\n  }",
    "right" : "protected void initAnimator() {\n//  System.err.println(\"1. create animator\");\n    animator = new FPSAnimator(window, 60);\n    drawException = null;\n    animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {\n      @Override\n      public void uncaughtException(final GLAnimatorControl animator,\n                                    final GLAutoDrawable drawable,\n                                    final Throwable cause) {\n        synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }\n      }\n    });\n\n    new Thread(new Runnable() {\n      public void run() {\n        synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }\n      }\n    }).start();\n  }",
    "info" : "MethodDeclaration[9347-10817]:MethodDeclaration[9411-10881]"
  }, {
    "left" : "public animator GLAnimatorControl, drawable GLAutoDrawable, cause Throwable) : void",
    "right" : "public animator GLAnimatorControl, drawable GLAutoDrawable, cause Throwable) : void",
    "info" : "MethodDeclaration[9593-9991]:MethodDeclaration[9657-10055]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[10039-10797]:MethodDeclaration[10103-10861]"
  }, {
    "left" : "@Override\n  public void setTitle(String title) {\n    window.setTitle(title);\n  }",
    "right" : "@Override\n  public void setTitle(String title) {\n    window.setTitle(title);\n  }",
    "info" : "MethodDeclaration[10821-10901]:MethodDeclaration[10885-10965]"
  }, {
    "left" : "public visible boolean) : void",
    "right" : "public visible boolean) : void",
    "info" : "MethodDeclaration[10905-10994]:MethodDeclaration[10969-11058]"
  }, {
    "left" : "@Override\n  public void setResizable(boolean resizable) {\n    // TODO Auto-generated method stub\n\n  }",
    "right" : "@Override\n  public void setResizable(boolean resizable) {\n    // TODO Auto-generated method stub\n\n  }",
    "info" : "MethodDeclaration[10998-11099]:MethodDeclaration[11062-11163]"
  }, {
    "left" : "@Override\n  public void placeWindow(int[] location, int[] editorLocation) {\n//    Dimension dim = new Dimension(sketchWidth, sketchHeight);\n//    int contentW = Math.max(sketchWidth, MIN_WINDOW_WIDTH);\n//    int contentH = Math.max(sketchHeight, MIN_WINDOW_HEIGHT);\n\n    int x = window.getX() - window.getInsets().getLeftWidth();\n    int y = window.getY() - window.getInsets().getTopHeight();\n    int w = window.getWidth() + window.getInsets().getTotalWidth();\n    int h = window.getHeight() + window.getInsets().getTotalHeight();\n\n    if (location != null) {\n//      System.err.println(\"place window at \" + location[0] + \", \" + location[1]);\n      window.setTopLevelPosition(location[0], location[1]);\n\n    } else if (editorLocation != null) {\n//      System.err.println(\"place window at editor location \" + editorLocation[0] + \", \" + editorLocation[1]);\n      int locationX = editorLocation[0] - 20;\n      int locationY = editorLocation[1];\n\n      if (locationX - w > 10) {\n        // if it fits to the left of the window\n        window.setTopLevelPosition(locationX - w, locationY);\n\n      } else {  // doesn't fit\n        // if it fits inside the editor window,\n        // offset slightly from upper lefthand corner\n        // so that it's plunked inside the text area\n        locationX = editorLocation[0] + 66;\n        locationY = editorLocation[1] + 66;\n\n        if ((locationX + w > sketch.displayWidth - 33) ||\n            (locationY + h > sketch.displayHeight - 33)) {\n          // otherwise center on screen\n          locationX = (sketch.displayWidth - w) / 2;\n          locationY = (sketch.displayHeight - h) / 2;\n        }\n        window.setTopLevelPosition(locationX, locationY);\n      }\n    } else {  // just center on screen\n      setFrameCentered();\n    }\n\n    Point frameLoc = new Point(x, y);\n    if (frameLoc.y < 0) {\n      // Windows actually allows you to place frames where they can't be\n      // closed. Awesome. http://dev.processing.org/bugs/show_bug.cgi?id=1508\n      window.setTopLevelPosition(frameLoc.x, 30);\n    }\n\n//    canvas.setBounds((contentW - sketchWidth)/2,\n//                     (contentH - sketchHeight)/2,\n//                     sketchWidth, sketchHeight);\n  }",
    "right" : "@Override\n  public void placeWindow(int[] location, int[] editorLocation) {\n//    Dimension dim = new Dimension(sketchWidth, sketchHeight);\n//    int contentW = Math.max(sketchWidth, MIN_WINDOW_WIDTH);\n//    int contentH = Math.max(sketchHeight, MIN_WINDOW_HEIGHT);\n\n    int x = window.getX() - window.getInsets().getLeftWidth();\n    int y = window.getY() - window.getInsets().getTopHeight();\n    int w = window.getWidth() + window.getInsets().getTotalWidth();\n    int h = window.getHeight() + window.getInsets().getTotalHeight();\n\n    if (location != null) {\n//      System.err.println(\"place window at \" + location[0] + \", \" + location[1]);\n      window.setTopLevelPosition(location[0], location[1]);\n\n    } else if (editorLocation != null) {\n//      System.err.println(\"place window at editor location \" + editorLocation[0] + \", \" + editorLocation[1]);\n      int locationX = editorLocation[0] - 20;\n      int locationY = editorLocation[1];\n\n      if (locationX - w > 10) {\n        // if it fits to the left of the window\n        window.setTopLevelPosition(locationX - w, locationY);\n\n      } else {  // doesn't fit\n        // if it fits inside the editor window,\n        // offset slightly from upper lefthand corner\n        // so that it's plunked inside the text area\n        locationX = editorLocation[0] + 66;\n        locationY = editorLocation[1] + 66;\n\n        if ((locationX + w > sketch.displayWidth - 33) ||\n            (locationY + h > sketch.displayHeight - 33)) {\n          // otherwise center on screen\n          locationX = (sketch.displayWidth - w) / 2;\n          locationY = (sketch.displayHeight - h) / 2;\n        }\n        window.setTopLevelPosition(locationX, locationY);\n      }\n    } else {  // just center on screen\n      // Can't use frame.setLocationRelativeTo(null) because it sends the\n      // frame to the main display, which undermines the --display setting.\n      int sketchX = displayDevice.getViewportInWindowUnits().getX();\n      int sketchY = displayDevice.getViewportInWindowUnits().getY();\n//      System.err.println(\"just center on the screen at \" + sketchX + screenRect.x + (screenRect.width - sketchWidth) / 2 + \", \" +\n//                                                           sketchY + screenRect.y + (screenRect.height - sketchHeight) / 2);\n  //\n//      System.err.println(\"  Display starts at \" +  sketchX + \", \" + sketchY);\n//      System.err.println(\"  Screen rect pos: \" +  screenRect.x + \", \" + screenRect.y);\n//      System.err.println(\"  Screen rect w/h: \" +  screenRect.width + \", \" + screenRect.height);\n//      System.err.println(\"  Sketch w/h: \" +  sketchWidth + \", \" + sketchHeight);\n\n//      int w = sketchWidth;\n//      int h = sketchHeight;\n//      if (graphics.is2X()) {\n//        w /= 2;\n//        h /= 2;\n//      }\n\n      window.setTopLevelPosition(sketchX + screenRect.x + (screenRect.width - sketchWidth) / 2,\n                                 sketchY + screenRect.y + (screenRect.height - sketchHeight) / 2);\n\n    }\n\n    Point frameLoc = new Point(x, y);\n    if (frameLoc.y < 0) {\n      // Windows actually allows you to place frames where they can't be\n      // closed. Awesome. http://dev.processing.org/bugs/show_bug.cgi?id=1508\n      window.setTopLevelPosition(frameLoc.x, 30);\n    }\n\n    placedWindow = true;\n    if (requestedStart) startThread();\n//    canvas.setBounds((contentW - sketchWidth)/2,\n//                     (contentH - sketchHeight)/2,\n//                     sketchWidth, sketchHeight);\n  }",
    "info" : "MethodDeclaration[12317-14520]:MethodDeclaration[11213-14690]"
  }, {
    "left" : "public void placePresent(int stopColor) {\n//    if (presentMode) {\n//      System.err.println(\"Present mode\");\n//    System.err.println(\"WILL USE FBO\");\n    presentMode = pgl.presentMode = true;\n    offsetX = pgl.offsetX = 0.5f * (screenRect.width - sketchWidth);\n    offsetY = pgl.offsetY = 0.5f * (screenRect.height - sketchHeight);\n    pgl.requestFBOLayer();\n\n    window.setSize(screenRect.width, screenRect.height);\n    PApplet.hideMenuBar();\n    window.setTopLevelPosition(sketchX + screenRect.x,\n                               sketchY + screenRect.y);\n//    window.setTopLevelPosition(0, 0);\n    window.setFullscreen(true);\n\n\n\n\n//    }\n  }",
    "right" : "public void placePresent(int stopColor) {\n\n//    if (presentMode) {\n//      System.err.println(\"Present mode\");\n//    System.err.println(\"WILL USE FBO\");\n    presentMode = pgl.presentMode = true;\n    offsetX = pgl.offsetX = 0.5f * (screenRect.width - sketchWidth);\n    offsetY = pgl.offsetY = 0.5f * (screenRect.height - sketchHeight);\n    pgl.requestFBOLayer();\n\n    window.setSize(screenRect.width, screenRect.height);\n    PApplet.hideMenuBar();\n    window.setTopLevelPosition(sketchX + screenRect.x,\n                               sketchY + screenRect.y);\n//    window.setTopLevelPosition(0, 0);\n    window.setFullscreen(true);\n\n\n    placedWindow = true;\n    if (requestedStart) startThread();\n\n//    }\n  }",
    "info" : "MethodDeclaration[14525-15170]:MethodDeclaration[14695-15404]"
  }, {
    "left" : "protected void initIcons() {\n    final int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };\n    String[] iconImages = new String[sizes.length];\n    for (int i = 0; i < sizes.length; i++) {\n      iconImages[i] = \"/icon/icon-\" + sizes[i] + \".png\";\n    }\n    NewtFactory.setWindowIcons(new ClassResources(PApplet.class, iconImages));\n  }",
    "right" : "protected void initIcons() {\n    final int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };\n    String[] iconImages = new String[sizes.length];\n    for (int i = 0; i < sizes.length; i++) {\n      iconImages[i] = \"/icon/icon-\" + sizes[i] + \".png\";\n    }\n    NewtFactory.setWindowIcons(new ClassResources(PApplet.class, iconImages));\n  }",
    "info" : "MethodDeclaration[15175-15505]:MethodDeclaration[15409-15739]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[15510-15591]:MethodDeclaration[15744-15825]"
  }, {
    "left" : "public void startThread() {\n    if (animator != null) {\n//      System.err.println(\"5. start animator\");\n      animator.start();\n\n      if (0 < sketchX && 0 < sketchY) {\n//          System.err.println(\"5.1 set inital window position\");\n          window.setTopLevelPosition(sketchX, sketchY);\n          sketchX = sketchY = 0;\n      }\n//      animator.getThread().setName(\"Processing-GL-draw\");\n    }\n  }",
    "right" : "public void startThread() {\n    if (animator == null) return;\n    if (placedWindow) {\n      window.setVisible(true);\n      animator.start();\n      requestedStart = false;\n    } else {\n      // The GL window is not visible until it has been placed, so we cannot\n      // start the animator because it requires the window to be visible.\n      requestedStart = true;\n      // Need this assignment to bypass the while loop in runSketch, otherwise\n      // the programs hangs waiting for defaultSize to be false, but it never\n      // happens because the animation thread is not yet running to avoid showing\n      // the window in the wrong place:\n      // https://github.com/processing/processing/issues/3308\n      sketch.defaultSize = false;\n    }\n  }",
    "info" : "MethodDeclaration[15596-15998]:MethodDeclaration[15830-16578]"
  }, {
    "left" : "public void pauseThread() {\n    if (animator != null) {\n      animator.pause();\n    }\n  }",
    "right" : "public void pauseThread() {\n    if (animator != null) {\n      animator.pause();\n    }\n  }",
    "info" : "MethodDeclaration[16002-16091]:MethodDeclaration[16582-16671]"
  }, {
    "left" : "public void resumeThread() {\n    if (animator != null) {\n      animator.resume();\n    }\n  }",
    "right" : "public void resumeThread() {\n    if (animator != null) {\n      animator.resume();\n    }\n  }",
    "info" : "MethodDeclaration[16095-16186]:MethodDeclaration[16675-16766]"
  }, {
    "left" : "public boolean stopThread() {\n    if (animator != null) {\n      return animator.stop();\n    } else {\n      return false;\n    }\n  }",
    "right" : "public boolean stopThread() {\n    if (animator != null) {\n      return animator.stop();\n    } else {\n      return false;\n    }\n  }",
    "info" : "MethodDeclaration[16190-16320]:MethodDeclaration[16770-16900]"
  }, {
    "left" : "public boolean isStopped() {\n    if (animator != null) {\n      return !animator.isAnimating();\n    } else {\n      return true;\n    }\n  }",
    "right" : "public boolean isStopped() {\n    if (animator != null) {\n      return !animator.isAnimating();\n    } else {\n      return true;\n    }\n  }",
    "info" : "MethodDeclaration[16324-16460]:MethodDeclaration[16904-17040]"
  }, {
    "left" : "public width int, height int) : void",
    "right" : "public width int, height int) : void",
    "info" : "MethodDeclaration[16464-16924]:MethodDeclaration[17044-17504]"
  }, {
    "left" : "public float getPixelScale() {\n    if (graphics.is2X()) {\n      // Even if the graphics are retina, the user might have moved the window\n      // into a non-retina monitor, so we need to check\n      window.getCurrentSurfaceScale(currentPixelScale);\n      return currentPixelScale[0];\n    } else {\n      return 1;\n    }\n  }",
    "right" : "public float getPixelScale() {\n    if (graphics.is2X()) {\n      // Even if the graphics are retina, the user might have moved the window\n      // into a non-retina monitor, so we need to check\n      window.getCurrentSurfaceScale(currentPixelScale);\n      return currentPixelScale[0];\n    } else {\n      return 1;\n    }\n  }",
    "info" : "MethodDeclaration[16928-17250]:MethodDeclaration[17508-17830]"
  }, {
    "left" : "public Component getComponent() {\n    return canvas;\n  }",
    "right" : "public Component getComponent() {\n    return canvas;\n  }",
    "info" : "MethodDeclaration[17254-17310]:MethodDeclaration[17834-17890]"
  }, {
    "left" : "public void setSmooth(int level) {\n    pgl.reqNumSamples = level;\n    GLCapabilities caps = new GLCapabilities(profile);\n    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);\n    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);\n    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);\n    caps.setSampleBuffers(true);\n    caps.setNumSamples(pgl.reqNumSamples);\n    caps.setBackgroundOpaque(true);\n    caps.setOnscreen(true);\n    NativeSurface target = window.getNativeSurface();\n    MutableGraphicsConfiguration config = (MutableGraphicsConfiguration) target.getGraphicsConfiguration();\n    config.setChosenCapabilities(caps);\n  }",
    "right" : "public void setSmooth(int level) {\n    pgl.reqNumSamples = level;\n    GLCapabilities caps = new GLCapabilities(profile);\n    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);\n    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);\n    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);\n    caps.setSampleBuffers(true);\n    caps.setNumSamples(pgl.reqNumSamples);\n    caps.setBackgroundOpaque(true);\n    caps.setOnscreen(true);\n    NativeSurface target = window.getNativeSurface();\n    MutableGraphicsConfiguration config = (MutableGraphicsConfiguration) target.getGraphicsConfiguration();\n    config.setChosenCapabilities(caps);\n  }",
    "info" : "MethodDeclaration[17314-17931]:MethodDeclaration[17894-18511]"
  }, {
    "left" : "public void setFrameRate(float fps) {\n    if (animator != null) {\n      animator.stop();\n      animator.setFPS((int)fps);\n      pgl.setFps(fps);\n      animator.start();\n    }\n  }",
    "right" : "public void setFrameRate(float fps) {\n    if (animator != null) {\n      animator.stop();\n      animator.setFPS((int)fps);\n      pgl.setFps(fps);\n      animator.start();\n    }\n  }",
    "info" : "MethodDeclaration[17935-18113]:MethodDeclaration[18515-18693]"
  }, {
    "left" : "public void requestFocus() {\n    window.requestFocus();\n  }",
    "right" : "public void requestFocus() {\n    window.requestFocus();\n  }",
    "info" : "MethodDeclaration[18117-18176]:MethodDeclaration[18697-18756]"
  }, {
    "left" : "class DrawListener implements GLEventListener {\n    public void display(GLAutoDrawable drawable) {\n      pgl.getGL(drawable);\n//      System.out.println(\" - \" + sketch.frameCount);\n      sketch.handleDraw();\n\n      if (sketch.frameCount == 1) {\n        requestFocus();\n      }\n\n      if (sketch.exitCalled()) {\n//        System.out.println(\"exit\");\n        animator.stop();\n        sketch.dispose();\n        sketch.exitActual();\n      }\n    }\n    public void dispose(GLAutoDrawable drawable) {\n//      pgl.getGL(drawable);\n//      System.out.println(\"dispose\");\n      sketch.dispose();\n//      if (sketch.exitCalled()) {\n//        sketch.exitActual();\n//      }\n    }\n    public void init(GLAutoDrawable drawable) {\n//      System.err.println(\"2. init drawable\");\n      pgl.getGL(drawable);\n      pgl.init(drawable);\n      sketch.start();\n//      setSize(sketchWidth, sketchHeight);\n\n      int c = graphics.backgroundColor;\n      pgl.clearColor(((c >> 16) & 0xff) / 255f,\n                     ((c >>  8) & 0xff) / 255f,\n                     ((c >>  0) & 0xff) / 255f,\n                     ((c >> 24) & 0xff) / 255f);\n      pgl.clear(PGL.COLOR_BUFFER_BIT);\n    }\n\n    public void reshape(GLAutoDrawable drawable, int x, int y, int w, int h) {\n\n//      final float[] valReqSurfacePixelScale = window.getRequestedSurfaceScale(new float[2]);\n      window.getCurrentSurfaceScale(currentPixelScale);\n//      final float[] nativeSurfacePixelScale = window.getMaximumSurfaceScale(new float[2]);\n//      System.err.println(\"[set PixelScale post]: \"+\n//                         valReqSurfacePixelScale[0]+\"x\"+valReqSurfacePixelScale[1]+\" (val) -> \"+\n//                         hasSurfacePixelScale[0]+\"x\"+hasSurfacePixelScale[1]+\" (has), \"+\n//                         nativeSurfacePixelScale[0]+\"x\"+nativeSurfacePixelScale[1]+\" (native)\");\n\n\n\n\n//      System.out.println(\"reshape: \" + w + \", \" + h);\n      pgl.getGL(drawable);\n//      if (!graphics.is2X() && 1 < hasSurfacePixelScale[0]) {\n//        setSize(w/2, h/2);\n//      } else {\n//        setSize(w, h);\n//      }\n      setSize((int)(w/currentPixelScale[0]), (int)(h/currentPixelScale[1]));\n    }\n  }",
    "right" : "class DrawListener implements GLEventListener {\n    public void display(GLAutoDrawable drawable) {\n      pgl.getGL(drawable);\n//      System.out.println(\" - \" + sketch.frameCount);\n      sketch.handleDraw();\n\n      if (sketch.frameCount == 1) {\n        requestFocus();\n      }\n\n      if (sketch.exitCalled()) {\n//        System.out.println(\"exit\");\n        animator.stop();\n        sketch.dispose();\n        sketch.exitActual();\n      }\n    }\n    public void dispose(GLAutoDrawable drawable) {\n//      pgl.getGL(drawable);\n//      System.out.println(\"dispose\");\n      sketch.dispose();\n//      if (sketch.exitCalled()) {\n//        sketch.exitActual();\n//      }\n    }\n    public void init(GLAutoDrawable drawable) {\n//      System.err.println(\"2. init drawable\");\n      pgl.getGL(drawable);\n      pgl.init(drawable);\n      sketch.start();\n//      setSize(sketchWidth, sketchHeight);\n\n      int c = graphics.backgroundColor;\n      pgl.clearColor(((c >> 16) & 0xff) / 255f,\n                     ((c >>  8) & 0xff) / 255f,\n                     ((c >>  0) & 0xff) / 255f,\n                     ((c >> 24) & 0xff) / 255f);\n      pgl.clear(PGL.COLOR_BUFFER_BIT);\n    }\n\n    public void reshape(GLAutoDrawable drawable, int x, int y, int w, int h) {\n\n//      final float[] valReqSurfacePixelScale = window.getRequestedSurfaceScale(new float[2]);\n      window.getCurrentSurfaceScale(currentPixelScale);\n//      final float[] nativeSurfacePixelScale = window.getMaximumSurfaceScale(new float[2]);\n//      System.err.println(\"[set PixelScale post]: \"+\n//                         valReqSurfacePixelScale[0]+\"x\"+valReqSurfacePixelScale[1]+\" (val) -> \"+\n//                         hasSurfacePixelScale[0]+\"x\"+hasSurfacePixelScale[1]+\" (has), \"+\n//                         nativeSurfacePixelScale[0]+\"x\"+nativeSurfacePixelScale[1]+\" (native)\");\n\n\n\n\n//      System.out.println(\"reshape: \" + w + \", \" + h);\n      pgl.getGL(drawable);\n//      if (!graphics.is2X() && 1 < hasSurfacePixelScale[0]) {\n//        setSize(w/2, h/2);\n//      } else {\n//        setSize(w, h);\n//      }\n      setSize((int)(w/currentPixelScale[0]), (int)(h/currentPixelScale[1]));\n    }\n  }",
    "info" : "TypeDeclaration[18180-20327]:TypeDeclaration[18760-20907]"
  }, {
    "left" : "public drawable GLAutoDrawable) : void",
    "right" : "public drawable GLAutoDrawable) : void",
    "info" : "MethodDeclaration[18232-18622]:MethodDeclaration[18812-19202]"
  }, {
    "left" : "public drawable GLAutoDrawable) : void",
    "right" : "public drawable GLAutoDrawable) : void",
    "info" : "MethodDeclaration[18627-18847]:MethodDeclaration[19207-19427]"
  }, {
    "left" : "public drawable GLAutoDrawable) : void",
    "right" : "public drawable GLAutoDrawable) : void",
    "info" : "MethodDeclaration[18852-19341]:MethodDeclaration[19432-19921]"
  }, {
    "left" : "public drawable GLAutoDrawable, x int, y int, w int, h int) : void",
    "right" : "public drawable GLAutoDrawable, x int, y int, w int, h int) : void",
    "info" : "MethodDeclaration[19347-20323]:MethodDeclaration[19927-20903]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[20331-21655]:TypeDeclaration[20911-22235]"
  }, {
    "left" : "public NEWTWindowListener() {\n      super();\n    }",
    "right" : "public NEWTWindowListener() {\n      super();\n    }",
    "info" : "MethodDeclaration[20420-20470]:MethodDeclaration[21000-21050]"
  }, {
    "left" : "@Override\n    public void windowGainedFocus(com.jogamp.newt.event.WindowEvent arg0) {\n//      pg.parent.focusGained(null);\n//      System.err.println(\"gain focus\");\n    }",
    "right" : "@Override\n    public void windowGainedFocus(com.jogamp.newt.event.WindowEvent arg0) {\n//      pg.parent.focusGained(null);\n//      System.err.println(\"gain focus\");\n    }",
    "info" : "MethodDeclaration[20475-20645]:MethodDeclaration[21055-21225]"
  }, {
    "left" : "public arg0 com.jogamp.newt.event.WindowEvent) : void",
    "right" : "public arg0 com.jogamp.newt.event.WindowEvent) : void",
    "info" : "MethodDeclaration[20651-20817]:MethodDeclaration[21231-21397]"
  }, {
    "left" : "@Override\n    public void windowDestroyNotify(com.jogamp.newt.event.WindowEvent arg0) {\n//      System.err.println(\"bye\");\n      PSurfaceJOGL.this.sketch.dispose();\n      PSurfaceJOGL.this.sketch.exitActual();\n    }",
    "right" : "@Override\n    public void windowDestroyNotify(com.jogamp.newt.event.WindowEvent arg0) {\n//      System.err.println(\"bye\");\n      PSurfaceJOGL.this.sketch.dispose();\n      PSurfaceJOGL.this.sketch.exitActual();\n    }",
    "info" : "MethodDeclaration[20823-21038]:MethodDeclaration[21403-21618]"
  }, {
    "left" : "@Override\n    public void windowDestroyed(com.jogamp.newt.event.WindowEvent arg0) {\n    }",
    "right" : "@Override\n    public void windowDestroyed(com.jogamp.newt.event.WindowEvent arg0) {\n    }",
    "info" : "MethodDeclaration[21044-21133]:MethodDeclaration[21624-21713]"
  }, {
    "left" : "@Override\n    public void windowMoved(com.jogamp.newt.event.WindowEvent arg0) {\n    }",
    "right" : "@Override\n    public void windowMoved(com.jogamp.newt.event.WindowEvent arg0) {\n    }",
    "info" : "MethodDeclaration[21139-21224]:MethodDeclaration[21719-21804]"
  }, {
    "left" : "@Override\n    public void windowRepaint(com.jogamp.newt.event.WindowUpdateEvent arg0) {\n    }",
    "right" : "@Override\n    public void windowRepaint(com.jogamp.newt.event.WindowUpdateEvent arg0) {\n    }",
    "info" : "MethodDeclaration[21230-21323]:MethodDeclaration[21810-21903]"
  }, {
    "left" : "@Override\n    public void windowResized(com.jogamp.newt.event.WindowEvent arg0) {\n//      System.err.println(\"resized\");\n//      System.err.println(window.hasFocus());\n//      window.removeMouseListener(mouseListener);\n//      mouseListener = new NEWTMouseListener();\n//      window.addMouseListener(mouseListener);\n    }",
    "right" : "@Override\n    public void windowResized(com.jogamp.newt.event.WindowEvent arg0) {\n//      System.err.println(\"resized\");\n//      System.err.println(window.hasFocus());\n//      window.removeMouseListener(mouseListener);\n//      mouseListener = new NEWTMouseListener();\n//      window.addMouseListener(mouseListener);\n    }",
    "info" : "MethodDeclaration[21329-21650]:MethodDeclaration[21909-22230]"
  }, {
    "left" : "protected class NEWTMouseListener extends com.jogamp.newt.event.MouseAdapter {\n    public NEWTMouseListener() {\n      super();\n    }\n    @Override\n    public void mousePressed(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.PRESS);\n    }\n    @Override\n    public void mouseReleased(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.RELEASE);\n    }\n    @Override\n    public void mouseClicked(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.CLICK);\n    }\n    @Override\n    public void mouseDragged(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.DRAG);\n    }\n    @Override\n    public void mouseMoved(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.MOVE);\n    }\n    @Override\n    public void mouseWheelMoved(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.WHEEL);\n    }\n    @Override\n    public void mouseEntered(com.jogamp.newt.event.MouseEvent e) {\n//      System.out.println(\"enter\");\n      nativeMouseEvent(e, MouseEvent.ENTER);\n    }\n    @Override\n    public void mouseExited(com.jogamp.newt.event.MouseEvent e) {\n//      System.out.println(\"exit\");\n      nativeMouseEvent(e, MouseEvent.EXIT);\n    }\n  }",
    "right" : "protected class NEWTMouseListener extends com.jogamp.newt.event.MouseAdapter {\n    public NEWTMouseListener() {\n      super();\n    }\n    @Override\n    public void mousePressed(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.PRESS);\n    }\n    @Override\n    public void mouseReleased(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.RELEASE);\n    }\n    @Override\n    public void mouseClicked(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.CLICK);\n    }\n    @Override\n    public void mouseDragged(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.DRAG);\n    }\n    @Override\n    public void mouseMoved(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.MOVE);\n    }\n    @Override\n    public void mouseWheelMoved(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.WHEEL);\n    }\n    @Override\n    public void mouseEntered(com.jogamp.newt.event.MouseEvent e) {\n//      System.out.println(\"enter\");\n      nativeMouseEvent(e, MouseEvent.ENTER);\n    }\n    @Override\n    public void mouseExited(com.jogamp.newt.event.MouseEvent e) {\n//      System.out.println(\"exit\");\n      nativeMouseEvent(e, MouseEvent.EXIT);\n    }\n  }",
    "info" : "TypeDeclaration[21684-22949]:TypeDeclaration[22264-23529]"
  }, {
    "left" : "public )",
    "right" : "public )",
    "info" : "MethodDeclaration[21767-21816]:MethodDeclaration[22347-22396]"
  }, {
    "left" : "@Override\n    public void mousePressed(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.PRESS);\n    }",
    "right" : "@Override\n    public void mousePressed(com.jogamp.newt.event.MouseEvent e) {\n      nativeMouseEvent(e, MouseEvent.PRESS);\n    }",
    "info" : "MethodDeclaration[21821-21948]:MethodDeclaration[22401-22528]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[21953-22083]:MethodDeclaration[22533-22663]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22088-22215]:MethodDeclaration[22668-22795]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22220-22346]:MethodDeclaration[22800-22926]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22351-22475]:MethodDeclaration[22931-23055]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22480-22610]:MethodDeclaration[23060-23190]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22615-22779]:MethodDeclaration[23195-23359]"
  }, {
    "left" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "right" : "public e com.jogamp.newt.event.MouseEvent) : void",
    "info" : "MethodDeclaration[22784-22945]:MethodDeclaration[23364-23525]"
  }, {
    "left" : "protected class NEWTKeyListener extends com.jogamp.newt.event.KeyAdapter {\n    public NEWTKeyListener() {\n      super();\n    }\n    @Override\n    public void keyPressed(com.jogamp.newt.event.KeyEvent e) {\n      nativeKeyEvent(e, KeyEvent.PRESS);\n    }\n    @Override\n    public void keyReleased(com.jogamp.newt.event.KeyEvent e) {\n      nativeKeyEvent(e, KeyEvent.RELEASE);\n    }\n    public void keyTyped(com.jogamp.newt.event.KeyEvent e)  {\n      nativeKeyEvent(e, KeyEvent.TYPE);\n    }\n  }",
    "right" : "protected class NEWTKeyListener extends com.jogamp.newt.event.KeyAdapter {\n    public NEWTKeyListener() {\n      super();\n    }\n    @Override\n    public void keyPressed(com.jogamp.newt.event.KeyEvent e) {\n      nativeKeyEvent(e, KeyEvent.PRESS);\n    }\n    @Override\n    public void keyReleased(com.jogamp.newt.event.KeyEvent e) {\n      nativeKeyEvent(e, KeyEvent.RELEASE);\n    }\n    public void keyTyped(com.jogamp.newt.event.KeyEvent e)  {\n      nativeKeyEvent(e, KeyEvent.TYPE);\n    }\n  }",
    "info" : "TypeDeclaration[22976-23465]:TypeDeclaration[23556-24045]"
  }, {
    "left" : "public NEWTKeyListener() {\n      super();\n    }",
    "right" : "public NEWTKeyListener() {\n      super();\n    }",
    "info" : "MethodDeclaration[23055-23102]:MethodDeclaration[23635-23682]"
  }, {
    "left" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "right" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "info" : "MethodDeclaration[23107-23226]:MethodDeclaration[23687-23806]"
  }, {
    "left" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "right" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "info" : "MethodDeclaration[23231-23353]:MethodDeclaration[23811-23933]"
  }, {
    "left" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "right" : "public e com.jogamp.newt.event.KeyEvent) : void",
    "info" : "MethodDeclaration[23358-23461]:MethodDeclaration[23938-24041]"
  }, {
    "left" : "protected nativeEvent com.jogamp.newt.event.MouseEvent, peAction int) : void",
    "right" : "protected nativeEvent com.jogamp.newt.event.MouseEvent, peAction int) : void",
    "info" : "MethodDeclaration[23469-25851]:MethodDeclaration[24049-26431]"
  }, {
    "left" : "protected void nativeKeyEvent(com.jogamp.newt.event.KeyEvent nativeEvent,\n                                int peAction) {\n    int peModifiers = nativeEvent.getModifiers() &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);\n\n    short code = nativeEvent.getKeyCode();\n    char keyChar;\n    int keyCode;\n    if (isPCodedKey(code)) {\n      keyCode = mapToPConst(code);\n      keyChar = PConstants.CODED;\n    } else if (isHackyKey(code)) {\n      keyCode = code;\n      keyChar = hackToChar(code, nativeEvent.getKeyChar());\n    } else {\n      keyCode = code;\n      keyChar = nativeEvent.getKeyChar();\n    }\n\n    // From http://jogamp.org/deployment/v2.1.0/javadoc/jogl/javadoc/com/jogamp/newt/event/KeyEvent.html\n    // public final short getKeySymbol()\n    // Returns the virtual key symbol reflecting the current keyboard layout.\n    // public final short getKeyCode()\n    // Returns the virtual key code using a fixed mapping to the US keyboard layout.\n    // In contrast to key symbol, key code uses a fixed US keyboard layout and therefore is keyboard layout independent.\n    // E.g. virtual key code VK_Y denotes the same physical key regardless whether keyboard layout QWERTY or QWERTZ is active. The key symbol of the former is VK_Y, where the latter produces VK_Y.\n    KeyEvent ke = new KeyEvent(nativeEvent, nativeEvent.getWhen(),\n                               peAction, peModifiers,\n                               keyChar,\n                               keyCode);\n\n    sketch.postEvent(ke);\n  }",
    "right" : "protected void nativeKeyEvent(com.jogamp.newt.event.KeyEvent nativeEvent,\n                                int peAction) {\n    int peModifiers = nativeEvent.getModifiers() &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);\n\n    short code = nativeEvent.getKeyCode();\n    char keyChar;\n    int keyCode;\n    if (isPCodedKey(code)) {\n      keyCode = mapToPConst(code);\n      keyChar = PConstants.CODED;\n    } else if (isHackyKey(code)) {\n      keyCode = code;\n      keyChar = hackToChar(code, nativeEvent.getKeyChar());\n    } else {\n      keyCode = code;\n      keyChar = nativeEvent.getKeyChar();\n    }\n\n    // From http://jogamp.org/deployment/v2.1.0/javadoc/jogl/javadoc/com/jogamp/newt/event/KeyEvent.html\n    // public final short getKeySymbol()\n    // Returns the virtual key symbol reflecting the current keyboard layout.\n    // public final short getKeyCode()\n    // Returns the virtual key code using a fixed mapping to the US keyboard layout.\n    // In contrast to key symbol, key code uses a fixed US keyboard layout and therefore is keyboard layout independent.\n    // E.g. virtual key code VK_Y denotes the same physical key regardless whether keyboard layout QWERTY or QWERTZ is active. The key symbol of the former is VK_Y, where the latter produces VK_Y.\n    KeyEvent ke = new KeyEvent(nativeEvent, nativeEvent.getWhen(),\n                               peAction, peModifiers,\n                               keyChar,\n                               keyCode);\n\n    sketch.postEvent(ke);\n  }",
    "info" : "MethodDeclaration[25855-27488]:MethodDeclaration[26435-28068]"
  }, {
    "left" : "private code short) : boolean",
    "right" : "private code short) : boolean",
    "info" : "MethodDeclaration[27492-28035]:MethodDeclaration[28072-28615]"
  }, {
    "left" : "private code short) : int",
    "right" : "private code short) : int",
    "info" : "MethodDeclaration[28244-29091]:MethodDeclaration[28824-29671]"
  }, {
    "left" : "private code short) : boolean",
    "right" : "private code short) : boolean",
    "info" : "MethodDeclaration[29095-29271]:MethodDeclaration[29675-29851]"
  }, {
    "left" : "private code short, def char) : char",
    "right" : "private code short, def char) : char",
    "info" : "MethodDeclaration[29275-29521]:MethodDeclaration[29855-30101]"
  }, {
    "left" : "public void setCursor(int kind) {\n    System.err.println(\"Cursor types not supported in OpenGL, provide your cursor image\");\n  }",
    "right" : "public void setCursor(int kind) {\n    System.err.println(\"Cursor types not supported in OpenGL, provide your cursor image\");\n  }",
    "info" : "MethodDeclaration[29606-29734]:MethodDeclaration[30186-30314]"
  }, {
    "left" : "public void setCursor(PImage image, int hotspotX, int hotspotY) {\n    final Display disp = window.getScreen().getDisplay();\n    disp.createNative();\n\n//    BufferedImage jimg = (BufferedImage)image.getNative();\n//    IntBuffer buf = IntBuffer.wrap(jimg.getRGB(0, 0, jimg.getWidth(), jimg.getHeight(),\n//                                               null, 0, jimg.getWidth()));\n//\n//    final PixelRectangle pixelrect = new PixelRectangle.GenericPixelRect(srcFmt, new Dimension(width, height),\n//        srcStrideBytes, srcIsGLOriented, srcPixels);\n//\n//    PointerIcon pi = disp.createPointerIcon(PixelRectangle pixelrect,\n//                                            hotspotX,\n//                                            hotspotY);\n//\n//    window.setPointerIcon(pi);\n\n  }",
    "right" : "public void setCursor(PImage image, int hotspotX, int hotspotY) {\n    final Display disp = window.getScreen().getDisplay();\n    disp.createNative();\n\n//    BufferedImage jimg = (BufferedImage)image.getNative();\n//    IntBuffer buf = IntBuffer.wrap(jimg.getRGB(0, 0, jimg.getWidth(), jimg.getHeight(),\n//                                               null, 0, jimg.getWidth()));\n//\n//    final PixelRectangle pixelrect = new PixelRectangle.GenericPixelRect(srcFmt, new Dimension(width, height),\n//        srcStrideBytes, srcIsGLOriented, srcPixels);\n//\n//    PointerIcon pi = disp.createPointerIcon(PixelRectangle pixelrect,\n//                                            hotspotX,\n//                                            hotspotY);\n//\n//    window.setPointerIcon(pi);\n\n  }",
    "info" : "MethodDeclaration[29739-30516]:MethodDeclaration[30319-31096]"
  }, {
    "left" : "public void showCursor() {\n    window.setPointerVisible(true);\n  }",
    "right" : "public void showCursor() {\n    window.setPointerVisible(true);\n  }",
    "info" : "MethodDeclaration[30520-30586]:MethodDeclaration[31100-31166]"
  }, {
    "left" : "public void hideCursor() {\n    window.setPointerVisible(false);\n  }",
    "right" : "public void hideCursor() {\n    window.setPointerVisible(false);\n  }",
    "info" : "MethodDeclaration[30590-30657]:MethodDeclaration[31170-31237]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1432-1438]:Modifier[1432-1438]"
  }, {
    "left" : "PSurface",
    "right" : "PSurface",
    "info" : "SimpleType[1469-1477]:SimpleType[1469-1477]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2034-2040]:Modifier[2100-2106]"
  }, {
    "left" : "PGraphics graphics",
    "right" : "PGraphics graphics",
    "info" : "SingleVariableDeclaration[2054-2072]:SingleVariableDeclaration[2120-2138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2074-2165]:Block[2140-2231]"
  }, {
    "left" : "this.graphics = graphics;",
    "right" : "this.graphics = graphics;",
    "info" : "ExpressionStatement[2080-2105]:ExpressionStatement[2146-2171]"
  }, {
    "left" : "this.pgl = (PJOGL) ((PGraphicsOpenGL)graphics).pgl;",
    "right" : "this.pgl = (PJOGL) ((PGraphicsOpenGL)graphics).pgl;",
    "info" : "ExpressionStatement[2110-2161]:ExpressionStatement[2176-2227]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2170-2176]:Modifier[2236-2242]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2177-2181]:PrimitiveType[2243-2247]"
  }, {
    "left" : "PApplet sketch",
    "right" : "PApplet sketch",
    "info" : "SingleVariableDeclaration[2196-2210]:SingleVariableDeclaration[2262-2276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2212-2570]:Block[2278-2636]"
  }, {
    "left" : "this.sketch = sketch;",
    "right" : "this.sketch = sketch;",
    "info" : "ExpressionStatement[2218-2239]:ExpressionStatement[2284-2305]"
  }, {
    "left" : "sketchWidth = sketch.sketchWidth();",
    "right" : "sketchWidth = sketch.sketchWidth();",
    "info" : "ExpressionStatement[2245-2280]:ExpressionStatement[2311-2346]"
  }, {
    "left" : "sketchHeight = sketch.sketchHeight();",
    "right" : "sketchHeight = sketch.sketchHeight();",
    "info" : "ExpressionStatement[2285-2322]:ExpressionStatement[2351-2388]"
  }, {
    "left" : "if (window != null)",
    "right" : "if (window != null)",
    "info" : "IfStatement[2328-2566]:IfStatement[2394-2632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2348-2566]:Block[2414-2632]"
  }, {
    "left" : "canvas = new NewtCanvasAWT(window);",
    "right" : "canvas = new NewtCanvasAWT(window);",
    "info" : "ExpressionStatement[2356-2391]:ExpressionStatement[2422-2457]"
  }, {
    "left" : "canvas.setBounds(0, 0, window.getWidth(), window.getHeight());",
    "right" : "canvas.setBounds(0, 0, window.getWidth(), window.getHeight());",
    "info" : "ExpressionStatement[2398-2460]:ExpressionStatement[2464-2526]"
  }, {
    "left" : "canvas.setFocusable(true);",
    "right" : "canvas.setFocusable(true);",
    "info" : "ExpressionStatement[2534-2560]:ExpressionStatement[2600-2626]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2575-2581]:Modifier[2641-2647]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2582-2586]:PrimitiveType[2648-2652]"
  }, {
    "left" : "PApplet sketch",
    "right" : "PApplet sketch",
    "info" : "SingleVariableDeclaration[2597-2611]:SingleVariableDeclaration[2663-2677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2613-2916]:Block[2679-2953]"
  }, {
    "left" : "this.sketch = sketch;",
    "right" : "this.sketch = sketch;",
    "info" : "ExpressionStatement[2754-2775]:ExpressionStatement[2820-2841]"
  }, {
    "left" : "initIcons();",
    "right" : "initIcons();",
    "info" : "ExpressionStatement[2780-2792]:ExpressionStatement[2846-2858]"
  }, {
    "left" : "initScreen();",
    "right" : "initScreen();",
    "info" : "ExpressionStatement[2797-2810]:ExpressionStatement[2863-2876]"
  }, {
    "left" : "initGL();",
    "right" : "initGL();",
    "info" : "ExpressionStatement[2815-2824]:ExpressionStatement[2881-2890]"
  }, {
    "left" : "initWindow();",
    "right" : "initWindow();",
    "info" : "ExpressionStatement[2829-2842]:ExpressionStatement[2895-2908]"
  }, {
    "left" : "initListeners();",
    "right" : "initListeners();",
    "info" : "ExpressionStatement[2847-2863]:ExpressionStatement[2913-2929]"
  }, {
    "left" : "initAnimator();",
    "right" : "initAnimator();",
    "info" : "ExpressionStatement[2868-2883]:ExpressionStatement[2934-2949]"
  }, {
    "left" : "window.setVisible(true);",
    "right" : "window.setVisible(true);",
    "info" : "ExpressionStatement[2888-2912]:ExpressionStatement[15922-15946]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2921-2930]:Modifier[2958-2967]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2931-2935]:PrimitiveType[2968-2972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2949-4573]:Block[2986-4610]"
  }, {
    "left" : "display = NewtFactory.createDisplay(null);",
    "right" : "display = NewtFactory.createDisplay(null);",
    "info" : "ExpressionStatement[2955-2997]:ExpressionStatement[2992-3034]"
  }, {
    "left" : "display.addReference();",
    "right" : "display.addReference();",
    "info" : "ExpressionStatement[3002-3025]:ExpressionStatement[3039-3062]"
  }, {
    "left" : "screen = NewtFactory.createScreen(display, 0);",
    "right" : "screen = NewtFactory.createScreen(display, 0);",
    "info" : "ExpressionStatement[3030-3076]:ExpressionStatement[3067-3113]"
  }, {
    "left" : "screen.addReference();",
    "right" : "screen.addReference();",
    "info" : "ExpressionStatement[3081-3103]:ExpressionStatement[3118-3140]"
  }, {
    "left" : "monitors = new ArrayList<MonitorDevice>();",
    "right" : "monitors = new ArrayList<MonitorDevice>();",
    "info" : "ExpressionStatement[3109-3151]:ExpressionStatement[3146-3188]"
  }, {
    "left" : "GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "right" : "GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "info" : "VariableDeclarationStatement[3156-3240]:VariableDeclarationStatement[3193-3277]"
  }, {
    "left" : "GraphicsDevice[] devices = environment.getScreenDevices();",
    "right" : "GraphicsDevice[] devices = environment.getScreenDevices();",
    "info" : "VariableDeclarationStatement[3245-3303]:VariableDeclarationStatement[3282-3340]"
  }, {
    "left" : "for (GraphicsDevice device: devices)",
    "right" : "for (GraphicsDevice device: devices)",
    "info" : "EnhancedForStatement[3308-4569]:EnhancedForStatement[3345-4606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3345-4569]:Block[3382-4606]"
  }, {
    "left" : "String did = device.getIDstring();",
    "right" : "String did = device.getIDstring();",
    "info" : "VariableDeclarationStatement[3353-3387]:VariableDeclarationStatement[3390-3424]"
  }, {
    "left" : "String[] parts = did.split(\"Display\");",
    "right" : "String[] parts = did.split(\"Display\");",
    "info" : "VariableDeclarationStatement[3394-3432]:VariableDeclarationStatement[3431-3469]"
  }, {
    "left" : "String id1 = \"\";",
    "right" : "String id1 = \"\";",
    "info" : "VariableDeclarationStatement[3439-3455]:VariableDeclarationStatement[3476-3492]"
  }, {
    "left" : "if (1 < parts.length)",
    "right" : "if (1 < parts.length)",
    "info" : "IfStatement[3462-3524]:IfStatement[3499-3561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3484-3524]:Block[3521-3561]"
  }, {
    "left" : "id1 = parts[1].trim();",
    "right" : "id1 = parts[1].trim();",
    "info" : "ExpressionStatement[3494-3516]:ExpressionStatement[3531-3553]"
  }, {
    "left" : "MonitorDevice monitor = null;",
    "right" : "MonitorDevice monitor = null;",
    "info" : "VariableDeclarationStatement[3531-3560]:VariableDeclarationStatement[3568-3597]"
  }, {
    "left" : "for (int i = 0; i < screen.getMonitorDevices().size(); i++)",
    "right" : "for (int i = 0; i < screen.getMonitorDevices().size(); i++)",
    "info" : "ForStatement[3567-4087]:ForStatement[3604-4124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3627-4087]:Block[3664-4124]"
  }, {
    "left" : "MonitorDevice mon = screen.getMonitorDevices().get(i);",
    "right" : "MonitorDevice mon = screen.getMonitorDevices().get(i);",
    "info" : "VariableDeclarationStatement[3637-3691]:VariableDeclarationStatement[3674-3728]"
  }, {
    "left" : "String mid = String.valueOf(mon.getId());",
    "right" : "String mid = String.valueOf(mon.getId());",
    "info" : "VariableDeclarationStatement[3700-3741]:VariableDeclarationStatement[3737-3778]"
  }, {
    "left" : "if (id1.equals(mid))",
    "right" : "if (id1.equals(mid))",
    "info" : "IfStatement[3750-4079]:IfStatement[3787-4116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3771-4079]:Block[3808-4116]"
  }, {
    "left" : "monitor = mon;",
    "right" : "monitor = mon;",
    "info" : "ExpressionStatement[4038-4052]:ExpressionStatement[4075-4089]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4063-4069]:BreakStatement[4100-4106]"
  }, {
    "left" : "if (monitor == null)",
    "right" : "if (monitor == null)",
    "info" : "IfStatement[4094-4495]:IfStatement[4131-4532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4115-4495]:Block[4152-4532]"
  }, {
    "left" : "for (int i = 0; i < screen.getMonitorDevices().size(); i++)",
    "right" : "for (int i = 0; i < screen.getMonitorDevices().size(); i++)",
    "info" : "ForStatement[4202-4487]:ForStatement[4239-4524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4262-4487]:Block[4299-4524]"
  }, {
    "left" : "MonitorDevice mon = screen.getMonitorDevices().get(i);",
    "right" : "MonitorDevice mon = screen.getMonitorDevices().get(i);",
    "info" : "VariableDeclarationStatement[4274-4328]:VariableDeclarationStatement[4311-4365]"
  }, {
    "left" : "String mid = String.valueOf(mon.getId());",
    "right" : "String mid = String.valueOf(mon.getId());",
    "info" : "VariableDeclarationStatement[4339-4380]:VariableDeclarationStatement[4376-4417]"
  }, {
    "left" : "if (-1 < did.indexOf(mid))",
    "right" : "if (-1 < did.indexOf(mid))",
    "info" : "IfStatement[4391-4477]:IfStatement[4428-4514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4418-4477]:Block[4455-4514]"
  }, {
    "left" : "monitor = mon;",
    "right" : "monitor = mon;",
    "info" : "ExpressionStatement[4432-4446]:ExpressionStatement[4469-4483]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4459-4465]:BreakStatement[4496-4502]"
  }, {
    "left" : "if (monitor != null)",
    "right" : "if (monitor != null)",
    "info" : "IfStatement[4502-4563]:IfStatement[4539-4600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4523-4563]:Block[4560-4600]"
  }, {
    "left" : "monitors.add(monitor);",
    "right" : "monitors.add(monitor);",
    "info" : "ExpressionStatement[4533-4555]:ExpressionStatement[4570-4592]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4577-4586]:Modifier[4614-4623]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4587-4591]:PrimitiveType[4624-4628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4601-6162]:Block[4638-6199]"
  }, {
    "left" : "if (profile == null)",
    "right" : "if (profile == null)",
    "info" : "IfStatement[4666-5622]:IfStatement[4703-5659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4687-5622]:Block[4724-5659]"
  }, {
    "left" : "if (PJOGL.PROFILE == 2)",
    "right" : "if (PJOGL.PROFILE == 2)",
    "info" : "IfStatement[4695-5616]:IfStatement[4732-5653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4719-4883]:Block[4756-4920]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4729-4875]:TryStatement[4766-4912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4733-4787]:Block[4770-4824]"
  }, {
    "left" : "profile = GLProfile.getGL2ES1();",
    "right" : "profile = GLProfile.getGL2ES1();",
    "info" : "ExpressionStatement[4745-4777]:ExpressionStatement[4782-4814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4811-4875]:Block[4848-4912]"
  }, {
    "left" : "profile = GLProfile.getMaxFixedFunc(true);",
    "right" : "profile = GLProfile.getMaxFixedFunc(true);",
    "info" : "ExpressionStatement[4823-4865]:ExpressionStatement[4860-4902]"
  }, {
    "left" : "if (PJOGL.PROFILE == 3)",
    "right" : "if (PJOGL.PROFILE == 3)",
    "info" : "IfStatement[4889-5616]:IfStatement[4926-5653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4913-5218]:Block[4950-5255]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4923-5072]:TryStatement[4960-5109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4927-4981]:Block[4964-5018]"
  }, {
    "left" : "profile = GLProfile.getGL2GL3();",
    "right" : "profile = GLProfile.getGL2GL3();",
    "info" : "ExpressionStatement[4939-4971]:ExpressionStatement[4976-5008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5005-5072]:Block[5042-5109]"
  }, {
    "left" : "profile = GLProfile.getMaxProgrammable(true);",
    "right" : "profile = GLProfile.getMaxProgrammable(true);",
    "info" : "ExpressionStatement[5017-5062]:ExpressionStatement[5054-5099]"
  }, {
    "left" : "if (!profile.isGL3())",
    "right" : "if (!profile.isGL3())",
    "info" : "IfStatement[5081-5210]:IfStatement[5118-5247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5103-5210]:Block[5140-5247]"
  }, {
    "left" : "PGraphics.showWarning(\"Requested profile GL3 but is not available, got: \" + profile);",
    "right" : "PGraphics.showWarning(\"Requested profile GL3 but is not available, got: \" + profile);",
    "info" : "ExpressionStatement[5115-5200]:ExpressionStatement[5152-5237]"
  }, {
    "left" : "if (PJOGL.PROFILE == 4)",
    "right" : "if (PJOGL.PROFILE == 4)",
    "info" : "IfStatement[5224-5616]:IfStatement[5261-5653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5248-5553]:Block[5285-5590]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[5258-5407]:TryStatement[5295-5444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5262-5316]:Block[5299-5353]"
  }, {
    "left" : "profile = GLProfile.getGL4ES3();",
    "right" : "profile = GLProfile.getGL4ES3();",
    "info" : "ExpressionStatement[5274-5306]:ExpressionStatement[5311-5343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5340-5407]:Block[5377-5444]"
  }, {
    "left" : "profile = GLProfile.getMaxProgrammable(true);",
    "right" : "profile = GLProfile.getMaxProgrammable(true);",
    "info" : "ExpressionStatement[5352-5397]:ExpressionStatement[5389-5434]"
  }, {
    "left" : "if (!profile.isGL4())",
    "right" : "if (!profile.isGL4())",
    "info" : "IfStatement[5416-5545]:IfStatement[5453-5582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5438-5545]:Block[5475-5582]"
  }, {
    "left" : "PGraphics.showWarning(\"Requested profile GL4 but is not available, got: \" + profile);",
    "right" : "PGraphics.showWarning(\"Requested profile GL4 but is not available, got: \" + profile);",
    "info" : "ExpressionStatement[5450-5535]:ExpressionStatement[5487-5572]"
  }, {
    "left" : "throw new RuntimeException(PGL.UNSUPPORTED_GLPROF_ERROR);",
    "right" : "throw new RuntimeException(PGL.UNSUPPORTED_GLPROF_ERROR);",
    "info" : "ThrowStatement[5559-5616]:ThrowStatement[5596-5653]"
  }, {
    "left" : "GLCapabilities caps = new GLCapabilities(profile);",
    "right" : "GLCapabilities caps = new GLCapabilities(profile);",
    "info" : "VariableDeclarationStatement[5672-5722]:VariableDeclarationStatement[5709-5759]"
  }, {
    "left" : "caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);",
    "right" : "caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);",
    "info" : "ExpressionStatement[5727-5771]:ExpressionStatement[5764-5808]"
  }, {
    "left" : "caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);",
    "right" : "caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);",
    "info" : "ExpressionStatement[5776-5820]:ExpressionStatement[5813-5857]"
  }, {
    "left" : "caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);",
    "right" : "caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);",
    "info" : "ExpressionStatement[5825-5873]:ExpressionStatement[5862-5910]"
  }, {
    "left" : "pgl.reqNumSamples = PGL.smoothToSamples(graphics.smooth);",
    "right" : "pgl.reqNumSamples = PGL.smoothToSamples(graphics.smooth);",
    "info" : "ExpressionStatement[5932-5989]:ExpressionStatement[5969-6026]"
  }, {
    "left" : "caps.setSampleBuffers(true);",
    "right" : "caps.setSampleBuffers(true);",
    "info" : "ExpressionStatement[5994-6022]:ExpressionStatement[6031-6059]"
  }, {
    "left" : "caps.setNumSamples(pgl.reqNumSamples);",
    "right" : "caps.setNumSamples(pgl.reqNumSamples);",
    "info" : "ExpressionStatement[6027-6065]:ExpressionStatement[6064-6102]"
  }, {
    "left" : "caps.setBackgroundOpaque(true);",
    "right" : "caps.setBackgroundOpaque(true);",
    "info" : "ExpressionStatement[6070-6101]:ExpressionStatement[6107-6138]"
  }, {
    "left" : "caps.setOnscreen(true);",
    "right" : "caps.setOnscreen(true);",
    "info" : "ExpressionStatement[6106-6129]:ExpressionStatement[6143-6166]"
  }, {
    "left" : "pgl.capabilities = caps;",
    "right" : "pgl.capabilities = caps;",
    "info" : "ExpressionStatement[6134-6158]:ExpressionStatement[6171-6195]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6167-6176]:Modifier[6204-6213]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6177-6181]:PrimitiveType[6214-6218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6195-8893]:Block[6232-8957]"
  }, {
    "left" : "window = GLWindow.create(screen, pgl.capabilities);",
    "right" : "window = GLWindow.create(screen, pgl.capabilities);",
    "info" : "ExpressionStatement[6201-6252]:ExpressionStatement[6238-6289]"
  }, {
    "left" : "if (displayDevice == null)",
    "right" : "if (displayDevice == null)",
    "info" : "IfStatement[6257-6338]:IfStatement[6294-6375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6284-6338]:Block[6321-6375]"
  }, {
    "left" : "displayDevice = window.getMainMonitor();",
    "right" : "displayDevice = window.getMainMonitor();",
    "info" : "ExpressionStatement[6292-6332]:ExpressionStatement[6329-6369]"
  }, {
    "left" : "int displayNum = sketch.sketchDisplay();",
    "right" : "int displayNum = sketch.sketchDisplay();",
    "info" : "VariableDeclarationStatement[6344-6384]:VariableDeclarationStatement[6381-6421]"
  }, {
    "left" : "if (displayNum > 0)",
    "right" : "if (displayNum > 0)",
    "info" : "IfStatement[6389-6826]:IfStatement[6426-6863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6409-6826]:Block[6446-6863]"
  }, {
    "left" : "if (displayNum <= monitors.size())",
    "right" : "if (displayNum <= monitors.size())",
    "info" : "IfStatement[6451-6820]:IfStatement[6488-6857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6486-6549]:Block[6523-6586]"
  }, {
    "left" : "displayDevice = monitors.get(displayNum - 1);",
    "right" : "displayDevice = monitors.get(displayNum - 1);",
    "info" : "ExpressionStatement[6496-6541]:ExpressionStatement[6533-6578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6555-6820]:Block[6592-6857]"
  }, {
    "left" : "System.err.format(\"Display %d does not exist, \" +\n          \"using the default display instead.%n\", displayNum);",
    "right" : "System.err.format(\"Display %d does not exist, \" +\n          \"using the default display instead.%n\", displayNum);",
    "info" : "ExpressionStatement[6565-6677]:ExpressionStatement[6602-6714]"
  }, {
    "left" : "for (int i = 0; i < monitors.size(); i++)",
    "right" : "for (int i = 0; i < monitors.size(); i++)",
    "info" : "ForStatement[6686-6812]:ForStatement[6723-6849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6728-6812]:Block[6765-6849]"
  }, {
    "left" : "System.err.format(\"Display %d is %s%n\", i+1, monitors.get(i));",
    "right" : "System.err.format(\"Display %d is %s%n\", i+1, monitors.get(i));",
    "info" : "ExpressionStatement[6740-6802]:ExpressionStatement[6777-6839]"
  }, {
    "left" : "boolean spanDisplays = sketch.sketchDisplay() == PConstants.SPAN;",
    "right" : "boolean spanDisplays = sketch.sketchDisplay() == PConstants.SPAN;",
    "info" : "VariableDeclarationStatement[6832-6897]:VariableDeclarationStatement[6869-6934]"
  }, {
    "left" : "screenRect = spanDisplays ?\n      new Rectangle(0, 0, screen.getWidth(), screen.getHeight()) :\n      new Rectangle(0, 0,\n                    displayDevice.getViewportInWindowUnits().getWidth(),\n                    displayDevice.getViewportInWindowUnits().getHeight());",
    "right" : "screenRect = spanDisplays ?\n      new Rectangle(0, 0, screen.getWidth(), screen.getHeight()) :\n      new Rectangle(0, 0,\n                    displayDevice.getViewportInWindowUnits().getWidth(),\n                    displayDevice.getViewportInWindowUnits().getHeight());",
    "info" : "ExpressionStatement[6902-7170]:ExpressionStatement[6939-7207]"
  }, {
    "left" : "sketch.displayWidth = screenRect.width;",
    "right" : "sketch.displayWidth = screenRect.width;",
    "info" : "ExpressionStatement[7331-7370]:ExpressionStatement[7368-7407]"
  }, {
    "left" : "sketch.displayHeight = screenRect.height;",
    "right" : "sketch.displayHeight = screenRect.height;",
    "info" : "ExpressionStatement[7375-7416]:ExpressionStatement[7412-7453]"
  }, {
    "left" : "sketchWidth = sketch.sketchWidth();",
    "right" : "sketchWidth = sketch.sketchWidth();",
    "info" : "ExpressionStatement[7422-7457]:ExpressionStatement[7459-7494]"
  }, {
    "left" : "sketchHeight = sketch.sketchHeight();",
    "right" : "sketchHeight = sketch.sketchHeight();",
    "info" : "ExpressionStatement[7462-7499]:ExpressionStatement[7499-7536]"
  }, {
    "left" : "boolean fullScreen = sketch.sketchFullScreen();",
    "right" : "boolean fullScreen = sketch.sketchFullScreen();",
    "info" : "VariableDeclarationStatement[7505-7552]:VariableDeclarationStatement[7542-7589]"
  }, {
    "left" : "if (screenRect.width == sketchWidth &&\n        screenRect.height == sketchHeight)",
    "right" : "if (screenRect.width == sketchWidth &&\n        screenRect.height == sketchHeight)",
    "info" : "IfStatement[7686-7827]:IfStatement[7723-7864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7768-7827]:Block[7805-7864]"
  }, {
    "left" : "fullScreen = true;",
    "right" : "fullScreen = true;",
    "info" : "ExpressionStatement[7776-7794]:ExpressionStatement[7813-7831]"
  }, {
    "left" : "sketch.fullScreen();",
    "right" : "sketch.fullScreen();",
    "info" : "ExpressionStatement[7801-7821]:ExpressionStatement[7838-7858]"
  }, {
    "left" : "if (fullScreen || spanDisplays)",
    "right" : "if (fullScreen || spanDisplays)",
    "info" : "IfStatement[7833-7950]:IfStatement[7870-7987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7865-7950]:Block[7902-7987]"
  }, {
    "left" : "sketchWidth = screenRect.width;",
    "right" : "sketchWidth = screenRect.width;",
    "info" : "ExpressionStatement[7873-7904]:ExpressionStatement[7910-7941]"
  }, {
    "left" : "sketchHeight = screenRect.height;",
    "right" : "sketchHeight = screenRect.height;",
    "info" : "ExpressionStatement[7911-7944]:ExpressionStatement[7948-7981]"
  }, {
    "left" : "float[] reqSurfacePixelScale;",
    "right" : "float[] reqSurfacePixelScale;",
    "info" : "VariableDeclarationStatement[7956-7985]:VariableDeclarationStatement[7993-8022]"
  }, {
    "left" : "if (graphics.is2X())",
    "right" : "if (graphics.is2X())",
    "info" : "IfStatement[7990-8392]:IfStatement[8027-8429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8011-8197]:Block[8048-8234]"
  }, {
    "left" : "reqSurfacePixelScale = new float[] { ScalableSurface.AUTOMAX_PIXELSCALE,\n                                            ScalableSurface.AUTOMAX_PIXELSCALE };",
    "right" : "reqSurfacePixelScale = new float[] { ScalableSurface.AUTOMAX_PIXELSCALE,\n                                            ScalableSurface.AUTOMAX_PIXELSCALE };",
    "info" : "ExpressionStatement[8037-8191]:ExpressionStatement[8074-8228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8203-8392]:Block[8240-8429]"
  }, {
    "left" : "reqSurfacePixelScale = new float[] { ScalableSurface.IDENTITY_PIXELSCALE,\n                                           ScalableSurface.IDENTITY_PIXELSCALE };",
    "right" : "reqSurfacePixelScale = new float[] { ScalableSurface.IDENTITY_PIXELSCALE,\n                                           ScalableSurface.IDENTITY_PIXELSCALE };",
    "info" : "ExpressionStatement[8231-8386]:ExpressionStatement[8268-8423]"
  }, {
    "left" : "window.setSurfaceScale(reqSurfacePixelScale);",
    "right" : "window.setSurfaceScale(reqSurfacePixelScale);",
    "info" : "ExpressionStatement[8397-8442]:ExpressionStatement[8434-8479]"
  }, {
    "left" : "window.setSize(sketchWidth, sketchHeight);",
    "right" : "window.setSize(sketchWidth, sketchHeight);",
    "info" : "ExpressionStatement[8447-8489]:ExpressionStatement[8484-8526]"
  }, {
    "left" : "setSize(sketchWidth, sketchHeight);",
    "right" : "setSize(sketchWidth, sketchHeight);",
    "info" : "ExpressionStatement[8494-8529]:ExpressionStatement[8531-8566]"
  }, {
    "left" : "sketchX = displayDevice.getViewportInWindowUnits().getX();",
    "right" : "sketchX = displayDevice.getViewportInWindowUnits().getX();",
    "info" : "ExpressionStatement[8534-8592]:ExpressionStatement[8571-8629]"
  }, {
    "left" : "sketchY = displayDevice.getViewportInWindowUnits().getY();",
    "right" : "sketchY = displayDevice.getViewportInWindowUnits().getY();",
    "info" : "ExpressionStatement[8597-8655]:ExpressionStatement[8634-8692]"
  }, {
    "left" : "if (fullScreen)",
    "right" : "if (fullScreen)",
    "info" : "IfStatement[8660-8889]:IfStatement[8697-8953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8676-8889]:Block[8713-8953]"
  }, {
    "left" : "PApplet.hideMenuBar();",
    "right" : "PApplet.hideMenuBar();",
    "info" : "ExpressionStatement[8684-8706]:ExpressionStatement[8721-8743]"
  }, {
    "left" : "window.setTopLevelPosition(sketchX, sketchY);",
    "right" : "window.setTopLevelPosition(sketchX, sketchY);",
    "info" : "ExpressionStatement[8713-8758]:ExpressionStatement[8750-8795]"
  }, {
    "left" : "if (spanDisplays)",
    "right" : "if (spanDisplays)",
    "info" : "IfStatement[8765-8883]:IfStatement[8829-8947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8783-8832]:Block[8847-8896]"
  }, {
    "left" : "window.setFullscreen(monitors);",
    "right" : "window.setFullscreen(monitors);",
    "info" : "ExpressionStatement[8793-8824]:ExpressionStatement[8857-8888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8838-8883]:Block[8902-8947]"
  }, {
    "left" : "window.setFullscreen(true);",
    "right" : "window.setFullscreen(true);",
    "info" : "ExpressionStatement[8848-8875]:ExpressionStatement[8912-8939]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8898-8907]:Modifier[8962-8971]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8908-8912]:PrimitiveType[8972-8976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8929-9342]:Block[8993-9406]"
  }, {
    "left" : "NEWTMouseListener mouseListener = new NEWTMouseListener();",
    "right" : "NEWTMouseListener mouseListener = new NEWTMouseListener();",
    "info" : "VariableDeclarationStatement[8935-8993]:VariableDeclarationStatement[8999-9057]"
  }, {
    "left" : "window.addMouseListener(mouseListener);",
    "right" : "window.addMouseListener(mouseListener);",
    "info" : "ExpressionStatement[8998-9037]:ExpressionStatement[9062-9101]"
  }, {
    "left" : "NEWTKeyListener keyListener = new NEWTKeyListener();",
    "right" : "NEWTKeyListener keyListener = new NEWTKeyListener();",
    "info" : "VariableDeclarationStatement[9042-9094]:VariableDeclarationStatement[9106-9158]"
  }, {
    "left" : "window.addKeyListener(keyListener);",
    "right" : "window.addKeyListener(keyListener);",
    "info" : "ExpressionStatement[9099-9134]:ExpressionStatement[9163-9198]"
  }, {
    "left" : "NEWTWindowListener winListener = new NEWTWindowListener();",
    "right" : "NEWTWindowListener winListener = new NEWTWindowListener();",
    "info" : "VariableDeclarationStatement[9139-9197]:VariableDeclarationStatement[9203-9261]"
  }, {
    "left" : "window.addWindowListener(winListener);",
    "right" : "window.addWindowListener(winListener);",
    "info" : "ExpressionStatement[9202-9240]:ExpressionStatement[9266-9304]"
  }, {
    "left" : "DrawListener drawlistener = new DrawListener();",
    "right" : "DrawListener drawlistener = new DrawListener();",
    "info" : "VariableDeclarationStatement[9246-9293]:VariableDeclarationStatement[9310-9357]"
  }, {
    "left" : "window.addGLEventListener(drawlistener);",
    "right" : "window.addGLEventListener(drawlistener);",
    "info" : "ExpressionStatement[9298-9338]:ExpressionStatement[9362-9402]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9347-9356]:Modifier[9411-9420]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9357-9361]:PrimitiveType[9421-9425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9377-10817]:Block[9441-10881]"
  }, {
    "left" : "animator = new FPSAnimator(window, 60);",
    "right" : "animator = new FPSAnimator(window, 60);",
    "info" : "ExpressionStatement[9429-9468]:ExpressionStatement[9493-9532]"
  }, {
    "left" : "drawException = null;",
    "right" : "drawException = null;",
    "info" : "ExpressionStatement[9473-9494]:ExpressionStatement[9537-9558]"
  }, {
    "left" : "animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {\n      @Override\n      public void uncaughtException(final GLAnimatorControl animator,\n                                    final GLAutoDrawable drawable,\n                                    final Throwable cause) {\n        synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }\n      }\n    });",
    "right" : "animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {\n      @Override\n      public void uncaughtException(final GLAnimatorControl animator,\n                                    final GLAutoDrawable drawable,\n                                    final Throwable cause) {\n        synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }\n      }\n    });",
    "info" : "ExpressionStatement[9499-9999]:ExpressionStatement[9563-10063]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9593-9602]:MarkerAnnotation[9657-9666]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9609-9615]:Modifier[9673-9679]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9616-9620]:PrimitiveType[9680-9684]"
  }, {
    "left" : "final GLAnimatorControl animator",
    "right" : "final GLAnimatorControl animator",
    "info" : "SingleVariableDeclaration[9639-9671]:SingleVariableDeclaration[9703-9735]"
  }, {
    "left" : "final GLAutoDrawable drawable",
    "right" : "final GLAutoDrawable drawable",
    "info" : "SingleVariableDeclaration[9709-9738]:SingleVariableDeclaration[9773-9802]"
  }, {
    "left" : "final Throwable cause",
    "right" : "final Throwable cause",
    "info" : "SingleVariableDeclaration[9776-9797]:SingleVariableDeclaration[9840-9861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9799-9991]:Block[9863-10055]"
  }, {
    "left" : "synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }",
    "right" : "synchronized (waitObject) {\n//        System.err.println(\"Caught exception: \" + cause.getMessage());\n          drawException = cause;\n          waitObject.notify();\n        }",
    "info" : "SynchronizedStatement[9809-9983]:SynchronizedStatement[9873-10047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9835-9983]:Block[9899-10047]"
  }, {
    "left" : "drawException = cause;",
    "right" : "drawException = cause;",
    "info" : "ExpressionStatement[9920-9942]:ExpressionStatement[9984-10006]"
  }, {
    "left" : "waitObject.notify();",
    "right" : "waitObject.notify();",
    "info" : "ExpressionStatement[9953-9973]:ExpressionStatement[10017-10037]"
  }, {
    "left" : "new Thread(new Runnable() {\n      public void run() {\n        synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }\n      }\n    }).start();",
    "right" : "new Thread(new Runnable() {\n      public void run() {\n        synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }\n      }\n    }).start();",
    "info" : "ExpressionStatement[10005-10813]:ExpressionStatement[10069-10877]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10039-10045]:Modifier[10103-10109]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10046-10050]:PrimitiveType[10110-10114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10057-10797]:Block[10121-10861]"
  }, {
    "left" : "synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }",
    "right" : "synchronized (waitObject) {\n          try {\n            if (drawException == null) waitObject.wait();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n//        System.err.println(\"Caught exception: \" + drawException.getMessage());\n          if (drawException != null) {\n            Throwable cause = drawException.getCause();\n            if (cause instanceof ThreadDeath) {\n//            System.out.println(\"caught ThreadDeath\");\n//            throw (ThreadDeath)cause;\n            } else if (cause instanceof RuntimeException) {\n              throw (RuntimeException)cause;\n            } else {\n              throw new RuntimeException(cause);\n            }\n          }\n        }",
    "info" : "SynchronizedStatement[10067-10789]:SynchronizedStatement[10131-10853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10093-10789]:Block[10157-10853]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10105-10258]:TryStatement[10169-10322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10109-10180]:Block[10173-10244]"
  }, {
    "left" : "if (drawException == null)",
    "right" : "if (drawException == null)",
    "info" : "IfStatement[10123-10168]:IfStatement[10187-10232]"
  }, {
    "left" : "waitObject.wait();",
    "right" : "waitObject.wait();",
    "info" : "ExpressionStatement[10150-10168]:ExpressionStatement[10214-10232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10212-10258]:Block[10276-10322]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[10226-10246]:ExpressionStatement[10290-10310]"
  }, {
    "left" : "if (drawException != null)",
    "right" : "if (drawException != null)",
    "info" : "IfStatement[10350-10779]:IfStatement[10414-10843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10377-10779]:Block[10441-10843]"
  }, {
    "left" : "Throwable cause = drawException.getCause();",
    "right" : "Throwable cause = drawException.getCause();",
    "info" : "VariableDeclarationStatement[10391-10434]:VariableDeclarationStatement[10455-10498]"
  }, {
    "left" : "if (cause instanceof ThreadDeath)",
    "right" : "if (cause instanceof ThreadDeath)",
    "info" : "IfStatement[10447-10767]:IfStatement[10511-10831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10481-10592]:Block[10545-10656]"
  }, {
    "left" : "if (cause instanceof RuntimeException)",
    "right" : "if (cause instanceof RuntimeException)",
    "info" : "IfStatement[10598-10767]:IfStatement[10662-10831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10637-10697]:Block[10701-10761]"
  }, {
    "left" : "throw (RuntimeException)cause;",
    "right" : "throw (RuntimeException)cause;",
    "info" : "ThrowStatement[10653-10683]:ThrowStatement[10717-10747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10703-10767]:Block[10767-10831]"
  }, {
    "left" : "throw new RuntimeException(cause);",
    "right" : "throw new RuntimeException(cause);",
    "info" : "ThrowStatement[10719-10753]:ThrowStatement[10783-10817]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10821-10830]:MarkerAnnotation[10885-10894]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10833-10839]:Modifier[10897-10903]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10840-10844]:PrimitiveType[10904-10908]"
  }, {
    "left" : "String title",
    "right" : "String title",
    "info" : "SingleVariableDeclaration[10854-10866]:SingleVariableDeclaration[10918-10930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10868-10901]:Block[10932-10965]"
  }, {
    "left" : "window.setTitle(title);",
    "right" : "window.setTitle(title);",
    "info" : "ExpressionStatement[10874-10897]:ExpressionStatement[10938-10961]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10905-10914]:MarkerAnnotation[10969-10978]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10917-10923]:Modifier[10981-10987]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10924-10928]:PrimitiveType[10988-10992]"
  }, {
    "left" : "boolean visible",
    "right" : "boolean visible",
    "info" : "SingleVariableDeclaration[10940-10955]:SingleVariableDeclaration[11004-11019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10957-10994]:Block[11021-11058]"
  }, {
    "left" : "window.setVisible(visible);",
    "right" : "window.setVisible(visible);",
    "info" : "ExpressionStatement[10963-10990]:ExpressionStatement[11027-11054]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10998-11007]:MarkerAnnotation[11062-11071]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11010-11016]:Modifier[11074-11080]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11017-11021]:PrimitiveType[11081-11085]"
  }, {
    "left" : "boolean resizable",
    "right" : "boolean resizable",
    "info" : "SingleVariableDeclaration[11035-11052]:SingleVariableDeclaration[11099-11116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11054-11099]:Block[11118-11163]"
  }, {
    "left" : "int sketchX = displayDevice.getViewportInWindowUnits().getX();",
    "right" : "int sketchX = displayDevice.getViewportInWindowUnits().getX();",
    "info" : "VariableDeclarationStatement[11287-11349]:VariableDeclarationStatement[13110-13172]"
  }, {
    "left" : "int sketchY = displayDevice.getViewportInWindowUnits().getY();",
    "right" : "int sketchY = displayDevice.getViewportInWindowUnits().getY();",
    "info" : "VariableDeclarationStatement[11354-11416]:VariableDeclarationStatement[13179-13241]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12317-12326]:MarkerAnnotation[11213-11222]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12329-12335]:Modifier[11225-11231]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12336-12340]:PrimitiveType[11232-11236]"
  }, {
    "left" : "int[] location",
    "right" : "int[] location",
    "info" : "SingleVariableDeclaration[12353-12367]:SingleVariableDeclaration[11249-11263]"
  }, {
    "left" : "int[] editorLocation",
    "right" : "int[] editorLocation",
    "info" : "SingleVariableDeclaration[12369-12389]:SingleVariableDeclaration[11265-11285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12391-14520]:Block[11287-14690]"
  }, {
    "left" : "int x = window.getX() - window.getInsets().getLeftWidth();",
    "right" : "int x = window.getX() - window.getInsets().getLeftWidth();",
    "info" : "VariableDeclarationStatement[12588-12646]:VariableDeclarationStatement[11484-11542]"
  }, {
    "left" : "int y = window.getY() - window.getInsets().getTopHeight();",
    "right" : "int y = window.getY() - window.getInsets().getTopHeight();",
    "info" : "VariableDeclarationStatement[12651-12709]:VariableDeclarationStatement[11547-11605]"
  }, {
    "left" : "int w = window.getWidth() + window.getInsets().getTotalWidth();",
    "right" : "int w = window.getWidth() + window.getInsets().getTotalWidth();",
    "info" : "VariableDeclarationStatement[12714-12777]:VariableDeclarationStatement[11610-11673]"
  }, {
    "left" : "int h = window.getHeight() + window.getInsets().getTotalHeight();",
    "right" : "int h = window.getHeight() + window.getInsets().getTotalHeight();",
    "info" : "VariableDeclarationStatement[12782-12847]:VariableDeclarationStatement[11678-11743]"
  }, {
    "left" : "if (location != null)",
    "right" : "if (location != null)",
    "info" : "IfStatement[12853-14089]:IfStatement[11749-14195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12875-13026]:Block[11771-11922]"
  }, {
    "left" : "window.setTopLevelPosition(location[0], location[1]);",
    "right" : "window.setTopLevelPosition(location[0], location[1]);",
    "info" : "ExpressionStatement[12966-13019]:ExpressionStatement[11862-11915]"
  }, {
    "left" : "if (editorLocation != null)",
    "right" : "if (editorLocation != null)",
    "info" : "IfStatement[13032-14089]:IfStatement[11928-14195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13060-14024]:Block[11956-12920]"
  }, {
    "left" : "int locationX = editorLocation[0] - 20;",
    "right" : "int locationX = editorLocation[0] - 20;",
    "info" : "VariableDeclarationStatement[13179-13218]:VariableDeclarationStatement[12075-12114]"
  }, {
    "left" : "int locationY = editorLocation[1];",
    "right" : "int locationY = editorLocation[1];",
    "info" : "VariableDeclarationStatement[13225-13259]:VariableDeclarationStatement[12121-12155]"
  }, {
    "left" : "if (locationX - w > 10)",
    "right" : "if (locationX - w > 10)",
    "info" : "IfStatement[13267-14018]:IfStatement[12163-12914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13291-13411]:Block[12187-12307]"
  }, {
    "left" : "window.setTopLevelPosition(locationX - w, locationY);",
    "right" : "window.setTopLevelPosition(locationX - w, locationY);",
    "info" : "ExpressionStatement[13349-13402]:ExpressionStatement[12245-12298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13417-14018]:Block[12313-12914]"
  }, {
    "left" : "locationX = editorLocation[0] + 66;",
    "right" : "locationX = editorLocation[0] + 66;",
    "info" : "ExpressionStatement[13598-13633]:ExpressionStatement[12494-12529]"
  }, {
    "left" : "locationY = editorLocation[1] + 66;",
    "right" : "locationY = editorLocation[1] + 66;",
    "info" : "ExpressionStatement[13642-13677]:ExpressionStatement[12538-12573]"
  }, {
    "left" : "if ((locationX + w > sketch.displayWidth - 33) ||\n            (locationY + h > sketch.displayHeight - 33))",
    "right" : "if ((locationX + w > sketch.displayWidth - 33) ||\n            (locationY + h > sketch.displayHeight - 33))",
    "info" : "IfStatement[13687-13952]:IfStatement[12583-12848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13794-13952]:Block[12690-12848]"
  }, {
    "left" : "locationX = (sketch.displayWidth - w) / 2;",
    "right" : "locationX = (sketch.displayWidth - w) / 2;",
    "info" : "ExpressionStatement[13846-13888]:ExpressionStatement[12742-12784]"
  }, {
    "left" : "locationY = (sketch.displayHeight - h) / 2;",
    "right" : "locationY = (sketch.displayHeight - h) / 2;",
    "info" : "ExpressionStatement[13899-13942]:ExpressionStatement[12795-12838]"
  }, {
    "left" : "window.setTopLevelPosition(locationX, locationY);",
    "right" : "window.setTopLevelPosition(locationX, locationY);",
    "info" : "ExpressionStatement[13961-14010]:ExpressionStatement[12857-12906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14030-14089]:Block[12926-14195]"
  }, {
    "left" : "setFrameCentered();",
    "right" : "window.setTopLevelPosition(sketchX + screenRect.x + (screenRect.width - sketchWidth) / 2,\n                                 sketchY + screenRect.y + (screenRect.height - sketchHeight) / 2);",
    "info" : "ExpressionStatement[14064-14083]:ExpressionStatement[14000-14188]"
  }, {
    "left" : "Point frameLoc = new Point(x, y);",
    "right" : "Point frameLoc = new Point(x, y);",
    "info" : "VariableDeclarationStatement[14095-14128]:VariableDeclarationStatement[14201-14234]"
  }, {
    "left" : "if (frameLoc.y < 0)",
    "right" : "if (frameLoc.y < 0)",
    "info" : "IfStatement[14133-14361]:IfStatement[14239-14467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14153-14361]:Block[14259-14467]"
  }, {
    "left" : "window.setTopLevelPosition(frameLoc.x, 30);",
    "right" : "window.setTopLevelPosition(frameLoc.x, 30);",
    "info" : "ExpressionStatement[14312-14355]:ExpressionStatement[14418-14461]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14525-14531]:Modifier[14695-14701]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14532-14536]:PrimitiveType[14702-14706]"
  }, {
    "left" : "int stopColor",
    "right" : "int stopColor",
    "info" : "SingleVariableDeclaration[14550-14563]:SingleVariableDeclaration[14720-14733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14565-15170]:Block[14735-15404]"
  }, {
    "left" : "presentMode = pgl.presentMode = true;",
    "right" : "presentMode = pgl.presentMode = true;",
    "info" : "ExpressionStatement[14682-14719]:ExpressionStatement[14853-14890]"
  }, {
    "left" : "offsetX = pgl.offsetX = 0.5f * (screenRect.width - sketchWidth);",
    "right" : "offsetX = pgl.offsetX = 0.5f * (screenRect.width - sketchWidth);",
    "info" : "ExpressionStatement[14724-14788]:ExpressionStatement[14895-14959]"
  }, {
    "left" : "offsetY = pgl.offsetY = 0.5f * (screenRect.height - sketchHeight);",
    "right" : "offsetY = pgl.offsetY = 0.5f * (screenRect.height - sketchHeight);",
    "info" : "ExpressionStatement[14793-14859]:ExpressionStatement[14964-15030]"
  }, {
    "left" : "pgl.requestFBOLayer();",
    "right" : "pgl.requestFBOLayer();",
    "info" : "ExpressionStatement[14864-14886]:ExpressionStatement[15035-15057]"
  }, {
    "left" : "window.setSize(screenRect.width, screenRect.height);",
    "right" : "window.setSize(screenRect.width, screenRect.height);",
    "info" : "ExpressionStatement[14892-14944]:ExpressionStatement[15063-15115]"
  }, {
    "left" : "PApplet.hideMenuBar();",
    "right" : "PApplet.hideMenuBar();",
    "info" : "ExpressionStatement[14949-14971]:ExpressionStatement[15120-15142]"
  }, {
    "left" : "window.setTopLevelPosition(sketchX + screenRect.x,\n                               sketchY + screenRect.y);",
    "right" : "window.setTopLevelPosition(sketchX + screenRect.x,\n                               sketchY + screenRect.y);",
    "info" : "ExpressionStatement[14976-15082]:ExpressionStatement[15147-15253]"
  }, {
    "left" : "window.setFullscreen(true);",
    "right" : "window.setFullscreen(true);",
    "info" : "ExpressionStatement[15127-15154]:ExpressionStatement[15298-15325]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[15175-15184]:Modifier[15409-15418]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15185-15189]:PrimitiveType[15419-15423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15202-15505]:Block[15436-15739]"
  }, {
    "left" : "final int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };",
    "right" : "final int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };",
    "info" : "VariableDeclarationStatement[15208-15262]:VariableDeclarationStatement[15442-15496]"
  }, {
    "left" : "String[] iconImages = new String[sizes.length];",
    "right" : "String[] iconImages = new String[sizes.length];",
    "info" : "VariableDeclarationStatement[15267-15314]:VariableDeclarationStatement[15501-15548]"
  }, {
    "left" : "for (int i = 0; i < sizes.length; i++)",
    "right" : "for (int i = 0; i < sizes.length; i++)",
    "info" : "ForStatement[15319-15422]:ForStatement[15553-15656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15358-15422]:Block[15592-15656]"
  }, {
    "left" : "iconImages[i] = \"/icon/icon-\" + sizes[i] + \".png\";",
    "right" : "iconImages[i] = \"/icon/icon-\" + sizes[i] + \".png\";",
    "info" : "ExpressionStatement[15366-15416]:ExpressionStatement[15600-15650]"
  }, {
    "left" : "NewtFactory.setWindowIcons(new ClassResources(PApplet.class, iconImages));",
    "right" : "NewtFactory.setWindowIcons(new ClassResources(PApplet.class, iconImages));",
    "info" : "ExpressionStatement[15427-15501]:ExpressionStatement[15661-15735]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15510-15516]:Modifier[15744-15750]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15517-15521]:PrimitiveType[15751-15755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15546-15591]:Block[15780-15825]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15596-15602]:Modifier[15830-15836]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15603-15607]:PrimitiveType[15837-15841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15622-15998]:Block[15856-16578]"
  }, {
    "left" : "animator != null",
    "right" : "animator == null",
    "info" : "InfixExpression[15632-15648]:InfixExpression[15866-15882]"
  }, {
    "left" : "animator.start();",
    "right" : "animator.start();",
    "info" : "ExpressionStatement[15707-15724]:ExpressionStatement[15953-15970]"
  }, {
    "left" : "if (0 < sketchX && 0 < sketchY)",
    "right" : "if (placedWindow)",
    "info" : "IfStatement[15732-15928]:IfStatement[15896-16574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15764-15928]:Block[15914-16006]"
  }, {
    "left" : "sketchX = sketchY = 0;",
    "right" : "requestedStart = false;",
    "info" : "ExpressionStatement[15898-15920]:ExpressionStatement[15977-16000]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16002-16008]:Modifier[16582-16588]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16009-16013]:PrimitiveType[16589-16593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16028-16091]:Block[16608-16671]"
  }, {
    "left" : "if (animator != null)",
    "right" : "if (animator != null)",
    "info" : "IfStatement[16034-16087]:IfStatement[16614-16667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16056-16087]:Block[16636-16667]"
  }, {
    "left" : "animator.pause();",
    "right" : "animator.pause();",
    "info" : "ExpressionStatement[16064-16081]:ExpressionStatement[16644-16661]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16095-16101]:Modifier[16675-16681]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16102-16106]:PrimitiveType[16682-16686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16122-16186]:Block[16702-16766]"
  }, {
    "left" : "if (animator != null)",
    "right" : "if (animator != null)",
    "info" : "IfStatement[16128-16182]:IfStatement[16708-16762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16150-16182]:Block[16730-16762]"
  }, {
    "left" : "animator.resume();",
    "right" : "animator.resume();",
    "info" : "ExpressionStatement[16158-16176]:ExpressionStatement[16738-16756]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16190-16196]:Modifier[16770-16776]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16197-16204]:PrimitiveType[16777-16784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16218-16320]:Block[16798-16900]"
  }, {
    "left" : "if (animator != null)",
    "right" : "if (animator != null)",
    "info" : "IfStatement[16224-16316]:IfStatement[16804-16896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16246-16283]:Block[16826-16863]"
  }, {
    "left" : "return animator.stop();",
    "right" : "return animator.stop();",
    "info" : "ReturnStatement[16254-16277]:ReturnStatement[16834-16857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16289-16316]:Block[16869-16896]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16297-16310]:ReturnStatement[16877-16890]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16324-16330]:Modifier[16904-16910]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16331-16338]:PrimitiveType[16911-16918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16351-16460]:Block[16931-17040]"
  }, {
    "left" : "if (animator != null)",
    "right" : "if (animator != null)",
    "info" : "IfStatement[16357-16456]:IfStatement[16937-17036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16379-16424]:Block[16959-17004]"
  }, {
    "left" : "return !animator.isAnimating();",
    "right" : "return !animator.isAnimating();",
    "info" : "ReturnStatement[16387-16418]:ReturnStatement[16967-16998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16430-16456]:Block[17010-17036]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16438-16450]:ReturnStatement[17018-17030]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16464-16470]:Modifier[17044-17050]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16471-16475]:PrimitiveType[17051-17055]"
  }, {
    "left" : "int width",
    "right" : "int width",
    "info" : "SingleVariableDeclaration[16484-16493]:SingleVariableDeclaration[17064-17073]"
  }, {
    "left" : "int height",
    "right" : "int height",
    "info" : "SingleVariableDeclaration[16495-16505]:SingleVariableDeclaration[17075-17085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16507-16924]:Block[17087-17504]"
  }, {
    "left" : "if (width == sketch.width && height == sketch.height)",
    "right" : "if (width == sketch.width && height == sketch.height)",
    "info" : "IfStatement[16513-16588]:IfStatement[17093-17168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16567-16588]:Block[17147-17168]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[16575-16582]:ReturnStatement[17155-17162]"
  }, {
    "left" : "if (!presentMode)",
    "right" : "if (!presentMode)",
    "info" : "IfStatement[16677-16910]:IfStatement[17257-17490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16695-16910]:Block[17275-17490]"
  }, {
    "left" : "sketch.setSize(width, height);",
    "right" : "sketch.setSize(width, height);",
    "info" : "ExpressionStatement[16771-16801]:ExpressionStatement[17351-17381]"
  }, {
    "left" : "sketchWidth = width;",
    "right" : "sketchWidth = width;",
    "info" : "ExpressionStatement[16810-16830]:ExpressionStatement[17390-17410]"
  }, {
    "left" : "sketchHeight = height;",
    "right" : "sketchHeight = height;",
    "info" : "ExpressionStatement[16839-16861]:ExpressionStatement[17419-17441]"
  }, {
    "left" : "graphics.setSize(width, height);",
    "right" : "graphics.setSize(width, height);",
    "info" : "ExpressionStatement[16870-16902]:ExpressionStatement[17450-17482]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16928-16934]:Modifier[17508-17514]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[16935-16940]:PrimitiveType[17515-17520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16957-17250]:Block[17537-17830]"
  }, {
    "left" : "if (graphics.is2X())",
    "right" : "if (graphics.is2X())",
    "info" : "IfStatement[16963-17246]:IfStatement[17543-17826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16984-17217]:Block[17564-17797]"
  }, {
    "left" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "right" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "info" : "ExpressionStatement[17127-17176]:ExpressionStatement[17707-17756]"
  }, {
    "left" : "return currentPixelScale[0];",
    "right" : "return currentPixelScale[0];",
    "info" : "ReturnStatement[17183-17211]:ReturnStatement[17763-17791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17223-17246]:Block[17803-17826]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[17231-17240]:ReturnStatement[17811-17820]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17254-17260]:Modifier[17834-17840]"
  }, {
    "left" : "Component",
    "right" : "Component",
    "info" : "SimpleType[17261-17270]:SimpleType[17841-17850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17286-17310]:Block[17866-17890]"
  }, {
    "left" : "return canvas;",
    "right" : "return canvas;",
    "info" : "ReturnStatement[17292-17306]:ReturnStatement[17872-17886]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17314-17320]:Modifier[17894-17900]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17321-17325]:PrimitiveType[17901-17905]"
  }, {
    "left" : "int level",
    "right" : "int level",
    "info" : "SingleVariableDeclaration[17336-17345]:SingleVariableDeclaration[17916-17925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17347-17931]:Block[17927-18511]"
  }, {
    "left" : "pgl.reqNumSamples = level;",
    "right" : "pgl.reqNumSamples = level;",
    "info" : "ExpressionStatement[17353-17379]:ExpressionStatement[17933-17959]"
  }, {
    "left" : "GLCapabilities caps = new GLCapabilities(profile);",
    "right" : "GLCapabilities caps = new GLCapabilities(profile);",
    "info" : "VariableDeclarationStatement[17384-17434]:VariableDeclarationStatement[17964-18014]"
  }, {
    "left" : "caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);",
    "right" : "caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);",
    "info" : "ExpressionStatement[17439-17483]:ExpressionStatement[18019-18063]"
  }, {
    "left" : "caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);",
    "right" : "caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);",
    "info" : "ExpressionStatement[17488-17532]:ExpressionStatement[18068-18112]"
  }, {
    "left" : "caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);",
    "right" : "caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);",
    "info" : "ExpressionStatement[17537-17585]:ExpressionStatement[18117-18165]"
  }, {
    "left" : "caps.setSampleBuffers(true);",
    "right" : "caps.setSampleBuffers(true);",
    "info" : "ExpressionStatement[17590-17618]:ExpressionStatement[18170-18198]"
  }, {
    "left" : "caps.setNumSamples(pgl.reqNumSamples);",
    "right" : "caps.setNumSamples(pgl.reqNumSamples);",
    "info" : "ExpressionStatement[17623-17661]:ExpressionStatement[18203-18241]"
  }, {
    "left" : "caps.setBackgroundOpaque(true);",
    "right" : "caps.setBackgroundOpaque(true);",
    "info" : "ExpressionStatement[17666-17697]:ExpressionStatement[18246-18277]"
  }, {
    "left" : "caps.setOnscreen(true);",
    "right" : "caps.setOnscreen(true);",
    "info" : "ExpressionStatement[17702-17725]:ExpressionStatement[18282-18305]"
  }, {
    "left" : "NativeSurface target = window.getNativeSurface();",
    "right" : "NativeSurface target = window.getNativeSurface();",
    "info" : "VariableDeclarationStatement[17730-17779]:VariableDeclarationStatement[18310-18359]"
  }, {
    "left" : "MutableGraphicsConfiguration config = (MutableGraphicsConfiguration) target.getGraphicsConfiguration();",
    "right" : "MutableGraphicsConfiguration config = (MutableGraphicsConfiguration) target.getGraphicsConfiguration();",
    "info" : "VariableDeclarationStatement[17784-17887]:VariableDeclarationStatement[18364-18467]"
  }, {
    "left" : "config.setChosenCapabilities(caps);",
    "right" : "config.setChosenCapabilities(caps);",
    "info" : "ExpressionStatement[17892-17927]:ExpressionStatement[18472-18507]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17935-17941]:Modifier[18515-18521]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17942-17946]:PrimitiveType[18522-18526]"
  }, {
    "left" : "float fps",
    "right" : "float fps",
    "info" : "SingleVariableDeclaration[17960-17969]:SingleVariableDeclaration[18540-18549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17971-18113]:Block[18551-18693]"
  }, {
    "left" : "if (animator != null)",
    "right" : "if (animator != null)",
    "info" : "IfStatement[17977-18109]:IfStatement[18557-18689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17999-18109]:Block[18579-18689]"
  }, {
    "left" : "animator.stop();",
    "right" : "animator.stop();",
    "info" : "ExpressionStatement[18007-18023]:ExpressionStatement[18587-18603]"
  }, {
    "left" : "animator.setFPS((int)fps);",
    "right" : "animator.setFPS((int)fps);",
    "info" : "ExpressionStatement[18030-18056]:ExpressionStatement[18610-18636]"
  }, {
    "left" : "pgl.setFps(fps);",
    "right" : "pgl.setFps(fps);",
    "info" : "ExpressionStatement[18063-18079]:ExpressionStatement[18643-18659]"
  }, {
    "left" : "animator.start();",
    "right" : "animator.start();",
    "info" : "ExpressionStatement[18086-18103]:ExpressionStatement[18666-18683]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18117-18123]:Modifier[18697-18703]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18124-18128]:PrimitiveType[18704-18708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18144-18176]:Block[18724-18756]"
  }, {
    "left" : "window.requestFocus();",
    "right" : "window.requestFocus();",
    "info" : "ExpressionStatement[18150-18172]:ExpressionStatement[18730-18752]"
  }, {
    "left" : "GLEventListener",
    "right" : "GLEventListener",
    "info" : "SimpleType[18210-18225]:SimpleType[18790-18805]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18232-18238]:Modifier[18812-18818]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18239-18243]:PrimitiveType[18819-18823]"
  }, {
    "left" : "GLAutoDrawable drawable",
    "right" : "GLAutoDrawable drawable",
    "info" : "SingleVariableDeclaration[18252-18275]:SingleVariableDeclaration[18832-18855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18277-18622]:Block[18857-19202]"
  }, {
    "left" : "pgl.getGL(drawable);",
    "right" : "pgl.getGL(drawable);",
    "info" : "ExpressionStatement[18285-18305]:ExpressionStatement[18865-18885]"
  }, {
    "left" : "sketch.handleDraw();",
    "right" : "sketch.handleDraw();",
    "info" : "ExpressionStatement[18367-18387]:ExpressionStatement[18947-18967]"
  }, {
    "left" : "if (sketch.frameCount == 1)",
    "right" : "if (sketch.frameCount == 1)",
    "info" : "IfStatement[18395-18456]:IfStatement[18975-19036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18423-18456]:Block[19003-19036]"
  }, {
    "left" : "requestFocus();",
    "right" : "requestFocus();",
    "info" : "ExpressionStatement[18433-18448]:ExpressionStatement[19013-19028]"
  }, {
    "left" : "if (sketch.exitCalled())",
    "right" : "if (sketch.exitCalled())",
    "info" : "IfStatement[18464-18616]:IfStatement[19044-19196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18489-18616]:Block[19069-19196]"
  }, {
    "left" : "animator.stop();",
    "right" : "animator.stop();",
    "info" : "ExpressionStatement[18537-18553]:ExpressionStatement[19117-19133]"
  }, {
    "left" : "sketch.dispose();",
    "right" : "sketch.dispose();",
    "info" : "ExpressionStatement[18562-18579]:ExpressionStatement[19142-19159]"
  }, {
    "left" : "sketch.exitActual();",
    "right" : "sketch.exitActual();",
    "info" : "ExpressionStatement[18588-18608]:ExpressionStatement[19168-19188]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18627-18633]:Modifier[19207-19213]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18634-18638]:PrimitiveType[19214-19218]"
  }, {
    "left" : "GLAutoDrawable drawable",
    "right" : "GLAutoDrawable drawable",
    "info" : "SingleVariableDeclaration[18647-18670]:SingleVariableDeclaration[19227-19250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18672-18847]:Block[19252-19427]"
  }, {
    "left" : "sketch.dispose();",
    "right" : "sketch.dispose();",
    "info" : "ExpressionStatement[18748-18765]:ExpressionStatement[19328-19345]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18852-18858]:Modifier[19432-19438]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18859-18863]:PrimitiveType[19439-19443]"
  }, {
    "left" : "GLAutoDrawable drawable",
    "right" : "GLAutoDrawable drawable",
    "info" : "SingleVariableDeclaration[18869-18892]:SingleVariableDeclaration[19449-19472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18894-19341]:Block[19474-19921]"
  }, {
    "left" : "pgl.getGL(drawable);",
    "right" : "pgl.getGL(drawable);",
    "info" : "ExpressionStatement[18950-18970]:ExpressionStatement[19530-19550]"
  }, {
    "left" : "pgl.init(drawable);",
    "right" : "pgl.init(drawable);",
    "info" : "ExpressionStatement[18977-18996]:ExpressionStatement[19557-19576]"
  }, {
    "left" : "sketch.start();",
    "right" : "sketch.start();",
    "info" : "ExpressionStatement[19003-19018]:ExpressionStatement[19583-19598]"
  }, {
    "left" : "int c = graphics.backgroundColor;",
    "right" : "int c = graphics.backgroundColor;",
    "info" : "VariableDeclarationStatement[19070-19103]:VariableDeclarationStatement[19650-19683]"
  }, {
    "left" : "pgl.clearColor(((c >> 16) & 0xff) / 255f,\n                     ((c >>  8) & 0xff) / 255f,\n                     ((c >>  0) & 0xff) / 255f,\n                     ((c >> 24) & 0xff) / 255f);",
    "right" : "pgl.clearColor(((c >> 16) & 0xff) / 255f,\n                     ((c >>  8) & 0xff) / 255f,\n                     ((c >>  0) & 0xff) / 255f,\n                     ((c >> 24) & 0xff) / 255f);",
    "info" : "ExpressionStatement[19110-19296]:ExpressionStatement[19690-19876]"
  }, {
    "left" : "pgl.clear(PGL.COLOR_BUFFER_BIT);",
    "right" : "pgl.clear(PGL.COLOR_BUFFER_BIT);",
    "info" : "ExpressionStatement[19303-19335]:ExpressionStatement[19883-19915]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19347-19353]:Modifier[19927-19933]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19354-19358]:PrimitiveType[19934-19938]"
  }, {
    "left" : "GLAutoDrawable drawable",
    "right" : "GLAutoDrawable drawable",
    "info" : "SingleVariableDeclaration[19367-19390]:SingleVariableDeclaration[19947-19970]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[19392-19397]:SingleVariableDeclaration[19972-19977]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[19399-19404]:SingleVariableDeclaration[19979-19984]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[19406-19411]:SingleVariableDeclaration[19986-19991]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[19413-19418]:SingleVariableDeclaration[19993-19998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19420-20323]:Block[20000-20903]"
  }, {
    "left" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "right" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "info" : "ExpressionStatement[19524-19573]:ExpressionStatement[20104-20153]"
  }, {
    "left" : "pgl.getGL(drawable);",
    "right" : "pgl.getGL(drawable);",
    "info" : "ExpressionStatement[20076-20096]:ExpressionStatement[20656-20676]"
  }, {
    "left" : "setSize((int)(w/currentPixelScale[0]), (int)(h/currentPixelScale[1]));",
    "right" : "setSize((int)(w/currentPixelScale[0]), (int)(h/currentPixelScale[1]));",
    "info" : "ExpressionStatement[20247-20317]:ExpressionStatement[20827-20897]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[20331-20340]:Modifier[20911-20920]"
  }, {
    "left" : "com.jogamp.newt.event.WindowListener",
    "right" : "com.jogamp.newt.event.WindowListener",
    "info" : "SimpleType[20377-20413]:SimpleType[20957-20993]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20420-20426]:Modifier[21000-21006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20448-20470]:Block[21028-21050]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[20456-20464]:SuperConstructorInvocation[21036-21044]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20475-20484]:MarkerAnnotation[21055-21064]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20489-20495]:Modifier[21069-21075]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20496-20500]:PrimitiveType[21076-21080]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[20519-20557]:SingleVariableDeclaration[21099-21137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20559-20645]:Block[21139-21225]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20651-20660]:MarkerAnnotation[21231-21240]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20665-20671]:Modifier[21245-21251]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20672-20676]:PrimitiveType[21252-21256]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[20693-20731]:SingleVariableDeclaration[21273-21311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20733-20817]:Block[21313-21397]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20823-20832]:MarkerAnnotation[21403-21412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20837-20843]:Modifier[21417-21423]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20844-20848]:PrimitiveType[21424-21428]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[20869-20907]:SingleVariableDeclaration[21449-21487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20909-21038]:Block[21489-21618]"
  }, {
    "left" : "PSurfaceJOGL.this.sketch.dispose();",
    "right" : "PSurfaceJOGL.this.sketch.dispose();",
    "info" : "ExpressionStatement[20952-20987]:ExpressionStatement[21532-21567]"
  }, {
    "left" : "PSurfaceJOGL.this.sketch.exitActual();",
    "right" : "PSurfaceJOGL.this.sketch.exitActual();",
    "info" : "ExpressionStatement[20994-21032]:ExpressionStatement[21574-21612]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21044-21053]:MarkerAnnotation[21624-21633]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21058-21064]:Modifier[21638-21644]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21065-21069]:PrimitiveType[21645-21649]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[21086-21124]:SingleVariableDeclaration[21666-21704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21126-21133]:Block[21706-21713]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21139-21148]:MarkerAnnotation[21719-21728]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21153-21159]:Modifier[21733-21739]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21160-21164]:PrimitiveType[21740-21744]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[21177-21215]:SingleVariableDeclaration[21757-21795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21217-21224]:Block[21797-21804]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21230-21239]:MarkerAnnotation[21810-21819]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21244-21250]:Modifier[21824-21830]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21251-21255]:PrimitiveType[21831-21835]"
  }, {
    "left" : "com.jogamp.newt.event.WindowUpdateEvent arg0",
    "right" : "com.jogamp.newt.event.WindowUpdateEvent arg0",
    "info" : "SingleVariableDeclaration[21270-21314]:SingleVariableDeclaration[21850-21894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21316-21323]:Block[21896-21903]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21329-21338]:MarkerAnnotation[21909-21918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21343-21349]:Modifier[21923-21929]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21350-21354]:PrimitiveType[21930-21934]"
  }, {
    "left" : "com.jogamp.newt.event.WindowEvent arg0",
    "right" : "com.jogamp.newt.event.WindowEvent arg0",
    "info" : "SingleVariableDeclaration[21369-21407]:SingleVariableDeclaration[21949-21987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21409-21650]:Block[21989-22230]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[21684-21693]:Modifier[22264-22273]"
  }, {
    "left" : "com.jogamp.newt.event.MouseAdapter",
    "right" : "com.jogamp.newt.event.MouseAdapter",
    "info" : "SimpleType[21726-21760]:SimpleType[22306-22340]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21767-21773]:Modifier[22347-22353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21794-21816]:Block[22374-22396]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[21802-21810]:SuperConstructorInvocation[22382-22390]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21821-21830]:MarkerAnnotation[22401-22410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21835-21841]:Modifier[22415-22421]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21842-21846]:PrimitiveType[22422-22426]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[21860-21894]:SingleVariableDeclaration[22440-22474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21896-21948]:Block[22476-22528]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.PRESS);",
    "right" : "nativeMouseEvent(e, MouseEvent.PRESS);",
    "info" : "ExpressionStatement[21904-21942]:ExpressionStatement[22484-22522]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21953-21962]:MarkerAnnotation[22533-22542]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21967-21973]:Modifier[22547-22553]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21974-21978]:PrimitiveType[22554-22558]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[21993-22027]:SingleVariableDeclaration[22573-22607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22029-22083]:Block[22609-22663]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.RELEASE);",
    "right" : "nativeMouseEvent(e, MouseEvent.RELEASE);",
    "info" : "ExpressionStatement[22037-22077]:ExpressionStatement[22617-22657]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22088-22097]:MarkerAnnotation[22668-22677]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22102-22108]:Modifier[22682-22688]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22109-22113]:PrimitiveType[22689-22693]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22127-22161]:SingleVariableDeclaration[22707-22741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22163-22215]:Block[22743-22795]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.CLICK);",
    "right" : "nativeMouseEvent(e, MouseEvent.CLICK);",
    "info" : "ExpressionStatement[22171-22209]:ExpressionStatement[22751-22789]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22220-22229]:MarkerAnnotation[22800-22809]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22234-22240]:Modifier[22814-22820]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22241-22245]:PrimitiveType[22821-22825]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22259-22293]:SingleVariableDeclaration[22839-22873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22295-22346]:Block[22875-22926]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.DRAG);",
    "right" : "nativeMouseEvent(e, MouseEvent.DRAG);",
    "info" : "ExpressionStatement[22303-22340]:ExpressionStatement[22883-22920]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22351-22360]:MarkerAnnotation[22931-22940]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22365-22371]:Modifier[22945-22951]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22372-22376]:PrimitiveType[22952-22956]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22388-22422]:SingleVariableDeclaration[22968-23002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22424-22475]:Block[23004-23055]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.MOVE);",
    "right" : "nativeMouseEvent(e, MouseEvent.MOVE);",
    "info" : "ExpressionStatement[22432-22469]:ExpressionStatement[23012-23049]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22480-22489]:MarkerAnnotation[23060-23069]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22494-22500]:Modifier[23074-23080]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22501-22505]:PrimitiveType[23081-23085]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22522-22556]:SingleVariableDeclaration[23102-23136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22558-22610]:Block[23138-23190]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.WHEEL);",
    "right" : "nativeMouseEvent(e, MouseEvent.WHEEL);",
    "info" : "ExpressionStatement[22566-22604]:ExpressionStatement[23146-23184]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22615-22624]:MarkerAnnotation[23195-23204]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22629-22635]:Modifier[23209-23215]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22636-22640]:PrimitiveType[23216-23220]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22654-22688]:SingleVariableDeclaration[23234-23268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22690-22779]:Block[23270-23359]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.ENTER);",
    "right" : "nativeMouseEvent(e, MouseEvent.ENTER);",
    "info" : "ExpressionStatement[22735-22773]:ExpressionStatement[23315-23353]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22784-22793]:MarkerAnnotation[23364-23373]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22798-22804]:Modifier[23378-23384]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22805-22809]:PrimitiveType[23385-23389]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent e",
    "right" : "com.jogamp.newt.event.MouseEvent e",
    "info" : "SingleVariableDeclaration[22822-22856]:SingleVariableDeclaration[23402-23436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22858-22945]:Block[23438-23525]"
  }, {
    "left" : "nativeMouseEvent(e, MouseEvent.EXIT);",
    "right" : "nativeMouseEvent(e, MouseEvent.EXIT);",
    "info" : "ExpressionStatement[22902-22939]:ExpressionStatement[23482-23519]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[22976-22985]:Modifier[23556-23565]"
  }, {
    "left" : "com.jogamp.newt.event.KeyAdapter",
    "right" : "com.jogamp.newt.event.KeyAdapter",
    "info" : "SimpleType[23016-23048]:SimpleType[23596-23628]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23055-23061]:Modifier[23635-23641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23080-23102]:Block[23660-23682]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[23088-23096]:SuperConstructorInvocation[23668-23676]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23107-23116]:MarkerAnnotation[23687-23696]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23121-23127]:Modifier[23701-23707]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23128-23132]:PrimitiveType[23708-23712]"
  }, {
    "left" : "com.jogamp.newt.event.KeyEvent e",
    "right" : "com.jogamp.newt.event.KeyEvent e",
    "info" : "SingleVariableDeclaration[23144-23176]:SingleVariableDeclaration[23724-23756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23178-23226]:Block[23758-23806]"
  }, {
    "left" : "nativeKeyEvent(e, KeyEvent.PRESS);",
    "right" : "nativeKeyEvent(e, KeyEvent.PRESS);",
    "info" : "ExpressionStatement[23186-23220]:ExpressionStatement[23766-23800]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23231-23240]:MarkerAnnotation[23811-23820]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23245-23251]:Modifier[23825-23831]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23252-23256]:PrimitiveType[23832-23836]"
  }, {
    "left" : "com.jogamp.newt.event.KeyEvent e",
    "right" : "com.jogamp.newt.event.KeyEvent e",
    "info" : "SingleVariableDeclaration[23269-23301]:SingleVariableDeclaration[23849-23881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23303-23353]:Block[23883-23933]"
  }, {
    "left" : "nativeKeyEvent(e, KeyEvent.RELEASE);",
    "right" : "nativeKeyEvent(e, KeyEvent.RELEASE);",
    "info" : "ExpressionStatement[23311-23347]:ExpressionStatement[23891-23927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23358-23364]:Modifier[23938-23944]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23365-23369]:PrimitiveType[23945-23949]"
  }, {
    "left" : "com.jogamp.newt.event.KeyEvent e",
    "right" : "com.jogamp.newt.event.KeyEvent e",
    "info" : "SingleVariableDeclaration[23379-23411]:SingleVariableDeclaration[23959-23991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23414-23461]:Block[23994-24041]"
  }, {
    "left" : "nativeKeyEvent(e, KeyEvent.TYPE);",
    "right" : "nativeKeyEvent(e, KeyEvent.TYPE);",
    "info" : "ExpressionStatement[23422-23455]:ExpressionStatement[24002-24035]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[23469-23478]:Modifier[24049-24058]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23479-23483]:PrimitiveType[24059-24063]"
  }, {
    "left" : "com.jogamp.newt.event.MouseEvent nativeEvent",
    "right" : "com.jogamp.newt.event.MouseEvent nativeEvent",
    "info" : "SingleVariableDeclaration[23501-23545]:SingleVariableDeclaration[24081-24125]"
  }, {
    "left" : "int peAction",
    "right" : "int peAction",
    "info" : "SingleVariableDeclaration[23581-23593]:SingleVariableDeclaration[24161-24173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23595-25851]:Block[24175-26431]"
  }, {
    "left" : "int modifiers = nativeEvent.getModifiers();",
    "right" : "int modifiers = nativeEvent.getModifiers();",
    "info" : "VariableDeclarationStatement[23601-23644]:VariableDeclarationStatement[24181-24224]"
  }, {
    "left" : "int peModifiers = modifiers &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);",
    "right" : "int peModifiers = modifiers &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);",
    "info" : "VariableDeclarationStatement[23649-23862]:VariableDeclarationStatement[24229-24442]"
  }, {
    "left" : "int peButton = 0;",
    "right" : "int peButton = 0;",
    "info" : "VariableDeclarationStatement[23868-23885]:VariableDeclarationStatement[24448-24465]"
  }, {
    "left" : "if ((modifiers & InputEvent.BUTTON1_MASK) != 0)",
    "right" : "if ((modifiers & InputEvent.BUTTON1_MASK) != 0)",
    "info" : "IfStatement[23890-24172]:IfStatement[24470-24752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23938-23979]:Block[24518-24559]"
  }, {
    "left" : "peButton = PConstants.LEFT;",
    "right" : "peButton = PConstants.LEFT;",
    "info" : "ExpressionStatement[23946-23973]:ExpressionStatement[24526-24553]"
  }, {
    "left" : "if ((modifiers & InputEvent.BUTTON2_MASK) != 0)",
    "right" : "if ((modifiers & InputEvent.BUTTON2_MASK) != 0)",
    "info" : "IfStatement[23985-24172]:IfStatement[24565-24752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24033-24076]:Block[24613-24656]"
  }, {
    "left" : "peButton = PConstants.CENTER;",
    "right" : "peButton = PConstants.CENTER;",
    "info" : "ExpressionStatement[24041-24070]:ExpressionStatement[24621-24650]"
  }, {
    "left" : "if ((modifiers & InputEvent.BUTTON3_MASK) != 0)",
    "right" : "if ((modifiers & InputEvent.BUTTON3_MASK) != 0)",
    "info" : "IfStatement[24082-24172]:IfStatement[24662-24752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24130-24172]:Block[24710-24752]"
  }, {
    "left" : "peButton = PConstants.RIGHT;",
    "right" : "peButton = PConstants.RIGHT;",
    "info" : "ExpressionStatement[24138-24166]:ExpressionStatement[24718-24746]"
  }, {
    "left" : "if (PApplet.platform == PConstants.MACOSX)",
    "right" : "if (PApplet.platform == PConstants.MACOSX)",
    "info" : "IfStatement[24178-24370]:IfStatement[24758-24950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24221-24370]:Block[24801-24950]"
  }, {
    "left" : "if ((modifiers & InputEvent.CTRL_MASK) != 0)",
    "right" : "if ((modifiers & InputEvent.CTRL_MASK) != 0)",
    "info" : "IfStatement[24273-24364]:IfStatement[24853-24944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24318-24364]:Block[24898-24944]"
  }, {
    "left" : "peButton = PConstants.RIGHT;",
    "right" : "peButton = PConstants.RIGHT;",
    "info" : "ExpressionStatement[24328-24356]:ExpressionStatement[24908-24936]"
  }, {
    "left" : "int peCount = 0;",
    "right" : "int peCount = 0;",
    "info" : "VariableDeclarationStatement[24376-24392]:VariableDeclarationStatement[24956-24972]"
  }, {
    "left" : "if (peAction == MouseEvent.WHEEL)",
    "right" : "if (peAction == MouseEvent.WHEEL)",
    "info" : "IfStatement[24397-24655]:IfStatement[24977-25235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24431-24597]:Block[25011-25177]"
  }, {
    "left" : "peCount = nativeEvent.isShiftDown() ? (int)nativeEvent.getRotation()[0] :\n                                            (int)nativeEvent.getRotation()[1];",
    "right" : "peCount = nativeEvent.isShiftDown() ? (int)nativeEvent.getRotation()[0] :\n                                            (int)nativeEvent.getRotation()[1];",
    "info" : "ExpressionStatement[24439-24591]:ExpressionStatement[25019-25171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24603-24655]:Block[25183-25235]"
  }, {
    "left" : "peCount = nativeEvent.getClickCount();",
    "right" : "peCount = nativeEvent.getClickCount();",
    "info" : "ExpressionStatement[24611-24649]:ExpressionStatement[25191-25229]"
  }, {
    "left" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "right" : "window.getCurrentSurfaceScale(currentPixelScale);",
    "info" : "ExpressionStatement[24661-24710]:ExpressionStatement[25241-25290]"
  }, {
    "left" : "int sx = (int)(nativeEvent.getX()/currentPixelScale[0]);",
    "right" : "int sx = (int)(nativeEvent.getX()/currentPixelScale[0]);",
    "info" : "VariableDeclarationStatement[24715-24771]:VariableDeclarationStatement[25295-25351]"
  }, {
    "left" : "int sy = (int)(nativeEvent.getY()/currentPixelScale[1]);",
    "right" : "int sy = (int)(nativeEvent.getY()/currentPixelScale[1]);",
    "info" : "VariableDeclarationStatement[24776-24832]:VariableDeclarationStatement[25356-25412]"
  }, {
    "left" : "int mx = sx - (int)offsetX;",
    "right" : "int mx = sx - (int)offsetX;",
    "info" : "VariableDeclarationStatement[24837-24864]:VariableDeclarationStatement[25417-25444]"
  }, {
    "left" : "int my = sy - (int)offsetY;",
    "right" : "int my = sy - (int)offsetY;",
    "info" : "VariableDeclarationStatement[24869-24896]:VariableDeclarationStatement[25449-25476]"
  }, {
    "left" : "if (presentMode)",
    "right" : "if (presentMode)",
    "info" : "IfStatement[24902-25455]:IfStatement[25482-26035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24919-25455]:Block[25499-26035]"
  }, {
    "left" : "if (peAction == KeyEvent.RELEASE &&\n          20 < sx && sx < 20 + 100 &&\n          screenRect.height - 70 < sy && sy < screenRect.height - 20)",
    "right" : "if (peAction == KeyEvent.RELEASE &&\n          20 < sx && sx < 20 + 100 &&\n          screenRect.height - 70 < sy && sy < screenRect.height - 20)",
    "info" : "IfStatement[24927-25353]:IfStatement[25507-25933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25071-25353]:Block[25651-25933]"
  }, {
    "left" : "sketch.exit();",
    "right" : "sketch.exit();",
    "info" : "ExpressionStatement[25303-25317]:ExpressionStatement[25883-25897]"
  }, {
    "left" : "if (mx < 0 || sketchWidth < mx || my < 0 || sketchHeight < my)",
    "right" : "if (mx < 0 || sketchWidth < mx || my < 0 || sketchHeight < my)",
    "info" : "IfStatement[25361-25449]:IfStatement[25941-26029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25424-25449]:Block[26004-26029]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[25434-25441]:ReturnStatement[26014-26021]"
  }, {
    "left" : "MouseEvent me = new MouseEvent(nativeEvent, nativeEvent.getWhen(),\n                                   peAction, peModifiers,\n                                   mx, my,\n                                   peButton,\n                                   peCount);",
    "right" : "MouseEvent me = new MouseEvent(nativeEvent, nativeEvent.getWhen(),\n                                   peAction, peModifiers,\n                                   mx, my,\n                                   peButton,\n                                   peCount);",
    "info" : "VariableDeclarationStatement[25563-25820]:VariableDeclarationStatement[26143-26400]"
  }, {
    "left" : "sketch.postEvent(me);",
    "right" : "sketch.postEvent(me);",
    "info" : "ExpressionStatement[25826-25847]:ExpressionStatement[26406-26427]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[25855-25864]:Modifier[26435-26444]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25865-25869]:PrimitiveType[26445-26449]"
  }, {
    "left" : "com.jogamp.newt.event.KeyEvent nativeEvent",
    "right" : "com.jogamp.newt.event.KeyEvent nativeEvent",
    "info" : "SingleVariableDeclaration[25885-25927]:SingleVariableDeclaration[26465-26507]"
  }, {
    "left" : "int peAction",
    "right" : "int peAction",
    "info" : "SingleVariableDeclaration[25961-25973]:SingleVariableDeclaration[26541-26553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25975-27488]:Block[26555-28068]"
  }, {
    "left" : "int peModifiers = nativeEvent.getModifiers() &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);",
    "right" : "int peModifiers = nativeEvent.getModifiers() &\n                      (InputEvent.SHIFT_MASK |\n                       InputEvent.CTRL_MASK |\n                       InputEvent.META_MASK |\n                       InputEvent.ALT_MASK);",
    "info" : "VariableDeclarationStatement[25981-26211]:VariableDeclarationStatement[26561-26791]"
  }, {
    "left" : "short code = nativeEvent.getKeyCode();",
    "right" : "short code = nativeEvent.getKeyCode();",
    "info" : "VariableDeclarationStatement[26217-26255]:VariableDeclarationStatement[26797-26835]"
  }, {
    "left" : "char keyChar;",
    "right" : "char keyChar;",
    "info" : "VariableDeclarationStatement[26260-26273]:VariableDeclarationStatement[26840-26853]"
  }, {
    "left" : "int keyCode;",
    "right" : "int keyCode;",
    "info" : "VariableDeclarationStatement[26278-26290]:VariableDeclarationStatement[26858-26870]"
  }, {
    "left" : "if (isPCodedKey(code))",
    "right" : "if (isPCodedKey(code))",
    "info" : "IfStatement[26295-26588]:IfStatement[26875-27168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26318-26394]:Block[26898-26974]"
  }, {
    "left" : "keyCode = mapToPConst(code);",
    "right" : "keyCode = mapToPConst(code);",
    "info" : "ExpressionStatement[26326-26354]:ExpressionStatement[26906-26934]"
  }, {
    "left" : "keyChar = PConstants.CODED;",
    "right" : "keyChar = PConstants.CODED;",
    "info" : "ExpressionStatement[26361-26388]:ExpressionStatement[26941-26968]"
  }, {
    "left" : "if (isHackyKey(code))",
    "right" : "if (isHackyKey(code))",
    "info" : "IfStatement[26400-26588]:IfStatement[26980-27168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26422-26511]:Block[27002-27091]"
  }, {
    "left" : "keyCode = code;",
    "right" : "keyCode = code;",
    "info" : "ExpressionStatement[26430-26445]:ExpressionStatement[27010-27025]"
  }, {
    "left" : "keyChar = hackToChar(code, nativeEvent.getKeyChar());",
    "right" : "keyChar = hackToChar(code, nativeEvent.getKeyChar());",
    "info" : "ExpressionStatement[26452-26505]:ExpressionStatement[27032-27085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26517-26588]:Block[27097-27168]"
  }, {
    "left" : "keyCode = code;",
    "right" : "keyCode = code;",
    "info" : "ExpressionStatement[26525-26540]:ExpressionStatement[27105-27120]"
  }, {
    "left" : "keyChar = nativeEvent.getKeyChar();",
    "right" : "keyChar = nativeEvent.getKeyChar();",
    "info" : "ExpressionStatement[26547-26582]:ExpressionStatement[27127-27162]"
  }, {
    "left" : "KeyEvent ke = new KeyEvent(nativeEvent, nativeEvent.getWhen(),\n                               peAction, peModifiers,\n                               keyChar,\n                               keyCode);",
    "right" : "KeyEvent ke = new KeyEvent(nativeEvent, nativeEvent.getWhen(),\n                               peAction, peModifiers,\n                               keyChar,\n                               keyCode);",
    "info" : "VariableDeclarationStatement[27260-27457]:VariableDeclarationStatement[27840-28037]"
  }, {
    "left" : "sketch.postEvent(ke);",
    "right" : "sketch.postEvent(ke);",
    "info" : "ExpressionStatement[27463-27484]:ExpressionStatement[28043-28064]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27492-27499]:Modifier[28072-28079]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27500-27506]:Modifier[28080-28086]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27507-27514]:PrimitiveType[28087-28094]"
  }, {
    "left" : "short code",
    "right" : "short code",
    "info" : "SingleVariableDeclaration[27527-27537]:SingleVariableDeclaration[28107-28117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27539-28035]:Block[28119-28615]"
  }, {
    "left" : "return code == com.jogamp.newt.event.KeyEvent.VK_UP ||\n           code == com.jogamp.newt.event.KeyEvent.VK_DOWN ||\n           code == com.jogamp.newt.event.KeyEvent.VK_LEFT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_RIGHT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_ALT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_CONTROL ||\n           code == com.jogamp.newt.event.KeyEvent.VK_SHIFT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_WINDOWS;",
    "right" : "return code == com.jogamp.newt.event.KeyEvent.VK_UP ||\n           code == com.jogamp.newt.event.KeyEvent.VK_DOWN ||\n           code == com.jogamp.newt.event.KeyEvent.VK_LEFT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_RIGHT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_ALT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_CONTROL ||\n           code == com.jogamp.newt.event.KeyEvent.VK_SHIFT ||\n           code == com.jogamp.newt.event.KeyEvent.VK_WINDOWS;",
    "info" : "ReturnStatement[27545-28031]:ReturnStatement[28125-28611]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28244-28251]:Modifier[28824-28831]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28252-28258]:Modifier[28832-28838]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28259-28262]:PrimitiveType[28839-28842]"
  }, {
    "left" : "short code",
    "right" : "short code",
    "info" : "SingleVariableDeclaration[28275-28285]:SingleVariableDeclaration[28855-28865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28287-29091]:Block[28867-29671]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_UP)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_UP)",
    "info" : "IfStatement[28293-29070]:IfStatement[28873-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28343-28378]:Block[28923-28958]"
  }, {
    "left" : "return PConstants.UP;",
    "right" : "return PConstants.UP;",
    "info" : "ReturnStatement[28351-28372]:ReturnStatement[28931-28952]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_DOWN)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_DOWN)",
    "info" : "IfStatement[28384-29070]:IfStatement[28964-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28436-28473]:Block[29016-29053]"
  }, {
    "left" : "return PConstants.DOWN;",
    "right" : "return PConstants.DOWN;",
    "info" : "ReturnStatement[28444-28467]:ReturnStatement[29024-29047]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_LEFT)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_LEFT)",
    "info" : "IfStatement[28479-29070]:IfStatement[29059-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28531-28568]:Block[29111-29148]"
  }, {
    "left" : "return PConstants.LEFT;",
    "right" : "return PConstants.LEFT;",
    "info" : "ReturnStatement[28539-28562]:ReturnStatement[29119-29142]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_RIGHT)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_RIGHT)",
    "info" : "IfStatement[28574-29070]:IfStatement[29154-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28627-28665]:Block[29207-29245]"
  }, {
    "left" : "return PConstants.RIGHT;",
    "right" : "return PConstants.RIGHT;",
    "info" : "ReturnStatement[28635-28659]:ReturnStatement[29215-29239]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_ALT)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_ALT)",
    "info" : "IfStatement[28671-29070]:IfStatement[29251-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28722-28758]:Block[29302-29338]"
  }, {
    "left" : "return PConstants.ALT;",
    "right" : "return PConstants.ALT;",
    "info" : "ReturnStatement[28730-28752]:ReturnStatement[29310-29332]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_CONTROL)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_CONTROL)",
    "info" : "IfStatement[28764-29070]:IfStatement[29344-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28819-28859]:Block[29399-29439]"
  }, {
    "left" : "return PConstants.CONTROL;",
    "right" : "return PConstants.CONTROL;",
    "info" : "ReturnStatement[28827-28853]:ReturnStatement[29407-29433]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_SHIFT)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_SHIFT)",
    "info" : "IfStatement[28865-29070]:IfStatement[29445-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28918-28956]:Block[29498-29536]"
  }, {
    "left" : "return PConstants.SHIFT;",
    "right" : "return PConstants.SHIFT;",
    "info" : "ReturnStatement[28926-28950]:ReturnStatement[29506-29530]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_WINDOWS)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_WINDOWS)",
    "info" : "IfStatement[28962-29070]:IfStatement[29542-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29017-29070]:Block[29597-29650]"
  }, {
    "left" : "return java.awt.event.KeyEvent.VK_META;",
    "right" : "return java.awt.event.KeyEvent.VK_META;",
    "info" : "ReturnStatement[29025-29064]:ReturnStatement[29605-29644]"
  }, {
    "left" : "return code;",
    "right" : "return code;",
    "info" : "ReturnStatement[29075-29087]:ReturnStatement[29655-29667]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29095-29102]:Modifier[29675-29682]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29103-29109]:Modifier[29683-29689]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29110-29117]:PrimitiveType[29690-29697]"
  }, {
    "left" : "short code",
    "right" : "short code",
    "info" : "SingleVariableDeclaration[29129-29139]:SingleVariableDeclaration[29709-29719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29141-29271]:Block[29721-29851]"
  }, {
    "left" : "return code == com.jogamp.newt.event.KeyEvent.VK_BACK_SPACE ||\n           code == com.jogamp.newt.event.KeyEvent.VK_TAB;",
    "right" : "return code == com.jogamp.newt.event.KeyEvent.VK_BACK_SPACE ||\n           code == com.jogamp.newt.event.KeyEvent.VK_TAB;",
    "info" : "ReturnStatement[29147-29267]:ReturnStatement[29727-29847]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29275-29282]:Modifier[29855-29862]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29283-29289]:Modifier[29863-29869]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[29290-29294]:PrimitiveType[29870-29874]"
  }, {
    "left" : "short code",
    "right" : "short code",
    "info" : "SingleVariableDeclaration[29306-29316]:SingleVariableDeclaration[29886-29896]"
  }, {
    "left" : "char def",
    "right" : "char def",
    "info" : "SingleVariableDeclaration[29318-29326]:SingleVariableDeclaration[29898-29906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29328-29521]:Block[29908-30101]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_BACK_SPACE)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_BACK_SPACE)",
    "info" : "IfStatement[29334-29501]:IfStatement[29914-30081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29392-29418]:Block[29972-29998]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[29400-29412]:ReturnStatement[29980-29992]"
  }, {
    "left" : "if (code == com.jogamp.newt.event.KeyEvent.VK_TAB)",
    "right" : "if (code == com.jogamp.newt.event.KeyEvent.VK_TAB)",
    "info" : "IfStatement[29424-29501]:IfStatement[30004-30081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29475-29501]:Block[30055-30081]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[29483-29495]:ReturnStatement[30063-30075]"
  }, {
    "left" : "return def;",
    "right" : "return def;",
    "info" : "ReturnStatement[29506-29517]:ReturnStatement[30086-30097]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29606-29612]:Modifier[30186-30192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29613-29617]:PrimitiveType[30193-30197]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[29628-29636]:SingleVariableDeclaration[30208-30216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29638-29734]:Block[30218-30314]"
  }, {
    "left" : "System.err.println(\"Cursor types not supported in OpenGL, provide your cursor image\");",
    "right" : "System.err.println(\"Cursor types not supported in OpenGL, provide your cursor image\");",
    "info" : "ExpressionStatement[29644-29730]:ExpressionStatement[30224-30310]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29739-29745]:Modifier[30319-30325]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29746-29750]:PrimitiveType[30326-30330]"
  }, {
    "left" : "PImage image",
    "right" : "PImage image",
    "info" : "SingleVariableDeclaration[29761-29773]:SingleVariableDeclaration[30341-30353]"
  }, {
    "left" : "int hotspotX",
    "right" : "int hotspotX",
    "info" : "SingleVariableDeclaration[29775-29787]:SingleVariableDeclaration[30355-30367]"
  }, {
    "left" : "int hotspotY",
    "right" : "int hotspotY",
    "info" : "SingleVariableDeclaration[29789-29801]:SingleVariableDeclaration[30369-30381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29803-30516]:Block[30383-31096]"
  }, {
    "left" : "final Display disp = window.getScreen().getDisplay();",
    "right" : "final Display disp = window.getScreen().getDisplay();",
    "info" : "VariableDeclarationStatement[29809-29862]:VariableDeclarationStatement[30389-30442]"
  }, {
    "left" : "disp.createNative();",
    "right" : "disp.createNative();",
    "info" : "ExpressionStatement[29867-29887]:ExpressionStatement[30447-30467]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30520-30526]:Modifier[31100-31106]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30527-30531]:PrimitiveType[31107-31111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30545-30586]:Block[31125-31166]"
  }, {
    "left" : "window.setPointerVisible(true);",
    "right" : "window.setPointerVisible(true);",
    "info" : "ExpressionStatement[30551-30582]:ExpressionStatement[31131-31162]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30590-30596]:Modifier[31170-31176]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30597-30601]:PrimitiveType[31177-31181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30615-30657]:Block[31195-31237]"
  }, {
    "left" : "window.setPointerVisible(false);",
    "right" : "window.setPointerVisible(false);",
    "info" : "ExpressionStatement[30621-30653]:ExpressionStatement[31201-31233]"
  } ]
}