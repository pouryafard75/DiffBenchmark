{
  "matchedElements" : [
 {
    "left" : "class : StdKeyDeserializer",
    "right" : "class : StdKeyDeserializer",
    "info" : "TypeDeclaration[747-16321]:TypeDeclaration[747-16351]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[1202-1250]:FieldDeclaration[1202-1250]"
  }, {
    "left" : "TYPE_BOOLEAN",
    "right" : "TYPE_BOOLEAN",
    "info" : "FieldDeclaration[1256-1297]:FieldDeclaration[1256-1297]"
  }, {
    "left" : "TYPE_BYTE",
    "right" : "TYPE_BYTE",
    "info" : "FieldDeclaration[1302-1340]:FieldDeclaration[1302-1340]"
  }, {
    "left" : "TYPE_SHORT",
    "right" : "TYPE_SHORT",
    "info" : "FieldDeclaration[1345-1384]:FieldDeclaration[1345-1384]"
  }, {
    "left" : "TYPE_CHAR",
    "right" : "TYPE_CHAR",
    "info" : "FieldDeclaration[1389-1427]:FieldDeclaration[1389-1427]"
  }, {
    "left" : "TYPE_INT",
    "right" : "TYPE_INT",
    "info" : "FieldDeclaration[1432-1469]:FieldDeclaration[1432-1469]"
  }, {
    "left" : "TYPE_LONG",
    "right" : "TYPE_LONG",
    "info" : "FieldDeclaration[1474-1512]:FieldDeclaration[1474-1512]"
  }, {
    "left" : "TYPE_FLOAT",
    "right" : "TYPE_FLOAT",
    "info" : "FieldDeclaration[1517-1556]:FieldDeclaration[1517-1556]"
  }, {
    "left" : "TYPE_DOUBLE",
    "right" : "TYPE_DOUBLE",
    "info" : "FieldDeclaration[1561-1601]:FieldDeclaration[1561-1601]"
  }, {
    "left" : "TYPE_LOCALE",
    "right" : "TYPE_LOCALE",
    "info" : "FieldDeclaration[1606-1646]:FieldDeclaration[1606-1646]"
  }, {
    "left" : "TYPE_DATE",
    "right" : "TYPE_DATE",
    "info" : "FieldDeclaration[1651-1690]:FieldDeclaration[1651-1690]"
  }, {
    "left" : "TYPE_CALENDAR",
    "right" : "TYPE_CALENDAR",
    "info" : "FieldDeclaration[1695-1738]:FieldDeclaration[1695-1738]"
  }, {
    "left" : "TYPE_UUID",
    "right" : "TYPE_UUID",
    "info" : "FieldDeclaration[1743-1782]:FieldDeclaration[1743-1782]"
  }, {
    "left" : "TYPE_URI",
    "right" : "TYPE_URI",
    "info" : "FieldDeclaration[1787-1825]:FieldDeclaration[1787-1825]"
  }, {
    "left" : "TYPE_URL",
    "right" : "TYPE_URL",
    "info" : "FieldDeclaration[1830-1868]:FieldDeclaration[1830-1868]"
  }, {
    "left" : "TYPE_CLASS",
    "right" : "TYPE_CLASS",
    "info" : "FieldDeclaration[1873-1913]:FieldDeclaration[1873-1913]"
  }, {
    "left" : "TYPE_CURRENCY",
    "right" : "TYPE_CURRENCY",
    "info" : "FieldDeclaration[1918-1961]:FieldDeclaration[1918-1961]"
  }, {
    "left" : "TYPE_BYTE_ARRAY",
    "right" : "TYPE_BYTE_ARRAY",
    "info" : "FieldDeclaration[1966-2011]:FieldDeclaration[1966-2011]"
  }, {
    "left" : "_kind",
    "right" : "_kind",
    "info" : "FieldDeclaration[2030-2056]:FieldDeclaration[2030-2056]"
  }, {
    "left" : "_keyClass",
    "right" : "_keyClass",
    "info" : "FieldDeclaration[2061-2096]:FieldDeclaration[2061-2096]"
  }, {
    "left" : "_deser",
    "right" : "_deser",
    "info" : "FieldDeclaration[2102-2236]:FieldDeclaration[2102-2236]"
  }, {
    "left" : "protected StdKeyDeserializer(kind int, cls ...)",
    "right" : "protected StdKeyDeserializer(kind int, cls ...)",
    "info" : "MethodDeclaration[2246-2337]:MethodDeclaration[2246-2337]"
  }, {
    "left" : "protected StdKeyDeserializer(kind int, cls , deser )",
    "right" : "protected StdKeyDeserializer(kind int, cls , deser )",
    "info" : "MethodDeclaration[2343-2507]:MethodDeclaration[2343-2507]"
  }, {
    "left" : "public forType(raw ) : ",
    "right" : "public forType(raw ) : ",
    "info" : "MethodDeclaration[2513-4409]:MethodDeclaration[2513-4409]"
  }, {
    "left" : "public deserializeKey(key , ctxt ) : ",
    "right" : "public deserializeKey(key , ctxt ) : ",
    "info" : "MethodDeclaration[4415-5234]:MethodDeclaration[4415-5249]"
  }, {
    "left" : "public getKeyClass() : ",
    "right" : "public getKeyClass() : ",
    "info" : "MethodDeclaration[5240-5291]:MethodDeclaration[5255-5306]"
  }, {
    "left" : "protected _parse(key , ctxt ) : ",
    "right" : "protected _parse(key , ctxt ) : ",
    "info" : "MethodDeclaration[5297-8864]:MethodDeclaration[5312-8879]"
  }, {
    "left" : "protected _parseInt(key ) : int",
    "right" : "protected _parseInt(key ) : int",
    "info" : "MethodDeclaration[9052-9165]:MethodDeclaration[9067-9180]"
  }, {
    "left" : "protected _parseLong(key ) : long",
    "right" : "protected _parseLong(key ) : long",
    "info" : "MethodDeclaration[9171-9284]:MethodDeclaration[9186-9299]"
  }, {
    "left" : "protected _parseDouble(key ) : double",
    "right" : "protected _parseDouble(key ) : double",
    "info" : "MethodDeclaration[9290-9416]:MethodDeclaration[9305-9431]"
  }, {
    "left" : "protected _weirdKey(ctxt , key , e ) : ",
    "right" : "protected _weirdKey(ctxt , key , e ) : ",
    "info" : "MethodDeclaration[9440-9646]:MethodDeclaration[9455-9676]"
  }, {
    "left" : "class : StringKD",
    "right" : "class : StringKD",
    "info" : "TypeDeclaration[9855-10725]:TypeDeclaration[9885-10755]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[9944-9992]:FieldDeclaration[9974-10022]"
  }, {
    "left" : "sString",
    "right" : "sString",
    "info" : "FieldDeclaration[10001-10068]:FieldDeclaration[10031-10098]"
  }, {
    "left" : "sObject",
    "right" : "sObject",
    "info" : "FieldDeclaration[10077-10144]:FieldDeclaration[10107-10174]"
  }, {
    "left" : "private StringKD(nominalType )",
    "right" : "private StringKD(nominalType )",
    "info" : "MethodDeclaration[10162-10228]:MethodDeclaration[10192-10258]"
  }, {
    "left" : "public forType(nominalType ) : ",
    "right" : "public forType(nominalType ) : ",
    "info" : "MethodDeclaration[10238-10542]:MethodDeclaration[10268-10572]"
  }, {
    "left" : "public deserializeKey(key , ctxt ) : ",
    "right" : "public deserializeKey(key , ctxt ) : ",
    "info" : "MethodDeclaration[10552-10719]:MethodDeclaration[10582-10749]"
  }, {
    "left" : "class : DelegatingKD",
    "right" : "class : DelegatingKD",
    "info" : "TypeDeclaration[10926-12618]:TypeDeclaration[10956-12648]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[11254-11302]:FieldDeclaration[11284-11332]"
  }, {
    "left" : "_keyClass",
    "right" : "_keyClass",
    "info" : "FieldDeclaration[11312-11347]:FieldDeclaration[11342-11377]"
  }, {
    "left" : "_delegate",
    "right" : "_delegate",
    "info" : "FieldDeclaration[11357-11403]:FieldDeclaration[11387-11433]"
  }, {
    "left" : "protected DelegatingKD(cls , deser )",
    "right" : "protected DelegatingKD(cls , deser )",
    "info" : "MethodDeclaration[11421-11556]:MethodDeclaration[11451-11586]"
  }, {
    "left" : "public deserializeKey(key , ctxt ) : ",
    "right" : "public deserializeKey(key , ctxt ) : ",
    "info" : "MethodDeclaration[11566-12551]:MethodDeclaration[11596-12581]"
  }, {
    "left" : "public getKeyClass() : ",
    "right" : "public getKeyClass() : ",
    "info" : "MethodDeclaration[12561-12612]:MethodDeclaration[12591-12642]"
  }, {
    "left" : "class : EnumKD",
    "right" : "class : EnumKD",
    "info" : "TypeDeclaration[12629-15043]:TypeDeclaration[12659-15073]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[12716-12764]:FieldDeclaration[12746-12794]"
  }, {
    "left" : "_byNameResolver",
    "right" : "_byNameResolver",
    "info" : "FieldDeclaration[12774-12819]:FieldDeclaration[12804-12849]"
  }, {
    "left" : "_factory",
    "right" : "_factory",
    "info" : "FieldDeclaration[12829-12870]:FieldDeclaration[12859-12900]"
  }, {
    "left" : "_byToStringResolver",
    "right" : "_byToStringResolver",
    "info" : "FieldDeclaration[12880-13099]:FieldDeclaration[12910-13129]"
  }, {
    "left" : "_enumDefaultValue",
    "right" : "_enumDefaultValue",
    "info" : "FieldDeclaration[13109-13151]:FieldDeclaration[13139-13181]"
  }, {
    "left" : "protected EnumKD(er , factory )",
    "right" : "protected EnumKD(er , factory )",
    "info" : "MethodDeclaration[13169-13401]:MethodDeclaration[13199-13431]"
  }, {
    "left" : "public _parse(key , ctxt ) : ",
    "right" : "public _parse(key , ctxt ) : ",
    "info" : "MethodDeclaration[13411-14597]:MethodDeclaration[13441-14627]"
  }, {
    "left" : "private _getToStringResolver(ctxt ) : ",
    "right" : "private _getToStringResolver(ctxt ) : ",
    "info" : "MethodDeclaration[14607-15037]:MethodDeclaration[14637-15067]"
  }, {
    "left" : "class : StringCtorKeyDeserializer",
    "right" : "class : StringCtorKeyDeserializer",
    "info" : "TypeDeclaration[15053-15682]:TypeDeclaration[15083-15712]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[15262-15310]:FieldDeclaration[15292-15340]"
  }, {
    "left" : "_ctor",
    "right" : "_ctor",
    "info" : "FieldDeclaration[15320-15357]:FieldDeclaration[15350-15387]"
  }, {
    "left" : "public StringCtorKeyDeserializer(ctor )",
    "right" : "public StringCtorKeyDeserializer(ctor )",
    "info" : "MethodDeclaration[15367-15507]:MethodDeclaration[15397-15537]"
  }, {
    "left" : "public _parse(key , ctxt ) : ",
    "right" : "public _parse(key , ctxt ) : ",
    "info" : "MethodDeclaration[15517-15676]:MethodDeclaration[15547-15706]"
  }, {
    "left" : "class : StringFactoryKeyDeserializer",
    "right" : "class : StringFactoryKeyDeserializer",
    "info" : "TypeDeclaration[15688-16319]:TypeDeclaration[15718-16349]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[15900-15948]:FieldDeclaration[15930-15978]"
  }, {
    "left" : "_factoryMethod",
    "right" : "_factoryMethod",
    "info" : "FieldDeclaration[15958-15986]:FieldDeclaration[15988-16016]"
  }, {
    "left" : "public StringFactoryKeyDeserializer(fm )",
    "right" : "public StringFactoryKeyDeserializer(fm )",
    "info" : "MethodDeclaration[15996-16134]:MethodDeclaration[16026-16164]"
  }, {
    "left" : "public _parse(key , ctxt ) : ",
    "right" : "public _parse(key , ctxt ) : ",
    "info" : "MethodDeclaration[16144-16313]:MethodDeclaration[16174-16343]"
  } ],
  "mappings" : [
 {
    "left" : "@JacksonStdImpl",
    "right" : "@JacksonStdImpl",
    "info" : "MarkerAnnotation[1088-1103]:MarkerAnnotation[1088-1103]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1104-1110]:Modifier[1104-1110]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1111-1116]:TYPE_DECLARATION_KIND[1111-1116]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2246-2255]:Modifier[2246-2255]"
  }, {
    "left" : "StdKeyDeserializer",
    "right" : "StdKeyDeserializer",
    "info" : "SimpleName[2256-2274]:SimpleName[2256-2274]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[2275-2283]:SingleVariableDeclaration[2275-2283]"
  }, {
    "left" : "Class<?> cls",
    "right" : "Class<?> cls",
    "info" : "SingleVariableDeclaration[2285-2297]:SingleVariableDeclaration[2285-2297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2299-2337]:Block[2299-2337]"
  }, {
    "left" : "this(kind, cls, null);",
    "right" : "this(kind, cls, null);",
    "info" : "ConstructorInvocation[2309-2331]:ConstructorInvocation[2309-2331]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2343-2352]:Modifier[2343-2352]"
  }, {
    "left" : "StdKeyDeserializer",
    "right" : "StdKeyDeserializer",
    "info" : "SimpleName[2353-2371]:SimpleName[2353-2371]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[2372-2380]:SingleVariableDeclaration[2372-2380]"
  }, {
    "left" : "Class<?> cls",
    "right" : "Class<?> cls",
    "info" : "SingleVariableDeclaration[2382-2394]:SingleVariableDeclaration[2382-2394]"
  }, {
    "left" : "FromStringDeserializer<?> deser",
    "right" : "FromStringDeserializer<?> deser",
    "info" : "SingleVariableDeclaration[2396-2427]:SingleVariableDeclaration[2396-2427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2429-2507]:Block[2429-2507]"
  }, {
    "left" : "_kind = kind;",
    "right" : "_kind = kind;",
    "info" : "ExpressionStatement[2439-2452]:ExpressionStatement[2439-2452]"
  }, {
    "left" : "_keyClass = cls;",
    "right" : "_keyClass = cls;",
    "info" : "ExpressionStatement[2461-2477]:ExpressionStatement[2461-2477]"
  }, {
    "left" : "_deser = deser;",
    "right" : "_deser = deser;",
    "info" : "ExpressionStatement[2486-2501]:ExpressionStatement[2486-2501]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2513-2519]:Modifier[2513-2519]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2520-2526]:Modifier[2520-2526]"
  }, {
    "left" : "StdKeyDeserializer",
    "right" : "StdKeyDeserializer",
    "info" : "SimpleType[2527-2545]:SimpleType[2527-2545]"
  }, {
    "left" : "forType",
    "right" : "forType",
    "info" : "SimpleName[2546-2553]:SimpleName[2546-2553]"
  }, {
    "left" : "Class<?> raw",
    "right" : "Class<?> raw",
    "info" : "SingleVariableDeclaration[2554-2566]:SingleVariableDeclaration[2554-2566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2572-4409]:Block[2572-4409]"
  }, {
    "left" : "int kind;",
    "right" : "int kind;",
    "info" : "VariableDeclarationStatement[2582-2591]:VariableDeclarationStatement[2582-2591]"
  }, {
    "left" : "if (raw == String.class || raw == Object.class || raw == CharSequence.class)",
    "right" : "if (raw == String.class || raw == Object.class || raw == CharSequence.class)",
    "info" : "IfStatement[2632-4353]:IfStatement[2632-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2709-2762]:Block[2709-2762]"
  }, {
    "left" : "return StringKD.forType(raw);",
    "right" : "return StringKD.forType(raw);",
    "info" : "ReturnStatement[2723-2752]:ReturnStatement[2723-2752]"
  }, {
    "left" : "if (raw == UUID.class)",
    "right" : "if (raw == UUID.class)",
    "info" : "IfStatement[2768-4353]:IfStatement[2768-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2791-2832]:Block[2791-2832]"
  }, {
    "left" : "kind = TYPE_UUID;",
    "right" : "kind = TYPE_UUID;",
    "info" : "ExpressionStatement[2805-2822]:ExpressionStatement[2805-2822]"
  }, {
    "left" : "if (raw == Integer.class)",
    "right" : "if (raw == Integer.class)",
    "info" : "IfStatement[2838-4353]:IfStatement[2838-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2864-2904]:Block[2864-2904]"
  }, {
    "left" : "kind = TYPE_INT;",
    "right" : "kind = TYPE_INT;",
    "info" : "ExpressionStatement[2878-2894]:ExpressionStatement[2878-2894]"
  }, {
    "left" : "if (raw == Long.class)",
    "right" : "if (raw == Long.class)",
    "info" : "IfStatement[2910-4353]:IfStatement[2910-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2933-2974]:Block[2933-2974]"
  }, {
    "left" : "kind = TYPE_LONG;",
    "right" : "kind = TYPE_LONG;",
    "info" : "ExpressionStatement[2947-2964]:ExpressionStatement[2947-2964]"
  }, {
    "left" : "if (raw == Date.class)",
    "right" : "if (raw == Date.class)",
    "info" : "IfStatement[2980-4353]:IfStatement[2980-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3003-3044]:Block[3003-3044]"
  }, {
    "left" : "kind = TYPE_DATE;",
    "right" : "kind = TYPE_DATE;",
    "info" : "ExpressionStatement[3017-3034]:ExpressionStatement[3017-3034]"
  }, {
    "left" : "if (raw == Calendar.class)",
    "right" : "if (raw == Calendar.class)",
    "info" : "IfStatement[3050-4353]:IfStatement[3050-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3077-3158]:Block[3077-3158]"
  }, {
    "left" : "kind = TYPE_CALENDAR;",
    "right" : "kind = TYPE_CALENDAR;",
    "info" : "ExpressionStatement[3091-3112]:ExpressionStatement[3091-3112]"
  }, {
    "left" : "if (raw == Boolean.class)",
    "right" : "if (raw == Boolean.class)",
    "info" : "IfStatement[3164-4353]:IfStatement[3164-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3190-3234]:Block[3190-3234]"
  }, {
    "left" : "kind = TYPE_BOOLEAN;",
    "right" : "kind = TYPE_BOOLEAN;",
    "info" : "ExpressionStatement[3204-3224]:ExpressionStatement[3204-3224]"
  }, {
    "left" : "if (raw == Byte.class)",
    "right" : "if (raw == Byte.class)",
    "info" : "IfStatement[3240-4353]:IfStatement[3240-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3263-3304]:Block[3263-3304]"
  }, {
    "left" : "kind = TYPE_BYTE;",
    "right" : "kind = TYPE_BYTE;",
    "info" : "ExpressionStatement[3277-3294]:ExpressionStatement[3277-3294]"
  }, {
    "left" : "if (raw == Character.class)",
    "right" : "if (raw == Character.class)",
    "info" : "IfStatement[3310-4353]:IfStatement[3310-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3338-3379]:Block[3338-3379]"
  }, {
    "left" : "kind = TYPE_CHAR;",
    "right" : "kind = TYPE_CHAR;",
    "info" : "ExpressionStatement[3352-3369]:ExpressionStatement[3352-3369]"
  }, {
    "left" : "if (raw == Short.class)",
    "right" : "if (raw == Short.class)",
    "info" : "IfStatement[3385-4353]:IfStatement[3385-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3409-3451]:Block[3409-3451]"
  }, {
    "left" : "kind = TYPE_SHORT;",
    "right" : "kind = TYPE_SHORT;",
    "info" : "ExpressionStatement[3423-3441]:ExpressionStatement[3423-3441]"
  }, {
    "left" : "if (raw == Float.class)",
    "right" : "if (raw == Float.class)",
    "info" : "IfStatement[3457-4353]:IfStatement[3457-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3481-3523]:Block[3481-3523]"
  }, {
    "left" : "kind = TYPE_FLOAT;",
    "right" : "kind = TYPE_FLOAT;",
    "info" : "ExpressionStatement[3495-3513]:ExpressionStatement[3495-3513]"
  }, {
    "left" : "if (raw == Double.class)",
    "right" : "if (raw == Double.class)",
    "info" : "IfStatement[3529-4353]:IfStatement[3529-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3554-3597]:Block[3554-3597]"
  }, {
    "left" : "kind = TYPE_DOUBLE;",
    "right" : "kind = TYPE_DOUBLE;",
    "info" : "ExpressionStatement[3568-3587]:ExpressionStatement[3568-3587]"
  }, {
    "left" : "if (raw == URI.class)",
    "right" : "if (raw == URI.class)",
    "info" : "IfStatement[3603-4353]:IfStatement[3603-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3625-3665]:Block[3625-3665]"
  }, {
    "left" : "kind = TYPE_URI;",
    "right" : "kind = TYPE_URI;",
    "info" : "ExpressionStatement[3639-3655]:ExpressionStatement[3639-3655]"
  }, {
    "left" : "if (raw == URL.class)",
    "right" : "if (raw == URL.class)",
    "info" : "IfStatement[3671-4353]:IfStatement[3671-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3693-3733]:Block[3693-3733]"
  }, {
    "left" : "kind = TYPE_URL;",
    "right" : "kind = TYPE_URL;",
    "info" : "ExpressionStatement[3707-3723]:ExpressionStatement[3707-3723]"
  }, {
    "left" : "if (raw == Class.class)",
    "right" : "if (raw == Class.class)",
    "info" : "IfStatement[3739-4353]:IfStatement[3739-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3763-3805]:Block[3763-3805]"
  }, {
    "left" : "kind = TYPE_CLASS;",
    "right" : "kind = TYPE_CLASS;",
    "info" : "ExpressionStatement[3777-3795]:ExpressionStatement[3777-3795]"
  }, {
    "left" : "if (raw == Locale.class)",
    "right" : "if (raw == Locale.class)",
    "info" : "IfStatement[3811-4353]:IfStatement[3811-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3836-4016]:Block[3836-4016]"
  }, {
    "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
    "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
    "info" : "VariableDeclarationStatement[3850-3938]:VariableDeclarationStatement[3850-3938]"
  }, {
    "left" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
    "right" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
    "info" : "ReturnStatement[3951-4006]:ReturnStatement[3951-4006]"
  }, {
    "left" : "if (raw == Currency.class)",
    "right" : "if (raw == Currency.class)",
    "info" : "IfStatement[4022-4353]:IfStatement[4022-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4049-4233]:Block[4049-4233]"
  }, {
    "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
    "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
    "info" : "VariableDeclarationStatement[4063-4153]:VariableDeclarationStatement[4063-4153]"
  }, {
    "left" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
    "right" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
    "info" : "ReturnStatement[4166-4223]:ReturnStatement[4166-4223]"
  }, {
    "left" : "if (raw == byte[].class)",
    "right" : "if (raw == byte[].class)",
    "info" : "IfStatement[4239-4353]:IfStatement[4239-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4264-4311]:Block[4264-4311]"
  }, {
    "left" : "kind = TYPE_BYTE_ARRAY;",
    "right" : "kind = TYPE_BYTE_ARRAY;",
    "info" : "ExpressionStatement[4278-4301]:ExpressionStatement[4278-4301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4317-4353]:Block[4317-4353]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[4331-4343]:ReturnStatement[4331-4343]"
  }, {
    "left" : "return new StdKeyDeserializer(kind, raw);",
    "right" : "return new StdKeyDeserializer(kind, raw);",
    "info" : "ReturnStatement[4362-4403]:ReturnStatement[4362-4403]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4415-4424]:MarkerAnnotation[4415-4424]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4429-4435]:Modifier[4429-4435]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[4436-4442]:SimpleType[4436-4442]"
  }, {
    "left" : "deserializeKey",
    "right" : "deserializeKey",
    "info" : "SimpleName[4443-4457]:SimpleName[4443-4457]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[4458-4468]:SingleVariableDeclaration[4458-4468]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[4470-4497]:SingleVariableDeclaration[4470-4497]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[4514-4525]:SimpleType[4514-4525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4530-5234]:Block[4530-5249]"
  }, {
    "left" : "if (key == null)",
    "right" : "if (key == null)",
    "info" : "IfStatement[4540-4621]:IfStatement[4540-4621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4557-4621]:Block[4557-4621]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[4599-4611]:ReturnStatement[4599-4611]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4630-4990]:TryStatement[4630-5005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4634-4771]:Block[4634-4771]"
  }, {
    "left" : "Object result = _parse(key, ctxt);",
    "right" : "Object result = _parse(key, ctxt);",
    "info" : "VariableDeclarationStatement[4648-4682]:VariableDeclarationStatement[4648-4682]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[4695-4761]:IfStatement[4695-4761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4715-4761]:Block[4715-4761]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[4733-4747]:ReturnStatement[4733-4747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4793-4990]:Block[4793-5005]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n                    re.getClass().getName(),\n                    re.getMessage());",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n                    re.getClass().getName(),\n                    ClassUtil.exceptionMessage(re));",
    "info" : "ReturnStatement[4807-4980]:ReturnStatement[4807-4995]"
  }, {
    "left" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
    "right" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
    "info" : "IfStatement[4999-5146]:IfStatement[5014-5161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5110-5146]:Block[5125-5161]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5124-5136]:ReturnStatement[5139-5151]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
    "info" : "ReturnStatement[5155-5228]:ReturnStatement[5170-5243]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5240-5246]:Modifier[5255-5261]"
  }, {
    "left" : "Class<?>",
    "right" : "Class<?>",
    "info" : "ParameterizedType[5247-5255]:ParameterizedType[5262-5270]"
  }, {
    "left" : "getKeyClass",
    "right" : "getKeyClass",
    "info" : "SimpleName[5256-5267]:SimpleName[5271-5282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5270-5291]:Block[5285-5306]"
  }, {
    "left" : "return _keyClass;",
    "right" : "return _keyClass;",
    "info" : "ReturnStatement[5272-5289]:ReturnStatement[5287-5304]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5297-5306]:Modifier[5312-5321]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[5307-5313]:SimpleType[5322-5328]"
  }, {
    "left" : "_parse",
    "right" : "_parse",
    "info" : "SimpleName[5314-5320]:SimpleName[5329-5335]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[5321-5331]:SingleVariableDeclaration[5336-5346]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[5333-5360]:SingleVariableDeclaration[5348-5375]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5369-5378]:SimpleType[5384-5393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5383-8864]:Block[5398-8879]"
  }, {
    "left" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            return ctxt.constructCalendar(ctxt.parseDate(key));\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        case TYPE_BYTE_ARRAY:\n            try {\n                return ctxt.getConfig().getBase64Variant().decode(key);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
    "right" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            return ctxt.constructCalendar(ctxt.parseDate(key));\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        case TYPE_BYTE_ARRAY:\n            try {\n                return ctxt.getConfig().getBase64Variant().decode(key);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
    "info" : "SwitchStatement[5393-8858]:SwitchStatement[5408-8873]"
  }, {
    "left" : "case TYPE_BOOLEAN:",
    "right" : "case TYPE_BOOLEAN:",
    "info" : "SwitchCase[5418-5436]:SwitchCase[5433-5451]"
  }, {
    "left" : "if (\"true\".equals(key))",
    "right" : "if (\"true\".equals(key))",
    "info" : "IfStatement[5449-5525]:IfStatement[5464-5540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5473-5525]:Block[5488-5540]"
  }, {
    "left" : "return Boolean.TRUE;",
    "right" : "return Boolean.TRUE;",
    "info" : "ReturnStatement[5491-5511]:ReturnStatement[5506-5526]"
  }, {
    "left" : "if (\"false\".equals(key))",
    "right" : "if (\"false\".equals(key))",
    "info" : "IfStatement[5538-5616]:IfStatement[5553-5631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5563-5616]:Block[5578-5631]"
  }, {
    "left" : "return Boolean.FALSE;",
    "right" : "return Boolean.FALSE;",
    "info" : "ReturnStatement[5581-5602]:ReturnStatement[5596-5617]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
    "info" : "ReturnStatement[5629-5703]:ReturnStatement[5644-5718]"
  }, {
    "left" : "case TYPE_BYTE:",
    "right" : "case TYPE_BYTE:",
    "info" : "SwitchCase[5712-5727]:SwitchCase[5727-5742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5740-6130]:Block[5755-6145]"
  }, {
    "left" : "int value = _parseInt(key);",
    "right" : "int value = _parseInt(key);",
    "info" : "VariableDeclarationStatement[5758-5785]:VariableDeclarationStatement[5773-5800]"
  }, {
    "left" : "if (value < Byte.MIN_VALUE || value > 255)",
    "right" : "if (value < Byte.MIN_VALUE || value > 255)",
    "info" : "IfStatement[5883-6065]:IfStatement[5898-6080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5926-6065]:Block[5941-6080]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");",
    "info" : "ReturnStatement[5948-6047]:ReturnStatement[5963-6062]"
  }, {
    "left" : "return Byte.valueOf((byte) value);",
    "right" : "return Byte.valueOf((byte) value);",
    "info" : "ReturnStatement[6082-6116]:ReturnStatement[6097-6131]"
  }, {
    "left" : "case TYPE_SHORT:",
    "right" : "case TYPE_SHORT:",
    "info" : "SwitchCase[6139-6155]:SwitchCase[6154-6170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6168-6553]:Block[6183-6568]"
  }, {
    "left" : "int value = _parseInt(key);",
    "right" : "int value = _parseInt(key);",
    "info" : "VariableDeclarationStatement[6186-6213]:VariableDeclarationStatement[6201-6228]"
  }, {
    "left" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
    "right" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
    "info" : "IfStatement[6230-6486]:IfStatement[6245-6501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6286-6486]:Block[6301-6501]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");",
    "info" : "ReturnStatement[6308-6408]:ReturnStatement[6323-6423]"
  }, {
    "left" : "return Short.valueOf((short) value);",
    "right" : "return Short.valueOf((short) value);",
    "info" : "ReturnStatement[6503-6539]:ReturnStatement[6518-6554]"
  }, {
    "left" : "case TYPE_CHAR:",
    "right" : "case TYPE_CHAR:",
    "info" : "SwitchCase[6562-6577]:SwitchCase[6577-6592]"
  }, {
    "left" : "if (key.length() == 1)",
    "right" : "if (key.length() == 1)",
    "info" : "IfStatement[6590-6685]:IfStatement[6605-6700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6613-6685]:Block[6628-6700]"
  }, {
    "left" : "return Character.valueOf(key.charAt(0));",
    "right" : "return Character.valueOf(key.charAt(0));",
    "info" : "ReturnStatement[6631-6671]:ReturnStatement[6646-6686]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
    "info" : "ReturnStatement[6698-6781]:ReturnStatement[6713-6796]"
  }, {
    "left" : "case TYPE_INT:",
    "right" : "case TYPE_INT:",
    "info" : "SwitchCase[6790-6804]:SwitchCase[6805-6819]"
  }, {
    "left" : "return _parseInt(key);",
    "right" : "return _parseInt(key);",
    "info" : "ReturnStatement[6817-6839]:ReturnStatement[6832-6854]"
  }, {
    "left" : "case TYPE_LONG:",
    "right" : "case TYPE_LONG:",
    "info" : "SwitchCase[6849-6864]:SwitchCase[6864-6879]"
  }, {
    "left" : "return _parseLong(key);",
    "right" : "return _parseLong(key);",
    "info" : "ReturnStatement[6877-6900]:ReturnStatement[6892-6915]"
  }, {
    "left" : "case TYPE_FLOAT:",
    "right" : "case TYPE_FLOAT:",
    "info" : "SwitchCase[6910-6926]:SwitchCase[6925-6941]"
  }, {
    "left" : "return Float.valueOf((float) _parseDouble(key));",
    "right" : "return Float.valueOf((float) _parseDouble(key));",
    "info" : "ReturnStatement[7031-7079]:ReturnStatement[7046-7094]"
  }, {
    "left" : "case TYPE_DOUBLE:",
    "right" : "case TYPE_DOUBLE:",
    "info" : "SwitchCase[7088-7105]:SwitchCase[7103-7120]"
  }, {
    "left" : "return _parseDouble(key);",
    "right" : "return _parseDouble(key);",
    "info" : "ReturnStatement[7118-7143]:ReturnStatement[7133-7158]"
  }, {
    "left" : "case TYPE_LOCALE:",
    "right" : "case TYPE_LOCALE:",
    "info" : "SwitchCase[7152-7169]:SwitchCase[7167-7184]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7182-7355]:TryStatement[7197-7370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7186-7256]:Block[7201-7271]"
  }, {
    "left" : "return _deser._deserialize(key, ctxt);",
    "right" : "return _deser._deserialize(key, ctxt);",
    "info" : "ReturnStatement[7204-7242]:ReturnStatement[7219-7257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7292-7355]:Block[7307-7370]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[7310-7341]:ReturnStatement[7325-7356]"
  }, {
    "left" : "case TYPE_CURRENCY:",
    "right" : "case TYPE_CURRENCY:",
    "info" : "SwitchCase[7364-7383]:SwitchCase[7379-7398]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7396-7569]:TryStatement[7411-7584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7400-7470]:Block[7415-7485]"
  }, {
    "left" : "return _deser._deserialize(key, ctxt);",
    "right" : "return _deser._deserialize(key, ctxt);",
    "info" : "ReturnStatement[7418-7456]:ReturnStatement[7433-7471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7506-7569]:Block[7521-7584]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[7524-7555]:ReturnStatement[7539-7570]"
  }, {
    "left" : "case TYPE_DATE:",
    "right" : "case TYPE_DATE:",
    "info" : "SwitchCase[7578-7593]:SwitchCase[7593-7608]"
  }, {
    "left" : "return ctxt.parseDate(key);",
    "right" : "return ctxt.parseDate(key);",
    "info" : "ReturnStatement[7606-7633]:ReturnStatement[7621-7648]"
  }, {
    "left" : "case TYPE_CALENDAR:",
    "right" : "case TYPE_CALENDAR:",
    "info" : "SwitchCase[7642-7661]:SwitchCase[7657-7676]"
  }, {
    "left" : "return ctxt.constructCalendar(ctxt.parseDate(key));",
    "right" : "return ctxt.constructCalendar(ctxt.parseDate(key));",
    "info" : "ReturnStatement[7674-7725]:ReturnStatement[7689-7740]"
  }, {
    "left" : "case TYPE_UUID:",
    "right" : "case TYPE_UUID:",
    "info" : "SwitchCase[7734-7749]:SwitchCase[7749-7764]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7762-7910]:TryStatement[7777-7925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7766-7826]:Block[7781-7841]"
  }, {
    "left" : "return UUID.fromString(key);",
    "right" : "return UUID.fromString(key);",
    "info" : "ReturnStatement[7784-7812]:ReturnStatement[7799-7827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7847-7910]:Block[7862-7925]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[7865-7896]:ReturnStatement[7880-7911]"
  }, {
    "left" : "case TYPE_URI:",
    "right" : "case TYPE_URI:",
    "info" : "SwitchCase[7919-7933]:SwitchCase[7934-7948]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7946-8089]:TryStatement[7961-8104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7950-8005]:Block[7965-8020]"
  }, {
    "left" : "return URI.create(key);",
    "right" : "return URI.create(key);",
    "info" : "ReturnStatement[7968-7991]:ReturnStatement[7983-8006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8026-8089]:Block[8041-8104]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[8044-8075]:ReturnStatement[8059-8090]"
  }, {
    "left" : "case TYPE_URL:",
    "right" : "case TYPE_URL:",
    "info" : "SwitchCase[8098-8112]:SwitchCase[8113-8127]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8125-8277]:TryStatement[8140-8292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8129-8181]:Block[8144-8196]"
  }, {
    "left" : "return new URL(key);",
    "right" : "return new URL(key);",
    "info" : "ReturnStatement[8147-8167]:ReturnStatement[8162-8182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8214-8277]:Block[8229-8292]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[8232-8263]:ReturnStatement[8247-8278]"
  }, {
    "left" : "case TYPE_CLASS:",
    "right" : "case TYPE_CLASS:",
    "info" : "SwitchCase[8286-8302]:SwitchCase[8301-8317]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8315-8506]:TryStatement[8330-8521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8319-8378]:Block[8334-8393]"
  }, {
    "left" : "return ctxt.findClass(key);",
    "right" : "return ctxt.findClass(key);",
    "info" : "ReturnStatement[8337-8364]:ReturnStatement[8352-8379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8399-8506]:Block[8414-8521]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
    "info" : "ReturnStatement[8417-8492]:ReturnStatement[8432-8507]"
  }, {
    "left" : "case TYPE_BYTE_ARRAY:",
    "right" : "case TYPE_BYTE_ARRAY:",
    "info" : "SwitchCase[8515-8536]:SwitchCase[8530-8551]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8549-8739]:TryStatement[8564-8754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8553-8640]:Block[8568-8655]"
  }, {
    "left" : "return ctxt.getConfig().getBase64Variant().decode(key);",
    "right" : "return ctxt.getConfig().getBase64Variant().decode(key);",
    "info" : "ReturnStatement[8571-8626]:ReturnStatement[8586-8641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8676-8739]:Block[8691-8754]"
  }, {
    "left" : "return _weirdKey(ctxt, key, e);",
    "right" : "return _weirdKey(ctxt, key, e);",
    "info" : "ReturnStatement[8694-8725]:ReturnStatement[8709-8740]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[8748-8756]:SwitchCase[8763-8771]"
  }, {
    "left" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
    "right" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
    "info" : "ThrowStatement[8769-8848]:ThrowStatement[8784-8863]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9052-9061]:Modifier[9067-9076]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9062-9065]:PrimitiveType[9077-9080]"
  }, {
    "left" : "_parseInt",
    "right" : "_parseInt",
    "info" : "SimpleName[9066-9075]:SimpleName[9081-9090]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[9076-9086]:SingleVariableDeclaration[9091-9101]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[9095-9119]:SimpleType[9110-9134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9120-9165]:Block[9135-9180]"
  }, {
    "left" : "return Integer.parseInt(key);",
    "right" : "return Integer.parseInt(key);",
    "info" : "ReturnStatement[9130-9159]:ReturnStatement[9145-9174]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9171-9180]:Modifier[9186-9195]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[9181-9185]:PrimitiveType[9196-9200]"
  }, {
    "left" : "_parseLong",
    "right" : "_parseLong",
    "info" : "SimpleName[9186-9196]:SimpleName[9201-9211]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[9197-9207]:SingleVariableDeclaration[9212-9222]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[9216-9240]:SimpleType[9231-9255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9241-9284]:Block[9256-9299]"
  }, {
    "left" : "return Long.parseLong(key);",
    "right" : "return Long.parseLong(key);",
    "info" : "ReturnStatement[9251-9278]:ReturnStatement[9266-9293]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9290-9299]:Modifier[9305-9314]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9300-9306]:PrimitiveType[9315-9321]"
  }, {
    "left" : "_parseDouble",
    "right" : "_parseDouble",
    "info" : "SimpleName[9307-9319]:SimpleName[9322-9334]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[9320-9330]:SingleVariableDeclaration[9335-9345]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[9339-9363]:SimpleType[9354-9378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9364-9416]:Block[9379-9431]"
  }, {
    "left" : "return NumberInput.parseDouble(key);",
    "right" : "return NumberInput.parseDouble(key);",
    "info" : "ReturnStatement[9374-9410]:ReturnStatement[9389-9425]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9440-9449]:Modifier[9455-9464]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[9450-9456]:SimpleType[9465-9471]"
  }, {
    "left" : "_weirdKey",
    "right" : "_weirdKey",
    "info" : "SimpleName[9457-9466]:SimpleName[9472-9481]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[9467-9494]:SingleVariableDeclaration[9482-9509]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[9496-9506]:SingleVariableDeclaration[9511-9521]"
  }, {
    "left" : "Exception e",
    "right" : "Exception e",
    "info" : "SingleVariableDeclaration[9508-9519]:SingleVariableDeclaration[9523-9534]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9528-9539]:SimpleType[9543-9554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9540-9646]:Block[9555-9676]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\",\n                e.getMessage());",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\",\n                ClassUtil.exceptionMessage(e));",
    "info" : "ReturnStatement[9550-9640]:ReturnStatement[9565-9670]"
  }, {
    "left" : "e",
    "right" : "ClassUtil",
    "info" : "SimpleName[9624-9625]:SimpleName[9639-9648]"
  }, {
    "left" : "getMessage",
    "right" : "exceptionMessage",
    "info" : "SimpleName[9626-9636]:SimpleName[9649-9665]"
  }, {
    "left" : "@JacksonStdImpl",
    "right" : "@JacksonStdImpl",
    "info" : "MarkerAnnotation[9855-9870]:MarkerAnnotation[9885-9900]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[9875-9880]:Modifier[9905-9910]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9881-9887]:Modifier[9911-9917]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[9888-9893]:TYPE_DECLARATION_KIND[9918-9923]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10162-10169]:Modifier[10192-10199]"
  }, {
    "left" : "StringKD",
    "right" : "StringKD",
    "info" : "SimpleName[10170-10178]:SimpleName[10200-10208]"
  }, {
    "left" : "Class<?> nominalType",
    "right" : "Class<?> nominalType",
    "info" : "SingleVariableDeclaration[10179-10199]:SingleVariableDeclaration[10209-10229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10201-10228]:Block[10231-10258]"
  }, {
    "left" : "super(-1, nominalType);",
    "right" : "super(-1, nominalType);",
    "info" : "SuperConstructorInvocation[10203-10226]:SuperConstructorInvocation[10233-10256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10238-10244]:Modifier[10268-10274]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10245-10251]:Modifier[10275-10281]"
  }, {
    "left" : "StringKD",
    "right" : "StringKD",
    "info" : "SimpleType[10252-10260]:SimpleType[10282-10290]"
  }, {
    "left" : "forType",
    "right" : "forType",
    "info" : "SimpleName[10261-10268]:SimpleName[10291-10298]"
  }, {
    "left" : "Class<?> nominalType",
    "right" : "Class<?> nominalType",
    "info" : "SingleVariableDeclaration[10269-10289]:SingleVariableDeclaration[10299-10319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10299-10542]:Block[10329-10572]"
  }, {
    "left" : "if (nominalType == String.class)",
    "right" : "if (nominalType == String.class)",
    "info" : "IfStatement[10313-10393]:IfStatement[10343-10423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10346-10393]:Block[10376-10423]"
  }, {
    "left" : "return sString;",
    "right" : "return sString;",
    "info" : "ReturnStatement[10364-10379]:ReturnStatement[10394-10409]"
  }, {
    "left" : "if (nominalType == Object.class)",
    "right" : "if (nominalType == Object.class)",
    "info" : "IfStatement[10406-10486]:IfStatement[10436-10516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10439-10486]:Block[10469-10516]"
  }, {
    "left" : "return sObject;",
    "right" : "return sObject;",
    "info" : "ReturnStatement[10457-10472]:ReturnStatement[10487-10502]"
  }, {
    "left" : "return new StringKD(nominalType);",
    "right" : "return new StringKD(nominalType);",
    "info" : "ReturnStatement[10499-10532]:ReturnStatement[10529-10562]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10552-10561]:MarkerAnnotation[10582-10591]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10570-10576]:Modifier[10600-10606]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[10577-10583]:SimpleType[10607-10613]"
  }, {
    "left" : "deserializeKey",
    "right" : "deserializeKey",
    "info" : "SimpleName[10584-10598]:SimpleName[10614-10628]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[10599-10609]:SingleVariableDeclaration[10629-10639]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[10611-10638]:SingleVariableDeclaration[10641-10668]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10647-10658]:SimpleType[10677-10688]"
  }, {
    "left" : "JsonProcessingException",
    "right" : "JsonProcessingException",
    "info" : "SimpleType[10660-10683]:SimpleType[10690-10713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10684-10719]:Block[10714-10749]"
  }, {
    "left" : "return key;",
    "right" : "return key;",
    "info" : "ReturnStatement[10698-10709]:ReturnStatement[10728-10739]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11111-11116]:Modifier[11141-11146]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11117-11123]:Modifier[11147-11153]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11124-11129]:TYPE_DECLARATION_KIND[11154-11159]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11421-11430]:Modifier[11451-11460]"
  }, {
    "left" : "DelegatingKD",
    "right" : "DelegatingKD",
    "info" : "SimpleName[11431-11443]:SimpleName[11461-11473]"
  }, {
    "left" : "Class<?> cls",
    "right" : "Class<?> cls",
    "info" : "SingleVariableDeclaration[11444-11456]:SingleVariableDeclaration[11474-11486]"
  }, {
    "left" : "JsonDeserializer<?> deser",
    "right" : "JsonDeserializer<?> deser",
    "info" : "SingleVariableDeclaration[11458-11483]:SingleVariableDeclaration[11488-11513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11485-11556]:Block[11515-11586]"
  }, {
    "left" : "_keyClass = cls;",
    "right" : "_keyClass = cls;",
    "info" : "ExpressionStatement[11499-11515]:ExpressionStatement[11529-11545]"
  }, {
    "left" : "_delegate = deser;",
    "right" : "_delegate = deser;",
    "info" : "ExpressionStatement[11528-11546]:ExpressionStatement[11558-11576]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[11566-11595]:SingleMemberAnnotation[11596-11625]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11604-11613]:MarkerAnnotation[11634-11643]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11622-11628]:Modifier[11652-11658]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11629-11634]:Modifier[11659-11664]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[11635-11641]:SimpleType[11665-11671]"
  }, {
    "left" : "deserializeKey",
    "right" : "deserializeKey",
    "info" : "SimpleName[11642-11656]:SimpleName[11672-11686]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[11657-11667]:SingleVariableDeclaration[11687-11697]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[11669-11696]:SingleVariableDeclaration[11699-11726]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11717-11728]:SimpleType[11747-11758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11737-12551]:Block[11767-12581]"
  }, {
    "left" : "if (key == null)",
    "right" : "if (key == null)",
    "info" : "IfStatement[11751-11840]:IfStatement[11781-11870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11768-11840]:Block[11798-11870]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[11814-11826]:ReturnStatement[11844-11856]"
  }, {
    "left" : "TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt);",
    "right" : "TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt);",
    "info" : "VariableDeclarationStatement[11853-11910]:VariableDeclarationStatement[11883-11940]"
  }, {
    "left" : "tb.writeString(key);",
    "right" : "tb.writeString(key);",
    "info" : "ExpressionStatement[11923-11943]:ExpressionStatement[11953-11973]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[11956-12541]:TryStatement[11986-12571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11960-12393]:Block[11990-12423]"
  }, {
    "left" : "JsonParser p = tb.asParser();",
    "right" : "JsonParser p = tb.asParser();",
    "info" : "VariableDeclarationStatement[12074-12103]:VariableDeclarationStatement[12104-12133]"
  }, {
    "left" : "p.nextToken();",
    "right" : "p.nextToken();",
    "info" : "ExpressionStatement[12120-12134]:ExpressionStatement[12150-12164]"
  }, {
    "left" : "Object result = _delegate.deserialize(p, ctxt);",
    "right" : "Object result = _delegate.deserialize(p, ctxt);",
    "info" : "VariableDeclarationStatement[12151-12198]:VariableDeclarationStatement[12181-12228]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[12215-12289]:IfStatement[12245-12319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12235-12289]:Block[12265-12319]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[12257-12271]:ReturnStatement[12287-12301]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
    "info" : "ReturnStatement[12306-12379]:ReturnStatement[12336-12409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12415-12541]:Block[12445-12571]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
    "info" : "ReturnStatement[12433-12527]:ReturnStatement[12463-12557]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12561-12567]:Modifier[12591-12597]"
  }, {
    "left" : "Class<?>",
    "right" : "Class<?>",
    "info" : "ParameterizedType[12568-12576]:ParameterizedType[12598-12606]"
  }, {
    "left" : "getKeyClass",
    "right" : "getKeyClass",
    "info" : "SimpleName[12577-12588]:SimpleName[12607-12618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12591-12612]:Block[12621-12642]"
  }, {
    "left" : "return _keyClass;",
    "right" : "return _keyClass;",
    "info" : "ReturnStatement[12593-12610]:ReturnStatement[12623-12640]"
  }, {
    "left" : "@JacksonStdImpl",
    "right" : "@JacksonStdImpl",
    "info" : "MarkerAnnotation[12629-12644]:MarkerAnnotation[12659-12674]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12649-12654]:Modifier[12679-12684]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12655-12661]:Modifier[12685-12691]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12662-12667]:TYPE_DECLARATION_KIND[12692-12697]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[13169-13178]:Modifier[13199-13208]"
  }, {
    "left" : "EnumKD",
    "right" : "EnumKD",
    "info" : "SimpleName[13179-13185]:SimpleName[13209-13215]"
  }, {
    "left" : "EnumResolver er",
    "right" : "EnumResolver er",
    "info" : "SingleVariableDeclaration[13186-13201]:SingleVariableDeclaration[13216-13231]"
  }, {
    "left" : "AnnotatedMethod factory",
    "right" : "AnnotatedMethod factory",
    "info" : "SingleVariableDeclaration[13203-13226]:SingleVariableDeclaration[13233-13256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13228-13401]:Block[13258-13431]"
  }, {
    "left" : "super(-1, er.getEnumClass());",
    "right" : "super(-1, er.getEnumClass());",
    "info" : "SuperConstructorInvocation[13242-13271]:SuperConstructorInvocation[13272-13301]"
  }, {
    "left" : "_byNameResolver = er;",
    "right" : "_byNameResolver = er;",
    "info" : "ExpressionStatement[13284-13305]:ExpressionStatement[13314-13335]"
  }, {
    "left" : "_factory = factory;",
    "right" : "_factory = factory;",
    "info" : "ExpressionStatement[13318-13337]:ExpressionStatement[13348-13367]"
  }, {
    "left" : "_enumDefaultValue = er.getDefaultValue();",
    "right" : "_enumDefaultValue = er.getDefaultValue();",
    "info" : "ExpressionStatement[13350-13391]:ExpressionStatement[13380-13421]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13411-13420]:MarkerAnnotation[13441-13450]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13429-13435]:Modifier[13459-13465]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[13436-13442]:SimpleType[13466-13472]"
  }, {
    "left" : "_parse",
    "right" : "_parse",
    "info" : "SimpleName[13443-13449]:SimpleName[13473-13479]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[13450-13460]:SingleVariableDeclaration[13480-13490]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[13462-13489]:SingleVariableDeclaration[13492-13519]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13498-13509]:SimpleType[13528-13539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13518-14597]:Block[13548-14627]"
  }, {
    "left" : "if (_factory != null)",
    "right" : "if (_factory != null)",
    "info" : "IfStatement[13532-13751]:IfStatement[13562-13781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13554-13751]:Block[13584-13781]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[13572-13737]:TryStatement[13602-13767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13576-13643]:Block[13606-13673]"
  }, {
    "left" : "return _factory.call1(key);",
    "right" : "return _factory.call1(key);",
    "info" : "ReturnStatement[13598-13625]:ReturnStatement[13628-13655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13664-13737]:Block[13694-13767]"
  }, {
    "left" : "ClassUtil.unwrapAndThrowAsIAE(e);",
    "right" : "ClassUtil.unwrapAndThrowAsIAE(e);",
    "info" : "ExpressionStatement[13686-13719]:ExpressionStatement[13716-13749]"
  }, {
    "left" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
    "right" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
    "info" : "VariableDeclarationStatement[13764-13916]:VariableDeclarationStatement[13794-13946]"
  }, {
    "left" : "Enum<?> e = res.findEnum(key);",
    "right" : "Enum<?> e = res.findEnum(key);",
    "info" : "VariableDeclarationStatement[13929-13959]:VariableDeclarationStatement[13959-13989]"
  }, {
    "left" : "if (e == null)",
    "right" : "if (e == null)",
    "info" : "IfStatement[13972-14565]:IfStatement[14002-14595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13987-14565]:Block[14017-14595]"
  }, {
    "left" : "if ((_enumDefaultValue != null)\n                        && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE))",
    "right" : "if ((_enumDefaultValue != null)\n                        && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE))",
    "info" : "IfStatement[14005-14469]:IfStatement[14035-14499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14149-14211]:Block[14179-14241]"
  }, {
    "left" : "e = _enumDefaultValue;",
    "right" : "e = _enumDefaultValue;",
    "info" : "ExpressionStatement[14171-14193]:ExpressionStatement[14201-14223]"
  }, {
    "left" : "if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
    "right" : "if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
    "info" : "IfStatement[14217-14469]:IfStatement[14247-14499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14295-14469]:Block[14325-14499]"
  }, {
    "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
    "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
    "info" : "ReturnStatement[14317-14451]:ReturnStatement[14347-14481]"
  }, {
    "left" : "return e;",
    "right" : "return e;",
    "info" : "ReturnStatement[14578-14587]:ReturnStatement[14608-14617]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14607-14614]:Modifier[14637-14644]"
  }, {
    "left" : "EnumResolver",
    "right" : "EnumResolver",
    "info" : "SimpleType[14615-14627]:SimpleType[14645-14657]"
  }, {
    "left" : "_getToStringResolver",
    "right" : "_getToStringResolver",
    "info" : "SimpleName[14628-14648]:SimpleName[14658-14678]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[14649-14676]:SingleVariableDeclaration[14679-14706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14686-15037]:Block[14716-15067]"
  }, {
    "left" : "EnumResolver res = _byToStringResolver;",
    "right" : "EnumResolver res = _byToStringResolver;",
    "info" : "VariableDeclarationStatement[14700-14739]:VariableDeclarationStatement[14730-14769]"
  }, {
    "left" : "if (res == null)",
    "right" : "if (res == null)",
    "info" : "IfStatement[14752-15003]:IfStatement[14782-15033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14769-15003]:Block[14799-15033]"
  }, {
    "left" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
    "right" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
    "info" : "SynchronizedStatement[14787-14989]:SynchronizedStatement[14817-15019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14807-14989]:Block[14837-15019]"
  }, {
    "left" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
    "right" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
    "info" : "ExpressionStatement[14829-14971]:ExpressionStatement[14859-15001]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[15016-15027]:ReturnStatement[15046-15057]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[15176-15181]:Modifier[15206-15211]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15182-15188]:Modifier[15212-15218]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[15189-15194]:TYPE_DECLARATION_KIND[15219-15224]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15367-15373]:Modifier[15397-15403]"
  }, {
    "left" : "StringCtorKeyDeserializer",
    "right" : "StringCtorKeyDeserializer",
    "info" : "SimpleName[15374-15399]:SimpleName[15404-15429]"
  }, {
    "left" : "Constructor<?> ctor",
    "right" : "Constructor<?> ctor",
    "info" : "SingleVariableDeclaration[15400-15419]:SingleVariableDeclaration[15430-15449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15421-15507]:Block[15451-15537]"
  }, {
    "left" : "super(-1, ctor.getDeclaringClass());",
    "right" : "super(-1, ctor.getDeclaringClass());",
    "info" : "SuperConstructorInvocation[15435-15471]:SuperConstructorInvocation[15465-15501]"
  }, {
    "left" : "_ctor = ctor;",
    "right" : "_ctor = ctor;",
    "info" : "ExpressionStatement[15484-15497]:ExpressionStatement[15514-15527]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15517-15526]:MarkerAnnotation[15547-15556]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15535-15541]:Modifier[15565-15571]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[15542-15548]:SimpleType[15572-15578]"
  }, {
    "left" : "_parse",
    "right" : "_parse",
    "info" : "SimpleName[15549-15555]:SimpleName[15579-15585]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[15556-15566]:SingleVariableDeclaration[15586-15596]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[15568-15595]:SingleVariableDeclaration[15598-15625]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[15604-15613]:SimpleType[15634-15643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15622-15676]:Block[15652-15706]"
  }, {
    "left" : "return _ctor.newInstance(key);",
    "right" : "return _ctor.newInstance(key);",
    "info" : "ReturnStatement[15636-15666]:ReturnStatement[15666-15696]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[15811-15816]:Modifier[15841-15846]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15817-15823]:Modifier[15847-15853]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[15824-15829]:TYPE_DECLARATION_KIND[15854-15859]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15996-16002]:Modifier[16026-16032]"
  }, {
    "left" : "StringFactoryKeyDeserializer",
    "right" : "StringFactoryKeyDeserializer",
    "info" : "SimpleName[16003-16031]:SimpleName[16033-16061]"
  }, {
    "left" : "Method fm",
    "right" : "Method fm",
    "info" : "SingleVariableDeclaration[16032-16041]:SingleVariableDeclaration[16062-16071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16043-16134]:Block[16073-16164]"
  }, {
    "left" : "super(-1, fm.getDeclaringClass());",
    "right" : "super(-1, fm.getDeclaringClass());",
    "info" : "SuperConstructorInvocation[16057-16091]:SuperConstructorInvocation[16087-16121]"
  }, {
    "left" : "_factoryMethod = fm;",
    "right" : "_factoryMethod = fm;",
    "info" : "ExpressionStatement[16104-16124]:ExpressionStatement[16134-16154]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16144-16153]:MarkerAnnotation[16174-16183]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16162-16168]:Modifier[16192-16198]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[16169-16175]:SimpleType[16199-16205]"
  }, {
    "left" : "_parse",
    "right" : "_parse",
    "info" : "SimpleName[16176-16182]:SimpleName[16206-16212]"
  }, {
    "left" : "String key",
    "right" : "String key",
    "info" : "SingleVariableDeclaration[16183-16193]:SingleVariableDeclaration[16213-16223]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[16195-16222]:SingleVariableDeclaration[16225-16252]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[16231-16240]:SimpleType[16261-16270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16249-16313]:Block[16279-16343]"
  }, {
    "left" : "return _factoryMethod.invoke(null, key);",
    "right" : "return _factoryMethod.invoke(null, key);",
    "info" : "ReturnStatement[16263-16303]:ReturnStatement[16293-16333]"
  } ]
}