{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HttpObjectDecoder",
      "right" : "HttpObjectDecoder",
      "info" : "TypeDeclaration[1091-28363]:TypeDeclaration[1091-28423]"
    }, {
      "left" : "private static final String EMPTY_VALUE = \"\";",
      "right" : "private static final String EMPTY_VALUE = \"\";",
      "info" : "FieldDeclaration[3867-3912]:FieldDeclaration[3867-3912]"
    }, {
      "left" : "private final int maxChunkSize;",
      "right" : "private final int maxChunkSize;",
      "info" : "FieldDeclaration[3918-3949]:FieldDeclaration[3918-3949]"
    }, {
      "left" : "private final boolean chunkedSupported;",
      "right" : "private final boolean chunkedSupported;",
      "info" : "FieldDeclaration[3954-3993]:FieldDeclaration[3954-3993]"
    }, {
      "left" : "protected final boolean validateHeaders;",
      "right" : "protected final boolean validateHeaders;",
      "info" : "FieldDeclaration[3998-4038]:FieldDeclaration[3998-4038]"
    }, {
      "left" : "private final HeaderParser headerParser;",
      "right" : "private final HeaderParser headerParser;",
      "info" : "FieldDeclaration[4043-4083]:FieldDeclaration[4043-4083]"
    }, {
      "left" : "private final LineParser lineParser;",
      "right" : "private final LineParser lineParser;",
      "info" : "FieldDeclaration[4088-4124]:FieldDeclaration[4088-4124]"
    }, {
      "left" : "private HttpMessage message;",
      "right" : "private HttpMessage message;",
      "info" : "FieldDeclaration[4130-4158]:FieldDeclaration[4130-4158]"
    }, {
      "left" : "private long chunkSize;",
      "right" : "private long chunkSize;",
      "info" : "FieldDeclaration[4163-4186]:FieldDeclaration[4163-4186]"
    }, {
      "left" : "private long contentLength = Long.MIN_VALUE;",
      "right" : "private long contentLength = Long.MIN_VALUE;",
      "info" : "FieldDeclaration[4191-4235]:FieldDeclaration[4191-4235]"
    }, {
      "left" : "private volatile boolean resetRequested;",
      "right" : "private volatile boolean resetRequested;",
      "info" : "FieldDeclaration[4240-4280]:FieldDeclaration[4240-4280]"
    }, {
      "left" : "private CharSequence name;",
      "right" : "private CharSequence name;",
      "info" : "FieldDeclaration[4335-4361]:FieldDeclaration[4335-4361]"
    }, {
      "left" : "private CharSequence value;",
      "right" : "private CharSequence value;",
      "info" : "FieldDeclaration[4366-4393]:FieldDeclaration[4366-4393]"
    }, {
      "left" : "private LastHttpContent trailer;",
      "right" : "private LastHttpContent trailer;",
      "info" : "FieldDeclaration[4399-4431]:FieldDeclaration[4399-4431]"
    }, {
      "left" : "enum : State",
      "right" : "enum : State",
      "info" : "EnumDeclaration[4437-4864]:EnumDeclaration[4437-4864]"
    }, {
      "left" : "private State currentState = State.SKIP_CONTROL_CHARS;",
      "right" : "private State currentState = State.SKIP_CONTROL_CHARS;",
      "info" : "FieldDeclaration[4870-4924]:FieldDeclaration[4870-4924]"
    }, {
      "left" : "protected HttpObjectDecoder()",
      "right" : "protected HttpObjectDecoder()",
      "info" : "MethodDeclaration[4930-5182]:MethodDeclaration[4930-5182]"
    }, {
      "left" : "protected HttpObjectDecoder(\n            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean chunkedSupported)",
      "right" : "protected HttpObjectDecoder(\n            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean chunkedSupported)",
      "info" : "MethodDeclaration[5188-5491]:MethodDeclaration[5188-5491]"
    }, {
      "left" : "protected HttpObjectDecoder(\n            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n            boolean chunkedSupported, boolean validateHeaders)",
      "right" : "protected HttpObjectDecoder(\n            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n            boolean chunkedSupported, boolean validateHeaders)",
      "info" : "MethodDeclaration[5497-6688]:MethodDeclaration[5497-6688]"
    }, {
      "left" : "protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) throws Exception",
      "right" : "protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) throws Exception",
      "info" : "MethodDeclaration[6694-14012]:MethodDeclaration[6694-14012]"
    }, {
      "left" : "protected void decodeLast(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception",
      "right" : "protected void decodeLast(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception",
      "info" : "MethodDeclaration[14018-15383]:MethodDeclaration[14018-15383]"
    }, {
      "left" : "protected boolean isContentAlwaysEmpty(HttpMessage msg)",
      "right" : "protected boolean isContentAlwaysEmpty(HttpMessage msg)",
      "info" : "MethodDeclaration[15389-16210]:MethodDeclaration[15389-16210]"
    }, {
      "left" : "public void reset()",
      "right" : "public void reset()",
      "info" : "MethodDeclaration[16216-16477]:MethodDeclaration[16216-16477]"
    }, {
      "left" : "private void resetNow()",
      "right" : "private void resetNow()",
      "info" : "MethodDeclaration[16483-17049]:MethodDeclaration[16483-17049]"
    }, {
      "left" : "private HttpMessage invalidMessage(ByteBuf in, Exception cause)",
      "right" : "private HttpMessage invalidMessage(ByteBuf in, Exception cause)",
      "info" : "MethodDeclaration[17055-17689]:MethodDeclaration[17055-17689]"
    }, {
      "left" : "private HttpContent invalidChunk(ByteBuf in, Exception cause)",
      "right" : "private HttpContent invalidChunk(ByteBuf in, Exception cause)",
      "info" : "MethodDeclaration[17695-18218]:MethodDeclaration[17695-18218]"
    }, {
      "left" : "private static boolean skipControlCharacters(ByteBuf buffer)",
      "right" : "private static boolean skipControlCharacters(ByteBuf buffer)",
      "info" : "MethodDeclaration[18224-18729]:MethodDeclaration[18224-18729]"
    }, {
      "left" : "private State readHeaders(ByteBuf buffer)",
      "right" : "private State readHeaders(ByteBuf buffer)",
      "info" : "MethodDeclaration[18735-20566]:MethodDeclaration[18735-20566]"
    }, {
      "left" : "private long contentLength()",
      "right" : "private long contentLength()",
      "info" : "MethodDeclaration[20572-20769]:MethodDeclaration[20572-20769]"
    }, {
      "left" : "private LastHttpContent readTrailingHeaders(ByteBuf buffer)",
      "right" : "private LastHttpContent readTrailingHeaders(ByteBuf buffer)",
      "info" : "MethodDeclaration[20775-23089]:MethodDeclaration[20775-23089]"
    }, {
      "left" : "protected abstract boolean isDecodingRequest();",
      "right" : "protected abstract boolean isDecodingRequest();",
      "info" : "MethodDeclaration[23095-23142]:MethodDeclaration[23095-23142]"
    }, {
      "left" : "protected abstract HttpMessage createMessage(String[] initialLine) throws Exception;",
      "right" : "protected abstract HttpMessage createMessage(String[] initialLine) throws Exception;",
      "info" : "MethodDeclaration[23147-23231]:MethodDeclaration[23147-23231]"
    }, {
      "left" : "protected abstract HttpMessage createInvalidMessage();",
      "right" : "protected abstract HttpMessage createInvalidMessage();",
      "info" : "MethodDeclaration[23236-23290]:MethodDeclaration[23236-23290]"
    }, {
      "left" : "private static int getChunkSize(String hex)",
      "right" : "private static int getChunkSize(String hex)",
      "info" : "MethodDeclaration[23296-23678]:MethodDeclaration[23296-23678]"
    }, {
      "left" : "private static String[] splitInitialLine(AppendableCharSequence sb)",
      "right" : "private static String[] splitInitialLine(AppendableCharSequence sb)",
      "info" : "MethodDeclaration[23684-24318]:MethodDeclaration[23684-24336]"
    }, {
      "left" : "private void splitHeader(AppendableCharSequence sb)",
      "right" : "private void splitHeader(AppendableCharSequence sb)",
      "info" : "MethodDeclaration[24324-25286]:MethodDeclaration[24342-25316]"
    }, {
      "left" : "private static int findNonWhitespace(CharSequence sb, int offset)",
      "right" : "private static int findNonWhitespace(AppendableCharSequence sb, int offset)",
      "info" : "MethodDeclaration[25292-25582]:MethodDeclaration[25322-25624]"
    }, {
      "left" : "private static int findWhitespace(CharSequence sb, int offset)",
      "right" : "private static int findWhitespace(AppendableCharSequence sb, int offset)",
      "info" : "MethodDeclaration[25588-25874]:MethodDeclaration[25630-25928]"
    }, {
      "left" : "private static int findEndOfString(CharSequence sb)",
      "right" : "private static int findEndOfString(AppendableCharSequence sb)",
      "info" : "MethodDeclaration[25880-26155]:MethodDeclaration[25934-26215]"
    }, {
      "left" : "HeaderParser",
      "right" : "HeaderParser",
      "info" : "TypeDeclaration[26161-27826]:TypeDeclaration[26221-27886]"
    }, {
      "left" : "private final AppendableCharSequence seq;",
      "right" : "private final AppendableCharSequence seq;",
      "info" : "FieldDeclaration[26230-26271]:FieldDeclaration[26290-26331]"
    }, {
      "left" : "private final int maxLength;",
      "right" : "private final int maxLength;",
      "info" : "FieldDeclaration[26280-26308]:FieldDeclaration[26340-26368]"
    }, {
      "left" : "private int size;",
      "right" : "private int size;",
      "info" : "FieldDeclaration[26317-26334]:FieldDeclaration[26377-26394]"
    }, {
      "left" : "HeaderParser(AppendableCharSequence seq, int maxLength)",
      "right" : "HeaderParser(AppendableCharSequence seq, int maxLength)",
      "info" : "MethodDeclaration[26344-26479]:MethodDeclaration[26404-26539]"
    }, {
      "left" : "public AppendableCharSequence parse(ByteBuf buffer)",
      "right" : "public AppendableCharSequence parse(ByteBuf buffer)",
      "info" : "MethodDeclaration[26489-26826]:MethodDeclaration[26549-26886]"
    }, {
      "left" : "public void reset()",
      "right" : "public void reset()",
      "info" : "MethodDeclaration[26836-26889]:MethodDeclaration[26896-26949]"
    }, {
      "left" : "public boolean process(byte value) throws Exception",
      "right" : "public boolean process(byte value) throws Exception",
      "info" : "MethodDeclaration[26899-27638]:MethodDeclaration[26959-27698]"
    }, {
      "left" : "protected TooLongFrameException newException(int maxLength)",
      "right" : "protected TooLongFrameException newException(int maxLength)",
      "info" : "MethodDeclaration[27648-27820]:MethodDeclaration[27708-27880]"
    }, {
      "left" : "LineParser",
      "right" : "LineParser",
      "info" : "TypeDeclaration[27832-28361]:TypeDeclaration[27892-28421]"
    }, {
      "left" : "LineParser(AppendableCharSequence seq, int maxLength)",
      "right" : "LineParser(AppendableCharSequence seq, int maxLength)",
      "info" : "MethodDeclaration[27902-28002]:MethodDeclaration[27962-28062]"
    }, {
      "left" : "public AppendableCharSequence parse(ByteBuf buffer)",
      "right" : "public AppendableCharSequence parse(ByteBuf buffer)",
      "info" : "MethodDeclaration[28012-28154]:MethodDeclaration[28072-28214]"
    }, {
      "left" : "protected TooLongFrameException newException(int maxLength)",
      "right" : "protected TooLongFrameException newException(int maxLength)",
      "info" : "MethodDeclaration[28164-28355]:MethodDeclaration[28224-28415]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3792-3798]:Modifier[3792-3798]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[3799-3807]:Modifier[3799-3807]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3808-3813]:TYPE_DECLARATION_KIND[3808-3813]"
    }, {
      "left" : "HttpObjectDecoder",
      "right" : "HttpObjectDecoder",
      "info" : "SimpleName[3814-3831]:SimpleName[3814-3831]"
    }, {
      "left" : "ByteToMessageDecoder",
      "right" : "ByteToMessageDecoder",
      "info" : "SimpleType[3840-3860]:SimpleType[3840-3860]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5107-5116]:Modifier[5107-5116]"
    }, {
      "left" : "HttpObjectDecoder",
      "right" : "HttpObjectDecoder",
      "info" : "SimpleName[5117-5134]:SimpleName[5117-5134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5137-5182]:Block[5137-5182]"
    }, {
      "left" : "this(4096, 8192, 8192, true);",
      "right" : "this(4096, 8192, 8192, true);",
      "info" : "ConstructorInvocation[5147-5176]:ConstructorInvocation[5147-5176]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5265-5274]:Modifier[5265-5274]"
    }, {
      "left" : "HttpObjectDecoder",
      "right" : "HttpObjectDecoder",
      "info" : "SimpleName[5275-5292]:SimpleName[5275-5292]"
    }, {
      "left" : "int maxInitialLineLength",
      "right" : "int maxInitialLineLength",
      "info" : "SingleVariableDeclaration[5306-5330]:SingleVariableDeclaration[5306-5330]"
    }, {
      "left" : "int maxHeaderSize",
      "right" : "int maxHeaderSize",
      "info" : "SingleVariableDeclaration[5332-5349]:SingleVariableDeclaration[5332-5349]"
    }, {
      "left" : "int maxChunkSize",
      "right" : "int maxChunkSize",
      "info" : "SingleVariableDeclaration[5351-5367]:SingleVariableDeclaration[5351-5367]"
    }, {
      "left" : "boolean chunkedSupported",
      "right" : "boolean chunkedSupported",
      "info" : "SingleVariableDeclaration[5369-5393]:SingleVariableDeclaration[5369-5393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5395-5491]:Block[5395-5491]"
    }, {
      "left" : "this(maxInitialLineLength, maxHeaderSize, maxChunkSize, chunkedSupported, true);",
      "right" : "this(maxInitialLineLength, maxHeaderSize, maxChunkSize, chunkedSupported, true);",
      "info" : "ConstructorInvocation[5405-5485]:ConstructorInvocation[5405-5485]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5574-5583]:Modifier[5574-5583]"
    }, {
      "left" : "HttpObjectDecoder",
      "right" : "HttpObjectDecoder",
      "info" : "SimpleName[5584-5601]:SimpleName[5584-5601]"
    }, {
      "left" : "int maxInitialLineLength",
      "right" : "int maxInitialLineLength",
      "info" : "SingleVariableDeclaration[5615-5639]:SingleVariableDeclaration[5615-5639]"
    }, {
      "left" : "int maxHeaderSize",
      "right" : "int maxHeaderSize",
      "info" : "SingleVariableDeclaration[5641-5658]:SingleVariableDeclaration[5641-5658]"
    }, {
      "left" : "int maxChunkSize",
      "right" : "int maxChunkSize",
      "info" : "SingleVariableDeclaration[5660-5676]:SingleVariableDeclaration[5660-5676]"
    }, {
      "left" : "boolean chunkedSupported",
      "right" : "boolean chunkedSupported",
      "info" : "SingleVariableDeclaration[5690-5714]:SingleVariableDeclaration[5690-5714]"
    }, {
      "left" : "boolean validateHeaders",
      "right" : "boolean validateHeaders",
      "info" : "SingleVariableDeclaration[5716-5739]:SingleVariableDeclaration[5716-5739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5741-6688]:Block[5741-6688]"
    }, {
      "left" : "if (maxInitialLineLength <= 0)",
      "right" : "if (maxInitialLineLength <= 0)",
      "info" : "IfStatement[5752-5960]:IfStatement[5752-5960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5783-5960]:Block[5783-5960]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"maxInitialLineLength must be a positive integer: \" +\n                     maxInitialLineLength);",
      "right" : "throw new IllegalArgumentException(\n                    \"maxInitialLineLength must be a positive integer: \" +\n                     maxInitialLineLength);",
      "info" : "ThrowStatement[5797-5950]:ThrowStatement[5797-5950]"
    }, {
      "left" : "if (maxHeaderSize <= 0)",
      "right" : "if (maxHeaderSize <= 0)",
      "info" : "IfStatement[5969-6155]:IfStatement[5969-6155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5993-6155]:Block[5993-6155]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"maxHeaderSize must be a positive integer: \" +\n                    maxHeaderSize);",
      "right" : "throw new IllegalArgumentException(\n                    \"maxHeaderSize must be a positive integer: \" +\n                    maxHeaderSize);",
      "info" : "ThrowStatement[6007-6145]:ThrowStatement[6007-6145]"
    }, {
      "left" : "if (maxChunkSize <= 0)",
      "right" : "if (maxChunkSize <= 0)",
      "info" : "IfStatement[6164-6347]:IfStatement[6164-6347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6187-6347]:Block[6187-6347]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"maxChunkSize must be a positive integer: \" +\n                    maxChunkSize);",
      "right" : "throw new IllegalArgumentException(\n                    \"maxChunkSize must be a positive integer: \" +\n                    maxChunkSize);",
      "info" : "ThrowStatement[6201-6337]:ThrowStatement[6201-6337]"
    }, {
      "left" : "this.maxChunkSize = maxChunkSize;",
      "right" : "this.maxChunkSize = maxChunkSize;",
      "info" : "ExpressionStatement[6356-6389]:ExpressionStatement[6356-6389]"
    }, {
      "left" : "this.chunkedSupported = chunkedSupported;",
      "right" : "this.chunkedSupported = chunkedSupported;",
      "info" : "ExpressionStatement[6398-6439]:ExpressionStatement[6398-6439]"
    }, {
      "left" : "this.validateHeaders = validateHeaders;",
      "right" : "this.validateHeaders = validateHeaders;",
      "info" : "ExpressionStatement[6448-6487]:ExpressionStatement[6448-6487]"
    }, {
      "left" : "AppendableCharSequence seq = new AppendableCharSequence(128);",
      "right" : "AppendableCharSequence seq = new AppendableCharSequence(128);",
      "info" : "VariableDeclarationStatement[6496-6557]:VariableDeclarationStatement[6496-6557]"
    }, {
      "left" : "lineParser = new LineParser(seq, maxInitialLineLength);",
      "right" : "lineParser = new LineParser(seq, maxInitialLineLength);",
      "info" : "ExpressionStatement[6566-6621]:ExpressionStatement[6566-6621]"
    }, {
      "left" : "headerParser = new HeaderParser(seq, maxHeaderSize);",
      "right" : "headerParser = new HeaderParser(seq, maxHeaderSize);",
      "info" : "ExpressionStatement[6630-6682]:ExpressionStatement[6630-6682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6694-6703]:MarkerAnnotation[6694-6703]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6708-6717]:Modifier[6708-6717]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6718-6722]:PrimitiveType[6718-6722]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[6723-6729]:SimpleName[6723-6729]"
    }, {
      "left" : "ChannelHandlerContext ctx",
      "right" : "ChannelHandlerContext ctx",
      "info" : "SingleVariableDeclaration[6730-6755]:SingleVariableDeclaration[6730-6755]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[6757-6771]:SingleVariableDeclaration[6757-6771]"
    }, {
      "left" : "List<Object> out",
      "right" : "List<Object> out",
      "info" : "SingleVariableDeclaration[6773-6789]:SingleVariableDeclaration[6773-6789]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6798-6807]:SimpleType[6798-6807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6808-14012]:Block[6808-14012]"
    }, {
      "left" : "if (resetRequested)",
      "right" : "if (resetRequested)",
      "info" : "IfStatement[6818-6873]:IfStatement[6818-6873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6838-6873]:Block[6838-6873]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[6852-6863]:ExpressionStatement[6852-6863]"
    }, {
      "left" : "switch (currentState) {\n        case SKIP_CONTROL_CHARS: {\n            if (!skipControlCharacters(buffer)) {\n                return;\n            }\n            currentState = State.READ_INITIAL;\n        }\n        case READ_INITIAL: try {\n            AppendableCharSequence line = lineParser.parse(buffer);\n            if (line == null) {\n                return;\n            }\n            String[] initialLine = splitInitialLine(line);\n            if (initialLine.length < 3) {\n                // Invalid initial line - ignore.\n                currentState = State.SKIP_CONTROL_CHARS;\n                return;\n            }\n\n            message = createMessage(initialLine);\n            currentState = State.READ_HEADER;\n            // fall-through\n        } catch (Exception e) {\n            out.add(invalidMessage(buffer, e));\n            return;\n        }\n        case READ_HEADER: try {\n            State nextState = readHeaders(buffer);\n            if (nextState == null) {\n                return;\n            }\n            currentState = nextState;\n            switch (nextState) {\n            case SKIP_CONTROL_CHARS:\n                // fast-path\n                // No content is expected.\n                out.add(message);\n                out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                resetNow();\n                return;\n            case READ_CHUNK_SIZE:\n                if (!chunkedSupported) {\n                    throw new IllegalArgumentException(\"Chunked messages not supported\");\n                }\n                // Chunked encoding - generate HttpMessage first.  HttpChunks will follow.\n                out.add(message);\n                return;\n            default:\n                long contentLength = contentLength();\n                if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {\n                    out.add(message);\n                    out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                    resetNow();\n                    return;\n                }\n\n                assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;\n\n                out.add(message);\n\n                if (nextState == State.READ_FIXED_LENGTH_CONTENT) {\n                    // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk.\n                    chunkSize = contentLength;\n                }\n\n                // We return here, this forces decode to be called again where we will decode the content\n                return;\n            }\n        } catch (Exception e) {\n            out.add(invalidMessage(buffer, e));\n            return;\n        }\n        case READ_VARIABLE_LENGTH_CONTENT: {\n            // Keep reading data as a chunk until the end of connection is reached.\n            int toRead = Math.min(buffer.readableBytes(), maxChunkSize);\n            if (toRead > 0) {\n                ByteBuf content = buffer.readSlice(toRead).retain();\n                out.add(new DefaultHttpContent(content));\n            }\n            return;\n        }\n        case READ_FIXED_LENGTH_CONTENT: {\n            int readLimit = buffer.readableBytes();\n\n            // Check if the buffer is readable first as we use the readable byte count\n            // to create the HttpChunk. This is needed as otherwise we may end up with\n            // create a HttpChunk instance that contains an empty buffer and so is\n            // handled like it is the last HttpChunk.\n            //\n            // See https://github.com/netty/netty/issues/433\n            if (readLimit == 0) {\n                return;\n            }\n\n            int toRead = Math.min(readLimit, maxChunkSize);\n            if (toRead > chunkSize) {\n                toRead = (int) chunkSize;\n            }\n            ByteBuf content = buffer.readSlice(toRead).retain();\n            chunkSize -= toRead;\n\n            if (chunkSize == 0) {\n                // Read all content.\n                out.add(new DefaultLastHttpContent(content, validateHeaders));\n                resetNow();\n            } else {\n                out.add(new DefaultHttpContent(content));\n            }\n            return;\n        }\n        /**\n         * everything else after this point takes care of reading chunked content. basically, read chunk size,\n         * read chunk, read and ignore the CRLF and repeat until 0\n         */\n        case READ_CHUNK_SIZE: try {\n            AppendableCharSequence line = lineParser.parse(buffer);\n            if (line == null) {\n                return;\n            }\n            int chunkSize = getChunkSize(line.toString());\n            this.chunkSize = chunkSize;\n            if (chunkSize == 0) {\n                currentState = State.READ_CHUNK_FOOTER;\n                return;\n            }\n            currentState = State.READ_CHUNKED_CONTENT;\n            // fall-through\n        } catch (Exception e) {\n            out.add(invalidChunk(buffer, e));\n            return;\n        }\n        case READ_CHUNKED_CONTENT: {\n            assert chunkSize <= Integer.MAX_VALUE;\n            int toRead = Math.min((int) chunkSize, maxChunkSize);\n            toRead = Math.min(toRead, buffer.readableBytes());\n            if (toRead == 0) {\n                return;\n            }\n            HttpContent chunk = new DefaultHttpContent(buffer.readSlice(toRead).retain());\n            chunkSize -= toRead;\n\n            out.add(chunk);\n\n            if (chunkSize != 0) {\n                return;\n            }\n            currentState = State.READ_CHUNK_DELIMITER;\n            // fall-through\n        }\n        case READ_CHUNK_DELIMITER: {\n            final int wIdx = buffer.writerIndex();\n            int rIdx = buffer.readerIndex();\n            while (wIdx > rIdx) {\n                byte next = buffer.getByte(rIdx++);\n                if (next == HttpConstants.LF) {\n                    currentState = State.READ_CHUNK_SIZE;\n                    break;\n                }\n            }\n            buffer.readerIndex(rIdx);\n            return;\n        }\n        case READ_CHUNK_FOOTER: try {\n            LastHttpContent trailer = readTrailingHeaders(buffer);\n            if (trailer == null) {\n                return;\n            }\n            out.add(trailer);\n            resetNow();\n            return;\n        } catch (Exception e) {\n            out.add(invalidChunk(buffer, e));\n            return;\n        }\n        case BAD_MESSAGE: {\n            // Keep discarding until disconnection.\n            buffer.skipBytes(buffer.readableBytes());\n            break;\n        }\n        case UPGRADED: {\n            int readableBytes = buffer.readableBytes();\n            if (readableBytes > 0) {\n                // Keep on consuming as otherwise we may trigger an DecoderException,\n                // other handler will replace this codec with the upgraded protocol codec to\n                // take the traffic over at some point then.\n                // See https://github.com/netty/netty/issues/2173\n                out.add(buffer.readBytes(readableBytes));\n            }\n            break;\n        }\n        }",
      "right" : "switch (currentState) {\n        case SKIP_CONTROL_CHARS: {\n            if (!skipControlCharacters(buffer)) {\n                return;\n            }\n            currentState = State.READ_INITIAL;\n        }\n        case READ_INITIAL: try {\n            AppendableCharSequence line = lineParser.parse(buffer);\n            if (line == null) {\n                return;\n            }\n            String[] initialLine = splitInitialLine(line);\n            if (initialLine.length < 3) {\n                // Invalid initial line - ignore.\n                currentState = State.SKIP_CONTROL_CHARS;\n                return;\n            }\n\n            message = createMessage(initialLine);\n            currentState = State.READ_HEADER;\n            // fall-through\n        } catch (Exception e) {\n            out.add(invalidMessage(buffer, e));\n            return;\n        }\n        case READ_HEADER: try {\n            State nextState = readHeaders(buffer);\n            if (nextState == null) {\n                return;\n            }\n            currentState = nextState;\n            switch (nextState) {\n            case SKIP_CONTROL_CHARS:\n                // fast-path\n                // No content is expected.\n                out.add(message);\n                out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                resetNow();\n                return;\n            case READ_CHUNK_SIZE:\n                if (!chunkedSupported) {\n                    throw new IllegalArgumentException(\"Chunked messages not supported\");\n                }\n                // Chunked encoding - generate HttpMessage first.  HttpChunks will follow.\n                out.add(message);\n                return;\n            default:\n                long contentLength = contentLength();\n                if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {\n                    out.add(message);\n                    out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                    resetNow();\n                    return;\n                }\n\n                assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;\n\n                out.add(message);\n\n                if (nextState == State.READ_FIXED_LENGTH_CONTENT) {\n                    // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk.\n                    chunkSize = contentLength;\n                }\n\n                // We return here, this forces decode to be called again where we will decode the content\n                return;\n            }\n        } catch (Exception e) {\n            out.add(invalidMessage(buffer, e));\n            return;\n        }\n        case READ_VARIABLE_LENGTH_CONTENT: {\n            // Keep reading data as a chunk until the end of connection is reached.\n            int toRead = Math.min(buffer.readableBytes(), maxChunkSize);\n            if (toRead > 0) {\n                ByteBuf content = buffer.readSlice(toRead).retain();\n                out.add(new DefaultHttpContent(content));\n            }\n            return;\n        }\n        case READ_FIXED_LENGTH_CONTENT: {\n            int readLimit = buffer.readableBytes();\n\n            // Check if the buffer is readable first as we use the readable byte count\n            // to create the HttpChunk. This is needed as otherwise we may end up with\n            // create a HttpChunk instance that contains an empty buffer and so is\n            // handled like it is the last HttpChunk.\n            //\n            // See https://github.com/netty/netty/issues/433\n            if (readLimit == 0) {\n                return;\n            }\n\n            int toRead = Math.min(readLimit, maxChunkSize);\n            if (toRead > chunkSize) {\n                toRead = (int) chunkSize;\n            }\n            ByteBuf content = buffer.readSlice(toRead).retain();\n            chunkSize -= toRead;\n\n            if (chunkSize == 0) {\n                // Read all content.\n                out.add(new DefaultLastHttpContent(content, validateHeaders));\n                resetNow();\n            } else {\n                out.add(new DefaultHttpContent(content));\n            }\n            return;\n        }\n        /**\n         * everything else after this point takes care of reading chunked content. basically, read chunk size,\n         * read chunk, read and ignore the CRLF and repeat until 0\n         */\n        case READ_CHUNK_SIZE: try {\n            AppendableCharSequence line = lineParser.parse(buffer);\n            if (line == null) {\n                return;\n            }\n            int chunkSize = getChunkSize(line.toString());\n            this.chunkSize = chunkSize;\n            if (chunkSize == 0) {\n                currentState = State.READ_CHUNK_FOOTER;\n                return;\n            }\n            currentState = State.READ_CHUNKED_CONTENT;\n            // fall-through\n        } catch (Exception e) {\n            out.add(invalidChunk(buffer, e));\n            return;\n        }\n        case READ_CHUNKED_CONTENT: {\n            assert chunkSize <= Integer.MAX_VALUE;\n            int toRead = Math.min((int) chunkSize, maxChunkSize);\n            toRead = Math.min(toRead, buffer.readableBytes());\n            if (toRead == 0) {\n                return;\n            }\n            HttpContent chunk = new DefaultHttpContent(buffer.readSlice(toRead).retain());\n            chunkSize -= toRead;\n\n            out.add(chunk);\n\n            if (chunkSize != 0) {\n                return;\n            }\n            currentState = State.READ_CHUNK_DELIMITER;\n            // fall-through\n        }\n        case READ_CHUNK_DELIMITER: {\n            final int wIdx = buffer.writerIndex();\n            int rIdx = buffer.readerIndex();\n            while (wIdx > rIdx) {\n                byte next = buffer.getByte(rIdx++);\n                if (next == HttpConstants.LF) {\n                    currentState = State.READ_CHUNK_SIZE;\n                    break;\n                }\n            }\n            buffer.readerIndex(rIdx);\n            return;\n        }\n        case READ_CHUNK_FOOTER: try {\n            LastHttpContent trailer = readTrailingHeaders(buffer);\n            if (trailer == null) {\n                return;\n            }\n            out.add(trailer);\n            resetNow();\n            return;\n        } catch (Exception e) {\n            out.add(invalidChunk(buffer, e));\n            return;\n        }\n        case BAD_MESSAGE: {\n            // Keep discarding until disconnection.\n            buffer.skipBytes(buffer.readableBytes());\n            break;\n        }\n        case UPGRADED: {\n            int readableBytes = buffer.readableBytes();\n            if (readableBytes > 0) {\n                // Keep on consuming as otherwise we may trigger an DecoderException,\n                // other handler will replace this codec with the upgraded protocol codec to\n                // take the traffic over at some point then.\n                // See https://github.com/netty/netty/issues/2173\n                out.add(buffer.readBytes(readableBytes));\n            }\n            break;\n        }\n        }",
      "info" : "SwitchStatement[6883-14006]:SwitchStatement[6883-14006]"
    }, {
      "left" : "case SKIP_CONTROL_CHARS:",
      "right" : "case SKIP_CONTROL_CHARS:",
      "info" : "SwitchCase[6915-6939]:SwitchCase[6915-6939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6940-7086]:Block[6940-7086]"
    }, {
      "left" : "if (!skipControlCharacters(buffer))",
      "right" : "if (!skipControlCharacters(buffer))",
      "info" : "IfStatement[6954-7029]:IfStatement[6954-7029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6990-7029]:Block[6990-7029]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7008-7015]:ReturnStatement[7008-7015]"
    }, {
      "left" : "currentState = State.READ_INITIAL;",
      "right" : "currentState = State.READ_INITIAL;",
      "info" : "ExpressionStatement[7042-7076]:ExpressionStatement[7042-7076]"
    }, {
      "left" : "case READ_INITIAL:",
      "right" : "case READ_INITIAL:",
      "info" : "SwitchCase[7095-7113]:SwitchCase[7095-7113]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7114-7738]:TryStatement[7114-7738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7118-7638]:Block[7118-7638]"
    }, {
      "left" : "AppendableCharSequence line = lineParser.parse(buffer);",
      "right" : "AppendableCharSequence line = lineParser.parse(buffer);",
      "info" : "VariableDeclarationStatement[7132-7187]:VariableDeclarationStatement[7132-7187]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[7200-7257]:IfStatement[7200-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7218-7257]:Block[7218-7257]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7236-7243]:ReturnStatement[7236-7243]"
    }, {
      "left" : "String[] initialLine = splitInitialLine(line);",
      "right" : "String[] initialLine = splitInitialLine(line);",
      "info" : "VariableDeclarationStatement[7270-7316]:VariableDeclarationStatement[7270-7316]"
    }, {
      "left" : "if (initialLine.length < 3)",
      "right" : "if (initialLine.length < 3)",
      "info" : "IfStatement[7329-7503]:IfStatement[7329-7503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7357-7503]:Block[7357-7503]"
    }, {
      "left" : "currentState = State.SKIP_CONTROL_CHARS;",
      "right" : "currentState = State.SKIP_CONTROL_CHARS;",
      "info" : "ExpressionStatement[7425-7465]:ExpressionStatement[7425-7465]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7482-7489]:ReturnStatement[7482-7489]"
    }, {
      "left" : "message = createMessage(initialLine);",
      "right" : "message = createMessage(initialLine);",
      "info" : "ExpressionStatement[7517-7554]:ExpressionStatement[7517-7554]"
    }, {
      "left" : "currentState = State.READ_HEADER;",
      "right" : "currentState = State.READ_HEADER;",
      "info" : "ExpressionStatement[7567-7600]:ExpressionStatement[7567-7600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7659-7738]:Block[7659-7738]"
    }, {
      "left" : "out.add(invalidMessage(buffer, e));",
      "right" : "out.add(invalidMessage(buffer, e));",
      "info" : "ExpressionStatement[7673-7708]:ExpressionStatement[7673-7708]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7721-7728]:ReturnStatement[7721-7728]"
    }, {
      "left" : "case READ_HEADER:",
      "right" : "case READ_HEADER:",
      "info" : "SwitchCase[7747-7764]:SwitchCase[7747-7764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7765-9585]:TryStatement[7765-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7769-9485]:Block[7769-9485]"
    }, {
      "left" : "State nextState = readHeaders(buffer);",
      "right" : "State nextState = readHeaders(buffer);",
      "info" : "VariableDeclarationStatement[7783-7821]:VariableDeclarationStatement[7783-7821]"
    }, {
      "left" : "if (nextState == null)",
      "right" : "if (nextState == null)",
      "info" : "IfStatement[7834-7896]:IfStatement[7834-7896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7857-7896]:Block[7857-7896]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7875-7882]:ReturnStatement[7875-7882]"
    }, {
      "left" : "currentState = nextState;",
      "right" : "currentState = nextState;",
      "info" : "ExpressionStatement[7909-7934]:ExpressionStatement[7909-7934]"
    }, {
      "left" : "switch (nextState) {\n            case SKIP_CONTROL_CHARS:\n                // fast-path\n                // No content is expected.\n                out.add(message);\n                out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                resetNow();\n                return;\n            case READ_CHUNK_SIZE:\n                if (!chunkedSupported) {\n                    throw new IllegalArgumentException(\"Chunked messages not supported\");\n                }\n                // Chunked encoding - generate HttpMessage first.  HttpChunks will follow.\n                out.add(message);\n                return;\n            default:\n                long contentLength = contentLength();\n                if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {\n                    out.add(message);\n                    out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                    resetNow();\n                    return;\n                }\n\n                assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;\n\n                out.add(message);\n\n                if (nextState == State.READ_FIXED_LENGTH_CONTENT) {\n                    // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk.\n                    chunkSize = contentLength;\n                }\n\n                // We return here, this forces decode to be called again where we will decode the content\n                return;\n            }",
      "right" : "switch (nextState) {\n            case SKIP_CONTROL_CHARS:\n                // fast-path\n                // No content is expected.\n                out.add(message);\n                out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                resetNow();\n                return;\n            case READ_CHUNK_SIZE:\n                if (!chunkedSupported) {\n                    throw new IllegalArgumentException(\"Chunked messages not supported\");\n                }\n                // Chunked encoding - generate HttpMessage first.  HttpChunks will follow.\n                out.add(message);\n                return;\n            default:\n                long contentLength = contentLength();\n                if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {\n                    out.add(message);\n                    out.add(LastHttpContent.EMPTY_LAST_CONTENT);\n                    resetNow();\n                    return;\n                }\n\n                assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;\n\n                out.add(message);\n\n                if (nextState == State.READ_FIXED_LENGTH_CONTENT) {\n                    // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk.\n                    chunkSize = contentLength;\n                }\n\n                // We return here, this forces decode to be called again where we will decode the content\n                return;\n            }",
      "info" : "SwitchStatement[7947-9475]:SwitchStatement[7947-9475]"
    }, {
      "left" : "case SKIP_CONTROL_CHARS:",
      "right" : "case SKIP_CONTROL_CHARS:",
      "info" : "SwitchCase[7980-8004]:SwitchCase[7980-8004]"
    }, {
      "left" : "out.add(message);",
      "right" : "out.add(message);",
      "info" : "ExpressionStatement[8093-8110]:ExpressionStatement[8093-8110]"
    }, {
      "left" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "right" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "info" : "ExpressionStatement[8127-8171]:ExpressionStatement[8127-8171]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[8188-8199]:ExpressionStatement[8188-8199]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8216-8223]:ReturnStatement[8216-8223]"
    }, {
      "left" : "case READ_CHUNK_SIZE:",
      "right" : "case READ_CHUNK_SIZE:",
      "info" : "SwitchCase[8236-8257]:SwitchCase[8236-8257]"
    }, {
      "left" : "if (!chunkedSupported)",
      "right" : "if (!chunkedSupported)",
      "info" : "IfStatement[8274-8406]:IfStatement[8274-8406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8297-8406]:Block[8297-8406]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Chunked messages not supported\");",
      "right" : "throw new IllegalArgumentException(\"Chunked messages not supported\");",
      "info" : "ThrowStatement[8319-8388]:ThrowStatement[8319-8388]"
    }, {
      "left" : "out.add(message);",
      "right" : "out.add(message);",
      "info" : "ExpressionStatement[8514-8531]:ExpressionStatement[8514-8531]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8548-8555]:ReturnStatement[8548-8555]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8568-8576]:SwitchCase[8568-8576]"
    }, {
      "left" : "long contentLength = contentLength();",
      "right" : "long contentLength = contentLength();",
      "info" : "VariableDeclarationStatement[8593-8630]:VariableDeclarationStatement[8593-8630]"
    }, {
      "left" : "if (contentLength == 0 || contentLength == -1 && isDecodingRequest())",
      "right" : "if (contentLength == 0 || contentLength == -1 && isDecodingRequest())",
      "info" : "IfStatement[8647-8899]:IfStatement[8647-8899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8717-8899]:Block[8717-8899]"
    }, {
      "left" : "out.add(message);",
      "right" : "out.add(message);",
      "info" : "ExpressionStatement[8739-8756]:ExpressionStatement[8739-8756]"
    }, {
      "left" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "right" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "info" : "ExpressionStatement[8777-8821]:ExpressionStatement[8777-8821]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[8842-8853]:ExpressionStatement[8842-8853]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8874-8881]:ReturnStatement[8874-8881]"
    }, {
      "left" : "assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
      "right" : "assert nextState == State.READ_FIXED_LENGTH_CONTENT ||\n                        nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
      "info" : "AssertStatement[8917-9044]:AssertStatement[8917-9044]"
    }, {
      "left" : "out.add(message);",
      "right" : "out.add(message);",
      "info" : "ExpressionStatement[9062-9079]:ExpressionStatement[9062-9079]"
    }, {
      "left" : "if (nextState == State.READ_FIXED_LENGTH_CONTENT)",
      "right" : "if (nextState == State.READ_FIXED_LENGTH_CONTENT)",
      "info" : "IfStatement[9097-9330]:IfStatement[9097-9330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9330]:Block[9147-9330]"
    }, {
      "left" : "chunkSize = contentLength;",
      "right" : "chunkSize = contentLength;",
      "info" : "ExpressionStatement[9286-9312]:ExpressionStatement[9286-9312]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9454-9461]:ReturnStatement[9454-9461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9506-9585]:Block[9506-9585]"
    }, {
      "left" : "out.add(invalidMessage(buffer, e));",
      "right" : "out.add(invalidMessage(buffer, e));",
      "info" : "ExpressionStatement[9520-9555]:ExpressionStatement[9520-9555]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9568-9575]:ReturnStatement[9568-9575]"
    }, {
      "left" : "case READ_VARIABLE_LENGTH_CONTENT:",
      "right" : "case READ_VARIABLE_LENGTH_CONTENT:",
      "info" : "SwitchCase[9594-9628]:SwitchCase[9594-9628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9629-9988]:Block[9629-9988]"
    }, {
      "left" : "int toRead = Math.min(buffer.readableBytes(), maxChunkSize);",
      "right" : "int toRead = Math.min(buffer.readableBytes(), maxChunkSize);",
      "info" : "VariableDeclarationStatement[9727-9787]:VariableDeclarationStatement[9727-9787]"
    }, {
      "left" : "if (toRead > 0)",
      "right" : "if (toRead > 0)",
      "info" : "IfStatement[9800-9958]:IfStatement[9800-9958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9816-9958]:Block[9816-9958]"
    }, {
      "left" : "ByteBuf content = buffer.readSlice(toRead).retain();",
      "right" : "ByteBuf content = buffer.readSlice(toRead).retain();",
      "info" : "VariableDeclarationStatement[9834-9886]:VariableDeclarationStatement[9834-9886]"
    }, {
      "left" : "out.add(new DefaultHttpContent(content));",
      "right" : "out.add(new DefaultHttpContent(content));",
      "info" : "ExpressionStatement[9903-9944]:ExpressionStatement[9903-9944]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9971-9978]:ReturnStatement[9971-9978]"
    }, {
      "left" : "case READ_FIXED_LENGTH_CONTENT:",
      "right" : "case READ_FIXED_LENGTH_CONTENT:",
      "info" : "SwitchCase[9997-10028]:SwitchCase[9997-10028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10029-11097]:Block[10029-11097]"
    }, {
      "left" : "int readLimit = buffer.readableBytes();",
      "right" : "int readLimit = buffer.readableBytes();",
      "info" : "VariableDeclarationStatement[10043-10082]:VariableDeclarationStatement[10043-10082]"
    }, {
      "left" : "if (readLimit == 0)",
      "right" : "if (readLimit == 0)",
      "info" : "IfStatement[10483-10542]:IfStatement[10483-10542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10503-10542]:Block[10503-10542]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10521-10528]:ReturnStatement[10521-10528]"
    }, {
      "left" : "int toRead = Math.min(readLimit, maxChunkSize);",
      "right" : "int toRead = Math.min(readLimit, maxChunkSize);",
      "info" : "VariableDeclarationStatement[10556-10603]:VariableDeclarationStatement[10556-10603]"
    }, {
      "left" : "if (toRead > chunkSize)",
      "right" : "if (toRead > chunkSize)",
      "info" : "IfStatement[10616-10697]:IfStatement[10616-10697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10640-10697]:Block[10640-10697]"
    }, {
      "left" : "toRead = (int) chunkSize;",
      "right" : "toRead = (int) chunkSize;",
      "info" : "ExpressionStatement[10658-10683]:ExpressionStatement[10658-10683]"
    }, {
      "left" : "ByteBuf content = buffer.readSlice(toRead).retain();",
      "right" : "ByteBuf content = buffer.readSlice(toRead).retain();",
      "info" : "VariableDeclarationStatement[10710-10762]:VariableDeclarationStatement[10710-10762]"
    }, {
      "left" : "chunkSize -= toRead;",
      "right" : "chunkSize -= toRead;",
      "info" : "ExpressionStatement[10775-10795]:ExpressionStatement[10775-10795]"
    }, {
      "left" : "if (chunkSize == 0)",
      "right" : "if (chunkSize == 0)",
      "info" : "IfStatement[10809-11067]:IfStatement[10809-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10829-10988]:Block[10829-10988]"
    }, {
      "left" : "out.add(new DefaultLastHttpContent(content, validateHeaders));",
      "right" : "out.add(new DefaultLastHttpContent(content, validateHeaders));",
      "info" : "ExpressionStatement[10884-10946]:ExpressionStatement[10884-10946]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[10963-10974]:ExpressionStatement[10963-10974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10994-11067]:Block[10994-11067]"
    }, {
      "left" : "out.add(new DefaultHttpContent(content));",
      "right" : "out.add(new DefaultHttpContent(content));",
      "info" : "ExpressionStatement[11012-11053]:ExpressionStatement[11012-11053]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11080-11087]:ReturnStatement[11080-11087]"
    }, {
      "left" : "case READ_CHUNK_SIZE:",
      "right" : "case READ_CHUNK_SIZE:",
      "info" : "SwitchCase[11308-11329]:SwitchCase[11308-11329]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11330-11891]:TryStatement[11330-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11334-11793]:Block[11334-11793]"
    }, {
      "left" : "AppendableCharSequence line = lineParser.parse(buffer);",
      "right" : "AppendableCharSequence line = lineParser.parse(buffer);",
      "info" : "VariableDeclarationStatement[11348-11403]:VariableDeclarationStatement[11348-11403]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[11416-11473]:IfStatement[11416-11473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11434-11473]:Block[11434-11473]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11452-11459]:ReturnStatement[11452-11459]"
    }, {
      "left" : "int chunkSize = getChunkSize(line.toString());",
      "right" : "int chunkSize = getChunkSize(line.toString());",
      "info" : "VariableDeclarationStatement[11486-11532]:VariableDeclarationStatement[11486-11532]"
    }, {
      "left" : "this.chunkSize = chunkSize;",
      "right" : "this.chunkSize = chunkSize;",
      "info" : "ExpressionStatement[11545-11572]:ExpressionStatement[11545-11572]"
    }, {
      "left" : "if (chunkSize == 0)",
      "right" : "if (chunkSize == 0)",
      "info" : "IfStatement[11585-11700]:IfStatement[11585-11700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11605-11700]:Block[11605-11700]"
    }, {
      "left" : "currentState = State.READ_CHUNK_FOOTER;",
      "right" : "currentState = State.READ_CHUNK_FOOTER;",
      "info" : "ExpressionStatement[11623-11662]:ExpressionStatement[11623-11662]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11679-11686]:ReturnStatement[11679-11686]"
    }, {
      "left" : "currentState = State.READ_CHUNKED_CONTENT;",
      "right" : "currentState = State.READ_CHUNKED_CONTENT;",
      "info" : "ExpressionStatement[11713-11755]:ExpressionStatement[11713-11755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11814-11891]:Block[11814-11891]"
    }, {
      "left" : "out.add(invalidChunk(buffer, e));",
      "right" : "out.add(invalidChunk(buffer, e));",
      "info" : "ExpressionStatement[11828-11861]:ExpressionStatement[11828-11861]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11874-11881]:ReturnStatement[11874-11881]"
    }, {
      "left" : "case READ_CHUNKED_CONTENT:",
      "right" : "case READ_CHUNKED_CONTENT:",
      "info" : "SwitchCase[11900-11926]:SwitchCase[11900-11926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11927-12496]:Block[11927-12496]"
    }, {
      "left" : "assert chunkSize <= Integer.MAX_VALUE;",
      "right" : "assert chunkSize <= Integer.MAX_VALUE;",
      "info" : "AssertStatement[11941-11979]:AssertStatement[11941-11979]"
    }, {
      "left" : "int toRead = Math.min((int) chunkSize, maxChunkSize);",
      "right" : "int toRead = Math.min((int) chunkSize, maxChunkSize);",
      "info" : "VariableDeclarationStatement[11992-12045]:VariableDeclarationStatement[11992-12045]"
    }, {
      "left" : "toRead = Math.min(toRead, buffer.readableBytes());",
      "right" : "toRead = Math.min(toRead, buffer.readableBytes());",
      "info" : "ExpressionStatement[12058-12108]:ExpressionStatement[12058-12108]"
    }, {
      "left" : "if (toRead == 0)",
      "right" : "if (toRead == 0)",
      "info" : "IfStatement[12121-12177]:IfStatement[12121-12177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12138-12177]:Block[12138-12177]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12156-12163]:ReturnStatement[12156-12163]"
    }, {
      "left" : "HttpContent chunk = new DefaultHttpContent(buffer.readSlice(toRead).retain());",
      "right" : "HttpContent chunk = new DefaultHttpContent(buffer.readSlice(toRead).retain());",
      "info" : "VariableDeclarationStatement[12190-12268]:VariableDeclarationStatement[12190-12268]"
    }, {
      "left" : "chunkSize -= toRead;",
      "right" : "chunkSize -= toRead;",
      "info" : "ExpressionStatement[12281-12301]:ExpressionStatement[12281-12301]"
    }, {
      "left" : "out.add(chunk);",
      "right" : "out.add(chunk);",
      "info" : "ExpressionStatement[12315-12330]:ExpressionStatement[12315-12330]"
    }, {
      "left" : "if (chunkSize != 0)",
      "right" : "if (chunkSize != 0)",
      "info" : "IfStatement[12344-12403]:IfStatement[12344-12403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12364-12403]:Block[12364-12403]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12382-12389]:ReturnStatement[12382-12389]"
    }, {
      "left" : "currentState = State.READ_CHUNK_DELIMITER;",
      "right" : "currentState = State.READ_CHUNK_DELIMITER;",
      "info" : "ExpressionStatement[12416-12458]:ExpressionStatement[12416-12458]"
    }, {
      "left" : "case READ_CHUNK_DELIMITER:",
      "right" : "case READ_CHUNK_DELIMITER:",
      "info" : "SwitchCase[12505-12531]:SwitchCase[12505-12531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12532-12948]:Block[12532-12948]"
    }, {
      "left" : "final int wIdx = buffer.writerIndex();",
      "right" : "final int wIdx = buffer.writerIndex();",
      "info" : "VariableDeclarationStatement[12546-12584]:VariableDeclarationStatement[12546-12584]"
    }, {
      "left" : "int rIdx = buffer.readerIndex();",
      "right" : "int rIdx = buffer.readerIndex();",
      "info" : "VariableDeclarationStatement[12597-12629]:VariableDeclarationStatement[12597-12629]"
    }, {
      "left" : "while (wIdx > rIdx)",
      "right" : "while (wIdx > rIdx)",
      "info" : "WhileStatement[12642-12880]:WhileStatement[12642-12880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12662-12880]:Block[12662-12880]"
    }, {
      "left" : "byte next = buffer.getByte(rIdx++);",
      "right" : "byte next = buffer.getByte(rIdx++);",
      "info" : "VariableDeclarationStatement[12680-12715]:VariableDeclarationStatement[12680-12715]"
    }, {
      "left" : "if (next == HttpConstants.LF)",
      "right" : "if (next == HttpConstants.LF)",
      "info" : "IfStatement[12732-12866]:IfStatement[12732-12866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12762-12866]:Block[12762-12866]"
    }, {
      "left" : "currentState = State.READ_CHUNK_SIZE;",
      "right" : "currentState = State.READ_CHUNK_SIZE;",
      "info" : "ExpressionStatement[12784-12821]:ExpressionStatement[12784-12821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12842-12848]:BreakStatement[12842-12848]"
    }, {
      "left" : "buffer.readerIndex(rIdx);",
      "right" : "buffer.readerIndex(rIdx);",
      "info" : "ExpressionStatement[12893-12918]:ExpressionStatement[12893-12918]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12931-12938]:ReturnStatement[12931-12938]"
    }, {
      "left" : "case READ_CHUNK_FOOTER:",
      "right" : "case READ_CHUNK_FOOTER:",
      "info" : "SwitchCase[12957-12980]:SwitchCase[12957-12980]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12981-13308]:TryStatement[12981-13308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12985-13210]:Block[12985-13210]"
    }, {
      "left" : "LastHttpContent trailer = readTrailingHeaders(buffer);",
      "right" : "LastHttpContent trailer = readTrailingHeaders(buffer);",
      "info" : "VariableDeclarationStatement[12999-13053]:VariableDeclarationStatement[12999-13053]"
    }, {
      "left" : "if (trailer == null)",
      "right" : "if (trailer == null)",
      "info" : "IfStatement[13066-13126]:IfStatement[13066-13126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13087-13126]:Block[13087-13126]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13105-13112]:ReturnStatement[13105-13112]"
    }, {
      "left" : "out.add(trailer);",
      "right" : "out.add(trailer);",
      "info" : "ExpressionStatement[13139-13156]:ExpressionStatement[13139-13156]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[13169-13180]:ExpressionStatement[13169-13180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13193-13200]:ReturnStatement[13193-13200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13231-13308]:Block[13231-13308]"
    }, {
      "left" : "out.add(invalidChunk(buffer, e));",
      "right" : "out.add(invalidChunk(buffer, e));",
      "info" : "ExpressionStatement[13245-13278]:ExpressionStatement[13245-13278]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13291-13298]:ReturnStatement[13291-13298]"
    }, {
      "left" : "case BAD_MESSAGE:",
      "right" : "case BAD_MESSAGE:",
      "info" : "SwitchCase[13317-13334]:SwitchCase[13317-13334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13335-13471]:Block[13335-13471]"
    }, {
      "left" : "buffer.skipBytes(buffer.readableBytes());",
      "right" : "buffer.skipBytes(buffer.readableBytes());",
      "info" : "ExpressionStatement[13401-13442]:ExpressionStatement[13401-13442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13455-13461]:BreakStatement[13455-13461]"
    }, {
      "left" : "case UPGRADED:",
      "right" : "case UPGRADED:",
      "info" : "SwitchCase[13480-13494]:SwitchCase[13480-13494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13495-13996]:Block[13495-13996]"
    }, {
      "left" : "int readableBytes = buffer.readableBytes();",
      "right" : "int readableBytes = buffer.readableBytes();",
      "info" : "VariableDeclarationStatement[13509-13552]:VariableDeclarationStatement[13509-13552]"
    }, {
      "left" : "if (readableBytes > 0)",
      "right" : "if (readableBytes > 0)",
      "info" : "IfStatement[13565-13967]:IfStatement[13565-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13588-13967]:Block[13588-13967]"
    }, {
      "left" : "out.add(buffer.readBytes(readableBytes));",
      "right" : "out.add(buffer.readBytes(readableBytes));",
      "info" : "ExpressionStatement[13912-13953]:ExpressionStatement[13912-13953]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13980-13986]:BreakStatement[13980-13986]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14018-14027]:MarkerAnnotation[14018-14027]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14032-14041]:Modifier[14032-14041]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14042-14046]:PrimitiveType[14042-14046]"
    }, {
      "left" : "decodeLast",
      "right" : "decodeLast",
      "info" : "SimpleName[14047-14057]:SimpleName[14047-14057]"
    }, {
      "left" : "ChannelHandlerContext ctx",
      "right" : "ChannelHandlerContext ctx",
      "info" : "SingleVariableDeclaration[14058-14083]:SingleVariableDeclaration[14058-14083]"
    }, {
      "left" : "ByteBuf in",
      "right" : "ByteBuf in",
      "info" : "SingleVariableDeclaration[14085-14095]:SingleVariableDeclaration[14085-14095]"
    }, {
      "left" : "List<Object> out",
      "right" : "List<Object> out",
      "info" : "SingleVariableDeclaration[14097-14113]:SingleVariableDeclaration[14097-14113]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14122-14131]:SimpleType[14122-14131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14132-15383]:Block[14132-15383]"
    }, {
      "left" : "decode(ctx, in, out);",
      "right" : "decode(ctx, in, out);",
      "info" : "ExpressionStatement[14142-14163]:ExpressionStatement[14142-14163]"
    }, {
      "left" : "if (message != null)",
      "right" : "if (message != null)",
      "info" : "IfStatement[14220-15377]:IfStatement[14220-15377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14241-15377]:Block[14241-15377]"
    }, {
      "left" : "boolean chunked = HttpHeaderUtil.isTransferEncodingChunked(message);",
      "right" : "boolean chunked = HttpHeaderUtil.isTransferEncodingChunked(message);",
      "info" : "VariableDeclarationStatement[14255-14323]:VariableDeclarationStatement[14255-14323]"
    }, {
      "left" : "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked)",
      "right" : "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked)",
      "info" : "IfStatement[14336-14587]:IfStatement[14336-14587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14424-14587]:Block[14424-14587]"
    }, {
      "left" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "right" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "info" : "ExpressionStatement[14480-14524]:ExpressionStatement[14480-14524]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[14541-14549]:ExpressionStatement[14541-14549]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14566-14573]:ReturnStatement[14566-14573]"
    }, {
      "left" : "boolean prematureClosure;",
      "right" : "boolean prematureClosure;",
      "info" : "VariableDeclarationStatement[14688-14713]:VariableDeclarationStatement[14688-14713]"
    }, {
      "left" : "if (isDecodingRequest() || chunked)",
      "right" : "if (isDecodingRequest() || chunked)",
      "info" : "IfStatement[14726-15230]:IfStatement[14726-15230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-14883]:Block[14762-14883]"
    }, {
      "left" : "prematureClosure = true;",
      "right" : "prematureClosure = true;",
      "info" : "ExpressionStatement[14845-14869]:ExpressionStatement[14845-14869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14889-15230]:Block[14889-15230]"
    }, {
      "left" : "prematureClosure = contentLength() > 0;",
      "right" : "prematureClosure = contentLength() > 0;",
      "info" : "ExpressionStatement[15177-15216]:ExpressionStatement[15177-15216]"
    }, {
      "left" : "resetNow();",
      "right" : "resetNow();",
      "info" : "ExpressionStatement[15243-15254]:ExpressionStatement[15243-15254]"
    }, {
      "left" : "if (!prematureClosure)",
      "right" : "if (!prematureClosure)",
      "info" : "IfStatement[15268-15367]:IfStatement[15268-15367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15291-15367]:Block[15291-15367]"
    }, {
      "left" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "right" : "out.add(LastHttpContent.EMPTY_LAST_CONTENT);",
      "info" : "ExpressionStatement[15309-15353]:ExpressionStatement[15309-15353]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15389-15398]:Modifier[15389-15398]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15399-15406]:PrimitiveType[15399-15406]"
    }, {
      "left" : "isContentAlwaysEmpty",
      "right" : "isContentAlwaysEmpty",
      "info" : "SimpleName[15407-15427]:SimpleName[15407-15427]"
    }, {
      "left" : "HttpMessage msg",
      "right" : "HttpMessage msg",
      "info" : "SingleVariableDeclaration[15428-15443]:SingleVariableDeclaration[15428-15443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15445-16210]:Block[15445-16210]"
    }, {
      "left" : "if (msg instanceof HttpResponse)",
      "right" : "if (msg instanceof HttpResponse)",
      "info" : "IfStatement[15455-16182]:IfStatement[15455-16182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15488-16182]:Block[15488-16182]"
    }, {
      "left" : "HttpResponse res = (HttpResponse) msg;",
      "right" : "HttpResponse res = (HttpResponse) msg;",
      "info" : "VariableDeclarationStatement[15502-15540]:VariableDeclarationStatement[15502-15540]"
    }, {
      "left" : "int code = res.status().code();",
      "right" : "int code = res.status().code();",
      "info" : "VariableDeclarationStatement[15553-15584]:VariableDeclarationStatement[15553-15584]"
    }, {
      "left" : "if (code >= 100 && code < 200)",
      "right" : "if (code >= 100 && code < 200)",
      "info" : "IfStatement[15836-16058]:IfStatement[15836-16058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15867-16058]:Block[15867-16058]"
    }, {
      "left" : "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT));",
      "right" : "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT));",
      "info" : "ReturnStatement[15957-16044]:ReturnStatement[15957-16044]"
    }, {
      "left" : "switch (code) {\n            case 204: case 205: case 304:\n                return true;\n            }",
      "right" : "switch (code) {\n            case 204: case 205: case 304:\n                return true;\n            }",
      "info" : "SwitchStatement[16072-16172]:SwitchStatement[16072-16172]"
    }, {
      "left" : "case 204:",
      "right" : "case 204:",
      "info" : "SwitchCase[16100-16109]:SwitchCase[16100-16109]"
    }, {
      "left" : "case 205:",
      "right" : "case 205:",
      "info" : "SwitchCase[16110-16119]:SwitchCase[16110-16119]"
    }, {
      "left" : "case 304:",
      "right" : "case 304:",
      "info" : "SwitchCase[16120-16129]:SwitchCase[16120-16129]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16146-16158]:ReturnStatement[16146-16158]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16191-16204]:ReturnStatement[16191-16204]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16419-16425]:Modifier[16419-16425]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16426-16430]:PrimitiveType[16426-16430]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[16431-16436]:SimpleName[16431-16436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16439-16477]:Block[16439-16477]"
    }, {
      "left" : "resetRequested = true;",
      "right" : "resetRequested = true;",
      "info" : "ExpressionStatement[16449-16471]:ExpressionStatement[16449-16471]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16483-16490]:Modifier[16483-16490]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16491-16495]:PrimitiveType[16491-16495]"
    }, {
      "left" : "resetNow",
      "right" : "resetNow",
      "info" : "SimpleName[16496-16504]:SimpleName[16496-16504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16507-17049]:Block[16507-17049]"
    }, {
      "left" : "HttpMessage message = this.message;",
      "right" : "HttpMessage message = this.message;",
      "info" : "VariableDeclarationStatement[16517-16552]:VariableDeclarationStatement[16517-16552]"
    }, {
      "left" : "this.message = null;",
      "right" : "this.message = null;",
      "info" : "ExpressionStatement[16561-16581]:ExpressionStatement[16561-16581]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[16590-16602]:ExpressionStatement[16590-16602]"
    }, {
      "left" : "value = null;",
      "right" : "value = null;",
      "info" : "ExpressionStatement[16611-16624]:ExpressionStatement[16611-16624]"
    }, {
      "left" : "contentLength = Long.MIN_VALUE;",
      "right" : "contentLength = Long.MIN_VALUE;",
      "info" : "ExpressionStatement[16633-16664]:ExpressionStatement[16633-16664]"
    }, {
      "left" : "lineParser.reset();",
      "right" : "lineParser.reset();",
      "info" : "ExpressionStatement[16673-16692]:ExpressionStatement[16673-16692]"
    }, {
      "left" : "headerParser.reset();",
      "right" : "headerParser.reset();",
      "info" : "ExpressionStatement[16701-16722]:ExpressionStatement[16701-16722]"
    }, {
      "left" : "trailer = null;",
      "right" : "trailer = null;",
      "info" : "ExpressionStatement[16731-16746]:ExpressionStatement[16731-16746]"
    }, {
      "left" : "if (!isDecodingRequest())",
      "right" : "if (!isDecodingRequest())",
      "info" : "IfStatement[16755-16993]:IfStatement[16755-16993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16781-16993]:Block[16781-16993]"
    }, {
      "left" : "HttpResponse res = (HttpResponse) message;",
      "right" : "HttpResponse res = (HttpResponse) message;",
      "info" : "VariableDeclarationStatement[16795-16837]:VariableDeclarationStatement[16795-16837]"
    }, {
      "left" : "if (res != null && res.status().code() == 101)",
      "right" : "if (res != null && res.status().code() == 101)",
      "info" : "IfStatement[16850-16983]:IfStatement[16850-16983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16897-16983]:Block[16897-16983]"
    }, {
      "left" : "currentState = State.UPGRADED;",
      "right" : "currentState = State.UPGRADED;",
      "info" : "ExpressionStatement[16915-16945]:ExpressionStatement[16915-16945]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16962-16969]:ReturnStatement[16962-16969]"
    }, {
      "left" : "currentState = State.SKIP_CONTROL_CHARS;",
      "right" : "currentState = State.SKIP_CONTROL_CHARS;",
      "info" : "ExpressionStatement[17003-17043]:ExpressionStatement[17003-17043]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17055-17062]:Modifier[17055-17062]"
    }, {
      "left" : "HttpMessage",
      "right" : "HttpMessage",
      "info" : "SimpleType[17063-17074]:SimpleType[17063-17074]"
    }, {
      "left" : "invalidMessage",
      "right" : "invalidMessage",
      "info" : "SimpleName[17075-17089]:SimpleName[17075-17089]"
    }, {
      "left" : "ByteBuf in",
      "right" : "ByteBuf in",
      "info" : "SingleVariableDeclaration[17090-17100]:SingleVariableDeclaration[17090-17100]"
    }, {
      "left" : "Exception cause",
      "right" : "Exception cause",
      "info" : "SingleVariableDeclaration[17102-17117]:SingleVariableDeclaration[17102-17117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17119-17689]:Block[17119-17689]"
    }, {
      "left" : "currentState = State.BAD_MESSAGE;",
      "right" : "currentState = State.BAD_MESSAGE;",
      "info" : "ExpressionStatement[17129-17162]:ExpressionStatement[17129-17162]"
    }, {
      "left" : "in.skipBytes(in.readableBytes());",
      "right" : "in.skipBytes(in.readableBytes());",
      "info" : "ExpressionStatement[17329-17362]:ExpressionStatement[17329-17362]"
    }, {
      "left" : "if (message != null)",
      "right" : "if (message != null)",
      "info" : "IfStatement[17372-17603]:IfStatement[17372-17603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17393-17472]:Block[17393-17472]"
    }, {
      "left" : "message.setDecoderResult(DecoderResult.failure(cause));",
      "right" : "message.setDecoderResult(DecoderResult.failure(cause));",
      "info" : "ExpressionStatement[17407-17462]:ExpressionStatement[17407-17462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17478-17603]:Block[17478-17603]"
    }, {
      "left" : "message = createInvalidMessage();",
      "right" : "message = createInvalidMessage();",
      "info" : "ExpressionStatement[17492-17525]:ExpressionStatement[17492-17525]"
    }, {
      "left" : "message.setDecoderResult(DecoderResult.failure(cause));",
      "right" : "message.setDecoderResult(DecoderResult.failure(cause));",
      "info" : "ExpressionStatement[17538-17593]:ExpressionStatement[17538-17593]"
    }, {
      "left" : "HttpMessage ret = message;",
      "right" : "HttpMessage ret = message;",
      "info" : "VariableDeclarationStatement[17613-17639]:VariableDeclarationStatement[17613-17639]"
    }, {
      "left" : "message = null;",
      "right" : "message = null;",
      "info" : "ExpressionStatement[17648-17663]:ExpressionStatement[17648-17663]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[17672-17683]:ReturnStatement[17672-17683]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17695-17702]:Modifier[17695-17702]"
    }, {
      "left" : "HttpContent",
      "right" : "HttpContent",
      "info" : "SimpleType[17703-17714]:SimpleType[17703-17714]"
    }, {
      "left" : "invalidChunk",
      "right" : "invalidChunk",
      "info" : "SimpleName[17715-17727]:SimpleName[17715-17727]"
    }, {
      "left" : "ByteBuf in",
      "right" : "ByteBuf in",
      "info" : "SingleVariableDeclaration[17728-17738]:SingleVariableDeclaration[17728-17738]"
    }, {
      "left" : "Exception cause",
      "right" : "Exception cause",
      "info" : "SingleVariableDeclaration[17740-17755]:SingleVariableDeclaration[17740-17755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17757-18218]:Block[17757-18218]"
    }, {
      "left" : "currentState = State.BAD_MESSAGE;",
      "right" : "currentState = State.BAD_MESSAGE;",
      "info" : "ExpressionStatement[17767-17800]:ExpressionStatement[17767-17800]"
    }, {
      "left" : "in.skipBytes(in.readableBytes());",
      "right" : "in.skipBytes(in.readableBytes());",
      "info" : "ExpressionStatement[17967-18000]:ExpressionStatement[17967-18000]"
    }, {
      "left" : "HttpContent chunk = new DefaultLastHttpContent(Unpooled.EMPTY_BUFFER);",
      "right" : "HttpContent chunk = new DefaultLastHttpContent(Unpooled.EMPTY_BUFFER);",
      "info" : "VariableDeclarationStatement[18010-18080]:VariableDeclarationStatement[18010-18080]"
    }, {
      "left" : "chunk.setDecoderResult(DecoderResult.failure(cause));",
      "right" : "chunk.setDecoderResult(DecoderResult.failure(cause));",
      "info" : "ExpressionStatement[18089-18142]:ExpressionStatement[18089-18142]"
    }, {
      "left" : "message = null;",
      "right" : "message = null;",
      "info" : "ExpressionStatement[18151-18166]:ExpressionStatement[18151-18166]"
    }, {
      "left" : "trailer = null;",
      "right" : "trailer = null;",
      "info" : "ExpressionStatement[18175-18190]:ExpressionStatement[18175-18190]"
    }, {
      "left" : "return chunk;",
      "right" : "return chunk;",
      "info" : "ReturnStatement[18199-18212]:ReturnStatement[18199-18212]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18224-18231]:Modifier[18224-18231]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18232-18238]:Modifier[18232-18238]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18239-18246]:PrimitiveType[18239-18246]"
    }, {
      "left" : "skipControlCharacters",
      "right" : "skipControlCharacters",
      "info" : "SimpleName[18247-18268]:SimpleName[18247-18268]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[18269-18283]:SingleVariableDeclaration[18269-18283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18285-18729]:Block[18285-18729]"
    }, {
      "left" : "boolean skiped = false;",
      "right" : "boolean skiped = false;",
      "info" : "VariableDeclarationStatement[18295-18318]:VariableDeclarationStatement[18295-18318]"
    }, {
      "left" : "final int wIdx = buffer.writerIndex();",
      "right" : "final int wIdx = buffer.writerIndex();",
      "info" : "VariableDeclarationStatement[18327-18365]:VariableDeclarationStatement[18327-18365]"
    }, {
      "left" : "int rIdx = buffer.readerIndex();",
      "right" : "int rIdx = buffer.readerIndex();",
      "info" : "VariableDeclarationStatement[18374-18406]:VariableDeclarationStatement[18374-18406]"
    }, {
      "left" : "while (wIdx > rIdx)",
      "right" : "while (wIdx > rIdx)",
      "info" : "WhileStatement[18415-18666]:WhileStatement[18415-18666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18435-18666]:Block[18435-18666]"
    }, {
      "left" : "int c = buffer.getUnsignedByte(rIdx++);",
      "right" : "int c = buffer.getUnsignedByte(rIdx++);",
      "info" : "VariableDeclarationStatement[18449-18488]:VariableDeclarationStatement[18449-18488]"
    }, {
      "left" : "if (!Character.isISOControl(c) && !Character.isWhitespace(c))",
      "right" : "if (!Character.isISOControl(c) && !Character.isWhitespace(c))",
      "info" : "IfStatement[18501-18656]:IfStatement[18501-18656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18563-18656]:Block[18563-18656]"
    }, {
      "left" : "rIdx--;",
      "right" : "rIdx--;",
      "info" : "ExpressionStatement[18581-18588]:ExpressionStatement[18581-18588]"
    }, {
      "left" : "skiped = true;",
      "right" : "skiped = true;",
      "info" : "ExpressionStatement[18605-18619]:ExpressionStatement[18605-18619]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18636-18642]:BreakStatement[18636-18642]"
    }, {
      "left" : "buffer.readerIndex(rIdx);",
      "right" : "buffer.readerIndex(rIdx);",
      "info" : "ExpressionStatement[18675-18700]:ExpressionStatement[18675-18700]"
    }, {
      "left" : "return skiped;",
      "right" : "return skiped;",
      "info" : "ReturnStatement[18709-18723]:ReturnStatement[18709-18723]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18735-18742]:Modifier[18735-18742]"
    }, {
      "left" : "State",
      "right" : "State",
      "info" : "SimpleType[18743-18748]:SimpleType[18743-18748]"
    }, {
      "left" : "readHeaders",
      "right" : "readHeaders",
      "info" : "SimpleName[18749-18760]:SimpleName[18749-18760]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[18761-18775]:SingleVariableDeclaration[18761-18775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18777-20566]:Block[18777-20566]"
    }, {
      "left" : "final HttpMessage message = this.message;",
      "right" : "final HttpMessage message = this.message;",
      "info" : "VariableDeclarationStatement[18787-18828]:VariableDeclarationStatement[18787-18828]"
    }, {
      "left" : "final HttpHeaders headers = message.headers();",
      "right" : "final HttpHeaders headers = message.headers();",
      "info" : "VariableDeclarationStatement[18837-18883]:VariableDeclarationStatement[18837-18883]"
    }, {
      "left" : "AppendableCharSequence line = headerParser.parse(buffer);",
      "right" : "AppendableCharSequence line = headerParser.parse(buffer);",
      "info" : "VariableDeclarationStatement[18893-18950]:VariableDeclarationStatement[18893-18950]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[18959-19013]:IfStatement[18959-19013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18977-19013]:Block[18977-19013]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18991-19003]:ReturnStatement[18991-19003]"
    }, {
      "left" : "if (line.length() > 0)",
      "right" : "if (line.length() > 0)",
      "info" : "IfStatement[19022-19844]:IfStatement[19022-19844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19045-19844]:Block[19045-19844]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[19059-19834]:DoStatement[19059-19834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19062-19807]:Block[19062-19807]"
    }, {
      "left" : "char firstChar = line.charAt(0);",
      "right" : "char firstChar = line.charAt(0);",
      "info" : "VariableDeclarationStatement[19080-19112]:VariableDeclarationStatement[19080-19112]"
    }, {
      "left" : "if (name != null && (firstChar == ' ' || firstChar == '\\t'))",
      "right" : "if (name != null && (firstChar == ' ' || firstChar == '\\t'))",
      "info" : "IfStatement[19129-19654]:IfStatement[19129-19654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19190-19478]:Block[19190-19478]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(value.length() + line.length() + 1);",
      "right" : "StringBuilder buf = new StringBuilder(value.length() + line.length() + 1);",
      "info" : "VariableDeclarationStatement[19212-19286]:VariableDeclarationStatement[19212-19286]"
    }, {
      "left" : "buf.append(value)\n                       .append(' ')\n                       .append(line.toString().trim());",
      "right" : "buf.append(value)\n                       .append(' ')\n                       .append(line.toString().trim());",
      "info" : "ExpressionStatement[19307-19416]:ExpressionStatement[19307-19416]"
    }, {
      "left" : "value = buf.toString();",
      "right" : "value = buf.toString();",
      "info" : "ExpressionStatement[19437-19460]:ExpressionStatement[19437-19460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19484-19654]:Block[19484-19654]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[19506-19597]:IfStatement[19506-19597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19524-19597]:Block[19524-19597]"
    }, {
      "left" : "headers.add(name, value);",
      "right" : "headers.add(name, value);",
      "info" : "ExpressionStatement[19550-19575]:ExpressionStatement[19550-19575]"
    }, {
      "left" : "splitHeader(line);",
      "right" : "splitHeader(line);",
      "info" : "ExpressionStatement[19618-19636]:ExpressionStatement[19618-19636]"
    }, {
      "left" : "line = headerParser.parse(buffer);",
      "right" : "line = headerParser.parse(buffer);",
      "info" : "ExpressionStatement[19672-19706]:ExpressionStatement[19672-19706]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[19723-19793]:IfStatement[19723-19793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19741-19793]:Block[19741-19793]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19763-19775]:ReturnStatement[19763-19775]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[19886-19953]:IfStatement[19886-19953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19904-19953]:Block[19904-19953]"
    }, {
      "left" : "headers.add(name, value);",
      "right" : "headers.add(name, value);",
      "info" : "ExpressionStatement[19918-19943]:ExpressionStatement[19918-19943]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[20001-20013]:ExpressionStatement[20001-20013]"
    }, {
      "left" : "value = null;",
      "right" : "value = null;",
      "info" : "ExpressionStatement[20022-20035]:ExpressionStatement[20022-20035]"
    }, {
      "left" : "State nextState;",
      "right" : "State nextState;",
      "info" : "VariableDeclarationStatement[20045-20061]:VariableDeclarationStatement[20045-20061]"
    }, {
      "left" : "if (isContentAlwaysEmpty(message))",
      "right" : "if (isContentAlwaysEmpty(message))",
      "info" : "IfStatement[20071-20534]:IfStatement[20071-20534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20106-20238]:Block[20106-20238]"
    }, {
      "left" : "HttpHeaderUtil.setTransferEncodingChunked(message, false);",
      "right" : "HttpHeaderUtil.setTransferEncodingChunked(message, false);",
      "info" : "ExpressionStatement[20120-20178]:ExpressionStatement[20120-20178]"
    }, {
      "left" : "nextState = State.SKIP_CONTROL_CHARS;",
      "right" : "nextState = State.SKIP_CONTROL_CHARS;",
      "info" : "ExpressionStatement[20191-20228]:ExpressionStatement[20191-20228]"
    }, {
      "left" : "if (HttpHeaderUtil.isTransferEncodingChunked(message))",
      "right" : "if (HttpHeaderUtil.isTransferEncodingChunked(message))",
      "info" : "IfStatement[20244-20534]:IfStatement[20244-20534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20299-20357]:Block[20299-20357]"
    }, {
      "left" : "nextState = State.READ_CHUNK_SIZE;",
      "right" : "nextState = State.READ_CHUNK_SIZE;",
      "info" : "ExpressionStatement[20313-20347]:ExpressionStatement[20313-20347]"
    }, {
      "left" : "if (contentLength() >= 0)",
      "right" : "if (contentLength() >= 0)",
      "info" : "IfStatement[20363-20534]:IfStatement[20363-20534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20389-20457]:Block[20389-20457]"
    }, {
      "left" : "nextState = State.READ_FIXED_LENGTH_CONTENT;",
      "right" : "nextState = State.READ_FIXED_LENGTH_CONTENT;",
      "info" : "ExpressionStatement[20403-20447]:ExpressionStatement[20403-20447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20463-20534]:Block[20463-20534]"
    }, {
      "left" : "nextState = State.READ_VARIABLE_LENGTH_CONTENT;",
      "right" : "nextState = State.READ_VARIABLE_LENGTH_CONTENT;",
      "info" : "ExpressionStatement[20477-20524]:ExpressionStatement[20477-20524]"
    }, {
      "left" : "return nextState;",
      "right" : "return nextState;",
      "info" : "ReturnStatement[20543-20560]:ReturnStatement[20543-20560]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20572-20579]:Modifier[20572-20579]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[20580-20584]:PrimitiveType[20580-20584]"
    }, {
      "left" : "contentLength",
      "right" : "contentLength",
      "info" : "SimpleName[20585-20598]:SimpleName[20585-20598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20601-20769]:Block[20601-20769]"
    }, {
      "left" : "if (contentLength == Long.MIN_VALUE)",
      "right" : "if (contentLength == Long.MIN_VALUE)",
      "info" : "IfStatement[20611-20733]:IfStatement[20611-20733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20648-20733]:Block[20648-20733]"
    }, {
      "left" : "contentLength = HttpHeaderUtil.getContentLength(message, -1);",
      "right" : "contentLength = HttpHeaderUtil.getContentLength(message, -1);",
      "info" : "ExpressionStatement[20662-20723]:ExpressionStatement[20662-20723]"
    }, {
      "left" : "return contentLength;",
      "right" : "return contentLength;",
      "info" : "ReturnStatement[20742-20763]:ReturnStatement[20742-20763]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20775-20782]:Modifier[20775-20782]"
    }, {
      "left" : "LastHttpContent",
      "right" : "LastHttpContent",
      "info" : "SimpleType[20783-20798]:SimpleType[20783-20798]"
    }, {
      "left" : "readTrailingHeaders",
      "right" : "readTrailingHeaders",
      "info" : "SimpleName[20799-20818]:SimpleName[20799-20818]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[20819-20833]:SingleVariableDeclaration[20819-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20835-23089]:Block[20835-23089]"
    }, {
      "left" : "AppendableCharSequence line = headerParser.parse(buffer);",
      "right" : "AppendableCharSequence line = headerParser.parse(buffer);",
      "info" : "VariableDeclarationStatement[20845-20902]:VariableDeclarationStatement[20845-20902]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[20911-20965]:IfStatement[20911-20965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20929-20965]:Block[20929-20965]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20943-20955]:ReturnStatement[20943-20955]"
    }, {
      "left" : "CharSequence lastHeader = null;",
      "right" : "CharSequence lastHeader = null;",
      "info" : "VariableDeclarationStatement[20974-21005]:VariableDeclarationStatement[20974-21005]"
    }, {
      "left" : "if (line.length() > 0)",
      "right" : "if (line.length() > 0)",
      "info" : "IfStatement[21014-23031]:IfStatement[21014-23031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21037-23031]:Block[21037-23031]"
    }, {
      "left" : "LastHttpContent trailer = this.trailer;",
      "right" : "LastHttpContent trailer = this.trailer;",
      "info" : "VariableDeclarationStatement[21051-21090]:VariableDeclarationStatement[21051-21090]"
    }, {
      "left" : "if (trailer == null)",
      "right" : "if (trailer == null)",
      "info" : "IfStatement[21103-21248]:IfStatement[21103-21248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21124-21248]:Block[21124-21248]"
    }, {
      "left" : "trailer = this.trailer = new DefaultLastHttpContent(Unpooled.EMPTY_BUFFER, validateHeaders);",
      "right" : "trailer = this.trailer = new DefaultLastHttpContent(Unpooled.EMPTY_BUFFER, validateHeaders);",
      "info" : "ExpressionStatement[21142-21234]:ExpressionStatement[21142-21234]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[21261-22959]:DoStatement[21261-22959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21264-22932]:Block[21264-22932]"
    }, {
      "left" : "char firstChar = line.charAt(0);",
      "right" : "char firstChar = line.charAt(0);",
      "info" : "VariableDeclarationStatement[21282-21314]:VariableDeclarationStatement[21282-21314]"
    }, {
      "left" : "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t'))",
      "right" : "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t'))",
      "info" : "IfStatement[21331-22779]:IfStatement[21331-22779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21398-22150]:Block[21398-22150]"
    }, {
      "left" : "List<CharSequence> current = trailer.trailingHeaders().getAll(lastHeader);",
      "right" : "List<CharSequence> current = trailer.trailingHeaders().getAll(lastHeader);",
      "info" : "VariableDeclarationStatement[21420-21494]:VariableDeclarationStatement[21420-21494]"
    }, {
      "left" : "if (!current.isEmpty())",
      "right" : "if (!current.isEmpty())",
      "info" : "IfStatement[21515-22132]:IfStatement[21515-22132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21539-22030]:Block[21539-22030]"
    }, {
      "left" : "int lastPos = current.size() - 1;",
      "right" : "int lastPos = current.size() - 1;",
      "info" : "VariableDeclarationStatement[21565-21598]:VariableDeclarationStatement[21565-21598]"
    }, {
      "left" : "String lineTrimmed = line.toString().trim();",
      "right" : "String lineTrimmed = line.toString().trim();",
      "info" : "VariableDeclarationStatement[21623-21667]:VariableDeclarationStatement[21623-21667]"
    }, {
      "left" : "CharSequence currentLastPos = current.get(lastPos);",
      "right" : "CharSequence currentLastPos = current.get(lastPos);",
      "info" : "VariableDeclarationStatement[21692-21743]:VariableDeclarationStatement[21692-21743]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(currentLastPos.length() + lineTrimmed.length());",
      "right" : "StringBuilder b = new StringBuilder(currentLastPos.length() + lineTrimmed.length());",
      "info" : "VariableDeclarationStatement[21768-21852]:VariableDeclarationStatement[21768-21852]"
    }, {
      "left" : "b.append(currentLastPos)\n                         .append(lineTrimmed);",
      "right" : "b.append(currentLastPos)\n                         .append(lineTrimmed);",
      "info" : "ExpressionStatement[21877-21948]:ExpressionStatement[21877-21948]"
    }, {
      "left" : "current.set(lastPos, b.toString());",
      "right" : "current.set(lastPos, b.toString());",
      "info" : "ExpressionStatement[21973-22008]:ExpressionStatement[21973-22008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22036-22132]:Block[22036-22132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22156-22779]:Block[22156-22779]"
    }, {
      "left" : "splitHeader(line);",
      "right" : "splitHeader(line);",
      "info" : "ExpressionStatement[22178-22196]:ExpressionStatement[22178-22196]"
    }, {
      "left" : "CharSequence headerName = name;",
      "right" : "CharSequence headerName = name;",
      "info" : "VariableDeclarationStatement[22217-22248]:VariableDeclarationStatement[22217-22248]"
    }, {
      "left" : "if (!HttpHeaderNames.CONTENT_LENGTH.equalsIgnoreCase(headerName) &&\n                        !HttpHeaderNames.TRANSFER_ENCODING.equalsIgnoreCase(headerName) &&\n                        !HttpHeaderNames.TRAILER.equalsIgnoreCase(headerName))",
      "right" : "if (!HttpHeaderNames.CONTENT_LENGTH.equalsIgnoreCase(headerName) &&\n                        !HttpHeaderNames.TRANSFER_ENCODING.equalsIgnoreCase(headerName) &&\n                        !HttpHeaderNames.TRAILER.equalsIgnoreCase(headerName))",
      "info" : "IfStatement[22269-22604]:IfStatement[22269-22604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22507-22604]:Block[22507-22604]"
    }, {
      "left" : "trailer.trailingHeaders().add(headerName, value);",
      "right" : "trailer.trailingHeaders().add(headerName, value);",
      "info" : "ExpressionStatement[22533-22582]:ExpressionStatement[22533-22582]"
    }, {
      "left" : "lastHeader = name;",
      "right" : "lastHeader = name;",
      "info" : "ExpressionStatement[22625-22643]:ExpressionStatement[22625-22643]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[22715-22727]:ExpressionStatement[22715-22727]"
    }, {
      "left" : "value = null;",
      "right" : "value = null;",
      "info" : "ExpressionStatement[22748-22761]:ExpressionStatement[22748-22761]"
    }, {
      "left" : "line = headerParser.parse(buffer);",
      "right" : "line = headerParser.parse(buffer);",
      "info" : "ExpressionStatement[22797-22831]:ExpressionStatement[22797-22831]"
    }, {
      "left" : "if (line == null)",
      "right" : "if (line == null)",
      "info" : "IfStatement[22848-22918]:IfStatement[22848-22918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22866-22918]:Block[22866-22918]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22888-22900]:ReturnStatement[22888-22900]"
    }, {
      "left" : "this.trailer = null;",
      "right" : "this.trailer = null;",
      "info" : "ExpressionStatement[22973-22993]:ExpressionStatement[22973-22993]"
    }, {
      "left" : "return trailer;",
      "right" : "return trailer;",
      "info" : "ReturnStatement[23006-23021]:ReturnStatement[23006-23021]"
    }, {
      "left" : "return LastHttpContent.EMPTY_LAST_CONTENT;",
      "right" : "return LastHttpContent.EMPTY_LAST_CONTENT;",
      "info" : "ReturnStatement[23041-23083]:ReturnStatement[23041-23083]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23095-23104]:Modifier[23095-23104]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[23105-23113]:Modifier[23105-23113]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23114-23121]:PrimitiveType[23114-23121]"
    }, {
      "left" : "isDecodingRequest",
      "right" : "isDecodingRequest",
      "info" : "SimpleName[23122-23139]:SimpleName[23122-23139]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23147-23156]:Modifier[23147-23156]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[23157-23165]:Modifier[23157-23165]"
    }, {
      "left" : "HttpMessage",
      "right" : "HttpMessage",
      "info" : "SimpleType[23166-23177]:SimpleType[23166-23177]"
    }, {
      "left" : "createMessage",
      "right" : "createMessage",
      "info" : "SimpleName[23178-23191]:SimpleName[23178-23191]"
    }, {
      "left" : "String[] initialLine",
      "right" : "String[] initialLine",
      "info" : "SingleVariableDeclaration[23192-23212]:SingleVariableDeclaration[23192-23212]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[23221-23230]:SimpleType[23221-23230]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23236-23245]:Modifier[23236-23245]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[23246-23254]:Modifier[23246-23254]"
    }, {
      "left" : "HttpMessage",
      "right" : "HttpMessage",
      "info" : "SimpleType[23255-23266]:SimpleType[23255-23266]"
    }, {
      "left" : "createInvalidMessage",
      "right" : "createInvalidMessage",
      "info" : "SimpleName[23267-23287]:SimpleName[23267-23287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23296-23303]:Modifier[23296-23303]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23304-23310]:Modifier[23304-23310]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23311-23314]:PrimitiveType[23311-23314]"
    }, {
      "left" : "getChunkSize",
      "right" : "getChunkSize",
      "info" : "SimpleName[23315-23327]:SimpleName[23315-23327]"
    }, {
      "left" : "String hex",
      "right" : "String hex",
      "info" : "SingleVariableDeclaration[23328-23338]:SingleVariableDeclaration[23328-23338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23340-23678]:Block[23340-23678]"
    }, {
      "left" : "hex = hex.trim();",
      "right" : "hex = hex.trim();",
      "info" : "ExpressionStatement[23350-23367]:ExpressionStatement[23350-23367]"
    }, {
      "left" : "for (int i = 0; i < hex.length(); i ++)",
      "right" : "for (int i = 0; i < hex.length(); i ++)",
      "info" : "ForStatement[23376-23629]:ForStatement[23376-23629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23416-23629]:Block[23416-23629]"
    }, {
      "left" : "char c = hex.charAt(i);",
      "right" : "char c = hex.charAt(i);",
      "info" : "VariableDeclarationStatement[23430-23453]:VariableDeclarationStatement[23430-23453]"
    }, {
      "left" : "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c))",
      "right" : "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c))",
      "info" : "IfStatement[23466-23619]:IfStatement[23466-23619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23538-23619]:Block[23538-23619]"
    }, {
      "left" : "hex = hex.substring(0, i);",
      "right" : "hex = hex.substring(0, i);",
      "info" : "ExpressionStatement[23556-23582]:ExpressionStatement[23556-23582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23599-23605]:BreakStatement[23599-23605]"
    }, {
      "left" : "return Integer.parseInt(hex, 16);",
      "right" : "return Integer.parseInt(hex, 16);",
      "info" : "ReturnStatement[23639-23672]:ReturnStatement[23639-23672]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23684-23691]:Modifier[23684-23691]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23692-23698]:Modifier[23692-23698]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[23699-23707]:ArrayType[23699-23707]"
    }, {
      "left" : "splitInitialLine",
      "right" : "splitInitialLine",
      "info" : "SimpleName[23708-23724]:SimpleName[23708-23724]"
    }, {
      "left" : "AppendableCharSequence sb",
      "right" : "AppendableCharSequence sb",
      "info" : "SingleVariableDeclaration[23725-23750]:SingleVariableDeclaration[23725-23750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23752-24318]:Block[23752-24336]"
    }, {
      "left" : "int aStart;",
      "right" : "int aStart;",
      "info" : "VariableDeclarationStatement[23762-23773]:VariableDeclarationStatement[23762-23773]"
    }, {
      "left" : "int aEnd;",
      "right" : "int aEnd;",
      "info" : "VariableDeclarationStatement[23782-23791]:VariableDeclarationStatement[23782-23791]"
    }, {
      "left" : "int bStart;",
      "right" : "int bStart;",
      "info" : "VariableDeclarationStatement[23800-23811]:VariableDeclarationStatement[23800-23811]"
    }, {
      "left" : "int bEnd;",
      "right" : "int bEnd;",
      "info" : "VariableDeclarationStatement[23820-23829]:VariableDeclarationStatement[23820-23829]"
    }, {
      "left" : "int cStart;",
      "right" : "int cStart;",
      "info" : "VariableDeclarationStatement[23838-23849]:VariableDeclarationStatement[23838-23849]"
    }, {
      "left" : "int cEnd;",
      "right" : "int cEnd;",
      "info" : "VariableDeclarationStatement[23858-23867]:VariableDeclarationStatement[23858-23867]"
    }, {
      "left" : "aStart = findNonWhitespace(sb, 0);",
      "right" : "aStart = findNonWhitespace(sb, 0);",
      "info" : "ExpressionStatement[23877-23911]:ExpressionStatement[23877-23911]"
    }, {
      "left" : "aEnd = findWhitespace(sb, aStart);",
      "right" : "aEnd = findWhitespace(sb, aStart);",
      "info" : "ExpressionStatement[23920-23954]:ExpressionStatement[23920-23954]"
    }, {
      "left" : "bStart = findNonWhitespace(sb, aEnd);",
      "right" : "bStart = findNonWhitespace(sb, aEnd);",
      "info" : "ExpressionStatement[23964-24001]:ExpressionStatement[23964-24001]"
    }, {
      "left" : "bEnd = findWhitespace(sb, bStart);",
      "right" : "bEnd = findWhitespace(sb, bStart);",
      "info" : "ExpressionStatement[24010-24044]:ExpressionStatement[24010-24044]"
    }, {
      "left" : "cStart = findNonWhitespace(sb, bEnd);",
      "right" : "cStart = findNonWhitespace(sb, bEnd);",
      "info" : "ExpressionStatement[24054-24091]:ExpressionStatement[24054-24091]"
    }, {
      "left" : "cEnd = findEndOfString(sb);",
      "right" : "cEnd = findEndOfString(sb);",
      "info" : "ExpressionStatement[24100-24127]:ExpressionStatement[24100-24127]"
    }, {
      "left" : "return new String[] {\n                sb.substring(aStart, aEnd),\n                sb.substring(bStart, bEnd),\n                cStart < cEnd? sb.substring(cStart, cEnd) : \"\" };",
      "right" : "return new String[] {\n                sb.subStringUnsafe(aStart, aEnd),\n                sb.subStringUnsafe(bStart, bEnd),\n                cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
      "info" : "ReturnStatement[24137-24312]:ReturnStatement[24137-24330]"
    }, {
      "left" : "substring",
      "right" : "subStringUnsafe",
      "info" : "SimpleName[24178-24187]:SimpleName[24178-24193]"
    }, {
      "left" : "substring",
      "right" : "subStringUnsafe",
      "info" : "SimpleName[24222-24231]:SimpleName[24228-24243]"
    }, {
      "left" : "substring",
      "right" : "subStringUnsafe",
      "info" : "SimpleName[24281-24290]:SimpleName[24293-24308]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24324-24331]:Modifier[24342-24349]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24332-24336]:PrimitiveType[24350-24354]"
    }, {
      "left" : "splitHeader",
      "right" : "splitHeader",
      "info" : "SimpleName[24337-24348]:SimpleName[24355-24366]"
    }, {
      "left" : "AppendableCharSequence sb",
      "right" : "AppendableCharSequence sb",
      "info" : "SingleVariableDeclaration[24349-24374]:SingleVariableDeclaration[24367-24392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24376-25286]:Block[24394-25316]"
    }, {
      "left" : "final int length = sb.length();",
      "right" : "final int length = sb.length();",
      "info" : "VariableDeclarationStatement[24386-24417]:VariableDeclarationStatement[24404-24435]"
    }, {
      "left" : "int nameStart;",
      "right" : "int nameStart;",
      "info" : "VariableDeclarationStatement[24426-24440]:VariableDeclarationStatement[24444-24458]"
    }, {
      "left" : "int nameEnd;",
      "right" : "int nameEnd;",
      "info" : "VariableDeclarationStatement[24449-24461]:VariableDeclarationStatement[24467-24479]"
    }, {
      "left" : "int colonEnd;",
      "right" : "int colonEnd;",
      "info" : "VariableDeclarationStatement[24470-24483]:VariableDeclarationStatement[24488-24501]"
    }, {
      "left" : "int valueStart;",
      "right" : "int valueStart;",
      "info" : "VariableDeclarationStatement[24492-24507]:VariableDeclarationStatement[24510-24525]"
    }, {
      "left" : "int valueEnd;",
      "right" : "int valueEnd;",
      "info" : "VariableDeclarationStatement[24516-24529]:VariableDeclarationStatement[24534-24547]"
    }, {
      "left" : "nameStart = findNonWhitespace(sb, 0);",
      "right" : "nameStart = findNonWhitespace(sb, 0);",
      "info" : "ExpressionStatement[24539-24576]:ExpressionStatement[24557-24594]"
    }, {
      "left" : "for (nameEnd = nameStart; nameEnd < length; nameEnd ++)",
      "right" : "for (nameEnd = nameStart; nameEnd < length; nameEnd ++)",
      "info" : "ForStatement[24585-24790]:ForStatement[24603-24808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24641-24790]:Block[24659-24808]"
    }, {
      "left" : "char ch = sb.charAt(nameEnd);",
      "right" : "char ch = sb.charAt(nameEnd);",
      "info" : "VariableDeclarationStatement[24655-24684]:VariableDeclarationStatement[24673-24702]"
    }, {
      "left" : "if (ch == ':' || Character.isWhitespace(ch))",
      "right" : "if (ch == ':' || Character.isWhitespace(ch))",
      "info" : "IfStatement[24697-24780]:IfStatement[24715-24798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24742-24780]:Block[24760-24798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24760-24766]:BreakStatement[24778-24784]"
    }, {
      "left" : "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++)",
      "right" : "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++)",
      "info" : "ForStatement[24800-24980]:ForStatement[24818-24998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24857-24980]:Block[24875-24998]"
    }, {
      "left" : "if (sb.charAt(colonEnd) == ':')",
      "right" : "if (sb.charAt(colonEnd) == ':')",
      "info" : "IfStatement[24871-24970]:IfStatement[24889-24988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24903-24970]:Block[24921-24988]"
    }, {
      "left" : "colonEnd ++;",
      "right" : "colonEnd ++;",
      "info" : "ExpressionStatement[24921-24933]:ExpressionStatement[24939-24951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24950-24956]:BreakStatement[24968-24974]"
    }, {
      "left" : "name = sb.substring(nameStart, nameEnd);",
      "right" : "name = sb.subStringUnsafe(nameStart, nameEnd);",
      "info" : "ExpressionStatement[24990-25030]:ExpressionStatement[25008-25054]"
    }, {
      "left" : "substring",
      "right" : "subStringUnsafe",
      "info" : "SimpleName[25000-25009]:SimpleName[25018-25033]"
    }, {
      "left" : "valueStart = findNonWhitespace(sb, colonEnd);",
      "right" : "valueStart = findNonWhitespace(sb, colonEnd);",
      "info" : "ExpressionStatement[25039-25084]:ExpressionStatement[25063-25108]"
    }, {
      "left" : "if (valueStart == length)",
      "right" : "if (valueStart == length)",
      "info" : "IfStatement[25093-25280]:IfStatement[25117-25310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25119-25163]:Block[25143-25187]"
    }, {
      "left" : "value = EMPTY_VALUE;",
      "right" : "value = EMPTY_VALUE;",
      "info" : "ExpressionStatement[25133-25153]:ExpressionStatement[25157-25177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25169-25280]:Block[25193-25310]"
    }, {
      "left" : "valueEnd = findEndOfString(sb);",
      "right" : "valueEnd = findEndOfString(sb);",
      "info" : "ExpressionStatement[25183-25214]:ExpressionStatement[25207-25238]"
    }, {
      "left" : "value = sb.substring(valueStart, valueEnd);",
      "right" : "value = sb.subStringUnsafe(valueStart, valueEnd);",
      "info" : "ExpressionStatement[25227-25270]:ExpressionStatement[25251-25300]"
    }, {
      "left" : "substring",
      "right" : "subStringUnsafe",
      "info" : "SimpleName[25238-25247]:SimpleName[25262-25277]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25292-25299]:Modifier[25322-25329]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25300-25306]:Modifier[25330-25336]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25307-25310]:PrimitiveType[25337-25340]"
    }, {
      "left" : "findNonWhitespace",
      "right" : "findNonWhitespace",
      "info" : "SimpleName[25311-25328]:SimpleName[25341-25358]"
    }, {
      "left" : "CharSequence",
      "right" : "AppendableCharSequence",
      "info" : "SimpleName[25329-25341]:SimpleName[25359-25381]"
    }, {
      "left" : "CharSequence sb",
      "right" : "AppendableCharSequence sb",
      "info" : "SingleVariableDeclaration[25329-25344]:SingleVariableDeclaration[25359-25384]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[25346-25356]:SingleVariableDeclaration[25386-25396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25358-25582]:Block[25398-25624]"
    }, {
      "left" : "result < sb.length()",
      "right" : "result < sb.length()",
      "info" : "InfixExpression[25410-25430]:InfixExpression[25434-25454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25443-25553]:Block[25466-25590]"
    }, {
      "left" : "if (!Character.isWhitespace(sb.charAt(result)))",
      "right" : "if (!Character.isWhitespace(sb.charAtUnsafe(result)))",
      "info" : "IfStatement[25457-25543]:IfStatement[25480-25580]"
    }, {
      "left" : "charAt",
      "right" : "charAtUnsafe",
      "info" : "SimpleName[25488-25494]:SimpleName[25511-25523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25505-25543]:Block[25534-25580]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25562-25576]:ReturnStatement[25552-25566]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25588-25595]:Modifier[25630-25637]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25596-25602]:Modifier[25638-25644]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25603-25606]:PrimitiveType[25645-25648]"
    }, {
      "left" : "findWhitespace",
      "right" : "findWhitespace",
      "info" : "SimpleName[25607-25621]:SimpleName[25649-25663]"
    }, {
      "left" : "CharSequence",
      "right" : "AppendableCharSequence",
      "info" : "SimpleName[25622-25634]:SimpleName[25664-25686]"
    }, {
      "left" : "CharSequence sb",
      "right" : "AppendableCharSequence sb",
      "info" : "SingleVariableDeclaration[25622-25637]:SingleVariableDeclaration[25664-25689]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[25639-25649]:SingleVariableDeclaration[25691-25701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25651-25874]:Block[25703-25928]"
    }, {
      "left" : "result < sb.length()",
      "right" : "result < sb.length()",
      "info" : "InfixExpression[25703-25723]:InfixExpression[25739-25759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25736-25845]:Block[25771-25894]"
    }, {
      "left" : "if (Character.isWhitespace(sb.charAt(result)))",
      "right" : "if (Character.isWhitespace(sb.charAtUnsafe(result)))",
      "info" : "IfStatement[25750-25835]:IfStatement[25785-25884]"
    }, {
      "left" : "charAt",
      "right" : "charAtUnsafe",
      "info" : "SimpleName[25780-25786]:SimpleName[25815-25827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25797-25835]:Block[25838-25884]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25854-25868]:ReturnStatement[25856-25870]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25880-25887]:Modifier[25934-25941]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25888-25894]:Modifier[25942-25948]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25895-25898]:PrimitiveType[25949-25952]"
    }, {
      "left" : "findEndOfString",
      "right" : "findEndOfString",
      "info" : "SimpleName[25899-25914]:SimpleName[25953-25968]"
    }, {
      "left" : "CharSequence",
      "right" : "AppendableCharSequence",
      "info" : "SimpleName[25915-25927]:SimpleName[25969-25991]"
    }, {
      "left" : "CharSequence sb",
      "right" : "AppendableCharSequence sb",
      "info" : "SingleVariableDeclaration[25915-25930]:SingleVariableDeclaration[25969-25994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25932-26155]:Block[25996-26215]"
    }, {
      "left" : "sb.length()",
      "right" : "sb.length()",
      "info" : "MethodInvocation[25976-25987]:MethodInvocation[26024-26035]"
    }, {
      "left" : "result > 0",
      "right" : "result > 0",
      "info" : "InfixExpression[25989-25999]:InfixExpression[26041-26051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26012-26126]:Block[26063-26191]"
    }, {
      "left" : "if (!Character.isWhitespace(sb.charAt(result - 1)))",
      "right" : "if (!Character.isWhitespace(sb.charAtUnsafe(result)))",
      "info" : "IfStatement[26026-26116]:IfStatement[26077-26181]"
    }, {
      "left" : "charAt",
      "right" : "charAtUnsafe",
      "info" : "SimpleName[26057-26063]:SimpleName[26108-26120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26078-26116]:Block[26131-26181]"
    }, {
      "left" : "return result;",
      "right" : "return 0;",
      "info" : "ReturnStatement[26135-26149]:ReturnStatement[26200-26209]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26161-26168]:Modifier[26221-26228]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26169-26175]:Modifier[26229-26235]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[26176-26181]:TYPE_DECLARATION_KIND[26236-26241]"
    }, {
      "left" : "HeaderParser",
      "right" : "HeaderParser",
      "info" : "SimpleName[26182-26194]:SimpleName[26242-26254]"
    }, {
      "left" : "ByteProcessor",
      "right" : "ByteProcessor",
      "info" : "SimpleType[26206-26219]:SimpleType[26266-26279]"
    }, {
      "left" : "HeaderParser",
      "right" : "HeaderParser",
      "info" : "SimpleName[26344-26356]:SimpleName[26404-26416]"
    }, {
      "left" : "AppendableCharSequence seq",
      "right" : "AppendableCharSequence seq",
      "info" : "SingleVariableDeclaration[26357-26383]:SingleVariableDeclaration[26417-26443]"
    }, {
      "left" : "int maxLength",
      "right" : "int maxLength",
      "info" : "SingleVariableDeclaration[26385-26398]:SingleVariableDeclaration[26445-26458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26400-26479]:Block[26460-26539]"
    }, {
      "left" : "this.seq = seq;",
      "right" : "this.seq = seq;",
      "info" : "ExpressionStatement[26414-26429]:ExpressionStatement[26474-26489]"
    }, {
      "left" : "this.maxLength = maxLength;",
      "right" : "this.maxLength = maxLength;",
      "info" : "ExpressionStatement[26442-26469]:ExpressionStatement[26502-26529]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26489-26495]:Modifier[26549-26555]"
    }, {
      "left" : "AppendableCharSequence",
      "right" : "AppendableCharSequence",
      "info" : "SimpleType[26496-26518]:SimpleType[26556-26578]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[26519-26524]:SimpleName[26579-26584]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[26525-26539]:SingleVariableDeclaration[26585-26599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26541-26826]:Block[26601-26886]"
    }, {
      "left" : "final int oldSize = size;",
      "right" : "final int oldSize = size;",
      "info" : "VariableDeclarationStatement[26555-26580]:VariableDeclarationStatement[26615-26640]"
    }, {
      "left" : "seq.reset();",
      "right" : "seq.reset();",
      "info" : "ExpressionStatement[26593-26605]:ExpressionStatement[26653-26665]"
    }, {
      "left" : "int i = buffer.forEachByte(this);",
      "right" : "int i = buffer.forEachByte(this);",
      "info" : "VariableDeclarationStatement[26618-26651]:VariableDeclarationStatement[26678-26711]"
    }, {
      "left" : "if (i == -1)",
      "right" : "if (i == -1)",
      "info" : "IfStatement[26664-26753]:IfStatement[26724-26813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26677-26753]:Block[26737-26813]"
    }, {
      "left" : "size = oldSize;",
      "right" : "size = oldSize;",
      "info" : "ExpressionStatement[26695-26710]:ExpressionStatement[26755-26770]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26727-26739]:ReturnStatement[26787-26799]"
    }, {
      "left" : "buffer.readerIndex(i + 1);",
      "right" : "buffer.readerIndex(i + 1);",
      "info" : "ExpressionStatement[26766-26792]:ExpressionStatement[26826-26852]"
    }, {
      "left" : "return seq;",
      "right" : "return seq;",
      "info" : "ReturnStatement[26805-26816]:ReturnStatement[26865-26876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26836-26842]:Modifier[26896-26902]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26843-26847]:PrimitiveType[26903-26907]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[26848-26853]:SimpleName[26908-26913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26856-26889]:Block[26916-26949]"
    }, {
      "left" : "size = 0;",
      "right" : "size = 0;",
      "info" : "ExpressionStatement[26870-26879]:ExpressionStatement[26930-26939]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26899-26908]:MarkerAnnotation[26959-26968]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26917-26923]:Modifier[26977-26983]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26924-26931]:PrimitiveType[26984-26991]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[26932-26939]:SimpleName[26992-26999]"
    }, {
      "left" : "byte value",
      "right" : "byte value",
      "info" : "SingleVariableDeclaration[26940-26950]:SingleVariableDeclaration[27000-27010]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[26959-26968]:SimpleType[27019-27028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26969-27638]:Block[27029-27698]"
    }, {
      "left" : "char nextByte = (char) value;",
      "right" : "char nextByte = (char) value;",
      "info" : "VariableDeclarationStatement[26983-27012]:VariableDeclarationStatement[27043-27072]"
    }, {
      "left" : "if (nextByte == HttpConstants.CR)",
      "right" : "if (nextByte == HttpConstants.CR)",
      "info" : "IfStatement[27025-27103]:IfStatement[27085-27163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27059-27103]:Block[27119-27163]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27077-27089]:ReturnStatement[27137-27149]"
    }, {
      "left" : "if (nextByte == HttpConstants.LF)",
      "right" : "if (nextByte == HttpConstants.LF)",
      "info" : "IfStatement[27116-27195]:IfStatement[27176-27255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27150-27195]:Block[27210-27255]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27168-27181]:ReturnStatement[27228-27241]"
    }, {
      "left" : "if (++ size > maxLength)",
      "right" : "if (++ size > maxLength)",
      "info" : "IfStatement[27209-27568]:IfStatement[27269-27628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27234-27568]:Block[27294-27628]"
    }, {
      "left" : "throw newException(maxLength);",
      "right" : "throw newException(maxLength);",
      "info" : "ThrowStatement[27524-27554]:ThrowStatement[27584-27614]"
    }, {
      "left" : "seq.append(nextByte);",
      "right" : "seq.append(nextByte);",
      "info" : "ExpressionStatement[27582-27603]:ExpressionStatement[27642-27663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27616-27628]:ReturnStatement[27676-27688]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[27648-27657]:Modifier[27708-27717]"
    }, {
      "left" : "TooLongFrameException",
      "right" : "TooLongFrameException",
      "info" : "SimpleType[27658-27679]:SimpleType[27718-27739]"
    }, {
      "left" : "newException",
      "right" : "newException",
      "info" : "SimpleName[27680-27692]:SimpleName[27740-27752]"
    }, {
      "left" : "int maxLength",
      "right" : "int maxLength",
      "info" : "SingleVariableDeclaration[27693-27706]:SingleVariableDeclaration[27753-27766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27708-27820]:Block[27768-27880]"
    }, {
      "left" : "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
      "right" : "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
      "info" : "ReturnStatement[27722-27810]:ReturnStatement[27782-27870]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27832-27839]:Modifier[27892-27899]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27840-27846]:Modifier[27900-27906]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[27847-27852]:Modifier[27907-27912]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[27853-27858]:TYPE_DECLARATION_KIND[27913-27918]"
    }, {
      "left" : "LineParser",
      "right" : "LineParser",
      "info" : "SimpleName[27859-27869]:SimpleName[27919-27929]"
    }, {
      "left" : "HeaderParser",
      "right" : "HeaderParser",
      "info" : "SimpleType[27878-27890]:SimpleType[27938-27950]"
    }, {
      "left" : "LineParser",
      "right" : "LineParser",
      "info" : "SimpleName[27902-27912]:SimpleName[27962-27972]"
    }, {
      "left" : "AppendableCharSequence seq",
      "right" : "AppendableCharSequence seq",
      "info" : "SingleVariableDeclaration[27913-27939]:SingleVariableDeclaration[27973-27999]"
    }, {
      "left" : "int maxLength",
      "right" : "int maxLength",
      "info" : "SingleVariableDeclaration[27941-27954]:SingleVariableDeclaration[28001-28014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27956-28002]:Block[28016-28062]"
    }, {
      "left" : "super(seq, maxLength);",
      "right" : "super(seq, maxLength);",
      "info" : "SuperConstructorInvocation[27970-27992]:SuperConstructorInvocation[28030-28052]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28012-28021]:MarkerAnnotation[28072-28081]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28030-28036]:Modifier[28090-28096]"
    }, {
      "left" : "AppendableCharSequence",
      "right" : "AppendableCharSequence",
      "info" : "SimpleType[28037-28059]:SimpleType[28097-28119]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[28060-28065]:SimpleName[28120-28125]"
    }, {
      "left" : "ByteBuf buffer",
      "right" : "ByteBuf buffer",
      "info" : "SingleVariableDeclaration[28066-28080]:SingleVariableDeclaration[28126-28140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28082-28154]:Block[28142-28214]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[28096-28104]:ExpressionStatement[28156-28164]"
    }, {
      "left" : "return super.parse(buffer);",
      "right" : "return super.parse(buffer);",
      "info" : "ReturnStatement[28117-28144]:ReturnStatement[28177-28204]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28164-28173]:MarkerAnnotation[28224-28233]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[28182-28191]:Modifier[28242-28251]"
    }, {
      "left" : "TooLongFrameException",
      "right" : "TooLongFrameException",
      "info" : "SimpleType[28192-28213]:SimpleType[28252-28273]"
    }, {
      "left" : "newException",
      "right" : "newException",
      "info" : "SimpleName[28214-28226]:SimpleName[28274-28286]"
    }, {
      "left" : "int maxLength",
      "right" : "int maxLength",
      "info" : "SingleVariableDeclaration[28227-28240]:SingleVariableDeclaration[28287-28300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28242-28355]:Block[28302-28415]"
    }, {
      "left" : "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");",
      "right" : "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");",
      "info" : "ReturnStatement[28256-28345]:ReturnStatement[28316-28405]"
    } ]
  },
  "interFileMappings" : { }
}