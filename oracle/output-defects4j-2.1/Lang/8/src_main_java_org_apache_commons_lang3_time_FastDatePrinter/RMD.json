{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FastDatePrinter",
      "right" : "FastDatePrinter",
      "info" : "TypeDeclaration[1354-38454]:TypeDeclaration[1354-38440]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3460-3607]:FieldDeclaration[3460-3607]"
    }, {
      "left" : "public static final int FULL = DateFormat.FULL;",
      "right" : "public static final int FULL = DateFormat.FULL;",
      "info" : "FieldDeclaration[3613-3725]:FieldDeclaration[3613-3725]"
    }, {
      "left" : "public static final int LONG = DateFormat.LONG;",
      "right" : "public static final int LONG = DateFormat.LONG;",
      "info" : "FieldDeclaration[3730-3842]:FieldDeclaration[3730-3842]"
    }, {
      "left" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "right" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "info" : "FieldDeclaration[3847-3965]:FieldDeclaration[3847-3965]"
    }, {
      "left" : "public static final int SHORT = DateFormat.SHORT;",
      "right" : "public static final int SHORT = DateFormat.SHORT;",
      "info" : "FieldDeclaration[3970-4085]:FieldDeclaration[3970-4085]"
    }, {
      "left" : "private final String mPattern;",
      "right" : "private final String mPattern;",
      "info" : "FieldDeclaration[4091-4157]:FieldDeclaration[4091-4157]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[4162-4233]:FieldDeclaration[4162-4233]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[4238-4302]:FieldDeclaration[4238-4302]"
    }, {
      "left" : "private transient Rule[] mRules;",
      "right" : "private transient Rule[] mRules;",
      "info" : "FieldDeclaration[4307-4380]:FieldDeclaration[4307-4380]"
    }, {
      "left" : "private transient int mMaxLengthEstimate;",
      "right" : "private transient int mMaxLengthEstimate;",
      "info" : "FieldDeclaration[4385-4479]:FieldDeclaration[4385-4479]"
    }, {
      "left" : "protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[4582-5086]:MethodDeclaration[4582-5086]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[5092-5462]:MethodDeclaration[5092-5462]"
    }, {
      "left" : "protected List<Rule> parsePattern()",
      "right" : "protected List<Rule> parsePattern()",
      "info" : "MethodDeclaration[5571-10752]:MethodDeclaration[5571-10752]"
    }, {
      "left" : "protected String parseToken(String pattern, int[] indexRef)",
      "right" : "protected String parseToken(String pattern, int[] indexRef)",
      "info" : "MethodDeclaration[10758-12473]:MethodDeclaration[10758-12473]"
    }, {
      "left" : "protected NumberRule selectNumberRule(int field, int padding)",
      "right" : "protected NumberRule selectNumberRule(int field, int padding)",
      "info" : "MethodDeclaration[12479-13026]:MethodDeclaration[12479-13026]"
    }, {
      "left" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "right" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "info" : "MethodDeclaration[13132-13986]:MethodDeclaration[13132-13986]"
    }, {
      "left" : "public String format(long millis)",
      "right" : "public String format(long millis)",
      "info" : "MethodDeclaration[14088-14184]:MethodDeclaration[14088-14184]"
    }, {
      "left" : "public String format(Date date)",
      "right" : "public String format(Date date)",
      "info" : "MethodDeclaration[14296-14549]:MethodDeclaration[14296-14549]"
    }, {
      "left" : "public String format(Calendar calendar)",
      "right" : "public String format(Calendar calendar)",
      "info" : "MethodDeclaration[14665-14808]:MethodDeclaration[14665-14808]"
    }, {
      "left" : "public StringBuffer format(long millis, StringBuffer buf)",
      "right" : "public StringBuffer format(long millis, StringBuffer buf)",
      "info" : "MethodDeclaration[14934-15059]:MethodDeclaration[14934-15059]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer buf)",
      "right" : "public StringBuffer format(Date date, StringBuffer buf)",
      "info" : "MethodDeclaration[15195-15428]:MethodDeclaration[15195-15428]"
    }, {
      "left" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "right" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[15568-15695]:MethodDeclaration[15568-15695]"
    }, {
      "left" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "right" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[15701-16138]:MethodDeclaration[15701-16138]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[16335-16408]:MethodDeclaration[16335-16408]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[16511-16588]:MethodDeclaration[16511-16588]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[16689-16760]:MethodDeclaration[16689-16760]"
    }, {
      "left" : "public int getMaxLengthEstimate()",
      "right" : "public int getMaxLengthEstimate()",
      "info" : "MethodDeclaration[16766-17123]:MethodDeclaration[16766-17123]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[17221-17718]:MethodDeclaration[17221-17718]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[17724-17988]:MethodDeclaration[17724-17988]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[17994-18256]:MethodDeclaration[17994-18256]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[18359-18837]:MethodDeclaration[18359-18837]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[18934-19486]:TypeDeclaration[18934-19486]"
    }, {
      "left" : "int estimateLength();",
      "right" : "int estimateLength();",
      "info" : "MethodDeclaration[19026-19177]:MethodDeclaration[19026-19177]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "right" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "info" : "MethodDeclaration[19187-19480]:MethodDeclaration[19187-19480]"
    }, {
      "left" : "NumberRule",
      "right" : "NumberRule",
      "info" : "TypeDeclaration[19492-19884]:TypeDeclaration[19492-19884]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, int value);",
      "right" : "void appendTo(StringBuffer buffer, int value);",
      "info" : "MethodDeclaration[19611-19878]:MethodDeclaration[19611-19878]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[19890-20653]:TypeDeclaration[19890-20653]"
    }, {
      "left" : "private final char mValue;",
      "right" : "private final char mValue;",
      "info" : "FieldDeclaration[20035-20061]:FieldDeclaration[20035-20061]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[20071-20325]:MethodDeclaration[20071-20325]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[20335-20463]:MethodDeclaration[20335-20463]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[20473-20647]:MethodDeclaration[20473-20647]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[20659-21418]:TypeDeclaration[20659-21418]"
    }, {
      "left" : "private final String mValue;",
      "right" : "private final String mValue;",
      "info" : "FieldDeclaration[20791-20819]:FieldDeclaration[20791-20819]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[20829-21076]:MethodDeclaration[20829-21076]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[21086-21228]:MethodDeclaration[21086-21228]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[21238-21412]:MethodDeclaration[21238-21412]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[21424-22527]:TypeDeclaration[21424-22527]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[21557-21582]:FieldDeclaration[21557-21582]"
    }, {
      "left" : "private final String[] mValues;",
      "right" : "private final String[] mValues;",
      "info" : "FieldDeclaration[21591-21622]:FieldDeclaration[21591-21622]"
    }, {
      "left" : "TextField(int field, String[] values)",
      "right" : "TextField(int field, String[] values)",
      "info" : "MethodDeclaration[21632-21953]:MethodDeclaration[21632-21953]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[21963-22314]:MethodDeclaration[21963-22314]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[22324-22521]:MethodDeclaration[22324-22521]"
    }, {
      "left" : "UnpaddedNumberField",
      "right" : "UnpaddedNumberField",
      "info" : "TypeDeclaration[22533-23759]:TypeDeclaration[22533-23759]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[22678-22703]:FieldDeclaration[22678-22703]"
    }, {
      "left" : "UnpaddedNumberField(int field)",
      "right" : "UnpaddedNumberField(int field)",
      "info" : "MethodDeclaration[22713-22942]:MethodDeclaration[22713-22942]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[22952-23080]:MethodDeclaration[22952-23080]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[23090-23281]:MethodDeclaration[23090-23281]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[23291-23753]:MethodDeclaration[23291-23753]"
    }, {
      "left" : "UnpaddedMonthField",
      "right" : "UnpaddedMonthField",
      "info" : "TypeDeclaration[23765-24874]:TypeDeclaration[23765-24874]"
    }, {
      "left" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "right" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "info" : "FieldDeclaration[23908-23976]:FieldDeclaration[23908-23976]"
    }, {
      "left" : "UnpaddedMonthField()",
      "right" : "UnpaddedMonthField()",
      "info" : "MethodDeclaration[23986-24139]:MethodDeclaration[23986-24139]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[24149-24277]:MethodDeclaration[24149-24277]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[24287-24490]:MethodDeclaration[24287-24490]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[24500-24868]:MethodDeclaration[24500-24868]"
    }, {
      "left" : "PaddedNumberField",
      "right" : "PaddedNumberField",
      "info" : "TypeDeclaration[24880-26792]:TypeDeclaration[24880-26792]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[25020-25045]:FieldDeclaration[25020-25045]"
    }, {
      "left" : "private final int mSize;",
      "right" : "private final int mSize;",
      "info" : "FieldDeclaration[25054-25078]:FieldDeclaration[25054-25078]"
    }, {
      "left" : "PaddedNumberField(int field, int size)",
      "right" : "PaddedNumberField(int field, int size)",
      "info" : "MethodDeclaration[25088-25543]:MethodDeclaration[25088-25543]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[25553-25681]:MethodDeclaration[25553-25681]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[25691-25882]:MethodDeclaration[25691-25882]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[25892-26786]:MethodDeclaration[25892-26786]"
    }, {
      "left" : "TwoDigitNumberField",
      "right" : "TwoDigitNumberField",
      "info" : "TypeDeclaration[26798-27936]:TypeDeclaration[26798-27936]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[26943-26968]:FieldDeclaration[26943-26968]"
    }, {
      "left" : "TwoDigitNumberField(int field)",
      "right" : "TwoDigitNumberField(int field)",
      "info" : "MethodDeclaration[26978-27208]:MethodDeclaration[26978-27208]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[27218-27346]:MethodDeclaration[27218-27346]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[27356-27547]:MethodDeclaration[27356-27547]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[27557-27930]:MethodDeclaration[27557-27930]"
    }, {
      "left" : "TwoDigitYearField",
      "right" : "TwoDigitYearField",
      "info" : "TypeDeclaration[27942-28910]:TypeDeclaration[27942-28910]"
    }, {
      "left" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "right" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "info" : "FieldDeclaration[28083-28149]:FieldDeclaration[28083-28149]"
    }, {
      "left" : "TwoDigitYearField()",
      "right" : "TwoDigitYearField()",
      "info" : "MethodDeclaration[28159-28299]:MethodDeclaration[28159-28299]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[28309-28437]:MethodDeclaration[28309-28437]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[28447-28651]:MethodDeclaration[28447-28651]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[28661-28904]:MethodDeclaration[28661-28904]"
    }, {
      "left" : "TwoDigitMonthField",
      "right" : "TwoDigitMonthField",
      "info" : "TypeDeclaration[28916-29889]:TypeDeclaration[28916-29889]"
    }, {
      "left" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "right" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "info" : "FieldDeclaration[29059-29127]:FieldDeclaration[29059-29127]"
    }, {
      "left" : "TwoDigitMonthField()",
      "right" : "TwoDigitMonthField()",
      "info" : "MethodDeclaration[29137-29279]:MethodDeclaration[29137-29279]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[29289-29417]:MethodDeclaration[29289-29417]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[29427-29630]:MethodDeclaration[29427-29630]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[29640-29883]:MethodDeclaration[29640-29883]"
    }, {
      "left" : "TwelveHourField",
      "right" : "TwelveHourField",
      "info" : "TypeDeclaration[29895-31035]:TypeDeclaration[29895-31035]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[30039-30070]:FieldDeclaration[30039-30070]"
    }, {
      "left" : "TwelveHourField(NumberRule rule)",
      "right" : "TwelveHourField(NumberRule rule)",
      "info" : "MethodDeclaration[30080-30328]:MethodDeclaration[30080-30328]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[30338-30487]:MethodDeclaration[30338-30487]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[30497-30845]:MethodDeclaration[30497-30845]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[30855-31029]:MethodDeclaration[30855-31029]"
    }, {
      "left" : "TwentyFourHourField",
      "right" : "TwentyFourHourField",
      "info" : "TypeDeclaration[31041-32207]:TypeDeclaration[31041-32207]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[31194-31225]:FieldDeclaration[31194-31225]"
    }, {
      "left" : "TwentyFourHourField(NumberRule rule)",
      "right" : "TwentyFourHourField(NumberRule rule)",
      "info" : "MethodDeclaration[31235-31491]:MethodDeclaration[31235-31491]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[31501-31650]:MethodDeclaration[31501-31650]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[31660-32017]:MethodDeclaration[31660-32017]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[32027-32201]:MethodDeclaration[32027-32201]"
    }, {
      "left" : "private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =\n        new ConcurrentHashMap<TimeZoneDisplayKey, String>(7);",
      "right" : "private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =\n        new ConcurrentHashMap<TimeZoneDisplayKey, String>(7);",
      "info" : "FieldDeclaration[32292-32434]:FieldDeclaration[32292-32434]"
    }, {
      "left" : "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "right" : "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[32439-33377]:MethodDeclaration[32439-33377]"
    }, {
      "left" : "TimeZoneNameRule",
      "right" : "TimeZoneNameRule",
      "info" : "TypeDeclaration[33383-35087]:TypeDeclaration[33383-35073]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[33517-33546]:FieldDeclaration[33517-33546]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[33555-33580]:FieldDeclaration[33555-33580]"
    }, {
      "left" : "private final String mStandard;",
      "right" : "private final String mStandard;",
      "info" : "FieldDeclaration[33626-33657]:FieldDeclaration[33589-33620]"
    }, {
      "left" : "private final String mDaylight;",
      "right" : "private final String mDaylight;",
      "info" : "FieldDeclaration[33666-33697]:FieldDeclaration[33629-33660]"
    }, {
      "left" : "TimeZoneNameRule(TimeZone timeZone, Locale locale, int style)",
      "right" : "TimeZoneNameRule(TimeZone timeZone, Locale locale, int style)",
      "info" : "MethodDeclaration[33707-34270]:MethodDeclaration[33670-34204]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[34280-34632]:MethodDeclaration[34214-34566]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[34642-35081]:MethodDeclaration[34576-35067]"
    }, {
      "left" : "TimeZoneNumberRule",
      "right" : "TimeZoneNumberRule",
      "info" : "TypeDeclaration[35093-36743]:TypeDeclaration[35079-36729]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "right" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "info" : "FieldDeclaration[35279-35357]:FieldDeclaration[35265-35343]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "right" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "info" : "FieldDeclaration[35366-35448]:FieldDeclaration[35352-35434]"
    }, {
      "left" : "final boolean mColon;",
      "right" : "final boolean mColon;",
      "info" : "FieldDeclaration[35458-35479]:FieldDeclaration[35444-35465]"
    }, {
      "left" : "TimeZoneNumberRule(boolean colon)",
      "right" : "TimeZoneNumberRule(boolean colon)",
      "info" : "MethodDeclaration[35489-35774]:MethodDeclaration[35475-35760]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[35784-35912]:MethodDeclaration[35770-35898]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[35922-36737]:MethodDeclaration[35908-36723]"
    }, {
      "left" : "TimeZoneDisplayKey",
      "right" : "TimeZoneDisplayKey",
      "info" : "TypeDeclaration[36827-38452]:TypeDeclaration[36813-38438]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[36968-37001]:FieldDeclaration[36954-36987]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[37010-37035]:FieldDeclaration[36996-37021]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[37044-37073]:FieldDeclaration[37030-37059]"
    }, {
      "left" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "right" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[37083-37718]:MethodDeclaration[37069-37704]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[37728-37912]:MethodDeclaration[37714-37898]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[37922-38446]:MethodDeclaration[37908-38432]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4978-5086]:Block[4978-5086]"
    }, {
      "left" : "mPattern = pattern;",
      "right" : "mPattern = pattern;",
      "info" : "ExpressionStatement[4988-5007]:ExpressionStatement[4988-5007]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[5016-5037]:ExpressionStatement[5016-5037]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[5046-5063]:ExpressionStatement[5046-5063]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[5073-5080]:ExpressionStatement[5073-5080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5182-5462]:Block[5182-5462]"
    }, {
      "left" : "List<Rule> rulesList = parsePattern();",
      "right" : "List<Rule> rulesList = parsePattern();",
      "info" : "VariableDeclarationStatement[5192-5230]:VariableDeclarationStatement[5192-5230]"
    }, {
      "left" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "right" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "info" : "ExpressionStatement[5239-5294]:ExpressionStatement[5239-5294]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[5304-5316]:VariableDeclarationStatement[5304-5316]"
    }, {
      "left" : "for (int i=mRules.length; --i >= 0)",
      "right" : "for (int i=mRules.length; --i >= 0)",
      "info" : "ForStatement[5325-5421]:ForStatement[5325-5421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5363-5421]:Block[5363-5421]"
    }, {
      "left" : "len += mRules[i].estimateLength();",
      "right" : "len += mRules[i].estimateLength();",
      "info" : "ExpressionStatement[5377-5411]:ExpressionStatement[5377-5411]"
    }, {
      "left" : "mMaxLengthEstimate = len;",
      "right" : "mMaxLengthEstimate = len;",
      "info" : "ExpressionStatement[5431-5456]:ExpressionStatement[5431-5456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5793-10752]:Block[5793-10752]"
    }, {
      "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "info" : "VariableDeclarationStatement[5803-5862]:VariableDeclarationStatement[5803-5862]"
    }, {
      "left" : "List<Rule> rules = new ArrayList<Rule>();",
      "right" : "List<Rule> rules = new ArrayList<Rule>();",
      "info" : "VariableDeclarationStatement[5871-5912]:VariableDeclarationStatement[5871-5912]"
    }, {
      "left" : "String[] ERAs = symbols.getEras();",
      "right" : "String[] ERAs = symbols.getEras();",
      "info" : "VariableDeclarationStatement[5922-5956]:VariableDeclarationStatement[5922-5956]"
    }, {
      "left" : "String[] months = symbols.getMonths();",
      "right" : "String[] months = symbols.getMonths();",
      "info" : "VariableDeclarationStatement[5965-6003]:VariableDeclarationStatement[5965-6003]"
    }, {
      "left" : "String[] shortMonths = symbols.getShortMonths();",
      "right" : "String[] shortMonths = symbols.getShortMonths();",
      "info" : "VariableDeclarationStatement[6012-6060]:VariableDeclarationStatement[6012-6060]"
    }, {
      "left" : "String[] weekdays = symbols.getWeekdays();",
      "right" : "String[] weekdays = symbols.getWeekdays();",
      "info" : "VariableDeclarationStatement[6069-6111]:VariableDeclarationStatement[6069-6111]"
    }, {
      "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "info" : "VariableDeclarationStatement[6120-6172]:VariableDeclarationStatement[6120-6172]"
    }, {
      "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "info" : "VariableDeclarationStatement[6181-6229]:VariableDeclarationStatement[6181-6229]"
    }, {
      "left" : "int length = mPattern.length();",
      "right" : "int length = mPattern.length();",
      "info" : "VariableDeclarationStatement[6239-6270]:VariableDeclarationStatement[6239-6270]"
    }, {
      "left" : "int[] indexRef = new int[1];",
      "right" : "int[] indexRef = new int[1];",
      "info" : "VariableDeclarationStatement[6279-6307]:VariableDeclarationStatement[6279-6307]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[6317-10723]:ForStatement[6317-10723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6350-10723]:Block[6350-10723]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[6364-6380]:ExpressionStatement[6364-6380]"
    }, {
      "left" : "String token = parseToken(mPattern, indexRef);",
      "right" : "String token = parseToken(mPattern, indexRef);",
      "info" : "VariableDeclarationStatement[6393-6439]:VariableDeclarationStatement[6393-6439]"
    }, {
      "left" : "i = indexRef[0];",
      "right" : "i = indexRef[0];",
      "info" : "ExpressionStatement[6452-6468]:ExpressionStatement[6452-6468]"
    }, {
      "left" : "int tokenLen = token.length();",
      "right" : "int tokenLen = token.length();",
      "info" : "VariableDeclarationStatement[6482-6512]:VariableDeclarationStatement[6482-6512]"
    }, {
      "left" : "if (tokenLen == 0)",
      "right" : "if (tokenLen == 0)",
      "info" : "IfStatement[6525-6582]:IfStatement[6525-6582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6544-6582]:Block[6544-6582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6562-6568]:BreakStatement[6562-6568]"
    }, {
      "left" : "Rule rule;",
      "right" : "Rule rule;",
      "info" : "VariableDeclarationStatement[6596-6606]:VariableDeclarationStatement[6596-6606]"
    }, {
      "left" : "char c = token.charAt(0);",
      "right" : "char c = token.charAt(0);",
      "info" : "VariableDeclarationStatement[6619-6644]:VariableDeclarationStatement[6619-6644]"
    }, {
      "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "info" : "SwitchStatement[6658-10683]:SwitchStatement[6658-10683]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[6683-6692]:SwitchCase[6683-6692]"
    }, {
      "left" : "rule = new TextField(Calendar.ERA, ERAs);",
      "right" : "rule = new TextField(Calendar.ERA, ERAs);",
      "info" : "ExpressionStatement[6734-6775]:ExpressionStatement[6734-6775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6792-6798]:BreakStatement[6792-6798]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[6811-6820]:SwitchCase[6811-6820]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[6854-7061]:IfStatement[6854-7061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6873-6947]:Block[6873-6947]"
    }, {
      "left" : "rule = TwoDigitYearField.INSTANCE;",
      "right" : "rule = TwoDigitYearField.INSTANCE;",
      "info" : "ExpressionStatement[6895-6929]:ExpressionStatement[6895-6929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6953-7061]:Block[6953-7061]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);",
      "info" : "ExpressionStatement[6975-7043]:ExpressionStatement[6975-7043]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7078-7084]:BreakStatement[7078-7084]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[7097-7106]:SwitchCase[7097-7106]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[7158-7558]:IfStatement[7158-7558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7177-7262]:Block[7177-7262]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, months);",
      "right" : "rule = new TextField(Calendar.MONTH, months);",
      "info" : "ExpressionStatement[7199-7244]:ExpressionStatement[7199-7244]"
    }, {
      "left" : "if (tokenLen == 3)",
      "right" : "if (tokenLen == 3)",
      "info" : "IfStatement[7268-7558]:IfStatement[7268-7558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7287-7377]:Block[7287-7377]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "info" : "ExpressionStatement[7309-7359]:ExpressionStatement[7309-7359]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[7383-7558]:IfStatement[7383-7558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7402-7477]:Block[7402-7477]"
    }, {
      "left" : "rule = TwoDigitMonthField.INSTANCE;",
      "right" : "rule = TwoDigitMonthField.INSTANCE;",
      "info" : "ExpressionStatement[7424-7459]:ExpressionStatement[7424-7459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7483-7558]:Block[7483-7558]"
    }, {
      "left" : "rule = UnpaddedMonthField.INSTANCE;",
      "right" : "rule = UnpaddedMonthField.INSTANCE;",
      "info" : "ExpressionStatement[7505-7540]:ExpressionStatement[7505-7540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7575-7581]:BreakStatement[7575-7581]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[7594-7603]:SwitchCase[7594-7603]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[7645-7702]:ExpressionStatement[7645-7702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7719-7725]:BreakStatement[7719-7725]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[7738-7747]:SwitchCase[7738-7747]"
    }, {
      "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "info" : "ExpressionStatement[7797-7867]:ExpressionStatement[7797-7867]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7884-7890]:BreakStatement[7884-7890]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[7903-7912]:SwitchCase[7903-7912]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "info" : "ExpressionStatement[7960-8016]:ExpressionStatement[7960-8016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8033-8039]:BreakStatement[8033-8039]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[8052-8061]:SwitchCase[8052-8061]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "info" : "ExpressionStatement[8105-8156]:ExpressionStatement[8105-8156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8173-8179]:BreakStatement[8173-8179]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[8192-8201]:SwitchCase[8192-8201]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "info" : "ExpressionStatement[8247-8298]:ExpressionStatement[8247-8298]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8315-8321]:BreakStatement[8315-8321]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[8334-8343]:SwitchCase[8334-8343]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "info" : "ExpressionStatement[8384-8440]:ExpressionStatement[8384-8440]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8457-8463]:BreakStatement[8457-8463]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[8476-8485]:SwitchCase[8476-8485]"
    }, {
      "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "info" : "ExpressionStatement[8524-8608]:ExpressionStatement[8524-8608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8625-8631]:BreakStatement[8625-8631]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[8644-8653]:SwitchCase[8644-8653]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[8694-8750]:ExpressionStatement[8694-8750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8767-8773]:BreakStatement[8767-8773]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[8786-8795]:SwitchCase[8786-8795]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "info" : "ExpressionStatement[8845-8910]:ExpressionStatement[8845-8910]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8927-8933]:BreakStatement[8927-8933]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[8946-8955]:SwitchCase[8946-8955]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[8997-9054]:ExpressionStatement[8997-9054]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9071-9077]:BreakStatement[9071-9077]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[9090-9099]:SwitchCase[9090-9099]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[9142-9200]:ExpressionStatement[9142-9200]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9217-9223]:BreakStatement[9217-9223]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[9236-9245]:SwitchCase[9236-9245]"
    }, {
      "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "info" : "ExpressionStatement[9285-9335]:ExpressionStatement[9285-9335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9352-9358]:BreakStatement[9352-9358]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[9371-9380]:SwitchCase[9371-9380]"
    }, {
      "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "info" : "ExpressionStatement[9420-9501]:ExpressionStatement[9420-9501]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9518-9524]:BreakStatement[9518-9524]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[9537-9546]:SwitchCase[9537-9546]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "info" : "ExpressionStatement[9588-9637]:ExpressionStatement[9588-9637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9654-9660]:BreakStatement[9654-9660]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[9673-9682]:SwitchCase[9673-9682]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[9719-9951]:IfStatement[9719-9951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9738-9841]:Block[9738-9841]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);",
      "info" : "ExpressionStatement[9760-9823]:ExpressionStatement[9760-9823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9847-9951]:Block[9847-9951]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);",
      "info" : "ExpressionStatement[9869-9933]:ExpressionStatement[9869-9933]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9968-9974]:BreakStatement[9968-9974]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[9987-9996]:SwitchCase[9987-9996]"
    }, {
      "left" : "if (tokenLen == 1)",
      "right" : "if (tokenLen == 1)",
      "info" : "IfStatement[10034-10224]:IfStatement[10034-10224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10053-10137]:Block[10053-10137]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "info" : "ExpressionStatement[10075-10119]:ExpressionStatement[10075-10119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10143-10224]:Block[10143-10224]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "info" : "ExpressionStatement[10165-10206]:ExpressionStatement[10165-10206]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10241-10247]:BreakStatement[10241-10247]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[10260-10270]:SwitchCase[10260-10270]"
    }, {
      "left" : "String sub = token.substring(1);",
      "right" : "String sub = token.substring(1);",
      "info" : "VariableDeclarationStatement[10303-10335]:VariableDeclarationStatement[10303-10335]"
    }, {
      "left" : "if (sub.length() == 1)",
      "right" : "if (sub.length() == 1)",
      "info" : "IfStatement[10352-10534]:IfStatement[10352-10534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10375-10458]:Block[10375-10458]"
    }, {
      "left" : "rule = new CharacterLiteral(sub.charAt(0));",
      "right" : "rule = new CharacterLiteral(sub.charAt(0));",
      "info" : "ExpressionStatement[10397-10440]:ExpressionStatement[10397-10440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10464-10534]:Block[10464-10534]"
    }, {
      "left" : "rule = new StringLiteral(sub);",
      "right" : "rule = new StringLiteral(sub);",
      "info" : "ExpressionStatement[10486-10516]:ExpressionStatement[10486-10516]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10551-10557]:BreakStatement[10551-10557]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10570-10578]:SwitchCase[10570-10578]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "info" : "ThrowStatement[10595-10669]:ThrowStatement[10595-10669]"
    }, {
      "left" : "rules.add(rule);",
      "right" : "rules.add(rule);",
      "info" : "ExpressionStatement[10697-10713]:ExpressionStatement[10697-10713]"
    }, {
      "left" : "return rules;",
      "right" : "return rules;",
      "info" : "ReturnStatement[10733-10746]:ReturnStatement[10733-10746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10991-12473]:Block[10991-12473]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder();",
      "right" : "StringBuilder buf = new StringBuilder();",
      "info" : "VariableDeclarationStatement[11001-11041]:VariableDeclarationStatement[11001-11041]"
    }, {
      "left" : "int i = indexRef[0];",
      "right" : "int i = indexRef[0];",
      "info" : "VariableDeclarationStatement[11051-11071]:VariableDeclarationStatement[11051-11071]"
    }, {
      "left" : "int length = pattern.length();",
      "right" : "int length = pattern.length();",
      "info" : "VariableDeclarationStatement[11080-11110]:VariableDeclarationStatement[11080-11110]"
    }, {
      "left" : "char c = pattern.charAt(i);",
      "right" : "char c = pattern.charAt(i);",
      "info" : "VariableDeclarationStatement[11120-11147]:VariableDeclarationStatement[11120-11147]"
    }, {
      "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "info" : "IfStatement[11156-12410]:IfStatement[11156-12410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11206-11606]:Block[11206-11606]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[11316-11330]:ExpressionStatement[11316-11330]"
    }, {
      "left" : "while (i + 1 < length)",
      "right" : "while (i + 1 < length)",
      "info" : "WhileStatement[11344-11596]:WhileStatement[11344-11596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11367-11596]:Block[11367-11596]"
    }, {
      "left" : "char peek = pattern.charAt(i + 1);",
      "right" : "char peek = pattern.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[11385-11419]:VariableDeclarationStatement[11385-11419]"
    }, {
      "left" : "if (peek == c)",
      "right" : "if (peek == c)",
      "info" : "IfStatement[11436-11582]:IfStatement[11436-11582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11451-11530]:Block[11451-11530]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[11473-11487]:ExpressionStatement[11473-11487]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[11508-11512]:ExpressionStatement[11508-11512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11536-11582]:Block[11536-11582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11558-11564]:BreakStatement[11558-11564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11612-12410]:Block[11612-12410]"
    }, {
      "left" : "buf.append('\\'');",
      "right" : "buf.append('\\'');",
      "info" : "ExpressionStatement[11675-11692]:ExpressionStatement[11675-11692]"
    }, {
      "left" : "boolean inLiteral = false;",
      "right" : "boolean inLiteral = false;",
      "info" : "VariableDeclarationStatement[11706-11732]:VariableDeclarationStatement[11706-11732]"
    }, {
      "left" : "for (; i < length; i++)",
      "right" : "for (; i < length; i++)",
      "info" : "ForStatement[11746-12400]:ForStatement[11746-12400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11770-12400]:Block[11770-12400]"
    }, {
      "left" : "c = pattern.charAt(i);",
      "right" : "c = pattern.charAt(i);",
      "info" : "ExpressionStatement[11788-11810]:ExpressionStatement[11788-11810]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[11828-12386]:IfStatement[11828-12386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11843-12158]:Block[11843-12158]"
    }, {
      "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "info" : "IfStatement[11865-12140]:IfStatement[11865-12140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11918-12063]:Block[11918-12063]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[11998-12002]:ExpressionStatement[11998-12002]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[12027-12041]:ExpressionStatement[12027-12041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12069-12140]:Block[12069-12140]"
    }, {
      "left" : "inLiteral = !inLiteral;",
      "right" : "inLiteral = !inLiteral;",
      "info" : "ExpressionStatement[12095-12118]:ExpressionStatement[12095-12118]"
    }, {
      "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[12164-12386]:IfStatement[12164-12386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12255-12326]:Block[12255-12326]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[12277-12281]:ExpressionStatement[12277-12281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12302-12308]:BreakStatement[12302-12308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12332-12386]:Block[12332-12386]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[12354-12368]:ExpressionStatement[12354-12368]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[12420-12436]:ExpressionStatement[12420-12436]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[12445-12467]:ReturnStatement[12445-12467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12773-13026]:Block[12773-13026]"
    }, {
      "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "info" : "SwitchStatement[12783-13020]:SwitchStatement[12783-13020]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[12810-12817]:SwitchCase[12810-12817]"
    }, {
      "left" : "return new UnpaddedNumberField(field);",
      "right" : "return new UnpaddedNumberField(field);",
      "info" : "ReturnStatement[12830-12868]:ReturnStatement[12830-12868]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[12877-12884]:SwitchCase[12877-12884]"
    }, {
      "left" : "return new TwoDigitNumberField(field);",
      "right" : "return new TwoDigitNumberField(field);",
      "info" : "ReturnStatement[12897-12935]:ReturnStatement[12897-12935]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12944-12952]:SwitchCase[12944-12952]"
    }, {
      "left" : "return new PaddedNumberField(field, padding);",
      "right" : "return new PaddedNumberField(field, padding);",
      "info" : "ReturnStatement[12965-13010]:ReturnStatement[12965-13010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13521-13986]:Block[13521-13986]"
    }, {
      "left" : "if (obj instanceof Date)",
      "right" : "if (obj instanceof Date)",
      "info" : "IfStatement[13531-13980]:IfStatement[13531-13980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13556-13618]:Block[13556-13618]"
    }, {
      "left" : "return format((Date) obj, toAppendTo);",
      "right" : "return format((Date) obj, toAppendTo);",
      "info" : "ReturnStatement[13570-13608]:ReturnStatement[13570-13608]"
    }, {
      "left" : "if (obj instanceof Calendar)",
      "right" : "if (obj instanceof Calendar)",
      "info" : "IfStatement[13624-13980]:IfStatement[13624-13980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13653-13719]:Block[13653-13719]"
    }, {
      "left" : "return format((Calendar) obj, toAppendTo);",
      "right" : "return format((Calendar) obj, toAppendTo);",
      "info" : "ReturnStatement[13667-13709]:ReturnStatement[13667-13709]"
    }, {
      "left" : "if (obj instanceof Long)",
      "right" : "if (obj instanceof Long)",
      "info" : "IfStatement[13725-13980]:IfStatement[13725-13980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13750-13826]:Block[13750-13826]"
    }, {
      "left" : "return format(((Long) obj).longValue(), toAppendTo);",
      "right" : "return format(((Long) obj).longValue(), toAppendTo);",
      "info" : "ReturnStatement[13764-13816]:ReturnStatement[13764-13816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13832-13980]:Block[13832-13980]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "info" : "ThrowStatement[13846-13970]:ThrowStatement[13846-13970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14136-14184]:Block[14136-14184]"
    }, {
      "left" : "return format(new Date(millis));",
      "right" : "return format(new Date(millis));",
      "info" : "ReturnStatement[14146-14178]:ReturnStatement[14146-14178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14342-14549]:Block[14342-14549]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
      "info" : "VariableDeclarationStatement[14352-14407]:VariableDeclarationStatement[14352-14407]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[14448-14464]:ExpressionStatement[14448-14464]"
    }, {
      "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[14473-14543]:ReturnStatement[14473-14543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14719-14808]:Block[14719-14808]"
    }, {
      "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[14729-14802]:ReturnStatement[14729-14802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15006-15059]:Block[15006-15059]"
    }, {
      "left" : "return format(new Date(millis), buf);",
      "right" : "return format(new Date(millis), buf);",
      "info" : "ReturnStatement[15016-15053]:ReturnStatement[15016-15053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15265-15428]:Block[15265-15428]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
      "info" : "VariableDeclarationStatement[15275-15330]:VariableDeclarationStatement[15275-15330]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[15371-15387]:ExpressionStatement[15371-15387]"
    }, {
      "left" : "return applyRules(c, buf);",
      "right" : "return applyRules(c, buf);",
      "info" : "ReturnStatement[15396-15422]:ReturnStatement[15396-15422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15646-15695]:Block[15646-15695]"
    }, {
      "left" : "return applyRules(calendar, buf);",
      "right" : "return applyRules(calendar, buf);",
      "info" : "ReturnStatement[15656-15689]:ReturnStatement[15656-15689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16024-16138]:Block[16024-16138]"
    }, {
      "left" : "for (Rule rule : mRules)",
      "right" : "for (Rule rule : mRules)",
      "info" : "EnhancedForStatement[16034-16112]:EnhancedForStatement[16034-16112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16059-16112]:Block[16059-16112]"
    }, {
      "left" : "rule.appendTo(buf, calendar);",
      "right" : "rule.appendTo(buf, calendar);",
      "info" : "ExpressionStatement[16073-16102]:ExpressionStatement[16073-16102]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[16121-16132]:ReturnStatement[16121-16132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16376-16408]:Block[16376-16408]"
    }, {
      "left" : "return mPattern;",
      "right" : "return mPattern;",
      "info" : "ReturnStatement[16386-16402]:ReturnStatement[16386-16402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16555-16588]:Block[16555-16588]"
    }, {
      "left" : "return mTimeZone;",
      "right" : "return mTimeZone;",
      "info" : "ReturnStatement[16565-16582]:ReturnStatement[16565-16582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16729-16760]:Block[16729-16760]"
    }, {
      "left" : "return mLocale;",
      "right" : "return mLocale;",
      "info" : "ReturnStatement[16739-16754]:ReturnStatement[16739-16754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17081-17123]:Block[17081-17123]"
    }, {
      "left" : "return mMaxLengthEstimate;",
      "right" : "return mMaxLengthEstimate;",
      "info" : "ReturnStatement[17091-17117]:ReturnStatement[17091-17117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17422-17718]:Block[17422-17718]"
    }, {
      "left" : "if (obj instanceof FastDatePrinter == false)",
      "right" : "if (obj instanceof FastDatePrinter == false)",
      "info" : "IfStatement[17432-17514]:IfStatement[17432-17514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17477-17514]:Block[17477-17514]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17491-17504]:ReturnStatement[17491-17504]"
    }, {
      "left" : "FastDatePrinter other = (FastDatePrinter) obj;",
      "right" : "FastDatePrinter other = (FastDatePrinter) obj;",
      "info" : "VariableDeclarationStatement[17523-17569]:VariableDeclarationStatement[17523-17569]"
    }, {
      "left" : "return mPattern.equals(other.mPattern)\n            && mTimeZone.equals(other.mTimeZone) \n            && mLocale.equals(other.mLocale);",
      "right" : "return mPattern.equals(other.mPattern)\n            && mTimeZone.equals(other.mTimeZone) \n            && mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[17578-17712]:ReturnStatement[17578-17712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17889-17988]:Block[17889-17988]"
    }, {
      "left" : "return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());",
      "right" : "return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());",
      "info" : "ReturnStatement[17899-17982]:ReturnStatement[17899-17982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18155-18256]:Block[18155-18256]"
    }, {
      "left" : "return \"FastDatePrinter[\" + mPattern + \",\" + mLocale + \",\" + mTimeZone.getID() + \"]\";",
      "right" : "return \"FastDatePrinter[\" + mPattern + \",\" + mLocale + \",\" + mTimeZone.getID() + \"]\";",
      "info" : "ReturnStatement[18165-18250]:ReturnStatement[18165-18250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18782-18837]:Block[18782-18837]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[18792-18815]:ExpressionStatement[18792-18815]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[18824-18831]:ExpressionStatement[18824-18831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20286-20325]:Block[20286-20325]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[20300-20315]:ExpressionStatement[20300-20315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20430-20463]:Block[20430-20463]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[20444-20453]:ReturnStatement[20444-20453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20601-20647]:Block[20601-20647]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[20615-20637]:ExpressionStatement[20615-20637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21037-21076]:Block[21037-21076]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[21051-21066]:ExpressionStatement[21051-21066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21181-21228]:Block[21181-21228]"
    }, {
      "left" : "return mValue.length();",
      "right" : "return mValue.length();",
      "info" : "ReturnStatement[21195-21218]:ReturnStatement[21195-21218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21366-21412]:Block[21366-21412]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[21380-21402]:ExpressionStatement[21380-21402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21884-21953]:Block[21884-21953]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[21898-21913]:ExpressionStatement[21898-21913]"
    }, {
      "left" : "mValues = values;",
      "right" : "mValues = values;",
      "info" : "ExpressionStatement[21926-21943]:ExpressionStatement[21926-21943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22058-22314]:Block[22058-22314]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[22072-22084]:VariableDeclarationStatement[22072-22084]"
    }, {
      "left" : "for (int i=mValues.length; --i >= 0)",
      "right" : "for (int i=mValues.length; --i >= 0)",
      "info" : "ForStatement[22097-22280]:ForStatement[22097-22280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22136-22280]:Block[22136-22280]"
    }, {
      "left" : "int len = mValues[i].length();",
      "right" : "int len = mValues[i].length();",
      "info" : "VariableDeclarationStatement[22154-22184]:VariableDeclarationStatement[22154-22184]"
    }, {
      "left" : "if (len > max)",
      "right" : "if (len > max)",
      "info" : "IfStatement[22201-22266]:IfStatement[22201-22266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22216-22266]:Block[22216-22266]"
    }, {
      "left" : "max = len;",
      "right" : "max = len;",
      "info" : "ExpressionStatement[22238-22248]:ExpressionStatement[22238-22248]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[22293-22304]:ReturnStatement[22293-22304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22452-22521]:Block[22452-22521]"
    }, {
      "left" : "buffer.append(mValues[calendar.get(mField)]);",
      "right" : "buffer.append(mValues[calendar.get(mField)]);",
      "info" : "ExpressionStatement[22466-22511]:ExpressionStatement[22466-22511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22903-22942]:Block[22903-22942]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[22917-22932]:ExpressionStatement[22917-22932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23047-23080]:Block[23047-23080]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[23061-23070]:ReturnStatement[23061-23070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23218-23281]:Block[23218-23281]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[23232-23271]:ExpressionStatement[23232-23271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23417-23753]:Block[23417-23753]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[23431-23743]:IfStatement[23431-23743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23447-23514]:Block[23447-23514]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[23465-23500]:ExpressionStatement[23465-23500]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[23520-23743]:IfStatement[23520-23743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23537-23666]:Block[23537-23666]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[23555-23595]:ExpressionStatement[23555-23595]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[23612-23652]:ExpressionStatement[23612-23652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23672-23743]:Block[23672-23743]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[23690-23729]:ExpressionStatement[23690-23729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24107-24139]:Block[24107-24139]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[24121-24129]:SuperConstructorInvocation[24121-24129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24244-24277]:Block[24244-24277]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[24258-24267]:ReturnStatement[24258-24267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24415-24490]:Block[24415-24490]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[24429-24480]:ExpressionStatement[24429-24480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24626-24868]:Block[24626-24868]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[24640-24858]:IfStatement[24640-24858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24656-24723]:Block[24656-24723]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[24674-24709]:ExpressionStatement[24674-24709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24729-24858]:Block[24729-24858]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[24747-24787]:ExpressionStatement[24747-24787]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[24804-24844]:ExpressionStatement[24804-24844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25308-25543]:Block[25308-25543]"
    }, {
      "left" : "if (size < 3)",
      "right" : "if (size < 3)",
      "info" : "IfStatement[25322-25479]:IfStatement[25322-25479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25336-25479]:Block[25336-25479]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[25428-25465]:ThrowStatement[25428-25465]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[25492-25507]:ExpressionStatement[25492-25507]"
    }, {
      "left" : "mSize = size;",
      "right" : "mSize = size;",
      "info" : "ExpressionStatement[25520-25533]:ExpressionStatement[25520-25533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25648-25681]:Block[25648-25681]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[25662-25671]:ReturnStatement[25662-25671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25819-25882]:Block[25819-25882]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[25833-25872]:ExpressionStatement[25833-25872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26018-26786]:Block[26018-26786]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[26032-26776]:IfStatement[26032-26776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26049-26286]:Block[26049-26286]"
    }, {
      "left" : "for (int i = mSize; --i >= 2)",
      "right" : "for (int i = mSize; --i >= 2)",
      "info" : "ForStatement[26067-26158]:ForStatement[26067-26158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26099-26158]:Block[26099-26158]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[26121-26140]:ExpressionStatement[26121-26140]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[26175-26215]:ExpressionStatement[26175-26215]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[26232-26272]:ExpressionStatement[26232-26272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26292-26776]:Block[26292-26776]"
    }, {
      "left" : "int digits;",
      "right" : "int digits;",
      "info" : "VariableDeclarationStatement[26310-26321]:VariableDeclarationStatement[26310-26321]"
    }, {
      "left" : "if (value < 1000)",
      "right" : "if (value < 1000)",
      "info" : "IfStatement[26338-26593]:IfStatement[26338-26593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26356-26407]:Block[26356-26407]"
    }, {
      "left" : "digits = 3;",
      "right" : "digits = 3;",
      "info" : "ExpressionStatement[26378-26389]:ExpressionStatement[26378-26389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26413-26593]:Block[26413-26593]"
    }, {
      "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "info" : "ExpressionStatement[26435-26512]:ExpressionStatement[26435-26512]"
    }, {
      "left" : "digits = Integer.toString(value).length();",
      "right" : "digits = Integer.toString(value).length();",
      "info" : "ExpressionStatement[26533-26575]:ExpressionStatement[26533-26575]"
    }, {
      "left" : "for (int i = mSize; --i >= digits)",
      "right" : "for (int i = mSize; --i >= digits)",
      "info" : "ForStatement[26610-26706]:ForStatement[26610-26706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26647-26706]:Block[26647-26706]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[26669-26688]:ExpressionStatement[26669-26688]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[26723-26762]:ExpressionStatement[26723-26762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27169-27208]:Block[27169-27208]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[27183-27198]:ExpressionStatement[27183-27198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27313-27346]:Block[27313-27346]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[27327-27336]:ReturnStatement[27327-27336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27484-27547]:Block[27484-27547]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[27498-27537]:ExpressionStatement[27498-27537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27683-27930]:Block[27683-27930]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[27697-27920]:IfStatement[27697-27920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27714-27843]:Block[27714-27843]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[27732-27772]:ExpressionStatement[27732-27772]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[27789-27829]:ExpressionStatement[27789-27829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27849-27920]:Block[27849-27920]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[27867-27906]:ExpressionStatement[27867-27906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28267-28299]:Block[28267-28299]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[28281-28289]:SuperConstructorInvocation[28281-28289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28404-28437]:Block[28404-28437]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[28418-28427]:ReturnStatement[28418-28427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28575-28651]:Block[28575-28651]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "info" : "ExpressionStatement[28589-28641]:ExpressionStatement[28589-28641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28787-28904]:Block[28787-28904]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[28801-28841]:ExpressionStatement[28801-28841]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[28854-28894]:ExpressionStatement[28854-28894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29247-29279]:Block[29247-29279]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[29261-29269]:SuperConstructorInvocation[29261-29269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29384-29417]:Block[29384-29417]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[29398-29407]:ReturnStatement[29398-29407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29555-29630]:Block[29555-29630]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[29569-29620]:ExpressionStatement[29569-29620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29766-29883]:Block[29766-29883]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[29780-29820]:ExpressionStatement[29780-29820]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[29833-29873]:ExpressionStatement[29833-29873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30291-30328]:Block[30291-30328]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[30305-30318]:ExpressionStatement[30305-30318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30433-30487]:Block[30433-30487]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[30447-30477]:ReturnStatement[30447-30477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30625-30845]:Block[30625-30845]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR);",
      "right" : "int value = calendar.get(Calendar.HOUR);",
      "info" : "VariableDeclarationStatement[30639-30679]:VariableDeclarationStatement[30639-30679]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[30692-30792]:IfStatement[30692-30792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30708-30792]:Block[30708-30792]"
    }, {
      "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "info" : "ExpressionStatement[30726-30778]:ExpressionStatement[30726-30778]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[30805-30835]:ExpressionStatement[30805-30835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30975-31029]:Block[30975-31029]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[30989-31019]:ExpressionStatement[30989-31019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31454-31491]:Block[31454-31491]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[31468-31481]:ExpressionStatement[31468-31481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31596-31650]:Block[31596-31650]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[31610-31640]:ReturnStatement[31610-31640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31788-32017]:Block[31788-32017]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "info" : "VariableDeclarationStatement[31802-31849]:VariableDeclarationStatement[31802-31849]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[31862-31964]:IfStatement[31862-31964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31878-31964]:Block[31878-31964]"
    }, {
      "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "info" : "ExpressionStatement[31896-31950]:ExpressionStatement[31896-31950]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[31977-32007]:ExpressionStatement[31977-32007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32147-32201]:Block[32147-32201]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[32161-32191]:ExpressionStatement[32161-32191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32890-33377]:Block[32890-33377]"
    }, {
      "left" : "TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "right" : "TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "info" : "VariableDeclarationStatement[32900-32977]:VariableDeclarationStatement[32900-32977]"
    }, {
      "left" : "String value = cTimeZoneDisplayCache.get(key);",
      "right" : "String value = cTimeZoneDisplayCache.get(key);",
      "info" : "VariableDeclarationStatement[32986-33032]:VariableDeclarationStatement[32986-33032]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[33041-33349]:IfStatement[33041-33349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33060-33349]:Block[33060-33349]"
    }, {
      "left" : "value = tz.getDisplayName(daylight, style, locale);",
      "right" : "value = tz.getDisplayName(daylight, style, locale);",
      "info" : "ExpressionStatement[33137-33188]:ExpressionStatement[33137-33188]"
    }, {
      "left" : "String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);",
      "right" : "String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);",
      "info" : "VariableDeclarationStatement[33201-33262]:VariableDeclarationStatement[33201-33262]"
    }, {
      "left" : "if (prior != null)",
      "right" : "if (prior != null)",
      "info" : "IfStatement[33275-33339]:IfStatement[33275-33339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33294-33339]:Block[33294-33339]"
    }, {
      "left" : "value= prior;",
      "right" : "value= prior;",
      "info" : "ExpressionStatement[33312-33325]:ExpressionStatement[33312-33325]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[33358-33371]:ReturnStatement[33358-33371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34008-34270]:Block[33971-34204]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[34022-34039]:ExpressionStatement[33985-34002]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[34052-34067]:ExpressionStatement[34015-34030]"
    }, {
      "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "info" : "ExpressionStatement[34122-34185]:ExpressionStatement[34056-34119]"
    }, {
      "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "info" : "ExpressionStatement[34198-34260]:ExpressionStatement[34132-34194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34375-34632]:Block[34309-34566]"
    }, {
      "left" : "return Math.max(mStandard.length(), mDaylight.length());",
      "right" : "return Math.max(mStandard.length(), mDaylight.length());",
      "info" : "ReturnStatement[34566-34622]:ReturnStatement[34500-34556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34770-35081]:Block[34704-35067]"
    }, {
      "left" : "if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[34784-35071]:IfStatement[34770-35057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34874-34969]:Block[34860-34955]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));",
      "info" : "ExpressionStatement[34892-34955]:ExpressionStatement[34878-34941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34975-35071]:Block[34961-35057]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));",
      "info" : "ExpressionStatement[34993-35057]:ExpressionStatement[34979-35043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35735-35774]:Block[35721-35760]"
    }, {
      "left" : "mColon = colon;",
      "right" : "mColon = colon;",
      "info" : "ExpressionStatement[35749-35764]:ExpressionStatement[35735-35750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35879-35912]:Block[35865-35898]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[35893-35902]:ReturnStatement[35879-35888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36050-36737]:Block[36036-36723]"
    }, {
      "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "info" : "VariableDeclarationStatement[36064-36148]:VariableDeclarationStatement[36050-36134]"
    }, {
      "left" : "if (offset < 0)",
      "right" : "if (offset < 0)",
      "info" : "IfStatement[36162-36320]:IfStatement[36148-36306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36178-36263]:Block[36164-36249]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[36196-36215]:ExpressionStatement[36182-36201]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[36232-36249]:ExpressionStatement[36218-36235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36269-36320]:Block[36255-36306]"
    }, {
      "left" : "buffer.append('+');",
      "right" : "buffer.append('+');",
      "info" : "ExpressionStatement[36287-36306]:ExpressionStatement[36273-36292]"
    }, {
      "left" : "int hours = offset / (60 * 60 * 1000);",
      "right" : "int hours = offset / (60 * 60 * 1000);",
      "info" : "VariableDeclarationStatement[36334-36372]:VariableDeclarationStatement[36320-36358]"
    }, {
      "left" : "buffer.append((char)(hours / 10 + '0'));",
      "right" : "buffer.append((char)(hours / 10 + '0'));",
      "info" : "ExpressionStatement[36385-36425]:ExpressionStatement[36371-36411]"
    }, {
      "left" : "buffer.append((char)(hours % 10 + '0'));",
      "right" : "buffer.append((char)(hours % 10 + '0'));",
      "info" : "ExpressionStatement[36438-36478]:ExpressionStatement[36424-36464]"
    }, {
      "left" : "if (mColon)",
      "right" : "if (mColon)",
      "info" : "IfStatement[36492-36555]:IfStatement[36478-36541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36504-36555]:Block[36490-36541]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[36522-36541]:ExpressionStatement[36508-36527]"
    }, {
      "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "info" : "VariableDeclarationStatement[36569-36617]:VariableDeclarationStatement[36555-36603]"
    }, {
      "left" : "buffer.append((char)(minutes / 10 + '0'));",
      "right" : "buffer.append((char)(minutes / 10 + '0'));",
      "info" : "ExpressionStatement[36630-36672]:ExpressionStatement[36616-36658]"
    }, {
      "left" : "buffer.append((char)(minutes % 10 + '0'));",
      "right" : "buffer.append((char)(minutes % 10 + '0'));",
      "info" : "ExpressionStatement[36685-36727]:ExpressionStatement[36671-36713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37536-37718]:Block[37522-37704]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[37550-37571]:ExpressionStatement[37536-37557]"
    }, {
      "left" : "if (daylight)",
      "right" : "if (daylight)",
      "info" : "IfStatement[37584-37650]:IfStatement[37570-37636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37598-37650]:Block[37584-37636]"
    }, {
      "left" : "style |= 0x80000000;",
      "right" : "style |= 0x80000000;",
      "info" : "ExpressionStatement[37616-37636]:ExpressionStatement[37602-37622]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[37663-37678]:ExpressionStatement[37649-37664]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[37691-37708]:ExpressionStatement[37677-37694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37817-37912]:Block[37803-37898]"
    }, {
      "left" : "return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();",
      "right" : "return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();",
      "info" : "ReturnStatement[37831-37902]:ReturnStatement[37817-37888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38023-38446]:Block[38009-38432]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[38037-38098]:IfStatement[38023-38084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38054-38098]:Block[38040-38084]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38072-38084]:ReturnStatement[38058-38070]"
    }, {
      "left" : "if (obj instanceof TimeZoneDisplayKey)",
      "right" : "if (obj instanceof TimeZoneDisplayKey)",
      "info" : "IfStatement[38111-38410]:IfStatement[38097-38396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38150-38410]:Block[38136-38396]"
    }, {
      "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "info" : "VariableDeclarationStatement[38168-38219]:VariableDeclarationStatement[38154-38205]"
    }, {
      "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[38236-38396]:ReturnStatement[38222-38382]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38423-38436]:ReturnStatement[38409-38422]"
    } ]
  },
  "interFileMappings" : { }
}