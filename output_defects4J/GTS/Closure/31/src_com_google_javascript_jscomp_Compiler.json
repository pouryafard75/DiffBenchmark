{
  "matchedElements" : [
 {
    "left" : "class : Compiler",
    "right" : "class : Compiler",
    "info" : "TypeDeclaration[2576-73668]:TypeDeclaration[2576-73632]"
  }, {
    "left" : "SINGLETON_MODULE_NAME",
    "right" : "SINGLETON_MODULE_NAME",
    "info" : "FieldDeclaration[3121-3179]:FieldDeclaration[3121-3179]"
  }, {
    "left" : "MODULE_DEPENDENCY_ERROR",
    "right" : "MODULE_DEPENDENCY_ERROR",
    "info" : "FieldDeclaration[3183-3399]:FieldDeclaration[3183-3399]"
  }, {
    "left" : "MISSING_ENTRY_ERROR",
    "right" : "MISSING_ENTRY_ERROR",
    "info" : "FieldDeclaration[3403-3561]:FieldDeclaration[3403-3561]"
  }, {
    "left" : "options",
    "right" : "options",
    "info" : "FieldDeclaration[3565-3596]:FieldDeclaration[3565-3596]"
  }, {
    "left" : "passes",
    "right" : "passes",
    "info" : "FieldDeclaration[3600-3633]:FieldDeclaration[3600-3633]"
  }, {
    "left" : "externs",
    "right" : "externs",
    "info" : "FieldDeclaration[3661-3697]:FieldDeclaration[3661-3697]"
  }, {
    "left" : "modules",
    "right" : "modules",
    "info" : "FieldDeclaration[3728-3759]:FieldDeclaration[3728-3759]"
  }, {
    "left" : "moduleGraph",
    "right" : "moduleGraph",
    "info" : "FieldDeclaration[3913-3947]:FieldDeclaration[3913-3947]"
  }, {
    "left" : "inputs",
    "right" : "inputs",
    "info" : "FieldDeclaration[3977-4012]:FieldDeclaration[3977-4012]"
  }, {
    "left" : "errorManager",
    "right" : "errorManager",
    "info" : "FieldDeclaration[4074-4108]:FieldDeclaration[4074-4108]"
  }, {
    "left" : "warningsGuard",
    "right" : "warningsGuard",
    "info" : "FieldDeclaration[4156-4192]:FieldDeclaration[4156-4192]"
  }, {
    "left" : "injectedLibraries",
    "right" : "injectedLibraries",
    "info" : "FieldDeclaration[4319-4395]:FieldDeclaration[4319-4395]"
  }, {
    "left" : "externsRoot",
    "right" : "externsRoot",
    "info" : "FieldDeclaration[4426-4443]:FieldDeclaration[4426-4443]"
  }, {
    "left" : "jsRoot",
    "right" : "jsRoot",
    "info" : "FieldDeclaration[4446-4458]:FieldDeclaration[4446-4458]"
  }, {
    "left" : "externAndJsRoot",
    "right" : "externAndJsRoot",
    "info" : "FieldDeclaration[4461-4482]:FieldDeclaration[4461-4482]"
  }, {
    "left" : "inputsById",
    "right" : "inputsById",
    "info" : "FieldDeclaration[4486-4533]:FieldDeclaration[4486-4533]"
  }, {
    "left" : "sourceMap",
    "right" : "sourceMap",
    "info" : "FieldDeclaration[4537-4594]:FieldDeclaration[4537-4594]"
  }, {
    "left" : "externExports",
    "right" : "externExports",
    "info" : "FieldDeclaration[4598-4682]:FieldDeclaration[4598-4682]"
  }, {
    "left" : "uniqueNameId",
    "right" : "uniqueNameId",
    "info" : "FieldDeclaration[4686-4806]:FieldDeclaration[4686-4806]"
  }, {
    "left" : "useThreads",
    "right" : "useThreads",
    "info" : "FieldDeclaration[4810-4877]:FieldDeclaration[4810-4877]"
  }, {
    "left" : "hasRegExpGlobalReferences",
    "right" : "hasRegExpGlobalReferences",
    "info" : "FieldDeclaration[4881-5031]:FieldDeclaration[4881-5031]"
  }, {
    "left" : "functionInformationMap",
    "right" : "functionInformationMap",
    "info" : "FieldDeclaration[5035-5127]:FieldDeclaration[5035-5127]"
  }, {
    "left" : "debugLog",
    "right" : "debugLog",
    "info" : "FieldDeclaration[5131-5221]:FieldDeclaration[5131-5221]"
  }, {
    "left" : "defaultCodingConvention",
    "right" : "defaultCodingConvention",
    "info" : "FieldDeclaration[5225-5351]:FieldDeclaration[5225-5351]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[5355-5391]:FieldDeclaration[5355-5391]"
  }, {
    "left" : "parserConfig",
    "right" : "parserConfig",
    "info" : "FieldDeclaration[5394-5429]:FieldDeclaration[5394-5429]"
  }, {
    "left" : "abstractInterpreter",
    "right" : "abstractInterpreter",
    "info" : "FieldDeclaration[5433-5488]:FieldDeclaration[5433-5488]"
  }, {
    "left" : "typeValidator",
    "right" : "typeValidator",
    "info" : "FieldDeclaration[5491-5527]:FieldDeclaration[5491-5527]"
  }, {
    "left" : "tracker",
    "right" : "tracker",
    "info" : "FieldDeclaration[5531-5565]:FieldDeclaration[5531-5565]"
  }, {
    "left" : "oldErrorReporter",
    "right" : "oldErrorReporter",
    "info" : "FieldDeclaration[5648-5766]:FieldDeclaration[5648-5766]"
  }, {
    "left" : "defaultErrorReporter",
    "right" : "defaultErrorReporter",
    "info" : "FieldDeclaration[5844-5938]:FieldDeclaration[5844-5938]"
  }, {
    "left" : "OPTIMIZE_LOOP_ERROR",
    "right" : "OPTIMIZE_LOOP_ERROR",
    "info" : "FieldDeclaration[5942-6166]:FieldDeclaration[5942-6166]"
  }, {
    "left" : "MOTION_ITERATIONS_ERROR",
    "right" : "MOTION_ITERATIONS_ERROR",
    "info" : "FieldDeclaration[6169-6348]:FieldDeclaration[6169-6348]"
  }, {
    "left" : "COMPILER_STACK_SIZE",
    "right" : "COMPILER_STACK_SIZE",
    "info" : "FieldDeclaration[6352-6409]:FieldDeclaration[6352-6409]"
  }, {
    "left" : "logger",
    "right" : "logger",
    "info" : "FieldDeclaration[6414-6689]:FieldDeclaration[6414-6689]"
  }, {
    "left" : "outStream",
    "right" : "outStream",
    "info" : "FieldDeclaration[6693-6729]:FieldDeclaration[6693-6729]"
  }, {
    "left" : "globalRefMap",
    "right" : "globalRefMap",
    "info" : "FieldDeclaration[6733-6783]:FieldDeclaration[6733-6783]"
  }, {
    "left" : "progress",
    "right" : "progress",
    "info" : "FieldDeclaration[6787-6826]:FieldDeclaration[6787-6826]"
  }, {
    "left" : "public Compiler()",
    "right" : "public Compiler()",
    "info" : "MethodDeclaration[6830-6967]:MethodDeclaration[6830-6967]"
  }, {
    "left" : "public Compiler(stream )",
    "right" : "public Compiler(stream )",
    "info" : "MethodDeclaration[6971-7167]:MethodDeclaration[6971-7167]"
  }, {
    "left" : "public Compiler(errorManager )",
    "right" : "public Compiler(errorManager )",
    "info" : "MethodDeclaration[7171-7336]:MethodDeclaration[7171-7336]"
  }, {
    "left" : "public setErrorManager(errorManager ) : void",
    "right" : "public setErrorManager(errorManager ) : void",
    "info" : "MethodDeclaration[7340-7645]:MethodDeclaration[7340-7645]"
  }, {
    "left" : "private createMessageFormatter() : ",
    "right" : "private createMessageFormatter() : ",
    "info" : "MethodDeclaration[7649-7938]:MethodDeclaration[7649-7938]"
  }, {
    "left" : "public initOptions(options ...) : void",
    "right" : "public initOptions(options ...) : void",
    "info" : "MethodDeclaration[7942-10440]:MethodDeclaration[7942-10440]"
  }, {
    "left" : "public init(externs , inputs , options ...) : void",
    "right" : "public init(externs , inputs , options ...) : void",
    "info" : "MethodDeclaration[10444-10730]:MethodDeclaration[10444-10730]"
  }, {
    "left" : "public init(externs , inputs , options ...) : void",
    "right" : "public init(externs , inputs , options ...) : void",
    "info" : "MethodDeclaration[10734-11148]:MethodDeclaration[10734-11148]"
  }, {
    "left" : "public init(externs , modules , options ...) : void",
    "right" : "public init(externs , modules , options ...) : void",
    "info" : "MethodDeclaration[11152-11473]:MethodDeclaration[11152-11473]"
  }, {
    "left" : "public initModules(externs , modules , options ...) : void",
    "right" : "public initModules(externs , modules , options ...) : void",
    "info" : "MethodDeclaration[11477-12559]:MethodDeclaration[11477-12559]"
  }, {
    "left" : "private initBasedOnOptions() : void",
    "right" : "private initBasedOnOptions() : void",
    "info" : "MethodDeclaration[12563-12907]:MethodDeclaration[12563-12907]"
  }, {
    "left" : "private makeCompilerInput(files , isExtern boolean) : ",
    "right" : "private makeCompilerInput(files , isExtern boolean) : ",
    "info" : "MethodDeclaration[12911-13185]:MethodDeclaration[12911-13185]"
  }, {
    "left" : "EMPTY_MODULE_LIST_ERROR",
    "right" : "EMPTY_MODULE_LIST_ERROR",
    "info" : "FieldDeclaration[13189-13359]:FieldDeclaration[13189-13359]"
  }, {
    "left" : "EMPTY_ROOT_MODULE_ERROR",
    "right" : "EMPTY_ROOT_MODULE_ERROR",
    "info" : "FieldDeclaration[13363-13558]:FieldDeclaration[13363-13558]"
  }, {
    "left" : "private checkFirstModule(modules ...) : void",
    "right" : "private checkFirstModule(modules ...) : void",
    "info" : "MethodDeclaration[13562-14081]:MethodDeclaration[13562-14081]"
  }, {
    "left" : "package createFillFileName(moduleName ) : ",
    "right" : "package createFillFileName(moduleName ) : ",
    "info" : "MethodDeclaration[14085-14286]:MethodDeclaration[14085-14286]"
  }, {
    "left" : "private fillEmptyModules(modules ...) : void",
    "right" : "private fillEmptyModules(modules ...) : void",
    "info" : "MethodDeclaration[14290-14658]:MethodDeclaration[14290-14658]"
  }, {
    "left" : "public rebuildInputsFromModules() : void",
    "right" : "public rebuildInputsFromModules() : void",
    "info" : "MethodDeclaration[14662-15020]:MethodDeclaration[14662-15020]"
  }, {
    "left" : "private getAllInputsFromModules(modules ...) : ",
    "right" : "private getAllInputsFromModules(modules ...) : ",
    "info" : "MethodDeclaration[15024-15753]:MethodDeclaration[15024-15753]"
  }, {
    "left" : "DUPLICATE_INPUT",
    "right" : "DUPLICATE_INPUT",
    "info" : "FieldDeclaration[15757-15877]:FieldDeclaration[15757-15877]"
  }, {
    "left" : "DUPLICATE_EXTERN_INPUT",
    "right" : "DUPLICATE_EXTERN_INPUT",
    "info" : "FieldDeclaration[15880-16031]:FieldDeclaration[15880-16031]"
  }, {
    "left" : "package initInputsByIdMap() : void",
    "right" : "package initInputsByIdMap() : void",
    "info" : "MethodDeclaration[16035-16737]:MethodDeclaration[16035-16737]"
  }, {
    "left" : "public compile(extern , input , options ...) : ",
    "right" : "public compile(extern , input , options ...) : ",
    "info" : "MethodDeclaration[16741-16922]:MethodDeclaration[16741-16922]"
  }, {
    "left" : "public compile(extern , input , options ...) : ",
    "right" : "public compile(extern , input , options ...) : ",
    "info" : "MethodDeclaration[16926-17111]:MethodDeclaration[16926-17111]"
  }, {
    "left" : "public compile(extern , modules , options ...) : ",
    "right" : "public compile(extern , modules , options ...) : ",
    "info" : "MethodDeclaration[17115-17319]:MethodDeclaration[17115-17319]"
  }, {
    "left" : "public compile(externs , inputs , options ...) : ",
    "right" : "public compile(externs , inputs , options ...) : ",
    "info" : "MethodDeclaration[17323-17640]:MethodDeclaration[17323-17640]"
  }, {
    "left" : "public compile(externs , inputs , options ...) : ",
    "right" : "public compile(externs , inputs , options ...) : ",
    "info" : "MethodDeclaration[17644-18207]:MethodDeclaration[17644-18207]"
  }, {
    "left" : "public compile(externs , modules , options ...) : ",
    "right" : "public compile(externs , modules , options ...) : ",
    "info" : "MethodDeclaration[18211-18532]:MethodDeclaration[18211-18532]"
  }, {
    "left" : "public compileModules(externs , modules , options ...) : ",
    "right" : "public compileModules(externs , modules , options ...) : ",
    "info" : "MethodDeclaration[18536-19096]:MethodDeclaration[18536-19096]"
  }, {
    "left" : "private compile() : ",
    "right" : "private compile() : ",
    "info" : "MethodDeclaration[19100-19319]:MethodDeclaration[19100-19319]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[19189-19307]:MethodDeclaration[19189-19307]"
  }, {
    "left" : "public disableThreads() : void",
    "right" : "public disableThreads() : void",
    "info" : "MethodDeclaration[19323-19486]:MethodDeclaration[19323-19486]"
  }, {
    "left" : "private runInCompilerThread(callable ) : ",
    "right" : "private runInCompilerThread(callable ) : ",
    "info" : "MethodDeclaration[19490-19626]:MethodDeclaration[19490-19626]"
  }, {
    "left" : "package runCallableWithLargeStack(callable ) : ",
    "right" : "package runCallableWithLargeStack(callable ) : ",
    "info" : "MethodDeclaration[19630-19749]:MethodDeclaration[19630-19749]"
  }, {
    "left" : "package runCallable(callable , useLargeStackThread boolean, trace boolean) : ",
    "right" : "package runCallable(callable , useLargeStackThread boolean, trace boolean) : ",
    "info" : "MethodDeclaration[19753-21348]:MethodDeclaration[19753-21348]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[20459-20832]:MethodDeclaration[20459-20832]"
  }, {
    "left" : "private compileInternal() : void",
    "right" : "private compileInternal() : void",
    "info" : "MethodDeclaration[21352-22400]:MethodDeclaration[21352-22400]"
  }, {
    "left" : "public parse() : void",
    "right" : "public parse() : void",
    "info" : "MethodDeclaration[22404-22448]:MethodDeclaration[22404-22448]"
  }, {
    "left" : "package getPassConfig() : ",
    "right" : "package getPassConfig() : ",
    "info" : "MethodDeclaration[22452-22578]:MethodDeclaration[22452-22578]"
  }, {
    "left" : "package createPassConfigInternal() : ",
    "right" : "package createPassConfigInternal() : ",
    "info" : "MethodDeclaration[22582-22777]:MethodDeclaration[22582-22777]"
  }, {
    "left" : "public setPassConfig(passes ...) : void",
    "right" : "public setPassConfig(passes ...) : void",
    "info" : "MethodDeclaration[22781-23525]:MethodDeclaration[22781-23525]"
  }, {
    "left" : "package precheck() : boolean",
    "right" : "package precheck() : boolean",
    "info" : "MethodDeclaration[23529-23765]:MethodDeclaration[23529-23765]"
  }, {
    "left" : "public check() : void",
    "right" : "public check() : void",
    "info" : "MethodDeclaration[23769-25064]:MethodDeclaration[23769-25064]"
  }, {
    "left" : "private externExports() : void",
    "right" : "private externExports() : void",
    "info" : "MethodDeclaration[25068-25330]:MethodDeclaration[25068-25330]"
  }, {
    "left" : "package process(p ) : void",
    "right" : "package process(p ) : void",
    "info" : "MethodDeclaration[25334-25416]:MethodDeclaration[25334-25416]"
  }, {
    "left" : "sanityCheck",
    "right" : "sanityCheck",
    "info" : "FieldDeclaration[25420-25641]:FieldDeclaration[25420-25641]"
  }, {
    "left" : "protected createInternal(compiler ) : ",
    "right" : "protected createInternal(compiler ) : ",
    "info" : "MethodDeclaration[25510-25636]:MethodDeclaration[25510-25636]"
  }, {
    "left" : "private maybeSanityCheck() : void",
    "right" : "private maybeSanityCheck() : void",
    "info" : "MethodDeclaration[25645-25761]:MethodDeclaration[25645-25761]"
  }, {
    "left" : "private runSanityCheck() : void",
    "right" : "private runSanityCheck() : void",
    "info" : "MethodDeclaration[25765-25859]:MethodDeclaration[25765-25859]"
  }, {
    "left" : "package removeTryCatchFinally() : void",
    "right" : "package removeTryCatchFinally() : void",
    "info" : "MethodDeclaration[25863-26138]:MethodDeclaration[25863-26138]"
  }, {
    "left" : "package stripCode(stripTypes , stripNameSuffixes , stripTypePrefixes , stripNamePrefixes ...) : void",
    "right" : "package stripCode(stripTypes , stripNameSuffixes , stripTypePrefixes , stripNamePrefixes ...) : void",
    "info" : "MethodDeclaration[26142-26723]:MethodDeclaration[26142-26723]"
  }, {
    "left" : "private runCustomPasses(executionTime ) : void",
    "right" : "private runCustomPasses(executionTime ) : void",
    "info" : "MethodDeclaration[26727-27163]:MethodDeclaration[26727-27163]"
  }, {
    "left" : "currentTracer",
    "right" : "currentTracer",
    "info" : "FieldDeclaration[27167-27203]:FieldDeclaration[27167-27203]"
  }, {
    "left" : "currentPassName",
    "right" : "currentPassName",
    "info" : "FieldDeclaration[27206-27244]:FieldDeclaration[27206-27244]"
  }, {
    "left" : "package startPass(passName ) : void",
    "right" : "package startPass(passName ) : void",
    "info" : "MethodDeclaration[27248-27459]:MethodDeclaration[27248-27459]"
  }, {
    "left" : "package endPass() : void",
    "right" : "package endPass() : void",
    "info" : "MethodDeclaration[27463-27806]:MethodDeclaration[27463-27806]"
  }, {
    "left" : "package newTracer(passName ) : ",
    "right" : "package newTracer(passName ) : ",
    "info" : "MethodDeclaration[27810-28143]:MethodDeclaration[27810-28143]"
  }, {
    "left" : "package stopTracer(t , passName ) : void",
    "right" : "package stopTracer(t , passName ) : void",
    "info" : "MethodDeclaration[28147-28310]:MethodDeclaration[28147-28310]"
  }, {
    "left" : "public getResult() : ",
    "right" : "public getResult() : ",
    "info" : "MethodDeclaration[28314-28741]:MethodDeclaration[28314-28741]"
  }, {
    "left" : "public getMessages() : ",
    "right" : "public getMessages() : ",
    "info" : "MethodDeclaration[28745-28885]:MethodDeclaration[28745-28885]"
  }, {
    "left" : "public getErrors() : ",
    "right" : "public getErrors() : ",
    "info" : "MethodDeclaration[28889-29019]:MethodDeclaration[28889-29019]"
  }, {
    "left" : "public getWarnings() : ",
    "right" : "public getWarnings() : ",
    "info" : "MethodDeclaration[29023-29159]:MethodDeclaration[29023-29159]"
  }, {
    "left" : "public getRoot() : ",
    "right" : "public getRoot() : ",
    "info" : "MethodDeclaration[29163-29230]:MethodDeclaration[29163-29230]"
  }, {
    "left" : "private nextUniqueNameId() : int",
    "right" : "private nextUniqueNameId() : int",
    "info" : "MethodDeclaration[29234-29356]:MethodDeclaration[29234-29356]"
  }, {
    "left" : "package resetUniqueNameId() : void",
    "right" : "package resetUniqueNameId() : void",
    "info" : "MethodDeclaration[29360-29484]:MethodDeclaration[29360-29484]"
  }, {
    "left" : "package getUniqueNameIdSupplier() : ",
    "right" : "package getUniqueNameIdSupplier() : ",
    "info" : "MethodDeclaration[29488-29731]:MethodDeclaration[29488-29731]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[29619-29720]:MethodDeclaration[29619-29720]"
  }, {
    "left" : "package areNodesEqualForInlining(n1 , n2 ) : boolean",
    "right" : "package areNodesEqualForInlining(n1 , n2 ) : boolean",
    "info" : "MethodDeclaration[29735-30098]:MethodDeclaration[29735-30098]"
  }, {
    "left" : "public getInput(id ) : ",
    "right" : "public getInput(id ) : ",
    "info" : "MethodDeclaration[30409-30499]:MethodDeclaration[30409-30499]"
  }, {
    "left" : "protected removeExternInput(id ) : void",
    "right" : "protected removeExternInput(id ) : void",
    "info" : "MethodDeclaration[30503-30984]:MethodDeclaration[30503-30984]"
  }, {
    "left" : "public newExternInput(name ) : ",
    "right" : "public newExternInput(name ) : ",
    "info" : "MethodDeclaration[30988-31440]:MethodDeclaration[30988-31440]"
  }, {
    "left" : "private putCompilerInput(id , input ) : ",
    "right" : "private putCompilerInput(id , input ) : ",
    "info" : "MethodDeclaration[31444-31588]:MethodDeclaration[31444-31588]"
  }, {
    "left" : "package addIncrementalSourceAst(ast ) : void",
    "right" : "package addIncrementalSourceAst(ast ) : void",
    "info" : "MethodDeclaration[31592-31891]:MethodDeclaration[31592-31891]"
  }, {
    "left" : "package replaceIncrementalSourceAst(ast ) : boolean",
    "right" : "package replaceIncrementalSourceAst(ast ) : boolean",
    "info" : "MethodDeclaration[31895-33255]:MethodDeclaration[31895-33255]"
  }, {
    "left" : "package addNewSourceAst(ast ) : boolean",
    "right" : "package addNewSourceAst(ast ) : boolean",
    "info" : "MethodDeclaration[33259-34353]:MethodDeclaration[33259-34353]"
  }, {
    "left" : "package getModuleGraph() : ",
    "right" : "package getModuleGraph() : ",
    "info" : "MethodDeclaration[34357-34429]:MethodDeclaration[34357-34429]"
  }, {
    "left" : "package getDegenerateModuleGraph() : ",
    "right" : "package getDegenerateModuleGraph() : ",
    "info" : "MethodDeclaration[34433-34695]:MethodDeclaration[34433-34695]"
  }, {
    "left" : "public getTypeRegistry() : ",
    "right" : "public getTypeRegistry() : ",
    "info" : "MethodDeclaration[34699-34898]:MethodDeclaration[34699-34898]"
  }, {
    "left" : "public getTypedScopeCreator() : ",
    "right" : "public getTypedScopeCreator() : ",
    "info" : "MethodDeclaration[34902-35021]:MethodDeclaration[34902-35021]"
  }, {
    "left" : "package ensureDefaultPassConfig() : ",
    "right" : "package ensureDefaultPassConfig() : ",
    "info" : "MethodDeclaration[35025-35347]:MethodDeclaration[35025-35347]"
  }, {
    "left" : "public buildKnownSymbolTable() : ",
    "right" : "public buildKnownSymbolTable() : ",
    "info" : "MethodDeclaration[35351-36740]:MethodDeclaration[35351-36740]"
  }, {
    "left" : "public getTopScope() : ",
    "right" : "public getTopScope() : ",
    "info" : "MethodDeclaration[36744-36830]:MethodDeclaration[36744-36830]"
  }, {
    "left" : "public getReverseAbstractInterpreter() : ",
    "right" : "public getReverseAbstractInterpreter() : ",
    "info" : "MethodDeclaration[36834-37399]:MethodDeclaration[36834-37399]"
  }, {
    "left" : "package getTypeValidator() : ",
    "right" : "package getTypeValidator() : ",
    "info" : "MethodDeclaration[37403-37565]:MethodDeclaration[37403-37565]"
  }, {
    "left" : "package parseInputs() : ",
    "right" : "package parseInputs() : ",
    "info" : "MethodDeclaration[37737-42394]:MethodDeclaration[37737-42358]"
  }, {
    "left" : "package processAMDAndCommonJSModules() : void",
    "right" : "package processAMDAndCommonJSModules() : void",
    "info" : "MethodDeclaration[42398-44740]:MethodDeclaration[42362-44704]"
  }, {
    "left" : "public parse(file ) : ",
    "right" : "public parse(file ) : ",
    "info" : "MethodDeclaration[44744-44914]:MethodDeclaration[44708-44878]"
  }, {
    "left" : "syntheticCodeId",
    "right" : "syntheticCodeId",
    "info" : "FieldDeclaration[44918-44950]:FieldDeclaration[44882-44914]"
  }, {
    "left" : "package parseSyntheticCode(js ...) : ",
    "right" : "package parseSyntheticCode(js ...) : ",
    "info" : "MethodDeclaration[44954-45214]:MethodDeclaration[44918-45178]"
  }, {
    "left" : "protected newCompilerOptions() : ",
    "right" : "protected newCompilerOptions() : ",
    "info" : "MethodDeclaration[45218-45385]:MethodDeclaration[45182-45349]"
  }, {
    "left" : "package initCompilerOptionsIfTesting() : void",
    "right" : "package initCompilerOptionsIfTesting() : void",
    "info" : "MethodDeclaration[45389-45608]:MethodDeclaration[45353-45572]"
  }, {
    "left" : "package parseSyntheticCode(fileName , js ...) : ",
    "right" : "package parseSyntheticCode(fileName , js ...) : ",
    "info" : "MethodDeclaration[45612-45770]:MethodDeclaration[45576-45734]"
  }, {
    "left" : "package parseTestCode(js ...) : ",
    "right" : "package parseTestCode(js ...) : ",
    "info" : "MethodDeclaration[45774-46108]:MethodDeclaration[45738-46072]"
  }, {
    "left" : "package getDefaultErrorReporter() : ",
    "right" : "package getDefaultErrorReporter() : ",
    "info" : "MethodDeclaration[46112-46202]:MethodDeclaration[46076-46166]"
  }, {
    "left" : "public toSource() : ",
    "right" : "public toSource() : ",
    "info" : "MethodDeclaration[46394-47108]:MethodDeclaration[46358-47072]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[46546-47096]:MethodDeclaration[46510-47060]"
  }, {
    "left" : "public toSourceArray() : ",
    "right" : "public toSourceArray() : ",
    "info" : "MethodDeclaration[47112-47904]:MethodDeclaration[47076-47868]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[47283-47892]:MethodDeclaration[47247-47856]"
  }, {
    "left" : "public toSource(module ) : ",
    "right" : "public toSource(module ) : ",
    "info" : "MethodDeclaration[47908-48707]:MethodDeclaration[47872-48671]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[48089-48695]:MethodDeclaration[48053-48659]"
  }, {
    "left" : "public toSourceArray(module ) : ",
    "right" : "public toSourceArray(module ) : ",
    "info" : "MethodDeclaration[48712-49666]:MethodDeclaration[48676-49630]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[48916-49654]:MethodDeclaration[48880-49618]"
  }, {
    "left" : "public toSource(cb , inputSeqNum int, root ) : void",
    "right" : "public toSource(cb , inputSeqNum int, root ) : void",
    "info" : "MethodDeclaration[49670-52445]:MethodDeclaration[49634-52409]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[50207-52433]:MethodDeclaration[50171-52397]"
  }, {
    "left" : "package toSource(n ) : ",
    "right" : "package toSource(n ) : ",
    "info" : "MethodDeclaration[52449-52663]:MethodDeclaration[52413-52627]"
  }, {
    "left" : "private toSource(n , sourceMap , firstOutput boolean) : ",
    "right" : "private toSource(n , sourceMap , firstOutput boolean) : ",
    "info" : "MethodDeclaration[52667-53502]:MethodDeclaration[52631-53466]"
  }, {
    "left" : "class : CodeBuilder",
    "right" : "class : CodeBuilder",
    "info" : "TypeDeclaration[53506-55251]:TypeDeclaration[53470-55215]"
  }, {
    "left" : "sb",
    "right" : "sb",
    "info" : "FieldDeclaration[53703-53756]:FieldDeclaration[53667-53720]"
  }, {
    "left" : "lineCount",
    "right" : "lineCount",
    "info" : "FieldDeclaration[53761-53787]:FieldDeclaration[53725-53751]"
  }, {
    "left" : "colCount",
    "right" : "colCount",
    "info" : "FieldDeclaration[53792-53817]:FieldDeclaration[53756-53781]"
  }, {
    "left" : "package reset() : void",
    "right" : "package reset() : void",
    "info" : "MethodDeclaration[53823-53932]:MethodDeclaration[53787-53896]"
  }, {
    "left" : "package append(str ) : ",
    "right" : "package append(str ) : ",
    "info" : "MethodDeclaration[53938-54504]:MethodDeclaration[53902-54468]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[54510-54632]:MethodDeclaration[54474-54596]"
  }, {
    "left" : "public getLength() : int",
    "right" : "public getLength() : int",
    "info" : "MethodDeclaration[54638-54744]:MethodDeclaration[54602-54708]"
  }, {
    "left" : "package getLineIndex() : int",
    "right" : "package getLineIndex() : int",
    "info" : "MethodDeclaration[54750-54879]:MethodDeclaration[54714-54843]"
  }, {
    "left" : "package getColumnIndex() : int",
    "right" : "package getColumnIndex() : int",
    "info" : "MethodDeclaration[54885-55017]:MethodDeclaration[54849-54981]"
  }, {
    "left" : "package endsWith(suffix ) : boolean",
    "right" : "package endsWith(suffix ) : boolean",
    "info" : "MethodDeclaration[55023-55247]:MethodDeclaration[54987-55211]"
  }, {
    "left" : "public optimize() : void",
    "right" : "public optimize() : void",
    "info" : "MethodDeclaration[55429-56081]:MethodDeclaration[55393-56045]"
  }, {
    "left" : "package setCssRenamingMap(map ) : void",
    "right" : "package setCssRenamingMap(map ) : void",
    "info" : "MethodDeclaration[56085-56179]:MethodDeclaration[56049-56143]"
  }, {
    "left" : "package getCssRenamingMap() : ",
    "right" : "package getCssRenamingMap() : ",
    "info" : "MethodDeclaration[56183-56270]:MethodDeclaration[56147-56234]"
  }, {
    "left" : "public processDefines() : void",
    "right" : "public processDefines() : void",
    "info" : "MethodDeclaration[56274-56761]:MethodDeclaration[56238-56725]"
  }, {
    "left" : "package isInliningForbidden() : boolean",
    "right" : "package isInliningForbidden() : boolean",
    "info" : "MethodDeclaration[56765-56968]:MethodDeclaration[56729-56932]"
  }, {
    "left" : "package computeCFG() : ",
    "right" : "package computeCFG() : ",
    "info" : "MethodDeclaration[56972-57294]:MethodDeclaration[56936-57258]"
  }, {
    "left" : "public normalize() : void",
    "right" : "public normalize() : void",
    "info" : "MethodDeclaration[57298-57443]:MethodDeclaration[57262-57407]"
  }, {
    "left" : "package prepareAst(root ) : void",
    "right" : "package prepareAst(root ) : void",
    "info" : "MethodDeclaration[57447-57567]:MethodDeclaration[57411-57531]"
  }, {
    "left" : "package recordFunctionInformation() : void",
    "right" : "package recordFunctionInformation() : void",
    "info" : "MethodDeclaration[57571-57985]:MethodDeclaration[57535-57949]"
  }, {
    "left" : "recentChange",
    "right" : "recentChange",
    "info" : "FieldDeclaration[57989-58094]:FieldDeclaration[57953-58058]"
  }, {
    "left" : "codeChangeHandlers",
    "right" : "codeChangeHandlers",
    "info" : "FieldDeclaration[58097-58202]:FieldDeclaration[58061-58166]"
  }, {
    "left" : "SYNTHETIC_EXTERNS",
    "right" : "SYNTHETIC_EXTERNS",
    "info" : "FieldDeclaration[58206-58339]:FieldDeclaration[58170-58303]"
  }, {
    "left" : "synthesizedExternsInput",
    "right" : "synthesizedExternsInput",
    "info" : "FieldDeclaration[58343-58396]:FieldDeclaration[58307-58360]"
  }, {
    "left" : "package addChangeHandler(handler ) : void",
    "right" : "package addChangeHandler(handler ) : void",
    "info" : "MethodDeclaration[58400-58503]:MethodDeclaration[58364-58467]"
  }, {
    "left" : "package removeChangeHandler(handler ) : void",
    "right" : "package removeChangeHandler(handler ) : void",
    "info" : "MethodDeclaration[58507-58616]:MethodDeclaration[58471-58580]"
  }, {
    "left" : "public reportCodeChange() : void",
    "right" : "public reportCodeChange() : void",
    "info" : "MethodDeclaration[58620-58954]:MethodDeclaration[58584-58918]"
  }, {
    "left" : "public getCodingConvention() : ",
    "right" : "public getCodingConvention() : ",
    "info" : "MethodDeclaration[58958-59185]:MethodDeclaration[58922-59149]"
  }, {
    "left" : "public isIdeMode() : boolean",
    "right" : "public isIdeMode() : boolean",
    "info" : "MethodDeclaration[59189-59261]:MethodDeclaration[59153-59225]"
  }, {
    "left" : "public acceptEcmaScript5() : boolean",
    "right" : "public acceptEcmaScript5() : boolean",
    "info" : "MethodDeclaration[59265-59456]:MethodDeclaration[59229-59420]"
  }, {
    "left" : "public languageMode() : ",
    "right" : "public languageMode() : ",
    "info" : "MethodDeclaration[59460-59536]:MethodDeclaration[59424-59500]"
  }, {
    "left" : "public acceptConstKeyword() : boolean",
    "right" : "public acceptConstKeyword() : boolean",
    "info" : "MethodDeclaration[59540-59632]:MethodDeclaration[59504-59596]"
  }, {
    "left" : "package getParserConfig() : ",
    "right" : "package getParserConfig() : ",
    "info" : "MethodDeclaration[59636-60356]:MethodDeclaration[59600-60320]"
  }, {
    "left" : "public isTypeCheckingEnabled() : boolean",
    "right" : "public isTypeCheckingEnabled() : boolean",
    "info" : "MethodDeclaration[60360-60447]:MethodDeclaration[60324-60411]"
  }, {
    "left" : "protected getDiagnosticGroups() : ",
    "right" : "protected getDiagnosticGroups() : ",
    "info" : "MethodDeclaration[60628-60859]:MethodDeclaration[60592-60823]"
  }, {
    "left" : "public report(error ) : void",
    "right" : "public report(error ) : void",
    "info" : "MethodDeclaration[60863-61304]:MethodDeclaration[60827-61268]"
  }, {
    "left" : "public getErrorLevel(error ) : ",
    "right" : "public getErrorLevel(error ) : ",
    "info" : "MethodDeclaration[61308-61452]:MethodDeclaration[61272-61416]"
  }, {
    "left" : "package throwInternalError(message , cause ) : void",
    "right" : "package throwInternalError(message , cause ) : void",
    "info" : "MethodDeclaration[61456-61844]:MethodDeclaration[61420-61808]"
  }, {
    "left" : "public getErrorCount() : int",
    "right" : "public getErrorCount() : int",
    "info" : "MethodDeclaration[61849-61966]:MethodDeclaration[61813-61930]"
  }, {
    "left" : "public getWarningCount() : int",
    "right" : "public getWarningCount() : int",
    "info" : "MethodDeclaration[61970-62093]:MethodDeclaration[61934-62057]"
  }, {
    "left" : "package hasHaltingErrors() : boolean",
    "right" : "package hasHaltingErrors() : boolean",
    "info" : "MethodDeclaration[62097-62189]:MethodDeclaration[62061-62153]"
  }, {
    "left" : "public hasErrors() : boolean",
    "right" : "public hasErrors() : boolean",
    "info" : "MethodDeclaration[62193-62674]:MethodDeclaration[62157-62638]"
  }, {
    "left" : "package addToDebugLog(str ) : void",
    "right" : "package addToDebugLog(str ) : void",
    "info" : "MethodDeclaration[62678-62859]:MethodDeclaration[62642-62823]"
  }, {
    "left" : "private getSourceFileByName(sourceName ) : ",
    "right" : "private getSourceFileByName(sourceName ) : ",
    "info" : "MethodDeclaration[62863-63236]:MethodDeclaration[62827-63200]"
  }, {
    "left" : "public getSourceLine(sourceName , lineNumber int) : ",
    "right" : "public getSourceLine(sourceName , lineNumber int) : ",
    "info" : "MethodDeclaration[63240-63515]:MethodDeclaration[63204-63479]"
  }, {
    "left" : "public getSourceRegion(sourceName , lineNumber int) : ",
    "right" : "public getSourceRegion(sourceName , lineNumber int) : ",
    "info" : "MethodDeclaration[63519-63798]:MethodDeclaration[63483-63762]"
  }, {
    "left" : "package getNodeForCodeInsertion(module ) : ",
    "right" : "package getNodeForCodeInsertion(module ) : ",
    "info" : "MethodDeclaration[63986-64437]:MethodDeclaration[63950-64401]"
  }, {
    "left" : "public getSourceMap() : ",
    "right" : "public getSourceMap() : ",
    "info" : "MethodDeclaration[64441-64500]:MethodDeclaration[64405-64464]"
  }, {
    "left" : "package getVariableMap() : ",
    "right" : "package getVariableMap() : ",
    "info" : "MethodDeclaration[64504-64601]:MethodDeclaration[64468-64565]"
  }, {
    "left" : "package getPropertyMap() : ",
    "right" : "package getPropertyMap() : ",
    "info" : "MethodDeclaration[64605-64702]:MethodDeclaration[64569-64666]"
  }, {
    "left" : "package getOptions() : ",
    "right" : "package getOptions() : ",
    "info" : "MethodDeclaration[64706-64760]:MethodDeclaration[64670-64724]"
  }, {
    "left" : "package getFunctionalInformationMap() : ",
    "right" : "package getFunctionalInformationMap() : ",
    "info" : "MethodDeclaration[64764-64857]:MethodDeclaration[64728-64821]"
  }, {
    "left" : "public setLoggingLevel(level ) : void",
    "right" : "public setLoggingLevel(level ) : void",
    "info" : "MethodDeclaration[64861-65028]:MethodDeclaration[64825-64992]"
  }, {
    "left" : "public getAstDotGraph() : ",
    "right" : "public getAstDotGraph() : ",
    "info" : "MethodDeclaration[65032-65389]:MethodDeclaration[64996-65353]"
  }, {
    "left" : "public getErrorManager() : ",
    "right" : "public getErrorManager() : ",
    "info" : "MethodDeclaration[65393-65547]:MethodDeclaration[65357-65511]"
  }, {
    "left" : "package getInputsInOrder() : ",
    "right" : "package getInputsInOrder() : ",
    "info" : "MethodDeclaration[65551-65671]:MethodDeclaration[65515-65635]"
  }, {
    "left" : "public getInputsById() : ",
    "right" : "public getInputsById() : ",
    "info" : "MethodDeclaration[65675-65867]:MethodDeclaration[65639-65831]"
  }, {
    "left" : "package getExternsInOrder() : ",
    "right" : "package getExternsInOrder() : ",
    "info" : "MethodDeclaration[65871-66063]:MethodDeclaration[65835-66027]"
  }, {
    "left" : "class : IntermediateState",
    "right" : "class : IntermediateState",
    "info" : "TypeDeclaration[66067-67180]:TypeDeclaration[66031-67144]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[66731-66779]:FieldDeclaration[66695-66743]"
  }, {
    "left" : "externsRoot",
    "right" : "externsRoot",
    "info" : "FieldDeclaration[66785-66802]:FieldDeclaration[66749-66766]"
  }, {
    "left" : "jsRoot",
    "right" : "jsRoot",
    "info" : "FieldDeclaration[66807-66827]:FieldDeclaration[66771-66791]"
  }, {
    "left" : "externs",
    "right" : "externs",
    "info" : "FieldDeclaration[66832-66868]:FieldDeclaration[66796-66832]"
  }, {
    "left" : "inputs",
    "right" : "inputs",
    "info" : "FieldDeclaration[66873-66908]:FieldDeclaration[66837-66872]"
  }, {
    "left" : "modules",
    "right" : "modules",
    "info" : "FieldDeclaration[66913-66944]:FieldDeclaration[66877-66908]"
  }, {
    "left" : "passConfigState",
    "right" : "passConfigState",
    "info" : "FieldDeclaration[66949-66990]:FieldDeclaration[66913-66954]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[66995-67031]:FieldDeclaration[66959-66995]"
  }, {
    "left" : "lifeCycleStage",
    "right" : "lifeCycleStage",
    "info" : "FieldDeclaration[67036-67091]:FieldDeclaration[67000-67055]"
  }, {
    "left" : "injectedLibraries",
    "right" : "injectedLibraries",
    "info" : "FieldDeclaration[67096-67140]:FieldDeclaration[67060-67104]"
  }, {
    "left" : "private IntermediateState()",
    "right" : "private IntermediateState()",
    "info" : "MethodDeclaration[67146-67176]:MethodDeclaration[67110-67140]"
  }, {
    "left" : "public getState() : ",
    "right" : "public getState() : ",
    "info" : "MethodDeclaration[67184-67767]:MethodDeclaration[67148-67731]"
  }, {
    "left" : "public setState(state ) : void",
    "right" : "public setState(state ) : void",
    "info" : "MethodDeclaration[67771-68381]:MethodDeclaration[67735-68345]"
  }, {
    "left" : "package getInputsForTesting() : ",
    "right" : "package getInputsForTesting() : ",
    "info" : "MethodDeclaration[68385-68472]:MethodDeclaration[68349-68436]"
  }, {
    "left" : "package getExternsForTesting() : ",
    "right" : "package getExternsForTesting() : ",
    "info" : "MethodDeclaration[68476-68565]:MethodDeclaration[68440-68529]"
  }, {
    "left" : "package hasRegExpGlobalReferences() : boolean",
    "right" : "package hasRegExpGlobalReferences() : boolean",
    "info" : "MethodDeclaration[68569-68660]:MethodDeclaration[68533-68624]"
  }, {
    "left" : "package setHasRegExpGlobalReferences(references boolean) : void",
    "right" : "package setHasRegExpGlobalReferences(references boolean) : void",
    "info" : "MethodDeclaration[68664-68779]:MethodDeclaration[68628-68743]"
  }, {
    "left" : "package updateGlobalVarReferences(refMapPatch , collectionRoot ) : void",
    "right" : "package updateGlobalVarReferences(refMapPatch , collectionRoot ) : void",
    "info" : "MethodDeclaration[68783-69204]:MethodDeclaration[68747-69168]"
  }, {
    "left" : "package getGlobalVarReferences() : ",
    "right" : "package getGlobalVarReferences() : ",
    "info" : "MethodDeclaration[69208-69297]:MethodDeclaration[69172-69261]"
  }, {
    "left" : "package getSynthesizedExternsInput() : ",
    "right" : "package getSynthesizedExternsInput() : ",
    "info" : "MethodDeclaration[69301-69513]:MethodDeclaration[69265-69477]"
  }, {
    "left" : "public getProgress() : double",
    "right" : "public getProgress() : double",
    "info" : "MethodDeclaration[69517-69583]:MethodDeclaration[69481-69547]"
  }, {
    "left" : "package setProgress(newProgress double) : void",
    "right" : "package setProgress(newProgress double) : void",
    "info" : "MethodDeclaration[69587-69799]:MethodDeclaration[69551-69763]"
  }, {
    "left" : "public replaceScript(ast ) : void",
    "right" : "public replaceScript(ast ) : void",
    "info" : "MethodDeclaration[69803-70347]:MethodDeclaration[69767-70311]"
  }, {
    "left" : "public addNewScript(ast ) : void",
    "right" : "public addNewScript(ast ) : void",
    "info" : "MethodDeclaration[70351-70942]:MethodDeclaration[70315-70906]"
  }, {
    "left" : "private processNewScript(ast , originalRoot ) : void",
    "right" : "private processNewScript(ast , originalRoot ) : void",
    "info" : "MethodDeclaration[70946-71520]:MethodDeclaration[70910-71484]"
  }, {
    "left" : "private runHotSwap(originalRoot , js , passConfig ) : void",
    "right" : "private runHotSwap(originalRoot , js , passConfig ) : void",
    "info" : "MethodDeclaration[71524-71823]:MethodDeclaration[71488-71787]"
  }, {
    "left" : "private runHotSwapPass(originalRoot , js , passFactory ) : void",
    "right" : "private runHotSwapPass(originalRoot , js , passFactory ) : void",
    "info" : "MethodDeclaration[71827-72134]:MethodDeclaration[71791-72098]"
  }, {
    "left" : "private getCleanupPassConfig() : ",
    "right" : "private getCleanupPassConfig() : ",
    "info" : "MethodDeclaration[72138-72229]:MethodDeclaration[72102-72193]"
  }, {
    "left" : "private removeSyntheticVarsInput() : void",
    "right" : "private removeSyntheticVarsInput() : void",
    "info" : "MethodDeclaration[72233-72378]:MethodDeclaration[72197-72342]"
  }, {
    "left" : "package ensureLibraryInjected(resourceName ) : ",
    "right" : "package ensureLibraryInjected(resourceName ) : ",
    "info" : "MethodDeclaration[72382-73119]:MethodDeclaration[72346-73083]"
  }, {
    "left" : "package loadLibraryCode(resourceName ) : ",
    "right" : "package loadLibraryCode(resourceName ) : ",
    "info" : "MethodDeclaration[73123-73666]:MethodDeclaration[73087-73630]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3070-3076]:Modifier[3070-3076]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[3077-3082]:TYPE_DECLARATION_KIND[3077-3082]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6914-6920]:Modifier[6914-6920]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[6921-6929]:SimpleName[6921-6929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6932-6967]:Block[6932-6967]"
  }, {
    "left" : "this((PrintStream) null);",
    "right" : "this((PrintStream) null);",
    "info" : "ConstructorInvocation[6938-6963]:ConstructorInvocation[6938-6963]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7066-7072]:Modifier[7066-7072]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[7073-7081]:SimpleName[7073-7081]"
  }, {
    "left" : "PrintStream stream",
    "right" : "PrintStream stream",
    "info" : "SingleVariableDeclaration[7082-7100]:SingleVariableDeclaration[7082-7100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7102-7167]:Block[7102-7167]"
  }, {
    "left" : "addChangeHandler(recentChange);",
    "right" : "addChangeHandler(recentChange);",
    "info" : "ExpressionStatement[7108-7139]:ExpressionStatement[7108-7139]"
  }, {
    "left" : "outStream = stream;",
    "right" : "outStream = stream;",
    "info" : "ExpressionStatement[7144-7163]:ExpressionStatement[7144-7163]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7241-7247]:Modifier[7241-7247]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[7248-7256]:SimpleName[7248-7256]"
  }, {
    "left" : "ErrorManager errorManager",
    "right" : "ErrorManager errorManager",
    "info" : "SingleVariableDeclaration[7257-7282]:SingleVariableDeclaration[7257-7282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7284-7336]:Block[7284-7336]"
  }, {
    "left" : "this();",
    "right" : "this();",
    "info" : "ConstructorInvocation[7290-7297]:ConstructorInvocation[7290-7297]"
  }, {
    "left" : "setErrorManager(errorManager);",
    "right" : "setErrorManager(errorManager);",
    "info" : "ExpressionStatement[7302-7332]:ExpressionStatement[7302-7332]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7456-7462]:Modifier[7456-7462]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7463-7467]:PrimitiveType[7463-7467]"
  }, {
    "left" : "setErrorManager",
    "right" : "setErrorManager",
    "info" : "SimpleName[7468-7483]:SimpleName[7468-7483]"
  }, {
    "left" : "ErrorManager errorManager",
    "right" : "ErrorManager errorManager",
    "info" : "SingleVariableDeclaration[7484-7509]:SingleVariableDeclaration[7484-7509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7511-7645]:Block[7511-7645]"
  }, {
    "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
    "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
    "info" : "ExpressionStatement[7517-7603]:ExpressionStatement[7517-7603]"
  }, {
    "left" : "this.errorManager = errorManager;",
    "right" : "this.errorManager = errorManager;",
    "info" : "ExpressionStatement[7608-7641]:ExpressionStatement[7608-7641]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7763-7770]:Modifier[7763-7770]"
  }, {
    "left" : "MessageFormatter",
    "right" : "MessageFormatter",
    "info" : "SimpleType[7771-7787]:SimpleType[7771-7787]"
  }, {
    "left" : "createMessageFormatter",
    "right" : "createMessageFormatter",
    "info" : "SimpleName[7788-7810]:SimpleName[7788-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7813-7938]:Block[7813-7938]"
  }, {
    "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
    "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
    "info" : "VariableDeclarationStatement[7819-7874]:VariableDeclarationStatement[7819-7874]"
  }, {
    "left" : "return options.errorFormat.toFormatter(this, colorize);",
    "right" : "return options.errorFormat.toFormatter(this, colorize);",
    "info" : "ReturnStatement[7879-7934]:ReturnStatement[7879-7934]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8056-8062]:Modifier[8056-8062]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8063-8067]:PrimitiveType[8063-8067]"
  }, {
    "left" : "initOptions",
    "right" : "initOptions",
    "info" : "SimpleName[8068-8079]:SimpleName[8068-8079]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[8080-8103]:SingleVariableDeclaration[8080-8103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8105-10440]:Block[8105-10440]"
  }, {
    "left" : "this.options = options;",
    "right" : "this.options = options;",
    "info" : "ExpressionStatement[8111-8134]:ExpressionStatement[8111-8134]"
  }, {
    "left" : "if (errorManager == null)",
    "right" : "if (errorManager == null)",
    "info" : "IfStatement[8139-8543]:IfStatement[8139-8543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8165-8543]:Block[8165-8543]"
  }, {
    "left" : "if (outStream == null)",
    "right" : "if (outStream == null)",
    "info" : "IfStatement[8173-8537]:IfStatement[8173-8537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8196-8301]:Block[8196-8301]"
  }, {
    "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
    "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
    "info" : "ExpressionStatement[8206-8293]:ExpressionStatement[8206-8293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8307-8537]:Block[8307-8537]"
  }, {
    "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
    "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
    "info" : "VariableDeclarationStatement[8317-8428]:VariableDeclarationStatement[8317-8428]"
  }, {
    "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
    "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
    "info" : "ExpressionStatement[8437-8495]:ExpressionStatement[8437-8495]"
  }, {
    "left" : "setErrorManager(printer);",
    "right" : "setErrorManager(printer);",
    "info" : "ExpressionStatement[8504-8529]:ExpressionStatement[8504-8529]"
  }, {
    "left" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
    "right" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
    "info" : "IfStatement[8611-9144]:IfStatement[8611-9144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8662-8702]:Block[8662-8702]"
  }, {
    "left" : "options.checkTypes = true;",
    "right" : "options.checkTypes = true;",
    "info" : "ExpressionStatement[8670-8696]:ExpressionStatement[8670-8696]"
  }, {
    "left" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
    "right" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
    "info" : "IfStatement[8708-9144]:IfStatement[8708-9144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8760-8801]:Block[8760-8801]"
  }, {
    "left" : "options.checkTypes = false;",
    "right" : "options.checkTypes = false;",
    "info" : "ExpressionStatement[8768-8795]:ExpressionStatement[8768-8795]"
  }, {
    "left" : "if (!options.checkTypes)",
    "right" : "if (!options.checkTypes)",
    "info" : "IfStatement[8807-9144]:IfStatement[8807-9144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8832-9144]:Block[8832-9144]"
  }, {
    "left" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
    "right" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
    "info" : "ExpressionStatement[9000-9138]:ExpressionStatement[9000-9138]"
  }, {
    "left" : "if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS))",
    "right" : "if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS))",
    "info" : "IfStatement[9150-9369]:IfStatement[9150-9369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9250-9369]:Block[9250-9369]"
  }, {
    "left" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
    "right" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
    "info" : "ExpressionStatement[9258-9363]:ExpressionStatement[9258-9363]"
  }, {
    "left" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
    "right" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
    "info" : "IfStatement[9375-9545]:IfStatement[9375-9545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9439-9545]:Block[9439-9545]"
  }, {
    "left" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
    "right" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
    "info" : "ExpressionStatement[9447-9539]:ExpressionStatement[9447-9539]"
  }, {
    "left" : "List<WarningsGuard> guards = Lists.newArrayList();",
    "right" : "List<WarningsGuard> guards = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[9589-9639]:VariableDeclarationStatement[9589-9639]"
  }, {
    "left" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
    "right" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
    "info" : "ExpressionStatement[9644-9752]:ExpressionStatement[9644-9752]"
  }, {
    "left" : "guards.add(options.getWarningsGuard());",
    "right" : "guards.add(options.getWarningsGuard());",
    "info" : "ExpressionStatement[9757-9796]:ExpressionStatement[9757-9796]"
  }, {
    "left" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
    "right" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
    "info" : "VariableDeclarationStatement[9802-9873]:VariableDeclarationStatement[9802-9873]"
  }, {
    "left" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
    "right" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
    "info" : "IfStatement[10165-10394]:IfStatement[10165-10394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10261-10394]:Block[10261-10394]"
  }, {
    "left" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
    "right" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
    "info" : "ExpressionStatement[10269-10388]:ExpressionStatement[10269-10388]"
  }, {
    "left" : "this.warningsGuard = composedGuards;",
    "right" : "this.warningsGuard = composedGuards;",
    "info" : "ExpressionStatement[10400-10436]:ExpressionStatement[10400-10436]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10518-10524]:Modifier[10518-10524]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10525-10529]:PrimitiveType[10525-10529]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[10530-10534]:SimpleName[10530-10534]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[10535-10557]:SingleVariableDeclaration[10535-10557]"
  }, {
    "left" : "JSSourceFile[] inputs",
    "right" : "JSSourceFile[] inputs",
    "info" : "SingleVariableDeclaration[10559-10580]:SingleVariableDeclaration[10559-10580]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[10588-10611]:SingleVariableDeclaration[10588-10611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10613-10730]:Block[10613-10730]"
  }, {
    "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
    "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
    "info" : "ExpressionStatement[10619-10726]:ExpressionStatement[10619-10726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10808-10814]:Modifier[10808-10814]"
  }, {
    "left" : "T1 extends SourceFile",
    "right" : "T1 extends SourceFile",
    "info" : "TypeParameter[10816-10837]:TypeParameter[10816-10837]"
  }, {
    "left" : "T2 extends SourceFile",
    "right" : "T2 extends SourceFile",
    "info" : "TypeParameter[10839-10860]:TypeParameter[10839-10860]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10862-10866]:PrimitiveType[10862-10866]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[10867-10871]:SimpleName[10867-10871]"
  }, {
    "left" : "List<T1> externs",
    "right" : "List<T1> externs",
    "info" : "SingleVariableDeclaration[10879-10895]:SingleVariableDeclaration[10879-10895]"
  }, {
    "left" : "List<T2> inputs",
    "right" : "List<T2> inputs",
    "info" : "SingleVariableDeclaration[10903-10918]:SingleVariableDeclaration[10903-10918]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[10926-10949]:SingleVariableDeclaration[10926-10949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10951-11148]:Block[10951-11148]"
  }, {
    "left" : "JSModule module = new JSModule(SINGLETON_MODULE_NAME);",
    "right" : "JSModule module = new JSModule(SINGLETON_MODULE_NAME);",
    "info" : "VariableDeclarationStatement[10957-11011]:VariableDeclarationStatement[10957-11011]"
  }, {
    "left" : "for (SourceFile input : inputs)",
    "right" : "for (SourceFile input : inputs)",
    "info" : "EnhancedForStatement[11016-11080]:EnhancedForStatement[11016-11080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11048-11080]:Block[11048-11080]"
  }, {
    "left" : "module.add(input);",
    "right" : "module.add(input);",
    "info" : "ExpressionStatement[11056-11074]:ExpressionStatement[11056-11074]"
  }, {
    "left" : "initModules(externs, Lists.newArrayList(module), options);",
    "right" : "initModules(externs, Lists.newArrayList(module), options);",
    "info" : "ExpressionStatement[11086-11144]:ExpressionStatement[11086-11144]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11261-11267]:Modifier[11261-11267]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11268-11272]:PrimitiveType[11268-11272]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[11273-11277]:SimpleName[11273-11277]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[11278-11300]:SingleVariableDeclaration[11278-11300]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[11302-11320]:SingleVariableDeclaration[11302-11320]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[11328-11351]:SingleVariableDeclaration[11328-11351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11353-11473]:Block[11353-11473]"
  }, {
    "left" : "initModules(Lists.<SourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
    "right" : "initModules(Lists.<SourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
    "info" : "ExpressionStatement[11359-11469]:ExpressionStatement[11359-11469]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11586-11592]:Modifier[11586-11592]"
  }, {
    "left" : "T extends SourceFile",
    "right" : "T extends SourceFile",
    "info" : "TypeParameter[11594-11614]:TypeParameter[11594-11614]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11616-11620]:PrimitiveType[11616-11620]"
  }, {
    "left" : "initModules",
    "right" : "initModules",
    "info" : "SimpleName[11621-11632]:SimpleName[11621-11632]"
  }, {
    "left" : "List<T> externs",
    "right" : "List<T> externs",
    "info" : "SingleVariableDeclaration[11640-11655]:SingleVariableDeclaration[11640-11655]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[11657-11679]:SingleVariableDeclaration[11657-11679]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[11681-11704]:SingleVariableDeclaration[11681-11704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11706-12559]:Block[11706-12559]"
  }, {
    "left" : "initOptions(options);",
    "right" : "initOptions(options);",
    "info" : "ExpressionStatement[11712-11733]:ExpressionStatement[11712-11733]"
  }, {
    "left" : "checkFirstModule(modules);",
    "right" : "checkFirstModule(modules);",
    "info" : "ExpressionStatement[11739-11765]:ExpressionStatement[11739-11765]"
  }, {
    "left" : "fillEmptyModules(modules);",
    "right" : "fillEmptyModules(modules);",
    "info" : "ExpressionStatement[11770-11796]:ExpressionStatement[11770-11796]"
  }, {
    "left" : "this.externs = makeCompilerInput(externs, true);",
    "right" : "this.externs = makeCompilerInput(externs, true);",
    "info" : "ExpressionStatement[11802-11850]:ExpressionStatement[11802-11850]"
  }, {
    "left" : "this.modules = modules;",
    "right" : "this.modules = modules;",
    "info" : "ExpressionStatement[11958-11981]:ExpressionStatement[11958-11981]"
  }, {
    "left" : "if (modules.size() > 1)",
    "right" : "if (modules.size() > 1)",
    "info" : "IfStatement[11986-12450]:IfStatement[11986-12450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12010-12406]:Block[12010-12406]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[12018-12400]:TryStatement[12018-12400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12022-12086]:Block[12022-12086]"
  }, {
    "left" : "this.moduleGraph = new JSModuleGraph(modules);",
    "right" : "this.moduleGraph = new JSModuleGraph(modules);",
    "info" : "ExpressionStatement[12032-12078]:ExpressionStatement[12032-12078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12137-12400]:Block[12137-12400]"
  }, {
    "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
    "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
    "info" : "ExpressionStatement[12255-12376]:ExpressionStatement[12255-12376]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[12385-12392]:ReturnStatement[12385-12392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12412-12450]:Block[12412-12450]"
  }, {
    "left" : "this.moduleGraph = null;",
    "right" : "this.moduleGraph = null;",
    "info" : "ExpressionStatement[12420-12444]:ExpressionStatement[12420-12444]"
  }, {
    "left" : "this.inputs = getAllInputsFromModules(modules);",
    "right" : "this.inputs = getAllInputsFromModules(modules);",
    "info" : "ExpressionStatement[12456-12503]:ExpressionStatement[12456-12503]"
  }, {
    "left" : "initBasedOnOptions();",
    "right" : "initBasedOnOptions();",
    "info" : "ExpressionStatement[12508-12529]:ExpressionStatement[12508-12529]"
  }, {
    "left" : "initInputsByIdMap();",
    "right" : "initInputsByIdMap();",
    "info" : "ExpressionStatement[12535-12555]:ExpressionStatement[12535-12555]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12645-12652]:Modifier[12645-12652]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12653-12657]:PrimitiveType[12653-12657]"
  }, {
    "left" : "initBasedOnOptions",
    "right" : "initBasedOnOptions",
    "info" : "SimpleName[12658-12676]:SimpleName[12658-12676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12679-12907]:Block[12679-12907]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null)",
    "right" : "if (options.sourceMapOutputPath != null)",
    "info" : "IfStatement[12728-12903]:IfStatement[12728-12903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12769-12903]:Block[12769-12903]"
  }, {
    "left" : "sourceMap = options.sourceMapFormat.getInstance();",
    "right" : "sourceMap = options.sourceMapFormat.getInstance();",
    "info" : "ExpressionStatement[12777-12827]:ExpressionStatement[12777-12827]"
  }, {
    "left" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
    "right" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
    "info" : "ExpressionStatement[12834-12897]:ExpressionStatement[12834-12897]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12911-12918]:Modifier[12911-12918]"
  }, {
    "left" : "T extends SourceFile",
    "right" : "T extends SourceFile",
    "info" : "TypeParameter[12920-12940]:TypeParameter[12920-12940]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[12942-12961]:ParameterizedType[12942-12961]"
  }, {
    "left" : "makeCompilerInput",
    "right" : "makeCompilerInput",
    "info" : "SimpleName[12962-12979]:SimpleName[12962-12979]"
  }, {
    "left" : "List<T> files",
    "right" : "List<T> files",
    "info" : "SingleVariableDeclaration[12987-13000]:SingleVariableDeclaration[12987-13000]"
  }, {
    "left" : "boolean isExtern",
    "right" : "boolean isExtern",
    "info" : "SingleVariableDeclaration[13002-13018]:SingleVariableDeclaration[13002-13018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13020-13185]:Block[13020-13185]"
  }, {
    "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[13026-13076]:VariableDeclarationStatement[13026-13076]"
  }, {
    "left" : "for (T file : files)",
    "right" : "for (T file : files)",
    "info" : "EnhancedForStatement[13081-13162]:EnhancedForStatement[13081-13162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13102-13162]:Block[13102-13162]"
  }, {
    "left" : "inputs.add(new CompilerInput(file, isExtern));",
    "right" : "inputs.add(new CompilerInput(file, isExtern));",
    "info" : "ExpressionStatement[13110-13156]:ExpressionStatement[13110-13156]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[13167-13181]:ReturnStatement[13167-13181]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13695-13702]:Modifier[13695-13702]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13703-13707]:PrimitiveType[13703-13707]"
  }, {
    "left" : "checkFirstModule",
    "right" : "checkFirstModule",
    "info" : "SimpleName[13708-13724]:SimpleName[13708-13724]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[13725-13747]:SingleVariableDeclaration[13725-13747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13749-14081]:Block[13749-14081]"
  }, {
    "left" : "if (modules.isEmpty())",
    "right" : "if (modules.isEmpty())",
    "info" : "IfStatement[13755-14077]:IfStatement[13755-14077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13778-13838]:Block[13778-13838]"
  }, {
    "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
    "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
    "info" : "ExpressionStatement[13786-13832]:ExpressionStatement[13786-13832]"
  }, {
    "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
    "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
    "info" : "IfStatement[13844-14077]:IfStatement[13844-14077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13908-14077]:Block[13908-14077]"
  }, {
    "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
    "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
    "info" : "ExpressionStatement[13989-14071]:ExpressionStatement[13989-14071]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14194-14200]:Modifier[14194-14200]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[14201-14207]:SimpleType[14201-14207]"
  }, {
    "left" : "createFillFileName",
    "right" : "createFillFileName",
    "info" : "SimpleName[14208-14226]:SimpleName[14208-14226]"
  }, {
    "left" : "String moduleName",
    "right" : "String moduleName",
    "info" : "SingleVariableDeclaration[14227-14244]:SingleVariableDeclaration[14227-14244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14246-14286]:Block[14246-14286]"
  }, {
    "left" : "return \"[\" + moduleName + \"]\";",
    "right" : "return \"[\" + moduleName + \"]\";",
    "info" : "ReturnStatement[14252-14282]:ReturnStatement[14252-14282]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14402-14409]:Modifier[14402-14409]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14410-14416]:Modifier[14410-14416]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14417-14421]:PrimitiveType[14417-14421]"
  }, {
    "left" : "fillEmptyModules",
    "right" : "fillEmptyModules",
    "info" : "SimpleName[14422-14438]:SimpleName[14422-14438]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[14439-14461]:SingleVariableDeclaration[14439-14461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14463-14658]:Block[14463-14658]"
  }, {
    "left" : "for (JSModule module : modules)",
    "right" : "for (JSModule module : modules)",
    "info" : "EnhancedForStatement[14469-14654]:EnhancedForStatement[14469-14654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14501-14654]:Block[14501-14654]"
  }, {
    "left" : "if (module.getInputs().isEmpty())",
    "right" : "if (module.getInputs().isEmpty())",
    "info" : "IfStatement[14509-14648]:IfStatement[14509-14648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14543-14648]:Block[14543-14648]"
  }, {
    "left" : "module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));",
    "right" : "module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));",
    "info" : "ExpressionStatement[14553-14640]:ExpressionStatement[14553-14640]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14904-14910]:Modifier[14904-14910]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14911-14915]:PrimitiveType[14911-14915]"
  }, {
    "left" : "rebuildInputsFromModules",
    "right" : "rebuildInputsFromModules",
    "info" : "SimpleName[14916-14940]:SimpleName[14916-14940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14943-15020]:Block[14943-15020]"
  }, {
    "left" : "inputs = getAllInputsFromModules(modules);",
    "right" : "inputs = getAllInputsFromModules(modules);",
    "info" : "ExpressionStatement[14949-14991]:ExpressionStatement[14949-14991]"
  }, {
    "left" : "initInputsByIdMap();",
    "right" : "initInputsByIdMap();",
    "info" : "ExpressionStatement[14996-15016]:ExpressionStatement[14996-15016]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15130-15137]:Modifier[15130-15137]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15138-15144]:Modifier[15138-15144]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[15145-15164]:ParameterizedType[15145-15164]"
  }, {
    "left" : "getAllInputsFromModules",
    "right" : "getAllInputsFromModules",
    "info" : "SimpleName[15165-15188]:SimpleName[15165-15188]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[15196-15218]:SingleVariableDeclaration[15196-15218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15220-15753]:Block[15220-15753]"
  }, {
    "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[15226-15276]:VariableDeclarationStatement[15226-15276]"
  }, {
    "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
    "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
    "info" : "VariableDeclarationStatement[15281-15332]:VariableDeclarationStatement[15281-15332]"
  }, {
    "left" : "for (JSModule module : modules)",
    "right" : "for (JSModule module : modules)",
    "info" : "EnhancedForStatement[15337-15730]:EnhancedForStatement[15337-15730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15369-15730]:Block[15369-15730]"
  }, {
    "left" : "for (CompilerInput input : module.getInputs())",
    "right" : "for (CompilerInput input : module.getInputs())",
    "info" : "EnhancedForStatement[15377-15724]:EnhancedForStatement[15377-15724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15424-15724]:Block[15424-15724]"
  }, {
    "left" : "String inputName = input.getName();",
    "right" : "String inputName = input.getName();",
    "info" : "VariableDeclarationStatement[15434-15469]:VariableDeclarationStatement[15434-15469]"
  }, {
    "left" : "inputs.add(input);",
    "right" : "inputs.add(input);",
    "info" : "ExpressionStatement[15657-15675]:ExpressionStatement[15657-15675]"
  }, {
    "left" : "inputMap.put(inputName, module);",
    "right" : "inputMap.put(inputName, module);",
    "info" : "ExpressionStatement[15684-15716]:ExpressionStatement[15684-15716]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[15735-15749]:ReturnStatement[15735-15749]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16147-16151]:PrimitiveType[16147-16151]"
  }, {
    "left" : "initInputsByIdMap",
    "right" : "initInputsByIdMap",
    "info" : "SimpleName[16152-16169]:SimpleName[16152-16169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16172-16737]:Block[16172-16737]"
  }, {
    "left" : "inputsById = new HashMap<InputId, CompilerInput>();",
    "right" : "inputsById = new HashMap<InputId, CompilerInput>();",
    "info" : "ExpressionStatement[16178-16229]:ExpressionStatement[16178-16229]"
  }, {
    "left" : "for (CompilerInput input : externs)",
    "right" : "for (CompilerInput input : externs)",
    "info" : "EnhancedForStatement[16234-16485]:EnhancedForStatement[16234-16485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16270-16485]:Block[16270-16485]"
  }, {
    "left" : "InputId id = input.getInputId();",
    "right" : "InputId id = input.getInputId();",
    "info" : "VariableDeclarationStatement[16278-16310]:VariableDeclarationStatement[16278-16310]"
  }, {
    "left" : "CompilerInput previous = putCompilerInput(id, input);",
    "right" : "CompilerInput previous = putCompilerInput(id, input);",
    "info" : "VariableDeclarationStatement[16317-16370]:VariableDeclarationStatement[16317-16370]"
  }, {
    "left" : "if (previous != null)",
    "right" : "if (previous != null)",
    "info" : "IfStatement[16377-16479]:IfStatement[16377-16479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16399-16479]:Block[16399-16479]"
  }, {
    "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));",
    "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));",
    "info" : "ExpressionStatement[16409-16471]:ExpressionStatement[16409-16471]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[16490-16733]:EnhancedForStatement[16490-16733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16525-16733]:Block[16525-16733]"
  }, {
    "left" : "InputId id = input.getInputId();",
    "right" : "InputId id = input.getInputId();",
    "info" : "VariableDeclarationStatement[16533-16565]:VariableDeclarationStatement[16533-16565]"
  }, {
    "left" : "CompilerInput previous = putCompilerInput(id, input);",
    "right" : "CompilerInput previous = putCompilerInput(id, input);",
    "info" : "VariableDeclarationStatement[16572-16625]:VariableDeclarationStatement[16572-16625]"
  }, {
    "left" : "if (previous != null)",
    "right" : "if (previous != null)",
    "info" : "IfStatement[16632-16727]:IfStatement[16632-16727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16654-16727]:Block[16654-16727]"
  }, {
    "left" : "report(JSError.make(DUPLICATE_INPUT, input.getName()));",
    "right" : "report(JSError.make(DUPLICATE_INPUT, input.getName()));",
    "info" : "ExpressionStatement[16664-16719]:ExpressionStatement[16664-16719]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16741-16747]:Modifier[16741-16747]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[16748-16754]:SimpleType[16748-16754]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[16755-16762]:SimpleName[16755-16762]"
  }, {
    "left" : "SourceFile extern",
    "right" : "SourceFile extern",
    "info" : "SingleVariableDeclaration[16770-16787]:SingleVariableDeclaration[16770-16787]"
  }, {
    "left" : "SourceFile input",
    "right" : "SourceFile input",
    "info" : "SingleVariableDeclaration[16789-16805]:SingleVariableDeclaration[16789-16805]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[16807-16830]:SingleVariableDeclaration[16807-16830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16832-16922]:Block[16832-16922]"
  }, {
    "left" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
    "right" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
    "info" : "ReturnStatement[16839-16918]:ReturnStatement[16839-16918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16926-16932]:Modifier[16926-16932]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[16933-16939]:SimpleType[16933-16939]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[16940-16947]:SimpleName[16940-16947]"
  }, {
    "left" : "SourceFile extern",
    "right" : "SourceFile extern",
    "info" : "SingleVariableDeclaration[16955-16972]:SingleVariableDeclaration[16955-16972]"
  }, {
    "left" : "JSSourceFile[] input",
    "right" : "JSSourceFile[] input",
    "info" : "SingleVariableDeclaration[16974-16994]:SingleVariableDeclaration[16974-16994]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[16996-17019]:SingleVariableDeclaration[16996-17019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17021-17111]:Block[17021-17111]"
  }, {
    "left" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
    "right" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
    "info" : "ReturnStatement[17028-17107]:ReturnStatement[17028-17107]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17115-17121]:Modifier[17115-17121]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[17122-17128]:SimpleType[17122-17128]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[17129-17136]:SimpleName[17129-17136]"
  }, {
    "left" : "JSSourceFile extern",
    "right" : "JSSourceFile extern",
    "info" : "SingleVariableDeclaration[17144-17163]:SingleVariableDeclaration[17144-17163]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[17165-17183]:SingleVariableDeclaration[17165-17183]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[17185-17208]:SingleVariableDeclaration[17185-17208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17210-17319]:Block[17210-17319]"
  }, {
    "left" : "return compileModules(\n         Lists.newArrayList(extern), Lists.newArrayList(modules), options);",
    "right" : "return compileModules(\n         Lists.newArrayList(extern), Lists.newArrayList(modules), options);",
    "info" : "ReturnStatement[17217-17315]:ReturnStatement[17217-17315]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17367-17373]:Modifier[17367-17373]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[17374-17380]:SimpleType[17374-17380]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[17381-17388]:SimpleName[17381-17388]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[17389-17411]:SingleVariableDeclaration[17389-17411]"
  }, {
    "left" : "JSSourceFile[] inputs",
    "right" : "JSSourceFile[] inputs",
    "info" : "SingleVariableDeclaration[17437-17458]:SingleVariableDeclaration[17437-17458]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[17484-17507]:SingleVariableDeclaration[17484-17507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17509-17640]:Block[17509-17640]"
  }, {
    "left" : "return compile(Lists.<SourceFile>newArrayList(externs),\n        Lists.<SourceFile>newArrayList(inputs),\n        options);",
    "right" : "return compile(Lists.<SourceFile>newArrayList(externs),\n        Lists.<SourceFile>newArrayList(inputs),\n        options);",
    "info" : "ReturnStatement[17515-17636]:ReturnStatement[17515-17636]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17688-17694]:Modifier[17688-17694]"
  }, {
    "left" : "T1 extends SourceFile",
    "right" : "T1 extends SourceFile",
    "info" : "TypeParameter[17696-17717]:TypeParameter[17696-17717]"
  }, {
    "left" : "T2 extends SourceFile",
    "right" : "T2 extends SourceFile",
    "info" : "TypeParameter[17719-17740]:TypeParameter[17719-17740]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[17742-17748]:SimpleType[17742-17748]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[17749-17756]:SimpleName[17749-17756]"
  }, {
    "left" : "List<T1> externs",
    "right" : "List<T1> externs",
    "info" : "SingleVariableDeclaration[17764-17780]:SingleVariableDeclaration[17764-17780]"
  }, {
    "left" : "List<T2> inputs",
    "right" : "List<T2> inputs",
    "info" : "SingleVariableDeclaration[17782-17797]:SingleVariableDeclaration[17782-17797]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[17799-17822]:SingleVariableDeclaration[17799-17822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17824-18207]:Block[17824-18207]"
  }, {
    "left" : "Preconditions.checkState(jsRoot == null);",
    "right" : "Preconditions.checkState(jsRoot == null);",
    "info" : "ExpressionStatement[17884-17925]:ExpressionStatement[17884-17925]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[17931-18203]:TryStatement[17931-18203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17935-18065]:Block[17935-18065]"
  }, {
    "left" : "init(externs, inputs, options);",
    "right" : "init(externs, inputs, options);",
    "info" : "ExpressionStatement[17943-17974]:ExpressionStatement[17943-17974]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[17981-18035]:IfStatement[17981-18035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17998-18035]:Block[17998-18035]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[18008-18027]:ReturnStatement[18008-18027]"
  }, {
    "left" : "return compile();",
    "right" : "return compile();",
    "info" : "ReturnStatement[18042-18059]:ReturnStatement[18042-18059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18074-18203]:Block[18074-18203]"
  }, {
    "left" : "Tracer t = newTracer(\"generateReport\");",
    "right" : "Tracer t = newTracer(\"generateReport\");",
    "info" : "VariableDeclarationStatement[18082-18121]:VariableDeclarationStatement[18082-18121]"
  }, {
    "left" : "errorManager.generateReport();",
    "right" : "errorManager.generateReport();",
    "info" : "ExpressionStatement[18128-18158]:ExpressionStatement[18128-18158]"
  }, {
    "left" : "stopTracer(t, \"generateReport\");",
    "right" : "stopTracer(t, \"generateReport\");",
    "info" : "ExpressionStatement[18165-18197]:ExpressionStatement[18165-18197]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18256-18262]:Modifier[18256-18262]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[18263-18269]:SimpleType[18263-18269]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[18270-18277]:SimpleName[18270-18277]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[18278-18300]:SingleVariableDeclaration[18278-18300]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[18326-18344]:SingleVariableDeclaration[18326-18344]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[18370-18393]:SingleVariableDeclaration[18370-18393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18395-18532]:Block[18395-18532]"
  }, {
    "left" : "return compileModules(Lists.<SourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
    "right" : "return compileModules(Lists.<SourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
    "info" : "ReturnStatement[18401-18528]:ReturnStatement[18401-18528]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18581-18587]:Modifier[18581-18587]"
  }, {
    "left" : "T extends SourceFile",
    "right" : "T extends SourceFile",
    "info" : "TypeParameter[18589-18609]:TypeParameter[18589-18609]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[18611-18617]:SimpleType[18611-18617]"
  }, {
    "left" : "compileModules",
    "right" : "compileModules",
    "info" : "SimpleName[18618-18632]:SimpleName[18618-18632]"
  }, {
    "left" : "List<T> externs",
    "right" : "List<T> externs",
    "info" : "SingleVariableDeclaration[18633-18648]:SingleVariableDeclaration[18633-18648]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[18656-18678]:SingleVariableDeclaration[18656-18678]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[18680-18703]:SingleVariableDeclaration[18680-18703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18705-19096]:Block[18705-19096]"
  }, {
    "left" : "Preconditions.checkState(jsRoot == null);",
    "right" : "Preconditions.checkState(jsRoot == null);",
    "info" : "ExpressionStatement[18765-18806]:ExpressionStatement[18765-18806]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[18812-19092]:TryStatement[18812-19092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18816-18954]:Block[18816-18954]"
  }, {
    "left" : "initModules(externs, modules, options);",
    "right" : "initModules(externs, modules, options);",
    "info" : "ExpressionStatement[18824-18863]:ExpressionStatement[18824-18863]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[18870-18924]:IfStatement[18870-18924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18887-18924]:Block[18887-18924]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[18897-18916]:ReturnStatement[18897-18916]"
  }, {
    "left" : "return compile();",
    "right" : "return compile();",
    "info" : "ReturnStatement[18931-18948]:ReturnStatement[18931-18948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18963-19092]:Block[18963-19092]"
  }, {
    "left" : "Tracer t = newTracer(\"generateReport\");",
    "right" : "Tracer t = newTracer(\"generateReport\");",
    "info" : "VariableDeclarationStatement[18971-19010]:VariableDeclarationStatement[18971-19010]"
  }, {
    "left" : "errorManager.generateReport();",
    "right" : "errorManager.generateReport();",
    "info" : "ExpressionStatement[19017-19047]:ExpressionStatement[19017-19047]"
  }, {
    "left" : "stopTracer(t, \"generateReport\");",
    "right" : "stopTracer(t, \"generateReport\");",
    "info" : "ExpressionStatement[19054-19086]:ExpressionStatement[19054-19086]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19100-19107]:Modifier[19100-19107]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[19108-19114]:SimpleType[19108-19114]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[19115-19122]:SimpleName[19115-19122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19125-19319]:Block[19125-19319]"
  }, {
    "left" : "return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
    "info" : "ReturnStatement[19131-19315]:ReturnStatement[19131-19315]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19189-19198]:MarkerAnnotation[19189-19198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19205-19211]:Modifier[19205-19211]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[19212-19218]:SimpleType[19212-19218]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[19219-19223]:SimpleName[19219-19223]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[19233-19242]:SimpleType[19233-19242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19243-19307]:Block[19243-19307]"
  }, {
    "left" : "compileInternal();",
    "right" : "compileInternal();",
    "info" : "ExpressionStatement[19253-19271]:ExpressionStatement[19253-19271]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[19280-19299]:ReturnStatement[19280-19299]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19428-19434]:Modifier[19428-19434]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19435-19439]:PrimitiveType[19435-19439]"
  }, {
    "left" : "disableThreads",
    "right" : "disableThreads",
    "info" : "SimpleName[19440-19454]:SimpleName[19440-19454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19457-19486]:Block[19457-19486]"
  }, {
    "left" : "useThreads = false;",
    "right" : "useThreads = false;",
    "info" : "ExpressionStatement[19463-19482]:ExpressionStatement[19463-19482]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19490-19497]:Modifier[19490-19497]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[19499-19500]:TypeParameter[19499-19500]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[19502-19503]:SimpleType[19502-19503]"
  }, {
    "left" : "runInCompilerThread",
    "right" : "runInCompilerThread",
    "info" : "SimpleName[19504-19523]:SimpleName[19504-19523]"
  }, {
    "left" : "final Callable<T> callable",
    "right" : "final Callable<T> callable",
    "info" : "SingleVariableDeclaration[19524-19550]:SingleVariableDeclaration[19524-19550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19552-19626]:Block[19552-19626]"
  }, {
    "left" : "return runCallable(callable, useThreads, options.tracer.isOn());",
    "right" : "return runCallable(callable, useThreads, options.tracer.isOn());",
    "info" : "ReturnStatement[19558-19622]:ReturnStatement[19558-19622]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19630-19636]:Modifier[19630-19636]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[19638-19639]:TypeParameter[19638-19639]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[19641-19642]:SimpleType[19641-19642]"
  }, {
    "left" : "runCallableWithLargeStack",
    "right" : "runCallableWithLargeStack",
    "info" : "SimpleName[19643-19668]:SimpleName[19643-19668]"
  }, {
    "left" : "final Callable<T> callable",
    "right" : "final Callable<T> callable",
    "info" : "SingleVariableDeclaration[19669-19695]:SingleVariableDeclaration[19669-19695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19697-19749]:Block[19697-19749]"
  }, {
    "left" : "return runCallable(callable, true, false);",
    "right" : "return runCallable(callable, true, false);",
    "info" : "ReturnStatement[19703-19745]:ReturnStatement[19703-19745]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[19753-19783]:SingleMemberAnnotation[19753-19783]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19786-19792]:Modifier[19786-19792]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[19794-19795]:TypeParameter[19794-19795]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[19797-19798]:SimpleType[19797-19798]"
  }, {
    "left" : "runCallable",
    "right" : "runCallable",
    "info" : "SimpleName[19799-19810]:SimpleName[19799-19810]"
  }, {
    "left" : "final Callable<T> callable",
    "right" : "final Callable<T> callable",
    "info" : "SingleVariableDeclaration[19818-19844]:SingleVariableDeclaration[19818-19844]"
  }, {
    "left" : "boolean useLargeStackThread",
    "right" : "boolean useLargeStackThread",
    "info" : "SingleVariableDeclaration[19846-19873]:SingleVariableDeclaration[19846-19873]"
  }, {
    "left" : "boolean trace",
    "right" : "boolean trace",
    "info" : "SingleVariableDeclaration[19875-19888]:SingleVariableDeclaration[19875-19888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19890-21348]:Block[19890-21348]"
  }, {
    "left" : "final boolean dumpTraceReport = trace;",
    "right" : "final boolean dumpTraceReport = trace;",
    "info" : "VariableDeclarationStatement[20278-20316]:VariableDeclarationStatement[20278-20316]"
  }, {
    "left" : "final Object[] result = new Object[1];",
    "right" : "final Object[] result = new Object[1];",
    "info" : "VariableDeclarationStatement[20321-20359]:VariableDeclarationStatement[20321-20359]"
  }, {
    "left" : "final Throwable[] exception = new Throwable[1];",
    "right" : "final Throwable[] exception = new Throwable[1];",
    "info" : "VariableDeclarationStatement[20364-20411]:VariableDeclarationStatement[20364-20411]"
  }, {
    "left" : "Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
    "right" : "Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
    "info" : "VariableDeclarationStatement[20416-20839]:VariableDeclarationStatement[20416-20839]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20459-20468]:MarkerAnnotation[20459-20468]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20475-20481]:Modifier[20475-20481]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20482-20486]:PrimitiveType[20482-20486]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[20487-20490]:SimpleName[20487-20490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20493-20832]:Block[20493-20832]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[20503-20824]:TryStatement[20503-20824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20507-20647]:Block[20507-20647]"
  }, {
    "left" : "if (dumpTraceReport)",
    "right" : "if (dumpTraceReport)",
    "info" : "IfStatement[20519-20598]:IfStatement[20519-20598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20540-20598]:Block[20540-20598]"
  }, {
    "left" : "Tracer.initCurrentThreadTrace();",
    "right" : "Tracer.initCurrentThreadTrace();",
    "info" : "ExpressionStatement[20554-20586]:ExpressionStatement[20554-20586]"
  }, {
    "left" : "result[0] = callable.call();",
    "right" : "result[0] = callable.call();",
    "info" : "ExpressionStatement[20609-20637]:ExpressionStatement[20609-20637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20668-20707]:Block[20668-20707]"
  }, {
    "left" : "exception[0] = e;",
    "right" : "exception[0] = e;",
    "info" : "ExpressionStatement[20680-20697]:ExpressionStatement[20680-20697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20716-20824]:Block[20716-20824]"
  }, {
    "left" : "if (dumpTraceReport)",
    "right" : "if (dumpTraceReport)",
    "info" : "IfStatement[20728-20814]:IfStatement[20728-20814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20749-20814]:Block[20749-20814]"
  }, {
    "left" : "Tracer.logAndClearCurrentThreadTrace();",
    "right" : "Tracer.logAndClearCurrentThreadTrace();",
    "info" : "ExpressionStatement[20763-20802]:ExpressionStatement[20763-20802]"
  }, {
    "left" : "if (useLargeStackThread)",
    "right" : "if (useLargeStackThread)",
    "info" : "IfStatement[20845-21170]:IfStatement[20845-21170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20870-21135]:Block[20870-21135]"
  }, {
    "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
    "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
    "info" : "VariableDeclarationStatement[20878-20952]:VariableDeclarationStatement[20878-20952]"
  }, {
    "left" : "th.start();",
    "right" : "th.start();",
    "info" : "ExpressionStatement[20959-20970]:ExpressionStatement[20959-20970]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[20977-21129]:WhileStatement[20977-21129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20990-21129]:Block[20990-21129]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[21000-21121]:TryStatement[21000-21121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21004-21053]:Block[21004-21053]"
  }, {
    "left" : "th.join();",
    "right" : "th.join();",
    "info" : "ExpressionStatement[21016-21026]:ExpressionStatement[21016-21026]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21037-21043]:BreakStatement[21037-21043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21090-21121]:Block[21090-21121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21141-21170]:Block[21141-21170]"
  }, {
    "left" : "runnable.run();",
    "right" : "runnable.run();",
    "info" : "ExpressionStatement[21149-21164]:ExpressionStatement[21149-21164]"
  }, {
    "left" : "if (exception[0] != null)",
    "right" : "if (exception[0] != null)",
    "info" : "IfStatement[21236-21317]:IfStatement[21236-21317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21262-21317]:Block[21262-21317]"
  }, {
    "left" : "throw new RuntimeException(exception[0]);",
    "right" : "throw new RuntimeException(exception[0]);",
    "info" : "ThrowStatement[21270-21311]:ThrowStatement[21270-21311]"
  }, {
    "left" : "return (T) result[0];",
    "right" : "return (T) result[0];",
    "info" : "ReturnStatement[21323-21344]:ReturnStatement[21323-21344]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21352-21359]:Modifier[21352-21359]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21360-21364]:PrimitiveType[21360-21364]"
  }, {
    "left" : "compileInternal",
    "right" : "compileInternal",
    "info" : "SimpleName[21365-21380]:SimpleName[21365-21380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21383-22400]:Block[21383-22400]"
  }, {
    "left" : "setProgress(0.0);",
    "right" : "setProgress(0.0);",
    "info" : "ExpressionStatement[21389-21406]:ExpressionStatement[21389-21406]"
  }, {
    "left" : "parse();",
    "right" : "parse();",
    "info" : "ExpressionStatement[21411-21419]:ExpressionStatement[21411-21419]"
  }, {
    "left" : "setProgress(0.15);",
    "right" : "setProgress(0.15);",
    "info" : "ExpressionStatement[21577-21595]:ExpressionStatement[21577-21595]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[21600-21638]:IfStatement[21600-21638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21617-21638]:Block[21617-21638]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21625-21632]:ReturnStatement[21625-21632]"
  }, {
    "left" : "if (!precheck())",
    "right" : "if (!precheck())",
    "info" : "IfStatement[21644-21682]:IfStatement[21644-21682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21661-21682]:Block[21661-21682]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21669-21676]:ReturnStatement[21669-21676]"
  }, {
    "left" : "if (options.nameAnonymousFunctionsOnly)",
    "right" : "if (options.nameAnonymousFunctionsOnly)",
    "info" : "IfStatement[21688-21835]:IfStatement[21688-21835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21728-21835]:Block[21728-21835]"
  }, {
    "left" : "check();",
    "right" : "check();",
    "info" : "ExpressionStatement[21807-21815]:ExpressionStatement[21807-21815]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21822-21829]:ReturnStatement[21822-21829]"
  }, {
    "left" : "if (!options.skipAllPasses)",
    "right" : "if (!options.skipAllPasses)",
    "info" : "IfStatement[21841-22204]:IfStatement[21841-22204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21869-22204]:Block[21869-22204]"
  }, {
    "left" : "check();",
    "right" : "check();",
    "info" : "ExpressionStatement[21877-21885]:ExpressionStatement[21877-21885]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[21892-21934]:IfStatement[21892-21934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21909-21934]:Block[21909-21934]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21919-21926]:ReturnStatement[21919-21926]"
  }, {
    "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
    "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
    "info" : "IfStatement[21942-22061]:IfStatement[21942-22061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22027-22061]:Block[22027-22061]"
  }, {
    "left" : "externExports();",
    "right" : "externExports();",
    "info" : "ExpressionStatement[22037-22053]:ExpressionStatement[22037-22053]"
  }, {
    "left" : "if (!options.ideMode)",
    "right" : "if (!options.ideMode)",
    "info" : "IfStatement[22147-22198]:IfStatement[22147-22198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22169-22198]:Block[22169-22198]"
  }, {
    "left" : "optimize();",
    "right" : "optimize();",
    "info" : "ExpressionStatement[22179-22190]:ExpressionStatement[22179-22190]"
  }, {
    "left" : "if (options.recordFunctionInformation)",
    "right" : "if (options.recordFunctionInformation)",
    "info" : "IfStatement[22210-22291]:IfStatement[22210-22291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22249-22291]:Block[22249-22291]"
  }, {
    "left" : "recordFunctionInformation();",
    "right" : "recordFunctionInformation();",
    "info" : "ExpressionStatement[22257-22285]:ExpressionStatement[22257-22285]"
  }, {
    "left" : "if (options.devMode == DevMode.START_AND_END)",
    "right" : "if (options.devMode == DevMode.START_AND_END)",
    "info" : "IfStatement[22297-22374]:IfStatement[22297-22374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22343-22374]:Block[22343-22374]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[22351-22368]:ExpressionStatement[22351-22368]"
  }, {
    "left" : "setProgress(1.0);",
    "right" : "setProgress(1.0);",
    "info" : "ExpressionStatement[22379-22396]:ExpressionStatement[22379-22396]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22404-22410]:Modifier[22404-22410]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22411-22415]:PrimitiveType[22411-22415]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[22416-22421]:SimpleName[22416-22421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22424-22448]:Block[22424-22448]"
  }, {
    "left" : "parseInputs();",
    "right" : "parseInputs();",
    "info" : "ExpressionStatement[22430-22444]:ExpressionStatement[22430-22444]"
  }, {
    "left" : "PassConfig",
    "right" : "PassConfig",
    "info" : "SimpleType[22452-22462]:SimpleType[22452-22462]"
  }, {
    "left" : "getPassConfig",
    "right" : "getPassConfig",
    "info" : "SimpleName[22463-22476]:SimpleName[22463-22476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22479-22578]:Block[22479-22578]"
  }, {
    "left" : "if (passes == null)",
    "right" : "if (passes == null)",
    "info" : "IfStatement[22485-22555]:IfStatement[22485-22555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22505-22555]:Block[22505-22555]"
  }, {
    "left" : "passes = createPassConfigInternal();",
    "right" : "passes = createPassConfigInternal();",
    "info" : "ExpressionStatement[22513-22549]:ExpressionStatement[22513-22549]"
  }, {
    "left" : "return passes;",
    "right" : "return passes;",
    "info" : "ReturnStatement[22560-22574]:ReturnStatement[22560-22574]"
  }, {
    "left" : "PassConfig",
    "right" : "PassConfig",
    "info" : "SimpleType[22691-22701]:SimpleType[22691-22701]"
  }, {
    "left" : "createPassConfigInternal",
    "right" : "createPassConfigInternal",
    "info" : "SimpleName[22702-22726]:SimpleName[22702-22726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22729-22777]:Block[22729-22777]"
  }, {
    "left" : "return new DefaultPassConfig(options);",
    "right" : "return new DefaultPassConfig(options);",
    "info" : "ReturnStatement[22735-22773]:ReturnStatement[22735-22773]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22982-22988]:Modifier[22982-22988]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22989-22993]:PrimitiveType[22989-22993]"
  }, {
    "left" : "setPassConfig",
    "right" : "setPassConfig",
    "info" : "SimpleName[22994-23007]:SimpleName[22994-23007]"
  }, {
    "left" : "PassConfig passes",
    "right" : "PassConfig passes",
    "info" : "SingleVariableDeclaration[23008-23025]:SingleVariableDeclaration[23008-23025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23027-23525]:Block[23027-23525]"
  }, {
    "left" : "Preconditions.checkNotNull(passes);",
    "right" : "Preconditions.checkNotNull(passes);",
    "info" : "ExpressionStatement[23342-23377]:ExpressionStatement[23342-23377]"
  }, {
    "left" : "if (this.passes != null)",
    "right" : "if (this.passes != null)",
    "info" : "IfStatement[23383-23495]:IfStatement[23383-23495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23408-23495]:Block[23408-23495]"
  }, {
    "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
    "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
    "info" : "ThrowStatement[23416-23489]:ThrowStatement[23416-23489]"
  }, {
    "left" : "this.passes = passes;",
    "right" : "this.passes = passes;",
    "info" : "ExpressionStatement[23500-23521]:ExpressionStatement[23500-23521]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23724-23731]:PrimitiveType[23724-23731]"
  }, {
    "left" : "precheck",
    "right" : "precheck",
    "info" : "SimpleName[23732-23740]:SimpleName[23732-23740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23743-23765]:Block[23743-23765]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23749-23761]:ReturnStatement[23749-23761]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23769-23775]:Modifier[23769-23775]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23776-23780]:PrimitiveType[23776-23780]"
  }, {
    "left" : "check",
    "right" : "check",
    "info" : "SimpleName[23781-23786]:SimpleName[23781-23786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23789-25064]:Block[23789-25064]"
  }, {
    "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
    "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
    "info" : "ExpressionStatement[23795-23850]:ExpressionStatement[23795-23850]"
  }, {
    "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));",
    "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));",
    "info" : "VariableDeclarationStatement[24013-24141]:VariableDeclarationStatement[24013-24141]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[24146-24246]:IfStatement[24146-24246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24189-24246]:Block[24189-24246]"
  }, {
    "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "info" : "ExpressionStatement[24197-24240]:ExpressionStatement[24197-24240]"
  }, {
    "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
    "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
    "info" : "ExpressionStatement[24251-24303]:ExpressionStatement[24251-24303]"
  }, {
    "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[24308-24352]:ExpressionStatement[24308-24352]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[24357-24395]:IfStatement[24357-24395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24374-24395]:Block[24374-24395]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24382-24389]:ReturnStatement[24382-24389]"
  }, {
    "left" : "if (options.nameAnonymousFunctionsOnly)",
    "right" : "if (options.nameAnonymousFunctionsOnly)",
    "info" : "IfStatement[24478-24539]:IfStatement[24478-24539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24518-24539]:Block[24518-24539]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24526-24533]:ReturnStatement[24526-24533]"
  }, {
    "left" : "if (options.removeTryCatchFinally)",
    "right" : "if (options.removeTryCatchFinally)",
    "info" : "IfStatement[24545-24618]:IfStatement[24545-24618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24580-24618]:Block[24580-24618]"
  }, {
    "left" : "removeTryCatchFinally();",
    "right" : "removeTryCatchFinally();",
    "info" : "ExpressionStatement[24588-24612]:ExpressionStatement[24588-24612]"
  }, {
    "left" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
    "right" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
    "info" : "IfStatement[24624-24992]:IfStatement[24624-24992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24857-24992]:Block[24857-24992]"
  }, {
    "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
    "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
    "info" : "ExpressionStatement[24865-24986]:ExpressionStatement[24865-24986]"
  }, {
    "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
    "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
    "info" : "ExpressionStatement[24998-25060]:ExpressionStatement[24998-25060]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25068-25075]:Modifier[25068-25075]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25076-25080]:PrimitiveType[25076-25080]"
  }, {
    "left" : "externExports",
    "right" : "externExports",
    "info" : "SimpleName[25081-25094]:SimpleName[25081-25094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25097-25330]:Block[25097-25330]"
  }, {
    "left" : "logger.fine(\"Creating extern file for exports\");",
    "right" : "logger.fine(\"Creating extern file for exports\");",
    "info" : "ExpressionStatement[25103-25151]:ExpressionStatement[25103-25151]"
  }, {
    "left" : "startPass(\"externExports\");",
    "right" : "startPass(\"externExports\");",
    "info" : "ExpressionStatement[25156-25183]:ExpressionStatement[25156-25183]"
  }, {
    "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
    "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
    "info" : "VariableDeclarationStatement[25189-25242]:VariableDeclarationStatement[25189-25242]"
  }, {
    "left" : "process(pass);",
    "right" : "process(pass);",
    "info" : "ExpressionStatement[25247-25261]:ExpressionStatement[25247-25261]"
  }, {
    "left" : "externExports = pass.getGeneratedExterns();",
    "right" : "externExports = pass.getGeneratedExterns();",
    "info" : "ExpressionStatement[25267-25310]:ExpressionStatement[25267-25310]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[25316-25326]:ExpressionStatement[25316-25326]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25334-25343]:MarkerAnnotation[25334-25343]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25346-25350]:PrimitiveType[25346-25350]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[25351-25358]:SimpleName[25351-25358]"
  }, {
    "left" : "CompilerPass p",
    "right" : "CompilerPass p",
    "info" : "SingleVariableDeclaration[25359-25373]:SingleVariableDeclaration[25359-25373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25375-25416]:Block[25375-25416]"
  }, {
    "left" : "p.process(externsRoot, jsRoot);",
    "right" : "p.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[25381-25412]:ExpressionStatement[25381-25412]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25510-25519]:MarkerAnnotation[25510-25519]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[25524-25533]:Modifier[25524-25533]"
  }, {
    "left" : "CompilerPass",
    "right" : "CompilerPass",
    "info" : "SimpleType[25534-25546]:SimpleType[25534-25546]"
  }, {
    "left" : "createInternal",
    "right" : "createInternal",
    "info" : "SimpleName[25547-25561]:SimpleName[25547-25561]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[25562-25587]:SingleVariableDeclaration[25562-25587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25589-25636]:Block[25589-25636]"
  }, {
    "left" : "return new SanityCheck(compiler);",
    "right" : "return new SanityCheck(compiler);",
    "info" : "ReturnStatement[25597-25630]:ReturnStatement[25597-25630]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25645-25652]:Modifier[25645-25652]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25653-25657]:PrimitiveType[25653-25657]"
  }, {
    "left" : "maybeSanityCheck",
    "right" : "maybeSanityCheck",
    "info" : "SimpleName[25658-25674]:SimpleName[25658-25674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25677-25761]:Block[25677-25761]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[25683-25757]:IfStatement[25683-25757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25726-25757]:Block[25726-25757]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[25734-25751]:ExpressionStatement[25734-25751]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25765-25772]:Modifier[25765-25772]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25773-25777]:PrimitiveType[25773-25777]"
  }, {
    "left" : "runSanityCheck",
    "right" : "runSanityCheck",
    "info" : "SimpleName[25778-25792]:SimpleName[25778-25792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25795-25859]:Block[25795-25859]"
  }, {
    "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
    "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[25801-25855]:ExpressionStatement[25801-25855]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25939-25943]:PrimitiveType[25939-25943]"
  }, {
    "left" : "removeTryCatchFinally",
    "right" : "removeTryCatchFinally",
    "info" : "SimpleName[25944-25965]:SimpleName[25944-25965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25968-26138]:Block[25968-26138]"
  }, {
    "left" : "logger.fine(\"Remove try/catch/finally\");",
    "right" : "logger.fine(\"Remove try/catch/finally\");",
    "info" : "ExpressionStatement[25974-26014]:ExpressionStatement[25974-26014]"
  }, {
    "left" : "startPass(\"removeTryCatchFinally\");",
    "right" : "startPass(\"removeTryCatchFinally\");",
    "info" : "ExpressionStatement[26019-26054]:ExpressionStatement[26019-26054]"
  }, {
    "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
    "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
    "info" : "VariableDeclarationStatement[26059-26103]:VariableDeclarationStatement[26059-26103]"
  }, {
    "left" : "process(r);",
    "right" : "process(r);",
    "info" : "ExpressionStatement[26108-26119]:ExpressionStatement[26108-26119]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[26124-26134]:ExpressionStatement[26124-26134]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26282-26286]:PrimitiveType[26282-26286]"
  }, {
    "left" : "stripCode",
    "right" : "stripCode",
    "info" : "SimpleName[26287-26296]:SimpleName[26287-26296]"
  }, {
    "left" : "Set<String> stripTypes",
    "right" : "Set<String> stripTypes",
    "info" : "SingleVariableDeclaration[26297-26319]:SingleVariableDeclaration[26297-26319]"
  }, {
    "left" : "Set<String> stripNameSuffixes",
    "right" : "Set<String> stripNameSuffixes",
    "info" : "SingleVariableDeclaration[26321-26350]:SingleVariableDeclaration[26321-26350]"
  }, {
    "left" : "Set<String> stripTypePrefixes",
    "right" : "Set<String> stripTypePrefixes",
    "info" : "SingleVariableDeclaration[26358-26387]:SingleVariableDeclaration[26358-26387]"
  }, {
    "left" : "Set<String> stripNamePrefixes",
    "right" : "Set<String> stripNamePrefixes",
    "info" : "SingleVariableDeclaration[26389-26418]:SingleVariableDeclaration[26389-26418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26420-26723]:Block[26420-26723]"
  }, {
    "left" : "logger.fine(\"Strip code\");",
    "right" : "logger.fine(\"Strip code\");",
    "info" : "ExpressionStatement[26426-26452]:ExpressionStatement[26426-26452]"
  }, {
    "left" : "startPass(\"stripCode\");",
    "right" : "startPass(\"stripCode\");",
    "info" : "ExpressionStatement[26457-26480]:ExpressionStatement[26457-26480]"
  }, {
    "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
    "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
    "info" : "VariableDeclarationStatement[26485-26596]:VariableDeclarationStatement[26485-26596]"
  }, {
    "left" : "if (options.getTweakProcessing().shouldStrip())",
    "right" : "if (options.getTweakProcessing().shouldStrip())",
    "info" : "IfStatement[26601-26688]:IfStatement[26601-26688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26649-26688]:Block[26649-26688]"
  }, {
    "left" : "r.enableTweakStripping();",
    "right" : "r.enableTweakStripping();",
    "info" : "ExpressionStatement[26657-26682]:ExpressionStatement[26657-26682]"
  }, {
    "left" : "process(r);",
    "right" : "process(r);",
    "info" : "ExpressionStatement[26693-26704]:ExpressionStatement[26693-26704]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[26709-26719]:ExpressionStatement[26709-26719]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26812-26819]:Modifier[26812-26819]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26820-26824]:PrimitiveType[26820-26824]"
  }, {
    "left" : "runCustomPasses",
    "right" : "runCustomPasses",
    "info" : "SimpleName[26825-26840]:SimpleName[26825-26840]"
  }, {
    "left" : "CustomPassExecutionTime executionTime",
    "right" : "CustomPassExecutionTime executionTime",
    "info" : "SingleVariableDeclaration[26841-26878]:SingleVariableDeclaration[26841-26878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26880-27163]:Block[26880-27163]"
  }, {
    "left" : "if (options.customPasses != null)",
    "right" : "if (options.customPasses != null)",
    "info" : "IfStatement[26886-27159]:IfStatement[26886-27159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26920-27159]:Block[26920-27159]"
  }, {
    "left" : "Tracer t = newTracer(\"runCustomPasses\");",
    "right" : "Tracer t = newTracer(\"runCustomPasses\");",
    "info" : "VariableDeclarationStatement[26928-26968]:VariableDeclarationStatement[26928-26968]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[26975-27153]:TryStatement[26975-27153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26979-27093]:Block[26979-27093]"
  }, {
    "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
    "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
    "info" : "EnhancedForStatement[26989-27085]:EnhancedForStatement[26989-27085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27052-27085]:Block[27052-27085]"
  }, {
    "left" : "process(p);",
    "right" : "process(p);",
    "info" : "ExpressionStatement[27064-27075]:ExpressionStatement[27064-27075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27102-27153]:Block[27102-27153]"
  }, {
    "left" : "stopTracer(t, \"runCustomPasses\");",
    "right" : "stopTracer(t, \"runCustomPasses\");",
    "info" : "ExpressionStatement[27112-27145]:ExpressionStatement[27112-27145]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27296-27300]:PrimitiveType[27296-27300]"
  }, {
    "left" : "startPass",
    "right" : "startPass",
    "info" : "SimpleName[27301-27310]:SimpleName[27301-27310]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[27311-27326]:SingleVariableDeclaration[27311-27326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27328-27459]:Block[27328-27459]"
  }, {
    "left" : "Preconditions.checkState(currentTracer == null);",
    "right" : "Preconditions.checkState(currentTracer == null);",
    "info" : "ExpressionStatement[27334-27382]:ExpressionStatement[27334-27382]"
  }, {
    "left" : "currentPassName = passName;",
    "right" : "currentPassName = passName;",
    "info" : "ExpressionStatement[27387-27414]:ExpressionStatement[27387-27414]"
  }, {
    "left" : "currentTracer = newTracer(passName);",
    "right" : "currentTracer = newTracer(passName);",
    "info" : "ExpressionStatement[27419-27455]:ExpressionStatement[27419-27455]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27505-27509]:PrimitiveType[27505-27509]"
  }, {
    "left" : "endPass",
    "right" : "endPass",
    "info" : "SimpleName[27510-27517]:SimpleName[27510-27517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27520-27806]:Block[27520-27806]"
  }, {
    "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
    "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
    "info" : "ExpressionStatement[27526-27633]:ExpressionStatement[27526-27633]"
  }, {
    "left" : "stopTracer(currentTracer, currentPassName);",
    "right" : "stopTracer(currentTracer, currentPassName);",
    "info" : "ExpressionStatement[27638-27681]:ExpressionStatement[27638-27681]"
  }, {
    "left" : "String passToCheck = currentPassName;",
    "right" : "String passToCheck = currentPassName;",
    "info" : "VariableDeclarationStatement[27686-27723]:VariableDeclarationStatement[27686-27723]"
  }, {
    "left" : "currentPassName = null;",
    "right" : "currentPassName = null;",
    "info" : "ExpressionStatement[27728-27751]:ExpressionStatement[27728-27751]"
  }, {
    "left" : "currentTracer = null;",
    "right" : "currentTracer = null;",
    "info" : "ExpressionStatement[27756-27777]:ExpressionStatement[27756-27777]"
  }, {
    "left" : "maybeSanityCheck();",
    "right" : "maybeSanityCheck();",
    "info" : "ExpressionStatement[27783-27802]:ExpressionStatement[27783-27802]"
  }, {
    "left" : "Tracer",
    "right" : "Tracer",
    "info" : "SimpleType[27873-27879]:SimpleType[27873-27879]"
  }, {
    "left" : "newTracer",
    "right" : "newTracer",
    "info" : "SimpleName[27880-27889]:SimpleName[27880-27889]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[27890-27905]:SingleVariableDeclaration[27890-27905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27907-28143]:Block[27907-28143]"
  }, {
    "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
    "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
    "info" : "VariableDeclarationStatement[27913-28015]:VariableDeclarationStatement[27913-28015]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[28020-28095]:IfStatement[28020-28095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28047-28095]:Block[28047-28095]"
  }, {
    "left" : "tracker.recordPassStart(passName);",
    "right" : "tracker.recordPassStart(passName);",
    "info" : "ExpressionStatement[28055-28089]:ExpressionStatement[28055-28089]"
  }, {
    "left" : "return new Tracer(\"Compiler\", comment);",
    "right" : "return new Tracer(\"Compiler\", comment);",
    "info" : "ReturnStatement[28100-28139]:ReturnStatement[28100-28139]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28147-28151]:PrimitiveType[28147-28151]"
  }, {
    "left" : "stopTracer",
    "right" : "stopTracer",
    "info" : "SimpleName[28152-28162]:SimpleName[28152-28162]"
  }, {
    "left" : "Tracer t",
    "right" : "Tracer t",
    "info" : "SingleVariableDeclaration[28163-28171]:SingleVariableDeclaration[28163-28171]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[28173-28188]:SingleVariableDeclaration[28173-28188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28190-28310]:Block[28190-28310]"
  }, {
    "left" : "long result = t.stop();",
    "right" : "long result = t.stop();",
    "info" : "VariableDeclarationStatement[28196-28219]:VariableDeclarationStatement[28196-28219]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[28224-28306]:IfStatement[28224-28306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28251-28306]:Block[28251-28306]"
  }, {
    "left" : "tracker.recordPassStop(passName, result);",
    "right" : "tracker.recordPassStop(passName, result);",
    "info" : "ExpressionStatement[28259-28300]:ExpressionStatement[28259-28300]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28370-28376]:Modifier[28370-28376]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[28377-28383]:SimpleType[28377-28383]"
  }, {
    "left" : "getResult",
    "right" : "getResult",
    "info" : "SimpleName[28384-28393]:SimpleName[28384-28393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28396-28741]:Block[28396-28741]"
  }, {
    "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
    "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
    "info" : "VariableDeclarationStatement[28402-28466]:VariableDeclarationStatement[28402-28466]"
  }, {
    "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
    "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
    "info" : "ReturnStatement[28471-28737]:ReturnStatement[28471-28737]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28825-28831]:Modifier[28825-28831]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[28832-28841]:ArrayType[28832-28841]"
  }, {
    "left" : "getMessages",
    "right" : "getMessages",
    "info" : "SimpleName[28842-28853]:SimpleName[28842-28853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28856-28885]:Block[28856-28885]"
  }, {
    "left" : "return getErrors();",
    "right" : "return getErrors();",
    "info" : "ReturnStatement[28862-28881]:ReturnStatement[28862-28881]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28948-28954]:Modifier[28948-28954]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[28955-28964]:ArrayType[28955-28964]"
  }, {
    "left" : "getErrors",
    "right" : "getErrors",
    "info" : "SimpleName[28965-28974]:SimpleName[28965-28974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28977-29019]:Block[28977-29019]"
  }, {
    "left" : "return errorManager.getErrors();",
    "right" : "return errorManager.getErrors();",
    "info" : "ReturnStatement[28983-29015]:ReturnStatement[28983-29015]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29084-29090]:Modifier[29084-29090]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[29091-29100]:ArrayType[29091-29100]"
  }, {
    "left" : "getWarnings",
    "right" : "getWarnings",
    "info" : "SimpleName[29101-29112]:SimpleName[29101-29112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29115-29159]:Block[29115-29159]"
  }, {
    "left" : "return errorManager.getWarnings();",
    "right" : "return errorManager.getWarnings();",
    "info" : "ReturnStatement[29121-29155]:ReturnStatement[29121-29155]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29163-29172]:MarkerAnnotation[29163-29172]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29175-29181]:Modifier[29175-29181]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[29182-29186]:SimpleType[29182-29186]"
  }, {
    "left" : "getRoot",
    "right" : "getRoot",
    "info" : "SimpleName[29187-29194]:SimpleName[29187-29194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29197-29230]:Block[29197-29230]"
  }, {
    "left" : "return externAndJsRoot;",
    "right" : "return externAndJsRoot;",
    "info" : "ReturnStatement[29203-29226]:ReturnStatement[29203-29226]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29293-29300]:Modifier[29293-29300]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[29301-29304]:PrimitiveType[29301-29304]"
  }, {
    "left" : "nextUniqueNameId",
    "right" : "nextUniqueNameId",
    "info" : "SimpleName[29305-29321]:SimpleName[29305-29321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29324-29356]:Block[29324-29356]"
  }, {
    "left" : "return uniqueNameId++;",
    "right" : "return uniqueNameId++;",
    "info" : "ReturnStatement[29330-29352]:ReturnStatement[29330-29352]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[29411-29429]:MarkerAnnotation[29411-29429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29432-29436]:PrimitiveType[29432-29436]"
  }, {
    "left" : "resetUniqueNameId",
    "right" : "resetUniqueNameId",
    "info" : "SimpleName[29437-29454]:SimpleName[29437-29454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29457-29484]:Block[29457-29484]"
  }, {
    "left" : "uniqueNameId = 0;",
    "right" : "uniqueNameId = 0;",
    "info" : "ExpressionStatement[29463-29480]:ExpressionStatement[29463-29480]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29488-29497]:MarkerAnnotation[29488-29497]"
  }, {
    "left" : "Supplier<String>",
    "right" : "Supplier<String>",
    "info" : "ParameterizedType[29500-29516]:ParameterizedType[29500-29516]"
  }, {
    "left" : "getUniqueNameIdSupplier",
    "right" : "getUniqueNameIdSupplier",
    "info" : "SimpleName[29517-29540]:SimpleName[29517-29540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29543-29731]:Block[29543-29731]"
  }, {
    "left" : "final Compiler self = this;",
    "right" : "final Compiler self = this;",
    "info" : "VariableDeclarationStatement[29549-29576]:VariableDeclarationStatement[29549-29576]"
  }, {
    "left" : "return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
    "right" : "return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
    "info" : "ReturnStatement[29581-29727]:ReturnStatement[29581-29727]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29619-29628]:MarkerAnnotation[29619-29628]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29635-29641]:Modifier[29635-29641]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[29642-29648]:SimpleType[29642-29648]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[29649-29652]:SimpleName[29649-29652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29655-29720]:Block[29655-29720]"
  }, {
    "left" : "return String.valueOf(self.nextUniqueNameId());",
    "right" : "return String.valueOf(self.nextUniqueNameId());",
    "info" : "ReturnStatement[29665-29712]:ReturnStatement[29665-29712]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29735-29744]:MarkerAnnotation[29735-29744]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29747-29754]:PrimitiveType[29747-29754]"
  }, {
    "left" : "areNodesEqualForInlining",
    "right" : "areNodesEqualForInlining",
    "info" : "SimpleName[29755-29779]:SimpleName[29755-29779]"
  }, {
    "left" : "Node n1",
    "right" : "Node n1",
    "info" : "SingleVariableDeclaration[29780-29787]:SingleVariableDeclaration[29780-29787]"
  }, {
    "left" : "Node n2",
    "right" : "Node n2",
    "info" : "SingleVariableDeclaration[29789-29796]:SingleVariableDeclaration[29789-29796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29798-30098]:Block[29798-30098]"
  }, {
    "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
    "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
    "info" : "IfStatement[29804-30094]:IfStatement[29804-30094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29879-30045]:Block[29879-30045]"
  }, {
    "left" : "return n1.isEquivalentToTyped(n2);",
    "right" : "return n1.isEquivalentToTyped(n2);",
    "info" : "ReturnStatement[30005-30039]:ReturnStatement[30005-30039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30051-30094]:Block[30051-30094]"
  }, {
    "left" : "return n1.isEquivalentTo(n2);",
    "right" : "return n1.isEquivalentTo(n2);",
    "info" : "ReturnStatement[30059-30088]:ReturnStatement[30059-30088]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30409-30418]:MarkerAnnotation[30409-30418]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30421-30427]:Modifier[30421-30427]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[30428-30441]:SimpleType[30428-30441]"
  }, {
    "left" : "getInput",
    "right" : "getInput",
    "info" : "SimpleName[30442-30450]:SimpleName[30442-30450]"
  }, {
    "left" : "InputId id",
    "right" : "InputId id",
    "info" : "SingleVariableDeclaration[30451-30461]:SingleVariableDeclaration[30451-30461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30463-30499]:Block[30463-30499]"
  }, {
    "left" : "return inputsById.get(id);",
    "right" : "return inputsById.get(id);",
    "info" : "ReturnStatement[30469-30495]:ReturnStatement[30469-30495]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[30602-30611]:Modifier[30602-30611]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30612-30616]:PrimitiveType[30612-30616]"
  }, {
    "left" : "removeExternInput",
    "right" : "removeExternInput",
    "info" : "SimpleName[30617-30634]:SimpleName[30617-30634]"
  }, {
    "left" : "InputId id",
    "right" : "InputId id",
    "info" : "SingleVariableDeclaration[30635-30645]:SingleVariableDeclaration[30635-30645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30647-30984]:Block[30647-30984]"
  }, {
    "left" : "CompilerInput input = getInput(id);",
    "right" : "CompilerInput input = getInput(id);",
    "info" : "VariableDeclarationStatement[30653-30688]:VariableDeclarationStatement[30653-30688]"
  }, {
    "left" : "if (input == null)",
    "right" : "if (input == null)",
    "info" : "IfStatement[30693-30733]:IfStatement[30693-30733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30712-30733]:Block[30712-30733]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30720-30727]:ReturnStatement[30720-30727]"
  }, {
    "left" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());",
    "right" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());",
    "info" : "ExpressionStatement[30738-30825]:ExpressionStatement[30738-30825]"
  }, {
    "left" : "inputsById.remove(id);",
    "right" : "inputsById.remove(id);",
    "info" : "ExpressionStatement[30830-30852]:ExpressionStatement[30830-30852]"
  }, {
    "left" : "externs.remove(input);",
    "right" : "externs.remove(input);",
    "info" : "ExpressionStatement[30857-30879]:ExpressionStatement[30857-30879]"
  }, {
    "left" : "Node root = input.getAstRoot(this);",
    "right" : "Node root = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[30884-30919]:VariableDeclarationStatement[30884-30919]"
  }, {
    "left" : "if (root != null)",
    "right" : "if (root != null)",
    "info" : "IfStatement[30924-30980]:IfStatement[30924-30980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30942-30980]:Block[30942-30980]"
  }, {
    "left" : "root.detachFromParent();",
    "right" : "root.detachFromParent();",
    "info" : "ExpressionStatement[30950-30974]:ExpressionStatement[30950-30974]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30988-30997]:MarkerAnnotation[30988-30997]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31000-31006]:Modifier[31000-31006]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[31007-31020]:SimpleType[31007-31020]"
  }, {
    "left" : "newExternInput",
    "right" : "newExternInput",
    "info" : "SimpleName[31021-31035]:SimpleName[31021-31035]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[31036-31047]:SingleVariableDeclaration[31036-31047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31049-31440]:Block[31049-31440]"
  }, {
    "left" : "SourceAst ast = new SyntheticAst(name);",
    "right" : "SourceAst ast = new SyntheticAst(name);",
    "info" : "VariableDeclarationStatement[31055-31094]:VariableDeclarationStatement[31055-31094]"
  }, {
    "left" : "if (inputsById.containsKey(ast.getInputId()))",
    "right" : "if (inputsById.containsKey(ast.getInputId()))",
    "info" : "IfStatement[31099-31231]:IfStatement[31099-31231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31145-31231]:Block[31145-31231]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
    "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
    "info" : "ThrowStatement[31153-31225]:ThrowStatement[31153-31225]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(ast, true);",
    "right" : "CompilerInput input = new CompilerInput(ast, true);",
    "info" : "VariableDeclarationStatement[31236-31287]:VariableDeclarationStatement[31236-31287]"
  }, {
    "left" : "putCompilerInput(input.getInputId(), input);",
    "right" : "putCompilerInput(input.getInputId(), input);",
    "info" : "ExpressionStatement[31292-31336]:ExpressionStatement[31292-31336]"
  }, {
    "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
    "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
    "info" : "ExpressionStatement[31341-31391]:ExpressionStatement[31341-31391]"
  }, {
    "left" : "externs.add(0, input);",
    "right" : "externs.add(0, input);",
    "info" : "ExpressionStatement[31396-31418]:ExpressionStatement[31396-31418]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[31423-31436]:ReturnStatement[31423-31436]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31444-31451]:Modifier[31444-31451]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[31452-31465]:SimpleType[31452-31465]"
  }, {
    "left" : "putCompilerInput",
    "right" : "putCompilerInput",
    "info" : "SimpleName[31466-31482]:SimpleName[31466-31482]"
  }, {
    "left" : "InputId id",
    "right" : "InputId id",
    "info" : "SingleVariableDeclaration[31483-31493]:SingleVariableDeclaration[31483-31493]"
  }, {
    "left" : "CompilerInput input",
    "right" : "CompilerInput input",
    "info" : "SingleVariableDeclaration[31495-31514]:SingleVariableDeclaration[31495-31514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31516-31588]:Block[31516-31588]"
  }, {
    "left" : "input.setCompiler(this);",
    "right" : "input.setCompiler(this);",
    "info" : "ExpressionStatement[31522-31546]:ExpressionStatement[31522-31546]"
  }, {
    "left" : "return inputsById.put(id, input);",
    "right" : "return inputsById.put(id, input);",
    "info" : "ReturnStatement[31551-31584]:ReturnStatement[31551-31584]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31671-31675]:PrimitiveType[31671-31675]"
  }, {
    "left" : "addIncrementalSourceAst",
    "right" : "addIncrementalSourceAst",
    "info" : "SimpleName[31676-31699]:SimpleName[31676-31699]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[31700-31709]:SingleVariableDeclaration[31700-31709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31711-31891]:Block[31711-31891]"
  }, {
    "left" : "InputId id = ast.getInputId();",
    "right" : "InputId id = ast.getInputId();",
    "info" : "VariableDeclarationStatement[31717-31747]:VariableDeclarationStatement[31717-31747]"
  }, {
    "left" : "Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());",
    "right" : "Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());",
    "info" : "ExpressionStatement[31752-31837]:ExpressionStatement[31752-31837]"
  }, {
    "left" : "putCompilerInput(id, new CompilerInput(ast));",
    "right" : "putCompilerInput(id, new CompilerInput(ast));",
    "info" : "ExpressionStatement[31842-31887]:ExpressionStatement[31842-31887]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32166-32173]:PrimitiveType[32166-32173]"
  }, {
    "left" : "replaceIncrementalSourceAst",
    "right" : "replaceIncrementalSourceAst",
    "info" : "SimpleName[32174-32201]:SimpleName[32174-32201]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[32202-32211]:SingleVariableDeclaration[32202-32211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32213-33255]:Block[32213-33255]"
  }, {
    "left" : "CompilerInput oldInput = getInput(ast.getInputId());",
    "right" : "CompilerInput oldInput = getInput(ast.getInputId());",
    "info" : "VariableDeclarationStatement[32219-32271]:VariableDeclarationStatement[32219-32271]"
  }, {
    "left" : "Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());",
    "right" : "Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());",
    "info" : "ExpressionStatement[32276-32370]:ExpressionStatement[32276-32370]"
  }, {
    "left" : "Node newRoot = ast.getAstRoot(this);",
    "right" : "Node newRoot = ast.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[32375-32411]:VariableDeclarationStatement[32375-32411]"
  }, {
    "left" : "if (newRoot == null)",
    "right" : "if (newRoot == null)",
    "info" : "IfStatement[32416-32464]:IfStatement[32416-32464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32437-32464]:Block[32437-32464]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[32445-32458]:ReturnStatement[32445-32458]"
  }, {
    "left" : "Node oldRoot = oldInput.getAstRoot(this);",
    "right" : "Node oldRoot = oldInput.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[32470-32511]:VariableDeclarationStatement[32470-32511]"
  }, {
    "left" : "if (oldRoot != null)",
    "right" : "if (oldRoot != null)",
    "info" : "IfStatement[32516-32671]:IfStatement[32516-32671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32537-32602]:Block[32537-32602]"
  }, {
    "left" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
    "right" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
    "info" : "ExpressionStatement[32545-32596]:ExpressionStatement[32545-32596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32608-32671]:Block[32608-32671]"
  }, {
    "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
    "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
    "info" : "ExpressionStatement[32616-32665]:ExpressionStatement[32616-32665]"
  }, {
    "left" : "CompilerInput newInput = new CompilerInput(ast);",
    "right" : "CompilerInput newInput = new CompilerInput(ast);",
    "info" : "VariableDeclarationStatement[32677-32725]:VariableDeclarationStatement[32677-32725]"
  }, {
    "left" : "putCompilerInput(ast.getInputId(), newInput);",
    "right" : "putCompilerInput(ast.getInputId(), newInput);",
    "info" : "ExpressionStatement[32730-32775]:ExpressionStatement[32730-32775]"
  }, {
    "left" : "JSModule module = oldInput.getModule();",
    "right" : "JSModule module = oldInput.getModule();",
    "info" : "VariableDeclarationStatement[32781-32820]:VariableDeclarationStatement[32781-32820]"
  }, {
    "left" : "if (module != null)",
    "right" : "if (module != null)",
    "info" : "IfStatement[32825-32926]:IfStatement[32825-32926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32845-32926]:Block[32845-32926]"
  }, {
    "left" : "module.addAfter(newInput, oldInput);",
    "right" : "module.addAfter(newInput, oldInput);",
    "info" : "ExpressionStatement[32853-32889]:ExpressionStatement[32853-32889]"
  }, {
    "left" : "module.remove(oldInput);",
    "right" : "module.remove(oldInput);",
    "info" : "ExpressionStatement[32896-32920]:ExpressionStatement[32896-32920]"
  }, {
    "left" : "Preconditions.checkState(\n        newInput.getInputId().equals(oldInput.getInputId()));",
    "right" : "Preconditions.checkState(\n        newInput.getInputId().equals(oldInput.getInputId()));",
    "info" : "ExpressionStatement[32976-33063]:ExpressionStatement[32976-33063]"
  }, {
    "left" : "InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();",
    "right" : "InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();",
    "info" : "VariableDeclarationStatement[33068-33130]:VariableDeclarationStatement[33068-33130]"
  }, {
    "left" : "Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));",
    "right" : "Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));",
    "info" : "ExpressionStatement[33135-33204]:ExpressionStatement[33135-33204]"
  }, {
    "left" : "inputs.remove(oldInput);",
    "right" : "inputs.remove(oldInput);",
    "info" : "ExpressionStatement[33210-33234]:ExpressionStatement[33210-33234]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[33239-33251]:ReturnStatement[33239-33251]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33652-33659]:PrimitiveType[33652-33659]"
  }, {
    "left" : "addNewSourceAst",
    "right" : "addNewSourceAst",
    "info" : "SimpleName[33660-33675]:SimpleName[33660-33675]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[33676-33685]:SingleVariableDeclaration[33676-33685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33687-34353]:Block[33687-34353]"
  }, {
    "left" : "CompilerInput oldInput = getInput(ast.getInputId());",
    "right" : "CompilerInput oldInput = getInput(ast.getInputId());",
    "info" : "VariableDeclarationStatement[33693-33745]:VariableDeclarationStatement[33693-33745]"
  }, {
    "left" : "if (oldInput != null)",
    "right" : "if (oldInput != null)",
    "info" : "IfStatement[33750-33886]:IfStatement[33750-33886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33772-33886]:Block[33772-33886]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Input already exists: \" + ast.getInputId().getIdName());",
    "right" : "throw new IllegalStateException(\n          \"Input already exists: \" + ast.getInputId().getIdName());",
    "info" : "ThrowStatement[33780-33880]:ThrowStatement[33780-33880]"
  }, {
    "left" : "Node newRoot = ast.getAstRoot(this);",
    "right" : "Node newRoot = ast.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[33891-33927]:VariableDeclarationStatement[33891-33927]"
  }, {
    "left" : "if (newRoot == null)",
    "right" : "if (newRoot == null)",
    "info" : "IfStatement[33932-33980]:IfStatement[33932-33980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33953-33980]:Block[33953-33980]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33961-33974]:ReturnStatement[33961-33974]"
  }, {
    "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
    "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
    "info" : "ExpressionStatement[33986-34035]:ExpressionStatement[33986-34035]"
  }, {
    "left" : "CompilerInput newInput = new CompilerInput(ast);",
    "right" : "CompilerInput newInput = new CompilerInput(ast);",
    "info" : "VariableDeclarationStatement[34041-34089]:VariableDeclarationStatement[34041-34089]"
  }, {
    "left" : "if (moduleGraph == null && !modules.isEmpty())",
    "right" : "if (moduleGraph == null && !modules.isEmpty())",
    "info" : "IfStatement[34164-34280]:IfStatement[34164-34280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34211-34280]:Block[34211-34280]"
  }, {
    "left" : "modules.get(0).add(newInput);",
    "right" : "modules.get(0).add(newInput);",
    "info" : "ExpressionStatement[34245-34274]:ExpressionStatement[34245-34274]"
  }, {
    "left" : "putCompilerInput(ast.getInputId(), newInput);",
    "right" : "putCompilerInput(ast.getInputId(), newInput);",
    "info" : "ExpressionStatement[34286-34331]:ExpressionStatement[34286-34331]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34337-34349]:ReturnStatement[34337-34349]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34357-34366]:MarkerAnnotation[34357-34366]"
  }, {
    "left" : "JSModuleGraph",
    "right" : "JSModuleGraph",
    "info" : "SimpleType[34369-34382]:SimpleType[34369-34382]"
  }, {
    "left" : "getModuleGraph",
    "right" : "getModuleGraph",
    "info" : "SimpleName[34383-34397]:SimpleName[34383-34397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34400-34429]:Block[34400-34429]"
  }, {
    "left" : "return moduleGraph;",
    "right" : "return moduleGraph;",
    "info" : "ReturnStatement[34406-34425]:ReturnStatement[34406-34425]"
  }, {
    "left" : "JSModuleGraph",
    "right" : "JSModuleGraph",
    "info" : "SimpleType[34574-34587]:SimpleType[34574-34587]"
  }, {
    "left" : "getDegenerateModuleGraph",
    "right" : "getDegenerateModuleGraph",
    "info" : "SimpleName[34588-34612]:SimpleName[34588-34612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34615-34695]:Block[34615-34695]"
  }, {
    "left" : "return moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph;",
    "right" : "return moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph;",
    "info" : "ReturnStatement[34621-34691]:ReturnStatement[34621-34691]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34699-34708]:MarkerAnnotation[34699-34708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34711-34717]:Modifier[34711-34717]"
  }, {
    "left" : "JSTypeRegistry",
    "right" : "JSTypeRegistry",
    "info" : "SimpleType[34718-34732]:SimpleType[34718-34732]"
  }, {
    "left" : "getTypeRegistry",
    "right" : "getTypeRegistry",
    "info" : "SimpleName[34733-34748]:SimpleName[34733-34748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34751-34898]:Block[34751-34898]"
  }, {
    "left" : "if (typeRegistry == null)",
    "right" : "if (typeRegistry == null)",
    "info" : "IfStatement[34757-34869]:IfStatement[34757-34869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34783-34869]:Block[34783-34869]"
  }, {
    "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
    "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
    "info" : "ExpressionStatement[34791-34863]:ExpressionStatement[34791-34863]"
  }, {
    "left" : "return typeRegistry;",
    "right" : "return typeRegistry;",
    "info" : "ReturnStatement[34874-34894]:ReturnStatement[34874-34894]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34902-34911]:MarkerAnnotation[34902-34911]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34914-34920]:Modifier[34914-34920]"
  }, {
    "left" : "MemoizedScopeCreator",
    "right" : "MemoizedScopeCreator",
    "info" : "SimpleType[34921-34941]:SimpleType[34921-34941]"
  }, {
    "left" : "getTypedScopeCreator",
    "right" : "getTypedScopeCreator",
    "info" : "SimpleName[34942-34962]:SimpleName[34942-34962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34965-35021]:Block[34965-35021]"
  }, {
    "left" : "return getPassConfig().getTypedScopeCreator();",
    "right" : "return getPassConfig().getTypedScopeCreator();",
    "info" : "ReturnStatement[34971-35017]:ReturnStatement[34971-35017]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[35025-35055]:SingleMemberAnnotation[35025-35055]"
  }, {
    "left" : "DefaultPassConfig",
    "right" : "DefaultPassConfig",
    "info" : "SimpleType[35058-35075]:SimpleType[35058-35075]"
  }, {
    "left" : "ensureDefaultPassConfig",
    "right" : "ensureDefaultPassConfig",
    "info" : "SimpleName[35076-35099]:SimpleName[35076-35099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35102-35347]:Block[35102-35347]"
  }, {
    "left" : "PassConfig passes = getPassConfig().getBasePassConfig();",
    "right" : "PassConfig passes = getPassConfig().getBasePassConfig();",
    "info" : "VariableDeclarationStatement[35108-35164]:VariableDeclarationStatement[35108-35164]"
  }, {
    "left" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
    "right" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
    "info" : "ExpressionStatement[35169-35304]:ExpressionStatement[35169-35304]"
  }, {
    "left" : "return (DefaultPassConfig) passes;",
    "right" : "return (DefaultPassConfig) passes;",
    "info" : "ReturnStatement[35309-35343]:ReturnStatement[35309-35343]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35351-35357]:Modifier[35351-35357]"
  }, {
    "left" : "SymbolTable",
    "right" : "SymbolTable",
    "info" : "SimpleType[35358-35369]:SimpleType[35358-35369]"
  }, {
    "left" : "buildKnownSymbolTable",
    "right" : "buildKnownSymbolTable",
    "info" : "SimpleName[35370-35391]:SimpleName[35370-35391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35394-36740]:Block[35394-36740]"
  }, {
    "left" : "SymbolTable symbolTable = new SymbolTable(getTypeRegistry());",
    "right" : "SymbolTable symbolTable = new SymbolTable(getTypeRegistry());",
    "info" : "VariableDeclarationStatement[35400-35461]:VariableDeclarationStatement[35400-35461]"
  }, {
    "left" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
    "right" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
    "info" : "VariableDeclarationStatement[35467-35531]:VariableDeclarationStatement[35467-35531]"
  }, {
    "left" : "if (typedScopeCreator != null)",
    "right" : "if (typedScopeCreator != null)",
    "info" : "IfStatement[35536-35768]:IfStatement[35536-35768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35567-35698]:Block[35567-35698]"
  }, {
    "left" : "symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());",
    "right" : "symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());",
    "info" : "ExpressionStatement[35575-35639]:ExpressionStatement[35575-35639]"
  }, {
    "left" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
    "right" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
    "info" : "ExpressionStatement[35646-35692]:ExpressionStatement[35646-35692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35704-35768]:Block[35704-35768]"
  }, {
    "left" : "symbolTable.findScopes(this, externsRoot, jsRoot);",
    "right" : "symbolTable.findScopes(this, externsRoot, jsRoot);",
    "info" : "ExpressionStatement[35712-35762]:ExpressionStatement[35712-35762]"
  }, {
    "left" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
    "right" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
    "info" : "VariableDeclarationStatement[35774-35863]:VariableDeclarationStatement[35774-35863]"
  }, {
    "left" : "if (globalNamespace != null)",
    "right" : "if (globalNamespace != null)",
    "info" : "IfStatement[35868-35955]:IfStatement[35868-35955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35897-35955]:Block[35897-35955]"
  }, {
    "left" : "symbolTable.addSymbolsFrom(globalNamespace);",
    "right" : "symbolTable.addSymbolsFrom(globalNamespace);",
    "info" : "ExpressionStatement[35905-35949]:ExpressionStatement[35905-35949]"
  }, {
    "left" : "ReferenceCollectingCallback refCollector =\n        new ReferenceCollectingCallback(\n            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);",
    "right" : "ReferenceCollectingCallback refCollector =\n        new ReferenceCollectingCallback(\n            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);",
    "info" : "VariableDeclarationStatement[35961-36112]:VariableDeclarationStatement[35961-36112]"
  }, {
    "left" : "NodeTraversal.traverse(this, getRoot(), refCollector);",
    "right" : "NodeTraversal.traverse(this, getRoot(), refCollector);",
    "info" : "ExpressionStatement[36117-36171]:ExpressionStatement[36117-36171]"
  }, {
    "left" : "symbolTable.addSymbolsFrom(refCollector);",
    "right" : "symbolTable.addSymbolsFrom(refCollector);",
    "info" : "ExpressionStatement[36176-36217]:ExpressionStatement[36176-36217]"
  }, {
    "left" : "PreprocessorSymbolTable preprocessorSymbolTable =\n        ensureDefaultPassConfig().getPreprocessorSymbolTable();",
    "right" : "PreprocessorSymbolTable preprocessorSymbolTable =\n        ensureDefaultPassConfig().getPreprocessorSymbolTable();",
    "info" : "VariableDeclarationStatement[36223-36336]:VariableDeclarationStatement[36223-36336]"
  }, {
    "left" : "if (preprocessorSymbolTable != null)",
    "right" : "if (preprocessorSymbolTable != null)",
    "info" : "IfStatement[36341-36444]:IfStatement[36341-36444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36378-36444]:Block[36378-36444]"
  }, {
    "left" : "symbolTable.addSymbolsFrom(preprocessorSymbolTable);",
    "right" : "symbolTable.addSymbolsFrom(preprocessorSymbolTable);",
    "info" : "ExpressionStatement[36386-36438]:ExpressionStatement[36386-36438]"
  }, {
    "left" : "symbolTable.fillNamespaceReferences();",
    "right" : "symbolTable.fillNamespaceReferences();",
    "info" : "ExpressionStatement[36450-36488]:ExpressionStatement[36450-36488]"
  }, {
    "left" : "symbolTable.fillPropertyScopes();",
    "right" : "symbolTable.fillPropertyScopes();",
    "info" : "ExpressionStatement[36493-36526]:ExpressionStatement[36493-36526]"
  }, {
    "left" : "symbolTable.fillThisReferences(this, externsRoot, jsRoot);",
    "right" : "symbolTable.fillThisReferences(this, externsRoot, jsRoot);",
    "info" : "ExpressionStatement[36531-36589]:ExpressionStatement[36531-36589]"
  }, {
    "left" : "symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);",
    "right" : "symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);",
    "info" : "ExpressionStatement[36594-36653]:ExpressionStatement[36594-36653]"
  }, {
    "left" : "symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);",
    "right" : "symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);",
    "info" : "ExpressionStatement[36658-36711]:ExpressionStatement[36658-36711]"
  }, {
    "left" : "return symbolTable;",
    "right" : "return symbolTable;",
    "info" : "ReturnStatement[36717-36736]:ReturnStatement[36717-36736]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36744-36753]:MarkerAnnotation[36744-36753]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36756-36762]:Modifier[36756-36762]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[36763-36768]:SimpleType[36763-36768]"
  }, {
    "left" : "getTopScope",
    "right" : "getTopScope",
    "info" : "SimpleName[36769-36780]:SimpleName[36769-36780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36783-36830]:Block[36783-36830]"
  }, {
    "left" : "return getPassConfig().getTopScope();",
    "right" : "return getPassConfig().getTopScope();",
    "info" : "ReturnStatement[36789-36826]:ReturnStatement[36789-36826]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36834-36843]:MarkerAnnotation[36834-36843]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36846-36852]:Modifier[36846-36852]"
  }, {
    "left" : "ReverseAbstractInterpreter",
    "right" : "ReverseAbstractInterpreter",
    "info" : "SimpleType[36853-36879]:SimpleType[36853-36879]"
  }, {
    "left" : "getReverseAbstractInterpreter",
    "right" : "getReverseAbstractInterpreter",
    "info" : "SimpleName[36880-36909]:SimpleName[36880-36909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36912-37399]:Block[36912-37399]"
  }, {
    "left" : "if (abstractInterpreter == null)",
    "right" : "if (abstractInterpreter == null)",
    "info" : "IfStatement[36918-37363]:IfStatement[36918-37363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36951-37363]:Block[36951-37363]"
  }, {
    "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
    "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
    "info" : "VariableDeclarationStatement[36959-37115]:VariableDeclarationStatement[36959-37115]"
  }, {
    "left" : "if (options.closurePass)",
    "right" : "if (options.closurePass)",
    "info" : "IfStatement[37122-37316]:IfStatement[37122-37316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37147-37316]:Block[37147-37316]"
  }, {
    "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
    "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
    "info" : "ExpressionStatement[37157-37308]:ExpressionStatement[37157-37308]"
  }, {
    "left" : "abstractInterpreter = interpreter;",
    "right" : "abstractInterpreter = interpreter;",
    "info" : "ExpressionStatement[37323-37357]:ExpressionStatement[37323-37357]"
  }, {
    "left" : "return abstractInterpreter;",
    "right" : "return abstractInterpreter;",
    "info" : "ReturnStatement[37368-37395]:ReturnStatement[37368-37395]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37403-37412]:MarkerAnnotation[37403-37412]"
  }, {
    "left" : "TypeValidator",
    "right" : "TypeValidator",
    "info" : "SimpleType[37415-37428]:SimpleType[37415-37428]"
  }, {
    "left" : "getTypeValidator",
    "right" : "getTypeValidator",
    "info" : "SimpleName[37429-37445]:SimpleName[37429-37445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37448-37565]:Block[37448-37565]"
  }, {
    "left" : "if (typeValidator == null)",
    "right" : "if (typeValidator == null)",
    "info" : "IfStatement[37454-37535]:IfStatement[37454-37535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37481-37535]:Block[37481-37535]"
  }, {
    "left" : "typeValidator = new TypeValidator(this);",
    "right" : "typeValidator = new TypeValidator(this);",
    "info" : "ExpressionStatement[37489-37529]:ExpressionStatement[37489-37529]"
  }, {
    "left" : "return typeValidator;",
    "right" : "return typeValidator;",
    "info" : "ReturnStatement[37540-37561]:ReturnStatement[37540-37561]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[37897-37901]:SimpleType[37897-37901]"
  }, {
    "left" : "parseInputs",
    "right" : "parseInputs",
    "info" : "SimpleName[37902-37913]:SimpleName[37902-37913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37916-42394]:Block[37916-42358]"
  }, {
    "left" : "boolean devMode = options.devMode != DevMode.OFF;",
    "right" : "boolean devMode = options.devMode != DevMode.OFF;",
    "info" : "VariableDeclarationStatement[37922-37971]:VariableDeclarationStatement[37922-37971]"
  }, {
    "left" : "if (externsRoot != null)",
    "right" : "if (externsRoot != null)",
    "info" : "IfStatement[38090-38158]:IfStatement[38090-38158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38115-38158]:Block[38115-38158]"
  }, {
    "left" : "externsRoot.detachChildren();",
    "right" : "externsRoot.detachChildren();",
    "info" : "ExpressionStatement[38123-38152]:ExpressionStatement[38123-38152]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[38163-38221]:IfStatement[38163-38221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38183-38221]:Block[38183-38221]"
  }, {
    "left" : "jsRoot.detachChildren();",
    "right" : "jsRoot.detachChildren();",
    "info" : "ExpressionStatement[38191-38215]:ExpressionStatement[38191-38215]"
  }, {
    "left" : "jsRoot = IR.block();",
    "right" : "jsRoot = IR.block();",
    "info" : "ExpressionStatement[38257-38277]:ExpressionStatement[38257-38277]"
  }, {
    "left" : "jsRoot.setIsSyntheticBlock(true);",
    "right" : "jsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[38282-38315]:ExpressionStatement[38282-38315]"
  }, {
    "left" : "externsRoot = IR.block();",
    "right" : "externsRoot = IR.block();",
    "info" : "ExpressionStatement[38321-38346]:ExpressionStatement[38321-38346]"
  }, {
    "left" : "externsRoot.setIsSyntheticBlock(true);",
    "right" : "externsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[38351-38389]:ExpressionStatement[38351-38389]"
  }, {
    "left" : "externAndJsRoot = IR.block(externsRoot, jsRoot);",
    "right" : "externAndJsRoot = IR.block(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[38395-38443]:ExpressionStatement[38395-38443]"
  }, {
    "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
    "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[38448-38490]:ExpressionStatement[38448-38490]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[38496-38650]:IfStatement[38496-38650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38523-38650]:Block[38523-38650]"
  }, {
    "left" : "tracker = new PerformanceTracker(jsRoot, options.tracer);",
    "right" : "tracker = new PerformanceTracker(jsRoot, options.tracer);",
    "info" : "ExpressionStatement[38531-38588]:ExpressionStatement[38531-38588]"
  }, {
    "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
    "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
    "info" : "ExpressionStatement[38595-38644]:ExpressionStatement[38595-38644]"
  }, {
    "left" : "Tracer tracer = newTracer(\"parseInputs\");",
    "right" : "Tracer tracer = newTracer(\"parseInputs\");",
    "info" : "VariableDeclarationStatement[38656-38697]:VariableDeclarationStatement[38656-38697]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38703-42390]:TryStatement[38703-42354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38707-42333]:Block[38707-42297]"
  }, {
    "left" : "for (CompilerInput input : externs)",
    "right" : "for (CompilerInput input : externs)",
    "info" : "EnhancedForStatement[38747-38932]:EnhancedForStatement[38747-38932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38783-38932]:Block[38783-38932]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[38793-38825]:VariableDeclarationStatement[38793-38825]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[38834-38885]:IfStatement[38834-38885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38851-38885]:Block[38851-38885]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[38863-38875]:ReturnStatement[38863-38875]"
  }, {
    "left" : "externsRoot.addChildToBack(n);",
    "right" : "externsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[38894-38924]:ExpressionStatement[38894-38924]"
  }, {
    "left" : "if (options.transformAMDToCJSModules || options.processCommonJSModules)",
    "right" : "if (options.transformAMDToCJSModules || options.processCommonJSModules)",
    "info" : "IfStatement[38991-39112]:IfStatement[38991-39112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39063-39112]:Block[39063-39112]"
  }, {
    "left" : "processAMDAndCommonJSModules();",
    "right" : "processAMDAndCommonJSModules();",
    "info" : "ExpressionStatement[39073-39104]:ExpressionStatement[39073-39104]"
  }, {
    "left" : "boolean staleInputs = false;",
    "right" : "boolean staleInputs = false;",
    "info" : "VariableDeclarationStatement[39178-39206]:VariableDeclarationStatement[39178-39206]"
  }, {
    "left" : "if (options.dependencyOptions.needsManagement() &&\n          !options.skipAllPasses &&\n          options.closurePass)",
    "right" : "if (options.dependencyOptions.needsManagement() &&\n          options.closurePass)",
    "info" : "IfStatement[39267-40479]:IfStatement[39267-40443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39385-40479]:Block[39349-40443]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[39395-39705]:EnhancedForStatement[39359-39669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39430-39705]:Block[39394-39669]"
  }, {
    "left" : "for (String provide : input.getProvides())",
    "right" : "for (String provide : input.getProvides())",
    "info" : "EnhancedForStatement[39580-39695]:EnhancedForStatement[39544-39659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39623-39695]:Block[39587-39659]"
  }, {
    "left" : "getTypeRegistry().forwardDeclareType(provide);",
    "right" : "getTypeRegistry().forwardDeclareType(provide);",
    "info" : "ExpressionStatement[39637-39683]:ExpressionStatement[39601-39647]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[39715-40471]:TryStatement[39679-40435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39719-39928]:Block[39683-39892]"
  }, {
    "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);",
    "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);",
    "info" : "ExpressionStatement[39731-39888]:ExpressionStatement[39695-39852]"
  }, {
    "left" : "staleInputs = true;",
    "right" : "staleInputs = true;",
    "info" : "ExpressionStatement[39899-39918]:ExpressionStatement[39863-39882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39967-40209]:Block[39931-40173]"
  }, {
    "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
    "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
    "info" : "ExpressionStatement[39979-40067]:ExpressionStatement[39943-40031]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[40144-40199]:IfStatement[40108-40163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40161-40199]:Block[40125-40163]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[40175-40187]:ReturnStatement[40139-40151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40244-40471]:Block[40208-40435]"
  }, {
    "left" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
    "right" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
    "info" : "ExpressionStatement[40256-40329]:ExpressionStatement[40220-40293]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[40406-40461]:IfStatement[40370-40425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40423-40461]:Block[40387-40425]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[40437-40449]:ReturnStatement[40401-40413]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[40487-41331]:EnhancedForStatement[40451-41295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40522-41331]:Block[40486-41295]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[40532-40564]:VariableDeclarationStatement[40496-40528]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[40634-40680]:IfStatement[40598-40644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40649-40680]:Block[40613-40644]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[40661-40670]:ContinueStatement[40625-40634]"
  }, {
    "left" : "if (n.getJSDocInfo() != null)",
    "right" : "if (n.getJSDocInfo() != null)",
    "info" : "IfStatement[40690-41323]:IfStatement[40654-41287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40720-41323]:Block[40684-41287]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[40732-40766]:VariableDeclarationStatement[40696-40730]"
  }, {
    "left" : "if (info.isExterns())",
    "right" : "if (info.isExterns())",
    "info" : "IfStatement[40777-41313]:IfStatement[40741-41277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40799-41193]:Block[40763-41157]"
  }, {
    "left" : "externsRoot.addChildToBack(n);",
    "right" : "externsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[41003-41033]:ExpressionStatement[40967-40997]"
  }, {
    "left" : "input.setIsExtern(true);",
    "right" : "input.setIsExtern(true);",
    "info" : "ExpressionStatement[41046-41070]:ExpressionStatement[41010-41034]"
  }, {
    "left" : "input.getModule().remove(input);",
    "right" : "input.getModule().remove(input);",
    "info" : "ExpressionStatement[41084-41116]:ExpressionStatement[41048-41080]"
  }, {
    "left" : "externs.add(input);",
    "right" : "externs.add(input);",
    "info" : "ExpressionStatement[41130-41149]:ExpressionStatement[41094-41113]"
  }, {
    "left" : "staleInputs = true;",
    "right" : "staleInputs = true;",
    "info" : "ExpressionStatement[41162-41181]:ExpressionStatement[41126-41145]"
  }, {
    "left" : "if (info.isNoCompile())",
    "right" : "if (info.isNoCompile())",
    "info" : "IfStatement[41199-41313]:IfStatement[41163-41277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41223-41313]:Block[41187-41277]"
  }, {
    "left" : "input.getModule().remove(input);",
    "right" : "input.getModule().remove(input);",
    "info" : "ExpressionStatement[41237-41269]:ExpressionStatement[41201-41233]"
  }, {
    "left" : "staleInputs = true;",
    "right" : "staleInputs = true;",
    "info" : "ExpressionStatement[41282-41301]:ExpressionStatement[41246-41265]"
  }, {
    "left" : "if (staleInputs)",
    "right" : "if (staleInputs)",
    "info" : "IfStatement[41339-41436]:IfStatement[41303-41400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41356-41436]:Block[41320-41400]"
  }, {
    "left" : "fillEmptyModules(modules);",
    "right" : "fillEmptyModules(modules);",
    "info" : "ExpressionStatement[41366-41392]:ExpressionStatement[41330-41356]"
  }, {
    "left" : "rebuildInputsFromModules();",
    "right" : "rebuildInputsFromModules();",
    "info" : "ExpressionStatement[41401-41428]:ExpressionStatement[41365-41392]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[41468-42242]:EnhancedForStatement[41432-42206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41503-42242]:Block[41467-42206]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[41513-41545]:VariableDeclarationStatement[41477-41509]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[41554-41600]:IfStatement[41518-41564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41569-41600]:Block[41533-41564]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[41581-41590]:ContinueStatement[41545-41554]"
  }, {
    "left" : "if (devMode)",
    "right" : "if (devMode)",
    "info" : "IfStatement[41610-41728]:IfStatement[41574-41692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41623-41728]:Block[41587-41692]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[41635-41652]:ExpressionStatement[41599-41616]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[41663-41718]:IfStatement[41627-41682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41680-41718]:Block[41644-41682]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[41694-41706]:ReturnStatement[41658-41670]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
    "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
    "info" : "IfStatement[41738-42199]:IfStatement[41702-42163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41834-42199]:Block[41798-42163]"
  }, {
    "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
    "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
    "info" : "VariableDeclarationStatement[41995-42141]:VariableDeclarationStatement[41959-42105]"
  }, {
    "left" : "NodeTraversal.traverse(this, n, sia);",
    "right" : "NodeTraversal.traverse(this, n, sia);",
    "info" : "ExpressionStatement[42152-42189]:ExpressionStatement[42116-42153]"
  }, {
    "left" : "jsRoot.addChildToBack(n);",
    "right" : "jsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[42209-42234]:ExpressionStatement[42173-42198]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[42250-42297]:IfStatement[42214-42261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42267-42297]:Block[42231-42261]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[42277-42289]:ReturnStatement[42241-42253]"
  }, {
    "left" : "return externAndJsRoot;",
    "right" : "return externAndJsRoot;",
    "info" : "ReturnStatement[42304-42327]:ReturnStatement[42268-42291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42342-42390]:Block[42306-42354]"
  }, {
    "left" : "stopTracer(tracer, \"parseInputs\");",
    "right" : "stopTracer(tracer, \"parseInputs\");",
    "info" : "ExpressionStatement[42350-42384]:ExpressionStatement[42314-42348]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42570-42574]:PrimitiveType[42534-42538]"
  }, {
    "left" : "processAMDAndCommonJSModules",
    "right" : "processAMDAndCommonJSModules",
    "info" : "SimpleName[42575-42603]:SimpleName[42539-42567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42606-44740]:Block[42570-44704]"
  }, {
    "left" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
    "right" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
    "info" : "VariableDeclarationStatement[42612-42674]:VariableDeclarationStatement[42576-42638]"
  }, {
    "left" : "Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();",
    "right" : "Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();",
    "info" : "VariableDeclarationStatement[42679-42749]:VariableDeclarationStatement[42643-42713]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[43014-43658]:EnhancedForStatement[42978-43622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43049-43658]:Block[43013-43622]"
  }, {
    "left" : "input.setCompiler(this);",
    "right" : "input.setCompiler(this);",
    "info" : "ExpressionStatement[43057-43081]:ExpressionStatement[43021-43045]"
  }, {
    "left" : "Node root = input.getAstRoot(this);",
    "right" : "Node root = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[43088-43123]:VariableDeclarationStatement[43052-43087]"
  }, {
    "left" : "if (root == null)",
    "right" : "if (root == null)",
    "info" : "IfStatement[43130-43175]:IfStatement[43094-43139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43148-43175]:Block[43112-43139]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43158-43167]:ContinueStatement[43122-43131]"
  }, {
    "left" : "if (options.transformAMDToCJSModules)",
    "right" : "if (options.transformAMDToCJSModules)",
    "info" : "IfStatement[43182-43292]:IfStatement[43146-43256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43220-43292]:Block[43184-43256]"
  }, {
    "left" : "new TransformAMDToCJSModule(this).process(null, root);",
    "right" : "new TransformAMDToCJSModule(this).process(null, root);",
    "info" : "ExpressionStatement[43230-43284]:ExpressionStatement[43194-43248]"
  }, {
    "left" : "if (options.processCommonJSModules)",
    "right" : "if (options.processCommonJSModules)",
    "info" : "IfStatement[43299-43652]:IfStatement[43263-43616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43335-43652]:Block[43299-43616]"
  }, {
    "left" : "ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);",
    "right" : "ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);",
    "info" : "VariableDeclarationStatement[43345-43453]:VariableDeclarationStatement[43309-43417]"
  }, {
    "left" : "cjs.process(null, root);",
    "right" : "cjs.process(null, root);",
    "info" : "ExpressionStatement[43462-43486]:ExpressionStatement[43426-43450]"
  }, {
    "left" : "JSModule m = cjs.getModule();",
    "right" : "JSModule m = cjs.getModule();",
    "info" : "VariableDeclarationStatement[43495-43524]:VariableDeclarationStatement[43459-43488]"
  }, {
    "left" : "if (m != null)",
    "right" : "if (m != null)",
    "info" : "IfStatement[43533-43644]:IfStatement[43497-43608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43548-43644]:Block[43512-43608]"
  }, {
    "left" : "modulesByName.put(m.getName(), m);",
    "right" : "modulesByName.put(m.getName(), m);",
    "info" : "ExpressionStatement[43560-43594]:ExpressionStatement[43524-43558]"
  }, {
    "left" : "modulesByInput.put(input, m);",
    "right" : "modulesByInput.put(input, m);",
    "info" : "ExpressionStatement[43605-43634]:ExpressionStatement[43569-43598]"
  }, {
    "left" : "if (options.processCommonJSModules)",
    "right" : "if (options.processCommonJSModules)",
    "info" : "IfStatement[43663-44736]:IfStatement[43627-44700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43699-44736]:Block[43663-44700]"
  }, {
    "left" : "List<JSModule> modules = Lists.newArrayList(modulesByName.values());",
    "right" : "List<JSModule> modules = Lists.newArrayList(modulesByName.values());",
    "info" : "VariableDeclarationStatement[43707-43775]:VariableDeclarationStatement[43671-43739]"
  }, {
    "left" : "if (!modules.isEmpty())",
    "right" : "if (!modules.isEmpty())",
    "info" : "IfStatement[43782-43907]:IfStatement[43746-43871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43806-43907]:Block[43770-43871]"
  }, {
    "left" : "this.modules = modules;",
    "right" : "this.modules = modules;",
    "info" : "ExpressionStatement[43816-43839]:ExpressionStatement[43780-43803]"
  }, {
    "left" : "this.moduleGraph = new JSModuleGraph(this.modules);",
    "right" : "this.moduleGraph = new JSModuleGraph(this.modules);",
    "info" : "ExpressionStatement[43848-43899]:ExpressionStatement[43812-43863]"
  }, {
    "left" : "for (JSModule module : modules)",
    "right" : "for (JSModule module : modules)",
    "info" : "EnhancedForStatement[43914-44338]:EnhancedForStatement[43878-44302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43946-44338]:Block[43910-44302]"
  }, {
    "left" : "for (CompilerInput input : module.getInputs())",
    "right" : "for (CompilerInput input : module.getInputs())",
    "info" : "EnhancedForStatement[43956-44330]:EnhancedForStatement[43920-44294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44003-44330]:Block[43967-44294]"
  }, {
    "left" : "for (String require : input.getRequires())",
    "right" : "for (String require : input.getRequires())",
    "info" : "EnhancedForStatement[44015-44320]:EnhancedForStatement[43979-44284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44058-44320]:Block[44022-44284]"
  }, {
    "left" : "JSModule dependency = modulesByName.get(require);",
    "right" : "JSModule dependency = modulesByName.get(require);",
    "info" : "VariableDeclarationStatement[44072-44121]:VariableDeclarationStatement[44036-44085]"
  }, {
    "left" : "if (dependency == null)",
    "right" : "if (dependency == null)",
    "info" : "IfStatement[44134-44308]:IfStatement[44098-44272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44158-44239]:Block[44122-44203]"
  }, {
    "left" : "report(JSError.make(MISSING_ENTRY_ERROR, require));",
    "right" : "report(JSError.make(MISSING_ENTRY_ERROR, require));",
    "info" : "ExpressionStatement[44174-44225]:ExpressionStatement[44138-44189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44245-44308]:Block[44209-44272]"
  }, {
    "left" : "module.addDependency(dependency);",
    "right" : "module.addDependency(dependency);",
    "info" : "ExpressionStatement[44261-44294]:ExpressionStatement[44225-44258]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[44345-44730]:TryStatement[44309-44694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44349-44667]:Block[44313-44631]"
  }, {
    "left" : "modules = Lists.newArrayList();",
    "right" : "modules = Lists.newArrayList();",
    "info" : "ExpressionStatement[44359-44390]:ExpressionStatement[44323-44354]"
  }, {
    "left" : "for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs))",
    "right" : "for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs))",
    "info" : "EnhancedForStatement[44399-44572]:EnhancedForStatement[44363-44536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44511-44572]:Block[44475-44536]"
  }, {
    "left" : "modules.add(modulesByInput.get(input));",
    "right" : "modules.add(modulesByInput.get(input));",
    "info" : "ExpressionStatement[44523-44562]:ExpressionStatement[44487-44526]"
  }, {
    "left" : "this.modules = modules;",
    "right" : "this.modules = modules;",
    "info" : "ExpressionStatement[44581-44604]:ExpressionStatement[44545-44568]"
  }, {
    "left" : "this.moduleGraph = new JSModuleGraph(modules);",
    "right" : "this.moduleGraph = new JSModuleGraph(modules);",
    "info" : "ExpressionStatement[44613-44659]:ExpressionStatement[44577-44623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44688-44730]:Block[44652-44694]"
  }, {
    "left" : "Throwables.propagate(e);",
    "right" : "Throwables.propagate(e);",
    "info" : "ExpressionStatement[44698-44722]:ExpressionStatement[44662-44686]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44744-44750]:Modifier[44708-44714]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[44751-44755]:SimpleType[44715-44719]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[44756-44761]:SimpleName[44720-44725]"
  }, {
    "left" : "SourceFile file",
    "right" : "SourceFile file",
    "info" : "SingleVariableDeclaration[44762-44777]:SingleVariableDeclaration[44726-44741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44779-44914]:Block[44743-44878]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[44785-44816]:ExpressionStatement[44749-44780]"
  }, {
    "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
    "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
    "info" : "ExpressionStatement[44821-44865]:ExpressionStatement[44785-44829]"
  }, {
    "left" : "return new JsAst(file).getAstRoot(this);",
    "right" : "return new JsAst(file).getAstRoot(this);",
    "info" : "ReturnStatement[44870-44910]:ReturnStatement[44834-44874]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[44954-44963]:MarkerAnnotation[44918-44927]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[44966-44970]:SimpleType[44930-44934]"
  }, {
    "left" : "parseSyntheticCode",
    "right" : "parseSyntheticCode",
    "info" : "SimpleName[44971-44989]:SimpleName[44935-44953]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[44990-44999]:SingleVariableDeclaration[44954-44963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45001-45214]:Block[44965-45178]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));",
    "right" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));",
    "info" : "VariableDeclarationStatement[45007-45126]:VariableDeclarationStatement[44971-45090]"
  }, {
    "left" : "putCompilerInput(input.getInputId(), input);",
    "right" : "putCompilerInput(input.getInputId(), input);",
    "info" : "ExpressionStatement[45131-45175]:ExpressionStatement[45095-45139]"
  }, {
    "left" : "return input.getAstRoot(this);",
    "right" : "return input.getAstRoot(this);",
    "info" : "ReturnStatement[45180-45210]:ReturnStatement[45144-45174]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[45299-45308]:Modifier[45263-45272]"
  }, {
    "left" : "CompilerOptions",
    "right" : "CompilerOptions",
    "info" : "SimpleType[45309-45324]:SimpleType[45273-45288]"
  }, {
    "left" : "newCompilerOptions",
    "right" : "newCompilerOptions",
    "info" : "SimpleName[45325-45343]:SimpleName[45289-45307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45346-45385]:Block[45310-45349]"
  }, {
    "left" : "return new CompilerOptions();",
    "right" : "return new CompilerOptions();",
    "info" : "ReturnStatement[45352-45381]:ReturnStatement[45316-45345]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45389-45393]:PrimitiveType[45353-45357]"
  }, {
    "left" : "initCompilerOptionsIfTesting",
    "right" : "initCompilerOptionsIfTesting",
    "info" : "SimpleName[45394-45422]:SimpleName[45358-45386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45425-45608]:Block[45389-45572]"
  }, {
    "left" : "if (options == null)",
    "right" : "if (options == null)",
    "info" : "IfStatement[45431-45604]:IfStatement[45395-45568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45452-45604]:Block[45416-45568]"
  }, {
    "left" : "initOptions(newCompilerOptions());",
    "right" : "initOptions(newCompilerOptions());",
    "info" : "ExpressionStatement[45564-45598]:ExpressionStatement[45528-45562]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45612-45621]:MarkerAnnotation[45576-45585]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[45624-45628]:SimpleType[45588-45592]"
  }, {
    "left" : "parseSyntheticCode",
    "right" : "parseSyntheticCode",
    "info" : "SimpleName[45629-45647]:SimpleName[45593-45611]"
  }, {
    "left" : "String fileName",
    "right" : "String fileName",
    "info" : "SingleVariableDeclaration[45648-45663]:SingleVariableDeclaration[45612-45627]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[45665-45674]:SingleVariableDeclaration[45629-45638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45676-45770]:Block[45640-45734]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[45682-45713]:ExpressionStatement[45646-45677]"
  }, {
    "left" : "return parse(SourceFile.fromCode(fileName, js));",
    "right" : "return parse(SourceFile.fromCode(fileName, js));",
    "info" : "ReturnStatement[45718-45766]:ReturnStatement[45682-45730]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45774-45783]:MarkerAnnotation[45738-45747]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[45786-45790]:SimpleType[45750-45754]"
  }, {
    "left" : "parseTestCode",
    "right" : "parseTestCode",
    "info" : "SimpleName[45791-45804]:SimpleName[45755-45768]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[45805-45814]:SingleVariableDeclaration[45769-45778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45816-46108]:Block[45780-46072]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[45822-45853]:ExpressionStatement[45786-45817]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));",
    "right" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));",
    "info" : "VariableDeclarationStatement[45858-45946]:VariableDeclarationStatement[45822-45910]"
  }, {
    "left" : "if (inputsById == null)",
    "right" : "if (inputsById == null)",
    "info" : "IfStatement[45951-46020]:IfStatement[45915-45984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45975-46020]:Block[45939-45984]"
  }, {
    "left" : "inputsById = Maps.newHashMap();",
    "right" : "inputsById = Maps.newHashMap();",
    "info" : "ExpressionStatement[45983-46014]:ExpressionStatement[45947-45978]"
  }, {
    "left" : "putCompilerInput(input.getInputId(), input);",
    "right" : "putCompilerInput(input.getInputId(), input);",
    "info" : "ExpressionStatement[46025-46069]:ExpressionStatement[45989-46033]"
  }, {
    "left" : "return input.getAstRoot(this);",
    "right" : "return input.getAstRoot(this);",
    "info" : "ReturnStatement[46074-46104]:ReturnStatement[46038-46068]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46112-46121]:MarkerAnnotation[46076-46085]"
  }, {
    "left" : "ErrorReporter",
    "right" : "ErrorReporter",
    "info" : "SimpleType[46124-46137]:SimpleType[46088-46101]"
  }, {
    "left" : "getDefaultErrorReporter",
    "right" : "getDefaultErrorReporter",
    "info" : "SimpleName[46138-46161]:SimpleName[46102-46125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46164-46202]:Block[46128-46166]"
  }, {
    "left" : "return defaultErrorReporter;",
    "right" : "return defaultErrorReporter;",
    "info" : "ReturnStatement[46170-46198]:ReturnStatement[46134-46162]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46457-46463]:Modifier[46421-46427]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46464-46470]:SimpleType[46428-46434]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[46471-46479]:SimpleName[46435-46443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46482-47108]:Block[46446-47072]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
    "info" : "ReturnStatement[46488-47104]:ReturnStatement[46452-47068]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46546-46555]:MarkerAnnotation[46510-46519]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46562-46568]:Modifier[46526-46532]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46569-46575]:SimpleType[46533-46539]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[46576-46580]:SimpleName[46540-46544]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[46590-46599]:SimpleType[46554-46563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46600-47096]:Block[46564-47060]"
  }, {
    "left" : "Tracer tracer = newTracer(\"toSource\");",
    "right" : "Tracer tracer = newTracer(\"toSource\");",
    "info" : "VariableDeclarationStatement[46610-46648]:VariableDeclarationStatement[46574-46612]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[46657-47088]:TryStatement[46621-47052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46661-47026]:Block[46625-46990]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[46673-46708]:VariableDeclarationStatement[46637-46672]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[46719-46984]:IfStatement[46683-46948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46739-46984]:Block[46703-46948]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[46753-46763]:VariableDeclarationStatement[46717-46727]"
  }, {
    "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
    "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
    "info" : "ForStatement[46776-46972]:ForStatement[46740-46936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46912-46972]:Block[46876-46936]"
  }, {
    "left" : "toSource(cb, i++, scriptNode);",
    "right" : "toSource(cb, i++, scriptNode);",
    "info" : "ExpressionStatement[46928-46958]:ExpressionStatement[46892-46922]"
  }, {
    "left" : "return cb.toString();",
    "right" : "return cb.toString();",
    "info" : "ReturnStatement[46995-47016]:ReturnStatement[46959-46980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47035-47088]:Block[46999-47052]"
  }, {
    "left" : "stopTracer(tracer, \"toSource\");",
    "right" : "stopTracer(tracer, \"toSource\");",
    "info" : "ExpressionStatement[47047-47078]:ExpressionStatement[47011-47042]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47185-47191]:Modifier[47149-47155]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[47192-47200]:ArrayType[47156-47164]"
  }, {
    "left" : "toSourceArray",
    "right" : "toSourceArray",
    "info" : "SimpleName[47201-47214]:SimpleName[47165-47178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47217-47904]:Block[47181-47868]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
    "info" : "ReturnStatement[47223-47900]:ReturnStatement[47187-47864]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[47283-47292]:MarkerAnnotation[47247-47256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47299-47305]:Modifier[47263-47269]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[47306-47314]:ArrayType[47270-47278]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[47315-47319]:SimpleName[47279-47283]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[47329-47338]:SimpleType[47293-47302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47339-47892]:Block[47303-47856]"
  }, {
    "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
    "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
    "info" : "VariableDeclarationStatement[47349-47392]:VariableDeclarationStatement[47313-47356]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[47401-47884]:TryStatement[47365-47848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47405-47817]:Block[47369-47781]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[47417-47447]:VariableDeclarationStatement[47381-47411]"
  }, {
    "left" : "String[] sources = new String[numInputs];",
    "right" : "String[] sources = new String[numInputs];",
    "info" : "VariableDeclarationStatement[47458-47499]:VariableDeclarationStatement[47422-47463]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[47510-47545]:VariableDeclarationStatement[47474-47509]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[47556-47781]:ForStatement[47520-47745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47592-47781]:Block[47556-47745]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[47606-47664]:VariableDeclarationStatement[47570-47628]"
  }, {
    "left" : "cb.reset();",
    "right" : "cb.reset();",
    "info" : "ExpressionStatement[47677-47688]:ExpressionStatement[47641-47652]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[47701-47729]:ExpressionStatement[47665-47693]"
  }, {
    "left" : "sources[i] = cb.toString();",
    "right" : "sources[i] = cb.toString();",
    "info" : "ExpressionStatement[47742-47769]:ExpressionStatement[47706-47733]"
  }, {
    "left" : "return sources;",
    "right" : "return sources;",
    "info" : "ReturnStatement[47792-47807]:ReturnStatement[47756-47771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47826-47884]:Block[47790-47848]"
  }, {
    "left" : "stopTracer(tracer, \"toSourceArray\");",
    "right" : "stopTracer(tracer, \"toSourceArray\");",
    "info" : "ExpressionStatement[47838-47874]:ExpressionStatement[47802-47838]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47979-47985]:Modifier[47943-47949]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[47986-47992]:SimpleType[47950-47956]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[47993-48001]:SimpleName[47957-47965]"
  }, {
    "left" : "final JSModule module",
    "right" : "final JSModule module",
    "info" : "SingleVariableDeclaration[48002-48023]:SingleVariableDeclaration[47966-47987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48025-48707]:Block[47989-48671]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
    "info" : "ReturnStatement[48031-48703]:ReturnStatement[47995-48667]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[48089-48098]:MarkerAnnotation[48053-48062]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48105-48111]:Modifier[48069-48075]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[48112-48118]:SimpleType[48076-48082]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[48119-48123]:SimpleName[48083-48087]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[48133-48142]:SimpleType[48097-48106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48143-48695]:Block[48107-48659]"
  }, {
    "left" : "List<CompilerInput> inputs = module.getInputs();",
    "right" : "List<CompilerInput> inputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[48153-48201]:VariableDeclarationStatement[48117-48165]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[48210-48240]:VariableDeclarationStatement[48174-48204]"
  }, {
    "left" : "if (numInputs == 0)",
    "right" : "if (numInputs == 0)",
    "info" : "IfStatement[48249-48301]:IfStatement[48213-48265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48269-48301]:Block[48233-48265]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[48281-48291]:ReturnStatement[48245-48255]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[48310-48345]:VariableDeclarationStatement[48274-48309]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[48354-48657]:ForStatement[48318-48621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48390-48657]:Block[48354-48621]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[48402-48460]:VariableDeclarationStatement[48366-48424]"
  }, {
    "left" : "if (scriptNode == null)",
    "right" : "if (scriptNode == null)",
    "info" : "IfStatement[48471-48608]:IfStatement[48435-48572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48495-48608]:Block[48459-48572]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
    "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
    "info" : "ThrowStatement[48509-48596]:ThrowStatement[48473-48560]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[48619-48647]:ExpressionStatement[48583-48611]"
  }, {
    "left" : "return cb.toString();",
    "right" : "return cb.toString();",
    "info" : "ReturnStatement[48666-48687]:ReturnStatement[48630-48651]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48797-48803]:Modifier[48761-48767]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[48804-48812]:ArrayType[48768-48776]"
  }, {
    "left" : "toSourceArray",
    "right" : "toSourceArray",
    "info" : "SimpleName[48813-48826]:SimpleName[48777-48790]"
  }, {
    "left" : "final JSModule module",
    "right" : "final JSModule module",
    "info" : "SingleVariableDeclaration[48827-48848]:SingleVariableDeclaration[48791-48812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48850-49666]:Block[48814-49630]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
    "info" : "ReturnStatement[48856-49662]:ReturnStatement[48820-49626]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[48916-48925]:MarkerAnnotation[48880-48889]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48932-48938]:Modifier[48896-48902]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[48939-48947]:ArrayType[48903-48911]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[48948-48952]:SimpleName[48912-48916]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[48962-48971]:SimpleType[48926-48935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48972-49654]:Block[48936-49618]"
  }, {
    "left" : "List<CompilerInput> inputs = module.getInputs();",
    "right" : "List<CompilerInput> inputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[48982-49030]:VariableDeclarationStatement[48946-48994]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[49039-49069]:VariableDeclarationStatement[49003-49033]"
  }, {
    "left" : "if (numInputs == 0)",
    "right" : "if (numInputs == 0)",
    "info" : "IfStatement[49078-49141]:IfStatement[49042-49105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49098-49141]:Block[49062-49105]"
  }, {
    "left" : "return new String[0];",
    "right" : "return new String[0];",
    "info" : "ReturnStatement[49110-49131]:ReturnStatement[49074-49095]"
  }, {
    "left" : "String[] sources = new String[numInputs];",
    "right" : "String[] sources = new String[numInputs];",
    "info" : "VariableDeclarationStatement[49151-49192]:VariableDeclarationStatement[49115-49156]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[49201-49236]:VariableDeclarationStatement[49165-49200]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[49245-49622]:ForStatement[49209-49586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49281-49622]:Block[49245-49586]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[49293-49351]:VariableDeclarationStatement[49257-49315]"
  }, {
    "left" : "if (scriptNode == null)",
    "right" : "if (scriptNode == null)",
    "info" : "IfStatement[49362-49512]:IfStatement[49326-49476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49386-49512]:Block[49350-49476]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
    "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
    "info" : "ThrowStatement[49400-49500]:ThrowStatement[49364-49464]"
  }, {
    "left" : "cb.reset();",
    "right" : "cb.reset();",
    "info" : "ExpressionStatement[49524-49535]:ExpressionStatement[49488-49499]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[49546-49574]:ExpressionStatement[49510-49538]"
  }, {
    "left" : "sources[i] = cb.toString();",
    "right" : "sources[i] = cb.toString();",
    "info" : "ExpressionStatement[49585-49612]:ExpressionStatement[49549-49576]"
  }, {
    "left" : "return sources;",
    "right" : "return sources;",
    "info" : "ReturnStatement[49631-49646]:ReturnStatement[49595-49610]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50023-50029]:Modifier[49987-49993]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50030-50034]:PrimitiveType[49994-49998]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[50035-50043]:SimpleName[49999-50007]"
  }, {
    "left" : "final CodeBuilder cb",
    "right" : "final CodeBuilder cb",
    "info" : "SingleVariableDeclaration[50044-50064]:SingleVariableDeclaration[50008-50028]"
  }, {
    "left" : "final int inputSeqNum",
    "right" : "final int inputSeqNum",
    "info" : "SingleVariableDeclaration[50089-50110]:SingleVariableDeclaration[50053-50074]"
  }, {
    "left" : "final Node root",
    "right" : "final Node root",
    "info" : "SingleVariableDeclaration[50135-50150]:SingleVariableDeclaration[50099-50114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50152-52445]:Block[50116-52409]"
  }, {
    "left" : "runInCompilerThread(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
    "right" : "runInCompilerThread(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
    "info" : "ExpressionStatement[50158-52441]:ExpressionStatement[50122-52405]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[50207-50216]:MarkerAnnotation[50171-50180]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50223-50229]:Modifier[50187-50193]"
  }, {
    "left" : "Void",
    "right" : "Void",
    "info" : "SimpleType[50230-50234]:SimpleType[50194-50198]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[50235-50239]:SimpleName[50199-50203]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[50249-50258]:SimpleType[50213-50222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50259-52433]:Block[50223-52397]"
  }, {
    "left" : "if (options.printInputDelimiter)",
    "right" : "if (options.printInputDelimiter)",
    "info" : "IfStatement[50269-51033]:IfStatement[50233-50997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50302-51033]:Block[50266-50997]"
  }, {
    "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
    "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
    "info" : "IfStatement[50314-50454]:IfStatement[50278-50418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50362-50454]:Block[50326-50418]"
  }, {
    "left" : "cb.append(\"\\n\");",
    "right" : "cb.append(\"\\n\");",
    "info" : "ExpressionStatement[50376-50392]:ExpressionStatement[50340-50356]"
  }, {
    "left" : "Preconditions.checkState(root.isScript());",
    "right" : "Preconditions.checkState(root.isScript());",
    "info" : "ExpressionStatement[50465-50507]:ExpressionStatement[50429-50471]"
  }, {
    "left" : "String delimiter = options.inputDelimiter;",
    "right" : "String delimiter = options.inputDelimiter;",
    "info" : "VariableDeclarationStatement[50519-50561]:VariableDeclarationStatement[50483-50525]"
  }, {
    "left" : "String inputName = root.getInputId().getIdName();",
    "right" : "String inputName = root.getInputId().getIdName();",
    "info" : "VariableDeclarationStatement[50573-50622]:VariableDeclarationStatement[50537-50586]"
  }, {
    "left" : "String sourceName = root.getSourceFileName();",
    "right" : "String sourceName = root.getSourceFileName();",
    "info" : "VariableDeclarationStatement[50633-50678]:VariableDeclarationStatement[50597-50642]"
  }, {
    "left" : "Preconditions.checkState(sourceName != null);",
    "right" : "Preconditions.checkState(sourceName != null);",
    "info" : "ExpressionStatement[50689-50734]:ExpressionStatement[50653-50698]"
  }, {
    "left" : "Preconditions.checkState(!sourceName.isEmpty());",
    "right" : "Preconditions.checkState(!sourceName.isEmpty());",
    "info" : "ExpressionStatement[50745-50793]:ExpressionStatement[50709-50757]"
  }, {
    "left" : "delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
    "right" : "delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
    "info" : "ExpressionStatement[50805-50964]:ExpressionStatement[50769-50928]"
  }, {
    "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
    "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
    "info" : "ExpressionStatement[50976-51023]:ExpressionStatement[50940-50987]"
  }, {
    "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
    "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
    "info" : "IfStatement[51042-51253]:IfStatement[51006-51217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51131-51253]:Block[51095-51217]"
  }, {
    "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
    "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
    "info" : "ExpressionStatement[51143-51243]:ExpressionStatement[51107-51207]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null)",
    "right" : "if (options.sourceMapOutputPath != null)",
    "info" : "IfStatement[51422-51570]:IfStatement[51386-51534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51463-51570]:Block[51427-51534]"
  }, {
    "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
    "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
    "info" : "ExpressionStatement[51475-51560]:ExpressionStatement[51439-51524]"
  }, {
    "left" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
    "right" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
    "info" : "VariableDeclarationStatement[51690-51748]:VariableDeclarationStatement[51654-51712]"
  }, {
    "left" : "if (!code.isEmpty())",
    "right" : "if (!code.isEmpty())",
    "info" : "IfStatement[51757-52404]:IfStatement[51721-52368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51778-52404]:Block[51742-52368]"
  }, {
    "left" : "cb.append(code);",
    "right" : "cb.append(code);",
    "info" : "ExpressionStatement[51790-51806]:ExpressionStatement[51754-51770]"
  }, {
    "left" : "int length = code.length();",
    "right" : "int length = code.length();",
    "info" : "VariableDeclarationStatement[52042-52069]:VariableDeclarationStatement[52006-52033]"
  }, {
    "left" : "char lastChar = code.charAt(length - 1);",
    "right" : "char lastChar = code.charAt(length - 1);",
    "info" : "VariableDeclarationStatement[52080-52120]:VariableDeclarationStatement[52044-52084]"
  }, {
    "left" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
    "right" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
    "info" : "VariableDeclarationStatement[52131-52212]:VariableDeclarationStatement[52095-52176]"
  }, {
    "left" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
    "right" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
    "info" : "VariableDeclarationStatement[52223-52323]:VariableDeclarationStatement[52187-52287]"
  }, {
    "left" : "if (!hasSemiColon)",
    "right" : "if (!hasSemiColon)",
    "info" : "IfStatement[52334-52394]:IfStatement[52298-52358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52353-52394]:Block[52317-52358]"
  }, {
    "left" : "cb.append(\";\");",
    "right" : "cb.append(\";\");",
    "info" : "ExpressionStatement[52367-52382]:ExpressionStatement[52331-52346]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[52413-52425]:ReturnStatement[52377-52389]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[52550-52559]:MarkerAnnotation[52514-52523]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[52562-52568]:SimpleType[52526-52532]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[52569-52577]:SimpleName[52533-52541]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52578-52584]:SingleVariableDeclaration[52542-52548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52586-52663]:Block[52550-52627]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[52592-52623]:ExpressionStatement[52556-52587]"
  }, {
    "left" : "return toSource(n, null, true);",
    "right" : "return toSource(n, null, true);",
    "info" : "ReturnStatement[52628-52659]:ReturnStatement[52592-52623]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52729-52736]:Modifier[52693-52700]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[52737-52743]:SimpleType[52701-52707]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[52744-52752]:SimpleName[52708-52716]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52753-52759]:SingleVariableDeclaration[52717-52723]"
  }, {
    "left" : "SourceMap sourceMap",
    "right" : "SourceMap sourceMap",
    "info" : "SingleVariableDeclaration[52761-52780]:SingleVariableDeclaration[52725-52744]"
  }, {
    "left" : "boolean firstOutput",
    "right" : "boolean firstOutput",
    "info" : "SingleVariableDeclaration[52782-52801]:SingleVariableDeclaration[52746-52765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52803-53502]:Block[52767-53466]"
  }, {
    "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
    "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
    "info" : "VariableDeclarationStatement[52809-52866]:VariableDeclarationStatement[52773-52830]"
  }, {
    "left" : "builder.setPrettyPrint(options.prettyPrint);",
    "right" : "builder.setPrettyPrint(options.prettyPrint);",
    "info" : "ExpressionStatement[52871-52915]:ExpressionStatement[52835-52879]"
  }, {
    "left" : "builder.setLineBreak(options.lineBreak);",
    "right" : "builder.setLineBreak(options.lineBreak);",
    "info" : "ExpressionStatement[52920-52960]:ExpressionStatement[52884-52924]"
  }, {
    "left" : "builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);",
    "right" : "builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);",
    "info" : "ExpressionStatement[52965-53039]:ExpressionStatement[52929-53003]"
  }, {
    "left" : "builder.setSourceMap(sourceMap);",
    "right" : "builder.setSourceMap(sourceMap);",
    "info" : "ExpressionStatement[53044-53076]:ExpressionStatement[53008-53040]"
  }, {
    "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
    "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
    "info" : "ExpressionStatement[53081-53143]:ExpressionStatement[53045-53107]"
  }, {
    "left" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
    "right" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
    "info" : "ExpressionStatement[53148-53255]:ExpressionStatement[53112-53219]"
  }, {
    "left" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
    "right" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
    "info" : "ExpressionStatement[53260-53320]:ExpressionStatement[53224-53284]"
  }, {
    "left" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
    "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
    "info" : "VariableDeclarationStatement[53326-53430]:VariableDeclarationStatement[53290-53394]"
  }, {
    "left" : "builder.setOutputCharset(charset);",
    "right" : "builder.setOutputCharset(charset);",
    "info" : "ExpressionStatement[53435-53469]:ExpressionStatement[53399-53433]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[53475-53498]:ReturnStatement[53439-53462]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53665-53671]:Modifier[53629-53635]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53672-53678]:Modifier[53636-53642]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[53679-53684]:TYPE_DECLARATION_KIND[53643-53648]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53889-53893]:PrimitiveType[53853-53857]"
  }, {
    "left" : "reset",
    "right" : "reset",
    "info" : "SimpleName[53894-53899]:SimpleName[53858-53863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53902-53932]:Block[53866-53896]"
  }, {
    "left" : "sb.setLength(0);",
    "right" : "sb.setLength(0);",
    "info" : "ExpressionStatement[53910-53926]:ExpressionStatement[53874-53890]"
  }, {
    "left" : "CodeBuilder",
    "right" : "CodeBuilder",
    "info" : "SimpleType[53994-54005]:SimpleType[53958-53969]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[54006-54012]:SimpleName[53970-53976]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[54013-54023]:SingleVariableDeclaration[53977-53987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54025-54504]:Block[53989-54468]"
  }, {
    "left" : "sb.append(str);",
    "right" : "sb.append(str);",
    "info" : "ExpressionStatement[54033-54048]:ExpressionStatement[53997-54012]"
  }, {
    "left" : "int index = -1;",
    "right" : "int index = -1;",
    "info" : "VariableDeclarationStatement[54122-54137]:VariableDeclarationStatement[54086-54101]"
  }, {
    "left" : "int lastIndex = index;",
    "right" : "int lastIndex = index;",
    "info" : "VariableDeclarationStatement[54144-54166]:VariableDeclarationStatement[54108-54130]"
  }, {
    "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
    "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
    "info" : "WhileStatement[54173-54282]:WhileStatement[54137-54246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54225-54282]:Block[54189-54246]"
  }, {
    "left" : "++lineCount;",
    "right" : "++lineCount;",
    "info" : "ExpressionStatement[54235-54247]:ExpressionStatement[54199-54211]"
  }, {
    "left" : "lastIndex = index;",
    "right" : "lastIndex = index;",
    "info" : "ExpressionStatement[54256-54274]:ExpressionStatement[54220-54238]"
  }, {
    "left" : "if (lastIndex == -1)",
    "right" : "if (lastIndex == -1)",
    "info" : "IfStatement[54290-54478]:IfStatement[54254-54442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54311-54412]:Block[54275-54376]"
  }, {
    "left" : "colCount += str.length();",
    "right" : "colCount += str.length();",
    "info" : "ExpressionStatement[54379-54404]:ExpressionStatement[54343-54368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54418-54478]:Block[54382-54442]"
  }, {
    "left" : "colCount = str.length() - (lastIndex + 1);",
    "right" : "colCount = str.length() - (lastIndex + 1);",
    "info" : "ExpressionStatement[54428-54470]:ExpressionStatement[54392-54434]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[54486-54498]:ReturnStatement[54450-54462]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[54558-54567]:MarkerAnnotation[54522-54531]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54572-54578]:Modifier[54536-54542]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[54579-54585]:SimpleType[54543-54549]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[54586-54594]:SimpleName[54550-54558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54597-54632]:Block[54561-54596]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[54605-54626]:ReturnStatement[54569-54590]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54688-54694]:Modifier[54652-54658]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[54695-54698]:PrimitiveType[54659-54662]"
  }, {
    "left" : "getLength",
    "right" : "getLength",
    "info" : "SimpleName[54699-54708]:SimpleName[54663-54672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54711-54744]:Block[54675-54708]"
  }, {
    "left" : "return sb.length();",
    "right" : "return sb.length();",
    "info" : "ReturnStatement[54719-54738]:ReturnStatement[54683-54702]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[54829-54832]:PrimitiveType[54793-54796]"
  }, {
    "left" : "getLineIndex",
    "right" : "getLineIndex",
    "info" : "SimpleName[54833-54845]:SimpleName[54797-54809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54848-54879]:Block[54812-54843]"
  }, {
    "left" : "return lineCount;",
    "right" : "return lineCount;",
    "info" : "ReturnStatement[54856-54873]:ReturnStatement[54820-54837]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[54966-54969]:PrimitiveType[54930-54933]"
  }, {
    "left" : "getColumnIndex",
    "right" : "getColumnIndex",
    "info" : "SimpleName[54970-54984]:SimpleName[54934-54948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54987-55017]:Block[54951-54981]"
  }, {
    "left" : "return colCount;",
    "right" : "return colCount;",
    "info" : "ReturnStatement[54995-55011]:ReturnStatement[54959-54975]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55090-55097]:PrimitiveType[55054-55061]"
  }, {
    "left" : "endsWith",
    "right" : "endsWith",
    "info" : "SimpleName[55098-55106]:SimpleName[55062-55070]"
  }, {
    "left" : "String suffix",
    "right" : "String suffix",
    "info" : "SingleVariableDeclaration[55107-55120]:SingleVariableDeclaration[55071-55084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55122-55247]:Block[55086-55211]"
  }, {
    "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
    "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
    "info" : "ReturnStatement[55130-55241]:ReturnStatement[55094-55205]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55429-55435]:Modifier[55393-55399]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55436-55440]:PrimitiveType[55400-55404]"
  }, {
    "left" : "optimize",
    "right" : "optimize",
    "info" : "SimpleName[55441-55449]:SimpleName[55405-55413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55452-56081]:Block[55416-56045]"
  }, {
    "left" : "normalize();",
    "right" : "normalize();",
    "info" : "ExpressionStatement[55726-55738]:ExpressionStatement[55690-55702]"
  }, {
    "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);",
    "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);",
    "info" : "VariableDeclarationStatement[55744-55816]:VariableDeclarationStatement[55708-55780]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[55821-55921]:IfStatement[55785-55885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55864-55921]:Block[55828-55885]"
  }, {
    "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "info" : "ExpressionStatement[55872-55915]:ExpressionStatement[55836-55879]"
  }, {
    "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
    "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
    "info" : "ExpressionStatement[55926-55985]:ExpressionStatement[55890-55949]"
  }, {
    "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[55990-56034]:ExpressionStatement[55954-55998]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[56039-56077]:IfStatement[56003-56041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56056-56077]:Block[56020-56041]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56064-56071]:ReturnStatement[56028-56035]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[56085-56094]:MarkerAnnotation[56049-56058]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56097-56101]:PrimitiveType[56061-56065]"
  }, {
    "left" : "setCssRenamingMap",
    "right" : "setCssRenamingMap",
    "info" : "SimpleName[56102-56119]:SimpleName[56066-56083]"
  }, {
    "left" : "CssRenamingMap map",
    "right" : "CssRenamingMap map",
    "info" : "SingleVariableDeclaration[56120-56138]:SingleVariableDeclaration[56084-56102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56140-56179]:Block[56104-56143]"
  }, {
    "left" : "options.cssRenamingMap = map;",
    "right" : "options.cssRenamingMap = map;",
    "info" : "ExpressionStatement[56146-56175]:ExpressionStatement[56110-56139]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[56183-56192]:MarkerAnnotation[56147-56156]"
  }, {
    "left" : "CssRenamingMap",
    "right" : "CssRenamingMap",
    "info" : "SimpleType[56195-56209]:SimpleType[56159-56173]"
  }, {
    "left" : "getCssRenamingMap",
    "right" : "getCssRenamingMap",
    "info" : "SimpleName[56210-56227]:SimpleName[56174-56191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56230-56270]:Block[56194-56234]"
  }, {
    "left" : "return options.cssRenamingMap;",
    "right" : "return options.cssRenamingMap;",
    "info" : "ReturnStatement[56236-56266]:ReturnStatement[56200-56230]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56623-56629]:Modifier[56587-56593]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56630-56634]:PrimitiveType[56594-56598]"
  }, {
    "left" : "processDefines",
    "right" : "processDefines",
    "info" : "SimpleName[56635-56649]:SimpleName[56599-56613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56652-56761]:Block[56616-56725]"
  }, {
    "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
    "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[56658-56757]:ExpressionStatement[56622-56721]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56765-56772]:PrimitiveType[56729-56736]"
  }, {
    "left" : "isInliningForbidden",
    "right" : "isInliningForbidden",
    "info" : "SimpleName[56773-56792]:SimpleName[56737-56756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56795-56968]:Block[56759-56932]"
  }, {
    "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
    "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
    "info" : "ReturnStatement[56801-56964]:ReturnStatement[56765-56928]"
  }, {
    "left" : "ControlFlowGraph<Node>",
    "right" : "ControlFlowGraph<Node>",
    "info" : "ParameterizedType[57004-57026]:ParameterizedType[56968-56990]"
  }, {
    "left" : "computeCFG",
    "right" : "computeCFG",
    "info" : "SimpleName[57027-57037]:SimpleName[56991-57001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57040-57294]:Block[57004-57258]"
  }, {
    "left" : "logger.fine(\"Computing Control Flow Graph\");",
    "right" : "logger.fine(\"Computing Control Flow Graph\");",
    "info" : "ExpressionStatement[57046-57090]:ExpressionStatement[57010-57054]"
  }, {
    "left" : "Tracer tracer = newTracer(\"computeCFG\");",
    "right" : "Tracer tracer = newTracer(\"computeCFG\");",
    "info" : "VariableDeclarationStatement[57095-57135]:VariableDeclarationStatement[57059-57099]"
  }, {
    "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
    "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
    "info" : "VariableDeclarationStatement[57140-57209]:VariableDeclarationStatement[57104-57173]"
  }, {
    "left" : "process(cfa);",
    "right" : "process(cfa);",
    "info" : "ExpressionStatement[57214-57227]:ExpressionStatement[57178-57191]"
  }, {
    "left" : "stopTracer(tracer, \"computeCFG\");",
    "right" : "stopTracer(tracer, \"computeCFG\");",
    "info" : "ExpressionStatement[57232-57265]:ExpressionStatement[57196-57229]"
  }, {
    "left" : "return cfa.getCfg();",
    "right" : "return cfa.getCfg();",
    "info" : "ReturnStatement[57270-57290]:ReturnStatement[57234-57254]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57298-57304]:Modifier[57262-57268]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57305-57309]:PrimitiveType[57269-57273]"
  }, {
    "left" : "normalize",
    "right" : "normalize",
    "info" : "SimpleName[57310-57319]:SimpleName[57274-57283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57322-57443]:Block[57286-57407]"
  }, {
    "left" : "logger.fine(\"Normalizing\");",
    "right" : "logger.fine(\"Normalizing\");",
    "info" : "ExpressionStatement[57328-57355]:ExpressionStatement[57292-57319]"
  }, {
    "left" : "startPass(\"normalize\");",
    "right" : "startPass(\"normalize\");",
    "info" : "ExpressionStatement[57360-57383]:ExpressionStatement[57324-57347]"
  }, {
    "left" : "process(new Normalize(this, false));",
    "right" : "process(new Normalize(this, false));",
    "info" : "ExpressionStatement[57388-57424]:ExpressionStatement[57352-57388]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[57429-57439]:ExpressionStatement[57393-57403]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[57447-57456]:MarkerAnnotation[57411-57420]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57459-57463]:PrimitiveType[57423-57427]"
  }, {
    "left" : "prepareAst",
    "right" : "prepareAst",
    "info" : "SimpleName[57464-57474]:SimpleName[57428-57438]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[57475-57484]:SingleVariableDeclaration[57439-57448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57486-57567]:Block[57450-57531]"
  }, {
    "left" : "CompilerPass pass = new PrepareAst(this);",
    "right" : "CompilerPass pass = new PrepareAst(this);",
    "info" : "VariableDeclarationStatement[57492-57533]:VariableDeclarationStatement[57456-57497]"
  }, {
    "left" : "pass.process(null, root);",
    "right" : "pass.process(null, root);",
    "info" : "ExpressionStatement[57538-57563]:ExpressionStatement[57502-57527]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57571-57575]:PrimitiveType[57535-57539]"
  }, {
    "left" : "recordFunctionInformation",
    "right" : "recordFunctionInformation",
    "info" : "SimpleName[57576-57601]:SimpleName[57540-57565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57604-57985]:Block[57568-57949]"
  }, {
    "left" : "logger.fine(\"Recording function information\");",
    "right" : "logger.fine(\"Recording function information\");",
    "info" : "ExpressionStatement[57610-57656]:ExpressionStatement[57574-57620]"
  }, {
    "left" : "startPass(\"recordFunctionInformation\");",
    "right" : "startPass(\"recordFunctionInformation\");",
    "info" : "ExpressionStatement[57661-57700]:ExpressionStatement[57625-57664]"
  }, {
    "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
    "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
    "info" : "VariableDeclarationStatement[57705-57867]:VariableDeclarationStatement[57669-57831]"
  }, {
    "left" : "process(recordFunctionInfoPass);",
    "right" : "process(recordFunctionInfoPass);",
    "info" : "ExpressionStatement[57872-57904]:ExpressionStatement[57836-57868]"
  }, {
    "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
    "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
    "info" : "ExpressionStatement[57909-57966]:ExpressionStatement[57873-57930]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[57971-57981]:ExpressionStatement[57935-57945]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[58400-58409]:MarkerAnnotation[58364-58373]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58412-58416]:PrimitiveType[58376-58380]"
  }, {
    "left" : "addChangeHandler",
    "right" : "addChangeHandler",
    "info" : "SimpleName[58417-58433]:SimpleName[58381-58397]"
  }, {
    "left" : "CodeChangeHandler handler",
    "right" : "CodeChangeHandler handler",
    "info" : "SingleVariableDeclaration[58434-58459]:SingleVariableDeclaration[58398-58423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58461-58503]:Block[58425-58467]"
  }, {
    "left" : "codeChangeHandlers.add(handler);",
    "right" : "codeChangeHandlers.add(handler);",
    "info" : "ExpressionStatement[58467-58499]:ExpressionStatement[58431-58463]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[58507-58516]:MarkerAnnotation[58471-58480]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58519-58523]:PrimitiveType[58483-58487]"
  }, {
    "left" : "removeChangeHandler",
    "right" : "removeChangeHandler",
    "info" : "SimpleName[58524-58543]:SimpleName[58488-58507]"
  }, {
    "left" : "CodeChangeHandler handler",
    "right" : "CodeChangeHandler handler",
    "info" : "SingleVariableDeclaration[58544-58569]:SingleVariableDeclaration[58508-58533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58571-58616]:Block[58535-58580]"
  }, {
    "left" : "codeChangeHandlers.remove(handler);",
    "right" : "codeChangeHandlers.remove(handler);",
    "info" : "ExpressionStatement[58577-58612]:ExpressionStatement[58541-58576]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[58811-58820]:MarkerAnnotation[58775-58784]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58823-58829]:Modifier[58787-58793]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58830-58834]:PrimitiveType[58794-58798]"
  }, {
    "left" : "reportCodeChange",
    "right" : "reportCodeChange",
    "info" : "SimpleName[58835-58851]:SimpleName[58799-58815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58854-58954]:Block[58818-58918]"
  }, {
    "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
    "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
    "info" : "EnhancedForStatement[58860-58950]:EnhancedForStatement[58824-58914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58913-58950]:Block[58877-58914]"
  }, {
    "left" : "handler.reportChange();",
    "right" : "handler.reportChange();",
    "info" : "ExpressionStatement[58921-58944]:ExpressionStatement[58885-58908]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[58958-58967]:MarkerAnnotation[58922-58931]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58970-58976]:Modifier[58934-58940]"
  }, {
    "left" : "CodingConvention",
    "right" : "CodingConvention",
    "info" : "SimpleType[58977-58993]:SimpleType[58941-58957]"
  }, {
    "left" : "getCodingConvention",
    "right" : "getCodingConvention",
    "info" : "SimpleName[58994-59013]:SimpleName[58958-58977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59016-59185]:Block[58980-59149]"
  }, {
    "left" : "CodingConvention convention = options.getCodingConvention();",
    "right" : "CodingConvention convention = options.getCodingConvention();",
    "info" : "VariableDeclarationStatement[59022-59082]:VariableDeclarationStatement[58986-59046]"
  }, {
    "left" : "convention = convention != null ? convention : defaultCodingConvention;",
    "right" : "convention = convention != null ? convention : defaultCodingConvention;",
    "info" : "ExpressionStatement[59087-59158]:ExpressionStatement[59051-59122]"
  }, {
    "left" : "return convention;",
    "right" : "return convention;",
    "info" : "ReturnStatement[59163-59181]:ReturnStatement[59127-59145]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[59189-59198]:MarkerAnnotation[59153-59162]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59201-59207]:Modifier[59165-59171]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59208-59215]:PrimitiveType[59172-59179]"
  }, {
    "left" : "isIdeMode",
    "right" : "isIdeMode",
    "info" : "SimpleName[59216-59225]:SimpleName[59180-59189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59228-59261]:Block[59192-59225]"
  }, {
    "left" : "return options.ideMode;",
    "right" : "return options.ideMode;",
    "info" : "ReturnStatement[59234-59257]:ReturnStatement[59198-59221]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[59265-59274]:MarkerAnnotation[59229-59238]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59277-59283]:Modifier[59241-59247]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59284-59291]:PrimitiveType[59248-59255]"
  }, {
    "left" : "acceptEcmaScript5",
    "right" : "acceptEcmaScript5",
    "info" : "SimpleName[59292-59309]:SimpleName[59256-59273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59312-59456]:Block[59276-59420]"
  }, {
    "left" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
    "right" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
    "info" : "SwitchStatement[59318-59434]:SwitchStatement[59282-59398]"
  }, {
    "left" : "case ECMASCRIPT5:",
    "right" : "case ECMASCRIPT5:",
    "info" : "SwitchCase[59359-59376]:SwitchCase[59323-59340]"
  }, {
    "left" : "case ECMASCRIPT5_STRICT:",
    "right" : "case ECMASCRIPT5_STRICT:",
    "info" : "SwitchCase[59383-59407]:SwitchCase[59347-59371]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[59416-59428]:ReturnStatement[59380-59392]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59439-59452]:ReturnStatement[59403-59416]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59460-59466]:Modifier[59424-59430]"
  }, {
    "left" : "LanguageMode",
    "right" : "LanguageMode",
    "info" : "SimpleType[59467-59479]:SimpleType[59431-59443]"
  }, {
    "left" : "languageMode",
    "right" : "languageMode",
    "info" : "SimpleName[59480-59492]:SimpleName[59444-59456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59495-59536]:Block[59459-59500]"
  }, {
    "left" : "return options.getLanguageIn();",
    "right" : "return options.getLanguageIn();",
    "info" : "ReturnStatement[59501-59532]:ReturnStatement[59465-59496]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[59540-59549]:MarkerAnnotation[59504-59513]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59552-59558]:Modifier[59516-59522]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59559-59566]:PrimitiveType[59523-59530]"
  }, {
    "left" : "acceptConstKeyword",
    "right" : "acceptConstKeyword",
    "info" : "SimpleName[59567-59585]:SimpleName[59531-59549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59588-59632]:Block[59552-59596]"
  }, {
    "left" : "return options.acceptConstKeyword;",
    "right" : "return options.acceptConstKeyword;",
    "info" : "ReturnStatement[59594-59628]:ReturnStatement[59558-59592]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[59636-59645]:MarkerAnnotation[59600-59609]"
  }, {
    "left" : "Config",
    "right" : "Config",
    "info" : "SimpleType[59648-59654]:SimpleType[59612-59618]"
  }, {
    "left" : "getParserConfig",
    "right" : "getParserConfig",
    "info" : "SimpleName[59655-59670]:SimpleName[59619-59634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59673-60356]:Block[59637-60320]"
  }, {
    "left" : "if (parserConfig == null)",
    "right" : "if (parserConfig == null)",
    "info" : "IfStatement[59679-60327]:IfStatement[59643-60291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59705-60327]:Block[59669-60291]"
  }, {
    "left" : "Config.LanguageMode mode;",
    "right" : "Config.LanguageMode mode;",
    "info" : "VariableDeclarationStatement[59713-59738]:VariableDeclarationStatement[59677-59702]"
  }, {
    "left" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
    "right" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
    "info" : "SwitchStatement[59745-60168]:SwitchStatement[59709-60132]"
  }, {
    "left" : "case ECMASCRIPT3:",
    "right" : "case ECMASCRIPT3:",
    "info" : "SwitchCase[59788-59805]:SwitchCase[59752-59769]"
  }, {
    "left" : "mode = Config.LanguageMode.ECMASCRIPT3;",
    "right" : "mode = Config.LanguageMode.ECMASCRIPT3;",
    "info" : "ExpressionStatement[59816-59855]:ExpressionStatement[59780-59819]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59866-59872]:BreakStatement[59830-59836]"
  }, {
    "left" : "case ECMASCRIPT5:",
    "right" : "case ECMASCRIPT5:",
    "info" : "SwitchCase[59881-59898]:SwitchCase[59845-59862]"
  }, {
    "left" : "mode = Config.LanguageMode.ECMASCRIPT5;",
    "right" : "mode = Config.LanguageMode.ECMASCRIPT5;",
    "info" : "ExpressionStatement[59909-59948]:ExpressionStatement[59873-59912]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59959-59965]:BreakStatement[59923-59929]"
  }, {
    "left" : "case ECMASCRIPT5_STRICT:",
    "right" : "case ECMASCRIPT5_STRICT:",
    "info" : "SwitchCase[59974-59998]:SwitchCase[59938-59962]"
  }, {
    "left" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
    "right" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
    "info" : "ExpressionStatement[60009-60055]:ExpressionStatement[59973-60019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60066-60072]:BreakStatement[60030-60036]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60081-60089]:SwitchCase[60045-60053]"
  }, {
    "left" : "throw new IllegalStateException(\"unexpected language mode\");",
    "right" : "throw new IllegalStateException(\"unexpected language mode\");",
    "info" : "ThrowStatement[60100-60160]:ThrowStatement[60064-60124]"
  }, {
    "left" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
    "right" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
    "info" : "ExpressionStatement[60176-60321]:ExpressionStatement[60140-60285]"
  }, {
    "left" : "return parserConfig;",
    "right" : "return parserConfig;",
    "info" : "ReturnStatement[60332-60352]:ReturnStatement[60296-60316]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[60360-60369]:MarkerAnnotation[60324-60333]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60372-60378]:Modifier[60336-60342]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[60379-60386]:PrimitiveType[60343-60350]"
  }, {
    "left" : "isTypeCheckingEnabled",
    "right" : "isTypeCheckingEnabled",
    "info" : "SimpleName[60387-60408]:SimpleName[60351-60372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60411-60447]:Block[60375-60411]"
  }, {
    "left" : "return options.checkTypes;",
    "right" : "return options.checkTypes;",
    "info" : "ReturnStatement[60417-60443]:ReturnStatement[60381-60407]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[60770-60779]:Modifier[60734-60743]"
  }, {
    "left" : "DiagnosticGroups",
    "right" : "DiagnosticGroups",
    "info" : "SimpleType[60780-60796]:SimpleType[60744-60760]"
  }, {
    "left" : "getDiagnosticGroups",
    "right" : "getDiagnosticGroups",
    "info" : "SimpleName[60797-60816]:SimpleName[60761-60780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60819-60859]:Block[60783-60823]"
  }, {
    "left" : "return new DiagnosticGroups();",
    "right" : "return new DiagnosticGroups();",
    "info" : "ReturnStatement[60825-60855]:ReturnStatement[60789-60819]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[60863-60872]:MarkerAnnotation[60827-60836]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60875-60881]:Modifier[60839-60845]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[60882-60886]:PrimitiveType[60846-60850]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[60887-60893]:SimpleName[60851-60857]"
  }, {
    "left" : "JSError error",
    "right" : "JSError error",
    "info" : "SingleVariableDeclaration[60894-60907]:SingleVariableDeclaration[60858-60871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60909-61304]:Block[60873-61268]"
  }, {
    "left" : "CheckLevel level = error.getDefaultLevel();",
    "right" : "CheckLevel level = error.getDefaultLevel();",
    "info" : "VariableDeclarationStatement[60915-60958]:VariableDeclarationStatement[60879-60922]"
  }, {
    "left" : "if (warningsGuard != null)",
    "right" : "if (warningsGuard != null)",
    "info" : "IfStatement[60963-61117]:IfStatement[60927-61081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60990-61117]:Block[60954-61081]"
  }, {
    "left" : "CheckLevel newLevel = warningsGuard.level(error);",
    "right" : "CheckLevel newLevel = warningsGuard.level(error);",
    "info" : "VariableDeclarationStatement[60998-61047]:VariableDeclarationStatement[60962-61011]"
  }, {
    "left" : "if (newLevel != null)",
    "right" : "if (newLevel != null)",
    "info" : "IfStatement[61054-61111]:IfStatement[61018-61075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61076-61111]:Block[61040-61075]"
  }, {
    "left" : "level = newLevel;",
    "right" : "level = newLevel;",
    "info" : "ExpressionStatement[61086-61103]:ExpressionStatement[61050-61067]"
  }, {
    "left" : "if (level.isOn())",
    "right" : "if (level.isOn())",
    "info" : "IfStatement[61123-61300]:IfStatement[61087-61264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61141-61300]:Block[61105-61264]"
  }, {
    "left" : "if (getOptions().errorHandler != null)",
    "right" : "if (getOptions().errorHandler != null)",
    "info" : "IfStatement[61149-61253]:IfStatement[61113-61217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61188-61253]:Block[61152-61217]"
  }, {
    "left" : "getOptions().errorHandler.report(level, error);",
    "right" : "getOptions().errorHandler.report(level, error);",
    "info" : "ExpressionStatement[61198-61245]:ExpressionStatement[61162-61209]"
  }, {
    "left" : "errorManager.report(level, error);",
    "right" : "errorManager.report(level, error);",
    "info" : "ExpressionStatement[61260-61294]:ExpressionStatement[61224-61258]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[61308-61317]:MarkerAnnotation[61272-61281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61320-61326]:Modifier[61284-61290]"
  }, {
    "left" : "CheckLevel",
    "right" : "CheckLevel",
    "info" : "SimpleType[61327-61337]:SimpleType[61291-61301]"
  }, {
    "left" : "getErrorLevel",
    "right" : "getErrorLevel",
    "info" : "SimpleName[61338-61351]:SimpleName[61302-61315]"
  }, {
    "left" : "JSError error",
    "right" : "JSError error",
    "info" : "SingleVariableDeclaration[61352-61365]:SingleVariableDeclaration[61316-61329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61367-61452]:Block[61331-61416]"
  }, {
    "left" : "Preconditions.checkNotNull(options);",
    "right" : "Preconditions.checkNotNull(options);",
    "info" : "ExpressionStatement[61373-61409]:ExpressionStatement[61337-61373]"
  }, {
    "left" : "return warningsGuard.level(error);",
    "right" : "return warningsGuard.level(error);",
    "info" : "ReturnStatement[61414-61448]:ReturnStatement[61378-61412]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[61499-61508]:MarkerAnnotation[61463-61472]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61511-61515]:PrimitiveType[61475-61479]"
  }, {
    "left" : "throwInternalError",
    "right" : "throwInternalError",
    "info" : "SimpleName[61516-61534]:SimpleName[61480-61498]"
  }, {
    "left" : "String message",
    "right" : "String message",
    "info" : "SingleVariableDeclaration[61535-61549]:SingleVariableDeclaration[61499-61513]"
  }, {
    "left" : "Exception cause",
    "right" : "Exception cause",
    "info" : "SingleVariableDeclaration[61551-61566]:SingleVariableDeclaration[61515-61530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61568-61844]:Block[61532-61808]"
  }, {
    "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
    "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
    "info" : "VariableDeclarationStatement[61574-61681]:VariableDeclarationStatement[61538-61645]"
  }, {
    "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
    "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
    "info" : "VariableDeclarationStatement[61687-61750]:VariableDeclarationStatement[61651-61714]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[61755-61827]:IfStatement[61719-61791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61774-61827]:Block[61738-61791]"
  }, {
    "left" : "e.setStackTrace(cause.getStackTrace());",
    "right" : "e.setStackTrace(cause.getStackTrace());",
    "info" : "ExpressionStatement[61782-61821]:ExpressionStatement[61746-61785]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[61832-61840]:ThrowStatement[61796-61804]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61893-61899]:Modifier[61857-61863]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[61900-61903]:PrimitiveType[61864-61867]"
  }, {
    "left" : "getErrorCount",
    "right" : "getErrorCount",
    "info" : "SimpleName[61904-61917]:SimpleName[61868-61881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61920-61966]:Block[61884-61930]"
  }, {
    "left" : "return errorManager.getErrorCount();",
    "right" : "return errorManager.getErrorCount();",
    "info" : "ReturnStatement[61926-61962]:ReturnStatement[61890-61926]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62016-62022]:Modifier[61980-61986]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[62023-62026]:PrimitiveType[61987-61990]"
  }, {
    "left" : "getWarningCount",
    "right" : "getWarningCount",
    "info" : "SimpleName[62027-62042]:SimpleName[61991-62006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62045-62093]:Block[62009-62057]"
  }, {
    "left" : "return errorManager.getWarningCount();",
    "right" : "return errorManager.getWarningCount();",
    "info" : "ReturnStatement[62051-62089]:ReturnStatement[62015-62053]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[62097-62106]:MarkerAnnotation[62061-62070]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62109-62116]:PrimitiveType[62073-62080]"
  }, {
    "left" : "hasHaltingErrors",
    "right" : "hasHaltingErrors",
    "info" : "SimpleName[62117-62133]:SimpleName[62081-62097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62136-62189]:Block[62100-62153]"
  }, {
    "left" : "return !isIdeMode() && getErrorCount() > 0;",
    "right" : "return !isIdeMode() && getErrorCount() > 0;",
    "info" : "ReturnStatement[62142-62185]:ReturnStatement[62106-62149]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62611-62617]:Modifier[62575-62581]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62618-62625]:PrimitiveType[62582-62589]"
  }, {
    "left" : "hasErrors",
    "right" : "hasErrors",
    "info" : "SimpleName[62626-62635]:SimpleName[62590-62599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62638-62674]:Block[62602-62638]"
  }, {
    "left" : "return hasHaltingErrors();",
    "right" : "return hasHaltingErrors();",
    "info" : "ReturnStatement[62644-62670]:ReturnStatement[62608-62634]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[62736-62745]:MarkerAnnotation[62700-62709]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62748-62752]:PrimitiveType[62712-62716]"
  }, {
    "left" : "addToDebugLog",
    "right" : "addToDebugLog",
    "info" : "SimpleName[62753-62766]:SimpleName[62717-62730]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[62767-62777]:SingleVariableDeclaration[62731-62741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62779-62859]:Block[62743-62823]"
  }, {
    "left" : "debugLog.append(str);",
    "right" : "debugLog.append(str);",
    "info" : "ExpressionStatement[62785-62806]:ExpressionStatement[62749-62770]"
  }, {
    "left" : "debugLog.append('\\n');",
    "right" : "debugLog.append('\\n');",
    "info" : "ExpressionStatement[62811-62833]:ExpressionStatement[62775-62797]"
  }, {
    "left" : "logger.fine(str);",
    "right" : "logger.fine(str);",
    "info" : "ExpressionStatement[62838-62855]:ExpressionStatement[62802-62819]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62863-62870]:Modifier[62827-62834]"
  }, {
    "left" : "SourceFile",
    "right" : "SourceFile",
    "info" : "SimpleType[62871-62881]:SimpleType[62835-62845]"
  }, {
    "left" : "getSourceFileByName",
    "right" : "getSourceFileByName",
    "info" : "SimpleName[62882-62901]:SimpleName[62846-62865]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[62902-62919]:SingleVariableDeclaration[62866-62883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62921-63236]:Block[62885-63200]"
  }, {
    "left" : "if (sourceName != null)",
    "right" : "if (sourceName != null)",
    "info" : "IfStatement[63042-63215]:IfStatement[63006-63179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63066-63215]:Block[63030-63179]"
  }, {
    "left" : "CompilerInput input = inputsById.get(new InputId(sourceName));",
    "right" : "CompilerInput input = inputsById.get(new InputId(sourceName));",
    "info" : "VariableDeclarationStatement[63074-63136]:VariableDeclarationStatement[63038-63100]"
  }, {
    "left" : "if (input != null)",
    "right" : "if (input != null)",
    "info" : "IfStatement[63143-63209]:IfStatement[63107-63173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63162-63209]:Block[63126-63173]"
  }, {
    "left" : "return input.getSourceFile();",
    "right" : "return input.getSourceFile();",
    "info" : "ReturnStatement[63172-63201]:ReturnStatement[63136-63165]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63220-63232]:ReturnStatement[63184-63196]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[63240-63249]:MarkerAnnotation[63204-63213]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63252-63258]:Modifier[63216-63222]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[63259-63265]:SimpleType[63223-63229]"
  }, {
    "left" : "getSourceLine",
    "right" : "getSourceLine",
    "info" : "SimpleName[63266-63279]:SimpleName[63230-63243]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[63280-63297]:SingleVariableDeclaration[63244-63261]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[63299-63313]:SingleVariableDeclaration[63263-63277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63315-63515]:Block[63279-63479]"
  }, {
    "left" : "if (lineNumber < 1)",
    "right" : "if (lineNumber < 1)",
    "info" : "IfStatement[63321-63367]:IfStatement[63285-63331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63341-63367]:Block[63305-63331]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63349-63361]:ReturnStatement[63313-63325]"
  }, {
    "left" : "SourceFile input = getSourceFileByName(sourceName);",
    "right" : "SourceFile input = getSourceFileByName(sourceName);",
    "info" : "VariableDeclarationStatement[63372-63423]:VariableDeclarationStatement[63336-63387]"
  }, {
    "left" : "if (input != null)",
    "right" : "if (input != null)",
    "info" : "IfStatement[63428-63494]:IfStatement[63392-63458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63447-63494]:Block[63411-63458]"
  }, {
    "left" : "return input.getLine(lineNumber);",
    "right" : "return input.getLine(lineNumber);",
    "info" : "ReturnStatement[63455-63488]:ReturnStatement[63419-63452]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63499-63511]:ReturnStatement[63463-63475]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[63519-63528]:MarkerAnnotation[63483-63492]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63531-63537]:Modifier[63495-63501]"
  }, {
    "left" : "Region",
    "right" : "Region",
    "info" : "SimpleType[63538-63544]:SimpleType[63502-63508]"
  }, {
    "left" : "getSourceRegion",
    "right" : "getSourceRegion",
    "info" : "SimpleName[63545-63560]:SimpleName[63509-63524]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[63561-63578]:SingleVariableDeclaration[63525-63542]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[63580-63594]:SingleVariableDeclaration[63544-63558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63596-63798]:Block[63560-63762]"
  }, {
    "left" : "if (lineNumber < 1)",
    "right" : "if (lineNumber < 1)",
    "info" : "IfStatement[63602-63648]:IfStatement[63566-63612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63622-63648]:Block[63586-63612]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63630-63642]:ReturnStatement[63594-63606]"
  }, {
    "left" : "SourceFile input = getSourceFileByName(sourceName);",
    "right" : "SourceFile input = getSourceFileByName(sourceName);",
    "info" : "VariableDeclarationStatement[63653-63704]:VariableDeclarationStatement[63617-63668]"
  }, {
    "left" : "if (input != null)",
    "right" : "if (input != null)",
    "info" : "IfStatement[63709-63777]:IfStatement[63673-63741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63728-63777]:Block[63692-63741]"
  }, {
    "left" : "return input.getRegion(lineNumber);",
    "right" : "return input.getRegion(lineNumber);",
    "info" : "ReturnStatement[63736-63771]:ReturnStatement[63700-63735]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63782-63794]:ReturnStatement[63746-63758]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[63986-63995]:MarkerAnnotation[63950-63959]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[63998-64002]:SimpleType[63962-63966]"
  }, {
    "left" : "getNodeForCodeInsertion",
    "right" : "getNodeForCodeInsertion",
    "info" : "SimpleName[64003-64026]:SimpleName[63967-63990]"
  }, {
    "left" : "JSModule module",
    "right" : "JSModule module",
    "info" : "SingleVariableDeclaration[64027-64042]:SingleVariableDeclaration[63991-64006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64044-64437]:Block[64008-64401]"
  }, {
    "left" : "if (module == null)",
    "right" : "if (module == null)",
    "info" : "IfStatement[64050-64215]:IfStatement[64014-64179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64070-64215]:Block[64034-64179]"
  }, {
    "left" : "if (inputs.isEmpty())",
    "right" : "if (inputs.isEmpty())",
    "info" : "IfStatement[64078-64163]:IfStatement[64042-64127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64100-64163]:Block[64064-64127]"
  }, {
    "left" : "throw new IllegalStateException(\"No inputs\");",
    "right" : "throw new IllegalStateException(\"No inputs\");",
    "info" : "ThrowStatement[64110-64155]:ThrowStatement[64074-64119]"
  }, {
    "left" : "return inputs.get(0).getAstRoot(this);",
    "right" : "return inputs.get(0).getAstRoot(this);",
    "info" : "ReturnStatement[64171-64209]:ReturnStatement[64135-64173]"
  }, {
    "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
    "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[64221-64275]:VariableDeclarationStatement[64185-64239]"
  }, {
    "left" : "if (moduleInputs.size() > 0)",
    "right" : "if (moduleInputs.size() > 0)",
    "info" : "IfStatement[64280-64367]:IfStatement[64244-64331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64309-64367]:Block[64273-64331]"
  }, {
    "left" : "return moduleInputs.get(0).getAstRoot(this);",
    "right" : "return moduleInputs.get(0).getAstRoot(this);",
    "info" : "ReturnStatement[64317-64361]:ReturnStatement[64281-64325]"
  }, {
    "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
    "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
    "info" : "ThrowStatement[64372-64433]:ThrowStatement[64336-64397]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64441-64447]:Modifier[64405-64411]"
  }, {
    "left" : "SourceMap",
    "right" : "SourceMap",
    "info" : "SimpleType[64448-64457]:SimpleType[64412-64421]"
  }, {
    "left" : "getSourceMap",
    "right" : "getSourceMap",
    "info" : "SimpleName[64458-64470]:SimpleName[64422-64434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64473-64500]:Block[64437-64464]"
  }, {
    "left" : "return sourceMap;",
    "right" : "return sourceMap;",
    "info" : "ReturnStatement[64479-64496]:ReturnStatement[64443-64460]"
  }, {
    "left" : "VariableMap",
    "right" : "VariableMap",
    "info" : "SimpleType[64504-64515]:SimpleType[64468-64479]"
  }, {
    "left" : "getVariableMap",
    "right" : "getVariableMap",
    "info" : "SimpleName[64516-64530]:SimpleName[64480-64494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64533-64601]:Block[64497-64565]"
  }, {
    "left" : "return getPassConfig().getIntermediateState().variableMap;",
    "right" : "return getPassConfig().getIntermediateState().variableMap;",
    "info" : "ReturnStatement[64539-64597]:ReturnStatement[64503-64561]"
  }, {
    "left" : "VariableMap",
    "right" : "VariableMap",
    "info" : "SimpleType[64605-64616]:SimpleType[64569-64580]"
  }, {
    "left" : "getPropertyMap",
    "right" : "getPropertyMap",
    "info" : "SimpleName[64617-64631]:SimpleName[64581-64595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64634-64702]:Block[64598-64666]"
  }, {
    "left" : "return getPassConfig().getIntermediateState().propertyMap;",
    "right" : "return getPassConfig().getIntermediateState().propertyMap;",
    "info" : "ReturnStatement[64640-64698]:ReturnStatement[64604-64662]"
  }, {
    "left" : "CompilerOptions",
    "right" : "CompilerOptions",
    "info" : "SimpleType[64706-64721]:SimpleType[64670-64685]"
  }, {
    "left" : "getOptions",
    "right" : "getOptions",
    "info" : "SimpleName[64722-64732]:SimpleName[64686-64696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64735-64760]:Block[64699-64724]"
  }, {
    "left" : "return options;",
    "right" : "return options;",
    "info" : "ReturnStatement[64741-64756]:ReturnStatement[64705-64720]"
  }, {
    "left" : "FunctionInformationMap",
    "right" : "FunctionInformationMap",
    "info" : "SimpleType[64764-64786]:SimpleType[64728-64750]"
  }, {
    "left" : "getFunctionalInformationMap",
    "right" : "getFunctionalInformationMap",
    "info" : "SimpleName[64787-64814]:SimpleName[64751-64778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64817-64857]:Block[64781-64821]"
  }, {
    "left" : "return functionInformationMap;",
    "right" : "return functionInformationMap;",
    "info" : "ReturnStatement[64823-64853]:ReturnStatement[64787-64817]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64947-64953]:Modifier[64911-64917]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64954-64960]:Modifier[64918-64924]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64961-64965]:PrimitiveType[64925-64929]"
  }, {
    "left" : "setLoggingLevel",
    "right" : "setLoggingLevel",
    "info" : "SimpleName[64966-64981]:SimpleName[64930-64945]"
  }, {
    "left" : "Level level",
    "right" : "Level level",
    "info" : "SingleVariableDeclaration[64982-64993]:SingleVariableDeclaration[64946-64957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64995-65028]:Block[64959-64992]"
  }, {
    "left" : "logger.setLevel(level);",
    "right" : "logger.setLevel(level);",
    "info" : "ExpressionStatement[65001-65024]:ExpressionStatement[64965-64988]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65108-65114]:Modifier[65072-65078]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[65115-65121]:SimpleType[65079-65085]"
  }, {
    "left" : "getAstDotGraph",
    "right" : "getAstDotGraph",
    "info" : "SimpleName[65122-65136]:SimpleName[65086-65100]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[65146-65157]:SimpleType[65110-65121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65158-65389]:Block[65122-65353]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[65164-65385]:IfStatement[65128-65349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65184-65355]:Block[65148-65319]"
  }, {
    "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
    "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
    "info" : "VariableDeclarationStatement[65192-65261]:VariableDeclarationStatement[65156-65225]"
  }, {
    "left" : "cfa.process(null, jsRoot);",
    "right" : "cfa.process(null, jsRoot);",
    "info" : "ExpressionStatement[65268-65294]:ExpressionStatement[65232-65258]"
  }, {
    "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
    "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
    "info" : "ReturnStatement[65301-65349]:ReturnStatement[65265-65313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65361-65385]:Block[65325-65349]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[65369-65379]:ReturnStatement[65333-65343]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[65393-65402]:MarkerAnnotation[65357-65366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65405-65411]:Modifier[65369-65375]"
  }, {
    "left" : "ErrorManager",
    "right" : "ErrorManager",
    "info" : "SimpleType[65412-65424]:SimpleType[65376-65388]"
  }, {
    "left" : "getErrorManager",
    "right" : "getErrorManager",
    "info" : "SimpleName[65425-65440]:SimpleName[65389-65404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65443-65547]:Block[65407-65511]"
  }, {
    "left" : "if (options == null)",
    "right" : "if (options == null)",
    "info" : "IfStatement[65449-65518]:IfStatement[65413-65482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65470-65518]:Block[65434-65482]"
  }, {
    "left" : "initOptions(newCompilerOptions());",
    "right" : "initOptions(newCompilerOptions());",
    "info" : "ExpressionStatement[65478-65512]:ExpressionStatement[65442-65476]"
  }, {
    "left" : "return errorManager;",
    "right" : "return errorManager;",
    "info" : "ReturnStatement[65523-65543]:ReturnStatement[65487-65507]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[65551-65560]:MarkerAnnotation[65515-65524]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[65563-65582]:ParameterizedType[65527-65546]"
  }, {
    "left" : "getInputsInOrder",
    "right" : "getInputsInOrder",
    "info" : "SimpleName[65583-65599]:SimpleName[65547-65563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65602-65671]:Block[65566-65635]"
  }, {
    "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
    "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
    "info" : "ReturnStatement[65608-65667]:ReturnStatement[65572-65631]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65759-65765]:Modifier[65723-65729]"
  }, {
    "left" : "Map<InputId, CompilerInput>",
    "right" : "Map<InputId, CompilerInput>",
    "info" : "ParameterizedType[65766-65793]:ParameterizedType[65730-65757]"
  }, {
    "left" : "getInputsById",
    "right" : "getInputsById",
    "info" : "SimpleName[65794-65807]:SimpleName[65758-65771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65810-65867]:Block[65774-65831]"
  }, {
    "left" : "return Collections.unmodifiableMap(inputsById);",
    "right" : "return Collections.unmodifiableMap(inputsById);",
    "info" : "ReturnStatement[65816-65863]:ReturnStatement[65780-65827]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[65953-65972]:ParameterizedType[65917-65936]"
  }, {
    "left" : "getExternsInOrder",
    "right" : "getExternsInOrder",
    "info" : "SimpleName[65973-65990]:SimpleName[65937-65954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65993-66063]:Block[65957-66027]"
  }, {
    "left" : "return Collections.<CompilerInput>unmodifiableList(externs);",
    "right" : "return Collections.<CompilerInput>unmodifiableList(externs);",
    "info" : "ReturnStatement[65999-66059]:ReturnStatement[65963-66023]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66663-66669]:Modifier[66627-66633]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66670-66676]:Modifier[66634-66640]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[66677-66682]:TYPE_DECLARATION_KIND[66641-66646]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67146-67153]:Modifier[67110-67117]"
  }, {
    "left" : "IntermediateState",
    "right" : "IntermediateState",
    "info" : "SimpleName[67154-67171]:SimpleName[67118-67135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67174-67176]:Block[67138-67140]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67276-67282]:Modifier[67240-67246]"
  }, {
    "left" : "IntermediateState",
    "right" : "IntermediateState",
    "info" : "SimpleType[67283-67300]:SimpleType[67247-67264]"
  }, {
    "left" : "getState",
    "right" : "getState",
    "info" : "SimpleName[67301-67309]:SimpleName[67265-67273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67312-67767]:Block[67276-67731]"
  }, {
    "left" : "IntermediateState state = new IntermediateState();",
    "right" : "IntermediateState state = new IntermediateState();",
    "info" : "VariableDeclarationStatement[67318-67368]:VariableDeclarationStatement[67282-67332]"
  }, {
    "left" : "state.externsRoot = externsRoot;",
    "right" : "state.externsRoot = externsRoot;",
    "info" : "ExpressionStatement[67373-67405]:ExpressionStatement[67337-67369]"
  }, {
    "left" : "state.jsRoot = jsRoot;",
    "right" : "state.jsRoot = jsRoot;",
    "info" : "ExpressionStatement[67410-67432]:ExpressionStatement[67374-67396]"
  }, {
    "left" : "state.externs = externs;",
    "right" : "state.externs = externs;",
    "info" : "ExpressionStatement[67437-67461]:ExpressionStatement[67401-67425]"
  }, {
    "left" : "state.inputs = inputs;",
    "right" : "state.inputs = inputs;",
    "info" : "ExpressionStatement[67466-67488]:ExpressionStatement[67430-67452]"
  }, {
    "left" : "state.modules = modules;",
    "right" : "state.modules = modules;",
    "info" : "ExpressionStatement[67493-67517]:ExpressionStatement[67457-67481]"
  }, {
    "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
    "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
    "info" : "ExpressionStatement[67522-67585]:ExpressionStatement[67486-67549]"
  }, {
    "left" : "state.typeRegistry = typeRegistry;",
    "right" : "state.typeRegistry = typeRegistry;",
    "info" : "ExpressionStatement[67590-67624]:ExpressionStatement[67554-67588]"
  }, {
    "left" : "state.lifeCycleStage = getLifeCycleStage();",
    "right" : "state.lifeCycleStage = getLifeCycleStage();",
    "info" : "ExpressionStatement[67629-67672]:ExpressionStatement[67593-67636]"
  }, {
    "left" : "state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);",
    "right" : "state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);",
    "info" : "ExpressionStatement[67677-67744]:ExpressionStatement[67641-67708]"
  }, {
    "left" : "return state;",
    "right" : "return state;",
    "info" : "ReturnStatement[67750-67763]:ReturnStatement[67714-67727]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67904-67910]:Modifier[67868-67874]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[67911-67915]:PrimitiveType[67875-67879]"
  }, {
    "left" : "setState",
    "right" : "setState",
    "info" : "SimpleName[67916-67924]:SimpleName[67880-67888]"
  }, {
    "left" : "IntermediateState state",
    "right" : "IntermediateState state",
    "info" : "SingleVariableDeclaration[67925-67948]:SingleVariableDeclaration[67889-67912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67950-68381]:Block[67914-68345]"
  }, {
    "left" : "externsRoot = state.externsRoot;",
    "right" : "externsRoot = state.externsRoot;",
    "info" : "ExpressionStatement[67956-67988]:ExpressionStatement[67920-67952]"
  }, {
    "left" : "jsRoot = state.jsRoot;",
    "right" : "jsRoot = state.jsRoot;",
    "info" : "ExpressionStatement[67993-68015]:ExpressionStatement[67957-67979]"
  }, {
    "left" : "externs = state.externs;",
    "right" : "externs = state.externs;",
    "info" : "ExpressionStatement[68020-68044]:ExpressionStatement[67984-68008]"
  }, {
    "left" : "inputs = state.inputs;",
    "right" : "inputs = state.inputs;",
    "info" : "ExpressionStatement[68049-68071]:ExpressionStatement[68013-68035]"
  }, {
    "left" : "modules = state.modules;",
    "right" : "modules = state.modules;",
    "info" : "ExpressionStatement[68076-68100]:ExpressionStatement[68040-68064]"
  }, {
    "left" : "passes = createPassConfigInternal();",
    "right" : "passes = createPassConfigInternal();",
    "info" : "ExpressionStatement[68105-68141]:ExpressionStatement[68069-68105]"
  }, {
    "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
    "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
    "info" : "ExpressionStatement[68146-68206]:ExpressionStatement[68110-68170]"
  }, {
    "left" : "typeRegistry = state.typeRegistry;",
    "right" : "typeRegistry = state.typeRegistry;",
    "info" : "ExpressionStatement[68211-68245]:ExpressionStatement[68175-68209]"
  }, {
    "left" : "setLifeCycleStage(state.lifeCycleStage);",
    "right" : "setLifeCycleStage(state.lifeCycleStage);",
    "info" : "ExpressionStatement[68250-68290]:ExpressionStatement[68214-68254]"
  }, {
    "left" : "injectedLibraries.clear();",
    "right" : "injectedLibraries.clear();",
    "info" : "ExpressionStatement[68296-68322]:ExpressionStatement[68260-68286]"
  }, {
    "left" : "injectedLibraries.putAll(state.injectedLibraries);",
    "right" : "injectedLibraries.putAll(state.injectedLibraries);",
    "info" : "ExpressionStatement[68327-68377]:ExpressionStatement[68291-68341]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[68385-68403]:MarkerAnnotation[68349-68367]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[68406-68425]:ParameterizedType[68370-68389]"
  }, {
    "left" : "getInputsForTesting",
    "right" : "getInputsForTesting",
    "info" : "SimpleName[68426-68445]:SimpleName[68390-68409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68448-68472]:Block[68412-68436]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[68454-68468]:ReturnStatement[68418-68432]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[68476-68494]:MarkerAnnotation[68440-68458]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[68497-68516]:ParameterizedType[68461-68480]"
  }, {
    "left" : "getExternsForTesting",
    "right" : "getExternsForTesting",
    "info" : "SimpleName[68517-68537]:SimpleName[68481-68501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68540-68565]:Block[68504-68529]"
  }, {
    "left" : "return externs;",
    "right" : "return externs;",
    "info" : "ReturnStatement[68546-68561]:ReturnStatement[68510-68525]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[68569-68578]:MarkerAnnotation[68533-68542]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[68581-68588]:PrimitiveType[68545-68552]"
  }, {
    "left" : "hasRegExpGlobalReferences",
    "right" : "hasRegExpGlobalReferences",
    "info" : "SimpleName[68589-68614]:SimpleName[68553-68578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68617-68660]:Block[68581-68624]"
  }, {
    "left" : "return hasRegExpGlobalReferences;",
    "right" : "return hasRegExpGlobalReferences;",
    "info" : "ReturnStatement[68623-68656]:ReturnStatement[68587-68620]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[68664-68673]:MarkerAnnotation[68628-68637]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68676-68680]:PrimitiveType[68640-68644]"
  }, {
    "left" : "setHasRegExpGlobalReferences",
    "right" : "setHasRegExpGlobalReferences",
    "info" : "SimpleName[68681-68709]:SimpleName[68645-68673]"
  }, {
    "left" : "boolean references",
    "right" : "boolean references",
    "info" : "SingleVariableDeclaration[68710-68728]:SingleVariableDeclaration[68674-68692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68730-68779]:Block[68694-68743]"
  }, {
    "left" : "hasRegExpGlobalReferences = references;",
    "right" : "hasRegExpGlobalReferences = references;",
    "info" : "ExpressionStatement[68736-68775]:ExpressionStatement[68700-68739]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[68783-68792]:MarkerAnnotation[68747-68756]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68795-68799]:PrimitiveType[68759-68763]"
  }, {
    "left" : "updateGlobalVarReferences",
    "right" : "updateGlobalVarReferences",
    "info" : "SimpleName[68800-68825]:SimpleName[68764-68789]"
  }, {
    "left" : "Map<Var, ReferenceCollection> refMapPatch",
    "right" : "Map<Var, ReferenceCollection> refMapPatch",
    "info" : "SingleVariableDeclaration[68826-68867]:SingleVariableDeclaration[68790-68831]"
  }, {
    "left" : "Node collectionRoot",
    "right" : "Node collectionRoot",
    "info" : "SingleVariableDeclaration[68875-68894]:SingleVariableDeclaration[68839-68858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68896-69204]:Block[68860-69168]"
  }, {
    "left" : "Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());",
    "right" : "Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());",
    "info" : "ExpressionStatement[68902-68990]:ExpressionStatement[68866-68954]"
  }, {
    "left" : "if (globalRefMap == null)",
    "right" : "if (globalRefMap == null)",
    "info" : "IfStatement[68995-69127]:IfStatement[68959-69091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69021-69127]:Block[68985-69091]"
  }, {
    "left" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
    "right" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
    "info" : "ExpressionStatement[69029-69121]:ExpressionStatement[68993-69085]"
  }, {
    "left" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
    "right" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
    "info" : "ExpressionStatement[69132-69200]:ExpressionStatement[69096-69164]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[69208-69217]:MarkerAnnotation[69172-69181]"
  }, {
    "left" : "GlobalVarReferenceMap",
    "right" : "GlobalVarReferenceMap",
    "info" : "SimpleType[69220-69241]:SimpleType[69184-69205]"
  }, {
    "left" : "getGlobalVarReferences",
    "right" : "getGlobalVarReferences",
    "info" : "SimpleName[69242-69264]:SimpleName[69206-69228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69267-69297]:Block[69231-69261]"
  }, {
    "left" : "return globalRefMap;",
    "right" : "return globalRefMap;",
    "info" : "ReturnStatement[69273-69293]:ReturnStatement[69237-69257]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[69301-69310]:MarkerAnnotation[69265-69274]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[69313-69326]:SimpleType[69277-69290]"
  }, {
    "left" : "getSynthesizedExternsInput",
    "right" : "getSynthesizedExternsInput",
    "info" : "SimpleName[69327-69353]:SimpleName[69291-69317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69356-69513]:Block[69320-69477]"
  }, {
    "left" : "if (synthesizedExternsInput == null)",
    "right" : "if (synthesizedExternsInput == null)",
    "info" : "IfStatement[69362-69473]:IfStatement[69326-69437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69399-69473]:Block[69363-69437]"
  }, {
    "left" : "synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);",
    "right" : "synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);",
    "info" : "ExpressionStatement[69407-69467]:ExpressionStatement[69371-69431]"
  }, {
    "left" : "return synthesizedExternsInput;",
    "right" : "return synthesizedExternsInput;",
    "info" : "ReturnStatement[69478-69509]:ReturnStatement[69442-69473]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[69517-69526]:MarkerAnnotation[69481-69490]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[69529-69535]:Modifier[69493-69499]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[69536-69542]:PrimitiveType[69500-69506]"
  }, {
    "left" : "getProgress",
    "right" : "getProgress",
    "info" : "SimpleName[69543-69554]:SimpleName[69507-69518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69557-69583]:Block[69521-69547]"
  }, {
    "left" : "return progress;",
    "right" : "return progress;",
    "info" : "ReturnStatement[69563-69579]:ReturnStatement[69527-69543]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[69587-69596]:MarkerAnnotation[69551-69560]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[69599-69603]:PrimitiveType[69563-69567]"
  }, {
    "left" : "setProgress",
    "right" : "setProgress",
    "info" : "SimpleName[69604-69615]:SimpleName[69568-69579]"
  }, {
    "left" : "double newProgress",
    "right" : "double newProgress",
    "info" : "SingleVariableDeclaration[69616-69634]:SingleVariableDeclaration[69580-69598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69636-69799]:Block[69600-69763]"
  }, {
    "left" : "if (newProgress > 1.0)",
    "right" : "if (newProgress > 1.0)",
    "info" : "IfStatement[69642-69795]:IfStatement[69606-69759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69665-69694]:Block[69629-69658]"
  }, {
    "left" : "progress = 1.0;",
    "right" : "progress = 1.0;",
    "info" : "ExpressionStatement[69673-69688]:ExpressionStatement[69637-69652]"
  }, {
    "left" : "if (newProgress < 0.0)",
    "right" : "if (newProgress < 0.0)",
    "info" : "IfStatement[69700-69795]:IfStatement[69664-69759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69723-69752]:Block[69687-69716]"
  }, {
    "left" : "progress = 0.0;",
    "right" : "progress = 0.0;",
    "info" : "ExpressionStatement[69731-69746]:ExpressionStatement[69695-69710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69758-69795]:Block[69722-69759]"
  }, {
    "left" : "progress = newProgress;",
    "right" : "progress = newProgress;",
    "info" : "ExpressionStatement[69766-69789]:ExpressionStatement[69730-69753]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70091-70097]:Modifier[70055-70061]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70098-70102]:PrimitiveType[70062-70066]"
  }, {
    "left" : "replaceScript",
    "right" : "replaceScript",
    "info" : "SimpleName[70103-70116]:SimpleName[70067-70080]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[70117-70126]:SingleVariableDeclaration[70081-70090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70128-70347]:Block[70092-70311]"
  }, {
    "left" : "CompilerInput input = this.getInput(ast.getInputId());",
    "right" : "CompilerInput input = this.getInput(ast.getInputId());",
    "info" : "VariableDeclarationStatement[70134-70188]:VariableDeclarationStatement[70098-70152]"
  }, {
    "left" : "if (!replaceIncrementalSourceAst(ast))",
    "right" : "if (!replaceIncrementalSourceAst(ast))",
    "info" : "IfStatement[70193-70253]:IfStatement[70157-70217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70232-70253]:Block[70196-70217]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[70240-70247]:ReturnStatement[70204-70211]"
  }, {
    "left" : "Node originalRoot = input.getAstRoot(this);",
    "right" : "Node originalRoot = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[70258-70301]:VariableDeclarationStatement[70222-70265]"
  }, {
    "left" : "processNewScript(ast, originalRoot);",
    "right" : "processNewScript(ast, originalRoot);",
    "info" : "ExpressionStatement[70307-70343]:ExpressionStatement[70271-70307]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70591-70597]:Modifier[70555-70561]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70598-70602]:PrimitiveType[70562-70566]"
  }, {
    "left" : "addNewScript",
    "right" : "addNewScript",
    "info" : "SimpleName[70603-70615]:SimpleName[70567-70579]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[70616-70625]:SingleVariableDeclaration[70580-70589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70627-70942]:Block[70591-70906]"
  }, {
    "left" : "if (!addNewSourceAst(ast))",
    "right" : "if (!addNewSourceAst(ast))",
    "info" : "IfStatement[70633-70681]:IfStatement[70597-70645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70660-70681]:Block[70624-70645]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[70668-70675]:ReturnStatement[70632-70639]"
  }, {
    "left" : "Node emptyScript = new Node(Token.SCRIPT);",
    "right" : "Node emptyScript = new Node(Token.SCRIPT);",
    "info" : "VariableDeclarationStatement[70686-70728]:VariableDeclarationStatement[70650-70692]"
  }, {
    "left" : "InputId inputId = ast.getInputId();",
    "right" : "InputId inputId = ast.getInputId();",
    "info" : "VariableDeclarationStatement[70733-70768]:VariableDeclarationStatement[70697-70732]"
  }, {
    "left" : "emptyScript.setInputId(inputId);",
    "right" : "emptyScript.setInputId(inputId);",
    "info" : "ExpressionStatement[70773-70805]:ExpressionStatement[70737-70769]"
  }, {
    "left" : "emptyScript.setStaticSourceFile(\n        SourceFile.fromCode(inputId.getIdName(), \"\"));",
    "right" : "emptyScript.setStaticSourceFile(\n        SourceFile.fromCode(inputId.getIdName(), \"\"));",
    "info" : "ExpressionStatement[70810-70897]:ExpressionStatement[70774-70861]"
  }, {
    "left" : "processNewScript(ast, emptyScript);",
    "right" : "processNewScript(ast, emptyScript);",
    "info" : "ExpressionStatement[70903-70938]:ExpressionStatement[70867-70902]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[70946-70953]:Modifier[70910-70917]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70954-70958]:PrimitiveType[70918-70922]"
  }, {
    "left" : "processNewScript",
    "right" : "processNewScript",
    "info" : "SimpleName[70959-70975]:SimpleName[70923-70939]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[70976-70985]:SingleVariableDeclaration[70940-70949]"
  }, {
    "left" : "Node originalRoot",
    "right" : "Node originalRoot",
    "info" : "SingleVariableDeclaration[70987-71004]:SingleVariableDeclaration[70951-70968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71006-71520]:Block[70970-71484]"
  }, {
    "left" : "Node js = ast.getAstRoot(this);",
    "right" : "Node js = ast.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[71012-71043]:VariableDeclarationStatement[70976-71007]"
  }, {
    "left" : "Preconditions.checkNotNull(js);",
    "right" : "Preconditions.checkNotNull(js);",
    "info" : "ExpressionStatement[71048-71079]:ExpressionStatement[71012-71043]"
  }, {
    "left" : "runHotSwap(originalRoot, js, this.getCleanupPassConfig());",
    "right" : "runHotSwap(originalRoot, js, this.getCleanupPassConfig());",
    "info" : "ExpressionStatement[71085-71143]:ExpressionStatement[71049-71107]"
  }, {
    "left" : "runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);",
    "right" : "runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);",
    "info" : "ExpressionStatement[71290-71365]:ExpressionStatement[71254-71329]"
  }, {
    "left" : "this.getTypeRegistry().clearNamedTypes();",
    "right" : "this.getTypeRegistry().clearNamedTypes();",
    "info" : "ExpressionStatement[71371-71412]:ExpressionStatement[71335-71376]"
  }, {
    "left" : "this.removeSyntheticVarsInput();",
    "right" : "this.removeSyntheticVarsInput();",
    "info" : "ExpressionStatement[71417-71449]:ExpressionStatement[71381-71413]"
  }, {
    "left" : "runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());",
    "right" : "runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());",
    "info" : "ExpressionStatement[71455-71516]:ExpressionStatement[71419-71480]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[71616-71623]:Modifier[71580-71587]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[71624-71628]:PrimitiveType[71588-71592]"
  }, {
    "left" : "runHotSwap",
    "right" : "runHotSwap",
    "info" : "SimpleName[71629-71639]:SimpleName[71593-71603]"
  }, {
    "left" : "Node originalRoot",
    "right" : "Node originalRoot",
    "info" : "SingleVariableDeclaration[71647-71664]:SingleVariableDeclaration[71611-71628]"
  }, {
    "left" : "Node js",
    "right" : "Node js",
    "info" : "SingleVariableDeclaration[71666-71673]:SingleVariableDeclaration[71630-71637]"
  }, {
    "left" : "PassConfig passConfig",
    "right" : "PassConfig passConfig",
    "info" : "SingleVariableDeclaration[71675-71696]:SingleVariableDeclaration[71639-71660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71698-71823]:Block[71662-71787]"
  }, {
    "left" : "for (PassFactory passFactory : passConfig.getChecks())",
    "right" : "for (PassFactory passFactory : passConfig.getChecks())",
    "info" : "EnhancedForStatement[71704-71819]:EnhancedForStatement[71668-71783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71759-71819]:Block[71723-71783]"
  }, {
    "left" : "runHotSwapPass(originalRoot, js, passFactory);",
    "right" : "runHotSwapPass(originalRoot, js, passFactory);",
    "info" : "ExpressionStatement[71767-71813]:ExpressionStatement[71731-71777]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[71827-71834]:Modifier[71791-71798]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[71835-71839]:PrimitiveType[71799-71803]"
  }, {
    "left" : "runHotSwapPass",
    "right" : "runHotSwapPass",
    "info" : "SimpleName[71840-71854]:SimpleName[71804-71818]"
  }, {
    "left" : "Node originalRoot",
    "right" : "Node originalRoot",
    "info" : "SingleVariableDeclaration[71862-71879]:SingleVariableDeclaration[71826-71843]"
  }, {
    "left" : "Node js",
    "right" : "Node js",
    "info" : "SingleVariableDeclaration[71881-71888]:SingleVariableDeclaration[71845-71852]"
  }, {
    "left" : "PassFactory passFactory",
    "right" : "PassFactory passFactory",
    "info" : "SingleVariableDeclaration[71890-71913]:SingleVariableDeclaration[71854-71877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71915-72134]:Block[71879-72098]"
  }, {
    "left" : "HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);",
    "right" : "HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);",
    "info" : "VariableDeclarationStatement[71921-71981]:VariableDeclarationStatement[71885-71945]"
  }, {
    "left" : "if (pass != null)",
    "right" : "if (pass != null)",
    "info" : "IfStatement[71986-72130]:IfStatement[71950-72094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72004-72130]:Block[71968-72094]"
  }, {
    "left" : "logger.info(\"Performing HotSwap for pass \" + passFactory.getName());",
    "right" : "logger.info(\"Performing HotSwap for pass \" + passFactory.getName());",
    "info" : "ExpressionStatement[72012-72080]:ExpressionStatement[71976-72044]"
  }, {
    "left" : "pass.hotSwapScript(js, originalRoot);",
    "right" : "pass.hotSwapScript(js, originalRoot);",
    "info" : "ExpressionStatement[72087-72124]:ExpressionStatement[72051-72088]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72138-72145]:Modifier[72102-72109]"
  }, {
    "left" : "PassConfig",
    "right" : "PassConfig",
    "info" : "SimpleType[72146-72156]:SimpleType[72110-72120]"
  }, {
    "left" : "getCleanupPassConfig",
    "right" : "getCleanupPassConfig",
    "info" : "SimpleName[72157-72177]:SimpleName[72121-72141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72180-72229]:Block[72144-72193]"
  }, {
    "left" : "return new CleanupPasses(getOptions());",
    "right" : "return new CleanupPasses(getOptions());",
    "info" : "ReturnStatement[72186-72225]:ReturnStatement[72150-72189]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72233-72240]:Modifier[72197-72204]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[72241-72245]:PrimitiveType[72205-72209]"
  }, {
    "left" : "removeSyntheticVarsInput",
    "right" : "removeSyntheticVarsInput",
    "info" : "SimpleName[72246-72270]:SimpleName[72210-72234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72273-72378]:Block[72237-72342]"
  }, {
    "left" : "String sourceName = Compiler.SYNTHETIC_EXTERNS;",
    "right" : "String sourceName = Compiler.SYNTHETIC_EXTERNS;",
    "info" : "VariableDeclarationStatement[72279-72326]:VariableDeclarationStatement[72243-72290]"
  }, {
    "left" : "removeExternInput(new InputId(sourceName));",
    "right" : "removeExternInput(new InputId(sourceName));",
    "info" : "ExpressionStatement[72331-72374]:ExpressionStatement[72295-72338]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[72382-72391]:MarkerAnnotation[72346-72355]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[72394-72398]:SimpleType[72358-72362]"
  }, {
    "left" : "ensureLibraryInjected",
    "right" : "ensureLibraryInjected",
    "info" : "SimpleName[72399-72420]:SimpleName[72363-72384]"
  }, {
    "left" : "String resourceName",
    "right" : "String resourceName",
    "info" : "SingleVariableDeclaration[72421-72440]:SingleVariableDeclaration[72385-72404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72442-73119]:Block[72406-73083]"
  }, {
    "left" : "if (injectedLibraries.containsKey(resourceName))",
    "right" : "if (injectedLibraries.containsKey(resourceName))",
    "info" : "IfStatement[72448-72523]:IfStatement[72412-72487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72497-72523]:Block[72461-72487]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[72505-72517]:ReturnStatement[72469-72481]"
  }, {
    "left" : "boolean isBase = \"base\".equals(resourceName);",
    "right" : "boolean isBase = \"base\".equals(resourceName);",
    "info" : "VariableDeclarationStatement[72571-72616]:VariableDeclarationStatement[72535-72580]"
  }, {
    "left" : "if (!isBase)",
    "right" : "if (!isBase)",
    "info" : "IfStatement[72621-72678]:IfStatement[72585-72642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72634-72678]:Block[72598-72642]"
  }, {
    "left" : "ensureLibraryInjected(\"base\");",
    "right" : "ensureLibraryInjected(\"base\");",
    "info" : "ExpressionStatement[72642-72672]:ExpressionStatement[72606-72636]"
  }, {
    "left" : "Node firstChild = loadLibraryCode(resourceName).removeChildren();",
    "right" : "Node firstChild = loadLibraryCode(resourceName).removeChildren();",
    "info" : "VariableDeclarationStatement[72684-72749]:VariableDeclarationStatement[72648-72713]"
  }, {
    "left" : "Node lastChild = firstChild.getLastSibling();",
    "right" : "Node lastChild = firstChild.getLastSibling();",
    "info" : "VariableDeclarationStatement[72754-72799]:VariableDeclarationStatement[72718-72763]"
  }, {
    "left" : "Node parent = getNodeForCodeInsertion(null);",
    "right" : "Node parent = getNodeForCodeInsertion(null);",
    "info" : "VariableDeclarationStatement[72805-72849]:VariableDeclarationStatement[72769-72813]"
  }, {
    "left" : "if (isBase)",
    "right" : "if (isBase)",
    "info" : "IfStatement[72854-73016]:IfStatement[72818-72980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72866-72918]:Block[72830-72882]"
  }, {
    "left" : "parent.addChildrenToFront(firstChild);",
    "right" : "parent.addChildrenToFront(firstChild);",
    "info" : "ExpressionStatement[72874-72912]:ExpressionStatement[72838-72876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72924-73016]:Block[72888-72980]"
  }, {
    "left" : "parent.addChildrenAfter(\n          firstChild, injectedLibraries.get(\"base\"));",
    "right" : "parent.addChildrenAfter(\n          firstChild, injectedLibraries.get(\"base\"));",
    "info" : "ExpressionStatement[72932-73010]:ExpressionStatement[72896-72974]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[73021-73040]:ExpressionStatement[72985-73004]"
  }, {
    "left" : "injectedLibraries.put(resourceName, lastChild);",
    "right" : "injectedLibraries.put(resourceName, lastChild);",
    "info" : "ExpressionStatement[73046-73093]:ExpressionStatement[73010-73057]"
  }, {
    "left" : "return lastChild;",
    "right" : "return lastChild;",
    "info" : "ReturnStatement[73098-73115]:ReturnStatement[73062-73079]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[73161-73179]:MarkerAnnotation[73125-73143]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[73182-73186]:SimpleType[73146-73150]"
  }, {
    "left" : "loadLibraryCode",
    "right" : "loadLibraryCode",
    "info" : "SimpleName[73187-73202]:SimpleName[73151-73166]"
  }, {
    "left" : "String resourceName",
    "right" : "String resourceName",
    "info" : "SingleVariableDeclaration[73203-73222]:SingleVariableDeclaration[73167-73186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73224-73666]:Block[73188-73630]"
  }, {
    "left" : "String originalCode;",
    "right" : "String originalCode;",
    "info" : "VariableDeclarationStatement[73230-73250]:VariableDeclarationStatement[73194-73214]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[73255-73528]:TryStatement[73219-73492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73259-73461]:Block[73223-73425]"
  }, {
    "left" : "originalCode = CharStreams.toString(new InputStreamReader(\n          Compiler.class.getResourceAsStream(\n              String.format(\"js/%s.js\", resourceName)),\n          Charsets.UTF_8));",
    "right" : "originalCode = CharStreams.toString(new InputStreamReader(\n          Compiler.class.getResourceAsStream(\n              String.format(\"js/%s.js\", resourceName)),\n          Charsets.UTF_8));",
    "info" : "ExpressionStatement[73267-73455]:ExpressionStatement[73231-73419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73484-73528]:Block[73448-73492]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[73492-73522]:ThrowStatement[73456-73486]"
  }, {
    "left" : "return Normalize.parseAndNormalizeSyntheticCode(\n        this, originalCode,\n        String.format(\"jscomp_%s_\", resourceName));",
    "right" : "return Normalize.parseAndNormalizeSyntheticCode(\n        this, originalCode,\n        String.format(\"jscomp_%s_\", resourceName));",
    "info" : "ReturnStatement[73534-73662]:ReturnStatement[73498-73626]"
  } ]
}