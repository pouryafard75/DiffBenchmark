{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "TypeDeclaration[411-113038]:TypeDeclaration[411-113112]"
    }, {
      "left" : "final static byte BYTE_LF = (byte) '\\n';",
      "right" : "final static byte BYTE_LF = (byte) '\\n';",
      "info" : "FieldDeclaration[658-698]:FieldDeclaration[658-698]"
    }, {
      "left" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "right" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "info" : "FieldDeclaration[769-835]:FieldDeclaration[769-835]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[979-1051]:FieldDeclaration[979-1051]"
    }, {
      "left" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "right" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "info" : "FieldDeclaration[1127-1189]:FieldDeclaration[1127-1189]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1364-1574]:FieldDeclaration[1364-1574]"
    }, {
      "left" : "final protected BytesToNameCanonicalizer _symbols;",
      "right" : "final protected BytesToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1580-1711]:FieldDeclaration[1580-1711]"
    }, {
      "left" : "protected int[] _quadBuffer = new int[16];",
      "right" : "protected int[] _quadBuffer = new int[16];",
      "info" : "FieldDeclaration[1890-1995]:FieldDeclaration[1890-1995]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[2001-2237]:FieldDeclaration[2001-2237]"
    }, {
      "left" : "private int _quad1;",
      "right" : "private int _quad1;",
      "info" : "FieldDeclaration[2243-2336]:FieldDeclaration[2243-2336]"
    }, {
      "left" : "protected InputStream _inputStream;",
      "right" : "protected InputStream _inputStream;",
      "info" : "FieldDeclaration[2555-2590]:FieldDeclaration[2555-2590]"
    }, {
      "left" : "protected byte[] _inputBuffer;",
      "right" : "protected byte[] _inputBuffer;",
      "info" : "FieldDeclaration[2766-2988]:FieldDeclaration[2766-2988]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[2994-3280]:FieldDeclaration[2994-3280]"
    }, {
      "left" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, BytesToNameCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, BytesToNameCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[3452-4004]:MethodDeclaration[3452-4078]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[4010-4090]:MethodDeclaration[4084-4164]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4096-4179]:MethodDeclaration[4170-4253]"
    }, {
      "left" : "public int releaseBuffered(OutputStream out) throws IOException",
      "right" : "public int releaseBuffered(OutputStream out) throws IOException",
      "info" : "MethodDeclaration[4365-4699]:MethodDeclaration[4439-4773]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4705-4786]:MethodDeclaration[4779-4860]"
    }, {
      "left" : "protected final boolean loadMore()\n        throws IOException",
      "right" : "protected final boolean loadMore()\n        throws IOException",
      "info" : "MethodDeclaration[4976-5726]:MethodDeclaration[5050-5800]"
    }, {
      "left" : "protected final boolean _loadToHaveAtLeast(int minAvailable)\n        throws IOException",
      "right" : "protected final boolean _loadToHaveAtLeast(int minAvailable)\n        throws IOException",
      "info" : "MethodDeclaration[5732-7154]:MethodDeclaration[5806-7228]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[7164-7661]:MethodDeclaration[7238-7735]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[7667-8314]:MethodDeclaration[7741-8388]"
    }, {
      "left" : "public String getText()\n        throws IOException, JsonParseException",
      "right" : "public String getText()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[8495-8901]:MethodDeclaration[8569-8975]"
    }, {
      "left" : "public String getValueAsString() throws IOException, JsonParseException",
      "right" : "public String getValueAsString() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[8997-9411]:MethodDeclaration[9071-9485]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "right" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "info" : "MethodDeclaration[9439-9872]:MethodDeclaration[9513-9946]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[9882-10325]:MethodDeclaration[9956-10399]"
    }, {
      "left" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "right" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[10331-11686]:MethodDeclaration[10405-11760]"
    }, {
      "left" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "right" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[11692-12494]:MethodDeclaration[11766-12568]"
    }, {
      "left" : "public int getTextOffset() throws IOException, JsonParseException",
      "right" : "public int getTextOffset() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[12500-13205]:MethodDeclaration[12574-13279]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[13215-14575]:MethodDeclaration[13289-14649]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[14581-15243]:MethodDeclaration[14655-15317]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer)\n        throws IOException, JsonParseException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[15249-20489]:MethodDeclaration[15323-20563]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[20559-20823]:MethodDeclaration[20633-20897]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[20893-21196]:MethodDeclaration[20967-21270]"
    }, {
      "left" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "right" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[21386-25983]:MethodDeclaration[21460-26057]"
    }, {
      "left" : "private final JsonToken _nextTokenNotInObject(int i)\n        throws IOException, JsonParseException",
      "right" : "private final JsonToken _nextTokenNotInObject(int i)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[25989-27688]:MethodDeclaration[26063-27762]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[27698-28269]:MethodDeclaration[27772-28343]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString str)\n        throws IOException, JsonParseException",
      "right" : "public boolean nextFieldName(SerializableString str)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[28484-31759]:MethodDeclaration[28558-31833]"
    }, {
      "left" : "private final void _isNextTokenNameYes()\n        throws IOException, JsonParseException",
      "right" : "private final void _isNextTokenNameYes()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[31765-33835]:MethodDeclaration[31839-33909]"
    }, {
      "left" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str)\n        throws IOException, JsonParseException",
      "right" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[33845-35738]:MethodDeclaration[33919-35812]"
    }, {
      "left" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "right" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[35744-36890]:MethodDeclaration[35818-36964]"
    }, {
      "left" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[36896-37924]:MethodDeclaration[36970-37998]"
    }, {
      "left" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[37930-38963]:MethodDeclaration[38004-39037]"
    }, {
      "left" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "right" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[38969-40134]:MethodDeclaration[39043-40208]"
    }, {
      "left" : "protected JsonToken _parseNumber(int c)\n        throws IOException, JsonParseException",
      "right" : "protected JsonToken _parseNumber(int c)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[40388-43446]:MethodDeclaration[40462-43520]"
    }, {
      "left" : "private final JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException",
      "right" : "private final JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[43456-44939]:MethodDeclaration[43530-45013]"
    }, {
      "left" : "private final int _verifyNoLeadingZeroes()\n        throws IOException, JsonParseException",
      "right" : "private final int _verifyNoLeadingZeroes()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[44949-46363]:MethodDeclaration[45023-46437]"
    }, {
      "left" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength)\n        throws IOException, JsonParseException",
      "right" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[46373-49739]:MethodDeclaration[46447-49813]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[49745-50506]:MethodDeclaration[49819-50580]"
    }, {
      "left" : "protected Name _parseName(int i) throws IOException",
      "right" : "protected Name _parseName(int i) throws IOException",
      "info" : "MethodDeclaration[50703-53099]:MethodDeclaration[50777-53173]"
    }, {
      "left" : "protected Name parseMediumName(int q2, final int[] codes) throws IOException",
      "right" : "protected Name parseMediumName(int q2, final int[] codes) throws IOException",
      "info" : "MethodDeclaration[53105-54402]:MethodDeclaration[53179-54476]"
    }, {
      "left" : "protected Name parseLongName(int q) throws IOException",
      "right" : "protected Name parseLongName(int q) throws IOException",
      "info" : "MethodDeclaration[54408-56525]:MethodDeclaration[54482-56599]"
    }, {
      "left" : "protected Name slowParseName() throws IOException",
      "right" : "protected Name slowParseName() throws IOException",
      "info" : "MethodDeclaration[56531-57192]:MethodDeclaration[56605-57266]"
    }, {
      "left" : "private final Name parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final Name parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[57198-57364]:MethodDeclaration[57272-57438]"
    }, {
      "left" : "private final Name parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final Name parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[57370-57573]:MethodDeclaration[57444-57647]"
    }, {
      "left" : "protected Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "right" : "protected Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "info" : "MethodDeclaration[57579-61823]:MethodDeclaration[57653-61897]"
    }, {
      "left" : "protected Name _handleOddName(int ch) throws IOException",
      "right" : "protected Name _handleOddName(int ch) throws IOException",
      "info" : "MethodDeclaration[61829-64561]:MethodDeclaration[61903-64635]"
    }, {
      "left" : "protected Name _parseAposName() throws IOException",
      "right" : "protected Name _parseAposName() throws IOException",
      "info" : "MethodDeclaration[64801-68913]:MethodDeclaration[64875-68987]"
    }, {
      "left" : "private final Name findName(int q1, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private final Name findName(int q1, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[69111-69535]:MethodDeclaration[69185-69609]"
    }, {
      "left" : "private final Name findName(int q1, int q2, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private final Name findName(int q1, int q2, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[69541-70006]:MethodDeclaration[69615-70080]"
    }, {
      "left" : "private final Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private final Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[70012-70456]:MethodDeclaration[70086-70530]"
    }, {
      "left" : "private final Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private final Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[70462-75145]:MethodDeclaration[70536-75219]"
    }, {
      "left" : "protected void _finishString() throws IOException",
      "right" : "protected void _finishString() throws IOException",
      "info" : "MethodDeclaration[75341-76362]:MethodDeclaration[75415-76436]"
    }, {
      "left" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "right" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "info" : "MethodDeclaration[76368-79283]:MethodDeclaration[76442-79357]"
    }, {
      "left" : "protected void _skipString() throws IOException",
      "right" : "protected void _skipString() throws IOException",
      "info" : "MethodDeclaration[79289-81260]:MethodDeclaration[79363-81334]"
    }, {
      "left" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "right" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "info" : "MethodDeclaration[81266-83109]:MethodDeclaration[81340-83183]"
    }, {
      "left" : "protected JsonToken _handleApos()\n        throws IOException",
      "right" : "protected JsonToken _handleApos()\n        throws IOException",
      "info" : "MethodDeclaration[83115-86216]:MethodDeclaration[83189-86290]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "info" : "MethodDeclaration[86226-87408]:MethodDeclaration[86300-87482]"
    }, {
      "left" : "protected void _matchToken(String matchStr, int i)\n        throws IOException",
      "right" : "protected void _matchToken(String matchStr, int i)\n        throws IOException",
      "info" : "MethodDeclaration[87414-88365]:MethodDeclaration[87488-88439]"
    }, {
      "left" : "private final int _skipWS() throws IOException",
      "right" : "private final int _skipWS() throws IOException",
      "info" : "MethodDeclaration[88573-89960]:MethodDeclaration[88647-90034]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[89966-91175]:MethodDeclaration[90040-91249]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[91181-93746]:MethodDeclaration[91255-93820]"
    }, {
      "left" : "private final void _skipComment() throws IOException",
      "right" : "private final void _skipComment() throws IOException",
      "info" : "MethodDeclaration[93756-94474]:MethodDeclaration[93830-94548]"
    }, {
      "left" : "private final void _skipCComment() throws IOException",
      "right" : "private final void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[94480-96040]:MethodDeclaration[94554-96114]"
    }, {
      "left" : "private final boolean _skipYAMLComment() throws IOException",
      "right" : "private final boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[96046-96250]:MethodDeclaration[96120-96324]"
    }, {
      "left" : "private final void _skipLine() throws IOException",
      "right" : "private final void _skipLine() throws IOException",
      "info" : "MethodDeclaration[96256-97611]:MethodDeclaration[96330-97685]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[97621-99127]:MethodDeclaration[97695-99201]"
    }, {
      "left" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "right" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "info" : "MethodDeclaration[99133-100733]:MethodDeclaration[99207-100807]"
    }, {
      "left" : "private final int _decodeUtf8_2(int c) throws IOException",
      "right" : "private final int _decodeUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[100921-101267]:MethodDeclaration[100995-101341]"
    }, {
      "left" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "info" : "MethodDeclaration[101273-101912]:MethodDeclaration[101347-101986]"
    }, {
      "left" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "info" : "MethodDeclaration[101918-102397]:MethodDeclaration[101992-102471]"
    }, {
      "left" : "private final int _decodeUtf8_4(int c) throws IOException",
      "right" : "private final int _decodeUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[102403-103551]:MethodDeclaration[102477-103625]"
    }, {
      "left" : "private final void _skipUtf8_2(int c) throws IOException",
      "right" : "private final void _skipUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[103557-103851]:MethodDeclaration[103631-103925]"
    }, {
      "left" : "private final void _skipUtf8_3(int c) throws IOException",
      "right" : "private final void _skipUtf8_3(int c) throws IOException",
      "info" : "MethodDeclaration[103963-104504]:MethodDeclaration[104037-104578]"
    }, {
      "left" : "private final void _skipUtf8_4(int c) throws IOException",
      "right" : "private final void _skipUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[104510-105260]:MethodDeclaration[104584-105334]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[105449-105851]:MethodDeclaration[105523-105925]"
    }, {
      "left" : "private int nextByte() throws IOException",
      "right" : "private int nextByte() throws IOException",
      "info" : "MethodDeclaration[105861-106045]:MethodDeclaration[105935-106119]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[106236-106400]:MethodDeclaration[106310-106474]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[106406-107214]:MethodDeclaration[106480-107288]"
    }, {
      "left" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "info" : "MethodDeclaration[107228-107479]:MethodDeclaration[107302-107553]"
    }, {
      "left" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[107485-107656]:MethodDeclaration[107559-107730]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[107662-107832]:MethodDeclaration[107736-107906]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "info" : "MethodDeclaration[107838-107997]:MethodDeclaration[107912-108071]"
    }, {
      "left" : "public static int[] growArrayBy(int[] arr, int more)",
      "right" : "public static int[] growArrayBy(int[] arr, int more)",
      "info" : "MethodDeclaration[108003-108192]:MethodDeclaration[108077-108266]"
    }, {
      "left" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[108363-113036]:MethodDeclaration[108437-113110]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3681-4004]:Block[3681-4078]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3691-3713]:SuperConstructorInvocation[3691-3713]"
    }, {
      "left" : "_inputStream = in;",
      "right" : "_inputStream = in;",
      "info" : "ExpressionStatement[3722-3740]:ExpressionStatement[3722-3740]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3749-3770]:ExpressionStatement[3749-3770]"
    }, {
      "left" : "_symbols = sym;",
      "right" : "_symbols = sym;",
      "info" : "ExpressionStatement[3779-3794]:ExpressionStatement[3779-3794]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3803-3830]:ExpressionStatement[3803-3830]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3839-3857]:ExpressionStatement[3839-3857]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3866-3882]:ExpressionStatement[3866-3882]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3961-3998]:ExpressionStatement[4035-4072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4054-4090]:Block[4128-4164]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4064-4084]:ReturnStatement[4138-4158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4146-4179]:Block[4220-4253]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4156-4173]:ExpressionStatement[4230-4247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4447-4699]:Block[4521-4773]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4457-4491]:VariableDeclarationStatement[4531-4565]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4500-4548]:IfStatement[4574-4622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4515-4548]:Block[4589-4622]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4529-4538]:ReturnStatement[4603-4612]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4598-4622]:VariableDeclarationStatement[4672-4696]"
    }, {
      "left" : "out.write(_inputBuffer, origPtr, count);",
      "right" : "out.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4631-4671]:ExpressionStatement[4705-4745]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4680-4693]:ReturnStatement[4754-4767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4750-4786]:Block[4824-4860]"
    }, {
      "left" : "return _inputStream;",
      "right" : "return _inputStream;",
      "info" : "ReturnStatement[4760-4780]:ReturnStatement[4834-4854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5056-5726]:Block[5130-5800]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[5066-5099]:ExpressionStatement[5140-5173]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[5108-5140]:ExpressionStatement[5182-5214]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[5158-5698]:IfStatement[5232-5772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5184-5698]:Block[5258-5772]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[5198-5266]:VariableDeclarationStatement[5272-5340]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5279-5404]:IfStatement[5353-5478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5294-5404]:Block[5368-5478]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5312-5326]:ExpressionStatement[5386-5400]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5343-5361]:ExpressionStatement[5417-5435]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5378-5390]:ReturnStatement[5452-5464]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5445-5459]:ExpressionStatement[5519-5533]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5524-5688]:IfStatement[5598-5762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5540-5688]:Block[5614-5762]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "info" : "ThrowStatement[5558-5674]:ThrowStatement[5632-5748]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5707-5720]:ReturnStatement[5781-5794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5989-7154]:Block[6063-7228]"
    }, {
      "left" : "if (_inputStream == null)",
      "right" : "if (_inputStream == null)",
      "info" : "IfStatement[6094-6157]:IfStatement[6168-6231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6120-6157]:Block[6194-6231]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6134-6147]:ReturnStatement[6208-6221]"
    }, {
      "left" : "int amount = _inputEnd - _inputPtr;",
      "right" : "int amount = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[6215-6250]:VariableDeclarationStatement[6289-6324]"
    }, {
      "left" : "if (amount > 0 && _inputPtr > 0)",
      "right" : "if (amount > 0 && _inputPtr > 0)",
      "info" : "IfStatement[6259-6550]:IfStatement[6333-6624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6292-6506]:Block[6366-6580]"
    }, {
      "left" : "_currInputProcessed += _inputPtr;",
      "right" : "_currInputProcessed += _inputPtr;",
      "info" : "ExpressionStatement[6306-6339]:ExpressionStatement[6380-6413]"
    }, {
      "left" : "_currInputRowStart -= _inputPtr;",
      "right" : "_currInputRowStart -= _inputPtr;",
      "info" : "ExpressionStatement[6352-6384]:ExpressionStatement[6426-6458]"
    }, {
      "left" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "right" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "info" : "ExpressionStatement[6397-6464]:ExpressionStatement[6471-6538]"
    }, {
      "left" : "_inputEnd = amount;",
      "right" : "_inputEnd = amount;",
      "info" : "ExpressionStatement[6477-6496]:ExpressionStatement[6551-6570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6512-6550]:Block[6586-6624]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[6526-6540]:ExpressionStatement[6600-6614]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[6559-6573]:ExpressionStatement[6633-6647]"
    }, {
      "left" : "while (_inputEnd < minAvailable)",
      "right" : "while (_inputEnd < minAvailable)",
      "info" : "WhileStatement[6582-7127]:WhileStatement[6656-7201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6615-7127]:Block[6689-7201]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "right" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "info" : "VariableDeclarationStatement[6629-6717]:VariableDeclarationStatement[6703-6791]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[6730-7085]:IfStatement[6804-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6745-7085]:Block[6819-7159]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[6795-6809]:ExpressionStatement[6869-6883]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[6882-7041]:IfStatement[6956-7115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6898-7041]:Block[6972-7115]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "info" : "ThrowStatement[6920-7023]:ThrowStatement[6994-7097]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7058-7071]:ReturnStatement[7132-7145]"
    }, {
      "left" : "_inputEnd += count;",
      "right" : "_inputEnd += count;",
      "info" : "ExpressionStatement[7098-7117]:ExpressionStatement[7172-7191]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7136-7148]:ReturnStatement[7210-7222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7230-7661]:Block[7304-7735]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[7443-7655]:IfStatement[7517-7729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7469-7655]:Block[7543-7729]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[7483-7612]:IfStatement[7557-7686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-7612]:Block[7633-7686]"
    }, {
      "left" : "_inputStream.close();",
      "right" : "_inputStream.close();",
      "info" : "ExpressionStatement[7577-7598]:ExpressionStatement[7651-7672]"
    }, {
      "left" : "_inputStream = null;",
      "right" : "_inputStream = null;",
      "info" : "ExpressionStatement[7625-7645]:ExpressionStatement[7699-7719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7989-8314]:Block[8063-8388]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[7999-8023]:ExpressionStatement[8073-8097]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[8072-8091]:ExpressionStatement[8146-8165]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[8100-8308]:IfStatement[8174-8382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8123-8308]:Block[8197-8382]"
    }, {
      "left" : "byte[] buf = _inputBuffer;",
      "right" : "byte[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[8137-8163]:VariableDeclarationStatement[8211-8237]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[8176-8298]:IfStatement[8250-8372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8193-8298]:Block[8267-8372]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[8211-8231]:ExpressionStatement[8285-8305]"
    }, {
      "left" : "_ioContext.releaseReadIOBuffer(buf);",
      "right" : "_ioContext.releaseReadIOBuffer(buf);",
      "info" : "ExpressionStatement[8248-8284]:ExpressionStatement[8322-8358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8584-8901]:Block[8658-8975]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8594-8857]:IfStatement[8668-8931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8636-8857]:Block[8710-8931]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8650-8796]:IfStatement[8724-8870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8672-8796]:Block[8746-8870]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8690-8715]:ExpressionStatement[8764-8789]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8732-8748]:ExpressionStatement[8806-8822]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8809-8847]:ReturnStatement[8883-8921]"
    }, {
      "left" : "return _getText2(_currToken);",
      "right" : "return _getText2(_currToken);",
      "info" : "ReturnStatement[8866-8895]:ReturnStatement[8940-8969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9087-9411]:Block[9161-9485]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9097-9360]:IfStatement[9171-9434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9139-9360]:Block[9213-9434]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9153-9299]:IfStatement[9227-9373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9175-9299]:Block[9249-9373]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9193-9218]:ExpressionStatement[9267-9292]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[9235-9251]:ExpressionStatement[9309-9325]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9312-9350]:ReturnStatement[9386-9424]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[9369-9405]:ReturnStatement[9443-9479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9544-9872]:Block[9618-9946]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9554-9817]:IfStatement[9628-9891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9596-9817]:Block[9670-9891]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9610-9756]:IfStatement[9684-9830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9632-9756]:Block[9706-9830]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9650-9675]:ExpressionStatement[9724-9749]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[9692-9708]:ExpressionStatement[9766-9782]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9769-9807]:ReturnStatement[9843-9881]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[9826-9866]:ReturnStatement[9900-9940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9932-10325]:Block[10006-10399]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[9942-9993]:IfStatement[10016-10067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9957-9993]:Block[10031-10067]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9971-9983]:ReturnStatement[10045-10057]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "info" : "SwitchStatement[10002-10319]:SwitchStatement[10076-10393]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[10028-10047]:SwitchCase[10102-10121]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[10060-10100]:ReturnStatement[10134-10174]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[10110-10125]:SwitchCase[10184-10199]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[10162-10181]:SwitchCase[10236-10255]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[10190-10211]:SwitchCase[10264-10285]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[10224-10262]:ReturnStatement[10298-10336]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10271-10279]:SwitchCase[10345-10353]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[10289-10309]:ReturnStatement[10363-10383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10430-11686]:Block[10504-11760]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10440-11659]:IfStatement[10514-11733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10464-11659]:Block[10538-11733]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[10513-11649]:SwitchStatement[10587-11723]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[10569-10588]:SwitchCase[10643-10662]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[10605-11150]:IfStatement[10679-11224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10623-11150]:Block[10697-11224]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[10645-10692]:VariableDeclarationStatement[10719-10766]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[10713-10741]:VariableDeclarationStatement[10787-10815]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[10762-11025]:IfStatement[10836-11099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10791-10897]:Block[10865-10971]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[10817-10875]:ExpressionStatement[10891-10949]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[10903-11025]:IfStatement[10977-11099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10941-11025]:Block[11015-11099]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[10967-11003]:ExpressionStatement[11041-11077]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[11046-11092]:ExpressionStatement[11120-11166]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[11113-11132]:ExpressionStatement[11187-11206]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[11167-11190]:ReturnStatement[11241-11264]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11208-11223]:SwitchCase[11282-11297]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11240-11398]:IfStatement[11314-11472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11262-11398]:Block[11336-11472]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11284-11309]:ExpressionStatement[11358-11383]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11330-11346]:ExpressionStatement[11404-11420]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11443-11462]:SwitchCase[11517-11536]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11475-11496]:SwitchCase[11549-11570]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[11513-11548]:ReturnStatement[11587-11622]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11578-11586]:SwitchCase[11652-11660]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[11603-11635]:ReturnStatement[11677-11709]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11668-11680]:ReturnStatement[11742-11754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11784-12494]:Block[11858-12568]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[11794-12470]:IfStatement[11868-12544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11818-12470]:Block[11892-12544]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[11867-12460]:SwitchStatement[11941-12534]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[11923-11942]:SwitchCase[11997-12016]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[11959-12008]:ReturnStatement[12033-12082]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[12021-12036]:SwitchCase[12095-12110]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12053-12211]:IfStatement[12127-12285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12075-12211]:Block[12149-12285]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12097-12122]:ExpressionStatement[12171-12196]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[12143-12159]:ExpressionStatement[12217-12233]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[12256-12275]:SwitchCase[12330-12349]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[12288-12309]:SwitchCase[12362-12383]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[12326-12352]:ReturnStatement[12400-12426]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12382-12390]:SwitchCase[12456-12464]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[12407-12446]:ReturnStatement[12481-12520]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12479-12488]:ReturnStatement[12553-12562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12584-13205]:Block[12658-13279]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[12661-13181]:IfStatement[12735-13255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12685-13181]:Block[12759-13255]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[12699-13171]:SwitchStatement[12773-13245]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[12738-12757]:SwitchCase[12812-12831]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12774-12783]:ReturnStatement[12848-12857]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[12796-12811]:SwitchCase[12870-12885]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12828-12986]:IfStatement[12902-13060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12850-12986]:Block[12924-13060]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12872-12897]:ExpressionStatement[12946-12971]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[12918-12934]:ExpressionStatement[12992-13008]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[13031-13050]:SwitchCase[13105-13124]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[13063-13084]:SwitchCase[13137-13158]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[13101-13136]:ReturnStatement[13175-13210]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13149-13157]:SwitchCase[13223-13231]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[13190-13199]:ReturnStatement[13264-13273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13335-14575]:Block[13409-14649]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[13345-13617]:IfStatement[13419-13691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13478-13617]:Block[13552-13691]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[13492-13607]:ExpressionStatement[13566-13681]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13732-14540]:IfStatement[13806-14614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13754-14201]:Block[13828-14275]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13768-14016]:TryStatement[13842-14090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13772-13845]:Block[13846-13919]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[13790-13831]:ExpressionStatement[13864-13905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13883-14016]:Block[13957-14090]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[13901-14002]:ThrowStatement[13975-14076]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[14166-14191]:ExpressionStatement[14240-14265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14207-14540]:Block[14281-14614]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[14259-14530]:IfStatement[14333-14604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14285-14530]:Block[14359-14604]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[14303-14399]:VariableDeclarationStatement[14377-14473]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[14416-14462]:ExpressionStatement[14490-14536]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[14479-14516]:ExpressionStatement[14553-14590]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[14549-14569]:ReturnStatement[14623-14643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14717-15243]:Block[14791-15317]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[14803-14983]:IfStatement[14877-15057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14866-14983]:Block[14940-15057]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[14880-14918]:VariableDeclarationStatement[14954-14992]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[14931-14944]:ExpressionStatement[15005-15018]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[14957-14973]:ReturnStatement[15031-15047]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[15046-15090]:VariableDeclarationStatement[15120-15164]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15099-15237]:TryStatement[15173-15311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15103-15168]:Block[15177-15242]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[15117-15158]:ReturnStatement[15191-15232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15177-15237]:Block[15251-15311]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[15191-15227]:ExpressionStatement[15265-15301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15415-20489]:Block[15489-20563]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[15425-15443]:VariableDeclarationStatement[15499-15517]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[15452-15492]:VariableDeclarationStatement[15526-15566]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[15501-15521]:VariableDeclarationStatement[15575-15595]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15531-20299]:WhileStatement[15605-20373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15544-20299]:Block[15618-20373]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[15621-15628]:VariableDeclarationStatement[15695-15702]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15641-15851]:DoStatement[15715-15925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15644-15826]:Block[15718-15900]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15662-15751]:IfStatement[15736-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15690-15751]:Block[15764-15825]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15712-15733]:ExpressionStatement[15786-15807]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[15768-15812]:ExpressionStatement[15842-15886]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[15864-15907]:VariableDeclarationStatement[15938-15981]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15920-16236]:IfStatement[15994-16310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15934-16236]:Block[16008-16310]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[15989-16056]:IfStatement[16063-16130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16010-16056]:Block[16084-16130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16032-16038]:BreakStatement[16106-16112]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[16073-16119]:ExpressionStatement[16147-16193]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16136-16222]:IfStatement[16210-16296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16150-16222]:Block[16224-16296]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16195-16204]:ContinueStatement[16269-16278]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[16292-16456]:IfStatement[16366-16530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16319-16456]:Block[16393-16530]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[16337-16362]:ExpressionStatement[16411-16436]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[16379-16411]:ExpressionStatement[16453-16485]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[16428-16442]:ExpressionStatement[16502-16516]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[16470-16493]:VariableDeclarationStatement[16544-16567]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16578-16659]:IfStatement[16652-16733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16606-16659]:Block[16680-16733]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16624-16645]:ExpressionStatement[16698-16719]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[16672-16710]:ExpressionStatement[16746-16784]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16723-16762]:ExpressionStatement[16797-16836]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16775-16867]:IfStatement[16849-16941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16789-16867]:Block[16863-16941]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[16807-16853]:ExpressionStatement[16881-16927]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[16880-16920]:ExpressionStatement[16954-16994]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16995-17076]:IfStatement[17069-17150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17023-17076]:Block[17097-17150]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17041-17062]:ExpressionStatement[17115-17136]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[17089-17127]:ExpressionStatement[17163-17201]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[17140-17179]:ExpressionStatement[17214-17253]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17250-18459]:IfStatement[17324-18533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17264-18459]:Block[17338-18533]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17282-17727]:IfStatement[17356-17801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17330-17727]:Block[17404-17801]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[17435-17642]:IfStatement[17509-17716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17479-17642]:Block[17553-17716]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[17505-17523]:ExpressionStatement[17579-17597]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17548-17589]:ExpressionStatement[17622-17663]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17614-17620]:BreakStatement[17688-17694]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[17663-17709]:ExpressionStatement[17737-17783]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17744-18445]:IfStatement[17818-18519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17792-18445]:Block[17866-18519]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17858-17955]:IfStatement[17932-18029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17886-17955]:Block[17960-18029]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17912-17933]:ExpressionStatement[17986-18007]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[17976-18014]:ExpressionStatement[18050-18088]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[18035-18233]:IfStatement[18109-18307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18072-18233]:Block[18146-18307]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[18098-18211]:ThrowStatement[18172-18285]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[18317-18335]:ExpressionStatement[18391-18409]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18356-18397]:ExpressionStatement[18430-18471]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18418-18427]:ContinueStatement[18492-18501]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18506-18546]:ExpressionStatement[18580-18620]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18630-18711]:IfStatement[18704-18785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18658-18711]:Block[18732-18785]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18676-18697]:ExpressionStatement[18750-18771]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18724-18762]:ExpressionStatement[18798-18836]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18775-18814]:ExpressionStatement[18849-18888]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18827-20005]:IfStatement[18901-20079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18841-20005]:Block[18915-20079]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18859-19377]:IfStatement[18933-19451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18907-19377]:Block[18981-19451]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[19012-19292]:IfStatement[19086-19366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19056-19292]:Block[19130-19366]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[19082-19100]:ExpressionStatement[19156-19174]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19125-19173]:ExpressionStatement[19199-19247]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19198-19239]:ExpressionStatement[19272-19313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19264-19270]:BreakStatement[19338-19344]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[19313-19359]:ExpressionStatement[19387-19433]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[19394-19991]:IfStatement[19468-20065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19442-19991]:Block[19516-20065]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[19794-19812]:ExpressionStatement[19868-19886]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19833-19881]:ExpressionStatement[19907-19955]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19902-19943]:ExpressionStatement[19976-20017]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19964-19973]:ContinueStatement[20038-20047]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[20072-20112]:ExpressionStatement[20146-20186]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[20125-20174]:ExpressionStatement[20199-20248]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[20187-20235]:ExpressionStatement[20261-20309]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[20248-20289]:ExpressionStatement[20322-20363]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[20308-20333]:ExpressionStatement[20382-20407]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[20342-20455]:IfStatement[20416-20529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20361-20455]:Block[20435-20529]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[20375-20400]:ExpressionStatement[20449-20474]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[20413-20445]:ExpressionStatement[20487-20519]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[20464-20483]:ReturnStatement[20538-20557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20616-20823]:Block[20690-20897]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                getTokenCharacterOffset(), -1L, // bytes, chars\n                getTokenLineNr(),\n                getTokenColumnNr());",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                getTokenCharacterOffset(), -1L, // bytes, chars\n                getTokenLineNr(),\n                getTokenColumnNr());",
      "info" : "ReturnStatement[20626-20817]:ReturnStatement[20700-20891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20952-21196]:Block[21026-21270]"
    }, {
      "left" : "int col = _inputPtr - _currInputRowStart + 1;",
      "right" : "int col = _inputPtr - _currInputRowStart + 1;",
      "info" : "VariableDeclarationStatement[20962-21007]:VariableDeclarationStatement[21036-21081]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "info" : "ReturnStatement[21027-21190]:ReturnStatement[21101-21264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21595-25983]:Block[21669-26057]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[21605-21633]:ExpressionStatement[21679-21707]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[21855-21943]:IfStatement[21929-22017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21895-21943]:Block[21969-22017]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[21909-21933]:ReturnStatement[21983-22007]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[21952-22043]:IfStatement[22026-22117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21974-22043]:Block[22048-22117]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[21988-22002]:ExpressionStatement[22062-22076]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[22053-22076]:VariableDeclarationStatement[22127-22150]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[22085-22349]:IfStatement[22159-22423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22096-22349]:Block[22170-22423]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[22291-22299]:ExpressionStatement[22365-22373]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[22312-22339]:ReturnStatement[22386-22413]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[22489-22544]:ExpressionStatement[22563-22618]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[22553-22584]:ExpressionStatement[22627-22658]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[22593-22645]:ExpressionStatement[22667-22719]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[22706-22726]:ExpressionStatement[22780-22800]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[22762-23022]:IfStatement[22836-23096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22785-23022]:Block[22859-23096]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[22799-22898]:IfStatement[22873-22972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22831-22898]:Block[22905-22972]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[22849-22884]:ExpressionStatement[22923-22958]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[22911-22957]:ExpressionStatement[22985-23031]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[22970-23012]:ReturnStatement[23044-23086]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[23031-23291]:IfStatement[23105-23365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23052-23291]:Block[23126-23365]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[23066-23166]:IfStatement[23140-23240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23099-23166]:Block[23173-23240]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[23117-23152]:ExpressionStatement[23191-23226]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[23179-23225]:ExpressionStatement[23253-23299]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[23238-23281]:ReturnStatement[23312-23355]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[23345-23585]:IfStatement[23419-23659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23380-23585]:Block[23454-23659]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[23394-23548]:IfStatement[23468-23622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23414-23548]:Block[23488-23622]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[23432-23534]:ExpressionStatement[23506-23608]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[23561-23575]:ExpressionStatement[23635-23649]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[23767-23856]:IfStatement[23841-23930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23800-23856]:Block[23874-23930]"
    }, {
      "left" : "return _nextTokenNotInObject(i);",
      "right" : "return _nextTokenNotInObject(i);",
      "info" : "ReturnStatement[23814-23846]:ReturnStatement[23888-23920]"
    }, {
      "left" : "Name n = _parseName(i);",
      "right" : "Name n = _parseName(i);",
      "info" : "VariableDeclarationStatement[23914-23937]:VariableDeclarationStatement[23988-24011]"
    }, {
      "left" : "_parsingContext.setCurrentName(n.getName());",
      "right" : "_parsingContext.setCurrentName(n.getName());",
      "info" : "ExpressionStatement[23946-23990]:ExpressionStatement[24020-24064]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[23999-24033]:ExpressionStatement[24073-24107]"
    }, {
      "left" : "if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == ':')",
      "right" : "if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == ':')",
      "info" : "IfStatement[24080-24369]:IfStatement[24154-24443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24141-24177]:Block[24215-24251]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[24155-24167]:ExpressionStatement[24229-24241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24183-24369]:Block[24257-24443]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[24197-24211]:ExpressionStatement[24271-24285]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[24224-24359]:IfStatement[24298-24433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24244-24359]:Block[24318-24433]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[24262-24345]:ExpressionStatement[24336-24419]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[24378-24392]:ExpressionStatement[24452-24466]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[24491-24639]:IfStatement[24565-24713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24511-24639]:Block[24585-24713]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[24525-24549]:ExpressionStatement[24599-24623]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[24562-24598]:ExpressionStatement[24636-24672]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[24611-24629]:ReturnStatement[24685-24703]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[24656-24668]:VariableDeclarationStatement[24730-24742]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[24678-25926]:SwitchStatement[24752-26000]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[24699-24708]:SwitchCase[24773-24782]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[24721-24747]:ExpressionStatement[24795-24821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24760-24766]:BreakStatement[24834-24840]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[24775-24784]:SwitchCase[24849-24858]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[24797-24824]:ExpressionStatement[24871-24898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24837-24843]:BreakStatement[24911-24917]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[24852-24861]:SwitchCase[24926-24935]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[24870-24879]:SwitchCase[24944-24953]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[25001-25046]:ExpressionStatement[25075-25120]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[25055-25064]:SwitchCase[25129-25138]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[25077-25100]:ExpressionStatement[25151-25174]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[25113-25138]:ExpressionStatement[25187-25212]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25151-25157]:BreakStatement[25225-25231]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[25166-25175]:SwitchCase[25240-25249]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[25188-25212]:ExpressionStatement[25262-25286]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[25226-25252]:ExpressionStatement[25300-25326]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25265-25271]:BreakStatement[25339-25345]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[25280-25289]:SwitchCase[25354-25363]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[25302-25325]:ExpressionStatement[25376-25399]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[25338-25363]:ExpressionStatement[25412-25437]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25376-25382]:BreakStatement[25450-25456]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[25392-25401]:SwitchCase[25466-25475]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[25633-25642]:SwitchCase[25707-25716]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[25651-25660]:SwitchCase[25725-25734]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[25669-25678]:SwitchCase[25743-25752]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[25687-25696]:SwitchCase[25761-25770]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[25705-25714]:SwitchCase[25779-25788]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[25723-25732]:SwitchCase[25797-25806]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[25741-25750]:SwitchCase[25815-25824]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[25759-25768]:SwitchCase[25833-25842]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[25777-25786]:SwitchCase[25851-25860]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[25795-25804]:SwitchCase[25869-25878]"
    }, {
      "left" : "t = _parseNumber(i);",
      "right" : "t = _parseNumber(i);",
      "info" : "ExpressionStatement[25817-25837]:ExpressionStatement[25891-25911]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25850-25856]:BreakStatement[25924-25930]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25865-25873]:SwitchCase[25939-25947]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[25886-25916]:ExpressionStatement[25960-25990]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[25935-25950]:ExpressionStatement[26009-26024]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[25959-25977]:ReturnStatement[26033-26051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26093-27688]:Block[26167-27762]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[26103-26229]:IfStatement[26177-26303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26123-26229]:Block[26197-26303]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[26137-26161]:ExpressionStatement[26211-26235]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[26174-26219]:ReturnStatement[26248-26293]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parseNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parseNumber(i));\n        }",
      "info" : "SwitchStatement[26238-27625]:SwitchStatement[26312-27699]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[26259-26268]:SwitchCase[26333-26342]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26281-26371]:ExpressionStatement[26355-26445]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[26384-26428]:ReturnStatement[26458-26502]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[26437-26446]:SwitchCase[26511-26520]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26459-26550]:ExpressionStatement[26533-26624]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[26563-26608]:ReturnStatement[26637-26682]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[26617-26626]:SwitchCase[26691-26700]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[26635-26644]:SwitchCase[26709-26718]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[26766-26811]:ExpressionStatement[26840-26885]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[26820-26829]:SwitchCase[26894-26903]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[26842-26865]:ExpressionStatement[26916-26939]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[26878-26921]:ReturnStatement[26952-26995]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[26930-26939]:SwitchCase[27004-27013]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[26952-26976]:ExpressionStatement[27026-27050]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[26989-27033]:ReturnStatement[27063-27107]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[27042-27051]:SwitchCase[27116-27125]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[27064-27087]:ExpressionStatement[27138-27161]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[27100-27143]:ReturnStatement[27174-27217]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[27152-27161]:SwitchCase[27226-27235]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[27393-27402]:SwitchCase[27467-27476]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[27411-27420]:SwitchCase[27485-27494]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[27429-27438]:SwitchCase[27503-27512]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[27447-27456]:SwitchCase[27521-27530]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[27465-27474]:SwitchCase[27539-27548]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[27483-27492]:SwitchCase[27557-27566]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[27501-27510]:SwitchCase[27575-27584]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[27519-27528]:SwitchCase[27593-27602]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[27537-27546]:SwitchCase[27611-27620]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[27555-27564]:SwitchCase[27629-27638]"
    }, {
      "left" : "return (_currToken = _parseNumber(i));",
      "right" : "return (_currToken = _parseNumber(i));",
      "info" : "ReturnStatement[27577-27615]:ReturnStatement[27651-27689]"
    }, {
      "left" : "return (_currToken = _handleUnexpectedValue(i));",
      "right" : "return (_currToken = _handleUnexpectedValue(i));",
      "info" : "ReturnStatement[27634-27682]:ReturnStatement[27708-27756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27743-28269]:Block[27817-28343]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[27753-27773]:ExpressionStatement[27827-27847]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[27821-27846]:VariableDeclarationStatement[27895-27920]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[27855-27873]:ExpressionStatement[27929-27947]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[27930-28230]:IfStatement[28004-28304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27962-28076]:Block[28036-28150]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27976-28066]:ExpressionStatement[28050-28140]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[28082-28230]:IfStatement[28156-28304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28115-28230]:Block[28189-28304]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28129-28220]:ExpressionStatement[28203-28294]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[28239-28263]:ReturnStatement[28313-28337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28602-31759]:Block[28676-31833]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[28690-28718]:ExpressionStatement[28764-28792]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[28727-28870]:IfStatement[28801-28944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28767-28870]:Block[28841-28944]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[28817-28834]:ExpressionStatement[28891-28908]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28847-28860]:ReturnStatement[28921-28934]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[28879-28939]:IfStatement[28953-29013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28901-28939]:Block[28975-29013]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[28915-28929]:ExpressionStatement[28989-29003]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[28948-28971]:VariableDeclarationStatement[29022-29045]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[28980-29096]:IfStatement[29054-29170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28991-29096]:Block[29065-29170]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[29021-29029]:ExpressionStatement[29095-29103]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[29042-29060]:ExpressionStatement[29116-29134]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29073-29086]:ReturnStatement[29147-29160]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[29105-29160]:ExpressionStatement[29179-29234]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[29169-29200]:ExpressionStatement[29243-29274]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[29209-29261]:ExpressionStatement[29283-29335]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[29322-29342]:ExpressionStatement[29396-29416]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[29378-29655]:IfStatement[29452-29729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29401-29655]:Block[29475-29729]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[29415-29514]:IfStatement[29489-29588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29447-29514]:Block[29521-29588]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[29465-29500]:ExpressionStatement[29539-29574]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[29527-29573]:ExpressionStatement[29601-29647]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[29586-29619]:ExpressionStatement[29660-29693]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29632-29645]:ReturnStatement[29706-29719]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[29664-29941]:IfStatement[29738-30015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29685-29941]:Block[29759-30015]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[29699-29799]:IfStatement[29773-29873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29732-29799]:Block[29806-29873]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[29750-29785]:ExpressionStatement[29824-29859]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[29812-29858]:ExpressionStatement[29886-29932]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[29871-29905]:ExpressionStatement[29945-29979]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29918-29931]:ReturnStatement[29992-30005]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[29995-30235]:IfStatement[30069-30309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30030-30235]:Block[30104-30309]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[30044-30198]:IfStatement[30118-30272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30064-30198]:Block[30138-30272]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[30082-30184]:ExpressionStatement[30156-30258]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[30211-30225]:ExpressionStatement[30285-30299]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[30245-30353]:IfStatement[30319-30427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30278-30353]:Block[30352-30427]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[30292-30317]:ExpressionStatement[30366-30391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30330-30343]:ReturnStatement[30404-30417]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[30420-31707]:IfStatement[30494-31781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30440-31707]:Block[30514-31781]"
    }, {
      "left" : "byte[] nameBytes = str.asQuotedUTF8();",
      "right" : "byte[] nameBytes = str.asQuotedUTF8();",
      "info" : "VariableDeclarationStatement[30519-30557]:VariableDeclarationStatement[30593-30631]"
    }, {
      "left" : "final int len = nameBytes.length;",
      "right" : "final int len = nameBytes.length;",
      "info" : "VariableDeclarationStatement[30570-30603]:VariableDeclarationStatement[30644-30677]"
    }, {
      "left" : "if ((_inputPtr + len) < _inputEnd)",
      "right" : "if ((_inputPtr + len) < _inputEnd)",
      "info" : "IfStatement[30616-31697]:IfStatement[30690-31771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30651-31697]:Block[30725-31771]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[30728-30758]:VariableDeclarationStatement[30802-30832]"
    }, {
      "left" : "if (_inputBuffer[end] == INT_QUOTE)",
      "right" : "if (_inputBuffer[end] == INT_QUOTE)",
      "info" : "IfStatement[30775-31683]:IfStatement[30849-31757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30811-31683]:Block[30885-31757]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[30833-30848]:VariableDeclarationStatement[30907-30922]"
    }, {
      "left" : "final int ptr = _inputPtr;",
      "right" : "final int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[30869-30895]:VariableDeclarationStatement[30943-30969]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[30916-31665]:WhileStatement[30990-31739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30929-31665]:Block[31003-31739]"
    }, {
      "left" : "if (offset == len)",
      "right" : "if (offset == len)",
      "info" : "IfStatement[30955-31471]:IfStatement[31029-31545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30974-31471]:Block[31048-31545]"
    }, {
      "left" : "_inputPtr = end+1;",
      "right" : "_inputPtr = end+1;",
      "info" : "ExpressionStatement[31019-31037]:ExpressionStatement[31093-31111]"
    }, {
      "left" : "_parsingContext.setCurrentName(str.getValue());",
      "right" : "_parsingContext.setCurrentName(str.getValue());",
      "info" : "ExpressionStatement[31163-31210]:ExpressionStatement[31237-31284]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[31239-31273]:ExpressionStatement[31313-31347]"
    }, {
      "left" : "_isNextTokenNameYes();",
      "right" : "_isNextTokenNameYes();",
      "info" : "ExpressionStatement[31382-31404]:ExpressionStatement[31456-31478]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31433-31445]:ReturnStatement[31507-31519]"
    }, {
      "left" : "if (nameBytes[offset] != _inputBuffer[ptr+offset])",
      "right" : "if (nameBytes[offset] != _inputBuffer[ptr+offset])",
      "info" : "IfStatement[31496-31609]:IfStatement[31570-31683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31547-31609]:Block[31621-31683]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31577-31583]:BreakStatement[31651-31657]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[31634-31643]:ExpressionStatement[31708-31717]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, str);",
      "right" : "return _isNextTokenNameMaybe(i, str);",
      "info" : "ReturnStatement[31716-31753]:ReturnStatement[31790-31827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31857-33835]:Block[31931-33909]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[31938-31944]:VariableDeclarationStatement[32012-32018]"
    }, {
      "left" : "if (_inputPtr < (_inputEnd-1) && _inputBuffer[_inputPtr] == INT_COLON)",
      "right" : "if (_inputPtr < (_inputEnd-1) && _inputBuffer[_inputPtr] == INT_COLON)",
      "info" : "IfStatement[31953-32734]:IfStatement[32027-32808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32024-32687]:Block[32098-32761]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[32057-32087]:ExpressionStatement[32131-32161]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[32100-32112]:ExpressionStatement[32174-32186]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[32125-32278]:IfStatement[32199-32352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32145-32278]:Block[32219-32352]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[32163-32187]:ExpressionStatement[32237-32261]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[32204-32240]:ExpressionStatement[32278-32314]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32257-32264]:ReturnStatement[32331-32338]"
    }, {
      "left" : "if (i == INT_LCURLY)",
      "right" : "if (i == INT_LCURLY)",
      "info" : "IfStatement[32291-32404]:IfStatement[32365-32478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32312-32404]:Block[32386-32478]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[32330-32366]:ExpressionStatement[32404-32440]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32383-32390]:ReturnStatement[32457-32464]"
    }, {
      "left" : "if (i == INT_LBRACKET)",
      "right" : "if (i == INT_LBRACKET)",
      "info" : "IfStatement[32417-32531]:IfStatement[32491-32605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32440-32531]:Block[32514-32605]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[32458-32493]:ExpressionStatement[32532-32567]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32510-32517]:ReturnStatement[32584-32591]"
    }, {
      "left" : "i &= 0xFF;",
      "right" : "i &= 0xFF;",
      "info" : "ExpressionStatement[32544-32554]:ExpressionStatement[32618-32628]"
    }, {
      "left" : "if (i <= INT_SPACE || i == INT_SLASH)",
      "right" : "if (i <= INT_SPACE || i == INT_SLASH)",
      "info" : "IfStatement[32567-32677]:IfStatement[32641-32751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32605-32677]:Block[32679-32751]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[32620-32632]:ExpressionStatement[32694-32706]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[32649-32663]:ExpressionStatement[32723-32737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32693-32734]:Block[32767-32808]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[32707-32724]:ExpressionStatement[32781-32798]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parseNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parseNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[32743-33781]:SwitchStatement[32817-33855]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[32764-32773]:SwitchCase[32838-32847]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[32786-32810]:ExpressionStatement[32860-32884]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[32823-32859]:ExpressionStatement[32897-32933]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32872-32879]:ReturnStatement[32946-32953]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[32888-32897]:SwitchCase[32962-32971]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[32910-32945]:ExpressionStatement[32984-33019]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32958-32965]:ReturnStatement[33032-33039]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[32974-32983]:SwitchCase[33048-33057]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[32996-33032]:ExpressionStatement[33070-33106]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33045-33052]:ReturnStatement[33119-33126]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[33061-33070]:SwitchCase[33135-33144]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[33079-33088]:SwitchCase[33153-33162]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[33101-33146]:ExpressionStatement[33175-33220]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[33155-33164]:SwitchCase[33229-33238]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[33177-33200]:ExpressionStatement[33251-33274]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[33213-33247]:ExpressionStatement[33287-33321]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33260-33267]:ReturnStatement[33334-33341]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[33276-33285]:SwitchCase[33350-33359]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[33298-33322]:ExpressionStatement[33372-33396]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[33335-33370]:ExpressionStatement[33409-33444]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33383-33390]:ReturnStatement[33457-33464]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[33399-33408]:SwitchCase[33473-33482]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[33421-33444]:ExpressionStatement[33495-33518]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[33457-33491]:ExpressionStatement[33531-33565]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33504-33511]:ReturnStatement[33578-33585]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[33520-33529]:SwitchCase[33594-33603]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[33538-33547]:SwitchCase[33612-33621]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[33556-33565]:SwitchCase[33630-33639]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[33574-33583]:SwitchCase[33648-33657]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[33592-33601]:SwitchCase[33666-33675]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[33610-33619]:SwitchCase[33684-33693]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[33628-33637]:SwitchCase[33702-33711]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[33646-33655]:SwitchCase[33720-33729]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[33664-33673]:SwitchCase[33738-33747]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[33682-33691]:SwitchCase[33756-33765]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[33700-33709]:SwitchCase[33774-33783]"
    }, {
      "left" : "_nextToken = _parseNumber(i);",
      "right" : "_nextToken = _parseNumber(i);",
      "info" : "ExpressionStatement[33722-33751]:ExpressionStatement[33796-33825]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33764-33771]:ReturnStatement[33838-33845]"
    }, {
      "left" : "_nextToken = _handleUnexpectedValue(i);",
      "right" : "_nextToken = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[33790-33829]:ExpressionStatement[33864-33903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33971-35738]:Block[34045-35812]"
    }, {
      "left" : "Name n = _parseName(i);",
      "right" : "Name n = _parseName(i);",
      "info" : "VariableDeclarationStatement[34052-34075]:VariableDeclarationStatement[34126-34149]"
    }, {
      "left" : "final boolean match;",
      "right" : "final boolean match;",
      "info" : "VariableDeclarationStatement[34084-34104]:VariableDeclarationStatement[34158-34178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34113-34271]:Block[34187-34345]"
    }, {
      "left" : "String nameStr = n.getName();",
      "right" : "String nameStr = n.getName();",
      "info" : "VariableDeclarationStatement[34127-34156]:VariableDeclarationStatement[34201-34230]"
    }, {
      "left" : "_parsingContext.setCurrentName(nameStr);",
      "right" : "_parsingContext.setCurrentName(nameStr);",
      "info" : "ExpressionStatement[34169-34209]:ExpressionStatement[34243-34283]"
    }, {
      "left" : "match = nameStr.equals(str.getValue());",
      "right" : "match = nameStr.equals(str.getValue());",
      "info" : "ExpressionStatement[34222-34261]:ExpressionStatement[34296-34335]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[34280-34314]:ExpressionStatement[34354-34388]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[34323-34337]:ExpressionStatement[34397-34411]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[34346-34473]:IfStatement[34420-34547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34366-34473]:Block[34440-34547]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[34380-34463]:ExpressionStatement[34454-34537]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[34482-34496]:ExpressionStatement[34556-34570]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[34595-34738]:IfStatement[34669-34812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34615-34738]:Block[34689-34812]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[34629-34653]:ExpressionStatement[34703-34727]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[34666-34702]:ExpressionStatement[34740-34776]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[34715-34728]:ReturnStatement[34789-34802]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[34747-34759]:VariableDeclarationStatement[34821-34833]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[34769-35686]:SwitchStatement[34843-35760]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[34790-34799]:SwitchCase[34864-34873]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[34812-34838]:ExpressionStatement[34886-34912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34851-34857]:BreakStatement[34925-34931]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[34866-34875]:SwitchCase[34940-34949]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[34888-34915]:ExpressionStatement[34962-34989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34928-34934]:BreakStatement[35002-35008]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[34943-34952]:SwitchCase[35017-35026]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[34961-34970]:SwitchCase[35035-35044]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[34983-35028]:ExpressionStatement[35057-35102]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[35037-35046]:SwitchCase[35111-35120]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[35059-35082]:ExpressionStatement[35133-35156]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[35095-35120]:ExpressionStatement[35169-35194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35133-35139]:BreakStatement[35207-35213]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[35148-35157]:SwitchCase[35222-35231]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[35170-35194]:ExpressionStatement[35244-35268]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[35208-35234]:ExpressionStatement[35282-35308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35247-35253]:BreakStatement[35321-35327]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[35262-35271]:SwitchCase[35336-35345]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[35284-35307]:ExpressionStatement[35358-35381]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[35320-35345]:ExpressionStatement[35394-35419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35358-35364]:BreakStatement[35432-35438]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[35374-35383]:SwitchCase[35448-35457]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[35392-35401]:SwitchCase[35466-35475]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[35410-35419]:SwitchCase[35484-35493]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[35428-35437]:SwitchCase[35502-35511]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[35446-35455]:SwitchCase[35520-35529]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[35464-35473]:SwitchCase[35538-35547]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[35482-35491]:SwitchCase[35556-35565]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[35500-35509]:SwitchCase[35574-35583]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[35518-35527]:SwitchCase[35592-35601]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[35536-35545]:SwitchCase[35610-35619]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[35554-35563]:SwitchCase[35628-35637]"
    }, {
      "left" : "t = _parseNumber(i);",
      "right" : "t = _parseNumber(i);",
      "info" : "ExpressionStatement[35577-35597]:ExpressionStatement[35651-35671]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35610-35616]:BreakStatement[35684-35690]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35625-35633]:SwitchCase[35699-35707]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[35646-35676]:ExpressionStatement[35720-35750]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[35695-35710]:ExpressionStatement[35769-35784]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[35719-35732]:ReturnStatement[35793-35806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35839-36890]:Block[35913-36964]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[35930-36761]:IfStatement[36004-36835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35970-36761]:Block[36044-36835]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[36023-36043]:ExpressionStatement[36097-36117]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[36056-36081]:VariableDeclarationStatement[36130-36155]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[36094-36112]:ExpressionStatement[36168-36186]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[36125-36140]:ExpressionStatement[36199-36214]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[36153-36397]:IfStatement[36227-36471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36186-36397]:Block[36260-36471]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[36204-36328]:IfStatement[36278-36402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36226-36328]:Block[36300-36402]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[36248-36273]:ExpressionStatement[36322-36347]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[36294-36310]:ExpressionStatement[36368-36384]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[36345-36383]:ReturnStatement[36419-36457]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[36410-36726]:IfStatement[36484-36800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36442-36564]:Block[36516-36638]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36460-36550]:ExpressionStatement[36534-36624]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[36570-36726]:IfStatement[36644-36800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36603-36726]:Block[36677-36800]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36621-36712]:ExpressionStatement[36695-36786]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36739-36751]:ReturnStatement[36813-36825]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[36818-36884]:ReturnStatement[36892-36958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37003-37924]:Block[37077-37998]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[37094-37779]:IfStatement[37168-37853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37134-37779]:Block[37208-37853]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[37187-37207]:ExpressionStatement[37261-37281]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[37220-37245]:VariableDeclarationStatement[37294-37319]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[37258-37276]:ExpressionStatement[37332-37350]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[37289-37304]:ExpressionStatement[37363-37378]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[37317-37407]:IfStatement[37391-37481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37354-37407]:Block[37428-37481]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[37372-37393]:ReturnStatement[37446-37467]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[37420-37736]:IfStatement[37494-37810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37452-37574]:Block[37526-37648]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37470-37560]:ExpressionStatement[37544-37634]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[37580-37736]:IfStatement[37654-37810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37613-37736]:Block[37687-37810]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37631-37722]:ExpressionStatement[37705-37796]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[37749-37769]:ReturnStatement[37823-37843]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[37836-37918]:ReturnStatement[37910-37992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38040-38963]:Block[38114-39037]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[38131-38817]:IfStatement[38205-38891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38171-38817]:Block[38245-38891]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[38224-38244]:ExpressionStatement[38298-38318]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[38257-38282]:VariableDeclarationStatement[38331-38356]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[38295-38313]:ExpressionStatement[38369-38387]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[38326-38341]:ExpressionStatement[38400-38415]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[38354-38445]:IfStatement[38428-38519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38391-38445]:Block[38465-38519]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[38409-38431]:ReturnStatement[38483-38505]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[38458-38774]:IfStatement[38532-38848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38490-38612]:Block[38564-38686]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38508-38598]:ExpressionStatement[38582-38672]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[38618-38774]:IfStatement[38692-38848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38651-38774]:Block[38725-38848]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38669-38760]:ExpressionStatement[38743-38834]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[38787-38807]:ReturnStatement[38861-38881]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[38874-38957]:ReturnStatement[38948-39031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39068-40134]:Block[39142-40208]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[39159-39927]:IfStatement[39233-40001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39199-39927]:Block[39273-40001]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[39252-39272]:ExpressionStatement[39326-39346]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[39285-39310]:VariableDeclarationStatement[39359-39384]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[39323-39341]:ExpressionStatement[39397-39415]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[39354-39369]:ExpressionStatement[39428-39443]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[39382-39465]:IfStatement[39456-39539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39413-39465]:Block[39487-39539]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[39431-39451]:ReturnStatement[39505-39525]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[39478-39563]:IfStatement[39552-39637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39510-39563]:Block[39584-39637]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[39528-39549]:ReturnStatement[39602-39623]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[39576-39892]:IfStatement[39650-39966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39608-39730]:Block[39682-39804]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[39626-39716]:ExpressionStatement[39700-39790]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[39736-39892]:IfStatement[39810-39966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39769-39892]:Block[39843-39966]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[39787-39878]:ExpressionStatement[39861-39952]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39905-39917]:ReturnStatement[39979-39991]"
    }, {
      "left" : "switch (nextToken().id()) {\n        case ID_TRUE:\n            return Boolean.TRUE;\n        case ID_FALSE:\n            return Boolean.FALSE;\n        default:\n            return null;\n        }",
      "right" : "switch (nextToken().id()) {\n        case ID_TRUE:\n            return Boolean.TRUE;\n        case ID_FALSE:\n            return Boolean.FALSE;\n        default:\n            return null;\n        }",
      "info" : "SwitchStatement[39937-40128]:SwitchStatement[40011-40202]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[39973-39986]:SwitchCase[40047-40060]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[39999-40019]:ReturnStatement[40073-40093]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[40028-40042]:SwitchCase[40102-40116]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[40055-40076]:ReturnStatement[40129-40150]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40085-40093]:SwitchCase[40159-40167]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40106-40118]:ReturnStatement[40180-40192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41258-43446]:Block[41332-43520]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[41268-41324]:VariableDeclarationStatement[41342-41398]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[41333-41348]:VariableDeclarationStatement[41407-41422]"
    }, {
      "left" : "boolean negative = (c == INT_MINUS);",
      "right" : "boolean negative = (c == INT_MINUS);",
      "info" : "VariableDeclarationStatement[41357-41393]:VariableDeclarationStatement[41431-41467]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[41436-41861]:IfStatement[41510-41935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41450-41861]:Block[41524-41935]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[41464-41487]:ExpressionStatement[41538-41561]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[41550-41631]:IfStatement[41624-41705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41578-41631]:Block[41652-41705]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[41596-41617]:ExpressionStatement[41670-41691]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[41644-41687]:ExpressionStatement[41718-41761]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[41749-41851]:IfStatement[41823-41925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41777-41851]:Block[41851-41925]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, true);",
      "right" : "return _handleInvalidNumberStart(c, true);",
      "info" : "ReturnStatement[41795-41837]:ReturnStatement[41869-41911]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[41952-42021]:IfStatement[42026-42095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41968-42021]:Block[42042-42095]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[41982-42011]:ExpressionStatement[42056-42085]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[42096-42124]:ExpressionStatement[42170-42198]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[42133-42148]:VariableDeclarationStatement[42207-42222]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length;",
      "right" : "int end = _inputPtr + outBuf.length;",
      "info" : "VariableDeclarationStatement[42233-42269]:VariableDeclarationStatement[42307-42343]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[42278-42339]:IfStatement[42352-42413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42299-42339]:Block[42373-42413]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[42313-42329]:ExpressionStatement[42387-42403]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[42402-42957]:WhileStatement[42476-43031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42415-42957]:Block[42489-43031]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[42429-42603]:IfStatement[42503-42677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42451-42603]:Block[42525-42677]"
    }, {
      "left" : "return _parserNumber2(outBuf, outPtr, negative, intLen);",
      "right" : "return _parserNumber2(outBuf, outPtr, negative, intLen);",
      "info" : "ReturnStatement[42533-42589]:ReturnStatement[42607-42663]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[42616-42659]:ExpressionStatement[42690-42733]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[42672-42738]:IfStatement[42746-42812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42700-42738]:Block[42774-42812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42718-42724]:BreakStatement[42792-42798]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[42751-42760]:ExpressionStatement[42825-42834]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[42773-42906]:IfStatement[42847-42980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42802-42906]:Block[42876-42980]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[42820-42864]:ExpressionStatement[42894-42938]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[42881-42892]:ExpressionStatement[42955-42966]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[42919-42947]:ExpressionStatement[42993-43021]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[42966-43084]:IfStatement[43040-43158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43004-43084]:Block[43078-43158]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intLen);",
      "info" : "ReturnStatement[43018-43074]:ReturnStatement[43092-43148]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[43102-43114]:ExpressionStatement[43176-43188]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[43165-43202]:ExpressionStatement[43239-43276]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[43289-43363]:IfStatement[43363-43437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43319-43363]:Block[43393-43437]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[43333-43353]:ExpressionStatement[43407-43427]"
    }, {
      "left" : "return resetInt(negative, intLen);",
      "right" : "return resetInt(negative, intLen);",
      "info" : "ReturnStatement[43406-43440]:ReturnStatement[43480-43514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43779-44939]:Block[43853-45013]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[43819-44539]:WhileStatement[43893-44613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43832-44539]:Block[43906-44613]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[43846-44016]:IfStatement[43920-44090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43889-44016]:Block[43963-44090]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[43907-43944]:ExpressionStatement[43981-44018]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[43961-44002]:ReturnStatement[44035-44076]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[44029-44076]:VariableDeclarationStatement[44103-44150]"
    }, {
      "left" : "if (c > INT_9 || c < INT_0)",
      "right" : "if (c > INT_9 || c < INT_0)",
      "info" : "IfStatement[44089-44313]:IfStatement[44163-44387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44117-44313]:Block[44191-44387]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[44135-44276]:IfStatement[44209-44350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44173-44276]:Block[44247-44350]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "info" : "ReturnStatement[44195-44258]:ReturnStatement[44269-44332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44293-44299]:BreakStatement[44367-44373]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[44326-44459]:IfStatement[44400-44533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44355-44459]:Block[44429-44533]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[44373-44417]:ExpressionStatement[44447-44491]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[44434-44445]:ExpressionStatement[44508-44519]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[44472-44500]:ExpressionStatement[44546-44574]"
    }, {
      "left" : "++intPartLength;",
      "right" : "++intPartLength;",
      "info" : "ExpressionStatement[44513-44529]:ExpressionStatement[44587-44603]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[44548-44560]:ExpressionStatement[44622-44634]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[44611-44648]:ExpressionStatement[44685-44722]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[44735-44840]:IfStatement[44809-44914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44765-44840]:Block[44839-44914]"
    }, {
      "left" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "right" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "info" : "ExpressionStatement[44779-44830]:ExpressionStatement[44853-44904]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[44883-44924]:ReturnStatement[44957-44998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45164-46363]:Block[45238-46437]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[45206-45286]:IfStatement[45280-45360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45249-45286]:Block[45323-45360]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[45263-45276]:ReturnStatement[45337-45350]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[45295-45335]:VariableDeclarationStatement[45369-45409]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[45433-45500]:IfStatement[45507-45574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45463-45500]:Block[45537-45574]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[45477-45490]:ReturnStatement[45551-45564]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[45575-45702]:IfStatement[45649-45776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45628-45702]:Block[45702-45776]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[45642-45692]:ExpressionStatement[45716-45766]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[45821-45833]:ExpressionStatement[45895-45907]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[45872-46338]:IfStatement[45946-46412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45889-46338]:Block[45963-46412]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[45903-46328]:WhileStatement[45977-46402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45947-46328]:Block[46021-46402]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[45965-46001]:ExpressionStatement[46039-46075]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[46018-46144]:IfStatement[46092-46218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46048-46144]:Block[46122-46218]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[46113-46126]:ReturnStatement[46187-46200]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[46161-46173]:ExpressionStatement[46235-46247]"
    }, {
      "left" : "if (ch != INT_0)",
      "right" : "if (ch != INT_0)",
      "info" : "IfStatement[46214-46314]:IfStatement[46288-46388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46231-46314]:Block[46305-46388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46290-46296]:BreakStatement[46364-46370]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[46347-46357]:ReturnStatement[46421-46431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46547-49739]:Block[46621-49813]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[46557-46574]:VariableDeclarationStatement[46631-46648]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[46583-46603]:VariableDeclarationStatement[46657-46677]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[46659-47554]:IfStatement[46733-47628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46673-47554]:Block[46747-47628]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[46704-46732]:ExpressionStatement[46778-46806]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "info" : "LabeledStatement[46746-47344]:LabeledStatement[46820-47418]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[46770-47344]:WhileStatement[46844-47418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46783-47344]:Block[46857-47418]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[46801-46933]:IfStatement[46875-47007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46844-46933]:Block[46918-47007]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[46866-46877]:ExpressionStatement[46940-46951]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[46898-46915]:BreakStatement[46972-46989]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[46950-46993]:ExpressionStatement[47024-47067]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[47010-47095]:IfStatement[47084-47169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47038-47095]:Block[47112-47169]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[47060-47077]:BreakStatement[47134-47151]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[47112-47123]:ExpressionStatement[47186-47197]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47140-47285]:IfStatement[47214-47359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47169-47285]:Block[47243-47359]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47191-47235]:ExpressionStatement[47265-47309]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47256-47267]:ExpressionStatement[47330-47341]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47302-47330]:ExpressionStatement[47376-47404]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[47422-47544]:IfStatement[47496-47618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47441-47544]:Block[47515-47618]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[47459-47530]:ExpressionStatement[47533-47604]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[47564-47579]:VariableDeclarationStatement[47638-47653]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[47588-49270]:IfStatement[47662-49344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47614-49270]:Block[47688-49344]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47641-47774]:IfStatement[47715-47848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47670-47774]:Block[47744-47848]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47688-47732]:ExpressionStatement[47762-47806]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47749-47760]:ExpressionStatement[47823-47834]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47787-47815]:ExpressionStatement[47861-47889]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[47895-47976]:IfStatement[47969-48050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47923-47976]:Block[47997-48050]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[47941-47962]:ExpressionStatement[48015-48036]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[47989-48032]:ExpressionStatement[48063-48106]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[48076-48533]:IfStatement[48150-48607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48102-48533]:Block[48176-48607]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48120-48265]:IfStatement[48194-48339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48149-48265]:Block[48223-48339]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48171-48215]:ExpressionStatement[48245-48289]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[48236-48247]:ExpressionStatement[48310-48321]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[48282-48310]:ExpressionStatement[48356-48384]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[48370-48459]:IfStatement[48444-48533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48398-48459]:Block[48472-48533]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[48420-48441]:ExpressionStatement[48494-48515]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[48476-48519]:ExpressionStatement[48550-48593]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[48547-49057]:LabeledStatement[48621-49131]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[48569-49057]:WhileStatement[48643-49131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48602-49057]:Block[48676-49131]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[48620-48629]:ExpressionStatement[48694-48703]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48646-48791]:IfStatement[48720-48865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48675-48791]:Block[48749-48865]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48697-48741]:ExpressionStatement[48771-48815]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[48762-48773]:ExpressionStatement[48836-48847]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[48808-48836]:ExpressionStatement[48882-48910]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[48853-48983]:IfStatement[48927-49057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48896-48983]:Block[48970-49057]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[48918-48929]:ExpressionStatement[48992-49003]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[48950-48965]:BreakStatement[49024-49039]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[49000-49043]:ExpressionStatement[49074-49117]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[49135-49260]:IfStatement[49209-49334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49152-49260]:Block[49226-49334]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[49170-49246]:ExpressionStatement[49244-49320]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[49356-49579]:IfStatement[49430-49653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49366-49579]:Block[49440-49653]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[49380-49392]:ExpressionStatement[49454-49466]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[49487-49569]:IfStatement[49561-49643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49517-49569]:Block[49591-49643]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[49535-49555]:ExpressionStatement[49609-49629]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[49588-49625]:ExpressionStatement[49662-49699]"
    }, {
      "left" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "right" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "info" : "ReturnStatement[49668-49733]:ReturnStatement[49742-49807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50057-50506]:Block[50131-50580]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[50127-50139]:ExpressionStatement[50201-50213]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[50212-50466]:SwitchStatement[50286-50540]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[50234-50243]:SwitchCase[50308-50317]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[50252-50262]:SwitchCase[50326-50336]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50275-50282]:ReturnStatement[50349-50356]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[50291-50301]:SwitchCase[50365-50375]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[50314-50324]:ExpressionStatement[50388-50398]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50337-50344]:ReturnStatement[50411-50418]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[50353-50363]:SwitchCase[50427-50437]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[50376-50392]:ExpressionStatement[50450-50466]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[50405-50436]:ExpressionStatement[50479-50510]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50449-50456]:ReturnStatement[50523-50530]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[50475-50500]:ExpressionStatement[50549-50574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50759-53099]:Block[50833-53173]"
    }, {
      "left" : "if (i != INT_QUOTE)",
      "right" : "if (i != INT_QUOTE)",
      "info" : "IfStatement[50769-50838]:IfStatement[50843-50912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50789-50838]:Block[50863-50912]"
    }, {
      "left" : "return _handleOddName(i);",
      "right" : "return _handleOddName(i);",
      "info" : "ReturnStatement[50803-50828]:ReturnStatement[50877-50902]"
    }, {
      "left" : "if ((_inputPtr + 9) > _inputEnd)",
      "right" : "if ((_inputPtr + 9) > _inputEnd)",
      "info" : "IfStatement[50900-51023]:IfStatement[50974-51097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50933-51023]:Block[51007-51097]"
    }, {
      "left" : "return slowParseName();",
      "right" : "return slowParseName();",
      "info" : "ReturnStatement[50990-51013]:ReturnStatement[51064-51087]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[51357-51391]:VariableDeclarationStatement[51431-51465]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[51400-51430]:VariableDeclarationStatement[51474-51504]"
    }, {
      "left" : "int q = input[_inputPtr++] & 0xFF;",
      "right" : "int q = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[51440-51474]:VariableDeclarationStatement[51514-51548]"
    }, {
      "left" : "if (codes[q] == 0)",
      "right" : "if (codes[q] == 0)",
      "info" : "IfStatement[51484-52906]:IfStatement[51558-52980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51503-52906]:Block[51577-52980]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[51517-51547]:ExpressionStatement[51591-51621]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[51560-52738]:IfStatement[51634-52812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51579-52738]:Block[51653-52812]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[51597-51614]:ExpressionStatement[51671-51688]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[51631-51661]:ExpressionStatement[51705-51735]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[51678-52534]:IfStatement[51752-52608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51697-52534]:Block[51771-52608]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[51719-51736]:ExpressionStatement[51793-51810]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[51757-51787]:ExpressionStatement[51831-51861]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[51808-52326]:IfStatement[51882-52400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51827-52326]:Block[51901-52400]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[51853-51870]:ExpressionStatement[51927-51944]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[51895-51925]:ExpressionStatement[51969-51999]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[51950-52098]:IfStatement[52024-52172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51969-52098]:Block[52043-52172]"
    }, {
      "left" : "_quad1 = q;",
      "right" : "_quad1 = q;",
      "info" : "ExpressionStatement[51999-52010]:ExpressionStatement[52073-52084]"
    }, {
      "left" : "return parseMediumName(i, codes);",
      "right" : "return parseMediumName(i, codes);",
      "info" : "ReturnStatement[52039-52072]:ReturnStatement[52113-52146]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52123-52253]:IfStatement[52197-52327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52143-52253]:Block[52217-52327]"
    }, {
      "left" : "return findName(q, 4);",
      "right" : "return findName(q, 4);",
      "info" : "ReturnStatement[52205-52227]:ReturnStatement[52279-52301]"
    }, {
      "left" : "return parseName(q, i, 4);",
      "right" : "return parseName(q, i, 4);",
      "info" : "ReturnStatement[52278-52304]:ReturnStatement[52352-52378]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52347-52469]:IfStatement[52421-52543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52367-52469]:Block[52441-52543]"
    }, {
      "left" : "return findName(q, 3);",
      "right" : "return findName(q, 3);",
      "info" : "ReturnStatement[52425-52447]:ReturnStatement[52499-52521]"
    }, {
      "left" : "return parseName(q, i, 3);",
      "right" : "return parseName(q, i, 3);",
      "info" : "ReturnStatement[52490-52516]:ReturnStatement[52564-52590]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52567-52681]:IfStatement[52641-52755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52587-52681]:Block[52661-52755]"
    }, {
      "left" : "return findName(q, 2);",
      "right" : "return findName(q, 2);",
      "info" : "ReturnStatement[52641-52663]:ReturnStatement[52715-52737]"
    }, {
      "left" : "return parseName(q, i, 2);",
      "right" : "return parseName(q, i, 2);",
      "info" : "ReturnStatement[52698-52724]:ReturnStatement[52772-52798]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52751-52857]:IfStatement[52825-52931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52771-52857]:Block[52845-52931]"
    }, {
      "left" : "return findName(q, 1);",
      "right" : "return findName(q, 1);",
      "info" : "ReturnStatement[52821-52843]:ReturnStatement[52895-52917]"
    }, {
      "left" : "return parseName(q, i, 1);",
      "right" : "return parseName(q, i, 1);",
      "info" : "ReturnStatement[52870-52896]:ReturnStatement[52944-52970]"
    }, {
      "left" : "if (q == INT_QUOTE)",
      "right" : "if (q == INT_QUOTE)",
      "info" : "IfStatement[52920-53031]:IfStatement[52994-53105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52940-53031]:Block[53014-53105]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[52974-53021]:ReturnStatement[53048-53095]"
    }, {
      "left" : "return parseName(0, q, 0);",
      "right" : "return parseName(0, q, 0);",
      "info" : "ReturnStatement[53040-53066]:ReturnStatement[53114-53140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53186-54402]:Block[53260-54476]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[53235-53276]:VariableDeclarationStatement[53309-53350]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[53285-53497]:IfStatement[53359-53571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53304-53497]:Block[53378-53571]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[53318-53412]:IfStatement[53392-53486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53338-53412]:Block[53412-53486]"
    }, {
      "left" : "return findName(_quad1, q2, 1);",
      "right" : "return findName(_quad1, q2, 1);",
      "info" : "ReturnStatement[53367-53398]:ReturnStatement[53441-53472]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 1);",
      "right" : "return parseName(_quad1, q2, i, 1);",
      "info" : "ReturnStatement[53425-53460]:ReturnStatement[53499-53534]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[53506-53525]:ExpressionStatement[53580-53599]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53534-53571]:ExpressionStatement[53608-53645]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[53580-53765]:IfStatement[53654-53839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53599-53765]:Block[53673-53839]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[53613-53707]:IfStatement[53687-53781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53633-53707]:Block[53707-53781]"
    }, {
      "left" : "return findName(_quad1, q2, 2);",
      "right" : "return findName(_quad1, q2, 2);",
      "info" : "ReturnStatement[53662-53693]:ReturnStatement[53736-53767]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 2);",
      "right" : "return parseName(_quad1, q2, i, 2);",
      "info" : "ReturnStatement[53720-53755]:ReturnStatement[53794-53829]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[53774-53793]:ExpressionStatement[53848-53867]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53802-53839]:ExpressionStatement[53876-53913]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[53848-54033]:IfStatement[53922-54107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53867-54033]:Block[53941-54107]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[53881-53975]:IfStatement[53955-54049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53901-53975]:Block[53975-54049]"
    }, {
      "left" : "return findName(_quad1, q2, 3);",
      "right" : "return findName(_quad1, q2, 3);",
      "info" : "ReturnStatement[53930-53961]:ReturnStatement[54004-54035]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 3);",
      "right" : "return parseName(_quad1, q2, i, 3);",
      "info" : "ReturnStatement[53988-54023]:ReturnStatement[54062-54097]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[54042-54061]:ExpressionStatement[54116-54135]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[54070-54107]:ExpressionStatement[54144-54181]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[54116-54301]:IfStatement[54190-54375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54135-54301]:Block[54209-54375]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[54149-54243]:IfStatement[54223-54317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54169-54243]:Block[54243-54317]"
    }, {
      "left" : "return findName(_quad1, q2, 4);",
      "right" : "return findName(_quad1, q2, 4);",
      "info" : "ReturnStatement[54198-54229]:ReturnStatement[54272-54303]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 4);",
      "right" : "return parseName(_quad1, q2, i, 4);",
      "info" : "ReturnStatement[54256-54291]:ReturnStatement[54330-54365]"
    }, {
      "left" : "_quadBuffer[0] = _quad1;",
      "right" : "_quadBuffer[0] = _quad1;",
      "info" : "ExpressionStatement[54310-54334]:ExpressionStatement[54384-54408]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[54343-54363]:ExpressionStatement[54417-54437]"
    }, {
      "left" : "return parseLongName(i);",
      "right" : "return parseLongName(i);",
      "info" : "ReturnStatement[54372-54396]:ReturnStatement[54446-54470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54467-56525]:Block[54541-56599]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[54549-54579]:VariableDeclarationStatement[54623-54653]"
    }, {
      "left" : "int qlen = 2;",
      "right" : "int qlen = 2;",
      "info" : "VariableDeclarationStatement[54588-54601]:VariableDeclarationStatement[54662-54675]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[54611-56519]:WhileStatement[54685-56593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54624-56519]:Block[54698-56593]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) < 4)",
      "right" : "if ((_inputEnd - _inputPtr) < 4)",
      "info" : "IfStatement[54843-54960]:IfStatement[54917-55034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54876-54960]:Block[54950-55034]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "info" : "ReturnStatement[54894-54946]:ReturnStatement[54968-55020]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[55044-55085]:VariableDeclarationStatement[55118-55159]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[55098-55319]:IfStatement[55172-55393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55117-55319]:Block[55191-55393]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[55135-55236]:IfStatement[55209-55310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55155-55236]:Block[55229-55310]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 1);",
      "right" : "return findName(_quadBuffer, qlen, q, 1);",
      "info" : "ReturnStatement[55177-55218]:ReturnStatement[55251-55292]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "info" : "ReturnStatement[55253-55305]:ReturnStatement[55327-55379]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[55333-55350]:ExpressionStatement[55407-55424]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[55363-55400]:ExpressionStatement[55437-55474]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[55413-55634]:IfStatement[55487-55708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55432-55634]:Block[55506-55708]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[55450-55551]:IfStatement[55524-55625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55470-55551]:Block[55544-55625]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 2);",
      "right" : "return findName(_quadBuffer, qlen, q, 2);",
      "info" : "ReturnStatement[55492-55533]:ReturnStatement[55566-55607]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "info" : "ReturnStatement[55568-55620]:ReturnStatement[55642-55694]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[55648-55665]:ExpressionStatement[55722-55739]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[55678-55715]:ExpressionStatement[55752-55789]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[55728-55949]:IfStatement[55802-56023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55747-55949]:Block[55821-56023]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[55765-55866]:IfStatement[55839-55940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55785-55866]:Block[55859-55940]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 3);",
      "right" : "return findName(_quadBuffer, qlen, q, 3);",
      "info" : "ReturnStatement[55807-55848]:ReturnStatement[55881-55922]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "info" : "ReturnStatement[55883-55935]:ReturnStatement[55957-56009]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[55963-55980]:ExpressionStatement[56037-56054]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[55993-56030]:ExpressionStatement[56067-56104]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[56043-56264]:IfStatement[56117-56338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56062-56264]:Block[56136-56338]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[56080-56181]:IfStatement[56154-56255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56100-56181]:Block[56174-56255]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 4);",
      "right" : "return findName(_quadBuffer, qlen, q, 4);",
      "info" : "ReturnStatement[56122-56163]:ReturnStatement[56196-56237]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "info" : "ReturnStatement[56198-56250]:ReturnStatement[56272-56324]"
    }, {
      "left" : "if (qlen >= _quadBuffer.length)",
      "right" : "if (qlen >= _quadBuffer.length)",
      "info" : "IfStatement[56344-56453]:IfStatement[56418-56527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56376-56453]:Block[56450-56527]"
    }, {
      "left" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "right" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "info" : "ExpressionStatement[56394-56439]:ExpressionStatement[56468-56513]"
    }, {
      "left" : "_quadBuffer[qlen++] = q;",
      "right" : "_quadBuffer[qlen++] = q;",
      "info" : "ExpressionStatement[56466-56490]:ExpressionStatement[56540-56564]"
    }, {
      "left" : "q = i;",
      "right" : "q = i;",
      "info" : "ExpressionStatement[56503-56509]:ExpressionStatement[56577-56583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56788-57192]:Block[56862-57266]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[56798-56958]:IfStatement[56872-57032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56826-56958]:Block[56900-57032]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[56840-56948]:IfStatement[56914-57022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56857-56948]:Block[56931-57022]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "info" : "ExpressionStatement[56875-56934]:ExpressionStatement[56949-57008]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[56967-57008]:VariableDeclarationStatement[57041-57082]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57017-57128]:IfStatement[57091-57202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57037-57128]:Block[57111-57202]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[57071-57118]:ReturnStatement[57145-57192]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "right" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "info" : "ReturnStatement[57137-57186]:ReturnStatement[57211-57260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57285-57364]:Block[57359-57438]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "info" : "ReturnStatement[57295-57358]:ReturnStatement[57369-57432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57465-57573]:Block[57539-57647]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[57475-57495]:ExpressionStatement[57549-57569]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "info" : "ReturnStatement[57504-57567]:ReturnStatement[57578-57641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58046-61823]:Block[58120-61897]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[58333-58363]:VariableDeclarationStatement[58407-58437]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[58373-61442]:WhileStatement[58447-61516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58386-61442]:Block[58460-61516]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[58400-60754]:IfStatement[58474-60828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58420-60754]:Block[58494-60828]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[58438-58520]:IfStatement[58512-58594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58459-58520]:Block[58533-58594]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58496-58502]:BreakStatement[58570-58576]"
    }, {
      "left" : "if (ch != INT_BACKSLASH)",
      "right" : "if (ch != INT_BACKSLASH)",
      "info" : "IfStatement[58578-58854]:IfStatement[58652-58928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58603-58741]:Block[58677-58815]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[58691-58723]:ExpressionStatement[58765-58797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58747-58854]:Block[58821-58928]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[58814-58836]:ExpressionStatement[58888-58910]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[59149-60740]:IfStatement[59223-60814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59163-60740]:Block[59237-60814]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[59254-59594]:IfStatement[59328-59668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59278-59594]:Block[59352-59668]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[59304-59441]:IfStatement[59378-59515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59330-59441]:Block[59404-59515]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[59360-59415]:ExpressionStatement[59434-59489]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[59466-59491]:ExpressionStatement[59540-59565]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[59516-59529]:ExpressionStatement[59590-59603]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[59554-59572]:ExpressionStatement[59628-59646]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[59615-60601]:IfStatement[59689-60675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59631-59836]:Block[59705-59910]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[59667-59715]:ExpressionStatement[59741-59789]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[59740-59756]:ExpressionStatement[59814-59830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59842-60601]:Block[59916-60675]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[59919-59968]:ExpressionStatement[59993-60042]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[59993-60009]:ExpressionStatement[60067-60083]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[60088-60456]:IfStatement[60162-60530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60112-60456]:Block[60186-60530]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[60142-60287]:IfStatement[60216-60361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60168-60287]:Block[60242-60361]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[60202-60257]:ExpressionStatement[60276-60331]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[60316-60341]:ExpressionStatement[60390-60415]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[60370-60383]:ExpressionStatement[60444-60457]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[60412-60430]:ExpressionStatement[60486-60504]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[60481-60538]:ExpressionStatement[60555-60612]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[60563-60579]:ExpressionStatement[60637-60653]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[60698-60722]:ExpressionStatement[60772-60796]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[60828-61215]:IfStatement[60902-61289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60851-60948]:Block[60925-61022]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[60869-60885]:ExpressionStatement[60943-60959]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[60902-60934]:ExpressionStatement[60976-61008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60954-61215]:Block[61028-61289]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[60972-61093]:IfStatement[61046-61167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60998-61093]:Block[61072-61167]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[61020-61075]:ExpressionStatement[61094-61149]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[61110-61135]:ExpressionStatement[61184-61209]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[61152-61166]:ExpressionStatement[61226-61240]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[61183-61201]:ExpressionStatement[61257-61275]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[61228-61381]:IfStatement[61302-61455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61256-61381]:Block[61330-61455]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[61274-61367]:IfStatement[61348-61441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61291-61367]:Block[61365-61441]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[61313-61349]:ExpressionStatement[61387-61423]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[61394-61432]:ExpressionStatement[61468-61506]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[61452-61650]:IfStatement[61526-61724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61475-61650]:Block[61549-61724]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[61489-61602]:IfStatement[61563-61676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61515-61602]:Block[61589-61676]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[61533-61588]:ExpressionStatement[61607-61662]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[61615-61640]:ExpressionStatement[61689-61714]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[61659-61702]:VariableDeclarationStatement[61733-61776]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[61711-61796]:IfStatement[61785-61870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61729-61796]:Block[61803-61870]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[61743-61786]:ExpressionStatement[61817-61860]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[61805-61817]:ReturnStatement[61879-61891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62140-64561]:Block[62214-64635]"
    }, {
      "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[62196-62302]:IfStatement[62270-62376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62254-62302]:Block[62328-62376]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[62268-62292]:ReturnStatement[62342-62366]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[62377-62529]:IfStatement[62451-62603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62429-62529]:Block[62503-62603]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[62443-62519]:ExpressionStatement[62517-62593]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "info" : "VariableDeclarationStatement[62745-62801]:VariableDeclarationStatement[62819-62875]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[62864-63048]:IfStatement[62938-63122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62884-63048]:Block[62958-63122]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[62898-63038]:ExpressionStatement[62972-63112]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[63269-63295]:VariableDeclarationStatement[63343-63369]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[63304-63317]:VariableDeclarationStatement[63378-63391]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[63326-63343]:VariableDeclarationStatement[63400-63417]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[63352-63374]:VariableDeclarationStatement[63426-63448]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[63384-64180]:WhileStatement[63458-64254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63397-64180]:Block[63471-64254]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[63472-63859]:IfStatement[63546-63933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63495-63592]:Block[63569-63666]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[63513-63529]:ExpressionStatement[63587-63603]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[63546-63578]:ExpressionStatement[63620-63652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63598-63859]:Block[63672-63933]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[63616-63737]:IfStatement[63690-63811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63642-63737]:Block[63716-63811]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[63664-63719]:ExpressionStatement[63738-63793]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[63754-63779]:ExpressionStatement[63828-63853]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[63796-63810]:ExpressionStatement[63870-63884]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[63827-63845]:ExpressionStatement[63901-63919]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[63872-64025]:IfStatement[63946-64099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63900-64025]:Block[63974-64099]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63918-64011]:IfStatement[63992-64085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63935-64011]:Block[64009-64085]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[63957-63993]:ExpressionStatement[64031-64067]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[64038-64074]:ExpressionStatement[64112-64148]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[64087-64145]:IfStatement[64161-64219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64107-64145]:Block[64181-64219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64125-64131]:BreakStatement[64199-64205]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[64158-64170]:ExpressionStatement[64232-64244]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[64190-64388]:IfStatement[64264-64462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64213-64388]:Block[64287-64462]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[64227-64340]:IfStatement[64301-64414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64253-64340]:Block[64327-64414]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[64271-64326]:ExpressionStatement[64345-64400]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[64353-64378]:ExpressionStatement[64427-64452]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[64397-64440]:VariableDeclarationStatement[64471-64514]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[64449-64534]:IfStatement[64523-64608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64467-64534]:Block[64541-64608]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[64481-64524]:ExpressionStatement[64555-64598]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[64543-64555]:ReturnStatement[64617-64629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64856-68913]:Block[64930-68987]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[64866-65026]:IfStatement[64940-65100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64894-65026]:Block[64968-65100]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[64908-65016]:IfStatement[64982-65090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64925-65016]:Block[64999-65090]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "info" : "ExpressionStatement[64943-65002]:ExpressionStatement[65017-65076]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[65035-65077]:VariableDeclarationStatement[65109-65151]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[65086-65193]:IfStatement[65160-65267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65102-65193]:Block[65176-65267]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[65136-65183]:ReturnStatement[65210-65257]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[65202-65228]:VariableDeclarationStatement[65276-65302]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[65237-65250]:VariableDeclarationStatement[65311-65324]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[65259-65276]:VariableDeclarationStatement[65333-65350]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[65285-65307]:VariableDeclarationStatement[65359-65381]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[65381-65411]:VariableDeclarationStatement[65455-65485]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[65421-68532]:WhileStatement[65495-68606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65434-68532]:Block[65508-68606]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[65448-65502]:IfStatement[65522-65576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65464-65502]:Block[65538-65576]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65482-65488]:BreakStatement[65556-65562]"
    }, {
      "left" : "if (ch != '\"' && codes[ch] != 0)",
      "right" : "if (ch != '\"' && codes[ch] != 0)",
      "info" : "IfStatement[65581-67844]:IfStatement[65655-67918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65614-67844]:Block[65688-67918]"
    }, {
      "left" : "if (ch != '\\\\')",
      "right" : "if (ch != '\\\\')",
      "info" : "IfStatement[65632-65944]:IfStatement[65706-66018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65648-65831]:Block[65722-65905]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[65781-65813]:ExpressionStatement[65855-65887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65837-65944]:Block[65911-66018]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[65904-65926]:ExpressionStatement[65978-66000]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[66239-67830]:IfStatement[66313-67904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66253-67830]:Block[66327-67904]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[66344-66684]:IfStatement[66418-66758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66368-66684]:Block[66442-66758]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[66394-66531]:IfStatement[66468-66605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66420-66531]:Block[66494-66605]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[66450-66505]:ExpressionStatement[66524-66579]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[66556-66581]:ExpressionStatement[66630-66655]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[66606-66619]:ExpressionStatement[66680-66693]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[66644-66662]:ExpressionStatement[66718-66736]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[66705-67691]:IfStatement[66779-67765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66721-66926]:Block[66795-67000]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[66757-66805]:ExpressionStatement[66831-66879]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66830-66846]:ExpressionStatement[66904-66920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66932-67691]:Block[67006-67765]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[67009-67058]:ExpressionStatement[67083-67132]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67083-67099]:ExpressionStatement[67157-67173]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[67178-67546]:IfStatement[67252-67620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67202-67546]:Block[67276-67620]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[67232-67377]:IfStatement[67306-67451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67258-67377]:Block[67332-67451]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[67292-67347]:ExpressionStatement[67366-67421]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[67406-67431]:ExpressionStatement[67480-67505]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[67460-67473]:ExpressionStatement[67534-67547]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[67502-67520]:ExpressionStatement[67576-67594]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[67571-67628]:ExpressionStatement[67645-67702]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67653-67669]:ExpressionStatement[67727-67743]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[67788-67812]:ExpressionStatement[67862-67886]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[67918-68305]:IfStatement[67992-68379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67941-68038]:Block[68015-68112]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67959-67975]:ExpressionStatement[68033-68049]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[67992-68024]:ExpressionStatement[68066-68098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68044-68305]:Block[68118-68379]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[68062-68183]:IfStatement[68136-68257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68088-68183]:Block[68162-68257]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[68110-68165]:ExpressionStatement[68184-68239]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[68200-68225]:ExpressionStatement[68274-68299]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[68242-68256]:ExpressionStatement[68316-68330]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[68273-68291]:ExpressionStatement[68347-68365]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[68318-68471]:IfStatement[68392-68545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68346-68471]:Block[68420-68545]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[68364-68457]:IfStatement[68438-68531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68381-68457]:Block[68455-68531]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[68403-68439]:ExpressionStatement[68477-68513]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[68484-68522]:ExpressionStatement[68558-68596]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[68542-68740]:IfStatement[68616-68814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68565-68740]:Block[68639-68814]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[68579-68692]:IfStatement[68653-68766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68605-68692]:Block[68679-68766]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[68623-68678]:ExpressionStatement[68697-68752]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[68705-68730]:ExpressionStatement[68779-68804]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[68749-68792]:VariableDeclarationStatement[68823-68866]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[68801-68886]:IfStatement[68875-68960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68819-68886]:Block[68893-68960]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[68833-68876]:ExpressionStatement[68907-68950]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[68895-68907]:ReturnStatement[68969-68981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69204-69535]:Block[69278-69609]"
    }, {
      "left" : "Name name = _symbols.findName(q1);",
      "right" : "Name name = _symbols.findName(q1);",
      "info" : "VariableDeclarationStatement[69287-69321]:VariableDeclarationStatement[69361-69395]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[69330-69384]:IfStatement[69404-69458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69348-69384]:Block[69422-69458]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[69362-69374]:ReturnStatement[69436-69448]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[69454-69474]:ExpressionStatement[69528-69548]"
    }, {
      "left" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "info" : "ReturnStatement[69483-69529]:ReturnStatement[69557-69603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69642-70006]:Block[69716-70080]"
    }, {
      "left" : "Name name = _symbols.findName(q1, q2);",
      "right" : "Name name = _symbols.findName(q1, q2);",
      "info" : "VariableDeclarationStatement[69725-69763]:VariableDeclarationStatement[69799-69837]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[69772-69826]:IfStatement[69846-69900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69790-69826]:Block[69864-69900]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[69804-69816]:ReturnStatement[69878-69890]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[69896-69916]:ExpressionStatement[69970-69990]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[69925-69945]:ExpressionStatement[69999-70019]"
    }, {
      "left" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "info" : "ReturnStatement[69954-70000]:ReturnStatement[70028-70074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70134-70456]:Block[70208-70530]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[70144-70249]:IfStatement[70218-70323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70170-70249]:Block[70244-70323]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[70184-70239]:ExpressionStatement[70258-70313]"
    }, {
      "left" : "quads[qlen++] = lastQuad;",
      "right" : "quads[qlen++] = lastQuad;",
      "info" : "ExpressionStatement[70258-70283]:ExpressionStatement[70332-70357]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[70292-70335]:VariableDeclarationStatement[70366-70409]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[70344-70429]:IfStatement[70418-70503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70362-70429]:Block[70436-70503]"
    }, {
      "left" : "return addName(quads, qlen, lastQuadBytes);",
      "right" : "return addName(quads, qlen, lastQuadBytes);",
      "info" : "ReturnStatement[70376-70419]:ReturnStatement[70450-70493]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[70438-70450]:ReturnStatement[70512-70524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70827-75145]:Block[70901-75219]"
    }, {
      "left" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "right" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "info" : "VariableDeclarationStatement[71107-71153]:VariableDeclarationStatement[71181-71227]"
    }, {
      "left" : "int lastQuad;",
      "right" : "int lastQuad;",
      "info" : "VariableDeclarationStatement[71452-71465]:VariableDeclarationStatement[71526-71539]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[71475-71698]:IfStatement[71549-71772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71498-71655]:Block[71572-71729]"
    }, {
      "left" : "lastQuad = quads[qlen-1];",
      "right" : "lastQuad = quads[qlen-1];",
      "info" : "ExpressionStatement[71512-71537]:ExpressionStatement[71586-71611]"
    }, {
      "left" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "right" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "info" : "ExpressionStatement[71588-71645]:ExpressionStatement[71662-71719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71661-71698]:Block[71735-71772]"
    }, {
      "left" : "lastQuad = 0;",
      "right" : "lastQuad = 0;",
      "info" : "ExpressionStatement[71675-71688]:ExpressionStatement[71749-71762]"
    }, {
      "left" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[71767-71821]:VariableDeclarationStatement[71841-71895]"
    }, {
      "left" : "int cix = 0;",
      "right" : "int cix = 0;",
      "info" : "VariableDeclarationStatement[71830-71842]:VariableDeclarationStatement[71904-71916]"
    }, {
      "left" : "for (int ix = 0; ix < byteLen)",
      "right" : "for (int ix = 0; ix < byteLen)",
      "info" : "ForStatement[71852-74826]:ForStatement[71926-74900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71885-74826]:Block[71959-74900]"
    }, {
      "left" : "int ch = quads[ix >> 2];",
      "right" : "int ch = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[71899-71923]:VariableDeclarationStatement[71973-71997]"
    }, {
      "left" : "int byteIx = (ix & 3);",
      "right" : "int byteIx = (ix & 3);",
      "info" : "VariableDeclarationStatement[71972-71994]:VariableDeclarationStatement[72046-72068]"
    }, {
      "left" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "right" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "info" : "ExpressionStatement[72007-72047]:ExpressionStatement[72081-72121]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[72060-72065]:ExpressionStatement[72134-72139]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[72079-74668]:IfStatement[72153-74742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72093-74668]:Block[72167-74742]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[72125-72136]:VariableDeclarationStatement[72199-72210]"
    }, {
      "left" : "if ((ch & 0xE0) == 0xC0)",
      "right" : "if ((ch & 0xE0) == 0xC0)",
      "info" : "IfStatement[72153-72780]:IfStatement[72227-72854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72178-72290]:Block[72252-72364]"
    }, {
      "left" : "ch &= 0x1F;",
      "right" : "ch &= 0x1F;",
      "info" : "ExpressionStatement[72229-72240]:ExpressionStatement[72303-72314]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[72261-72272]:ExpressionStatement[72335-72346]"
    }, {
      "left" : "if ((ch & 0xF0) == 0xE0)",
      "right" : "if ((ch & 0xF0) == 0xE0)",
      "info" : "IfStatement[72296-72780]:IfStatement[72370-72854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72321-72433]:Block[72395-72507]"
    }, {
      "left" : "ch &= 0x0F;",
      "right" : "ch &= 0x0F;",
      "info" : "ExpressionStatement[72372-72383]:ExpressionStatement[72446-72457]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[72404-72415]:ExpressionStatement[72478-72489]"
    }, {
      "left" : "if ((ch & 0xF8) == 0xF0)",
      "right" : "if ((ch & 0xF8) == 0xF0)",
      "info" : "IfStatement[72439-72780]:IfStatement[72513-72854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72464-72598]:Block[72538-72672]"
    }, {
      "left" : "ch &= 0x07;",
      "right" : "ch &= 0x07;",
      "info" : "ExpressionStatement[72537-72548]:ExpressionStatement[72611-72622]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[72569-72580]:ExpressionStatement[72643-72654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72604-72780]:Block[72678-72854]"
    }, {
      "left" : "_reportInvalidInitial(ch);",
      "right" : "_reportInvalidInitial(ch);",
      "info" : "ExpressionStatement[72669-72695]:ExpressionStatement[72743-72769]"
    }, {
      "left" : "needed = ch = 1;",
      "right" : "needed = ch = 1;",
      "info" : "ExpressionStatement[72716-72732]:ExpressionStatement[72790-72806]"
    }, {
      "left" : "if ((ix + needed) > byteLen)",
      "right" : "if ((ix + needed) > byteLen)",
      "info" : "IfStatement[72797-72902]:IfStatement[72871-72976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72826-72902]:Block[72900-72976]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[72848-72884]:ExpressionStatement[72922-72958]"
    }, {
      "left" : "int ch2 = quads[ix >> 2];",
      "right" : "int ch2 = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[72990-73015]:VariableDeclarationStatement[73064-73089]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[73068-73086]:ExpressionStatement[73142-73160]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[73103-73138]:ExpressionStatement[73177-73212]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[73155-73160]:ExpressionStatement[73229-73234]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[73194-73286]:IfStatement[73268-73360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73221-73286]:Block[73295-73360]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[73243-73268]:ExpressionStatement[73317-73342]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[73303-73333]:ExpressionStatement[73377-73407]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[73350-74215]:IfStatement[73424-74289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73366-74215]:Block[73440-74289]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[73388-73409]:ExpressionStatement[73462-73483]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[73430-73448]:ExpressionStatement[73504-73522]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[73469-73504]:ExpressionStatement[73543-73578]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[73525-73530]:ExpressionStatement[73599-73604]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[73572-73672]:IfStatement[73646-73746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73599-73672]:Block[73673-73746]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[73625-73650]:ExpressionStatement[73699-73724]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[73693-73723]:ExpressionStatement[73767-73797]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[73744-74197]:IfStatement[73818-74271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73760-74197]:Block[73834-74271]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[73826-73847]:ExpressionStatement[73900-73921]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[73872-73890]:ExpressionStatement[73946-73964]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[73915-73950]:ExpressionStatement[73989-74024]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[73975-73980]:ExpressionStatement[74049-74054]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[74005-74120]:IfStatement[74079-74194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74032-74120]:Block[74106-74194]"
    }, {
      "left" : "_reportInvalidOther(ch2 & 0xFF);",
      "right" : "_reportInvalidOther(ch2 & 0xFF);",
      "info" : "ExpressionStatement[74062-74094]:ExpressionStatement[74136-74168]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[74145-74175]:ExpressionStatement[74219-74249]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[74232-74654]:IfStatement[74306-74728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74248-74654]:Block[74322-74728]"
    }, {
      "left" : "ch -= 0x10000;",
      "right" : "ch -= 0x10000;",
      "info" : "ExpressionStatement[74337-74351]:ExpressionStatement[74411-74425]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[74409-74523]:IfStatement[74483-74597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74433-74523]:Block[74507-74597]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[74459-74501]:ExpressionStatement[74533-74575]"
    }, {
      "left" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "right" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "info" : "ExpressionStatement[74544-74587]:ExpressionStatement[74618-74661]"
    }, {
      "left" : "ch = 0xDC00 | (ch & 0x03FF);",
      "right" : "ch = 0xDC00 | (ch & 0x03FF);",
      "info" : "ExpressionStatement[74608-74636]:ExpressionStatement[74682-74710]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[74681-74779]:IfStatement[74755-74853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74705-74779]:Block[74779-74853]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[74723-74765]:ExpressionStatement[74797-74839]"
    }, {
      "left" : "cbuf[cix++] = (char) ch;",
      "right" : "cbuf[cix++] = (char) ch;",
      "info" : "ExpressionStatement[74792-74816]:ExpressionStatement[74866-74890]"
    }, {
      "left" : "String baseName = new String(cbuf, 0, cix);",
      "right" : "String baseName = new String(cbuf, 0, cix);",
      "info" : "VariableDeclarationStatement[74913-74956]:VariableDeclarationStatement[74987-75030]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[75011-75083]:IfStatement[75085-75157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75034-75083]:Block[75108-75157]"
    }, {
      "left" : "quads[qlen-1] = lastQuad;",
      "right" : "quads[qlen-1] = lastQuad;",
      "info" : "ExpressionStatement[75048-75073]:ExpressionStatement[75122-75147]"
    }, {
      "left" : "return _symbols.addName(baseName, quads, qlen);",
      "right" : "return _symbols.addName(baseName, quads, qlen);",
      "info" : "ReturnStatement[75092-75139]:ReturnStatement[75166-75213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75409-76362]:Block[75483-76436]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[75522-75542]:VariableDeclarationStatement[75596-75616]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[75551-75647]:IfStatement[75625-75721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75573-75647]:Block[75647-75721]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[75587-75608]:ExpressionStatement[75661-75682]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[75621-75637]:ExpressionStatement[75695-75711]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[75656-75671]:VariableDeclarationStatement[75730-75745]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[75680-75736]:VariableDeclarationStatement[75754-75810]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[75745-75773]:VariableDeclarationStatement[75819-75847]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[75783-75842]:VariableDeclarationStatement[75857-75916]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[75851-75891]:VariableDeclarationStatement[75925-75965]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[75900-76291]:WhileStatement[75974-76365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75918-76291]:Block[75992-76365]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[75932-75970]:VariableDeclarationStatement[76006-76044]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[75983-76221]:IfStatement[76057-76295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76002-76221]:Block[76076-76295]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[76020-76184]:IfStatement[76094-76258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76040-76184]:Block[76114-76258]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[76062-76080]:ExpressionStatement[76136-76154]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[76101-76138]:ExpressionStatement[76175-76212]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[76159-76166]:ReturnStatement[76233-76240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76201-76207]:BreakStatement[76275-76281]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[76234-76240]:ExpressionStatement[76308-76314]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[76253-76281]:ExpressionStatement[76327-76355]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[76300-76316]:ExpressionStatement[76374-76390]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[76325-76356]:ExpressionStatement[76399-76430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76460-79283]:Block[76534-79357]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[76470-76476]:VariableDeclarationStatement[76544-76550]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[76541-76569]:VariableDeclarationStatement[76615-76643]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[76578-76618]:VariableDeclarationStatement[76652-76692]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[76628-79231]:LabeledStatement[76702-79305]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[76647-79231]:WhileStatement[76721-79305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76660-79231]:Block[76734-79305]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[76731-77545]:LabeledStatement[76805-77619]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[76755-77545]:WhileStatement[76829-77619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76768-77545]:Block[76842-77619]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[76786-76806]:VariableDeclarationStatement[76860-76880]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[76823-76943]:IfStatement[76897-77017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76845-76943]:Block[76919-77017]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[76867-76888]:ExpressionStatement[76941-76962]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[76909-76925]:ExpressionStatement[76983-76999]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[76960-77105]:IfStatement[77034-77179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76989-77105]:Block[77063-77179]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[77011-77055]:ExpressionStatement[77085-77129]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[77076-77087]:ExpressionStatement[77150-77161]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "info" : "VariableDeclarationStatement[77122-77192]:VariableDeclarationStatement[77196-77266]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[77209-77498]:WhileStatement[77283-77572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77227-77498]:Block[77301-77572]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[77249-77285]:ExpressionStatement[77323-77359]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[77306-77431]:IfStatement[77380-77505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77325-77431]:Block[77399-77505]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[77351-77367]:ExpressionStatement[77425-77441]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[77392-77409]:BreakStatement[77466-77483]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[77452-77480]:ExpressionStatement[77526-77554]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[77515-77531]:ExpressionStatement[77589-77605]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[77611-77679]:IfStatement[77685-77753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77631-77679]:Block[77705-77753]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[77649-77665]:BreakStatement[77723-77739]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[77693-78958]:SwitchStatement[77767-79032]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[77725-77732]:SwitchCase[77799-77806]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[77762-77783]:ExpressionStatement[77836-77857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77800-77806]:BreakStatement[77874-77880]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[77819-77826]:SwitchCase[77893-77900]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[77857-77878]:ExpressionStatement[77931-77952]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77895-77901]:BreakStatement[77969-77975]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[77914-77921]:SwitchCase[77988-77995]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[77952-78118]:IfStatement[78026-78192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77986-78051]:Block[78060-78125]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[78008-78033]:ExpressionStatement[78082-78107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78057-78118]:Block[78131-78192]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[78079-78100]:ExpressionStatement[78153-78174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[78135-78141]:BreakStatement[78209-78215]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[78154-78161]:SwitchCase[78228-78235]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[78192-78213]:ExpressionStatement[78266-78287]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[78282-78329]:ExpressionStatement[78356-78403]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[78346-78491]:IfStatement[78420-78565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78375-78491]:Block[78449-78565]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[78397-78441]:ExpressionStatement[78471-78515]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[78462-78473]:ExpressionStatement[78536-78547]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[78508-78533]:ExpressionStatement[78582-78607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[78610-78616]:BreakStatement[78684-78690]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[78629-78637]:SwitchCase[78703-78711]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[78654-78944]:IfStatement[78728-79018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78673-78818]:Block[78747-78892]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[78761-78800]:ExpressionStatement[78835-78874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78824-78944]:Block[78898-79018]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[78904-78926]:ExpressionStatement[78978-79000]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[79002-79135]:IfStatement[79076-79209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79031-79135]:Block[79105-79209]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[79049-79093]:ExpressionStatement[79123-79167]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[79110-79121]:ExpressionStatement[79184-79195]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[79193-79221]:ExpressionStatement[79267-79295]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[79240-79277]:ExpressionStatement[79314-79351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79538-81260]:Block[79612-81334]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[79548-79573]:ExpressionStatement[79622-79647]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[79629-79657]:VariableDeclarationStatement[79703-79731]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[79666-79706]:VariableDeclarationStatement[79740-79780]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "info" : "LabeledStatement[79716-81254]:LabeledStatement[79790-81328]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[79735-81254]:WhileStatement[79809-81328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79748-81254]:Block[79822-81328]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[79762-79768]:VariableDeclarationStatement[79836-79842]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[79782-80366]:LabeledStatement[79856-80440]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[79806-80366]:WhileStatement[79880-80440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79819-80366]:Block[79893-80440]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[79837-79857]:VariableDeclarationStatement[79911-79931]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[79874-79894]:VariableDeclarationStatement[79948-79968]"
    }, {
      "left" : "if (ptr >= max)",
      "right" : "if (ptr >= max)",
      "info" : "IfStatement[79911-80062]:IfStatement[79985-80136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79927-80062]:Block[80001-80136]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[79949-79970]:ExpressionStatement[80023-80044]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[79991-80007]:ExpressionStatement[80065-80081]"
    }, {
      "left" : "max = _inputEnd;",
      "right" : "max = _inputEnd;",
      "info" : "ExpressionStatement[80028-80044]:ExpressionStatement[80102-80118]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[80079-80319]:WhileStatement[80153-80393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80097-80319]:Block[80171-80393]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[80119-80155]:ExpressionStatement[80193-80229]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[80176-80301]:IfStatement[80250-80375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80195-80301]:Block[80269-80375]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[80221-80237]:ExpressionStatement[80295-80311]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[80262-80279]:BreakStatement[80336-80353]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[80336-80352]:ExpressionStatement[80410-80426]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[80432-80500]:IfStatement[80506-80574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80452-80500]:Block[80526-80574]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[80470-80486]:BreakStatement[80544-80560]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[80526-81244]:SwitchStatement[80600-81318]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[80558-80565]:SwitchCase[80632-80639]"
    }, {
      "left" : "_decodeEscaped();",
      "right" : "_decodeEscaped();",
      "info" : "ExpressionStatement[80595-80612]:ExpressionStatement[80669-80686]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80629-80635]:BreakStatement[80703-80709]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[80648-80655]:SwitchCase[80722-80729]"
    }, {
      "left" : "_skipUtf8_2(c);",
      "right" : "_skipUtf8_2(c);",
      "info" : "ExpressionStatement[80686-80701]:ExpressionStatement[80760-80775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80718-80724]:BreakStatement[80792-80798]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[80737-80744]:SwitchCase[80811-80818]"
    }, {
      "left" : "_skipUtf8_3(c);",
      "right" : "_skipUtf8_3(c);",
      "info" : "ExpressionStatement[80775-80790]:ExpressionStatement[80849-80864]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80807-80813]:BreakStatement[80881-80887]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[80826-80833]:SwitchCase[80900-80907]"
    }, {
      "left" : "_skipUtf8_4(c);",
      "right" : "_skipUtf8_4(c);",
      "info" : "ExpressionStatement[80864-80879]:ExpressionStatement[80938-80953]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80896-80902]:BreakStatement[80970-80976]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[80915-80923]:SwitchCase[80989-80997]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[80940-81230]:IfStatement[81014-81304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80959-81104]:Block[81033-81178]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[81047-81086]:ExpressionStatement[81121-81160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81110-81230]:Block[81184-81304]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[81190-81212]:ExpressionStatement[81264-81286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81502-83109]:Block[81576-83183]"
    }, {
      "left" : "switch (c) {\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "right" : "switch (c) {\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "info" : "SwitchStatement[81589-82722]:SwitchStatement[81663-82796]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[81610-81620]:SwitchCase[81684-81694]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[81633-81730]:IfStatement[81707-81804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81677-81730]:Block[81751-81804]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[81695-81716]:ReturnStatement[81769-81790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[81743-81749]:BreakStatement[81817-81823]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[81758-81767]:SwitchCase[81832-81841]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[81780-81802]:ExpressionStatement[81854-81876]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[81815-81934]:IfStatement[81889-82008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81865-81934]:Block[81939-82008]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[81883-81920]:ReturnStatement[81957-81994]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[81947-82050]:ExpressionStatement[82021-82124]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82063-82069]:BreakStatement[82137-82143]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[82078-82087]:SwitchCase[82152-82161]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[82100-82127]:ExpressionStatement[82174-82201]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[82140-82278]:IfStatement[82214-82352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82190-82278]:Block[82264-82352]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[82208-82264]:ReturnStatement[82282-82338]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[82291-82399]:ExpressionStatement[82365-82473]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82412-82418]:BreakStatement[82486-82492]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[82427-82436]:SwitchCase[82501-82510]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[82481-82625]:IfStatement[82555-82699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82509-82625]:Block[82583-82699]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[82527-82611]:IfStatement[82601-82685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82544-82611]:Block[82618-82685]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[82566-82593]:ExpressionStatement[82640-82667]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "info" : "ReturnStatement[82638-82712]:ReturnStatement[82712-82786]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(c))",
      "right" : "if (Character.isJavaIdentifierStart(c))",
      "info" : "IfStatement[82785-82915]:IfStatement[82859-82989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82825-82915]:Block[82899-82989]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[82839-82905]:ExpressionStatement[82913-82979]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[82972-83082]:ExpressionStatement[83046-83156]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[83091-83103]:ReturnStatement[83165-83177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83180-86216]:Block[83254-86290]"
    }, {
      "left" : "int c = 0;",
      "right" : "int c = 0;",
      "info" : "VariableDeclarationStatement[83190-83200]:VariableDeclarationStatement[83264-83274]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[83270-83285]:VariableDeclarationStatement[83344-83359]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[83294-83350]:VariableDeclarationStatement[83368-83424]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[83415-83443]:VariableDeclarationStatement[83489-83517]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[83452-83492]:VariableDeclarationStatement[83526-83566]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[83502-86124]:LabeledStatement[83576-86198]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[83521-86124]:WhileStatement[83595-86198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83534-86124]:Block[83608-86198]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "info" : "LabeledStatement[83605-84453]:LabeledStatement[83679-84527]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[83629-84453]:WhileStatement[83703-84527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83642-84453]:Block[83716-84527]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[83660-83749]:IfStatement[83734-83823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83688-83749]:Block[83762-83823]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[83710-83731]:ExpressionStatement[83784-83805]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[83766-83911]:IfStatement[83840-83985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83795-83911]:Block[83869-83985]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[83817-83861]:ExpressionStatement[83891-83935]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[83882-83893]:ExpressionStatement[83956-83967]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[83928-83948]:VariableDeclarationStatement[84002-84022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83965-84149]:Block[84039-84223]"
    }, {
      "left" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "right" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "info" : "VariableDeclarationStatement[83987-84035]:VariableDeclarationStatement[84061-84109]"
    }, {
      "left" : "if (max2 < max)",
      "right" : "if (max2 < max)",
      "info" : "IfStatement[84056-84131]:IfStatement[84130-84205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84072-84131]:Block[84146-84205]"
    }, {
      "left" : "max = max2;",
      "right" : "max = max2;",
      "info" : "ExpressionStatement[84098-84109]:ExpressionStatement[84172-84183]"
    }, {
      "left" : "while (_inputPtr < max)",
      "right" : "while (_inputPtr < max)",
      "info" : "WhileStatement[84166-84439]:WhileStatement[84240-84513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84190-84439]:Block[84264-84513]"
    }, {
      "left" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[84212-84254]:ExpressionStatement[84286-84328]"
    }, {
      "left" : "if (c == '\\'' || codes[c] != 0)",
      "right" : "if (c == '\\'' || codes[c] != 0)",
      "info" : "IfStatement[84275-84372]:IfStatement[84349-84446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84307-84372]:Block[84381-84446]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[84333-84350]:BreakStatement[84407-84424]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[84393-84421]:ExpressionStatement[84467-84495]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[84520-84583]:IfStatement[84594-84657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84535-84583]:Block[84609-84657]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[84553-84569]:BreakStatement[84627-84643]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "info" : "SwitchStatement[84597-85851]:SwitchStatement[84671-85925]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[84629-84636]:SwitchCase[84703-84710]"
    }, {
      "left" : "if (c != '\\'')",
      "right" : "if (c != '\\'')",
      "info" : "IfStatement[84666-84775]:IfStatement[84740-84849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84681-84775]:Block[84755-84849]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[84736-84757]:ExpressionStatement[84810-84831]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84792-84798]:BreakStatement[84866-84872]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[84811-84818]:SwitchCase[84885-84892]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[84849-84870]:ExpressionStatement[84923-84944]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84887-84893]:BreakStatement[84961-84967]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[84906-84913]:SwitchCase[84980-84987]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[84944-85110]:IfStatement[85018-85184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84978-85043]:Block[85052-85117]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[85000-85025]:ExpressionStatement[85074-85099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85049-85110]:Block[85123-85184]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[85071-85092]:ExpressionStatement[85145-85166]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[85127-85133]:BreakStatement[85201-85207]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[85146-85153]:SwitchCase[85220-85227]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[85184-85205]:ExpressionStatement[85258-85279]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[85274-85321]:ExpressionStatement[85348-85395]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[85338-85483]:IfStatement[85412-85557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85367-85483]:Block[85441-85557]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[85389-85433]:ExpressionStatement[85463-85507]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[85454-85465]:ExpressionStatement[85528-85539]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[85500-85525]:ExpressionStatement[85574-85599]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[85602-85608]:BreakStatement[85676-85682]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[85621-85629]:SwitchCase[85695-85703]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[85646-85744]:IfStatement[85720-85818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85665-85744]:Block[85739-85818]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[85687-85726]:ExpressionStatement[85761-85800]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[85815-85837]:ExpressionStatement[85889-85911]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[85895-86028]:IfStatement[85969-86102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85924-86028]:Block[85998-86102]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[85942-85986]:ExpressionStatement[86016-86060]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[86003-86014]:ExpressionStatement[86077-86088]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[86086-86114]:ExpressionStatement[86160-86188]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[86133-86170]:ExpressionStatement[86207-86244]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[86180-86210]:ReturnStatement[86254-86284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86444-87408]:Block[86518-87482]"
    }, {
      "left" : "while (ch == 'I')",
      "right" : "while (ch == 'I')",
      "info" : "WhileStatement[86454-87271]:WhileStatement[86528-87345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86472-87271]:Block[86546-87345]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[86486-86630]:IfStatement[86560-86704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86514-86630]:Block[86588-86704]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[86532-86616]:IfStatement[86606-86690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86549-86616]:Block[86623-86690]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[86571-86598]:ExpressionStatement[86645-86672]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[86643-86674]:ExpressionStatement[86717-86748]"
    }, {
      "left" : "String match;",
      "right" : "String match;",
      "info" : "VariableDeclarationStatement[86687-86700]:VariableDeclarationStatement[86761-86774]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[86713-86925]:IfStatement[86787-86999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86728-86789]:Block[86802-86863]"
    }, {
      "left" : "match = neg ? \"-INF\" :\"+INF\";",
      "right" : "match = neg ? \"-INF\" :\"+INF\";",
      "info" : "ExpressionStatement[86746-86775]:ExpressionStatement[86820-86849]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[86795-86925]:IfStatement[86869-86999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86810-86881]:Block[86884-86955]"
    }, {
      "left" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "right" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "info" : "ExpressionStatement[86828-86867]:ExpressionStatement[86902-86941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86887-86925]:Block[86961-86999]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86905-86911]:BreakStatement[86979-86985]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[86938-86960]:ExpressionStatement[87012-87034]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[86973-87139]:IfStatement[87047-87213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87023-87139]:Block[87097-87213]"
    }, {
      "left" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[87041-87125]:ReturnStatement[87115-87199]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[87152-87261]:ExpressionStatement[87226-87335]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[87280-87381]:ExpressionStatement[87354-87455]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[87390-87402]:ReturnStatement[87464-87476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87496-88365]:Block[87570-88439]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[87506-87540]:VariableDeclarationStatement[87580-87614]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[87554-87818]:DoStatement[87628-87892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87557-87799]:Block[87631-87873]"
    }, {
      "left" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "right" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "info" : "IfStatement[87571-87764]:IfStatement[87645-87838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87686-87764]:Block[87760-87838]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[87704-87750]:ExpressionStatement[87778-87824]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[87777-87789]:ExpressionStatement[87851-87863]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[87908-87982]:IfStatement[87982-88056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87951-87982]:Block[88025-88056]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[87965-87972]:ReturnStatement[88039-88046]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[87991-88031]:VariableDeclarationStatement[88065-88105]"
    }, {
      "left" : "if (ch < '0' || ch == ']' || ch == '}')",
      "right" : "if (ch < '0' || ch == ']' || ch == '}')",
      "info" : "IfStatement[88040-88137]:IfStatement[88114-88211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88080-88137]:Block[88154-88211]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[88120-88127]:ReturnStatement[88194-88201]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[88201-88241]:VariableDeclarationStatement[88275-88315]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[88250-88359]:IfStatement[88324-88433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88289-88359]:Block[88363-88433]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[88303-88349]:ExpressionStatement[88377-88423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88624-89960]:Block[88698-90034]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[88634-88660]:VariableDeclarationStatement[88708-88734]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[88669-89839]:WhileStatement[88743-89913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88713-89839]:Block[88787-89913]"
    }, {
      "left" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[88727-88774]:VariableDeclarationStatement[88801-88848]"
    }, {
      "left" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                // Is this good enough error message?\n                if (i < 32) {\n                    _throwInvalidSpace(i);\n                }\n                _reportInvalidChar(i);\n            }",
      "right" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                // Is this good enough error message?\n                if (i < 32) {\n                    _throwInvalidSpace(i);\n                }\n                _reportInvalidChar(i);\n            }",
      "info" : "SwitchStatement[88787-89829]:SwitchStatement[88861-89903]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[88819-88826]:SwitchCase[88893-88900]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[88852-88861]:ReturnStatement[88926-88935]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[88874-88881]:SwitchCase[88948-88955]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[88906-88915]:ContinueStatement[88980-88989]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[88928-88935]:SwitchCase[89002-89009]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[88966-88981]:ExpressionStatement[89040-89055]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88998-89004]:BreakStatement[89072-89078]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[89017-89024]:SwitchCase[89091-89098]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[89055-89070]:ExpressionStatement[89129-89144]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89087-89093]:BreakStatement[89161-89167]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[89106-89113]:SwitchCase[89180-89187]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[89144-89159]:ExpressionStatement[89218-89233]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89176-89182]:BreakStatement[89250-89256]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[89195-89207]:SwitchCase[89269-89281]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[89224-89240]:ExpressionStatement[89298-89314]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[89257-89288]:ExpressionStatement[89331-89362]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89305-89311]:BreakStatement[89379-89385]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[89324-89336]:SwitchCase[89398-89410]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[89353-89363]:ExpressionStatement[89427-89437]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89380-89386]:BreakStatement[89454-89460]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[89399-89408]:SwitchCase[89473-89482]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[89425-89440]:ExpressionStatement[89499-89514]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89457-89463]:BreakStatement[89531-89537]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[89476-89485]:SwitchCase[89550-89559]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[89502-89576]:IfStatement[89576-89650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89527-89576]:Block[89601-89650]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[89549-89558]:ReturnStatement[89623-89632]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89593-89599]:BreakStatement[89667-89673]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[89612-89620]:SwitchCase[89686-89694]"
    }, {
      "left" : "if (i < 32)",
      "right" : "if (i < 32)",
      "info" : "IfStatement[89702-89776]:IfStatement[89776-89850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89714-89776]:Block[89788-89850]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[89736-89758]:ExpressionStatement[89810-89832]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[89793-89815]:ExpressionStatement[89867-89889]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[89848-89954]:ThrowStatement[89922-90028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90022-91175]:Block[90096-91249]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[90032-90058]:VariableDeclarationStatement[90106-90132]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[90067-91094]:WhileStatement[90141-91168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90113-91094]:Block[90187-91168]"
    }, {
      "left" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[90127-90174]:VariableDeclarationStatement[90201-90248]"
    }, {
      "left" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                _reportInvalidChar(i);\n            }",
      "right" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                _reportInvalidChar(i);\n            }",
      "info" : "SwitchStatement[90187-91084]:SwitchStatement[90261-91158]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[90219-90226]:SwitchCase[90293-90300]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[90252-90261]:ReturnStatement[90326-90335]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[90274-90281]:SwitchCase[90348-90355]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[90306-90315]:ContinueStatement[90380-90389]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[90328-90335]:SwitchCase[90402-90409]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[90366-90381]:ExpressionStatement[90440-90455]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90398-90404]:BreakStatement[90472-90478]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[90417-90424]:SwitchCase[90491-90498]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[90455-90470]:ExpressionStatement[90529-90544]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90487-90493]:BreakStatement[90561-90567]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[90506-90513]:SwitchCase[90580-90587]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[90544-90559]:ExpressionStatement[90618-90633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90576-90582]:BreakStatement[90650-90656]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[90595-90607]:SwitchCase[90669-90681]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[90624-90640]:ExpressionStatement[90698-90714]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[90657-90688]:ExpressionStatement[90731-90762]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90705-90711]:BreakStatement[90779-90785]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[90724-90736]:SwitchCase[90798-90810]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[90753-90763]:ExpressionStatement[90827-90837]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90780-90786]:BreakStatement[90854-90860]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[90799-90808]:SwitchCase[90873-90882]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[90825-90840]:ExpressionStatement[90899-90914]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90857-90863]:BreakStatement[90931-90937]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[90876-90885]:SwitchCase[90950-90959]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[90902-90976]:IfStatement[90976-91050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90927-90976]:Block[91001-91050]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[90949-90958]:ReturnStatement[91023-91032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90993-90999]:BreakStatement[91067-91073]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[91012-91020]:SwitchCase[91086-91094]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[91048-91070]:ExpressionStatement[91122-91144]"
    }, {
      "left" : "_handleEOF();",
      "right" : "_handleEOF();",
      "info" : "ExpressionStatement[91137-91150]:ExpressionStatement[91211-91224]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[91159-91169]:ReturnStatement[91233-91243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91361-93746]:Block[91435-93820]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[91371-91444]:IfStatement[91445-91518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91399-91444]:Block[91473-91518]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[91413-91434]:ExpressionStatement[91487-91508]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++];",
      "right" : "int i = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[91522-91556]:VariableDeclarationStatement[91596-91630]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[91565-92938]:IfStatement[91639-93012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91585-91839]:Block[91659-91913]"
    }, {
      "left" : "if (_inputPtr < _inputEnd)",
      "right" : "if (_inputPtr < _inputEnd)",
      "info" : "IfStatement[91599-91829]:IfStatement[91673-91903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91626-91829]:Block[91700-91903]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[91644-91679]:ExpressionStatement[91718-91753]"
    }, {
      "left" : "if (i > INT_SPACE && i != INT_SLASH)",
      "right" : "if (i > INT_SPACE && i != INT_SLASH)",
      "info" : "IfStatement[91696-91815]:IfStatement[91770-91889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91733-91815]:Block[91807-91889]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[91755-91767]:ExpressionStatement[91829-91841]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[91788-91797]:ReturnStatement[91862-91871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91845-92938]:Block[91919-93012]"
    }, {
      "left" : "i &= 0xFF;",
      "right" : "i &= 0xFF;",
      "info" : "ExpressionStatement[91911-91921]:ExpressionStatement[91985-91995]"
    }, {
      "left" : "space_loop:\n            while (true) {\n                switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                i = _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "space_loop:\n            while (true) {\n                switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                i = _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[91947-92780]:LabeledStatement[92021-92854]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[91971-92780]:WhileStatement[92045-92854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91984-92780]:Block[92058-92854]"
    }, {
      "left" : "switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }",
      "right" : "switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }",
      "info" : "SwitchStatement[92002-92606]:SwitchStatement[92076-92680]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[92031-92040]:SwitchCase[92105-92114]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[92057-92067]:SwitchCase[92131-92141]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92088-92094]:BreakStatement[92162-92168]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[92111-92123]:SwitchCase[92185-92197]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[92144-92154]:ExpressionStatement[92218-92228]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92175-92181]:BreakStatement[92249-92255]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[92198-92210]:SwitchCase[92272-92284]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[92231-92247]:ExpressionStatement[92305-92321]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[92268-92299]:ExpressionStatement[92342-92373]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92320-92326]:BreakStatement[92394-92400]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[92343-92352]:SwitchCase[92417-92426]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[92373-92388]:ExpressionStatement[92447-92462]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92409-92415]:BreakStatement[92483-92489]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[92432-92440]:SwitchCase[92506-92514]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[92461-92550]:IfStatement[92535-92624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92480-92550]:Block[92554-92624]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[92506-92528]:ExpressionStatement[92580-92602]"
    }, {
      "left" : "break space_loop;",
      "right" : "break space_loop;",
      "info" : "BreakStatement[92571-92588]:BreakStatement[92645-92662]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[92623-92712]:IfStatement[92697-92786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92651-92712]:Block[92725-92786]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[92673-92694]:ExpressionStatement[92747-92768]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[92729-92766]:ExpressionStatement[92803-92840]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[92793-92928]:IfStatement[92867-93002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92813-92928]:Block[92887-93002]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[92831-92914]:ExpressionStatement[92905-92988]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[93013-93625]:WhileStatement[93087-93699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93057-93625]:Block[93131-93699]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[93071-93108]:ExpressionStatement[93145-93182]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[93121-93615]:IfStatement[93195-93689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93140-93273]:Block[93214-93347]"
    }, {
      "left" : "if (i != INT_SLASH)",
      "right" : "if (i != INT_SLASH)",
      "info" : "IfStatement[93158-93227]:IfStatement[93232-93301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93178-93227]:Block[93252-93301]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[93200-93209]:ReturnStatement[93274-93283]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[93244-93259]:ExpressionStatement[93318-93333]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[93279-93615]:IfStatement[93353-93689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93299-93615]:Block[93373-93689]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[93317-93601]:IfStatement[93391-93675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93334-93442]:Block[93408-93516]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[93356-93372]:ExpressionStatement[93430-93446]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[93393-93424]:ExpressionStatement[93467-93498]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[93448-93601]:IfStatement[93522-93675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93465-93515]:Block[93539-93589]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[93487-93497]:ExpressionStatement[93561-93571]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[93521-93601]:IfStatement[93595-93675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93539-93601]:Block[93613-93675]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[93561-93583]:ExpressionStatement[93635-93657]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[93634-93740]:ThrowStatement[93708-93814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93813-94474]:Block[93887-94548]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[93823-94027]:IfStatement[93897-94101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93863-94027]:Block[93937-94101]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[93877-94017]:ExpressionStatement[93951-94091]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[94093-94195]:IfStatement[94167-94269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94136-94195]:Block[94210-94269]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[94150-94185]:ExpressionStatement[94224-94259]"
    }, {
      "left" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[94204-94245]:VariableDeclarationStatement[94278-94319]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[94254-94468]:IfStatement[94328-94542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94268-94304]:Block[94342-94378]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[94282-94294]:ExpressionStatement[94356-94368]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[94310-94468]:IfStatement[94384-94542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94324-94364]:Block[94398-94438]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[94338-94354]:ExpressionStatement[94412-94428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94370-94468]:Block[94444-94542]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[94384-94458]:ExpressionStatement[94458-94532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94538-96040]:Block[94612-96114]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[94620-94672]:VariableDeclarationStatement[94694-94746]"
    }, {
      "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "info" : "LabeledStatement[94720-95990]:LabeledStatement[94794-96064]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[94739-95990]:WhileStatement[94813-96064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94785-95990]:Block[94859-96064]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[94799-94846]:VariableDeclarationStatement[94873-94920]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[94859-94879]:VariableDeclarationStatement[94933-94953]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[94892-95980]:IfStatement[94966-96054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94907-95980]:Block[94981-96054]"
    }, {
      "left" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "right" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "info" : "SwitchStatement[94925-95966]:SwitchStatement[94999-96040]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[94957-94966]:SwitchCase[95031-95040]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[94987-95094]:IfStatement[95061-95168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95030-95094]:Block[95104-95168]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[95056-95072]:BreakStatement[95130-95146]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[95115-95249]:IfStatement[95189-95323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95157-95249]:Block[95231-95323]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[95183-95195]:ExpressionStatement[95257-95269]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[95220-95227]:ReturnStatement[95294-95301]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95270-95276]:BreakStatement[95344-95350]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[95293-95305]:SwitchCase[95367-95379]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[95326-95342]:ExpressionStatement[95400-95416]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[95363-95394]:ExpressionStatement[95437-95468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95415-95421]:BreakStatement[95489-95495]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[95438-95450]:SwitchCase[95512-95524]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[95471-95481]:ExpressionStatement[95545-95555]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95502-95508]:BreakStatement[95576-95582]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[95525-95532]:SwitchCase[95599-95606]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[95567-95582]:ExpressionStatement[95641-95656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95603-95609]:BreakStatement[95677-95683]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[95626-95633]:SwitchCase[95700-95707]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[95668-95683]:ExpressionStatement[95742-95757]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95704-95710]:BreakStatement[95778-95784]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[95727-95734]:SwitchCase[95801-95808]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[95769-95784]:ExpressionStatement[95843-95858]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95805-95811]:BreakStatement[95879-95885]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[95828-95836]:SwitchCase[95902-95910]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[95926-95948]:ExpressionStatement[96000-96022]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[95999-96034]:ExpressionStatement[96073-96108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96110-96250]:Block[96184-96324]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[96120-96202]:IfStatement[96194-96276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96165-96202]:Block[96239-96276]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[96179-96192]:ReturnStatement[96253-96266]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[96211-96223]:ExpressionStatement[96285-96297]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[96232-96244]:ReturnStatement[96306-96318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96428-97611]:Block[96502-97685]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[96482-96534]:VariableDeclarationStatement[96556-96608]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[96543-97605]:WhileStatement[96617-97679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96589-97605]:Block[96663-97679]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[96603-96650]:VariableDeclarationStatement[96677-96724]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[96663-96683]:VariableDeclarationStatement[96737-96757]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[96696-97595]:IfStatement[96770-97669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96711-97595]:Block[96785-97669]"
    }, {
      "left" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "right" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "info" : "SwitchStatement[96729-97581]:SwitchStatement[96803-97655]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[96761-96773]:SwitchCase[96835-96847]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[96794-96810]:ExpressionStatement[96868-96884]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[96831-96862]:ExpressionStatement[96905-96936]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96883-96890]:ReturnStatement[96957-96964]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[96907-96919]:SwitchCase[96981-96993]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[96940-96950]:ExpressionStatement[97014-97024]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96971-96978]:ReturnStatement[97045-97052]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[96995-97004]:SwitchCase[97069-97078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[97051-97057]:BreakStatement[97125-97131]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[97074-97081]:SwitchCase[97148-97155]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[97116-97131]:ExpressionStatement[97190-97205]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[97152-97158]:BreakStatement[97226-97232]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[97175-97182]:SwitchCase[97249-97256]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[97217-97232]:ExpressionStatement[97291-97306]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[97253-97259]:BreakStatement[97327-97333]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[97276-97283]:SwitchCase[97350-97357]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[97318-97333]:ExpressionStatement[97392-97407]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[97354-97360]:BreakStatement[97428-97434]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[97377-97385]:SwitchCase[97451-97459]"
    }, {
      "left" : "if (code < 0)",
      "right" : "if (code < 0)",
      "info" : "IfStatement[97417-97563]:IfStatement[97491-97637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97431-97563]:Block[97505-97637]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[97519-97541]:ExpressionStatement[97593-97615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97690-99127]:Block[97764-99201]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[97700-97852]:IfStatement[97774-97926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97728-97852]:Block[97802-97926]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[97742-97842]:IfStatement[97816-97916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97759-97842]:Block[97833-97916]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[97777-97828]:ExpressionStatement[97851-97902]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++];",
      "right" : "int c = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[97861-97901]:VariableDeclarationStatement[97935-97975]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "info" : "SwitchStatement[97911-98507]:SwitchStatement[97985-98581]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[97981-97990]:SwitchCase[98055-98064]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[98003-98015]:ReturnStatement[98077-98089]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[98024-98033]:SwitchCase[98098-98107]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[98046-98058]:ReturnStatement[98120-98132]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[98067-98076]:SwitchCase[98141-98150]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[98089-98101]:ReturnStatement[98163-98175]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[98110-98119]:SwitchCase[98184-98193]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[98132-98144]:ReturnStatement[98206-98218]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[98153-98162]:SwitchCase[98227-98236]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[98175-98187]:ReturnStatement[98249-98261]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[98253-98262]:SwitchCase[98327-98336]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[98271-98280]:SwitchCase[98345-98354]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[98289-98299]:SwitchCase[98363-98373]"
    }, {
      "left" : "return (char) c;",
      "right" : "return (char) c;",
      "info" : "ReturnStatement[98312-98328]:ReturnStatement[98386-98402]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[98338-98347]:SwitchCase[98412-98421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[98387-98393]:BreakStatement[98461-98467]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[98403-98411]:SwitchCase[98477-98485]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "right" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "info" : "ReturnStatement[98424-98497]:ReturnStatement[98498-98571]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[98564-98578]:VariableDeclarationStatement[98638-98652]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[98587-99092]:ForStatement[98661-99166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98615-99092]:Block[98689-99166]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[98629-98797]:IfStatement[98703-98871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98657-98797]:Block[98731-98871]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[98675-98783]:IfStatement[98749-98857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98692-98783]:Block[98766-98857]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[98714-98765]:ExpressionStatement[98788-98839]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[98810-98851]:VariableDeclarationStatement[98884-98925]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[98864-98900]:VariableDeclarationStatement[98938-98974]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[98913-99040]:IfStatement[98987-99114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98928-99040]:Block[99002-99114]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[98946-99026]:ExpressionStatement[99020-99100]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[99053-99082]:ExpressionStatement[99127-99156]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[99101-99121]:ReturnStatement[99175-99195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99205-100733]:Block[99279-100807]"
    }, {
      "left" : "int c = (int) firstByte;",
      "right" : "int c = (int) firstByte;",
      "info" : "VariableDeclarationStatement[99215-99239]:VariableDeclarationStatement[99289-99313]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[99248-100709]:IfStatement[99322-100783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99259-100709]:Block[99333-100783]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[99309-99320]:VariableDeclarationStatement[99383-99394]"
    }, {
      "left" : "if ((c & 0xE0) == 0xC0)",
      "right" : "if ((c & 0xE0) == 0xC0)",
      "info" : "IfStatement[99411-99947]:IfStatement[99485-100021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99435-99534]:Block[99509-99608]"
    }, {
      "left" : "c &= 0x1F;",
      "right" : "c &= 0x1F;",
      "info" : "ExpressionStatement[99482-99492]:ExpressionStatement[99556-99566]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[99509-99520]:ExpressionStatement[99583-99594]"
    }, {
      "left" : "if ((c & 0xF0) == 0xE0)",
      "right" : "if ((c & 0xF0) == 0xE0)",
      "info" : "IfStatement[99540-99947]:IfStatement[99614-100021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99564-99663]:Block[99638-99737]"
    }, {
      "left" : "c &= 0x0F;",
      "right" : "c &= 0x0F;",
      "info" : "ExpressionStatement[99611-99621]:ExpressionStatement[99685-99695]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[99638-99649]:ExpressionStatement[99712-99723]"
    }, {
      "left" : "if ((c & 0xF8) == 0xF0)",
      "right" : "if ((c & 0xF8) == 0xF0)",
      "info" : "IfStatement[99669-99947]:IfStatement[99743-100021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99693-99830]:Block[99767-99904]"
    }, {
      "left" : "c &= 0x07;",
      "right" : "c &= 0x07;",
      "info" : "ExpressionStatement[99778-99788]:ExpressionStatement[99852-99862]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[99805-99816]:ExpressionStatement[99879-99890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99836-99947]:Block[99910-100021]"
    }, {
      "left" : "_reportInvalidInitial(c & 0xFF);",
      "right" : "_reportInvalidInitial(c & 0xFF);",
      "info" : "ExpressionStatement[99854-99886]:ExpressionStatement[99928-99960]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[99903-99914]:ExpressionStatement[99977-99988]"
    }, {
      "left" : "int d = nextByte();",
      "right" : "int d = nextByte();",
      "info" : "VariableDeclarationStatement[99961-99980]:VariableDeclarationStatement[100035-100054]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[99993-100080]:IfStatement[100067-100154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100018-100080]:Block[100092-100154]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[100036-100066]:ExpressionStatement[100110-100140]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[100093-100119]:ExpressionStatement[100167-100193]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[100145-100699]:IfStatement[100219-100773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100161-100699]:Block[100235-100773]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[100214-100229]:ExpressionStatement[100288-100303]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[100258-100353]:IfStatement[100332-100427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100283-100353]:Block[100357-100427]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[100305-100335]:ExpressionStatement[100379-100409]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[100370-100396]:ExpressionStatement[100444-100470]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[100413-100685]:IfStatement[100487-100759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100429-100685]:Block[100503-100759]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[100481-100496]:ExpressionStatement[100555-100570]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[100517-100620]:IfStatement[100591-100694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100542-100620]:Block[100616-100694]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[100568-100598]:ExpressionStatement[100642-100672]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[100641-100667]:ExpressionStatement[100715-100741]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[100718-100727]:ReturnStatement[100792-100801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100983-101267]:Block[101057-101341]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[100993-101066]:IfStatement[101067-101140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101021-101066]:Block[101095-101140]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[101035-101056]:ExpressionStatement[101109-101130]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[101075-101115]:VariableDeclarationStatement[101149-101189]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101124-101214]:IfStatement[101198-101288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101149-101214]:Block[101223-101288]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101163-101204]:ExpressionStatement[101237-101278]"
    }, {
      "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "info" : "ReturnStatement[101223-101261]:ReturnStatement[101297-101335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101336-101912]:Block[101410-101986]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[101346-101419]:IfStatement[101420-101493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101374-101419]:Block[101448-101493]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[101388-101409]:ExpressionStatement[101462-101483]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[101428-101439]:ExpressionStatement[101502-101513]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[101448-101488]:VariableDeclarationStatement[101522-101562]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101497-101587]:IfStatement[101571-101661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101522-101587]:Block[101596-101661]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101536-101577]:ExpressionStatement[101610-101651]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[101596-101627]:VariableDeclarationStatement[101670-101701]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[101636-101709]:IfStatement[101710-101783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101664-101709]:Block[101738-101783]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[101678-101699]:ExpressionStatement[101752-101773]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[101718-101754]:ExpressionStatement[101792-101828]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101763-101853]:IfStatement[101837-101927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101788-101853]:Block[101862-101927]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101802-101843]:ExpressionStatement[101876-101917]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[101862-101888]:ExpressionStatement[101936-101962]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[101897-101906]:ReturnStatement[101971-101980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101985-102397]:Block[102059-102471]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[101995-102006]:ExpressionStatement[102069-102080]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[102015-102055]:VariableDeclarationStatement[102089-102129]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102064-102154]:IfStatement[102138-102228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102089-102154]:Block[102163-102228]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[102103-102144]:ExpressionStatement[102177-102218]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[102163-102194]:VariableDeclarationStatement[102237-102268]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[102203-102239]:ExpressionStatement[102277-102313]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102248-102338]:IfStatement[102322-102412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102273-102338]:Block[102347-102412]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[102287-102328]:ExpressionStatement[102361-102402]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[102347-102373]:ExpressionStatement[102421-102447]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[102382-102391]:ReturnStatement[102456-102465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102607-103551]:Block[102681-103625]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[102617-102690]:IfStatement[102691-102764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102645-102690]:Block[102719-102764]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[102659-102680]:ExpressionStatement[102733-102754]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[102699-102739]:VariableDeclarationStatement[102773-102813]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102748-102838]:IfStatement[102822-102912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102773-102838]:Block[102847-102912]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[102787-102828]:ExpressionStatement[102861-102902]"
    }, {
      "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[102847-102882]:ExpressionStatement[102921-102956]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[102892-102965]:IfStatement[102966-103039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102920-102965]:Block[102994-103039]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[102934-102955]:ExpressionStatement[103008-103029]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[102974-103010]:ExpressionStatement[103048-103084]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[103019-103109]:IfStatement[103093-103183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103044-103109]:Block[103118-103183]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103058-103099]:ExpressionStatement[103132-103173]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[103118-103144]:ExpressionStatement[103192-103218]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[103153-103226]:IfStatement[103227-103300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103181-103226]:Block[103255-103300]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[103195-103216]:ExpressionStatement[103269-103290]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[103235-103271]:ExpressionStatement[103309-103345]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[103280-103370]:IfStatement[103354-103444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103305-103370]:Block[103379-103444]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103319-103360]:ExpressionStatement[103393-103434]"
    }, {
      "left" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "right" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "info" : "ReturnStatement[103504-103545]:ReturnStatement[103578-103619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103618-103851]:Block[103692-103925]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[103628-103701]:IfStatement[103702-103775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103656-103701]:Block[103730-103775]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[103670-103691]:ExpressionStatement[103744-103765]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[103710-103746]:ExpressionStatement[103784-103820]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[103755-103845]:IfStatement[103829-103919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103780-103845]:Block[103854-103919]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103794-103835]:ExpressionStatement[103868-103909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104024-104504]:Block[104098-104578]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104034-104107]:IfStatement[104108-104181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104062-104107]:Block[104136-104181]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104076-104097]:ExpressionStatement[104150-104171]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104137-104173]:ExpressionStatement[104211-104247]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[104182-104272]:IfStatement[104256-104346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104207-104272]:Block[104281-104346]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104221-104262]:ExpressionStatement[104295-104336]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104281-104354]:IfStatement[104355-104428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104309-104354]:Block[104383-104428]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104323-104344]:ExpressionStatement[104397-104418]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104363-104399]:ExpressionStatement[104437-104473]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[104408-104498]:IfStatement[104482-104572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104433-104498]:Block[104507-104572]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104447-104488]:ExpressionStatement[104521-104562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104571-105260]:Block[104645-105334]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104581-104654]:IfStatement[104655-104728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104609-104654]:Block[104683-104728]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104623-104644]:ExpressionStatement[104697-104718]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[104663-104703]:VariableDeclarationStatement[104737-104777]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[104712-104802]:IfStatement[104786-104876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104737-104802]:Block[104811-104876]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104751-104792]:ExpressionStatement[104825-104866]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104811-104884]:IfStatement[104885-104958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104839-104884]:Block[104913-104958]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104853-104874]:ExpressionStatement[104927-104948]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104893-104929]:ExpressionStatement[104967-105003]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[104938-105028]:IfStatement[105012-105102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104963-105028]:Block[105037-105102]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104977-105018]:ExpressionStatement[105051-105092]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[105037-105110]:IfStatement[105111-105184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105065-105110]:Block[105139-105184]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[105079-105100]:ExpressionStatement[105153-105174]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[105119-105155]:ExpressionStatement[105193-105229]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[105164-105254]:IfStatement[105238-105328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105189-105254]:Block[105263-105328]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[105203-105244]:ExpressionStatement[105277-105318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105621-105851]:Block[105695-105925]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[105631-105780]:IfStatement[105705-105854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105672-105780]:Block[105746-105854]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "right" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "info" : "IfStatement[105686-105770]:IfStatement[105760-105844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105726-105770]:Block[105800-105844]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[105744-105756]:ExpressionStatement[105818-105830]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[105789-105805]:ExpressionStatement[105863-105879]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[105814-105845]:ExpressionStatement[105888-105919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105907-106045]:Block[105981-106119]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[105917-105990]:IfStatement[105991-106064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105945-105990]:Block[106019-106064]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[105959-105980]:ExpressionStatement[106033-106054]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ReturnStatement[105999-106039]:ReturnStatement[106073-106113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106315-106400]:Block[106389-106474]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[106326-106393]:ExpressionStatement[106400-106467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106497-107214]:Block[106571-107288]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[106508-106558]:VariableDeclarationStatement[106582-106632]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[106772-107122]:WhileStatement[106846-107196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106785-107122]:Block[106859-107196]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[106800-106883]:IfStatement[106874-106957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106843-106883]:Block[106917-106957]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[106862-106868]:BreakStatement[106936-106942]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[106897-106937]:VariableDeclarationStatement[106971-107011]"
    }, {
      "left" : "char c = (char) _decodeCharForError(i);",
      "right" : "char c = (char) _decodeCharForError(i);",
      "info" : "VariableDeclarationStatement[106951-106990]:VariableDeclarationStatement[107025-107064]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[107004-107084]:IfStatement[107078-107158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107044-107084]:Block[107118-107158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107063-107069]:BreakStatement[107137-107143]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[107098-107111]:ExpressionStatement[107172-107185]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[107132-107207]:ExpressionStatement[107206-107281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107307-107479]:Block[107381-107553]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[107374-107439]:IfStatement[107448-107513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107393-107439]:Block[107467-107513]"
    }, {
      "left" : "_throwInvalidSpace(c);",
      "right" : "_throwInvalidSpace(c);",
      "info" : "ExpressionStatement[107407-107429]:ExpressionStatement[107481-107503]"
    }, {
      "left" : "_reportInvalidInitial(c);",
      "right" : "_reportInvalidInitial(c);",
      "info" : "ExpressionStatement[107448-107473]:ExpressionStatement[107522-107547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107570-107656]:Block[107644-107730]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[107580-107650]:ExpressionStatement[107654-107724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107745-107832]:Block[107819-107906]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[107755-107826]:ExpressionStatement[107829-107900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107930-107997]:Block[108004-108071]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[107940-107956]:ExpressionStatement[108014-108030]"
    }, {
      "left" : "_reportInvalidOther(mask);",
      "right" : "_reportInvalidOther(mask);",
      "info" : "ExpressionStatement[107965-107991]:ExpressionStatement[108039-108065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108060-108192]:Block[108134-108266]"
    }, {
      "left" : "if (arr == null)",
      "right" : "if (arr == null)",
      "info" : "IfStatement[108070-108132]:IfStatement[108144-108206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108087-108132]:Block[108161-108206]"
    }, {
      "left" : "return new int[more];",
      "right" : "return new int[more];",
      "info" : "ReturnStatement[108101-108122]:ReturnStatement[108175-108196]"
    }, {
      "left" : "return Arrays.copyOf(arr, arr.length + more);",
      "right" : "return Arrays.copyOf(arr, arr.length + more);",
      "info" : "ReturnStatement[108141-108186]:ReturnStatement[108215-108260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108591-113036]:Block[108665-113110]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[108601-108651]:VariableDeclarationStatement[108675-108725]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[108682-113030]:WhileStatement[108756-113104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108695-113030]:Block[108769-113104]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[108772-108779]:VariableDeclarationStatement[108846-108853]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[108792-109002]:DoStatement[108866-109076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108795-108977]:Block[108869-109051]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[108813-108902]:IfStatement[108887-108976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108841-108902]:Block[108915-108976]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[108863-108884]:ExpressionStatement[108937-108958]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[108919-108963]:ExpressionStatement[108993-109037]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[109015-109058]:VariableDeclarationStatement[109089-109132]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[109071-109410]:IfStatement[109145-109484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109085-109410]:Block[109159-109484]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[109140-109230]:IfStatement[109214-109304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109161-109230]:Block[109235-109304]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[109183-109212]:ReturnStatement[109257-109286]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[109247-109293]:ExpressionStatement[109321-109367]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[109310-109396]:IfStatement[109384-109470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109324-109396]:Block[109398-109470]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[109369-109378]:ContinueStatement[109443-109452]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[109423-109446]:VariableDeclarationStatement[109497-109520]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[109555-109636]:IfStatement[109629-109710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109583-109636]:Block[109657-109710]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[109601-109622]:ExpressionStatement[109675-109696]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[109649-109687]:ExpressionStatement[109723-109761]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[109700-109739]:ExpressionStatement[109774-109813]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[109752-109844]:IfStatement[109826-109918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109766-109844]:Block[109840-109918]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[109784-109830]:ExpressionStatement[109858-109904]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[109857-109897]:ExpressionStatement[109931-109971]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[109984-110065]:IfStatement[110058-110139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110012-110065]:Block[110086-110139]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[110030-110051]:ExpressionStatement[110104-110125]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[110078-110116]:ExpressionStatement[110152-110190]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[110129-110168]:ExpressionStatement[110203-110242]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[110239-111445]:IfStatement[110313-111519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110253-111445]:Block[110327-111519]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[110271-110726]:IfStatement[110345-110800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110319-110726]:Block[110393-110800]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[110424-110641]:IfStatement[110498-110715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110468-110641]:Block[110542-110715]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[110494-110512]:ExpressionStatement[110568-110586]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[110537-110565]:ExpressionStatement[110611-110639]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[110590-110619]:ReturnStatement[110664-110693]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[110662-110708]:ExpressionStatement[110736-110782]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[110743-111431]:IfStatement[110817-111505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110791-111431]:Block[110865-111505]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[110857-110954]:IfStatement[110931-111028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110885-110954]:Block[110959-111028]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[110911-110932]:ExpressionStatement[110985-111006]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[110975-111013]:ExpressionStatement[111049-111087]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[111034-111232]:IfStatement[111108-111306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111071-111232]:Block[111145-111306]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[111097-111210]:ThrowStatement[111171-111284]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[111316-111334]:ExpressionStatement[111390-111408]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[111355-111383]:ExpressionStatement[111429-111457]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[111404-111413]:ContinueStatement[111478-111487]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[111492-111532]:ExpressionStatement[111566-111606]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[111616-111697]:IfStatement[111690-111771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111644-111697]:Block[111718-111771]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[111662-111683]:ExpressionStatement[111736-111757]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[111710-111748]:ExpressionStatement[111784-111822]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[111761-111800]:ExpressionStatement[111835-111874]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[111813-112862]:IfStatement[111887-112936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111827-112862]:Block[111901-112936]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[111845-112308]:IfStatement[111919-112382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111893-112308]:Block[111967-112382]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[111998-112223]:IfStatement[112072-112297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112042-112223]:Block[112116-112297]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[112068-112086]:ExpressionStatement[112142-112160]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[112111-112147]:ExpressionStatement[112185-112221]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[112172-112201]:ReturnStatement[112246-112275]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[112244-112290]:ExpressionStatement[112318-112364]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[112325-112848]:IfStatement[112399-112922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112373-112848]:Block[112447-112922]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[112725-112743]:ExpressionStatement[112799-112817]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[112764-112800]:ExpressionStatement[112838-112874]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[112821-112830]:ContinueStatement[112895-112904]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[112929-112969]:ExpressionStatement[113003-113043]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[112982-113020]:ExpressionStatement[113056-113094]"
    } ]
  },
  "interFileMappings" : { }
}