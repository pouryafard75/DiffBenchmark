{
  "matchedElements" : [
 {
    "left" : "class : JsonReader",
    "right" : "class : JsonReader",
    "info" : "TypeDeclaration[852-50391]:TypeDeclaration[852-50424]"
  }, {
    "left" : "NON_EXECUTE_PREFIX",
    "right" : "NON_EXECUTE_PREFIX",
    "info" : "FieldDeclaration[7245-7374]:FieldDeclaration[7245-7374]"
  }, {
    "left" : "MIN_INCOMPLETE_INTEGER",
    "right" : "MIN_INCOMPLETE_INTEGER",
    "info" : "FieldDeclaration[7377-7448]:FieldDeclaration[7377-7448]"
  }, {
    "left" : "PEEKED_NONE",
    "right" : "PEEKED_NONE",
    "info" : "FieldDeclaration[7452-7493]:FieldDeclaration[7452-7493]"
  }, {
    "left" : "PEEKED_BEGIN_OBJECT",
    "right" : "PEEKED_BEGIN_OBJECT",
    "info" : "FieldDeclaration[7496-7545]:FieldDeclaration[7496-7545]"
  }, {
    "left" : "PEEKED_END_OBJECT",
    "right" : "PEEKED_END_OBJECT",
    "info" : "FieldDeclaration[7548-7595]:FieldDeclaration[7548-7595]"
  }, {
    "left" : "PEEKED_BEGIN_ARRAY",
    "right" : "PEEKED_BEGIN_ARRAY",
    "info" : "FieldDeclaration[7598-7646]:FieldDeclaration[7598-7646]"
  }, {
    "left" : "PEEKED_END_ARRAY",
    "right" : "PEEKED_END_ARRAY",
    "info" : "FieldDeclaration[7649-7695]:FieldDeclaration[7649-7695]"
  }, {
    "left" : "PEEKED_TRUE",
    "right" : "PEEKED_TRUE",
    "info" : "FieldDeclaration[7698-7739]:FieldDeclaration[7698-7739]"
  }, {
    "left" : "PEEKED_FALSE",
    "right" : "PEEKED_FALSE",
    "info" : "FieldDeclaration[7742-7784]:FieldDeclaration[7742-7784]"
  }, {
    "left" : "PEEKED_NULL",
    "right" : "PEEKED_NULL",
    "info" : "FieldDeclaration[7787-7828]:FieldDeclaration[7787-7828]"
  }, {
    "left" : "PEEKED_SINGLE_QUOTED",
    "right" : "PEEKED_SINGLE_QUOTED",
    "info" : "FieldDeclaration[7831-7881]:FieldDeclaration[7831-7881]"
  }, {
    "left" : "PEEKED_DOUBLE_QUOTED",
    "right" : "PEEKED_DOUBLE_QUOTED",
    "info" : "FieldDeclaration[7884-7934]:FieldDeclaration[7884-7934]"
  }, {
    "left" : "PEEKED_UNQUOTED",
    "right" : "PEEKED_UNQUOTED",
    "info" : "FieldDeclaration[7937-7983]:FieldDeclaration[7937-7983]"
  }, {
    "left" : "PEEKED_BUFFERED",
    "right" : "PEEKED_BUFFERED",
    "info" : "FieldDeclaration[7986-8108]:FieldDeclaration[7986-8108]"
  }, {
    "left" : "PEEKED_SINGLE_QUOTED_NAME",
    "right" : "PEEKED_SINGLE_QUOTED_NAME",
    "info" : "FieldDeclaration[8111-8167]:FieldDeclaration[8111-8167]"
  }, {
    "left" : "PEEKED_DOUBLE_QUOTED_NAME",
    "right" : "PEEKED_DOUBLE_QUOTED_NAME",
    "info" : "FieldDeclaration[8170-8226]:FieldDeclaration[8170-8226]"
  }, {
    "left" : "PEEKED_UNQUOTED_NAME",
    "right" : "PEEKED_UNQUOTED_NAME",
    "info" : "FieldDeclaration[8229-8280]:FieldDeclaration[8229-8280]"
  }, {
    "left" : "PEEKED_LONG",
    "right" : "PEEKED_LONG",
    "info" : "FieldDeclaration[8283-8400]:FieldDeclaration[8283-8400]"
  }, {
    "left" : "PEEKED_NUMBER",
    "right" : "PEEKED_NUMBER",
    "info" : "FieldDeclaration[8403-8447]:FieldDeclaration[8403-8447]"
  }, {
    "left" : "PEEKED_EOF",
    "right" : "PEEKED_EOF",
    "info" : "FieldDeclaration[8450-8491]:FieldDeclaration[8450-8491]"
  }, {
    "left" : "NUMBER_CHAR_NONE",
    "right" : "NUMBER_CHAR_NONE",
    "info" : "FieldDeclaration[8538-8584]:FieldDeclaration[8538-8584]"
  }, {
    "left" : "NUMBER_CHAR_SIGN",
    "right" : "NUMBER_CHAR_SIGN",
    "info" : "FieldDeclaration[8587-8633]:FieldDeclaration[8587-8633]"
  }, {
    "left" : "NUMBER_CHAR_DIGIT",
    "right" : "NUMBER_CHAR_DIGIT",
    "info" : "FieldDeclaration[8636-8683]:FieldDeclaration[8636-8683]"
  }, {
    "left" : "NUMBER_CHAR_DECIMAL",
    "right" : "NUMBER_CHAR_DECIMAL",
    "info" : "FieldDeclaration[8686-8735]:FieldDeclaration[8686-8735]"
  }, {
    "left" : "NUMBER_CHAR_FRACTION_DIGIT",
    "right" : "NUMBER_CHAR_FRACTION_DIGIT",
    "info" : "FieldDeclaration[8738-8794]:FieldDeclaration[8738-8794]"
  }, {
    "left" : "NUMBER_CHAR_EXP_E",
    "right" : "NUMBER_CHAR_EXP_E",
    "info" : "FieldDeclaration[8797-8844]:FieldDeclaration[8797-8844]"
  }, {
    "left" : "NUMBER_CHAR_EXP_SIGN",
    "right" : "NUMBER_CHAR_EXP_SIGN",
    "info" : "FieldDeclaration[8847-8897]:FieldDeclaration[8847-8897]"
  }, {
    "left" : "NUMBER_CHAR_EXP_DIGIT",
    "right" : "NUMBER_CHAR_EXP_DIGIT",
    "info" : "FieldDeclaration[8900-8951]:FieldDeclaration[8900-8951]"
  }, {
    "left" : "in",
    "right" : "in",
    "info" : "FieldDeclaration[8955-9004]:FieldDeclaration[8955-9004]"
  }, {
    "left" : "lenient",
    "right" : "lenient",
    "info" : "FieldDeclaration[9008-9088]:FieldDeclaration[9008-9088]"
  }, {
    "left" : "buffer",
    "right" : "buffer",
    "info" : "FieldDeclaration[9092-9443]:FieldDeclaration[9092-9443]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "FieldDeclaration[9446-9466]:FieldDeclaration[9446-9466]"
  }, {
    "left" : "limit",
    "right" : "limit",
    "info" : "FieldDeclaration[9469-9491]:FieldDeclaration[9469-9491]"
  }, {
    "left" : "lineNumber",
    "right" : "lineNumber",
    "info" : "FieldDeclaration[9495-9522]:FieldDeclaration[9495-9522]"
  }, {
    "left" : "lineStart",
    "right" : "lineStart",
    "info" : "FieldDeclaration[9525-9551]:FieldDeclaration[9525-9551]"
  }, {
    "left" : "peeked",
    "right" : "peeked",
    "info" : "FieldDeclaration[9555-9580]:FieldDeclaration[9555-9580]"
  }, {
    "left" : "peekedLong",
    "right" : "peekedLong",
    "info" : "FieldDeclaration[9584-9755]:FieldDeclaration[9584-9755]"
  }, {
    "left" : "peekedNumberLength",
    "right" : "peekedNumberLength",
    "info" : "FieldDeclaration[9759-9913]:FieldDeclaration[9759-9913]"
  }, {
    "left" : "peekedString",
    "right" : "peekedString",
    "info" : "FieldDeclaration[9917-10129]:FieldDeclaration[9917-10129]"
  }, {
    "left" : "stack",
    "right" : "stack",
    "info" : "FieldDeclaration[10225-10259]:FieldDeclaration[10225-10259]"
  }, {
    "left" : "stackSize",
    "right" : "stackSize",
    "info" : "FieldDeclaration[10262-10288]:FieldDeclaration[10262-10288]"
  }, {
    "left" : "pathNames",
    "right" : "pathNames",
    "info" : "FieldDeclaration[10814-10858]:FieldDeclaration[10814-10858]"
  }, {
    "left" : "pathIndices",
    "right" : "pathIndices",
    "info" : "FieldDeclaration[10861-10901]:FieldDeclaration[10861-10901]"
  }, {
    "left" : "public JsonReader(in )",
    "right" : "public JsonReader(in )",
    "info" : "MethodDeclaration[10905-11127]:MethodDeclaration[10905-11127]"
  }, {
    "left" : "public setLenient(lenient boolean) : void",
    "right" : "public setLenient(lenient boolean) : void",
    "info" : "MethodDeclaration[11131-12766]:MethodDeclaration[11131-12766]"
  }, {
    "left" : "public isLenient() : boolean",
    "right" : "public isLenient() : boolean",
    "info" : "MethodDeclaration[12770-12904]:MethodDeclaration[12770-12904]"
  }, {
    "left" : "public beginArray() : void",
    "right" : "public beginArray() : void",
    "info" : "MethodDeclaration[12908-13406]:MethodDeclaration[12908-13406]"
  }, {
    "left" : "public endArray() : void",
    "right" : "public endArray() : void",
    "info" : "MethodDeclaration[13410-13884]:MethodDeclaration[13410-13884]"
  }, {
    "left" : "public beginObject() : void",
    "right" : "public beginObject() : void",
    "info" : "MethodDeclaration[13888-14353]:MethodDeclaration[13888-14353]"
  }, {
    "left" : "public endObject() : void",
    "right" : "public endObject() : void",
    "info" : "MethodDeclaration[14357-14934]:MethodDeclaration[14357-14934]"
  }, {
    "left" : "public hasNext() : boolean",
    "right" : "public hasNext() : boolean",
    "info" : "MethodDeclaration[14938-15203]:MethodDeclaration[14938-15203]"
  }, {
    "left" : "public peek() : ",
    "right" : "public peek() : ",
    "info" : "MethodDeclaration[15207-16270]:MethodDeclaration[15207-16270]"
  }, {
    "left" : "package doPeek() : int",
    "right" : "package doPeek() : int",
    "info" : "MethodDeclaration[16274-20255]:MethodDeclaration[16274-20255]"
  }, {
    "left" : "private peekKeyword() : int",
    "right" : "private peekKeyword() : int",
    "info" : "MethodDeclaration[20259-21548]:MethodDeclaration[20259-21548]"
  }, {
    "left" : "private peekNumber() : int",
    "right" : "private peekNumber() : int",
    "info" : "MethodDeclaration[21552-24667]:MethodDeclaration[21552-24700]"
  }, {
    "left" : "private isLiteral(c char) : boolean",
    "right" : "private isLiteral(c char) : boolean",
    "info" : "MethodDeclaration[24671-25071]:MethodDeclaration[24704-25104]"
  }, {
    "left" : "public nextName() : ",
    "right" : "public nextName() : ",
    "info" : "MethodDeclaration[25075-25890]:MethodDeclaration[25108-25923]"
  }, {
    "left" : "public nextString() : ",
    "right" : "public nextString() : ",
    "info" : "MethodDeclaration[25894-27083]:MethodDeclaration[25927-27116]"
  }, {
    "left" : "public nextBoolean() : boolean",
    "right" : "public nextBoolean() : boolean",
    "info" : "MethodDeclaration[27087-27790]:MethodDeclaration[27120-27823]"
  }, {
    "left" : "public nextNull() : void",
    "right" : "public nextNull() : void",
    "info" : "MethodDeclaration[27794-28333]:MethodDeclaration[27827-28366]"
  }, {
    "left" : "public nextDouble() : double",
    "right" : "public nextDouble() : double",
    "info" : "MethodDeclaration[28337-29983]:MethodDeclaration[28370-30016]"
  }, {
    "left" : "public nextLong() : long",
    "right" : "public nextLong() : long",
    "info" : "MethodDeclaration[29987-32013]:MethodDeclaration[30020-32046]"
  }, {
    "left" : "private nextQuotedValue(quote char) : ",
    "right" : "private nextQuotedValue(quote char) : ",
    "info" : "MethodDeclaration[32017-33969]:MethodDeclaration[32050-34002]"
  }, {
    "left" : "private nextUnquotedValue() : ",
    "right" : "private nextUnquotedValue() : ",
    "info" : "MethodDeclaration[33973-35399]:MethodDeclaration[34006-35432]"
  }, {
    "left" : "private skipQuotedValue(quote char) : void",
    "right" : "private skipQuotedValue(quote char) : void",
    "info" : "MethodDeclaration[35403-36148]:MethodDeclaration[35436-36181]"
  }, {
    "left" : "private skipUnquotedValue() : void",
    "right" : "private skipUnquotedValue() : void",
    "info" : "MethodDeclaration[36152-36743]:MethodDeclaration[36185-36776]"
  }, {
    "left" : "public nextInt() : int",
    "right" : "public nextInt() : int",
    "info" : "MethodDeclaration[36747-39000]:MethodDeclaration[36780-39033]"
  }, {
    "left" : "public close() : void",
    "right" : "public close() : void",
    "info" : "MethodDeclaration[39004-39226]:MethodDeclaration[39037-39259]"
  }, {
    "left" : "public skipValue() : void",
    "right" : "public skipValue() : void",
    "info" : "MethodDeclaration[39230-40496]:MethodDeclaration[39263-40529]"
  }, {
    "left" : "private push(newTop int) : void",
    "right" : "private push(newTop int) : void",
    "info" : "MethodDeclaration[40500-41054]:MethodDeclaration[40533-41087]"
  }, {
    "left" : "private fillBuffer(minimum int) : boolean",
    "right" : "private fillBuffer(minimum int) : boolean",
    "info" : "MethodDeclaration[41058-41928]:MethodDeclaration[41091-41961]"
  }, {
    "left" : "private nextNonWhitespace(throwOnEof boolean) : int",
    "right" : "private nextNonWhitespace(throwOnEof boolean) : int",
    "info" : "MethodDeclaration[41932-44578]:MethodDeclaration[41965-44611]"
  }, {
    "left" : "private checkLenient() : void",
    "right" : "private checkLenient() : void",
    "info" : "MethodDeclaration[44582-44745]:MethodDeclaration[44615-44778]"
  }, {
    "left" : "private skipToEndOfLine() : void",
    "right" : "private skipToEndOfLine() : void",
    "info" : "MethodDeclaration[44749-45202]:MethodDeclaration[44782-45235]"
  }, {
    "left" : "private skipTo(toFind ) : boolean",
    "right" : "private skipTo(toFind ) : boolean",
    "info" : "MethodDeclaration[45206-45743]:MethodDeclaration[45239-45776]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[45747-45845]:MethodDeclaration[45780-45878]"
  }, {
    "left" : "private locationString() : ",
    "right" : "private locationString() : ",
    "info" : "MethodDeclaration[45849-46031]:MethodDeclaration[45882-46064]"
  }, {
    "left" : "public getPath() : ",
    "right" : "public getPath() : ",
    "info" : "MethodDeclaration[46035-46927]:MethodDeclaration[46068-46960]"
  }, {
    "left" : "private readEscapeCharacter() : char",
    "right" : "private readEscapeCharacter() : char",
    "info" : "MethodDeclaration[46931-48678]:MethodDeclaration[46964-48711]"
  }, {
    "left" : "private syntaxError(message ) : ",
    "right" : "private syntaxError(message ) : ",
    "info" : "MethodDeclaration[48682-48941]:MethodDeclaration[48715-48974]"
  }, {
    "left" : "private consumeNonExecutePrefix() : void",
    "right" : "private consumeNonExecutePrefix() : void",
    "info" : "MethodDeclaration[48945-49520]:MethodDeclaration[48978-49553]"
  }, {
    "left" : "public promoteNameToValue(reader ) : void",
    "right" : "public promoteNameToValue(reader ) : void",
    "info" : "MethodDeclaration[49612-50378]:MethodDeclaration[49645-50411]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7196-7202]:Modifier[7196-7202]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7203-7208]:TYPE_DECLARATION_KIND[7203-7208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10291-10347]:Block[10291-10347]"
  }, {
    "left" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
    "right" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
    "info" : "ExpressionStatement[10297-10343]:ExpressionStatement[10297-10343]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10995-11001]:Modifier[10995-11001]"
  }, {
    "left" : "JsonReader",
    "right" : "JsonReader",
    "info" : "SimpleName[11002-11012]:SimpleName[11002-11012]"
  }, {
    "left" : "Reader in",
    "right" : "Reader in",
    "info" : "SingleVariableDeclaration[11013-11022]:SingleVariableDeclaration[11013-11022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11024-11127]:Block[11024-11127]"
  }, {
    "left" : "if (in == null)",
    "right" : "if (in == null)",
    "info" : "IfStatement[11030-11105]:IfStatement[11030-11105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11046-11105]:Block[11046-11105]"
  }, {
    "left" : "throw new NullPointerException(\"in == null\");",
    "right" : "throw new NullPointerException(\"in == null\");",
    "info" : "ThrowStatement[11054-11099]:ThrowStatement[11054-11099]"
  }, {
    "left" : "this.in = in;",
    "right" : "this.in = in;",
    "info" : "ExpressionStatement[11110-11123]:ExpressionStatement[11110-11123]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12687-12693]:Modifier[12687-12693]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12694-12699]:Modifier[12694-12699]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12700-12704]:PrimitiveType[12700-12704]"
  }, {
    "left" : "setLenient",
    "right" : "setLenient",
    "info" : "SimpleName[12705-12715]:SimpleName[12705-12715]"
  }, {
    "left" : "boolean lenient",
    "right" : "boolean lenient",
    "info" : "SingleVariableDeclaration[12716-12731]:SingleVariableDeclaration[12716-12731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12733-12766]:Block[12733-12766]"
  }, {
    "left" : "this.lenient = lenient;",
    "right" : "this.lenient = lenient;",
    "info" : "ExpressionStatement[12739-12762]:ExpressionStatement[12739-12762]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12846-12852]:Modifier[12846-12852]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12853-12858]:Modifier[12853-12858]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12859-12866]:PrimitiveType[12859-12866]"
  }, {
    "left" : "isLenient",
    "right" : "isLenient",
    "info" : "SimpleName[12867-12876]:SimpleName[12867-12876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12879-12904]:Block[12879-12904]"
  }, {
    "left" : "return lenient;",
    "right" : "return lenient;",
    "info" : "ReturnStatement[12885-12900]:ReturnStatement[12885-12900]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13028-13034]:Modifier[13028-13034]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13035-13039]:PrimitiveType[13035-13039]"
  }, {
    "left" : "beginArray",
    "right" : "beginArray",
    "info" : "SimpleName[13040-13050]:SimpleName[13040-13050]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13060-13071]:SimpleType[13060-13071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13072-13406]:Block[13072-13406]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[13078-13093]:VariableDeclarationStatement[13078-13093]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[13098-13147]:IfStatement[13098-13147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13120-13147]:Block[13120-13147]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[13128-13141]:ExpressionStatement[13128-13141]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_ARRAY)",
    "right" : "if (p == PEEKED_BEGIN_ARRAY)",
    "info" : "IfStatement[13152-13402]:IfStatement[13152-13402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13181-13289]:Block[13181-13289]"
  }, {
    "left" : "push(JsonScope.EMPTY_ARRAY);",
    "right" : "push(JsonScope.EMPTY_ARRAY);",
    "info" : "ExpressionStatement[13189-13217]:ExpressionStatement[13189-13217]"
  }, {
    "left" : "pathIndices[stackSize - 1] = 0;",
    "right" : "pathIndices[stackSize - 1] = 0;",
    "info" : "ExpressionStatement[13224-13255]:ExpressionStatement[13224-13255]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[13262-13283]:ExpressionStatement[13262-13283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13295-13402]:Block[13295-13402]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek() + locationString());",
    "info" : "ThrowStatement[13303-13396]:ThrowStatement[13303-13396]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13530-13536]:Modifier[13530-13536]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13537-13541]:PrimitiveType[13537-13541]"
  }, {
    "left" : "endArray",
    "right" : "endArray",
    "info" : "SimpleName[13542-13550]:SimpleName[13542-13550]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13560-13571]:SimpleType[13560-13571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13572-13884]:Block[13572-13884]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[13578-13593]:VariableDeclarationStatement[13578-13593]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[13598-13647]:IfStatement[13598-13647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13620-13647]:Block[13620-13647]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[13628-13641]:ExpressionStatement[13628-13641]"
  }, {
    "left" : "if (p == PEEKED_END_ARRAY)",
    "right" : "if (p == PEEKED_END_ARRAY)",
    "info" : "IfStatement[13652-13880]:IfStatement[13652-13880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13679-13769]:Block[13679-13769]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[13687-13699]:ExpressionStatement[13687-13699]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[13706-13735]:ExpressionStatement[13706-13735]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[13742-13763]:ExpressionStatement[13742-13763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13775-13880]:Block[13775-13880]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());",
    "info" : "ThrowStatement[13783-13874]:ThrowStatement[13783-13874]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14009-14015]:Modifier[14009-14015]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14016-14020]:PrimitiveType[14016-14020]"
  }, {
    "left" : "beginObject",
    "right" : "beginObject",
    "info" : "SimpleName[14021-14032]:SimpleName[14021-14032]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14042-14053]:SimpleType[14042-14053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14054-14353]:Block[14054-14353]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[14060-14075]:VariableDeclarationStatement[14060-14075]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[14080-14129]:IfStatement[14080-14129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14102-14129]:Block[14102-14129]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[14110-14123]:ExpressionStatement[14110-14123]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_OBJECT)",
    "right" : "if (p == PEEKED_BEGIN_OBJECT)",
    "info" : "IfStatement[14134-14349]:IfStatement[14134-14349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14164-14235]:Block[14164-14235]"
  }, {
    "left" : "push(JsonScope.EMPTY_OBJECT);",
    "right" : "push(JsonScope.EMPTY_OBJECT);",
    "info" : "ExpressionStatement[14172-14201]:ExpressionStatement[14172-14201]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[14208-14229]:ExpressionStatement[14208-14229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14241-14349]:Block[14241-14349]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());",
    "info" : "ThrowStatement[14249-14343]:ThrowStatement[14249-14343]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14478-14484]:Modifier[14478-14484]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14485-14489]:PrimitiveType[14485-14489]"
  }, {
    "left" : "endObject",
    "right" : "endObject",
    "info" : "SimpleName[14490-14499]:SimpleName[14490-14499]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14509-14520]:SimpleType[14509-14520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14521-14934]:Block[14521-14934]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[14527-14542]:VariableDeclarationStatement[14527-14542]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[14547-14596]:IfStatement[14547-14596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14569-14596]:Block[14569-14596]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[14577-14590]:ExpressionStatement[14577-14590]"
  }, {
    "left" : "if (p == PEEKED_END_OBJECT)",
    "right" : "if (p == PEEKED_END_OBJECT)",
    "info" : "IfStatement[14601-14930]:IfStatement[14601-14930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14629-14818]:Block[14629-14818]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[14637-14649]:ExpressionStatement[14637-14649]"
  }, {
    "left" : "pathNames[stackSize] = null;",
    "right" : "pathNames[stackSize] = null;",
    "info" : "ExpressionStatement[14656-14684]:ExpressionStatement[14656-14684]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[14755-14784]:ExpressionStatement[14755-14784]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[14791-14812]:ExpressionStatement[14791-14812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14824-14930]:Block[14824-14930]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek() + locationString());",
    "info" : "ThrowStatement[14832-14924]:ThrowStatement[14832-14924]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15020-15026]:Modifier[15020-15026]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15027-15034]:PrimitiveType[15027-15034]"
  }, {
    "left" : "hasNext",
    "right" : "hasNext",
    "info" : "SimpleName[15035-15042]:SimpleName[15035-15042]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15052-15063]:SimpleType[15052-15063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15064-15203]:Block[15064-15203]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[15070-15085]:VariableDeclarationStatement[15070-15085]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[15090-15139]:IfStatement[15090-15139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15112-15139]:Block[15112-15139]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[15120-15133]:ExpressionStatement[15120-15133]"
  }, {
    "left" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
    "right" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[15144-15199]:ReturnStatement[15144-15199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15281-15287]:Modifier[15281-15287]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[15288-15297]:SimpleType[15288-15297]"
  }, {
    "left" : "peek",
    "right" : "peek",
    "info" : "SimpleName[15298-15302]:SimpleName[15298-15302]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15312-15323]:SimpleType[15312-15323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15324-16270]:Block[15324-16270]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[15330-15345]:VariableDeclarationStatement[15330-15345]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[15350-15399]:IfStatement[15350-15399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15372-15399]:Block[15372-15399]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[15380-15393]:ExpressionStatement[15380-15393]"
  }, {
    "left" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
    "right" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
    "info" : "SwitchStatement[15405-16266]:SwitchStatement[15405-16266]"
  }, {
    "left" : "case PEEKED_BEGIN_OBJECT:",
    "right" : "case PEEKED_BEGIN_OBJECT:",
    "info" : "SwitchCase[15422-15447]:SwitchCase[15422-15447]"
  }, {
    "left" : "return JsonToken.BEGIN_OBJECT;",
    "right" : "return JsonToken.BEGIN_OBJECT;",
    "info" : "ReturnStatement[15454-15484]:ReturnStatement[15454-15484]"
  }, {
    "left" : "case PEEKED_END_OBJECT:",
    "right" : "case PEEKED_END_OBJECT:",
    "info" : "SwitchCase[15489-15512]:SwitchCase[15489-15512]"
  }, {
    "left" : "return JsonToken.END_OBJECT;",
    "right" : "return JsonToken.END_OBJECT;",
    "info" : "ReturnStatement[15519-15547]:ReturnStatement[15519-15547]"
  }, {
    "left" : "case PEEKED_BEGIN_ARRAY:",
    "right" : "case PEEKED_BEGIN_ARRAY:",
    "info" : "SwitchCase[15552-15576]:SwitchCase[15552-15576]"
  }, {
    "left" : "return JsonToken.BEGIN_ARRAY;",
    "right" : "return JsonToken.BEGIN_ARRAY;",
    "info" : "ReturnStatement[15583-15612]:ReturnStatement[15583-15612]"
  }, {
    "left" : "case PEEKED_END_ARRAY:",
    "right" : "case PEEKED_END_ARRAY:",
    "info" : "SwitchCase[15617-15639]:SwitchCase[15617-15639]"
  }, {
    "left" : "return JsonToken.END_ARRAY;",
    "right" : "return JsonToken.END_ARRAY;",
    "info" : "ReturnStatement[15646-15673]:ReturnStatement[15646-15673]"
  }, {
    "left" : "case PEEKED_SINGLE_QUOTED_NAME:",
    "right" : "case PEEKED_SINGLE_QUOTED_NAME:",
    "info" : "SwitchCase[15678-15709]:SwitchCase[15678-15709]"
  }, {
    "left" : "case PEEKED_DOUBLE_QUOTED_NAME:",
    "right" : "case PEEKED_DOUBLE_QUOTED_NAME:",
    "info" : "SwitchCase[15714-15745]:SwitchCase[15714-15745]"
  }, {
    "left" : "case PEEKED_UNQUOTED_NAME:",
    "right" : "case PEEKED_UNQUOTED_NAME:",
    "info" : "SwitchCase[15750-15776]:SwitchCase[15750-15776]"
  }, {
    "left" : "return JsonToken.NAME;",
    "right" : "return JsonToken.NAME;",
    "info" : "ReturnStatement[15783-15805]:ReturnStatement[15783-15805]"
  }, {
    "left" : "case PEEKED_TRUE:",
    "right" : "case PEEKED_TRUE:",
    "info" : "SwitchCase[15810-15827]:SwitchCase[15810-15827]"
  }, {
    "left" : "case PEEKED_FALSE:",
    "right" : "case PEEKED_FALSE:",
    "info" : "SwitchCase[15832-15850]:SwitchCase[15832-15850]"
  }, {
    "left" : "return JsonToken.BOOLEAN;",
    "right" : "return JsonToken.BOOLEAN;",
    "info" : "ReturnStatement[15857-15882]:ReturnStatement[15857-15882]"
  }, {
    "left" : "case PEEKED_NULL:",
    "right" : "case PEEKED_NULL:",
    "info" : "SwitchCase[15887-15904]:SwitchCase[15887-15904]"
  }, {
    "left" : "return JsonToken.NULL;",
    "right" : "return JsonToken.NULL;",
    "info" : "ReturnStatement[15911-15933]:ReturnStatement[15911-15933]"
  }, {
    "left" : "case PEEKED_SINGLE_QUOTED:",
    "right" : "case PEEKED_SINGLE_QUOTED:",
    "info" : "SwitchCase[15938-15964]:SwitchCase[15938-15964]"
  }, {
    "left" : "case PEEKED_DOUBLE_QUOTED:",
    "right" : "case PEEKED_DOUBLE_QUOTED:",
    "info" : "SwitchCase[15969-15995]:SwitchCase[15969-15995]"
  }, {
    "left" : "case PEEKED_UNQUOTED:",
    "right" : "case PEEKED_UNQUOTED:",
    "info" : "SwitchCase[16000-16021]:SwitchCase[16000-16021]"
  }, {
    "left" : "case PEEKED_BUFFERED:",
    "right" : "case PEEKED_BUFFERED:",
    "info" : "SwitchCase[16026-16047]:SwitchCase[16026-16047]"
  }, {
    "left" : "return JsonToken.STRING;",
    "right" : "return JsonToken.STRING;",
    "info" : "ReturnStatement[16054-16078]:ReturnStatement[16054-16078]"
  }, {
    "left" : "case PEEKED_LONG:",
    "right" : "case PEEKED_LONG:",
    "info" : "SwitchCase[16083-16100]:SwitchCase[16083-16100]"
  }, {
    "left" : "case PEEKED_NUMBER:",
    "right" : "case PEEKED_NUMBER:",
    "info" : "SwitchCase[16105-16124]:SwitchCase[16105-16124]"
  }, {
    "left" : "return JsonToken.NUMBER;",
    "right" : "return JsonToken.NUMBER;",
    "info" : "ReturnStatement[16131-16155]:ReturnStatement[16131-16155]"
  }, {
    "left" : "case PEEKED_EOF:",
    "right" : "case PEEKED_EOF:",
    "info" : "SwitchCase[16160-16176]:SwitchCase[16160-16176]"
  }, {
    "left" : "return JsonToken.END_DOCUMENT;",
    "right" : "return JsonToken.END_DOCUMENT;",
    "info" : "ReturnStatement[16183-16213]:ReturnStatement[16183-16213]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16218-16226]:SwitchCase[16218-16226]"
  }, {
    "left" : "throw new AssertionError();",
    "right" : "throw new AssertionError();",
    "info" : "ThrowStatement[16233-16260]:ThrowStatement[16233-16260]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16274-16277]:PrimitiveType[16274-16277]"
  }, {
    "left" : "doPeek",
    "right" : "doPeek",
    "info" : "SimpleName[16278-16284]:SimpleName[16278-16284]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[16294-16305]:SimpleType[16294-16305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16306-20255]:Block[16306-20255]"
  }, {
    "left" : "int peekStack = stack[stackSize - 1];",
    "right" : "int peekStack = stack[stackSize - 1];",
    "info" : "VariableDeclarationStatement[16312-16349]:VariableDeclarationStatement[16312-16349]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "info" : "IfStatement[16354-19048]:IfStatement[16354-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16394-16456]:Block[16394-16456]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
    "info" : "ExpressionStatement[16402-16450]:ExpressionStatement[16402-16450]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
    "info" : "IfStatement[16462-19048]:IfStatement[16462-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16505-16838]:Block[16505-16838]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[16564-16596]:VariableDeclarationStatement[16564-16596]"
  }, {
    "left" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
    "right" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
    "info" : "SwitchStatement[16603-16832]:SwitchStatement[16603-16832]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[16622-16631]:SwitchCase[16622-16631]"
  }, {
    "left" : "return peeked = PEEKED_END_ARRAY;",
    "right" : "return peeked = PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[16640-16673]:ReturnStatement[16640-16673]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[16680-16689]:SwitchCase[16680-16689]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[16698-16713]:ExpressionStatement[16698-16713]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[16736-16745]:SwitchCase[16736-16745]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16754-16760]:BreakStatement[16754-16760]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16767-16775]:SwitchCase[16767-16775]"
  }, {
    "left" : "throw syntaxError(\"Unterminated array\");",
    "right" : "throw syntaxError(\"Unterminated array\");",
    "info" : "ThrowStatement[16784-16824]:ThrowStatement[16784-16824]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[16844-19048]:IfStatement[16844-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16927-18081]:Block[16927-18081]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
    "right" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
    "info" : "ExpressionStatement[16935-16982]:ExpressionStatement[16935-16982]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[17040-17392]:IfStatement[17040-17392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17084-17392]:Block[17084-17392]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[17094-17126]:VariableDeclarationStatement[17094-17126]"
  }, {
    "left" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
    "right" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
    "info" : "SwitchStatement[17135-17384]:SwitchStatement[17135-17384]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[17156-17165]:SwitchCase[17156-17165]"
  }, {
    "left" : "return peeked = PEEKED_END_OBJECT;",
    "right" : "return peeked = PEEKED_END_OBJECT;",
    "info" : "ReturnStatement[17176-17210]:ReturnStatement[17176-17210]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[17219-17228]:SwitchCase[17219-17228]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17239-17254]:ExpressionStatement[17239-17254]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[17279-17288]:SwitchCase[17279-17288]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17299-17305]:BreakStatement[17299-17305]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[17314-17322]:SwitchCase[17314-17322]"
  }, {
    "left" : "throw syntaxError(\"Unterminated object\");",
    "right" : "throw syntaxError(\"Unterminated object\");",
    "info" : "ThrowStatement[17333-17374]:ThrowStatement[17333-17374]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[17399-17431]:VariableDeclarationStatement[17399-17431]"
  }, {
    "left" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
    "right" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
    "info" : "SwitchStatement[17438-18075]:SwitchStatement[17438-18075]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[17457-17466]:SwitchCase[17457-17466]"
  }, {
    "left" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
    "right" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
    "info" : "ReturnStatement[17475-17517]:ReturnStatement[17475-17517]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[17524-17534]:SwitchCase[17524-17534]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17543-17558]:ExpressionStatement[17543-17558]"
  }, {
    "left" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
    "right" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
    "info" : "ReturnStatement[17567-17609]:ReturnStatement[17567-17609]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[17616-17625]:SwitchCase[17616-17625]"
  }, {
    "left" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[17634-17797]:IfStatement[17634-17797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17678-17734]:Block[17678-17734]"
  }, {
    "left" : "return peeked = PEEKED_END_OBJECT;",
    "right" : "return peeked = PEEKED_END_OBJECT;",
    "info" : "ReturnStatement[17690-17724]:ReturnStatement[17690-17724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17740-17797]:Block[17740-17797]"
  }, {
    "left" : "throw syntaxError(\"Expected name\");",
    "right" : "throw syntaxError(\"Expected name\");",
    "info" : "ThrowStatement[17752-17787]:ThrowStatement[17752-17787]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[17804-17812]:SwitchCase[17804-17812]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17821-17836]:ExpressionStatement[17821-17836]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[17845-17851]:ExpressionStatement[17845-17851]"
  }, {
    "left" : "if (isLiteral((char) c))",
    "right" : "if (isLiteral((char) c))",
    "info" : "IfStatement[17920-18067]:IfStatement[17920-18067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17945-18004]:Block[17945-18004]"
  }, {
    "left" : "return peeked = PEEKED_UNQUOTED_NAME;",
    "right" : "return peeked = PEEKED_UNQUOTED_NAME;",
    "info" : "ReturnStatement[17957-17994]:ReturnStatement[17957-17994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18010-18067]:Block[18010-18067]"
  }, {
    "left" : "throw syntaxError(\"Expected name\");",
    "right" : "throw syntaxError(\"Expected name\");",
    "info" : "ThrowStatement[18022-18057]:ThrowStatement[18022-18057]"
  }, {
    "left" : "if (peekStack == JsonScope.DANGLING_NAME)",
    "right" : "if (peekStack == JsonScope.DANGLING_NAME)",
    "info" : "IfStatement[18087-19048]:IfStatement[18087-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18129-18541]:Block[18129-18541]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
    "info" : "ExpressionStatement[18137-18186]:ExpressionStatement[18137-18186]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[18237-18269]:VariableDeclarationStatement[18237-18269]"
  }, {
    "left" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
    "right" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
    "info" : "SwitchStatement[18276-18535]:SwitchStatement[18276-18535]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[18295-18304]:SwitchCase[18295-18304]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18313-18319]:BreakStatement[18313-18319]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[18326-18335]:SwitchCase[18326-18335]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[18344-18359]:ExpressionStatement[18344-18359]"
  }, {
    "left" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
    "right" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
    "info" : "IfStatement[18368-18454]:IfStatement[18368-18454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18426-18454]:Block[18426-18454]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[18438-18444]:ExpressionStatement[18438-18444]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18463-18469]:BreakStatement[18463-18469]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[18476-18484]:SwitchCase[18476-18484]"
  }, {
    "left" : "throw syntaxError(\"Expected ':'\");",
    "right" : "throw syntaxError(\"Expected ':'\");",
    "info" : "ThrowStatement[18493-18527]:ThrowStatement[18493-18527]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
    "right" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
    "info" : "IfStatement[18547-19048]:IfStatement[18547-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18590-18719]:Block[18590-18719]"
  }, {
    "left" : "if (lenient)",
    "right" : "if (lenient)",
    "info" : "IfStatement[18598-18655]:IfStatement[18598-18655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18611-18655]:Block[18611-18655]"
  }, {
    "left" : "consumeNonExecutePrefix();",
    "right" : "consumeNonExecutePrefix();",
    "info" : "ExpressionStatement[18621-18647]:ExpressionStatement[18621-18647]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
    "info" : "ExpressionStatement[18662-18713]:ExpressionStatement[18662-18713]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
    "info" : "IfStatement[18725-19048]:IfStatement[18725-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18771-18937]:Block[18771-18937]"
  }, {
    "left" : "int c = nextNonWhitespace(false);",
    "right" : "int c = nextNonWhitespace(false);",
    "info" : "VariableDeclarationStatement[18779-18812]:VariableDeclarationStatement[18779-18812]"
  }, {
    "left" : "if (c == -1)",
    "right" : "if (c == -1)",
    "info" : "IfStatement[18819-18931]:IfStatement[18819-18931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18832-18877]:Block[18832-18877]"
  }, {
    "left" : "return peeked = PEEKED_EOF;",
    "right" : "return peeked = PEEKED_EOF;",
    "info" : "ReturnStatement[18842-18869]:ReturnStatement[18842-18869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18883-18931]:Block[18883-18931]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[18893-18908]:ExpressionStatement[18893-18908]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[18917-18923]:ExpressionStatement[18917-18923]"
  }, {
    "left" : "if (peekStack == JsonScope.CLOSED)",
    "right" : "if (peekStack == JsonScope.CLOSED)",
    "info" : "IfStatement[18943-19048]:IfStatement[18943-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18978-19048]:Block[18978-19048]"
  }, {
    "left" : "throw new IllegalStateException(\"JsonReader is closed\");",
    "right" : "throw new IllegalStateException(\"JsonReader is closed\");",
    "info" : "ThrowStatement[18986-19042]:ThrowStatement[18986-19042]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[19054-19086]:VariableDeclarationStatement[19054-19086]"
  }, {
    "left" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
    "right" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
    "info" : "SwitchStatement[19091-19927]:SwitchStatement[19091-19927]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[19108-19117]:SwitchCase[19108-19117]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "info" : "IfStatement[19124-19215]:IfStatement[19124-19215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19164-19215]:Block[19164-19215]"
  }, {
    "left" : "return peeked = PEEKED_END_ARRAY;",
    "right" : "return peeked = PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[19174-19207]:ReturnStatement[19174-19207]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[19257-19266]:SwitchCase[19257-19266]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[19271-19280]:SwitchCase[19271-19280]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
    "info" : "IfStatement[19358-19586]:IfStatement[19358-19586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19439-19524]:Block[19439-19524]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[19449-19464]:ExpressionStatement[19449-19464]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[19473-19479]:ExpressionStatement[19473-19479]"
  }, {
    "left" : "return peeked = PEEKED_NULL;",
    "right" : "return peeked = PEEKED_NULL;",
    "info" : "ReturnStatement[19488-19516]:ReturnStatement[19488-19516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19530-19586]:Block[19530-19586]"
  }, {
    "left" : "throw syntaxError(\"Unexpected value\");",
    "right" : "throw syntaxError(\"Unexpected value\");",
    "info" : "ThrowStatement[19540-19578]:ThrowStatement[19540-19578]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[19591-19601]:SwitchCase[19591-19601]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[19608-19623]:ExpressionStatement[19608-19623]"
  }, {
    "left" : "return peeked = PEEKED_SINGLE_QUOTED;",
    "right" : "return peeked = PEEKED_SINGLE_QUOTED;",
    "info" : "ReturnStatement[19630-19667]:ReturnStatement[19630-19667]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[19672-19681]:SwitchCase[19672-19681]"
  }, {
    "left" : "return peeked = PEEKED_DOUBLE_QUOTED;",
    "right" : "return peeked = PEEKED_DOUBLE_QUOTED;",
    "info" : "ReturnStatement[19688-19725]:ReturnStatement[19688-19725]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[19730-19739]:SwitchCase[19730-19739]"
  }, {
    "left" : "return peeked = PEEKED_BEGIN_ARRAY;",
    "right" : "return peeked = PEEKED_BEGIN_ARRAY;",
    "info" : "ReturnStatement[19746-19781]:ReturnStatement[19746-19781]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[19786-19795]:SwitchCase[19786-19795]"
  }, {
    "left" : "return peeked = PEEKED_BEGIN_OBJECT;",
    "right" : "return peeked = PEEKED_BEGIN_OBJECT;",
    "info" : "ReturnStatement[19802-19838]:ReturnStatement[19802-19838]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[19843-19851]:SwitchCase[19843-19851]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[19858-19864]:ExpressionStatement[19858-19864]"
  }, {
    "left" : "int result = peekKeyword();",
    "right" : "int result = peekKeyword();",
    "info" : "VariableDeclarationStatement[19933-19960]:VariableDeclarationStatement[19933-19960]"
  }, {
    "left" : "if (result != PEEKED_NONE)",
    "right" : "if (result != PEEKED_NONE)",
    "info" : "IfStatement[19965-20020]:IfStatement[19965-20020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19992-20020]:Block[19992-20020]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[20000-20014]:ReturnStatement[20000-20014]"
  }, {
    "left" : "result = peekNumber();",
    "right" : "result = peekNumber();",
    "info" : "ExpressionStatement[20026-20048]:ExpressionStatement[20026-20048]"
  }, {
    "left" : "if (result != PEEKED_NONE)",
    "right" : "if (result != PEEKED_NONE)",
    "info" : "IfStatement[20053-20108]:IfStatement[20053-20108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20080-20108]:Block[20080-20108]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[20088-20102]:ReturnStatement[20088-20102]"
  }, {
    "left" : "if (!isLiteral(buffer[pos]))",
    "right" : "if (!isLiteral(buffer[pos]))",
    "info" : "IfStatement[20114-20193]:IfStatement[20114-20193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20143-20193]:Block[20143-20193]"
  }, {
    "left" : "throw syntaxError(\"Expected value\");",
    "right" : "throw syntaxError(\"Expected value\");",
    "info" : "ThrowStatement[20151-20187]:ThrowStatement[20151-20187]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[20199-20214]:ExpressionStatement[20199-20214]"
  }, {
    "left" : "return peeked = PEEKED_UNQUOTED;",
    "right" : "return peeked = PEEKED_UNQUOTED;",
    "info" : "ReturnStatement[20219-20251]:ReturnStatement[20219-20251]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20259-20266]:Modifier[20259-20266]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20267-20270]:PrimitiveType[20267-20270]"
  }, {
    "left" : "peekKeyword",
    "right" : "peekKeyword",
    "info" : "SimpleName[20271-20282]:SimpleName[20271-20282]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[20292-20303]:SimpleType[20292-20303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20304-21548]:Block[20304-21548]"
  }, {
    "left" : "char c = buffer[pos];",
    "right" : "char c = buffer[pos];",
    "info" : "VariableDeclarationStatement[20389-20410]:VariableDeclarationStatement[20389-20410]"
  }, {
    "left" : "String keyword;",
    "right" : "String keyword;",
    "info" : "VariableDeclarationStatement[20415-20430]:VariableDeclarationStatement[20415-20430]"
  }, {
    "left" : "String keywordUpper;",
    "right" : "String keywordUpper;",
    "info" : "VariableDeclarationStatement[20435-20455]:VariableDeclarationStatement[20435-20455]"
  }, {
    "left" : "int peeking;",
    "right" : "int peeking;",
    "info" : "VariableDeclarationStatement[20460-20472]:VariableDeclarationStatement[20460-20472]"
  }, {
    "left" : "if (c == 't' || c == 'T')",
    "right" : "if (c == 't' || c == 'T')",
    "info" : "IfStatement[20477-20876]:IfStatement[20477-20876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20503-20592]:Block[20503-20592]"
  }, {
    "left" : "keyword = \"true\";",
    "right" : "keyword = \"true\";",
    "info" : "ExpressionStatement[20511-20528]:ExpressionStatement[20511-20528]"
  }, {
    "left" : "keywordUpper = \"TRUE\";",
    "right" : "keywordUpper = \"TRUE\";",
    "info" : "ExpressionStatement[20535-20557]:ExpressionStatement[20535-20557]"
  }, {
    "left" : "peeking = PEEKED_TRUE;",
    "right" : "peeking = PEEKED_TRUE;",
    "info" : "ExpressionStatement[20564-20586]:ExpressionStatement[20564-20586]"
  }, {
    "left" : "if (c == 'f' || c == 'F')",
    "right" : "if (c == 'f' || c == 'F')",
    "info" : "IfStatement[20598-20876]:IfStatement[20598-20876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20624-20716]:Block[20624-20716]"
  }, {
    "left" : "keyword = \"false\";",
    "right" : "keyword = \"false\";",
    "info" : "ExpressionStatement[20632-20650]:ExpressionStatement[20632-20650]"
  }, {
    "left" : "keywordUpper = \"FALSE\";",
    "right" : "keywordUpper = \"FALSE\";",
    "info" : "ExpressionStatement[20657-20680]:ExpressionStatement[20657-20680]"
  }, {
    "left" : "peeking = PEEKED_FALSE;",
    "right" : "peeking = PEEKED_FALSE;",
    "info" : "ExpressionStatement[20687-20710]:ExpressionStatement[20687-20710]"
  }, {
    "left" : "if (c == 'n' || c == 'N')",
    "right" : "if (c == 'n' || c == 'N')",
    "info" : "IfStatement[20722-20876]:IfStatement[20722-20876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20748-20837]:Block[20748-20837]"
  }, {
    "left" : "keyword = \"null\";",
    "right" : "keyword = \"null\";",
    "info" : "ExpressionStatement[20756-20773]:ExpressionStatement[20756-20773]"
  }, {
    "left" : "keywordUpper = \"NULL\";",
    "right" : "keywordUpper = \"NULL\";",
    "info" : "ExpressionStatement[20780-20802]:ExpressionStatement[20780-20802]"
  }, {
    "left" : "peeking = PEEKED_NULL;",
    "right" : "peeking = PEEKED_NULL;",
    "info" : "ExpressionStatement[20809-20831]:ExpressionStatement[20809-20831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20843-20876]:Block[20843-20876]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[20851-20870]:ReturnStatement[20851-20870]"
  }, {
    "left" : "int length = keyword.length();",
    "right" : "int length = keyword.length();",
    "info" : "VariableDeclarationStatement[20939-20969]:VariableDeclarationStatement[20939-20969]"
  }, {
    "left" : "for (int i = 1; i < length; i++)",
    "right" : "for (int i = 1; i < length; i++)",
    "info" : "ForStatement[20974-21232]:ForStatement[20974-21232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21007-21232]:Block[21007-21232]"
  }, {
    "left" : "if (pos + i >= limit && !fillBuffer(i + 1))",
    "right" : "if (pos + i >= limit && !fillBuffer(i + 1))",
    "info" : "IfStatement[21015-21096]:IfStatement[21015-21096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21059-21096]:Block[21059-21096]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21069-21088]:ReturnStatement[21069-21088]"
  }, {
    "left" : "c = buffer[pos + i];",
    "right" : "c = buffer[pos + i];",
    "info" : "ExpressionStatement[21103-21123]:ExpressionStatement[21103-21123]"
  }, {
    "left" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
    "right" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
    "info" : "IfStatement[21130-21226]:IfStatement[21130-21226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21189-21226]:Block[21189-21226]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21199-21218]:ReturnStatement[21199-21218]"
  }, {
    "left" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
    "right" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
    "info" : "IfStatement[21238-21410]:IfStatement[21238-21410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21335-21410]:Block[21335-21410]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21343-21362]:ReturnStatement[21343-21362]"
  }, {
    "left" : "pos += length;",
    "right" : "pos += length;",
    "info" : "ExpressionStatement[21501-21515]:ExpressionStatement[21501-21515]"
  }, {
    "left" : "return peeked = peeking;",
    "right" : "return peeked = peeking;",
    "info" : "ReturnStatement[21520-21544]:ReturnStatement[21520-21544]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21552-21559]:Modifier[21552-21559]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[21560-21563]:PrimitiveType[21560-21563]"
  }, {
    "left" : "peekNumber",
    "right" : "peekNumber",
    "info" : "SimpleName[21564-21574]:SimpleName[21564-21574]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[21584-21595]:SimpleType[21584-21595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21596-24667]:Block[21596-24700]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[21695-21723]:VariableDeclarationStatement[21695-21723]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[21728-21740]:VariableDeclarationStatement[21728-21740]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[21745-21759]:VariableDeclarationStatement[21745-21759]"
  }, {
    "left" : "long value = 0;",
    "right" : "long value = 0;",
    "info" : "VariableDeclarationStatement[21765-21780]:VariableDeclarationStatement[21765-21780]"
  }, {
    "left" : "boolean negative = false;",
    "right" : "boolean negative = false;",
    "info" : "VariableDeclarationStatement[21840-21865]:VariableDeclarationStatement[21840-21865]"
  }, {
    "left" : "boolean fitsInLong = true;",
    "right" : "boolean fitsInLong = true;",
    "info" : "VariableDeclarationStatement[21870-21896]:VariableDeclarationStatement[21870-21896]"
  }, {
    "left" : "int last = NUMBER_CHAR_NONE;",
    "right" : "int last = NUMBER_CHAR_NONE;",
    "info" : "VariableDeclarationStatement[21901-21929]:VariableDeclarationStatement[21901-21929]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[21935-21945]:VariableDeclarationStatement[21935-21945]"
  }, {
    "left" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
    "right" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
    "info" : "LabeledStatement[21951-24152]:LabeledStatement[21951-24152]"
  }, {
    "left" : "for (; true; i++)",
    "right" : "for (; true; i++)",
    "info" : "ForStatement[21975-24152]:ForStatement[21975-24152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21993-24152]:Block[21993-24152]"
  }, {
    "left" : "if (p + i == l)",
    "right" : "if (p + i == l)",
    "info" : "IfStatement[22001-22371]:IfStatement[22001-22371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22017-22371]:Block[22017-22371]"
  }, {
    "left" : "if (i == buffer.length)",
    "right" : "if (i == buffer.length)",
    "info" : "IfStatement[22027-22266]:IfStatement[22027-22266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22051-22266]:Block[22051-22266]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[22237-22256]:ReturnStatement[22237-22256]"
  }, {
    "left" : "if (!fillBuffer(i + 1))",
    "right" : "if (!fillBuffer(i + 1))",
    "info" : "IfStatement[22275-22327]:IfStatement[22275-22327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22299-22327]:Block[22299-22327]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22311-22317]:BreakStatement[22311-22317]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[22336-22344]:ExpressionStatement[22336-22344]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[22353-22363]:ExpressionStatement[22353-22363]"
  }, {
    "left" : "char c = buffer[p + i];",
    "right" : "char c = buffer[p + i];",
    "info" : "VariableDeclarationStatement[22379-22402]:VariableDeclarationStatement[22379-22402]"
  }, {
    "left" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
    "right" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
    "info" : "SwitchStatement[22409-24146]:SwitchStatement[22409-24146]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[22428-22437]:SwitchCase[22428-22437]"
  }, {
    "left" : "if (last == NUMBER_CHAR_NONE)",
    "right" : "if (last == NUMBER_CHAR_NONE)",
    "info" : "IfStatement[22446-22676]:IfStatement[22446-22676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22476-22569]:Block[22476-22569]"
  }, {
    "left" : "negative = true;",
    "right" : "negative = true;",
    "info" : "ExpressionStatement[22488-22504]:ExpressionStatement[22488-22504]"
  }, {
    "left" : "last = NUMBER_CHAR_SIGN;",
    "right" : "last = NUMBER_CHAR_SIGN;",
    "info" : "ExpressionStatement[22515-22539]:ExpressionStatement[22515-22539]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22550-22559]:ContinueStatement[22550-22559]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E)",
    "right" : "if (last == NUMBER_CHAR_EXP_E)",
    "info" : "IfStatement[22575-22676]:IfStatement[22575-22676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22606-22676]:Block[22606-22676]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_SIGN;",
    "right" : "last = NUMBER_CHAR_EXP_SIGN;",
    "info" : "ExpressionStatement[22618-22646]:ExpressionStatement[22618-22646]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22657-22666]:ContinueStatement[22657-22666]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[22685-22704]:ReturnStatement[22685-22704]"
  }, {
    "left" : "case '+':",
    "right" : "case '+':",
    "info" : "SwitchCase[22712-22721]:SwitchCase[22712-22721]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E)",
    "right" : "if (last == NUMBER_CHAR_EXP_E)",
    "info" : "IfStatement[22730-22831]:IfStatement[22730-22831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22761-22831]:Block[22761-22831]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_SIGN;",
    "right" : "last = NUMBER_CHAR_EXP_SIGN;",
    "info" : "ExpressionStatement[22773-22801]:ExpressionStatement[22773-22801]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22812-22821]:ContinueStatement[22812-22821]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[22840-22859]:ReturnStatement[22840-22859]"
  }, {
    "left" : "case 'e':",
    "right" : "case 'e':",
    "info" : "SwitchCase[22867-22876]:SwitchCase[22867-22876]"
  }, {
    "left" : "case 'E':",
    "right" : "case 'E':",
    "info" : "SwitchCase[22883-22892]:SwitchCase[22883-22892]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
    "info" : "IfStatement[22901-23037]:IfStatement[22901-23037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22970-23037]:Block[22970-23037]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_E;",
    "right" : "last = NUMBER_CHAR_EXP_E;",
    "info" : "ExpressionStatement[22982-23007]:ExpressionStatement[22982-23007]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23018-23027]:ContinueStatement[23018-23027]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23046-23065]:ReturnStatement[23046-23065]"
  }, {
    "left" : "case '.':",
    "right" : "case '.':",
    "info" : "SwitchCase[23073-23082]:SwitchCase[23073-23082]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT)",
    "info" : "IfStatement[23091-23191]:IfStatement[23091-23191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23122-23191]:Block[23122-23191]"
  }, {
    "left" : "last = NUMBER_CHAR_DECIMAL;",
    "right" : "last = NUMBER_CHAR_DECIMAL;",
    "info" : "ExpressionStatement[23134-23161]:ExpressionStatement[23134-23161]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23172-23181]:ContinueStatement[23172-23181]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23200-23219]:ReturnStatement[23200-23219]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[23227-23235]:SwitchCase[23227-23235]"
  }, {
    "left" : "if (c < '0' || c > '9')",
    "right" : "if (c < '0' || c > '9')",
    "info" : "IfStatement[23244-23390]:IfStatement[23244-23390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23268-23390]:Block[23268-23390]"
  }, {
    "left" : "if (!isLiteral(c))",
    "right" : "if (!isLiteral(c))",
    "info" : "IfStatement[23280-23350]:IfStatement[23280-23350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23299-23350]:Block[23299-23350]"
  }, {
    "left" : "break charactersOfNumber;",
    "right" : "break charactersOfNumber;",
    "info" : "BreakStatement[23313-23338]:BreakStatement[23313-23338]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23361-23380]:ReturnStatement[23361-23380]"
  }, {
    "left" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
    "right" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
    "info" : "IfStatement[23399-24138]:IfStatement[23399-24138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23457-23534]:Block[23457-23534]"
  }, {
    "left" : "value = -(c - '0');",
    "right" : "value = -(c - '0');",
    "info" : "ExpressionStatement[23469-23488]:ExpressionStatement[23469-23488]"
  }, {
    "left" : "last = NUMBER_CHAR_DIGIT;",
    "right" : "last = NUMBER_CHAR_DIGIT;",
    "info" : "ExpressionStatement[23499-23524]:ExpressionStatement[23499-23524]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT)",
    "info" : "IfStatement[23540-24138]:IfStatement[23540-24138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23571-23923]:Block[23571-23923]"
  }, {
    "left" : "if (value == 0)",
    "right" : "if (value == 0)",
    "info" : "IfStatement[23583-23708]:IfStatement[23583-23708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23599-23708]:Block[23599-23708]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23613-23632]:ReturnStatement[23613-23632]"
  }, {
    "left" : "long newValue = value * 10 - (c - '0');",
    "right" : "long newValue = value * 10 - (c - '0');",
    "info" : "VariableDeclarationStatement[23719-23758]:VariableDeclarationStatement[23719-23758]"
  }, {
    "left" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
    "right" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
    "info" : "ExpressionStatement[23769-23885]:ExpressionStatement[23769-23885]"
  }, {
    "left" : "value = newValue;",
    "right" : "value = newValue;",
    "info" : "ExpressionStatement[23896-23913]:ExpressionStatement[23896-23913]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DECIMAL)",
    "right" : "if (last == NUMBER_CHAR_DECIMAL)",
    "info" : "IfStatement[23929-24138]:IfStatement[23929-24138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23962-24018]:Block[23962-24018]"
  }, {
    "left" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
    "right" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
    "info" : "ExpressionStatement[23974-24008]:ExpressionStatement[23974-24008]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
    "right" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
    "info" : "IfStatement[24024-24138]:IfStatement[24024-24138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24087-24138]:Block[24087-24138]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_DIGIT;",
    "right" : "last = NUMBER_CHAR_EXP_DIGIT;",
    "info" : "ExpressionStatement[24099-24128]:ExpressionStatement[24099-24128]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
    "right" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative))",
    "info" : "IfStatement[24244-24663]:IfStatement[24244-24696]"
  }, {
    "left" : "last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)",
    "right" : "last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)",
    "info" : "InfixExpression[24248-24328]:InfixExpression[24248-24328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24330-24434]:Block[24363-24467]"
  }, {
    "left" : "peekedLong = negative ? value : -value;",
    "right" : "peekedLong = negative ? value : -value;",
    "info" : "ExpressionStatement[24338-24377]:ExpressionStatement[24371-24410]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[24384-24393]:ExpressionStatement[24417-24426]"
  }, {
    "left" : "return peeked = PEEKED_LONG;",
    "right" : "return peeked = PEEKED_LONG;",
    "info" : "ReturnStatement[24400-24428]:ReturnStatement[24433-24461]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
    "info" : "IfStatement[24440-24663]:IfStatement[24473-24696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24550-24624]:Block[24583-24657]"
  }, {
    "left" : "peekedNumberLength = i;",
    "right" : "peekedNumberLength = i;",
    "info" : "ExpressionStatement[24558-24581]:ExpressionStatement[24591-24614]"
  }, {
    "left" : "return peeked = PEEKED_NUMBER;",
    "right" : "return peeked = PEEKED_NUMBER;",
    "info" : "ReturnStatement[24588-24618]:ReturnStatement[24621-24651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24630-24663]:Block[24663-24696]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[24638-24657]:ReturnStatement[24671-24690]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24671-24678]:Modifier[24704-24711]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24679-24686]:PrimitiveType[24712-24719]"
  }, {
    "left" : "isLiteral",
    "right" : "isLiteral",
    "info" : "SimpleName[24687-24696]:SimpleName[24720-24729]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[24697-24703]:SingleVariableDeclaration[24730-24736]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[24712-24723]:SimpleType[24745-24756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24724-25071]:Block[24757-25104]"
  }, {
    "left" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
    "right" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
    "info" : "SwitchStatement[24730-25067]:SwitchStatement[24763-25100]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[24747-24756]:SwitchCase[24780-24789]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[24761-24771]:SwitchCase[24794-24804]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[24776-24785]:SwitchCase[24809-24818]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[24790-24799]:SwitchCase[24823-24832]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[24804-24813]:SwitchCase[24837-24846]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[24820-24835]:ExpressionStatement[24853-24868]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[24856-24865]:SwitchCase[24889-24898]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[24870-24879]:SwitchCase[24903-24912]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[24884-24893]:SwitchCase[24917-24926]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[24898-24907]:SwitchCase[24931-24940]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[24912-24921]:SwitchCase[24945-24954]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[24926-24935]:SwitchCase[24959-24968]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[24940-24949]:SwitchCase[24973-24982]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[24954-24964]:SwitchCase[24987-24997]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[24969-24979]:SwitchCase[25002-25012]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[24984-24994]:SwitchCase[25017-25027]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[24999-25009]:SwitchCase[25032-25042]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25016-25029]:ReturnStatement[25049-25062]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25034-25042]:SwitchCase[25067-25075]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25049-25061]:ReturnStatement[25082-25094]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25304-25310]:Modifier[25337-25343]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[25311-25317]:SimpleType[25344-25350]"
  }, {
    "left" : "nextName",
    "right" : "nextName",
    "info" : "SimpleName[25318-25326]:SimpleName[25351-25359]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[25336-25347]:SimpleType[25369-25380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25348-25890]:Block[25381-25923]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[25354-25369]:VariableDeclarationStatement[25387-25402]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[25374-25423]:IfStatement[25407-25456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25396-25423]:Block[25429-25456]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[25404-25417]:ExpressionStatement[25437-25450]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[25428-25442]:VariableDeclarationStatement[25461-25475]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME)",
    "info" : "IfStatement[25447-25802]:IfStatement[25480-25835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25478-25521]:Block[25511-25554]"
  }, {
    "left" : "result = nextUnquotedValue();",
    "right" : "result = nextUnquotedValue();",
    "info" : "ExpressionStatement[25486-25515]:ExpressionStatement[25519-25548]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[25527-25802]:IfStatement[25560-25835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25563-25608]:Block[25596-25641]"
  }, {
    "left" : "result = nextQuotedValue('\\'');",
    "right" : "result = nextQuotedValue('\\'');",
    "info" : "ExpressionStatement[25571-25602]:ExpressionStatement[25604-25635]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[25614-25802]:IfStatement[25647-25835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25650-25694]:Block[25683-25727]"
  }, {
    "left" : "result = nextQuotedValue('\"');",
    "right" : "result = nextQuotedValue('\"');",
    "info" : "ExpressionStatement[25658-25688]:ExpressionStatement[25691-25721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25700-25802]:Block[25733-25835]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a name but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected a name but was \" + peek() + locationString());",
    "info" : "ThrowStatement[25708-25796]:ThrowStatement[25741-25829]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[25807-25828]:ExpressionStatement[25840-25861]"
  }, {
    "left" : "pathNames[stackSize - 1] = result;",
    "right" : "pathNames[stackSize - 1] = result;",
    "info" : "ExpressionStatement[25833-25867]:ExpressionStatement[25866-25900]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[25872-25886]:ReturnStatement[25905-25919]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26211-26217]:Modifier[26244-26250]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26218-26224]:SimpleType[26251-26257]"
  }, {
    "left" : "nextString",
    "right" : "nextString",
    "info" : "SimpleName[26225-26235]:SimpleName[26258-26268]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[26245-26256]:SimpleType[26278-26289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26257-27083]:Block[26290-27116]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[26263-26278]:VariableDeclarationStatement[26296-26311]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[26283-26332]:IfStatement[26316-26365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26305-26332]:Block[26338-26365]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[26313-26326]:ExpressionStatement[26346-26359]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[26337-26351]:VariableDeclarationStatement[26370-26384]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[26356-27000]:IfStatement[26389-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26382-26425]:Block[26415-26458]"
  }, {
    "left" : "result = nextUnquotedValue();",
    "right" : "result = nextUnquotedValue();",
    "info" : "ExpressionStatement[26390-26419]:ExpressionStatement[26423-26452]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED)",
    "info" : "IfStatement[26431-27000]:IfStatement[26464-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26462-26507]:Block[26495-26540]"
  }, {
    "left" : "result = nextQuotedValue('\\'');",
    "right" : "result = nextQuotedValue('\\'');",
    "info" : "ExpressionStatement[26470-26501]:ExpressionStatement[26503-26534]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED)",
    "info" : "IfStatement[26513-27000]:IfStatement[26546-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26544-26588]:Block[26577-26621]"
  }, {
    "left" : "result = nextQuotedValue('\"');",
    "right" : "result = nextQuotedValue('\"');",
    "info" : "ExpressionStatement[26552-26582]:ExpressionStatement[26585-26615]"
  }, {
    "left" : "if (p == PEEKED_BUFFERED)",
    "right" : "if (p == PEEKED_BUFFERED)",
    "info" : "IfStatement[26594-27000]:IfStatement[26627-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26620-26683]:Block[26653-26716]"
  }, {
    "left" : "result = peekedString;",
    "right" : "result = peekedString;",
    "info" : "ExpressionStatement[26628-26650]:ExpressionStatement[26661-26683]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[26657-26677]:ExpressionStatement[26690-26710]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[26689-27000]:IfStatement[26722-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26711-26760]:Block[26744-26793]"
  }, {
    "left" : "result = Long.toString(peekedLong);",
    "right" : "result = Long.toString(peekedLong);",
    "info" : "ExpressionStatement[26719-26754]:ExpressionStatement[26752-26787]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[26766-27000]:IfStatement[26799-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26790-26890]:Block[26823-26923]"
  }, {
    "left" : "result = new String(buffer, pos, peekedNumberLength);",
    "right" : "result = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[26798-26851]:ExpressionStatement[26831-26884]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[26858-26884]:ExpressionStatement[26891-26917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26896-27000]:Block[26929-27033]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a string but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected a string but was \" + peek() + locationString());",
    "info" : "ThrowStatement[26904-26994]:ThrowStatement[26937-27027]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[27005-27026]:ExpressionStatement[27038-27059]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[27031-27060]:ExpressionStatement[27064-27093]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[27065-27079]:ReturnStatement[27098-27112]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27330-27336]:Modifier[27363-27369]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27337-27344]:PrimitiveType[27370-27377]"
  }, {
    "left" : "nextBoolean",
    "right" : "nextBoolean",
    "info" : "SimpleName[27345-27356]:SimpleName[27378-27389]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27366-27377]:SimpleType[27399-27410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27378-27790]:Block[27411-27823]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[27384-27399]:VariableDeclarationStatement[27417-27432]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[27404-27453]:IfStatement[27437-27486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27426-27453]:Block[27459-27486]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[27434-27447]:ExpressionStatement[27467-27480]"
  }, {
    "left" : "if (p == PEEKED_TRUE)",
    "right" : "if (p == PEEKED_TRUE)",
    "info" : "IfStatement[27458-27690]:IfStatement[27491-27723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27480-27570]:Block[27513-27603]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[27488-27509]:ExpressionStatement[27521-27542]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[27516-27545]:ExpressionStatement[27549-27578]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[27552-27564]:ReturnStatement[27585-27597]"
  }, {
    "left" : "if (p == PEEKED_FALSE)",
    "right" : "if (p == PEEKED_FALSE)",
    "info" : "IfStatement[27576-27690]:IfStatement[27609-27723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27599-27690]:Block[27632-27723]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[27607-27628]:ExpressionStatement[27640-27661]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[27635-27664]:ExpressionStatement[27668-27697]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27671-27684]:ReturnStatement[27704-27717]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek() + locationString());",
    "info" : "ThrowStatement[27695-27786]:ThrowStatement[27728-27819]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28008-28014]:Modifier[28041-28047]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28015-28019]:PrimitiveType[28048-28052]"
  }, {
    "left" : "nextNull",
    "right" : "nextNull",
    "info" : "SimpleName[28020-28028]:SimpleName[28053-28061]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[28038-28049]:SimpleType[28071-28082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28050-28333]:Block[28083-28366]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[28056-28071]:VariableDeclarationStatement[28089-28104]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[28076-28125]:IfStatement[28109-28158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28098-28125]:Block[28131-28158]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[28106-28119]:ExpressionStatement[28139-28152]"
  }, {
    "left" : "if (p == PEEKED_NULL)",
    "right" : "if (p == PEEKED_NULL)",
    "info" : "IfStatement[28130-28329]:IfStatement[28163-28362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28152-28223]:Block[28185-28256]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[28160-28181]:ExpressionStatement[28193-28214]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[28188-28217]:ExpressionStatement[28221-28250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28229-28329]:Block[28262-28362]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected null but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected null but was \" + peek() + locationString());",
    "info" : "ThrowStatement[28237-28323]:ThrowStatement[28270-28356]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28792-28798]:Modifier[28825-28831]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[28799-28805]:PrimitiveType[28832-28838]"
  }, {
    "left" : "nextDouble",
    "right" : "nextDouble",
    "info" : "SimpleName[28806-28816]:SimpleName[28839-28849]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[28826-28837]:SimpleType[28859-28870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28838-29983]:Block[28871-30016]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[28844-28859]:VariableDeclarationStatement[28877-28892]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[28864-28913]:IfStatement[28897-28946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28886-28913]:Block[28919-28946]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[28894-28907]:ExpressionStatement[28927-28940]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[28919-29046]:IfStatement[28952-29079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28941-29046]:Block[28974-29079]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[28949-28970]:ExpressionStatement[28982-29003]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[28977-29006]:ExpressionStatement[29010-29039]"
  }, {
    "left" : "return (double) peekedLong;",
    "right" : "return (double) peekedLong;",
    "info" : "ReturnStatement[29013-29040]:ReturnStatement[29046-29073]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[29052-29550]:IfStatement[29085-29583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29076-29182]:Block[29109-29215]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[29084-29143]:ExpressionStatement[29117-29176]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[29150-29176]:ExpressionStatement[29183-29209]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "info" : "IfStatement[29188-29550]:IfStatement[29221-29583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29248-29333]:Block[29281-29366]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[29256-29327]:ExpressionStatement[29289-29360]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[29339-29550]:IfStatement[29372-29583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29365-29414]:Block[29398-29447]"
  }, {
    "left" : "peekedString = nextUnquotedValue();",
    "right" : "peekedString = nextUnquotedValue();",
    "info" : "ExpressionStatement[29373-29408]:ExpressionStatement[29406-29441]"
  }, {
    "left" : "if (p != PEEKED_BUFFERED)",
    "right" : "if (p != PEEKED_BUFFERED)",
    "info" : "IfStatement[29420-29550]:IfStatement[29453-29583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29446-29550]:Block[29479-29583]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a double but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected a double but was \" + peek() + locationString());",
    "info" : "ThrowStatement[29454-29544]:ThrowStatement[29487-29577]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[29556-29581]:ExpressionStatement[29589-29614]"
  }, {
    "left" : "double result = Double.parseDouble(peekedString);",
    "right" : "double result = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[29586-29635]:VariableDeclarationStatement[29619-29668]"
  }, {
    "left" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
    "right" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
    "info" : "IfStatement[29683-29875]:IfStatement[29716-29908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29752-29875]:Block[29785-29908]"
  }, {
    "left" : "throw new MalformedJsonException(\n          \"JSON forbids NaN and infinities: \" + result + locationString());",
    "right" : "throw new MalformedJsonException(\n          \"JSON forbids NaN and infinities: \" + result + locationString());",
    "info" : "ThrowStatement[29760-29869]:ThrowStatement[29793-29902]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[29880-29900]:ExpressionStatement[29913-29933]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[29905-29926]:ExpressionStatement[29938-29959]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[29931-29960]:ExpressionStatement[29964-29993]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[29965-29979]:ReturnStatement[29998-30012]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30526-30532]:Modifier[30559-30565]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[30533-30537]:PrimitiveType[30566-30570]"
  }, {
    "left" : "nextLong",
    "right" : "nextLong",
    "info" : "SimpleName[30538-30546]:SimpleName[30571-30579]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[30556-30567]:SimpleType[30589-30600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30568-32013]:Block[30601-32046]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[30574-30589]:VariableDeclarationStatement[30607-30622]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[30594-30643]:IfStatement[30627-30676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30616-30643]:Block[30649-30676]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[30624-30637]:ExpressionStatement[30657-30670]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[30649-30767]:IfStatement[30682-30800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30671-30767]:Block[30704-30800]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[30679-30700]:ExpressionStatement[30712-30733]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[30707-30736]:ExpressionStatement[30740-30769]"
  }, {
    "left" : "return peekedLong;",
    "right" : "return peekedLong;",
    "info" : "ReturnStatement[30743-30761]:ReturnStatement[30776-30794]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[30773-31549]:IfStatement[30806-31582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30797-30903]:Block[30830-30936]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[30805-30864]:ExpressionStatement[30838-30897]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[30871-30897]:ExpressionStatement[30904-30930]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[30909-31549]:IfStatement[30942-31582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30993-31441]:Block[31026-31474]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[31001-31175]:IfStatement[31034-31208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31027-31080]:Block[31060-31113]"
  }, {
    "left" : "peekedString = nextUnquotedValue();",
    "right" : "peekedString = nextUnquotedValue();",
    "info" : "ExpressionStatement[31037-31072]:ExpressionStatement[31070-31105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31086-31175]:Block[31119-31208]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[31096-31167]:ExpressionStatement[31129-31200]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[31182-31435]:TryStatement[31215-31468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31186-31338]:Block[31219-31371]"
  }, {
    "left" : "long result = Long.parseLong(peekedString);",
    "right" : "long result = Long.parseLong(peekedString);",
    "info" : "VariableDeclarationStatement[31196-31239]:VariableDeclarationStatement[31229-31272]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[31248-31269]:ExpressionStatement[31281-31302]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[31278-31307]:ExpressionStatement[31311-31340]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[31316-31330]:ReturnStatement[31349-31363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31377-31435]:Block[31410-31468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31447-31549]:Block[31480-31582]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a long but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected a long but was \" + peek() + locationString());",
    "info" : "ThrowStatement[31455-31543]:ThrowStatement[31488-31576]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[31555-31580]:ExpressionStatement[31588-31613]"
  }, {
    "left" : "double asDouble = Double.parseDouble(peekedString);",
    "right" : "double asDouble = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[31585-31636]:VariableDeclarationStatement[31618-31669]"
  }, {
    "left" : "long result = (long) asDouble;",
    "right" : "long result = (long) asDouble;",
    "info" : "VariableDeclarationStatement[31684-31714]:VariableDeclarationStatement[31717-31747]"
  }, {
    "left" : "if (result != asDouble)",
    "right" : "if (result != asDouble)",
    "info" : "IfStatement[31719-31905]:IfStatement[31752-31938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31743-31905]:Block[31776-31938]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString + locationString());",
    "right" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString + locationString());",
    "info" : "ThrowStatement[31805-31899]:ThrowStatement[31838-31932]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[31910-31930]:ExpressionStatement[31943-31963]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[31935-31956]:ExpressionStatement[31968-31989]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[31961-31990]:ExpressionStatement[31994-32023]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[31995-32009]:ReturnStatement[32028-32042]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32435-32442]:Modifier[32468-32475]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[32443-32449]:SimpleType[32476-32482]"
  }, {
    "left" : "nextQuotedValue",
    "right" : "nextQuotedValue",
    "info" : "SimpleName[32450-32465]:SimpleName[32483-32498]"
  }, {
    "left" : "char quote",
    "right" : "char quote",
    "info" : "SingleVariableDeclaration[32466-32476]:SingleVariableDeclaration[32499-32509]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[32485-32496]:SimpleType[32518-32529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32497-33969]:Block[32530-34002]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[32596-32624]:VariableDeclarationStatement[32629-32657]"
  }, {
    "left" : "StringBuilder builder = null;",
    "right" : "StringBuilder builder = null;",
    "info" : "VariableDeclarationStatement[32629-32658]:VariableDeclarationStatement[32662-32691]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[32663-33965]:WhileStatement[32696-33998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32676-33965]:Block[32709-33998]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[32684-32696]:VariableDeclarationStatement[32717-32729]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[32703-32717]:VariableDeclarationStatement[32736-32750]"
  }, {
    "left" : "int start = p;",
    "right" : "int start = p;",
    "info" : "VariableDeclarationStatement[32802-32816]:VariableDeclarationStatement[32835-32849]"
  }, {
    "left" : "while (p < l)",
    "right" : "while (p < l)",
    "info" : "WhileStatement[32823-33657]:WhileStatement[32856-33690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32837-33657]:Block[32870-33690]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[32847-32867]:VariableDeclarationStatement[32880-32900]"
  }, {
    "left" : "if (c == quote)",
    "right" : "if (c == quote)",
    "info" : "IfStatement[32877-33649]:IfStatement[32910-33682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32893-33160]:Block[32926-33193]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[32905-32913]:ExpressionStatement[32938-32946]"
  }, {
    "left" : "int len = p - start - 1;",
    "right" : "int len = p - start - 1;",
    "info" : "VariableDeclarationStatement[32924-32948]:VariableDeclarationStatement[32957-32981]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[32959-33150]:IfStatement[32992-33183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32980-33044]:Block[33013-33077]"
  }, {
    "left" : "return new String(buffer, start, len);",
    "right" : "return new String(buffer, start, len);",
    "info" : "ReturnStatement[32994-33032]:ReturnStatement[33027-33065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33050-33150]:Block[33083-33183]"
  }, {
    "left" : "builder.append(buffer, start, len);",
    "right" : "builder.append(buffer, start, len);",
    "info" : "ExpressionStatement[33064-33099]:ExpressionStatement[33097-33132]"
  }, {
    "left" : "return builder.toString();",
    "right" : "return builder.toString();",
    "info" : "ReturnStatement[33112-33138]:ReturnStatement[33145-33171]"
  }, {
    "left" : "if (c == '\\\\')",
    "right" : "if (c == '\\\\')",
    "info" : "IfStatement[33166-33649]:IfStatement[33199-33682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33181-33568]:Block[33214-33601]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[33193-33201]:ExpressionStatement[33226-33234]"
  }, {
    "left" : "int len = p - start - 1;",
    "right" : "int len = p - start - 1;",
    "info" : "VariableDeclarationStatement[33212-33236]:VariableDeclarationStatement[33245-33269]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[33247-33402]:IfStatement[33280-33435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33268-33402]:Block[33301-33435]"
  }, {
    "left" : "int estimatedLength = (len + 1) * 2;",
    "right" : "int estimatedLength = (len + 1) * 2;",
    "info" : "VariableDeclarationStatement[33282-33318]:VariableDeclarationStatement[33315-33351]"
  }, {
    "left" : "builder = new StringBuilder(Math.max(estimatedLength, 16));",
    "right" : "builder = new StringBuilder(Math.max(estimatedLength, 16));",
    "info" : "ExpressionStatement[33331-33390]:ExpressionStatement[33364-33423]"
  }, {
    "left" : "builder.append(buffer, start, len);",
    "right" : "builder.append(buffer, start, len);",
    "info" : "ExpressionStatement[33413-33448]:ExpressionStatement[33446-33481]"
  }, {
    "left" : "builder.append(readEscapeCharacter());",
    "right" : "builder.append(readEscapeCharacter());",
    "info" : "ExpressionStatement[33459-33497]:ExpressionStatement[33492-33530]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[33508-33516]:ExpressionStatement[33541-33549]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[33527-33537]:ExpressionStatement[33560-33570]"
  }, {
    "left" : "start = p;",
    "right" : "start = p;",
    "info" : "ExpressionStatement[33548-33558]:ExpressionStatement[33581-33591]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[33574-33649]:IfStatement[33607-33682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33589-33649]:Block[33622-33682]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[33601-33614]:ExpressionStatement[33634-33647]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[33625-33639]:ExpressionStatement[33658-33672]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[33665-33810]:IfStatement[33698-33843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33686-33810]:Block[33719-33843]"
  }, {
    "left" : "int estimatedLength = (p - start) * 2;",
    "right" : "int estimatedLength = (p - start) * 2;",
    "info" : "VariableDeclarationStatement[33696-33734]:VariableDeclarationStatement[33729-33767]"
  }, {
    "left" : "builder = new StringBuilder(Math.max(estimatedLength, 16));",
    "right" : "builder = new StringBuilder(Math.max(estimatedLength, 16));",
    "info" : "ExpressionStatement[33743-33802]:ExpressionStatement[33776-33835]"
  }, {
    "left" : "builder.append(buffer, start, p - start);",
    "right" : "builder.append(buffer, start, p - start);",
    "info" : "ExpressionStatement[33817-33858]:ExpressionStatement[33850-33891]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[33865-33873]:ExpressionStatement[33898-33906]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[33880-33959]:IfStatement[33913-33992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33900-33959]:Block[33933-33992]"
  }, {
    "left" : "throw syntaxError(\"Unterminated string\");",
    "right" : "throw syntaxError(\"Unterminated string\");",
    "info" : "ThrowStatement[33910-33951]:ThrowStatement[33943-33984]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[34029-34061]:SingleMemberAnnotation[34062-34094]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34064-34071]:Modifier[34097-34104]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34072-34078]:SimpleType[34105-34111]"
  }, {
    "left" : "nextUnquotedValue",
    "right" : "nextUnquotedValue",
    "info" : "SimpleName[34079-34096]:SimpleName[34112-34129]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34106-34117]:SimpleType[34139-34150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34118-35399]:Block[34151-35432]"
  }, {
    "left" : "StringBuilder builder = null;",
    "right" : "StringBuilder builder = null;",
    "info" : "VariableDeclarationStatement[34124-34153]:VariableDeclarationStatement[34157-34186]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[34158-34168]:VariableDeclarationStatement[34191-34201]"
  }, {
    "left" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
    "right" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
    "info" : "LabeledStatement[34174-35180]:LabeledStatement[34207-35213]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[34203-35180]:WhileStatement[34236-35213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34216-35180]:Block[34249-35213]"
  }, {
    "left" : "for (; pos + i < limit; i++)",
    "right" : "for (; pos + i < limit; i++)",
    "info" : "ForStatement[34224-34683]:ForStatement[34257-34716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34253-34683]:Block[34286-34716]"
  }, {
    "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
    "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
    "info" : "SwitchStatement[34263-34675]:SwitchStatement[34296-34708]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[34298-34307]:SwitchCase[34331-34340]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[34316-34326]:SwitchCase[34349-34359]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[34335-34344]:SwitchCase[34368-34377]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[34353-34362]:SwitchCase[34386-34395]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[34371-34380]:SwitchCase[34404-34413]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[34391-34406]:ExpressionStatement[34424-34439]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[34431-34440]:SwitchCase[34464-34473]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[34449-34458]:SwitchCase[34482-34491]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[34467-34476]:SwitchCase[34500-34509]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[34485-34494]:SwitchCase[34518-34527]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[34503-34512]:SwitchCase[34536-34545]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[34521-34530]:SwitchCase[34554-34563]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[34539-34548]:SwitchCase[34572-34581]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[34557-34567]:SwitchCase[34590-34600]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[34576-34586]:SwitchCase[34609-34619]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[34595-34605]:SwitchCase[34628-34638]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[34614-34624]:SwitchCase[34647-34657]"
  }, {
    "left" : "break findNonLiteralCharacter;",
    "right" : "break findNonLiteralCharacter;",
    "info" : "BreakStatement[34635-34665]:BreakStatement[34668-34698]"
  }, {
    "left" : "if (i < buffer.length)",
    "right" : "if (i < buffer.length)",
    "info" : "IfStatement[34760-34889]:IfStatement[34793-34922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34783-34889]:Block[34816-34922]"
  }, {
    "left" : "if (fillBuffer(i + 1))",
    "right" : "if (fillBuffer(i + 1))",
    "info" : "IfStatement[34793-34881]:IfStatement[34826-34914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34816-34847]:Block[34849-34880]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[34828-34837]:ContinueStatement[34861-34870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34853-34881]:Block[34886-34914]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34865-34871]:BreakStatement[34898-34904]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[34987-35056]:IfStatement[35020-35089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35008-35056]:Block[35041-35089]"
  }, {
    "left" : "builder = new StringBuilder();",
    "right" : "builder = new StringBuilder();",
    "info" : "ExpressionStatement[35018-35048]:ExpressionStatement[35051-35081]"
  }, {
    "left" : "builder.append(buffer, pos, i);",
    "right" : "builder.append(buffer, pos, i);",
    "info" : "ExpressionStatement[35063-35094]:ExpressionStatement[35096-35127]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[35101-35110]:ExpressionStatement[35134-35143]"
  }, {
    "left" : "i = 0;",
    "right" : "i = 0;",
    "info" : "ExpressionStatement[35117-35123]:ExpressionStatement[35150-35156]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[35130-35174]:IfStatement[35163-35207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35150-35174]:Block[35183-35207]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35160-35166]:BreakStatement[35193-35199]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[35186-35200]:VariableDeclarationStatement[35219-35233]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[35205-35362]:IfStatement[35238-35395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35226-35276]:Block[35259-35309]"
  }, {
    "left" : "result = new String(buffer, pos, i);",
    "right" : "result = new String(buffer, pos, i);",
    "info" : "ExpressionStatement[35234-35270]:ExpressionStatement[35267-35303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35282-35362]:Block[35315-35395]"
  }, {
    "left" : "builder.append(buffer, pos, i);",
    "right" : "builder.append(buffer, pos, i);",
    "info" : "ExpressionStatement[35290-35321]:ExpressionStatement[35323-35354]"
  }, {
    "left" : "result = builder.toString();",
    "right" : "result = builder.toString();",
    "info" : "ExpressionStatement[35328-35356]:ExpressionStatement[35361-35389]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[35367-35376]:ExpressionStatement[35400-35409]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[35381-35395]:ReturnStatement[35414-35428]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35403-35410]:Modifier[35436-35443]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35411-35415]:PrimitiveType[35444-35448]"
  }, {
    "left" : "skipQuotedValue",
    "right" : "skipQuotedValue",
    "info" : "SimpleName[35416-35431]:SimpleName[35449-35464]"
  }, {
    "left" : "char quote",
    "right" : "char quote",
    "info" : "SingleVariableDeclaration[35432-35442]:SingleVariableDeclaration[35465-35475]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35451-35462]:SimpleType[35484-35495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35463-36148]:Block[35496-36181]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[35562-35590]:VariableDeclarationStatement[35595-35623]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[35595-36098]:DoStatement[35628-36131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35598-36075]:Block[35631-36108]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[35606-35618]:VariableDeclarationStatement[35639-35651]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[35625-35639]:VariableDeclarationStatement[35658-35672]"
  }, {
    "left" : "while (p < l)",
    "right" : "while (p < l)",
    "info" : "WhileStatement[35724-36054]:WhileStatement[35757-36087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35738-36054]:Block[35771-36087]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[35748-35768]:VariableDeclarationStatement[35781-35801]"
  }, {
    "left" : "if (c == quote)",
    "right" : "if (c == quote)",
    "info" : "IfStatement[35777-36046]:IfStatement[35810-36079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35793-35841]:Block[35826-35874]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[35805-35813]:ExpressionStatement[35838-35846]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[35824-35831]:ReturnStatement[35857-35864]"
  }, {
    "left" : "if (c == '\\\\')",
    "right" : "if (c == '\\\\')",
    "info" : "IfStatement[35847-36046]:IfStatement[35880-36079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35862-35965]:Block[35895-35998]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[35874-35882]:ExpressionStatement[35907-35915]"
  }, {
    "left" : "readEscapeCharacter();",
    "right" : "readEscapeCharacter();",
    "info" : "ExpressionStatement[35893-35915]:ExpressionStatement[35926-35948]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[35926-35934]:ExpressionStatement[35959-35967]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[35945-35955]:ExpressionStatement[35978-35988]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[35971-36046]:IfStatement[36004-36079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35986-36046]:Block[36019-36079]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[35998-36011]:ExpressionStatement[36031-36044]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[36022-36036]:ExpressionStatement[36055-36069]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[36061-36069]:ExpressionStatement[36094-36102]"
  }, {
    "left" : "throw syntaxError(\"Unterminated string\");",
    "right" : "throw syntaxError(\"Unterminated string\");",
    "info" : "ThrowStatement[36103-36144]:ThrowStatement[36136-36177]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36152-36159]:Modifier[36185-36192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36160-36164]:PrimitiveType[36193-36197]"
  }, {
    "left" : "skipUnquotedValue",
    "right" : "skipUnquotedValue",
    "info" : "SimpleName[36165-36182]:SimpleName[36198-36215]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36192-36203]:SimpleType[36225-36236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36204-36743]:Block[36237-36776]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[36210-36739]:DoStatement[36243-36772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36213-36716]:Block[36246-36749]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[36221-36231]:VariableDeclarationStatement[36254-36264]"
  }, {
    "left" : "for (; pos + i < limit; i++)",
    "right" : "for (; pos + i < limit; i++)",
    "info" : "ForStatement[36238-36694]:ForStatement[36271-36727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36267-36694]:Block[36300-36727]"
  }, {
    "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
    "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
    "info" : "SwitchStatement[36277-36686]:SwitchStatement[36310-36719]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[36312-36321]:SwitchCase[36345-36354]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[36330-36340]:SwitchCase[36363-36373]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[36349-36358]:SwitchCase[36382-36391]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[36367-36376]:SwitchCase[36400-36409]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[36385-36394]:SwitchCase[36418-36427]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[36405-36420]:ExpressionStatement[36438-36453]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[36445-36454]:SwitchCase[36478-36487]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[36463-36472]:SwitchCase[36496-36505]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[36481-36490]:SwitchCase[36514-36523]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[36499-36508]:SwitchCase[36532-36541]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[36517-36526]:SwitchCase[36550-36559]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[36535-36544]:SwitchCase[36568-36577]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[36553-36562]:SwitchCase[36586-36595]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[36571-36581]:SwitchCase[36604-36614]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[36590-36600]:SwitchCase[36623-36633]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[36609-36619]:SwitchCase[36642-36652]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[36628-36638]:SwitchCase[36661-36671]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[36649-36658]:ExpressionStatement[36682-36691]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36669-36676]:ReturnStatement[36702-36709]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[36701-36710]:ExpressionStatement[36734-36743]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37284-37290]:Modifier[37317-37323]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[37291-37294]:PrimitiveType[37324-37327]"
  }, {
    "left" : "nextInt",
    "right" : "nextInt",
    "info" : "SimpleName[37295-37302]:SimpleName[37328-37335]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[37312-37323]:SimpleType[37345-37356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37324-39000]:Block[37357-39033]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[37330-37345]:VariableDeclarationStatement[37363-37378]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[37350-37399]:IfStatement[37383-37432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37372-37399]:Block[37405-37432]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[37380-37393]:ExpressionStatement[37413-37426]"
  }, {
    "left" : "int result;",
    "right" : "int result;",
    "info" : "VariableDeclarationStatement[37405-37416]:VariableDeclarationStatement[37438-37449]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[37421-37764]:IfStatement[37454-37797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37443-37764]:Block[37476-37797]"
  }, {
    "left" : "result = (int) peekedLong;",
    "right" : "result = (int) peekedLong;",
    "info" : "ExpressionStatement[37451-37477]:ExpressionStatement[37484-37510]"
  }, {
    "left" : "if (peekedLong != result)",
    "right" : "if (peekedLong != result)",
    "info" : "IfStatement[37484-37673]:IfStatement[37517-37706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37510-37673]:Block[37543-37706]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong + locationString());",
    "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong + locationString());",
    "info" : "ThrowStatement[37573-37665]:ThrowStatement[37606-37698]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[37680-37701]:ExpressionStatement[37713-37734]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[37708-37737]:ExpressionStatement[37741-37770]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[37744-37758]:ReturnStatement[37777-37791]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[37770-38543]:IfStatement[37803-38576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37794-37900]:Block[37827-37933]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[37802-37861]:ExpressionStatement[37835-37894]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[37868-37894]:ExpressionStatement[37901-37927]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[37906-38543]:IfStatement[37939-38576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37990-38435]:Block[38023-38468]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[37998-38172]:IfStatement[38031-38205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38024-38077]:Block[38057-38110]"
  }, {
    "left" : "peekedString = nextUnquotedValue();",
    "right" : "peekedString = nextUnquotedValue();",
    "info" : "ExpressionStatement[38034-38069]:ExpressionStatement[38067-38102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38083-38172]:Block[38116-38205]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[38093-38164]:ExpressionStatement[38126-38197]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38179-38429]:TryStatement[38212-38462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38183-38332]:Block[38216-38365]"
  }, {
    "left" : "result = Integer.parseInt(peekedString);",
    "right" : "result = Integer.parseInt(peekedString);",
    "info" : "ExpressionStatement[38193-38233]:ExpressionStatement[38226-38266]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[38242-38263]:ExpressionStatement[38275-38296]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[38272-38301]:ExpressionStatement[38305-38334]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38310-38324]:ReturnStatement[38343-38357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38371-38429]:Block[38404-38462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38441-38543]:Block[38474-38576]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected an int but was \" + peek() + locationString());",
    "right" : "throw new IllegalStateException(\"Expected an int but was \" + peek() + locationString());",
    "info" : "ThrowStatement[38449-38537]:ThrowStatement[38482-38570]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[38549-38574]:ExpressionStatement[38582-38607]"
  }, {
    "left" : "double asDouble = Double.parseDouble(peekedString);",
    "right" : "double asDouble = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[38579-38630]:VariableDeclarationStatement[38612-38663]"
  }, {
    "left" : "result = (int) asDouble;",
    "right" : "result = (int) asDouble;",
    "info" : "ExpressionStatement[38678-38702]:ExpressionStatement[38711-38735]"
  }, {
    "left" : "if (result != asDouble)",
    "right" : "if (result != asDouble)",
    "info" : "IfStatement[38707-38892]:IfStatement[38740-38925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38731-38892]:Block[38764-38925]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString + locationString());",
    "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString + locationString());",
    "info" : "ThrowStatement[38792-38886]:ThrowStatement[38825-38919]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[38897-38917]:ExpressionStatement[38930-38950]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[38922-38943]:ExpressionStatement[38955-38976]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[38948-38977]:ExpressionStatement[38981-39010]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38982-38996]:ReturnStatement[39015-39029]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39088-39094]:Modifier[39121-39127]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39095-39099]:PrimitiveType[39128-39132]"
  }, {
    "left" : "close",
    "right" : "close",
    "info" : "SimpleName[39100-39105]:SimpleName[39133-39138]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39115-39126]:SimpleType[39148-39159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39127-39226]:Block[39160-39259]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[39133-39154]:ExpressionStatement[39166-39187]"
  }, {
    "left" : "stack[0] = JsonScope.CLOSED;",
    "right" : "stack[0] = JsonScope.CLOSED;",
    "info" : "ExpressionStatement[39159-39187]:ExpressionStatement[39192-39220]"
  }, {
    "left" : "stackSize = 1;",
    "right" : "stackSize = 1;",
    "info" : "ExpressionStatement[39192-39206]:ExpressionStatement[39225-39239]"
  }, {
    "left" : "in.close();",
    "right" : "in.close();",
    "info" : "ExpressionStatement[39211-39222]:ExpressionStatement[39244-39255]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39455-39461]:Modifier[39488-39494]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39462-39466]:PrimitiveType[39495-39499]"
  }, {
    "left" : "skipValue",
    "right" : "skipValue",
    "info" : "SimpleName[39467-39476]:SimpleName[39500-39509]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39486-39497]:SimpleType[39519-39530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39498-40496]:Block[39531-40529]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[39504-39518]:VariableDeclarationStatement[39537-39551]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[39523-40418]:DoStatement[39556-40451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39526-40398]:Block[39559-40431]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[39534-39549]:VariableDeclarationStatement[39567-39582]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[39556-39609]:IfStatement[39589-39642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39578-39609]:Block[39611-39642]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[39588-39601]:ExpressionStatement[39621-39634]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_ARRAY)",
    "right" : "if (p == PEEKED_BEGIN_ARRAY)",
    "info" : "IfStatement[39617-40364]:IfStatement[39650-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39646-39709]:Block[39679-39742]"
  }, {
    "left" : "push(JsonScope.EMPTY_ARRAY);",
    "right" : "push(JsonScope.EMPTY_ARRAY);",
    "info" : "ExpressionStatement[39656-39684]:ExpressionStatement[39689-39717]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[39693-39701]:ExpressionStatement[39726-39734]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_OBJECT)",
    "right" : "if (p == PEEKED_BEGIN_OBJECT)",
    "info" : "IfStatement[39715-40364]:IfStatement[39748-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39745-39809]:Block[39778-39842]"
  }, {
    "left" : "push(JsonScope.EMPTY_OBJECT);",
    "right" : "push(JsonScope.EMPTY_OBJECT);",
    "info" : "ExpressionStatement[39755-39784]:ExpressionStatement[39788-39817]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[39793-39801]:ExpressionStatement[39826-39834]"
  }, {
    "left" : "if (p == PEEKED_END_ARRAY)",
    "right" : "if (p == PEEKED_END_ARRAY)",
    "info" : "IfStatement[39815-40364]:IfStatement[39848-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39842-39889]:Block[39875-39922]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[39852-39864]:ExpressionStatement[39885-39897]"
  }, {
    "left" : "count--;",
    "right" : "count--;",
    "info" : "ExpressionStatement[39873-39881]:ExpressionStatement[39906-39914]"
  }, {
    "left" : "if (p == PEEKED_END_OBJECT)",
    "right" : "if (p == PEEKED_END_OBJECT)",
    "info" : "IfStatement[39895-40364]:IfStatement[39928-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39923-39970]:Block[39956-40003]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[39933-39945]:ExpressionStatement[39966-39978]"
  }, {
    "left" : "count--;",
    "right" : "count--;",
    "info" : "ExpressionStatement[39954-39962]:ExpressionStatement[39987-39995]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[39976-40364]:IfStatement[40009-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40031-40069]:Block[40064-40102]"
  }, {
    "left" : "skipUnquotedValue();",
    "right" : "skipUnquotedValue();",
    "info" : "ExpressionStatement[40041-40061]:ExpressionStatement[40074-40094]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[40075-40364]:IfStatement[40108-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40140-40180]:Block[40173-40213]"
  }, {
    "left" : "skipQuotedValue('\\'');",
    "right" : "skipQuotedValue('\\'');",
    "info" : "ExpressionStatement[40150-40172]:ExpressionStatement[40183-40205]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[40186-40364]:IfStatement[40219-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40251-40290]:Block[40284-40323]"
  }, {
    "left" : "skipQuotedValue('\"');",
    "right" : "skipQuotedValue('\"');",
    "info" : "ExpressionStatement[40261-40282]:ExpressionStatement[40294-40315]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[40296-40364]:IfStatement[40329-40397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40320-40364]:Block[40353-40397]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[40330-40356]:ExpressionStatement[40363-40389]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[40371-40392]:ExpressionStatement[40404-40425]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[40424-40453]:ExpressionStatement[40457-40486]"
  }, {
    "left" : "pathNames[stackSize - 1] = \"null\";",
    "right" : "pathNames[stackSize - 1] = \"null\";",
    "info" : "ExpressionStatement[40458-40492]:ExpressionStatement[40491-40525]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40500-40507]:Modifier[40533-40540]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40508-40512]:PrimitiveType[40541-40545]"
  }, {
    "left" : "push",
    "right" : "push",
    "info" : "SimpleName[40513-40517]:SimpleName[40546-40550]"
  }, {
    "left" : "int newTop",
    "right" : "int newTop",
    "info" : "SingleVariableDeclaration[40518-40528]:SingleVariableDeclaration[40551-40561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40530-41054]:Block[40563-41087]"
  }, {
    "left" : "if (stackSize == stack.length)",
    "right" : "if (stackSize == stack.length)",
    "info" : "IfStatement[40536-41017]:IfStatement[40569-41050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40567-41017]:Block[40600-41050]"
  }, {
    "left" : "int[] newStack = new int[stackSize * 2];",
    "right" : "int[] newStack = new int[stackSize * 2];",
    "info" : "VariableDeclarationStatement[40575-40615]:VariableDeclarationStatement[40608-40648]"
  }, {
    "left" : "int[] newPathIndices = new int[stackSize * 2];",
    "right" : "int[] newPathIndices = new int[stackSize * 2];",
    "info" : "VariableDeclarationStatement[40622-40668]:VariableDeclarationStatement[40655-40701]"
  }, {
    "left" : "String[] newPathNames = new String[stackSize * 2];",
    "right" : "String[] newPathNames = new String[stackSize * 2];",
    "info" : "VariableDeclarationStatement[40675-40725]:VariableDeclarationStatement[40708-40758]"
  }, {
    "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
    "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
    "info" : "ExpressionStatement[40732-40783]:ExpressionStatement[40765-40816]"
  }, {
    "left" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
    "right" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
    "info" : "ExpressionStatement[40790-40853]:ExpressionStatement[40823-40886]"
  }, {
    "left" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
    "right" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
    "info" : "ExpressionStatement[40860-40919]:ExpressionStatement[40893-40952]"
  }, {
    "left" : "stack = newStack;",
    "right" : "stack = newStack;",
    "info" : "ExpressionStatement[40926-40943]:ExpressionStatement[40959-40976]"
  }, {
    "left" : "pathIndices = newPathIndices;",
    "right" : "pathIndices = newPathIndices;",
    "info" : "ExpressionStatement[40950-40979]:ExpressionStatement[40983-41012]"
  }, {
    "left" : "pathNames = newPathNames;",
    "right" : "pathNames = newPathNames;",
    "info" : "ExpressionStatement[40986-41011]:ExpressionStatement[41019-41044]"
  }, {
    "left" : "stack[stackSize++] = newTop;",
    "right" : "stack[stackSize++] = newTop;",
    "info" : "ExpressionStatement[41022-41050]:ExpressionStatement[41055-41083]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41223-41230]:Modifier[41256-41263]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41231-41238]:PrimitiveType[41264-41271]"
  }, {
    "left" : "fillBuffer",
    "right" : "fillBuffer",
    "info" : "SimpleName[41239-41249]:SimpleName[41272-41282]"
  }, {
    "left" : "int minimum",
    "right" : "int minimum",
    "info" : "SingleVariableDeclaration[41250-41261]:SingleVariableDeclaration[41283-41294]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41270-41281]:SimpleType[41303-41314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41282-41928]:Block[41315-41961]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[41288-41316]:VariableDeclarationStatement[41321-41349]"
  }, {
    "left" : "lineStart -= pos;",
    "right" : "lineStart -= pos;",
    "info" : "ExpressionStatement[41321-41338]:ExpressionStatement[41354-41371]"
  }, {
    "left" : "if (limit != pos)",
    "right" : "if (limit != pos)",
    "info" : "IfStatement[41343-41473]:IfStatement[41376-41506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41361-41443]:Block[41394-41476]"
  }, {
    "left" : "limit -= pos;",
    "right" : "limit -= pos;",
    "info" : "ExpressionStatement[41369-41382]:ExpressionStatement[41402-41415]"
  }, {
    "left" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
    "right" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
    "info" : "ExpressionStatement[41389-41437]:ExpressionStatement[41422-41470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41449-41473]:Block[41482-41506]"
  }, {
    "left" : "limit = 0;",
    "right" : "limit = 0;",
    "info" : "ExpressionStatement[41457-41467]:ExpressionStatement[41490-41500]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[41479-41487]:ExpressionStatement[41512-41520]"
  }, {
    "left" : "int total;",
    "right" : "int total;",
    "info" : "VariableDeclarationStatement[41492-41502]:VariableDeclarationStatement[41525-41535]"
  }, {
    "left" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
    "right" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
    "info" : "WhileStatement[41507-41906]:WhileStatement[41540-41939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41577-41906]:Block[41610-41939]"
  }, {
    "left" : "limit += total;",
    "right" : "limit += total;",
    "info" : "ExpressionStatement[41585-41600]:ExpressionStatement[41618-41633]"
  }, {
    "left" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
    "right" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
    "info" : "IfStatement[41699-41840]:IfStatement[41732-41873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41776-41840]:Block[41809-41873]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[41786-41792]:ExpressionStatement[41819-41825]"
  }, {
    "left" : "lineStart++;",
    "right" : "lineStart++;",
    "info" : "ExpressionStatement[41801-41813]:ExpressionStatement[41834-41846]"
  }, {
    "left" : "minimum++;",
    "right" : "minimum++;",
    "info" : "ExpressionStatement[41822-41832]:ExpressionStatement[41855-41865]"
  }, {
    "left" : "if (limit >= minimum)",
    "right" : "if (limit >= minimum)",
    "info" : "IfStatement[41848-41900]:IfStatement[41881-41933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41870-41900]:Block[41903-41933]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[41880-41892]:ReturnStatement[41913-41925]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[41911-41924]:ReturnStatement[41944-41957]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42230-42237]:Modifier[42263-42270]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[42238-42241]:PrimitiveType[42271-42274]"
  }, {
    "left" : "nextNonWhitespace",
    "right" : "nextNonWhitespace",
    "info" : "SimpleName[42242-42259]:SimpleName[42275-42292]"
  }, {
    "left" : "boolean throwOnEof",
    "right" : "boolean throwOnEof",
    "info" : "SingleVariableDeclaration[42260-42278]:SingleVariableDeclaration[42293-42311]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[42287-42298]:SimpleType[42320-42331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42299-44578]:Block[42332-44611]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[42784-42812]:VariableDeclarationStatement[42817-42845]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[42817-42829]:VariableDeclarationStatement[42850-42862]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[42834-42848]:VariableDeclarationStatement[42867-42881]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[42853-44451]:WhileStatement[42886-44484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42866-44451]:Block[42899-44484]"
  }, {
    "left" : "if (p == l)",
    "right" : "if (p == l)",
    "info" : "IfStatement[42874-43005]:IfStatement[42907-43038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42886-43005]:Block[42919-43038]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[42896-42904]:ExpressionStatement[42929-42937]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[42913-42961]:IfStatement[42946-42994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42933-42961]:Block[42966-42994]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42945-42951]:BreakStatement[42978-42984]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[42970-42978]:ExpressionStatement[43003-43011]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[42987-42997]:ExpressionStatement[43020-43030]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[43013-43033]:VariableDeclarationStatement[43046-43066]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[43040-43200]:IfStatement[43073-43233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43055-43127]:Block[43088-43160]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[43065-43078]:ExpressionStatement[43098-43111]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[43087-43101]:ExpressionStatement[43120-43134]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43110-43119]:ContinueStatement[43143-43152]"
  }, {
    "left" : "if (c == ' ' || c == '\\r' || c == '\\t')",
    "right" : "if (c == ' ' || c == '\\r' || c == '\\t')",
    "info" : "IfStatement[43133-43200]:IfStatement[43166-43233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43173-43200]:Block[43206-43233]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43183-43192]:ContinueStatement[43216-43225]"
  }, {
    "left" : "if (c == '/')",
    "right" : "if (c == '/')",
    "info" : "IfStatement[43208-44445]:IfStatement[43241-44478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43222-44057]:Block[43255-44090]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[43232-43240]:ExpressionStatement[43265-43273]"
  }, {
    "left" : "if (p == l)",
    "right" : "if (p == l)",
    "info" : "IfStatement[43249-43512]:IfStatement[43282-43545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43261-43512]:Block[43294-43545]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[43273-43279]:ExpressionStatement[43306-43312]"
  }, {
    "left" : "boolean charsLoaded = fillBuffer(2);",
    "right" : "boolean charsLoaded = fillBuffer(2);",
    "info" : "VariableDeclarationStatement[43360-43396]:VariableDeclarationStatement[43393-43429]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[43407-43413]:ExpressionStatement[43440-43446]"
  }, {
    "left" : "if (!charsLoaded)",
    "right" : "if (!charsLoaded)",
    "info" : "IfStatement[43449-43502]:IfStatement[43482-43535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43467-43502]:Block[43500-43535]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[43481-43490]:ReturnStatement[43514-43523]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[43522-43537]:ExpressionStatement[43555-43570]"
  }, {
    "left" : "char peek = buffer[pos];",
    "right" : "char peek = buffer[pos];",
    "info" : "VariableDeclarationStatement[43546-43570]:VariableDeclarationStatement[43579-43603]"
  }, {
    "left" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
    "right" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
    "info" : "SwitchStatement[43579-44049]:SwitchStatement[43612-44082]"
  }, {
    "left" : "case '*':",
    "right" : "case '*':",
    "info" : "SwitchCase[43603-43612]:SwitchCase[43636-43645]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[43665-43671]:ExpressionStatement[43698-43704]"
  }, {
    "left" : "if (!skipTo(\"*/\"))",
    "right" : "if (!skipTo(\"*/\"))",
    "info" : "IfStatement[43682-43769]:IfStatement[43715-43802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43701-43769]:Block[43734-43802]"
  }, {
    "left" : "throw syntaxError(\"Unterminated comment\");",
    "right" : "throw syntaxError(\"Unterminated comment\");",
    "info" : "ThrowStatement[43715-43757]:ThrowStatement[43748-43790]"
  }, {
    "left" : "p = pos + 2;",
    "right" : "p = pos + 2;",
    "info" : "ExpressionStatement[43780-43792]:ExpressionStatement[43813-43825]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[43803-43813]:ExpressionStatement[43836-43846]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43824-43833]:ContinueStatement[43857-43866]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[43843-43852]:SwitchCase[43876-43885]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[43906-43912]:ExpressionStatement[43939-43945]"
  }, {
    "left" : "skipToEndOfLine();",
    "right" : "skipToEndOfLine();",
    "info" : "ExpressionStatement[43923-43941]:ExpressionStatement[43956-43974]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[43952-43960]:ExpressionStatement[43985-43993]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[43971-43981]:ExpressionStatement[44004-44014]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43992-44001]:ContinueStatement[44025-44034]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44011-44019]:SwitchCase[44044-44052]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[44030-44039]:ReturnStatement[44063-44072]"
  }, {
    "left" : "if (c == '#')",
    "right" : "if (c == '#')",
    "info" : "IfStatement[44063-44445]:IfStatement[44096-44478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44077-44395]:Block[44110-44428]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[44087-44095]:ExpressionStatement[44120-44128]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[44309-44324]:ExpressionStatement[44342-44357]"
  }, {
    "left" : "skipToEndOfLine();",
    "right" : "skipToEndOfLine();",
    "info" : "ExpressionStatement[44333-44351]:ExpressionStatement[44366-44384]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[44360-44368]:ExpressionStatement[44393-44401]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[44377-44387]:ExpressionStatement[44410-44420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44401-44445]:Block[44434-44478]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[44411-44419]:ExpressionStatement[44444-44452]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[44428-44437]:ReturnStatement[44461-44470]"
  }, {
    "left" : "if (throwOnEof)",
    "right" : "if (throwOnEof)",
    "info" : "IfStatement[44456-44574]:IfStatement[44489-44607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44472-44544]:Block[44505-44577]"
  }, {
    "left" : "throw new EOFException(\"End of input\" + locationString());",
    "right" : "throw new EOFException(\"End of input\" + locationString());",
    "info" : "ThrowStatement[44480-44538]:ThrowStatement[44513-44571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44550-44574]:Block[44583-44607]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[44558-44568]:ReturnStatement[44591-44601]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44582-44589]:Modifier[44615-44622]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44590-44594]:PrimitiveType[44623-44627]"
  }, {
    "left" : "checkLenient",
    "right" : "checkLenient",
    "info" : "SimpleName[44595-44607]:SimpleName[44628-44640]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[44617-44628]:SimpleType[44650-44661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44629-44745]:Block[44662-44778]"
  }, {
    "left" : "if (!lenient)",
    "right" : "if (!lenient)",
    "info" : "IfStatement[44635-44741]:IfStatement[44668-44774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44649-44741]:Block[44682-44774]"
  }, {
    "left" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
    "right" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
    "info" : "ThrowStatement[44657-44735]:ThrowStatement[44690-44768]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44930-44937]:Modifier[44963-44970]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44938-44942]:PrimitiveType[44971-44975]"
  }, {
    "left" : "skipToEndOfLine",
    "right" : "skipToEndOfLine",
    "info" : "SimpleName[44943-44958]:SimpleName[44976-44991]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[44968-44979]:SimpleType[45001-45012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44980-45202]:Block[45013-45235]"
  }, {
    "left" : "while (pos < limit || fillBuffer(1))",
    "right" : "while (pos < limit || fillBuffer(1))",
    "info" : "WhileStatement[44986-45198]:WhileStatement[45019-45231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45023-45198]:Block[45056-45231]"
  }, {
    "left" : "char c = buffer[pos++];",
    "right" : "char c = buffer[pos++];",
    "info" : "VariableDeclarationStatement[45031-45054]:VariableDeclarationStatement[45064-45087]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[45061-45192]:IfStatement[45094-45225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45076-45147]:Block[45109-45180]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[45086-45099]:ExpressionStatement[45119-45132]"
  }, {
    "left" : "lineStart = pos;",
    "right" : "lineStart = pos;",
    "info" : "ExpressionStatement[45108-45124]:ExpressionStatement[45141-45157]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45133-45139]:BreakStatement[45166-45172]"
  }, {
    "left" : "if (c == '\\r')",
    "right" : "if (c == '\\r')",
    "info" : "IfStatement[45153-45192]:IfStatement[45186-45225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45168-45192]:Block[45201-45225]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45178-45184]:BreakStatement[45211-45217]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45289-45296]:Modifier[45322-45329]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45297-45304]:PrimitiveType[45330-45337]"
  }, {
    "left" : "skipTo",
    "right" : "skipTo",
    "info" : "SimpleName[45305-45311]:SimpleName[45338-45344]"
  }, {
    "left" : "String toFind",
    "right" : "String toFind",
    "info" : "SingleVariableDeclaration[45312-45325]:SingleVariableDeclaration[45345-45358]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45334-45345]:SimpleType[45367-45378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45346-45743]:Block[45379-45776]"
  }, {
    "left" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
    "right" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
    "info" : "LabeledStatement[45352-45721]:LabeledStatement[45385-45754]"
  }, {
    "left" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
    "right" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
    "info" : "ForStatement[45363-45721]:ForStatement[45396-45754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45440-45721]:Block[45473-45754]"
  }, {
    "left" : "if (buffer[pos] == '\\n')",
    "right" : "if (buffer[pos] == '\\n')",
    "info" : "IfStatement[45448-45551]:IfStatement[45481-45584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45473-45551]:Block[45506-45584]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[45483-45496]:ExpressionStatement[45516-45529]"
  }, {
    "left" : "lineStart = pos + 1;",
    "right" : "lineStart = pos + 1;",
    "info" : "ExpressionStatement[45505-45525]:ExpressionStatement[45538-45558]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[45534-45543]:ContinueStatement[45567-45576]"
  }, {
    "left" : "for (int c = 0; c < toFind.length(); c++)",
    "right" : "for (int c = 0; c < toFind.length(); c++)",
    "info" : "ForStatement[45558-45696]:ForStatement[45591-45729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45600-45696]:Block[45633-45729]"
  }, {
    "left" : "if (buffer[pos + c] != toFind.charAt(c))",
    "right" : "if (buffer[pos + c] != toFind.charAt(c))",
    "info" : "IfStatement[45610-45688]:IfStatement[45643-45721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45651-45688]:Block[45684-45721]"
  }, {
    "left" : "continue outer;",
    "right" : "continue outer;",
    "info" : "ContinueStatement[45663-45678]:ContinueStatement[45696-45711]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45703-45715]:ReturnStatement[45736-45748]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45726-45739]:ReturnStatement[45759-45772]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45747-45756]:MarkerAnnotation[45780-45789]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45757-45763]:Modifier[45790-45796]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[45764-45770]:SimpleType[45797-45803]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[45771-45779]:SimpleName[45804-45812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45782-45845]:Block[45815-45878]"
  }, {
    "left" : "return getClass().getSimpleName() + locationString();",
    "right" : "return getClass().getSimpleName() + locationString();",
    "info" : "ReturnStatement[45788-45841]:ReturnStatement[45821-45874]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45849-45856]:Modifier[45882-45889]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[45857-45863]:SimpleType[45890-45896]"
  }, {
    "left" : "locationString",
    "right" : "locationString",
    "info" : "SimpleName[45864-45878]:SimpleName[45897-45911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45881-46031]:Block[45914-46064]"
  }, {
    "left" : "int line = lineNumber + 1;",
    "right" : "int line = lineNumber + 1;",
    "info" : "VariableDeclarationStatement[45887-45913]:VariableDeclarationStatement[45920-45946]"
  }, {
    "left" : "int column = pos - lineStart + 1;",
    "right" : "int column = pos - lineStart + 1;",
    "info" : "VariableDeclarationStatement[45918-45951]:VariableDeclarationStatement[45951-45984]"
  }, {
    "left" : "return \" at line \" + line + \" column \" + column + \" path \" + getPath();",
    "right" : "return \" at line \" + line + \" column \" + column + \" path \" + getPath();",
    "info" : "ReturnStatement[45956-46027]:ReturnStatement[45989-46060]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46172-46178]:Modifier[46205-46211]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46179-46185]:SimpleType[46212-46218]"
  }, {
    "left" : "getPath",
    "right" : "getPath",
    "info" : "SimpleName[46186-46193]:SimpleName[46219-46226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46196-46927]:Block[46229-46960]"
  }, {
    "left" : "StringBuilder result = new StringBuilder().append('$');",
    "right" : "StringBuilder result = new StringBuilder().append('$');",
    "info" : "VariableDeclarationStatement[46202-46257]:VariableDeclarationStatement[46235-46290]"
  }, {
    "left" : "for (int i = 0, size = stackSize; i < size; i++)",
    "right" : "for (int i = 0, size = stackSize; i < size; i++)",
    "info" : "ForStatement[46262-46893]:ForStatement[46295-46926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46311-46893]:Block[46344-46926]"
  }, {
    "left" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
    "right" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
    "info" : "SwitchStatement[46319-46887]:SwitchStatement[46352-46920]"
  }, {
    "left" : "case JsonScope.EMPTY_ARRAY:",
    "right" : "case JsonScope.EMPTY_ARRAY:",
    "info" : "SwitchCase[46347-46374]:SwitchCase[46380-46407]"
  }, {
    "left" : "case JsonScope.NONEMPTY_ARRAY:",
    "right" : "case JsonScope.NONEMPTY_ARRAY:",
    "info" : "SwitchCase[46383-46413]:SwitchCase[46416-46446]"
  }, {
    "left" : "result.append('[').append(pathIndices[i]).append(']');",
    "right" : "result.append('[').append(pathIndices[i]).append(']');",
    "info" : "ExpressionStatement[46424-46478]:ExpressionStatement[46457-46511]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46489-46495]:BreakStatement[46522-46528]"
  }, {
    "left" : "case JsonScope.EMPTY_OBJECT:",
    "right" : "case JsonScope.EMPTY_OBJECT:",
    "info" : "SwitchCase[46505-46533]:SwitchCase[46538-46566]"
  }, {
    "left" : "case JsonScope.DANGLING_NAME:",
    "right" : "case JsonScope.DANGLING_NAME:",
    "info" : "SwitchCase[46542-46571]:SwitchCase[46575-46604]"
  }, {
    "left" : "case JsonScope.NONEMPTY_OBJECT:",
    "right" : "case JsonScope.NONEMPTY_OBJECT:",
    "info" : "SwitchCase[46580-46611]:SwitchCase[46613-46644]"
  }, {
    "left" : "result.append('.');",
    "right" : "result.append('.');",
    "info" : "ExpressionStatement[46622-46641]:ExpressionStatement[46655-46674]"
  }, {
    "left" : "if (pathNames[i] != null)",
    "right" : "if (pathNames[i] != null)",
    "info" : "IfStatement[46652-46732]:IfStatement[46685-46765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46678-46732]:Block[46711-46765]"
  }, {
    "left" : "result.append(pathNames[i]);",
    "right" : "result.append(pathNames[i]);",
    "info" : "ExpressionStatement[46692-46720]:ExpressionStatement[46725-46753]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46743-46749]:BreakStatement[46776-46782]"
  }, {
    "left" : "case JsonScope.NONEMPTY_DOCUMENT:",
    "right" : "case JsonScope.NONEMPTY_DOCUMENT:",
    "info" : "SwitchCase[46759-46792]:SwitchCase[46792-46825]"
  }, {
    "left" : "case JsonScope.EMPTY_DOCUMENT:",
    "right" : "case JsonScope.EMPTY_DOCUMENT:",
    "info" : "SwitchCase[46801-46831]:SwitchCase[46834-46864]"
  }, {
    "left" : "case JsonScope.CLOSED:",
    "right" : "case JsonScope.CLOSED:",
    "info" : "SwitchCase[46840-46862]:SwitchCase[46873-46895]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46873-46879]:BreakStatement[46906-46912]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[46898-46923]:ReturnStatement[46931-46956]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47286-47293]:Modifier[47319-47326]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[47294-47298]:PrimitiveType[47327-47331]"
  }, {
    "left" : "readEscapeCharacter",
    "right" : "readEscapeCharacter",
    "info" : "SimpleName[47299-47318]:SimpleName[47332-47351]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[47328-47339]:SimpleType[47361-47372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47340-48678]:Block[47373-48711]"
  }, {
    "left" : "if (pos == limit && !fillBuffer(1))",
    "right" : "if (pos == limit && !fillBuffer(1))",
    "info" : "IfStatement[47346-47446]:IfStatement[47379-47479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47382-47446]:Block[47415-47479]"
  }, {
    "left" : "throw syntaxError(\"Unterminated escape sequence\");",
    "right" : "throw syntaxError(\"Unterminated escape sequence\");",
    "info" : "ThrowStatement[47390-47440]:ThrowStatement[47423-47473]"
  }, {
    "left" : "char escaped = buffer[pos++];",
    "right" : "char escaped = buffer[pos++];",
    "info" : "VariableDeclarationStatement[47452-47481]:VariableDeclarationStatement[47485-47514]"
  }, {
    "left" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    case '/':\t\n    \treturn escaped;\n    default:\n    \t// throw error when none of the above cases are matched\n    \tthrow syntaxError(\"Invalid escape sequence\");\n    }",
    "right" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    case '/':\t\n    \treturn escaped;\n    default:\n    \t// throw error when none of the above cases are matched\n    \tthrow syntaxError(\"Invalid escape sequence\");\n    }",
    "info" : "SwitchStatement[47486-48674]:SwitchStatement[47519-48707]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[47509-47518]:SwitchCase[47542-47551]"
  }, {
    "left" : "if (pos + 4 > limit && !fillBuffer(4))",
    "right" : "if (pos + 4 > limit && !fillBuffer(4))",
    "info" : "IfStatement[47525-47632]:IfStatement[47558-47665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47564-47632]:Block[47597-47665]"
  }, {
    "left" : "throw syntaxError(\"Unterminated escape sequence\");",
    "right" : "throw syntaxError(\"Unterminated escape sequence\");",
    "info" : "ThrowStatement[47574-47624]:ThrowStatement[47607-47657]"
  }, {
    "left" : "char result = 0;",
    "right" : "char result = 0;",
    "info" : "VariableDeclarationStatement[47716-47732]:VariableDeclarationStatement[47749-47765]"
  }, {
    "left" : "for (int i = pos, end = i + 4; i < end; i++)",
    "right" : "for (int i = pos, end = i + 4; i < end; i++)",
    "info" : "ForStatement[47739-48174]:ForStatement[47772-48207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47784-48174]:Block[47817-48207]"
  }, {
    "left" : "char c = buffer[i];",
    "right" : "char c = buffer[i];",
    "info" : "VariableDeclarationStatement[47794-47813]:VariableDeclarationStatement[47827-47846]"
  }, {
    "left" : "result <<= 4;",
    "right" : "result <<= 4;",
    "info" : "ExpressionStatement[47822-47835]:ExpressionStatement[47855-47868]"
  }, {
    "left" : "if (c >= '0' && c <= '9')",
    "right" : "if (c >= '0' && c <= '9')",
    "info" : "IfStatement[47844-48166]:IfStatement[47877-48199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47870-47912]:Block[47903-47945]"
  }, {
    "left" : "result += (c - '0');",
    "right" : "result += (c - '0');",
    "info" : "ExpressionStatement[47882-47902]:ExpressionStatement[47915-47935]"
  }, {
    "left" : "if (c >= 'a' && c <= 'f')",
    "right" : "if (c >= 'a' && c <= 'f')",
    "info" : "IfStatement[47918-48166]:IfStatement[47951-48199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47944-47991]:Block[47977-48024]"
  }, {
    "left" : "result += (c - 'a' + 10);",
    "right" : "result += (c - 'a' + 10);",
    "info" : "ExpressionStatement[47956-47981]:ExpressionStatement[47989-48014]"
  }, {
    "left" : "if (c >= 'A' && c <= 'F')",
    "right" : "if (c >= 'A' && c <= 'F')",
    "info" : "IfStatement[47997-48166]:IfStatement[48030-48199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48023-48070]:Block[48056-48103]"
  }, {
    "left" : "result += (c - 'A' + 10);",
    "right" : "result += (c - 'A' + 10);",
    "info" : "ExpressionStatement[48035-48060]:ExpressionStatement[48068-48093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48076-48166]:Block[48109-48199]"
  }, {
    "left" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
    "right" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
    "info" : "ThrowStatement[48088-48156]:ThrowStatement[48121-48189]"
  }, {
    "left" : "pos += 4;",
    "right" : "pos += 4;",
    "info" : "ExpressionStatement[48181-48190]:ExpressionStatement[48214-48223]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[48197-48211]:ReturnStatement[48230-48244]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[48217-48226]:SwitchCase[48250-48259]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[48233-48245]:ReturnStatement[48266-48278]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[48251-48260]:SwitchCase[48284-48293]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[48267-48279]:ReturnStatement[48300-48312]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[48285-48294]:SwitchCase[48318-48327]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[48301-48313]:ReturnStatement[48334-48346]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[48319-48328]:SwitchCase[48352-48361]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[48335-48347]:ReturnStatement[48368-48380]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[48353-48362]:SwitchCase[48386-48395]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[48369-48381]:ReturnStatement[48402-48414]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[48387-48397]:SwitchCase[48420-48430]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[48404-48417]:ExpressionStatement[48437-48450]"
  }, {
    "left" : "lineStart = pos;",
    "right" : "lineStart = pos;",
    "info" : "ExpressionStatement[48424-48440]:ExpressionStatement[48457-48473]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[48468-48478]:SwitchCase[48501-48511]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[48483-48492]:SwitchCase[48516-48525]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[48497-48507]:SwitchCase[48530-48540]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[48512-48521]:SwitchCase[48545-48554]"
  }, {
    "left" : "return escaped;",
    "right" : "return escaped;",
    "info" : "ReturnStatement[48528-48543]:ReturnStatement[48561-48576]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[48548-48556]:SwitchCase[48581-48589]"
  }, {
    "left" : "throw syntaxError(\"Invalid escape sequence\");",
    "right" : "throw syntaxError(\"Invalid escape sequence\");",
    "info" : "ThrowStatement[48623-48668]:ThrowStatement[48656-48701]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48803-48810]:Modifier[48836-48843]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[48811-48822]:SimpleType[48844-48855]"
  }, {
    "left" : "syntaxError",
    "right" : "syntaxError",
    "info" : "SimpleName[48823-48834]:SimpleName[48856-48867]"
  }, {
    "left" : "String message",
    "right" : "String message",
    "info" : "SingleVariableDeclaration[48835-48849]:SingleVariableDeclaration[48868-48882]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[48858-48869]:SimpleType[48891-48902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48870-48941]:Block[48903-48974]"
  }, {
    "left" : "throw new MalformedJsonException(message + locationString());",
    "right" : "throw new MalformedJsonException(message + locationString());",
    "info" : "ThrowStatement[48876-48937]:ThrowStatement[48909-48970]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49008-49015]:Modifier[49041-49048]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49016-49020]:PrimitiveType[49049-49053]"
  }, {
    "left" : "consumeNonExecutePrefix",
    "right" : "consumeNonExecutePrefix",
    "info" : "SimpleName[49021-49044]:SimpleName[49054-49077]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49054-49065]:SimpleType[49087-49098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49066-49520]:Block[49099-49553]"
  }, {
    "left" : "nextNonWhitespace(true);",
    "right" : "nextNonWhitespace(true);",
    "info" : "ExpressionStatement[49123-49147]:ExpressionStatement[49156-49180]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[49152-49158]:ExpressionStatement[49185-49191]"
  }, {
    "left" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
    "right" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
    "info" : "IfStatement[49164-49272]:IfStatement[49197-49305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49251-49272]:Block[49284-49305]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49259-49266]:ReturnStatement[49292-49299]"
  }, {
    "left" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
    "right" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
    "info" : "ForStatement[49278-49440]:ForStatement[49311-49473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49330-49440]:Block[49363-49473]"
  }, {
    "left" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
    "right" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
    "info" : "IfStatement[49338-49434]:IfStatement[49371-49467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49384-49434]:Block[49417-49467]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49394-49401]:ReturnStatement[49427-49434]"
  }, {
    "left" : "pos += NON_EXECUTE_PREFIX.length;",
    "right" : "pos += NON_EXECUTE_PREFIX.length;",
    "info" : "ExpressionStatement[49483-49516]:ExpressionStatement[49516-49549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49531-50389]:Block[49564-50422]"
  }, {
    "left" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\n              \"Expected a name but was \" + reader.peek() + reader.locationString());\n        }\n      }\n    };",
    "right" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\n              \"Expected a name but was \" + reader.peek() + reader.locationString());\n        }\n      }\n    };",
    "info" : "ExpressionStatement[49537-50385]:ExpressionStatement[49570-50418]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[49612-49621]:MarkerAnnotation[49645-49654]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49622-49628]:Modifier[49655-49661]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49629-49633]:PrimitiveType[49662-49666]"
  }, {
    "left" : "promoteNameToValue",
    "right" : "promoteNameToValue",
    "info" : "SimpleName[49634-49652]:SimpleName[49667-49685]"
  }, {
    "left" : "JsonReader reader",
    "right" : "JsonReader reader",
    "info" : "SingleVariableDeclaration[49653-49670]:SingleVariableDeclaration[49686-49703]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49679-49690]:SimpleType[49712-49723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49691-50378]:Block[49724-50411]"
  }, {
    "left" : "if (reader instanceof JsonTreeReader)",
    "right" : "if (reader instanceof JsonTreeReader)",
    "info" : "IfStatement[49701-49825]:IfStatement[49734-49858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49739-49825]:Block[49772-49858]"
  }, {
    "left" : "((JsonTreeReader)reader).promoteNameToValue();",
    "right" : "((JsonTreeReader)reader).promoteNameToValue();",
    "info" : "ExpressionStatement[49751-49797]:ExpressionStatement[49784-49830]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49808-49815]:ReturnStatement[49841-49848]"
  }, {
    "left" : "int p = reader.peeked;",
    "right" : "int p = reader.peeked;",
    "info" : "VariableDeclarationStatement[49834-49856]:VariableDeclarationStatement[49867-49889]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[49865-49929]:IfStatement[49898-49962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49887-49929]:Block[49920-49962]"
  }, {
    "left" : "p = reader.doPeek();",
    "right" : "p = reader.doPeek();",
    "info" : "ExpressionStatement[49899-49919]:ExpressionStatement[49932-49952]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[49938-50370]:IfStatement[49971-50403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49974-50033]:Block[50007-50066]"
  }, {
    "left" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
    "right" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
    "info" : "ExpressionStatement[49986-50023]:ExpressionStatement[50019-50056]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[50039-50370]:IfStatement[50072-50403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50075-50134]:Block[50108-50167]"
  }, {
    "left" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
    "right" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
    "info" : "ExpressionStatement[50087-50124]:ExpressionStatement[50120-50157]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME)",
    "info" : "IfStatement[50140-50370]:IfStatement[50173-50403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50171-50225]:Block[50204-50258]"
  }, {
    "left" : "reader.peeked = PEEKED_UNQUOTED;",
    "right" : "reader.peeked = PEEKED_UNQUOTED;",
    "info" : "ExpressionStatement[50183-50215]:ExpressionStatement[50216-50248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50231-50370]:Block[50264-50403]"
  }, {
    "left" : "throw new IllegalStateException(\n              \"Expected a name but was \" + reader.peek() + reader.locationString());",
    "right" : "throw new IllegalStateException(\n              \"Expected a name but was \" + reader.peek() + reader.locationString());",
    "info" : "ThrowStatement[50243-50360]:ThrowStatement[50276-50393]"
  } ]
}