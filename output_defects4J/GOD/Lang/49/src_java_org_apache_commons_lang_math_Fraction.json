{
  "matchedElements" : [
 {
    "left" : "class : Fraction",
    "right" : "class : Fraction",
    "info" : "TypeDeclaration[874-34644]:TypeDeclaration[874-34731]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[1338-1517]:FieldDeclaration[1338-1517]"
  }, {
    "left" : "ZERO",
    "right" : "ZERO",
    "info" : "FieldDeclaration[1523-1644]:FieldDeclaration[1523-1644]"
  }, {
    "left" : "ONE",
    "right" : "ONE",
    "info" : "FieldDeclaration[1649-1769]:FieldDeclaration[1649-1769]"
  }, {
    "left" : "ONE_HALF",
    "right" : "ONE_HALF",
    "info" : "FieldDeclaration[1774-1901]:FieldDeclaration[1774-1901]"
  }, {
    "left" : "ONE_THIRD",
    "right" : "ONE_THIRD",
    "info" : "FieldDeclaration[1906-2034]:FieldDeclaration[1906-2034]"
  }, {
    "left" : "TWO_THIRDS",
    "right" : "TWO_THIRDS",
    "info" : "FieldDeclaration[2039-2168]:FieldDeclaration[2039-2168]"
  }, {
    "left" : "ONE_QUARTER",
    "right" : "ONE_QUARTER",
    "info" : "FieldDeclaration[2173-2303]:FieldDeclaration[2173-2303]"
  }, {
    "left" : "TWO_QUARTERS",
    "right" : "TWO_QUARTERS",
    "info" : "FieldDeclaration[2308-2439]:FieldDeclaration[2308-2439]"
  }, {
    "left" : "THREE_QUARTERS",
    "right" : "THREE_QUARTERS",
    "info" : "FieldDeclaration[2444-2577]:FieldDeclaration[2444-2577]"
  }, {
    "left" : "ONE_FIFTH",
    "right" : "ONE_FIFTH",
    "info" : "FieldDeclaration[2582-2710]:FieldDeclaration[2582-2710]"
  }, {
    "left" : "TWO_FIFTHS",
    "right" : "TWO_FIFTHS",
    "info" : "FieldDeclaration[2715-2844]:FieldDeclaration[2715-2844]"
  }, {
    "left" : "THREE_FIFTHS",
    "right" : "THREE_FIFTHS",
    "info" : "FieldDeclaration[2849-2980]:FieldDeclaration[2849-2980]"
  }, {
    "left" : "FOUR_FIFTHS",
    "right" : "FOUR_FIFTHS",
    "info" : "FieldDeclaration[2985-3115]:FieldDeclaration[2985-3115]"
  }, {
    "left" : "numerator",
    "right" : "numerator",
    "info" : "FieldDeclaration[3122-3246]:FieldDeclaration[3122-3246]"
  }, {
    "left" : "denominator",
    "right" : "denominator",
    "info" : "FieldDeclaration[3251-3379]:FieldDeclaration[3251-3379]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "FieldDeclaration[3385-3488]:FieldDeclaration[3385-3488]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "FieldDeclaration[3493-3602]:FieldDeclaration[3493-3602]"
  }, {
    "left" : "toProperString",
    "right" : "toProperString",
    "info" : "FieldDeclaration[3607-3728]:FieldDeclaration[3607-3728]"
  }, {
    "left" : "private Fraction(numerator int, denominator int)",
    "right" : "private Fraction(numerator int, denominator int)",
    "info" : "MethodDeclaration[3734-4175]:MethodDeclaration[3734-4175]"
  }, {
    "left" : "public getFraction(numerator int, denominator int) : ",
    "right" : "public getFraction(numerator int, denominator int) : ",
    "info" : "MethodDeclaration[4181-5214]:MethodDeclaration[4181-5214]"
  }, {
    "left" : "public getFraction(whole int, numerator int, denominator int) : ",
    "right" : "public getFraction(whole int, numerator int, denominator int) : ",
    "info" : "MethodDeclaration[5220-6990]:MethodDeclaration[5220-6990]"
  }, {
    "left" : "public getReducedFraction(numerator int, denominator int) : ",
    "right" : "public getReducedFraction(numerator int, denominator int) : ",
    "info" : "MethodDeclaration[6996-8616]:MethodDeclaration[6996-8616]"
  }, {
    "left" : "public getFraction(value double) : ",
    "right" : "public getFraction(value double) : ",
    "info" : "MethodDeclaration[8622-11346]:MethodDeclaration[8622-11346]"
  }, {
    "left" : "public getFraction(str ) : ",
    "right" : "public getFraction(str ) : ",
    "info" : "MethodDeclaration[11352-13267]:MethodDeclaration[11352-13267]"
  }, {
    "left" : "public getNumerator() : int",
    "right" : "public getNumerator() : int",
    "info" : "MethodDeclaration[13365-13682]:MethodDeclaration[13365-13682]"
  }, {
    "left" : "public getDenominator() : int",
    "right" : "public getDenominator() : int",
    "info" : "MethodDeclaration[13688-13876]:MethodDeclaration[13688-13876]"
  }, {
    "left" : "public getProperNumerator() : int",
    "right" : "public getProperNumerator() : int",
    "info" : "MethodDeclaration[13882-14439]:MethodDeclaration[13882-14439]"
  }, {
    "left" : "public getProperWhole() : int",
    "right" : "public getProperWhole() : int",
    "info" : "MethodDeclaration[14445-14985]:MethodDeclaration[14445-14985]"
  }, {
    "left" : "public intValue() : int",
    "right" : "public intValue() : int",
    "info" : "MethodDeclaration[15088-15341]:MethodDeclaration[15088-15341]"
  }, {
    "left" : "public longValue() : long",
    "right" : "public longValue() : long",
    "info" : "MethodDeclaration[15347-15609]:MethodDeclaration[15347-15609]"
  }, {
    "left" : "public floatValue() : float",
    "right" : "public floatValue() : float",
    "info" : "MethodDeclaration[15615-15917]:MethodDeclaration[15615-15917]"
  }, {
    "left" : "public doubleValue() : double",
    "right" : "public doubleValue() : double",
    "info" : "MethodDeclaration[15923-16231]:MethodDeclaration[15923-16231]"
  }, {
    "left" : "public reduce() : ",
    "right" : "public reduce() : ",
    "info" : "MethodDeclaration[16332-16905]:MethodDeclaration[16332-16992]"
  }, {
    "left" : "public invert() : ",
    "right" : "public invert() : ",
    "info" : "MethodDeclaration[16911-17681]:MethodDeclaration[16998-17768]"
  }, {
    "left" : "public negate() : ",
    "right" : "public negate() : ",
    "info" : "MethodDeclaration[17687-18215]:MethodDeclaration[17774-18302]"
  }, {
    "left" : "public abs() : ",
    "right" : "public abs() : ",
    "info" : "MethodDeclaration[18221-18706]:MethodDeclaration[18308-18793]"
  }, {
    "left" : "public pow(power int) : ",
    "right" : "public pow(power int) : ",
    "info" : "MethodDeclaration[18712-19890]:MethodDeclaration[18799-19977]"
  }, {
    "left" : "private greatestCommonDivisor(u int, v int) : int",
    "right" : "private greatestCommonDivisor(u int, v int) : int",
    "info" : "MethodDeclaration[19896-21972]:MethodDeclaration[19983-22059]"
  }, {
    "left" : "private mulAndCheck(x int, y int) : int",
    "right" : "private mulAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[22071-22617]:MethodDeclaration[22158-22704]"
  }, {
    "left" : "private mulPosAndCheck(x int, y int) : int",
    "right" : "private mulPosAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[22627-23188]:MethodDeclaration[22714-23275]"
  }, {
    "left" : "private addAndCheck(x int, y int) : int",
    "right" : "private addAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[23198-23705]:MethodDeclaration[23285-23792]"
  }, {
    "left" : "private subAndCheck(x int, y int) : int",
    "right" : "private subAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[23715-24241]:MethodDeclaration[23802-24328]"
  }, {
    "left" : "public add(fraction ) : ",
    "right" : "public add(fraction ) : ",
    "info" : "MethodDeclaration[24251-24858]:MethodDeclaration[24338-24945]"
  }, {
    "left" : "public subtract(fraction ) : ",
    "right" : "public subtract(fraction ) : ",
    "info" : "MethodDeclaration[24864-25484]:MethodDeclaration[24951-25571]"
  }, {
    "left" : "private addSub(fraction , isAdd boolean) : ",
    "right" : "private addSub(fraction , isAdd boolean) : ",
    "info" : "MethodDeclaration[25490-28067]:MethodDeclaration[25577-28154]"
  }, {
    "left" : "public multiplyBy(fraction ) : ",
    "right" : "public multiplyBy(fraction ) : ",
    "info" : "MethodDeclaration[28073-29243]:MethodDeclaration[28160-29330]"
  }, {
    "left" : "public divideBy(fraction ) : ",
    "right" : "public divideBy(fraction ) : ",
    "info" : "MethodDeclaration[29249-30118]:MethodDeclaration[29336-30205]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[30213-30875]:MethodDeclaration[30300-30962]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[30881-31218]:MethodDeclaration[30968-31305]"
  }, {
    "left" : "public compareTo(object ) : int",
    "right" : "public compareTo(object ) : int",
    "info" : "MethodDeclaration[31224-32366]:MethodDeclaration[31311-32453]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[32372-32859]:MethodDeclaration[32459-32946]"
  }, {
    "left" : "public toProperString() : ",
    "right" : "public toProperString() : ",
    "info" : "MethodDeclaration[32865-34642]:MethodDeclaration[32952-34729]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1266-1272]:Modifier[1266-1272]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[1273-1278]:Modifier[1273-1278]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1279-1284]:TYPE_DECLARATION_KIND[1279-1284]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4026-4033]:Modifier[4026-4033]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleName[4034-4042]:SimpleName[4034-4042]"
  }, {
    "left" : "int numerator",
    "right" : "int numerator",
    "info" : "SingleVariableDeclaration[4043-4056]:SingleVariableDeclaration[4043-4056]"
  }, {
    "left" : "int denominator",
    "right" : "int denominator",
    "info" : "SingleVariableDeclaration[4058-4073]:SingleVariableDeclaration[4058-4073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4075-4175]:Block[4075-4175]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[4085-4093]:SuperConstructorInvocation[4085-4093]"
  }, {
    "left" : "this.numerator = numerator;",
    "right" : "this.numerator = numerator;",
    "info" : "ExpressionStatement[4102-4129]:ExpressionStatement[4102-4129]"
  }, {
    "left" : "this.denominator = denominator;",
    "right" : "this.denominator = denominator;",
    "info" : "ExpressionStatement[4138-4169]:ExpressionStatement[4138-4169]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4660-4666]:Modifier[4660-4666]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4667-4673]:Modifier[4667-4673]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[4674-4682]:SimpleType[4674-4682]"
  }, {
    "left" : "getFraction",
    "right" : "getFraction",
    "info" : "SimpleName[4683-4694]:SimpleName[4683-4694]"
  }, {
    "left" : "int numerator",
    "right" : "int numerator",
    "info" : "SingleVariableDeclaration[4695-4708]:SingleVariableDeclaration[4695-4708]"
  }, {
    "left" : "int denominator",
    "right" : "int denominator",
    "info" : "SingleVariableDeclaration[4710-4725]:SingleVariableDeclaration[4710-4725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4727-5214]:Block[4727-5214]"
  }, {
    "left" : "if (denominator == 0)",
    "right" : "if (denominator == 0)",
    "info" : "IfStatement[4737-4849]:IfStatement[4737-4849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4759-4849]:Block[4759-4849]"
  }, {
    "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "info" : "ThrowStatement[4773-4839]:ThrowStatement[4773-4839]"
  }, {
    "left" : "if (denominator < 0)",
    "right" : "if (denominator < 0)",
    "info" : "IfStatement[4858-5155]:IfStatement[4858-5155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4879-5155]:Block[4879-5155]"
  }, {
    "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
    "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
    "info" : "IfStatement[4893-5069]:IfStatement[4893-5069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4981-5069]:Block[4981-5069]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: can't negate\");",
    "right" : "throw new ArithmeticException(\"overflow: can't negate\");",
    "info" : "ThrowStatement[4999-5055]:ThrowStatement[4999-5055]"
  }, {
    "left" : "numerator = -numerator;",
    "right" : "numerator = -numerator;",
    "info" : "ExpressionStatement[5082-5105]:ExpressionStatement[5082-5105]"
  }, {
    "left" : "denominator = -denominator;",
    "right" : "denominator = -denominator;",
    "info" : "ExpressionStatement[5118-5145]:ExpressionStatement[5118-5145]"
  }, {
    "left" : "return new Fraction(numerator, denominator);",
    "right" : "return new Fraction(numerator, denominator);",
    "info" : "ReturnStatement[5164-5208]:ReturnStatement[5164-5208]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6050-6056]:Modifier[6050-6056]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6057-6063]:Modifier[6057-6063]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[6064-6072]:SimpleType[6064-6072]"
  }, {
    "left" : "getFraction",
    "right" : "getFraction",
    "info" : "SimpleName[6073-6084]:SimpleName[6073-6084]"
  }, {
    "left" : "int whole",
    "right" : "int whole",
    "info" : "SingleVariableDeclaration[6085-6094]:SingleVariableDeclaration[6085-6094]"
  }, {
    "left" : "int numerator",
    "right" : "int numerator",
    "info" : "SingleVariableDeclaration[6096-6109]:SingleVariableDeclaration[6096-6109]"
  }, {
    "left" : "int denominator",
    "right" : "int denominator",
    "info" : "SingleVariableDeclaration[6111-6126]:SingleVariableDeclaration[6111-6126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6128-6990]:Block[6128-6990]"
  }, {
    "left" : "if (denominator == 0)",
    "right" : "if (denominator == 0)",
    "info" : "IfStatement[6138-6250]:IfStatement[6138-6250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6160-6250]:Block[6160-6250]"
  }, {
    "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "info" : "ThrowStatement[6174-6240]:ThrowStatement[6174-6240]"
  }, {
    "left" : "if (denominator < 0)",
    "right" : "if (denominator < 0)",
    "info" : "IfStatement[6259-6374]:IfStatement[6259-6374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6280-6374]:Block[6280-6374]"
  }, {
    "left" : "throw new ArithmeticException(\"The denominator must not be negative\");",
    "right" : "throw new ArithmeticException(\"The denominator must not be negative\");",
    "info" : "ThrowStatement[6294-6364]:ThrowStatement[6294-6364]"
  }, {
    "left" : "if (numerator < 0)",
    "right" : "if (numerator < 0)",
    "info" : "IfStatement[6383-6494]:IfStatement[6383-6494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6402-6494]:Block[6402-6494]"
  }, {
    "left" : "throw new ArithmeticException(\"The numerator must not be negative\");",
    "right" : "throw new ArithmeticException(\"The numerator must not be negative\");",
    "info" : "ThrowStatement[6416-6484]:ThrowStatement[6416-6484]"
  }, {
    "left" : "long numeratorValue;",
    "right" : "long numeratorValue;",
    "info" : "VariableDeclarationStatement[6503-6523]:VariableDeclarationStatement[6503-6523]"
  }, {
    "left" : "if (whole < 0)",
    "right" : "if (whole < 0)",
    "info" : "IfStatement[6532-6711]:IfStatement[6532-6711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6547-6626]:Block[6547-6626]"
  }, {
    "left" : "numeratorValue = whole * (long)denominator - numerator;",
    "right" : "numeratorValue = whole * (long)denominator - numerator;",
    "info" : "ExpressionStatement[6561-6616]:ExpressionStatement[6561-6616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6632-6711]:Block[6632-6711]"
  }, {
    "left" : "numeratorValue = whole * (long)denominator + numerator;",
    "right" : "numeratorValue = whole * (long)denominator + numerator;",
    "info" : "ExpressionStatement[6646-6701]:ExpressionStatement[6646-6701]"
  }, {
    "left" : "if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)",
    "right" : "if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)",
    "info" : "IfStatement[6720-6920]:IfStatement[6720-6920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6815-6920]:Block[6815-6920]"
  }, {
    "left" : "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");",
    "right" : "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");",
    "info" : "ThrowStatement[6829-6910]:ThrowStatement[6829-6910]"
  }, {
    "left" : "return new Fraction((int) numeratorValue, denominator);",
    "right" : "return new Fraction((int) numeratorValue, denominator);",
    "info" : "ReturnStatement[6929-6984]:ReturnStatement[6929-6984]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7647-7653]:Modifier[7647-7653]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7654-7660]:Modifier[7654-7660]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[7661-7669]:SimpleType[7661-7669]"
  }, {
    "left" : "getReducedFraction",
    "right" : "getReducedFraction",
    "info" : "SimpleName[7670-7688]:SimpleName[7670-7688]"
  }, {
    "left" : "int numerator",
    "right" : "int numerator",
    "info" : "SingleVariableDeclaration[7689-7702]:SingleVariableDeclaration[7689-7702]"
  }, {
    "left" : "int denominator",
    "right" : "int denominator",
    "info" : "SingleVariableDeclaration[7704-7719]:SingleVariableDeclaration[7704-7719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7721-8616]:Block[7721-8616]"
  }, {
    "left" : "if (denominator == 0)",
    "right" : "if (denominator == 0)",
    "info" : "IfStatement[7731-7843]:IfStatement[7731-7843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7753-7843]:Block[7753-7843]"
  }, {
    "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
    "info" : "ThrowStatement[7767-7833]:ThrowStatement[7767-7833]"
  }, {
    "left" : "if (numerator==0)",
    "right" : "if (numerator==0)",
    "info" : "IfStatement[7852-7925]:IfStatement[7852-7925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7870-7925]:Block[7870-7925]"
  }, {
    "left" : "return ZERO;",
    "right" : "return ZERO;",
    "info" : "ReturnStatement[7884-7896]:ReturnStatement[7884-7896]"
  }, {
    "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
    "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
    "info" : "IfStatement[7993-8102]:IfStatement[7993-8102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8049-8102]:Block[8049-8102]"
  }, {
    "left" : "numerator/=2;",
    "right" : "numerator/=2;",
    "info" : "ExpressionStatement[8063-8076]:ExpressionStatement[8063-8076]"
  }, {
    "left" : "denominator/=2;",
    "right" : "denominator/=2;",
    "info" : "ExpressionStatement[8077-8092]:ExpressionStatement[8077-8092]"
  }, {
    "left" : "if (denominator < 0)",
    "right" : "if (denominator < 0)",
    "info" : "IfStatement[8111-8408]:IfStatement[8111-8408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8132-8408]:Block[8132-8408]"
  }, {
    "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
    "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
    "info" : "IfStatement[8146-8322]:IfStatement[8146-8322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8234-8322]:Block[8234-8322]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: can't negate\");",
    "right" : "throw new ArithmeticException(\"overflow: can't negate\");",
    "info" : "ThrowStatement[8252-8308]:ThrowStatement[8252-8308]"
  }, {
    "left" : "numerator = -numerator;",
    "right" : "numerator = -numerator;",
    "info" : "ExpressionStatement[8335-8358]:ExpressionStatement[8335-8358]"
  }, {
    "left" : "denominator = -denominator;",
    "right" : "denominator = -denominator;",
    "info" : "ExpressionStatement[8371-8398]:ExpressionStatement[8371-8398]"
  }, {
    "left" : "int gcd = greatestCommonDivisor(numerator, denominator);",
    "right" : "int gcd = greatestCommonDivisor(numerator, denominator);",
    "info" : "VariableDeclarationStatement[8447-8503]:VariableDeclarationStatement[8447-8503]"
  }, {
    "left" : "numerator /= gcd;",
    "right" : "numerator /= gcd;",
    "info" : "ExpressionStatement[8512-8529]:ExpressionStatement[8512-8529]"
  }, {
    "left" : "denominator /= gcd;",
    "right" : "denominator /= gcd;",
    "info" : "ExpressionStatement[8538-8557]:ExpressionStatement[8538-8557]"
  }, {
    "left" : "return new Fraction(numerator, denominator);",
    "right" : "return new Fraction(numerator, denominator);",
    "info" : "ReturnStatement[8566-8610]:ReturnStatement[8566-8610]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9359-9365]:Modifier[9359-9365]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9366-9372]:Modifier[9366-9372]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[9373-9381]:SimpleType[9373-9381]"
  }, {
    "left" : "getFraction",
    "right" : "getFraction",
    "info" : "SimpleName[9382-9393]:SimpleName[9382-9393]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[9394-9406]:SingleVariableDeclaration[9394-9406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9408-11346]:Block[9408-11346]"
  }, {
    "left" : "int sign = (value < 0 ? -1 : 1);",
    "right" : "int sign = (value < 0 ? -1 : 1);",
    "info" : "VariableDeclarationStatement[9418-9450]:VariableDeclarationStatement[9418-9450]"
  }, {
    "left" : "value = Math.abs(value);",
    "right" : "value = Math.abs(value);",
    "info" : "ExpressionStatement[9459-9483]:ExpressionStatement[9459-9483]"
  }, {
    "left" : "if (value  > Integer.MAX_VALUE || Double.isNaN(value))",
    "right" : "if (value  > Integer.MAX_VALUE || Double.isNaN(value))",
    "info" : "IfStatement[9492-9681]:IfStatement[9492-9681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9547-9681]:Block[9547-9681]"
  }, {
    "left" : "throw new ArithmeticException\n                (\"The value must not be greater than Integer.MAX_VALUE or NaN\");",
    "right" : "throw new ArithmeticException\n                (\"The value must not be greater than Integer.MAX_VALUE or NaN\");",
    "info" : "ThrowStatement[9561-9671]:ThrowStatement[9561-9671]"
  }, {
    "left" : "int wholeNumber = (int) value;",
    "right" : "int wholeNumber = (int) value;",
    "info" : "VariableDeclarationStatement[9690-9720]:VariableDeclarationStatement[9690-9720]"
  }, {
    "left" : "value -= wholeNumber;",
    "right" : "value -= wholeNumber;",
    "info" : "ExpressionStatement[9729-9750]:ExpressionStatement[9729-9750]"
  }, {
    "left" : "int numer0 = 0;",
    "right" : "int numer0 = 0;",
    "info" : "VariableDeclarationStatement[9768-9783]:VariableDeclarationStatement[9768-9783]"
  }, {
    "left" : "int denom0 = 1;",
    "right" : "int denom0 = 1;",
    "info" : "VariableDeclarationStatement[9813-9828]:VariableDeclarationStatement[9813-9828]"
  }, {
    "left" : "int numer1 = 1;",
    "right" : "int numer1 = 1;",
    "info" : "VariableDeclarationStatement[9858-9873]:VariableDeclarationStatement[9858-9873]"
  }, {
    "left" : "int denom1 = 0;",
    "right" : "int denom1 = 0;",
    "info" : "VariableDeclarationStatement[9899-9914]:VariableDeclarationStatement[9899-9914]"
  }, {
    "left" : "int numer2 = 0;",
    "right" : "int numer2 = 0;",
    "info" : "VariableDeclarationStatement[9940-9955]:VariableDeclarationStatement[9940-9955]"
  }, {
    "left" : "int denom2 = 0;",
    "right" : "int denom2 = 0;",
    "info" : "VariableDeclarationStatement[10002-10017]:VariableDeclarationStatement[10002-10017]"
  }, {
    "left" : "int a1 = (int) value;",
    "right" : "int a1 = (int) value;",
    "info" : "VariableDeclarationStatement[10064-10085]:VariableDeclarationStatement[10064-10085]"
  }, {
    "left" : "int a2 = 0;",
    "right" : "int a2 = 0;",
    "info" : "VariableDeclarationStatement[10094-10105]:VariableDeclarationStatement[10094-10105]"
  }, {
    "left" : "double x1 = 1;",
    "right" : "double x1 = 1;",
    "info" : "VariableDeclarationStatement[10114-10128]:VariableDeclarationStatement[10114-10128]"
  }, {
    "left" : "double x2 = 0;",
    "right" : "double x2 = 0;",
    "info" : "VariableDeclarationStatement[10137-10151]:VariableDeclarationStatement[10137-10151]"
  }, {
    "left" : "double y1 = value - a1;",
    "right" : "double y1 = value - a1;",
    "info" : "VariableDeclarationStatement[10160-10183]:VariableDeclarationStatement[10160-10183]"
  }, {
    "left" : "double y2 = 0;",
    "right" : "double y2 = 0;",
    "info" : "VariableDeclarationStatement[10192-10206]:VariableDeclarationStatement[10192-10206]"
  }, {
    "left" : "double delta1, delta2 = Double.MAX_VALUE;",
    "right" : "double delta1, delta2 = Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[10215-10256]:VariableDeclarationStatement[10215-10256]"
  }, {
    "left" : "double fraction;",
    "right" : "double fraction;",
    "info" : "VariableDeclarationStatement[10265-10281]:VariableDeclarationStatement[10265-10281]"
  }, {
    "left" : "int i = 1;",
    "right" : "int i = 1;",
    "info" : "VariableDeclarationStatement[10290-10300]:VariableDeclarationStatement[10290-10300]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[10346-11141]:DoStatement[10346-11141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10349-11065]:Block[10349-11065]"
  }, {
    "left" : "delta1 = delta2;",
    "right" : "delta1 = delta2;",
    "info" : "ExpressionStatement[10363-10379]:ExpressionStatement[10363-10379]"
  }, {
    "left" : "a2 = (int) (x1 / y1);",
    "right" : "a2 = (int) (x1 / y1);",
    "info" : "ExpressionStatement[10392-10413]:ExpressionStatement[10392-10413]"
  }, {
    "left" : "x2 = y1;",
    "right" : "x2 = y1;",
    "info" : "ExpressionStatement[10426-10434]:ExpressionStatement[10426-10434]"
  }, {
    "left" : "y2 = x1 - a2 * y1;",
    "right" : "y2 = x1 - a2 * y1;",
    "info" : "ExpressionStatement[10447-10465]:ExpressionStatement[10447-10465]"
  }, {
    "left" : "numer2 = a1 * numer1 + numer0;",
    "right" : "numer2 = a1 * numer1 + numer0;",
    "info" : "ExpressionStatement[10478-10508]:ExpressionStatement[10478-10508]"
  }, {
    "left" : "denom2 = a1 * denom1 + denom0;",
    "right" : "denom2 = a1 * denom1 + denom0;",
    "info" : "ExpressionStatement[10521-10551]:ExpressionStatement[10521-10551]"
  }, {
    "left" : "fraction = (double) numer2 / (double) denom2;",
    "right" : "fraction = (double) numer2 / (double) denom2;",
    "info" : "ExpressionStatement[10564-10609]:ExpressionStatement[10564-10609]"
  }, {
    "left" : "delta2 = Math.abs(value - fraction);",
    "right" : "delta2 = Math.abs(value - fraction);",
    "info" : "ExpressionStatement[10622-10658]:ExpressionStatement[10622-10658]"
  }, {
    "left" : "a1 = a2;",
    "right" : "a1 = a2;",
    "info" : "ExpressionStatement[10771-10779]:ExpressionStatement[10771-10779]"
  }, {
    "left" : "x1 = x2;",
    "right" : "x1 = x2;",
    "info" : "ExpressionStatement[10792-10800]:ExpressionStatement[10792-10800]"
  }, {
    "left" : "y1 = y2;",
    "right" : "y1 = y2;",
    "info" : "ExpressionStatement[10813-10821]:ExpressionStatement[10813-10821]"
  }, {
    "left" : "numer0 = numer1;",
    "right" : "numer0 = numer1;",
    "info" : "ExpressionStatement[10834-10850]:ExpressionStatement[10834-10850]"
  }, {
    "left" : "denom0 = denom1;",
    "right" : "denom0 = denom1;",
    "info" : "ExpressionStatement[10863-10879]:ExpressionStatement[10863-10879]"
  }, {
    "left" : "numer1 = numer2;",
    "right" : "numer1 = numer2;",
    "info" : "ExpressionStatement[10892-10908]:ExpressionStatement[10892-10908]"
  }, {
    "left" : "denom1 = denom2;",
    "right" : "denom1 = denom2;",
    "info" : "ExpressionStatement[10921-10937]:ExpressionStatement[10921-10937]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[10950-10954]:ExpressionStatement[10950-10954]"
  }, {
    "left" : "if (i == 25)",
    "right" : "if (i == 25)",
    "info" : "IfStatement[11150-11257]:IfStatement[11150-11257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11163-11257]:Block[11163-11257]"
  }, {
    "left" : "throw new ArithmeticException(\"Unable to convert double to fraction\");",
    "right" : "throw new ArithmeticException(\"Unable to convert double to fraction\");",
    "info" : "ThrowStatement[11177-11247]:ThrowStatement[11177-11247]"
  }, {
    "left" : "return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);",
    "right" : "return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);",
    "info" : "ReturnStatement[11266-11340]:ReturnStatement[11266-11340]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11956-11962]:Modifier[11956-11962]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11963-11969]:Modifier[11963-11969]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[11970-11978]:SimpleType[11970-11978]"
  }, {
    "left" : "getFraction",
    "right" : "getFraction",
    "info" : "SimpleName[11979-11990]:SimpleName[11979-11990]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[11991-12001]:SingleVariableDeclaration[11991-12001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12003-13267]:Block[12003-13267]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[12013-12120]:IfStatement[12013-12120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12030-12120]:Block[12030-12120]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The string must not be null\");",
    "right" : "throw new IllegalArgumentException(\"The string must not be null\");",
    "info" : "ThrowStatement[12044-12110]:ThrowStatement[12044-12110]"
  }, {
    "left" : "int pos = str.indexOf('.');",
    "right" : "int pos = str.indexOf('.');",
    "info" : "VariableDeclarationStatement[12160-12187]:VariableDeclarationStatement[12160-12187]"
  }, {
    "left" : "if (pos >= 0)",
    "right" : "if (pos >= 0)",
    "info" : "IfStatement[12196-12278]:IfStatement[12196-12278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12210-12278]:Block[12210-12278]"
  }, {
    "left" : "return getFraction(Double.parseDouble(str));",
    "right" : "return getFraction(Double.parseDouble(str));",
    "info" : "ReturnStatement[12224-12268]:ReturnStatement[12224-12268]"
  }, {
    "left" : "pos = str.indexOf(' ');",
    "right" : "pos = str.indexOf(' ');",
    "info" : "ExpressionStatement[12318-12341]:ExpressionStatement[12318-12341]"
  }, {
    "left" : "if (pos > 0)",
    "right" : "if (pos > 0)",
    "info" : "IfStatement[12350-12880]:IfStatement[12350-12880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12363-12880]:Block[12363-12880]"
  }, {
    "left" : "int whole = Integer.parseInt(str.substring(0, pos));",
    "right" : "int whole = Integer.parseInt(str.substring(0, pos));",
    "info" : "VariableDeclarationStatement[12377-12429]:VariableDeclarationStatement[12377-12429]"
  }, {
    "left" : "str = str.substring(pos + 1);",
    "right" : "str = str.substring(pos + 1);",
    "info" : "ExpressionStatement[12442-12471]:ExpressionStatement[12442-12471]"
  }, {
    "left" : "pos = str.indexOf('/');",
    "right" : "pos = str.indexOf('/');",
    "info" : "ExpressionStatement[12484-12507]:ExpressionStatement[12484-12507]"
  }, {
    "left" : "if (pos < 0)",
    "right" : "if (pos < 0)",
    "info" : "IfStatement[12520-12870]:IfStatement[12520-12870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12533-12653]:Block[12533-12653]"
  }, {
    "left" : "throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");",
    "right" : "throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");",
    "info" : "ThrowStatement[12551-12639]:ThrowStatement[12551-12639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12659-12870]:Block[12659-12870]"
  }, {
    "left" : "int numer = Integer.parseInt(str.substring(0, pos));",
    "right" : "int numer = Integer.parseInt(str.substring(0, pos));",
    "info" : "VariableDeclarationStatement[12677-12729]:VariableDeclarationStatement[12677-12729]"
  }, {
    "left" : "int denom = Integer.parseInt(str.substring(pos + 1));",
    "right" : "int denom = Integer.parseInt(str.substring(pos + 1));",
    "info" : "VariableDeclarationStatement[12746-12799]:VariableDeclarationStatement[12746-12799]"
  }, {
    "left" : "return getFraction(whole, numer, denom);",
    "right" : "return getFraction(whole, numer, denom);",
    "info" : "ReturnStatement[12816-12856]:ReturnStatement[12816-12856]"
  }, {
    "left" : "pos = str.indexOf('/');",
    "right" : "pos = str.indexOf('/');",
    "info" : "ExpressionStatement[12918-12941]:ExpressionStatement[12918-12941]"
  }, {
    "left" : "if (pos < 0)",
    "right" : "if (pos < 0)",
    "info" : "IfStatement[12950-13261]:IfStatement[12950-13261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12963-13067]:Block[12963-13067]"
  }, {
    "left" : "return getFraction(Integer.parseInt(str), 1);",
    "right" : "return getFraction(Integer.parseInt(str), 1);",
    "info" : "ReturnStatement[13012-13057]:ReturnStatement[13012-13057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13073-13261]:Block[13073-13261]"
  }, {
    "left" : "int numer = Integer.parseInt(str.substring(0, pos));",
    "right" : "int numer = Integer.parseInt(str.substring(0, pos));",
    "info" : "VariableDeclarationStatement[13087-13139]:VariableDeclarationStatement[13087-13139]"
  }, {
    "left" : "int denom = Integer.parseInt(str.substring(pos + 1));",
    "right" : "int denom = Integer.parseInt(str.substring(pos + 1));",
    "info" : "VariableDeclarationStatement[13152-13205]:VariableDeclarationStatement[13152-13205]"
  }, {
    "left" : "return getFraction(numer, denom);",
    "right" : "return getFraction(numer, denom);",
    "info" : "ReturnStatement[13218-13251]:ReturnStatement[13218-13251]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13623-13629]:Modifier[13623-13629]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13630-13633]:PrimitiveType[13630-13633]"
  }, {
    "left" : "getNumerator",
    "right" : "getNumerator",
    "info" : "SimpleName[13634-13646]:SimpleName[13634-13646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13649-13682]:Block[13649-13682]"
  }, {
    "left" : "return numerator;",
    "right" : "return numerator;",
    "info" : "ReturnStatement[13659-13676]:ReturnStatement[13659-13676]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13813-13819]:Modifier[13813-13819]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13820-13823]:PrimitiveType[13820-13823]"
  }, {
    "left" : "getDenominator",
    "right" : "getDenominator",
    "info" : "SimpleName[13824-13838]:SimpleName[13824-13838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13841-13876]:Block[13841-13876]"
  }, {
    "left" : "return denominator;",
    "right" : "return denominator;",
    "info" : "ReturnStatement[13851-13870]:ReturnStatement[13851-13870]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14350-14356]:Modifier[14350-14356]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14357-14360]:PrimitiveType[14357-14360]"
  }, {
    "left" : "getProperNumerator",
    "right" : "getProperNumerator",
    "info" : "SimpleName[14361-14379]:SimpleName[14361-14379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14382-14439]:Block[14382-14439]"
  }, {
    "left" : "return Math.abs(numerator % denominator);",
    "right" : "return Math.abs(numerator % denominator);",
    "info" : "ReturnStatement[14392-14433]:ReturnStatement[14392-14433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14910-14916]:Modifier[14910-14916]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14917-14920]:PrimitiveType[14917-14920]"
  }, {
    "left" : "getProperWhole",
    "right" : "getProperWhole",
    "info" : "SimpleName[14921-14935]:SimpleName[14921-14935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14938-14985]:Block[14938-14985]"
  }, {
    "left" : "return numerator / denominator;",
    "right" : "return numerator / denominator;",
    "info" : "ReturnStatement[14948-14979]:ReturnStatement[14948-14979]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15272-15278]:Modifier[15272-15278]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15279-15282]:PrimitiveType[15279-15282]"
  }, {
    "left" : "intValue",
    "right" : "intValue",
    "info" : "SimpleName[15283-15291]:SimpleName[15283-15291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15294-15341]:Block[15294-15341]"
  }, {
    "left" : "return numerator / denominator;",
    "right" : "return numerator / denominator;",
    "info" : "ReturnStatement[15304-15335]:ReturnStatement[15304-15335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15531-15537]:Modifier[15531-15537]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[15538-15542]:PrimitiveType[15538-15542]"
  }, {
    "left" : "longValue",
    "right" : "longValue",
    "info" : "SimpleName[15543-15552]:SimpleName[15543-15552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15555-15609]:Block[15555-15609]"
  }, {
    "left" : "return (long) numerator / denominator;",
    "right" : "return (long) numerator / denominator;",
    "info" : "ReturnStatement[15565-15603]:ReturnStatement[15565-15603]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15824-15830]:Modifier[15824-15830]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[15831-15836]:PrimitiveType[15831-15836]"
  }, {
    "left" : "floatValue",
    "right" : "floatValue",
    "info" : "SimpleName[15837-15847]:SimpleName[15837-15847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15850-15917]:Block[15850-15917]"
  }, {
    "left" : "return ((float) numerator) / ((float) denominator);",
    "right" : "return ((float) numerator) / ((float) denominator);",
    "info" : "ReturnStatement[15860-15911]:ReturnStatement[15860-15911]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16134-16140]:Modifier[16134-16140]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[16141-16147]:PrimitiveType[16141-16147]"
  }, {
    "left" : "doubleValue",
    "right" : "doubleValue",
    "info" : "SimpleName[16148-16159]:SimpleName[16148-16159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16162-16231]:Block[16162-16231]"
  }, {
    "left" : "return ((double) numerator) / ((double) denominator);",
    "right" : "return ((double) numerator) / ((double) denominator);",
    "info" : "ReturnStatement[16172-16225]:ReturnStatement[16172-16225]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16666-16672]:Modifier[16666-16672]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[16673-16681]:SimpleType[16673-16681]"
  }, {
    "left" : "reduce",
    "right" : "reduce",
    "info" : "SimpleName[16682-16688]:SimpleName[16682-16688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16691-16905]:Block[16691-16992]"
  }, {
    "left" : "int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);",
    "right" : "int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);",
    "info" : "VariableDeclarationStatement[16701-16767]:VariableDeclarationStatement[16788-16854]"
  }, {
    "left" : "if (gcd == 1)",
    "right" : "if (gcd == 1)",
    "info" : "IfStatement[16776-16826]:IfStatement[16863-16913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16790-16826]:Block[16877-16913]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[16804-16816]:ReturnStatement[16891-16903]"
  }, {
    "left" : "return Fraction.getFraction(numerator / gcd, denominator / gcd);",
    "right" : "return Fraction.getFraction(numerator / gcd, denominator / gcd);",
    "info" : "ReturnStatement[16835-16899]:ReturnStatement[16922-16986]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17237-17243]:Modifier[17324-17330]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[17244-17252]:SimpleType[17331-17339]"
  }, {
    "left" : "invert",
    "right" : "invert",
    "info" : "SimpleName[17253-17259]:SimpleName[17340-17346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17262-17681]:Block[17349-17768]"
  }, {
    "left" : "if (numerator == 0)",
    "right" : "if (numerator == 0)",
    "info" : "IfStatement[17272-17372]:IfStatement[17359-17459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17292-17372]:Block[17379-17459]"
  }, {
    "left" : "throw new ArithmeticException(\"Unable to invert zero.\");",
    "right" : "throw new ArithmeticException(\"Unable to invert zero.\");",
    "info" : "ThrowStatement[17306-17362]:ThrowStatement[17393-17449]"
  }, {
    "left" : "if (numerator==Integer.MIN_VALUE)",
    "right" : "if (numerator==Integer.MIN_VALUE)",
    "info" : "IfStatement[17381-17505]:IfStatement[17468-17592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17415-17505]:Block[17502-17592]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: can't negate numerator\");",
    "right" : "throw new ArithmeticException(\"overflow: can't negate numerator\");",
    "info" : "ThrowStatement[17429-17495]:ThrowStatement[17516-17582]"
  }, {
    "left" : "if (numerator<0)",
    "right" : "if (numerator<0)",
    "info" : "IfStatement[17514-17675]:IfStatement[17601-17762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17531-17601]:Block[17618-17688]"
  }, {
    "left" : "return new Fraction(-denominator, -numerator);",
    "right" : "return new Fraction(-denominator, -numerator);",
    "info" : "ReturnStatement[17545-17591]:ReturnStatement[17632-17678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17607-17675]:Block[17694-17762]"
  }, {
    "left" : "return new Fraction(denominator, numerator);",
    "right" : "return new Fraction(denominator, numerator);",
    "info" : "ReturnStatement[17621-17665]:ReturnStatement[17708-17752]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17919-17925]:Modifier[18006-18012]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[17926-17934]:SimpleType[18013-18021]"
  }, {
    "left" : "negate",
    "right" : "negate",
    "info" : "SimpleName[17935-17941]:SimpleName[18022-18028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17944-18215]:Block[18031-18302]"
  }, {
    "left" : "if (numerator==Integer.MIN_VALUE)",
    "right" : "if (numerator==Integer.MIN_VALUE)",
    "info" : "IfStatement[18034-18155]:IfStatement[18121-18242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18068-18155]:Block[18155-18242]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: too large to negate\");",
    "right" : "throw new ArithmeticException(\"overflow: too large to negate\");",
    "info" : "ThrowStatement[18082-18145]:ThrowStatement[18169-18232]"
  }, {
    "left" : "return new Fraction(-numerator, denominator);",
    "right" : "return new Fraction(-numerator, denominator);",
    "info" : "ReturnStatement[18164-18209]:ReturnStatement[18251-18296]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18587-18593]:Modifier[18674-18680]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[18594-18602]:SimpleType[18681-18689]"
  }, {
    "left" : "abs",
    "right" : "abs",
    "info" : "SimpleName[18603-18606]:SimpleName[18690-18693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18609-18706]:Block[18696-18793]"
  }, {
    "left" : "if (numerator >= 0)",
    "right" : "if (numerator >= 0)",
    "info" : "IfStatement[18619-18675]:IfStatement[18706-18762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18639-18675]:Block[18726-18762]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[18653-18665]:ReturnStatement[18740-18752]"
  }, {
    "left" : "return negate();",
    "right" : "return negate();",
    "info" : "ReturnStatement[18684-18700]:ReturnStatement[18771-18787]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19248-19254]:Modifier[19335-19341]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[19255-19263]:SimpleType[19342-19350]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[19264-19267]:SimpleName[19351-19354]"
  }, {
    "left" : "int power",
    "right" : "int power",
    "info" : "SingleVariableDeclaration[19268-19277]:SingleVariableDeclaration[19355-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19279-19890]:Block[19366-19977]"
  }, {
    "left" : "if (power == 1)",
    "right" : "if (power == 1)",
    "info" : "IfStatement[19289-19884]:IfStatement[19376-19971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19305-19341]:Block[19392-19428]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19319-19331]:ReturnStatement[19406-19418]"
  }, {
    "left" : "if (power == 0)",
    "right" : "if (power == 0)",
    "info" : "IfStatement[19347-19884]:IfStatement[19434-19971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19363-19398]:Block[19450-19485]"
  }, {
    "left" : "return ONE;",
    "right" : "return ONE;",
    "info" : "ReturnStatement[19377-19388]:ReturnStatement[19464-19475]"
  }, {
    "left" : "if (power < 0)",
    "right" : "if (power < 0)",
    "info" : "IfStatement[19404-19884]:IfStatement[19491-19971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19419-19626]:Block[19506-19713]"
  }, {
    "left" : "if (power==Integer.MIN_VALUE)",
    "right" : "if (power==Integer.MIN_VALUE)",
    "info" : "IfStatement[19433-19570]:IfStatement[19520-19657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19463-19570]:Block[19550-19657]"
  }, {
    "left" : "return this.invert().pow(2).pow(-(power/2));",
    "right" : "return this.invert().pow(2).pow(-(power/2));",
    "info" : "ReturnStatement[19512-19556]:ReturnStatement[19599-19643]"
  }, {
    "left" : "return this.invert().pow(-power);",
    "right" : "return this.invert().pow(-power);",
    "info" : "ReturnStatement[19583-19616]:ReturnStatement[19670-19703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19632-19884]:Block[19719-19971]"
  }, {
    "left" : "Fraction f = this.multiplyBy(this);",
    "right" : "Fraction f = this.multiplyBy(this);",
    "info" : "VariableDeclarationStatement[19646-19681]:VariableDeclarationStatement[19733-19768]"
  }, {
    "left" : "if ((power % 2) == 0)",
    "right" : "if ((power % 2) == 0)",
    "info" : "IfStatement[19694-19874]:IfStatement[19781-19961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19716-19784]:Block[19803-19871]"
  }, {
    "left" : "return f.pow(power/2);",
    "right" : "return f.pow(power/2);",
    "info" : "ReturnStatement[19748-19770]:ReturnStatement[19835-19857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19790-19874]:Block[19877-19961]"
  }, {
    "left" : "return f.pow(power/2).multiplyBy(this);",
    "right" : "return f.pow(power/2).multiplyBy(this);",
    "info" : "ReturnStatement[19821-19860]:ReturnStatement[19908-19947]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20300-20307]:Modifier[20387-20394]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20308-20314]:Modifier[20395-20401]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20315-20318]:PrimitiveType[20402-20405]"
  }, {
    "left" : "greatestCommonDivisor",
    "right" : "greatestCommonDivisor",
    "info" : "SimpleName[20319-20340]:SimpleName[20406-20427]"
  }, {
    "left" : "int u",
    "right" : "int u",
    "info" : "SingleVariableDeclaration[20341-20346]:SingleVariableDeclaration[20428-20433]"
  }, {
    "left" : "int v",
    "right" : "int v",
    "info" : "SingleVariableDeclaration[20348-20353]:SingleVariableDeclaration[20435-20440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20355-21972]:Block[20442-22059]"
  }, {
    "left" : "if (Math.abs(u) <= 1 || Math.abs(v) <= 1)",
    "right" : "if (Math.abs(u) <= 1 || Math.abs(v) <= 1)",
    "info" : "IfStatement[20414-20489]:IfStatement[20501-20576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20456-20489]:Block[20543-20576]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[20470-20479]:ReturnStatement[20557-20566]"
  }, {
    "left" : "if (u>0)",
    "right" : "if (u>0)",
    "info" : "IfStatement[20731-20749]:IfStatement[20818-20836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20740-20749]:Block[20827-20836]"
  }, {
    "left" : "u=-u;",
    "right" : "u=-u;",
    "info" : "ExpressionStatement[20742-20747]:ExpressionStatement[20829-20834]"
  }, {
    "left" : "if (v>0)",
    "right" : "if (v>0)",
    "info" : "IfStatement[20777-20795]:IfStatement[20864-20882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20786-20795]:Block[20873-20882]"
  }, {
    "left" : "v=-v;",
    "right" : "v=-v;",
    "info" : "ExpressionStatement[20788-20793]:ExpressionStatement[20875-20880]"
  }, {
    "left" : "int k=0;",
    "right" : "int k=0;",
    "info" : "VariableDeclarationStatement[20856-20864]:VariableDeclarationStatement[20943-20951]"
  }, {
    "left" : "while ((u&1)==0 && (v&1)==0 && k<31)",
    "right" : "while ((u&1)==0 && (v&1)==0 && k<31)",
    "info" : "WhileStatement[20873-21002]:WhileStatement[20960-21089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20910-21002]:Block[20997-21089]"
  }, {
    "left" : "u/=2;",
    "right" : "u/=2;",
    "info" : "ExpressionStatement[20958-20963]:ExpressionStatement[21045-21050]"
  }, {
    "left" : "v/=2;",
    "right" : "v/=2;",
    "info" : "ExpressionStatement[20964-20969]:ExpressionStatement[21051-21056]"
  }, {
    "left" : "k++;",
    "right" : "k++;",
    "info" : "ExpressionStatement[20970-20974]:ExpressionStatement[21057-21061]"
  }, {
    "left" : "if (k==31)",
    "right" : "if (k==31)",
    "info" : "IfStatement[21011-21101]:IfStatement[21098-21188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21022-21101]:Block[21109-21188]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
    "right" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
    "info" : "ThrowStatement[21036-21091]:ThrowStatement[21123-21178]"
  }, {
    "left" : "int t = ((u&1)==1) ? v : -(u/2)/*B3*/;",
    "right" : "int t = ((u&1)==1) ? v : -(u/2)/*B3*/;",
    "info" : "VariableDeclarationStatement[21210-21248]:VariableDeclarationStatement[21297-21335]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[21379-21924]:DoStatement[21466-22011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21382-21910]:Block[21469-21997]"
  }, {
    "left" : "while ((t&1)==0)",
    "right" : "while ((t&1)==0)",
    "info" : "WhileStatement[21477-21569]:WhileStatement[21564-21656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21494-21569]:Block[21581-21656]"
  }, {
    "left" : "t/=2;",
    "right" : "t/=2;",
    "info" : "ExpressionStatement[21533-21538]:ExpressionStatement[21620-21625]"
  }, {
    "left" : "if (t>0)",
    "right" : "if (t>0)",
    "info" : "IfStatement[21617-21709]:IfStatement[21704-21796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21626-21665]:Block[21713-21752]"
  }, {
    "left" : "u = -t;",
    "right" : "u = -t;",
    "info" : "ExpressionStatement[21644-21651]:ExpressionStatement[21731-21738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21671-21709]:Block[21758-21796]"
  }, {
    "left" : "v = t;",
    "right" : "v = t;",
    "info" : "ExpressionStatement[21689-21695]:ExpressionStatement[21776-21782]"
  }, {
    "left" : "t = (v - u)/2;",
    "right" : "t = (v - u)/2;",
    "info" : "ExpressionStatement[21786-21800]:ExpressionStatement[21873-21887]"
  }, {
    "left" : "return -u*(1<<k);",
    "right" : "return -u*(1<<k);",
    "info" : "ReturnStatement[21933-21950]:ReturnStatement[22020-22037]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22360-22367]:Modifier[22447-22454]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22368-22374]:Modifier[22455-22461]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[22375-22378]:PrimitiveType[22462-22465]"
  }, {
    "left" : "mulAndCheck",
    "right" : "mulAndCheck",
    "info" : "SimpleName[22379-22390]:SimpleName[22466-22477]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[22391-22396]:SingleVariableDeclaration[22478-22483]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[22398-22403]:SingleVariableDeclaration[22485-22490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22405-22617]:Block[22492-22704]"
  }, {
    "left" : "long m = ((long)x)*((long)y);",
    "right" : "long m = ((long)x)*((long)y);",
    "info" : "VariableDeclarationStatement[22415-22444]:VariableDeclarationStatement[22502-22531]"
  }, {
    "left" : "if (m < Integer.MIN_VALUE ||\n            m > Integer.MAX_VALUE)",
    "right" : "if (m < Integer.MIN_VALUE ||\n            m > Integer.MAX_VALUE)",
    "info" : "IfStatement[22453-22588]:IfStatement[22540-22675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22517-22588]:Block[22604-22675]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: mul\");",
    "right" : "throw new ArithmeticException(\"overflow: mul\");",
    "info" : "ThrowStatement[22531-22578]:ThrowStatement[22618-22665]"
  }, {
    "left" : "return (int)m;",
    "right" : "return (int)m;",
    "info" : "ReturnStatement[22597-22611]:ReturnStatement[22684-22698]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22927-22934]:Modifier[23014-23021]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22935-22941]:Modifier[23022-23028]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[22942-22945]:PrimitiveType[23029-23032]"
  }, {
    "left" : "mulPosAndCheck",
    "right" : "mulPosAndCheck",
    "info" : "SimpleName[22946-22960]:SimpleName[23033-23047]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[22961-22966]:SingleVariableDeclaration[23048-23053]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[22968-22973]:SingleVariableDeclaration[23055-23060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22975-23188]:Block[23062-23275]"
  }, {
    "left" : "long m = ((long)x)*((long)y);",
    "right" : "long m = ((long)x)*((long)y);",
    "info" : "VariableDeclarationStatement[23020-23049]:VariableDeclarationStatement[23107-23136]"
  }, {
    "left" : "if (m > Integer.MAX_VALUE)",
    "right" : "if (m > Integer.MAX_VALUE)",
    "info" : "IfStatement[23058-23159]:IfStatement[23145-23246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23085-23159]:Block[23172-23246]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: mulPos\");",
    "right" : "throw new ArithmeticException(\"overflow: mulPos\");",
    "info" : "ThrowStatement[23099-23149]:ThrowStatement[23186-23236]"
  }, {
    "left" : "return (int)m;",
    "right" : "return (int)m;",
    "info" : "ReturnStatement[23168-23182]:ReturnStatement[23255-23269]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23452-23459]:Modifier[23539-23546]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23460-23466]:Modifier[23547-23553]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[23467-23470]:PrimitiveType[23554-23557]"
  }, {
    "left" : "addAndCheck",
    "right" : "addAndCheck",
    "info" : "SimpleName[23471-23482]:SimpleName[23558-23569]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[23483-23488]:SingleVariableDeclaration[23570-23575]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[23490-23495]:SingleVariableDeclaration[23577-23582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23497-23705]:Block[23584-23792]"
  }, {
    "left" : "long s = (long)x+(long)y;",
    "right" : "long s = (long)x+(long)y;",
    "info" : "VariableDeclarationStatement[23507-23532]:VariableDeclarationStatement[23594-23619]"
  }, {
    "left" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
    "right" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
    "info" : "IfStatement[23541-23676]:IfStatement[23628-23763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23605-23676]:Block[23692-23763]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: add\");",
    "right" : "throw new ArithmeticException(\"overflow: add\");",
    "info" : "ThrowStatement[23619-23666]:ThrowStatement[23706-23753]"
  }, {
    "left" : "return (int)s;",
    "right" : "return (int)s;",
    "info" : "ReturnStatement[23685-23699]:ReturnStatement[23772-23786]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23988-23995]:Modifier[24075-24082]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23996-24002]:Modifier[24083-24089]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24003-24006]:PrimitiveType[24090-24093]"
  }, {
    "left" : "subAndCheck",
    "right" : "subAndCheck",
    "info" : "SimpleName[24007-24018]:SimpleName[24094-24105]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[24019-24024]:SingleVariableDeclaration[24106-24111]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[24026-24031]:SingleVariableDeclaration[24113-24118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24033-24241]:Block[24120-24328]"
  }, {
    "left" : "long s = (long)x-(long)y;",
    "right" : "long s = (long)x-(long)y;",
    "info" : "VariableDeclarationStatement[24043-24068]:VariableDeclarationStatement[24130-24155]"
  }, {
    "left" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
    "right" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
    "info" : "IfStatement[24077-24212]:IfStatement[24164-24299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24141-24212]:Block[24228-24299]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: add\");",
    "right" : "throw new ArithmeticException(\"overflow: add\");",
    "info" : "ThrowStatement[24155-24202]:ThrowStatement[24242-24289]"
  }, {
    "left" : "return (int)s;",
    "right" : "return (int)s;",
    "info" : "ReturnStatement[24221-24235]:ReturnStatement[24308-24322]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24763-24769]:Modifier[24850-24856]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[24770-24778]:SimpleType[24857-24865]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[24779-24782]:SimpleName[24866-24869]"
  }, {
    "left" : "Fraction fraction",
    "right" : "Fraction fraction",
    "info" : "SingleVariableDeclaration[24783-24800]:SingleVariableDeclaration[24870-24887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24802-24858]:Block[24889-24945]"
  }, {
    "left" : "return addSub(fraction, true /* add */);",
    "right" : "return addSub(fraction, true /* add */);",
    "info" : "ReturnStatement[24812-24852]:ReturnStatement[24899-24939]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25378-25384]:Modifier[25465-25471]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[25385-25393]:SimpleType[25472-25480]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[25394-25402]:SimpleName[25481-25489]"
  }, {
    "left" : "Fraction fraction",
    "right" : "Fraction fraction",
    "info" : "SingleVariableDeclaration[25403-25420]:SingleVariableDeclaration[25490-25507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25422-25484]:Block[25509-25571]"
  }, {
    "left" : "return addSub(fraction, false /* subtract */);",
    "right" : "return addSub(fraction, false /* subtract */);",
    "info" : "ReturnStatement[25432-25478]:ReturnStatement[25519-25565]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26004-26011]:Modifier[26091-26098]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[26012-26020]:SimpleType[26099-26107]"
  }, {
    "left" : "addSub",
    "right" : "addSub",
    "info" : "SimpleName[26021-26027]:SimpleName[26108-26114]"
  }, {
    "left" : "Fraction fraction",
    "right" : "Fraction fraction",
    "info" : "SingleVariableDeclaration[26028-26045]:SingleVariableDeclaration[26115-26132]"
  }, {
    "left" : "boolean isAdd",
    "right" : "boolean isAdd",
    "info" : "SingleVariableDeclaration[26047-26060]:SingleVariableDeclaration[26134-26147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26062-28067]:Block[26149-28154]"
  }, {
    "left" : "if (fraction == null)",
    "right" : "if (fraction == null)",
    "info" : "IfStatement[26072-26186]:IfStatement[26159-26273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26094-26186]:Block[26181-26273]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "info" : "ThrowStatement[26108-26176]:ThrowStatement[26195-26263]"
  }, {
    "left" : "if (numerator == 0)",
    "right" : "if (numerator == 0)",
    "info" : "IfStatement[26237-26325]:IfStatement[26324-26412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26257-26325]:Block[26344-26412]"
  }, {
    "left" : "return isAdd ? fraction : fraction.negate();",
    "right" : "return isAdd ? fraction : fraction.negate();",
    "info" : "ReturnStatement[26271-26315]:ReturnStatement[26358-26402]"
  }, {
    "left" : "if (fraction.numerator == 0)",
    "right" : "if (fraction.numerator == 0)",
    "info" : "IfStatement[26334-26399]:IfStatement[26421-26486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26363-26399]:Block[26450-26486]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[26377-26389]:ReturnStatement[26464-26476]"
  }, {
    "left" : "int d1 = greatestCommonDivisor(denominator, fraction.denominator);",
    "right" : "int d1 = greatestCommonDivisor(denominator, fraction.denominator);",
    "info" : "VariableDeclarationStatement[26513-26579]:VariableDeclarationStatement[26600-26666]"
  }, {
    "left" : "if (d1==1)",
    "right" : "if (d1==1)",
    "info" : "IfStatement[26588-26969]:IfStatement[26675-27056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26599-26969]:Block[26686-27056]"
  }, {
    "left" : "int uvp = mulAndCheck(numerator, fraction.denominator);",
    "right" : "int uvp = mulAndCheck(numerator, fraction.denominator);",
    "info" : "VariableDeclarationStatement[26663-26718]:VariableDeclarationStatement[26750-26805]"
  }, {
    "left" : "int upv = mulAndCheck(fraction.numerator, denominator);",
    "right" : "int upv = mulAndCheck(fraction.numerator, denominator);",
    "info" : "VariableDeclarationStatement[26731-26786]:VariableDeclarationStatement[26818-26873]"
  }, {
    "left" : "return new Fraction\n                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),\n                 mulPosAndCheck(denominator, fraction.denominator));",
    "right" : "return new Fraction\n                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),\n                 mulPosAndCheck(denominator, fraction.denominator));",
    "info" : "ReturnStatement[26799-26959]:ReturnStatement[26886-27046]"
  }, {
    "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n            .multiply(BigInteger.valueOf(fraction.denominator/d1));",
    "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n            .multiply(BigInteger.valueOf(fraction.denominator/d1));",
    "info" : "VariableDeclarationStatement[27147-27261]:VariableDeclarationStatement[27234-27348]"
  }, {
    "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n            .multiply(BigInteger.valueOf(denominator/d1));",
    "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n            .multiply(BigInteger.valueOf(denominator/d1));",
    "info" : "VariableDeclarationStatement[27270-27384]:VariableDeclarationStatement[27357-27471]"
  }, {
    "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
    "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
    "info" : "VariableDeclarationStatement[27393-27449]:VariableDeclarationStatement[27480-27536]"
  }, {
    "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
    "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
    "info" : "VariableDeclarationStatement[27559-27613]:VariableDeclarationStatement[27646-27700]"
  }, {
    "left" : "int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);",
    "right" : "int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);",
    "info" : "VariableDeclarationStatement[27622-27680]:VariableDeclarationStatement[27709-27767]"
  }, {
    "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
    "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
    "info" : "VariableDeclarationStatement[27735-27783]:VariableDeclarationStatement[27822-27870]"
  }, {
    "left" : "if (w.bitLength() > 31)",
    "right" : "if (w.bitLength() > 31)",
    "info" : "IfStatement[27792-27935]:IfStatement[27879-28022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27816-27935]:Block[27903-28022]"
  }, {
    "left" : "throw new ArithmeticException\n                (\"overflow: numerator too large after multiply\");",
    "right" : "throw new ArithmeticException\n                (\"overflow: numerator too large after multiply\");",
    "info" : "ThrowStatement[27830-27925]:ThrowStatement[27917-28012]"
  }, {
    "left" : "return new Fraction\n            (w.intValue(),\n             mulPosAndCheck(denominator/d1, fraction.denominator/d2));",
    "right" : "return new Fraction\n            (w.intValue(),\n             mulPosAndCheck(denominator/d1, fraction.denominator/d2));",
    "info" : "ReturnStatement[27944-28061]:ReturnStatement[28031-28148]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28564-28570]:Modifier[28651-28657]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[28571-28579]:SimpleType[28658-28666]"
  }, {
    "left" : "multiplyBy",
    "right" : "multiplyBy",
    "info" : "SimpleName[28580-28590]:SimpleName[28667-28677]"
  }, {
    "left" : "Fraction fraction",
    "right" : "Fraction fraction",
    "info" : "SingleVariableDeclaration[28591-28608]:SingleVariableDeclaration[28678-28695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28610-29243]:Block[28697-29330]"
  }, {
    "left" : "if (fraction == null)",
    "right" : "if (fraction == null)",
    "info" : "IfStatement[28620-28734]:IfStatement[28707-28821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28642-28734]:Block[28729-28821]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "info" : "ThrowStatement[28656-28724]:ThrowStatement[28743-28811]"
  }, {
    "left" : "if (numerator == 0 || fraction.numerator == 0)",
    "right" : "if (numerator == 0 || fraction.numerator == 0)",
    "info" : "IfStatement[28743-28826]:IfStatement[28830-28913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28790-28826]:Block[28877-28913]"
  }, {
    "left" : "return ZERO;",
    "right" : "return ZERO;",
    "info" : "ReturnStatement[28804-28816]:ReturnStatement[28891-28903]"
  }, {
    "left" : "int d1 = greatestCommonDivisor(numerator, fraction.denominator);",
    "right" : "int d1 = greatestCommonDivisor(numerator, fraction.denominator);",
    "info" : "VariableDeclarationStatement[28932-28996]:VariableDeclarationStatement[29019-29083]"
  }, {
    "left" : "int d2 = greatestCommonDivisor(fraction.numerator, denominator);",
    "right" : "int d2 = greatestCommonDivisor(fraction.numerator, denominator);",
    "info" : "VariableDeclarationStatement[29005-29069]:VariableDeclarationStatement[29092-29156]"
  }, {
    "left" : "return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator/d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));",
    "right" : "return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator/d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));",
    "info" : "ReturnStatement[29078-29237]:ReturnStatement[29165-29324]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29760-29766]:Modifier[29847-29853]"
  }, {
    "left" : "Fraction",
    "right" : "Fraction",
    "info" : "SimpleType[29767-29775]:SimpleType[29854-29862]"
  }, {
    "left" : "divideBy",
    "right" : "divideBy",
    "info" : "SimpleName[29776-29784]:SimpleName[29863-29871]"
  }, {
    "left" : "Fraction fraction",
    "right" : "Fraction fraction",
    "info" : "SingleVariableDeclaration[29785-29802]:SingleVariableDeclaration[29872-29889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29804-30118]:Block[29891-30205]"
  }, {
    "left" : "if (fraction == null)",
    "right" : "if (fraction == null)",
    "info" : "IfStatement[29814-29928]:IfStatement[29901-30015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29836-29928]:Block[29923-30015]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
    "info" : "ThrowStatement[29850-29918]:ThrowStatement[29937-30005]"
  }, {
    "left" : "if (fraction.numerator == 0)",
    "right" : "if (fraction.numerator == 0)",
    "info" : "IfStatement[29937-30066]:IfStatement[30024-30153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29966-30066]:Block[30053-30153]"
  }, {
    "left" : "throw new ArithmeticException(\"The fraction to divide by must not be zero\");",
    "right" : "throw new ArithmeticException(\"The fraction to divide by must not be zero\");",
    "info" : "ThrowStatement[29980-30056]:ThrowStatement[30067-30143]"
  }, {
    "left" : "return multiplyBy(fraction.invert());",
    "right" : "return multiplyBy(fraction.invert());",
    "info" : "ReturnStatement[30075-30112]:ReturnStatement[30162-30199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30528-30534]:Modifier[30615-30621]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30535-30542]:PrimitiveType[30622-30629]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[30543-30549]:SimpleName[30630-30636]"
  }, {
    "left" : "Object obj",
    "right" : "Object obj",
    "info" : "SingleVariableDeclaration[30550-30560]:SingleVariableDeclaration[30637-30647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30562-30875]:Block[30649-30962]"
  }, {
    "left" : "if (obj == this)",
    "right" : "if (obj == this)",
    "info" : "IfStatement[30572-30625]:IfStatement[30659-30712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30589-30625]:Block[30676-30712]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30603-30615]:ReturnStatement[30690-30702]"
  }, {
    "left" : "if (obj instanceof Fraction == false)",
    "right" : "if (obj instanceof Fraction == false)",
    "info" : "IfStatement[30634-30709]:IfStatement[30721-30796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30672-30709]:Block[30759-30796]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30686-30699]:ReturnStatement[30773-30786]"
  }, {
    "left" : "Fraction other = (Fraction) obj;",
    "right" : "Fraction other = (Fraction) obj;",
    "info" : "VariableDeclarationStatement[30718-30750]:VariableDeclarationStatement[30805-30837]"
  }, {
    "left" : "return (getNumerator() == other.getNumerator() &&\n                getDenominator() == other.getDenominator());",
    "right" : "return (getNumerator() == other.getNumerator() &&\n                getDenominator() == other.getDenominator());",
    "info" : "ReturnStatement[30759-30869]:ReturnStatement[30846-30956]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31001-31007]:Modifier[31088-31094]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[31008-31011]:PrimitiveType[31095-31098]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[31012-31020]:SimpleName[31099-31107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31023-31218]:Block[31110-31305]"
  }, {
    "left" : "if (hashCode == 0)",
    "right" : "if (hashCode == 0)",
    "info" : "IfStatement[31033-31187]:IfStatement[31120-31274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31052-31187]:Block[31139-31274]"
  }, {
    "left" : "hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();",
    "right" : "hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();",
    "info" : "ExpressionStatement[31115-31177]:ExpressionStatement[31202-31264]"
  }, {
    "left" : "return hashCode;",
    "right" : "return hashCode;",
    "info" : "ReturnStatement[31196-31212]:ReturnStatement[31283-31299]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31773-31779]:Modifier[31860-31866]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[31780-31783]:PrimitiveType[31867-31870]"
  }, {
    "left" : "compareTo",
    "right" : "compareTo",
    "info" : "SimpleName[31784-31793]:SimpleName[31871-31880]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[31794-31807]:SingleVariableDeclaration[31881-31894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31809-32366]:Block[31896-32453]"
  }, {
    "left" : "Fraction other = (Fraction) object;",
    "right" : "Fraction other = (Fraction) object;",
    "info" : "VariableDeclarationStatement[31819-31854]:VariableDeclarationStatement[31906-31941]"
  }, {
    "left" : "if (this==other)",
    "right" : "if (this==other)",
    "info" : "IfStatement[31863-31913]:IfStatement[31950-32000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31880-31913]:Block[31967-32000]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[31894-31903]:ReturnStatement[31981-31990]"
  }, {
    "left" : "if (numerator == other.numerator && denominator == other.denominator)",
    "right" : "if (numerator == other.numerator && denominator == other.denominator)",
    "info" : "IfStatement[31922-32025]:IfStatement[32009-32112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31992-32025]:Block[32079-32112]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[32006-32015]:ReturnStatement[32093-32102]"
  }, {
    "left" : "long first = (long) numerator * (long) other.denominator;",
    "right" : "long first = (long) numerator * (long) other.denominator;",
    "info" : "VariableDeclarationStatement[32074-32131]:VariableDeclarationStatement[32161-32218]"
  }, {
    "left" : "long second = (long) other.numerator * (long) denominator;",
    "right" : "long second = (long) other.numerator * (long) denominator;",
    "info" : "VariableDeclarationStatement[32140-32198]:VariableDeclarationStatement[32227-32285]"
  }, {
    "left" : "if (first == second)",
    "right" : "if (first == second)",
    "info" : "IfStatement[32207-32360]:IfStatement[32294-32447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32228-32261]:Block[32315-32348]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[32242-32251]:ReturnStatement[32329-32338]"
  }, {
    "left" : "if (first < second)",
    "right" : "if (first < second)",
    "info" : "IfStatement[32267-32360]:IfStatement[32354-32447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32287-32321]:Block[32374-32408]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[32301-32311]:ReturnStatement[32388-32398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32327-32360]:Block[32414-32447]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[32341-32350]:ReturnStatement[32428-32437]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32593-32599]:Modifier[32680-32686]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[32600-32606]:SimpleType[32687-32693]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[32607-32615]:SimpleName[32694-32702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32618-32859]:Block[32705-32946]"
  }, {
    "left" : "if (toString == null)",
    "right" : "if (toString == null)",
    "info" : "IfStatement[32628-32828]:IfStatement[32715-32915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32650-32828]:Block[32737-32915]"
  }, {
    "left" : "toString = new StringBuffer(32)\n                .append(getNumerator())\n                .append('/')\n                .append(getDenominator()).toString();",
    "right" : "toString = new StringBuffer(32)\n                .append(getNumerator())\n                .append('/')\n                .append(getDenominator()).toString();",
    "info" : "ExpressionStatement[32664-32818]:ExpressionStatement[32751-32905]"
  }, {
    "left" : "return toString;",
    "right" : "return toString;",
    "info" : "ReturnStatement[32837-32853]:ReturnStatement[32924-32940]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33253-33259]:Modifier[33340-33346]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[33260-33266]:SimpleType[33347-33353]"
  }, {
    "left" : "toProperString",
    "right" : "toProperString",
    "info" : "SimpleName[33267-33281]:SimpleName[33354-33368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33284-34642]:Block[33371-34729]"
  }, {
    "left" : "if (toProperString == null)",
    "right" : "if (toProperString == null)",
    "info" : "IfStatement[33294-34605]:IfStatement[33381-34692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33322-34605]:Block[33409-34692]"
  }, {
    "left" : "if (numerator == 0)",
    "right" : "if (numerator == 0)",
    "info" : "IfStatement[33336-34595]:IfStatement[33423-34682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33356-33409]:Block[33443-33496]"
  }, {
    "left" : "toProperString = \"0\";",
    "right" : "toProperString = \"0\";",
    "info" : "ExpressionStatement[33374-33395]:ExpressionStatement[33461-33482]"
  }, {
    "left" : "if (numerator == denominator)",
    "right" : "if (numerator == denominator)",
    "info" : "IfStatement[33415-34595]:IfStatement[33502-34682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33445-33498]:Block[33532-33585]"
  }, {
    "left" : "toProperString = \"1\";",
    "right" : "toProperString = \"1\";",
    "info" : "ExpressionStatement[33463-33484]:ExpressionStatement[33550-33571]"
  }, {
    "left" : "if (numerator == -1 * denominator)",
    "right" : "if (numerator == -1 * denominator)",
    "info" : "IfStatement[33504-34595]:IfStatement[33591-34682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33539-33593]:Block[33626-33680]"
  }, {
    "left" : "toProperString = \"-1\";",
    "right" : "toProperString = \"-1\";",
    "info" : "ExpressionStatement[33557-33579]:ExpressionStatement[33644-33666]"
  }, {
    "left" : "if ((numerator>0?-numerator:numerator) < -denominator)",
    "right" : "if ((numerator>0?-numerator:numerator) < -denominator)",
    "info" : "IfStatement[33599-34595]:IfStatement[33686-34682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33654-34406]:Block[33741-34493]"
  }, {
    "left" : "int properNumerator = getProperNumerator();",
    "right" : "int properNumerator = getProperNumerator();",
    "info" : "VariableDeclarationStatement[33946-33989]:VariableDeclarationStatement[34033-34076]"
  }, {
    "left" : "if (properNumerator == 0)",
    "right" : "if (properNumerator == 0)",
    "info" : "IfStatement[34006-34392]:IfStatement[34093-34479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34032-34124]:Block[34119-34211]"
  }, {
    "left" : "toProperString = Integer.toString(getProperWhole());",
    "right" : "toProperString = Integer.toString(getProperWhole());",
    "info" : "ExpressionStatement[34054-34106]:ExpressionStatement[34141-34193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34130-34392]:Block[34217-34479]"
  }, {
    "left" : "toProperString = new StringBuffer(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();",
    "right" : "toProperString = new StringBuffer(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();",
    "info" : "ExpressionStatement[34152-34374]:ExpressionStatement[34239-34461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34412-34595]:Block[34499-34682]"
  }, {
    "left" : "toProperString = new StringBuffer(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();",
    "right" : "toProperString = new StringBuffer(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();",
    "info" : "ExpressionStatement[34430-34581]:ExpressionStatement[34517-34668]"
  }, {
    "left" : "return toProperString;",
    "right" : "return toProperString;",
    "info" : "ReturnStatement[34614-34636]:ReturnStatement[34701-34723]"
  } ]
}