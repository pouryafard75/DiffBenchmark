{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HelpFormatter",
      "right" : "HelpFormatter",
      "info" : "TypeDeclaration[1032-29485]:TypeDeclaration[1032-29471]"
    }, {
      "left" : "public static final int DEFAULT_WIDTH = 74;",
      "right" : "public static final int DEFAULT_WIDTH = 74;",
      "info" : "FieldDeclaration[1307-1399]:FieldDeclaration[1307-1399]"
    }, {
      "left" : "public static final int DEFAULT_LEFT_PAD = 1;",
      "right" : "public static final int DEFAULT_LEFT_PAD = 1;",
      "info" : "FieldDeclaration[1405-1502]:FieldDeclaration[1405-1502]"
    }, {
      "left" : "public static final int DEFAULT_DESC_PAD = 3;",
      "right" : "public static final int DEFAULT_DESC_PAD = 3;",
      "info" : "FieldDeclaration[1508-1659]:FieldDeclaration[1508-1659]"
    }, {
      "left" : "public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";",
      "right" : "public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";",
      "info" : "FieldDeclaration[1665-1798]:FieldDeclaration[1665-1798]"
    }, {
      "left" : "public static final String DEFAULT_OPT_PREFIX = \"-\";",
      "right" : "public static final String DEFAULT_OPT_PREFIX = \"-\";",
      "info" : "FieldDeclaration[1804-1896]:FieldDeclaration[1804-1896]"
    }, {
      "left" : "public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";",
      "right" : "public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";",
      "info" : "FieldDeclaration[1902-2002]:FieldDeclaration[1902-2002]"
    }, {
      "left" : "public static final String DEFAULT_ARG_NAME = \"arg\";",
      "right" : "public static final String DEFAULT_ARG_NAME = \"arg\";",
      "info" : "FieldDeclaration[2008-2100]:FieldDeclaration[2008-2100]"
    }, {
      "left" : "public int defaultWidth = DEFAULT_WIDTH;",
      "right" : "public int defaultWidth = DEFAULT_WIDTH;",
      "info" : "FieldDeclaration[2188-2400]:FieldDeclaration[2188-2400]"
    }, {
      "left" : "public int defaultLeftPad = DEFAULT_LEFT_PAD;",
      "right" : "public int defaultLeftPad = DEFAULT_LEFT_PAD;",
      "info" : "FieldDeclaration[2406-2642]:FieldDeclaration[2406-2642]"
    }, {
      "left" : "public int defaultDescPad = DEFAULT_DESC_PAD;",
      "right" : "public int defaultDescPad = DEFAULT_DESC_PAD;",
      "info" : "FieldDeclaration[2648-2924]:FieldDeclaration[2648-2924]"
    }, {
      "left" : "public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;",
      "right" : "public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;",
      "info" : "FieldDeclaration[2930-3198]:FieldDeclaration[2930-3198]"
    }, {
      "left" : "public String defaultNewLine = System.getProperty(\"line.separator\");",
      "right" : "public String defaultNewLine = System.getProperty(\"line.separator\");",
      "info" : "FieldDeclaration[3204-3436]:FieldDeclaration[3204-3436]"
    }, {
      "left" : "public String defaultOptPrefix = DEFAULT_OPT_PREFIX;",
      "right" : "public String defaultOptPrefix = DEFAULT_OPT_PREFIX;",
      "info" : "FieldDeclaration[3442-3660]:FieldDeclaration[3442-3660]"
    }, {
      "left" : "public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;",
      "right" : "public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;",
      "info" : "FieldDeclaration[3666-3897]:FieldDeclaration[3666-3897]"
    }, {
      "left" : "public String defaultArgName = DEFAULT_ARG_NAME;",
      "right" : "public String defaultArgName = DEFAULT_ARG_NAME;",
      "info" : "FieldDeclaration[3903-4120]:FieldDeclaration[3903-4120]"
    }, {
      "left" : "public void setWidth(int width)",
      "right" : "public void setWidth(int width)",
      "info" : "MethodDeclaration[4126-4297]:MethodDeclaration[4126-4297]"
    }, {
      "left" : "public int getWidth()",
      "right" : "public int getWidth()",
      "info" : "MethodDeclaration[4303-4448]:MethodDeclaration[4303-4448]"
    }, {
      "left" : "public void setLeftPadding(int padding)",
      "right" : "public void setLeftPadding(int padding)",
      "info" : "MethodDeclaration[4454-4651]:MethodDeclaration[4454-4651]"
    }, {
      "left" : "public int getLeftPadding()",
      "right" : "public int getLeftPadding()",
      "info" : "MethodDeclaration[4657-4822]:MethodDeclaration[4657-4822]"
    }, {
      "left" : "public void setDescPadding(int padding)",
      "right" : "public void setDescPadding(int padding)",
      "info" : "MethodDeclaration[4828-5025]:MethodDeclaration[4828-5025]"
    }, {
      "left" : "public int getDescPadding()",
      "right" : "public int getDescPadding()",
      "info" : "MethodDeclaration[5031-5196]:MethodDeclaration[5031-5196]"
    }, {
      "left" : "public void setSyntaxPrefix(String prefix)",
      "right" : "public void setSyntaxPrefix(String prefix)",
      "info" : "MethodDeclaration[5202-5407]:MethodDeclaration[5202-5407]"
    }, {
      "left" : "public String getSyntaxPrefix()",
      "right" : "public String getSyntaxPrefix()",
      "info" : "MethodDeclaration[5413-5589]:MethodDeclaration[5413-5589]"
    }, {
      "left" : "public void setNewLine(String newline)",
      "right" : "public void setNewLine(String newline)",
      "info" : "MethodDeclaration[5595-5783]:MethodDeclaration[5595-5783]"
    }, {
      "left" : "public String getNewLine()",
      "right" : "public String getNewLine()",
      "info" : "MethodDeclaration[5789-5945]:MethodDeclaration[5789-5945]"
    }, {
      "left" : "public void setOptPrefix(String prefix)",
      "right" : "public void setOptPrefix(String prefix)",
      "info" : "MethodDeclaration[5951-6144]:MethodDeclaration[5951-6144]"
    }, {
      "left" : "public String getOptPrefix()",
      "right" : "public String getOptPrefix()",
      "info" : "MethodDeclaration[6150-6314]:MethodDeclaration[6150-6314]"
    }, {
      "left" : "public void setLongOptPrefix(String prefix)",
      "right" : "public void setLongOptPrefix(String prefix)",
      "info" : "MethodDeclaration[6320-6529]:MethodDeclaration[6320-6529]"
    }, {
      "left" : "public String getLongOptPrefix()",
      "right" : "public String getLongOptPrefix()",
      "info" : "MethodDeclaration[6535-6715]:MethodDeclaration[6535-6715]"
    }, {
      "left" : "public void setArgName(String name)",
      "right" : "public void setArgName(String name)",
      "info" : "MethodDeclaration[6721-6900]:MethodDeclaration[6721-6900]"
    }, {
      "left" : "public String getArgName()",
      "right" : "public String getArgName()",
      "info" : "MethodDeclaration[6906-7062]:MethodDeclaration[6906-7062]"
    }, {
      "left" : "public void printHelp(String cmdLineSyntax, Options options)",
      "right" : "public void printHelp(String cmdLineSyntax, Options options)",
      "info" : "MethodDeclaration[7151-7585]:MethodDeclaration[7151-7585]"
    }, {
      "left" : "public void printHelp(String cmdLineSyntax, Options options, \n                          boolean autoUsage)",
      "right" : "public void printHelp(String cmdLineSyntax, Options options, \n                          boolean autoUsage)",
      "info" : "MethodDeclaration[7591-8168]:MethodDeclaration[7591-8168]"
    }, {
      "left" : "public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer)",
      "right" : "public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer)",
      "info" : "MethodDeclaration[8174-8792]:MethodDeclaration[8174-8792]"
    }, {
      "left" : "public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer, boolean autoUsage)",
      "right" : "public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer, boolean autoUsage)",
      "info" : "MethodDeclaration[8798-9565]:MethodDeclaration[8798-9565]"
    }, {
      "left" : "public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer)",
      "right" : "public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer)",
      "info" : "MethodDeclaration[9571-10281]:MethodDeclaration[9571-10281]"
    }, {
      "left" : "public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer, boolean autoUsage)",
      "right" : "public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer, boolean autoUsage)",
      "info" : "MethodDeclaration[10287-11242]:MethodDeclaration[10287-11242]"
    }, {
      "left" : "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer)",
      "right" : "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer)",
      "info" : "MethodDeclaration[11248-12269]:MethodDeclaration[11248-12269]"
    }, {
      "left" : "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer, boolean autoUsage)",
      "right" : "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer, boolean autoUsage)",
      "info" : "MethodDeclaration[12276-13965]:MethodDeclaration[12276-13965]"
    }, {
      "left" : "public void printUsage(PrintWriter pw, int width, String app, \n                           Options options)",
      "right" : "public void printUsage(PrintWriter pw, int width, String app, \n                           Options options)",
      "info" : "MethodDeclaration[13971-16184]:MethodDeclaration[13971-16184]"
    }, {
      "left" : "private static void appendOptionGroup(final StringBuffer buff, \n                                          final OptionGroup group)",
      "right" : "private static void appendOptionGroup(final StringBuffer buff, \n                                          final OptionGroup group)",
      "info" : "MethodDeclaration[16190-17340]:MethodDeclaration[16190-17340]"
    }, {
      "left" : "private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required)",
      "right" : "private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required)",
      "info" : "MethodDeclaration[17346-18370]:MethodDeclaration[17346-18370]"
    }, {
      "left" : "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
      "right" : "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
      "info" : "MethodDeclaration[18376-18946]:MethodDeclaration[18376-18946]"
    }, {
      "left" : "public void printOptions(PrintWriter pw, int width, Options options, \n                             int leftPad, int descPad)",
      "right" : "public void printOptions(PrintWriter pw, int width, Options options, \n                             int leftPad, int descPad)",
      "info" : "MethodDeclaration[18952-19771]:MethodDeclaration[18952-19771]"
    }, {
      "left" : "public void printWrapped(PrintWriter pw, int width, String text)",
      "right" : "public void printWrapped(PrintWriter pw, int width, String text)",
      "info" : "MethodDeclaration[19777-20167]:MethodDeclaration[19777-20167]"
    }, {
      "left" : "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, \n                             String text)",
      "right" : "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, \n                             String text)",
      "info" : "MethodDeclaration[20173-20807]:MethodDeclaration[20173-20807]"
    }, {
      "left" : "protected StringBuffer renderOptions(StringBuffer sb, int width, \n                                         Options options, int leftPad, \n                                         int descPad)",
      "right" : "protected StringBuffer renderOptions(StringBuffer sb, int width, \n                                         Options options, int leftPad, \n                                         int descPad)",
      "info" : "MethodDeclaration[20895-24145]:MethodDeclaration[20895-24145]"
    }, {
      "left" : "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)",
      "right" : "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)",
      "info" : "MethodDeclaration[24151-25501]:MethodDeclaration[24151-25487]"
    }, {
      "left" : "protected int findWrapPos(String text, int width, int startPos)",
      "right" : "protected int findWrapPos(String text, int width, int startPos)",
      "info" : "MethodDeclaration[25507-27330]:MethodDeclaration[25493-27316]"
    }, {
      "left" : "protected String createPadding(int len)",
      "right" : "protected String createPadding(int len)",
      "info" : "MethodDeclaration[27336-27755]:MethodDeclaration[27322-27741]"
    }, {
      "left" : "protected String rtrim(String s)",
      "right" : "protected String rtrim(String s)",
      "info" : "MethodDeclaration[27761-28296]:MethodDeclaration[27747-28282]"
    }, {
      "left" : "OptionComparator",
      "right" : "OptionComparator",
      "info" : "TypeDeclaration[28542-29483]:TypeDeclaration[28528-29469]"
    }, {
      "left" : "public int compare(Object o1, Object o2)",
      "right" : "public int compare(Object o1, Object o2)",
      "info" : "MethodDeclaration[28741-29477]:MethodDeclaration[28727-29463]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-4297]:Block[4255-4297]"
    }, {
      "left" : "this.defaultWidth = width;",
      "right" : "this.defaultWidth = width;",
      "info" : "ExpressionStatement[4265-4291]:ExpressionStatement[4265-4291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4407-4448]:Block[4407-4448]"
    }, {
      "left" : "return this.defaultWidth;",
      "right" : "return this.defaultWidth;",
      "info" : "ReturnStatement[4417-4442]:ReturnStatement[4417-4442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4605-4651]:Block[4605-4651]"
    }, {
      "left" : "this.defaultLeftPad = padding;",
      "right" : "this.defaultLeftPad = padding;",
      "info" : "ExpressionStatement[4615-4645]:ExpressionStatement[4615-4645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4779-4822]:Block[4779-4822]"
    }, {
      "left" : "return this.defaultLeftPad;",
      "right" : "return this.defaultLeftPad;",
      "info" : "ReturnStatement[4789-4816]:ReturnStatement[4789-4816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4979-5025]:Block[4979-5025]"
    }, {
      "left" : "this.defaultDescPad = padding;",
      "right" : "this.defaultDescPad = padding;",
      "info" : "ExpressionStatement[4989-5019]:ExpressionStatement[4989-5019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5153-5196]:Block[5153-5196]"
    }, {
      "left" : "return this.defaultDescPad;",
      "right" : "return this.defaultDescPad;",
      "info" : "ReturnStatement[5163-5190]:ReturnStatement[5163-5190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5357-5407]:Block[5357-5407]"
    }, {
      "left" : "this.defaultSyntaxPrefix = prefix;",
      "right" : "this.defaultSyntaxPrefix = prefix;",
      "info" : "ExpressionStatement[5367-5401]:ExpressionStatement[5367-5401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5541-5589]:Block[5541-5589]"
    }, {
      "left" : "return this.defaultSyntaxPrefix;",
      "right" : "return this.defaultSyntaxPrefix;",
      "info" : "ReturnStatement[5551-5583]:ReturnStatement[5551-5583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5737-5783]:Block[5737-5783]"
    }, {
      "left" : "this.defaultNewLine = newline;",
      "right" : "this.defaultNewLine = newline;",
      "info" : "ExpressionStatement[5747-5777]:ExpressionStatement[5747-5777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5902-5945]:Block[5902-5945]"
    }, {
      "left" : "return this.defaultNewLine;",
      "right" : "return this.defaultNewLine;",
      "info" : "ReturnStatement[5912-5939]:ReturnStatement[5912-5939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6097-6144]:Block[6097-6144]"
    }, {
      "left" : "this.defaultOptPrefix = prefix;",
      "right" : "this.defaultOptPrefix = prefix;",
      "info" : "ExpressionStatement[6107-6138]:ExpressionStatement[6107-6138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6269-6314]:Block[6269-6314]"
    }, {
      "left" : "return this.defaultOptPrefix;",
      "right" : "return this.defaultOptPrefix;",
      "info" : "ReturnStatement[6279-6308]:ReturnStatement[6279-6308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6478-6529]:Block[6478-6529]"
    }, {
      "left" : "this.defaultLongOptPrefix = prefix;",
      "right" : "this.defaultLongOptPrefix = prefix;",
      "info" : "ExpressionStatement[6488-6523]:ExpressionStatement[6488-6523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6666-6715]:Block[6666-6715]"
    }, {
      "left" : "return this.defaultLongOptPrefix;",
      "right" : "return this.defaultLongOptPrefix;",
      "info" : "ReturnStatement[6676-6709]:ReturnStatement[6676-6709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6857-6900]:Block[6857-6900]"
    }, {
      "left" : "this.defaultArgName = name;",
      "right" : "this.defaultArgName = name;",
      "info" : "ExpressionStatement[6867-6894]:ExpressionStatement[6867-6894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7019-7062]:Block[7019-7062]"
    }, {
      "left" : "return this.defaultArgName;",
      "right" : "return this.defaultArgName;",
      "info" : "ReturnStatement[7029-7056]:ReturnStatement[7029-7056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7502-7585]:Block[7502-7585]"
    }, {
      "left" : "printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);",
      "right" : "printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);",
      "info" : "ExpressionStatement[7512-7579]:ExpressionStatement[7512-7579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8081-8168]:Block[8081-8168]"
    }, {
      "left" : "printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);",
      "right" : "printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);",
      "info" : "ExpressionStatement[8091-8162]:ExpressionStatement[8091-8162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8719-8792]:Block[8719-8792]"
    }, {
      "left" : "printHelp(cmdLineSyntax, header, options, footer, false);",
      "right" : "printHelp(cmdLineSyntax, header, options, footer, false);",
      "info" : "ExpressionStatement[8729-8786]:ExpressionStatement[8729-8786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9455-9565]:Block[9455-9565]"
    }, {
      "left" : "printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);",
      "right" : "printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);",
      "info" : "ExpressionStatement[9465-9559]:ExpressionStatement[9465-9559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10201-10281]:Block[10201-10281]"
    }, {
      "left" : "printHelp(width, cmdLineSyntax, header, options, footer, false);",
      "right" : "printHelp(width, cmdLineSyntax, header, options, footer, false);",
      "info" : "ExpressionStatement[10211-10275]:ExpressionStatement[10211-10275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11028-11242]:Block[11028-11242]"
    }, {
      "left" : "PrintWriter pw = new PrintWriter(System.out);",
      "right" : "PrintWriter pw = new PrintWriter(System.out);",
      "info" : "VariableDeclarationStatement[11038-11083]:VariableDeclarationStatement[11038-11083]"
    }, {
      "left" : "printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);",
      "right" : "printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);",
      "info" : "ExpressionStatement[11093-11216]:ExpressionStatement[11093-11216]"
    }, {
      "left" : "pw.flush();",
      "right" : "pw.flush();",
      "info" : "ExpressionStatement[11225-11236]:ExpressionStatement[11225-11236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12148-12269]:Block[12148-12269]"
    }, {
      "left" : "printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);",
      "right" : "printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);",
      "info" : "ExpressionStatement[12158-12263]:ExpressionStatement[12158-12263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13287-13965]:Block[13287-13965]"
    }, {
      "left" : "if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))",
      "right" : "if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))",
      "info" : "IfStatement[13297-13456]:IfStatement[13297-13456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13367-13456]:Block[13367-13456]"
    }, {
      "left" : "throw new IllegalArgumentException(\"cmdLineSyntax not provided\");",
      "right" : "throw new IllegalArgumentException(\"cmdLineSyntax not provided\");",
      "info" : "ThrowStatement[13381-13446]:ThrowStatement[13381-13446]"
    }, {
      "left" : "if (autoUsage)",
      "right" : "if (autoUsage)",
      "info" : "IfStatement[13466-13642]:IfStatement[13466-13642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13489-13559]:Block[13489-13559]"
    }, {
      "left" : "printUsage(pw, width, cmdLineSyntax, options);",
      "right" : "printUsage(pw, width, cmdLineSyntax, options);",
      "info" : "ExpressionStatement[13503-13549]:ExpressionStatement[13503-13549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13581-13642]:Block[13581-13642]"
    }, {
      "left" : "printUsage(pw, width, cmdLineSyntax);",
      "right" : "printUsage(pw, width, cmdLineSyntax);",
      "info" : "ExpressionStatement[13595-13632]:ExpressionStatement[13595-13632]"
    }, {
      "left" : "if ((header != null) && (header.trim().length() > 0))",
      "right" : "if ((header != null) && (header.trim().length() > 0))",
      "info" : "IfStatement[13652-13770]:IfStatement[13652-13770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13714-13770]:Block[13714-13770]"
    }, {
      "left" : "printWrapped(pw, width, header);",
      "right" : "printWrapped(pw, width, header);",
      "info" : "ExpressionStatement[13728-13760]:ExpressionStatement[13728-13760]"
    }, {
      "left" : "printOptions(pw, width, options, leftPad, descPad);",
      "right" : "printOptions(pw, width, options, leftPad, descPad);",
      "info" : "ExpressionStatement[13780-13831]:ExpressionStatement[13780-13831]"
    }, {
      "left" : "if ((footer != null) && (footer.trim().length() > 0))",
      "right" : "if ((footer != null) && (footer.trim().length() > 0))",
      "info" : "IfStatement[13841-13959]:IfStatement[13841-13959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13903-13959]:Block[13903-13959]"
    }, {
      "left" : "printWrapped(pw, width, footer);",
      "right" : "printWrapped(pw, width, footer);",
      "info" : "ExpressionStatement[13917-13949]:ExpressionStatement[13917-13949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14398-16184]:Block[14398-16184]"
    }, {
      "left" : "StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");",
      "right" : "StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");",
      "info" : "VariableDeclarationStatement[14448-14596]:VariableDeclarationStatement[14448-14596]"
    }, {
      "left" : "final Collection processedGroups = new ArrayList();",
      "right" : "final Collection processedGroups = new ArrayList();",
      "info" : "VariableDeclarationStatement[14659-14710]:VariableDeclarationStatement[14659-14710]"
    }, {
      "left" : "Option option;",
      "right" : "Option option;",
      "info" : "VariableDeclarationStatement[14745-14759]:VariableDeclarationStatement[14745-14759]"
    }, {
      "left" : "List optList = new ArrayList(options.getOptions());",
      "right" : "List optList = new ArrayList(options.getOptions());",
      "info" : "VariableDeclarationStatement[14769-14820]:VariableDeclarationStatement[14769-14820]"
    }, {
      "left" : "Collections.sort(optList, new OptionComparator());",
      "right" : "Collections.sort(optList, new OptionComparator());",
      "info" : "ExpressionStatement[14829-14879]:ExpressionStatement[14829-14879]"
    }, {
      "left" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "right" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "info" : "ForStatement[14924-16041]:ForStatement[14924-16041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14984-16041]:Block[14984-16041]"
    }, {
      "left" : "option = (Option) i.next();",
      "right" : "option = (Option) i.next();",
      "info" : "ExpressionStatement[15033-15060]:ExpressionStatement[15033-15060]"
    }, {
      "left" : "OptionGroup group = options.getOptionGroup(option);",
      "right" : "OptionGroup group = options.getOptionGroup(option);",
      "info" : "VariableDeclarationStatement[15135-15186]:VariableDeclarationStatement[15135-15186]"
    }, {
      "left" : "if (group != null)",
      "right" : "if (group != null)",
      "info" : "IfStatement[15249-15939]:IfStatement[15249-15939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15280-15769]:Block[15280-15769]"
    }, {
      "left" : "if (!processedGroups.contains(group))",
      "right" : "if (!processedGroups.contains(group))",
      "info" : "IfStatement[15365-15643]:IfStatement[15365-15643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15419-15643]:Block[15419-15643]"
    }, {
      "left" : "processedGroups.add(group);",
      "right" : "processedGroups.add(group);",
      "info" : "ExpressionStatement[15500-15527]:ExpressionStatement[15500-15527]"
    }, {
      "left" : "appendOptionGroup(buff, group);",
      "right" : "appendOptionGroup(buff, group);",
      "info" : "ExpressionStatement[15594-15625]:ExpressionStatement[15594-15625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15859-15939]:Block[15859-15939]"
    }, {
      "left" : "appendOption(buff, option, option.isRequired());",
      "right" : "appendOption(buff, option, option.isRequired());",
      "info" : "ExpressionStatement[15877-15925]:ExpressionStatement[15877-15925]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[15953-16031]:IfStatement[15953-16031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15982-16031]:Block[15982-16031]"
    }, {
      "left" : "buff.append(\" \");",
      "right" : "buff.append(\" \");",
      "info" : "ExpressionStatement[16000-16017]:ExpressionStatement[16000-16017]"
    }, {
      "left" : "printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());",
      "right" : "printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());",
      "info" : "ExpressionStatement[16081-16178]:ExpressionStatement[16081-16178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16692-17340]:Block[16692-17340]"
    }, {
      "left" : "if (!group.isRequired())",
      "right" : "if (!group.isRequired())",
      "info" : "IfStatement[16702-16776]:IfStatement[16702-16776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16735-16776]:Block[16735-16776]"
    }, {
      "left" : "buff.append(\"[\");",
      "right" : "buff.append(\"[\");",
      "info" : "ExpressionStatement[16749-16766]:ExpressionStatement[16749-16766]"
    }, {
      "left" : "List optList = new ArrayList(group.getOptions());",
      "right" : "List optList = new ArrayList(group.getOptions());",
      "info" : "VariableDeclarationStatement[16786-16835]:VariableDeclarationStatement[16786-16835]"
    }, {
      "left" : "Collections.sort(optList, new OptionComparator());",
      "right" : "Collections.sort(optList, new OptionComparator());",
      "info" : "ExpressionStatement[16844-16894]:ExpressionStatement[16844-16894]"
    }, {
      "left" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "right" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "info" : "ForStatement[16949-17250]:ForStatement[16949-17250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17009-17250]:Block[17009-17250]"
    }, {
      "left" : "appendOption(buff, (Option) i.next(), true);",
      "right" : "appendOption(buff, (Option) i.next(), true);",
      "info" : "ExpressionStatement[17102-17146]:ExpressionStatement[17102-17146]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[17160-17240]:IfStatement[17160-17240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17189-17240]:Block[17189-17240]"
    }, {
      "left" : "buff.append(\" | \");",
      "right" : "buff.append(\" | \");",
      "info" : "ExpressionStatement[17207-17226]:ExpressionStatement[17207-17226]"
    }, {
      "left" : "if (!group.isRequired())",
      "right" : "if (!group.isRequired())",
      "info" : "IfStatement[17260-17334]:IfStatement[17260-17334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17293-17334]:Block[17293-17334]"
    }, {
      "left" : "buff.append(\"]\");",
      "right" : "buff.append(\"]\");",
      "info" : "ExpressionStatement[17307-17324]:ExpressionStatement[17307-17324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17771-18370]:Block[17771-18370]"
    }, {
      "left" : "if (!required)",
      "right" : "if (!required)",
      "info" : "IfStatement[17781-17845]:IfStatement[17781-17845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17804-17845]:Block[17804-17845]"
    }, {
      "left" : "buff.append(\"[\");",
      "right" : "buff.append(\"[\");",
      "info" : "ExpressionStatement[17818-17835]:ExpressionStatement[17818-17835]"
    }, {
      "left" : "if (option.getOpt() != null)",
      "right" : "if (option.getOpt() != null)",
      "info" : "IfStatement[17855-18049]:IfStatement[17855-18049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17892-17957]:Block[17892-17957]"
    }, {
      "left" : "buff.append(\"-\").append(option.getOpt());",
      "right" : "buff.append(\"-\").append(option.getOpt());",
      "info" : "ExpressionStatement[17906-17947]:ExpressionStatement[17906-17947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17979-18049]:Block[17979-18049]"
    }, {
      "left" : "buff.append(\"--\").append(option.getLongOpt());",
      "right" : "buff.append(\"--\").append(option.getLongOpt());",
      "info" : "ExpressionStatement[17993-18039]:ExpressionStatement[17993-18039]"
    }, {
      "left" : "if (option.hasArg() && (option.getArgName() != null))",
      "right" : "if (option.hasArg() && (option.getArgName() != null))",
      "info" : "IfStatement[18096-18240]:IfStatement[18096-18240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18158-18240]:Block[18158-18240]"
    }, {
      "left" : "buff.append(\" <\").append(option.getArgName()).append(\">\");",
      "right" : "buff.append(\" <\").append(option.getArgName()).append(\">\");",
      "info" : "ExpressionStatement[18172-18230]:ExpressionStatement[18172-18230]"
    }, {
      "left" : "if (!required)",
      "right" : "if (!required)",
      "info" : "IfStatement[18300-18364]:IfStatement[18300-18364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18323-18364]:Block[18323-18364]"
    }, {
      "left" : "buff.append(\"]\");",
      "right" : "buff.append(\"]\");",
      "info" : "ExpressionStatement[18337-18354]:ExpressionStatement[18337-18354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18754-18946]:Block[18754-18946]"
    }, {
      "left" : "int argPos = cmdLineSyntax.indexOf(' ') + 1;",
      "right" : "int argPos = cmdLineSyntax.indexOf(' ') + 1;",
      "info" : "VariableDeclarationStatement[18764-18808]:VariableDeclarationStatement[18764-18808]"
    }, {
      "left" : "printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);",
      "right" : "printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);",
      "info" : "ExpressionStatement[18818-18940]:ExpressionStatement[18818-18940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19621-19771]:Block[19621-19771]"
    }, {
      "left" : "StringBuffer sb = new StringBuffer();",
      "right" : "StringBuffer sb = new StringBuffer();",
      "info" : "VariableDeclarationStatement[19631-19668]:VariableDeclarationStatement[19631-19668]"
    }, {
      "left" : "renderOptions(sb, width, options, leftPad, descPad);",
      "right" : "renderOptions(sb, width, options, leftPad, descPad);",
      "info" : "ExpressionStatement[19678-19730]:ExpressionStatement[19678-19730]"
    }, {
      "left" : "pw.println(sb.toString());",
      "right" : "pw.println(sb.toString());",
      "info" : "ExpressionStatement[19739-19765]:ExpressionStatement[19739-19765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20118-20167]:Block[20118-20167]"
    }, {
      "left" : "printWrapped(pw, width, 0, text);",
      "right" : "printWrapped(pw, width, 0, text);",
      "info" : "ExpressionStatement[20128-20161]:ExpressionStatement[20128-20161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20644-20807]:Block[20644-20807]"
    }, {
      "left" : "StringBuffer sb = new StringBuffer(text.length());",
      "right" : "StringBuffer sb = new StringBuffer(text.length());",
      "info" : "VariableDeclarationStatement[20654-20704]:VariableDeclarationStatement[20654-20704]"
    }, {
      "left" : "renderWrappedText(sb, width, nextLineTabStop, text);",
      "right" : "renderWrappedText(sb, width, nextLineTabStop, text);",
      "info" : "ExpressionStatement[20714-20766]:ExpressionStatement[20714-20766]"
    }, {
      "left" : "pw.println(sb.toString());",
      "right" : "pw.println(sb.toString());",
      "info" : "ExpressionStatement[20775-20801]:ExpressionStatement[20775-20801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21670-24145]:Block[21670-24145]"
    }, {
      "left" : "final String lpad = createPadding(leftPad);",
      "right" : "final String lpad = createPadding(leftPad);",
      "info" : "VariableDeclarationStatement[21680-21723]:VariableDeclarationStatement[21680-21723]"
    }, {
      "left" : "final String dpad = createPadding(descPad);",
      "right" : "final String dpad = createPadding(descPad);",
      "info" : "VariableDeclarationStatement[21732-21775]:VariableDeclarationStatement[21732-21775]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[22018-22030]:VariableDeclarationStatement[22018-22030]"
    }, {
      "left" : "StringBuffer optBuf;",
      "right" : "StringBuffer optBuf;",
      "info" : "VariableDeclarationStatement[22039-22059]:VariableDeclarationStatement[22039-22059]"
    }, {
      "left" : "List prefixList = new ArrayList();",
      "right" : "List prefixList = new ArrayList();",
      "info" : "VariableDeclarationStatement[22068-22102]:VariableDeclarationStatement[22068-22102]"
    }, {
      "left" : "Option option;",
      "right" : "Option option;",
      "info" : "VariableDeclarationStatement[22111-22125]:VariableDeclarationStatement[22111-22125]"
    }, {
      "left" : "List optList = options.helpOptions();",
      "right" : "List optList = options.helpOptions();",
      "info" : "VariableDeclarationStatement[22134-22171]:VariableDeclarationStatement[22134-22171]"
    }, {
      "left" : "Collections.sort(optList, new OptionComparator());",
      "right" : "Collections.sort(optList, new OptionComparator());",
      "info" : "ExpressionStatement[22181-22231]:ExpressionStatement[22181-22231]"
    }, {
      "left" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "right" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "info" : "ForStatement[22241-23372]:ForStatement[22241-23372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22301-23372]:Block[22301-23372]"
    }, {
      "left" : "option = (Option) i.next();",
      "right" : "option = (Option) i.next();",
      "info" : "ExpressionStatement[22315-22342]:ExpressionStatement[22315-22342]"
    }, {
      "left" : "optBuf = new StringBuffer(8);",
      "right" : "optBuf = new StringBuffer(8);",
      "info" : "ExpressionStatement[22355-22384]:ExpressionStatement[22355-22384]"
    }, {
      "left" : "if (option.getOpt() == null)",
      "right" : "if (option.getOpt() == null)",
      "info" : "IfStatement[22398-22935]:IfStatement[22398-22935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22439-22579]:Block[22439-22579]"
    }, {
      "left" : "optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());",
      "right" : "optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());",
      "info" : "ExpressionStatement[22457-22565]:ExpressionStatement[22457-22565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22609-22935]:Block[22609-22935]"
    }, {
      "left" : "optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());",
      "right" : "optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());",
      "info" : "ExpressionStatement[22627-22719]:ExpressionStatement[22627-22719]"
    }, {
      "left" : "if (option.hasLongOpt())",
      "right" : "if (option.hasLongOpt())",
      "info" : "IfStatement[22737-22921]:IfStatement[22737-22921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22778-22921]:Block[22778-22921]"
    }, {
      "left" : "optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());",
      "right" : "optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());",
      "info" : "ExpressionStatement[22800-22903]:ExpressionStatement[22800-22903]"
    }, {
      "left" : "if (option.hasArg())",
      "right" : "if (option.hasArg())",
      "info" : "IfStatement[22949-23252]:IfStatement[22949-23252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22982-23252]:Block[22982-23252]"
    }, {
      "left" : "if (option.hasArgName())",
      "right" : "if (option.hasArgName())",
      "info" : "IfStatement[23000-23238]:IfStatement[23000-23238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23041-23141]:Block[23041-23141]"
    }, {
      "left" : "optBuf.append(\" <\").append(option.getArgName()).append(\">\");",
      "right" : "optBuf.append(\" <\").append(option.getArgName()).append(\">\");",
      "info" : "ExpressionStatement[23063-23123]:ExpressionStatement[23063-23123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23179-23238]:Block[23179-23238]"
    }, {
      "left" : "optBuf.append(' ');",
      "right" : "optBuf.append(' ');",
      "info" : "ExpressionStatement[23201-23220]:ExpressionStatement[23201-23220]"
    }, {
      "left" : "prefixList.add(optBuf);",
      "right" : "prefixList.add(optBuf);",
      "info" : "ExpressionStatement[23266-23289]:ExpressionStatement[23266-23289]"
    }, {
      "left" : "max = (optBuf.length() > max)       ? optBuf.length() : max;",
      "right" : "max = (optBuf.length() > max)       ? optBuf.length() : max;",
      "info" : "ExpressionStatement[23302-23362]:ExpressionStatement[23302-23362]"
    }, {
      "left" : "int x = 0;",
      "right" : "int x = 0;",
      "info" : "VariableDeclarationStatement[23382-23392]:VariableDeclarationStatement[23382-23392]"
    }, {
      "left" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "right" : "for (Iterator i = optList.iterator(); i.hasNext())",
      "info" : "ForStatement[23402-24119]:ForStatement[23402-24119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23462-24119]:Block[23462-24119]"
    }, {
      "left" : "option = (Option) i.next();",
      "right" : "option = (Option) i.next();",
      "info" : "ExpressionStatement[23476-23503]:ExpressionStatement[23476-23503]"
    }, {
      "left" : "optBuf = new StringBuffer(prefixList.get(x++).toString());",
      "right" : "optBuf = new StringBuffer(prefixList.get(x++).toString());",
      "info" : "ExpressionStatement[23516-23574]:ExpressionStatement[23516-23574]"
    }, {
      "left" : "if (optBuf.length() < max)",
      "right" : "if (optBuf.length() < max)",
      "info" : "IfStatement[23588-23711]:IfStatement[23588-23711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23627-23711]:Block[23627-23711]"
    }, {
      "left" : "optBuf.append(createPadding(max - optBuf.length()));",
      "right" : "optBuf.append(createPadding(max - optBuf.length()));",
      "info" : "ExpressionStatement[23645-23697]:ExpressionStatement[23645-23697]"
    }, {
      "left" : "optBuf.append(dpad);",
      "right" : "optBuf.append(dpad);",
      "info" : "ExpressionStatement[23725-23745]:ExpressionStatement[23725-23745]"
    }, {
      "left" : "int nextLineTabStop = max + descPad;",
      "right" : "int nextLineTabStop = max + descPad;",
      "info" : "VariableDeclarationStatement[23759-23795]:VariableDeclarationStatement[23759-23795]"
    }, {
      "left" : "if (option.getDescription() != null)",
      "right" : "if (option.getDescription() != null)",
      "info" : "IfStatement[23809-23929]:IfStatement[23809-23929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23858-23929]:Block[23858-23929]"
    }, {
      "left" : "optBuf.append(option.getDescription());",
      "right" : "optBuf.append(option.getDescription());",
      "info" : "ExpressionStatement[23876-23915]:ExpressionStatement[23876-23915]"
    }, {
      "left" : "renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());",
      "right" : "renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());",
      "info" : "ExpressionStatement[23943-24008]:ExpressionStatement[23943-24008]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[24022-24109]:IfStatement[24022-24109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24051-24109]:Block[24051-24109]"
    }, {
      "left" : "sb.append(defaultNewLine);",
      "right" : "sb.append(defaultNewLine);",
      "info" : "ExpressionStatement[24069-24095]:ExpressionStatement[24069-24095]"
    }, {
      "left" : "return sb;",
      "right" : "return sb;",
      "info" : "ReturnStatement[24129-24139]:ReturnStatement[24129-24139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24755-25501]:Block[24755-25487]"
    }, {
      "left" : "int pos = findWrapPos(text, width, 0);",
      "right" : "int pos = findWrapPos(text, width, 0);",
      "info" : "VariableDeclarationStatement[24765-24803]:VariableDeclarationStatement[24765-24803]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[24813-24907]:IfStatement[24813-24907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24836-24907]:Block[24836-24907]"
    }, {
      "left" : "sb.append(rtrim(text));",
      "right" : "sb.append(rtrim(text));",
      "info" : "ExpressionStatement[24850-24873]:ExpressionStatement[24850-24873]"
    }, {
      "left" : "return sb;",
      "right" : "return sb;",
      "info" : "ReturnStatement[24887-24897]:ReturnStatement[24887-24897]"
    }, {
      "left" : "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
      "right" : "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
      "info" : "ExpressionStatement[24916-24980]:ExpressionStatement[24916-24980]"
    }, {
      "left" : "final String padding = createPadding(nextLineTabStop);",
      "right" : "final String padding = createPadding(nextLineTabStop);",
      "info" : "VariableDeclarationStatement[25086-25140]:VariableDeclarationStatement[25086-25140]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[25150-25495]:WhileStatement[25150-25481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25171-25495]:Block[25171-25481]"
    }, {
      "left" : "text = padding + text.substring(pos).trim();",
      "right" : "text = padding + text.substring(pos).trim();",
      "info" : "ExpressionStatement[25185-25229]:ExpressionStatement[25185-25229]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[25304-25407]:IfStatement[25290-25393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25331-25407]:Block[25317-25393]"
    }, {
      "left" : "sb.append(text);",
      "right" : "sb.append(text);",
      "info" : "ExpressionStatement[25349-25365]:ExpressionStatement[25335-25351]"
    }, {
      "left" : "return sb;",
      "right" : "return sb;",
      "info" : "ReturnStatement[25383-25393]:ReturnStatement[25369-25379]"
    }, {
      "left" : "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
      "right" : "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
      "info" : "ExpressionStatement[25421-25485]:ExpressionStatement[25407-25471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26191-27330]:Block[26177-27316]"
    }, {
      "left" : "int pos = -1;",
      "right" : "int pos = -1;",
      "info" : "VariableDeclarationStatement[26201-26214]:VariableDeclarationStatement[26187-26200]"
    }, {
      "left" : "if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))",
      "right" : "if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))",
      "info" : "IfStatement[26298-26582]:IfStatement[26284-26568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26448-26485]:Block[26434-26471]"
    }, {
      "left" : "return pos+1;",
      "right" : "return pos+1;",
      "info" : "ReturnStatement[26462-26475]:ReturnStatement[26448-26461]"
    }, {
      "left" : "if ((startPos + width) >= text.length())",
      "right" : "if ((startPos + width) >= text.length())",
      "info" : "IfStatement[26499-26582]:IfStatement[26485-26568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26548-26582]:Block[26534-26568]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[26562-26572]:ReturnStatement[26548-26558]"
    }, {
      "left" : "pos = startPos + width;",
      "right" : "pos = startPos + width;",
      "info" : "ExpressionStatement[26665-26688]:ExpressionStatement[26651-26674]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[26698-26705]:VariableDeclarationStatement[26684-26691]"
    }, {
      "left" : "while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))",
      "right" : "while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))",
      "info" : "WhileStatement[26715-26859]:WhileStatement[26701-26845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26829-26859]:Block[26815-26845]"
    }, {
      "left" : "--pos;",
      "right" : "--pos;",
      "info" : "ExpressionStatement[26843-26849]:ExpressionStatement[26829-26835]"
    }, {
      "left" : "if (pos > startPos)",
      "right" : "if (pos > startPos)",
      "info" : "IfStatement[26909-26972]:IfStatement[26895-26958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26937-26972]:Block[26923-26958]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[26951-26962]:ReturnStatement[26937-26948]"
    }, {
      "left" : "pos = startPos + width;",
      "right" : "pos = startPos + width;",
      "info" : "ExpressionStatement[27082-27105]:ExpressionStatement[27068-27091]"
    }, {
      "left" : "while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))",
      "right" : "while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))",
      "info" : "WhileStatement[27115-27264]:WhileStatement[27101-27250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27234-27264]:Block[27220-27250]"
    }, {
      "left" : "++pos;",
      "right" : "++pos;",
      "info" : "ExpressionStatement[27248-27254]:ExpressionStatement[27234-27240]"
    }, {
      "left" : "return (pos == text.length())        ? (-1) : pos;",
      "right" : "return (pos == text.length())        ? (-1) : pos;",
      "info" : "ReturnStatement[27274-27324]:ReturnStatement[27260-27310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27581-27755]:Block[27567-27741]"
    }, {
      "left" : "StringBuffer sb = new StringBuffer(len);",
      "right" : "StringBuffer sb = new StringBuffer(len);",
      "info" : "VariableDeclarationStatement[27591-27631]:VariableDeclarationStatement[27577-27617]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[27641-27718]:ForStatement[27627-27704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27679-27718]:Block[27665-27704]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[27693-27708]:ExpressionStatement[27679-27694]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[27728-27749]:ReturnStatement[27714-27735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28022-28296]:Block[28008-28282]"
    }, {
      "left" : "if ((s == null) || (s.length() == 0))",
      "right" : "if ((s == null) || (s.length() == 0))",
      "info" : "IfStatement[28032-28111]:IfStatement[28018-28097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28078-28111]:Block[28064-28097]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[28092-28101]:ReturnStatement[28078-28087]"
    }, {
      "left" : "int pos = s.length();",
      "right" : "int pos = s.length();",
      "info" : "VariableDeclarationStatement[28121-28142]:VariableDeclarationStatement[28107-28128]"
    }, {
      "left" : "while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))",
      "right" : "while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))",
      "info" : "WhileStatement[28152-28253]:WhileStatement[28138-28239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28223-28253]:Block[28209-28239]"
    }, {
      "left" : "--pos;",
      "right" : "--pos;",
      "info" : "ExpressionStatement[28237-28243]:ExpressionStatement[28223-28229]"
    }, {
      "left" : "return s.substring(0, pos);",
      "right" : "return s.substring(0, pos);",
      "info" : "ReturnStatement[28263-28290]:ReturnStatement[28249-28276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29320-29477]:Block[29306-29463]"
    }, {
      "left" : "Option opt1 = (Option)o1;",
      "right" : "Option opt1 = (Option)o1;",
      "info" : "VariableDeclarationStatement[29334-29359]:VariableDeclarationStatement[29320-29345]"
    }, {
      "left" : "Option opt2 = (Option)o2;",
      "right" : "Option opt2 = (Option)o2;",
      "info" : "VariableDeclarationStatement[29372-29397]:VariableDeclarationStatement[29358-29383]"
    }, {
      "left" : "return opt1.getKey().compareToIgnoreCase(opt2.getKey());",
      "right" : "return opt1.getKey().compareToIgnoreCase(opt2.getKey());",
      "info" : "ReturnStatement[29411-29467]:ReturnStatement[29397-29453]"
    } ]
  },
  "interFileMappings" : { }
}