{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ChunkOptionsPopupPanel",
      "right" : "ChunkOptionsPopupPanel",
      "info" : "TypeDeclaration[2792-19779]:TypeDeclaration[2838-20261]"
    }, {
      "left" : "public ChunkOptionsPopupPanel()",
      "right" : "public ChunkOptionsPopupPanel()",
      "info" : "MethodDeclaration[2856-9274]:MethodDeclaration[2902-9553]"
    }, {
      "left" : "public void onChange(ChangeEvent event)",
      "right" : "public void onChange(ChangeEvent event)",
      "info" : "MethodDeclaration[3293-3400]:MethodDeclaration[3339-3446]"
    }, {
      "left" : "public void onKeyUp(KeyUpEvent event)",
      "right" : "public void onKeyUp(KeyUpEvent event)",
      "info" : "MethodDeclaration[3478-3851]:MethodDeclaration[3524-3897]"
    }, {
      "left" : "public void onKeyUp(KeyUpEvent event)",
      "right" : "public void onKeyUp(KeyUpEvent event)",
      "info" : "MethodDeclaration[3963-4389]:MethodDeclaration[4009-4435]"
    }, {
      "left" : "public void onChange(ChangeEvent event)",
      "right" : "public void onChange(ChangeEvent event)",
      "info" : "MethodDeclaration[5248-6153]:MethodDeclaration[5200-6142]"
    }, {
      "left" : "public void onValueChange(ValueChangeEvent<Boolean> event)",
      "right" : "public void onValueChange(ValueChangeEvent<Boolean> event)",
      "info" : "MethodDeclaration[6930-7094]:MethodDeclaration[7000-7164]"
    }, {
      "left" : "public void onClick(ClickEvent event)",
      "right" : "public void onClick(ClickEvent event)",
      "info" : "MethodDeclaration[8427-8561]:MethodDeclaration[8706-8840]"
    }, {
      "left" : "public void onClick(ClickEvent event)",
      "right" : "public void onClick(ClickEvent event)",
      "info" : "MethodDeclaration[8823-8962]:MethodDeclaration[9102-9241]"
    }, {
      "left" : "public void focus()",
      "right" : "public void focus()",
      "info" : "MethodDeclaration[9289-9354]:MethodDeclaration[9568-9633]"
    }, {
      "left" : "private TextBox makeInputBox(final String option)",
      "right" : "private TextBox makeInputBox(final String option)",
      "info" : "MethodDeclaration[9362-10192]:MethodDeclaration[9641-10471]"
    }, {
      "left" : "public void onNativeEvent(NativeEvent event)",
      "right" : "public void onNativeEvent(NativeEvent event)",
      "info" : "MethodDeclaration[9633-10152]:MethodDeclaration[9912-10431]"
    }, {
      "left" : "public void execute()",
      "right" : "public void execute()",
      "info" : "MethodDeclaration[9805-10125]:MethodDeclaration[10084-10404]"
    }, {
      "left" : "private TriStateCheckBox makeTriStateCheckBox(String label, final String option)",
      "right" : "private TriStateCheckBox makeTriStateCheckBox(String label, final String option)",
      "info" : "MethodDeclaration[10200-11036]:MethodDeclaration[10479-11315]"
    }, {
      "left" : "public void onValueChange(ValueChangeEvent<State> event)",
      "right" : "public void onValueChange(ValueChangeEvent<State> event)",
      "info" : "MethodDeclaration[10477-10992]:MethodDeclaration[10756-11271]"
    }, {
      "left" : "private boolean has(String key)",
      "right" : "private boolean has(String key)",
      "info" : "MethodDeclaration[11044-11130]:MethodDeclaration[11323-11409]"
    }, {
      "left" : "public String get(String key)",
      "right" : "public String get(String key)",
      "info" : "MethodDeclaration[11138-11214]:MethodDeclaration[11417-11493]"
    }, {
      "left" : "private boolean getBoolean(String key)",
      "right" : "private boolean getBoolean(String key)",
      "info" : "MethodDeclaration[11222-11315]:MethodDeclaration[11501-11594]"
    }, {
      "left" : "private void set(String key, String value)",
      "right" : "private void set(String key, String value)",
      "info" : "MethodDeclaration[11323-11413]:MethodDeclaration[11602-11692]"
    }, {
      "left" : "private void unset(String key)",
      "right" : "private void unset(String key)",
      "info" : "MethodDeclaration[11421-11494]:MethodDeclaration[11700-11773]"
    }, {
      "left" : "private void revert(String key)",
      "right" : "private void revert(String key)",
      "info" : "MethodDeclaration[11502-11705]:MethodDeclaration[11781-11984]"
    }, {
      "left" : "public void init(AceEditorWidget widget, Position position)",
      "right" : "public void init(AceEditorWidget widget, Position position)",
      "info" : "MethodDeclaration[11713-12908]:MethodDeclaration[11992-13187]"
    }, {
      "left" : "private boolean isTrue(String string)",
      "right" : "private boolean isTrue(String string)",
      "info" : "MethodDeclaration[12916-13021]:MethodDeclaration[13195-13300]"
    }, {
      "left" : "private String extractChunkPreamble(String extractedChunkHeader,\n                                       String modeId)",
      "right" : "private String extractChunkPreamble(String extractedChunkHeader,\n                                       String modeId)",
      "info" : "MethodDeclaration[13029-13659]:MethodDeclaration[13308-13938]"
    }, {
      "left" : "private String extractChunkLabel(String extractedChunkHeader)",
      "right" : "private String extractChunkLabel(String extractedChunkHeader)",
      "info" : "MethodDeclaration[13667-14160]:MethodDeclaration[13946-14439]"
    }, {
      "left" : "private void parseChunkHeader(String line,\n                                 HashMap<String, String> chunkOptions)",
      "right" : "private void parseChunkHeader(String line,\n                                 HashMap<String, String> chunkOptions)",
      "info" : "MethodDeclaration[14168-15968]:MethodDeclaration[14447-16247]"
    }, {
      "left" : "public void hide()",
      "right" : "public void hide()",
      "info" : "MethodDeclaration[15976-16090]:MethodDeclaration[16255-16369]"
    }, {
      "left" : "private Pair<String, String> getChunkHeaderBounds(String modeId)",
      "right" : "private Pair<String, String> getChunkHeaderBounds(String modeId)",
      "info" : "MethodDeclaration[16098-16592]:MethodDeclaration[16377-16871]"
    }, {
      "left" : "private void synchronize()",
      "right" : "private void synchronize()",
      "info" : "MethodDeclaration[16600-17755]:MethodDeclaration[16879-18034]"
    }, {
      "left" : "private void revert()",
      "right" : "private void revert()",
      "info" : "MethodDeclaration[17763-18117]:MethodDeclaration[18042-18396]"
    }, {
      "left" : "private void hideAndFocusEditor()",
      "right" : "private void hideAndFocusEditor()",
      "info" : "MethodDeclaration[18125-18217]:MethodDeclaration[18404-18496]"
    }, {
      "left" : "private final VerticalPanel panel_;",
      "right" : "private final VerticalPanel panel_;",
      "info" : "FieldDeclaration[18225-18260]:FieldDeclaration[18712-18747]"
    }, {
      "left" : "private final TextBoxWithCue tbChunkLabel_;",
      "right" : "private final TextBoxWithCue tbChunkLabel_;",
      "info" : "FieldDeclaration[18264-18307]:FieldDeclaration[18751-18794]"
    }, {
      "left" : "private final SelectWidget outputComboBox_;",
      "right" : "private final ListBox outputComboBox_;",
      "info" : "FieldDeclaration[18311-18354]:FieldDeclaration[18798-18836]"
    }, {
      "left" : "private final Grid figureDimensionsPanel_;",
      "right" : "private final Grid figureDimensionsPanel_;",
      "info" : "FieldDeclaration[18358-18400]:FieldDeclaration[18840-18882]"
    }, {
      "left" : "private final TextBox figWidthBox_;",
      "right" : "private final TextBox figWidthBox_;",
      "info" : "FieldDeclaration[18404-18439]:FieldDeclaration[18886-18921]"
    }, {
      "left" : "private final TextBox figHeightBox_;",
      "right" : "private final TextBox figHeightBox_;",
      "info" : "FieldDeclaration[18443-18479]:FieldDeclaration[18925-18961]"
    }, {
      "left" : "private final ThemedCheckBox useCustomFigureCheckbox_;",
      "right" : "private final ThemedCheckBox useCustomFigureCheckbox_;",
      "info" : "FieldDeclaration[18483-18537]:FieldDeclaration[18965-19019]"
    }, {
      "left" : "private final TriStateCheckBox showWarningsInOutputCb_;",
      "right" : "private final TriStateCheckBox showWarningsInOutputCb_;",
      "info" : "FieldDeclaration[18541-18596]:FieldDeclaration[19023-19078]"
    }, {
      "left" : "private final TriStateCheckBox showMessagesInOutputCb_;",
      "right" : "private final TriStateCheckBox showMessagesInOutputCb_;",
      "info" : "FieldDeclaration[18600-18655]:FieldDeclaration[19082-19137]"
    }, {
      "left" : "private String originalLine_;",
      "right" : "private String originalLine_;",
      "info" : "FieldDeclaration[18663-18692]:FieldDeclaration[19145-19174]"
    }, {
      "left" : "private String chunkPreamble_;",
      "right" : "private String chunkPreamble_;",
      "info" : "FieldDeclaration[18696-18726]:FieldDeclaration[19178-19208]"
    }, {
      "left" : "private HashMap<String, String> chunkOptions_;",
      "right" : "private HashMap<String, String> chunkOptions_;",
      "info" : "FieldDeclaration[18734-18780]:FieldDeclaration[19216-19262]"
    }, {
      "left" : "private HashMap<String, String> originalChunkOptions_;",
      "right" : "private HashMap<String, String> originalChunkOptions_;",
      "info" : "FieldDeclaration[18784-18838]:FieldDeclaration[19266-19320]"
    }, {
      "left" : "private AceEditorWidget widget_;",
      "right" : "private AceEditorWidget widget_;",
      "info" : "FieldDeclaration[18846-18878]:FieldDeclaration[19328-19360]"
    }, {
      "left" : "private Position position_;",
      "right" : "private Position position_;",
      "info" : "FieldDeclaration[18882-18909]:FieldDeclaration[19364-19391]"
    }, {
      "left" : "private static final String OUTPUT_USE_DOCUMENT_DEFAULT =\n         \"(Use Document Default)\";",
      "right" : "private static final String OUTPUT_USE_DOCUMENT_DEFAULT =\n         \"(Use Document Default)\";",
      "info" : "FieldDeclaration[18917-19009]:FieldDeclaration[19399-19491]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_CODE_AND_OUTPUT =\n         \"Show Code and Output\";",
      "right" : "private static final String OUTPUT_SHOW_CODE_AND_OUTPUT =\n         \"Show Code and Output\";",
      "info" : "FieldDeclaration[19014-19104]:FieldDeclaration[19496-19586]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_OUTPUT_ONLY =\n         \"Show Output Only (Hide Code)\";",
      "right" : "private static final String OUTPUT_SHOW_OUTPUT_ONLY =\n         \"Show Output Only (Hide Code)\";",
      "info" : "FieldDeclaration[19109-19203]:FieldDeclaration[19591-19685]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_NOTHING =\n         \"Show Nothing\";",
      "right" : "private static final String OUTPUT_SHOW_NOTHING =\n         \"Show Nothing\";",
      "info" : "FieldDeclaration[19211-19285]:FieldDeclaration[19693-19767]"
    }, {
      "left" : "Styles",
      "right" : "Styles",
      "info" : "TypeDeclaration[19293-19524]:TypeDeclaration[19775-20006]"
    }, {
      "left" : "String textBox();",
      "right" : "String textBox();",
      "info" : "MethodDeclaration[19348-19365]:MethodDeclaration[19830-19847]"
    }, {
      "left" : "String chunkLabel();",
      "right" : "String chunkLabel();",
      "info" : "MethodDeclaration[19379-19399]:MethodDeclaration[19861-19881]"
    }, {
      "left" : "String chunkName();",
      "right" : "String chunkName();",
      "info" : "MethodDeclaration[19406-19425]:MethodDeclaration[19888-19907]"
    }, {
      "left" : "String labelPanel();",
      "right" : "String labelPanel();",
      "info" : "MethodDeclaration[19432-19452]:MethodDeclaration[19914-19934]"
    }, {
      "left" : "String buttonPanel();",
      "right" : "String buttonPanel();",
      "info" : "MethodDeclaration[19466-19487]:MethodDeclaration[19948-19969]"
    }, {
      "left" : "String checkBox();",
      "right" : "String checkBox();",
      "info" : "MethodDeclaration[19501-19519]:MethodDeclaration[19983-20001]"
    }, {
      "left" : "Resources",
      "right" : "Resources",
      "info" : "TypeDeclaration[19532-19656]:TypeDeclaration[20014-20138]"
    }, {
      "left" : "Styles styles();",
      "right" : "Styles styles();",
      "info" : "MethodDeclaration[19591-19651]:MethodDeclaration[20073-20133]"
    }, {
      "left" : "private static Resources RES = GWT.create(Resources.class);",
      "right" : "private static Resources RES = GWT.create(Resources.class);",
      "info" : "FieldDeclaration[19664-19723]:FieldDeclaration[20146-20205]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2792-2798]:Modifier[2838-2844]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2799-2804]:TYPE_DECLARATION_KIND[2845-2850]"
    }, {
      "left" : "ChunkOptionsPopupPanel",
      "right" : "ChunkOptionsPopupPanel",
      "info" : "SimpleName[2805-2827]:SimpleName[2851-2873]"
    }, {
      "left" : "MiniPopupPanel",
      "right" : "MiniPopupPanel",
      "info" : "SimpleType[2836-2850]:SimpleType[2882-2896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2856-2862]:Modifier[2902-2908]"
    }, {
      "left" : "ChunkOptionsPopupPanel",
      "right" : "ChunkOptionsPopupPanel",
      "info" : "SimpleName[2863-2885]:SimpleName[2909-2931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2891-9274]:Block[2937-9553]"
    }, {
      "left" : "super(true);",
      "right" : "super(true);",
      "info" : "SuperConstructorInvocation[2899-2911]:SuperConstructorInvocation[2945-2957]"
    }, {
      "left" : "chunkOptions_ = new HashMap<String, String>();",
      "right" : "chunkOptions_ = new HashMap<String, String>();",
      "info" : "ExpressionStatement[2925-2971]:ExpressionStatement[2971-3017]"
    }, {
      "left" : "originalChunkOptions_ = new HashMap<String, String>();",
      "right" : "originalChunkOptions_ = new HashMap<String, String>();",
      "info" : "ExpressionStatement[2978-3032]:ExpressionStatement[3024-3078]"
    }, {
      "left" : "panel_ = new VerticalPanel();",
      "right" : "panel_ = new VerticalPanel();",
      "info" : "ExpressionStatement[3046-3075]:ExpressionStatement[3092-3121]"
    }, {
      "left" : "add(panel_);",
      "right" : "add(panel_);",
      "info" : "ExpressionStatement[3082-3094]:ExpressionStatement[3128-3140]"
    }, {
      "left" : "tbChunkLabel_ = new TextBoxWithCue(\"Unnamed chunk\");",
      "right" : "tbChunkLabel_ = new TextBoxWithCue(\"Unnamed chunk\");",
      "info" : "ExpressionStatement[3108-3160]:ExpressionStatement[3154-3206]"
    }, {
      "left" : "tbChunkLabel_.addStyleName(RES.styles().textBox());",
      "right" : "tbChunkLabel_.addStyleName(RES.styles().textBox());",
      "info" : "ExpressionStatement[3167-3218]:ExpressionStatement[3213-3264]"
    }, {
      "left" : "tbChunkLabel_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            synchronize();\n         }\n      });",
      "right" : "tbChunkLabel_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            synchronize();\n         }\n      });",
      "info" : "ExpressionStatement[3225-3410]:ExpressionStatement[3271-3456]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3293-3302]:MarkerAnnotation[3339-3348]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3312-3318]:Modifier[3358-3364]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3319-3323]:PrimitiveType[3365-3369]"
    }, {
      "left" : "onChange",
      "right" : "onChange",
      "info" : "SimpleName[3324-3332]:SimpleName[3370-3378]"
    }, {
      "left" : "ChangeEvent event",
      "right" : "ChangeEvent event",
      "info" : "SingleVariableDeclaration[3333-3350]:SingleVariableDeclaration[3379-3396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3361-3400]:Block[3407-3446]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[3375-3389]:ExpressionStatement[3421-3435]"
    }, {
      "left" : "panel_.addHandler(new KeyUpHandler()\n      {\n         @Override\n         public void onKeyUp(KeyUpEvent event)\n         {\n            int keyCode = event.getNativeKeyCode();\n            if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)\n            {\n               ChunkOptionsPopupPanel.this.hide();\n               widget_.getEditor().focus();\n               return;\n            }\n         }\n      }, KeyUpEvent.getType());",
      "right" : "panel_.addHandler(new KeyUpHandler()\n      {\n         @Override\n         public void onKeyUp(KeyUpEvent event)\n         {\n            int keyCode = event.getNativeKeyCode();\n            if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)\n            {\n               ChunkOptionsPopupPanel.this.hide();\n               widget_.getEditor().focus();\n               return;\n            }\n         }\n      }, KeyUpEvent.getType());",
      "info" : "ExpressionStatement[3424-3883]:ExpressionStatement[3470-3929]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3478-3487]:MarkerAnnotation[3524-3533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3497-3503]:Modifier[3543-3549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3504-3508]:PrimitiveType[3550-3554]"
    }, {
      "left" : "onKeyUp",
      "right" : "onKeyUp",
      "info" : "SimpleName[3509-3516]:SimpleName[3555-3562]"
    }, {
      "left" : "KeyUpEvent event",
      "right" : "KeyUpEvent event",
      "info" : "SingleVariableDeclaration[3517-3533]:SingleVariableDeclaration[3563-3579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3544-3851]:Block[3590-3897]"
    }, {
      "left" : "int keyCode = event.getNativeKeyCode();",
      "right" : "int keyCode = event.getNativeKeyCode();",
      "info" : "VariableDeclarationStatement[3558-3597]:VariableDeclarationStatement[3604-3643]"
    }, {
      "left" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "right" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "info" : "IfStatement[3610-3840]:IfStatement[3656-3886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3707-3840]:Block[3753-3886]"
    }, {
      "left" : "ChunkOptionsPopupPanel.this.hide();",
      "right" : "ChunkOptionsPopupPanel.this.hide();",
      "info" : "ExpressionStatement[3724-3759]:ExpressionStatement[3770-3805]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[3775-3803]:ExpressionStatement[3821-3849]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3819-3826]:ReturnStatement[3865-3872]"
    }, {
      "left" : "tbChunkLabel_.addKeyUpHandler(new KeyUpHandler()\n      {\n         @Override\n         public void onKeyUp(KeyUpEvent event)\n         {\n            int keyCode = event.getNativeKeyCode();\n            if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)\n            {\n               ChunkOptionsPopupPanel.this.hide();\n               widget_.getEditor().focus();\n               return;\n            }\n            \n            synchronize();\n            \n         }\n      });",
      "right" : "tbChunkLabel_.addKeyUpHandler(new KeyUpHandler()\n      {\n         @Override\n         public void onKeyUp(KeyUpEvent event)\n         {\n            int keyCode = event.getNativeKeyCode();\n            if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)\n            {\n               ChunkOptionsPopupPanel.this.hide();\n               widget_.getEditor().focus();\n               return;\n            }\n            \n            synchronize();\n            \n         }\n      });",
      "info" : "ExpressionStatement[3897-4399]:ExpressionStatement[3943-4445]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3963-3972]:MarkerAnnotation[4009-4018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3982-3988]:Modifier[4028-4034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3989-3993]:PrimitiveType[4035-4039]"
    }, {
      "left" : "onKeyUp",
      "right" : "onKeyUp",
      "info" : "SimpleName[3994-4001]:SimpleName[4040-4047]"
    }, {
      "left" : "KeyUpEvent event",
      "right" : "KeyUpEvent event",
      "info" : "SingleVariableDeclaration[4002-4018]:SingleVariableDeclaration[4048-4064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4029-4389]:Block[4075-4435]"
    }, {
      "left" : "int keyCode = event.getNativeKeyCode();",
      "right" : "int keyCode = event.getNativeKeyCode();",
      "info" : "VariableDeclarationStatement[4043-4082]:VariableDeclarationStatement[4089-4128]"
    }, {
      "left" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "right" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "info" : "IfStatement[4095-4325]:IfStatement[4141-4371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4192-4325]:Block[4238-4371]"
    }, {
      "left" : "ChunkOptionsPopupPanel.this.hide();",
      "right" : "ChunkOptionsPopupPanel.this.hide();",
      "info" : "ExpressionStatement[4209-4244]:ExpressionStatement[4255-4290]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[4260-4288]:ExpressionStatement[4306-4334]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4304-4311]:ReturnStatement[4350-4357]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[4351-4365]:ExpressionStatement[4397-4411]"
    }, {
      "left" : "HorizontalPanel",
      "right" : "Grid",
      "info" : "SimpleName[4413-4428]:SimpleName[4459-4463]"
    }, {
      "left" : "HorizontalPanel labelPanel = new HorizontalPanel();",
      "right" : "Grid nameAndOutputGrid = new Grid(2, 2);",
      "info" : "VariableDeclarationStatement[4413-4464]:VariableDeclarationStatement[4459-4499]"
    }, {
      "left" : "labelPanel",
      "right" : "nameAndOutputGrid",
      "info" : "SimpleName[4429-4439]:SimpleName[4464-4481]"
    }, {
      "left" : "HorizontalPanel",
      "right" : "Grid",
      "info" : "SimpleName[4446-4461]:SimpleName[4488-4492]"
    }, {
      "left" : "Label chunkLabel = new Label(\"Name:\");",
      "right" : "Label chunkLabel = new Label(\"Name:\");",
      "info" : "VariableDeclarationStatement[4603-4641]:VariableDeclarationStatement[4513-4551]"
    }, {
      "left" : "chunkLabel.addStyleName(RES.styles().chunkLabel());",
      "right" : "chunkLabel.addStyleName(RES.styles().chunkLabel());",
      "info" : "ExpressionStatement[4648-4699]:ExpressionStatement[4558-4609]"
    }, {
      "left" : "labelPanel",
      "right" : "nameAndOutputGrid",
      "info" : "SimpleName[4706-4716]:SimpleName[4616-4633]"
    }, {
      "left" : "labelPanel.add(chunkLabel);",
      "right" : "nameAndOutputGrid.setWidget(0, 0, chunkLabel);",
      "info" : "ExpressionStatement[4706-4733]:ExpressionStatement[4616-4662]"
    }, {
      "left" : "add",
      "right" : "setWidget",
      "info" : "SimpleName[4717-4720]:SimpleName[4634-4643]"
    }, {
      "left" : "chunkLabel",
      "right" : "chunkLabel",
      "info" : "SimpleName[4721-4731]:SimpleName[4650-4660]"
    }, {
      "left" : "tbChunkLabel_.addStyleName(RES.styles().chunkName());",
      "right" : "tbChunkLabel_.addStyleName(RES.styles().chunkName());",
      "info" : "ExpressionStatement[4747-4800]:ExpressionStatement[4676-4729]"
    }, {
      "left" : "labelPanel",
      "right" : "nameAndOutputGrid",
      "info" : "SimpleName[4807-4817]:SimpleName[4736-4753]"
    }, {
      "left" : "labelPanel.add(tbChunkLabel_);",
      "right" : "nameAndOutputGrid.setWidget(0, 1, tbChunkLabel_);",
      "info" : "ExpressionStatement[4807-4837]:ExpressionStatement[4736-4785]"
    }, {
      "left" : "add",
      "right" : "setWidget",
      "info" : "SimpleName[4818-4821]:SimpleName[4754-4763]"
    }, {
      "left" : "tbChunkLabel_",
      "right" : "tbChunkLabel_",
      "info" : "SimpleName[4822-4835]:SimpleName[4770-4783]"
    }, {
      "left" : "panel_.add(labelPanel);",
      "right" : "outputComboBox_ = new ListBox();",
      "info" : "ExpressionStatement[4851-4874]:ExpressionStatement[4799-4831]"
    }, {
      "left" : "panel_",
      "right" : "panel_",
      "info" : "METHOD_INVOCATION_RECEIVER[4851-4857]:METHOD_INVOCATION_RECEIVER[6338-6344]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[4858-4861]:SimpleName[6301-6304]"
    }, {
      "left" : "labelPanel",
      "right" : "ListBox",
      "info" : "SimpleName[4862-4872]:SimpleName[4821-4828]"
    }, {
      "left" : "outputComboBox_",
      "right" : "outputComboBox_",
      "info" : "SimpleName[4888-4903]:SimpleName[4799-4814]"
    }, {
      "left" : "outputComboBox_ = new SelectWidget(\n            \"Output:\",\n            new String[] {\n                  OUTPUT_USE_DOCUMENT_DEFAULT,\n                  OUTPUT_SHOW_CODE_AND_OUTPUT,\n                  OUTPUT_SHOW_OUTPUT_ONLY,\n                  OUTPUT_SHOW_NOTHING\n            });",
      "right" : "outputComboBox_.addItem(option);",
      "info" : "ExpressionStatement[4888-5164]:ExpressionStatement[5084-5116]"
    }, {
      "left" : "SelectWidget",
      "right" : "String",
      "info" : "SimpleType[4910-4922]:SimpleType[4838-4844]"
    }, {
      "left" : "\"Output:\"",
      "right" : "\"Output:\"",
      "info" : "StringLiteral[4936-4945]:StringLiteral[6210-6219]"
    }, {
      "left" : "new String[] {\n                  OUTPUT_USE_DOCUMENT_DEFAULT,\n                  OUTPUT_SHOW_CODE_AND_OUTPUT,\n                  OUTPUT_SHOW_OUTPUT_ONLY,\n                  OUTPUT_SHOW_NOTHING\n            }",
      "right" : "new String[] {\n            OUTPUT_USE_DOCUMENT_DEFAULT,\n            OUTPUT_SHOW_CODE_AND_OUTPUT,\n            OUTPUT_SHOW_OUTPUT_ONLY,\n            OUTPUT_SHOW_NOTHING\n      }",
      "info" : "ArrayCreation[4959-5162]:ArrayCreation[4857-5030]"
    }, {
      "left" : "outputComboBox_",
      "right" : "outputComboBox_",
      "info" : "METHOD_INVOCATION_RECEIVER[5178-5193]:METHOD_INVOCATION_RECEIVER[5084-5099]"
    }, {
      "left" : "outputComboBox_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            String value = outputComboBox_.getValue();\n            if (value.equals(OUTPUT_USE_DOCUMENT_DEFAULT))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_CODE_AND_OUTPUT))\n            {\n               set(\"echo\", \"TRUE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_OUTPUT_ONLY))\n            {\n               set(\"echo\", \"FALSE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_NOTHING))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               set(\"include\", \"FALSE\");\n            }\n            synchronize();\n         }\n      })",
      "right" : "outputComboBox_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            String value = outputComboBox_.getItemText(outputComboBox_.getSelectedIndex());\n            if (value.equals(OUTPUT_USE_DOCUMENT_DEFAULT))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_CODE_AND_OUTPUT))\n            {\n               set(\"echo\", \"TRUE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_OUTPUT_ONLY))\n            {\n               set(\"echo\", \"FALSE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_NOTHING))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               set(\"include\", \"FALSE\");\n            }\n            synchronize();\n         }\n      })",
      "info" : "MethodInvocation[5178-6162]:MethodInvocation[5130-6151]"
    }, {
      "left" : "outputComboBox_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            String value = outputComboBox_.getValue();\n            if (value.equals(OUTPUT_USE_DOCUMENT_DEFAULT))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_CODE_AND_OUTPUT))\n            {\n               set(\"echo\", \"TRUE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_OUTPUT_ONLY))\n            {\n               set(\"echo\", \"FALSE\");\n               unset(\"eval\");\n               unset(\"include\");\n            }\n            else if (value.equals(OUTPUT_SHOW_NOTHING))\n            {\n               unset(\"echo\");\n               unset(\"eval\");\n               set(\"include\", \"FALSE\");\n            }\n            synchronize();\n         }\n      });",
      "right" : "nameAndOutputGrid.setWidget(1, 1, outputComboBox_);",
      "info" : "ExpressionStatement[5178-6163]:ExpressionStatement[6229-6280]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5248-5257]:MarkerAnnotation[5200-5209]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5267-5273]:Modifier[5219-5225]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5274-5278]:PrimitiveType[5226-5230]"
    }, {
      "left" : "onChange",
      "right" : "onChange",
      "info" : "SimpleName[5279-5287]:SimpleName[5231-5239]"
    }, {
      "left" : "ChangeEvent event",
      "right" : "ChangeEvent event",
      "info" : "SingleVariableDeclaration[5288-5305]:SingleVariableDeclaration[5240-5257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5316-6153]:Block[5268-6142]"
    }, {
      "left" : "String value = outputComboBox_.getValue();",
      "right" : "String value = outputComboBox_.getItemText(outputComboBox_.getSelectedIndex());",
      "info" : "VariableDeclarationStatement[5330-5372]:VariableDeclarationStatement[5282-5361]"
    }, {
      "left" : "getValue",
      "right" : "getItemText",
      "info" : "SimpleName[5361-5369]:SimpleName[5313-5324]"
    }, {
      "left" : "if (value.equals(OUTPUT_USE_DOCUMENT_DEFAULT))",
      "right" : "if (value.equals(OUTPUT_USE_DOCUMENT_DEFAULT))",
      "info" : "IfStatement[5385-6115]:IfStatement[5374-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5444-5552]:Block[5433-5541]"
    }, {
      "left" : "unset(\"echo\");",
      "right" : "unset(\"echo\");",
      "info" : "ExpressionStatement[5461-5475]:ExpressionStatement[5450-5464]"
    }, {
      "left" : "unset(\"eval\");",
      "right" : "unset(\"eval\");",
      "info" : "ExpressionStatement[5491-5505]:ExpressionStatement[5480-5494]"
    }, {
      "left" : "unset(\"include\");",
      "right" : "unset(\"include\");",
      "info" : "ExpressionStatement[5521-5538]:ExpressionStatement[5510-5527]"
    }, {
      "left" : "if (value.equals(OUTPUT_SHOW_CODE_AND_OUTPUT))",
      "right" : "if (value.equals(OUTPUT_SHOW_CODE_AND_OUTPUT))",
      "info" : "IfStatement[5570-6115]:IfStatement[5559-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5629-5743]:Block[5618-5732]"
    }, {
      "left" : "set(\"echo\", \"TRUE\");",
      "right" : "set(\"echo\", \"TRUE\");",
      "info" : "ExpressionStatement[5646-5666]:ExpressionStatement[5635-5655]"
    }, {
      "left" : "unset(\"eval\");",
      "right" : "unset(\"eval\");",
      "info" : "ExpressionStatement[5682-5696]:ExpressionStatement[5671-5685]"
    }, {
      "left" : "unset(\"include\");",
      "right" : "unset(\"include\");",
      "info" : "ExpressionStatement[5712-5729]:ExpressionStatement[5701-5718]"
    }, {
      "left" : "if (value.equals(OUTPUT_SHOW_OUTPUT_ONLY))",
      "right" : "if (value.equals(OUTPUT_SHOW_OUTPUT_ONLY))",
      "info" : "IfStatement[5761-6115]:IfStatement[5750-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5816-5931]:Block[5805-5920]"
    }, {
      "left" : "set(\"echo\", \"FALSE\");",
      "right" : "set(\"echo\", \"FALSE\");",
      "info" : "ExpressionStatement[5833-5854]:ExpressionStatement[5822-5843]"
    }, {
      "left" : "unset(\"eval\");",
      "right" : "unset(\"eval\");",
      "info" : "ExpressionStatement[5870-5884]:ExpressionStatement[5859-5873]"
    }, {
      "left" : "unset(\"include\");",
      "right" : "unset(\"include\");",
      "info" : "ExpressionStatement[5900-5917]:ExpressionStatement[5889-5906]"
    }, {
      "left" : "if (value.equals(OUTPUT_SHOW_NOTHING))",
      "right" : "if (value.equals(OUTPUT_SHOW_NOTHING))",
      "info" : "IfStatement[5949-6115]:IfStatement[5938-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6000-6115]:Block[5989-6104]"
    }, {
      "left" : "unset(\"echo\");",
      "right" : "unset(\"echo\");",
      "info" : "ExpressionStatement[6017-6031]:ExpressionStatement[6006-6020]"
    }, {
      "left" : "unset(\"eval\");",
      "right" : "unset(\"eval\");",
      "info" : "ExpressionStatement[6047-6061]:ExpressionStatement[6036-6050]"
    }, {
      "left" : "set(\"include\", \"FALSE\");",
      "right" : "set(\"include\", \"FALSE\");",
      "info" : "ExpressionStatement[6077-6101]:ExpressionStatement[6066-6090]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[6128-6142]:ExpressionStatement[6117-6131]"
    }, {
      "left" : "panel_",
      "right" : "panel_",
      "info" : "METHOD_INVOCATION_RECEIVER[6177-6183]:METHOD_INVOCATION_RECEIVER[6294-6300]"
    }, {
      "left" : "panel_.add(outputComboBox_);",
      "right" : "panel_.add(verticalSpacer(4));",
      "info" : "ExpressionStatement[6177-6205]:ExpressionStatement[6338-6368]"
    }, {
      "left" : "outputComboBox_",
      "right" : "outputComboBox_",
      "info" : "SimpleName[6188-6203]:SimpleName[6263-6278]"
    }, {
      "left" : "showWarningsInOutputCb_ = makeTriStateCheckBox(\n            \"Show warnings in output\",\n            \"warning\");",
      "right" : "showWarningsInOutputCb_ = makeTriStateCheckBox(\n            \"Show warnings in output\",\n            \"warning\");",
      "info" : "ExpressionStatement[6219-6329]:ExpressionStatement[6382-6492]"
    }, {
      "left" : "panel_.add(showWarningsInOutputCb_);",
      "right" : "panel_.add(showWarningsInOutputCb_);",
      "info" : "ExpressionStatement[6336-6372]:ExpressionStatement[6499-6535]"
    }, {
      "left" : "showMessagesInOutputCb_ = makeTriStateCheckBox(\n            \"Show messages in output\",\n            \"message\");",
      "right" : "showMessagesInOutputCb_ = makeTriStateCheckBox(\n            \"Show messages in output\",\n            \"message\");",
      "info" : "ExpressionStatement[6379-6489]:ExpressionStatement[6542-6652]"
    }, {
      "left" : "panel_.add(showMessagesInOutputCb_);",
      "right" : "panel_.add(showMessagesInOutputCb_);",
      "info" : "ExpressionStatement[6496-6532]:ExpressionStatement[6659-6695]"
    }, {
      "left" : "FlowPanel",
      "right" : "FlowPanel",
      "info" : "SimpleType[6546-6555]:SimpleType[18566-18575]"
    }, {
      "left" : "spacer",
      "right" : "verticalSpacer",
      "info" : "SimpleName[6556-6562]:SimpleName[6720-6734]"
    }, {
      "left" : "FlowPanel",
      "right" : "FlowPanel",
      "info" : "SimpleType[6569-6578]:SimpleType[18512-18521]"
    }, {
      "left" : "spacer.setWidth(\"100%\")",
      "right" : "panel_.add(verticalSpacer(4))",
      "info" : "MethodInvocation[6588-6611]:MethodInvocation[6709-6738]"
    }, {
      "left" : "setWidth",
      "right" : "setWidth",
      "info" : "SimpleName[6595-6603]:SimpleName[18613-18621]"
    }, {
      "left" : "\"100%\"",
      "right" : "\"100%\"",
      "info" : "METHOD_INVOCATION_ARGUMENTS[6604-6610]:METHOD_INVOCATION_ARGUMENTS[18622-18628]"
    }, {
      "left" : "setHeight",
      "right" : "setHeight",
      "info" : "SimpleName[6626-6635]:SimpleName[18643-18652]"
    }, {
      "left" : "panel_",
      "right" : "panel_",
      "info" : "METHOD_INVOCATION_RECEIVER[6650-6656]:METHOD_INVOCATION_RECEIVER[6709-6715]"
    }, {
      "left" : "panel_.add(spacer);",
      "right" : "panel_.add(verticalSpacer(4));",
      "info" : "ExpressionStatement[6650-6669]:ExpressionStatement[6709-6739]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[6657-6660]:SimpleName[6716-6719]"
    }, {
      "left" : "useCustomFigureCheckbox_ = new ThemedCheckBox(\"Use custom figure size\");",
      "right" : "useCustomFigureCheckbox_ = new ThemedCheckBox(\"Use custom figure size\");",
      "info" : "ExpressionStatement[6683-6755]:ExpressionStatement[6753-6825]"
    }, {
      "left" : "useCustomFigureCheckbox_.addStyleName(RES.styles().checkBox());",
      "right" : "useCustomFigureCheckbox_.addStyleName(RES.styles().checkBox());",
      "info" : "ExpressionStatement[6762-6825]:ExpressionStatement[6832-6895]"
    }, {
      "left" : "useCustomFigureCheckbox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            figureDimensionsPanel_.setVisible(event.getValue());\n         }\n      });",
      "right" : "useCustomFigureCheckbox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            figureDimensionsPanel_.setVisible(event.getValue());\n         }\n      });",
      "info" : "ExpressionStatement[6832-7104]:ExpressionStatement[6902-7174]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6930-6939]:MarkerAnnotation[7000-7009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6949-6955]:Modifier[7019-7025]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6956-6960]:PrimitiveType[7026-7030]"
    }, {
      "left" : "onValueChange",
      "right" : "onValueChange",
      "info" : "SimpleName[6961-6974]:SimpleName[7031-7044]"
    }, {
      "left" : "ValueChangeEvent<Boolean> event",
      "right" : "ValueChangeEvent<Boolean> event",
      "info" : "SingleVariableDeclaration[6975-7006]:SingleVariableDeclaration[7045-7076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7017-7094]:Block[7087-7164]"
    }, {
      "left" : "figureDimensionsPanel_.setVisible(event.getValue());",
      "right" : "figureDimensionsPanel_.setVisible(event.getValue());",
      "info" : "ExpressionStatement[7031-7083]:ExpressionStatement[7101-7153]"
    }, {
      "left" : "panel_.add(useCustomFigureCheckbox_);",
      "right" : "panel_.add(useCustomFigureCheckbox_);",
      "info" : "ExpressionStatement[7111-7148]:ExpressionStatement[7181-7218]"
    }, {
      "left" : "figureDimensionsPanel_ = new Grid(2, 2);",
      "right" : "figureDimensionsPanel_ = new Grid(2, 2);",
      "info" : "ExpressionStatement[7162-7202]:ExpressionStatement[7232-7272]"
    }, {
      "left" : "figWidthBox_ = makeInputBox(\"fig.width\");",
      "right" : "figWidthBox_ = makeInputBox(\"fig.width\");",
      "info" : "ExpressionStatement[7216-7257]:ExpressionStatement[7286-7327]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(0, 0, new Label(\"Width (in inches):\"))",
      "right" : "widthLabel.getElement().getStyle().setMarginLeft(10, Unit.PX)",
      "info" : "MethodInvocation[7264-7335]:MethodInvocation[7389-7450]"
    }, {
      "left" : "figureDimensionsPanel_",
      "right" : "figureDimensionsPanel_",
      "info" : "METHOD_INVOCATION_RECEIVER[7264-7286]:METHOD_INVOCATION_RECEIVER[7458-7480]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(0, 0, new Label(\"Width (in inches):\"));",
      "right" : "figureDimensionsPanel_.setWidget(0, 0, widthLabel);",
      "info" : "ExpressionStatement[7264-7336]:ExpressionStatement[7458-7509]"
    }, {
      "left" : "setWidget",
      "right" : "setWidget",
      "info" : "SimpleName[7287-7296]:SimpleName[7783-7792]"
    }, {
      "left" : "0",
      "right" : "0",
      "info" : "NumberLiteral[7297-7298]:NumberLiteral[7796-7797]"
    }, {
      "left" : "0",
      "right" : "0",
      "info" : "NumberLiteral[7300-7301]:NumberLiteral[7494-7495]"
    }, {
      "left" : "new Label(\"Width (in inches):\")",
      "right" : "new Label(\"Width (inches):\")",
      "info" : "ClassInstanceCreation[7303-7334]:ClassInstanceCreation[7353-7381]"
    }, {
      "left" : "Label",
      "right" : "Label",
      "info" : "SimpleType[7307-7312]:SimpleType[7334-7339]"
    }, {
      "left" : "\"Width (in inches):\"",
      "right" : "\"Width (inches):\"",
      "info" : "StringLiteral[7313-7333]:StringLiteral[7363-7380]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(0, 1, figWidthBox_);",
      "right" : "figureDimensionsPanel_.setWidget(0, 1, figWidthBox_);",
      "info" : "ExpressionStatement[7343-7396]:ExpressionStatement[7516-7569]"
    }, {
      "left" : "figHeightBox_ = makeInputBox(\"fig.height\");",
      "right" : "figHeightBox_ = makeInputBox(\"fig.height\");",
      "info" : "ExpressionStatement[7410-7453]:ExpressionStatement[7583-7626]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(1, 0, new Label(\"Height (in inches):\"))",
      "right" : "heightLabel.getElement().getStyle().setMarginLeft(10, Unit.PX)",
      "info" : "MethodInvocation[7460-7532]:MethodInvocation[7690-7752]"
    }, {
      "left" : "figureDimensionsPanel_",
      "right" : "figureDimensionsPanel_",
      "info" : "METHOD_INVOCATION_RECEIVER[7460-7482]:METHOD_INVOCATION_RECEIVER[7760-7782]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(1, 0, new Label(\"Height (in inches):\"));",
      "right" : "figureDimensionsPanel_.setWidget(1, 0, heightLabel);",
      "info" : "ExpressionStatement[7460-7533]:ExpressionStatement[7760-7812]"
    }, {
      "left" : "setWidget",
      "right" : "setWidget",
      "info" : "SimpleName[7483-7492]:SimpleName[7481-7490]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[7493-7494]:NumberLiteral[7793-7794]"
    }, {
      "left" : "0",
      "right" : "0",
      "info" : "NumberLiteral[7496-7497]:NumberLiteral[7491-7492]"
    }, {
      "left" : "new Label(\"Height (in inches):\")",
      "right" : "new Label(\"Height (inches):\")",
      "info" : "ClassInstanceCreation[7499-7531]:ClassInstanceCreation[7653-7682]"
    }, {
      "left" : "Label",
      "right" : "Label",
      "info" : "SimpleType[7503-7508]:SimpleType[7357-7362]"
    }, {
      "left" : "\"Height (in inches):\"",
      "right" : "\"Height (inches):\"",
      "info" : "StringLiteral[7509-7530]:StringLiteral[7663-7681]"
    }, {
      "left" : "figureDimensionsPanel_.setWidget(1, 1, figHeightBox_);",
      "right" : "figureDimensionsPanel_.setWidget(1, 1, figHeightBox_);",
      "info" : "ExpressionStatement[7540-7594]:ExpressionStatement[7819-7873]"
    }, {
      "left" : "panel_.add(figureDimensionsPanel_);",
      "right" : "panel_.add(figureDimensionsPanel_);",
      "info" : "ExpressionStatement[7608-7643]:ExpressionStatement[7887-7922]"
    }, {
      "left" : "HorizontalPanel footerPanel = new HorizontalPanel();",
      "right" : "HorizontalPanel footerPanel = new HorizontalPanel();",
      "info" : "VariableDeclarationStatement[7657-7709]:VariableDeclarationStatement[7936-7988]"
    }, {
      "left" : "footerPanel.getElement().getStyle().setWidth(100, Unit.PCT);",
      "right" : "footerPanel.getElement().getStyle().setWidth(100, Unit.PCT);",
      "info" : "ExpressionStatement[7716-7776]:ExpressionStatement[7995-8055]"
    }, {
      "left" : "FlowPanel linkPanel = new FlowPanel();",
      "right" : "FlowPanel linkPanel = new FlowPanel();",
      "info" : "VariableDeclarationStatement[7790-7828]:VariableDeclarationStatement[8069-8107]"
    }, {
      "left" : "HelpLink helpLink = new HelpLink(\"Chunk options\", \"chunk-options\", false);",
      "right" : "HelpLink helpLink = new HelpLink(\"Chunk options\", \"chunk-options\", false);",
      "info" : "VariableDeclarationStatement[7835-7909]:VariableDeclarationStatement[8114-8188]"
    }, {
      "left" : "linkPanel.add(helpLink);",
      "right" : "linkPanel.add(helpLink);",
      "info" : "ExpressionStatement[7916-7940]:ExpressionStatement[8195-8219]"
    }, {
      "left" : "HorizontalPanel buttonPanel = new HorizontalPanel();",
      "right" : "HorizontalPanel buttonPanel = new HorizontalPanel();",
      "info" : "VariableDeclarationStatement[7954-8006]:VariableDeclarationStatement[8233-8285]"
    }, {
      "left" : "buttonPanel.addStyleName(RES.styles().buttonPanel());",
      "right" : "buttonPanel.addStyleName(RES.styles().buttonPanel());",
      "info" : "ExpressionStatement[8013-8066]:ExpressionStatement[8292-8345]"
    }, {
      "left" : "buttonPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);",
      "right" : "buttonPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);",
      "info" : "ExpressionStatement[8073-8137]:ExpressionStatement[8352-8416]"
    }, {
      "left" : "SmallButton revertButton = new SmallButton(\"Revert\");",
      "right" : "SmallButton revertButton = new SmallButton(\"Revert\");",
      "info" : "VariableDeclarationStatement[8151-8204]:VariableDeclarationStatement[8430-8483]"
    }, {
      "left" : "revertButton.getElement().getStyle().setMarginRight(8, Unit.PX);",
      "right" : "revertButton.getElement().getStyle().setMarginRight(8, Unit.PX);",
      "info" : "ExpressionStatement[8211-8275]:ExpressionStatement[8490-8554]"
    }, {
      "left" : "revertButton.getElement().getStyle().setMarginTop(-1, Unit.PX);",
      "right" : "revertButton.getElement().getStyle().setMarginTop(-1, Unit.PX);",
      "info" : "ExpressionStatement[8282-8345]:ExpressionStatement[8561-8624]"
    }, {
      "left" : "revertButton.addClickHandler(new ClickHandler()\n      {\n         \n         @Override\n         public void onClick(ClickEvent event)\n         {\n            revert();\n            hideAndFocusEditor();\n         }\n      });",
      "right" : "revertButton.addClickHandler(new ClickHandler()\n      {\n         \n         @Override\n         public void onClick(ClickEvent event)\n         {\n            revert();\n            hideAndFocusEditor();\n         }\n      });",
      "info" : "ExpressionStatement[8352-8571]:ExpressionStatement[8631-8850]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8427-8436]:MarkerAnnotation[8706-8715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8446-8452]:Modifier[8725-8731]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8453-8457]:PrimitiveType[8732-8736]"
    }, {
      "left" : "onClick",
      "right" : "onClick",
      "info" : "SimpleName[8458-8465]:SimpleName[8737-8744]"
    }, {
      "left" : "ClickEvent event",
      "right" : "ClickEvent event",
      "info" : "SingleVariableDeclaration[8466-8482]:SingleVariableDeclaration[8745-8761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8493-8561]:Block[8772-8840]"
    }, {
      "left" : "revert();",
      "right" : "revert();",
      "info" : "ExpressionStatement[8507-8516]:ExpressionStatement[8786-8795]"
    }, {
      "left" : "hideAndFocusEditor();",
      "right" : "hideAndFocusEditor();",
      "info" : "ExpressionStatement[8529-8550]:ExpressionStatement[8808-8829]"
    }, {
      "left" : "buttonPanel.add(revertButton);",
      "right" : "buttonPanel.add(revertButton);",
      "info" : "ExpressionStatement[8578-8608]:ExpressionStatement[8857-8887]"
    }, {
      "left" : "SmallButton applyButton = new SmallButton(\"Apply\");",
      "right" : "SmallButton applyButton = new SmallButton(\"Apply\");",
      "info" : "VariableDeclarationStatement[8622-8673]:VariableDeclarationStatement[8901-8952]"
    }, {
      "left" : "applyButton.getElement().getStyle().setMarginTop(-1, Unit.PX);",
      "right" : "applyButton.getElement().getStyle().setMarginTop(-1, Unit.PX);",
      "info" : "ExpressionStatement[8680-8742]:ExpressionStatement[8959-9021]"
    }, {
      "left" : "applyButton.addClickHandler(new ClickHandler()\n      {\n         \n         @Override\n         public void onClick(ClickEvent event)\n         {\n            synchronize();\n            hideAndFocusEditor();\n         }\n      });",
      "right" : "applyButton.addClickHandler(new ClickHandler()\n      {\n         \n         @Override\n         public void onClick(ClickEvent event)\n         {\n            synchronize();\n            hideAndFocusEditor();\n         }\n      });",
      "info" : "ExpressionStatement[8749-8972]:ExpressionStatement[9028-9251]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8823-8832]:MarkerAnnotation[9102-9111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8842-8848]:Modifier[9121-9127]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8849-8853]:PrimitiveType[9128-9132]"
    }, {
      "left" : "onClick",
      "right" : "onClick",
      "info" : "SimpleName[8854-8861]:SimpleName[9133-9140]"
    }, {
      "left" : "ClickEvent event",
      "right" : "ClickEvent event",
      "info" : "SingleVariableDeclaration[8862-8878]:SingleVariableDeclaration[9141-9157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8889-8962]:Block[9168-9241]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[8903-8917]:ExpressionStatement[9182-9196]"
    }, {
      "left" : "hideAndFocusEditor();",
      "right" : "hideAndFocusEditor();",
      "info" : "ExpressionStatement[8930-8951]:ExpressionStatement[9209-9230]"
    }, {
      "left" : "buttonPanel.add(applyButton);",
      "right" : "buttonPanel.add(applyButton);",
      "info" : "ExpressionStatement[8979-9008]:ExpressionStatement[9258-9287]"
    }, {
      "left" : "footerPanel.setVerticalAlignment(VerticalPanel.ALIGN_BOTTOM);",
      "right" : "footerPanel.setVerticalAlignment(VerticalPanel.ALIGN_BOTTOM);",
      "info" : "ExpressionStatement[9022-9083]:ExpressionStatement[9301-9362]"
    }, {
      "left" : "footerPanel.add(linkPanel);",
      "right" : "footerPanel.add(linkPanel);",
      "info" : "ExpressionStatement[9090-9117]:ExpressionStatement[9369-9396]"
    }, {
      "left" : "footerPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);",
      "right" : "footerPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);",
      "info" : "ExpressionStatement[9131-9195]:ExpressionStatement[9410-9474]"
    }, {
      "left" : "footerPanel.add(buttonPanel);",
      "right" : "footerPanel.add(buttonPanel);",
      "info" : "ExpressionStatement[9202-9231]:ExpressionStatement[9481-9510]"
    }, {
      "left" : "panel_.add(footerPanel);",
      "right" : "panel_.add(footerPanel);",
      "info" : "ExpressionStatement[9245-9269]:ExpressionStatement[9524-9548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9289-9295]:Modifier[9568-9574]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9296-9300]:PrimitiveType[9575-9579]"
    }, {
      "left" : "focus",
      "right" : "focus",
      "info" : "SimpleName[9301-9306]:SimpleName[9580-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9312-9354]:Block[9591-9633]"
    }, {
      "left" : "tbChunkLabel_.setFocus(true);",
      "right" : "tbChunkLabel_.setFocus(true);",
      "info" : "ExpressionStatement[9320-9349]:ExpressionStatement[9599-9628]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9362-9369]:Modifier[9641-9648]"
    }, {
      "left" : "TextBox",
      "right" : "TextBox",
      "info" : "SimpleType[9370-9377]:SimpleType[9649-9656]"
    }, {
      "left" : "makeInputBox",
      "right" : "makeInputBox",
      "info" : "SimpleName[9378-9390]:SimpleName[9657-9669]"
    }, {
      "left" : "final String option",
      "right" : "final String option",
      "info" : "SingleVariableDeclaration[9391-9410]:SingleVariableDeclaration[9670-9689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-10192]:Block[9694-10471]"
    }, {
      "left" : "final TextBox box = new TextBox();",
      "right" : "final TextBox box = new TextBox();",
      "info" : "VariableDeclarationStatement[9423-9457]:VariableDeclarationStatement[9702-9736]"
    }, {
      "left" : "box.getElement().setAttribute(\"placeholder\", \"Default\");",
      "right" : "box.getElement().setAttribute(\"placeholder\", \"Default\");",
      "info" : "ExpressionStatement[9464-9520]:ExpressionStatement[9743-9799]"
    }, {
      "left" : "box.setWidth(\"40px\");",
      "right" : "box.setWidth(\"40px\");",
      "info" : "ExpressionStatement[9527-9548]:ExpressionStatement[9806-9827]"
    }, {
      "left" : "DomUtils.addKeyHandlers(box, new NativeEventHandler()\n      {\n         @Override\n         public void onNativeEvent(NativeEvent event)\n         {\n            Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });\n         }\n      });",
      "right" : "DomUtils.addKeyHandlers(box, new NativeEventHandler()\n      {\n         @Override\n         public void onNativeEvent(NativeEvent event)\n         {\n            Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });\n         }\n      });",
      "info" : "ExpressionStatement[9562-10162]:ExpressionStatement[9841-10441]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9633-9642]:MarkerAnnotation[9912-9921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9652-9658]:Modifier[9931-9937]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9659-9663]:PrimitiveType[9938-9942]"
    }, {
      "left" : "onNativeEvent",
      "right" : "onNativeEvent",
      "info" : "SimpleName[9664-9677]:SimpleName[9943-9956]"
    }, {
      "left" : "NativeEvent event",
      "right" : "NativeEvent event",
      "info" : "SingleVariableDeclaration[9678-9695]:SingleVariableDeclaration[9957-9974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9706-10152]:Block[9985-10431]"
    }, {
      "left" : "Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });",
      "right" : "Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });",
      "info" : "ExpressionStatement[9720-10141]:ExpressionStatement[9999-10420]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9805-9814]:MarkerAnnotation[10084-10093]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9830-9836]:Modifier[10109-10115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9837-9841]:PrimitiveType[10116-10120]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[9842-9849]:SimpleName[10121-10128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9867-10125]:Block[10146-10404]"
    }, {
      "left" : "String text = box.getText().trim();",
      "right" : "String text = box.getText().trim();",
      "info" : "VariableDeclarationStatement[9887-9922]:VariableDeclarationStatement[10166-10201]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(text))",
      "right" : "if (StringUtil.isNullOrEmpty(text))",
      "info" : "IfStatement[9941-10075]:IfStatement[10220-10354]"
    }, {
      "left" : "unset(option);",
      "right" : "unset(option);",
      "info" : "ExpressionStatement[9998-10012]:ExpressionStatement[10277-10291]"
    }, {
      "left" : "set(option, text);",
      "right" : "set(option, text);",
      "info" : "ExpressionStatement[10057-10075]:ExpressionStatement[10336-10354]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[10094-10108]:ExpressionStatement[10373-10387]"
    }, {
      "left" : "return box;",
      "right" : "return box;",
      "info" : "ReturnStatement[10176-10187]:ReturnStatement[10455-10466]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10200-10207]:Modifier[10479-10486]"
    }, {
      "left" : "TriStateCheckBox",
      "right" : "TriStateCheckBox",
      "info" : "SimpleType[10208-10224]:SimpleType[10487-10503]"
    }, {
      "left" : "makeTriStateCheckBox",
      "right" : "makeTriStateCheckBox",
      "info" : "SimpleName[10225-10245]:SimpleName[10504-10524]"
    }, {
      "left" : "String label",
      "right" : "String label",
      "info" : "SingleVariableDeclaration[10246-10258]:SingleVariableDeclaration[10525-10537]"
    }, {
      "left" : "final String option",
      "right" : "final String option",
      "info" : "SingleVariableDeclaration[10260-10279]:SingleVariableDeclaration[10539-10558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10284-11036]:Block[10563-11315]"
    }, {
      "left" : "TriStateCheckBox checkBox = new TriStateCheckBox(label);",
      "right" : "TriStateCheckBox checkBox = new TriStateCheckBox(label);",
      "info" : "VariableDeclarationStatement[10292-10348]:VariableDeclarationStatement[10571-10627]"
    }, {
      "left" : "checkBox.addValueChangeHandler(\n            new ValueChangeHandler<TriStateCheckBox.State>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<State> event)\n               {\n                  State state = event.getValue();\n                  if (state == TriStateCheckBox.STATE_INDETERMINATE)\n                     unset(option);\n                  else if (state == TriStateCheckBox.STATE_OFF)\n                     set(option, \"FALSE\");\n                  else if (state == TriStateCheckBox.STATE_ON)\n                     set(option, \"TRUE\");\n                  synchronize();\n               }\n            });",
      "right" : "checkBox.addValueChangeHandler(\n            new ValueChangeHandler<TriStateCheckBox.State>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<State> event)\n               {\n                  State state = event.getValue();\n                  if (state == TriStateCheckBox.STATE_INDETERMINATE)\n                     unset(option);\n                  else if (state == TriStateCheckBox.STATE_OFF)\n                     set(option, \"FALSE\");\n                  else if (state == TriStateCheckBox.STATE_ON)\n                     set(option, \"TRUE\");\n                  synchronize();\n               }\n            });",
      "info" : "ExpressionStatement[10355-11008]:ExpressionStatement[10634-11287]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10477-10486]:MarkerAnnotation[10756-10765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10502-10508]:Modifier[10781-10787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10509-10513]:PrimitiveType[10788-10792]"
    }, {
      "left" : "onValueChange",
      "right" : "onValueChange",
      "info" : "SimpleName[10514-10527]:SimpleName[10793-10806]"
    }, {
      "left" : "ValueChangeEvent<State> event",
      "right" : "ValueChangeEvent<State> event",
      "info" : "SingleVariableDeclaration[10528-10557]:SingleVariableDeclaration[10807-10836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10574-10992]:Block[10853-11271]"
    }, {
      "left" : "State state = event.getValue();",
      "right" : "State state = event.getValue();",
      "info" : "VariableDeclarationStatement[10594-10625]:VariableDeclarationStatement[10873-10904]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_INDETERMINATE)",
      "right" : "if (state == TriStateCheckBox.STATE_INDETERMINATE)",
      "info" : "IfStatement[10644-10942]:IfStatement[10923-11221]"
    }, {
      "left" : "unset(option);",
      "right" : "unset(option);",
      "info" : "ExpressionStatement[10716-10730]:ExpressionStatement[10995-11009]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_OFF)",
      "right" : "if (state == TriStateCheckBox.STATE_OFF)",
      "info" : "IfStatement[10754-10942]:IfStatement[11033-11221]"
    }, {
      "left" : "set(option, \"FALSE\");",
      "right" : "set(option, \"FALSE\");",
      "info" : "ExpressionStatement[10816-10837]:ExpressionStatement[11095-11116]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_ON)",
      "right" : "if (state == TriStateCheckBox.STATE_ON)",
      "info" : "IfStatement[10861-10942]:IfStatement[11140-11221]"
    }, {
      "left" : "set(option, \"TRUE\");",
      "right" : "set(option, \"TRUE\");",
      "info" : "ExpressionStatement[10922-10942]:ExpressionStatement[11201-11221]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[10961-10975]:ExpressionStatement[11240-11254]"
    }, {
      "left" : "return checkBox;",
      "right" : "return checkBox;",
      "info" : "ReturnStatement[11015-11031]:ReturnStatement[11294-11310]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11044-11051]:Modifier[11323-11330]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11052-11059]:PrimitiveType[11331-11338]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[11060-11063]:SimpleName[11339-11342]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11064-11074]:SingleVariableDeclaration[11343-11353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11079-11130]:Block[11358-11409]"
    }, {
      "left" : "return chunkOptions_.containsKey(key);",
      "right" : "return chunkOptions_.containsKey(key);",
      "info" : "ReturnStatement[11087-11125]:ReturnStatement[11366-11404]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11138-11144]:Modifier[11417-11423]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11145-11151]:SimpleType[11424-11430]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[11152-11155]:SimpleName[11431-11434]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11156-11166]:SingleVariableDeclaration[11435-11445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11171-11214]:Block[11450-11493]"
    }, {
      "left" : "return chunkOptions_.get(key);",
      "right" : "return chunkOptions_.get(key);",
      "info" : "ReturnStatement[11179-11209]:ReturnStatement[11458-11488]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11222-11229]:Modifier[11501-11508]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11230-11237]:PrimitiveType[11509-11516]"
    }, {
      "left" : "getBoolean",
      "right" : "getBoolean",
      "info" : "SimpleName[11238-11248]:SimpleName[11517-11527]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11249-11259]:SingleVariableDeclaration[11528-11538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11264-11315]:Block[11543-11594]"
    }, {
      "left" : "return isTrue(chunkOptions_.get(key));",
      "right" : "return isTrue(chunkOptions_.get(key));",
      "info" : "ReturnStatement[11272-11310]:ReturnStatement[11551-11589]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11323-11330]:Modifier[11602-11609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11331-11335]:PrimitiveType[11610-11614]"
    }, {
      "left" : "set",
      "right" : "set",
      "info" : "SimpleName[11336-11339]:SimpleName[11615-11618]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11340-11350]:SingleVariableDeclaration[11619-11629]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[11352-11364]:SingleVariableDeclaration[11631-11643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11369-11413]:Block[11648-11692]"
    }, {
      "left" : "chunkOptions_.put(key,  value);",
      "right" : "chunkOptions_.put(key,  value);",
      "info" : "ExpressionStatement[11377-11408]:ExpressionStatement[11656-11687]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11421-11428]:Modifier[11700-11707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11429-11433]:PrimitiveType[11708-11712]"
    }, {
      "left" : "unset",
      "right" : "unset",
      "info" : "SimpleName[11434-11439]:SimpleName[11713-11718]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11440-11450]:SingleVariableDeclaration[11719-11729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11455-11494]:Block[11734-11773]"
    }, {
      "left" : "chunkOptions_.remove(key);",
      "right" : "chunkOptions_.remove(key);",
      "info" : "ExpressionStatement[11463-11489]:ExpressionStatement[11742-11768]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11502-11509]:Modifier[11781-11788]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11510-11514]:PrimitiveType[11789-11793]"
    }, {
      "left" : "revert",
      "right" : "revert",
      "info" : "SimpleName[11515-11521]:SimpleName[11794-11800]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11522-11532]:SingleVariableDeclaration[11801-11811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11705]:Block[11816-11984]"
    }, {
      "left" : "if (originalChunkOptions_.containsKey(key))",
      "right" : "if (originalChunkOptions_.containsKey(key))",
      "info" : "IfStatement[11545-11700]:IfStatement[11824-11979]"
    }, {
      "left" : "chunkOptions_.put(key, originalChunkOptions_.get(key));",
      "right" : "chunkOptions_.put(key, originalChunkOptions_.get(key));",
      "info" : "ExpressionStatement[11598-11653]:ExpressionStatement[11877-11932]"
    }, {
      "left" : "chunkOptions_.remove(key);",
      "right" : "chunkOptions_.remove(key);",
      "info" : "ExpressionStatement[11674-11700]:ExpressionStatement[11953-11979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11713-11719]:Modifier[11992-11998]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11720-11724]:PrimitiveType[11999-12003]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[11725-11729]:SimpleName[12004-12008]"
    }, {
      "left" : "AceEditorWidget widget",
      "right" : "AceEditorWidget widget",
      "info" : "SingleVariableDeclaration[11730-11752]:SingleVariableDeclaration[12009-12031]"
    }, {
      "left" : "Position position",
      "right" : "Position position",
      "info" : "SingleVariableDeclaration[11754-11771]:SingleVariableDeclaration[12033-12050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11776-12908]:Block[12055-13187]"
    }, {
      "left" : "widget_ = widget;",
      "right" : "widget_ = widget;",
      "info" : "ExpressionStatement[11784-11801]:ExpressionStatement[12063-12080]"
    }, {
      "left" : "position_ = position;",
      "right" : "position_ = position;",
      "info" : "ExpressionStatement[11808-11829]:ExpressionStatement[12087-12108]"
    }, {
      "left" : "chunkOptions_.clear();",
      "right" : "chunkOptions_.clear();",
      "info" : "ExpressionStatement[11836-11858]:ExpressionStatement[12115-12137]"
    }, {
      "left" : "originalChunkOptions_.clear();",
      "right" : "originalChunkOptions_.clear();",
      "info" : "ExpressionStatement[11865-11895]:ExpressionStatement[12144-12174]"
    }, {
      "left" : "originalLine_ = widget_.getEditor().getSession().getLine(position_.getRow());",
      "right" : "originalLine_ = widget_.getEditor().getSession().getLine(position_.getRow());",
      "info" : "ExpressionStatement[11909-11986]:ExpressionStatement[12188-12265]"
    }, {
      "left" : "parseChunkHeader(originalLine_, originalChunkOptions_);",
      "right" : "parseChunkHeader(originalLine_, originalChunkOptions_);",
      "info" : "ExpressionStatement[11993-12048]:ExpressionStatement[12272-12327]"
    }, {
      "left" : "for (Map.Entry<String, String> pair : originalChunkOptions_.entrySet())\n         chunkOptions_.put(pair.getKey(), pair.getValue());",
      "right" : "for (Map.Entry<String, String> pair : originalChunkOptions_.entrySet())\n         chunkOptions_.put(pair.getKey(), pair.getValue());",
      "info" : "EnhancedForStatement[12055-12186]:EnhancedForStatement[12334-12465]"
    }, {
      "left" : "chunkOptions_.put(pair.getKey(), pair.getValue());",
      "right" : "chunkOptions_.put(pair.getKey(), pair.getValue());",
      "info" : "ExpressionStatement[12136-12186]:ExpressionStatement[12415-12465]"
    }, {
      "left" : "boolean hasRelevantFigureSettings =\n            has(\"fig.width\") ||\n            has(\"fig.height\");",
      "right" : "boolean hasRelevantFigureSettings =\n            has(\"fig.width\") ||\n            has(\"fig.height\");",
      "info" : "VariableDeclarationStatement[12200-12298]:VariableDeclarationStatement[12479-12577]"
    }, {
      "left" : "useCustomFigureCheckbox_.setValue(hasRelevantFigureSettings);",
      "right" : "useCustomFigureCheckbox_.setValue(hasRelevantFigureSettings);",
      "info" : "ExpressionStatement[12312-12373]:ExpressionStatement[12591-12652]"
    }, {
      "left" : "figureDimensionsPanel_.setVisible(hasRelevantFigureSettings);",
      "right" : "figureDimensionsPanel_.setVisible(hasRelevantFigureSettings);",
      "info" : "ExpressionStatement[12380-12441]:ExpressionStatement[12659-12720]"
    }, {
      "left" : "if (has(\"fig.width\"))",
      "right" : "if (has(\"fig.width\"))",
      "info" : "IfStatement[12455-12571]:IfStatement[12734-12850]"
    }, {
      "left" : "figWidthBox_.setText(get(\"fig.width\"));",
      "right" : "figWidthBox_.setText(get(\"fig.width\"));",
      "info" : "ExpressionStatement[12486-12525]:ExpressionStatement[12765-12804]"
    }, {
      "left" : "figWidthBox_.setText(\"\");",
      "right" : "figWidthBox_.setText(\"\");",
      "info" : "ExpressionStatement[12546-12571]:ExpressionStatement[12825-12850]"
    }, {
      "left" : "if (has(\"fig.height\"))",
      "right" : "if (has(\"fig.height\"))",
      "info" : "IfStatement[12585-12705]:IfStatement[12864-12984]"
    }, {
      "left" : "figHeightBox_.setText(get(\"fig.height\"));",
      "right" : "figHeightBox_.setText(get(\"fig.height\"));",
      "info" : "ExpressionStatement[12617-12658]:ExpressionStatement[12896-12937]"
    }, {
      "left" : "figHeightBox_.setText(\"\");",
      "right" : "figHeightBox_.setText(\"\");",
      "info" : "ExpressionStatement[12679-12705]:ExpressionStatement[12958-12984]"
    }, {
      "left" : "if (has(\"warning\"))",
      "right" : "if (has(\"warning\"))",
      "info" : "IfStatement[12719-12804]:IfStatement[12998-13083]"
    }, {
      "left" : "showWarningsInOutputCb_.setValue(getBoolean(\"warning\"));",
      "right" : "showWarningsInOutputCb_.setValue(getBoolean(\"warning\"));",
      "info" : "ExpressionStatement[12748-12804]:ExpressionStatement[13027-13083]"
    }, {
      "left" : "if (has(\"message\"))",
      "right" : "if (has(\"message\"))",
      "info" : "IfStatement[12818-12903]:IfStatement[13097-13182]"
    }, {
      "left" : "showMessagesInOutputCb_.setValue(getBoolean(\"message\"));",
      "right" : "showMessagesInOutputCb_.setValue(getBoolean(\"message\"));",
      "info" : "ExpressionStatement[12847-12903]:ExpressionStatement[13126-13182]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12916-12923]:Modifier[13195-13202]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12924-12931]:PrimitiveType[13203-13210]"
    }, {
      "left" : "isTrue",
      "right" : "isTrue",
      "info" : "SimpleName[12932-12938]:SimpleName[13211-13217]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[12939-12952]:SingleVariableDeclaration[13218-13231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12957-13021]:Block[13236-13300]"
    }, {
      "left" : "return string.equals(\"TRUE\") || string.equals(\"T\");",
      "right" : "return string.equals(\"TRUE\") || string.equals(\"T\");",
      "info" : "ReturnStatement[12965-13016]:ReturnStatement[13244-13295]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13029-13036]:Modifier[13308-13315]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13037-13043]:SimpleType[13316-13322]"
    }, {
      "left" : "extractChunkPreamble",
      "right" : "extractChunkPreamble",
      "info" : "SimpleName[13044-13064]:SimpleName[13323-13343]"
    }, {
      "left" : "String extractedChunkHeader",
      "right" : "String extractedChunkHeader",
      "info" : "SingleVariableDeclaration[13065-13092]:SingleVariableDeclaration[13344-13371]"
    }, {
      "left" : "String modeId",
      "right" : "String modeId",
      "info" : "SingleVariableDeclaration[13133-13146]:SingleVariableDeclaration[13412-13425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13151-13659]:Block[13430-13938]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[13159-13212]:IfStatement[13438-13491]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13202-13212]:ReturnStatement[13481-13491]"
    }, {
      "left" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "right" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "info" : "VariableDeclarationStatement[13226-13280]:VariableDeclarationStatement[13505-13559]"
    }, {
      "left" : "if (firstSpaceIdx == -1)",
      "right" : "if (firstSpaceIdx == -1)",
      "info" : "IfStatement[13287-13349]:IfStatement[13566-13628]"
    }, {
      "left" : "return extractedChunkHeader;",
      "right" : "return extractedChunkHeader;",
      "info" : "ReturnStatement[13321-13349]:ReturnStatement[13600-13628]"
    }, {
      "left" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "right" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "info" : "VariableDeclarationStatement[13363-13417]:VariableDeclarationStatement[13642-13696]"
    }, {
      "left" : "if (firstCommaIdx == -1)",
      "right" : "if (firstCommaIdx == -1)",
      "info" : "IfStatement[13424-13504]:IfStatement[13703-13783]"
    }, {
      "left" : "firstCommaIdx = extractedChunkHeader.length();",
      "right" : "firstCommaIdx = extractedChunkHeader.length();",
      "info" : "ExpressionStatement[13458-13504]:ExpressionStatement[13737-13783]"
    }, {
      "left" : "String label = extractedChunkHeader.substring(\n            0, Math.min(firstSpaceIdx, firstCommaIdx)).trim();",
      "right" : "String label = extractedChunkHeader.substring(\n            0, Math.min(firstSpaceIdx, firstCommaIdx)).trim();",
      "info" : "VariableDeclarationStatement[13518-13627]:VariableDeclarationStatement[13797-13906]"
    }, {
      "left" : "return label;",
      "right" : "return label;",
      "info" : "ReturnStatement[13641-13654]:ReturnStatement[13920-13933]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13667-13674]:Modifier[13946-13953]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13675-13681]:SimpleType[13954-13960]"
    }, {
      "left" : "extractChunkLabel",
      "right" : "extractChunkLabel",
      "info" : "SimpleName[13682-13699]:SimpleName[13961-13978]"
    }, {
      "left" : "String extractedChunkHeader",
      "right" : "String extractedChunkHeader",
      "info" : "SingleVariableDeclaration[13700-13727]:SingleVariableDeclaration[13979-14006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-14160]:Block[14011-14439]"
    }, {
      "left" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "right" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "info" : "VariableDeclarationStatement[13740-13794]:VariableDeclarationStatement[14019-14073]"
    }, {
      "left" : "if (firstSpaceIdx == -1)",
      "right" : "if (firstSpaceIdx == -1)",
      "info" : "IfStatement[13801-13845]:IfStatement[14080-14124]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13835-13845]:ReturnStatement[14114-14124]"
    }, {
      "left" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "right" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "info" : "VariableDeclarationStatement[13859-13913]:VariableDeclarationStatement[14138-14192]"
    }, {
      "left" : "if (firstCommaIdx == -1)",
      "right" : "if (firstCommaIdx == -1)",
      "info" : "IfStatement[13920-14000]:IfStatement[14199-14279]"
    }, {
      "left" : "firstCommaIdx = extractedChunkHeader.length();",
      "right" : "firstCommaIdx = extractedChunkHeader.length();",
      "info" : "ExpressionStatement[13954-14000]:ExpressionStatement[14233-14279]"
    }, {
      "left" : "return firstCommaIdx <= firstSpaceIdx ?\n            \"\" :\n            extractedChunkHeader.substring(firstSpaceIdx + 1, firstCommaIdx).trim();",
      "right" : "return firstCommaIdx <= firstSpaceIdx ?\n            \"\" :\n            extractedChunkHeader.substring(firstSpaceIdx + 1, firstCommaIdx).trim();",
      "info" : "ReturnStatement[14014-14155]:ReturnStatement[14293-14434]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14168-14175]:Modifier[14447-14454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14176-14180]:PrimitiveType[14455-14459]"
    }, {
      "left" : "parseChunkHeader",
      "right" : "parseChunkHeader",
      "info" : "SimpleName[14181-14197]:SimpleName[14460-14476]"
    }, {
      "left" : "String line",
      "right" : "String line",
      "info" : "SingleVariableDeclaration[14198-14209]:SingleVariableDeclaration[14477-14488]"
    }, {
      "left" : "HashMap<String, String> chunkOptions",
      "right" : "HashMap<String, String> chunkOptions",
      "info" : "SingleVariableDeclaration[14244-14280]:SingleVariableDeclaration[14523-14559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14285-15968]:Block[14564-16247]"
    }, {
      "left" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "right" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "info" : "VariableDeclarationStatement[14293-14360]:VariableDeclarationStatement[14572-14639]"
    }, {
      "left" : "Pattern pattern = null;",
      "right" : "Pattern pattern = null;",
      "info" : "VariableDeclarationStatement[14374-14397]:VariableDeclarationStatement[14653-14676]"
    }, {
      "left" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "right" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "info" : "IfStatement[14404-14687]:IfStatement[14683-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_RMARKDOWN_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_RMARKDOWN_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14450-14495]:ExpressionStatement[14729-14774]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[14507-14687]:IfStatement[14786-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_SWEAVE_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_SWEAVE_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14550-14592]:ExpressionStatement[14829-14871]"
    }, {
      "left" : "if (modeId.equals(\"mode/rhtml\"))",
      "right" : "if (modeId.equals(\"mode/rhtml\"))",
      "info" : "IfStatement[14604-14687]:IfStatement[14883-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_RHTML_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_RHTML_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14646-14687]:ExpressionStatement[14925-14966]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[14701-14729]:IfStatement[14980-15008]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14722-14729]:ReturnStatement[15001-15008]"
    }, {
      "left" : "Match match = pattern.match(line,  0);",
      "right" : "Match match = pattern.match(line,  0);",
      "info" : "VariableDeclarationStatement[14743-14781]:VariableDeclarationStatement[15022-15060]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[14788-14814]:IfStatement[15067-15093]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14807-14814]:ReturnStatement[15086-15093]"
    }, {
      "left" : "String extracted = match.getGroup(1);",
      "right" : "String extracted = match.getGroup(1);",
      "info" : "VariableDeclarationStatement[14828-14865]:VariableDeclarationStatement[15107-15144]"
    }, {
      "left" : "chunkPreamble_ = extractChunkPreamble(extracted, modeId);",
      "right" : "chunkPreamble_ = extractChunkPreamble(extracted, modeId);",
      "info" : "ExpressionStatement[14872-14929]:ExpressionStatement[15151-15208]"
    }, {
      "left" : "String chunkLabel = extractChunkLabel(extracted);",
      "right" : "String chunkLabel = extractChunkLabel(extracted);",
      "info" : "VariableDeclarationStatement[14943-14992]:VariableDeclarationStatement[15222-15271]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(chunkLabel))",
      "right" : "if (StringUtil.isNullOrEmpty(chunkLabel))",
      "info" : "IfStatement[14999-15228]:IfStatement[15278-15507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15047-15097]:Block[15326-15376]"
    }, {
      "left" : "tbChunkLabel_.setCueMode(true);",
      "right" : "tbChunkLabel_.setCueMode(true);",
      "info" : "ExpressionStatement[15058-15089]:ExpressionStatement[15337-15368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15115-15228]:Block[15394-15507]"
    }, {
      "left" : "tbChunkLabel_.setCueMode(false);",
      "right" : "tbChunkLabel_.setCueMode(false);",
      "info" : "ExpressionStatement[15126-15158]:ExpressionStatement[15405-15437]"
    }, {
      "left" : "tbChunkLabel_.setText(extractChunkLabel(extracted));",
      "right" : "tbChunkLabel_.setText(extractChunkLabel(extracted));",
      "info" : "ExpressionStatement[15168-15220]:ExpressionStatement[15447-15499]"
    }, {
      "left" : "int firstCommaIndex = extracted.indexOf(',');",
      "right" : "int firstCommaIndex = extracted.indexOf(',');",
      "info" : "VariableDeclarationStatement[15242-15287]:VariableDeclarationStatement[15521-15566]"
    }, {
      "left" : "String arguments = extracted.substring(firstCommaIndex + 1);",
      "right" : "String arguments = extracted.substring(firstCommaIndex + 1);",
      "info" : "VariableDeclarationStatement[15294-15354]:VariableDeclarationStatement[15573-15633]"
    }, {
      "left" : "TextCursor cursor = new TextCursor(arguments);",
      "right" : "TextCursor cursor = new TextCursor(arguments);",
      "info" : "VariableDeclarationStatement[15361-15407]:VariableDeclarationStatement[15640-15686]"
    }, {
      "left" : "int startIndex = 0;",
      "right" : "int startIndex = 0;",
      "info" : "VariableDeclarationStatement[15421-15440]:VariableDeclarationStatement[15700-15719]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15447-15963]:WhileStatement[15726-16242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15466-15963]:Block[15745-16242]"
    }, {
      "left" : "if (!cursor.fwdToCharacter('=', false))",
      "right" : "if (!cursor.fwdToCharacter('=', false))",
      "info" : "IfStatement[15477-15535]:IfStatement[15756-15814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15529-15535]:BreakStatement[15808-15814]"
    }, {
      "left" : "int equalsIndex = cursor.getIndex();",
      "right" : "int equalsIndex = cursor.getIndex();",
      "info" : "VariableDeclarationStatement[15555-15591]:VariableDeclarationStatement[15834-15870]"
    }, {
      "left" : "int endIndex = arguments.length();",
      "right" : "int endIndex = arguments.length();",
      "info" : "VariableDeclarationStatement[15601-15635]:VariableDeclarationStatement[15880-15914]"
    }, {
      "left" : "if (cursor.fwdToCharacter(',', true))",
      "right" : "if (cursor.fwdToCharacter(',', true))",
      "info" : "IfStatement[15645-15724]:IfStatement[15924-16003]"
    }, {
      "left" : "endIndex = cursor.getIndex();",
      "right" : "endIndex = cursor.getIndex();",
      "info" : "ExpressionStatement[15695-15724]:ExpressionStatement[15974-16003]"
    }, {
      "left" : "chunkOptions.put(\n               arguments.substring(startIndex, equalsIndex).trim(),\n               arguments.substring(equalsIndex + 1, endIndex).trim());",
      "right" : "chunkOptions.put(\n               arguments.substring(startIndex, equalsIndex).trim(),\n               arguments.substring(equalsIndex + 1, endIndex).trim());",
      "info" : "ExpressionStatement[15744-15900]:ExpressionStatement[16023-16179]"
    }, {
      "left" : "startIndex = cursor.getIndex() + 1;",
      "right" : "startIndex = cursor.getIndex() + 1;",
      "info" : "ExpressionStatement[15920-15955]:ExpressionStatement[16199-16234]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15976-15985]:MarkerAnnotation[16255-16264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15989-15995]:Modifier[16268-16274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15996-16000]:PrimitiveType[16275-16279]"
    }, {
      "left" : "hide",
      "right" : "hide",
      "info" : "SimpleName[16001-16005]:SimpleName[16280-16284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16011-16090]:Block[16290-16369]"
    }, {
      "left" : "position_ = null;",
      "right" : "position_ = null;",
      "info" : "ExpressionStatement[16019-16036]:ExpressionStatement[16298-16315]"
    }, {
      "left" : "chunkOptions_.clear();",
      "right" : "chunkOptions_.clear();",
      "info" : "ExpressionStatement[16043-16065]:ExpressionStatement[16322-16344]"
    }, {
      "left" : "super.hide();",
      "right" : "super.hide();",
      "info" : "ExpressionStatement[16072-16085]:ExpressionStatement[16351-16364]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16098-16105]:Modifier[16377-16384]"
    }, {
      "left" : "Pair<String, String>",
      "right" : "Pair<String, String>",
      "info" : "ParameterizedType[16106-16126]:ParameterizedType[16385-16405]"
    }, {
      "left" : "getChunkHeaderBounds",
      "right" : "getChunkHeaderBounds",
      "info" : "SimpleName[16127-16147]:SimpleName[16406-16426]"
    }, {
      "left" : "String modeId",
      "right" : "String modeId",
      "info" : "SingleVariableDeclaration[16148-16161]:SingleVariableDeclaration[16427-16440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16166-16592]:Block[16445-16871]"
    }, {
      "left" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "right" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "info" : "IfStatement[16174-16561]:IfStatement[16453-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"```{\", \"}\");",
      "right" : "return new Pair<String, String>(\"```{\", \"}\");",
      "info" : "ReturnStatement[16220-16265]:ReturnStatement[16499-16544]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[16277-16561]:IfStatement[16556-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"<<\", \">>=\");",
      "right" : "return new Pair<String, String>(\"<<\", \">>=\");",
      "info" : "ReturnStatement[16320-16365]:ReturnStatement[16599-16644]"
    }, {
      "left" : "if (modeId.equals(\"mode/rhtml\"))",
      "right" : "if (modeId.equals(\"mode/rhtml\"))",
      "info" : "IfStatement[16377-16561]:IfStatement[16656-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"<!--\", \"\");",
      "right" : "return new Pair<String, String>(\"<!--\", \"\");",
      "info" : "ReturnStatement[16419-16463]:ReturnStatement[16698-16742]"
    }, {
      "left" : "if (modeId.equals(\"mode/c_cpp\"))",
      "right" : "if (modeId.equals(\"mode/c_cpp\"))",
      "info" : "IfStatement[16475-16561]:IfStatement[16754-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"/***\", \"\");",
      "right" : "return new Pair<String, String>(\"/***\", \"\");",
      "info" : "ReturnStatement[16517-16561]:ReturnStatement[16796-16840]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16575-16587]:ReturnStatement[16854-16866]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16600-16607]:Modifier[16879-16886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16608-16612]:PrimitiveType[16887-16891]"
    }, {
      "left" : "synchronize",
      "right" : "synchronize",
      "info" : "SimpleName[16613-16624]:SimpleName[16892-16903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16630-17755]:Block[16909-18034]"
    }, {
      "left" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "right" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "info" : "VariableDeclarationStatement[16638-16705]:VariableDeclarationStatement[16917-16984]"
    }, {
      "left" : "Pair<String, String> chunkHeaderBounds =\n            getChunkHeaderBounds(modeId);",
      "right" : "Pair<String, String> chunkHeaderBounds =\n            getChunkHeaderBounds(modeId);",
      "info" : "VariableDeclarationStatement[16712-16794]:VariableDeclarationStatement[16991-17073]"
    }, {
      "left" : "if (chunkHeaderBounds == null)",
      "right" : "if (chunkHeaderBounds == null)",
      "info" : "IfStatement[16801-16848]:IfStatement[17080-17127]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16841-16848]:ReturnStatement[17120-17127]"
    }, {
      "left" : "String label = tbChunkLabel_.getText();",
      "right" : "String label = tbChunkLabel_.getText();",
      "info" : "VariableDeclarationStatement[16862-16901]:VariableDeclarationStatement[17141-17180]"
    }, {
      "left" : "String newLine =\n            chunkHeaderBounds.first +\n            chunkPreamble_;",
      "right" : "String newLine =\n            chunkHeaderBounds.first +\n            chunkPreamble_;",
      "info" : "VariableDeclarationStatement[16908-16990]:VariableDeclarationStatement[17187-17269]"
    }, {
      "left" : "if (!label.isEmpty())",
      "right" : "if (!label.isEmpty())",
      "info" : "IfStatement[17004-17176]:IfStatement[17283-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17032-17176]:Block[17311-17455]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(chunkPreamble_))",
      "right" : "if (StringUtil.isNullOrEmpty(chunkPreamble_))",
      "info" : "IfStatement[17043-17168]:IfStatement[17322-17447]"
    }, {
      "left" : "newLine += label;",
      "right" : "newLine += label;",
      "info" : "ExpressionStatement[17101-17118]:ExpressionStatement[17380-17397]"
    }, {
      "left" : "newLine += \" \" + label;",
      "right" : "newLine += \" \" + label;",
      "info" : "ExpressionStatement[17145-17168]:ExpressionStatement[17424-17447]"
    }, {
      "left" : "if (!chunkOptions_.isEmpty())",
      "right" : "if (!chunkOptions_.isEmpty())",
      "info" : "IfStatement[17190-17453]:IfStatement[17469-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17226-17453]:Block[17505-17732]"
    }, {
      "left" : "if (!(StringUtil.isNullOrEmpty(chunkPreamble_) &&\n             label.isEmpty()))",
      "right" : "if (!(StringUtil.isNullOrEmpty(chunkPreamble_) &&\n             label.isEmpty()))",
      "info" : "IfStatement[17237-17368]:IfStatement[17516-17647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17327-17368]:Block[17606-17647]"
    }, {
      "left" : "newLine += \", \";",
      "right" : "newLine += \", \";",
      "info" : "ExpressionStatement[17341-17357]:ExpressionStatement[17620-17636]"
    }, {
      "left" : "newLine += StringUtil.collapse(chunkOptions_, \"=\", \", \");",
      "right" : "newLine += StringUtil.collapse(chunkOptions_, \"=\", \", \");",
      "info" : "ExpressionStatement[17388-17445]:ExpressionStatement[17667-17724]"
    }, {
      "left" : "newLine +=\n            chunkHeaderBounds.second +\n            \"\\n\";",
      "right" : "newLine +=\n            chunkHeaderBounds.second +\n            \"\\n\";",
      "info" : "ExpressionStatement[17467-17534]:ExpressionStatement[17746-17813]"
    }, {
      "left" : "widget_.getEditor().getSession().replace(\n            Range.fromPoints(\n                  Position.create(position_.getRow(), 0),\n                  Position.create(position_.getRow() + 1, 0)), newLine);",
      "right" : "widget_.getEditor().getSession().replace(\n            Range.fromPoints(\n                  Position.create(position_.getRow(), 0),\n                  Position.create(position_.getRow() + 1, 0)), newLine);",
      "info" : "ExpressionStatement[17548-17750]:ExpressionStatement[17827-18029]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17763-17770]:Modifier[18042-18049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17771-17775]:PrimitiveType[18050-18054]"
    }, {
      "left" : "revert",
      "right" : "revert",
      "info" : "SimpleName[17776-17782]:SimpleName[18055-18061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17788-18117]:Block[18067-18396]"
    }, {
      "left" : "if (position_ == null)",
      "right" : "if (position_ == null)",
      "info" : "IfStatement[17796-17835]:IfStatement[18075-18114]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17828-17835]:ReturnStatement[18107-18114]"
    }, {
      "left" : "Range replaceRange = Range.fromPoints(\n            Position.create(position_.getRow(), 0),\n            Position.create(position_.getRow() + 1, 0));",
      "right" : "Range replaceRange = Range.fromPoints(\n            Position.create(position_.getRow(), 0),\n            Position.create(position_.getRow() + 1, 0));",
      "info" : "VariableDeclarationStatement[17849-17996]:VariableDeclarationStatement[18128-18275]"
    }, {
      "left" : "widget_.getEditor().getSession().replace(\n            replaceRange,\n            originalLine_ + \"\\n\");",
      "right" : "widget_.getEditor().getSession().replace(\n            replaceRange,\n            originalLine_ + \"\\n\");",
      "info" : "ExpressionStatement[18010-18112]:ExpressionStatement[18289-18391]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18125-18132]:Modifier[18404-18411]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18133-18137]:PrimitiveType[18412-18416]"
    }, {
      "left" : "hideAndFocusEditor",
      "right" : "hideAndFocusEditor",
      "info" : "SimpleName[18138-18156]:SimpleName[18417-18435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18162-18217]:Block[18441-18496]"
    }, {
      "left" : "hide();",
      "right" : "hide();",
      "info" : "ExpressionStatement[18170-18177]:ExpressionStatement[18449-18456]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[18184-18212]:ExpressionStatement[18463-18491]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18311-18318]:Modifier[18504-18511]"
    }, {
      "left" : "SelectWidget",
      "right" : "ListBox",
      "info" : "SimpleName[18325-18337]:SimpleName[18812-18819]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19293-19299]:Modifier[19775-19781]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[19300-19309]:TYPE_DECLARATION_KIND[19782-19791]"
    }, {
      "left" : "Styles",
      "right" : "Styles",
      "info" : "SimpleName[19310-19316]:SimpleName[19792-19798]"
    }, {
      "left" : "CssResource",
      "right" : "CssResource",
      "info" : "SimpleType[19325-19336]:SimpleType[19807-19818]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19348-19354]:SimpleType[19830-19836]"
    }, {
      "left" : "textBox",
      "right" : "textBox",
      "info" : "SimpleName[19355-19362]:SimpleName[19837-19844]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19379-19385]:SimpleType[19861-19867]"
    }, {
      "left" : "chunkLabel",
      "right" : "chunkLabel",
      "info" : "SimpleName[19386-19396]:SimpleName[19868-19878]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19406-19412]:SimpleType[19888-19894]"
    }, {
      "left" : "chunkName",
      "right" : "chunkName",
      "info" : "SimpleName[19413-19422]:SimpleName[19895-19904]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19432-19438]:SimpleType[19914-19920]"
    }, {
      "left" : "labelPanel",
      "right" : "labelPanel",
      "info" : "SimpleName[19439-19449]:SimpleName[19921-19931]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19466-19472]:SimpleType[19948-19954]"
    }, {
      "left" : "buttonPanel",
      "right" : "buttonPanel",
      "info" : "SimpleName[19473-19484]:SimpleName[19955-19966]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19501-19507]:SimpleType[19983-19989]"
    }, {
      "left" : "checkBox",
      "right" : "checkBox",
      "info" : "SimpleName[19508-19516]:SimpleName[19990-19998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19532-19538]:Modifier[20014-20020]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[19539-19548]:TYPE_DECLARATION_KIND[20021-20030]"
    }, {
      "left" : "Resources",
      "right" : "Resources",
      "info" : "SimpleName[19549-19558]:SimpleName[20031-20040]"
    }, {
      "left" : "ClientBundle",
      "right" : "ClientBundle",
      "info" : "SimpleType[19567-19579]:SimpleType[20049-20061]"
    }, {
      "left" : "@Source(\"ChunkOptionsPopupPanel.css\")",
      "right" : "@Source(\"ChunkOptionsPopupPanel.css\")",
      "info" : "SingleMemberAnnotation[19591-19628]:SingleMemberAnnotation[20073-20110]"
    }, {
      "left" : "Styles",
      "right" : "Styles",
      "info" : "SimpleType[19635-19641]:SimpleType[20117-20123]"
    }, {
      "left" : "styles",
      "right" : "styles",
      "info" : "SimpleName[19642-19648]:SimpleName[20124-20130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19734-19777]:Block[20216-20259]"
    }, {
      "left" : "RES.styles().ensureInjected();",
      "right" : "RES.styles().ensureInjected();",
      "info" : "ExpressionStatement[19742-19772]:ExpressionStatement[20224-20254]"
    } ]
  },
  "interFileMappings" : { }
}