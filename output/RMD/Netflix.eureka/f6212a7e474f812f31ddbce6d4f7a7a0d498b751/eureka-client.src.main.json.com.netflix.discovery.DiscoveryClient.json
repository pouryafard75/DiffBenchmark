{
  "matchedElements" : [ {
    "left" : "class : DiscoveryClient",
    "right" : "class : DiscoveryClient",
    "info" : "TypeDeclaration[3165-84464]:TypeDeclaration[3165-85379]"
  }, {
    "left" : "logger",
    "right" : "logger",
    "info" : "FieldDeclaration[4108-4192]:FieldDeclaration[4108-4192]"
  }, {
    "left" : "configInstance",
    "right" : "configInstance",
    "info" : "FieldDeclaration[4197-4295]:FieldDeclaration[4197-4295]"
  }, {
    "left" : "MAX_FOLLOWED_REDIRECTS",
    "right" : "MAX_FOLLOWED_REDIRECTS",
    "info" : "FieldDeclaration[4318-4370]:FieldDeclaration[4318-4370]"
  }, {
    "left" : "HTTP_X_DISCOVERY_ALLOW_REDIRECT",
    "right" : "HTTP_X_DISCOVERY_ALLOW_REDIRECT",
    "info" : "FieldDeclaration[4375-4464]:FieldDeclaration[4375-4464]"
  }, {
    "left" : "VALUE_DELIMITER",
    "right" : "VALUE_DELIMITER",
    "info" : "FieldDeclaration[4470-4520]:FieldDeclaration[4470-4520]"
  }, {
    "left" : "COMMA_STRING",
    "right" : "COMMA_STRING",
    "info" : "FieldDeclaration[4525-4584]:FieldDeclaration[4525-4584]"
  }, {
    "left" : "DISCOVERY_APPID",
    "right" : "DISCOVERY_APPID",
    "info" : "FieldDeclaration[4589-4647]:FieldDeclaration[4589-4647]"
  }, {
    "left" : "UNKNOWN",
    "right" : "UNKNOWN",
    "info" : "FieldDeclaration[4652-4700]:FieldDeclaration[4652-4700]"
  }, {
    "left" : "REDIRECT_PATH_REGEX",
    "right" : "REDIRECT_PATH_REGEX",
    "info" : "FieldDeclaration[4706-4796]:FieldDeclaration[4706-4796]"
  }, {
    "left" : "PREFIX",
    "right" : "PREFIX",
    "info" : "FieldDeclaration[4816-4872]:FieldDeclaration[4816-4872]"
  }, {
    "left" : "GET_SERVICE_URLS_DNS_TIMER",
    "right" : "GET_SERVICE_URLS_DNS_TIMER",
    "info" : "FieldDeclaration[4877-5017]:FieldDeclaration[4877-5017]"
  }, {
    "left" : "REGISTER_TIMER",
    "right" : "REGISTER_TIMER",
    "info" : "FieldDeclaration[5022-5137]:FieldDeclaration[5022-5137]"
  }, {
    "left" : "REFRESH_TIMER",
    "right" : "REFRESH_TIMER",
    "info" : "FieldDeclaration[5142-5255]:FieldDeclaration[5142-5255]"
  }, {
    "left" : "REFRESH_DELTA_TIMER",
    "right" : "REFRESH_DELTA_TIMER",
    "info" : "FieldDeclaration[5260-5384]:FieldDeclaration[5260-5384]"
  }, {
    "left" : "RENEW_TIMER",
    "right" : "RENEW_TIMER",
    "info" : "FieldDeclaration[5389-5498]:FieldDeclaration[5389-5498]"
  }, {
    "left" : "CANCEL_TIMER",
    "right" : "CANCEL_TIMER",
    "info" : "FieldDeclaration[5503-5614]:FieldDeclaration[5503-5614]"
  }, {
    "left" : "FETCH_REGISTRY_TIMER",
    "right" : "FETCH_REGISTRY_TIMER",
    "info" : "FieldDeclaration[5619-5745]:FieldDeclaration[5619-5745]"
  }, {
    "left" : "SERVER_RETRY_COUNTER",
    "right" : "SERVER_RETRY_COUNTER",
    "info" : "FieldDeclaration[5750-5845]:FieldDeclaration[5750-5845]"
  }, {
    "left" : "ALL_SERVER_FAILURE_COUNT",
    "right" : "ALL_SERVER_FAILURE_COUNT",
    "info" : "FieldDeclaration[5850-5950]:FieldDeclaration[5850-5950]"
  }, {
    "left" : "REREGISTER_COUNTER",
    "right" : "REREGISTER_COUNTER",
    "info" : "FieldDeclaration[5955-6053]:FieldDeclaration[5955-6053]"
  }, {
    "left" : "backupRegistryProvider",
    "right" : "backupRegistryProvider",
    "info" : "FieldDeclaration[6059-6121]:FieldDeclaration[6059-6121]"
  }, {
    "left" : "healthCheckHandler",
    "right" : "healthCheckHandler",
    "info" : "FieldDeclaration[6153-6208]:FieldDeclaration[6153-6208]"
  }, {
    "left" : "healthCheckHandlerProvider",
    "right" : "healthCheckHandlerProvider",
    "info" : "FieldDeclaration[6213-6283]:FieldDeclaration[6213-6283]"
  }, {
    "left" : "healthCheckCallbackProvider",
    "right" : "healthCheckCallbackProvider",
    "info" : "FieldDeclaration[6288-6360]:FieldDeclaration[6288-6360]"
  }, {
    "left" : "eurekaServiceUrls",
    "right" : "eurekaServiceUrls",
    "info" : "FieldDeclaration[6365-6465]:FieldDeclaration[6365-6465]"
  }, {
    "left" : "localRegionApps",
    "right" : "localRegionApps",
    "info" : "FieldDeclaration[6470-6568]:FieldDeclaration[6470-6568]"
  }, {
    "left" : "remoteRegionVsApps",
    "right" : "remoteRegionVsApps",
    "info" : "FieldDeclaration[6573-6683]:FieldDeclaration[6573-6683]"
  }, {
    "left" : "fetchRegistryUpdateLock",
    "right" : "fetchRegistryUpdateLock",
    "info" : "FieldDeclaration[6688-6753]:FieldDeclaration[6688-6753]"
  }, {
    "left" : "fetchRegistryGeneration",
    "right" : "fetchRegistryGeneration",
    "info" : "FieldDeclaration[6875-6924]:FieldDeclaration[6875-6924]"
  }, {
    "left" : "instanceInfo",
    "right" : "instanceInfo",
    "info" : "FieldDeclaration[6930-6970]:FieldDeclaration[6930-6970]"
  }, {
    "left" : "appPathIdentifier",
    "right" : "appPathIdentifier",
    "info" : "FieldDeclaration[6975-7008]:FieldDeclaration[6975-7008]"
  }, {
    "left" : "isRegisteredWithDiscovery",
    "right" : "isRegisteredWithDiscovery",
    "info" : "FieldDeclaration[7013-7063]:FieldDeclaration[7013-7063]"
  }, {
    "left" : "discoveryJerseyClient",
    "right" : "discoveryJerseyClient",
    "info" : "FieldDeclaration[7068-7111]:FieldDeclaration[7068-7111]"
  }, {
    "left" : "lastQueryRedirect",
    "right" : "lastQueryRedirect",
    "info" : "FieldDeclaration[7116-7198]:FieldDeclaration[7116-7198]"
  }, {
    "left" : "lastRegisterRedirect",
    "right" : "lastRegisterRedirect",
    "info" : "FieldDeclaration[7203-7288]:FieldDeclaration[7203-7288]"
  }, {
    "left" : "discoveryApacheClient",
    "right" : "discoveryApacheClient",
    "info" : "FieldDeclaration[7293-7341]:FieldDeclaration[7293-7341]"
  }, {
    "left" : "clientConfig",
    "right" : "clientConfig",
    "info" : "FieldDeclaration[7346-7395]:FieldDeclaration[7346-7395]"
  }, {
    "left" : "remoteRegionsToFetch",
    "right" : "remoteRegionsToFetch",
    "info" : "FieldDeclaration[7400-7459]:FieldDeclaration[7400-7459]"
  }, {
    "left" : "instanceRegionChecker",
    "right" : "instanceRegionChecker",
    "info" : "FieldDeclaration[7464-7522]:FieldDeclaration[7464-7522]"
  }, {
    "left" : "lastRemoteInstanceStatus",
    "right" : "lastRemoteInstanceStatus",
    "info" : "FieldDeclaration[7527-7635]:FieldDeclaration[7527-7635]"
  }, {
    "left" : "statusChangeListener",
    "right" : "statusChangeListener",
    "info" : "FieldDeclaration[7641-7714]:FieldDeclaration[7641-7714]"
  }, {
    "left" : "scheduler",
    "right" : "scheduler",
    "info" : "FieldDeclaration[7809-8004]:FieldDeclaration[7809-8004]"
  }, {
    "left" : "instanceInfoReplicator",
    "right" : "instanceInfoReplicator",
    "info" : "FieldDeclaration[8010-8064]:FieldDeclaration[8010-8064]"
  }, {
    "left" : "heartbeatExecutor",
    "right" : "heartbeatExecutor",
    "info" : "FieldDeclaration[8144-8195]:FieldDeclaration[8144-8195]"
  }, {
    "left" : "cacheRefreshExecutor",
    "right" : "cacheRefreshExecutor",
    "info" : "FieldDeclaration[8200-8254]:FieldDeclaration[8200-8254]"
  }, {
    "left" : "eventBus",
    "right" : "eventBus",
    "info" : "FieldDeclaration[8260-8292]:FieldDeclaration[8260-8292]"
  }, {
    "left" : "class : DiscoveryClientOptionalArgs",
    "right" : "class : DiscoveryClientOptionalArgs",
    "info" : "TypeDeclaration[8298-8637]:TypeDeclaration[8298-8637]"
  }, {
    "left" : "eventBus",
    "right" : "eventBus",
    "info" : "FieldDeclaration[8356-8415]:FieldDeclaration[8356-8415]"
  }, {
    "left" : "healthCheckCallbackProvider",
    "right" : "healthCheckCallbackProvider",
    "info" : "FieldDeclaration[8425-8524]:FieldDeclaration[8425-8524]"
  }, {
    "left" : "healthCheckHandlerProvider",
    "right" : "healthCheckHandlerProvider",
    "info" : "FieldDeclaration[8534-8631]:FieldDeclaration[8534-8631]"
  }, {
    "left" : "public DiscoveryClient(myInfo , config )",
    "right" : "public DiscoveryClient(myInfo , config )",
    "info" : "MethodDeclaration[8643-8757]:MethodDeclaration[8643-8757]"
  }, {
    "left" : "public DiscoveryClient(myInfo , config , args ...)",
    "right" : "public DiscoveryClient(myInfo , config , args ...)",
    "info" : "MethodDeclaration[8763-9917]:MethodDeclaration[8763-9917]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[8950-9899]:MethodDeclaration[8950-9899]"
  }, {
    "left" : "package DiscoveryClient(myInfo , config , args , backupRegistryProvider )",
    "right" : "package DiscoveryClient(myInfo , config , args , backupRegistryProvider )",
    "info" : "MethodDeclaration[9923-16359]:MethodDeclaration[9923-16359]"
  }, {
    "left" : "public getApplication(appName ) : ",
    "right" : "public getApplication(appName ) : ",
    "info" : "MethodDeclaration[16489-16629]:MethodDeclaration[16489-16629]"
  }, {
    "left" : "public getApplications() : ",
    "right" : "public getApplications() : ",
    "info" : "MethodDeclaration[16751-16848]:MethodDeclaration[16751-16848]"
  }, {
    "left" : "public getApplicationsForARegion(region ) : ",
    "right" : "public getApplicationsForARegion(region ) : ",
    "info" : "MethodDeclaration[16854-17125]:MethodDeclaration[16854-17125]"
  }, {
    "left" : "public getAllKnownRegions() : ",
    "right" : "public getAllKnownRegions() : ",
    "info" : "MethodDeclaration[17131-17570]:MethodDeclaration[17131-17570]"
  }, {
    "left" : "public getInstancesById(id ) : ",
    "right" : "public getInstancesById(id ) : ",
    "info" : "MethodDeclaration[17702-18161]:MethodDeclaration[17702-18161]"
  }, {
    "left" : "public registerHealthCheckCallback(callback ) : void",
    "right" : "public registerHealthCheckCallback(callback ) : void",
    "info" : "MethodDeclaration[18167-18912]:MethodDeclaration[18167-18912]"
  }, {
    "left" : "public registerHealthCheck(healthCheckHandler ) : void",
    "right" : "public registerHealthCheck(healthCheckHandler ) : void",
    "info" : "MethodDeclaration[18918-19261]:MethodDeclaration[18918-19261]"
  }, {
    "left" : "public getInstancesByVipAddress(vipAddress , secure boolean) : ",
    "right" : "public getInstancesByVipAddress(vipAddress , secure boolean) : ",
    "info" : "MethodDeclaration[19267-19826]:MethodDeclaration[19267-19826]"
  }, {
    "left" : "public getInstancesByVipAddress(vipAddress , secure boolean, region ) : ",
    "right" : "public getInstancesByVipAddress(vipAddress , secure boolean, region ) : ",
    "info" : "MethodDeclaration[19832-21423]:MethodDeclaration[19832-21423]"
  }, {
    "left" : "public getInstancesByVipAddressAndAppName(vipAddress , appName , secure boolean) : ",
    "right" : "public getInstancesByVipAddressAndAppName(vipAddress , appName , secure boolean) : ",
    "info" : "MethodDeclaration[21429-24091]:MethodDeclaration[21429-24091]"
  }, {
    "left" : "public getNextServerFromEureka(virtualHostname , secure boolean) : ",
    "right" : "public getNextServerFromEureka(virtualHostname , secure boolean) : ",
    "info" : "MethodDeclaration[24261-24942]:MethodDeclaration[24261-24942]"
  }, {
    "left" : "public getApplications(serviceUrl ) : ",
    "right" : "public getApplications(serviceUrl ) : ",
    "info" : "MethodDeclaration[24948-26001]:MethodDeclaration[24948-26001]"
  }, {
    "left" : "private shouldRegister(myInfo ) : boolean",
    "right" : "private shouldRegister(myInfo ) : boolean",
    "info" : "MethodDeclaration[26007-26440]:MethodDeclaration[26007-26440]"
  }, {
    "left" : "package register() : void",
    "right" : "package register() : void",
    "info" : "MethodDeclaration[26446-27244]:MethodDeclaration[26446-27244]"
  }, {
    "left" : "package renew() : void",
    "right" : "package renew() : void",
    "info" : "MethodDeclaration[27250-28193]:MethodDeclaration[27250-28193]"
  }, {
    "left" : "public getServiceUrlsFromConfig(instanceZone , preferSameZone boolean) : ",
    "right" : "public getServiceUrlsFromConfig(instanceZone , preferSameZone boolean) : ",
    "info" : "MethodDeclaration[28199-30205]:MethodDeclaration[28199-30205]"
  }, {
    "left" : "public getEurekaServiceUrlsFromConfig(instanceZone , preferSameZone boolean) : ",
    "right" : "public getEurekaServiceUrlsFromConfig(instanceZone , preferSameZone boolean) : ",
    "info" : "MethodDeclaration[30211-31958]:MethodDeclaration[30211-31958]"
  }, {
    "left" : "public shutdown() : void",
    "right" : "public shutdown() : void",
    "info" : "MethodDeclaration[31964-32645]:MethodDeclaration[31964-32645]"
  }, {
    "left" : "package unregister() : void",
    "right" : "package unregister() : void",
    "info" : "MethodDeclaration[32651-33336]:MethodDeclaration[32651-33336]"
  }, {
    "left" : "private fetchRegistry(forceFullRegistryFetch boolean) : boolean",
    "right" : "private fetchRegistry(forceFullRegistryFetch boolean) : boolean",
    "info" : "MethodDeclaration[33342-36014]:MethodDeclaration[33342-36224]"
  }, {
    "left" : "private updateInstanceRemoteStatus() : void",
    "right" : "private updateInstanceRemoteStatus() : void",
    "info" : "MethodDeclaration[36020-37304]:MethodDeclaration[36230-37283]"
  }, {
    "left" : "public getInstanceRemoteStatus() : ",
    "right" : "public getInstanceRemoteStatus() : ",
    "info" : "MethodDeclaration[37310-37528]:MethodDeclaration[37289-37507]"
  }, {
    "left" : "private getReconcileHashCode(applications ...) : ",
    "right" : "private getReconcileHashCode(applications ...) : ",
    "info" : "MethodDeclaration[37534-38050]:MethodDeclaration[37513-38029]"
  }, {
    "left" : "private getAndStoreFullRegistry() : ",
    "right" : "private getAndStoreFullRegistry() : ",
    "info" : "MethodDeclaration[38056-39468]:MethodDeclaration[38035-39447]"
  }, {
    "left" : "private getAndUpdateDelta(applications ) : ",
    "right" : "private getAndUpdateDelta(applications ) : ",
    "info" : "MethodDeclaration[39474-41770]:MethodDeclaration[39453-41749]"
  }, {
    "left" : "private logTotalInstances() : void",
    "right" : "private logTotalInstances() : void",
    "info" : "MethodDeclaration[41776-42205]:MethodDeclaration[41755-42184]"
  }, {
    "left" : "private reconcileAndLogDifference(response , delta , reconcileHashCode ) : ",
    "right" : "private reconcileAndLogDifference(response , delta , reconcileHashCode ) : ",
    "info" : "MethodDeclaration[42211-45077]:MethodDeclaration[42190-45056]"
  }, {
    "left" : "private updateDelta(delta ) : void",
    "right" : "private updateDelta(delta ) : void",
    "info" : "MethodDeclaration[45083-48551]:MethodDeclaration[45062-48530]"
  }, {
    "left" : "private makeRemoteCall(action ) : ",
    "right" : "private makeRemoteCall(action ) : ",
    "info" : "MethodDeclaration[48557-49317]:MethodDeclaration[48536-49296]"
  }, {
    "left" : "private makeRemoteCallToRedirectedServer(lastRedirect , action ) : ",
    "right" : "private makeRemoteCallToRedirectedServer(lastRedirect , action ) : ",
    "info" : "MethodDeclaration[49323-50249]:MethodDeclaration[49302-50228]"
  }, {
    "left" : "private isQueryAction(action ) : boolean",
    "right" : "private isQueryAction(action ) : boolean",
    "info" : "MethodDeclaration[50255-50389]:MethodDeclaration[50234-50368]"
  }, {
    "left" : "private makeRemoteCall(action , serviceUrlIndex int) : ",
    "right" : "private makeRemoteCall(action , serviceUrlIndex int) : ",
    "info" : "MethodDeclaration[50395-51642]:MethodDeclaration[50374-51621]"
  }, {
    "left" : "private makeRemoteCallWithFollowRedirect(action , serviceUrl ) : ",
    "right" : "private makeRemoteCallWithFollowRedirect(action , serviceUrl ) : ",
    "info" : "MethodDeclaration[51648-52802]:MethodDeclaration[51627-52781]"
  }, {
    "left" : "private getRedirectBaseUri(targetUrl ) : ",
    "right" : "private getRedirectBaseUri(targetUrl ) : ",
    "info" : "MethodDeclaration[52808-53317]:MethodDeclaration[52787-53296]"
  }, {
    "left" : "private makeRemoteCall(action , serviceUrl ) : ",
    "right" : "private makeRemoteCall(action , serviceUrl ) : ",
    "info" : "MethodDeclaration[53323-58101]:MethodDeclaration[53302-58080]"
  }, {
    "left" : "private closeResponse(response ) : void",
    "right" : "private closeResponse(response ) : void",
    "info" : "MethodDeclaration[58107-58536]:MethodDeclaration[58086-58515]"
  }, {
    "left" : "private initScheduledTasks() : void",
    "right" : "private initScheduledTasks() : void",
    "info" : "MethodDeclaration[58542-61482]:MethodDeclaration[58521-61461]"
  }, {
    "left" : "public getId() : ",
    "right" : "public getId() : ",
    "info" : "MethodDeclaration[60672-60790]:MethodDeclaration[60651-60769]"
  }, {
    "left" : "public notify(statusChangeEvent ) : void",
    "right" : "public notify(statusChangeEvent ) : void",
    "info" : "MethodDeclaration[60808-61058]:MethodDeclaration[60787-61037]"
  }, {
    "left" : "private cancelScheduledTasks() : void",
    "right" : "private cancelScheduledTasks() : void",
    "info" : "MethodDeclaration[61488-61748]:MethodDeclaration[61467-61727]"
  }, {
    "left" : "public getServiceUrlsFromDNS(instanceZone , preferSameZone boolean) : ",
    "right" : "public getServiceUrlsFromDNS(instanceZone , preferSameZone boolean) : ",
    "info" : "MethodDeclaration[61754-65963]:MethodDeclaration[61733-65942]"
  }, {
    "left" : "public getDiscoveryServiceUrls(zone ) : ",
    "right" : "public getDiscoveryServiceUrls(zone ) : ",
    "info" : "MethodDeclaration[65969-66348]:MethodDeclaration[65948-66327]"
  }, {
    "left" : "public getZone(myInfo ) : ",
    "right" : "public getZone(myInfo ) : ",
    "info" : "MethodDeclaration[66413-66987]:MethodDeclaration[66392-66966]"
  }, {
    "left" : "public getRegion() : ",
    "right" : "public getRegion() : ",
    "info" : "MethodDeclaration[66993-67379]:MethodDeclaration[66972-67358]"
  }, {
    "left" : "package getZoneBasedDiscoveryUrlsFromRegion(region ) : ",
    "right" : "package getZoneBasedDiscoveryUrlsFromRegion(region ) : ",
    "info" : "MethodDeclaration[67385-69553]:MethodDeclaration[67364-69532]"
  }, {
    "left" : "private isEC2Url(zoneCname ) : boolean",
    "right" : "private isEC2Url(zoneCname ) : boolean",
    "info" : "MethodDeclaration[69559-69660]:MethodDeclaration[69538-69639]"
  }, {
    "left" : "public getEC2DiscoveryUrlsFromZone(dnsName , type ) : ",
    "right" : "public getEC2DiscoveryUrlsFromZone(dnsName , type ) : ",
    "info" : "MethodDeclaration[69666-71593]:MethodDeclaration[69645-71572]"
  }, {
    "left" : "private getZoneOffset(myZone , preferSameZone boolean, availZones ...) : int",
    "right" : "private getZoneOffset(myZone , preferSameZone boolean, availZones ...) : int",
    "info" : "MethodDeclaration[71599-72281]:MethodDeclaration[71578-72260]"
  }, {
    "left" : "private isOk(action , httpStatus int) : boolean",
    "right" : "private isOk(action , httpStatus int) : boolean",
    "info" : "MethodDeclaration[72287-72822]:MethodDeclaration[72266-72801]"
  }, {
    "left" : "private getCoordinatingServer() : ",
    "right" : "private getCoordinatingServer() : ",
    "info" : "MethodDeclaration[72828-73675]:MethodDeclaration[72807-73654]"
  }, {
    "left" : "private getUrl(fullServiceUrl ) : ",
    "right" : "private getUrl(fullServiceUrl ) : ",
    "info" : "MethodDeclaration[73681-73937]:MethodDeclaration[73660-73916]"
  }, {
    "left" : "package refreshInstanceInfo() : void",
    "right" : "package refreshInstanceInfo() : void",
    "info" : "MethodDeclaration[73943-74635]:MethodDeclaration[73922-74614]"
  }, {
    "left" : "class : HeartbeatThread",
    "right" : "class : HeartbeatThread",
    "info" : "TypeDeclaration[74641-74847]:TypeDeclaration[74620-74826]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[74791-74841]:MethodDeclaration[74770-74820]"
  }, {
    "left" : "package getInstanceInfoReplicator() : ",
    "right" : "package getInstanceInfoReplicator() : ",
    "info" : "MethodDeclaration[74853-74973]:MethodDeclaration[74832-74952]"
  }, {
    "left" : "package getInstanceInfo() : ",
    "right" : "package getInstanceInfo() : ",
    "info" : "MethodDeclaration[74979-75069]:MethodDeclaration[74958-75048]"
  }, {
    "left" : "public getHealthCheckHandler() : ",
    "right" : "public getHealthCheckHandler() : ",
    "info" : "MethodDeclaration[75075-75691]:MethodDeclaration[75054-75670]"
  }, {
    "left" : "class : CacheRefreshThread",
    "right" : "class : CacheRefreshThread",
    "info" : "TypeDeclaration[75697-78774]:TypeDeclaration[75676-78753]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[75853-78768]:MethodDeclaration[75832-78747]"
  }, {
    "left" : "private fetchRegistryFromBackup() : void",
    "right" : "private fetchRegistryFromBackup() : void",
    "info" : "MethodDeclaration[78780-80510]:MethodDeclaration[78759-80489]"
  }, {
    "left" : "protected newBackupRegistryInstance() : ",
    "right" : "protected newBackupRegistryInstance() : ",
    "info" : "MethodDeclaration[80516-80816]:MethodDeclaration[80495-80795]"
  }, {
    "left" : "private getServiceUrlUpdateTask(zone ) : ",
    "right" : "private getServiceUrlUpdateTask(zone ) : ",
    "info" : "MethodDeclaration[80822-82171]:MethodDeclaration[80801-82150]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[81172-82154]:MethodDeclaration[81151-82133]"
  }, {
    "left" : "private filterAndShuffle(apps ...) : ",
    "right" : "private filterAndShuffle(apps ...) : ",
    "info" : "MethodDeclaration[82177-83565]:MethodDeclaration[82156-83544]"
  }, {
    "left" : "private isFetchingRemoteRegionRegistries() : boolean",
    "right" : "private isFetchingRemoteRegionRegistries() : boolean",
    "info" : "MethodDeclaration[83571-83680]:MethodDeclaration[83550-83659]"
  }, {
    "left" : "private arrangeListBasedonHostname(list ) : void",
    "right" : "private arrangeListBasedonHostname(list ) : void",
    "info" : "MethodDeclaration[83687-84461]:MethodDeclaration[83666-84440]"
  } ],
  "mappings" : [ {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8643-8649]:Modifier[8643-8649]"
  }, {
    "left" : "DiscoveryClient",
    "right" : "DiscoveryClient",
    "info" : "SimpleName[8650-8665]:SimpleName[8650-8665]"
  }, {
    "left" : "InstanceInfo myInfo",
    "right" : "InstanceInfo myInfo",
    "info" : "SingleVariableDeclaration[8666-8685]:SingleVariableDeclaration[8666-8685]"
  }, {
    "left" : "EurekaClientConfig config",
    "right" : "EurekaClientConfig config",
    "info" : "SingleVariableDeclaration[8687-8712]:SingleVariableDeclaration[8687-8712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8714-8757]:Block[8714-8757]"
  }, {
    "left" : "this(myInfo, config, null);",
    "right" : "this(myInfo, config, null);",
    "info" : "ConstructorInvocation[8724-8751]:ConstructorInvocation[8724-8751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8763-8769]:Modifier[8763-8769]"
  }, {
    "left" : "DiscoveryClient",
    "right" : "DiscoveryClient",
    "info" : "SimpleName[8770-8785]:SimpleName[8770-8785]"
  }, {
    "left" : "InstanceInfo myInfo",
    "right" : "InstanceInfo myInfo",
    "info" : "SingleVariableDeclaration[8786-8805]:SingleVariableDeclaration[8786-8805]"
  }, {
    "left" : "EurekaClientConfig config",
    "right" : "EurekaClientConfig config",
    "info" : "SingleVariableDeclaration[8807-8832]:SingleVariableDeclaration[8807-8832]"
  }, {
    "left" : "DiscoveryClientOptionalArgs args",
    "right" : "DiscoveryClientOptionalArgs args",
    "info" : "SingleVariableDeclaration[8834-8866]:SingleVariableDeclaration[8834-8866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8868-9917]:Block[8868-9917]"
  }, {
    "left" : "this(myInfo, config, args, new Provider<BackupRegistry>() {\n            @Override\n            public BackupRegistry get() {\n                String backupRegistryClassName = clientConfig.getBackupRegistryImpl();\n                if (null != backupRegistryClassName) {\n                    try {\n                        return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();\n                    } catch (InstantiationException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (IllegalAccessException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (ClassNotFoundException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    }\n                }\n\n                logger.warn(\"Using default backup registry implementation which does not do anything.\");\n                return new NotImplementedRegistryImpl();\n            }\n        });",
    "right" : "this(myInfo, config, args, new Provider<BackupRegistry>() {\n            @Override\n            public BackupRegistry get() {\n                String backupRegistryClassName = clientConfig.getBackupRegistryImpl();\n                if (null != backupRegistryClassName) {\n                    try {\n                        return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();\n                    } catch (InstantiationException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (IllegalAccessException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (ClassNotFoundException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    }\n                }\n\n                logger.warn(\"Using default backup registry implementation which does not do anything.\");\n                return new NotImplementedRegistryImpl();\n            }\n        });",
    "info" : "ConstructorInvocation[8878-9911]:ConstructorInvocation[8878-9911]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8950-8959]:MarkerAnnotation[8950-8959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8972-8978]:Modifier[8972-8978]"
  }, {
    "left" : "BackupRegistry",
    "right" : "BackupRegistry",
    "info" : "SimpleType[8979-8993]:SimpleType[8979-8993]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[8994-8997]:SimpleName[8994-8997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9000-9899]:Block[9000-9899]"
  }, {
    "left" : "String backupRegistryClassName = clientConfig.getBackupRegistryImpl();",
    "right" : "String backupRegistryClassName = clientConfig.getBackupRegistryImpl();",
    "info" : "VariableDeclarationStatement[9018-9088]:VariableDeclarationStatement[9018-9088]"
  }, {
    "left" : "if (null != backupRegistryClassName)",
    "right" : "if (null != backupRegistryClassName)",
    "info" : "IfStatement[9105-9722]:IfStatement[9105-9722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9142-9722]:Block[9142-9722]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9164-9704]:TryStatement[9164-9704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9168-9293]:Block[9168-9293]"
  }, {
    "left" : "return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();",
    "right" : "return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();",
    "info" : "ReturnStatement[9194-9271]:ReturnStatement[9194-9271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9327-9430]:Block[9327-9430]"
  }, {
    "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "info" : "ExpressionStatement[9353-9408]:ExpressionStatement[9353-9408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9464-9567]:Block[9464-9567]"
  }, {
    "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "info" : "ExpressionStatement[9490-9545]:ExpressionStatement[9490-9545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9601-9704]:Block[9601-9704]"
  }, {
    "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
    "info" : "ExpressionStatement[9627-9682]:ExpressionStatement[9627-9682]"
  }, {
    "left" : "logger.warn(\"Using default backup registry implementation which does not do anything.\");",
    "right" : "logger.warn(\"Using default backup registry implementation which does not do anything.\");",
    "info" : "ExpressionStatement[9740-9828]:ExpressionStatement[9740-9828]"
  }, {
    "left" : "return new NotImplementedRegistryImpl();",
    "right" : "return new NotImplementedRegistryImpl();",
    "info" : "ReturnStatement[9845-9885]:ReturnStatement[9845-9885]"
  }, {
    "left" : "@Inject",
    "right" : "@Inject",
    "info" : "MarkerAnnotation[9923-9930]:MarkerAnnotation[9923-9930]"
  }, {
    "left" : "DiscoveryClient",
    "right" : "DiscoveryClient",
    "info" : "SimpleName[9935-9950]:SimpleName[9935-9950]"
  }, {
    "left" : "InstanceInfo myInfo",
    "right" : "InstanceInfo myInfo",
    "info" : "SingleVariableDeclaration[9951-9970]:SingleVariableDeclaration[9951-9970]"
  }, {
    "left" : "EurekaClientConfig config",
    "right" : "EurekaClientConfig config",
    "info" : "SingleVariableDeclaration[9972-9997]:SingleVariableDeclaration[9972-9997]"
  }, {
    "left" : "DiscoveryClientOptionalArgs args",
    "right" : "DiscoveryClientOptionalArgs args",
    "info" : "SingleVariableDeclaration[9999-10031]:SingleVariableDeclaration[9999-10031]"
  }, {
    "left" : "Provider<BackupRegistry> backupRegistryProvider",
    "right" : "Provider<BackupRegistry> backupRegistryProvider",
    "info" : "SingleVariableDeclaration[10053-10100]:SingleVariableDeclaration[10053-10100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10102-16359]:Block[10102-16359]"
  }, {
    "left" : "if (args != null)",
    "right" : "if (args != null)",
    "info" : "IfStatement[10112-10470]:IfStatement[10112-10470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10130-10329]:Block[10130-10329]"
  }, {
    "left" : "healthCheckHandlerProvider = args.healthCheckHandlerProvider;",
    "right" : "healthCheckHandlerProvider = args.healthCheckHandlerProvider;",
    "info" : "ExpressionStatement[10144-10205]:ExpressionStatement[10144-10205]"
  }, {
    "left" : "healthCheckCallbackProvider = args.healthCheckCallbackProvider;",
    "right" : "healthCheckCallbackProvider = args.healthCheckCallbackProvider;",
    "info" : "ExpressionStatement[10218-10281]:ExpressionStatement[10218-10281]"
  }, {
    "left" : "eventBus = args.eventBus;",
    "right" : "eventBus = args.eventBus;",
    "info" : "ExpressionStatement[10294-10319]:ExpressionStatement[10294-10319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10335-10470]:Block[10335-10470]"
  }, {
    "left" : "healthCheckCallbackProvider = null;",
    "right" : "healthCheckCallbackProvider = null;",
    "info" : "ExpressionStatement[10349-10384]:ExpressionStatement[10349-10384]"
  }, {
    "left" : "healthCheckHandlerProvider = null;",
    "right" : "healthCheckHandlerProvider = null;",
    "info" : "ExpressionStatement[10397-10431]:ExpressionStatement[10397-10431]"
  }, {
    "left" : "eventBus = null;",
    "right" : "eventBus = null;",
    "info" : "ExpressionStatement[10444-10460]:ExpressionStatement[10444-10460]"
  }, {
    "left" : "this.backupRegistryProvider = backupRegistryProvider;",
    "right" : "this.backupRegistryProvider = backupRegistryProvider;",
    "info" : "ExpressionStatement[10480-10533]:ExpressionStatement[10480-10533]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10543-15767]:TryStatement[10543-15767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10547-15651]:Block[10547-15651]"
  }, {
    "left" : "scheduler = Executors.newScheduledThreadPool(3,\n                    new ThreadFactoryBuilder()\n                            .setNameFormat(\"DiscoveryClient-%d\")\n                            .setDaemon(true)\n                            .build());",
    "right" : "scheduler = Executors.newScheduledThreadPool(3,\n                    new ThreadFactoryBuilder()\n                            .setNameFormat(\"DiscoveryClient-%d\")\n                            .setDaemon(true)\n                            .build());",
    "info" : "ExpressionStatement[10561-10804]:ExpressionStatement[10561-10804]"
  }, {
    "left" : "clientConfig = config;",
    "right" : "clientConfig = config;",
    "info" : "ExpressionStatement[10817-10839]:ExpressionStatement[10817-10839]"
  }, {
    "left" : "final String zone = getZone(myInfo);",
    "right" : "final String zone = getZone(myInfo);",
    "info" : "VariableDeclarationStatement[10852-10888]:VariableDeclarationStatement[10852-10888]"
  }, {
    "left" : "eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));",
    "right" : "eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));",
    "info" : "ExpressionStatement[10901-10954]:ExpressionStatement[10901-10954]"
  }, {
    "left" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(), TimeUnit.SECONDS);",
    "right" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(), TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[10967-11199]:ExpressionStatement[10967-11199]"
  }, {
    "left" : "localRegionApps.set(new Applications());",
    "right" : "localRegionApps.set(new Applications());",
    "info" : "ExpressionStatement[11212-11252]:ExpressionStatement[11212-11252]"
  }, {
    "left" : "heartbeatExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
    "right" : "heartbeatExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
    "info" : "ExpressionStatement[11266-11459]:ExpressionStatement[11266-11459]"
  }, {
    "left" : "cacheRefreshExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
    "right" : "cacheRefreshExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
    "info" : "ExpressionStatement[11496-11695]:ExpressionStatement[11496-11695]"
  }, {
    "left" : "fetchRegistryGeneration = new AtomicLong(0);",
    "right" : "fetchRegistryGeneration = new AtomicLong(0);",
    "info" : "ExpressionStatement[11732-11776]:ExpressionStatement[11732-11776]"
  }, {
    "left" : "instanceInfo = myInfo;",
    "right" : "instanceInfo = myInfo;",
    "info" : "ExpressionStatement[11790-11812]:ExpressionStatement[11790-11812]"
  }, {
    "left" : "if (myInfo != null)",
    "right" : "if (myInfo != null)",
    "info" : "IfStatement[11825-12076]:IfStatement[11825-12076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11845-11976]:Block[11845-11976]"
  }, {
    "left" : "appPathIdentifier = instanceInfo.getAppName() + \"/\"\n                        + instanceInfo.getId();",
    "right" : "appPathIdentifier = instanceInfo.getAppName() + \"/\"\n                        + instanceInfo.getId();",
    "info" : "ExpressionStatement[11863-11962]:ExpressionStatement[11863-11962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11982-12076]:Block[11982-12076]"
  }, {
    "left" : "logger.warn(\"Setting instanceInfo to a passed in null value\");",
    "right" : "logger.warn(\"Setting instanceInfo to a passed in null value\");",
    "info" : "ExpressionStatement[12000-12062]:ExpressionStatement[12000-12062]"
  }, {
    "left" : "if (eurekaServiceUrls.get().get(0).startsWith(\"https://\") &&\n                    \"true\".equals(System.getProperty(\"com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory\")))",
    "right" : "if (eurekaServiceUrls.get().get(0).startsWith(\"https://\") &&\n                    \"true\".equals(System.getProperty(\"com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory\")))",
    "info" : "IfStatement[12090-14116]:IfStatement[12090-14116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12271-12805]:Block[12271-12805]"
  }, {
    "left" : "discoveryJerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(\"DiscoveryClient-HTTPClient-System\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
    "right" : "discoveryJerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(\"DiscoveryClient-HTTPClient-System\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
    "info" : "ExpressionStatement[12289-12791]:ExpressionStatement[12289-12791]"
  }, {
    "left" : "if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null)",
    "right" : "if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null)",
    "info" : "IfStatement[12811-14116]:IfStatement[12811-14116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12891-13592]:Block[12891-13592]"
  }, {
    "left" : "discoveryJerseyClient = EurekaJerseyClient.createProxyJerseyClient(\"Proxy-DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds(),\n                        clientConfig.getProxyHost(), clientConfig.getProxyPort(),\n                        clientConfig.getProxyUserName(), clientConfig.getProxyPassword());",
    "right" : "discoveryJerseyClient = EurekaJerseyClient.createProxyJerseyClient(\"Proxy-DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds(),\n                        clientConfig.getProxyHost(), clientConfig.getProxyPort(),\n                        clientConfig.getProxyUserName(), clientConfig.getProxyPassword());",
    "info" : "ExpressionStatement[12909-13578]:ExpressionStatement[12909-13578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13598-14116]:Block[13598-14116]"
  }, {
    "left" : "discoveryJerseyClient = EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
    "right" : "discoveryJerseyClient = EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
    "info" : "ExpressionStatement[13616-14102]:ExpressionStatement[13616-14102]"
  }, {
    "left" : "discoveryApacheClient = discoveryJerseyClient.getClient();",
    "right" : "discoveryApacheClient = discoveryJerseyClient.getClient();",
    "info" : "ExpressionStatement[14129-14187]:ExpressionStatement[14129-14187]"
  }, {
    "left" : "remoteRegionsToFetch = new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());",
    "right" : "remoteRegionsToFetch = new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());",
    "info" : "ExpressionStatement[14200-14297]:ExpressionStatement[14200-14297]"
  }, {
    "left" : "AzToRegionMapper azToRegionMapper;",
    "right" : "AzToRegionMapper azToRegionMapper;",
    "info" : "VariableDeclarationStatement[14310-14344]:VariableDeclarationStatement[14310-14344]"
  }, {
    "left" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls())",
    "right" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls())",
    "info" : "IfStatement[14357-14599]:IfStatement[14357-14599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14412-14494]:Block[14412-14494]"
  }, {
    "left" : "azToRegionMapper = new DNSBasedAzToRegionMapper();",
    "right" : "azToRegionMapper = new DNSBasedAzToRegionMapper();",
    "info" : "ExpressionStatement[14430-14480]:ExpressionStatement[14430-14480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14500-14599]:Block[14500-14599]"
  }, {
    "left" : "azToRegionMapper = new PropertyBasedAzToRegionMapper(clientConfig);",
    "right" : "azToRegionMapper = new PropertyBasedAzToRegionMapper(clientConfig);",
    "info" : "ExpressionStatement[14518-14585]:ExpressionStatement[14518-14585]"
  }, {
    "left" : "if (null != remoteRegionsToFetch.get())",
    "right" : "if (null != remoteRegionsToFetch.get())",
    "info" : "IfStatement[14612-14758]:IfStatement[14612-14758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14652-14758]:Block[14652-14758]"
  }, {
    "left" : "azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));",
    "right" : "azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));",
    "info" : "ExpressionStatement[14670-14744]:ExpressionStatement[14670-14744]"
  }, {
    "left" : "instanceRegionChecker = new InstanceRegionChecker(azToRegionMapper, clientConfig.getRegion());",
    "right" : "instanceRegionChecker = new InstanceRegionChecker(azToRegionMapper, clientConfig.getRegion());",
    "info" : "ExpressionStatement[14771-14865]:ExpressionStatement[14771-14865]"
  }, {
    "left" : "boolean enableGZIPContentEncodingFilter = config.shouldGZipContent();",
    "right" : "boolean enableGZIPContentEncodingFilter = config.shouldGZipContent();",
    "info" : "VariableDeclarationStatement[14878-14947]:VariableDeclarationStatement[14878-14947]"
  }, {
    "left" : "if (enableGZIPContentEncodingFilter)",
    "right" : "if (enableGZIPContentEncodingFilter)",
    "info" : "IfStatement[15061-15345]:IfStatement[15061-15345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15098-15345]:Block[15098-15345]"
  }, {
    "left" : "discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(\n                        false));",
    "right" : "discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(\n                        false));",
    "info" : "ExpressionStatement[15236-15331]:ExpressionStatement[15236-15331]"
  }, {
    "left" : "String ip = instanceInfo == null ? null : instanceInfo.getIPAddr();",
    "right" : "String ip = instanceInfo == null ? null : instanceInfo.getIPAddr();",
    "info" : "VariableDeclarationStatement[15412-15479]:VariableDeclarationStatement[15412-15479]"
  }, {
    "left" : "EurekaClientIdentity identity = new EurekaClientIdentity(ip);",
    "right" : "EurekaClientIdentity identity = new EurekaClientIdentity(ip);",
    "info" : "VariableDeclarationStatement[15492-15553]:VariableDeclarationStatement[15492-15553]"
  }, {
    "left" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));",
    "right" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));",
    "info" : "ExpressionStatement[15566-15640]:ExpressionStatement[15566-15640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15672-15767]:Block[15672-15767]"
  }, {
    "left" : "throw new RuntimeException(\"Failed to initialize DiscoveryClient!\", e);",
    "right" : "throw new RuntimeException(\"Failed to initialize DiscoveryClient!\", e);",
    "info" : "ThrowStatement[15686-15757]:ThrowStatement[15686-15757]"
  }, {
    "left" : "if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false))",
    "right" : "if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false))",
    "info" : "IfStatement[15776-15891]:IfStatement[15776-15891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15841-15891]:Block[15841-15891]"
  }, {
    "left" : "fetchRegistryFromBackup();",
    "right" : "fetchRegistryFromBackup();",
    "info" : "ExpressionStatement[15855-15881]:ExpressionStatement[15855-15881]"
  }, {
    "left" : "initScheduledTasks();",
    "right" : "initScheduledTasks();",
    "info" : "ExpressionStatement[15901-15922]:ExpressionStatement[15901-15922]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[15931-16075]:TryStatement[15931-16075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15935-15989]:Block[15935-15989]"
  }, {
    "left" : "Monitors.registerObject(this);",
    "right" : "Monitors.registerObject(this);",
    "info" : "ExpressionStatement[15949-15979]:ExpressionStatement[15949-15979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16010-16075]:Block[16010-16075]"
  }, {
    "left" : "logger.warn(\"Cannot register timers\", e);",
    "right" : "logger.warn(\"Cannot register timers\", e);",
    "info" : "ExpressionStatement[16024-16065]:ExpressionStatement[16024-16065]"
  }, {
    "left" : "DiscoveryManager.getInstance().setDiscoveryClient(this);",
    "right" : "DiscoveryManager.getInstance().setDiscoveryClient(this);",
    "info" : "ExpressionStatement[16227-16283]:ExpressionStatement[16227-16283]"
  }, {
    "left" : "DiscoveryManager.getInstance().setEurekaClientConfig(config);",
    "right" : "DiscoveryManager.getInstance().setEurekaClientConfig(config);",
    "info" : "ExpressionStatement[16292-16353]:ExpressionStatement[16292-16353]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16489-16498]:MarkerAnnotation[16489-16498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16503-16509]:Modifier[16503-16509]"
  }, {
    "left" : "Application",
    "right" : "Application",
    "info" : "SimpleType[16510-16521]:SimpleType[16510-16521]"
  }, {
    "left" : "getApplication",
    "right" : "getApplication",
    "info" : "SimpleName[16522-16536]:SimpleName[16522-16536]"
  }, {
    "left" : "String appName",
    "right" : "String appName",
    "info" : "SingleVariableDeclaration[16537-16551]:SingleVariableDeclaration[16537-16551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16553-16629]:Block[16553-16629]"
  }, {
    "left" : "return getApplications().getRegisteredApplications(appName);",
    "right" : "return getApplications().getRegisteredApplications(appName);",
    "info" : "ReturnStatement[16563-16623]:ReturnStatement[16563-16623]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16751-16760]:MarkerAnnotation[16751-16760]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16765-16771]:Modifier[16765-16771]"
  }, {
    "left" : "Applications",
    "right" : "Applications",
    "info" : "SimpleType[16772-16784]:SimpleType[16772-16784]"
  }, {
    "left" : "getApplications",
    "right" : "getApplications",
    "info" : "SimpleName[16785-16800]:SimpleName[16785-16800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16803-16848]:Block[16803-16848]"
  }, {
    "left" : "return localRegionApps.get();",
    "right" : "return localRegionApps.get();",
    "info" : "ReturnStatement[16813-16842]:ReturnStatement[16813-16842]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16854-16863]:MarkerAnnotation[16854-16863]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16868-16874]:Modifier[16868-16874]"
  }, {
    "left" : "Applications",
    "right" : "Applications",
    "info" : "SimpleType[16875-16887]:SimpleType[16875-16887]"
  }, {
    "left" : "getApplicationsForARegion",
    "right" : "getApplicationsForARegion",
    "info" : "SimpleName[16888-16913]:SimpleName[16888-16913]"
  }, {
    "left" : "@Nullable String region",
    "right" : "@Nullable String region",
    "info" : "SingleVariableDeclaration[16914-16937]:SingleVariableDeclaration[16914-16937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16939-17125]:Block[16939-17125]"
  }, {
    "left" : "if (instanceRegionChecker.isLocalRegion(region))",
    "right" : "if (instanceRegionChecker.isLocalRegion(region))",
    "info" : "IfStatement[16949-17119]:IfStatement[16949-17119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16998-17051]:Block[16998-17051]"
  }, {
    "left" : "return localRegionApps.get();",
    "right" : "return localRegionApps.get();",
    "info" : "ReturnStatement[17012-17041]:ReturnStatement[17012-17041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17057-17119]:Block[17057-17119]"
  }, {
    "left" : "return remoteRegionVsApps.get(region);",
    "right" : "return remoteRegionVsApps.get(region);",
    "info" : "ReturnStatement[17071-17109]:ReturnStatement[17071-17109]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17131-17137]:Modifier[17131-17137]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[17138-17149]:ParameterizedType[17138-17149]"
  }, {
    "left" : "getAllKnownRegions",
    "right" : "getAllKnownRegions",
    "info" : "SimpleName[17150-17168]:SimpleName[17150-17168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17171-17570]:Block[17171-17570]"
  }, {
    "left" : "String localRegion = instanceRegionChecker.getLocalRegion();",
    "right" : "String localRegion = instanceRegionChecker.getLocalRegion();",
    "info" : "VariableDeclarationStatement[17181-17241]:VariableDeclarationStatement[17181-17241]"
  }, {
    "left" : "if (!remoteRegionVsApps.isEmpty())",
    "right" : "if (!remoteRegionVsApps.isEmpty())",
    "info" : "IfStatement[17250-17564]:IfStatement[17250-17564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17285-17492]:Block[17285-17492]"
  }, {
    "left" : "Set<String> regions = remoteRegionVsApps.keySet();",
    "right" : "Set<String> regions = remoteRegionVsApps.keySet();",
    "info" : "VariableDeclarationStatement[17299-17349]:VariableDeclarationStatement[17299-17349]"
  }, {
    "left" : "Set<String> toReturn = new HashSet<String>(regions);",
    "right" : "Set<String> toReturn = new HashSet<String>(regions);",
    "info" : "VariableDeclarationStatement[17362-17414]:VariableDeclarationStatement[17362-17414]"
  }, {
    "left" : "toReturn.add(localRegion);",
    "right" : "toReturn.add(localRegion);",
    "info" : "ExpressionStatement[17427-17453]:ExpressionStatement[17427-17453]"
  }, {
    "left" : "return toReturn;",
    "right" : "return toReturn;",
    "info" : "ReturnStatement[17466-17482]:ReturnStatement[17466-17482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17498-17564]:Block[17498-17564]"
  }, {
    "left" : "return Collections.singleton(localRegion);",
    "right" : "return Collections.singleton(localRegion);",
    "info" : "ReturnStatement[17512-17554]:ReturnStatement[17512-17554]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17702-17711]:MarkerAnnotation[17702-17711]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17716-17722]:Modifier[17716-17722]"
  }, {
    "left" : "List<InstanceInfo>",
    "right" : "List<InstanceInfo>",
    "info" : "ParameterizedType[17723-17741]:ParameterizedType[17723-17741]"
  }, {
    "left" : "getInstancesById",
    "right" : "getInstancesById",
    "info" : "SimpleName[17742-17758]:SimpleName[17742-17758]"
  }, {
    "left" : "String id",
    "right" : "String id",
    "info" : "SingleVariableDeclaration[17759-17768]:SingleVariableDeclaration[17759-17768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17770-18161]:Block[17770-18161]"
  }, {
    "left" : "List<InstanceInfo> instancesList = new ArrayList<InstanceInfo>();",
    "right" : "List<InstanceInfo> instancesList = new ArrayList<InstanceInfo>();",
    "info" : "VariableDeclarationStatement[17780-17845]:VariableDeclarationStatement[17780-17845]"
  }, {
    "left" : "for (Application app : this.getApplications()\n                .getRegisteredApplications())",
    "right" : "for (Application app : this.getApplications()\n                .getRegisteredApplications())",
    "info" : "EnhancedForStatement[17854-18125]:EnhancedForStatement[17854-18125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17946-18125]:Block[17946-18125]"
  }, {
    "left" : "InstanceInfo instanceInfo = app.getByInstanceId(id);",
    "right" : "InstanceInfo instanceInfo = app.getByInstanceId(id);",
    "info" : "VariableDeclarationStatement[17960-18012]:VariableDeclarationStatement[17960-18012]"
  }, {
    "left" : "if (instanceInfo != null)",
    "right" : "if (instanceInfo != null)",
    "info" : "IfStatement[18025-18115]:IfStatement[18025-18115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18051-18115]:Block[18051-18115]"
  }, {
    "left" : "instancesList.add(instanceInfo);",
    "right" : "instancesList.add(instanceInfo);",
    "info" : "ExpressionStatement[18069-18101]:ExpressionStatement[18069-18101]"
  }, {
    "left" : "return instancesList;",
    "right" : "return instancesList;",
    "info" : "ReturnStatement[18134-18155]:ReturnStatement[18134-18155]"
  }, {
    "left" : "/**\n     * Register {@link HealthCheckCallback} with the eureka client.\n     *\n     * Once registered, the eureka client will invoke the\n     * {@link HealthCheckCallback} in intervals specified by\n     * {@link EurekaClientConfig#getInstanceInfoReplicationIntervalSeconds()}.\n     *\n     * @param callback app specific healthcheck.\n     *\n     * @deprecated Use\n     */",
    "right" : "/**\n     * Register {@link HealthCheckCallback} with the eureka client.\n     *\n     * Once registered, the eureka client will invoke the\n     * {@link HealthCheckCallback} in intervals specified by\n     * {@link EurekaClientConfig#getInstanceInfoReplicationIntervalSeconds()}.\n     *\n     * @param callback app specific healthcheck.\n     *\n     * @deprecated Use\n     */",
    "info" : "Javadoc[18167-18537]:Javadoc[18167-18537]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[18542-18553]:MarkerAnnotation[18542-18553]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18558-18567]:MarkerAnnotation[18558-18567]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18572-18578]:Modifier[18572-18578]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18579-18583]:PrimitiveType[18579-18583]"
  }, {
    "left" : "registerHealthCheckCallback",
    "right" : "registerHealthCheckCallback",
    "info" : "SimpleName[18584-18611]:SimpleName[18584-18611]"
  }, {
    "left" : "HealthCheckCallback callback",
    "right" : "HealthCheckCallback callback",
    "info" : "SingleVariableDeclaration[18612-18640]:SingleVariableDeclaration[18612-18640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18642-18912]:Block[18642-18912]"
  }, {
    "left" : "if (instanceInfo == null)",
    "right" : "if (instanceInfo == null)",
    "info" : "IfStatement[18652-18781]:IfStatement[18652-18781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18678-18781]:Block[18678-18781]"
  }, {
    "left" : "logger.error(\"Cannot register a listener for instance info since it is null!\");",
    "right" : "logger.error(\"Cannot register a listener for instance info since it is null!\");",
    "info" : "ExpressionStatement[18692-18771]:ExpressionStatement[18692-18771]"
  }, {
    "left" : "if (callback != null)",
    "right" : "if (callback != null)",
    "info" : "IfStatement[18790-18906]:IfStatement[18790-18906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18812-18906]:Block[18812-18906]"
  }, {
    "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(callback);",
    "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(callback);",
    "info" : "ExpressionStatement[18826-18896]:ExpressionStatement[18826-18896]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18918-18927]:MarkerAnnotation[18918-18927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18932-18938]:Modifier[18932-18938]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18939-18943]:PrimitiveType[18939-18943]"
  }, {
    "left" : "registerHealthCheck",
    "right" : "registerHealthCheck",
    "info" : "SimpleName[18944-18963]:SimpleName[18944-18963]"
  }, {
    "left" : "HealthCheckHandler healthCheckHandler",
    "right" : "HealthCheckHandler healthCheckHandler",
    "info" : "SingleVariableDeclaration[18964-19001]:SingleVariableDeclaration[18964-19001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19003-19261]:Block[19003-19261]"
  }, {
    "left" : "if (instanceInfo == null)",
    "right" : "if (instanceInfo == null)",
    "info" : "IfStatement[19013-19145]:IfStatement[19013-19145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19039-19145]:Block[19039-19145]"
  }, {
    "left" : "logger.error(\"Cannot register a healthcheck handler when instance info is null!\");",
    "right" : "logger.error(\"Cannot register a healthcheck handler when instance info is null!\");",
    "info" : "ExpressionStatement[19053-19135]:ExpressionStatement[19053-19135]"
  }, {
    "left" : "if (healthCheckHandler != null)",
    "right" : "if (healthCheckHandler != null)",
    "info" : "IfStatement[19154-19255]:IfStatement[19154-19255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19186-19255]:Block[19186-19255]"
  }, {
    "left" : "this.healthCheckHandler = healthCheckHandler;",
    "right" : "this.healthCheckHandler = healthCheckHandler;",
    "info" : "ExpressionStatement[19200-19245]:ExpressionStatement[19200-19245]"
  }, {
    "left" : "/**\n     * Gets the list of instances matching the given VIP Address.\n     *\n     * @param vipAddress\n     *            - The VIP address to match the instances for.\n     * @param secure\n     *            - true if it is a secure vip address, false otherwise\n     * @return - The list of {@link InstanceInfo} objects matching the criteria\n     */",
    "right" : "/**\n     * Gets the list of instances matching the given VIP Address.\n     *\n     * @param vipAddress\n     *            - The VIP address to match the instances for.\n     * @param secure\n     *            - true if it is a secure vip address, false otherwise\n     * @return - The list of {@link InstanceInfo} objects matching the criteria\n     */",
    "info" : "Javadoc[19267-19613]:Javadoc[19267-19613]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19618-19627]:MarkerAnnotation[19618-19627]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19632-19638]:Modifier[19632-19638]"
  }, {
    "left" : "List<InstanceInfo>",
    "right" : "List<InstanceInfo>",
    "info" : "ParameterizedType[19639-19657]:ParameterizedType[19639-19657]"
  }, {
    "left" : "getInstancesByVipAddress",
    "right" : "getInstancesByVipAddress",
    "info" : "SimpleName[19658-19682]:SimpleName[19658-19682]"
  }, {
    "left" : "String vipAddress",
    "right" : "String vipAddress",
    "info" : "SingleVariableDeclaration[19683-19700]:SingleVariableDeclaration[19683-19700]"
  }, {
    "left" : "boolean secure",
    "right" : "boolean secure",
    "info" : "SingleVariableDeclaration[19702-19716]:SingleVariableDeclaration[19702-19716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19718-19826]:Block[19718-19826]"
  }, {
    "left" : "return getInstancesByVipAddress(vipAddress, secure, instanceRegionChecker.getLocalRegion());",
    "right" : "return getInstancesByVipAddress(vipAddress, secure, instanceRegionChecker.getLocalRegion());",
    "info" : "ReturnStatement[19728-19820]:ReturnStatement[19728-19820]"
  }, {
    "left" : "/**\n     * Gets the list of instances matching the given VIP Address in the passed region.\n     *\n     * @param vipAddress - The VIP address to match the instances for.\n     * @param secure - true if it is a secure vip address, false otherwise\n     * @param region - region from which the instances are to be fetched. If <code>null</code> then local region is\n     *               assumed.\n     *\n     * @return - The list of {@link InstanceInfo} objects matching the criteria, empty list if not instances found.\n     */",
    "right" : "/**\n     * Gets the list of instances matching the given VIP Address in the passed region.\n     *\n     * @param vipAddress - The VIP address to match the instances for.\n     * @param secure - true if it is a secure vip address, false otherwise\n     * @param region - region from which the instances are to be fetched. If <code>null</code> then local region is\n     *               assumed.\n     *\n     * @return - The list of {@link InstanceInfo} objects matching the criteria, empty list if not instances found.\n     */",
    "info" : "Javadoc[19832-20352]:Javadoc[19832-20352]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20357-20366]:MarkerAnnotation[20357-20366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20371-20377]:Modifier[20371-20377]"
  }, {
    "left" : "List<InstanceInfo>",
    "right" : "List<InstanceInfo>",
    "info" : "ParameterizedType[20378-20396]:ParameterizedType[20378-20396]"
  }, {
    "left" : "getInstancesByVipAddress",
    "right" : "getInstancesByVipAddress",
    "info" : "SimpleName[20397-20421]:SimpleName[20397-20421]"
  }, {
    "left" : "String vipAddress",
    "right" : "String vipAddress",
    "info" : "SingleVariableDeclaration[20422-20439]:SingleVariableDeclaration[20422-20439]"
  }, {
    "left" : "boolean secure",
    "right" : "boolean secure",
    "info" : "SingleVariableDeclaration[20441-20455]:SingleVariableDeclaration[20441-20455]"
  }, {
    "left" : "@Nullable String region",
    "right" : "@Nullable String region",
    "info" : "SingleVariableDeclaration[20512-20535]:SingleVariableDeclaration[20512-20535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20537-21423]:Block[20537-21423]"
  }, {
    "left" : "if (vipAddress == null)",
    "right" : "if (vipAddress == null)",
    "info" : "IfStatement[20547-20690]:IfStatement[20547-20690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20571-20690]:Block[20571-20690]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address cannot be null\");",
    "right" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address cannot be null\");",
    "info" : "ThrowStatement[20585-20680]:ThrowStatement[20585-20680]"
  }, {
    "left" : "Applications applications;",
    "right" : "Applications applications;",
    "info" : "VariableDeclarationStatement[20699-20725]:VariableDeclarationStatement[20699-20725]"
  }, {
    "left" : "if (instanceRegionChecker.isLocalRegion(region))",
    "right" : "if (instanceRegionChecker.isLocalRegion(region))",
    "info" : "IfStatement[20734-21208]:IfStatement[20734-21208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20783-20849]:Block[20783-20849]"
  }, {
    "left" : "applications = this.localRegionApps.get();",
    "right" : "applications = this.localRegionApps.get();",
    "info" : "ExpressionStatement[20797-20839]:ExpressionStatement[20797-20839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20855-21208]:Block[20855-21208]"
  }, {
    "left" : "applications = remoteRegionVsApps.get(region);",
    "right" : "applications = remoteRegionVsApps.get(region);",
    "info" : "ExpressionStatement[20869-20915]:ExpressionStatement[20869-20915]"
  }, {
    "left" : "if (null == applications)",
    "right" : "if (null == applications)",
    "info" : "IfStatement[20928-21198]:IfStatement[20928-21198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20954-21198]:Block[20954-21198]"
  }, {
    "left" : "logger.debug(\"No applications are defined for region {}, so returning an empty instance list for vip \"\n                        + \"address {}.\", region, vipAddress);",
    "right" : "logger.debug(\"No applications are defined for region {}, so returning an empty instance list for vip \"\n                        + \"address {}.\", region, vipAddress);",
    "info" : "ExpressionStatement[20972-21136]:ExpressionStatement[20972-21136]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[21153-21184]:ReturnStatement[21153-21184]"
  }, {
    "left" : "if (!secure)",
    "right" : "if (!secure)",
    "info" : "IfStatement[21218-21416]:IfStatement[21218-21416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21231-21317]:Block[21231-21317]"
  }, {
    "left" : "return applications.getInstancesByVirtualHostName(vipAddress);",
    "right" : "return applications.getInstancesByVirtualHostName(vipAddress);",
    "info" : "ReturnStatement[21245-21307]:ReturnStatement[21245-21307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21323-21416]:Block[21323-21416]"
  }, {
    "left" : "return applications.getInstancesBySecureVirtualHostName(vipAddress);",
    "right" : "return applications.getInstancesBySecureVirtualHostName(vipAddress);",
    "info" : "ReturnStatement[21337-21405]:ReturnStatement[21337-21405]"
  }, {
    "left" : "/**\n     * Gets the list of instances matching the given VIP Address and the given\n     * application name if both of them are not null. If one of them is null,\n     * then that criterion is completely ignored for matching instances.\n     *\n     * @param vipAddress\n     *            - The VIP address to match the instances for.\n     * @param appName\n     *            - The applicationName to match the instances for.\n     * @param secure\n     *            - true if it is a secure vip address, false otherwise.\n     * @return - The list of {@link InstanceInfo} objects matching the criteria.\n     */",
    "right" : "/**\n     * Gets the list of instances matching the given VIP Address and the given\n     * application name if both of them are not null. If one of them is null,\n     * then that criterion is completely ignored for matching instances.\n     *\n     * @param vipAddress\n     *            - The VIP address to match the instances for.\n     * @param appName\n     *            - The applicationName to match the instances for.\n     * @param secure\n     *            - true if it is a secure vip address, false otherwise.\n     * @return - The list of {@link InstanceInfo} objects matching the criteria.\n     */",
    "info" : "Javadoc[21429-22031]:Javadoc[21429-22031]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22036-22045]:MarkerAnnotation[22036-22045]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22050-22056]:Modifier[22050-22056]"
  }, {
    "left" : "List<InstanceInfo>",
    "right" : "List<InstanceInfo>",
    "info" : "ParameterizedType[22057-22075]:ParameterizedType[22057-22075]"
  }, {
    "left" : "getInstancesByVipAddressAndAppName",
    "right" : "getInstancesByVipAddressAndAppName",
    "info" : "SimpleName[22076-22110]:SimpleName[22076-22110]"
  }, {
    "left" : "String vipAddress",
    "right" : "String vipAddress",
    "info" : "SingleVariableDeclaration[22124-22141]:SingleVariableDeclaration[22124-22141]"
  }, {
    "left" : "String appName",
    "right" : "String appName",
    "info" : "SingleVariableDeclaration[22143-22157]:SingleVariableDeclaration[22143-22157]"
  }, {
    "left" : "boolean secure",
    "right" : "boolean secure",
    "info" : "SingleVariableDeclaration[22159-22173]:SingleVariableDeclaration[22159-22173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22175-24091]:Block[22175-24091]"
  }, {
    "left" : "List<InstanceInfo> result = new ArrayList<InstanceInfo>();",
    "right" : "List<InstanceInfo> result = new ArrayList<InstanceInfo>();",
    "info" : "VariableDeclarationStatement[22186-22244]:VariableDeclarationStatement[22186-22244]"
  }, {
    "left" : "if (vipAddress == null && appName == null)",
    "right" : "if (vipAddress == null && appName == null)",
    "info" : "IfStatement[22253-22822]:IfStatement[22253-22822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22296-22441]:Block[22296-22441]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address and application name cannot both be null\");",
    "right" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address and application name cannot both be null\");",
    "info" : "ThrowStatement[22310-22431]:ThrowStatement[22310-22431]"
  }, {
    "left" : "if (vipAddress != null && appName == null)",
    "right" : "if (vipAddress != null && appName == null)",
    "info" : "IfStatement[22447-22822]:IfStatement[22447-22822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22490-22566]:Block[22490-22566]"
  }, {
    "left" : "return getInstancesByVipAddress(vipAddress, secure);",
    "right" : "return getInstancesByVipAddress(vipAddress, secure);",
    "info" : "ReturnStatement[22504-22556]:ReturnStatement[22504-22556]"
  }, {
    "left" : "if (vipAddress == null && appName != null)",
    "right" : "if (vipAddress == null && appName != null)",
    "info" : "IfStatement[22572-22822]:IfStatement[22572-22822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22615-22822]:Block[22615-22822]"
  }, {
    "left" : "Application application = getApplication(appName);",
    "right" : "Application application = getApplication(appName);",
    "info" : "VariableDeclarationStatement[22629-22679]:VariableDeclarationStatement[22629-22679]"
  }, {
    "left" : "if (application != null)",
    "right" : "if (application != null)",
    "info" : "IfStatement[22692-22785]:IfStatement[22692-22785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22717-22785]:Block[22717-22785]"
  }, {
    "left" : "result = application.getInstances();",
    "right" : "result = application.getInstances();",
    "info" : "ExpressionStatement[22735-22771]:ExpressionStatement[22735-22771]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[22798-22812]:ReturnStatement[22798-22812]"
  }, {
    "left" : "String instanceVipAddress;",
    "right" : "String instanceVipAddress;",
    "info" : "VariableDeclarationStatement[22832-22858]:VariableDeclarationStatement[22832-22858]"
  }, {
    "left" : "for (Application app : getApplications().getRegisteredApplications())",
    "right" : "for (Application app : getApplications().getRegisteredApplications())",
    "info" : "EnhancedForStatement[22867-24062]:EnhancedForStatement[22867-24062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22937-24062]:Block[22937-24062]"
  }, {
    "left" : "for (InstanceInfo instance : app.getInstances())",
    "right" : "for (InstanceInfo instance : app.getInstances())",
    "info" : "EnhancedForStatement[22951-24052]:EnhancedForStatement[22951-24052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23000-24052]:Block[23000-24052]"
  }, {
    "left" : "if (secure)",
    "right" : "if (secure)",
    "info" : "IfStatement[23018-23214]:IfStatement[23018-23214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23030-23122]:Block[23030-23122]"
  }, {
    "left" : "instanceVipAddress = instance.getSecureVipAddress();",
    "right" : "instanceVipAddress = instance.getSecureVipAddress();",
    "info" : "ExpressionStatement[23052-23104]:ExpressionStatement[23052-23104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23128-23214]:Block[23128-23214]"
  }, {
    "left" : "instanceVipAddress = instance.getVIPAddress();",
    "right" : "instanceVipAddress = instance.getVIPAddress();",
    "info" : "ExpressionStatement[23150-23196]:ExpressionStatement[23150-23196]"
  }, {
    "left" : "if (instanceVipAddress == null)",
    "right" : "if (instanceVipAddress == null)",
    "info" : "IfStatement[23231-23312]:IfStatement[23231-23312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23263-23312]:Block[23263-23312]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23285-23294]:ContinueStatement[23285-23294]"
  }, {
    "left" : "String[] instanceVipAddresses = instanceVipAddress\n                        .split(COMMA_STRING);",
    "right" : "String[] instanceVipAddresses = instanceVipAddress\n                        .split(COMMA_STRING);",
    "info" : "VariableDeclarationStatement[23329-23425]:VariableDeclarationStatement[23329-23425]"
  }, {
    "left" : "for (String vipAddressFromList : instanceVipAddresses)",
    "right" : "for (String vipAddressFromList : instanceVipAddresses)",
    "info" : "EnhancedForStatement[23704-24038]:EnhancedForStatement[23704-24038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23759-24038]:Block[23759-24038]"
  }, {
    "left" : "if (vipAddress.equalsIgnoreCase(vipAddressFromList.trim())\n                            && appName.equalsIgnoreCase(instance.getAppName()))",
    "right" : "if (vipAddress.equalsIgnoreCase(vipAddressFromList.trim())\n                            && appName.equalsIgnoreCase(instance.getAppName()))",
    "info" : "IfStatement[23781-24020]:IfStatement[23781-24020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23920-24020]:Block[23920-24020]"
  }, {
    "left" : "result.add(instance);",
    "right" : "result.add(instance);",
    "info" : "ExpressionStatement[23946-23967]:ExpressionStatement[23946-23967]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23992-23998]:BreakStatement[23992-23998]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[24071-24085]:ReturnStatement[24071-24085]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24261-24270]:MarkerAnnotation[24261-24270]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24275-24281]:Modifier[24275-24281]"
  }, {
    "left" : "InstanceInfo",
    "right" : "InstanceInfo",
    "info" : "SimpleType[24282-24294]:SimpleType[24282-24294]"
  }, {
    "left" : "getNextServerFromEureka",
    "right" : "getNextServerFromEureka",
    "info" : "SimpleName[24295-24318]:SimpleName[24295-24318]"
  }, {
    "left" : "String virtualHostname",
    "right" : "String virtualHostname",
    "info" : "SingleVariableDeclaration[24319-24341]:SingleVariableDeclaration[24319-24341]"
  }, {
    "left" : "boolean secure",
    "right" : "boolean secure",
    "info" : "SingleVariableDeclaration[24343-24357]:SingleVariableDeclaration[24343-24357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24359-24942]:Block[24359-24942]"
  }, {
    "left" : "List<InstanceInfo> instanceInfoList = this.getInstancesByVipAddress(\n                virtualHostname, secure);",
    "right" : "List<InstanceInfo> instanceInfoList = this.getInstancesByVipAddress(\n                virtualHostname, secure);",
    "info" : "VariableDeclarationStatement[24369-24479]:VariableDeclarationStatement[24369-24479]"
  }, {
    "left" : "if (instanceInfoList == null || instanceInfoList.isEmpty())",
    "right" : "if (instanceInfoList == null || instanceInfoList.isEmpty())",
    "info" : "IfStatement[24488-24679]:IfStatement[24488-24679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24548-24679]:Block[24548-24679]"
  }, {
    "left" : "throw new RuntimeException(\"No matches for the virtual host name :\"\n                    + virtualHostname);",
    "right" : "throw new RuntimeException(\"No matches for the virtual host name :\"\n                    + virtualHostname);",
    "info" : "ThrowStatement[24562-24669]:ThrowStatement[24562-24669]"
  }, {
    "left" : "Applications apps = this.localRegionApps.get();",
    "right" : "Applications apps = this.localRegionApps.get();",
    "info" : "VariableDeclarationStatement[24688-24735]:VariableDeclarationStatement[24688-24735]"
  }, {
    "left" : "int index = (int) (apps.getNextIndex(virtualHostname.toUpperCase(Locale.ROOT),\n                secure).incrementAndGet() % instanceInfoList.size());",
    "right" : "int index = (int) (apps.getNextIndex(virtualHostname.toUpperCase(Locale.ROOT),\n                secure).incrementAndGet() % instanceInfoList.size());",
    "info" : "VariableDeclarationStatement[24744-24892]:VariableDeclarationStatement[24744-24892]"
  }, {
    "left" : "return instanceInfoList.get(index);",
    "right" : "return instanceInfoList.get(index);",
    "info" : "ReturnStatement[24901-24936]:ReturnStatement[24901-24936]"
  }, {
    "left" : "/**\n     * Get all applications registered with a specific eureka service.\n     *\n     * @param serviceUrl\n     *            - The string representation of the service url.\n     * @return - The registry information containing all applications.\n     */",
    "right" : "/**\n     * Get all applications registered with a specific eureka service.\n     *\n     * @param serviceUrl\n     *            - The string representation of the service url.\n     * @return - The registry information containing all applications.\n     */",
    "info" : "Javadoc[24948-25199]:Javadoc[24948-25199]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25204-25213]:MarkerAnnotation[25204-25213]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25218-25224]:Modifier[25218-25224]"
  }, {
    "left" : "Applications",
    "right" : "Applications",
    "info" : "SimpleType[25225-25237]:SimpleType[25225-25237]"
  }, {
    "left" : "getApplications",
    "right" : "getApplications",
    "info" : "SimpleName[25238-25253]:SimpleName[25238-25253]"
  }, {
    "left" : "String serviceUrl",
    "right" : "String serviceUrl",
    "info" : "SingleVariableDeclaration[25254-25271]:SingleVariableDeclaration[25254-25271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25273-26001]:Block[25273-26001]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[25283-25314]:VariableDeclarationStatement[25283-25314]"
  }, {
    "left" : "Applications apps = null;",
    "right" : "Applications apps = null;",
    "info" : "VariableDeclarationStatement[25323-25348]:VariableDeclarationStatement[25323-25348]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[25357-25974]:TryStatement[25357-25974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25361-25633]:Block[25361-25633]"
  }, {
    "left" : "response = makeRemoteCall(Action.Refresh);",
    "right" : "response = makeRemoteCall(Action.Refresh);",
    "info" : "ExpressionStatement[25375-25417]:ExpressionStatement[25375-25417]"
  }, {
    "left" : "apps = response.getEntity(Applications.class);",
    "right" : "apps = response.getEntity(Applications.class);",
    "info" : "ExpressionStatement[25430-25476]:ExpressionStatement[25430-25476]"
  }, {
    "left" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
    "right" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
    "info" : "ExpressionStatement[25489-25598]:ExpressionStatement[25489-25598]"
  }, {
    "left" : "return apps;",
    "right" : "return apps;",
    "info" : "ReturnStatement[25611-25623]:ReturnStatement[25611-25623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25655-25870]:Block[25655-25870]"
  }, {
    "left" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + th.getMessage(), th);",
    "right" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + th.getMessage(), th);",
    "info" : "ExpressionStatement[25669-25859]:ExpressionStatement[25669-25859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25879-25974]:Block[25879-25974]"
  }, {
    "left" : "if (response != null)",
    "right" : "if (response != null)",
    "info" : "IfStatement[25893-25964]:IfStatement[25893-25964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25915-25964]:Block[25915-25964]"
  }, {
    "left" : "response.close();",
    "right" : "response.close();",
    "info" : "ExpressionStatement[25933-25950]:ExpressionStatement[25933-25950]"
  }, {
    "left" : "return apps;",
    "right" : "return apps;",
    "info" : "ReturnStatement[25983-25995]:ReturnStatement[25983-25995]"
  }, {
    "left" : "/**\n     * Checks to see if the eureka client registration is enabled.\n     *\n     * @param myInfo\n     *            - The instance info object\n     * @return - true, if the instance should be registered with eureka, false\n     *         otherwise\n     */",
    "right" : "/**\n     * Checks to see if the eureka client registration is enabled.\n     *\n     * @param myInfo\n     *            - The instance info object\n     * @return - true, if the instance should be registered with eureka, false\n     *         otherwise\n     */",
    "info" : "Javadoc[26007-26262]:Javadoc[26007-26262]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26267-26274]:Modifier[26267-26274]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26275-26282]:PrimitiveType[26275-26282]"
  }, {
    "left" : "shouldRegister",
    "right" : "shouldRegister",
    "info" : "SimpleName[26283-26297]:SimpleName[26283-26297]"
  }, {
    "left" : "InstanceInfo myInfo",
    "right" : "InstanceInfo myInfo",
    "info" : "SingleVariableDeclaration[26298-26317]:SingleVariableDeclaration[26298-26317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26319-26440]:Block[26319-26440]"
  }, {
    "left" : "if (!clientConfig.shouldRegisterWithEureka())",
    "right" : "if (!clientConfig.shouldRegisterWithEureka())",
    "info" : "IfStatement[26329-26412]:IfStatement[26329-26412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26375-26412]:Block[26375-26412]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26389-26402]:ReturnStatement[26389-26402]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26422-26434]:ReturnStatement[26422-26434]"
  }, {
    "left" : "/**\n     * Register with the eureka service by making the appropriate REST call.\n     */",
    "right" : "/**\n     * Register with the eureka service by making the appropriate REST call.\n     */",
    "info" : "Javadoc[26446-26534]:Javadoc[26446-26534]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26539-26543]:PrimitiveType[26539-26543]"
  }, {
    "left" : "register",
    "right" : "register",
    "info" : "SimpleName[26544-26552]:SimpleName[26544-26552]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[26562-26571]:SimpleType[26562-26571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26572-27244]:Block[26572-27244]"
  }, {
    "left" : "logger.info(PREFIX + appPathIdentifier + \": registering service...\");",
    "right" : "logger.info(PREFIX + appPathIdentifier + \": registering service...\");",
    "info" : "ExpressionStatement[26582-26651]:ExpressionStatement[26582-26651]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[26660-26691]:VariableDeclarationStatement[26660-26691]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[26700-27238]:TryStatement[26700-27238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26704-26978]:Block[26704-26978]"
  }, {
    "left" : "response = makeRemoteCall(Action.Register);",
    "right" : "response = makeRemoteCall(Action.Register);",
    "info" : "ExpressionStatement[26718-26761]:ExpressionStatement[26718-26761]"
  }, {
    "left" : "isRegisteredWithDiscovery = true;",
    "right" : "isRegisteredWithDiscovery = true;",
    "info" : "ExpressionStatement[26774-26807]:ExpressionStatement[26774-26807]"
  }, {
    "left" : "logger.info(\"{} - registration status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
    "right" : "logger.info(\"{} - registration status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
    "info" : "ExpressionStatement[26820-26968]:ExpressionStatement[26820-26968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26999-27134]:Block[26999-27134]"
  }, {
    "left" : "logger.warn(\"{} - registration failed {}\", PREFIX + appPathIdentifier, e.getMessage(), e);",
    "right" : "logger.warn(\"{} - registration failed {}\", PREFIX + appPathIdentifier, e.getMessage(), e);",
    "info" : "ExpressionStatement[27013-27103]:ExpressionStatement[27013-27103]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[27116-27124]:ThrowStatement[27116-27124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27143-27238]:Block[27143-27238]"
  }, {
    "left" : "if (response != null)",
    "right" : "if (response != null)",
    "info" : "IfStatement[27157-27228]:IfStatement[27157-27228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27179-27228]:Block[27179-27228]"
  }, {
    "left" : "response.close();",
    "right" : "response.close();",
    "info" : "ExpressionStatement[27197-27214]:ExpressionStatement[27197-27214]"
  }, {
    "left" : "/**\n     * Renew with the eureka service by making the appropriate REST call\n     */",
    "right" : "/**\n     * Renew with the eureka service by making the appropriate REST call\n     */",
    "info" : "Javadoc[27250-27334]:Javadoc[27250-27334]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27339-27343]:PrimitiveType[27339-27343]"
  }, {
    "left" : "renew",
    "right" : "renew",
    "info" : "SimpleName[27344-27349]:SimpleName[27344-27349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27352-28193]:Block[27352-28193]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[27362-27393]:VariableDeclarationStatement[27362-27393]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[27402-28186]:TryStatement[27402-28186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27406-27955]:Block[27406-27955]"
  }, {
    "left" : "response = makeRemoteCall(Action.Renew);",
    "right" : "response = makeRemoteCall(Action.Renew);",
    "info" : "ExpressionStatement[27420-27460]:ExpressionStatement[27420-27460]"
  }, {
    "left" : "logger.debug(\"{} - Heartbeat status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
    "right" : "logger.debug(\"{} - Heartbeat status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
    "info" : "ExpressionStatement[27473-27619]:ExpressionStatement[27473-27619]"
  }, {
    "left" : "if (response == null)",
    "right" : "if (response == null)",
    "info" : "IfStatement[27632-27693]:IfStatement[27632-27693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27654-27693]:Block[27654-27693]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[27672-27679]:ReturnStatement[27672-27679]"
  }, {
    "left" : "if (response.getStatus() == 404)",
    "right" : "if (response.getStatus() == 404)",
    "info" : "IfStatement[27706-27945]:IfStatement[27706-27945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27739-27945]:Block[27739-27945]"
  }, {
    "left" : "REREGISTER_COUNTER.increment();",
    "right" : "REREGISTER_COUNTER.increment();",
    "info" : "ExpressionStatement[27757-27788]:ExpressionStatement[27757-27788]"
  }, {
    "left" : "logger.info(\"{} - Re-registering apps/{}\", PREFIX + appPathIdentifier, instanceInfo.getAppName());",
    "right" : "logger.info(\"{} - Re-registering apps/{}\", PREFIX + appPathIdentifier, instanceInfo.getAppName());",
    "info" : "ExpressionStatement[27805-27903]:ExpressionStatement[27805-27903]"
  }, {
    "left" : "register();",
    "right" : "register();",
    "info" : "ExpressionStatement[27920-27931]:ExpressionStatement[27920-27931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27976-28082]:Block[27976-28082]"
  }, {
    "left" : "logger.error(\"{} - was unable to send heartbeat!\", PREFIX + appPathIdentifier, e);",
    "right" : "logger.error(\"{} - was unable to send heartbeat!\", PREFIX + appPathIdentifier, e);",
    "info" : "ExpressionStatement[27990-28072]:ExpressionStatement[27990-28072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28091-28186]:Block[28091-28186]"
  }, {
    "left" : "if (response != null)",
    "right" : "if (response != null)",
    "info" : "IfStatement[28105-28176]:IfStatement[28105-28176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28127-28176]:Block[28127-28176]"
  }, {
    "left" : "response.close();",
    "right" : "response.close();",
    "info" : "ExpressionStatement[28145-28162]:ExpressionStatement[28145-28162]"
  }, {
    "left" : "/**\n     * Get the list of all eureka service urls from properties file for the eureka client to talk to.\n     *\n     * @param instanceZone The zone in which the client resides\n     * @param preferSameZone true if we have to prefer the same zone as the client, false otherwise\n     * @return The list of all eureka service urls for the eureka client to talk to\n     */",
    "right" : "/**\n     * Get the list of all eureka service urls from properties file for the eureka client to talk to.\n     *\n     * @param instanceZone The zone in which the client resides\n     * @param preferSameZone true if we have to prefer the same zone as the client, false otherwise\n     * @return The list of all eureka service urls for the eureka client to talk to\n     */",
    "info" : "Javadoc[28199-28567]:Javadoc[28199-28567]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28572-28581]:MarkerAnnotation[28572-28581]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28586-28592]:Modifier[28586-28592]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[28593-28605]:ParameterizedType[28593-28605]"
  }, {
    "left" : "getServiceUrlsFromConfig",
    "right" : "getServiceUrlsFromConfig",
    "info" : "SimpleName[28606-28630]:SimpleName[28606-28630]"
  }, {
    "left" : "String instanceZone",
    "right" : "String instanceZone",
    "info" : "SingleVariableDeclaration[28631-28650]:SingleVariableDeclaration[28631-28650]"
  }, {
    "left" : "boolean preferSameZone",
    "right" : "boolean preferSameZone",
    "info" : "SingleVariableDeclaration[28652-28674]:SingleVariableDeclaration[28652-28674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28676-30205]:Block[28676-30205]"
  }, {
    "left" : "List<String> orderedUrls = new ArrayList<String>();",
    "right" : "List<String> orderedUrls = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[28686-28737]:VariableDeclarationStatement[28686-28737]"
  }, {
    "left" : "String region = getRegion();",
    "right" : "String region = getRegion();",
    "info" : "VariableDeclarationStatement[28746-28774]:VariableDeclarationStatement[28746-28774]"
  }, {
    "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "info" : "VariableDeclarationStatement[28783-28865]:VariableDeclarationStatement[28783-28865]"
  }, {
    "left" : "if (availZones == null || availZones.length == 0)",
    "right" : "if (availZones == null || availZones.length == 0)",
    "info" : "IfStatement[28874-29014]:IfStatement[28874-29014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28924-29014]:Block[28924-29014]"
  }, {
    "left" : "availZones = new String[1];",
    "right" : "availZones = new String[1];",
    "info" : "ExpressionStatement[28938-28965]:ExpressionStatement[28938-28965]"
  }, {
    "left" : "availZones[0] = \"default\";",
    "right" : "availZones[0] = \"default\";",
    "info" : "ExpressionStatement[28978-29004]:ExpressionStatement[28978-29004]"
  }, {
    "left" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
    "right" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
    "info" : "ExpressionStatement[29023-29145]:ExpressionStatement[29023-29145]"
  }, {
    "left" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
    "right" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
    "info" : "VariableDeclarationStatement[29154-29245]:VariableDeclarationStatement[29154-29245]"
  }, {
    "left" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
    "right" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
    "info" : "VariableDeclarationStatement[29255-29365]:VariableDeclarationStatement[29255-29365]"
  }, {
    "left" : "if (serviceUrls != null)",
    "right" : "if (serviceUrls != null)",
    "info" : "IfStatement[29374-29455]:IfStatement[29374-29455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29399-29455]:Block[29399-29455]"
  }, {
    "left" : "orderedUrls.addAll(serviceUrls);",
    "right" : "orderedUrls.addAll(serviceUrls);",
    "info" : "ExpressionStatement[29413-29445]:ExpressionStatement[29413-29445]"
  }, {
    "left" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
    "right" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
    "info" : "VariableDeclarationStatement[29464-29565]:VariableDeclarationStatement[29464-29565]"
  }, {
    "left" : "while (currentOffset != myZoneOffset)",
    "right" : "while (currentOffset != myZoneOffset)",
    "info" : "WhileStatement[29574-30003]:WhileStatement[29574-30003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29612-30003]:Block[29612-30003]"
  }, {
    "left" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
    "right" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
    "info" : "ExpressionStatement[29626-29728]:ExpressionStatement[29626-29728]"
  }, {
    "left" : "if (serviceUrls != null)",
    "right" : "if (serviceUrls != null)",
    "info" : "IfStatement[29741-29830]:IfStatement[29741-29830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29766-29830]:Block[29766-29830]"
  }, {
    "left" : "orderedUrls.addAll(serviceUrls);",
    "right" : "orderedUrls.addAll(serviceUrls);",
    "info" : "ExpressionStatement[29784-29816]:ExpressionStatement[29784-29816]"
  }, {
    "left" : "if (currentOffset == (availZones.length - 1))",
    "right" : "if (currentOffset == (availZones.length - 1))",
    "info" : "IfStatement[29843-29993]:IfStatement[29843-29993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29889-29939]:Block[29889-29939]"
  }, {
    "left" : "currentOffset = 0;",
    "right" : "currentOffset = 0;",
    "info" : "ExpressionStatement[29907-29925]:ExpressionStatement[29907-29925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29945-29993]:Block[29945-29993]"
  }, {
    "left" : "currentOffset++;",
    "right" : "currentOffset++;",
    "info" : "ExpressionStatement[29963-29979]:ExpressionStatement[29963-29979]"
  }, {
    "left" : "if (orderedUrls.size() < 1)",
    "right" : "if (orderedUrls.size() < 1)",
    "info" : "IfStatement[30013-30171]:IfStatement[30013-30171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30041-30171]:Block[30041-30171]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
    "right" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
    "info" : "ThrowStatement[30055-30161]:ThrowStatement[30055-30161]"
  }, {
    "left" : "return orderedUrls;",
    "right" : "return orderedUrls;",
    "info" : "ReturnStatement[30180-30199]:ReturnStatement[30180-30199]"
  }, {
    "left" : "/**\n     * @deprecated use {@link #getServiceUrlsFromConfig(String, boolean)} instead.\n     */",
    "right" : "/**\n     * @deprecated use {@link #getServiceUrlsFromConfig(String, boolean)} instead.\n     */",
    "info" : "Javadoc[30211-30305]:Javadoc[30211-30305]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[30310-30321]:MarkerAnnotation[30310-30321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30326-30332]:Modifier[30326-30332]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30333-30339]:Modifier[30333-30339]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[30340-30352]:ParameterizedType[30340-30352]"
  }, {
    "left" : "getEurekaServiceUrlsFromConfig",
    "right" : "getEurekaServiceUrlsFromConfig",
    "info" : "SimpleName[30353-30383]:SimpleName[30353-30383]"
  }, {
    "left" : "String instanceZone",
    "right" : "String instanceZone",
    "info" : "SingleVariableDeclaration[30384-30403]:SingleVariableDeclaration[30384-30403]"
  }, {
    "left" : "boolean preferSameZone",
    "right" : "boolean preferSameZone",
    "info" : "SingleVariableDeclaration[30405-30427]:SingleVariableDeclaration[30405-30427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30429-31958]:Block[30429-31958]"
  }, {
    "left" : "List<String> orderedUrls = new ArrayList<String>();",
    "right" : "List<String> orderedUrls = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[30439-30490]:VariableDeclarationStatement[30439-30490]"
  }, {
    "left" : "String region = getRegion();",
    "right" : "String region = getRegion();",
    "info" : "VariableDeclarationStatement[30499-30527]:VariableDeclarationStatement[30499-30527]"
  }, {
    "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "info" : "VariableDeclarationStatement[30536-30618]:VariableDeclarationStatement[30536-30618]"
  }, {
    "left" : "if (availZones == null || availZones.length == 0)",
    "right" : "if (availZones == null || availZones.length == 0)",
    "info" : "IfStatement[30627-30767]:IfStatement[30627-30767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30677-30767]:Block[30677-30767]"
  }, {
    "left" : "availZones = new String[1];",
    "right" : "availZones = new String[1];",
    "info" : "ExpressionStatement[30691-30718]:ExpressionStatement[30691-30718]"
  }, {
    "left" : "availZones[0] = \"default\";",
    "right" : "availZones[0] = \"default\";",
    "info" : "ExpressionStatement[30731-30757]:ExpressionStatement[30731-30757]"
  }, {
    "left" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
    "right" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
    "info" : "ExpressionStatement[30776-30898]:ExpressionStatement[30776-30898]"
  }, {
    "left" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
    "right" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
    "info" : "VariableDeclarationStatement[30907-30998]:VariableDeclarationStatement[30907-30998]"
  }, {
    "left" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
    "right" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
    "info" : "VariableDeclarationStatement[31008-31118]:VariableDeclarationStatement[31008-31118]"
  }, {
    "left" : "if (serviceUrls != null)",
    "right" : "if (serviceUrls != null)",
    "info" : "IfStatement[31127-31208]:IfStatement[31127-31208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31152-31208]:Block[31152-31208]"
  }, {
    "left" : "orderedUrls.addAll(serviceUrls);",
    "right" : "orderedUrls.addAll(serviceUrls);",
    "info" : "ExpressionStatement[31166-31198]:ExpressionStatement[31166-31198]"
  }, {
    "left" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
    "right" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
    "info" : "VariableDeclarationStatement[31217-31318]:VariableDeclarationStatement[31217-31318]"
  }, {
    "left" : "while (currentOffset != myZoneOffset)",
    "right" : "while (currentOffset != myZoneOffset)",
    "info" : "WhileStatement[31327-31756]:WhileStatement[31327-31756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31365-31756]:Block[31365-31756]"
  }, {
    "left" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
    "right" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
    "info" : "ExpressionStatement[31379-31481]:ExpressionStatement[31379-31481]"
  }, {
    "left" : "if (serviceUrls != null)",
    "right" : "if (serviceUrls != null)",
    "info" : "IfStatement[31494-31583]:IfStatement[31494-31583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31519-31583]:Block[31519-31583]"
  }, {
    "left" : "orderedUrls.addAll(serviceUrls);",
    "right" : "orderedUrls.addAll(serviceUrls);",
    "info" : "ExpressionStatement[31537-31569]:ExpressionStatement[31537-31569]"
  }, {
    "left" : "if (currentOffset == (availZones.length - 1))",
    "right" : "if (currentOffset == (availZones.length - 1))",
    "info" : "IfStatement[31596-31746]:IfStatement[31596-31746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31642-31692]:Block[31642-31692]"
  }, {
    "left" : "currentOffset = 0;",
    "right" : "currentOffset = 0;",
    "info" : "ExpressionStatement[31660-31678]:ExpressionStatement[31660-31678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31698-31746]:Block[31698-31746]"
  }, {
    "left" : "currentOffset++;",
    "right" : "currentOffset++;",
    "info" : "ExpressionStatement[31716-31732]:ExpressionStatement[31716-31732]"
  }, {
    "left" : "if (orderedUrls.size() < 1)",
    "right" : "if (orderedUrls.size() < 1)",
    "info" : "IfStatement[31766-31924]:IfStatement[31766-31924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31794-31924]:Block[31794-31924]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
    "right" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
    "info" : "ThrowStatement[31808-31914]:ThrowStatement[31808-31914]"
  }, {
    "left" : "return orderedUrls;",
    "right" : "return orderedUrls;",
    "info" : "ReturnStatement[31933-31952]:ReturnStatement[31933-31952]"
  }, {
    "left" : "/**\n     * Shuts down Eureka Client. Also sends a deregistration request to the\n     * eureka server.\n     */",
    "right" : "/**\n     * Shuts down Eureka Client. Also sends a deregistration request to the\n     * eureka server.\n     */",
    "info" : "Javadoc[31964-32073]:Javadoc[31964-32073]"
  }, {
    "left" : "@PreDestroy",
    "right" : "@PreDestroy",
    "info" : "MarkerAnnotation[32078-32089]:MarkerAnnotation[32078-32089]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32094-32103]:MarkerAnnotation[32094-32103]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32108-32114]:Modifier[32108-32114]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32115-32119]:PrimitiveType[32115-32119]"
  }, {
    "left" : "shutdown",
    "right" : "shutdown",
    "info" : "SimpleName[32120-32128]:SimpleName[32120-32128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32131-32645]:Block[32131-32645]"
  }, {
    "left" : "if (statusChangeListener != null)",
    "right" : "if (statusChangeListener != null)",
    "info" : "IfStatement[32141-32297]:IfStatement[32141-32297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32175-32297]:Block[32175-32297]"
  }, {
    "left" : "ApplicationInfoManager.getInstance().unregisterStatusChangeListener(statusChangeListener.getId());",
    "right" : "ApplicationInfoManager.getInstance().unregisterStatusChangeListener(statusChangeListener.getId());",
    "info" : "ExpressionStatement[32189-32287]:ExpressionStatement[32189-32287]"
  }, {
    "left" : "cancelScheduledTasks();",
    "right" : "cancelScheduledTasks();",
    "info" : "ExpressionStatement[32307-32330]:ExpressionStatement[32307-32330]"
  }, {
    "left" : "if (instanceInfo != null && shouldRegister(instanceInfo))",
    "right" : "if (instanceInfo != null && shouldRegister(instanceInfo))",
    "info" : "IfStatement[32377-32529]:IfStatement[32377-32529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32435-32529]:Block[32435-32529]"
  }, {
    "left" : "instanceInfo.setStatus(InstanceStatus.DOWN);",
    "right" : "instanceInfo.setStatus(InstanceStatus.DOWN);",
    "info" : "ExpressionStatement[32449-32493]:ExpressionStatement[32449-32493]"
  }, {
    "left" : "unregister();",
    "right" : "unregister();",
    "info" : "ExpressionStatement[32506-32519]:ExpressionStatement[32506-32519]"
  }, {
    "left" : "if (discoveryJerseyClient != null)",
    "right" : "if (discoveryJerseyClient != null)",
    "info" : "IfStatement[32539-32639]:IfStatement[32539-32639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32574-32639]:Block[32574-32639]"
  }, {
    "left" : "discoveryJerseyClient.destroyResources();",
    "right" : "discoveryJerseyClient.destroyResources();",
    "info" : "ExpressionStatement[32588-32629]:ExpressionStatement[32588-32629]"
  }, {
    "left" : "/**\n     * unregister w/ the eureka service.\n     */",
    "right" : "/**\n     * unregister w/ the eureka service.\n     */",
    "info" : "Javadoc[32651-32703]:Javadoc[32651-32703]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32708-32712]:PrimitiveType[32708-32712]"
  }, {
    "left" : "unregister",
    "right" : "unregister",
    "info" : "SimpleName[32713-32723]:SimpleName[32713-32723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32726-33336]:Block[32726-33336]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[32736-32767]:VariableDeclarationStatement[32736-32767]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[32776-33330]:TryStatement[32776-33330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32780-33070]:Block[32780-33070]"
  }, {
    "left" : "response = makeRemoteCall(Action.Cancel);",
    "right" : "response = makeRemoteCall(Action.Cancel);",
    "info" : "ExpressionStatement[32794-32835]:ExpressionStatement[32794-32835]"
  }, {
    "left" : "logger.info(PREFIX\n                    + appPathIdentifier\n                    + \" - deregister  status: \"\n                    + (response != null ? response.getStatus()\n                    : \"not registered\"));",
    "right" : "logger.info(PREFIX\n                    + appPathIdentifier\n                    + \" - deregister  status: \"\n                    + (response != null ? response.getStatus()\n                    : \"not registered\"));",
    "info" : "ExpressionStatement[32849-33060]:ExpressionStatement[32849-33060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33091-33226]:Block[33091-33226]"
  }, {
    "left" : "logger.error(PREFIX + appPathIdentifier\n                    + \" - de-registration failed\" + e.getMessage(), e);",
    "right" : "logger.error(PREFIX + appPathIdentifier\n                    + \" - de-registration failed\" + e.getMessage(), e);",
    "info" : "ExpressionStatement[33105-33216]:ExpressionStatement[33105-33216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33235-33330]:Block[33235-33330]"
  }, {
    "left" : "if (response != null)",
    "right" : "if (response != null)",
    "info" : "IfStatement[33249-33320]:IfStatement[33249-33320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33271-33320]:Block[33271-33320]"
  }, {
    "left" : "response.close();",
    "right" : "response.close();",
    "info" : "ExpressionStatement[33289-33306]:ExpressionStatement[33289-33306]"
  }, {
    "left" : "/**\n     * Fetches the registry information.\n     *\n     * <p>\n     * This method tries to get only deltas after the first fetch unless there\n     * is an issue in reconciling eureka server and client registry information.\n     * </p>\n     *\n     * @param forceFullRegistryFetch Forces a full registry fetch.\n     *\n     * @return true if the registry was fetched\n     */",
    "right" : "/**\n     * Fetches the registry information.\n     *\n     * <p>\n     * This method tries to get only deltas after the first fetch unless there\n     * is an issue in reconciling eureka server and client registry information.\n     * </p>\n     *\n     * @param forceFullRegistryFetch Forces a full registry fetch.\n     *\n     * @return true if the registry was fetched\n     */",
    "info" : "Javadoc[33342-33713]:Javadoc[33342-33713]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33718-33725]:Modifier[33718-33725]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33726-33733]:PrimitiveType[33726-33733]"
  }, {
    "left" : "fetchRegistry",
    "right" : "fetchRegistry",
    "info" : "SimpleName[33734-33747]:SimpleName[33734-33747]"
  }, {
    "left" : "boolean forceFullRegistryFetch",
    "right" : "boolean forceFullRegistryFetch",
    "info" : "SingleVariableDeclaration[33748-33778]:SingleVariableDeclaration[33748-33778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33780-36014]:Block[33780-36224]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[33790-33821]:VariableDeclarationStatement[33790-33821]"
  }, {
    "left" : "Stopwatch tracer = FETCH_REGISTRY_TIMER.start();",
    "right" : "Stopwatch tracer = FETCH_REGISTRY_TIMER.start();",
    "info" : "VariableDeclarationStatement[33830-33878]:VariableDeclarationStatement[33830-33878]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[33888-35987]:TryStatement[33888-36197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33892-35592]:Block[33892-35802]"
  }, {
    "left" : "Applications applications = getApplications();",
    "right" : "Applications applications = getApplications();",
    "info" : "VariableDeclarationStatement[34010-34056]:VariableDeclarationStatement[34010-34056]"
  }, {
    "left" : "if (clientConfig.shouldDisableDelta()\n                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))\n                    || forceFullRegistryFetch\n                    || (applications == null)\n                    || (applications.getRegisteredApplications().size() == 0)\n                    || (applications.getVersion() == -1))",
    "right" : "if (clientConfig.shouldDisableDelta()\n                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))\n                    || forceFullRegistryFetch\n                    || (applications == null)\n                    || (applications.getRegisteredApplications().size() == 0)\n                    || (applications.getVersion() == -1))",
    "info" : "IfStatement[34070-35303]:IfStatement[34070-35303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34514-35222]:Block[34514-35222]"
  }, {
    "left" : "logger.info(\"Disable delta property : {}\", clientConfig.shouldDisableDelta());",
    "right" : "logger.info(\"Disable delta property : {}\", clientConfig.shouldDisableDelta());",
    "info" : "ExpressionStatement[34532-34610]:ExpressionStatement[34532-34610]"
  }, {
    "left" : "logger.info(\"Single vip registry refresh property : {}\", clientConfig.getRegistryRefreshSingleVipAddress());",
    "right" : "logger.info(\"Single vip registry refresh property : {}\", clientConfig.getRegistryRefreshSingleVipAddress());",
    "info" : "ExpressionStatement[34627-34735]:ExpressionStatement[34627-34735]"
  }, {
    "left" : "logger.info(\"Force full registry fetch : {}\", forceFullRegistryFetch);",
    "right" : "logger.info(\"Force full registry fetch : {}\", forceFullRegistryFetch);",
    "info" : "ExpressionStatement[34752-34822]:ExpressionStatement[34752-34822]"
  }, {
    "left" : "logger.info(\"Application is null : {}\", (applications == null));",
    "right" : "logger.info(\"Application is null : {}\", (applications == null));",
    "info" : "ExpressionStatement[34839-34903]:ExpressionStatement[34839-34903]"
  }, {
    "left" : "logger.info(\"Registered Applications size is zero : {}\",\n                        (applications.getRegisteredApplications().size() == 0));",
    "right" : "logger.info(\"Registered Applications size is zero : {}\",\n                        (applications.getRegisteredApplications().size() == 0));",
    "info" : "ExpressionStatement[34920-35057]:ExpressionStatement[34920-35057]"
  }, {
    "left" : "logger.info(\"Application version is -1: {}\", (applications.getVersion() == -1));",
    "right" : "logger.info(\"Application version is -1: {}\", (applications.getVersion() == -1));",
    "info" : "ExpressionStatement[35074-35154]:ExpressionStatement[35074-35154]"
  }, {
    "left" : "response = getAndStoreFullRegistry();",
    "right" : "response = getAndStoreFullRegistry();",
    "info" : "ExpressionStatement[35171-35208]:ExpressionStatement[35171-35208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35228-35303]:Block[35228-35303]"
  }, {
    "left" : "response = getAndUpdateDelta(applications);",
    "right" : "response = getAndUpdateDelta(applications);",
    "info" : "ExpressionStatement[35246-35289]:ExpressionStatement[35246-35289]"
  }, {
    "left" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
    "right" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
    "info" : "ExpressionStatement[35316-35382]:ExpressionStatement[35316-35382]"
  }, {
    "left" : "logTotalInstances();",
    "right" : "logTotalInstances();",
    "info" : "ExpressionStatement[35395-35415]:ExpressionStatement[35395-35415]"
  }, {
    "left" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
    "right" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
    "info" : "ExpressionStatement[35429-35538]:ExpressionStatement[35429-35538]"
  }, {
    "left" : "updateInstanceRemoteStatus();",
    "right" : "updateInstanceRemoteStatus();",
    "info" : "ExpressionStatement[35552-35581]:ExpressionStatement[35762-35791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35613-35851]:Block[35823-36061]"
  }, {
    "left" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + e.getMessage(), e);",
    "right" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + e.getMessage(), e);",
    "info" : "ExpressionStatement[35627-35815]:ExpressionStatement[35837-36025]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35828-35841]:ReturnStatement[36038-36051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35860-35987]:Block[36070-36197]"
  }, {
    "left" : "if (tracer != null)",
    "right" : "if (tracer != null)",
    "info" : "IfStatement[35874-35940]:IfStatement[36084-36150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35894-35940]:Block[36104-36150]"
  }, {
    "left" : "tracer.stop();",
    "right" : "tracer.stop();",
    "info" : "ExpressionStatement[35912-35926]:ExpressionStatement[36122-36136]"
  }, {
    "left" : "closeResponse(response);",
    "right" : "closeResponse(response);",
    "info" : "ExpressionStatement[35953-35977]:ExpressionStatement[36163-36187]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[35996-36008]:ReturnStatement[36206-36218]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36020-36027]:Modifier[36230-36237]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[36028-36040]:Modifier[36238-36250]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36041-36045]:PrimitiveType[36251-36255]"
  }, {
    "left" : "updateInstanceRemoteStatus",
    "right" : "updateInstanceRemoteStatus",
    "info" : "SimpleName[36046-36072]:SimpleName[36256-36282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36075-37304]:Block[36285-37283]"
  }, {
    "left" : "InstanceInfo.InstanceStatus currentRemoteInstanceStatus = null;",
    "right" : "InstanceInfo.InstanceStatus currentRemoteInstanceStatus = null;",
    "info" : "VariableDeclarationStatement[36174-36237]:VariableDeclarationStatement[36384-36447]"
  }, {
    "left" : "if (instanceInfo.getAppName() != null)",
    "right" : "if (instanceInfo.getAppName() != null)",
    "info" : "IfStatement[36246-36657]:IfStatement[36456-36867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36285-36657]:Block[36495-36867]"
  }, {
    "left" : "Application app = getApplication(instanceInfo.getAppName());",
    "right" : "Application app = getApplication(instanceInfo.getAppName());",
    "info" : "VariableDeclarationStatement[36299-36359]:VariableDeclarationStatement[36509-36569]"
  }, {
    "left" : "if (app != null)",
    "right" : "if (app != null)",
    "info" : "IfStatement[36372-36647]:IfStatement[36582-36857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36389-36647]:Block[36599-36857]"
  }, {
    "left" : "InstanceInfo remoteInstanceInfo = app.getByInstanceId(instanceInfo.getId());",
    "right" : "InstanceInfo remoteInstanceInfo = app.getByInstanceId(instanceInfo.getId());",
    "info" : "VariableDeclarationStatement[36407-36483]:VariableDeclarationStatement[36617-36693]"
  }, {
    "left" : "if (remoteInstanceInfo != null)",
    "right" : "if (remoteInstanceInfo != null)",
    "info" : "IfStatement[36500-36633]:IfStatement[36710-36843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36532-36633]:Block[36742-36843]"
  }, {
    "left" : "currentRemoteInstanceStatus = remoteInstanceInfo.getStatus();",
    "right" : "currentRemoteInstanceStatus = remoteInstanceInfo.getStatus();",
    "info" : "ExpressionStatement[36554-36615]:ExpressionStatement[36764-36825]"
  }, {
    "left" : "if (currentRemoteInstanceStatus == null)",
    "right" : "if (currentRemoteInstanceStatus == null)",
    "info" : "IfStatement[36666-36797]:IfStatement[36876-37007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36707-36797]:Block[36917-37007]"
  }, {
    "left" : "currentRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
    "right" : "currentRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
    "info" : "ExpressionStatement[36721-36787]:ExpressionStatement[36931-36997]"
  }, {
    "left" : "if (lastRemoteInstanceStatus != currentRemoteInstanceStatus)",
    "right" : "if (lastRemoteInstanceStatus != currentRemoteInstanceStatus)",
    "info" : "IfStatement[36843-37298]:IfStatement[37053-37277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36904-37298]:Block[37114-37277]"
  }, {
    "left" : "if (eventBus != null)",
    "right" : "if (eventBus != null)",
    "info" : "IfStatement[36940-37178]:IfStatement[84929-85082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36962-37178]:Block[84951-85082]"
  }, {
    "left" : "StatusChangeEvent event = new StatusChangeEvent(lastRemoteInstanceStatus,\n                            currentRemoteInstanceStatus);",
    "right" : "StatusChangeEvent event = new StatusChangeEvent(oldStatus, newStatus);",
    "info" : "VariableDeclarationStatement[36984-37115]:VariableDeclarationStatement[84965-85035]"
  }, {
    "left" : "lastRemoteInstanceStatus",
    "right" : "lastRemoteInstanceStatus",
    "info" : "SimpleName[37032-37056]:SimpleName[37147-37171]"
  }, {
    "left" : "currentRemoteInstanceStatus",
    "right" : "currentRemoteInstanceStatus",
    "info" : "SimpleName[37086-37113]:SimpleName[37173-37200]"
  }, {
    "left" : "eventBus.publish(event);",
    "right" : "eventBus.publish(event);",
    "info" : "ExpressionStatement[37136-37160]:ExpressionStatement[85048-85072]"
  }, {
    "left" : "lastRemoteInstanceStatus = currentRemoteInstanceStatus;",
    "right" : "lastRemoteInstanceStatus = currentRemoteInstanceStatus;",
    "info" : "ExpressionStatement[37219-37274]:ExpressionStatement[37212-37267]"
  }, {
    "left" : "/**\n     * @return Return he current instance status as seen on the Eureka server.\n     */",
    "right" : "/**\n     * @return Return he current instance status as seen on the Eureka server.\n     */",
    "info" : "Javadoc[37310-37400]:Javadoc[37289-37379]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37405-37414]:MarkerAnnotation[37384-37393]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37419-37425]:Modifier[37398-37404]"
  }, {
    "left" : "InstanceInfo.InstanceStatus",
    "right" : "InstanceInfo.InstanceStatus",
    "info" : "SimpleType[37426-37453]:SimpleType[37405-37432]"
  }, {
    "left" : "getInstanceRemoteStatus",
    "right" : "getInstanceRemoteStatus",
    "info" : "SimpleName[37454-37477]:SimpleName[37433-37456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37480-37528]:Block[37459-37507]"
  }, {
    "left" : "return lastRemoteInstanceStatus;",
    "right" : "return lastRemoteInstanceStatus;",
    "info" : "ReturnStatement[37490-37522]:ReturnStatement[37469-37501]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37534-37541]:Modifier[37513-37520]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[37542-37548]:SimpleType[37521-37527]"
  }, {
    "left" : "getReconcileHashCode",
    "right" : "getReconcileHashCode",
    "info" : "SimpleName[37549-37569]:SimpleName[37528-37548]"
  }, {
    "left" : "Applications applications",
    "right" : "Applications applications",
    "info" : "SingleVariableDeclaration[37570-37595]:SingleVariableDeclaration[37549-37574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37597-38050]:Block[37576-38029]"
  }, {
    "left" : "TreeMap<String, AtomicInteger> instanceCountMap = new TreeMap<String, AtomicInteger>();",
    "right" : "TreeMap<String, AtomicInteger> instanceCountMap = new TreeMap<String, AtomicInteger>();",
    "info" : "VariableDeclarationStatement[37607-37694]:VariableDeclarationStatement[37586-37673]"
  }, {
    "left" : "if (isFetchingRemoteRegionRegistries())",
    "right" : "if (isFetchingRemoteRegionRegistries())",
    "info" : "IfStatement[37703-37911]:IfStatement[37682-37890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37743-37911]:Block[37722-37890]"
  }, {
    "left" : "for (Applications remoteApp : remoteRegionVsApps.values())",
    "right" : "for (Applications remoteApp : remoteRegionVsApps.values())",
    "info" : "EnhancedForStatement[37757-37901]:EnhancedForStatement[37736-37880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37816-37901]:Block[37795-37880]"
  }, {
    "left" : "remoteApp.populateInstanceCountMap(instanceCountMap);",
    "right" : "remoteApp.populateInstanceCountMap(instanceCountMap);",
    "info" : "ExpressionStatement[37834-37887]:ExpressionStatement[37813-37866]"
  }, {
    "left" : "applications.populateInstanceCountMap(instanceCountMap);",
    "right" : "applications.populateInstanceCountMap(instanceCountMap);",
    "info" : "ExpressionStatement[37920-37976]:ExpressionStatement[37899-37955]"
  }, {
    "left" : "return Applications.getReconcileHashCode(instanceCountMap);",
    "right" : "return Applications.getReconcileHashCode(instanceCountMap);",
    "info" : "ReturnStatement[37985-38044]:ReturnStatement[37964-38023]"
  }, {
    "left" : "/**\n     * Gets the full registry information from the eureka server and stores it locally.\n     * When applying the full registry, the following flow is observed:\n     *\n     * if (update generation have not advanced (due to another thread))\n     *   atomically set the registry to the new registry\n     * fi\n     *\n     * @return the full registry information.\n     * @throws Throwable\n     *             on error.\n     */",
    "right" : "/**\n     * Gets the full registry information from the eureka server and stores it locally.\n     * When applying the full registry, the following flow is observed:\n     *\n     * if (update generation have not advanced (due to another thread))\n     *   atomically set the registry to the new registry\n     * fi\n     *\n     * @return the full registry information.\n     * @throws Throwable\n     *             on error.\n     */",
    "info" : "Javadoc[38056-38480]:Javadoc[38035-38459]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38485-38492]:Modifier[38464-38471]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[38493-38507]:SimpleType[38472-38486]"
  }, {
    "left" : "getAndStoreFullRegistry",
    "right" : "getAndStoreFullRegistry",
    "info" : "SimpleName[38508-38531]:SimpleName[38487-38510]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[38541-38550]:SimpleType[38520-38529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38551-39468]:Block[38530-39447]"
  }, {
    "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "info" : "VariableDeclarationStatement[38561-38622]:VariableDeclarationStatement[38540-38601]"
  }, {
    "left" : "ClientResponse response = makeRemoteCall(Action.Refresh);",
    "right" : "ClientResponse response = makeRemoteCall(Action.Refresh);",
    "info" : "VariableDeclarationStatement[38631-38688]:VariableDeclarationStatement[38610-38667]"
  }, {
    "left" : "logger.info(\"Getting all instance registry info from the eureka server\");",
    "right" : "logger.info(\"Getting all instance registry info from the eureka server\");",
    "info" : "ExpressionStatement[38697-38770]:ExpressionStatement[38676-38749]"
  }, {
    "left" : "Applications apps = null;",
    "right" : "Applications apps = null;",
    "info" : "VariableDeclarationStatement[38780-38805]:VariableDeclarationStatement[38759-38784]"
  }, {
    "left" : "if (response.getStatus() == Status.OK.getStatusCode())",
    "right" : "if (response.getStatus() == Status.OK.getStatusCode())",
    "info" : "IfStatement[38814-38939]:IfStatement[38793-38918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38869-38939]:Block[38848-38918]"
  }, {
    "left" : "apps = response.getEntity(Applications.class);",
    "right" : "apps = response.getEntity(Applications.class);",
    "info" : "ExpressionStatement[38883-38929]:ExpressionStatement[38862-38908]"
  }, {
    "left" : "if (apps == null)",
    "right" : "if (apps == null)",
    "info" : "IfStatement[38949-39365]:IfStatement[38928-39344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38967-39077]:Block[38946-39056]"
  }, {
    "left" : "logger.error(\"The application is null for some reason. Not storing this information\");",
    "right" : "logger.error(\"The application is null for some reason. Not storing this information\");",
    "info" : "ExpressionStatement[38981-39067]:ExpressionStatement[38960-39046]"
  }, {
    "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "info" : "IfStatement[39083-39365]:IfStatement[39062-39344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39180-39253]:Block[39159-39232]"
  }, {
    "left" : "localRegionApps.set(this.filterAndShuffle(apps));",
    "right" : "localRegionApps.set(this.filterAndShuffle(apps));",
    "info" : "ExpressionStatement[39194-39243]:ExpressionStatement[39173-39222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39259-39365]:Block[39238-39344]"
  }, {
    "left" : "logger.warn(\"Not updating applications as another thread is updating it already\");",
    "right" : "logger.warn(\"Not updating applications as another thread is updating it already\");",
    "info" : "ExpressionStatement[39273-39355]:ExpressionStatement[39252-39334]"
  }, {
    "left" : "logger.info(\"The response status is {}\", response.getStatus());",
    "right" : "logger.info(\"The response status is {}\", response.getStatus());",
    "info" : "ExpressionStatement[39374-39437]:ExpressionStatement[39353-39416]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[39446-39462]:ReturnStatement[39425-39441]"
  }, {
    "left" : "/**\n     * Get the delta registry information from the eureka server and update it locally.\n     * When applying the delta, the following flow is observed:\n     *\n     * if (update generation have not advanced (due to another thread))\n     *   atomically try to: update application with the delta and get reconcileHashCode\n     *   abort entire processing otherwise\n     *   do reconciliation if reconcileHashCode clash\n     * fi\n     *\n     * @return the client response\n     * @throws Throwable on error\n     */",
    "right" : "/**\n     * Get the delta registry information from the eureka server and update it locally.\n     * When applying the delta, the following flow is observed:\n     *\n     * if (update generation have not advanced (due to another thread))\n     *   atomically try to: update application with the delta and get reconcileHashCode\n     *   abort entire processing otherwise\n     *   do reconciliation if reconcileHashCode clash\n     * fi\n     *\n     * @return the client response\n     * @throws Throwable on error\n     */",
    "info" : "Javadoc[39474-39987]:Javadoc[39453-39966]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39992-39999]:Modifier[39971-39978]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[40000-40014]:SimpleType[39979-39993]"
  }, {
    "left" : "getAndUpdateDelta",
    "right" : "getAndUpdateDelta",
    "info" : "SimpleName[40015-40032]:SimpleName[39994-40011]"
  }, {
    "left" : "Applications applications",
    "right" : "Applications applications",
    "info" : "SingleVariableDeclaration[40033-40058]:SingleVariableDeclaration[40012-40037]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[40067-40076]:SimpleType[40046-40055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40077-41770]:Block[40056-41749]"
  }, {
    "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "info" : "VariableDeclarationStatement[40087-40148]:VariableDeclarationStatement[40066-40127]"
  }, {
    "left" : "ClientResponse response = makeRemoteCall(Action.Refresh_Delta);",
    "right" : "ClientResponse response = makeRemoteCall(Action.Refresh_Delta);",
    "info" : "VariableDeclarationStatement[40157-40220]:VariableDeclarationStatement[40136-40199]"
  }, {
    "left" : "Applications delta = null;",
    "right" : "Applications delta = null;",
    "info" : "VariableDeclarationStatement[40230-40256]:VariableDeclarationStatement[40209-40235]"
  }, {
    "left" : "if (response.getStatus() == Status.OK.getStatusCode())",
    "right" : "if (response.getStatus() == Status.OK.getStatusCode())",
    "info" : "IfStatement[40265-40391]:IfStatement[40244-40370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40320-40391]:Block[40299-40370]"
  }, {
    "left" : "delta = response.getEntity(Applications.class);",
    "right" : "delta = response.getEntity(Applications.class);",
    "info" : "ExpressionStatement[40334-40381]:ExpressionStatement[40313-40360]"
  }, {
    "left" : "if (delta == null)",
    "right" : "if (delta == null)",
    "info" : "IfStatement[40400-41738]:IfStatement[40379-41717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40419-40687]:Block[40398-40666]"
  }, {
    "left" : "logger.warn(\"The server does not allow the delta revision to be applied because it is not safe. \"\n                    + \"Hence got the full registry.\");",
    "right" : "logger.warn(\"The server does not allow the delta revision to be applied because it is not safe. \"\n                    + \"Hence got the full registry.\");",
    "info" : "ExpressionStatement[40433-40585]:ExpressionStatement[40412-40564]"
  }, {
    "left" : "this.closeResponse(response);",
    "right" : "this.closeResponse(response);",
    "info" : "ExpressionStatement[40598-40627]:ExpressionStatement[40577-40606]"
  }, {
    "left" : "response = getAndStoreFullRegistry();",
    "right" : "response = getAndStoreFullRegistry();",
    "info" : "ExpressionStatement[40640-40677]:ExpressionStatement[40619-40656]"
  }, {
    "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "info" : "IfStatement[40693-41738]:IfStatement[40672-41717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40790-41621]:Block[40769-41600]"
  }, {
    "left" : "String reconcileHashCode = \"\";",
    "right" : "String reconcileHashCode = \"\";",
    "info" : "VariableDeclarationStatement[40804-40834]:VariableDeclarationStatement[40783-40813]"
  }, {
    "left" : "if (fetchRegistryUpdateLock.tryLock())",
    "right" : "if (fetchRegistryUpdateLock.tryLock())",
    "info" : "IfStatement[40847-41280]:IfStatement[40826-41259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40886-41139]:Block[40865-41118]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[40904-41125]:TryStatement[40883-41104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40908-41043]:Block[40887-41022]"
  }, {
    "left" : "updateDelta(delta);",
    "right" : "updateDelta(delta);",
    "info" : "ExpressionStatement[40930-40949]:ExpressionStatement[40909-40928]"
  }, {
    "left" : "reconcileHashCode = getReconcileHashCode(applications);",
    "right" : "reconcileHashCode = getReconcileHashCode(applications);",
    "info" : "ExpressionStatement[40970-41025]:ExpressionStatement[40949-41004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41052-41125]:Block[41031-41104]"
  }, {
    "left" : "fetchRegistryUpdateLock.unlock();",
    "right" : "fetchRegistryUpdateLock.unlock();",
    "info" : "ExpressionStatement[41074-41107]:ExpressionStatement[41053-41086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41145-41280]:Block[41124-41259]"
  }, {
    "left" : "logger.warn(\"Cannot acquire update lock, aborting getAndUpdateDelta\");",
    "right" : "logger.warn(\"Cannot acquire update lock, aborting getAndUpdateDelta\");",
    "info" : "ExpressionStatement[41163-41233]:ExpressionStatement[41142-41212]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[41250-41266]:ReturnStatement[41229-41245]"
  }, {
    "left" : "if ((!reconcileHashCode.equals(delta.getAppsHashCode()))\n                    || clientConfig.shouldLogDeltaDiff())",
    "right" : "if ((!reconcileHashCode.equals(delta.getAppsHashCode()))\n                    || clientConfig.shouldLogDeltaDiff())",
    "info" : "IfStatement[41363-41611]:IfStatement[41342-41590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41478-41611]:Block[41457-41590]"
  }, {
    "left" : "response = reconcileAndLogDifference(response, delta, reconcileHashCode);",
    "right" : "response = reconcileAndLogDifference(response, delta, reconcileHashCode);",
    "info" : "ExpressionStatement[41496-41569]:ExpressionStatement[41475-41548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41627-41738]:Block[41606-41717]"
  }, {
    "left" : "logger.warn(\"Not updating application delta as another thread is updating it already\");",
    "right" : "logger.warn(\"Not updating application delta as another thread is updating it already\");",
    "info" : "ExpressionStatement[41641-41728]:ExpressionStatement[41620-41707]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[41748-41764]:ReturnStatement[41727-41743]"
  }, {
    "left" : "/**\n     * Logs the total number of non-filtered instances stored locally.\n     */",
    "right" : "/**\n     * Logs the total number of non-filtered instances stored locally.\n     */",
    "info" : "Javadoc[41776-41858]:Javadoc[41755-41837]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41863-41870]:Modifier[41842-41849]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41871-41875]:PrimitiveType[41850-41854]"
  }, {
    "left" : "logTotalInstances",
    "right" : "logTotalInstances",
    "info" : "SimpleName[41876-41893]:SimpleName[41855-41872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41896-42205]:Block[41875-42184]"
  }, {
    "left" : "int totInstances = 0;",
    "right" : "int totInstances = 0;",
    "info" : "VariableDeclarationStatement[41906-41927]:VariableDeclarationStatement[41885-41906]"
  }, {
    "left" : "for (Application application : getApplications().getRegisteredApplications())",
    "right" : "for (Application application : getApplications().getRegisteredApplications())",
    "info" : "EnhancedForStatement[41936-42102]:EnhancedForStatement[41915-42081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42014-42102]:Block[41993-42081]"
  }, {
    "left" : "totInstances += application.getInstancesAsIsFromEureka().size();",
    "right" : "totInstances += application.getInstancesAsIsFromEureka().size();",
    "info" : "ExpressionStatement[42028-42092]:ExpressionStatement[42007-42071]"
  }, {
    "left" : "logger.debug(\"The total number of all instances in the client now is {}\", totInstances);",
    "right" : "logger.debug(\"The total number of all instances in the client now is {}\", totInstances);",
    "info" : "ExpressionStatement[42111-42199]:ExpressionStatement[42090-42178]"
  }, {
    "left" : "/**\n     * Reconcile the eureka server and client registry information and logs the differences if any.\n     * When reconciling, the following flow is observed:\n     *\n     * make a remote call to the server for the full registry\n     * calculate and log differences\n     * if (update generation have not advanced (due to another thread))\n     *   atomically set the registry to the new registry\n     * fi\n     *\n     * @param response\n     *            the HTTP response after getting the full registry.\n     * @param delta\n     *            the last delta registry information received from the eureka\n     *            server.\n     * @param reconcileHashCode\n     *            the hashcode generated by the server for reconciliation.\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "right" : "/**\n     * Reconcile the eureka server and client registry information and logs the differences if any.\n     * When reconciling, the following flow is observed:\n     *\n     * make a remote call to the server for the full registry\n     * calculate and log differences\n     * if (update generation have not advanced (due to another thread))\n     *   atomically set the registry to the new registry\n     * fi\n     *\n     * @param response\n     *            the HTTP response after getting the full registry.\n     * @param delta\n     *            the last delta registry information received from the eureka\n     *            server.\n     * @param reconcileHashCode\n     *            the hashcode generated by the server for reconciliation.\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "info" : "Javadoc[42211-43069]:Javadoc[42190-43048]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43074-43081]:Modifier[43053-43060]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[43082-43096]:SimpleType[43061-43075]"
  }, {
    "left" : "reconcileAndLogDifference",
    "right" : "reconcileAndLogDifference",
    "info" : "SimpleName[43097-43122]:SimpleName[43076-43101]"
  }, {
    "left" : "ClientResponse response",
    "right" : "ClientResponse response",
    "info" : "SingleVariableDeclaration[43123-43146]:SingleVariableDeclaration[43102-43125]"
  }, {
    "left" : "Applications delta",
    "right" : "Applications delta",
    "info" : "SingleVariableDeclaration[43201-43219]:SingleVariableDeclaration[43180-43198]"
  }, {
    "left" : "String reconcileHashCode",
    "right" : "String reconcileHashCode",
    "info" : "SingleVariableDeclaration[43221-43245]:SingleVariableDeclaration[43200-43224]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[43254-43263]:SimpleType[43233-43242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43264-45077]:Block[43243-45056]"
  }, {
    "left" : "logger.warn(\n                \"The Reconcile hashcodes do not match, client : {}, server : {}. Getting the full registry\",\n                reconcileHashCode, delta.getAppsHashCode());",
    "right" : "logger.warn(\n                \"The Reconcile hashcodes do not match, client : {}, server : {}. Getting the full registry\",\n                reconcileHashCode, delta.getAppsHashCode());",
    "info" : "ExpressionStatement[43274-43456]:ExpressionStatement[43253-43435]"
  }, {
    "left" : "this.closeResponse(response);",
    "right" : "this.closeResponse(response);",
    "info" : "ExpressionStatement[43466-43495]:ExpressionStatement[43445-43474]"
  }, {
    "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
    "info" : "VariableDeclarationStatement[43505-43566]:VariableDeclarationStatement[43484-43545]"
  }, {
    "left" : "response = makeRemoteCall(Action.Refresh);",
    "right" : "response = makeRemoteCall(Action.Refresh);",
    "info" : "ExpressionStatement[43575-43617]:ExpressionStatement[43554-43596]"
  }, {
    "left" : "Applications serverApps = response.getEntity(Applications.class);",
    "right" : "Applications serverApps = response.getEntity(Applications.class);",
    "info" : "VariableDeclarationStatement[43626-43691]:VariableDeclarationStatement[43605-43670]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[43701-44436]:TryStatement[43680-44415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43705-44334]:Block[43684-44313]"
  }, {
    "left" : "Map<String, List<String>> reconcileDiffMap = getApplications().getReconcileMapDiff(serverApps);",
    "right" : "Map<String, List<String>> reconcileDiffMap = getApplications().getReconcileMapDiff(serverApps);",
    "info" : "VariableDeclarationStatement[43719-43814]:VariableDeclarationStatement[43698-43793]"
  }, {
    "left" : "String reconcileString = \"\";",
    "right" : "String reconcileString = \"\";",
    "info" : "VariableDeclarationStatement[43827-43855]:VariableDeclarationStatement[43806-43834]"
  }, {
    "left" : "for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet())",
    "right" : "for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet())",
    "info" : "EnhancedForStatement[43868-44252]:EnhancedForStatement[43847-44231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43945-44252]:Block[43924-44231]"
  }, {
    "left" : "reconcileString = reconcileString + mapEntry.getKey() + \": \";",
    "right" : "reconcileString = reconcileString + mapEntry.getKey() + \": \";",
    "info" : "ExpressionStatement[43963-44024]:ExpressionStatement[43942-44003]"
  }, {
    "left" : "for (String displayString : mapEntry.getValue())",
    "right" : "for (String displayString : mapEntry.getValue())",
    "info" : "EnhancedForStatement[44041-44180]:EnhancedForStatement[44020-44159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44090-44180]:Block[44069-44159]"
  }, {
    "left" : "reconcileString = reconcileString + displayString;",
    "right" : "reconcileString = reconcileString + displayString;",
    "info" : "ExpressionStatement[44112-44162]:ExpressionStatement[44091-44141]"
  }, {
    "left" : "reconcileString = reconcileString + \"\\n\";",
    "right" : "reconcileString = reconcileString + \"\\n\";",
    "info" : "ExpressionStatement[44197-44238]:ExpressionStatement[44176-44217]"
  }, {
    "left" : "logger.warn(\"The reconcile string is {}\", reconcileString);",
    "right" : "logger.warn(\"The reconcile string is {}\", reconcileString);",
    "info" : "ExpressionStatement[44265-44324]:ExpressionStatement[44244-44303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44355-44436]:Block[44334-44415]"
  }, {
    "left" : "logger.error(\"Could not calculate reconcile string \", e);",
    "right" : "logger.error(\"Could not calculate reconcile string \", e);",
    "info" : "ExpressionStatement[44369-44426]:ExpressionStatement[44348-44405]"
  }, {
    "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
    "info" : "IfStatement[44446-45045]:IfStatement[44425-45024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44543-44914]:Block[44522-44893]"
  }, {
    "left" : "localRegionApps.set(this.filterAndShuffle(serverApps));",
    "right" : "localRegionApps.set(this.filterAndShuffle(serverApps));",
    "info" : "ExpressionStatement[44557-44612]:ExpressionStatement[44536-44591]"
  }, {
    "left" : "getApplications().setVersion(delta.getVersion());",
    "right" : "getApplications().setVersion(delta.getVersion());",
    "info" : "ExpressionStatement[44625-44674]:ExpressionStatement[44604-44653]"
  }, {
    "left" : "logger.warn(\n                    \"The Reconcile hashcodes after complete sync up, client : {}, server : {}.\",\n                    getApplications().getReconcileHashCode(),\n                    delta.getAppsHashCode());",
    "right" : "logger.warn(\n                    \"The Reconcile hashcodes after complete sync up, client : {}, server : {}.\",\n                    getApplications().getReconcileHashCode(),\n                    delta.getAppsHashCode());",
    "info" : "ExpressionStatement[44687-44904]:ExpressionStatement[44666-44883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44920-45045]:Block[44899-45024]"
  }, {
    "left" : "logger.warn(\"Not setting the applications map as another thread has advanced the update generation\");",
    "right" : "logger.warn(\"Not setting the applications map as another thread has advanced the update generation\");",
    "info" : "ExpressionStatement[44934-45035]:ExpressionStatement[44913-45014]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[45055-45071]:ReturnStatement[45034-45050]"
  }, {
    "left" : "/**\n     * Updates the delta information fetches from the eureka server into the\n     * local cache.\n     *\n     * @param delta\n     *            the delta information received from eureka server in the last\n     *            poll cycle.\n     */",
    "right" : "/**\n     * Updates the delta information fetches from the eureka server into the\n     * local cache.\n     *\n     * @param delta\n     *            the delta information received from eureka server in the last\n     *            poll cycle.\n     */",
    "info" : "Javadoc[45083-45328]:Javadoc[45062-45307]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45333-45340]:Modifier[45312-45319]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45341-45345]:PrimitiveType[45320-45324]"
  }, {
    "left" : "updateDelta",
    "right" : "updateDelta",
    "info" : "SimpleName[45346-45357]:SimpleName[45325-45336]"
  }, {
    "left" : "Applications delta",
    "right" : "Applications delta",
    "info" : "SingleVariableDeclaration[45358-45376]:SingleVariableDeclaration[45337-45355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45378-48551]:Block[45357-48530]"
  }, {
    "left" : "int deltaCount = 0;",
    "right" : "int deltaCount = 0;",
    "info" : "VariableDeclarationStatement[45388-45407]:VariableDeclarationStatement[45367-45386]"
  }, {
    "left" : "for (Application app : delta.getRegisteredApplications())",
    "right" : "for (Application app : delta.getRegisteredApplications())",
    "info" : "EnhancedForStatement[45416-48035]:EnhancedForStatement[45395-48014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45474-48035]:Block[45453-48014]"
  }, {
    "left" : "for (InstanceInfo instance : app.getInstances())",
    "right" : "for (InstanceInfo instance : app.getInstances())",
    "info" : "EnhancedForStatement[45488-48025]:EnhancedForStatement[45467-48004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45537-48025]:Block[45516-48004]"
  }, {
    "left" : "Applications applications = getApplications();",
    "right" : "Applications applications = getApplications();",
    "info" : "VariableDeclarationStatement[45555-45601]:VariableDeclarationStatement[45534-45580]"
  }, {
    "left" : "String instanceRegion = instanceRegionChecker.getInstanceRegion(instance);",
    "right" : "String instanceRegion = instanceRegionChecker.getInstanceRegion(instance);",
    "info" : "VariableDeclarationStatement[45618-45692]:VariableDeclarationStatement[45597-45671]"
  }, {
    "left" : "if (!instanceRegionChecker.isLocalRegion(instanceRegion))",
    "right" : "if (!instanceRegionChecker.isLocalRegion(instanceRegion))",
    "info" : "IfStatement[45709-46120]:IfStatement[45688-46099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45767-46120]:Block[45746-46099]"
  }, {
    "left" : "Applications remoteApps = remoteRegionVsApps.get(instanceRegion);",
    "right" : "Applications remoteApps = remoteRegionVsApps.get(instanceRegion);",
    "info" : "VariableDeclarationStatement[45789-45854]:VariableDeclarationStatement[45768-45833]"
  }, {
    "left" : "if (null == remoteApps)",
    "right" : "if (null == remoteApps)",
    "info" : "IfStatement[45875-46055]:IfStatement[45854-46034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45899-46055]:Block[45878-46034]"
  }, {
    "left" : "remoteApps = new Applications();",
    "right" : "remoteApps = new Applications();",
    "info" : "ExpressionStatement[45925-45957]:ExpressionStatement[45904-45936]"
  }, {
    "left" : "remoteRegionVsApps.put(instanceRegion, remoteApps);",
    "right" : "remoteRegionVsApps.put(instanceRegion, remoteApps);",
    "info" : "ExpressionStatement[45982-46033]:ExpressionStatement[45961-46012]"
  }, {
    "left" : "applications = remoteApps;",
    "right" : "applications = remoteApps;",
    "info" : "ExpressionStatement[46076-46102]:ExpressionStatement[46055-46081]"
  }, {
    "left" : "++deltaCount;",
    "right" : "++deltaCount;",
    "info" : "ExpressionStatement[46138-46151]:ExpressionStatement[46117-46130]"
  }, {
    "left" : "if (ActionType.ADDED.equals(instance.getActionType()))",
    "right" : "if (ActionType.ADDED.equals(instance.getActionType()))",
    "info" : "IfStatement[46168-48011]:IfStatement[46147-47990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46223-46792]:Block[46202-46771]"
  }, {
    "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "info" : "VariableDeclarationStatement[46245-46362]:VariableDeclarationStatement[46224-46341]"
  }, {
    "left" : "if (existingApp == null)",
    "right" : "if (existingApp == null)",
    "info" : "IfStatement[46383-46489]:IfStatement[46362-46468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46408-46489]:Block[46387-46468]"
  }, {
    "left" : "applications.addApplication(app);",
    "right" : "applications.addApplication(app);",
    "info" : "ExpressionStatement[46434-46467]:ExpressionStatement[46413-46446]"
  }, {
    "left" : "logger.debug(\"Added instance {} to the existing apps in region {}\",\n                            instance.getId(), instanceRegion);",
    "right" : "logger.debug(\"Added instance {} to the existing apps in region {}\",\n                            instance.getId(), instanceRegion);",
    "info" : "ExpressionStatement[46510-46640]:ExpressionStatement[46489-46619]"
  }, {
    "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
    "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
    "info" : "ExpressionStatement[46661-46774]:ExpressionStatement[46640-46753]"
  }, {
    "left" : "if (ActionType.MODIFIED.equals(instance.getActionType()))",
    "right" : "if (ActionType.MODIFIED.equals(instance.getActionType()))",
    "info" : "IfStatement[46798-48011]:IfStatement[46777-47990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46856-47402]:Block[46835-47381]"
  }, {
    "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "info" : "VariableDeclarationStatement[46878-46995]:VariableDeclarationStatement[46857-46974]"
  }, {
    "left" : "if (existingApp == null)",
    "right" : "if (existingApp == null)",
    "info" : "IfStatement[47016-47122]:IfStatement[46995-47101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47041-47122]:Block[47020-47101]"
  }, {
    "left" : "applications.addApplication(app);",
    "right" : "applications.addApplication(app);",
    "info" : "ExpressionStatement[47067-47100]:ExpressionStatement[47046-47079]"
  }, {
    "left" : "logger.debug(\"Modified instance {} to the existing apps \",\n                            instance.getId());",
    "right" : "logger.debug(\"Modified instance {} to the existing apps \",\n                            instance.getId());",
    "info" : "ExpressionStatement[47143-47248]:ExpressionStatement[47122-47227]"
  }, {
    "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
    "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
    "info" : "ExpressionStatement[47270-47383]:ExpressionStatement[47249-47362]"
  }, {
    "left" : "if (ActionType.DELETED.equals(instance.getActionType()))",
    "right" : "if (ActionType.DELETED.equals(instance.getActionType()))",
    "info" : "IfStatement[47408-48011]:IfStatement[47387-47990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47465-48011]:Block[47444-47990]"
  }, {
    "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
    "info" : "VariableDeclarationStatement[47487-47604]:VariableDeclarationStatement[47466-47583]"
  }, {
    "left" : "if (existingApp == null)",
    "right" : "if (existingApp == null)",
    "info" : "IfStatement[47625-47731]:IfStatement[47604-47710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47650-47731]:Block[47629-47710]"
  }, {
    "left" : "applications.addApplication(app);",
    "right" : "applications.addApplication(app);",
    "info" : "ExpressionStatement[47676-47709]:ExpressionStatement[47655-47688]"
  }, {
    "left" : "logger.debug(\"Deleted instance {} to the existing apps \",\n                            instance.getId());",
    "right" : "logger.debug(\"Deleted instance {} to the existing apps \",\n                            instance.getId());",
    "info" : "ExpressionStatement[47752-47856]:ExpressionStatement[47731-47835]"
  }, {
    "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).removeInstance(instance);",
    "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).removeInstance(instance);",
    "info" : "ExpressionStatement[47877-47993]:ExpressionStatement[47856-47972]"
  }, {
    "left" : "logger.debug(\n                \"The total number of instances fetched by the delta processor : {}\",\n                deltaCount);",
    "right" : "logger.debug(\n                \"The total number of instances fetched by the delta processor : {}\",\n                deltaCount);",
    "info" : "ExpressionStatement[48044-48171]:ExpressionStatement[48023-48150]"
  }, {
    "left" : "getApplications().setVersion(delta.getVersion());",
    "right" : "getApplications().setVersion(delta.getVersion());",
    "info" : "ExpressionStatement[48181-48230]:ExpressionStatement[48160-48209]"
  }, {
    "left" : "getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "right" : "getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "info" : "ExpressionStatement[48239-48318]:ExpressionStatement[48218-48297]"
  }, {
    "left" : "for (Applications applications : remoteRegionVsApps.values())",
    "right" : "for (Applications applications : remoteRegionVsApps.values())",
    "info" : "EnhancedForStatement[48328-48545]:EnhancedForStatement[48307-48524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48390-48545]:Block[48369-48524]"
  }, {
    "left" : "applications.setVersion(delta.getVersion());",
    "right" : "applications.setVersion(delta.getVersion());",
    "info" : "ExpressionStatement[48404-48448]:ExpressionStatement[48383-48427]"
  }, {
    "left" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "right" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "info" : "ExpressionStatement[48461-48535]:ExpressionStatement[48440-48514]"
  }, {
    "left" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "right" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "info" : "Javadoc[48557-48850]:Javadoc[48536-48829]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48855-48862]:Modifier[48834-48841]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[48863-48877]:SimpleType[48842-48856]"
  }, {
    "left" : "makeRemoteCall",
    "right" : "makeRemoteCall",
    "info" : "SimpleName[48878-48892]:SimpleName[48857-48871]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[48893-48906]:SingleVariableDeclaration[48872-48885]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[48915-48924]:SimpleType[48894-48903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48925-49317]:Block[48904-49296]"
  }, {
    "left" : "ClientResponse response;",
    "right" : "ClientResponse response;",
    "info" : "VariableDeclarationStatement[48935-48959]:VariableDeclarationStatement[48914-48938]"
  }, {
    "left" : "if (isQueryAction(action))",
    "right" : "if (isQueryAction(action))",
    "info" : "IfStatement[48968-49194]:IfStatement[48947-49173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48995-49090]:Block[48974-49069]"
  }, {
    "left" : "response = makeRemoteCallToRedirectedServer(lastQueryRedirect, action);",
    "right" : "response = makeRemoteCallToRedirectedServer(lastQueryRedirect, action);",
    "info" : "ExpressionStatement[49009-49080]:ExpressionStatement[48988-49059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49096-49194]:Block[49075-49173]"
  }, {
    "left" : "response = makeRemoteCallToRedirectedServer(lastRegisterRedirect, action);",
    "right" : "response = makeRemoteCallToRedirectedServer(lastRegisterRedirect, action);",
    "info" : "ExpressionStatement[49110-49184]:ExpressionStatement[49089-49163]"
  }, {
    "left" : "if (response == null)",
    "right" : "if (response == null)",
    "info" : "IfStatement[49203-49286]:IfStatement[49182-49265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49225-49286]:Block[49204-49265]"
  }, {
    "left" : "response = makeRemoteCall(action, 0);",
    "right" : "response = makeRemoteCall(action, 0);",
    "info" : "ExpressionStatement[49239-49276]:ExpressionStatement[49218-49255]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[49295-49311]:ReturnStatement[49274-49290]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49323-49330]:Modifier[49302-49309]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[49331-49345]:SimpleType[49310-49324]"
  }, {
    "left" : "makeRemoteCallToRedirectedServer",
    "right" : "makeRemoteCallToRedirectedServer",
    "info" : "SimpleName[49346-49378]:SimpleName[49325-49357]"
  }, {
    "left" : "AtomicReference<String> lastRedirect",
    "right" : "AtomicReference<String> lastRedirect",
    "info" : "SingleVariableDeclaration[49379-49415]:SingleVariableDeclaration[49358-49394]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[49417-49430]:SingleVariableDeclaration[49396-49409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49432-50249]:Block[49411-50228]"
  }, {
    "left" : "String lastRedirectUrl = lastRedirect.get();",
    "right" : "String lastRedirectUrl = lastRedirect.get();",
    "info" : "VariableDeclarationStatement[49442-49486]:VariableDeclarationStatement[49421-49465]"
  }, {
    "left" : "if (lastRedirectUrl != null)",
    "right" : "if (lastRedirectUrl != null)",
    "info" : "IfStatement[49495-50222]:IfStatement[49474-50201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49524-50222]:Block[49503-50201]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[49538-50212]:TryStatement[49517-50191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49542-49934]:Block[49521-49913]"
  }, {
    "left" : "ClientResponse clientResponse = makeRemoteCall(action, lastRedirectUrl);",
    "right" : "ClientResponse clientResponse = makeRemoteCall(action, lastRedirectUrl);",
    "info" : "VariableDeclarationStatement[49560-49632]:VariableDeclarationStatement[49539-49611]"
  }, {
    "left" : "int status = clientResponse.getStatus();",
    "right" : "int status = clientResponse.getStatus();",
    "info" : "VariableDeclarationStatement[49649-49689]:VariableDeclarationStatement[49628-49668]"
  }, {
    "left" : "if (status >= 200 && status < 300)",
    "right" : "if (status >= 200 && status < 300)",
    "info" : "IfStatement[49706-49803]:IfStatement[49685-49782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49741-49803]:Block[49720-49782]"
  }, {
    "left" : "return clientResponse;",
    "right" : "return clientResponse;",
    "info" : "ReturnStatement[49763-49785]:ReturnStatement[49742-49764]"
  }, {
    "left" : "SERVER_RETRY_COUNTER.increment();",
    "right" : "SERVER_RETRY_COUNTER.increment();",
    "info" : "ExpressionStatement[49820-49853]:ExpressionStatement[49799-49832]"
  }, {
    "left" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
    "right" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
    "info" : "ExpressionStatement[49870-49920]:ExpressionStatement[49849-49899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49961-50212]:Block[49940-50191]"
  }, {
    "left" : "logger.warn(\"Remote call to last redirect address failed; retrying from configured service URL list\");",
    "right" : "logger.warn(\"Remote call to last redirect address failed; retrying from configured service URL list\");",
    "info" : "ExpressionStatement[49979-50081]:ExpressionStatement[49958-50060]"
  }, {
    "left" : "SERVER_RETRY_COUNTER.increment();",
    "right" : "SERVER_RETRY_COUNTER.increment();",
    "info" : "ExpressionStatement[50098-50131]:ExpressionStatement[50077-50110]"
  }, {
    "left" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
    "right" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
    "info" : "ExpressionStatement[50148-50198]:ExpressionStatement[50127-50177]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[50231-50243]:ReturnStatement[50210-50222]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50255-50262]:Modifier[50234-50241]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50263-50269]:Modifier[50242-50248]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[50270-50277]:PrimitiveType[50249-50256]"
  }, {
    "left" : "isQueryAction",
    "right" : "isQueryAction",
    "info" : "SimpleName[50278-50291]:SimpleName[50257-50270]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[50292-50305]:SingleVariableDeclaration[50271-50284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50307-50389]:Block[50286-50368]"
  }, {
    "left" : "return action == Action.Refresh || action == Action.Refresh_Delta;",
    "right" : "return action == Action.Refresh || action == Action.Refresh_Delta;",
    "info" : "ReturnStatement[50317-50383]:ReturnStatement[50296-50362]"
  }, {
    "left" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     *\n     *            Try the fallback servers in case of problems communicating to\n     *            the primary one.\n     *\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "right" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     *\n     *            Try the fallback servers in case of problems communicating to\n     *            the primary one.\n     *\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "info" : "Javadoc[50395-50817]:Javadoc[50374-50796]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50822-50829]:Modifier[50801-50808]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[50830-50844]:SimpleType[50809-50823]"
  }, {
    "left" : "makeRemoteCall",
    "right" : "makeRemoteCall",
    "info" : "SimpleName[50845-50859]:SimpleName[50824-50838]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[50860-50873]:SingleVariableDeclaration[50839-50852]"
  }, {
    "left" : "int serviceUrlIndex",
    "right" : "int serviceUrlIndex",
    "info" : "SingleVariableDeclaration[50875-50894]:SingleVariableDeclaration[50854-50873]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[50903-50912]:SimpleType[50882-50891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50913-51642]:Block[50892-51621]"
  }, {
    "left" : "String serviceUrl;",
    "right" : "String serviceUrl;",
    "info" : "VariableDeclarationStatement[50923-50941]:VariableDeclarationStatement[50902-50920]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[50950-51636]:TryStatement[50929-51615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50954-51109]:Block[50933-51088]"
  }, {
    "left" : "serviceUrl = eurekaServiceUrls.get().get(serviceUrlIndex);",
    "right" : "serviceUrl = eurekaServiceUrls.get().get(serviceUrlIndex);",
    "info" : "ExpressionStatement[50968-51026]:ExpressionStatement[50947-51005]"
  }, {
    "left" : "return makeRemoteCallWithFollowRedirect(action, serviceUrl);",
    "right" : "return makeRemoteCallWithFollowRedirect(action, serviceUrl);",
    "info" : "ReturnStatement[51039-51099]:ReturnStatement[51018-51078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51130-51636]:Block[51109-51615]"
  }, {
    "left" : "if (eurekaServiceUrls.get().size() > ++serviceUrlIndex)",
    "right" : "if (eurekaServiceUrls.get().size() > ++serviceUrlIndex)",
    "info" : "IfStatement[51144-51626]:IfStatement[51123-51605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51200-51424]:Block[51179-51403]"
  }, {
    "left" : "logger.warn(\"Trying backup: \" + eurekaServiceUrls.get().get(serviceUrlIndex));",
    "right" : "logger.warn(\"Trying backup: \" + eurekaServiceUrls.get().get(serviceUrlIndex));",
    "info" : "ExpressionStatement[51218-51296]:ExpressionStatement[51197-51275]"
  }, {
    "left" : "SERVER_RETRY_COUNTER.increment();",
    "right" : "SERVER_RETRY_COUNTER.increment();",
    "info" : "ExpressionStatement[51313-51346]:ExpressionStatement[51292-51325]"
  }, {
    "left" : "return makeRemoteCall(action, serviceUrlIndex);",
    "right" : "return makeRemoteCall(action, serviceUrlIndex);",
    "info" : "ReturnStatement[51363-51410]:ReturnStatement[51342-51389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51430-51626]:Block[51409-51605]"
  }, {
    "left" : "ALL_SERVER_FAILURE_COUNT.increment();",
    "right" : "ALL_SERVER_FAILURE_COUNT.increment();",
    "info" : "ExpressionStatement[51448-51485]:ExpressionStatement[51427-51464]"
  }, {
    "left" : "logger.error(\"Can't contact any eureka nodes - possibly a security group issue?\", t);",
    "right" : "logger.error(\"Can't contact any eureka nodes - possibly a security group issue?\", t);",
    "info" : "ExpressionStatement[51502-51587]:ExpressionStatement[51481-51566]"
  }, {
    "left" : "throw t;",
    "right" : "throw t;",
    "info" : "ThrowStatement[51604-51612]:ThrowStatement[51583-51591]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51648-51655]:Modifier[51627-51634]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[51656-51670]:SimpleType[51635-51649]"
  }, {
    "left" : "makeRemoteCallWithFollowRedirect",
    "right" : "makeRemoteCallWithFollowRedirect",
    "info" : "SimpleName[51671-51703]:SimpleName[51650-51682]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[51704-51717]:SingleVariableDeclaration[51683-51696]"
  }, {
    "left" : "String serviceUrl",
    "right" : "String serviceUrl",
    "info" : "SingleVariableDeclaration[51719-51736]:SingleVariableDeclaration[51698-51715]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[51745-51754]:SimpleType[51724-51733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51755-52802]:Block[51734-52781]"
  }, {
    "left" : "URI targetUrl = new URI(serviceUrl);",
    "right" : "URI targetUrl = new URI(serviceUrl);",
    "info" : "VariableDeclarationStatement[51765-51801]:VariableDeclarationStatement[51744-51780]"
  }, {
    "left" : "for (int followRedirectCount = 0; followRedirectCount < MAX_FOLLOWED_REDIRECTS; followRedirectCount++)",
    "right" : "for (int followRedirectCount = 0; followRedirectCount < MAX_FOLLOWED_REDIRECTS; followRedirectCount++)",
    "info" : "ForStatement[51810-52646]:ForStatement[51789-52625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51913-52646]:Block[51892-52625]"
  }, {
    "left" : "ClientResponse clientResponse = makeRemoteCall(action, targetUrl.toString());",
    "right" : "ClientResponse clientResponse = makeRemoteCall(action, targetUrl.toString());",
    "info" : "VariableDeclarationStatement[51927-52004]:VariableDeclarationStatement[51906-51983]"
  }, {
    "left" : "if (clientResponse.getStatus() != 302)",
    "right" : "if (clientResponse.getStatus() != 302)",
    "info" : "IfStatement[52017-52416]:IfStatement[51996-52395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52056-52416]:Block[52035-52395]"
  }, {
    "left" : "if (followRedirectCount > 0)",
    "right" : "if (followRedirectCount > 0)",
    "info" : "IfStatement[52074-52363]:IfStatement[52053-52342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52103-52363]:Block[52082-52342]"
  }, {
    "left" : "if (isQueryAction(action))",
    "right" : "if (isQueryAction(action))",
    "info" : "IfStatement[52125-52345]:IfStatement[52104-52324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52152-52244]:Block[52131-52223]"
  }, {
    "left" : "lastQueryRedirect.set(targetUrl.toString());",
    "right" : "lastQueryRedirect.set(targetUrl.toString());",
    "info" : "ExpressionStatement[52178-52222]:ExpressionStatement[52157-52201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52250-52345]:Block[52229-52324]"
  }, {
    "left" : "lastRegisterRedirect.set(targetUrl.toString());",
    "right" : "lastRegisterRedirect.set(targetUrl.toString());",
    "info" : "ExpressionStatement[52276-52323]:ExpressionStatement[52255-52302]"
  }, {
    "left" : "return clientResponse;",
    "right" : "return clientResponse;",
    "info" : "ReturnStatement[52380-52402]:ReturnStatement[52359-52381]"
  }, {
    "left" : "targetUrl = getRedirectBaseUri(clientResponse.getLocation());",
    "right" : "targetUrl = getRedirectBaseUri(clientResponse.getLocation());",
    "info" : "ExpressionStatement[52429-52490]:ExpressionStatement[52408-52469]"
  }, {
    "left" : "if (targetUrl == null)",
    "right" : "if (targetUrl == null)",
    "info" : "IfStatement[52503-52636]:IfStatement[52482-52615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52526-52636]:Block[52505-52615]"
  }, {
    "left" : "throw new IOException(\"Invalid redirect URL \" + clientResponse.getLocation());",
    "right" : "throw new IOException(\"Invalid redirect URL \" + clientResponse.getLocation());",
    "info" : "ThrowStatement[52544-52622]:ThrowStatement[52523-52601]"
  }, {
    "left" : "String message = \"Follow redirect limit crossed for URI \" + serviceUrl;",
    "right" : "String message = \"Follow redirect limit crossed for URI \" + serviceUrl;",
    "info" : "VariableDeclarationStatement[52655-52726]:VariableDeclarationStatement[52634-52705]"
  }, {
    "left" : "logger.warn(message);",
    "right" : "logger.warn(message);",
    "info" : "ExpressionStatement[52735-52756]:ExpressionStatement[52714-52735]"
  }, {
    "left" : "throw new IOException(message);",
    "right" : "throw new IOException(message);",
    "info" : "ThrowStatement[52765-52796]:ThrowStatement[52744-52775]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52808-52815]:Modifier[52787-52794]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52816-52822]:Modifier[52795-52801]"
  }, {
    "left" : "URI",
    "right" : "URI",
    "info" : "SimpleType[52823-52826]:SimpleType[52802-52805]"
  }, {
    "left" : "getRedirectBaseUri",
    "right" : "getRedirectBaseUri",
    "info" : "SimpleName[52827-52845]:SimpleName[52806-52824]"
  }, {
    "left" : "URI targetUrl",
    "right" : "URI targetUrl",
    "info" : "SingleVariableDeclaration[52846-52859]:SingleVariableDeclaration[52825-52838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52861-53317]:Block[52840-53296]"
  }, {
    "left" : "Matcher pathMatcher = REDIRECT_PATH_REGEX.matcher(targetUrl.getPath());",
    "right" : "Matcher pathMatcher = REDIRECT_PATH_REGEX.matcher(targetUrl.getPath());",
    "info" : "VariableDeclarationStatement[52871-52942]:VariableDeclarationStatement[52850-52921]"
  }, {
    "left" : "if (pathMatcher.matches())",
    "right" : "if (pathMatcher.matches())",
    "info" : "IfStatement[52951-53231]:IfStatement[52930-53210]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52978-53231]:Block[52957-53210]"
  }, {
    "left" : "return UriBuilder.fromUri(targetUrl)\n                    .host(DnsResolver.resolve(targetUrl.getHost()))\n                    .replacePath(pathMatcher.group(1))\n                    .replaceQuery(null)\n                    .build();",
    "right" : "return UriBuilder.fromUri(targetUrl)\n                    .host(DnsResolver.resolve(targetUrl.getHost()))\n                    .replacePath(pathMatcher.group(1))\n                    .replaceQuery(null)\n                    .build();",
    "info" : "ReturnStatement[52992-53221]:ReturnStatement[52971-53200]"
  }, {
    "left" : "logger.warn(\"Invalid redirect URL {}\", targetUrl);",
    "right" : "logger.warn(\"Invalid redirect URL {}\", targetUrl);",
    "info" : "ExpressionStatement[53240-53290]:ExpressionStatement[53219-53269]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[53299-53311]:ReturnStatement[53278-53290]"
  }, {
    "left" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     *\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "right" : "/**\n     * Makes remote calls with the corresponding action(register,renew etc).\n     *\n     * @param action\n     *            the action to be performed on eureka server.\n     *\n     * @return ClientResponse the HTTP response object.\n     * @throws Throwable\n     *             on any error.\n     */",
    "info" : "Javadoc[53323-53623]:Javadoc[53302-53602]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53628-53635]:Modifier[53607-53614]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[53636-53650]:SimpleType[53615-53629]"
  }, {
    "left" : "makeRemoteCall",
    "right" : "makeRemoteCall",
    "info" : "SimpleName[53651-53665]:SimpleName[53630-53644]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[53666-53679]:SingleVariableDeclaration[53645-53658]"
  }, {
    "left" : "String serviceUrl",
    "right" : "String serviceUrl",
    "info" : "SingleVariableDeclaration[53681-53698]:SingleVariableDeclaration[53660-53677]"
  }, {
    "left" : "Throwable",
    "right" : "Throwable",
    "info" : "SimpleType[53707-53716]:SimpleType[53686-53695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53717-58101]:Block[53696-58080]"
  }, {
    "left" : "String urlPath = null;",
    "right" : "String urlPath = null;",
    "info" : "VariableDeclarationStatement[53727-53749]:VariableDeclarationStatement[53706-53728]"
  }, {
    "left" : "Stopwatch tracer = null;",
    "right" : "Stopwatch tracer = null;",
    "info" : "VariableDeclarationStatement[53758-53782]:VariableDeclarationStatement[53737-53761]"
  }, {
    "left" : "ClientResponse response = null;",
    "right" : "ClientResponse response = null;",
    "info" : "VariableDeclarationStatement[53791-53822]:VariableDeclarationStatement[53770-53801]"
  }, {
    "left" : "logger.debug(\"Discovery Client talking to the server {}\", serviceUrl);",
    "right" : "logger.debug(\"Discovery Client talking to the server {}\", serviceUrl);",
    "info" : "ExpressionStatement[53831-53901]:ExpressionStatement[53810-53880]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[53910-58095]:TryStatement[53889-58074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53914-57825]:Block[53893-57804]"
  }, {
    "left" : "if ((UNKNOWN.equals(instanceInfo.getAppName())\n                    && (!Action.Refresh.equals(action)) && (!Action.Refresh_Delta\n                    .equals(action))))",
    "right" : "if ((UNKNOWN.equals(instanceInfo.getAppName())\n                    && (!Action.Refresh.equals(action)) && (!Action.Refresh_Delta\n                    .equals(action))))",
    "info" : "IfStatement[54029-54241]:IfStatement[54008-54220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54197-54241]:Block[54176-54220]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[54215-54227]:ReturnStatement[54194-54206]"
  }, {
    "left" : "WebResource r = discoveryApacheClient.resource(serviceUrl);",
    "right" : "WebResource r = discoveryApacheClient.resource(serviceUrl);",
    "info" : "VariableDeclarationStatement[54254-54313]:VariableDeclarationStatement[54233-54292]"
  }, {
    "left" : "if (clientConfig.allowRedirects())",
    "right" : "if (clientConfig.allowRedirects())",
    "info" : "IfStatement[54326-54443]:IfStatement[54305-54422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54361-54443]:Block[54340-54422]"
  }, {
    "left" : "r.header(HTTP_X_DISCOVERY_ALLOW_REDIRECT, \"true\");",
    "right" : "r.header(HTTP_X_DISCOVERY_ALLOW_REDIRECT, \"true\");",
    "info" : "ExpressionStatement[54379-54429]:ExpressionStatement[54358-54408]"
  }, {
    "left" : "String remoteRegionsToFetchStr;",
    "right" : "String remoteRegionsToFetchStr;",
    "info" : "VariableDeclarationStatement[54456-54487]:VariableDeclarationStatement[54435-54466]"
  }, {
    "left" : "switch (action) {\n                case Renew:\n                    tracer = RENEW_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);\n                    break;\n                case Refresh:\n                    tracer = REFRESH_TIMER.start();\n                    final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();\n                    urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Refresh_Delta:\n                    tracer = REFRESH_DELTA_TIMER.start();\n                    urlPath = \"apps/delta\";\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Register:\n                    tracer = REGISTER_TIMER.start();\n                    urlPath = \"apps/\" + instanceInfo.getAppName();\n                    response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);\n                    break;\n                case Cancel:\n                    tracer = CANCEL_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r.path(urlPath).delete(ClientResponse.class);\n                    // Return without during de-registration if it is not registered\n                    // already and if we get a 404\n                    if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode())) {\n                        return response;\n                    }\n                    break;\n            }",
    "right" : "switch (action) {\n                case Renew:\n                    tracer = RENEW_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);\n                    break;\n                case Refresh:\n                    tracer = REFRESH_TIMER.start();\n                    final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();\n                    urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Refresh_Delta:\n                    tracer = REFRESH_DELTA_TIMER.start();\n                    urlPath = \"apps/delta\";\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Register:\n                    tracer = REGISTER_TIMER.start();\n                    urlPath = \"apps/\" + instanceInfo.getAppName();\n                    response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);\n                    break;\n                case Cancel:\n                    tracer = CANCEL_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r.path(urlPath).delete(ClientResponse.class);\n                    // Return without during de-registration if it is not registered\n                    // already and if we get a 404\n                    if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode())) {\n                        return response;\n                    }\n                    break;\n            }",
    "info" : "SwitchStatement[54500-57143]:SwitchStatement[54479-57122]"
  }, {
    "left" : "case Renew:",
    "right" : "case Renew:",
    "info" : "SwitchCase[54534-54545]:SwitchCase[54513-54524]"
  }, {
    "left" : "tracer = RENEW_TIMER.start();",
    "right" : "tracer = RENEW_TIMER.start();",
    "info" : "ExpressionStatement[54566-54595]:ExpressionStatement[54545-54574]"
  }, {
    "left" : "urlPath = \"apps/\" + appPathIdentifier;",
    "right" : "urlPath = \"apps/\" + appPathIdentifier;",
    "info" : "ExpressionStatement[54616-54654]:ExpressionStatement[54595-54633]"
  }, {
    "left" : "response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);",
    "right" : "response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);",
    "info" : "ExpressionStatement[54675-55056]:ExpressionStatement[54654-55035]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55077-55083]:BreakStatement[55056-55062]"
  }, {
    "left" : "case Refresh:",
    "right" : "case Refresh:",
    "info" : "SwitchCase[55100-55113]:SwitchCase[55079-55092]"
  }, {
    "left" : "tracer = REFRESH_TIMER.start();",
    "right" : "tracer = REFRESH_TIMER.start();",
    "info" : "ExpressionStatement[55134-55165]:ExpressionStatement[55113-55144]"
  }, {
    "left" : "final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();",
    "right" : "final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();",
    "info" : "VariableDeclarationStatement[55186-55262]:VariableDeclarationStatement[55165-55241]"
  }, {
    "left" : "urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;",
    "right" : "urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;",
    "info" : "ExpressionStatement[55283-55345]:ExpressionStatement[55262-55324]"
  }, {
    "left" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
    "right" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
    "info" : "ExpressionStatement[55366-55419]:ExpressionStatement[55345-55398]"
  }, {
    "left" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
    "right" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
    "info" : "IfStatement[55440-55590]:IfStatement[55419-55569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55493-55590]:Block[55472-55569]"
  }, {
    "left" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
    "right" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
    "info" : "ExpressionStatement[55519-55568]:ExpressionStatement[55498-55547]"
  }, {
    "left" : "response = getUrl(serviceUrl + urlPath);",
    "right" : "response = getUrl(serviceUrl + urlPath);",
    "info" : "ExpressionStatement[55611-55651]:ExpressionStatement[55590-55630]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55672-55678]:BreakStatement[55651-55657]"
  }, {
    "left" : "case Refresh_Delta:",
    "right" : "case Refresh_Delta:",
    "info" : "SwitchCase[55695-55714]:SwitchCase[55674-55693]"
  }, {
    "left" : "tracer = REFRESH_DELTA_TIMER.start();",
    "right" : "tracer = REFRESH_DELTA_TIMER.start();",
    "info" : "ExpressionStatement[55735-55772]:ExpressionStatement[55714-55751]"
  }, {
    "left" : "urlPath = \"apps/delta\";",
    "right" : "urlPath = \"apps/delta\";",
    "info" : "ExpressionStatement[55793-55816]:ExpressionStatement[55772-55795]"
  }, {
    "left" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
    "right" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
    "info" : "ExpressionStatement[55837-55890]:ExpressionStatement[55816-55869]"
  }, {
    "left" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
    "right" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
    "info" : "IfStatement[55911-56061]:IfStatement[55890-56040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55964-56061]:Block[55943-56040]"
  }, {
    "left" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
    "right" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
    "info" : "ExpressionStatement[55990-56039]:ExpressionStatement[55969-56018]"
  }, {
    "left" : "response = getUrl(serviceUrl + urlPath);",
    "right" : "response = getUrl(serviceUrl + urlPath);",
    "info" : "ExpressionStatement[56082-56122]:ExpressionStatement[56061-56101]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[56143-56149]:BreakStatement[56122-56128]"
  }, {
    "left" : "case Register:",
    "right" : "case Register:",
    "info" : "SwitchCase[56166-56180]:SwitchCase[56145-56159]"
  }, {
    "left" : "tracer = REGISTER_TIMER.start();",
    "right" : "tracer = REGISTER_TIMER.start();",
    "info" : "ExpressionStatement[56201-56233]:ExpressionStatement[56180-56212]"
  }, {
    "left" : "urlPath = \"apps/\" + instanceInfo.getAppName();",
    "right" : "urlPath = \"apps/\" + instanceInfo.getAppName();",
    "info" : "ExpressionStatement[56254-56300]:ExpressionStatement[56233-56279]"
  }, {
    "left" : "response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);",
    "right" : "response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);",
    "info" : "ExpressionStatement[56321-56485]:ExpressionStatement[56300-56464]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[56506-56512]:BreakStatement[56485-56491]"
  }, {
    "left" : "case Cancel:",
    "right" : "case Cancel:",
    "info" : "SwitchCase[56529-56541]:SwitchCase[56508-56520]"
  }, {
    "left" : "tracer = CANCEL_TIMER.start();",
    "right" : "tracer = CANCEL_TIMER.start();",
    "info" : "ExpressionStatement[56562-56592]:ExpressionStatement[56541-56571]"
  }, {
    "left" : "urlPath = \"apps/\" + appPathIdentifier;",
    "right" : "urlPath = \"apps/\" + appPathIdentifier;",
    "info" : "ExpressionStatement[56613-56651]:ExpressionStatement[56592-56630]"
  }, {
    "left" : "response = r.path(urlPath).delete(ClientResponse.class);",
    "right" : "response = r.path(urlPath).delete(ClientResponse.class);",
    "info" : "ExpressionStatement[56672-56728]:ExpressionStatement[56651-56707]"
  }, {
    "left" : "if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode()))",
    "right" : "if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode()))",
    "info" : "IfStatement[56885-57102]:IfStatement[56864-57081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57038-57102]:Block[57017-57081]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[57064-57080]:ReturnStatement[57043-57059]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57123-57129]:BreakStatement[57102-57108]"
  }, {
    "left" : "if (logger.isDebugEnabled())",
    "right" : "if (logger.isDebugEnabled())",
    "info" : "IfStatement[57157-57402]:IfStatement[57136-57381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57186-57402]:Block[57165-57381]"
  }, {
    "left" : "logger.debug(\"Finished a call to service url {} and url path {} with status code {}.\",\n                        new String[]{serviceUrl, urlPath, String.valueOf(response.getStatus())});",
    "right" : "logger.debug(\"Finished a call to service url {} and url path {} with status code {}.\",\n                        new String[]{serviceUrl, urlPath, String.valueOf(response.getStatus())});",
    "info" : "ExpressionStatement[57204-57388]:ExpressionStatement[57183-57367]"
  }, {
    "left" : "if (isOk(action, response.getStatus()))",
    "right" : "if (isOk(action, response.getStatus()))",
    "info" : "IfStatement[57415-57815]:IfStatement[57394-57794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57455-57503]:Block[57434-57482]"
  }, {
    "left" : "return response;",
    "right" : "return response;",
    "info" : "ReturnStatement[57473-57489]:ReturnStatement[57452-57468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57509-57815]:Block[57488-57794]"
  }, {
    "left" : "logger.warn(\"Action: \" + action + \"  => returned status of \"\n                        + response.getStatus() + \" from \" + serviceUrl\n                        + urlPath);",
    "right" : "logger.warn(\"Action: \" + action + \"  => returned status of \"\n                        + response.getStatus() + \" from \" + serviceUrl\n                        + urlPath);",
    "info" : "ExpressionStatement[57527-57694]:ExpressionStatement[57506-57673]"
  }, {
    "left" : "throw new RuntimeException(\"Bad status: \"\n                        + response.getStatus());",
    "right" : "throw new RuntimeException(\"Bad status: \"\n                        + response.getStatus());",
    "info" : "ThrowStatement[57711-57801]:ThrowStatement[57690-57780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57846-57996]:Block[57825-57975]"
  }, {
    "left" : "closeResponse(response);",
    "right" : "closeResponse(response);",
    "info" : "ExpressionStatement[57860-57884]:ExpressionStatement[57839-57863]"
  }, {
    "left" : "logger.warn(\"Can't get a response from \" + serviceUrl + urlPath, t);",
    "right" : "logger.warn(\"Can't get a response from \" + serviceUrl + urlPath, t);",
    "info" : "ExpressionStatement[57897-57965]:ExpressionStatement[57876-57944]"
  }, {
    "left" : "throw t;",
    "right" : "throw t;",
    "info" : "ThrowStatement[57978-57986]:ThrowStatement[57957-57965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58005-58095]:Block[57984-58074]"
  }, {
    "left" : "if (tracer != null)",
    "right" : "if (tracer != null)",
    "info" : "IfStatement[58019-58085]:IfStatement[57998-58064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58039-58085]:Block[58018-58064]"
  }, {
    "left" : "tracer.stop();",
    "right" : "tracer.stop();",
    "info" : "ExpressionStatement[58057-58071]:ExpressionStatement[58036-58050]"
  }, {
    "left" : "/**\n     * Close HTTP response object and its respective resources.\n     *\n     * @param response\n     *            the HttpResponse object.\n     */",
    "right" : "/**\n     * Close HTTP response object and its respective resources.\n     *\n     * @param response\n     *            the HttpResponse object.\n     */",
    "info" : "Javadoc[58107-58255]:Javadoc[58086-58234]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58260-58267]:Modifier[58239-58246]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58268-58272]:PrimitiveType[58247-58251]"
  }, {
    "left" : "closeResponse",
    "right" : "closeResponse",
    "info" : "SimpleName[58273-58286]:SimpleName[58252-58265]"
  }, {
    "left" : "ClientResponse response",
    "right" : "ClientResponse response",
    "info" : "SingleVariableDeclaration[58287-58310]:SingleVariableDeclaration[58266-58289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58312-58536]:Block[58291-58515]"
  }, {
    "left" : "if (response != null)",
    "right" : "if (response != null)",
    "info" : "IfStatement[58322-58530]:IfStatement[58301-58509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58344-58530]:Block[58323-58509]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[58358-58520]:TryStatement[58337-58499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58362-58411]:Block[58341-58390]"
  }, {
    "left" : "response.close();",
    "right" : "response.close();",
    "info" : "ExpressionStatement[58380-58397]:ExpressionStatement[58359-58376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58433-58520]:Block[58412-58499]"
  }, {
    "left" : "logger.error(\"Cannot release response resource :\", th);",
    "right" : "logger.error(\"Cannot release response resource :\", th);",
    "info" : "ExpressionStatement[58451-58506]:ExpressionStatement[58430-58485]"
  }, {
    "left" : "/**\n     * Initializes all scheduled tasks.\n     */",
    "right" : "/**\n     * Initializes all scheduled tasks.\n     */",
    "info" : "Javadoc[58542-58593]:Javadoc[58521-58572]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58598-58605]:Modifier[58577-58584]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58606-58610]:PrimitiveType[58585-58589]"
  }, {
    "left" : "initScheduledTasks",
    "right" : "initScheduledTasks",
    "info" : "SimpleName[58611-58629]:SimpleName[58590-58608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58632-61482]:Block[58611-61461]"
  }, {
    "left" : "if (clientConfig.shouldFetchRegistry())",
    "right" : "if (clientConfig.shouldFetchRegistry())",
    "info" : "IfStatement[58642-59433]:IfStatement[58621-59412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58682-59433]:Block[58661-59412]"
  }, {
    "left" : "int registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();",
    "right" : "int registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();",
    "info" : "VariableDeclarationStatement[58740-58822]:VariableDeclarationStatement[58719-58801]"
  }, {
    "left" : "int expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();",
    "right" : "int expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();",
    "info" : "VariableDeclarationStatement[58835-58919]:VariableDeclarationStatement[58814-58898]"
  }, {
    "left" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"cacheRefresh\",\n                            scheduler,\n                            cacheRefreshExecutor,\n                            registryFetchIntervalSeconds,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new CacheRefreshThread()\n                    ),\n                    registryFetchIntervalSeconds, TimeUnit.SECONDS);",
    "right" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"cacheRefresh\",\n                            scheduler,\n                            cacheRefreshExecutor,\n                            registryFetchIntervalSeconds,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new CacheRefreshThread()\n                    ),\n                    registryFetchIntervalSeconds, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[58932-59423]:ExpressionStatement[58911-59402]"
  }, {
    "left" : "if (shouldRegister(instanceInfo))",
    "right" : "if (shouldRegister(instanceInfo))",
    "info" : "IfStatement[59443-61476]:IfStatement[59422-61455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59477-61378]:Block[59456-61357]"
  }, {
    "left" : "int renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();",
    "right" : "int renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();",
    "info" : "VariableDeclarationStatement[59491-59574]:VariableDeclarationStatement[59470-59553]"
  }, {
    "left" : "int expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();",
    "right" : "int expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();",
    "info" : "VariableDeclarationStatement[59587-59668]:VariableDeclarationStatement[59566-59647]"
  }, {
    "left" : "logger.info(\"Starting heartbeat executor: \" + \"renew interval is: \" + renewalIntervalInSecs);",
    "right" : "logger.info(\"Starting heartbeat executor: \" + \"renew interval is: \" + renewalIntervalInSecs);",
    "info" : "ExpressionStatement[59681-59774]:ExpressionStatement[59660-59753]"
  }, {
    "left" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"heartbeat\",\n                            scheduler,\n                            heartbeatExecutor,\n                            renewalIntervalInSecs,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new HeartbeatThread()\n                    ),\n                    renewalIntervalInSecs, TimeUnit.SECONDS);",
    "right" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"heartbeat\",\n                            scheduler,\n                            heartbeatExecutor,\n                            renewalIntervalInSecs,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new HeartbeatThread()\n                    ),\n                    renewalIntervalInSecs, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[59819-60287]:ExpressionStatement[59798-60266]"
  }, {
    "left" : "instanceInfoReplicator = new InstanceInfoReplicator(\n                    this,\n                    instanceInfo,\n                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),\n                    2);",
    "right" : "instanceInfoReplicator = new InstanceInfoReplicator(\n                    this,\n                    instanceInfo,\n                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),\n                    2);",
    "info" : "ExpressionStatement[60340-60554]:ExpressionStatement[60319-60533]"
  }, {
    "left" : "statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {\n                @Override\n                public String getId() {\n                    return \"statusChangeListener\";\n                }\n\n                @Override\n                public void notify(StatusChangeEvent statusChangeEvent) {\n                    logger.info(\"Saw local status change event {}\", statusChangeEvent);\n                    instanceInfoReplicator.onDemandUpdate();\n                }\n            };",
    "right" : "statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {\n                @Override\n                public String getId() {\n                    return \"statusChangeListener\";\n                }\n\n                @Override\n                public void notify(StatusChangeEvent statusChangeEvent) {\n                    logger.info(\"Saw local status change event {}\", statusChangeEvent);\n                    instanceInfoReplicator.onDemandUpdate();\n                }\n            };",
    "info" : "ExpressionStatement[60581-61073]:ExpressionStatement[60560-61052]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[60672-60681]:MarkerAnnotation[60651-60660]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60698-60704]:Modifier[60677-60683]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[60705-60711]:SimpleType[60684-60690]"
  }, {
    "left" : "getId",
    "right" : "getId",
    "info" : "SimpleName[60712-60717]:SimpleName[60691-60696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60720-60790]:Block[60699-60769]"
  }, {
    "left" : "return \"statusChangeListener\";",
    "right" : "return \"statusChangeListener\";",
    "info" : "ReturnStatement[60742-60772]:ReturnStatement[60721-60751]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[60808-60817]:MarkerAnnotation[60787-60796]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60834-60840]:Modifier[60813-60819]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[60841-60845]:PrimitiveType[60820-60824]"
  }, {
    "left" : "notify",
    "right" : "notify",
    "info" : "SimpleName[60846-60852]:SimpleName[60825-60831]"
  }, {
    "left" : "StatusChangeEvent statusChangeEvent",
    "right" : "StatusChangeEvent statusChangeEvent",
    "info" : "SingleVariableDeclaration[60853-60888]:SingleVariableDeclaration[60832-60867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60890-61058]:Block[60869-61037]"
  }, {
    "left" : "logger.info(\"Saw local status change event {}\", statusChangeEvent);",
    "right" : "logger.info(\"Saw local status change event {}\", statusChangeEvent);",
    "info" : "ExpressionStatement[60912-60979]:ExpressionStatement[60891-60958]"
  }, {
    "left" : "instanceInfoReplicator.onDemandUpdate();",
    "right" : "instanceInfoReplicator.onDemandUpdate();",
    "info" : "ExpressionStatement[61000-61040]:ExpressionStatement[60979-61019]"
  }, {
    "left" : "if (clientConfig.shouldOnDemandUpdateStatusChange())",
    "right" : "if (clientConfig.shouldOnDemandUpdateStatusChange())",
    "info" : "IfStatement[61087-61260]:IfStatement[61066-61239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61140-61260]:Block[61119-61239]"
  }, {
    "left" : "ApplicationInfoManager.getInstance().registerStatusChangeListener(statusChangeListener);",
    "right" : "ApplicationInfoManager.getInstance().registerStatusChangeListener(statusChangeListener);",
    "info" : "ExpressionStatement[61158-61246]:ExpressionStatement[61137-61225]"
  }, {
    "left" : "instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());",
    "right" : "instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());",
    "info" : "ExpressionStatement[61274-61368]:ExpressionStatement[61253-61347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61384-61476]:Block[61363-61455]"
  }, {
    "left" : "logger.info(\"Not registering with Eureka server per configuration\");",
    "right" : "logger.info(\"Not registering with Eureka server per configuration\");",
    "info" : "ExpressionStatement[61398-61466]:ExpressionStatement[61377-61445]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61488-61495]:Modifier[61467-61474]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61496-61500]:PrimitiveType[61475-61479]"
  }, {
    "left" : "cancelScheduledTasks",
    "right" : "cancelScheduledTasks",
    "info" : "SimpleName[61501-61521]:SimpleName[61480-61500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61524-61748]:Block[61503-61727]"
  }, {
    "left" : "if (instanceInfoReplicator != null)",
    "right" : "if (instanceInfoReplicator != null)",
    "info" : "IfStatement[61534-61624]:IfStatement[61513-61603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61570-61624]:Block[61549-61603]"
  }, {
    "left" : "instanceInfoReplicator.stop();",
    "right" : "instanceInfoReplicator.stop();",
    "info" : "ExpressionStatement[61584-61614]:ExpressionStatement[61563-61593]"
  }, {
    "left" : "heartbeatExecutor.shutdownNow();",
    "right" : "heartbeatExecutor.shutdownNow();",
    "info" : "ExpressionStatement[61633-61665]:ExpressionStatement[61612-61644]"
  }, {
    "left" : "cacheRefreshExecutor.shutdownNow();",
    "right" : "cacheRefreshExecutor.shutdownNow();",
    "info" : "ExpressionStatement[61674-61709]:ExpressionStatement[61653-61688]"
  }, {
    "left" : "scheduler.shutdownNow();",
    "right" : "scheduler.shutdownNow();",
    "info" : "ExpressionStatement[61718-61742]:ExpressionStatement[61697-61721]"
  }, {
    "left" : "/**\n     * Get the list of all eureka service urls from DNS for the eureka client to\n     * talk to. The client picks up the service url from its zone and then fails over to\n     * other zones randomly. If there are multiple servers in the same zone, the client once\n     * again picks one randomly. This way the traffic will be distributed in the case of failures.\n     *\n     * @param instanceZone The zone in which the client resides.\n     * @param preferSameZone true if we have to prefer the same zone as the client, false otherwise.\n     * @return The list of all eureka service urls for the eureka client to talk to.\n     */",
    "right" : "/**\n     * Get the list of all eureka service urls from DNS for the eureka client to\n     * talk to. The client picks up the service url from its zone and then fails over to\n     * other zones randomly. If there are multiple servers in the same zone, the client once\n     * again picks one randomly. This way the traffic will be distributed in the case of failures.\n     *\n     * @param instanceZone The zone in which the client resides.\n     * @param preferSameZone true if we have to prefer the same zone as the client, false otherwise.\n     * @return The list of all eureka service urls for the eureka client to talk to.\n     */",
    "info" : "Javadoc[61754-62385]:Javadoc[61733-62364]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[62390-62399]:MarkerAnnotation[62369-62378]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62404-62410]:Modifier[62383-62389]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[62411-62423]:ParameterizedType[62390-62402]"
  }, {
    "left" : "getServiceUrlsFromDNS",
    "right" : "getServiceUrlsFromDNS",
    "info" : "SimpleName[62424-62445]:SimpleName[62403-62424]"
  }, {
    "left" : "String instanceZone",
    "right" : "String instanceZone",
    "info" : "SingleVariableDeclaration[62446-62465]:SingleVariableDeclaration[62425-62444]"
  }, {
    "left" : "boolean preferSameZone",
    "right" : "boolean preferSameZone",
    "info" : "SingleVariableDeclaration[62467-62489]:SingleVariableDeclaration[62446-62468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62491-65963]:Block[62470-65942]"
  }, {
    "left" : "Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();",
    "right" : "Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();",
    "info" : "VariableDeclarationStatement[62501-62550]:VariableDeclarationStatement[62480-62529]"
  }, {
    "left" : "String region = getRegion();",
    "right" : "String region = getRegion();",
    "info" : "VariableDeclarationStatement[62559-62587]:VariableDeclarationStatement[62538-62566]"
  }, {
    "left" : "Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(region);",
    "right" : "Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(region);",
    "info" : "VariableDeclarationStatement[62712-62800]:VariableDeclarationStatement[62691-62779]"
  }, {
    "left" : "Set<String> availableZones = zoneDnsNamesMap.keySet();",
    "right" : "Set<String> availableZones = zoneDnsNamesMap.keySet();",
    "info" : "VariableDeclarationStatement[62809-62863]:VariableDeclarationStatement[62788-62842]"
  }, {
    "left" : "List<String> zones = new ArrayList<String>(availableZones);",
    "right" : "List<String> zones = new ArrayList<String>(availableZones);",
    "info" : "VariableDeclarationStatement[62872-62931]:VariableDeclarationStatement[62851-62910]"
  }, {
    "left" : "if (zones.isEmpty())",
    "right" : "if (zones.isEmpty())",
    "info" : "IfStatement[62940-63082]:IfStatement[62919-63061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62961-63082]:Block[62940-63061]"
  }, {
    "left" : "throw new RuntimeException(\"No available zones configured for the instanceZone \" + instanceZone);",
    "right" : "throw new RuntimeException(\"No available zones configured for the instanceZone \" + instanceZone);",
    "info" : "ThrowStatement[62975-63072]:ThrowStatement[62954-63051]"
  }, {
    "left" : "int zoneIndex = 0;",
    "right" : "int zoneIndex = 0;",
    "info" : "VariableDeclarationStatement[63091-63109]:VariableDeclarationStatement[63070-63088]"
  }, {
    "left" : "boolean zoneFound = false;",
    "right" : "boolean zoneFound = false;",
    "info" : "VariableDeclarationStatement[63118-63144]:VariableDeclarationStatement[63097-63123]"
  }, {
    "left" : "for (String zone : zones)",
    "right" : "for (String zone : zones)",
    "info" : "EnhancedForStatement[63153-63966]:EnhancedForStatement[63132-63945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63179-63966]:Block[63158-63945]"
  }, {
    "left" : "logger.debug(\n                    \"Checking if the instance zone {} is the same as the zone from DNS {}\",\n                    instanceZone, zone);",
    "right" : "logger.debug(\n                    \"Checking if the instance zone {} is the same as the zone from DNS {}\",\n                    instanceZone, zone);",
    "info" : "ExpressionStatement[63193-63339]:ExpressionStatement[63172-63318]"
  }, {
    "left" : "if (preferSameZone)",
    "right" : "if (preferSameZone)",
    "info" : "IfStatement[63352-63639]:IfStatement[63331-63618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63372-63502]:Block[63351-63481]"
  }, {
    "left" : "if (instanceZone.equalsIgnoreCase(zone))",
    "right" : "if (instanceZone.equalsIgnoreCase(zone))",
    "info" : "IfStatement[63390-63488]:IfStatement[63369-63467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63431-63488]:Block[63410-63467]"
  }, {
    "left" : "zoneFound = true;",
    "right" : "zoneFound = true;",
    "info" : "ExpressionStatement[63453-63470]:ExpressionStatement[63432-63449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63508-63639]:Block[63487-63618]"
  }, {
    "left" : "if (!instanceZone.equalsIgnoreCase(zone))",
    "right" : "if (!instanceZone.equalsIgnoreCase(zone))",
    "info" : "IfStatement[63526-63625]:IfStatement[63505-63604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63568-63625]:Block[63547-63604]"
  }, {
    "left" : "zoneFound = true;",
    "right" : "zoneFound = true;",
    "info" : "ExpressionStatement[63590-63607]:ExpressionStatement[63569-63586]"
  }, {
    "left" : "if (zoneFound)",
    "right" : "if (zoneFound)",
    "info" : "IfStatement[63652-63931]:IfStatement[63631-63910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63667-63931]:Block[63646-63910]"
  }, {
    "left" : "Object[] args = {zones, instanceZone, zoneIndex};",
    "right" : "Object[] args = {zones, instanceZone, zoneIndex};",
    "info" : "VariableDeclarationStatement[63685-63734]:VariableDeclarationStatement[63664-63713]"
  }, {
    "left" : "logger.debug(\n                        \"The zone index from the list {} that matches the instance zone {} is {}\",\n                        args);",
    "right" : "logger.debug(\n                        \"The zone index from the list {} that matches the instance zone {} is {}\",\n                        args);",
    "info" : "ExpressionStatement[63751-63894]:ExpressionStatement[63730-63873]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[63911-63917]:BreakStatement[63890-63896]"
  }, {
    "left" : "zoneIndex++;",
    "right" : "zoneIndex++;",
    "info" : "ExpressionStatement[63944-63956]:ExpressionStatement[63923-63935]"
  }, {
    "left" : "if (zoneIndex >= zones.size())",
    "right" : "if (zoneIndex >= zones.size())",
    "info" : "IfStatement[63975-64418]:IfStatement[63954-64397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64006-64193]:Block[63985-64172]"
  }, {
    "left" : "logger.warn(\n                    \"No match for the zone {} in the list of available zones {}\",\n                    instanceZone, Arrays.toString(zones.toArray()));",
    "right" : "logger.warn(\n                    \"No match for the zone {} in the list of available zones {}\",\n                    instanceZone, Arrays.toString(zones.toArray()));",
    "info" : "ExpressionStatement[64020-64183]:ExpressionStatement[63999-64162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64199-64418]:Block[64178-64397]"
  }, {
    "left" : "for (int i = 0; i < zoneIndex; i++)",
    "right" : "for (int i = 0; i < zoneIndex; i++)",
    "info" : "ForStatement[64277-64408]:ForStatement[64256-64387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64313-64408]:Block[64292-64387]"
  }, {
    "left" : "String zone = zones.remove(0);",
    "right" : "String zone = zones.remove(0);",
    "info" : "VariableDeclarationStatement[64331-64361]:VariableDeclarationStatement[64310-64340]"
  }, {
    "left" : "zones.add(zone);",
    "right" : "zones.add(zone);",
    "info" : "ExpressionStatement[64378-64394]:ExpressionStatement[64357-64373]"
  }, {
    "left" : "List<String> serviceUrls = new ArrayList<String>();",
    "right" : "List<String> serviceUrls = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[64508-64559]:VariableDeclarationStatement[64487-64538]"
  }, {
    "left" : "for (String zone : zones)",
    "right" : "for (String zone : zones)",
    "info" : "EnhancedForStatement[64568-65522]:EnhancedForStatement[64547-65501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64594-65522]:Block[64573-65501]"
  }, {
    "left" : "for (String zoneCname : zoneDnsNamesMap.get(zone))",
    "right" : "for (String zoneCname : zoneDnsNamesMap.get(zone))",
    "info" : "EnhancedForStatement[64608-65512]:EnhancedForStatement[64587-65491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64659-65512]:Block[64638-65491]"
  }, {
    "left" : "List<String> ec2Urls = new ArrayList<String>(\n                        getEC2DiscoveryUrlsFromZone(zoneCname,\n                                DiscoveryUrlType.CNAME));",
    "right" : "List<String> ec2Urls = new ArrayList<String>(\n                        getEC2DiscoveryUrlsFromZone(zoneCname,\n                                DiscoveryUrlType.CNAME));",
    "info" : "VariableDeclarationStatement[64677-64843]:VariableDeclarationStatement[64656-64822]"
  }, {
    "left" : "if (ec2Urls.size() > 1)",
    "right" : "if (ec2Urls.size() > 1)",
    "info" : "IfStatement[64968-65073]:IfStatement[64947-65052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64992-65073]:Block[64971-65052]"
  }, {
    "left" : "this.arrangeListBasedonHostname(ec2Urls);",
    "right" : "this.arrangeListBasedonHostname(ec2Urls);",
    "info" : "ExpressionStatement[65014-65055]:ExpressionStatement[64993-65034]"
  }, {
    "left" : "for (String ec2Url : ec2Urls)",
    "right" : "for (String ec2Url : ec2Urls)",
    "info" : "EnhancedForStatement[65090-65498]:EnhancedForStatement[65069-65477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65120-65498]:Block[65099-65477]"
  }, {
    "left" : "String serviceUrl = \"http://\" + ec2Url + \":\"\n                            + clientConfig.getEurekaServerPort()\n\n                            + \"/\" + clientConfig.getEurekaServerURLContext()\n                            + \"/\";",
    "right" : "String serviceUrl = \"http://\" + ec2Url + \":\"\n                            + clientConfig.getEurekaServerPort()\n\n                            + \"/\" + clientConfig.getEurekaServerURLContext()\n                            + \"/\";",
    "info" : "VariableDeclarationStatement[65142-65364]:VariableDeclarationStatement[65121-65343]"
  }, {
    "left" : "logger.debug(\"The EC2 url is {}\", serviceUrl);",
    "right" : "logger.debug(\"The EC2 url is {}\", serviceUrl);",
    "info" : "ExpressionStatement[65385-65431]:ExpressionStatement[65364-65410]"
  }, {
    "left" : "serviceUrls.add(serviceUrl);",
    "right" : "serviceUrls.add(serviceUrl);",
    "info" : "ExpressionStatement[65452-65480]:ExpressionStatement[65431-65459]"
  }, {
    "left" : "String primaryServiceUrl = serviceUrls.remove(0);",
    "right" : "String primaryServiceUrl = serviceUrls.remove(0);",
    "info" : "VariableDeclarationStatement[65601-65650]:VariableDeclarationStatement[65580-65629]"
  }, {
    "left" : "arrangeListBasedonHostname(serviceUrls);",
    "right" : "arrangeListBasedonHostname(serviceUrls);",
    "info" : "ExpressionStatement[65659-65699]:ExpressionStatement[65638-65678]"
  }, {
    "left" : "serviceUrls.add(0, primaryServiceUrl);",
    "right" : "serviceUrls.add(0, primaryServiceUrl);",
    "info" : "ExpressionStatement[65708-65746]:ExpressionStatement[65687-65725]"
  }, {
    "left" : "logger.debug(\n                \"This client will talk to the following serviceUrls in order : {} \",\n                Arrays.toString(serviceUrls.toArray()));",
    "right" : "logger.debug(\n                \"This client will talk to the following serviceUrls in order : {} \",\n                Arrays.toString(serviceUrls.toArray()));",
    "info" : "ExpressionStatement[65756-65911]:ExpressionStatement[65735-65890]"
  }, {
    "left" : "t.stop();",
    "right" : "t.stop();",
    "info" : "ExpressionStatement[65920-65929]:ExpressionStatement[65899-65908]"
  }, {
    "left" : "return serviceUrls;",
    "right" : "return serviceUrls;",
    "info" : "ReturnStatement[65938-65957]:ReturnStatement[65917-65936]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[65969-65978]:MarkerAnnotation[65948-65957]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65983-65989]:Modifier[65962-65968]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[65990-66002]:ParameterizedType[65969-65981]"
  }, {
    "left" : "getDiscoveryServiceUrls",
    "right" : "getDiscoveryServiceUrls",
    "info" : "SimpleName[66003-66026]:SimpleName[65982-66005]"
  }, {
    "left" : "String zone",
    "right" : "String zone",
    "info" : "SingleVariableDeclaration[66027-66038]:SingleVariableDeclaration[66006-66017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66040-66348]:Block[66019-66327]"
  }, {
    "left" : "boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();",
    "right" : "boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();",
    "info" : "VariableDeclarationStatement[66050-66123]:VariableDeclarationStatement[66029-66102]"
  }, {
    "left" : "if (shouldUseDns)",
    "right" : "if (shouldUseDns)",
    "info" : "IfStatement[66132-66252]:IfStatement[66111-66231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66150-66252]:Block[66129-66231]"
  }, {
    "left" : "return getServiceUrlsFromDNS(zone, clientConfig.shouldPreferSameZoneEureka());",
    "right" : "return getServiceUrlsFromDNS(zone, clientConfig.shouldPreferSameZoneEureka());",
    "info" : "ReturnStatement[66164-66242]:ReturnStatement[66143-66221]"
  }, {
    "left" : "return getServiceUrlsFromConfig(zone, clientConfig.shouldPreferSameZoneEureka());",
    "right" : "return getServiceUrlsFromConfig(zone, clientConfig.shouldPreferSameZoneEureka());",
    "info" : "ReturnStatement[66261-66342]:ReturnStatement[66240-66321]"
  }, {
    "left" : "/**\n     * @deprecated see {@link com.netflix.appinfo.InstanceInfo#getZone(String[], com.netflix.appinfo.InstanceInfo)}\n     *\n     * Get the zone that a particular instance is in.\n     *\n     * @param myInfo\n     *            - The InstanceInfo object of the instance.\n     * @return - The zone in which the particular instance belongs to.\n     */",
    "right" : "/**\n     * @deprecated see {@link com.netflix.appinfo.InstanceInfo#getZone(String[], com.netflix.appinfo.InstanceInfo)}\n     *\n     * Get the zone that a particular instance is in.\n     *\n     * @param myInfo\n     *            - The InstanceInfo object of the instance.\n     * @return - The zone in which the particular instance belongs to.\n     */",
    "info" : "Javadoc[66413-66761]:Javadoc[66392-66740]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[66766-66777]:MarkerAnnotation[66745-66756]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66782-66788]:Modifier[66761-66767]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66789-66795]:Modifier[66768-66774]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[66796-66802]:SimpleType[66775-66781]"
  }, {
    "left" : "getZone",
    "right" : "getZone",
    "info" : "SimpleName[66803-66810]:SimpleName[66782-66789]"
  }, {
    "left" : "InstanceInfo myInfo",
    "right" : "InstanceInfo myInfo",
    "info" : "SingleVariableDeclaration[66811-66830]:SingleVariableDeclaration[66790-66809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66832-66987]:Block[66811-66966]"
  }, {
    "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
    "info" : "VariableDeclarationStatement[66842-66924]:VariableDeclarationStatement[66821-66903]"
  }, {
    "left" : "return InstanceInfo.getZone(availZones, myInfo);",
    "right" : "return InstanceInfo.getZone(availZones, myInfo);",
    "info" : "ReturnStatement[66933-66981]:ReturnStatement[66912-66960]"
  }, {
    "left" : "/**\n     * Get the region that this particular instance is in.\n     *\n     * @return - The region in which the particular instance belongs to.\n     */",
    "right" : "/**\n     * Get the region that this particular instance is in.\n     *\n     * @return - The region in which the particular instance belongs to.\n     */",
    "info" : "Javadoc[66993-67143]:Javadoc[66972-67122]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67148-67154]:Modifier[67127-67133]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67155-67161]:Modifier[67134-67140]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[67162-67168]:SimpleType[67141-67147]"
  }, {
    "left" : "getRegion",
    "right" : "getRegion",
    "info" : "SimpleName[67169-67178]:SimpleName[67148-67157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67181-67379]:Block[67160-67358]"
  }, {
    "left" : "String region = clientConfig.getRegion();",
    "right" : "String region = clientConfig.getRegion();",
    "info" : "VariableDeclarationStatement[67191-67232]:VariableDeclarationStatement[67170-67211]"
  }, {
    "left" : "if (region == null)",
    "right" : "if (region == null)",
    "info" : "IfStatement[67241-67304]:IfStatement[67220-67283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67261-67304]:Block[67240-67283]"
  }, {
    "left" : "region = \"default\";",
    "right" : "region = \"default\";",
    "info" : "ExpressionStatement[67275-67294]:ExpressionStatement[67254-67273]"
  }, {
    "left" : "region = region.trim().toLowerCase();",
    "right" : "region = region.trim().toLowerCase();",
    "info" : "ExpressionStatement[67313-67350]:ExpressionStatement[67292-67329]"
  }, {
    "left" : "return region;",
    "right" : "return region;",
    "info" : "ReturnStatement[67359-67373]:ReturnStatement[67338-67352]"
  }, {
    "left" : "/**\n     * Get the zone based CNAMES that are bound to a region.\n     *\n     * @param region\n     *            - The region for which the zone names need to be retrieved\n     * @return - The list of CNAMES from which the zone-related information can\n     *         be retrieved\n     */",
    "right" : "/**\n     * Get the zone based CNAMES that are bound to a region.\n     *\n     * @param region\n     *            - The region for which the zone names need to be retrieved\n     * @return - The list of CNAMES from which the zone-related information can\n     *         be retrieved\n     */",
    "info" : "Javadoc[67385-67670]:Javadoc[67364-67649]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67675-67681]:Modifier[67654-67660]"
  }, {
    "left" : "Map<String, List<String>>",
    "right" : "Map<String, List<String>>",
    "info" : "ParameterizedType[67682-67707]:ParameterizedType[67661-67686]"
  }, {
    "left" : "getZoneBasedDiscoveryUrlsFromRegion",
    "right" : "getZoneBasedDiscoveryUrlsFromRegion",
    "info" : "SimpleName[67708-67743]:SimpleName[67687-67722]"
  }, {
    "left" : "String region",
    "right" : "String region",
    "info" : "SingleVariableDeclaration[67757-67770]:SingleVariableDeclaration[67736-67749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67772-69553]:Block[67751-69532]"
  }, {
    "left" : "String discoveryDnsName = null;",
    "right" : "String discoveryDnsName = null;",
    "info" : "VariableDeclarationStatement[67782-67813]:VariableDeclarationStatement[67761-67792]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[67822-69547]:TryStatement[67801-69526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67826-69391]:Block[67805-69370]"
  }, {
    "left" : "discoveryDnsName = \"txt.\" + region + \".\"\n                    + clientConfig.getEurekaServerDNSName();",
    "right" : "discoveryDnsName = \"txt.\" + region + \".\"\n                    + clientConfig.getEurekaServerDNSName();",
    "info" : "ExpressionStatement[67840-67941]:ExpressionStatement[67819-67920]"
  }, {
    "left" : "logger.debug(\"The region url to be looked up is {} :\",\n                    discoveryDnsName);",
    "right" : "logger.debug(\"The region url to be looked up is {} :\",\n                    discoveryDnsName);",
    "info" : "ExpressionStatement[67955-68048]:ExpressionStatement[67934-68027]"
  }, {
    "left" : "Set<String> zoneCnamesForRegion = new TreeSet<String>(\n                    DnsResolver.getCNamesFromTxtRecord(discoveryDnsName));",
    "right" : "Set<String> zoneCnamesForRegion = new TreeSet<String>(\n                    DnsResolver.getCNamesFromTxtRecord(discoveryDnsName));",
    "info" : "VariableDeclarationStatement[68061-68190]:VariableDeclarationStatement[68040-68169]"
  }, {
    "left" : "Map<String, List<String>> zoneCnameMapForRegion = new TreeMap<String, List<String>>();",
    "right" : "Map<String, List<String>> zoneCnameMapForRegion = new TreeMap<String, List<String>>();",
    "info" : "VariableDeclarationStatement[68203-68289]:VariableDeclarationStatement[68182-68268]"
  }, {
    "left" : "for (String zoneCname : zoneCnamesForRegion)",
    "right" : "for (String zoneCname : zoneCnamesForRegion)",
    "info" : "EnhancedForStatement[68302-69339]:EnhancedForStatement[68281-69318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68347-69339]:Block[68326-69318]"
  }, {
    "left" : "String zone = null;",
    "right" : "String zone = null;",
    "info" : "VariableDeclarationStatement[68365-68384]:VariableDeclarationStatement[68344-68363]"
  }, {
    "left" : "if (isEC2Url(zoneCname))",
    "right" : "if (isEC2Url(zoneCname))",
    "info" : "IfStatement[68401-69009]:IfStatement[68380-68988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68426-68756]:Block[68405-68735]"
  }, {
    "left" : "throw new RuntimeException(\n                            \"Cannot find the right DNS entry for \"\n                                    + discoveryDnsName\n                                    + \". \"\n                                    + \"Expected mapping of the format <aws_zone>.<domain_name>\");",
    "right" : "throw new RuntimeException(\n                            \"Cannot find the right DNS entry for \"\n                                    + discoveryDnsName\n                                    + \". \"\n                                    + \"Expected mapping of the format <aws_zone>.<domain_name>\");",
    "info" : "ThrowStatement[68448-68738]:ThrowStatement[68427-68717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68762-69009]:Block[68741-68988]"
  }, {
    "left" : "String[] cnameTokens = zoneCname.split(\"\\\\.\");",
    "right" : "String[] cnameTokens = zoneCname.split(\"\\\\.\");",
    "info" : "VariableDeclarationStatement[68784-68830]:VariableDeclarationStatement[68763-68809]"
  }, {
    "left" : "zone = cnameTokens[0];",
    "right" : "zone = cnameTokens[0];",
    "info" : "ExpressionStatement[68851-68873]:ExpressionStatement[68830-68852]"
  }, {
    "left" : "logger.debug(\"The zoneName mapped to region {} is {}\",\n                            region, zone);",
    "right" : "logger.debug(\"The zoneName mapped to region {} is {}\",\n                            region, zone);",
    "info" : "ExpressionStatement[68894-68991]:ExpressionStatement[68873-68970]"
  }, {
    "left" : "List<String> zoneCnamesSet = zoneCnameMapForRegion.get(zone);",
    "right" : "List<String> zoneCnamesSet = zoneCnameMapForRegion.get(zone);",
    "info" : "VariableDeclarationStatement[69026-69087]:VariableDeclarationStatement[69005-69066]"
  }, {
    "left" : "if (zoneCnamesSet == null)",
    "right" : "if (zoneCnamesSet == null)",
    "info" : "IfStatement[69104-69279]:IfStatement[69083-69258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69131-69279]:Block[69110-69258]"
  }, {
    "left" : "zoneCnamesSet = new ArrayList<String>();",
    "right" : "zoneCnamesSet = new ArrayList<String>();",
    "info" : "ExpressionStatement[69153-69193]:ExpressionStatement[69132-69172]"
  }, {
    "left" : "zoneCnameMapForRegion.put(zone, zoneCnamesSet);",
    "right" : "zoneCnameMapForRegion.put(zone, zoneCnamesSet);",
    "info" : "ExpressionStatement[69214-69261]:ExpressionStatement[69193-69240]"
  }, {
    "left" : "zoneCnamesSet.add(zoneCname);",
    "right" : "zoneCnamesSet.add(zoneCname);",
    "info" : "ExpressionStatement[69296-69325]:ExpressionStatement[69275-69304]"
  }, {
    "left" : "return zoneCnameMapForRegion;",
    "right" : "return zoneCnameMapForRegion;",
    "info" : "ReturnStatement[69352-69381]:ReturnStatement[69331-69360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69412-69547]:Block[69391-69526]"
  }, {
    "left" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + discoveryDnsName, e);",
    "right" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + discoveryDnsName, e);",
    "info" : "ThrowStatement[69426-69537]:ThrowStatement[69405-69516]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69559-69566]:Modifier[69538-69545]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69567-69573]:Modifier[69546-69552]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[69574-69581]:PrimitiveType[69553-69560]"
  }, {
    "left" : "isEC2Url",
    "right" : "isEC2Url",
    "info" : "SimpleName[69582-69590]:SimpleName[69561-69569]"
  }, {
    "left" : "String zoneCname",
    "right" : "String zoneCname",
    "info" : "SingleVariableDeclaration[69591-69607]:SingleVariableDeclaration[69570-69586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69609-69660]:Block[69588-69639]"
  }, {
    "left" : "return zoneCname.startsWith(\"ec2\");",
    "right" : "return zoneCname.startsWith(\"ec2\");",
    "info" : "ReturnStatement[69619-69654]:ReturnStatement[69598-69633]"
  }, {
    "left" : "/**\n     * Get the list of EC2 URLs given the zone name.\n     *\n     * @param dnsName\n     *            - The dns name of the zone-specific CNAME\n     * @param type\n     *            - CNAME or EIP that needs to be retrieved\n     * @return - The list of EC2 URLs associated with the dns name\n     */",
    "right" : "/**\n     * Get the list of EC2 URLs given the zone name.\n     *\n     * @param dnsName\n     *            - The dns name of the zone-specific CNAME\n     * @param type\n     *            - CNAME or EIP that needs to be retrieved\n     * @return - The list of EC2 URLs associated with the dns name\n     */",
    "info" : "Javadoc[69666-69965]:Javadoc[69645-69944]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[69970-69976]:Modifier[69949-69955]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69977-69983]:Modifier[69956-69962]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[69984-69995]:ParameterizedType[69963-69974]"
  }, {
    "left" : "getEC2DiscoveryUrlsFromZone",
    "right" : "getEC2DiscoveryUrlsFromZone",
    "info" : "SimpleName[69996-70023]:SimpleName[69975-70002]"
  }, {
    "left" : "String dnsName",
    "right" : "String dnsName",
    "info" : "SingleVariableDeclaration[70024-70038]:SingleVariableDeclaration[70003-70017]"
  }, {
    "left" : "DiscoveryUrlType type",
    "right" : "DiscoveryUrlType type",
    "info" : "SingleVariableDeclaration[70098-70119]:SingleVariableDeclaration[70077-70098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70121-71593]:Block[70100-71572]"
  }, {
    "left" : "Set<String> eipsForZone = null;",
    "right" : "Set<String> eipsForZone = null;",
    "info" : "VariableDeclarationStatement[70131-70162]:VariableDeclarationStatement[70110-70141]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[70171-71559]:TryStatement[70150-71538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70175-71412]:Block[70154-71391]"
  }, {
    "left" : "dnsName = \"txt.\" + dnsName;",
    "right" : "dnsName = \"txt.\" + dnsName;",
    "info" : "ExpressionStatement[70189-70216]:ExpressionStatement[70168-70195]"
  }, {
    "left" : "logger.debug(\"The zone url to be looked up is {} :\", dnsName);",
    "right" : "logger.debug(\"The zone url to be looked up is {} :\", dnsName);",
    "info" : "ExpressionStatement[70229-70291]:ExpressionStatement[70208-70270]"
  }, {
    "left" : "Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);",
    "right" : "Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);",
    "info" : "VariableDeclarationStatement[70304-70377]:VariableDeclarationStatement[70283-70356]"
  }, {
    "left" : "for (String ec2Url : ec2UrlsForZone)",
    "right" : "for (String ec2Url : ec2UrlsForZone)",
    "info" : "EnhancedForStatement[70390-70601]:EnhancedForStatement[70369-70580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70427-70601]:Block[70406-70580]"
  }, {
    "left" : "logger.debug(\"The eureka url for the dns name {} is {}\",\n                        dnsName, ec2Url);",
    "right" : "logger.debug(\"The eureka url for the dns name {} is {}\",\n                        dnsName, ec2Url);",
    "info" : "ExpressionStatement[70445-70543]:ExpressionStatement[70424-70522]"
  }, {
    "left" : "ec2UrlsForZone.add(ec2Url);",
    "right" : "ec2UrlsForZone.add(ec2Url);",
    "info" : "ExpressionStatement[70560-70587]:ExpressionStatement[70539-70566]"
  }, {
    "left" : "if (DiscoveryUrlType.CNAME.equals(type))",
    "right" : "if (DiscoveryUrlType.CNAME.equals(type))",
    "info" : "IfStatement[70614-70709]:IfStatement[70593-70688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70655-70709]:Block[70634-70688]"
  }, {
    "left" : "return ec2UrlsForZone;",
    "right" : "return ec2UrlsForZone;",
    "info" : "ReturnStatement[70673-70695]:ReturnStatement[70652-70674]"
  }, {
    "left" : "eipsForZone = new TreeSet<String>();",
    "right" : "eipsForZone = new TreeSet<String>();",
    "info" : "ExpressionStatement[70722-70758]:ExpressionStatement[70701-70737]"
  }, {
    "left" : "for (String cname : ec2UrlsForZone)",
    "right" : "for (String cname : ec2UrlsForZone)",
    "info" : "EnhancedForStatement[70771-71327]:EnhancedForStatement[70750-71306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70807-71327]:Block[70786-71306]"
  }, {
    "left" : "String[] tokens = cname.split(\"\\\\.\");",
    "right" : "String[] tokens = cname.split(\"\\\\.\");",
    "info" : "VariableDeclarationStatement[70825-70862]:VariableDeclarationStatement[70804-70841]"
  }, {
    "left" : "String ec2HostName = tokens[0];",
    "right" : "String ec2HostName = tokens[0];",
    "info" : "VariableDeclarationStatement[70879-70910]:VariableDeclarationStatement[70858-70889]"
  }, {
    "left" : "String[] ips = ec2HostName.split(\"-\");",
    "right" : "String[] ips = ec2HostName.split(\"-\");",
    "info" : "VariableDeclarationStatement[70927-70965]:VariableDeclarationStatement[70906-70944]"
  }, {
    "left" : "StringBuffer eipBuffer = new StringBuffer();",
    "right" : "StringBuffer eipBuffer = new StringBuffer();",
    "info" : "VariableDeclarationStatement[70982-71026]:VariableDeclarationStatement[70961-71005]"
  }, {
    "left" : "for (int ipCtr = 1; ipCtr < 5; ipCtr++)",
    "right" : "for (int ipCtr = 1; ipCtr < 5; ipCtr++)",
    "info" : "ForStatement[71043-71258]:ForStatement[71022-71237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71083-71258]:Block[71062-71237]"
  }, {
    "left" : "eipBuffer.append(ips[ipCtr]);",
    "right" : "eipBuffer.append(ips[ipCtr]);",
    "info" : "ExpressionStatement[71105-71134]:ExpressionStatement[71084-71113]"
  }, {
    "left" : "if (ipCtr < 4)",
    "right" : "if (ipCtr < 4)",
    "info" : "IfStatement[71155-71240]:IfStatement[71134-71219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71170-71240]:Block[71149-71219]"
  }, {
    "left" : "eipBuffer.append(\".\");",
    "right" : "eipBuffer.append(\".\");",
    "info" : "ExpressionStatement[71196-71218]:ExpressionStatement[71175-71197]"
  }, {
    "left" : "eipsForZone.add(eipBuffer.toString());",
    "right" : "eipsForZone.add(eipBuffer.toString());",
    "info" : "ExpressionStatement[71275-71313]:ExpressionStatement[71254-71292]"
  }, {
    "left" : "logger.debug(\"The EIPS for {} is {} :\", dnsName, eipsForZone);",
    "right" : "logger.debug(\"The EIPS for {} is {} :\", dnsName, eipsForZone);",
    "info" : "ExpressionStatement[71340-71402]:ExpressionStatement[71319-71381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71433-71559]:Block[71412-71538]"
  }, {
    "left" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + dnsName, e);",
    "right" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + dnsName, e);",
    "info" : "ThrowStatement[71447-71549]:ThrowStatement[71426-71528]"
  }, {
    "left" : "return eipsForZone;",
    "right" : "return eipsForZone;",
    "info" : "ReturnStatement[71568-71587]:ReturnStatement[71547-71566]"
  }, {
    "left" : "/**\n     * Gets the zone to pick up for this instance.\n     *\n     */",
    "right" : "/**\n     * Gets the zone to pick up for this instance.\n     *\n     */",
    "info" : "Javadoc[71599-71668]:Javadoc[71578-71647]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[71673-71680]:Modifier[71652-71659]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71681-71687]:Modifier[71660-71666]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[71688-71691]:PrimitiveType[71667-71670]"
  }, {
    "left" : "getZoneOffset",
    "right" : "getZoneOffset",
    "info" : "SimpleName[71692-71705]:SimpleName[71671-71684]"
  }, {
    "left" : "String myZone",
    "right" : "String myZone",
    "info" : "SingleVariableDeclaration[71706-71719]:SingleVariableDeclaration[71685-71698]"
  }, {
    "left" : "boolean preferSameZone",
    "right" : "boolean preferSameZone",
    "info" : "SingleVariableDeclaration[71721-71743]:SingleVariableDeclaration[71700-71722]"
  }, {
    "left" : "String[] availZones",
    "right" : "String[] availZones",
    "info" : "SingleVariableDeclaration[71782-71801]:SingleVariableDeclaration[71761-71780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71803-72281]:Block[71782-72260]"
  }, {
    "left" : "for (int i = 0; i < availZones.length; i++)",
    "right" : "for (int i = 0; i < availZones.length; i++)",
    "info" : "ForStatement[71813-72031]:ForStatement[71792-72010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71857-72031]:Block[71836-72010]"
  }, {
    "left" : "if (myZone != null\n                    && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone))",
    "right" : "if (myZone != null\n                    && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone))",
    "info" : "IfStatement[71871-72021]:IfStatement[71850-72000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71980-72021]:Block[71959-72000]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[71998-72007]:ReturnStatement[71977-71986]"
  }, {
    "left" : "logger.warn(\n                \"DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}, preferSameZone- {}. \"\n                        + \"Defaulting to \" + availZones[0], myZone, preferSameZone);",
    "right" : "logger.warn(\n                \"DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}, preferSameZone- {}. \"\n                        + \"Defaulting to \" + availZones[0], myZone, preferSameZone);",
    "info" : "ExpressionStatement[72040-72257]:ExpressionStatement[72019-72236]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[72266-72275]:ReturnStatement[72245-72254]"
  }, {
    "left" : "/**\n     * Check if the http status code is a success for the given action.\n     *\n     */",
    "right" : "/**\n     * Check if the http status code is a success for the given action.\n     *\n     */",
    "info" : "Javadoc[72287-72377]:Javadoc[72266-72356]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72382-72389]:Modifier[72361-72368]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[72390-72397]:PrimitiveType[72369-72376]"
  }, {
    "left" : "isOk",
    "right" : "isOk",
    "info" : "SimpleName[72398-72402]:SimpleName[72377-72381]"
  }, {
    "left" : "Action action",
    "right" : "Action action",
    "info" : "SingleVariableDeclaration[72403-72416]:SingleVariableDeclaration[72382-72395]"
  }, {
    "left" : "int httpStatus",
    "right" : "int httpStatus",
    "info" : "SingleVariableDeclaration[72418-72432]:SingleVariableDeclaration[72397-72411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72434-72822]:Block[72413-72801]"
  }, {
    "left" : "if (httpStatus >= 200 && httpStatus < 300 || httpStatus == 302)",
    "right" : "if (httpStatus >= 200 && httpStatus < 300 || httpStatus == 302)",
    "info" : "IfStatement[72444-72816]:IfStatement[72423-72795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72508-72544]:Block[72487-72523]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[72522-72534]:ReturnStatement[72501-72513]"
  }, {
    "left" : "if (Action.Renew == action && httpStatus == 404)",
    "right" : "if (Action.Renew == action && httpStatus == 404)",
    "info" : "IfStatement[72550-72816]:IfStatement[72529-72795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72599-72635]:Block[72578-72614]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[72613-72625]:ReturnStatement[72592-72604]"
  }, {
    "left" : "if (Action.Refresh_Delta == action\n                && (httpStatus == 403 || httpStatus == 404))",
    "right" : "if (Action.Refresh_Delta == action\n                && (httpStatus == 403 || httpStatus == 404))",
    "info" : "IfStatement[72641-72816]:IfStatement[72620-72795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72737-72773]:Block[72716-72752]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[72751-72763]:ReturnStatement[72730-72742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72779-72816]:Block[72758-72795]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[72793-72806]:ReturnStatement[72772-72785]"
  }, {
    "left" : "/**\n     * Returns the eureka server which this eureka client communicates with.\n     *\n     * @return - The instance information that describes the eureka server.\n     */",
    "right" : "/**\n     * Returns the eureka server which this eureka client communicates with.\n     *\n     * @return - The instance information that describes the eureka server.\n     */",
    "info" : "Javadoc[72828-72999]:Javadoc[72807-72978]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[73004-73011]:Modifier[72983-72990]"
  }, {
    "left" : "InstanceInfo",
    "right" : "InstanceInfo",
    "info" : "SimpleType[73012-73024]:SimpleType[72991-73003]"
  }, {
    "left" : "getCoordinatingServer",
    "right" : "getCoordinatingServer",
    "info" : "SimpleName[73025-73046]:SimpleName[73004-73025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73049-73675]:Block[73028-73654]"
  }, {
    "left" : "Application app = getApplication(DISCOVERY_APPID);",
    "right" : "Application app = getApplication(DISCOVERY_APPID);",
    "info" : "VariableDeclarationStatement[73059-73109]:VariableDeclarationStatement[73038-73088]"
  }, {
    "left" : "List<InstanceInfo> discoveryInstances = null;",
    "right" : "List<InstanceInfo> discoveryInstances = null;",
    "info" : "VariableDeclarationStatement[73118-73163]:VariableDeclarationStatement[73097-73142]"
  }, {
    "left" : "InstanceInfo instanceToReturn = null;",
    "right" : "InstanceInfo instanceToReturn = null;",
    "info" : "VariableDeclarationStatement[73172-73209]:VariableDeclarationStatement[73151-73188]"
  }, {
    "left" : "if (app != null)",
    "right" : "if (app != null)",
    "info" : "IfStatement[73219-73300]:IfStatement[73198-73279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73236-73300]:Block[73215-73279]"
  }, {
    "left" : "discoveryInstances = app.getInstances();",
    "right" : "discoveryInstances = app.getInstances();",
    "info" : "ExpressionStatement[73250-73290]:ExpressionStatement[73229-73269]"
  }, {
    "left" : "if (discoveryInstances != null)",
    "right" : "if (discoveryInstances != null)",
    "info" : "IfStatement[73310-73636]:IfStatement[73289-73615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73342-73636]:Block[73321-73615]"
  }, {
    "left" : "for (InstanceInfo instance : discoveryInstances)",
    "right" : "for (InstanceInfo instance : discoveryInstances)",
    "info" : "EnhancedForStatement[73356-73626]:EnhancedForStatement[73335-73605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73405-73626]:Block[73384-73605]"
  }, {
    "left" : "if ((instance != null)\n                        && (instance.isCoordinatingDiscoveryServer()))",
    "right" : "if ((instance != null)\n                        && (instance.isCoordinatingDiscoveryServer()))",
    "info" : "IfStatement[73423-73612]:IfStatement[73402-73591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73517-73612]:Block[73496-73591]"
  }, {
    "left" : "instanceToReturn = instance;",
    "right" : "instanceToReturn = instance;",
    "info" : "ExpressionStatement[73539-73567]:ExpressionStatement[73518-73546]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[73588-73594]:BreakStatement[73567-73573]"
  }, {
    "left" : "return instanceToReturn;",
    "right" : "return instanceToReturn;",
    "info" : "ReturnStatement[73645-73669]:ReturnStatement[73624-73648]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[73681-73688]:Modifier[73660-73667]"
  }, {
    "left" : "ClientResponse",
    "right" : "ClientResponse",
    "info" : "SimpleType[73689-73703]:SimpleType[73668-73682]"
  }, {
    "left" : "getUrl",
    "right" : "getUrl",
    "info" : "SimpleName[73704-73710]:SimpleName[73683-73689]"
  }, {
    "left" : "String fullServiceUrl",
    "right" : "String fullServiceUrl",
    "info" : "SingleVariableDeclaration[73711-73732]:SingleVariableDeclaration[73690-73711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73734-73937]:Block[73713-73916]"
  }, {
    "left" : "ClientResponse cr = discoveryApacheClient.resource(fullServiceUrl)\n                .accept(MediaType.APPLICATION_JSON_TYPE)\n                .get(ClientResponse.class);",
    "right" : "ClientResponse cr = discoveryApacheClient.resource(fullServiceUrl)\n                .accept(MediaType.APPLICATION_JSON_TYPE)\n                .get(ClientResponse.class);",
    "info" : "VariableDeclarationStatement[73744-73911]:VariableDeclarationStatement[73723-73890]"
  }, {
    "left" : "return cr;",
    "right" : "return cr;",
    "info" : "ReturnStatement[73921-73931]:ReturnStatement[73900-73910]"
  }, {
    "left" : "/**\n     * Refresh the current local instanceInfo. Note that after a valid refresh where changes are observed, the\n     * isDirty flag on the instanceInfo is set to true\n     */",
    "right" : "/**\n     * Refresh the current local instanceInfo. Note that after a valid refresh where changes are observed, the\n     * isDirty flag on the instanceInfo is set to true\n     */",
    "info" : "Javadoc[73943-74120]:Javadoc[73922-74099]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[74125-74129]:PrimitiveType[74104-74108]"
  }, {
    "left" : "refreshInstanceInfo",
    "right" : "refreshInstanceInfo",
    "info" : "SimpleName[74130-74149]:SimpleName[74109-74128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74152-74635]:Block[74131-74614]"
  }, {
    "left" : "ApplicationInfoManager.getInstance().refreshDataCenterInfoIfRequired();",
    "right" : "ApplicationInfoManager.getInstance().refreshDataCenterInfoIfRequired();",
    "info" : "ExpressionStatement[74162-74233]:ExpressionStatement[74141-74212]"
  }, {
    "left" : "InstanceStatus status;",
    "right" : "InstanceStatus status;",
    "info" : "VariableDeclarationStatement[74243-74265]:VariableDeclarationStatement[74222-74244]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[74274-74544]:TryStatement[74253-74523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74278-74371]:Block[74257-74350]"
  }, {
    "left" : "status = getHealthCheckHandler().getStatus(instanceInfo.getStatus());",
    "right" : "status = getHealthCheckHandler().getStatus(instanceInfo.getStatus());",
    "info" : "ExpressionStatement[74292-74361]:ExpressionStatement[74271-74340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74392-74544]:Block[74371-74523]"
  }, {
    "left" : "logger.warn(\"Exception from healthcheckHandler.getStatus, setting status to DOWN\", e);",
    "right" : "logger.warn(\"Exception from healthcheckHandler.getStatus, setting status to DOWN\", e);",
    "info" : "ExpressionStatement[74406-74492]:ExpressionStatement[74385-74471]"
  }, {
    "left" : "status = InstanceStatus.DOWN;",
    "right" : "status = InstanceStatus.DOWN;",
    "info" : "ExpressionStatement[74505-74534]:ExpressionStatement[74484-74513]"
  }, {
    "left" : "if (null != status)",
    "right" : "if (null != status)",
    "info" : "IfStatement[74554-74629]:IfStatement[74533-74608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74574-74629]:Block[74553-74608]"
  }, {
    "left" : "instanceInfo.setStatus(status);",
    "right" : "instanceInfo.setStatus(status);",
    "info" : "ExpressionStatement[74588-74619]:ExpressionStatement[74567-74598]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[74791-74797]:Modifier[74770-74776]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[74798-74802]:PrimitiveType[74777-74781]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[74803-74806]:SimpleName[74782-74785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74809-74841]:Block[74788-74820]"
  }, {
    "left" : "renew();",
    "right" : "renew();",
    "info" : "ExpressionStatement[74823-74831]:ExpressionStatement[74802-74810]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[74853-74871]:MarkerAnnotation[74832-74850]"
  }, {
    "left" : "InstanceInfoReplicator",
    "right" : "InstanceInfoReplicator",
    "info" : "SimpleType[74876-74898]:SimpleType[74855-74877]"
  }, {
    "left" : "getInstanceInfoReplicator",
    "right" : "getInstanceInfoReplicator",
    "info" : "SimpleName[74899-74924]:SimpleName[74878-74903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74927-74973]:Block[74906-74952]"
  }, {
    "left" : "return instanceInfoReplicator;",
    "right" : "return instanceInfoReplicator;",
    "info" : "ReturnStatement[74937-74967]:ReturnStatement[74916-74946]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[74979-74997]:MarkerAnnotation[74958-74976]"
  }, {
    "left" : "InstanceInfo",
    "right" : "InstanceInfo",
    "info" : "SimpleType[75002-75014]:SimpleType[74981-74993]"
  }, {
    "left" : "getInstanceInfo",
    "right" : "getInstanceInfo",
    "info" : "SimpleName[75015-75030]:SimpleName[74994-75009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75033-75069]:Block[75012-75048]"
  }, {
    "left" : "return instanceInfo;",
    "right" : "return instanceInfo;",
    "info" : "ReturnStatement[75043-75063]:ReturnStatement[75022-75042]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[75075-75084]:MarkerAnnotation[75054-75063]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75089-75095]:Modifier[75068-75074]"
  }, {
    "left" : "HealthCheckHandler",
    "right" : "HealthCheckHandler",
    "info" : "SimpleType[75096-75114]:SimpleType[75075-75093]"
  }, {
    "left" : "getHealthCheckHandler",
    "right" : "getHealthCheckHandler",
    "info" : "SimpleName[75115-75136]:SimpleName[75094-75115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75139-75691]:Block[75118-75670]"
  }, {
    "left" : "if (healthCheckHandler == null)",
    "right" : "if (healthCheckHandler == null)",
    "info" : "IfStatement[75149-75649]:IfStatement[75128-75628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75181-75649]:Block[75160-75628]"
  }, {
    "left" : "if (null != healthCheckHandlerProvider)",
    "right" : "if (null != healthCheckHandlerProvider)",
    "info" : "IfStatement[75195-75495]:IfStatement[75174-75474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75235-75321]:Block[75214-75300]"
  }, {
    "left" : "healthCheckHandler = healthCheckHandlerProvider.get();",
    "right" : "healthCheckHandler = healthCheckHandlerProvider.get();",
    "info" : "ExpressionStatement[75253-75307]:ExpressionStatement[75232-75286]"
  }, {
    "left" : "if (null != healthCheckCallbackProvider)",
    "right" : "if (null != healthCheckCallbackProvider)",
    "info" : "IfStatement[75327-75495]:IfStatement[75306-75474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75368-75495]:Block[75347-75474]"
  }, {
    "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(healthCheckCallbackProvider.get());",
    "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(healthCheckCallbackProvider.get());",
    "info" : "ExpressionStatement[75386-75481]:ExpressionStatement[75365-75460]"
  }, {
    "left" : "if (null == healthCheckHandler)",
    "right" : "if (null == healthCheckHandler)",
    "info" : "IfStatement[75509-75639]:IfStatement[75488-75618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75541-75639]:Block[75520-75618]"
  }, {
    "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(null);",
    "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(null);",
    "info" : "ExpressionStatement[75559-75625]:ExpressionStatement[75538-75604]"
  }, {
    "left" : "return healthCheckHandler;",
    "right" : "return healthCheckHandler;",
    "info" : "ReturnStatement[75659-75685]:ReturnStatement[75638-75664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75853-75859]:Modifier[75832-75838]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[75860-75864]:PrimitiveType[75839-75843]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[75865-75868]:SimpleName[75844-75847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75871-78768]:Block[75850-78747]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[75885-78758]:TryStatement[75864-78737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75889-78650]:Block[75868-78629]"
  }, {
    "left" : "boolean isFetchingRemoteRegionRegistries = isFetchingRemoteRegionRegistries();",
    "right" : "boolean isFetchingRemoteRegionRegistries = isFetchingRemoteRegionRegistries();",
    "info" : "VariableDeclarationStatement[75907-75985]:VariableDeclarationStatement[75886-75964]"
  }, {
    "left" : "boolean remoteRegionsModified = false;",
    "right" : "boolean remoteRegionsModified = false;",
    "info" : "VariableDeclarationStatement[76003-76041]:VariableDeclarationStatement[75982-76020]"
  }, {
    "left" : "String latestRemoteRegions = clientConfig.fetchRegistryForRemoteRegions();",
    "right" : "String latestRemoteRegions = clientConfig.fetchRegistryForRemoteRegions();",
    "info" : "VariableDeclarationStatement[76154-76228]:VariableDeclarationStatement[76133-76207]"
  }, {
    "left" : "if (null != latestRemoteRegions)",
    "right" : "if (null != latestRemoteRegions)",
    "info" : "IfStatement[76245-77545]:IfStatement[76224-77524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76278-77545]:Block[76257-77524]"
  }, {
    "left" : "String currentRemoteRegions = remoteRegionsToFetch.get();",
    "right" : "String currentRemoteRegions = remoteRegionsToFetch.get();",
    "info" : "VariableDeclarationStatement[76300-76357]:VariableDeclarationStatement[76279-76336]"
  }, {
    "left" : "if (!latestRemoteRegions.equals(currentRemoteRegions))",
    "right" : "if (!latestRemoteRegions.equals(currentRemoteRegions))",
    "info" : "IfStatement[76378-77527]:IfStatement[76357-77506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76433-77329]:Block[76412-77308]"
  }, {
    "left" : "synchronized (instanceRegionChecker.getAzToRegionMapper()) {\n                            if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions)) {\n                                String[] remoteRegions = latestRemoteRegions.split(\",\");\n                                instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);\n                                remoteRegionsModified = true;\n                            } else {\n                                logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);\n                            }\n                        }",
    "right" : "synchronized (instanceRegionChecker.getAzToRegionMapper()) {\n                            if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions)) {\n                                String[] remoteRegions = latestRemoteRegions.split(\",\");\n                                instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);\n                                remoteRegionsModified = true;\n                            } else {\n                                logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);\n                            }\n                        }",
    "info" : "SynchronizedStatement[76567-77307]:SynchronizedStatement[76546-77286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76626-77307]:Block[76605-77286]"
  }, {
    "left" : "if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions))",
    "right" : "if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions))",
    "info" : "IfStatement[76656-77281]:IfStatement[76635-77260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76739-77031]:Block[76718-77010]"
  }, {
    "left" : "String[] remoteRegions = latestRemoteRegions.split(\",\");",
    "right" : "String[] remoteRegions = latestRemoteRegions.split(\",\");",
    "info" : "VariableDeclarationStatement[76773-76829]:VariableDeclarationStatement[76752-76808]"
  }, {
    "left" : "instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);",
    "right" : "instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);",
    "info" : "ExpressionStatement[76862-76939]:ExpressionStatement[76841-76918]"
  }, {
    "left" : "remoteRegionsModified = true;",
    "right" : "remoteRegionsModified = true;",
    "info" : "ExpressionStatement[76972-77001]:ExpressionStatement[76951-76980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77037-77281]:Block[77016-77260]"
  }, {
    "left" : "logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);",
    "right" : "logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);",
    "info" : "ExpressionStatement[77071-77251]:ExpressionStatement[77050-77230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77335-77527]:Block[77314-77506]"
  }, {
    "left" : "instanceRegionChecker.getAzToRegionMapper().refreshMapping();",
    "right" : "instanceRegionChecker.getAzToRegionMapper().refreshMapping();",
    "info" : "ExpressionStatement[77444-77505]:ExpressionStatement[77423-77484]"
  }, {
    "left" : "fetchRegistry(remoteRegionsModified);",
    "right" : "fetchRegistry(remoteRegionsModified);",
    "info" : "ExpressionStatement[77563-77600]:ExpressionStatement[77542-77579]"
  }, {
    "left" : "if (logger.isDebugEnabled())",
    "right" : "if (logger.isDebugEnabled())",
    "info" : "IfStatement[77618-78636]:IfStatement[77597-78615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77647-78636]:Block[77626-78615]"
  }, {
    "left" : "StringBuilder allAppsHashCodes = new StringBuilder();",
    "right" : "StringBuilder allAppsHashCodes = new StringBuilder();",
    "info" : "VariableDeclarationStatement[77669-77722]:VariableDeclarationStatement[77648-77701]"
  }, {
    "left" : "allAppsHashCodes.append(\"Local region apps hashcode: \");",
    "right" : "allAppsHashCodes.append(\"Local region apps hashcode: \");",
    "info" : "ExpressionStatement[77743-77799]:ExpressionStatement[77722-77778]"
  }, {
    "left" : "allAppsHashCodes.append(localRegionApps.get().getAppsHashCode());",
    "right" : "allAppsHashCodes.append(localRegionApps.get().getAppsHashCode());",
    "info" : "ExpressionStatement[77820-77885]:ExpressionStatement[77799-77864]"
  }, {
    "left" : "allAppsHashCodes.append(\", is fetching remote regions? \");",
    "right" : "allAppsHashCodes.append(\", is fetching remote regions? \");",
    "info" : "ExpressionStatement[77906-77964]:ExpressionStatement[77885-77943]"
  }, {
    "left" : "allAppsHashCodes.append(isFetchingRemoteRegionRegistries);",
    "right" : "allAppsHashCodes.append(isFetchingRemoteRegionRegistries);",
    "info" : "ExpressionStatement[77985-78043]:ExpressionStatement[77964-78022]"
  }, {
    "left" : "for (Map.Entry<String, Applications> entry : remoteRegionVsApps.entrySet())",
    "right" : "for (Map.Entry<String, Applications> entry : remoteRegionVsApps.entrySet())",
    "info" : "EnhancedForStatement[78064-78454]:EnhancedForStatement[78043-78433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78140-78454]:Block[78119-78433]"
  }, {
    "left" : "allAppsHashCodes.append(\", Remote region: \");",
    "right" : "allAppsHashCodes.append(\", Remote region: \");",
    "info" : "ExpressionStatement[78166-78211]:ExpressionStatement[78145-78190]"
  }, {
    "left" : "allAppsHashCodes.append(entry.getKey());",
    "right" : "allAppsHashCodes.append(entry.getKey());",
    "info" : "ExpressionStatement[78236-78276]:ExpressionStatement[78215-78255]"
  }, {
    "left" : "allAppsHashCodes.append(\" , apps hashcode: \");",
    "right" : "allAppsHashCodes.append(\" , apps hashcode: \");",
    "info" : "ExpressionStatement[78301-78347]:ExpressionStatement[78280-78326]"
  }, {
    "left" : "allAppsHashCodes.append(entry.getValue().getAppsHashCode());",
    "right" : "allAppsHashCodes.append(entry.getValue().getAppsHashCode());",
    "info" : "ExpressionStatement[78372-78432]:ExpressionStatement[78351-78411]"
  }, {
    "left" : "logger.debug(\"Completed cache refresh task for discovery. All Apps hash code is {} \",\n                            allAppsHashCodes.toString());",
    "right" : "logger.debug(\"Completed cache refresh task for discovery. All Apps hash code is {} \",\n                            allAppsHashCodes.toString());",
    "info" : "ExpressionStatement[78475-78618]:ExpressionStatement[78454-78597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78672-78758]:Block[78651-78737]"
  }, {
    "left" : "logger.error(\"Cannot fetch registry from server\", th);",
    "right" : "logger.error(\"Cannot fetch registry from server\", th);",
    "info" : "ExpressionStatement[78690-78744]:ExpressionStatement[78669-78723]"
  }, {
    "left" : "/**\n     * Fetch the registry information from back up registry if all eureka server\n     * urls are unreachable.\n     */",
    "right" : "/**\n     * Fetch the registry information from back up registry if all eureka server\n     * urls are unreachable.\n     */",
    "info" : "Javadoc[78780-78901]:Javadoc[78759-78880]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[78906-78913]:Modifier[78885-78892]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[78914-78918]:PrimitiveType[78893-78897]"
  }, {
    "left" : "fetchRegistryFromBackup",
    "right" : "fetchRegistryFromBackup",
    "info" : "SimpleName[78919-78942]:SimpleName[78898-78921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78945-80510]:Block[78924-80489]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[78955-80504]:TryStatement[78934-80483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78959-80366]:Block[78938-80345]"
  }, {
    "left" : "@SuppressWarnings(\"deprecation\")\n            BackupRegistry backupRegistryInstance = newBackupRegistryInstance();",
    "right" : "@SuppressWarnings(\"deprecation\")\n            BackupRegistry backupRegistryInstance = newBackupRegistryInstance();",
    "info" : "VariableDeclarationStatement[78973-79086]:VariableDeclarationStatement[78952-79065]"
  }, {
    "left" : "if (null == backupRegistryInstance)",
    "right" : "if (null == backupRegistryInstance)",
    "info" : "IfStatement[79099-79304]:IfStatement[79078-79283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79135-79304]:Block[79114-79283]"
  }, {
    "left" : "backupRegistryInstance = backupRegistryProvider.get();",
    "right" : "backupRegistryInstance = backupRegistryProvider.get();",
    "info" : "ExpressionStatement[79236-79290]:ExpressionStatement[79215-79269]"
  }, {
    "left" : "if (null != backupRegistryInstance)",
    "right" : "if (null != backupRegistryInstance)",
    "info" : "IfStatement[79318-80356]:IfStatement[79297-80335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79354-80227]:Block[79333-80206]"
  }, {
    "left" : "Applications apps = null;",
    "right" : "Applications apps = null;",
    "info" : "VariableDeclarationStatement[79372-79397]:VariableDeclarationStatement[79351-79376]"
  }, {
    "left" : "if (isFetchingRemoteRegionRegistries())",
    "right" : "if (isFetchingRemoteRegionRegistries())",
    "info" : "IfStatement[79414-79811]:IfStatement[79393-79790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79454-79719]:Block[79433-79698]"
  }, {
    "left" : "String remoteRegionsStr = remoteRegionsToFetch.get();",
    "right" : "String remoteRegionsStr = remoteRegionsToFetch.get();",
    "info" : "VariableDeclarationStatement[79476-79529]:VariableDeclarationStatement[79455-79508]"
  }, {
    "left" : "if (null != remoteRegionsStr)",
    "right" : "if (null != remoteRegionsStr)",
    "info" : "IfStatement[79550-79701]:IfStatement[79529-79680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79580-79701]:Block[79559-79680]"
  }, {
    "left" : "apps = backupRegistryInstance.fetchRegistry(remoteRegionsStr.split(\",\"));",
    "right" : "apps = backupRegistryInstance.fetchRegistry(remoteRegionsStr.split(\",\"));",
    "info" : "ExpressionStatement[79606-79679]:ExpressionStatement[79585-79658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79725-79811]:Block[79704-79790]"
  }, {
    "left" : "apps = backupRegistryInstance.fetchRegistry();",
    "right" : "apps = backupRegistryInstance.fetchRegistry();",
    "info" : "ExpressionStatement[79747-79793]:ExpressionStatement[79726-79772]"
  }, {
    "left" : "if (apps != null)",
    "right" : "if (apps != null)",
    "info" : "IfStatement[79828-80213]:IfStatement[79807-80192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79846-80213]:Block[79825-80192]"
  }, {
    "left" : "final Applications applications = this.filterAndShuffle(apps);",
    "right" : "final Applications applications = this.filterAndShuffle(apps);",
    "info" : "VariableDeclarationStatement[79868-79930]:VariableDeclarationStatement[79847-79909]"
  }, {
    "left" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
    "right" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
    "info" : "ExpressionStatement[79951-80017]:ExpressionStatement[79930-79996]"
  }, {
    "left" : "localRegionApps.set(applications);",
    "right" : "localRegionApps.set(applications);",
    "info" : "ExpressionStatement[80038-80072]:ExpressionStatement[80017-80051]"
  }, {
    "left" : "logTotalInstances();",
    "right" : "logTotalInstances();",
    "info" : "ExpressionStatement[80093-80113]:ExpressionStatement[80072-80092]"
  }, {
    "left" : "logger.info(\"Fetched registry successfully from the backup\");",
    "right" : "logger.info(\"Fetched registry successfully from the backup\");",
    "info" : "ExpressionStatement[80134-80195]:ExpressionStatement[80113-80174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80233-80356]:Block[80212-80335]"
  }, {
    "left" : "logger.warn(\"No backup registry instance defined & unable to find any discovery servers.\");",
    "right" : "logger.warn(\"No backup registry instance defined & unable to find any discovery servers.\");",
    "info" : "ExpressionStatement[80251-80342]:ExpressionStatement[80230-80321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80387-80504]:Block[80366-80483]"
  }, {
    "left" : "logger.warn(\"Cannot fetch applications from apps although backup registry was specified\", e);",
    "right" : "logger.warn(\"Cannot fetch applications from apps although backup registry was specified\", e);",
    "info" : "ExpressionStatement[80401-80494]:ExpressionStatement[80380-80473]"
  }, {
    "left" : "/**\n     * @deprecated Use injection to provide {@link BackupRegistry} implementation.\n     */",
    "right" : "/**\n     * @deprecated Use injection to provide {@link BackupRegistry} implementation.\n     */",
    "info" : "Javadoc[80516-80610]:Javadoc[80495-80589]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[80615-80626]:MarkerAnnotation[80594-80605]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[80631-80640]:MarkerAnnotation[80610-80619]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[80645-80654]:Modifier[80624-80633]"
  }, {
    "left" : "BackupRegistry",
    "right" : "BackupRegistry",
    "info" : "SimpleType[80655-80669]:SimpleType[80634-80648]"
  }, {
    "left" : "newBackupRegistryInstance",
    "right" : "newBackupRegistryInstance",
    "info" : "SimpleName[80670-80695]:SimpleName[80649-80674]"
  }, {
    "left" : "ClassNotFoundException",
    "right" : "ClassNotFoundException",
    "info" : "SimpleType[80717-80739]:SimpleType[80696-80718]"
  }, {
    "left" : "IllegalAccessException",
    "right" : "IllegalAccessException",
    "info" : "SimpleType[80741-80763]:SimpleType[80720-80742]"
  }, {
    "left" : "InstantiationException",
    "right" : "InstantiationException",
    "info" : "SimpleType[80765-80787]:SimpleType[80744-80766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80788-80816]:Block[80767-80795]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[80798-80810]:ReturnStatement[80777-80789]"
  }, {
    "left" : "/**\n     * Gets the task that is responsible for fetching the eureka service Urls.\n     *\n     * @param zone\n     *            the zone in which the instance resides.\n     * @return TimerTask the task which executes periodically.\n     */",
    "right" : "/**\n     * Gets the task that is responsible for fetching the eureka service Urls.\n     *\n     * @param zone\n     *            the zone in which the instance resides.\n     * @return TimerTask the task which executes periodically.\n     */",
    "info" : "Javadoc[80822-81059]:Javadoc[80801-81038]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[81064-81071]:Modifier[81043-81050]"
  }, {
    "left" : "TimerTask",
    "right" : "TimerTask",
    "info" : "SimpleType[81072-81081]:SimpleType[81051-81060]"
  }, {
    "left" : "getServiceUrlUpdateTask",
    "right" : "getServiceUrlUpdateTask",
    "info" : "SimpleName[81082-81105]:SimpleName[81061-81084]"
  }, {
    "left" : "final String zone",
    "right" : "final String zone",
    "info" : "SingleVariableDeclaration[81106-81123]:SingleVariableDeclaration[81085-81102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81125-82171]:Block[81104-82150]"
  }, {
    "left" : "return new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    List<String> serviceUrlList = getDiscoveryServiceUrls(zone);\n                    if (serviceUrlList.isEmpty()) {\n                        logger.warn(\"The service url list is empty\");\n                        return;\n                    }\n                    if (!serviceUrlList.equals(eurekaServiceUrls.get())) {\n                        logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));\n\n                        eurekaServiceUrls.set(serviceUrlList);\n                    }\n                } catch (Throwable e) {\n                    logger.error(\"Cannot get the eureka service urls :\", e);\n                }\n\n            }\n        };",
    "right" : "return new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    List<String> serviceUrlList = getDiscoveryServiceUrls(zone);\n                    if (serviceUrlList.isEmpty()) {\n                        logger.warn(\"The service url list is empty\");\n                        return;\n                    }\n                    if (!serviceUrlList.equals(eurekaServiceUrls.get())) {\n                        logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));\n\n                        eurekaServiceUrls.set(serviceUrlList);\n                    }\n                } catch (Throwable e) {\n                    logger.error(\"Cannot get the eureka service urls :\", e);\n                }\n\n            }\n        };",
    "info" : "ReturnStatement[81135-82165]:ReturnStatement[81114-82144]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[81172-81181]:MarkerAnnotation[81151-81160]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[81194-81200]:Modifier[81173-81179]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[81201-81205]:PrimitiveType[81180-81184]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[81206-81209]:SimpleName[81185-81188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81212-82154]:Block[81191-82133]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[81230-82139]:TryStatement[81209-82118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81234-82022]:Block[81213-82001]"
  }, {
    "left" : "List<String> serviceUrlList = getDiscoveryServiceUrls(zone);",
    "right" : "List<String> serviceUrlList = getDiscoveryServiceUrls(zone);",
    "info" : "VariableDeclarationStatement[81256-81316]:VariableDeclarationStatement[81235-81295]"
  }, {
    "left" : "if (serviceUrlList.isEmpty())",
    "right" : "if (serviceUrlList.isEmpty())",
    "info" : "IfStatement[81337-81492]:IfStatement[81316-81471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81367-81492]:Block[81346-81471]"
  }, {
    "left" : "logger.warn(\"The service url list is empty\");",
    "right" : "logger.warn(\"The service url list is empty\");",
    "info" : "ExpressionStatement[81393-81438]:ExpressionStatement[81372-81417]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[81463-81470]:ReturnStatement[81442-81449]"
  }, {
    "left" : "if (!serviceUrlList.equals(eurekaServiceUrls.get()))",
    "right" : "if (!serviceUrlList.equals(eurekaServiceUrls.get()))",
    "info" : "IfStatement[81513-82004]:IfStatement[81492-81983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81566-82004]:Block[81545-81983]"
  }, {
    "left" : "logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));",
    "right" : "logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));",
    "info" : "ExpressionStatement[81592-81918]:ExpressionStatement[81571-81897]"
  }, {
    "left" : "eurekaServiceUrls.set(serviceUrlList);",
    "right" : "eurekaServiceUrls.set(serviceUrlList);",
    "info" : "ExpressionStatement[81944-81982]:ExpressionStatement[81923-81961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82043-82139]:Block[82022-82118]"
  }, {
    "left" : "logger.error(\"Cannot get the eureka service urls :\", e);",
    "right" : "logger.error(\"Cannot get the eureka service urls :\", e);",
    "info" : "ExpressionStatement[82065-82121]:ExpressionStatement[82044-82100]"
  }, {
    "left" : "/**\n     * Gets the <em>applications</em> after filtering the applications for\n     * instances with only UP states and shuffling them.\n     *\n     * <p>\n     * The filtering depends on the option specified by the configuration\n     * {@link EurekaClientConfig#shouldFilterOnlyUpInstances()}. Shuffling helps\n     * in randomizing the applications list there by avoiding the same instances\n     * receiving traffic during start ups.\n     * </p>\n     *\n     * @param apps\n     *            The applications that needs to be filtered and shuffled.\n     * @return The applications after the filter and the shuffle.\n     */",
    "right" : "/**\n     * Gets the <em>applications</em> after filtering the applications for\n     * instances with only UP states and shuffling them.\n     *\n     * <p>\n     * The filtering depends on the option specified by the configuration\n     * {@link EurekaClientConfig#shouldFilterOnlyUpInstances()}. Shuffling helps\n     * in randomizing the applications list there by avoiding the same instances\n     * receiving traffic during start ups.\n     * </p>\n     *\n     * @param apps\n     *            The applications that needs to be filtered and shuffled.\n     * @return The applications after the filter and the shuffle.\n     */",
    "info" : "Javadoc[82177-82796]:Javadoc[82156-82775]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[82801-82808]:Modifier[82780-82787]"
  }, {
    "left" : "Applications",
    "right" : "Applications",
    "info" : "SimpleType[82809-82821]:SimpleType[82788-82800]"
  }, {
    "left" : "filterAndShuffle",
    "right" : "filterAndShuffle",
    "info" : "SimpleName[82822-82838]:SimpleName[82801-82817]"
  }, {
    "left" : "Applications apps",
    "right" : "Applications apps",
    "info" : "SingleVariableDeclaration[82839-82856]:SingleVariableDeclaration[82818-82835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82858-83565]:Block[82837-83544]"
  }, {
    "left" : "if (apps != null)",
    "right" : "if (apps != null)",
    "info" : "IfStatement[82868-83538]:IfStatement[82847-83517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82886-83538]:Block[82865-83517]"
  }, {
    "left" : "if (isFetchingRemoteRegionRegistries())",
    "right" : "if (isFetchingRemoteRegionRegistries())",
    "info" : "IfStatement[82900-83528]:IfStatement[82879-83507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82940-83424]:Block[82919-83403]"
  }, {
    "left" : "Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
    "right" : "Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
    "info" : "VariableDeclarationStatement[82958-83051]:VariableDeclarationStatement[82937-83030]"
  }, {
    "left" : "apps.shuffleAndIndexInstances(remoteRegionVsApps, clientConfig, instanceRegionChecker);",
    "right" : "apps.shuffleAndIndexInstances(remoteRegionVsApps, clientConfig, instanceRegionChecker);",
    "info" : "ExpressionStatement[83068-83155]:ExpressionStatement[83047-83134]"
  }, {
    "left" : "for (Applications applications : remoteRegionVsApps.values())",
    "right" : "for (Applications applications : remoteRegionVsApps.values())",
    "info" : "EnhancedForStatement[83172-83348]:EnhancedForStatement[83151-83327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83234-83348]:Block[83213-83327]"
  }, {
    "left" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "right" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "info" : "ExpressionStatement[83256-83330]:ExpressionStatement[83235-83309]"
  }, {
    "left" : "this.remoteRegionVsApps = remoteRegionVsApps;",
    "right" : "this.remoteRegionVsApps = remoteRegionVsApps;",
    "info" : "ExpressionStatement[83365-83410]:ExpressionStatement[83344-83389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83430-83528]:Block[83409-83507]"
  }, {
    "left" : "apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "right" : "apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
    "info" : "ExpressionStatement[83448-83514]:ExpressionStatement[83427-83493]"
  }, {
    "left" : "return apps;",
    "right" : "return apps;",
    "info" : "ReturnStatement[83547-83559]:ReturnStatement[83526-83538]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[83571-83578]:Modifier[83550-83557]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[83579-83586]:PrimitiveType[83558-83565]"
  }, {
    "left" : "isFetchingRemoteRegionRegistries",
    "right" : "isFetchingRemoteRegionRegistries",
    "info" : "SimpleName[83587-83619]:SimpleName[83566-83598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83622-83680]:Block[83601-83659]"
  }, {
    "left" : "return null != remoteRegionsToFetch.get();",
    "right" : "return null != remoteRegionsToFetch.get();",
    "info" : "ReturnStatement[83632-83674]:ReturnStatement[83611-83653]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[83687-83694]:Modifier[83666-83673]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83695-83699]:PrimitiveType[83674-83678]"
  }, {
    "left" : "arrangeListBasedonHostname",
    "right" : "arrangeListBasedonHostname",
    "info" : "SimpleName[83700-83726]:SimpleName[83679-83705]"
  }, {
    "left" : "List<String> list",
    "right" : "List<String> list",
    "info" : "SingleVariableDeclaration[83727-83744]:SingleVariableDeclaration[83706-83723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83746-84461]:Block[83725-84440]"
  }, {
    "left" : "int listSize = 0;",
    "right" : "int listSize = 0;",
    "info" : "VariableDeclarationStatement[83756-83773]:VariableDeclarationStatement[83735-83752]"
  }, {
    "left" : "if (list != null)",
    "right" : "if (list != null)",
    "info" : "IfStatement[83782-83847]:IfStatement[83761-83826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83800-83847]:Block[83779-83826]"
  }, {
    "left" : "listSize = list.size();",
    "right" : "listSize = list.size();",
    "info" : "ExpressionStatement[83814-83837]:ExpressionStatement[83793-83816]"
  }, {
    "left" : "if ((this.instanceInfo == null) || (listSize == 0))",
    "right" : "if ((this.instanceInfo == null) || (listSize == 0))",
    "info" : "IfStatement[83856-83939]:IfStatement[83835-83918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83908-83939]:Block[83887-83918]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[83922-83929]:ReturnStatement[83901-83908]"
  }, {
    "left" : "int instanceHashcode = this.instanceInfo.getHostName().hashCode();",
    "right" : "int instanceHashcode = this.instanceInfo.getHostName().hashCode();",
    "info" : "VariableDeclarationStatement[84100-84166]:VariableDeclarationStatement[84079-84145]"
  }, {
    "left" : "if (instanceHashcode < 0)",
    "right" : "if (instanceHashcode < 0)",
    "info" : "IfStatement[84175-84266]:IfStatement[84154-84245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84201-84266]:Block[84180-84245]"
  }, {
    "left" : "instanceHashcode = instanceHashcode * -1;",
    "right" : "instanceHashcode = instanceHashcode * -1;",
    "info" : "ExpressionStatement[84215-84256]:ExpressionStatement[84194-84235]"
  }, {
    "left" : "int backupInstance = instanceHashcode % listSize;",
    "right" : "int backupInstance = instanceHashcode % listSize;",
    "info" : "VariableDeclarationStatement[84275-84324]:VariableDeclarationStatement[84254-84303]"
  }, {
    "left" : "for (int i = 0; i < backupInstance; i++)",
    "right" : "for (int i = 0; i < backupInstance; i++)",
    "info" : "ForStatement[84333-84455]:ForStatement[84312-84434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84374-84455]:Block[84353-84434]"
  }, {
    "left" : "String zone = list.remove(0);",
    "right" : "String zone = list.remove(0);",
    "info" : "VariableDeclarationStatement[84388-84417]:VariableDeclarationStatement[84367-84396]"
  }, {
    "left" : "list.add(zone);",
    "right" : "list.add(zone);",
    "info" : "ExpressionStatement[84430-84445]:ExpressionStatement[84409-84424]"
  } ]
}