{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StringUtils",
      "right" : "StringUtils",
      "info" : "TypeDeclaration[944-229857]:TypeDeclaration[944-229968]"
    }, {
      "left" : "public static final String EMPTY = \"\";",
      "right" : "public static final String EMPTY = \"\";",
      "info" : "FieldDeclaration[5829-5942]:FieldDeclaration[5829-5942]"
    }, {
      "left" : "public static final int INDEX_NOT_FOUND = -1;",
      "right" : "public static final int INDEX_NOT_FOUND = -1;",
      "info" : "FieldDeclaration[5948-6068]:FieldDeclaration[5948-6068]"
    }, {
      "left" : "private static final int PAD_LIMIT = 8192;",
      "right" : "private static final int PAD_LIMIT = 8192;",
      "info" : "FieldDeclaration[6074-6208]:FieldDeclaration[6074-6208]"
    }, {
      "left" : "public StringUtils()",
      "right" : "public StringUtils()",
      "info" : "MethodDeclaration[6214-6583]:MethodDeclaration[6214-6583]"
    }, {
      "left" : "public static boolean isEmpty(CharSequence str)",
      "right" : "public static boolean isEmpty(CharSequence str)",
      "info" : "MethodDeclaration[6687-7407]:MethodDeclaration[6687-7407]"
    }, {
      "left" : "public static boolean isNotEmpty(CharSequence str)",
      "right" : "public static boolean isNotEmpty(CharSequence str)",
      "info" : "MethodDeclaration[7413-8002]:MethodDeclaration[7413-8002]"
    }, {
      "left" : "public static boolean isBlank(CharSequence str)",
      "right" : "public static boolean isBlank(CharSequence str)",
      "info" : "MethodDeclaration[8008-8861]:MethodDeclaration[8008-8861]"
    }, {
      "left" : "public static boolean isNotBlank(CharSequence str)",
      "right" : "public static boolean isNotBlank(CharSequence str)",
      "info" : "MethodDeclaration[8867-9523]:MethodDeclaration[8867-9523]"
    }, {
      "left" : "public static String trim(String str)",
      "right" : "public static String trim(String str)",
      "info" : "MethodDeclaration[9619-10582]:MethodDeclaration[9619-10582]"
    }, {
      "left" : "public static String trimToNull(String str)",
      "right" : "public static String trimToNull(String str)",
      "info" : "MethodDeclaration[10588-11603]:MethodDeclaration[10588-11603]"
    }, {
      "left" : "public static String trimToEmpty(String str)",
      "right" : "public static String trimToEmpty(String str)",
      "info" : "MethodDeclaration[11609-12575]:MethodDeclaration[11609-12575]"
    }, {
      "left" : "public static String strip(String str)",
      "right" : "public static String strip(String str)",
      "info" : "MethodDeclaration[12676-13599]:MethodDeclaration[12676-13599]"
    }, {
      "left" : "public static String stripToNull(String str)",
      "right" : "public static String stripToNull(String str)",
      "info" : "MethodDeclaration[13605-14735]:MethodDeclaration[13605-14735]"
    }, {
      "left" : "public static String stripToEmpty(String str)",
      "right" : "public static String stripToEmpty(String str)",
      "info" : "MethodDeclaration[14741-15747]:MethodDeclaration[14741-15747]"
    }, {
      "left" : "public static String strip(String str, String stripChars)",
      "right" : "public static String strip(String str, String stripChars)",
      "info" : "MethodDeclaration[15753-17138]:MethodDeclaration[15753-17138]"
    }, {
      "left" : "public static String stripStart(String str, String stripChars)",
      "right" : "public static String stripStart(String str, String stripChars)",
      "info" : "MethodDeclaration[17144-18867]:MethodDeclaration[17144-18867]"
    }, {
      "left" : "public static String stripEnd(String str, String stripChars)",
      "right" : "public static String stripEnd(String str, String stripChars)",
      "info" : "MethodDeclaration[18873-20535]:MethodDeclaration[18873-20535]"
    }, {
      "left" : "public static String[] stripAll(String[] strs)",
      "right" : "public static String[] stripAll(String[] strs)",
      "info" : "MethodDeclaration[20635-21552]:MethodDeclaration[20635-21552]"
    }, {
      "left" : "public static String[] stripAll(String[] strs, String stripChars)",
      "right" : "public static String[] stripAll(String[] strs, String stripChars)",
      "info" : "MethodDeclaration[21558-23136]:MethodDeclaration[21558-23136]"
    }, {
      "left" : "public static String stripAccents(String input)",
      "right" : "public static String stripAccents(String input)",
      "info" : "MethodDeclaration[23142-26312]:MethodDeclaration[23142-26312]"
    }, {
      "left" : "public static boolean equals(String str1, String str2)",
      "right" : "public static boolean equals(String str1, String str2)",
      "info" : "MethodDeclaration[26410-27342]:MethodDeclaration[26410-27342]"
    }, {
      "left" : "public static boolean equalsIgnoreCase(String str1, String str2)",
      "right" : "public static boolean equalsIgnoreCase(String str1, String str2)",
      "info" : "MethodDeclaration[27348-28378]:MethodDeclaration[27348-28378]"
    }, {
      "left" : "public static int indexOf(String str, char searchChar)",
      "right" : "public static int indexOf(String str, char searchChar)",
      "info" : "MethodDeclaration[28477-29347]:MethodDeclaration[28477-29347]"
    }, {
      "left" : "public static int indexOf(String str, char searchChar, int startPos)",
      "right" : "public static int indexOf(String str, char searchChar, int startPos)",
      "info" : "MethodDeclaration[29353-30604]:MethodDeclaration[29353-30604]"
    }, {
      "left" : "public static int indexOf(String str, String searchStr)",
      "right" : "public static int indexOf(String str, String searchStr)",
      "info" : "MethodDeclaration[30610-31646]:MethodDeclaration[30610-31646]"
    }, {
      "left" : "public static int ordinalIndexOf(String str, String searchStr, int ordinal)",
      "right" : "public static int ordinalIndexOf(String str, String searchStr, int ordinal)",
      "info" : "MethodDeclaration[31652-33459]:MethodDeclaration[31652-33459]"
    }, {
      "left" : "public static int indexOf(String str, String searchStr, int startPos)",
      "right" : "public static int indexOf(String str, String searchStr, int startPos)",
      "info" : "MethodDeclaration[33465-35220]:MethodDeclaration[33465-35220]"
    }, {
      "left" : "public static int lastIndexOf(String str, char searchChar)",
      "right" : "public static int lastIndexOf(String str, char searchChar)",
      "info" : "MethodDeclaration[35323-36219]:MethodDeclaration[35323-36219]"
    }, {
      "left" : "public static int lastIndexOf(String str, char searchChar, int startPos)",
      "right" : "public static int lastIndexOf(String str, char searchChar, int startPos)",
      "info" : "MethodDeclaration[36225-37604]:MethodDeclaration[36225-37604]"
    }, {
      "left" : "public static int lastIndexOf(String str, String searchStr)",
      "right" : "public static int lastIndexOf(String str, String searchStr)",
      "info" : "MethodDeclaration[37610-38684]:MethodDeclaration[37610-38684]"
    }, {
      "left" : "public static int lastIndexOf(String str, String searchStr, int startPos)",
      "right" : "public static int lastIndexOf(String str, String searchStr, int startPos)",
      "info" : "MethodDeclaration[38690-40228]:MethodDeclaration[38690-40228]"
    }, {
      "left" : "public static boolean contains(String str, char searchChar)",
      "right" : "public static boolean contains(String str, char searchChar)",
      "info" : "MethodDeclaration[40328-41225]:MethodDeclaration[40328-41225]"
    }, {
      "left" : "public static boolean contains(String str, String searchStr)",
      "right" : "public static boolean contains(String str, String searchStr)",
      "info" : "MethodDeclaration[41231-42240]:MethodDeclaration[41231-42240]"
    }, {
      "left" : "public static boolean containsIgnoreCase(String str, String searchStr)",
      "right" : "public static boolean containsIgnoreCase(String str, String searchStr)",
      "info" : "MethodDeclaration[42246-43612]:MethodDeclaration[42246-43612]"
    }, {
      "left" : "public static int indexOfAny(String str, char[] searchChars)",
      "right" : "public static int indexOfAny(String str, char[] searchChars)",
      "info" : "MethodDeclaration[43720-45112]:MethodDeclaration[43720-45112]"
    }, {
      "left" : "public static int indexOfAny(String str, String searchChars)",
      "right" : "public static int indexOfAny(String str, String searchChars)",
      "info" : "MethodDeclaration[45118-46236]:MethodDeclaration[45118-46236]"
    }, {
      "left" : "public static boolean containsAny(String str, char[] searchChars)",
      "right" : "public static boolean containsAny(String str, char[] searchChars)",
      "info" : "MethodDeclaration[46339-47846]:MethodDeclaration[46339-47846]"
    }, {
      "left" : "public static boolean containsAny(String str, String searchChars)",
      "right" : "public static boolean containsAny(String str, String searchChars)",
      "info" : "MethodDeclaration[47852-49083]:MethodDeclaration[47852-49083]"
    }, {
      "left" : "public static int indexOfAnyBut(String str, char[] searchChars)",
      "right" : "public static int indexOfAnyBut(String str, char[] searchChars)",
      "info" : "MethodDeclaration[49194-50615]:MethodDeclaration[49194-50615]"
    }, {
      "left" : "public static int indexOfAnyBut(String str, String searchChars)",
      "right" : "public static int indexOfAnyBut(String str, String searchChars)",
      "info" : "MethodDeclaration[50621-51884]:MethodDeclaration[50621-51884]"
    }, {
      "left" : "public static boolean containsOnly(String str, char[] valid)",
      "right" : "public static boolean containsOnly(String str, char[] valid)",
      "info" : "MethodDeclaration[51988-53309]:MethodDeclaration[51988-53309]"
    }, {
      "left" : "public static boolean containsOnly(String str, String validChars)",
      "right" : "public static boolean containsOnly(String str, String validChars)",
      "info" : "MethodDeclaration[53315-54467]:MethodDeclaration[53315-54467]"
    }, {
      "left" : "public static boolean containsNone(String str, char[] invalidChars)",
      "right" : "public static boolean containsNone(String str, char[] invalidChars)",
      "info" : "MethodDeclaration[54571-56016]:MethodDeclaration[54571-56016]"
    }, {
      "left" : "public static boolean containsNone(String str, String invalidChars)",
      "right" : "public static boolean containsNone(String str, String invalidChars)",
      "info" : "MethodDeclaration[56022-57175]:MethodDeclaration[56022-57175]"
    }, {
      "left" : "public static int indexOfAny(String str, String[] searchStrs)",
      "right" : "public static int indexOfAny(String str, String[] searchStrs)",
      "info" : "MethodDeclaration[57285-59332]:MethodDeclaration[57285-59332]"
    }, {
      "left" : "public static int lastIndexOfAny(String str, String[] searchStrs)",
      "right" : "public static int lastIndexOfAny(String str, String[] searchStrs)",
      "info" : "MethodDeclaration[59338-61181]:MethodDeclaration[59338-61181]"
    }, {
      "left" : "public static String substring(String str, int start)",
      "right" : "public static String substring(String str, int start)",
      "info" : "MethodDeclaration[61282-62742]:MethodDeclaration[61282-62742]"
    }, {
      "left" : "public static String substring(String str, int start, int end)",
      "right" : "public static String substring(String str, int start, int end)",
      "info" : "MethodDeclaration[62748-65168]:MethodDeclaration[62748-65168]"
    }, {
      "left" : "public static String left(String str, int len)",
      "right" : "public static String left(String str, int len)",
      "info" : "MethodDeclaration[65274-66390]:MethodDeclaration[65274-66390]"
    }, {
      "left" : "public static String right(String str, int len)",
      "right" : "public static String right(String str, int len)",
      "info" : "MethodDeclaration[66396-67537]:MethodDeclaration[66396-67537]"
    }, {
      "left" : "public static String mid(String str, int pos, int len)",
      "right" : "public static String mid(String str, int pos, int len)",
      "info" : "MethodDeclaration[67543-68999]:MethodDeclaration[67543-68999]"
    }, {
      "left" : "public static String substringBefore(String str, String separator)",
      "right" : "public static String substringBefore(String str, String separator)",
      "info" : "MethodDeclaration[69121-70665]:MethodDeclaration[69121-70665]"
    }, {
      "left" : "public static String substringAfter(String str, String separator)",
      "right" : "public static String substringAfter(String str, String separator)",
      "info" : "MethodDeclaration[70671-72248]:MethodDeclaration[70671-72248]"
    }, {
      "left" : "public static String substringBeforeLast(String str, String separator)",
      "right" : "public static String substringBeforeLast(String str, String separator)",
      "info" : "MethodDeclaration[72254-73771]:MethodDeclaration[72254-73771]"
    }, {
      "left" : "public static String substringAfterLast(String str, String separator)",
      "right" : "public static String substringAfterLast(String str, String separator)",
      "info" : "MethodDeclaration[73777-75501]:MethodDeclaration[73777-75501]"
    }, {
      "left" : "public static String substringBetween(String str, String tag)",
      "right" : "public static String substringBetween(String str, String tag)",
      "info" : "MethodDeclaration[75610-76615]:MethodDeclaration[75610-76615]"
    }, {
      "left" : "public static String substringBetween(String str, String open, String close)",
      "right" : "public static String substringBetween(String str, String open, String close)",
      "info" : "MethodDeclaration[76621-78374]:MethodDeclaration[76621-78374]"
    }, {
      "left" : "public static String[] substringsBetween(String str, String open, String close)",
      "right" : "public static String[] substringsBetween(String str, String open, String close)",
      "info" : "MethodDeclaration[78380-80483]:MethodDeclaration[78380-80483]"
    }, {
      "left" : "public static String[] split(String str)",
      "right" : "public static String[] split(String str)",
      "info" : "MethodDeclaration[80688-81657]:MethodDeclaration[80688-81657]"
    }, {
      "left" : "public static String[] split(String str, char separatorChar)",
      "right" : "public static String[] split(String str, char separatorChar)",
      "info" : "MethodDeclaration[81663-82807]:MethodDeclaration[81663-82807]"
    }, {
      "left" : "public static String[] split(String str, String separatorChars)",
      "right" : "public static String[] split(String str, String separatorChars)",
      "info" : "MethodDeclaration[82813-84069]:MethodDeclaration[82813-84069]"
    }, {
      "left" : "public static String[] split(String str, String separatorChars, int max)",
      "right" : "public static String[] split(String str, String separatorChars, int max)",
      "info" : "MethodDeclaration[84075-85651]:MethodDeclaration[84075-85651]"
    }, {
      "left" : "public static String[] splitByWholeSeparator(String str, String separator)",
      "right" : "public static String[] splitByWholeSeparator(String str, String separator)",
      "info" : "MethodDeclaration[85657-86984]:MethodDeclaration[85657-86984]"
    }, {
      "left" : "public static String[] splitByWholeSeparator( String str, String separator, int max )",
      "right" : "public static String[] splitByWholeSeparator( String str, String separator, int max )",
      "info" : "MethodDeclaration[86990-88620]:MethodDeclaration[86990-88620]"
    }, {
      "left" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)",
      "right" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)",
      "info" : "MethodDeclaration[88626-90168]:MethodDeclaration[88626-90168]"
    }, {
      "left" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)",
      "right" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)",
      "info" : "MethodDeclaration[90174-92036]:MethodDeclaration[90174-92036]"
    }, {
      "left" : "private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, \n                                                        boolean preserveAllTokens)",
      "right" : "private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, \n                                                        boolean preserveAllTokens)",
      "info" : "MethodDeclaration[92042-95254]:MethodDeclaration[92042-95254]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str)",
      "right" : "public static String[] splitPreserveAllTokens(String str)",
      "info" : "MethodDeclaration[95339-96614]:MethodDeclaration[95339-96614]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, char separatorChar)",
      "right" : "public static String[] splitPreserveAllTokens(String str, char separatorChar)",
      "info" : "MethodDeclaration[96620-98538]:MethodDeclaration[96620-98538]"
    }, {
      "left" : "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)",
      "right" : "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)",
      "info" : "MethodDeclaration[98544-100193]:MethodDeclaration[98544-100193]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, String separatorChars)",
      "right" : "public static String[] splitPreserveAllTokens(String str, String separatorChars)",
      "info" : "MethodDeclaration[100199-102225]:MethodDeclaration[100199-102225]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, String separatorChars, int max)",
      "right" : "public static String[] splitPreserveAllTokens(String str, String separatorChars, int max)",
      "info" : "MethodDeclaration[102231-104377]:MethodDeclaration[102231-104377]"
    }, {
      "left" : "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)",
      "right" : "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)",
      "info" : "MethodDeclaration[104383-108108]:MethodDeclaration[104383-108108]"
    }, {
      "left" : "public static String[] splitByCharacterType(String str)",
      "right" : "public static String[] splitByCharacterType(String str)",
      "info" : "MethodDeclaration[108114-109316]:MethodDeclaration[108114-109316]"
    }, {
      "left" : "public static String[] splitByCharacterTypeCamelCase(String str)",
      "right" : "public static String[] splitByCharacterTypeCamelCase(String str)",
      "info" : "MethodDeclaration[109322-110939]:MethodDeclaration[109322-110939]"
    }, {
      "left" : "private static String[] splitByCharacterType(String str, boolean camelCase)",
      "right" : "private static String[] splitByCharacterType(String str, boolean camelCase)",
      "info" : "MethodDeclaration[110945-113063]:MethodDeclaration[110945-113063]"
    }, {
      "left" : "public static String join(Object[] array)",
      "right" : "public static String join(Object[] array)",
      "info" : "MethodDeclaration[113162-113984]:MethodDeclaration[113162-113984]"
    }, {
      "left" : "public static String join(Object[] array, char separator)",
      "right" : "public static String join(Object[] array, char separator)",
      "info" : "MethodDeclaration[113990-115064]:MethodDeclaration[113990-115064]"
    }, {
      "left" : "public static String join(Object[] array, char separator, int startIndex, int endIndex)",
      "right" : "public static String join(Object[] array, char separator, int startIndex, int endIndex)",
      "info" : "MethodDeclaration[115070-116931]:MethodDeclaration[115070-116931]"
    }, {
      "left" : "public static String join(Object[] array, String separator)",
      "right" : "public static String join(Object[] array, String separator)",
      "info" : "MethodDeclaration[116938-118153]:MethodDeclaration[116938-118153]"
    }, {
      "left" : "public static String join(Object[] array, String separator, int startIndex, int endIndex)",
      "right" : "public static String join(Object[] array, String separator, int startIndex, int endIndex)",
      "info" : "MethodDeclaration[118159-120447]:MethodDeclaration[118159-120447]"
    }, {
      "left" : "public static String join(Iterator<?> iterator, char separator)",
      "right" : "public static String join(Iterator<?> iterator, char separator)",
      "info" : "MethodDeclaration[120453-121930]:MethodDeclaration[120453-121930]"
    }, {
      "left" : "public static String join(Iterator<?> iterator, String separator)",
      "right" : "public static String join(Iterator<?> iterator, String separator)",
      "info" : "MethodDeclaration[121936-123455]:MethodDeclaration[121936-123455]"
    }, {
      "left" : "public static String join(Iterable<?> iterable, char separator)",
      "right" : "public static String join(Iterable<?> iterable, char separator)",
      "info" : "MethodDeclaration[123461-124294]:MethodDeclaration[123461-124294]"
    }, {
      "left" : "public static String join(Iterable<?> iterable, String separator)",
      "right" : "public static String join(Iterable<?> iterable, String separator)",
      "info" : "MethodDeclaration[124300-125139]:MethodDeclaration[124300-125139]"
    }, {
      "left" : "public static String deleteWhitespace(String str)",
      "right" : "public static String deleteWhitespace(String str)",
      "info" : "MethodDeclaration[125237-126266]:MethodDeclaration[125237-126266]"
    }, {
      "left" : "public static String removeStart(String str, String remove)",
      "right" : "public static String removeStart(String str, String remove)",
      "info" : "MethodDeclaration[126364-127727]:MethodDeclaration[126364-127727]"
    }, {
      "left" : "public static String removeStartIgnoreCase(String str, String remove)",
      "right" : "public static String removeStartIgnoreCase(String str, String remove)",
      "info" : "MethodDeclaration[127733-129306]:MethodDeclaration[127733-129306]"
    }, {
      "left" : "public static String removeEnd(String str, String remove)",
      "right" : "public static String removeEnd(String str, String remove)",
      "info" : "MethodDeclaration[129312-130675]:MethodDeclaration[129312-130675]"
    }, {
      "left" : "public static String removeEndIgnoreCase(String str, String remove)",
      "right" : "public static String removeEndIgnoreCase(String str, String remove)",
      "info" : "MethodDeclaration[130681-132100]:MethodDeclaration[130681-132100]"
    }, {
      "left" : "public static String remove(String str, String remove)",
      "right" : "public static String remove(String str, String remove)",
      "info" : "MethodDeclaration[132106-133276]:MethodDeclaration[132106-133276]"
    }, {
      "left" : "public static String remove(String str, char remove)",
      "right" : "public static String remove(String str, char remove)",
      "info" : "MethodDeclaration[133282-134433]:MethodDeclaration[133282-134433]"
    }, {
      "left" : "public static String replaceOnce(String text, String searchString, String replacement)",
      "right" : "public static String replaceOnce(String text, String searchString, String replacement)",
      "info" : "MethodDeclaration[134534-135755]:MethodDeclaration[134534-135755]"
    }, {
      "left" : "public static String replace(String text, String searchString, String replacement)",
      "right" : "public static String replace(String text, String searchString, String replacement)",
      "info" : "MethodDeclaration[135761-136941]:MethodDeclaration[135761-136941]"
    }, {
      "left" : "public static String replace(String text, String searchString, String replacement, int max)",
      "right" : "public static String replace(String text, String searchString, String replacement, int max)",
      "info" : "MethodDeclaration[136947-139309]:MethodDeclaration[136947-139309]"
    }, {
      "left" : "public static String replaceEach(String text, String[] searchList, String[] replacementList)",
      "right" : "public static String replaceEach(String text, String[] searchList, String[] replacementList)",
      "info" : "MethodDeclaration[139315-141261]:MethodDeclaration[139315-141261]"
    }, {
      "left" : "public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)",
      "right" : "public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)",
      "info" : "MethodDeclaration[141267-143944]:MethodDeclaration[141267-143944]"
    }, {
      "left" : "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive)",
      "right" : "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive)",
      "info" : "MethodDeclaration[143950-151008]:MethodDeclaration[143950-151119]"
    }, {
      "left" : "public static String replaceChars(String str, char searchChar, char replaceChar)",
      "right" : "public static String replaceChars(String str, char searchChar, char replaceChar)",
      "info" : "MethodDeclaration[151124-152199]:MethodDeclaration[151235-152310]"
    }, {
      "left" : "public static String replaceChars(String str, String searchChars, String replaceChars)",
      "right" : "public static String replaceChars(String str, String searchChars, String replaceChars)",
      "info" : "MethodDeclaration[152205-154842]:MethodDeclaration[152316-154953]"
    }, {
      "left" : "public static String overlay(String str, String overlay, int start, int end)",
      "right" : "public static String overlay(String str, String overlay, int start, int end)",
      "info" : "MethodDeclaration[154941-157168]:MethodDeclaration[155052-157279]"
    }, {
      "left" : "public static String chomp(String str)",
      "right" : "public static String chomp(String str)",
      "info" : "MethodDeclaration[157268-158971]:MethodDeclaration[157379-159082]"
    }, {
      "left" : "public static String chomp(String str, String separator)",
      "right" : "public static String chomp(String str, String separator)",
      "info" : "MethodDeclaration[158977-160395]:MethodDeclaration[159088-160506]"
    }, {
      "left" : "public static String chop(String str)",
      "right" : "public static String chop(String str)",
      "info" : "MethodDeclaration[160495-161883]:MethodDeclaration[160606-161994]"
    }, {
      "left" : "public static String repeat(String str, int repeat)",
      "right" : "public static String repeat(String str, int repeat)",
      "info" : "MethodDeclaration[162079-164158]:MethodDeclaration[162190-164269]"
    }, {
      "left" : "public static String repeat(String str, String separator, int repeat)",
      "right" : "public static String repeat(String str, String separator, int repeat)",
      "info" : "MethodDeclaration[164164-165380]:MethodDeclaration[164275-165491]"
    }, {
      "left" : "private static String padding(int repeat, char padChar) throws IndexOutOfBoundsException",
      "right" : "private static String padding(int repeat, char padChar) throws IndexOutOfBoundsException",
      "info" : "MethodDeclaration[165386-166713]:MethodDeclaration[165497-166824]"
    }, {
      "left" : "public static String rightPad(String str, int size)",
      "right" : "public static String rightPad(String str, int size)",
      "info" : "MethodDeclaration[166719-167509]:MethodDeclaration[166830-167620]"
    }, {
      "left" : "public static String rightPad(String str, int size, char padChar)",
      "right" : "public static String rightPad(String str, int size, char padChar)",
      "info" : "MethodDeclaration[167515-168744]:MethodDeclaration[167626-168855]"
    }, {
      "left" : "public static String rightPad(String str, int size, String padStr)",
      "right" : "public static String rightPad(String str, int size, String padStr)",
      "info" : "MethodDeclaration[168750-170710]:MethodDeclaration[168861-170821]"
    }, {
      "left" : "public static String leftPad(String str, int size)",
      "right" : "public static String leftPad(String str, int size)",
      "info" : "MethodDeclaration[170716-171496]:MethodDeclaration[170827-171607]"
    }, {
      "left" : "public static String leftPad(String str, int size, char padChar)",
      "right" : "public static String leftPad(String str, int size, char padChar)",
      "info" : "MethodDeclaration[171502-172702]:MethodDeclaration[171613-172813]"
    }, {
      "left" : "public static String leftPad(String str, int size, String padStr)",
      "right" : "public static String leftPad(String str, int size, String padStr)",
      "info" : "MethodDeclaration[172708-174636]:MethodDeclaration[172819-174747]"
    }, {
      "left" : "public static int length(String str)",
      "right" : "public static int length(String str)",
      "info" : "MethodDeclaration[174642-175008]:MethodDeclaration[174753-175119]"
    }, {
      "left" : "public static String center(String str, int size)",
      "right" : "public static String center(String str, int size)",
      "info" : "MethodDeclaration[175113-176115]:MethodDeclaration[175224-176226]"
    }, {
      "left" : "public static String center(String str, int size, char padChar)",
      "right" : "public static String center(String str, int size, char padChar)",
      "info" : "MethodDeclaration[176121-177542]:MethodDeclaration[176232-177653]"
    }, {
      "left" : "public static String center(String str, int size, String padStr)",
      "right" : "public static String center(String str, int size, String padStr)",
      "info" : "MethodDeclaration[177548-179225]:MethodDeclaration[177659-179336]"
    }, {
      "left" : "public static String upperCase(String str)",
      "right" : "public static String upperCase(String str)",
      "info" : "MethodDeclaration[179332-180318]:MethodDeclaration[179443-180429]"
    }, {
      "left" : "public static String upperCase(String str, Locale locale)",
      "right" : "public static String upperCase(String str, Locale locale)",
      "info" : "MethodDeclaration[180324-181141]:MethodDeclaration[180435-181252]"
    }, {
      "left" : "public static String lowerCase(String str)",
      "right" : "public static String lowerCase(String str)",
      "info" : "MethodDeclaration[181147-182133]:MethodDeclaration[181258-182244]"
    }, {
      "left" : "public static String lowerCase(String str, Locale locale)",
      "right" : "public static String lowerCase(String str, Locale locale)",
      "info" : "MethodDeclaration[182139-182956]:MethodDeclaration[182250-183067]"
    }, {
      "left" : "public static String capitalize(String str)",
      "right" : "public static String capitalize(String str)",
      "info" : "MethodDeclaration[182962-184063]:MethodDeclaration[183073-184174]"
    }, {
      "left" : "public static String uncapitalize(String str)",
      "right" : "public static String uncapitalize(String str)",
      "info" : "MethodDeclaration[184069-185188]:MethodDeclaration[184180-185299]"
    }, {
      "left" : "public static String swapCase(String str)",
      "right" : "public static String swapCase(String str)",
      "info" : "MethodDeclaration[185194-186990]:MethodDeclaration[185305-187101]"
    }, {
      "left" : "public static int countMatches(String str, String sub)",
      "right" : "public static int countMatches(String str, String sub)",
      "info" : "MethodDeclaration[187095-188192]:MethodDeclaration[187206-188303]"
    }, {
      "left" : "public static boolean isAlpha(String str)",
      "right" : "public static boolean isAlpha(String str)",
      "info" : "MethodDeclaration[188299-189254]:MethodDeclaration[188410-189365]"
    }, {
      "left" : "public static boolean isAlphaSpace(String str)",
      "right" : "public static boolean isAlphaSpace(String str)",
      "info" : "MethodDeclaration[189260-190364]:MethodDeclaration[189371-190475]"
    }, {
      "left" : "public static boolean isAlphanumeric(String str)",
      "right" : "public static boolean isAlphanumeric(String str)",
      "info" : "MethodDeclaration[190370-191458]:MethodDeclaration[190481-191569]"
    }, {
      "left" : "public static boolean isAlphanumericSpace(String str)",
      "right" : "public static boolean isAlphanumericSpace(String str)",
      "info" : "MethodDeclaration[191464-192623]:MethodDeclaration[191575-192734]"
    }, {
      "left" : "public static boolean isAsciiPrintable(String str)",
      "right" : "public static boolean isAsciiPrintable(String str)",
      "info" : "MethodDeclaration[192629-193988]:MethodDeclaration[192740-194099]"
    }, {
      "left" : "public static boolean isNumeric(String str)",
      "right" : "public static boolean isNumeric(String str)",
      "info" : "MethodDeclaration[193994-195115]:MethodDeclaration[194105-195226]"
    }, {
      "left" : "public static boolean isNumericSpace(String str)",
      "right" : "public static boolean isNumericSpace(String str)",
      "info" : "MethodDeclaration[195121-196325]:MethodDeclaration[195232-196436]"
    }, {
      "left" : "public static boolean isWhitespace(String str)",
      "right" : "public static boolean isWhitespace(String str)",
      "info" : "MethodDeclaration[196331-197343]:MethodDeclaration[196442-197454]"
    }, {
      "left" : "public static boolean isAllLowerCase(String str)",
      "right" : "public static boolean isAllLowerCase(String str)",
      "info" : "MethodDeclaration[197349-198341]:MethodDeclaration[197460-198452]"
    }, {
      "left" : "public static boolean isAllUpperCase(String str)",
      "right" : "public static boolean isAllUpperCase(String str)",
      "info" : "MethodDeclaration[198347-199339]:MethodDeclaration[198458-199450]"
    }, {
      "left" : "public static String defaultString(String str)",
      "right" : "public static String defaultString(String str)",
      "info" : "MethodDeclaration[199439-200070]:MethodDeclaration[199550-200181]"
    }, {
      "left" : "public static String defaultString(String str, String defaultStr)",
      "right" : "public static String defaultString(String str, String defaultStr)",
      "info" : "MethodDeclaration[200076-200879]:MethodDeclaration[200187-200990]"
    }, {
      "left" : "public static String defaultIfEmpty(String str, String defaultStr)",
      "right" : "public static String defaultIfEmpty(String str, String defaultStr)",
      "info" : "MethodDeclaration[200885-201731]:MethodDeclaration[200996-201842]"
    }, {
      "left" : "public static String reverse(String str)",
      "right" : "public static String reverse(String str)",
      "info" : "MethodDeclaration[201832-202457]:MethodDeclaration[201943-202568]"
    }, {
      "left" : "public static String reverseDelimited(String str, char separatorChar)",
      "right" : "public static String reverseDelimited(String str, char separatorChar)",
      "info" : "MethodDeclaration[202463-203583]:MethodDeclaration[202574-203694]"
    }, {
      "left" : "public static String abbreviate(String str, int maxWidth)",
      "right" : "public static String abbreviate(String str, int maxWidth)",
      "info" : "MethodDeclaration[203687-205185]:MethodDeclaration[203798-205296]"
    }, {
      "left" : "public static String abbreviate(String str, int offset, int maxWidth)",
      "right" : "public static String abbreviate(String str, int offset, int maxWidth)",
      "info" : "MethodDeclaration[205191-208066]:MethodDeclaration[205302-208177]"
    }, {
      "left" : "public static String difference(String str1, String str2)",
      "right" : "public static String difference(String str1, String str2)",
      "info" : "MethodDeclaration[208168-209506]:MethodDeclaration[208279-209617]"
    }, {
      "left" : "public static int indexOfDifference(String str1, String str2)",
      "right" : "public static int indexOfDifference(String str1, String str2)",
      "info" : "MethodDeclaration[209512-210913]:MethodDeclaration[209623-211024]"
    }, {
      "left" : "public static int indexOfDifference(String[] strs)",
      "right" : "public static int indexOfDifference(String[] strs)",
      "info" : "MethodDeclaration[210919-214690]:MethodDeclaration[211030-214801]"
    }, {
      "left" : "public static String getCommonPrefix(String[] strs)",
      "right" : "public static String getCommonPrefix(String[] strs)",
      "info" : "MethodDeclaration[214700-217147]:MethodDeclaration[214811-217258]"
    }, {
      "left" : "public static int getLevenshteinDistance(String s, String t)",
      "right" : "public static int getLevenshteinDistance(String s, String t)",
      "info" : "MethodDeclaration[217249-222020]:MethodDeclaration[217360-222131]"
    }, {
      "left" : "public static boolean startsWith(String str, String prefix)",
      "right" : "public static boolean startsWith(String str, String prefix)",
      "info" : "MethodDeclaration[222586-223560]:MethodDeclaration[222697-223671]"
    }, {
      "left" : "public static boolean startsWithIgnoreCase(String str, String prefix)",
      "right" : "public static boolean startsWithIgnoreCase(String str, String prefix)",
      "info" : "MethodDeclaration[223566-224619]:MethodDeclaration[223677-224730]"
    }, {
      "left" : "private static boolean startsWith(String str, String prefix, boolean ignoreCase)",
      "right" : "private static boolean startsWith(String str, String prefix, boolean ignoreCase)",
      "info" : "MethodDeclaration[224625-225463]:MethodDeclaration[224736-225574]"
    }, {
      "left" : "public static boolean startsWithAny(String string, String[] searchStrings)",
      "right" : "public static boolean startsWithAny(String string, String[] searchStrings)",
      "info" : "MethodDeclaration[225473-226742]:MethodDeclaration[225584-226853]"
    }, {
      "left" : "public static boolean endsWith(String str, String suffix)",
      "right" : "public static boolean endsWith(String str, String suffix)",
      "info" : "MethodDeclaration[226843-227850]:MethodDeclaration[226954-227961]"
    }, {
      "left" : "public static boolean endsWithIgnoreCase(String str, String suffix)",
      "right" : "public static boolean endsWithIgnoreCase(String str, String suffix)",
      "info" : "MethodDeclaration[227856-228952]:MethodDeclaration[227967-229063]"
    }, {
      "left" : "private static boolean endsWith(String str, String suffix, boolean ignoreCase)",
      "right" : "private static boolean endsWith(String str, String suffix, boolean ignoreCase)",
      "info" : "MethodDeclaration[228958-229854]:MethodDeclaration[229069-229965]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6559-6583]:Block[6559-6583]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[6569-6577]:SuperConstructorInvocation[6569-6577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7351-7407]:Block[7351-7407]"
    }, {
      "left" : "return str == null || str.length() == 0;",
      "right" : "return str == null || str.length() == 0;",
      "info" : "ReturnStatement[7361-7401]:ReturnStatement[7361-7401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7953-8002]:Block[7953-8002]"
    }, {
      "left" : "return !StringUtils.isEmpty(str);",
      "right" : "return !StringUtils.isEmpty(str);",
      "info" : "ReturnStatement[7963-7996]:ReturnStatement[7963-7996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8554-8861]:Block[8554-8861]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[8564-8575]:VariableDeclarationStatement[8564-8575]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[8584-8669]:IfStatement[8584-8669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8633-8669]:Block[8633-8669]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8647-8659]:ReturnStatement[8647-8659]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[8678-8834]:ForStatement[8678-8834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8711-8834]:Block[8711-8834]"
    }, {
      "left" : "if ((Character.isWhitespace(str.charAt(i)) == false))",
      "right" : "if ((Character.isWhitespace(str.charAt(i)) == false))",
      "info" : "IfStatement[8725-8824]:IfStatement[8725-8824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8779-8824]:Block[8779-8824]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8797-8810]:ReturnStatement[8797-8810]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8843-8855]:ReturnStatement[8843-8855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9474-9523]:Block[9474-9523]"
    }, {
      "left" : "return !StringUtils.isBlank(str);",
      "right" : "return !StringUtils.isBlank(str);",
      "info" : "ReturnStatement[9484-9517]:ReturnStatement[9484-9517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10527-10582]:Block[10527-10582]"
    }, {
      "left" : "return str == null ? null : str.trim();",
      "right" : "return str == null ? null : str.trim();",
      "info" : "ReturnStatement[10537-10576]:ReturnStatement[10537-10576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11525-11603]:Block[11525-11603]"
    }, {
      "left" : "String ts = trim(str);",
      "right" : "String ts = trim(str);",
      "info" : "VariableDeclarationStatement[11535-11557]:VariableDeclarationStatement[11535-11557]"
    }, {
      "left" : "return isEmpty(ts) ? null : ts;",
      "right" : "return isEmpty(ts) ? null : ts;",
      "info" : "ReturnStatement[11566-11597]:ReturnStatement[11566-11597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12519-12575]:Block[12519-12575]"
    }, {
      "left" : "return str == null ? EMPTY : str.trim();",
      "right" : "return str == null ? EMPTY : str.trim();",
      "info" : "ReturnStatement[12529-12569]:ReturnStatement[12529-12569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13559-13599]:Block[13559-13599]"
    }, {
      "left" : "return strip(str, null);",
      "right" : "return strip(str, null);",
      "info" : "ReturnStatement[13569-13593]:ReturnStatement[13569-13593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14587-14735]:Block[14587-14735]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[14597-14650]:IfStatement[14597-14650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14614-14650]:Block[14614-14650]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14628-14640]:ReturnStatement[14628-14640]"
    }, {
      "left" : "str = strip(str, null);",
      "right" : "str = strip(str, null);",
      "info" : "ExpressionStatement[14659-14682]:ExpressionStatement[14659-14682]"
    }, {
      "left" : "return str.length() == 0 ? null : str;",
      "right" : "return str.length() == 0 ? null : str;",
      "info" : "ReturnStatement[14691-14729]:ReturnStatement[14691-14729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15685-15747]:Block[15685-15747]"
    }, {
      "left" : "return str == null ? EMPTY : strip(str, null);",
      "right" : "return str == null ? EMPTY : strip(str, null);",
      "info" : "ReturnStatement[15695-15741]:ReturnStatement[15695-15741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16984-17138]:Block[16984-17138]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[16994-17047]:IfStatement[16994-17047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17012-17047]:Block[17012-17047]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[17026-17037]:ReturnStatement[17026-17037]"
    }, {
      "left" : "str = stripStart(str, stripChars);",
      "right" : "str = stripStart(str, stripChars);",
      "info" : "ExpressionStatement[17056-17090]:ExpressionStatement[17056-17090]"
    }, {
      "left" : "return stripEnd(str, stripChars);",
      "right" : "return stripEnd(str, stripChars);",
      "info" : "ReturnStatement[17099-17132]:ReturnStatement[17099-17132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18303-18867]:Block[18303-18867]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[18313-18324]:VariableDeclarationStatement[18313-18324]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[18333-18417]:IfStatement[18333-18417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18382-18417]:Block[18382-18417]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[18396-18407]:ReturnStatement[18396-18407]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[18426-18440]:VariableDeclarationStatement[18426-18440]"
    }, {
      "left" : "if (stripChars == null)",
      "right" : "if (stripChars == null)",
      "info" : "IfStatement[18449-18824]:IfStatement[18449-18824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18473-18608]:Block[18473-18608]"
    }, {
      "left" : "while ((start != strLen) && Character.isWhitespace(str.charAt(start)))",
      "right" : "while ((start != strLen) && Character.isWhitespace(str.charAt(start)))",
      "info" : "WhileStatement[18487-18598]:WhileStatement[18487-18598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18558-18598]:Block[18558-18598]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[18576-18584]:ExpressionStatement[18576-18584]"
    }, {
      "left" : "if (stripChars.length() == 0)",
      "right" : "if (stripChars.length() == 0)",
      "info" : "IfStatement[18614-18824]:IfStatement[18614-18824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18644-18679]:Block[18644-18679]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[18658-18669]:ReturnStatement[18658-18669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18685-18824]:Block[18685-18824]"
    }, {
      "left" : "while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1))",
      "right" : "while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1))",
      "info" : "WhileStatement[18699-18814]:WhileStatement[18699-18814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18774-18814]:Block[18774-18814]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[18792-18800]:ExpressionStatement[18792-18800]"
    }, {
      "left" : "return str.substring(start);",
      "right" : "return str.substring(start);",
      "info" : "ReturnStatement[18833-18861]:ReturnStatement[18833-18861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20012-20535]:Block[20012-20535]"
    }, {
      "left" : "int end;",
      "right" : "int end;",
      "info" : "VariableDeclarationStatement[20022-20030]:VariableDeclarationStatement[20022-20030]"
    }, {
      "left" : "if (str == null || (end = str.length()) == 0)",
      "right" : "if (str == null || (end = str.length()) == 0)",
      "info" : "IfStatement[20039-20120]:IfStatement[20039-20120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20085-20120]:Block[20085-20120]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[20099-20110]:ReturnStatement[20099-20110]"
    }, {
      "left" : "if (stripChars == null)",
      "right" : "if (stripChars == null)",
      "info" : "IfStatement[20130-20491]:IfStatement[20130-20491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20154-20282]:Block[20154-20282]"
    }, {
      "left" : "while ((end != 0) && Character.isWhitespace(str.charAt(end - 1)))",
      "right" : "while ((end != 0) && Character.isWhitespace(str.charAt(end - 1)))",
      "info" : "WhileStatement[20168-20272]:WhileStatement[20168-20272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-20272]:Block[20234-20272]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[20252-20258]:ExpressionStatement[20252-20258]"
    }, {
      "left" : "if (stripChars.length() == 0)",
      "right" : "if (stripChars.length() == 0)",
      "info" : "IfStatement[20288-20491]:IfStatement[20288-20491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20318-20353]:Block[20318-20353]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[20332-20343]:ReturnStatement[20332-20343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20359-20491]:Block[20359-20491]"
    }, {
      "left" : "while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1))",
      "right" : "while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1))",
      "info" : "WhileStatement[20373-20481]:WhileStatement[20373-20481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20443-20481]:Block[20443-20481]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[20461-20467]:ExpressionStatement[20461-20467]"
    }, {
      "left" : "return str.substring(0, end);",
      "right" : "return str.substring(0, end);",
      "info" : "ReturnStatement[20500-20529]:ReturnStatement[20500-20529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21508-21552]:Block[21508-21552]"
    }, {
      "left" : "return stripAll(strs, null);",
      "right" : "return stripAll(strs, null);",
      "info" : "ReturnStatement[21518-21546]:ReturnStatement[21518-21546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22837-23136]:Block[22837-23136]"
    }, {
      "left" : "int strsLen;",
      "right" : "int strsLen;",
      "info" : "VariableDeclarationStatement[22847-22859]:VariableDeclarationStatement[22847-22859]"
    }, {
      "left" : "if (strs == null || (strsLen = strs.length) == 0)",
      "right" : "if (strs == null || (strsLen = strs.length) == 0)",
      "info" : "IfStatement[22868-22954]:IfStatement[22868-22954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22918-22954]:Block[22918-22954]"
    }, {
      "left" : "return strs;",
      "right" : "return strs;",
      "info" : "ReturnStatement[22932-22944]:ReturnStatement[22932-22944]"
    }, {
      "left" : "String[] newArr = new String[strsLen];",
      "right" : "String[] newArr = new String[strsLen];",
      "info" : "VariableDeclarationStatement[22963-23001]:VariableDeclarationStatement[22963-23001]"
    }, {
      "left" : "for (int i = 0; i < strsLen; i++)",
      "right" : "for (int i = 0; i < strsLen; i++)",
      "info" : "ForStatement[23010-23107]:ForStatement[23010-23107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23044-23107]:Block[23044-23107]"
    }, {
      "left" : "newArr[i] = strip(strs[i], stripChars);",
      "right" : "newArr[i] = strip(strs[i], stripChars);",
      "info" : "ExpressionStatement[23058-23097]:ExpressionStatement[23058-23097]"
    }, {
      "left" : "return newArr;",
      "right" : "return newArr;",
      "info" : "ReturnStatement[23116-23130]:ReturnStatement[23116-23130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23734-26312]:Block[23734-26312]"
    }, {
      "left" : "if(input == null)",
      "right" : "if(input == null)",
      "info" : "IfStatement[23744-23798]:IfStatement[23744-23798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23762-23798]:Block[23762-23798]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23776-23788]:ReturnStatement[23776-23788]"
    }, {
      "left" : "if(SystemUtils.isJavaVersionAtLeast(1.6f))",
      "right" : "if(SystemUtils.isJavaVersionAtLeast(1.6f))",
      "info" : "IfStatement[23807-26306]:IfStatement[23807-26306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23850-26169]:Block[23850-26169]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24032-26159]:TryStatement[24032-26159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24036-25016]:Block[24036-25016]"
    }, {
      "left" : "Class normalizerFormClass = ClassUtils.getClass(\"java.text.Normalizer$Form\", false);",
      "right" : "Class normalizerFormClass = ClassUtils.getClass(\"java.text.Normalizer$Form\", false);",
      "info" : "VariableDeclarationStatement[24109-24193]:VariableDeclarationStatement[24109-24193]"
    }, {
      "left" : "Class normalizerClass = ClassUtils.getClass(\"java.text.Normalizer\", false);",
      "right" : "Class normalizerClass = ClassUtils.getClass(\"java.text.Normalizer\", false);",
      "info" : "VariableDeclarationStatement[24250-24325]:VariableDeclarationStatement[24250-24325]"
    }, {
      "left" : "java.lang.reflect.Method method = normalizerClass.getMethod(\"normalize\", CharSequence.class, normalizerFormClass );",
      "right" : "java.lang.reflect.Method method = normalizerClass.getMethod(\"normalize\", CharSequence.class, normalizerFormClass );",
      "info" : "VariableDeclarationStatement[24394-24509]:VariableDeclarationStatement[24394-24509]"
    }, {
      "left" : "java.lang.reflect.Field nfd = normalizerFormClass.getField(\"NFD\");",
      "right" : "java.lang.reflect.Field nfd = normalizerFormClass.getField(\"NFD\");",
      "info" : "VariableDeclarationStatement[24571-24637]:VariableDeclarationStatement[24571-24637]"
    }, {
      "left" : "String decomposed = (String) method.invoke( null, input, nfd.get(null) );",
      "right" : "String decomposed = (String) method.invoke( null, input, nfd.get(null) );",
      "info" : "VariableDeclarationStatement[24688-24761]:VariableDeclarationStatement[24688-24761]"
    }, {
      "left" : "java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");",
      "right" : "java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");",
      "info" : "VariableDeclarationStatement[24820-24929]:VariableDeclarationStatement[24820-24929]"
    }, {
      "left" : "return accentPattern.matcher(decomposed).replaceAll(\"\");",
      "right" : "return accentPattern.matcher(decomposed).replaceAll(\"\");",
      "info" : "ReturnStatement[24946-25002]:ReturnStatement[24946-25002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25052-25179]:Block[25052-25179]"
    }, {
      "left" : "throw new RuntimeException(\"ClassNotFoundException occurred during 1.6 backcompat code\", cnfe);",
      "right" : "throw new RuntimeException(\"ClassNotFoundException occurred during 1.6 backcompat code\", cnfe);",
      "info" : "ThrowStatement[25070-25165]:ThrowStatement[25070-25165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25214-25340]:Block[25214-25340]"
    }, {
      "left" : "throw new RuntimeException(\"NoSuchMethodException occurred during 1.6 backcompat code\", nsme);",
      "right" : "throw new RuntimeException(\"NoSuchMethodException occurred during 1.6 backcompat code\", nsme);",
      "info" : "ThrowStatement[25232-25326]:ThrowStatement[25232-25326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25374-25499]:Block[25374-25499]"
    }, {
      "left" : "throw new RuntimeException(\"NoSuchFieldException occurred during 1.6 backcompat code\", nsfe);",
      "right" : "throw new RuntimeException(\"NoSuchFieldException occurred during 1.6 backcompat code\", nsfe);",
      "info" : "ThrowStatement[25392-25485]:ThrowStatement[25392-25485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25534-25660]:Block[25534-25660]"
    }, {
      "left" : "throw new RuntimeException(\"IllegalAccessException occurred during 1.6 backcompat code\", iae);",
      "right" : "throw new RuntimeException(\"IllegalAccessException occurred during 1.6 backcompat code\", iae);",
      "info" : "ThrowStatement[25552-25646]:ThrowStatement[25552-25646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25697-25825]:Block[25697-25825]"
    }, {
      "left" : "throw new RuntimeException(\"IllegalArgumentException occurred during 1.6 backcompat code\", iae);",
      "right" : "throw new RuntimeException(\"IllegalArgumentException occurred during 1.6 backcompat code\", iae);",
      "info" : "ThrowStatement[25715-25811]:ThrowStatement[25715-25811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25881-26010]:Block[25881-26010]"
    }, {
      "left" : "throw new RuntimeException(\"InvocationTargetException occurred during 1.6 backcompat code\", ite);",
      "right" : "throw new RuntimeException(\"InvocationTargetException occurred during 1.6 backcompat code\", ite);",
      "info" : "ThrowStatement[25899-25996]:ThrowStatement[25899-25996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26039-26159]:Block[26039-26159]"
    }, {
      "left" : "throw new RuntimeException(\"SecurityException occurred during 1.6 backcompat code\", se);",
      "right" : "throw new RuntimeException(\"SecurityException occurred during 1.6 backcompat code\", se);",
      "info" : "ThrowStatement[26057-26145]:ThrowStatement[26057-26145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26175-26306]:Block[26175-26306]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"The stripAccents(String) method is not supported until Java 1.6\");",
      "right" : "throw new UnsupportedOperationException(\"The stripAccents(String) method is not supported until Java 1.6\");",
      "info" : "ThrowStatement[26189-26296]:ThrowStatement[26189-26296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27271-27342]:Block[27271-27342]"
    }, {
      "left" : "return str1 == null ? str2 == null : str1.equals(str2);",
      "right" : "return str1 == null ? str2 == null : str1.equals(str2);",
      "info" : "ReturnStatement[27281-27336]:ReturnStatement[27281-27336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28297-28378]:Block[28297-28378]"
    }, {
      "left" : "return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);",
      "right" : "return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);",
      "info" : "ReturnStatement[28307-28372]:ReturnStatement[28307-28372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29239-29347]:Block[29239-29347]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[29249-29301]:IfStatement[29249-29301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29267-29301]:Block[29267-29301]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[29281-29291]:ReturnStatement[29281-29291]"
    }, {
      "left" : "return str.indexOf(searchChar);",
      "right" : "return str.indexOf(searchChar);",
      "info" : "ReturnStatement[29310-29341]:ReturnStatement[29310-29341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30486-30604]:Block[30486-30604]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[30496-30548]:IfStatement[30496-30548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30514-30548]:Block[30514-30548]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[30528-30538]:ReturnStatement[30528-30538]"
    }, {
      "left" : "return str.indexOf(searchChar, startPos);",
      "right" : "return str.indexOf(searchChar, startPos);",
      "info" : "ReturnStatement[30557-30598]:ReturnStatement[30557-30598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31519-31646]:Block[31519-31646]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[31529-31601]:IfStatement[31529-31601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31567-31601]:Block[31567-31601]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[31581-31591]:ReturnStatement[31581-31591]"
    }, {
      "left" : "return str.indexOf(searchStr);",
      "right" : "return str.indexOf(searchStr);",
      "info" : "ReturnStatement[31610-31640]:ReturnStatement[31610-31640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32992-33459]:Block[32992-33459]"
    }, {
      "left" : "if (str == null || searchStr == null || ordinal <= 0)",
      "right" : "if (str == null || searchStr == null || ordinal <= 0)",
      "info" : "IfStatement[33002-33103]:IfStatement[33002-33103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33056-33103]:Block[33056-33103]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[33070-33093]:ReturnStatement[33070-33093]"
    }, {
      "left" : "if (searchStr.length() == 0)",
      "right" : "if (searchStr.length() == 0)",
      "info" : "IfStatement[33112-33174]:IfStatement[33112-33174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33141-33174]:Block[33141-33174]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[33155-33164]:ReturnStatement[33155-33164]"
    }, {
      "left" : "int found = 0;",
      "right" : "int found = 0;",
      "info" : "VariableDeclarationStatement[33183-33197]:VariableDeclarationStatement[33183-33197]"
    }, {
      "left" : "int index = INDEX_NOT_FOUND;",
      "right" : "int index = INDEX_NOT_FOUND;",
      "info" : "VariableDeclarationStatement[33206-33234]:VariableDeclarationStatement[33206-33234]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[33243-33431]:DoStatement[33243-33431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33246-33406]:Block[33246-33406]"
    }, {
      "left" : "index = str.indexOf(searchStr, index + 1);",
      "right" : "index = str.indexOf(searchStr, index + 1);",
      "info" : "ExpressionStatement[33260-33302]:ExpressionStatement[33260-33302]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[33315-33375]:IfStatement[33315-33375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33330-33375]:Block[33330-33375]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[33348-33361]:ReturnStatement[33348-33361]"
    }, {
      "left" : "found++;",
      "right" : "found++;",
      "info" : "ExpressionStatement[33388-33396]:ExpressionStatement[33388-33396]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[33440-33453]:ReturnStatement[33440-33453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34895-35220]:Block[34895-35220]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[34905-34977]:IfStatement[34905-34977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34943-34977]:Block[34943-34977]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[34957-34967]:ReturnStatement[34957-34967]"
    }, {
      "left" : "if (searchStr.length() == 0 && startPos >= str.length())",
      "right" : "if (searchStr.length() == 0 && startPos >= str.length())",
      "info" : "IfStatement[35064-35165]:IfStatement[35064-35165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35121-35165]:Block[35121-35165]"
    }, {
      "left" : "return str.length();",
      "right" : "return str.length();",
      "info" : "ReturnStatement[35135-35155]:ReturnStatement[35135-35155]"
    }, {
      "left" : "return str.indexOf(searchStr, startPos);",
      "right" : "return str.indexOf(searchStr, startPos);",
      "info" : "ReturnStatement[35174-35214]:ReturnStatement[35174-35214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36107-36219]:Block[36107-36219]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[36117-36169]:IfStatement[36117-36169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36135-36169]:Block[36135-36169]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[36149-36159]:ReturnStatement[36149-36159]"
    }, {
      "left" : "return str.lastIndexOf(searchChar);",
      "right" : "return str.lastIndexOf(searchChar);",
      "info" : "ReturnStatement[36178-36213]:ReturnStatement[36178-36213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37482-37604]:Block[37482-37604]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[37492-37544]:IfStatement[37492-37544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37510-37544]:Block[37510-37544]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37524-37534]:ReturnStatement[37524-37534]"
    }, {
      "left" : "return str.lastIndexOf(searchChar, startPos);",
      "right" : "return str.lastIndexOf(searchChar, startPos);",
      "info" : "ReturnStatement[37553-37598]:ReturnStatement[37553-37598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38553-38684]:Block[38553-38684]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[38563-38635]:IfStatement[38563-38635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38601-38635]:Block[38601-38635]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[38615-38625]:ReturnStatement[38615-38625]"
    }, {
      "left" : "return str.lastIndexOf(searchStr);",
      "right" : "return str.lastIndexOf(searchStr);",
      "info" : "ReturnStatement[38644-38678]:ReturnStatement[38644-38678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40087-40228]:Block[40087-40228]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[40097-40169]:IfStatement[40097-40169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40135-40169]:Block[40135-40169]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[40149-40159]:ReturnStatement[40149-40159]"
    }, {
      "left" : "return str.lastIndexOf(searchStr, startPos);",
      "right" : "return str.lastIndexOf(searchStr, startPos);",
      "info" : "ReturnStatement[40178-40222]:ReturnStatement[40178-40222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41109-41225]:Block[41109-41225]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[41119-41174]:IfStatement[41119-41174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41137-41174]:Block[41137-41174]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41151-41164]:ReturnStatement[41151-41164]"
    }, {
      "left" : "return str.indexOf(searchChar) >= 0;",
      "right" : "return str.indexOf(searchChar) >= 0;",
      "info" : "ReturnStatement[41183-41219]:ReturnStatement[41183-41219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42105-42240]:Block[42105-42240]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[42115-42190]:IfStatement[42115-42190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42153-42190]:Block[42153-42190]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42167-42180]:ReturnStatement[42167-42180]"
    }, {
      "left" : "return str.indexOf(searchStr) >= 0;",
      "right" : "return str.indexOf(searchStr) >= 0;",
      "info" : "ReturnStatement[42199-42234]:ReturnStatement[42199-42234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43264-43612]:Block[43264-43612]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[43274-43349]:IfStatement[43274-43349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43312-43349]:Block[43312-43349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43326-43339]:ReturnStatement[43326-43339]"
    }, {
      "left" : "int len = searchStr.length();",
      "right" : "int len = searchStr.length();",
      "info" : "VariableDeclarationStatement[43358-43387]:VariableDeclarationStatement[43358-43387]"
    }, {
      "left" : "int max = str.length() - len;",
      "right" : "int max = str.length() - len;",
      "info" : "VariableDeclarationStatement[43396-43425]:VariableDeclarationStatement[43396-43425]"
    }, {
      "left" : "for (int i = 0; i <= max; i++)",
      "right" : "for (int i = 0; i <= max; i++)",
      "info" : "ForStatement[43434-43584]:ForStatement[43434-43584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43465-43584]:Block[43465-43584]"
    }, {
      "left" : "if (str.regionMatches(true, i, searchStr, 0, len))",
      "right" : "if (str.regionMatches(true, i, searchStr, 0, len))",
      "info" : "IfStatement[43479-43574]:IfStatement[43479-43574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43530-43574]:Block[43530-43574]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43548-43560]:ReturnStatement[43548-43560]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43593-43606]:ReturnStatement[43593-43606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44729-45112]:Block[44729-45112]"
    }, {
      "left" : "if (isEmpty(str) || ArrayUtils.isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || ArrayUtils.isEmpty(searchChars))",
      "info" : "IfStatement[44739-44826]:IfStatement[44739-44826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44792-44826]:Block[44792-44826]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[44806-44816]:ReturnStatement[44806-44816]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[44835-45087]:ForStatement[44835-45087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44874-45087]:Block[44874-45087]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[44888-44912]:VariableDeclarationStatement[44888-44912]"
    }, {
      "left" : "for (int j = 0; j < searchChars.length; j++)",
      "right" : "for (int j = 0; j < searchChars.length; j++)",
      "info" : "ForStatement[44925-45077]:ForStatement[44925-45077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44970-45077]:Block[44970-45077]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[44988-45063]:IfStatement[44988-45063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45014-45063]:Block[45014-45063]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[45036-45045]:ReturnStatement[45036-45045]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[45096-45106]:ReturnStatement[45096-45106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46085-46236]:Block[46085-46236]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || isEmpty(searchChars))",
      "info" : "IfStatement[46095-46171]:IfStatement[46095-46171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46137-46171]:Block[46137-46171]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[46151-46161]:ReturnStatement[46151-46161]"
    }, {
      "left" : "return indexOfAny(str, searchChars.toCharArray());",
      "right" : "return indexOfAny(str, searchChars.toCharArray());",
      "info" : "ReturnStatement[46180-46230]:ReturnStatement[46180-46230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47419-47846]:Block[47419-47846]"
    }, {
      "left" : "if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0)",
      "right" : "if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0)",
      "info" : "IfStatement[47429-47554]:IfStatement[47429-47554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47517-47554]:Block[47517-47554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47531-47544]:ReturnStatement[47531-47544]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[47563-47818]:ForStatement[47563-47818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47602-47818]:Block[47602-47818]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[47616-47640]:VariableDeclarationStatement[47616-47640]"
    }, {
      "left" : "for (int j = 0; j < searchChars.length; j++)",
      "right" : "for (int j = 0; j < searchChars.length; j++)",
      "info" : "ForStatement[47653-47808]:ForStatement[47653-47808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47698-47808]:Block[47698-47808]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[47716-47794]:IfStatement[47716-47794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47742-47794]:Block[47742-47794]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47764-47776]:ReturnStatement[47764-47776]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47827-47840]:ReturnStatement[47827-47840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48945-49083]:Block[48945-49083]"
    }, {
      "left" : "if (searchChars == null)",
      "right" : "if (searchChars == null)",
      "info" : "IfStatement[48955-49017]:IfStatement[48955-49017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48980-49017]:Block[48980-49017]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48994-49007]:ReturnStatement[48994-49007]"
    }, {
      "left" : "return containsAny(str, searchChars.toCharArray());",
      "right" : "return containsAny(str, searchChars.toCharArray());",
      "info" : "ReturnStatement[49026-49077]:ReturnStatement[49026-49077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50196-50615]:Block[50196-50615]"
    }, {
      "left" : "if (isEmpty(str) || ArrayUtils.isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || ArrayUtils.isEmpty(searchChars))",
      "info" : "IfStatement[50206-50293]:IfStatement[50206-50293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50259-50293]:Block[50259-50293]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[50273-50283]:ReturnStatement[50273-50283]"
    }, {
      "left" : "outer : for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchChars.length; j++) {\n                if (searchChars[j] == ch) {\n                    continue outer;\n                }\n            }\n            return i;\n        }",
      "right" : "outer : for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchChars.length; j++) {\n                if (searchChars[j] == ch) {\n                    continue outer;\n                }\n            }\n            return i;\n        }",
      "info" : "LabeledStatement[50302-50590]:LabeledStatement[50302-50590]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[50310-50590]:ForStatement[50310-50590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50349-50590]:Block[50349-50590]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[50363-50387]:VariableDeclarationStatement[50363-50387]"
    }, {
      "left" : "for (int j = 0; j < searchChars.length; j++)",
      "right" : "for (int j = 0; j < searchChars.length; j++)",
      "info" : "ForStatement[50400-50558]:ForStatement[50400-50558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50445-50558]:Block[50445-50558]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[50463-50544]:IfStatement[50463-50544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50489-50544]:Block[50489-50544]"
    }, {
      "left" : "continue outer;",
      "right" : "continue outer;",
      "info" : "ContinueStatement[50511-50526]:ContinueStatement[50511-50526]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[50571-50580]:ReturnStatement[50571-50580]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[50599-50609]:ReturnStatement[50599-50609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51616-51884]:Block[51616-51884]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || isEmpty(searchChars))",
      "info" : "IfStatement[51626-51702]:IfStatement[51626-51702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51668-51702]:Block[51668-51702]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[51682-51692]:ReturnStatement[51682-51692]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[51711-51859]:ForStatement[51711-51859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51750-51859]:Block[51750-51859]"
    }, {
      "left" : "if (searchChars.indexOf(str.charAt(i)) < 0)",
      "right" : "if (searchChars.indexOf(str.charAt(i)) < 0)",
      "info" : "IfStatement[51764-51849]:IfStatement[51764-51849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51808-51849]:Block[51808-51849]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[51826-51835]:ReturnStatement[51826-51835]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[51868-51878]:ReturnStatement[51868-51878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52959-53309]:Block[52959-53309]"
    }, {
      "left" : "if ((valid == null) || (str == null))",
      "right" : "if ((valid == null) || (str == null))",
      "info" : "IfStatement[53043-53118]:IfStatement[53043-53118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53081-53118]:Block[53081-53118]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53095-53108]:ReturnStatement[53095-53108]"
    }, {
      "left" : "if (str.length() == 0)",
      "right" : "if (str.length() == 0)",
      "info" : "IfStatement[53127-53186]:IfStatement[53127-53186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53150-53186]:Block[53150-53186]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53164-53176]:ReturnStatement[53164-53176]"
    }, {
      "left" : "if (valid.length == 0)",
      "right" : "if (valid.length == 0)",
      "info" : "IfStatement[53195-53255]:IfStatement[53195-53255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53218-53255]:Block[53218-53255]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53232-53245]:ReturnStatement[53232-53245]"
    }, {
      "left" : "return indexOfAnyBut(str, valid) == -1;",
      "right" : "return indexOfAnyBut(str, valid) == -1;",
      "info" : "ReturnStatement[53264-53303]:ReturnStatement[53264-53303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54315-54467]:Block[54315-54467]"
    }, {
      "left" : "if (str == null || validChars == null)",
      "right" : "if (str == null || validChars == null)",
      "info" : "IfStatement[54325-54401]:IfStatement[54325-54401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54364-54401]:Block[54364-54401]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54378-54391]:ReturnStatement[54378-54391]"
    }, {
      "left" : "return containsOnly(str, validChars.toCharArray());",
      "right" : "return containsOnly(str, validChars.toCharArray());",
      "info" : "ReturnStatement[54410-54461]:ReturnStatement[54410-54461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55569-56016]:Block[55569-56016]"
    }, {
      "left" : "if (str == null || invalidChars == null)",
      "right" : "if (str == null || invalidChars == null)",
      "info" : "IfStatement[55579-55656]:IfStatement[55579-55656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55620-55656]:Block[55620-55656]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55634-55646]:ReturnStatement[55634-55646]"
    }, {
      "left" : "int strSize = str.length();",
      "right" : "int strSize = str.length();",
      "info" : "VariableDeclarationStatement[55665-55692]:VariableDeclarationStatement[55665-55692]"
    }, {
      "left" : "int validSize = invalidChars.length;",
      "right" : "int validSize = invalidChars.length;",
      "info" : "VariableDeclarationStatement[55701-55737]:VariableDeclarationStatement[55701-55737]"
    }, {
      "left" : "for (int i = 0; i < strSize; i++)",
      "right" : "for (int i = 0; i < strSize; i++)",
      "info" : "ForStatement[55746-55989]:ForStatement[55746-55989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55780-55989]:Block[55780-55989]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[55794-55818]:VariableDeclarationStatement[55794-55818]"
    }, {
      "left" : "for (int j = 0; j < validSize; j++)",
      "right" : "for (int j = 0; j < validSize; j++)",
      "info" : "ForStatement[55831-55979]:ForStatement[55831-55979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55867-55979]:Block[55867-55979]"
    }, {
      "left" : "if (invalidChars[j] == ch)",
      "right" : "if (invalidChars[j] == ch)",
      "info" : "IfStatement[55885-55965]:IfStatement[55885-55965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55912-55965]:Block[55912-55965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55934-55947]:ReturnStatement[55934-55947]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55998-56010]:ReturnStatement[55998-56010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57020-57175]:Block[57020-57175]"
    }, {
      "left" : "if (str == null || invalidChars == null)",
      "right" : "if (str == null || invalidChars == null)",
      "info" : "IfStatement[57030-57107]:IfStatement[57030-57107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57071-57107]:Block[57071-57107]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57085-57097]:ReturnStatement[57085-57097]"
    }, {
      "left" : "return containsNone(str, invalidChars.toCharArray());",
      "right" : "return containsNone(str, invalidChars.toCharArray());",
      "info" : "ReturnStatement[57116-57169]:ReturnStatement[57116-57169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58691-59332]:Block[58691-59332]"
    }, {
      "left" : "if ((str == null) || (searchStrs == null))",
      "right" : "if ((str == null) || (searchStrs == null))",
      "info" : "IfStatement[58701-58778]:IfStatement[58701-58778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58744-58778]:Block[58744-58778]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[58758-58768]:ReturnStatement[58758-58768]"
    }, {
      "left" : "int sz = searchStrs.length;",
      "right" : "int sz = searchStrs.length;",
      "info" : "VariableDeclarationStatement[58787-58814]:VariableDeclarationStatement[58787-58814]"
    }, {
      "left" : "int ret = Integer.MAX_VALUE;",
      "right" : "int ret = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[58876-58904]:VariableDeclarationStatement[58876-58904]"
    }, {
      "left" : "int tmp = 0;",
      "right" : "int tmp = 0;",
      "info" : "VariableDeclarationStatement[58914-58926]:VariableDeclarationStatement[58914-58926]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[58935-59271]:ForStatement[58935-59271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58964-59271]:Block[58964-59271]"
    }, {
      "left" : "String search = searchStrs[i];",
      "right" : "String search = searchStrs[i];",
      "info" : "VariableDeclarationStatement[58978-59008]:VariableDeclarationStatement[58978-59008]"
    }, {
      "left" : "if (search == null)",
      "right" : "if (search == null)",
      "info" : "IfStatement[59021-59082]:IfStatement[59021-59082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59041-59082]:Block[59041-59082]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[59059-59068]:ContinueStatement[59059-59068]"
    }, {
      "left" : "tmp = str.indexOf(search);",
      "right" : "tmp = str.indexOf(search);",
      "info" : "ExpressionStatement[59095-59121]:ExpressionStatement[59095-59121]"
    }, {
      "left" : "if (tmp == -1)",
      "right" : "if (tmp == -1)",
      "info" : "IfStatement[59134-59190]:IfStatement[59134-59190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59149-59190]:Block[59149-59190]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[59167-59176]:ContinueStatement[59167-59176]"
    }, {
      "left" : "if (tmp < ret)",
      "right" : "if (tmp < ret)",
      "info" : "IfStatement[59204-59261]:IfStatement[59204-59261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59219-59261]:Block[59219-59261]"
    }, {
      "left" : "ret = tmp;",
      "right" : "ret = tmp;",
      "info" : "ExpressionStatement[59237-59247]:ExpressionStatement[59237-59247]"
    }, {
      "left" : "return (ret == Integer.MAX_VALUE) ? -1 : ret;",
      "right" : "return (ret == Integer.MAX_VALUE) ? -1 : ret;",
      "info" : "ReturnStatement[59281-59326]:ReturnStatement[59281-59326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60710-61181]:Block[60710-61181]"
    }, {
      "left" : "if ((str == null) || (searchStrs == null))",
      "right" : "if ((str == null) || (searchStrs == null))",
      "info" : "IfStatement[60720-60797]:IfStatement[60720-60797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60763-60797]:Block[60763-60797]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[60777-60787]:ReturnStatement[60777-60787]"
    }, {
      "left" : "int sz = searchStrs.length;",
      "right" : "int sz = searchStrs.length;",
      "info" : "VariableDeclarationStatement[60806-60833]:VariableDeclarationStatement[60806-60833]"
    }, {
      "left" : "int ret = -1;",
      "right" : "int ret = -1;",
      "info" : "VariableDeclarationStatement[60842-60855]:VariableDeclarationStatement[60842-60855]"
    }, {
      "left" : "int tmp = 0;",
      "right" : "int tmp = 0;",
      "info" : "VariableDeclarationStatement[60864-60876]:VariableDeclarationStatement[60864-60876]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[60885-61155]:ForStatement[60885-61155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60914-61155]:Block[60914-61155]"
    }, {
      "left" : "String search = searchStrs[i];",
      "right" : "String search = searchStrs[i];",
      "info" : "VariableDeclarationStatement[60928-60958]:VariableDeclarationStatement[60928-60958]"
    }, {
      "left" : "if (search == null)",
      "right" : "if (search == null)",
      "info" : "IfStatement[60971-61032]:IfStatement[60971-61032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60991-61032]:Block[60991-61032]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[61009-61018]:ContinueStatement[61009-61018]"
    }, {
      "left" : "tmp = str.lastIndexOf(search);",
      "right" : "tmp = str.lastIndexOf(search);",
      "info" : "ExpressionStatement[61045-61075]:ExpressionStatement[61045-61075]"
    }, {
      "left" : "if (tmp > ret)",
      "right" : "if (tmp > ret)",
      "info" : "IfStatement[61088-61145]:IfStatement[61088-61145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61103-61145]:Block[61103-61145]"
    }, {
      "left" : "ret = tmp;",
      "right" : "ret = tmp;",
      "info" : "ExpressionStatement[61121-61131]:ExpressionStatement[61121-61131]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[61164-61175]:ReturnStatement[61164-61175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62337-62742]:Block[62337-62742]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[62347-62400]:IfStatement[62347-62400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62364-62400]:Block[62364-62400]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[62378-62390]:ReturnStatement[62378-62390]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[62469-62567]:IfStatement[62469-62567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62484-62567]:Block[62484-62567]"
    }, {
      "left" : "start = str.length() + start;",
      "right" : "start = str.length() + start;",
      "info" : "ExpressionStatement[62498-62527]:ExpressionStatement[62498-62527]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[62577-62626]:IfStatement[62577-62626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62592-62626]:Block[62592-62626]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[62606-62616]:ExpressionStatement[62606-62616]"
    }, {
      "left" : "if (start > str.length())",
      "right" : "if (start > str.length())",
      "info" : "IfStatement[62635-62698]:IfStatement[62635-62698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62661-62698]:Block[62661-62698]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[62675-62688]:ReturnStatement[62675-62688]"
    }, {
      "left" : "return str.substring(start);",
      "right" : "return str.substring(start);",
      "info" : "ReturnStatement[62708-62736]:ReturnStatement[62708-62736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64487-65168]:Block[64487-65168]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[64497-64550]:IfStatement[64497-64550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64514-64550]:Block[64514-64550]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64528-64540]:ReturnStatement[64528-64540]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[64588-64678]:IfStatement[64588-64678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64601-64678]:Block[64601-64678]"
    }, {
      "left" : "end = str.length() + end;",
      "right" : "end = str.length() + end;",
      "info" : "ExpressionStatement[64615-64640]:ExpressionStatement[64615-64640]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[64687-64785]:IfStatement[64687-64785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64702-64785]:Block[64702-64785]"
    }, {
      "left" : "start = str.length() + start;",
      "right" : "start = str.length() + start;",
      "info" : "ExpressionStatement[64716-64745]:ExpressionStatement[64716-64745]"
    }, {
      "left" : "if (end > str.length())",
      "right" : "if (end > str.length())",
      "info" : "IfStatement[64824-64891]:IfStatement[64824-64891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64848-64891]:Block[64848-64891]"
    }, {
      "left" : "end = str.length();",
      "right" : "end = str.length();",
      "info" : "ExpressionStatement[64862-64881]:ExpressionStatement[64862-64881]"
    }, {
      "left" : "if (start > end)",
      "right" : "if (start > end)",
      "info" : "IfStatement[64952-65006]:IfStatement[64952-65006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64969-65006]:Block[64969-65006]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[64983-64996]:ReturnStatement[64983-64996]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[65016-65065]:IfStatement[65016-65065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65031-65065]:Block[65031-65065]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[65045-65055]:ExpressionStatement[65045-65055]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[65074-65119]:IfStatement[65074-65119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65087-65119]:Block[65087-65119]"
    }, {
      "left" : "end = 0;",
      "right" : "end = 0;",
      "info" : "ExpressionStatement[65101-65109]:ExpressionStatement[65101-65109]"
    }, {
      "left" : "return str.substring(start, end);",
      "right" : "return str.substring(start, end);",
      "info" : "ReturnStatement[65129-65162]:ReturnStatement[65129-65162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66155-66390]:Block[66155-66390]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[66165-66218]:IfStatement[66165-66218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66182-66218]:Block[66182-66218]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[66196-66208]:ReturnStatement[66196-66208]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[66227-66277]:IfStatement[66227-66277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66240-66277]:Block[66240-66277]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[66254-66267]:ReturnStatement[66254-66267]"
    }, {
      "left" : "if (str.length() <= len)",
      "right" : "if (str.length() <= len)",
      "info" : "IfStatement[66286-66346]:IfStatement[66286-66346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66311-66346]:Block[66311-66346]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[66325-66336]:ReturnStatement[66325-66336]"
    }, {
      "left" : "return str.substring(0, len);",
      "right" : "return str.substring(0, len);",
      "info" : "ReturnStatement[66355-66384]:ReturnStatement[66355-66384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67290-67537]:Block[67290-67537]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[67300-67353]:IfStatement[67300-67353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67317-67353]:Block[67317-67353]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[67331-67343]:ReturnStatement[67331-67343]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[67362-67412]:IfStatement[67362-67412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67375-67412]:Block[67375-67412]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[67389-67402]:ReturnStatement[67389-67402]"
    }, {
      "left" : "if (str.length() <= len)",
      "right" : "if (str.length() <= len)",
      "info" : "IfStatement[67421-67481]:IfStatement[67421-67481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67446-67481]:Block[67446-67481]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[67460-67471]:ReturnStatement[67460-67471]"
    }, {
      "left" : "return str.substring(str.length() - len);",
      "right" : "return str.substring(str.length() - len);",
      "info" : "ReturnStatement[67490-67531]:ReturnStatement[67490-67531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68657-68999]:Block[68657-68999]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[68667-68720]:IfStatement[68667-68720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68684-68720]:Block[68684-68720]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[68698-68710]:ReturnStatement[68698-68710]"
    }, {
      "left" : "if (len < 0 || pos > str.length())",
      "right" : "if (len < 0 || pos > str.length())",
      "info" : "IfStatement[68729-68801]:IfStatement[68729-68801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68764-68801]:Block[68764-68801]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[68778-68791]:ReturnStatement[68778-68791]"
    }, {
      "left" : "if (pos < 0)",
      "right" : "if (pos < 0)",
      "info" : "IfStatement[68810-68855]:IfStatement[68810-68855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68823-68855]:Block[68823-68855]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[68837-68845]:ExpressionStatement[68837-68845]"
    }, {
      "left" : "if (str.length() <= (pos + len))",
      "right" : "if (str.length() <= (pos + len))",
      "info" : "IfStatement[68864-68947]:IfStatement[68864-68947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68897-68947]:Block[68897-68947]"
    }, {
      "left" : "return str.substring(pos);",
      "right" : "return str.substring(pos);",
      "info" : "ReturnStatement[68911-68937]:ReturnStatement[68911-68937]"
    }, {
      "left" : "return str.substring(pos, pos + len);",
      "right" : "return str.substring(pos, pos + len);",
      "info" : "ReturnStatement[68956-68993]:ReturnStatement[68956-68993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70361-70665]:Block[70361-70665]"
    }, {
      "left" : "if (isEmpty(str) || separator == null)",
      "right" : "if (isEmpty(str) || separator == null)",
      "info" : "IfStatement[70371-70445]:IfStatement[70371-70445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70410-70445]:Block[70410-70445]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[70424-70435]:ReturnStatement[70424-70435]"
    }, {
      "left" : "if (separator.length() == 0)",
      "right" : "if (separator.length() == 0)",
      "info" : "IfStatement[70454-70520]:IfStatement[70454-70520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70483-70520]:Block[70483-70520]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[70497-70510]:ReturnStatement[70497-70510]"
    }, {
      "left" : "int pos = str.indexOf(separator);",
      "right" : "int pos = str.indexOf(separator);",
      "info" : "VariableDeclarationStatement[70529-70562]:VariableDeclarationStatement[70529-70562]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[70571-70621]:IfStatement[70571-70621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70586-70621]:Block[70586-70621]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[70600-70611]:ReturnStatement[70600-70611]"
    }, {
      "left" : "return str.substring(0, pos);",
      "right" : "return str.substring(0, pos);",
      "info" : "ReturnStatement[70630-70659]:ReturnStatement[70630-70659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71951-72248]:Block[71951-72248]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[71961-72014]:IfStatement[71961-72014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71979-72014]:Block[71979-72014]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[71993-72004]:ReturnStatement[71993-72004]"
    }, {
      "left" : "if (separator == null)",
      "right" : "if (separator == null)",
      "info" : "IfStatement[72023-72083]:IfStatement[72023-72083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72046-72083]:Block[72046-72083]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[72060-72073]:ReturnStatement[72060-72073]"
    }, {
      "left" : "int pos = str.indexOf(separator);",
      "right" : "int pos = str.indexOf(separator);",
      "info" : "VariableDeclarationStatement[72092-72125]:VariableDeclarationStatement[72092-72125]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[72134-72186]:IfStatement[72134-72186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72149-72186]:Block[72149-72186]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[72163-72176]:ReturnStatement[72163-72176]"
    }, {
      "left" : "return str.substring(pos + separator.length());",
      "right" : "return str.substring(pos + separator.length());",
      "info" : "ReturnStatement[72195-72242]:ReturnStatement[72195-72242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73537-73771]:Block[73537-73771]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(separator))",
      "right" : "if (isEmpty(str) || isEmpty(separator))",
      "info" : "IfStatement[73547-73622]:IfStatement[73547-73622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73587-73622]:Block[73587-73622]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[73601-73612]:ReturnStatement[73601-73612]"
    }, {
      "left" : "int pos = str.lastIndexOf(separator);",
      "right" : "int pos = str.lastIndexOf(separator);",
      "info" : "VariableDeclarationStatement[73631-73668]:VariableDeclarationStatement[73631-73668]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[73677-73727]:IfStatement[73677-73727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73692-73727]:Block[73692-73727]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[73706-73717]:ReturnStatement[73706-73717]"
    }, {
      "left" : "return str.substring(0, pos);",
      "right" : "return str.substring(0, pos);",
      "info" : "ReturnStatement[73736-73765]:ReturnStatement[73736-73765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75153-75501]:Block[75153-75501]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[75163-75216]:IfStatement[75163-75216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75181-75216]:Block[75181-75216]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[75195-75206]:ReturnStatement[75195-75206]"
    }, {
      "left" : "if (isEmpty(separator))",
      "right" : "if (isEmpty(separator))",
      "info" : "IfStatement[75225-75286]:IfStatement[75225-75286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75249-75286]:Block[75249-75286]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[75263-75276]:ReturnStatement[75263-75276]"
    }, {
      "left" : "int pos = str.lastIndexOf(separator);",
      "right" : "int pos = str.lastIndexOf(separator);",
      "info" : "VariableDeclarationStatement[75295-75332]:VariableDeclarationStatement[75295-75332]"
    }, {
      "left" : "if (pos == -1 || pos == (str.length() - separator.length()))",
      "right" : "if (pos == -1 || pos == (str.length() - separator.length()))",
      "info" : "IfStatement[75341-75439]:IfStatement[75341-75439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75402-75439]:Block[75402-75439]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[75416-75429]:ReturnStatement[75416-75429]"
    }, {
      "left" : "return str.substring(pos + separator.length());",
      "right" : "return str.substring(pos + separator.length());",
      "info" : "ReturnStatement[75448-75495]:ReturnStatement[75448-75495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76560-76615]:Block[76560-76615]"
    }, {
      "left" : "return substringBetween(str, tag, tag);",
      "right" : "return substringBetween(str, tag, tag);",
      "info" : "ReturnStatement[76570-76609]:ReturnStatement[76570-76609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78001-78374]:Block[78001-78374]"
    }, {
      "left" : "if (str == null || open == null || close == null)",
      "right" : "if (str == null || open == null || close == null)",
      "info" : "IfStatement[78011-78097]:IfStatement[78011-78097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78061-78097]:Block[78061-78097]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[78075-78087]:ReturnStatement[78075-78087]"
    }, {
      "left" : "int start = str.indexOf(open);",
      "right" : "int start = str.indexOf(open);",
      "info" : "VariableDeclarationStatement[78106-78136]:VariableDeclarationStatement[78106-78136]"
    }, {
      "left" : "if (start != -1)",
      "right" : "if (start != -1)",
      "info" : "IfStatement[78145-78347]:IfStatement[78145-78347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78162-78347]:Block[78162-78347]"
    }, {
      "left" : "int end = str.indexOf(close, start + open.length());",
      "right" : "int end = str.indexOf(close, start + open.length());",
      "info" : "VariableDeclarationStatement[78176-78228]:VariableDeclarationStatement[78176-78228]"
    }, {
      "left" : "if (end != -1)",
      "right" : "if (end != -1)",
      "info" : "IfStatement[78241-78337]:IfStatement[78241-78337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78256-78337]:Block[78256-78337]"
    }, {
      "left" : "return str.substring(start + open.length(), end);",
      "right" : "return str.substring(start + open.length(), end);",
      "info" : "ReturnStatement[78274-78323]:ReturnStatement[78274-78323]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[78356-78368]:ReturnStatement[78356-78368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79592-80483]:Block[79592-80483]"
    }, {
      "left" : "if (str == null || isEmpty(open) || isEmpty(close))",
      "right" : "if (str == null || isEmpty(open) || isEmpty(close))",
      "info" : "IfStatement[79602-79690]:IfStatement[79602-79690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79654-79690]:Block[79654-79690]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[79668-79680]:ReturnStatement[79668-79680]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[79699-79725]:VariableDeclarationStatement[79699-79725]"
    }, {
      "left" : "if (strLen == 0)",
      "right" : "if (strLen == 0)",
      "info" : "IfStatement[79734-79812]:IfStatement[79734-79812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79751-79812]:Block[79751-79812]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[79765-79802]:ReturnStatement[79765-79802]"
    }, {
      "left" : "int closeLen = close.length();",
      "right" : "int closeLen = close.length();",
      "info" : "VariableDeclarationStatement[79821-79851]:VariableDeclarationStatement[79821-79851]"
    }, {
      "left" : "int openLen = open.length();",
      "right" : "int openLen = open.length();",
      "info" : "VariableDeclarationStatement[79860-79888]:VariableDeclarationStatement[79860-79888]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[79897-79941]:VariableDeclarationStatement[79897-79941]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[79950-79962]:VariableDeclarationStatement[79950-79962]"
    }, {
      "left" : "while (pos < (strLen - closeLen))",
      "right" : "while (pos < (strLen - closeLen))",
      "info" : "WhileStatement[79971-80356]:WhileStatement[79971-80356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80005-80356]:Block[80005-80356]"
    }, {
      "left" : "int start = str.indexOf(open, pos);",
      "right" : "int start = str.indexOf(open, pos);",
      "info" : "VariableDeclarationStatement[80019-80054]:VariableDeclarationStatement[80019-80054]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[80067-80120]:IfStatement[80067-80120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80082-80120]:Block[80082-80120]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80100-80106]:BreakStatement[80100-80106]"
    }, {
      "left" : "start += openLen;",
      "right" : "start += openLen;",
      "info" : "ExpressionStatement[80133-80150]:ExpressionStatement[80133-80150]"
    }, {
      "left" : "int end = str.indexOf(close, start);",
      "right" : "int end = str.indexOf(close, start);",
      "info" : "VariableDeclarationStatement[80163-80199]:VariableDeclarationStatement[80163-80199]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[80212-80263]:IfStatement[80212-80263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80225-80263]:Block[80225-80263]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80243-80249]:BreakStatement[80243-80249]"
    }, {
      "left" : "list.add(str.substring(start, end));",
      "right" : "list.add(str.substring(start, end));",
      "info" : "ExpressionStatement[80276-80312]:ExpressionStatement[80276-80312]"
    }, {
      "left" : "pos = end + closeLen;",
      "right" : "pos = end + closeLen;",
      "info" : "ExpressionStatement[80325-80346]:ExpressionStatement[80325-80346]"
    }, {
      "left" : "if (list.isEmpty())",
      "right" : "if (list.isEmpty())",
      "info" : "IfStatement[80365-80421]:IfStatement[80365-80421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80385-80421]:Block[80385-80421]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[80399-80411]:ReturnStatement[80399-80411]"
    }, {
      "left" : "return list.toArray(new String [list.size()]);",
      "right" : "return list.toArray(new String [list.size()]);",
      "info" : "ReturnStatement[80431-80477]:ReturnStatement[80431-80477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81613-81657]:Block[81613-81657]"
    }, {
      "left" : "return split(str, null, -1);",
      "right" : "return split(str, null, -1);",
      "info" : "ReturnStatement[81623-81651]:ReturnStatement[81623-81651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82745-82807]:Block[82745-82807]"
    }, {
      "left" : "return splitWorker(str, separatorChar, false);",
      "right" : "return splitWorker(str, separatorChar, false);",
      "info" : "ReturnStatement[82755-82801]:ReturnStatement[82755-82801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84002-84069]:Block[84002-84069]"
    }, {
      "left" : "return splitWorker(str, separatorChars, -1, false);",
      "right" : "return splitWorker(str, separatorChars, -1, false);",
      "info" : "ReturnStatement[84012-84063]:ReturnStatement[84012-84063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85583-85651]:Block[85583-85651]"
    }, {
      "left" : "return splitWorker(str, separatorChars, max, false);",
      "right" : "return splitWorker(str, separatorChars, max, false);",
      "info" : "ReturnStatement[85593-85645]:ReturnStatement[85593-85645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86903-86984]:Block[86903-86984]"
    }, {
      "left" : "return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",
      "right" : "return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",
      "info" : "ReturnStatement[86913-86978]:ReturnStatement[86913-86978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88541-88620]:Block[88541-88620]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, max, false);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, max, false);",
      "info" : "ReturnStatement[88551-88614]:ReturnStatement[88551-88614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90091-90168]:Block[90091-90168]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, -1, true);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, -1, true);",
      "info" : "ReturnStatement[90101-90162]:ReturnStatement[90101-90162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91958-92036]:Block[91958-92036]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, max, true);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, max, true);",
      "info" : "ReturnStatement[91968-92030]:ReturnStatement[91968-92030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92968-95254]:Block[92968-95254]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[92978-93031]:IfStatement[92978-93031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92995-93031]:Block[92995-93031]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[93009-93021]:ReturnStatement[93009-93021]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[93041-93064]:VariableDeclarationStatement[93041-93064]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[93074-93149]:IfStatement[93074-93149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93088-93149]:Block[93088-93149]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[93102-93139]:ReturnStatement[93102-93139]"
    }, {
      "left" : "if ((separator == null) || (EMPTY.equals(separator)))",
      "right" : "if ((separator == null) || (EMPTY.equals(separator)))",
      "info" : "IfStatement[93159-93327]:IfStatement[93159-93327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93213-93327]:Block[93213-93327]"
    }, {
      "left" : "return splitWorker(str, null, max, preserveAllTokens);",
      "right" : "return splitWorker(str, null, max, preserveAllTokens);",
      "info" : "ReturnStatement[93263-93317]:ReturnStatement[93263-93317]"
    }, {
      "left" : "int separatorLength = separator.length();",
      "right" : "int separatorLength = separator.length();",
      "info" : "VariableDeclarationStatement[93337-93378]:VariableDeclarationStatement[93337-93378]"
    }, {
      "left" : "ArrayList<String> substrings = new ArrayList<String>();",
      "right" : "ArrayList<String> substrings = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[93388-93443]:VariableDeclarationStatement[93388-93443]"
    }, {
      "left" : "int numberOfSubstrings = 0;",
      "right" : "int numberOfSubstrings = 0;",
      "info" : "VariableDeclarationStatement[93452-93479]:VariableDeclarationStatement[93452-93479]"
    }, {
      "left" : "int beg = 0;",
      "right" : "int beg = 0;",
      "info" : "VariableDeclarationStatement[93488-93500]:VariableDeclarationStatement[93488-93500]"
    }, {
      "left" : "int end = 0;",
      "right" : "int end = 0;",
      "info" : "VariableDeclarationStatement[93509-93521]:VariableDeclarationStatement[93509-93521]"
    }, {
      "left" : "while (end < len)",
      "right" : "while (end < len)",
      "info" : "WhileStatement[93530-95181]:WhileStatement[93530-95181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93548-95181]:Block[93548-95181]"
    }, {
      "left" : "end = str.indexOf(separator, beg);",
      "right" : "end = str.indexOf(separator, beg);",
      "info" : "ExpressionStatement[93562-93596]:ExpressionStatement[93562-93596]"
    }, {
      "left" : "if (end > -1)",
      "right" : "if (end > -1)",
      "info" : "IfStatement[93610-95171]:IfStatement[93610-95171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93624-94986]:Block[93624-94986]"
    }, {
      "left" : "if (end > beg)",
      "right" : "if (end > beg)",
      "info" : "IfStatement[93642-94972]:IfStatement[93642-94972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93657-94425]:Block[93657-94425]"
    }, {
      "left" : "numberOfSubstrings += 1;",
      "right" : "numberOfSubstrings += 1;",
      "info" : "ExpressionStatement[93679-93703]:ExpressionStatement[93679-93703]"
    }, {
      "left" : "if (numberOfSubstrings == max)",
      "right" : "if (numberOfSubstrings == max)",
      "info" : "IfStatement[93725-94407]:IfStatement[93725-94407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93756-93874]:Block[93756-93874]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[93782-93792]:ExpressionStatement[93782-93792]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[93817-93852]:ExpressionStatement[93817-93852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93880-94407]:Block[93880-94407]"
    }, {
      "left" : "substrings.add(str.substring(beg, end));",
      "right" : "substrings.add(str.substring(beg, end));",
      "info" : "ExpressionStatement[94064-94104]:ExpressionStatement[94064-94104]"
    }, {
      "left" : "beg = end + separatorLength;",
      "right" : "beg = end + separatorLength;",
      "info" : "ExpressionStatement[94357-94385]:ExpressionStatement[94357-94385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94431-94972]:Block[94431-94972]"
    }, {
      "left" : "if (preserveAllTokens)",
      "right" : "if (preserveAllTokens)",
      "info" : "IfStatement[94540-94905]:IfStatement[94540-94905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94563-94905]:Block[94563-94905]"
    }, {
      "left" : "numberOfSubstrings += 1;",
      "right" : "numberOfSubstrings += 1;",
      "info" : "ExpressionStatement[94589-94613]:ExpressionStatement[94589-94613]"
    }, {
      "left" : "if (numberOfSubstrings == max)",
      "right" : "if (numberOfSubstrings == max)",
      "info" : "IfStatement[94638-94883]:IfStatement[94638-94883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94669-94799]:Block[94669-94799]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[94699-94709]:ExpressionStatement[94699-94709]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[94738-94773]:ExpressionStatement[94738-94773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94805-94883]:Block[94805-94883]"
    }, {
      "left" : "substrings.add(EMPTY);",
      "right" : "substrings.add(EMPTY);",
      "info" : "ExpressionStatement[94835-94857]:ExpressionStatement[94835-94857]"
    }, {
      "left" : "beg = end + separatorLength;",
      "right" : "beg = end + separatorLength;",
      "info" : "ExpressionStatement[94926-94954]:ExpressionStatement[94926-94954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94992-95171]:Block[94992-95171]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[95095-95130]:ExpressionStatement[95095-95130]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[95147-95157]:ExpressionStatement[95147-95157]"
    }, {
      "left" : "return substrings.toArray(new String[substrings.size()]);",
      "right" : "return substrings.toArray(new String[substrings.size()]);",
      "info" : "ReturnStatement[95191-95248]:ReturnStatement[95191-95248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96558-96614]:Block[96558-96614]"
    }, {
      "left" : "return splitWorker(str, null, -1, true);",
      "right" : "return splitWorker(str, null, -1, true);",
      "info" : "ReturnStatement[96568-96608]:ReturnStatement[96568-96608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98477-98538]:Block[98477-98538]"
    }, {
      "left" : "return splitWorker(str, separatorChar, true);",
      "right" : "return splitWorker(str, separatorChar, true);",
      "info" : "ReturnStatement[98487-98532]:ReturnStatement[98487-98532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99219-100193]:Block[99219-100193]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[99276-99329]:IfStatement[99276-99329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99293-99329]:Block[99293-99329]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[99307-99319]:ReturnStatement[99307-99319]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[99338-99361]:VariableDeclarationStatement[99338-99361]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[99370-99445]:IfStatement[99370-99445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99384-99445]:Block[99384-99445]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[99398-99435]:ReturnStatement[99398-99435]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[99454-99498]:VariableDeclarationStatement[99454-99498]"
    }, {
      "left" : "int i = 0, start = 0;",
      "right" : "int i = 0, start = 0;",
      "info" : "VariableDeclarationStatement[99507-99528]:VariableDeclarationStatement[99507-99528]"
    }, {
      "left" : "boolean match = false;",
      "right" : "boolean match = false;",
      "info" : "VariableDeclarationStatement[99537-99559]:VariableDeclarationStatement[99537-99559]"
    }, {
      "left" : "boolean lastMatch = false;",
      "right" : "boolean lastMatch = false;",
      "info" : "VariableDeclarationStatement[99568-99594]:VariableDeclarationStatement[99568-99594]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[99603-100019]:WhileStatement[99603-100019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99619-100019]:Block[99619-100019]"
    }, {
      "left" : "if (str.charAt(i) == separatorChar)",
      "right" : "if (str.charAt(i) == separatorChar)",
      "info" : "IfStatement[99633-99935]:IfStatement[99633-99935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99669-99935]:Block[99669-99935]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[99687-99866]:IfStatement[99687-99866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99719-99866]:Block[99719-99866]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[99741-99775]:ExpressionStatement[99741-99775]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[99796-99810]:ExpressionStatement[99796-99810]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[99831-99848]:ExpressionStatement[99831-99848]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[99883-99895]:ExpressionStatement[99883-99895]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[99912-99921]:ContinueStatement[99912-99921]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[99948-99966]:ExpressionStatement[99948-99966]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[99979-99992]:ExpressionStatement[99979-99992]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[100005-100009]:ExpressionStatement[100005-100009]"
    }, {
      "left" : "if (match || (preserveAllTokens && lastMatch))",
      "right" : "if (match || (preserveAllTokens && lastMatch))",
      "info" : "IfStatement[100028-100133]:IfStatement[100028-100133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100075-100133]:Block[100075-100133]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[100089-100123]:ExpressionStatement[100089-100123]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[100142-100187]:ReturnStatement[100142-100187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102159-102225]:Block[102159-102225]"
    }, {
      "left" : "return splitWorker(str, separatorChars, -1, true);",
      "right" : "return splitWorker(str, separatorChars, -1, true);",
      "info" : "ReturnStatement[102169-102219]:ReturnStatement[102169-102219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104310-104377]:Block[104310-104377]"
    }, {
      "left" : "return splitWorker(str, separatorChars, max, true);",
      "right" : "return splitWorker(str, separatorChars, max, true);",
      "info" : "ReturnStatement[104320-104371]:ReturnStatement[104320-104371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105191-108108]:Block[105191-108108]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[105371-105424]:IfStatement[105371-105424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105388-105424]:Block[105388-105424]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[105402-105414]:ReturnStatement[105402-105414]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[105433-105456]:VariableDeclarationStatement[105433-105456]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[105465-105540]:IfStatement[105465-105540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105479-105540]:Block[105479-105540]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[105493-105530]:ReturnStatement[105493-105530]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[105549-105593]:VariableDeclarationStatement[105549-105593]"
    }, {
      "left" : "int sizePlus1 = 1;",
      "right" : "int sizePlus1 = 1;",
      "info" : "VariableDeclarationStatement[105602-105620]:VariableDeclarationStatement[105602-105620]"
    }, {
      "left" : "int i = 0, start = 0;",
      "right" : "int i = 0, start = 0;",
      "info" : "VariableDeclarationStatement[105629-105650]:VariableDeclarationStatement[105629-105650]"
    }, {
      "left" : "boolean match = false;",
      "right" : "boolean match = false;",
      "info" : "VariableDeclarationStatement[105659-105681]:VariableDeclarationStatement[105659-105681]"
    }, {
      "left" : "boolean lastMatch = false;",
      "right" : "boolean lastMatch = false;",
      "info" : "VariableDeclarationStatement[105690-105716]:VariableDeclarationStatement[105690-105716]"
    }, {
      "left" : "if (separatorChars == null)",
      "right" : "if (separatorChars == null)",
      "info" : "IfStatement[105725-107934]:IfStatement[105725-107934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105753-106463]:Block[105753-106463]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[105818-106453]:WhileStatement[105818-106453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105834-106453]:Block[105834-106453]"
    }, {
      "left" : "if (Character.isWhitespace(str.charAt(i)))",
      "right" : "if (Character.isWhitespace(str.charAt(i)))",
      "info" : "IfStatement[105852-106353]:IfStatement[105852-106353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105895-106353]:Block[105895-106353]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[105917-106272]:IfStatement[105917-106272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105949-106272]:Block[105949-106272]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[105975-105992]:ExpressionStatement[105975-105992]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[106017-106152]:IfStatement[106017-106152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106041-106152]:Block[106041-106152]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[106071-106079]:ExpressionStatement[106071-106079]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[106108-106126]:ExpressionStatement[106108-106126]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[106177-106211]:ExpressionStatement[106177-106211]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[106236-106250]:ExpressionStatement[106236-106250]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[106293-106305]:ExpressionStatement[106293-106305]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[106326-106335]:ContinueStatement[106326-106335]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[106370-106388]:ExpressionStatement[106370-106388]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[106405-106418]:ExpressionStatement[106405-106418]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[106435-106439]:ExpressionStatement[106435-106439]"
    }, {
      "left" : "if (separatorChars.length() == 1)",
      "right" : "if (separatorChars.length() == 1)",
      "info" : "IfStatement[106469-107934]:IfStatement[106469-107934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106503-107235]:Block[106503-107235]"
    }, {
      "left" : "char sep = separatorChars.charAt(0);",
      "right" : "char sep = separatorChars.charAt(0);",
      "info" : "VariableDeclarationStatement[106558-106594]:VariableDeclarationStatement[106558-106594]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[106607-107225]:WhileStatement[106607-107225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106623-107225]:Block[106623-107225]"
    }, {
      "left" : "if (str.charAt(i) == sep)",
      "right" : "if (str.charAt(i) == sep)",
      "info" : "IfStatement[106641-107125]:IfStatement[106641-107125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106667-107125]:Block[106667-107125]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[106689-107044]:IfStatement[106689-107044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106721-107044]:Block[106721-107044]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[106747-106764]:ExpressionStatement[106747-106764]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[106789-106924]:IfStatement[106789-106924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106813-106924]:Block[106813-106924]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[106843-106851]:ExpressionStatement[106843-106851]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[106880-106898]:ExpressionStatement[106880-106898]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[106949-106983]:ExpressionStatement[106949-106983]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[107008-107022]:ExpressionStatement[107008-107022]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[107065-107077]:ExpressionStatement[107065-107077]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[107098-107107]:ContinueStatement[107098-107107]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[107142-107160]:ExpressionStatement[107142-107160]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[107177-107190]:ExpressionStatement[107177-107190]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[107207-107211]:ExpressionStatement[107207-107211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107241-107934]:Block[107241-107934]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[107284-107924]:WhileStatement[107284-107924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107300-107924]:Block[107300-107924]"
    }, {
      "left" : "if (separatorChars.indexOf(str.charAt(i)) >= 0)",
      "right" : "if (separatorChars.indexOf(str.charAt(i)) >= 0)",
      "info" : "IfStatement[107318-107824]:IfStatement[107318-107824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107366-107824]:Block[107366-107824]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[107388-107743]:IfStatement[107388-107743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107420-107743]:Block[107420-107743]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[107446-107463]:ExpressionStatement[107446-107463]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[107488-107623]:IfStatement[107488-107623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107512-107623]:Block[107512-107623]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[107542-107550]:ExpressionStatement[107542-107550]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[107579-107597]:ExpressionStatement[107579-107597]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[107648-107682]:ExpressionStatement[107648-107682]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[107707-107721]:ExpressionStatement[107707-107721]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[107764-107776]:ExpressionStatement[107764-107776]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[107797-107806]:ContinueStatement[107797-107806]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[107841-107859]:ExpressionStatement[107841-107859]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[107876-107889]:ExpressionStatement[107876-107889]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[107906-107910]:ExpressionStatement[107906-107910]"
    }, {
      "left" : "if (match || (preserveAllTokens && lastMatch))",
      "right" : "if (match || (preserveAllTokens && lastMatch))",
      "info" : "IfStatement[107943-108048]:IfStatement[107943-108048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107990-108048]:Block[107990-108048]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[108004-108038]:ExpressionStatement[108004-108038]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[108057-108102]:ReturnStatement[108057-108102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109260-109316]:Block[109260-109316]"
    }, {
      "left" : "return splitByCharacterType(str, false);",
      "right" : "return splitByCharacterType(str, false);",
      "info" : "ReturnStatement[109270-109310]:ReturnStatement[109270-109310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110884-110939]:Block[110884-110939]"
    }, {
      "left" : "return splitByCharacterType(str, true);",
      "right" : "return splitByCharacterType(str, true);",
      "info" : "ReturnStatement[110894-110933]:ReturnStatement[110894-110933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111866-113063]:Block[111866-113063]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[111876-111929]:IfStatement[111876-111929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111893-111929]:Block[111893-111929]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[111907-111919]:ReturnStatement[111907-111919]"
    }, {
      "left" : "if (str.length() == 0)",
      "right" : "if (str.length() == 0)",
      "info" : "IfStatement[111938-112022]:IfStatement[111938-112022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111961-112022]:Block[111961-112022]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[111975-112012]:ReturnStatement[111975-112012]"
    }, {
      "left" : "char[] c = str.toCharArray();",
      "right" : "char[] c = str.toCharArray();",
      "info" : "VariableDeclarationStatement[112031-112060]:VariableDeclarationStatement[112031-112060]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[112069-112113]:VariableDeclarationStatement[112069-112113]"
    }, {
      "left" : "int tokenStart = 0;",
      "right" : "int tokenStart = 0;",
      "info" : "VariableDeclarationStatement[112122-112141]:VariableDeclarationStatement[112122-112141]"
    }, {
      "left" : "int currentType = Character.getType(c[tokenStart]);",
      "right" : "int currentType = Character.getType(c[tokenStart]);",
      "info" : "VariableDeclarationStatement[112150-112201]:VariableDeclarationStatement[112150-112201]"
    }, {
      "left" : "for (int pos = tokenStart + 1; pos < c.length; pos++)",
      "right" : "for (int pos = tokenStart + 1; pos < c.length; pos++)",
      "info" : "ForStatement[112210-112935]:ForStatement[112210-112935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112264-112935]:Block[112264-112935]"
    }, {
      "left" : "int type = Character.getType(c[pos]);",
      "right" : "int type = Character.getType(c[pos]);",
      "info" : "VariableDeclarationStatement[112278-112315]:VariableDeclarationStatement[112278-112315]"
    }, {
      "left" : "if (type == currentType)",
      "right" : "if (type == currentType)",
      "info" : "IfStatement[112328-112394]:IfStatement[112328-112394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112353-112394]:Block[112353-112394]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[112371-112380]:ContinueStatement[112371-112380]"
    }, {
      "left" : "if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER)",
      "right" : "if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER)",
      "info" : "IfStatement[112407-112893]:IfStatement[112407-112893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112505-112767]:Block[112505-112767]"
    }, {
      "left" : "int newTokenStart = pos - 1;",
      "right" : "int newTokenStart = pos - 1;",
      "info" : "VariableDeclarationStatement[112523-112551]:VariableDeclarationStatement[112523-112551]"
    }, {
      "left" : "if (newTokenStart != tokenStart)",
      "right" : "if (newTokenStart != tokenStart)",
      "info" : "IfStatement[112568-112753]:IfStatement[112568-112753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112601-112753]:Block[112601-112753]"
    }, {
      "left" : "list.add(new String(c, tokenStart, newTokenStart - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, newTokenStart - tokenStart));",
      "info" : "ExpressionStatement[112623-112687]:ExpressionStatement[112623-112687]"
    }, {
      "left" : "tokenStart = newTokenStart;",
      "right" : "tokenStart = newTokenStart;",
      "info" : "ExpressionStatement[112708-112735]:ExpressionStatement[112708-112735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112773-112893]:Block[112773-112893]"
    }, {
      "left" : "list.add(new String(c, tokenStart, pos - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, pos - tokenStart));",
      "info" : "ExpressionStatement[112791-112845]:ExpressionStatement[112791-112845]"
    }, {
      "left" : "tokenStart = pos;",
      "right" : "tokenStart = pos;",
      "info" : "ExpressionStatement[112862-112879]:ExpressionStatement[112862-112879]"
    }, {
      "left" : "currentType = type;",
      "right" : "currentType = type;",
      "info" : "ExpressionStatement[112906-112925]:ExpressionStatement[112906-112925]"
    }, {
      "left" : "list.add(new String(c, tokenStart, c.length - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, c.length - tokenStart));",
      "info" : "ExpressionStatement[112944-113003]:ExpressionStatement[112944-113003]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[113012-113057]:ReturnStatement[113012-113057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113943-113984]:Block[113943-113984]"
    }, {
      "left" : "return join(array, null);",
      "right" : "return join(array, null);",
      "info" : "ReturnStatement[113953-113978]:ReturnStatement[113953-113978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114936-115064]:Block[114936-115064]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[114946-115001]:IfStatement[114946-115001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114965-115001]:Block[114965-115001]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[114979-114991]:ReturnStatement[114979-114991]"
    }, {
      "left" : "return join(array, separator, 0, array.length);",
      "right" : "return join(array, separator, 0, array.length);",
      "info" : "ReturnStatement[115011-115058]:ReturnStatement[115011-115058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116322-116931]:Block[116322-116931]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[116332-116387]:IfStatement[116332-116387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116351-116387]:Block[116351-116387]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[116365-116377]:ReturnStatement[116365-116377]"
    }, {
      "left" : "int bufSize = (endIndex - startIndex);",
      "right" : "int bufSize = (endIndex - startIndex);",
      "info" : "VariableDeclarationStatement[116396-116434]:VariableDeclarationStatement[116396-116434]"
    }, {
      "left" : "if (bufSize <= 0)",
      "right" : "if (bufSize <= 0)",
      "info" : "IfStatement[116443-116498]:IfStatement[116443-116498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116461-116498]:Block[116461-116498]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[116475-116488]:ReturnStatement[116475-116488]"
    }, {
      "left" : "bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);",
      "right" : "bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);",
      "info" : "ExpressionStatement[116508-116598]:ExpressionStatement[116508-116598]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(bufSize);",
      "right" : "StringBuilder buf = new StringBuilder(bufSize);",
      "info" : "VariableDeclarationStatement[116607-116654]:VariableDeclarationStatement[116607-116654]"
    }, {
      "left" : "for (int i = startIndex; i < endIndex; i++)",
      "right" : "for (int i = startIndex; i < endIndex; i++)",
      "info" : "ForStatement[116664-116894]:ForStatement[116664-116894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116708-116894]:Block[116708-116894]"
    }, {
      "left" : "if (i > startIndex)",
      "right" : "if (i > startIndex)",
      "info" : "IfStatement[116722-116796]:IfStatement[116722-116796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116742-116796]:Block[116742-116796]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[116760-116782]:ExpressionStatement[116760-116782]"
    }, {
      "left" : "if (array[i] != null)",
      "right" : "if (array[i] != null)",
      "info" : "IfStatement[116809-116884]:IfStatement[116809-116884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116831-116884]:Block[116831-116884]"
    }, {
      "left" : "buf.append(array[i]);",
      "right" : "buf.append(array[i]);",
      "info" : "ExpressionStatement[116849-116870]:ExpressionStatement[116849-116870]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[116903-116925]:ReturnStatement[116903-116925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118026-118153]:Block[118026-118153]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[118036-118091]:IfStatement[118036-118091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118055-118091]:Block[118055-118091]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[118069-118081]:ReturnStatement[118069-118081]"
    }, {
      "left" : "return join(array, separator, 0, array.length);",
      "right" : "return join(array, separator, 0, array.length);",
      "info" : "ReturnStatement[118100-118147]:ReturnStatement[118100-118147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119553-120447]:Block[119553-120447]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[119563-119618]:IfStatement[119563-119618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119582-119618]:Block[119582-119618]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[119596-119608]:ReturnStatement[119596-119608]"
    }, {
      "left" : "if (separator == null)",
      "right" : "if (separator == null)",
      "info" : "IfStatement[119627-119692]:IfStatement[119627-119692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119650-119692]:Block[119650-119692]"
    }, {
      "left" : "separator = EMPTY;",
      "right" : "separator = EMPTY;",
      "info" : "ExpressionStatement[119664-119682]:ExpressionStatement[119664-119682]"
    }, {
      "left" : "int bufSize = (endIndex - startIndex);",
      "right" : "int bufSize = (endIndex - startIndex);",
      "info" : "VariableDeclarationStatement[119870-119908]:VariableDeclarationStatement[119870-119908]"
    }, {
      "left" : "if (bufSize <= 0)",
      "right" : "if (bufSize <= 0)",
      "info" : "IfStatement[119917-119972]:IfStatement[119917-119972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119935-119972]:Block[119935-119972]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[119949-119962]:ReturnStatement[119949-119962]"
    }, {
      "left" : "bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n                        + separator.length());",
      "right" : "bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n                        + separator.length());",
      "info" : "ExpressionStatement[119982-120113]:ExpressionStatement[119982-120113]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(bufSize);",
      "right" : "StringBuilder buf = new StringBuilder(bufSize);",
      "info" : "VariableDeclarationStatement[120123-120170]:VariableDeclarationStatement[120123-120170]"
    }, {
      "left" : "for (int i = startIndex; i < endIndex; i++)",
      "right" : "for (int i = startIndex; i < endIndex; i++)",
      "info" : "ForStatement[120180-120410]:ForStatement[120180-120410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120224-120410]:Block[120224-120410]"
    }, {
      "left" : "if (i > startIndex)",
      "right" : "if (i > startIndex)",
      "info" : "IfStatement[120238-120312]:IfStatement[120238-120312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120258-120312]:Block[120258-120312]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[120276-120298]:ExpressionStatement[120276-120298]"
    }, {
      "left" : "if (array[i] != null)",
      "right" : "if (array[i] != null)",
      "info" : "IfStatement[120325-120400]:IfStatement[120325-120400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120347-120400]:Block[120347-120400]"
    }, {
      "left" : "buf.append(array[i]);",
      "right" : "buf.append(array[i]);",
      "info" : "ExpressionStatement[120365-120386]:ExpressionStatement[120365-120386]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[120419-120441]:ReturnStatement[120419-120441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121148-121930]:Block[121148-121930]"
    }, {
      "left" : "if (iterator == null)",
      "right" : "if (iterator == null)",
      "info" : "IfStatement[121230-121288]:IfStatement[121230-121288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121252-121288]:Block[121252-121288]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[121266-121278]:ReturnStatement[121266-121278]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[121297-121359]:IfStatement[121297-121359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121322-121359]:Block[121322-121359]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[121336-121349]:ReturnStatement[121336-121349]"
    }, {
      "left" : "Object first = iterator.next();",
      "right" : "Object first = iterator.next();",
      "info" : "VariableDeclarationStatement[121368-121399]:VariableDeclarationStatement[121368-121399]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[121408-121492]:IfStatement[121408-121492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121433-121492]:Block[121433-121492]"
    }, {
      "left" : "return ObjectUtils.toString(first);",
      "right" : "return ObjectUtils.toString(first);",
      "info" : "ReturnStatement[121447-121482]:ReturnStatement[121447-121482]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(256);",
      "right" : "StringBuilder buf = new StringBuilder(256);",
      "info" : "VariableDeclarationStatement[121534-121577]:VariableDeclarationStatement[121534-121577]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[121628-121689]:IfStatement[121628-121689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121647-121689]:Block[121647-121689]"
    }, {
      "left" : "buf.append(first);",
      "right" : "buf.append(first);",
      "info" : "ExpressionStatement[121661-121679]:ExpressionStatement[121661-121679]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[121699-121892]:WhileStatement[121699-121892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121726-121892]:Block[121726-121892]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[121740-121762]:ExpressionStatement[121740-121762]"
    }, {
      "left" : "Object obj = iterator.next();",
      "right" : "Object obj = iterator.next();",
      "info" : "VariableDeclarationStatement[121775-121804]:VariableDeclarationStatement[121775-121804]"
    }, {
      "left" : "if (obj != null)",
      "right" : "if (obj != null)",
      "info" : "IfStatement[121817-121882]:IfStatement[121817-121882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121834-121882]:Block[121834-121882]"
    }, {
      "left" : "buf.append(obj);",
      "right" : "buf.append(obj);",
      "info" : "ExpressionStatement[121852-121868]:ExpressionStatement[121852-121868]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[121902-121924]:ReturnStatement[121902-121924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122619-123455]:Block[122619-123455]"
    }, {
      "left" : "if (iterator == null)",
      "right" : "if (iterator == null)",
      "info" : "IfStatement[122701-122759]:IfStatement[122701-122759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122723-122759]:Block[122723-122759]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[122737-122749]:ReturnStatement[122737-122749]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[122768-122830]:IfStatement[122768-122830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122793-122830]:Block[122793-122830]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[122807-122820]:ReturnStatement[122807-122820]"
    }, {
      "left" : "Object first = iterator.next();",
      "right" : "Object first = iterator.next();",
      "info" : "VariableDeclarationStatement[122839-122870]:VariableDeclarationStatement[122839-122870]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[122879-122963]:IfStatement[122879-122963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122904-122963]:Block[122904-122963]"
    }, {
      "left" : "return ObjectUtils.toString(first);",
      "right" : "return ObjectUtils.toString(first);",
      "info" : "ReturnStatement[122918-122953]:ReturnStatement[122918-122953]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(256);",
      "right" : "StringBuilder buf = new StringBuilder(256);",
      "info" : "VariableDeclarationStatement[123005-123048]:VariableDeclarationStatement[123005-123048]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[123099-123160]:IfStatement[123099-123160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123118-123160]:Block[123118-123160]"
    }, {
      "left" : "buf.append(first);",
      "right" : "buf.append(first);",
      "info" : "ExpressionStatement[123132-123150]:ExpressionStatement[123132-123150]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[123170-123418]:WhileStatement[123170-123418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123197-123418]:Block[123197-123418]"
    }, {
      "left" : "if (separator != null)",
      "right" : "if (separator != null)",
      "info" : "IfStatement[123211-123288]:IfStatement[123211-123288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123234-123288]:Block[123234-123288]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[123252-123274]:ExpressionStatement[123252-123274]"
    }, {
      "left" : "Object obj = iterator.next();",
      "right" : "Object obj = iterator.next();",
      "info" : "VariableDeclarationStatement[123301-123330]:VariableDeclarationStatement[123301-123330]"
    }, {
      "left" : "if (obj != null)",
      "right" : "if (obj != null)",
      "info" : "IfStatement[123343-123408]:IfStatement[123343-123408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123360-123408]:Block[123360-123408]"
    }, {
      "left" : "buf.append(obj);",
      "right" : "buf.append(obj);",
      "info" : "ExpressionStatement[123378-123394]:ExpressionStatement[123378-123394]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[123427-123449]:ReturnStatement[123427-123449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124167-124294]:Block[124167-124294]"
    }, {
      "left" : "if (iterable == null)",
      "right" : "if (iterable == null)",
      "info" : "IfStatement[124177-124235]:IfStatement[124177-124235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124199-124235]:Block[124199-124235]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[124213-124225]:ReturnStatement[124213-124225]"
    }, {
      "left" : "return join(iterable.iterator(), separator);",
      "right" : "return join(iterable.iterator(), separator);",
      "info" : "ReturnStatement[124244-124288]:ReturnStatement[124244-124288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125012-125139]:Block[125012-125139]"
    }, {
      "left" : "if (iterable == null)",
      "right" : "if (iterable == null)",
      "info" : "IfStatement[125022-125080]:IfStatement[125022-125080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125044-125080]:Block[125044-125080]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[125058-125070]:ReturnStatement[125058-125070]"
    }, {
      "left" : "return join(iterable.iterator(), separator);",
      "right" : "return join(iterable.iterator(), separator);",
      "info" : "ReturnStatement[125089-125133]:ReturnStatement[125089-125133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125838-126266]:Block[125838-126266]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[125848-125901]:IfStatement[125848-125901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125866-125901]:Block[125866-125901]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[125880-125891]:ReturnStatement[125880-125891]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[125910-125932]:VariableDeclarationStatement[125910-125932]"
    }, {
      "left" : "char[] chs = new char[sz];",
      "right" : "char[] chs = new char[sz];",
      "info" : "VariableDeclarationStatement[125941-125967]:VariableDeclarationStatement[125941-125967]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[125976-125990]:VariableDeclarationStatement[125976-125990]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[125999-126157]:ForStatement[125999-126157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126028-126157]:Block[126028-126157]"
    }, {
      "left" : "if (!Character.isWhitespace(str.charAt(i)))",
      "right" : "if (!Character.isWhitespace(str.charAt(i)))",
      "info" : "IfStatement[126042-126147]:IfStatement[126042-126147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126086-126147]:Block[126086-126147]"
    }, {
      "left" : "chs[count++] = str.charAt(i);",
      "right" : "chs[count++] = str.charAt(i);",
      "info" : "ExpressionStatement[126104-126133]:ExpressionStatement[126104-126133]"
    }, {
      "left" : "if (count == sz)",
      "right" : "if (count == sz)",
      "info" : "IfStatement[126166-126218]:IfStatement[126166-126218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126183-126218]:Block[126183-126218]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[126197-126208]:ReturnStatement[126197-126208]"
    }, {
      "left" : "return new String(chs, 0, count);",
      "right" : "return new String(chs, 0, count);",
      "info" : "ReturnStatement[126227-126260]:ReturnStatement[126227-126260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127521-127727]:Block[127521-127727]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[127531-127603]:IfStatement[127531-127603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127568-127603]:Block[127568-127603]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[127582-127593]:ReturnStatement[127582-127593]"
    }, {
      "left" : "if (str.startsWith(remove))",
      "right" : "if (str.startsWith(remove))",
      "info" : "IfStatement[127612-127701]:IfStatement[127612-127701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127639-127701]:Block[127639-127701]"
    }, {
      "left" : "return str.substring(remove.length());",
      "right" : "return str.substring(remove.length());",
      "info" : "ReturnStatement[127653-127691]:ReturnStatement[127653-127691]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[127710-127721]:ReturnStatement[127710-127721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129088-129306]:Block[129088-129306]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[129098-129170]:IfStatement[129098-129170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129135-129170]:Block[129135-129170]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[129149-129160]:ReturnStatement[129149-129160]"
    }, {
      "left" : "if (startsWithIgnoreCase(str, remove))",
      "right" : "if (startsWithIgnoreCase(str, remove))",
      "info" : "IfStatement[129179-129280]:IfStatement[129179-129280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129218-129280]:Block[129218-129280]"
    }, {
      "left" : "return str.substring(remove.length());",
      "right" : "return str.substring(remove.length());",
      "info" : "ReturnStatement[129232-129270]:ReturnStatement[129232-129270]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[129289-129300]:ReturnStatement[129289-129300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130452-130675]:Block[130452-130675]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[130462-130534]:IfStatement[130462-130534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130499-130534]:Block[130499-130534]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[130513-130524]:ReturnStatement[130513-130524]"
    }, {
      "left" : "if (str.endsWith(remove))",
      "right" : "if (str.endsWith(remove))",
      "info" : "IfStatement[130543-130649]:IfStatement[130543-130649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130569-130649]:Block[130569-130649]"
    }, {
      "left" : "return str.substring(0, str.length() - remove.length());",
      "right" : "return str.substring(0, str.length() - remove.length());",
      "info" : "ReturnStatement[130583-130639]:ReturnStatement[130583-130639]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[130658-130669]:ReturnStatement[130658-130669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131866-132100]:Block[131866-132100]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[131876-131948]:IfStatement[131876-131948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131913-131948]:Block[131913-131948]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[131927-131938]:ReturnStatement[131927-131938]"
    }, {
      "left" : "if (endsWithIgnoreCase(str, remove))",
      "right" : "if (endsWithIgnoreCase(str, remove))",
      "info" : "IfStatement[131957-132074]:IfStatement[131957-132074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131994-132074]:Block[131994-132074]"
    }, {
      "left" : "return str.substring(0, str.length() - remove.length());",
      "right" : "return str.substring(0, str.length() - remove.length());",
      "info" : "ReturnStatement[132008-132064]:ReturnStatement[132008-132064]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[132083-132094]:ReturnStatement[132083-132094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133140-133276]:Block[133140-133276]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[133150-133222]:IfStatement[133150-133222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133187-133222]:Block[133187-133222]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[133201-133212]:ReturnStatement[133201-133212]"
    }, {
      "left" : "return replace(str, remove, EMPTY, -1);",
      "right" : "return replace(str, remove, EMPTY, -1);",
      "info" : "ReturnStatement[133231-133270]:ReturnStatement[133231-133270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134078-134433]:Block[134078-134433]"
    }, {
      "left" : "if (isEmpty(str) || str.indexOf(remove) == -1)",
      "right" : "if (isEmpty(str) || str.indexOf(remove) == -1)",
      "info" : "IfStatement[134088-134170]:IfStatement[134088-134170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134135-134170]:Block[134135-134170]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[134149-134160]:ReturnStatement[134149-134160]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[134179-134212]:VariableDeclarationStatement[134179-134212]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[134221-134233]:VariableDeclarationStatement[134221-134233]"
    }, {
      "left" : "for (int i = 0; i < chars.length; i++)",
      "right" : "for (int i = 0; i < chars.length; i++)",
      "info" : "ForStatement[134242-134385]:ForStatement[134242-134385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134281-134385]:Block[134281-134385]"
    }, {
      "left" : "if (chars[i] != remove)",
      "right" : "if (chars[i] != remove)",
      "info" : "IfStatement[134295-134375]:IfStatement[134295-134375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134319-134375]:Block[134319-134375]"
    }, {
      "left" : "chars[pos++] = chars[i];",
      "right" : "chars[pos++] = chars[i];",
      "info" : "ExpressionStatement[134337-134361]:ExpressionStatement[134337-134361]"
    }, {
      "left" : "return new String(chars, 0, pos);",
      "right" : "return new String(chars, 0, pos);",
      "info" : "ReturnStatement[134394-134427]:ReturnStatement[134394-134427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135688-135755]:Block[135688-135755]"
    }, {
      "left" : "return replace(text, searchString, replacement, 1);",
      "right" : "return replace(text, searchString, replacement, 1);",
      "info" : "ReturnStatement[135698-135749]:ReturnStatement[135698-135749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136873-136941]:Block[136873-136941]"
    }, {
      "left" : "return replace(text, searchString, replacement, -1);",
      "right" : "return replace(text, searchString, replacement, -1);",
      "info" : "ReturnStatement[136883-136935]:ReturnStatement[136883-136935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138411-139309]:Block[138411-139309]"
    }, {
      "left" : "if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0)",
      "right" : "if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0)",
      "info" : "IfStatement[138421-138536]:IfStatement[138421-138536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138500-138536]:Block[138500-138536]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[138514-138526]:ReturnStatement[138514-138526]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[138545-138559]:VariableDeclarationStatement[138545-138559]"
    }, {
      "left" : "int end = text.indexOf(searchString, start);",
      "right" : "int end = text.indexOf(searchString, start);",
      "info" : "VariableDeclarationStatement[138568-138612]:VariableDeclarationStatement[138568-138612]"
    }, {
      "left" : "if (end == -1)",
      "right" : "if (end == -1)",
      "info" : "IfStatement[138621-138672]:IfStatement[138621-138672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138636-138672]:Block[138636-138672]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[138650-138662]:ReturnStatement[138650-138662]"
    }, {
      "left" : "int replLength = searchString.length();",
      "right" : "int replLength = searchString.length();",
      "info" : "VariableDeclarationStatement[138681-138720]:VariableDeclarationStatement[138681-138720]"
    }, {
      "left" : "int increase = replacement.length() - replLength;",
      "right" : "int increase = replacement.length() - replLength;",
      "info" : "VariableDeclarationStatement[138729-138778]:VariableDeclarationStatement[138729-138778]"
    }, {
      "left" : "increase = (increase < 0 ? 0 : increase);",
      "right" : "increase = (increase < 0 ? 0 : increase);",
      "info" : "ExpressionStatement[138787-138828]:ExpressionStatement[138787-138828]"
    }, {
      "left" : "increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));",
      "right" : "increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));",
      "info" : "ExpressionStatement[138837-138888]:ExpressionStatement[138837-138888]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "right" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "info" : "VariableDeclarationStatement[138897-138961]:VariableDeclarationStatement[138897-138961]"
    }, {
      "left" : "while (end != -1)",
      "right" : "while (end != -1)",
      "info" : "WhileStatement[138970-139229]:WhileStatement[138970-139229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138988-139229]:Block[138988-139229]"
    }, {
      "left" : "buf.append(text.substring(start, end)).append(replacement);",
      "right" : "buf.append(text.substring(start, end)).append(replacement);",
      "info" : "ExpressionStatement[139002-139061]:ExpressionStatement[139002-139061]"
    }, {
      "left" : "start = end + replLength;",
      "right" : "start = end + replLength;",
      "info" : "ExpressionStatement[139074-139099]:ExpressionStatement[139074-139099]"
    }, {
      "left" : "if (--max == 0)",
      "right" : "if (--max == 0)",
      "info" : "IfStatement[139112-139166]:IfStatement[139112-139166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139128-139166]:Block[139128-139166]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[139146-139152]:BreakStatement[139146-139152]"
    }, {
      "left" : "end = text.indexOf(searchString, start);",
      "right" : "end = text.indexOf(searchString, start);",
      "info" : "ExpressionStatement[139179-139219]:ExpressionStatement[139179-139219]"
    }, {
      "left" : "buf.append(text.substring(start));",
      "right" : "buf.append(text.substring(start));",
      "info" : "ExpressionStatement[139238-139272]:ExpressionStatement[139238-139272]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[139281-139303]:ReturnStatement[139281-139303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141181-141261]:Block[141181-141261]"
    }, {
      "left" : "return replaceEach(text, searchList, replacementList, false, 0);",
      "right" : "return replaceEach(text, searchList, replacementList, false, 0);",
      "info" : "ReturnStatement[141191-141255]:ReturnStatement[141191-141255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143665-143944]:Block[143665-143944]"
    }, {
      "left" : "int timeToLive = searchList == null ? 0 : searchList.length;",
      "right" : "int timeToLive = searchList == null ? 0 : searchList.length;",
      "info" : "VariableDeclarationStatement[143797-143857]:VariableDeclarationStatement[143797-143857]"
    }, {
      "left" : "return replaceEach(text, searchList, replacementList, true, timeToLive);",
      "right" : "return replaceEach(text, searchList, replacementList, true, timeToLive);",
      "info" : "ReturnStatement[143866-143938]:ReturnStatement[143866-143938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146484-151008]:Block[146484-151119]"
    }, {
      "left" : "if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0)",
      "right" : "if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0)",
      "info" : "IfStatement[146677-146881]:IfStatement[146677-146881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146845-146881]:Block[146845-146881]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[146859-146871]:ReturnStatement[146859-146871]"
    }, {
      "left" : "if (timeToLive < 0)",
      "right" : "if (timeToLive < 0)",
      "info" : "IfStatement[146945-147081]:IfStatement[146945-147081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146965-147081]:Block[146965-147081]"
    }, {
      "left" : "throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);",
      "right" : "throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);",
      "info" : "ThrowStatement[146979-147071]:ThrowStatement[146979-147071]"
    }, {
      "left" : "int searchLength = searchList.length;",
      "right" : "int searchLength = searchList.length;",
      "info" : "VariableDeclarationStatement[147091-147128]:VariableDeclarationStatement[147091-147128]"
    }, {
      "left" : "int replacementLength = replacementList.length;",
      "right" : "int replacementLength = replacementList.length;",
      "info" : "VariableDeclarationStatement[147137-147184]:VariableDeclarationStatement[147137-147184]"
    }, {
      "left" : "if (searchLength != replacementLength)",
      "right" : "if (searchLength != replacementLength)",
      "info" : "IfStatement[147254-147494]:IfStatement[147254-147494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147293-147494]:Block[147293-147494]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);",
      "right" : "throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);",
      "info" : "ThrowStatement[147307-147484]:ThrowStatement[147307-147484]"
    }, {
      "left" : "boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];",
      "right" : "boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];",
      "info" : "VariableDeclarationStatement[147554-147618]:VariableDeclarationStatement[147554-147618]"
    }, {
      "left" : "int textIndex = -1;",
      "right" : "int textIndex = -1;",
      "info" : "VariableDeclarationStatement[147679-147698]:VariableDeclarationStatement[147679-147698]"
    }, {
      "left" : "int replaceIndex = -1;",
      "right" : "int replaceIndex = -1;",
      "info" : "VariableDeclarationStatement[147707-147729]:VariableDeclarationStatement[147707-147729]"
    }, {
      "left" : "int tempIndex = -1;",
      "right" : "int tempIndex = -1;",
      "info" : "VariableDeclarationStatement[147738-147757]:VariableDeclarationStatement[147738-147757]"
    }, {
      "left" : "for (int i = 0; i < searchLength; i++)",
      "right" : "for (int i = 0; i < searchLength; i++)",
      "info" : "ForStatement[147889-148540]:ForStatement[147889-148540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147928-148540]:Block[147928-148540]"
    }, {
      "left" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null)",
      "right" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null)",
      "info" : "IfStatement[147942-148133]:IfStatement[147942-148133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148092-148133]:Block[148092-148133]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[148110-148119]:ContinueStatement[148110-148119]"
    }, {
      "left" : "tempIndex = text.indexOf(searchList[i]);",
      "right" : "tempIndex = text.indexOf(searchList[i]);",
      "info" : "ExpressionStatement[148146-148186]:ExpressionStatement[148146-148186]"
    }, {
      "left" : "if (tempIndex == -1)",
      "right" : "if (tempIndex == -1)",
      "info" : "IfStatement[148257-148530]:IfStatement[148257-148530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148278-148346]:Block[148278-148346]"
    }, {
      "left" : "noMoreMatchesForReplIndex[i] = true;",
      "right" : "noMoreMatchesForReplIndex[i] = true;",
      "info" : "ExpressionStatement[148296-148332]:ExpressionStatement[148296-148332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148352-148530]:Block[148352-148530]"
    }, {
      "left" : "if (textIndex == -1 || tempIndex < textIndex)",
      "right" : "if (textIndex == -1 || tempIndex < textIndex)",
      "info" : "IfStatement[148370-148516]:IfStatement[148370-148516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148416-148516]:Block[148416-148516]"
    }, {
      "left" : "textIndex = tempIndex;",
      "right" : "textIndex = tempIndex;",
      "info" : "ExpressionStatement[148438-148460]:ExpressionStatement[148438-148460]"
    }, {
      "left" : "replaceIndex = i;",
      "right" : "replaceIndex = i;",
      "info" : "ExpressionStatement[148481-148498]:ExpressionStatement[148481-148498]"
    }, {
      "left" : "if (textIndex == -1)",
      "right" : "if (textIndex == -1)",
      "info" : "IfStatement[148638-148695]:IfStatement[148638-148695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148659-148695]:Block[148659-148695]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[148673-148685]:ReturnStatement[148673-148685]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[148705-148719]:VariableDeclarationStatement[148705-148719]"
    }, {
      "left" : "int increase = 0;",
      "right" : "int increase = 0;",
      "info" : "VariableDeclarationStatement[148840-148857]:VariableDeclarationStatement[148840-148857]"
    }, {
      "left" : "for (int i = 0; i < searchList.length; i++)",
      "right" : "for (int i = 0; i < searchList.length; i++)",
      "info" : "ForStatement[148975-149216]:ForStatement[148975-149327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149019-149216]:Block[149019-149327]"
    }, {
      "left" : "int greater = replacementList[i].length() - searchList[i].length();",
      "right" : "int greater = replacementList[i].length() - searchList[i].length();",
      "info" : "VariableDeclarationStatement[149033-149100]:VariableDeclarationStatement[149144-149211]"
    }, {
      "left" : "if (greater > 0)",
      "right" : "if (greater > 0)",
      "info" : "IfStatement[149113-149206]:IfStatement[149224-149317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149130-149206]:Block[149241-149317]"
    }, {
      "left" : "increase += 3 * greater;",
      "right" : "increase += 3 * greater;",
      "info" : "ExpressionStatement[149148-149172]:ExpressionStatement[149259-149283]"
    }, {
      "left" : "increase = Math.min(increase, text.length() / 5);",
      "right" : "increase = Math.min(increase, text.length() / 5);",
      "info" : "ExpressionStatement[149294-149343]:ExpressionStatement[149405-149454]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "right" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "info" : "VariableDeclarationStatement[149353-149417]:VariableDeclarationStatement[149464-149528]"
    }, {
      "left" : "while (textIndex != -1)",
      "right" : "while (textIndex != -1)",
      "info" : "WhileStatement[149427-150671]:WhileStatement[149538-150782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149451-150671]:Block[149562-150782]"
    }, {
      "left" : "for (int i = start; i < textIndex; i++)",
      "right" : "for (int i = start; i < textIndex; i++)",
      "info" : "ForStatement[149466-149565]:ForStatement[149577-149676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149506-149565]:Block[149617-149676]"
    }, {
      "left" : "buf.append(text.charAt(i));",
      "right" : "buf.append(text.charAt(i));",
      "info" : "ExpressionStatement[149524-149551]:ExpressionStatement[149635-149662]"
    }, {
      "left" : "buf.append(replacementList[replaceIndex]);",
      "right" : "buf.append(replacementList[replaceIndex]);",
      "info" : "ExpressionStatement[149578-149620]:ExpressionStatement[149689-149731]"
    }, {
      "left" : "start = textIndex + searchList[replaceIndex].length();",
      "right" : "start = textIndex + searchList[replaceIndex].length();",
      "info" : "ExpressionStatement[149634-149688]:ExpressionStatement[149745-149799]"
    }, {
      "left" : "textIndex = -1;",
      "right" : "textIndex = -1;",
      "info" : "ExpressionStatement[149702-149717]:ExpressionStatement[149813-149828]"
    }, {
      "left" : "replaceIndex = -1;",
      "right" : "replaceIndex = -1;",
      "info" : "ExpressionStatement[149730-149748]:ExpressionStatement[149841-149859]"
    }, {
      "left" : "tempIndex = -1;",
      "right" : "tempIndex = -1;",
      "info" : "ExpressionStatement[149761-149776]:ExpressionStatement[149872-149887]"
    }, {
      "left" : "for (int i = 0; i < searchLength; i++)",
      "right" : "for (int i = 0; i < searchLength; i++)",
      "info" : "ForStatement[149890-150612]:ForStatement[150001-150723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149929-150612]:Block[150040-150723]"
    }, {
      "left" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null)",
      "right" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null)",
      "info" : "IfStatement[149947-150154]:IfStatement[150058-150265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150105-150154]:Block[150216-150265]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[150127-150136]:ContinueStatement[150238-150247]"
    }, {
      "left" : "tempIndex = text.indexOf(searchList[i], start);",
      "right" : "tempIndex = text.indexOf(searchList[i], start);",
      "info" : "ExpressionStatement[150171-150218]:ExpressionStatement[150282-150329]"
    }, {
      "left" : "if (tempIndex == -1)",
      "right" : "if (tempIndex == -1)",
      "info" : "IfStatement[150297-150598]:IfStatement[150408-150709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150318-150394]:Block[150429-150505]"
    }, {
      "left" : "noMoreMatchesForReplIndex[i] = true;",
      "right" : "noMoreMatchesForReplIndex[i] = true;",
      "info" : "ExpressionStatement[150340-150376]:ExpressionStatement[150451-150487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150400-150598]:Block[150511-150709]"
    }, {
      "left" : "if (textIndex == -1 || tempIndex < textIndex)",
      "right" : "if (textIndex == -1 || tempIndex < textIndex)",
      "info" : "IfStatement[150422-150580]:IfStatement[150533-150691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150468-150580]:Block[150579-150691]"
    }, {
      "left" : "textIndex = tempIndex;",
      "right" : "textIndex = tempIndex;",
      "info" : "ExpressionStatement[150494-150516]:ExpressionStatement[150605-150627]"
    }, {
      "left" : "replaceIndex = i;",
      "right" : "replaceIndex = i;",
      "info" : "ExpressionStatement[150541-150558]:ExpressionStatement[150652-150669]"
    }, {
      "left" : "int textLength = text.length();",
      "right" : "int textLength = text.length();",
      "info" : "VariableDeclarationStatement[150680-150711]:VariableDeclarationStatement[150791-150822]"
    }, {
      "left" : "for (int i = start; i < textLength; i++)",
      "right" : "for (int i = start; i < textLength; i++)",
      "info" : "ForStatement[150720-150812]:ForStatement[150831-150923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150761-150812]:Block[150872-150923]"
    }, {
      "left" : "buf.append(text.charAt(i));",
      "right" : "buf.append(text.charAt(i));",
      "info" : "ExpressionStatement[150775-150802]:ExpressionStatement[150886-150913]"
    }, {
      "left" : "String result = buf.toString();",
      "right" : "String result = buf.toString();",
      "info" : "VariableDeclarationStatement[150821-150852]:VariableDeclarationStatement[150932-150963]"
    }, {
      "left" : "if (!repeat)",
      "right" : "if (!repeat)",
      "info" : "IfStatement[150861-150912]:IfStatement[150972-151023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150874-150912]:Block[150985-151023]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[150888-150902]:ReturnStatement[150999-151013]"
    }, {
      "left" : "return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",
      "right" : "return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",
      "info" : "ReturnStatement[150922-151002]:ReturnStatement[151033-151113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152077-152199]:Block[152188-152310]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[152087-152140]:IfStatement[152198-152251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152104-152140]:Block[152215-152251]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[152118-152130]:ReturnStatement[152229-152241]"
    }, {
      "left" : "return str.replace(searchChar, replaceChar);",
      "right" : "return str.replace(searchChar, replaceChar);",
      "info" : "ReturnStatement[152149-152193]:ReturnStatement[152260-152304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153994-154842]:Block[154105-154953]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || isEmpty(searchChars))",
      "info" : "IfStatement[154004-154081]:IfStatement[154115-154192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154046-154081]:Block[154157-154192]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[154060-154071]:ReturnStatement[154171-154182]"
    }, {
      "left" : "if (replaceChars == null)",
      "right" : "if (replaceChars == null)",
      "info" : "IfStatement[154090-154161]:IfStatement[154201-154272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154116-154161]:Block[154227-154272]"
    }, {
      "left" : "replaceChars = EMPTY;",
      "right" : "replaceChars = EMPTY;",
      "info" : "ExpressionStatement[154130-154151]:ExpressionStatement[154241-154262]"
    }, {
      "left" : "boolean modified = false;",
      "right" : "boolean modified = false;",
      "info" : "VariableDeclarationStatement[154170-154195]:VariableDeclarationStatement[154281-154306]"
    }, {
      "left" : "int replaceCharsLength = replaceChars.length();",
      "right" : "int replaceCharsLength = replaceChars.length();",
      "info" : "VariableDeclarationStatement[154204-154251]:VariableDeclarationStatement[154315-154362]"
    }, {
      "left" : "int strLength = str.length();",
      "right" : "int strLength = str.length();",
      "info" : "VariableDeclarationStatement[154260-154289]:VariableDeclarationStatement[154371-154400]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(strLength);",
      "right" : "StringBuilder buf = new StringBuilder(strLength);",
      "info" : "VariableDeclarationStatement[154298-154347]:VariableDeclarationStatement[154409-154458]"
    }, {
      "left" : "for (int i = 0; i < strLength; i++)",
      "right" : "for (int i = 0; i < strLength; i++)",
      "info" : "ForStatement[154356-154747]:ForStatement[154467-154858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154392-154747]:Block[154503-154858]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[154406-154430]:VariableDeclarationStatement[154517-154541]"
    }, {
      "left" : "int index = searchChars.indexOf(ch);",
      "right" : "int index = searchChars.indexOf(ch);",
      "info" : "VariableDeclarationStatement[154443-154479]:VariableDeclarationStatement[154554-154590]"
    }, {
      "left" : "if (index >= 0)",
      "right" : "if (index >= 0)",
      "info" : "IfStatement[154492-154737]:IfStatement[154603-154848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154508-154684]:Block[154619-154795]"
    }, {
      "left" : "modified = true;",
      "right" : "modified = true;",
      "info" : "ExpressionStatement[154526-154542]:ExpressionStatement[154637-154653]"
    }, {
      "left" : "if (index < replaceCharsLength)",
      "right" : "if (index < replaceCharsLength)",
      "info" : "IfStatement[154559-154670]:IfStatement[154670-154781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154591-154670]:Block[154702-154781]"
    }, {
      "left" : "buf.append(replaceChars.charAt(index));",
      "right" : "buf.append(replaceChars.charAt(index));",
      "info" : "ExpressionStatement[154613-154652]:ExpressionStatement[154724-154763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154690-154737]:Block[154801-154848]"
    }, {
      "left" : "buf.append(ch);",
      "right" : "buf.append(ch);",
      "info" : "ExpressionStatement[154708-154723]:ExpressionStatement[154819-154834]"
    }, {
      "left" : "if (modified)",
      "right" : "if (modified)",
      "info" : "IfStatement[154756-154816]:IfStatement[154867-154927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154770-154816]:Block[154881-154927]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[154784-154806]:ReturnStatement[154895-154917]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[154825-154836]:ReturnStatement[154936-154947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156435-157168]:Block[156546-157279]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[156445-156498]:IfStatement[156556-156609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156462-156498]:Block[156573-156609]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[156476-156488]:ReturnStatement[156587-156599]"
    }, {
      "left" : "if (overlay == null)",
      "right" : "if (overlay == null)",
      "info" : "IfStatement[156507-156568]:IfStatement[156618-156679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156528-156568]:Block[156639-156679]"
    }, {
      "left" : "overlay = EMPTY;",
      "right" : "overlay = EMPTY;",
      "info" : "ExpressionStatement[156542-156558]:ExpressionStatement[156653-156669]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[156577-156600]:VariableDeclarationStatement[156688-156711]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[156609-156658]:IfStatement[156720-156769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156624-156658]:Block[156735-156769]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[156638-156648]:ExpressionStatement[156749-156759]"
    }, {
      "left" : "if (start > len)",
      "right" : "if (start > len)",
      "info" : "IfStatement[156667-156720]:IfStatement[156778-156831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156684-156720]:Block[156795-156831]"
    }, {
      "left" : "start = len;",
      "right" : "start = len;",
      "info" : "ExpressionStatement[156698-156710]:ExpressionStatement[156809-156821]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[156729-156774]:IfStatement[156840-156885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156742-156774]:Block[156853-156885]"
    }, {
      "left" : "end = 0;",
      "right" : "end = 0;",
      "info" : "ExpressionStatement[156756-156764]:ExpressionStatement[156867-156875]"
    }, {
      "left" : "if (end > len)",
      "right" : "if (end > len)",
      "info" : "IfStatement[156783-156832]:IfStatement[156894-156943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156798-156832]:Block[156909-156943]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[156812-156822]:ExpressionStatement[156923-156933]"
    }, {
      "left" : "if (start > end)",
      "right" : "if (start > end)",
      "info" : "IfStatement[156841-156948]:IfStatement[156952-157059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156858-156948]:Block[156969-157059]"
    }, {
      "left" : "int temp = start;",
      "right" : "int temp = start;",
      "info" : "VariableDeclarationStatement[156872-156889]:VariableDeclarationStatement[156983-157000]"
    }, {
      "left" : "start = end;",
      "right" : "start = end;",
      "info" : "ExpressionStatement[156902-156914]:ExpressionStatement[157013-157025]"
    }, {
      "left" : "end = temp;",
      "right" : "end = temp;",
      "info" : "ExpressionStatement[156927-156938]:ExpressionStatement[157038-157049]"
    }, {
      "left" : "return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();",
      "right" : "return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();",
      "info" : "ReturnStatement[156957-157162]:ReturnStatement[157068-157273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158356-158971]:Block[158467-159082]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[158366-158419]:IfStatement[158477-158530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158384-158419]:Block[158495-158530]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[158398-158409]:ReturnStatement[158509-158520]"
    }, {
      "left" : "if (str.length() == 1)",
      "right" : "if (str.length() == 1)",
      "info" : "IfStatement[158429-158628]:IfStatement[158540-158739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158452-158628]:Block[158563-158739]"
    }, {
      "left" : "char ch = str.charAt(0);",
      "right" : "char ch = str.charAt(0);",
      "info" : "VariableDeclarationStatement[158466-158490]:VariableDeclarationStatement[158577-158601]"
    }, {
      "left" : "if (ch == CharUtils.CR || ch == CharUtils.LF)",
      "right" : "if (ch == CharUtils.CR || ch == CharUtils.LF)",
      "info" : "IfStatement[158503-158594]:IfStatement[158614-158705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158549-158594]:Block[158660-158705]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[158567-158580]:ReturnStatement[158678-158691]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[158607-158618]:ReturnStatement[158718-158729]"
    }, {
      "left" : "int lastIdx = str.length() - 1;",
      "right" : "int lastIdx = str.length() - 1;",
      "info" : "VariableDeclarationStatement[158638-158669]:VariableDeclarationStatement[158749-158780]"
    }, {
      "left" : "char last = str.charAt(lastIdx);",
      "right" : "char last = str.charAt(lastIdx);",
      "info" : "VariableDeclarationStatement[158678-158710]:VariableDeclarationStatement[158789-158821]"
    }, {
      "left" : "if (last == CharUtils.LF)",
      "right" : "if (last == CharUtils.LF)",
      "info" : "IfStatement[158720-158923]:IfStatement[158831-159034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158746-158857]:Block[158857-158968]"
    }, {
      "left" : "if (str.charAt(lastIdx - 1) == CharUtils.CR)",
      "right" : "if (str.charAt(lastIdx - 1) == CharUtils.CR)",
      "info" : "IfStatement[158760-158847]:IfStatement[158871-158958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158805-158847]:Block[158916-158958]"
    }, {
      "left" : "lastIdx--;",
      "right" : "lastIdx--;",
      "info" : "ExpressionStatement[158823-158833]:ExpressionStatement[158934-158944]"
    }, {
      "left" : "if (last != CharUtils.CR)",
      "right" : "if (last != CharUtils.CR)",
      "info" : "IfStatement[158863-158923]:IfStatement[158974-159034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158889-158923]:Block[159000-159034]"
    }, {
      "left" : "lastIdx++;",
      "right" : "lastIdx++;",
      "info" : "ExpressionStatement[158903-158913]:ExpressionStatement[159014-159024]"
    }, {
      "left" : "return str.substring(0, lastIdx);",
      "right" : "return str.substring(0, lastIdx);",
      "info" : "ReturnStatement[158932-158965]:ReturnStatement[159043-159076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160164-160395]:Block[160275-160506]"
    }, {
      "left" : "if (isEmpty(str) || separator == null)",
      "right" : "if (isEmpty(str) || separator == null)",
      "info" : "IfStatement[160174-160248]:IfStatement[160285-160359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160213-160248]:Block[160324-160359]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[160227-160238]:ReturnStatement[160338-160349]"
    }, {
      "left" : "if (str.endsWith(separator))",
      "right" : "if (str.endsWith(separator))",
      "info" : "IfStatement[160257-160369]:IfStatement[160368-160480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160286-160369]:Block[160397-160480]"
    }, {
      "left" : "return str.substring(0, str.length() - separator.length());",
      "right" : "return str.substring(0, str.length() - separator.length());",
      "info" : "ReturnStatement[160300-160359]:ReturnStatement[160411-160470]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[160378-160389]:ReturnStatement[160489-160500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161401-161883]:Block[161512-161994]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[161411-161464]:IfStatement[161522-161575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161428-161464]:Block[161539-161575]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[161442-161454]:ReturnStatement[161553-161565]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[161473-161499]:VariableDeclarationStatement[161584-161610]"
    }, {
      "left" : "if (strLen < 2)",
      "right" : "if (strLen < 2)",
      "info" : "IfStatement[161508-161561]:IfStatement[161619-161672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161524-161561]:Block[161635-161672]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[161538-161551]:ReturnStatement[161649-161662]"
    }, {
      "left" : "int lastIdx = strLen - 1;",
      "right" : "int lastIdx = strLen - 1;",
      "info" : "VariableDeclarationStatement[161570-161595]:VariableDeclarationStatement[161681-161706]"
    }, {
      "left" : "String ret = str.substring(0, lastIdx);",
      "right" : "String ret = str.substring(0, lastIdx);",
      "info" : "VariableDeclarationStatement[161604-161643]:VariableDeclarationStatement[161715-161754]"
    }, {
      "left" : "char last = str.charAt(lastIdx);",
      "right" : "char last = str.charAt(lastIdx);",
      "info" : "VariableDeclarationStatement[161652-161684]:VariableDeclarationStatement[161763-161795]"
    }, {
      "left" : "if (last == CharUtils.LF)",
      "right" : "if (last == CharUtils.LF)",
      "info" : "IfStatement[161693-161857]:IfStatement[161804-161968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161719-161857]:Block[161830-161968]"
    }, {
      "left" : "if (ret.charAt(lastIdx - 1) == CharUtils.CR)",
      "right" : "if (ret.charAt(lastIdx - 1) == CharUtils.CR)",
      "info" : "IfStatement[161733-161847]:IfStatement[161844-161958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161778-161847]:Block[161889-161958]"
    }, {
      "left" : "return ret.substring(0, lastIdx - 1);",
      "right" : "return ret.substring(0, lastIdx - 1);",
      "info" : "ReturnStatement[161796-161833]:ReturnStatement[161907-161944]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[161866-161877]:ReturnStatement[161977-161988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162772-164158]:Block[162883-164269]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[162829-162882]:IfStatement[162940-162993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162846-162882]:Block[162957-162993]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[162860-162872]:ReturnStatement[162971-162983]"
    }, {
      "left" : "if (repeat <= 0)",
      "right" : "if (repeat <= 0)",
      "info" : "IfStatement[162891-162945]:IfStatement[163002-163056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162908-162945]:Block[163019-163056]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[162922-162935]:ReturnStatement[163033-163046]"
    }, {
      "left" : "int inputLength = str.length();",
      "right" : "int inputLength = str.length();",
      "info" : "VariableDeclarationStatement[162954-162985]:VariableDeclarationStatement[163065-163096]"
    }, {
      "left" : "if (repeat == 1 || inputLength == 0)",
      "right" : "if (repeat == 1 || inputLength == 0)",
      "info" : "IfStatement[162994-163066]:IfStatement[163105-163177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[163031-163066]:Block[163142-163177]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[163045-163056]:ReturnStatement[163156-163167]"
    }, {
      "left" : "if (inputLength == 1 && repeat <= PAD_LIMIT)",
      "right" : "if (inputLength == 1 && repeat <= PAD_LIMIT)",
      "info" : "IfStatement[163075-163182]:IfStatement[163186-163293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[163120-163182]:Block[163231-163293]"
    }, {
      "left" : "return padding(repeat, str.charAt(0));",
      "right" : "return padding(repeat, str.charAt(0));",
      "info" : "ReturnStatement[163134-163172]:ReturnStatement[163245-163283]"
    }, {
      "left" : "int outputLength = inputLength * repeat;",
      "right" : "int outputLength = inputLength * repeat;",
      "info" : "VariableDeclarationStatement[163192-163232]:VariableDeclarationStatement[163303-163343]"
    }, {
      "left" : "switch (inputLength) {\n            case 1 :\n                char ch = str.charAt(0);\n                char[] output1 = new char[outputLength];\n                for (int i = repeat - 1; i >= 0; i--) {\n                    output1[i] = ch;\n                }\n                return new String(output1);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf = new StringBuilder(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }",
      "right" : "switch (inputLength) {\n            case 1 :\n                char ch = str.charAt(0);\n                char[] output1 = new char[outputLength];\n                for (int i = repeat - 1; i >= 0; i--) {\n                    output1[i] = ch;\n                }\n                return new String(output1);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf = new StringBuilder(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }",
      "info" : "SwitchStatement[163241-164152]:SwitchStatement[163352-164263]"
    }, {
      "left" : "case 1 :",
      "right" : "case 1 :",
      "info" : "SwitchCase[163276-163284]:SwitchCase[163387-163395]"
    }, {
      "left" : "char ch = str.charAt(0);",
      "right" : "char ch = str.charAt(0);",
      "info" : "VariableDeclarationStatement[163301-163325]:VariableDeclarationStatement[163412-163436]"
    }, {
      "left" : "char[] output1 = new char[outputLength];",
      "right" : "char[] output1 = new char[outputLength];",
      "info" : "VariableDeclarationStatement[163342-163382]:VariableDeclarationStatement[163453-163493]"
    }, {
      "left" : "for (int i = repeat - 1; i >= 0; i--)",
      "right" : "for (int i = repeat - 1; i >= 0; i--)",
      "info" : "ForStatement[163399-163493]:ForStatement[163510-163604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[163437-163493]:Block[163548-163604]"
    }, {
      "left" : "output1[i] = ch;",
      "right" : "output1[i] = ch;",
      "info" : "ExpressionStatement[163459-163475]:ExpressionStatement[163570-163586]"
    }, {
      "left" : "return new String(output1);",
      "right" : "return new String(output1);",
      "info" : "ReturnStatement[163510-163537]:ReturnStatement[163621-163648]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[163550-163558]:SwitchCase[163661-163669]"
    }, {
      "left" : "char ch0 = str.charAt(0);",
      "right" : "char ch0 = str.charAt(0);",
      "info" : "VariableDeclarationStatement[163575-163600]:VariableDeclarationStatement[163686-163711]"
    }, {
      "left" : "char ch1 = str.charAt(1);",
      "right" : "char ch1 = str.charAt(1);",
      "info" : "VariableDeclarationStatement[163617-163642]:VariableDeclarationStatement[163728-163753]"
    }, {
      "left" : "char[] output2 = new char[outputLength];",
      "right" : "char[] output2 = new char[outputLength];",
      "info" : "VariableDeclarationStatement[163659-163699]:VariableDeclarationStatement[163770-163810]"
    }, {
      "left" : "for (int i = repeat * 2 - 2; i >= 0; i--, i--)",
      "right" : "for (int i = repeat * 2 - 2; i >= 0; i--, i--)",
      "info" : "ForStatement[163716-163862]:ForStatement[163827-163973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[163763-163862]:Block[163874-163973]"
    }, {
      "left" : "output2[i] = ch0;",
      "right" : "output2[i] = ch0;",
      "info" : "ExpressionStatement[163785-163802]:ExpressionStatement[163896-163913]"
    }, {
      "left" : "output2[i + 1] = ch1;",
      "right" : "output2[i + 1] = ch1;",
      "info" : "ExpressionStatement[163823-163844]:ExpressionStatement[163934-163955]"
    }, {
      "left" : "return new String(output2);",
      "right" : "return new String(output2);",
      "info" : "ReturnStatement[163879-163906]:ReturnStatement[163990-164017]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[163919-163928]:SwitchCase[164030-164039]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(outputLength);",
      "right" : "StringBuilder buf = new StringBuilder(outputLength);",
      "info" : "VariableDeclarationStatement[163945-163997]:VariableDeclarationStatement[164056-164108]"
    }, {
      "left" : "for (int i = 0; i < repeat; i++)",
      "right" : "for (int i = 0; i < repeat; i++)",
      "info" : "ForStatement[164014-164103]:ForStatement[164125-164214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[164047-164103]:Block[164158-164214]"
    }, {
      "left" : "buf.append(str);",
      "right" : "buf.append(str);",
      "info" : "ExpressionStatement[164069-164085]:ExpressionStatement[164180-164196]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[164120-164142]:ReturnStatement[164231-164253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[165029-165380]:Block[165140-165491]"
    }, {
      "left" : "if(str == null || separator == null)",
      "right" : "if(str == null || separator == null)",
      "info" : "IfStatement[165039-165374]:IfStatement[165150-165485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[165076-165127]:Block[165187-165238]"
    }, {
      "left" : "return repeat(str, repeat);",
      "right" : "return repeat(str, repeat);",
      "info" : "ReturnStatement[165090-165117]:ReturnStatement[165201-165228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[165133-165374]:Block[165244-165485]"
    }, {
      "left" : "String result = repeat(str + separator, repeat);",
      "right" : "String result = repeat(str + separator, repeat);",
      "info" : "VariableDeclarationStatement[165267-165315]:VariableDeclarationStatement[165378-165426]"
    }, {
      "left" : "return removeEnd(result, separator);",
      "right" : "return removeEnd(result, separator);",
      "info" : "ReturnStatement[165328-165364]:ReturnStatement[165439-165475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[166414-166713]:Block[166525-166824]"
    }, {
      "left" : "if (repeat < 0)",
      "right" : "if (repeat < 0)",
      "info" : "IfStatement[166424-166543]:IfStatement[166535-166654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[166440-166543]:Block[166551-166654]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"Cannot pad a negative amount: \" + repeat);",
      "right" : "throw new IndexOutOfBoundsException(\"Cannot pad a negative amount: \" + repeat);",
      "info" : "ThrowStatement[166454-166533]:ThrowStatement[166565-166644]"
    }, {
      "left" : "final char[] buf = new char[repeat];",
      "right" : "final char[] buf = new char[repeat];",
      "info" : "VariableDeclarationStatement[166552-166588]:VariableDeclarationStatement[166663-166699]"
    }, {
      "left" : "for (int i = 0; i < buf.length; i++)",
      "right" : "for (int i = 0; i < buf.length; i++)",
      "info" : "ForStatement[166597-166675]:ForStatement[166708-166786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[166634-166675]:Block[166745-166786]"
    }, {
      "left" : "buf[i] = padChar;",
      "right" : "buf[i] = padChar;",
      "info" : "ExpressionStatement[166648-166665]:ExpressionStatement[166759-166776]"
    }, {
      "left" : "return new String(buf);",
      "right" : "return new String(buf);",
      "info" : "ReturnStatement[166684-166707]:ReturnStatement[166795-166818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[167461-167509]:Block[167572-167620]"
    }, {
      "left" : "return rightPad(str, size, ' ');",
      "right" : "return rightPad(str, size, ' ');",
      "info" : "ReturnStatement[167471-167503]:ReturnStatement[167582-167614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168377-168744]:Block[168488-168855]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[168387-168440]:IfStatement[168498-168551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168404-168440]:Block[168515-168551]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[168418-168430]:ReturnStatement[168529-168541]"
    }, {
      "left" : "int pads = size - str.length();",
      "right" : "int pads = size - str.length();",
      "info" : "VariableDeclarationStatement[168449-168480]:VariableDeclarationStatement[168560-168591]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[168489-168580]:IfStatement[168600-168691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168504-168580]:Block[168615-168691]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[168518-168529]:ReturnStatement[168629-168640]"
    }, {
      "left" : "if (pads > PAD_LIMIT)",
      "right" : "if (pads > PAD_LIMIT)",
      "info" : "IfStatement[168589-168687]:IfStatement[168700-168798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168611-168687]:Block[168722-168798]"
    }, {
      "left" : "return rightPad(str, size, String.valueOf(padChar));",
      "right" : "return rightPad(str, size, String.valueOf(padChar));",
      "info" : "ReturnStatement[168625-168677]:ReturnStatement[168736-168788]"
    }, {
      "left" : "return str.concat(padding(pads, padChar));",
      "right" : "return str.concat(padding(pads, padChar));",
      "info" : "ReturnStatement[168696-168738]:ReturnStatement[168807-168849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169801-170710]:Block[169912-170821]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[169811-169864]:IfStatement[169922-169975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169828-169864]:Block[169939-169975]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[169842-169854]:ReturnStatement[169953-169965]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[169873-169931]:IfStatement[169984-170042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169894-169931]:Block[170005-170042]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[169908-169921]:ExpressionStatement[170019-170032]"
    }, {
      "left" : "int padLen = padStr.length();",
      "right" : "int padLen = padStr.length();",
      "info" : "VariableDeclarationStatement[169940-169969]:VariableDeclarationStatement[170051-170080]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[169978-170004]:VariableDeclarationStatement[170089-170115]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[170013-170038]:VariableDeclarationStatement[170124-170149]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[170047-170138]:IfStatement[170158-170249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170062-170138]:Block[170173-170249]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[170076-170087]:ReturnStatement[170187-170198]"
    }, {
      "left" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "right" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "info" : "IfStatement[170147-170254]:IfStatement[170258-170365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170185-170254]:Block[170296-170365]"
    }, {
      "left" : "return rightPad(str, size, padStr.charAt(0));",
      "right" : "return rightPad(str, size, padStr.charAt(0));",
      "info" : "ReturnStatement[170199-170244]:ReturnStatement[170310-170355]"
    }, {
      "left" : "if (pads == padLen)",
      "right" : "if (pads == padLen)",
      "info" : "IfStatement[170264-170704]:IfStatement[170375-170815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170284-170334]:Block[170395-170445]"
    }, {
      "left" : "return str.concat(padStr);",
      "right" : "return str.concat(padStr);",
      "info" : "ReturnStatement[170298-170324]:ReturnStatement[170409-170435]"
    }, {
      "left" : "if (pads < padLen)",
      "right" : "if (pads < padLen)",
      "info" : "IfStatement[170340-170704]:IfStatement[170451-170815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170359-170428]:Block[170470-170539]"
    }, {
      "left" : "return str.concat(padStr.substring(0, pads));",
      "right" : "return str.concat(padStr.substring(0, pads));",
      "info" : "ReturnStatement[170373-170418]:ReturnStatement[170484-170529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170434-170704]:Block[170545-170815]"
    }, {
      "left" : "char[] padding = new char[pads];",
      "right" : "char[] padding = new char[pads];",
      "info" : "VariableDeclarationStatement[170448-170480]:VariableDeclarationStatement[170559-170591]"
    }, {
      "left" : "char[] padChars = padStr.toCharArray();",
      "right" : "char[] padChars = padStr.toCharArray();",
      "info" : "VariableDeclarationStatement[170493-170532]:VariableDeclarationStatement[170604-170643]"
    }, {
      "left" : "for (int i = 0; i < pads; i++)",
      "right" : "for (int i = 0; i < pads; i++)",
      "info" : "ForStatement[170545-170642]:ForStatement[170656-170753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170576-170642]:Block[170687-170753]"
    }, {
      "left" : "padding[i] = padChars[i % padLen];",
      "right" : "padding[i] = padChars[i % padLen];",
      "info" : "ExpressionStatement[170594-170628]:ExpressionStatement[170705-170739]"
    }, {
      "left" : "return str.concat(new String(padding));",
      "right" : "return str.concat(new String(padding));",
      "info" : "ReturnStatement[170655-170694]:ReturnStatement[170766-170805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171449-171496]:Block[171560-171607]"
    }, {
      "left" : "return leftPad(str, size, ' ');",
      "right" : "return leftPad(str, size, ' ');",
      "info" : "ReturnStatement[171459-171490]:ReturnStatement[171570-171601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172336-172702]:Block[172447-172813]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[172346-172399]:IfStatement[172457-172510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172363-172399]:Block[172474-172510]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[172377-172389]:ReturnStatement[172488-172500]"
    }, {
      "left" : "int pads = size - str.length();",
      "right" : "int pads = size - str.length();",
      "info" : "VariableDeclarationStatement[172408-172439]:VariableDeclarationStatement[172519-172550]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[172448-172539]:IfStatement[172559-172650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172463-172539]:Block[172574-172650]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[172477-172488]:ReturnStatement[172588-172599]"
    }, {
      "left" : "if (pads > PAD_LIMIT)",
      "right" : "if (pads > PAD_LIMIT)",
      "info" : "IfStatement[172548-172645]:IfStatement[172659-172756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172570-172645]:Block[172681-172756]"
    }, {
      "left" : "return leftPad(str, size, String.valueOf(padChar));",
      "right" : "return leftPad(str, size, String.valueOf(padChar));",
      "info" : "ReturnStatement[172584-172635]:ReturnStatement[172695-172746]"
    }, {
      "left" : "return padding(pads, padChar).concat(str);",
      "right" : "return padding(pads, padChar).concat(str);",
      "info" : "ReturnStatement[172654-172696]:ReturnStatement[172765-172807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173728-174636]:Block[173839-174747]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[173738-173791]:IfStatement[173849-173902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173755-173791]:Block[173866-173902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[173769-173781]:ReturnStatement[173880-173892]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[173800-173858]:IfStatement[173911-173969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173821-173858]:Block[173932-173969]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[173835-173848]:ExpressionStatement[173946-173959]"
    }, {
      "left" : "int padLen = padStr.length();",
      "right" : "int padLen = padStr.length();",
      "info" : "VariableDeclarationStatement[173867-173896]:VariableDeclarationStatement[173978-174007]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[173905-173931]:VariableDeclarationStatement[174016-174042]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[173940-173965]:VariableDeclarationStatement[174051-174076]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[173974-174065]:IfStatement[174085-174176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173989-174065]:Block[174100-174176]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[174003-174014]:ReturnStatement[174114-174125]"
    }, {
      "left" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "right" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "info" : "IfStatement[174074-174180]:IfStatement[174185-174291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174112-174180]:Block[174223-174291]"
    }, {
      "left" : "return leftPad(str, size, padStr.charAt(0));",
      "right" : "return leftPad(str, size, padStr.charAt(0));",
      "info" : "ReturnStatement[174126-174170]:ReturnStatement[174237-174281]"
    }, {
      "left" : "if (pads == padLen)",
      "right" : "if (pads == padLen)",
      "info" : "IfStatement[174190-174630]:IfStatement[174301-174741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174210-174260]:Block[174321-174371]"
    }, {
      "left" : "return padStr.concat(str);",
      "right" : "return padStr.concat(str);",
      "info" : "ReturnStatement[174224-174250]:ReturnStatement[174335-174361]"
    }, {
      "left" : "if (pads < padLen)",
      "right" : "if (pads < padLen)",
      "info" : "IfStatement[174266-174630]:IfStatement[174377-174741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174285-174354]:Block[174396-174465]"
    }, {
      "left" : "return padStr.substring(0, pads).concat(str);",
      "right" : "return padStr.substring(0, pads).concat(str);",
      "info" : "ReturnStatement[174299-174344]:ReturnStatement[174410-174455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174360-174630]:Block[174471-174741]"
    }, {
      "left" : "char[] padding = new char[pads];",
      "right" : "char[] padding = new char[pads];",
      "info" : "VariableDeclarationStatement[174374-174406]:VariableDeclarationStatement[174485-174517]"
    }, {
      "left" : "char[] padChars = padStr.toCharArray();",
      "right" : "char[] padChars = padStr.toCharArray();",
      "info" : "VariableDeclarationStatement[174419-174458]:VariableDeclarationStatement[174530-174569]"
    }, {
      "left" : "for (int i = 0; i < pads; i++)",
      "right" : "for (int i = 0; i < pads; i++)",
      "info" : "ForStatement[174471-174568]:ForStatement[174582-174679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174502-174568]:Block[174613-174679]"
    }, {
      "left" : "padding[i] = padChars[i % padLen];",
      "right" : "padding[i] = padChars[i % padLen];",
      "info" : "ExpressionStatement[174520-174554]:ExpressionStatement[174631-174665]"
    }, {
      "left" : "return new String(padding).concat(str);",
      "right" : "return new String(padding).concat(str);",
      "info" : "ReturnStatement[174581-174620]:ReturnStatement[174692-174731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174954-175008]:Block[175065-175119]"
    }, {
      "left" : "return str == null ? 0 : str.length();",
      "right" : "return str == null ? 0 : str.length();",
      "info" : "ReturnStatement[174964-175002]:ReturnStatement[175075-175113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[176069-176115]:Block[176180-176226]"
    }, {
      "left" : "return center(str, size, ' ');",
      "right" : "return center(str, size, ' ');",
      "info" : "ReturnStatement[176079-176109]:ReturnStatement[176190-176220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177213-177542]:Block[177324-177653]"
    }, {
      "left" : "if (str == null || size <= 0)",
      "right" : "if (str == null || size <= 0)",
      "info" : "IfStatement[177223-177288]:IfStatement[177334-177399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177253-177288]:Block[177364-177399]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[177267-177278]:ReturnStatement[177378-177389]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[177297-177323]:VariableDeclarationStatement[177408-177434]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[177332-177357]:VariableDeclarationStatement[177443-177468]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[177366-177416]:IfStatement[177477-177527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177381-177416]:Block[177492-177527]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[177395-177406]:ReturnStatement[177506-177517]"
    }, {
      "left" : "str = leftPad(str, strLen + pads / 2, padChar);",
      "right" : "str = leftPad(str, strLen + pads / 2, padChar);",
      "info" : "ExpressionStatement[177425-177472]:ExpressionStatement[177536-177583]"
    }, {
      "left" : "str = rightPad(str, size, padChar);",
      "right" : "str = rightPad(str, size, padChar);",
      "info" : "ExpressionStatement[177481-177516]:ExpressionStatement[177592-177627]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[177525-177536]:ReturnStatement[177636-177647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178831-179225]:Block[178942-179336]"
    }, {
      "left" : "if (str == null || size <= 0)",
      "right" : "if (str == null || size <= 0)",
      "info" : "IfStatement[178841-178906]:IfStatement[178952-179017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178871-178906]:Block[178982-179017]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[178885-178896]:ReturnStatement[178996-179007]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[178915-178973]:IfStatement[179026-179084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178936-178973]:Block[179047-179084]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[178950-178963]:ExpressionStatement[179061-179074]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[178982-179008]:VariableDeclarationStatement[179093-179119]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[179017-179042]:VariableDeclarationStatement[179128-179153]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[179051-179101]:IfStatement[179162-179212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[179066-179101]:Block[179177-179212]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[179080-179091]:ReturnStatement[179191-179202]"
    }, {
      "left" : "str = leftPad(str, strLen + pads / 2, padStr);",
      "right" : "str = leftPad(str, strLen + pads / 2, padStr);",
      "info" : "ExpressionStatement[179110-179156]:ExpressionStatement[179221-179267]"
    }, {
      "left" : "str = rightPad(str, size, padStr);",
      "right" : "str = rightPad(str, size, padStr);",
      "info" : "ExpressionStatement[179165-179199]:ExpressionStatement[179276-179310]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[179208-179219]:ReturnStatement[179319-179330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180215-180318]:Block[180326-180429]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[180225-180278]:IfStatement[180336-180389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180242-180278]:Block[180353-180389]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[180256-180268]:ReturnStatement[180367-180379]"
    }, {
      "left" : "return str.toUpperCase();",
      "right" : "return str.toUpperCase();",
      "info" : "ReturnStatement[180287-180312]:ReturnStatement[180398-180423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[181032-181141]:Block[181143-181252]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[181042-181095]:IfStatement[181153-181206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[181059-181095]:Block[181170-181206]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[181073-181085]:ReturnStatement[181184-181196]"
    }, {
      "left" : "return str.toUpperCase(locale);",
      "right" : "return str.toUpperCase(locale);",
      "info" : "ReturnStatement[181104-181135]:ReturnStatement[181215-181246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182030-182133]:Block[182141-182244]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[182040-182093]:IfStatement[182151-182204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182057-182093]:Block[182168-182204]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[182071-182083]:ReturnStatement[182182-182194]"
    }, {
      "left" : "return str.toLowerCase();",
      "right" : "return str.toLowerCase();",
      "info" : "ReturnStatement[182102-182127]:ReturnStatement[182213-182238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182847-182956]:Block[182958-183067]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[182857-182910]:IfStatement[182968-183021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182874-182910]:Block[182985-183021]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[182888-182900]:ReturnStatement[182999-183011]"
    }, {
      "left" : "return str.toLowerCase(locale);",
      "right" : "return str.toLowerCase(locale);",
      "info" : "ReturnStatement[182919-182950]:ReturnStatement[183030-183061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[183781-184063]:Block[183892-184174]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[183791-183802]:VariableDeclarationStatement[183902-183913]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[183811-183895]:IfStatement[183922-184006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[183860-183895]:Block[183971-184006]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[183874-183885]:ReturnStatement[183985-183996]"
    }, {
      "left" : "return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "right" : "return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "info" : "ReturnStatement[183904-184057]:ReturnStatement[184015-184168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184906-185188]:Block[185017-185299]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[184916-184927]:VariableDeclarationStatement[185027-185038]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[184936-185020]:IfStatement[185047-185131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184985-185020]:Block[185096-185131]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[184999-185010]:ReturnStatement[185110-185121]"
    }, {
      "left" : "return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "right" : "return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "info" : "ReturnStatement[185029-185182]:ReturnStatement[185140-185293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186333-186990]:Block[186444-187101]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[186343-186354]:VariableDeclarationStatement[186454-186465]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[186363-186447]:IfStatement[186474-186558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186412-186447]:Block[186523-186558]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[186426-186437]:ReturnStatement[186537-186548]"
    }, {
      "left" : "StringBuilder buffer = new StringBuilder(strLen);",
      "right" : "StringBuilder buffer = new StringBuilder(strLen);",
      "info" : "VariableDeclarationStatement[186456-186505]:VariableDeclarationStatement[186567-186616]"
    }, {
      "left" : "char ch = 0;",
      "right" : "char ch = 0;",
      "info" : "VariableDeclarationStatement[186515-186527]:VariableDeclarationStatement[186626-186638]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[186536-186950]:ForStatement[186647-187061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186569-186950]:Block[186680-187061]"
    }, {
      "left" : "ch = str.charAt(i);",
      "right" : "ch = str.charAt(i);",
      "info" : "ExpressionStatement[186583-186602]:ExpressionStatement[186694-186713]"
    }, {
      "left" : "if (Character.isUpperCase(ch))",
      "right" : "if (Character.isUpperCase(ch))",
      "info" : "IfStatement[186615-186909]:IfStatement[186726-187020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186646-186709]:Block[186757-186820]"
    }, {
      "left" : "ch = Character.toLowerCase(ch);",
      "right" : "ch = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[186664-186695]:ExpressionStatement[186775-186806]"
    }, {
      "left" : "if (Character.isTitleCase(ch))",
      "right" : "if (Character.isTitleCase(ch))",
      "info" : "IfStatement[186715-186909]:IfStatement[186826-187020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186746-186809]:Block[186857-186920]"
    }, {
      "left" : "ch = Character.toLowerCase(ch);",
      "right" : "ch = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[186764-186795]:ExpressionStatement[186875-186906]"
    }, {
      "left" : "if (Character.isLowerCase(ch))",
      "right" : "if (Character.isLowerCase(ch))",
      "info" : "IfStatement[186815-186909]:IfStatement[186926-187020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186846-186909]:Block[186957-187020]"
    }, {
      "left" : "ch = Character.toUpperCase(ch);",
      "right" : "ch = Character.toUpperCase(ch);",
      "info" : "ExpressionStatement[186864-186895]:ExpressionStatement[186975-187006]"
    }, {
      "left" : "buffer.append(ch);",
      "right" : "buffer.append(ch);",
      "info" : "ExpressionStatement[186922-186940]:ExpressionStatement[187033-187051]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[186959-186984]:ReturnStatement[187070-187095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187925-188192]:Block[188036-188303]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(sub))",
      "right" : "if (isEmpty(str) || isEmpty(sub))",
      "info" : "IfStatement[187935-188002]:IfStatement[188046-188113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187969-188002]:Block[188080-188113]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[187983-187992]:ReturnStatement[188094-188103]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[188011-188025]:VariableDeclarationStatement[188122-188136]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[188034-188046]:VariableDeclarationStatement[188145-188157]"
    }, {
      "left" : "while ((idx = str.indexOf(sub, idx)) != -1)",
      "right" : "while ((idx = str.indexOf(sub, idx)) != -1)",
      "info" : "WhileStatement[188055-188164]:WhileStatement[188166-188275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188099-188164]:Block[188210-188275]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[188113-188121]:ExpressionStatement[188224-188232]"
    }, {
      "left" : "idx += sub.length();",
      "right" : "idx += sub.length();",
      "info" : "ExpressionStatement[188134-188154]:ExpressionStatement[188245-188265]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[188173-188186]:ReturnStatement[188284-188297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188977-189254]:Block[189088-189365]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[188987-189041]:IfStatement[189098-189152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189004-189041]:Block[189115-189152]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[189018-189031]:ReturnStatement[189129-189142]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[189050-189072]:VariableDeclarationStatement[189161-189183]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[189081-189227]:ForStatement[189192-189338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189110-189227]:Block[189221-189338]"
    }, {
      "left" : "if (Character.isLetter(str.charAt(i)) == false)",
      "right" : "if (Character.isLetter(str.charAt(i)) == false)",
      "info" : "IfStatement[189124-189217]:IfStatement[189235-189328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189172-189217]:Block[189283-189328]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[189190-189203]:ReturnStatement[189301-189314]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[189236-189248]:ReturnStatement[189347-189359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190059-190364]:Block[190170-190475]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[190069-190123]:IfStatement[190180-190234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190086-190123]:Block[190197-190234]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[190100-190113]:ReturnStatement[190211-190224]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[190132-190154]:VariableDeclarationStatement[190243-190265]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[190163-190337]:ForStatement[190274-190448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190192-190337]:Block[190303-190448]"
    }, {
      "left" : "if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "right" : "if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "info" : "IfStatement[190206-190327]:IfStatement[190317-190438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190282-190327]:Block[190393-190438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[190300-190313]:ReturnStatement[190411-190424]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[190346-190358]:ReturnStatement[190457-190469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191174-191458]:Block[191285-191569]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[191184-191238]:IfStatement[191295-191349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191201-191238]:Block[191312-191349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[191215-191228]:ReturnStatement[191326-191339]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[191247-191269]:VariableDeclarationStatement[191358-191380]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[191278-191431]:ForStatement[191389-191542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191307-191431]:Block[191418-191542]"
    }, {
      "left" : "if (Character.isLetterOrDigit(str.charAt(i)) == false)",
      "right" : "if (Character.isLetterOrDigit(str.charAt(i)) == false)",
      "info" : "IfStatement[191321-191421]:IfStatement[191432-191532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191376-191421]:Block[191487-191532]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[191394-191407]:ReturnStatement[191505-191518]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[191440-191452]:ReturnStatement[191551-191563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192311-192623]:Block[192422-192734]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[192321-192375]:IfStatement[192432-192486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192338-192375]:Block[192449-192486]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[192352-192365]:ReturnStatement[192463-192476]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[192384-192406]:VariableDeclarationStatement[192495-192517]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[192415-192596]:ForStatement[192526-192707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192444-192596]:Block[192555-192707]"
    }, {
      "left" : "if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "right" : "if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "info" : "IfStatement[192458-192586]:IfStatement[192569-192697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192541-192586]:Block[192652-192697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[192559-192572]:ReturnStatement[192670-192683]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[192605-192617]:ReturnStatement[192716-192728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193703-193988]:Block[193814-194099]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[193713-193767]:IfStatement[193824-193878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193730-193767]:Block[193841-193878]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[193744-193757]:ReturnStatement[193855-193868]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[193776-193798]:VariableDeclarationStatement[193887-193909]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[193807-193961]:ForStatement[193918-194072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193836-193961]:Block[193947-194072]"
    }, {
      "left" : "if (CharUtils.isAsciiPrintable(str.charAt(i)) == false)",
      "right" : "if (CharUtils.isAsciiPrintable(str.charAt(i)) == false)",
      "info" : "IfStatement[193850-193951]:IfStatement[193961-194062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193906-193951]:Block[194017-194062]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[193924-193937]:ReturnStatement[194035-194048]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[193970-193982]:ReturnStatement[194081-194093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194839-195115]:Block[194950-195226]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[194849-194903]:IfStatement[194960-195014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194866-194903]:Block[194977-195014]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[194880-194893]:ReturnStatement[194991-195004]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[194912-194934]:VariableDeclarationStatement[195023-195045]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[194943-195088]:ForStatement[195054-195199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194972-195088]:Block[195083-195199]"
    }, {
      "left" : "if (Character.isDigit(str.charAt(i)) == false)",
      "right" : "if (Character.isDigit(str.charAt(i)) == false)",
      "info" : "IfStatement[194986-195078]:IfStatement[195097-195189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195033-195078]:Block[195144-195189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[195051-195064]:ReturnStatement[195162-195175]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[195097-195109]:ReturnStatement[195208-195220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[196021-196325]:Block[196132-196436]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[196031-196085]:IfStatement[196142-196196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[196048-196085]:Block[196159-196196]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[196062-196075]:ReturnStatement[196173-196186]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[196094-196116]:VariableDeclarationStatement[196205-196227]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[196125-196298]:ForStatement[196236-196409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[196154-196298]:Block[196265-196409]"
    }, {
      "left" : "if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "right" : "if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' '))",
      "info" : "IfStatement[196168-196288]:IfStatement[196279-196399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[196243-196288]:Block[196354-196399]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[196261-196274]:ReturnStatement[196372-196385]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[196307-196319]:ReturnStatement[196418-196430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197060-197343]:Block[197171-197454]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[197070-197124]:IfStatement[197181-197235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197087-197124]:Block[197198-197235]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[197101-197114]:ReturnStatement[197212-197225]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[197133-197155]:VariableDeclarationStatement[197244-197266]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[197164-197316]:ForStatement[197275-197427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197193-197316]:Block[197304-197427]"
    }, {
      "left" : "if ((Character.isWhitespace(str.charAt(i)) == false))",
      "right" : "if ((Character.isWhitespace(str.charAt(i)) == false))",
      "info" : "IfStatement[197207-197306]:IfStatement[197318-197417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197261-197306]:Block[197372-197417]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[197279-197292]:ReturnStatement[197390-197403]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[197325-197337]:ReturnStatement[197436-197448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[198045-198341]:Block[198156-198452]"
    }, {
      "left" : "if (str == null || isEmpty(str))",
      "right" : "if (str == null || isEmpty(str))",
      "info" : "IfStatement[198055-198125]:IfStatement[198166-198236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[198088-198125]:Block[198199-198236]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[198102-198115]:ReturnStatement[198213-198226]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[198134-198156]:VariableDeclarationStatement[198245-198267]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[198165-198314]:ForStatement[198276-198425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[198194-198314]:Block[198305-198425]"
    }, {
      "left" : "if (Character.isLowerCase(str.charAt(i)) == false)",
      "right" : "if (Character.isLowerCase(str.charAt(i)) == false)",
      "info" : "IfStatement[198208-198304]:IfStatement[198319-198415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[198259-198304]:Block[198370-198415]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[198277-198290]:ReturnStatement[198388-198401]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[198323-198335]:ReturnStatement[198434-198446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199043-199339]:Block[199154-199450]"
    }, {
      "left" : "if (str == null || isEmpty(str))",
      "right" : "if (str == null || isEmpty(str))",
      "info" : "IfStatement[199053-199123]:IfStatement[199164-199234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199086-199123]:Block[199197-199234]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[199100-199113]:ReturnStatement[199211-199224]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[199132-199154]:VariableDeclarationStatement[199243-199265]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[199163-199312]:ForStatement[199274-199423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199192-199312]:Block[199303-199423]"
    }, {
      "left" : "if (Character.isUpperCase(str.charAt(i)) == false)",
      "right" : "if (Character.isUpperCase(str.charAt(i)) == false)",
      "info" : "IfStatement[199206-199302]:IfStatement[199317-199413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199257-199302]:Block[199368-199413]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[199275-199288]:ReturnStatement[199386-199399]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[199321-199333]:ReturnStatement[199432-199444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[200021-200070]:Block[200132-200181]"
    }, {
      "left" : "return str == null ? EMPTY : str;",
      "right" : "return str == null ? EMPTY : str;",
      "info" : "ReturnStatement[200031-200064]:ReturnStatement[200142-200175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[200825-200879]:Block[200936-200990]"
    }, {
      "left" : "return str == null ? defaultStr : str;",
      "right" : "return str == null ? defaultStr : str;",
      "info" : "ReturnStatement[200835-200873]:ReturnStatement[200946-200984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[201664-201731]:Block[201775-201842]"
    }, {
      "left" : "return StringUtils.isEmpty(str) ? defaultStr : str;",
      "right" : "return StringUtils.isEmpty(str) ? defaultStr : str;",
      "info" : "ReturnStatement[201674-201725]:ReturnStatement[201785-201836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[202328-202457]:Block[202439-202568]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[202338-202391]:IfStatement[202449-202502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[202355-202391]:Block[202466-202502]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[202369-202381]:ReturnStatement[202480-202492]"
    }, {
      "left" : "return new StringBuilder(str).reverse().toString();",
      "right" : "return new StringBuilder(str).reverse().toString();",
      "info" : "ReturnStatement[202400-202451]:ReturnStatement[202511-202562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203279-203583]:Block[203390-203694]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[203289-203342]:IfStatement[203400-203453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203306-203342]:Block[203417-203453]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[203320-203332]:ReturnStatement[203431-203443]"
    }, {
      "left" : "String[] strs = split(str, separatorChar);",
      "right" : "String[] strs = split(str, separatorChar);",
      "info" : "VariableDeclarationStatement[203459-203501]:VariableDeclarationStatement[203570-203612]"
    }, {
      "left" : "ArrayUtils.reverse(strs);",
      "right" : "ArrayUtils.reverse(strs);",
      "info" : "ExpressionStatement[203510-203535]:ExpressionStatement[203621-203646]"
    }, {
      "left" : "return join(strs, separatorChar);",
      "right" : "return join(strs, separatorChar);",
      "info" : "ReturnStatement[203544-203577]:ReturnStatement[203655-203688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[205133-205185]:Block[205244-205296]"
    }, {
      "left" : "return abbreviate(str, 0, maxWidth);",
      "right" : "return abbreviate(str, 0, maxWidth);",
      "info" : "ReturnStatement[205143-205179]:ReturnStatement[205254-205290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207162-208066]:Block[207273-208177]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[207172-207225]:IfStatement[207283-207336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207189-207225]:Block[207300-207336]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[207203-207215]:ReturnStatement[207314-207326]"
    }, {
      "left" : "if (maxWidth < 4)",
      "right" : "if (maxWidth < 4)",
      "info" : "IfStatement[207234-207346]:IfStatement[207345-207457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207252-207346]:Block[207363-207457]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");",
      "right" : "throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");",
      "info" : "ThrowStatement[207266-207336]:ThrowStatement[207377-207447]"
    }, {
      "left" : "if (str.length() <= maxWidth)",
      "right" : "if (str.length() <= maxWidth)",
      "info" : "IfStatement[207355-207420]:IfStatement[207466-207531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207385-207420]:Block[207496-207531]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[207399-207410]:ReturnStatement[207510-207521]"
    }, {
      "left" : "if (offset > str.length())",
      "right" : "if (offset > str.length())",
      "info" : "IfStatement[207429-207502]:IfStatement[207540-207613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207456-207502]:Block[207567-207613]"
    }, {
      "left" : "offset = str.length();",
      "right" : "offset = str.length();",
      "info" : "ExpressionStatement[207470-207492]:ExpressionStatement[207581-207603]"
    }, {
      "left" : "if ((str.length() - offset) < (maxWidth - 3))",
      "right" : "if ((str.length() - offset) < (maxWidth - 3))",
      "info" : "IfStatement[207511-207620]:IfStatement[207622-207731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207557-207620]:Block[207668-207731]"
    }, {
      "left" : "offset = str.length() - (maxWidth - 3);",
      "right" : "offset = str.length() - (maxWidth - 3);",
      "info" : "ExpressionStatement[207571-207610]:ExpressionStatement[207682-207721]"
    }, {
      "left" : "if (offset <= 4)",
      "right" : "if (offset <= 4)",
      "info" : "IfStatement[207629-207716]:IfStatement[207740-207827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207646-207716]:Block[207757-207827]"
    }, {
      "left" : "return str.substring(0, maxWidth - 3) + \"...\";",
      "right" : "return str.substring(0, maxWidth - 3) + \"...\";",
      "info" : "ReturnStatement[207660-207706]:ReturnStatement[207771-207817]"
    }, {
      "left" : "if (maxWidth < 7)",
      "right" : "if (maxWidth < 7)",
      "info" : "IfStatement[207725-207849]:IfStatement[207836-207960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207743-207849]:Block[207854-207960]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");",
      "right" : "throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");",
      "info" : "ThrowStatement[207757-207839]:ThrowStatement[207868-207950]"
    }, {
      "left" : "if ((offset + (maxWidth - 3)) < str.length())",
      "right" : "if ((offset + (maxWidth - 3)) < str.length())",
      "info" : "IfStatement[207858-207991]:IfStatement[207969-208102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207904-207991]:Block[208015-208102]"
    }, {
      "left" : "return \"...\" + abbreviate(str.substring(offset), maxWidth - 3);",
      "right" : "return \"...\" + abbreviate(str.substring(offset), maxWidth - 3);",
      "info" : "ReturnStatement[207918-207981]:ReturnStatement[208029-208092]"
    }, {
      "left" : "return \"...\" + str.substring(str.length() - (maxWidth - 3));",
      "right" : "return \"...\" + str.substring(str.length() - (maxWidth - 3));",
      "info" : "ReturnStatement[208000-208060]:ReturnStatement[208111-208171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209230-209506]:Block[209341-209617]"
    }, {
      "left" : "if (str1 == null)",
      "right" : "if (str1 == null)",
      "info" : "IfStatement[209240-209294]:IfStatement[209351-209405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209258-209294]:Block[209369-209405]"
    }, {
      "left" : "return str2;",
      "right" : "return str2;",
      "info" : "ReturnStatement[209272-209284]:ReturnStatement[209383-209395]"
    }, {
      "left" : "if (str2 == null)",
      "right" : "if (str2 == null)",
      "info" : "IfStatement[209303-209357]:IfStatement[209414-209468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209321-209357]:Block[209432-209468]"
    }, {
      "left" : "return str1;",
      "right" : "return str1;",
      "info" : "ReturnStatement[209335-209347]:ReturnStatement[209446-209458]"
    }, {
      "left" : "int at = indexOfDifference(str1, str2);",
      "right" : "int at = indexOfDifference(str1, str2);",
      "info" : "VariableDeclarationStatement[209366-209405]:VariableDeclarationStatement[209477-209516]"
    }, {
      "left" : "if (at == -1)",
      "right" : "if (at == -1)",
      "info" : "IfStatement[209414-209465]:IfStatement[209525-209576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209428-209465]:Block[209539-209576]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[209442-209455]:ReturnStatement[209553-209566]"
    }, {
      "left" : "return str2.substring(at);",
      "right" : "return str2.substring(at);",
      "info" : "ReturnStatement[209474-209500]:ReturnStatement[209585-209611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210483-210913]:Block[210594-211024]"
    }, {
      "left" : "if (str1 == str2)",
      "right" : "if (str1 == str2)",
      "info" : "IfStatement[210493-210545]:IfStatement[210604-210656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210511-210545]:Block[210622-210656]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[210525-210535]:ReturnStatement[210636-210646]"
    }, {
      "left" : "if (str1 == null || str2 == null)",
      "right" : "if (str1 == null || str2 == null)",
      "info" : "IfStatement[210554-210621]:IfStatement[210665-210732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210588-210621]:Block[210699-210732]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[210602-210611]:ReturnStatement[210713-210722]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[210630-210636]:VariableDeclarationStatement[210741-210747]"
    }, {
      "left" : "for (i = 0; i < str1.length() && i < str2.length(); ++i)",
      "right" : "for (i = 0; i < str1.length() && i < str2.length(); ++i)",
      "info" : "ForStatement[210645-210802]:ForStatement[210756-210913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210702-210802]:Block[210813-210913]"
    }, {
      "left" : "if (str1.charAt(i) != str2.charAt(i))",
      "right" : "if (str1.charAt(i) != str2.charAt(i))",
      "info" : "IfStatement[210716-210792]:IfStatement[210827-210903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210754-210792]:Block[210865-210903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[210772-210778]:BreakStatement[210883-210889]"
    }, {
      "left" : "if (i < str2.length() || i < str1.length())",
      "right" : "if (i < str2.length() || i < str1.length())",
      "info" : "IfStatement[210811-210888]:IfStatement[210922-210999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210855-210888]:Block[210966-210999]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[210869-210878]:ReturnStatement[210980-210989]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[210897-210907]:ReturnStatement[211008-211018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212601-214690]:Block[212712-214801]"
    }, {
      "left" : "if (strs == null || strs.length <= 1)",
      "right" : "if (strs == null || strs.length <= 1)",
      "info" : "IfStatement[212611-212683]:IfStatement[212722-212794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212649-212683]:Block[212760-212794]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[212663-212673]:ReturnStatement[212774-212784]"
    }, {
      "left" : "boolean anyStringNull = false;",
      "right" : "boolean anyStringNull = false;",
      "info" : "VariableDeclarationStatement[212692-212722]:VariableDeclarationStatement[212803-212833]"
    }, {
      "left" : "boolean allStringsNull = true;",
      "right" : "boolean allStringsNull = true;",
      "info" : "VariableDeclarationStatement[212731-212761]:VariableDeclarationStatement[212842-212872]"
    }, {
      "left" : "int arrayLen = strs.length;",
      "right" : "int arrayLen = strs.length;",
      "info" : "VariableDeclarationStatement[212770-212797]:VariableDeclarationStatement[212881-212908]"
    }, {
      "left" : "int shortestStrLen = Integer.MAX_VALUE;",
      "right" : "int shortestStrLen = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[212806-212845]:VariableDeclarationStatement[212917-212956]"
    }, {
      "left" : "int longestStrLen = 0;",
      "right" : "int longestStrLen = 0;",
      "info" : "VariableDeclarationStatement[212854-212876]:VariableDeclarationStatement[212965-212987]"
    }, {
      "left" : "for (int i = 0; i < arrayLen; i++)",
      "right" : "for (int i = 0; i < arrayLen; i++)",
      "info" : "ForStatement[213071-213453]:ForStatement[213182-213564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213106-213453]:Block[213217-213564]"
    }, {
      "left" : "if (strs[i] == null)",
      "right" : "if (strs[i] == null)",
      "info" : "IfStatement[213120-213443]:IfStatement[213231-213554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213141-213230]:Block[213252-213341]"
    }, {
      "left" : "anyStringNull = true;",
      "right" : "anyStringNull = true;",
      "info" : "ExpressionStatement[213159-213180]:ExpressionStatement[213270-213291]"
    }, {
      "left" : "shortestStrLen = 0;",
      "right" : "shortestStrLen = 0;",
      "info" : "ExpressionStatement[213197-213216]:ExpressionStatement[213308-213327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213236-213443]:Block[213347-213554]"
    }, {
      "left" : "allStringsNull = false;",
      "right" : "allStringsNull = false;",
      "info" : "ExpressionStatement[213254-213277]:ExpressionStatement[213365-213388]"
    }, {
      "left" : "shortestStrLen = Math.min(strs[i].length(), shortestStrLen);",
      "right" : "shortestStrLen = Math.min(strs[i].length(), shortestStrLen);",
      "info" : "ExpressionStatement[213294-213354]:ExpressionStatement[213405-213465]"
    }, {
      "left" : "longestStrLen = Math.max(strs[i].length(), longestStrLen);",
      "right" : "longestStrLen = Math.max(strs[i].length(), longestStrLen);",
      "info" : "ExpressionStatement[213371-213429]:ExpressionStatement[213482-213540]"
    }, {
      "left" : "if (allStringsNull || (longestStrLen == 0 && !anyStringNull))",
      "right" : "if (allStringsNull || (longestStrLen == 0 && !anyStringNull))",
      "info" : "IfStatement[213529-213625]:IfStatement[213640-213736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213591-213625]:Block[213702-213736]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[213605-213615]:ReturnStatement[213716-213726]"
    }, {
      "left" : "if (shortestStrLen == 0)",
      "right" : "if (shortestStrLen == 0)",
      "info" : "IfStatement[213703-213761]:IfStatement[213814-213872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213728-213761]:Block[213839-213872]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[213742-213751]:ReturnStatement[213853-213862]"
    }, {
      "left" : "int firstDiff = -1;",
      "right" : "int firstDiff = -1;",
      "info" : "VariableDeclarationStatement[213845-213864]:VariableDeclarationStatement[213956-213975]"
    }, {
      "left" : "for (int stringPos = 0; stringPos < shortestStrLen; stringPos++)",
      "right" : "for (int stringPos = 0; stringPos < shortestStrLen; stringPos++)",
      "info" : "ForStatement[213873-214328]:ForStatement[213984-214439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213938-214328]:Block[214049-214439]"
    }, {
      "left" : "char comparisonChar = strs[0].charAt(stringPos);",
      "right" : "char comparisonChar = strs[0].charAt(stringPos);",
      "info" : "VariableDeclarationStatement[213952-214000]:VariableDeclarationStatement[214063-214111]"
    }, {
      "left" : "for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++)",
      "right" : "for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++)",
      "info" : "ForStatement[214013-214246]:ForStatement[214124-214357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214069-214246]:Block[214180-214357]"
    }, {
      "left" : "if (strs[arrayPos].charAt(stringPos) != comparisonChar)",
      "right" : "if (strs[arrayPos].charAt(stringPos) != comparisonChar)",
      "info" : "IfStatement[214087-214232]:IfStatement[214198-214343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214143-214232]:Block[214254-214343]"
    }, {
      "left" : "firstDiff = stringPos;",
      "right" : "firstDiff = stringPos;",
      "info" : "ExpressionStatement[214165-214187]:ExpressionStatement[214276-214298]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[214208-214214]:BreakStatement[214319-214325]"
    }, {
      "left" : "if (firstDiff != -1)",
      "right" : "if (firstDiff != -1)",
      "info" : "IfStatement[214259-214318]:IfStatement[214370-214429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214280-214318]:Block[214391-214429]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[214298-214304]:BreakStatement[214409-214415]"
    }, {
      "left" : "if (firstDiff == -1 && shortestStrLen != longestStrLen)",
      "right" : "if (firstDiff == -1 && shortestStrLen != longestStrLen)",
      "info" : "IfStatement[214338-214658]:IfStatement[214449-214769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214394-214658]:Block[214505-214769]"
    }, {
      "left" : "return shortestStrLen;",
      "right" : "return shortestStrLen;",
      "info" : "ReturnStatement[214626-214648]:ReturnStatement[214737-214759]"
    }, {
      "left" : "return firstDiff;",
      "right" : "return firstDiff;",
      "info" : "ReturnStatement[214667-214684]:ReturnStatement[214778-214795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216530-217147]:Block[216641-217258]"
    }, {
      "left" : "if (strs == null || strs.length == 0)",
      "right" : "if (strs == null || strs.length == 0)",
      "info" : "IfStatement[216540-216615]:IfStatement[216651-216726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216578-216615]:Block[216689-216726]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[216592-216605]:ReturnStatement[216703-216716]"
    }, {
      "left" : "int smallestIndexOfDiff = indexOfDifference(strs);",
      "right" : "int smallestIndexOfDiff = indexOfDifference(strs);",
      "info" : "VariableDeclarationStatement[216624-216674]:VariableDeclarationStatement[216735-216785]"
    }, {
      "left" : "if (smallestIndexOfDiff == -1)",
      "right" : "if (smallestIndexOfDiff == -1)",
      "info" : "IfStatement[216683-217141]:IfStatement[216794-217252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216714-216874]:Block[216825-216985]"
    }, {
      "left" : "if (strs[0] == null)",
      "right" : "if (strs[0] == null)",
      "info" : "IfStatement[216770-216836]:IfStatement[216881-216947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216791-216836]:Block[216902-216947]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[216809-216822]:ReturnStatement[216920-216933]"
    }, {
      "left" : "return strs[0];",
      "right" : "return strs[0];",
      "info" : "ReturnStatement[216849-216864]:ReturnStatement[216960-216975]"
    }, {
      "left" : "if (smallestIndexOfDiff == 0)",
      "right" : "if (smallestIndexOfDiff == 0)",
      "info" : "IfStatement[216880-217141]:IfStatement[216991-217252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216910-217002]:Block[217021-217113]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[216979-216992]:ReturnStatement[217090-217103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[217008-217141]:Block[217119-217252]"
    }, {
      "left" : "return strs[0].substring(0, smallestIndexOfDiff);",
      "right" : "return strs[0].substring(0, smallestIndexOfDiff);",
      "info" : "ReturnStatement[217082-217131]:ReturnStatement[217193-217242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219180-222020]:Block[219291-222131]"
    }, {
      "left" : "if (s == null || t == null)",
      "right" : "if (s == null || t == null)",
      "info" : "IfStatement[219190-219305]:IfStatement[219301-219416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219218-219305]:Block[219329-219416]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "info" : "ThrowStatement[219232-219295]:ThrowStatement[219343-219406]"
    }, {
      "left" : "int n = s.length();",
      "right" : "int n = s.length();",
      "info" : "VariableDeclarationStatement[220523-220542]:VariableDeclarationStatement[220634-220653]"
    }, {
      "left" : "int m = t.length();",
      "right" : "int m = t.length();",
      "info" : "VariableDeclarationStatement[220566-220585]:VariableDeclarationStatement[220677-220696]"
    }, {
      "left" : "if (n == 0)",
      "right" : "if (n == 0)",
      "info" : "IfStatement[220610-220706]:IfStatement[220721-220817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220622-220655]:Block[220733-220766]"
    }, {
      "left" : "return m;",
      "right" : "return m;",
      "info" : "ReturnStatement[220636-220645]:ReturnStatement[220747-220756]"
    }, {
      "left" : "if (m == 0)",
      "right" : "if (m == 0)",
      "info" : "IfStatement[220661-220706]:IfStatement[220772-220817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220673-220706]:Block[220784-220817]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[220687-220696]:ReturnStatement[220798-220807]"
    }, {
      "left" : "if (n > m)",
      "right" : "if (n > m)",
      "info" : "IfStatement[220716-220914]:IfStatement[220827-221025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220727-220914]:Block[220838-221025]"
    }, {
      "left" : "String tmp = s;",
      "right" : "String tmp = s;",
      "info" : "VariableDeclarationStatement[220802-220817]:VariableDeclarationStatement[220913-220928]"
    }, {
      "left" : "s = t;",
      "right" : "s = t;",
      "info" : "ExpressionStatement[220830-220836]:ExpressionStatement[220941-220947]"
    }, {
      "left" : "t = tmp;",
      "right" : "t = tmp;",
      "info" : "ExpressionStatement[220849-220857]:ExpressionStatement[220960-220968]"
    }, {
      "left" : "n = m;",
      "right" : "n = m;",
      "info" : "ExpressionStatement[220870-220876]:ExpressionStatement[220981-220987]"
    }, {
      "left" : "m = t.length();",
      "right" : "m = t.length();",
      "info" : "ExpressionStatement[220889-220904]:ExpressionStatement[221000-221015]"
    }, {
      "left" : "int p[] = new int[n+1];",
      "right" : "int p[] = new int[n+1];",
      "info" : "VariableDeclarationStatement[220924-220947]:VariableDeclarationStatement[221035-221058]"
    }, {
      "left" : "int d[] = new int[n+1];",
      "right" : "int d[] = new int[n+1];",
      "info" : "VariableDeclarationStatement[220994-221017]:VariableDeclarationStatement[221105-221128]"
    }, {
      "left" : "int _d[];",
      "right" : "int _d[];",
      "info" : "VariableDeclarationStatement[221054-221063]:VariableDeclarationStatement[221165-221174]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[221157-221163]:VariableDeclarationStatement[221268-221274]"
    }, {
      "left" : "int j;",
      "right" : "int j;",
      "info" : "VariableDeclarationStatement[221194-221200]:VariableDeclarationStatement[221305-221311]"
    }, {
      "left" : "char t_j;",
      "right" : "char t_j;",
      "info" : "VariableDeclarationStatement[221232-221241]:VariableDeclarationStatement[221343-221352]"
    }, {
      "left" : "int cost;",
      "right" : "int cost;",
      "info" : "VariableDeclarationStatement[221273-221282]:VariableDeclarationStatement[221384-221393]"
    }, {
      "left" : "for (i = 0; i<=n; i++)",
      "right" : "for (i = 0; i<=n; i++)",
      "info" : "ForStatement[221300-221356]:ForStatement[221411-221467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221323-221356]:Block[221434-221467]"
    }, {
      "left" : "p[i] = i;",
      "right" : "p[i] = i;",
      "info" : "ExpressionStatement[221337-221346]:ExpressionStatement[221448-221457]"
    }, {
      "left" : "for (j = 1; j<=m; j++)",
      "right" : "for (j = 1; j<=m; j++)",
      "info" : "ForStatement[221366-221862]:ForStatement[221477-221973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221389-221862]:Block[221500-221973]"
    }, {
      "left" : "t_j = t.charAt(j-1);",
      "right" : "t_j = t.charAt(j-1);",
      "info" : "ExpressionStatement[221403-221423]:ExpressionStatement[221514-221534]"
    }, {
      "left" : "d[0] = j;",
      "right" : "d[0] = j;",
      "info" : "ExpressionStatement[221436-221445]:ExpressionStatement[221547-221556]"
    }, {
      "left" : "for (i=1; i<=n; i++)",
      "right" : "for (i=1; i<=n; i++)",
      "info" : "ForStatement[221459-221714]:ForStatement[221570-221825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221480-221714]:Block[221591-221825]"
    }, {
      "left" : "cost = s.charAt(i-1)==t_j ? 0 : 1;",
      "right" : "cost = s.charAt(i-1)==t_j ? 0 : 1;",
      "info" : "ExpressionStatement[221498-221532]:ExpressionStatement[221609-221643]"
    }, {
      "left" : "d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);",
      "right" : "d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);",
      "info" : "ExpressionStatement[221642-221700]:ExpressionStatement[221753-221811]"
    }, {
      "left" : "_d = p;",
      "right" : "_d = p;",
      "info" : "ExpressionStatement[221806-221813]:ExpressionStatement[221917-221924]"
    }, {
      "left" : "p = d;",
      "right" : "p = d;",
      "info" : "ExpressionStatement[221826-221832]:ExpressionStatement[221937-221943]"
    }, {
      "left" : "d = _d;",
      "right" : "d = _d;",
      "info" : "ExpressionStatement[221845-221852]:ExpressionStatement[221956-221963]"
    }, {
      "left" : "return p[n];",
      "right" : "return p[n];",
      "info" : "ReturnStatement[222002-222014]:ReturnStatement[222113-222125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[223506-223560]:Block[223617-223671]"
    }, {
      "left" : "return startsWith(str, prefix, false);",
      "right" : "return startsWith(str, prefix, false);",
      "info" : "ReturnStatement[223516-223554]:ReturnStatement[223627-223665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[224566-224619]:Block[224677-224730]"
    }, {
      "left" : "return startsWith(str, prefix, true);",
      "right" : "return startsWith(str, prefix, true);",
      "info" : "ReturnStatement[224576-224613]:ReturnStatement[224687-224724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225190-225463]:Block[225301-225574]"
    }, {
      "left" : "if (str == null || prefix == null)",
      "right" : "if (str == null || prefix == null)",
      "info" : "IfStatement[225200-225298]:IfStatement[225311-225409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225235-225298]:Block[225346-225409]"
    }, {
      "left" : "return (str == null && prefix == null);",
      "right" : "return (str == null && prefix == null);",
      "info" : "ReturnStatement[225249-225288]:ReturnStatement[225360-225399]"
    }, {
      "left" : "if (prefix.length() > str.length())",
      "right" : "if (prefix.length() > str.length())",
      "info" : "IfStatement[225307-225380]:IfStatement[225418-225491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225343-225380]:Block[225454-225491]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[225357-225370]:ReturnStatement[225468-225481]"
    }, {
      "left" : "return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());",
      "right" : "return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());",
      "info" : "ReturnStatement[225389-225457]:ReturnStatement[225500-225568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226383-226742]:Block[226494-226853]"
    }, {
      "left" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "right" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "info" : "IfStatement[226393-226488]:IfStatement[226504-226599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226451-226488]:Block[226562-226599]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[226465-226478]:ReturnStatement[226576-226589]"
    }, {
      "left" : "for (int i = 0; i < searchStrings.length; i++)",
      "right" : "for (int i = 0; i < searchStrings.length; i++)",
      "info" : "ForStatement[226497-226714]:ForStatement[226608-226825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226544-226714]:Block[226655-226825]"
    }, {
      "left" : "String searchString = searchStrings[i];",
      "right" : "String searchString = searchStrings[i];",
      "info" : "VariableDeclarationStatement[226558-226597]:VariableDeclarationStatement[226669-226708]"
    }, {
      "left" : "if (StringUtils.startsWith(string, searchString))",
      "right" : "if (StringUtils.startsWith(string, searchString))",
      "info" : "IfStatement[226610-226704]:IfStatement[226721-226815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226660-226704]:Block[226771-226815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[226678-226690]:ReturnStatement[226789-226801]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[226723-226736]:ReturnStatement[226834-226847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[227798-227850]:Block[227909-227961]"
    }, {
      "left" : "return endsWith(str, suffix, false);",
      "right" : "return endsWith(str, suffix, false);",
      "info" : "ReturnStatement[227808-227844]:ReturnStatement[227919-227955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[228901-228952]:Block[229012-229063]"
    }, {
      "left" : "return endsWith(str, suffix, true);",
      "right" : "return endsWith(str, suffix, true);",
      "info" : "ReturnStatement[228911-228946]:ReturnStatement[229022-229057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[229517-229854]:Block[229628-229965]"
    }, {
      "left" : "if (str == null || suffix == null)",
      "right" : "if (str == null || suffix == null)",
      "info" : "IfStatement[229527-229625]:IfStatement[229638-229736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[229562-229625]:Block[229673-229736]"
    }, {
      "left" : "return (str == null && suffix == null);",
      "right" : "return (str == null && suffix == null);",
      "info" : "ReturnStatement[229576-229615]:ReturnStatement[229687-229726]"
    }, {
      "left" : "if (suffix.length() > str.length())",
      "right" : "if (suffix.length() > str.length())",
      "info" : "IfStatement[229634-229707]:IfStatement[229745-229818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[229670-229707]:Block[229781-229818]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[229684-229697]:ReturnStatement[229795-229808]"
    }, {
      "left" : "int strOffset = str.length() - suffix.length();",
      "right" : "int strOffset = str.length() - suffix.length();",
      "info" : "VariableDeclarationStatement[229716-229763]:VariableDeclarationStatement[229827-229874]"
    }, {
      "left" : "return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());",
      "right" : "return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());",
      "info" : "ReturnStatement[229772-229848]:ReturnStatement[229883-229959]"
    } ]
  },
  "interFileMappings" : { }
}