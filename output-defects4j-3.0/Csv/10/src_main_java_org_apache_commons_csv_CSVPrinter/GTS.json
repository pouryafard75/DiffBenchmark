{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "TypeDeclaration[1185-14829]:TypeDeclaration[1185-14942]"
    }, {
      "left" : "private final Appendable out;",
      "right" : "private final Appendable out;",
      "info" : "FieldDeclaration[1316-1395]:FieldDeclaration[1316-1395]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[1400-1431]:FieldDeclaration[1400-1431]"
    }, {
      "left" : "private boolean newRecord = true;",
      "right" : "private boolean newRecord = true;",
      "info" : "FieldDeclaration[1437-1517]:FieldDeclaration[1437-1517]"
    }, {
      "left" : "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException",
      "right" : "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[1523-2693]:MethodDeclaration[1523-2806]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[2855-2990]:MethodDeclaration[2968-3103]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[2996-3261]:MethodDeclaration[3109-3374]"
    }, {
      "left" : "public void print(final Object value) throws IOException",
      "right" : "public void print(final Object value) throws IOException",
      "info" : "MethodDeclaration[3267-3951]:MethodDeclaration[3380-4064]"
    }, {
      "left" : "private void print(final Object object, final CharSequence value,\n            final int offset, final int len) throws IOException",
      "right" : "private void print(final Object object, final CharSequence value,\n            final int offset, final int len) throws IOException",
      "info" : "MethodDeclaration[3957-4532]:MethodDeclaration[4070-4645]"
    }, {
      "left" : "private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException",
      "right" : "private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException",
      "info" : "MethodDeclaration[4638-5696]:MethodDeclaration[4751-5809]"
    }, {
      "left" : "private void printAndQuote(final Object object, final CharSequence value,\n            final int offset, final int len) throws IOException",
      "right" : "private void printAndQuote(final Object object, final CharSequence value,\n            final int offset, final int len) throws IOException",
      "info" : "MethodDeclaration[5862-9986]:MethodDeclaration[5975-10099]"
    }, {
      "left" : "public void printComment(final String comment) throws IOException",
      "right" : "public void printComment(final String comment) throws IOException",
      "info" : "MethodDeclaration[9992-11459]:MethodDeclaration[10105-11572]"
    }, {
      "left" : "public void println() throws IOException",
      "right" : "public void println() throws IOException",
      "info" : "MethodDeclaration[11465-11826]:MethodDeclaration[11578-11939]"
    }, {
      "left" : "public void printRecord(final Iterable<?> values) throws IOException",
      "right" : "public void printRecord(final Iterable<?> values) throws IOException",
      "info" : "MethodDeclaration[11832-12306]:MethodDeclaration[11945-12419]"
    }, {
      "left" : "public void printRecord(final Object... values) throws IOException",
      "right" : "public void printRecord(final Object... values) throws IOException",
      "info" : "MethodDeclaration[12312-12784]:MethodDeclaration[12425-12897]"
    }, {
      "left" : "public void printRecords(final Iterable<?> values) throws IOException",
      "right" : "public void printRecords(final Iterable<?> values) throws IOException",
      "info" : "MethodDeclaration[12790-13408]:MethodDeclaration[12903-13521]"
    }, {
      "left" : "public void printRecords(final Object[] values) throws IOException",
      "right" : "public void printRecords(final Object[] values) throws IOException",
      "info" : "MethodDeclaration[13414-14024]:MethodDeclaration[13527-14137]"
    }, {
      "left" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
      "right" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
      "info" : "MethodDeclaration[14030-14666]:MethodDeclaration[14143-14779]"
    }, {
      "left" : "public Appendable getOut()",
      "right" : "public Appendable getOut()",
      "info" : "MethodDeclaration[14672-14827]:MethodDeclaration[14785-14940]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1247-1253]:Modifier[1247-1253]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1254-1259]:Modifier[1254-1259]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1260-1265]:TYPE_DECLARATION_KIND[1260-1265]"
    }, {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "SimpleName[1266-1276]:SimpleName[1266-1276]"
    }, {
      "left" : "Flushable",
      "right" : "Flushable",
      "info" : "SimpleType[1288-1297]:SimpleType[1288-1297]"
    }, {
      "left" : "Closeable",
      "right" : "Closeable",
      "info" : "SimpleType[1299-1308]:SimpleType[1299-1308]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2235-2241]:Modifier[2235-2241]"
    }, {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "SimpleName[2242-2252]:SimpleName[2242-2252]"
    }, {
      "left" : "final Appendable out",
      "right" : "final Appendable out",
      "info" : "SingleVariableDeclaration[2253-2273]:SingleVariableDeclaration[2253-2273]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[2275-2297]:SingleVariableDeclaration[2275-2297]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2306-2317]:SimpleType[2306-2317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2693]:Block[2318-2806]"
    }, {
      "left" : "Assertions.notNull(out, \"out\");",
      "right" : "Assertions.notNull(out, \"out\");",
      "info" : "ExpressionStatement[2328-2359]:ExpressionStatement[2328-2359]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[2368-2405]:ExpressionStatement[2368-2405]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[2415-2430]:ExpressionStatement[2415-2430]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[2439-2460]:ExpressionStatement[2439-2460]"
    }, {
      "left" : "this.format.validate();",
      "right" : "this.format.validate();",
      "info" : "ExpressionStatement[2469-2492]:ExpressionStatement[2469-2492]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2855-2861]:Modifier[2968-2974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2862-2866]:PrimitiveType[2975-2979]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[2867-2872]:SimpleName[2980-2985]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2882-2893]:SimpleType[2995-3006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2894-2990]:Block[3007-3103]"
    }, {
      "left" : "if (out instanceof Closeable)",
      "right" : "if (out instanceof Closeable)",
      "info" : "IfStatement[2904-2984]:IfStatement[3017-3097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2934-2984]:Block[3047-3097]"
    }, {
      "left" : "((Closeable) out).close();",
      "right" : "((Closeable) out).close();",
      "info" : "ExpressionStatement[2948-2974]:ExpressionStatement[3061-3087]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3126-3132]:Modifier[3239-3245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3133-3137]:PrimitiveType[3246-3250]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[3138-3143]:SimpleName[3251-3256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3153-3164]:SimpleType[3266-3277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3165-3261]:Block[3278-3374]"
    }, {
      "left" : "if (out instanceof Flushable)",
      "right" : "if (out instanceof Flushable)",
      "info" : "IfStatement[3175-3255]:IfStatement[3288-3368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3205-3255]:Block[3318-3368]"
    }, {
      "left" : "((Flushable) out).flush();",
      "right" : "((Flushable) out).flush();",
      "info" : "ExpressionStatement[3219-3245]:ExpressionStatement[3332-3358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3526-3532]:Modifier[3639-3645]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3533-3537]:PrimitiveType[3646-3650]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[3538-3543]:SimpleName[3651-3656]"
    }, {
      "left" : "final Object value",
      "right" : "final Object value",
      "info" : "SingleVariableDeclaration[3544-3562]:SingleVariableDeclaration[3657-3675]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3571-3582]:SimpleType[3684-3695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3583-3951]:Block[3696-4064]"
    }, {
      "left" : "String strValue;",
      "right" : "String strValue;",
      "info" : "VariableDeclarationStatement[3637-3653]:VariableDeclarationStatement[3750-3766]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[3662-3886]:IfStatement[3775-3999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3681-3828]:Block[3794-3941]"
    }, {
      "left" : "final String nullString = format.getNullString();",
      "right" : "final String nullString = format.getNullString();",
      "info" : "VariableDeclarationStatement[3695-3744]:VariableDeclarationStatement[3808-3857]"
    }, {
      "left" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
      "right" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
      "info" : "ExpressionStatement[3757-3818]:ExpressionStatement[3870-3931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3834-3886]:Block[3947-3999]"
    }, {
      "left" : "strValue = value.toString();",
      "right" : "strValue = value.toString();",
      "info" : "ExpressionStatement[3848-3876]:ExpressionStatement[3961-3989]"
    }, {
      "left" : "this.print(value, strValue, 0, strValue.length());",
      "right" : "this.print(value, strValue, 0, strValue.length());",
      "info" : "ExpressionStatement[3895-3945]:ExpressionStatement[4008-4058]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3957-3964]:Modifier[4070-4077]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3965-3969]:PrimitiveType[4078-4082]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[3970-3975]:SimpleName[4083-4088]"
    }, {
      "left" : "final Object object",
      "right" : "final Object object",
      "info" : "SingleVariableDeclaration[3976-3995]:SingleVariableDeclaration[4089-4108]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[3997-4021]:SingleVariableDeclaration[4110-4134]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[4035-4051]:SingleVariableDeclaration[4148-4164]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[4053-4066]:SingleVariableDeclaration[4166-4179]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4075-4086]:SimpleType[4188-4199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4087-4532]:Block[4200-4645]"
    }, {
      "left" : "if (!newRecord)",
      "right" : "if (!newRecord)",
      "info" : "IfStatement[4097-4171]:IfStatement[4210-4284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4113-4171]:Block[4226-4284]"
    }, {
      "left" : "out.append(format.getDelimiter());",
      "right" : "out.append(format.getDelimiter());",
      "info" : "ExpressionStatement[4127-4161]:ExpressionStatement[4240-4274]"
    }, {
      "left" : "if (format.isQuoting())",
      "right" : "if (format.isQuoting())",
      "info" : "IfStatement[4180-4499]:IfStatement[4293-4612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4204-4339]:Block[4317-4452]"
    }, {
      "left" : "printAndQuote(object, value, offset, len);",
      "right" : "printAndQuote(object, value, offset, len);",
      "info" : "ExpressionStatement[4287-4329]:ExpressionStatement[4400-4442]"
    }, {
      "left" : "if (format.isEscaping())",
      "right" : "if (format.isEscaping())",
      "info" : "IfStatement[4345-4499]:IfStatement[4458-4612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4370-4429]:Block[4483-4542]"
    }, {
      "left" : "printAndEscape(value, offset, len);",
      "right" : "printAndEscape(value, offset, len);",
      "info" : "ExpressionStatement[4384-4419]:ExpressionStatement[4497-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4435-4499]:Block[4548-4612]"
    }, {
      "left" : "out.append(value, offset, offset + len);",
      "right" : "out.append(value, offset, offset + len);",
      "info" : "ExpressionStatement[4449-4489]:ExpressionStatement[4562-4602]"
    }, {
      "left" : "newRecord = false;",
      "right" : "newRecord = false;",
      "info" : "ExpressionStatement[4508-4526]:ExpressionStatement[4621-4639]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4638-4645]:Modifier[4751-4758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4646-4650]:PrimitiveType[4759-4763]"
    }, {
      "left" : "printAndEscape",
      "right" : "printAndEscape",
      "info" : "SimpleName[4651-4665]:SimpleName[4764-4778]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[4666-4690]:SingleVariableDeclaration[4779-4803]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[4692-4708]:SingleVariableDeclaration[4805-4821]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[4710-4723]:SingleVariableDeclaration[4823-4836]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4732-4743]:SimpleType[4845-4856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4744-5696]:Block[4857-5809]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[4754-4773]:VariableDeclarationStatement[4867-4886]"
    }, {
      "left" : "int pos = offset;",
      "right" : "int pos = offset;",
      "info" : "VariableDeclarationStatement[4782-4799]:VariableDeclarationStatement[4895-4912]"
    }, {
      "left" : "final int end = offset + len;",
      "right" : "final int end = offset + len;",
      "info" : "VariableDeclarationStatement[4808-4837]:VariableDeclarationStatement[4921-4950]"
    }, {
      "left" : "final char delim = format.getDelimiter();",
      "right" : "final char delim = format.getDelimiter();",
      "info" : "VariableDeclarationStatement[4847-4888]:VariableDeclarationStatement[4960-5001]"
    }, {
      "left" : "final char escape = format.getEscape().charValue();",
      "right" : "final char escape = format.getEscape().charValue();",
      "info" : "VariableDeclarationStatement[4897-4948]:VariableDeclarationStatement[5010-5061]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[4958-5579]:WhileStatement[5071-5692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4976-5579]:Block[5089-5692]"
    }, {
      "left" : "char c = value.charAt(pos);",
      "right" : "char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[4990-5017]:VariableDeclarationStatement[5103-5130]"
    }, {
      "left" : "if (c == CR || c == LF || c == delim || c == escape)",
      "right" : "if (c == CR || c == LF || c == delim || c == escape)",
      "info" : "IfStatement[5030-5549]:IfStatement[5143-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5083-5549]:Block[5196-5662]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[5157-5244]:IfStatement[5270-5357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5174-5244]:Block[5287-5357]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[5196-5226]:ExpressionStatement[5309-5339]"
    }, {
      "left" : "if (c == LF)",
      "right" : "if (c == LF)",
      "info" : "IfStatement[5261-5389]:IfStatement[5374-5502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5274-5322]:Block[5387-5435]"
    }, {
      "left" : "c = 'n';",
      "right" : "c = 'n';",
      "info" : "ExpressionStatement[5296-5304]:ExpressionStatement[5409-5417]"
    }, {
      "left" : "if (c == CR)",
      "right" : "if (c == CR)",
      "info" : "IfStatement[5328-5389]:IfStatement[5441-5502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5341-5389]:Block[5454-5502]"
    }, {
      "left" : "c = 'r';",
      "right" : "c = 'r';",
      "info" : "ExpressionStatement[5363-5371]:ExpressionStatement[5476-5484]"
    }, {
      "left" : "out.append(escape);",
      "right" : "out.append(escape);",
      "info" : "ExpressionStatement[5407-5426]:ExpressionStatement[5520-5539]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[5443-5457]:ExpressionStatement[5556-5570]"
    }, {
      "left" : "start = pos + 1;",
      "right" : "start = pos + 1;",
      "info" : "ExpressionStatement[5475-5491]:ExpressionStatement[5588-5604]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[5563-5569]:ExpressionStatement[5676-5682]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[5619-5690]:IfStatement[5732-5803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5636-5690]:Block[5749-5803]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[5650-5680]:ExpressionStatement[5763-5793]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5862-5869]:Modifier[5975-5982]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5870-5874]:PrimitiveType[5983-5987]"
    }, {
      "left" : "printAndQuote",
      "right" : "printAndQuote",
      "info" : "SimpleName[5875-5888]:SimpleName[5988-6001]"
    }, {
      "left" : "final Object object",
      "right" : "final Object object",
      "info" : "SingleVariableDeclaration[5889-5908]:SingleVariableDeclaration[6002-6021]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[5910-5934]:SingleVariableDeclaration[6023-6047]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[5948-5964]:SingleVariableDeclaration[6061-6077]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[5966-5979]:SingleVariableDeclaration[6079-6092]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5988-5999]:SimpleType[6101-6112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6000-9986]:Block[6113-10099]"
    }, {
      "left" : "boolean quote = false;",
      "right" : "boolean quote = false;",
      "info" : "VariableDeclarationStatement[6010-6032]:VariableDeclarationStatement[6123-6145]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[6041-6060]:VariableDeclarationStatement[6154-6173]"
    }, {
      "left" : "int pos = offset;",
      "right" : "int pos = offset;",
      "info" : "VariableDeclarationStatement[6069-6086]:VariableDeclarationStatement[6182-6199]"
    }, {
      "left" : "final int end = offset + len;",
      "right" : "final int end = offset + len;",
      "info" : "VariableDeclarationStatement[6095-6124]:VariableDeclarationStatement[6208-6237]"
    }, {
      "left" : "final char delimChar = format.getDelimiter();",
      "right" : "final char delimChar = format.getDelimiter();",
      "info" : "VariableDeclarationStatement[6134-6179]:VariableDeclarationStatement[6247-6292]"
    }, {
      "left" : "final char quoteChar = format.getQuoteChar().charValue();",
      "right" : "final char quoteChar = format.getQuoteChar().charValue();",
      "info" : "VariableDeclarationStatement[6188-6245]:VariableDeclarationStatement[6301-6358]"
    }, {
      "left" : "Quote quotePolicy = format.getQuotePolicy();",
      "right" : "Quote quotePolicy = format.getQuotePolicy();",
      "info" : "VariableDeclarationStatement[6255-6299]:VariableDeclarationStatement[6368-6412]"
    }, {
      "left" : "if (quotePolicy == null)",
      "right" : "if (quotePolicy == null)",
      "info" : "IfStatement[6308-6385]:IfStatement[6421-6498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6333-6385]:Block[6446-6498]"
    }, {
      "left" : "quotePolicy = Quote.MINIMAL;",
      "right" : "quotePolicy = Quote.MINIMAL;",
      "info" : "ExpressionStatement[6347-6375]:ExpressionStatement[6460-6488]"
    }, {
      "left" : "switch (quotePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Hmmm, where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                    // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // if (c == ' ' || c == '\\f' || c == '\\t') {\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n        }",
      "right" : "switch (quotePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Hmmm, where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                    // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // if (c == ' ' || c == '\\f' || c == '\\t') {\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n        }",
      "info" : "SwitchStatement[6394-8954]:SwitchStatement[6507-9067]"
    }, {
      "left" : "case ALL:",
      "right" : "case ALL:",
      "info" : "SwitchCase[6425-6434]:SwitchCase[6538-6547]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[6447-6460]:ExpressionStatement[6560-6573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6473-6479]:BreakStatement[6586-6592]"
    }, {
      "left" : "case NON_NUMERIC:",
      "right" : "case NON_NUMERIC:",
      "info" : "SwitchCase[6488-6505]:SwitchCase[6601-6618]"
    }, {
      "left" : "quote = !(object instanceof Number);",
      "right" : "quote = !(object instanceof Number);",
      "info" : "ExpressionStatement[6518-6554]:ExpressionStatement[6631-6667]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6567-6573]:BreakStatement[6680-6686]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[6582-6592]:SwitchCase[6695-6705]"
    }, {
      "left" : "printAndEscape(value, offset, len);",
      "right" : "printAndEscape(value, offset, len);",
      "info" : "ExpressionStatement[6651-6686]:ExpressionStatement[6764-6799]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6699-6706]:ReturnStatement[6812-6819]"
    }, {
      "left" : "case MINIMAL:",
      "right" : "case MINIMAL:",
      "info" : "SwitchCase[6715-6728]:SwitchCase[6828-6841]"
    }, {
      "left" : "if (len <= 0)",
      "right" : "if (len <= 0)",
      "info" : "IfStatement[6741-8635]:IfStatement[6854-8748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6755-7096]:Block[6868-7209]"
    }, {
      "left" : "if (newRecord)",
      "right" : "if (newRecord)",
      "info" : "IfStatement[7014-7082]:IfStatement[7127-7195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7029-7082]:Block[7142-7195]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7051-7064]:ExpressionStatement[7164-7177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-8635]:Block[7215-8748]"
    }, {
      "left" : "char c = value.charAt(pos);",
      "right" : "char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[7120-7147]:VariableDeclarationStatement[7233-7260]"
    }, {
      "left" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
      "right" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
      "info" : "IfStatement[7221-8621]:IfStatement[7334-8734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7310-7435]:Block[7423-7548]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7332-7345]:ExpressionStatement[7445-7458]"
    }, {
      "left" : "if (c <= COMMENT)",
      "right" : "if (c <= COMMENT)",
      "info" : "IfStatement[7441-8621]:IfStatement[7554-8734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7459-7780]:Block[7572-7893]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7749-7762]:ExpressionStatement[7862-7875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7786-8621]:Block[7899-8734]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[7808-8116]:WhileStatement[7921-8229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7826-8116]:Block[7939-8229]"
    }, {
      "left" : "c = value.charAt(pos);",
      "right" : "c = value.charAt(pos);",
      "info" : "ExpressionStatement[7852-7874]:ExpressionStatement[7965-7987]"
    }, {
      "left" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
      "right" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
      "info" : "IfStatement[7899-8063]:IfStatement[8012-8176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7959-8063]:Block[8072-8176]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7989-8002]:ExpressionStatement[8102-8115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8031-8037]:BreakStatement[8144-8150]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[8088-8094]:ExpressionStatement[8201-8207]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[8138-8603]:IfStatement[8251-8716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8150-8603]:Block[8263-8716]"
    }, {
      "left" : "pos = end - 1;",
      "right" : "pos = end - 1;",
      "info" : "ExpressionStatement[8176-8190]:ExpressionStatement[8289-8303]"
    }, {
      "left" : "c = value.charAt(pos);",
      "right" : "c = value.charAt(pos);",
      "info" : "ExpressionStatement[8215-8237]:ExpressionStatement[8328-8350]"
    }, {
      "left" : "if (c <= SP)",
      "right" : "if (c <= SP)",
      "info" : "IfStatement[8499-8581]:IfStatement[8612-8694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8512-8581]:Block[8625-8694]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[8542-8555]:ExpressionStatement[8655-8668]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[8649-8821]:IfStatement[8762-8934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8661-8821]:Block[8774-8934]"
    }, {
      "left" : "out.append(value, start, end);",
      "right" : "out.append(value, start, end);",
      "info" : "ExpressionStatement[8753-8783]:ExpressionStatement[8866-8896]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8800-8807]:ReturnStatement[8913-8920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8834-8840]:BreakStatement[8947-8953]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8849-8857]:SwitchCase[8962-8970]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);",
      "right" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);",
      "info" : "ThrowStatement[8870-8944]:ThrowStatement[8983-9057]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[8964-9120]:IfStatement[9077-9233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8976-9120]:Block[9089-9233]"
    }, {
      "left" : "out.append(value, start, end);",
      "right" : "out.append(value, start, end);",
      "info" : "ExpressionStatement[9060-9090]:ExpressionStatement[9173-9203]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9103-9110]:ReturnStatement[9216-9223]"
    }, {
      "left" : "out.append(quoteChar);",
      "right" : "out.append(quoteChar);",
      "info" : "ExpressionStatement[9184-9206]:ExpressionStatement[9297-9319]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[9353-9875]:WhileStatement[9466-9988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9371-9875]:Block[9484-9988]"
    }, {
      "left" : "final char c = value.charAt(pos);",
      "right" : "final char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[9385-9418]:VariableDeclarationStatement[9498-9531]"
    }, {
      "left" : "if (c == quoteChar)",
      "right" : "if (c == quoteChar)",
      "info" : "IfStatement[9431-9846]:IfStatement[9544-9959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9451-9846]:Block[9564-9959]"
    }, {
      "left" : "out.append(value, start, pos + 1);",
      "right" : "out.append(value, start, pos + 1);",
      "info" : "ExpressionStatement[9603-9637]:ExpressionStatement[9716-9750]"
    }, {
      "left" : "start = pos;",
      "right" : "start = pos;",
      "info" : "ExpressionStatement[9820-9832]:ExpressionStatement[9933-9945]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[9859-9865]:ExpressionStatement[9972-9978]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[9919-9949]:ExpressionStatement[10032-10062]"
    }, {
      "left" : "out.append(quoteChar);",
      "right" : "out.append(quoteChar);",
      "info" : "ExpressionStatement[9958-9980]:ExpressionStatement[10071-10093]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10553-10559]:Modifier[10666-10672]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10560-10564]:PrimitiveType[10673-10677]"
    }, {
      "left" : "printComment",
      "right" : "printComment",
      "info" : "SimpleName[10565-10577]:SimpleName[10678-10690]"
    }, {
      "left" : "final String comment",
      "right" : "final String comment",
      "info" : "SingleVariableDeclaration[10578-10598]:SingleVariableDeclaration[10691-10711]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10607-10618]:SimpleType[10720-10731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10619-11459]:Block[10732-11572]"
    }, {
      "left" : "if (!format.isCommentingEnabled())",
      "right" : "if (!format.isCommentingEnabled())",
      "info" : "IfStatement[10629-10695]:IfStatement[10742-10808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10664-10695]:Block[10777-10808]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10678-10685]:ReturnStatement[10791-10798]"
    }, {
      "left" : "if (!newRecord)",
      "right" : "if (!newRecord)",
      "info" : "IfStatement[10704-10754]:IfStatement[10817-10867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10720-10754]:Block[10833-10867]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[10734-10744]:ExpressionStatement[10847-10857]"
    }, {
      "left" : "out.append(format.getCommentStart().charValue());",
      "right" : "out.append(format.getCommentStart().charValue());",
      "info" : "ExpressionStatement[10763-10812]:ExpressionStatement[10876-10925]"
    }, {
      "left" : "out.append(SP);",
      "right" : "out.append(SP);",
      "info" : "ExpressionStatement[10821-10836]:ExpressionStatement[10934-10949]"
    }, {
      "left" : "for (int i = 0; i < comment.length(); i++)",
      "right" : "for (int i = 0; i < comment.length(); i++)",
      "info" : "ForStatement[10845-11434]:ForStatement[10958-11547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10888-11434]:Block[11001-11547]"
    }, {
      "left" : "final char c = comment.charAt(i);",
      "right" : "final char c = comment.charAt(i);",
      "info" : "VariableDeclarationStatement[10902-10935]:VariableDeclarationStatement[11015-11048]"
    }, {
      "left" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentStart().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
      "right" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentStart().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
      "info" : "SwitchStatement[10948-11424]:SwitchStatement[11061-11537]"
    }, {
      "left" : "case CR:",
      "right" : "case CR:",
      "info" : "SwitchCase[10973-10981]:SwitchCase[11086-11094]"
    }, {
      "left" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
      "right" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
      "info" : "IfStatement[10998-11103]:IfStatement[11111-11216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11059-11103]:Block[11172-11216]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[11081-11085]:ExpressionStatement[11194-11198]"
    }, {
      "left" : "case LF:",
      "right" : "case LF:",
      "info" : "SwitchCase[11179-11187]:SwitchCase[11292-11300]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[11204-11214]:ExpressionStatement[11317-11327]"
    }, {
      "left" : "out.append(format.getCommentStart().charValue());",
      "right" : "out.append(format.getCommentStart().charValue());",
      "info" : "ExpressionStatement[11231-11280]:ExpressionStatement[11344-11393]"
    }, {
      "left" : "out.append(SP);",
      "right" : "out.append(SP);",
      "info" : "ExpressionStatement[11297-11312]:ExpressionStatement[11410-11425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11329-11335]:BreakStatement[11442-11448]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11348-11356]:SwitchCase[11461-11469]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[11373-11387]:ExpressionStatement[11486-11500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11404-11410]:BreakStatement[11517-11523]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[11443-11453]:ExpressionStatement[11556-11566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11594-11600]:Modifier[11707-11713]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11601-11605]:PrimitiveType[11714-11718]"
    }, {
      "left" : "println",
      "right" : "println",
      "info" : "SimpleName[11606-11613]:SimpleName[11719-11726]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11623-11634]:SimpleType[11736-11747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11635-11826]:Block[11748-11939]"
    }, {
      "left" : "final String recordSeparator = format.getRecordSeparator();",
      "right" : "final String recordSeparator = format.getRecordSeparator();",
      "info" : "VariableDeclarationStatement[11645-11704]:VariableDeclarationStatement[11758-11817]"
    }, {
      "left" : "if (recordSeparator != null)",
      "right" : "if (recordSeparator != null)",
      "info" : "IfStatement[11713-11794]:IfStatement[11826-11907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11742-11794]:Block[11855-11907]"
    }, {
      "left" : "out.append(recordSeparator);",
      "right" : "out.append(recordSeparator);",
      "info" : "ExpressionStatement[11756-11784]:ExpressionStatement[11869-11897]"
    }, {
      "left" : "newRecord = true;",
      "right" : "newRecord = true;",
      "info" : "ExpressionStatement[11803-11820]:ExpressionStatement[11916-11933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12131-12137]:Modifier[12244-12250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12138-12142]:PrimitiveType[12251-12255]"
    }, {
      "left" : "printRecord",
      "right" : "printRecord",
      "info" : "SimpleName[12143-12154]:SimpleName[12256-12267]"
    }, {
      "left" : "final Iterable<?> values",
      "right" : "final Iterable<?> values",
      "info" : "SingleVariableDeclaration[12155-12179]:SingleVariableDeclaration[12268-12292]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12188-12199]:SimpleType[12301-12312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12200-12306]:Block[12313-12419]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[12210-12281]:EnhancedForStatement[12323-12394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12244-12281]:Block[12357-12394]"
    }, {
      "left" : "print(value);",
      "right" : "print(value);",
      "info" : "ExpressionStatement[12258-12271]:ExpressionStatement[12371-12384]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[12290-12300]:ExpressionStatement[12403-12413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12611-12617]:Modifier[12724-12730]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12618-12622]:PrimitiveType[12731-12735]"
    }, {
      "left" : "printRecord",
      "right" : "printRecord",
      "info" : "SimpleName[12623-12634]:SimpleName[12736-12747]"
    }, {
      "left" : "final Object... values",
      "right" : "final Object... values",
      "info" : "SingleVariableDeclaration[12635-12657]:SingleVariableDeclaration[12748-12770]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12666-12677]:SimpleType[12779-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12678-12784]:Block[12791-12897]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[12688-12759]:EnhancedForStatement[12801-12872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12722-12759]:Block[12835-12872]"
    }, {
      "left" : "print(value);",
      "right" : "print(value);",
      "info" : "ExpressionStatement[12736-12749]:ExpressionStatement[12849-12862]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[12768-12778]:ExpressionStatement[12881-12891]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12997-13003]:Modifier[13110-13116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13004-13008]:PrimitiveType[13117-13121]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[13009-13021]:SimpleName[13122-13134]"
    }, {
      "left" : "final Iterable<?> values",
      "right" : "final Iterable<?> values",
      "info" : "SingleVariableDeclaration[13022-13046]:SingleVariableDeclaration[13135-13159]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13055-13066]:SimpleType[13168-13179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13067-13408]:Block[13180-13521]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[13077-13402]:EnhancedForStatement[13190-13515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13402]:Block[13224-13515]"
    }, {
      "left" : "if (value instanceof Object[])",
      "right" : "if (value instanceof Object[])",
      "info" : "IfStatement[13125-13392]:IfStatement[13238-13505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13156-13223]:Block[13269-13336]"
    }, {
      "left" : "this.printRecord((Object[]) value);",
      "right" : "this.printRecord((Object[]) value);",
      "info" : "ExpressionStatement[13174-13209]:ExpressionStatement[13287-13322]"
    }, {
      "left" : "if (value instanceof Iterable)",
      "right" : "if (value instanceof Iterable)",
      "info" : "IfStatement[13229-13392]:IfStatement[13342-13505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13260-13330]:Block[13373-13443]"
    }, {
      "left" : "this.printRecord((Iterable<?>) value);",
      "right" : "this.printRecord((Iterable<?>) value);",
      "info" : "ExpressionStatement[13278-13316]:ExpressionStatement[13391-13429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13336-13392]:Block[13449-13505]"
    }, {
      "left" : "this.printRecord(value);",
      "right" : "this.printRecord(value);",
      "info" : "ExpressionStatement[13354-13378]:ExpressionStatement[13467-13491]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13616-13622]:Modifier[13729-13735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13623-13627]:PrimitiveType[13736-13740]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[13628-13640]:SimpleName[13741-13753]"
    }, {
      "left" : "final Object[] values",
      "right" : "final Object[] values",
      "info" : "SingleVariableDeclaration[13641-13662]:SingleVariableDeclaration[13754-13775]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13671-13682]:SimpleType[13784-13795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13683-14024]:Block[13796-14137]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[13693-14018]:EnhancedForStatement[13806-14131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13727-14018]:Block[13840-14131]"
    }, {
      "left" : "if (value instanceof Object[])",
      "right" : "if (value instanceof Object[])",
      "info" : "IfStatement[13741-14008]:IfStatement[13854-14121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13772-13839]:Block[13885-13952]"
    }, {
      "left" : "this.printRecord((Object[]) value);",
      "right" : "this.printRecord((Object[]) value);",
      "info" : "ExpressionStatement[13790-13825]:ExpressionStatement[13903-13938]"
    }, {
      "left" : "if (value instanceof Iterable)",
      "right" : "if (value instanceof Iterable)",
      "info" : "IfStatement[13845-14008]:IfStatement[13958-14121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13876-13946]:Block[13989-14059]"
    }, {
      "left" : "this.printRecord((Iterable<?>) value);",
      "right" : "this.printRecord((Iterable<?>) value);",
      "info" : "ExpressionStatement[13894-13932]:ExpressionStatement[14007-14045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13952-14008]:Block[14065-14121]"
    }, {
      "left" : "this.printRecord(value);",
      "right" : "this.printRecord(value);",
      "info" : "ExpressionStatement[13970-13994]:ExpressionStatement[14083-14107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14318-14324]:Modifier[14431-14437]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14325-14329]:PrimitiveType[14438-14442]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[14330-14342]:SimpleName[14443-14455]"
    }, {
      "left" : "final ResultSet resultSet",
      "right" : "final ResultSet resultSet",
      "info" : "SingleVariableDeclaration[14343-14368]:SingleVariableDeclaration[14456-14481]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[14377-14389]:SimpleType[14490-14502]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14391-14402]:SimpleType[14504-14515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14403-14666]:Block[14516-14779]"
    }, {
      "left" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
      "right" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
      "info" : "VariableDeclarationStatement[14413-14478]:VariableDeclarationStatement[14526-14591]"
    }, {
      "left" : "while (resultSet.next())",
      "right" : "while (resultSet.next())",
      "info" : "WhileStatement[14487-14660]:WhileStatement[14600-14773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14512-14660]:Block[14625-14773]"
    }, {
      "left" : "for (int i = 1; i <= columnCount; i++)",
      "right" : "for (int i = 1; i <= columnCount; i++)",
      "info" : "ForStatement[14526-14627]:ForStatement[14639-14740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14565-14627]:Block[14678-14740]"
    }, {
      "left" : "print(resultSet.getString(i));",
      "right" : "print(resultSet.getString(i));",
      "info" : "ExpressionStatement[14583-14613]:ExpressionStatement[14696-14726]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[14640-14650]:ExpressionStatement[14753-14763]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14768-14774]:Modifier[14881-14887]"
    }, {
      "left" : "Appendable",
      "right" : "Appendable",
      "info" : "SimpleType[14775-14785]:SimpleType[14888-14898]"
    }, {
      "left" : "getOut",
      "right" : "getOut",
      "info" : "SimpleName[14786-14792]:SimpleName[14899-14905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14795-14827]:Block[14908-14940]"
    }, {
      "left" : "return this.out;",
      "right" : "return this.out;",
      "info" : "ReturnStatement[14805-14821]:ReturnStatement[14918-14934]"
    } ]
  },
  "interFileMappings" : { }
}