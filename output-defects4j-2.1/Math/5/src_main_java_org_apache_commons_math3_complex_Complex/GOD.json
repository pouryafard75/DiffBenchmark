{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "TypeDeclaration[1264-41466]:TypeDeclaration[1264-41466]"
    }, {
      "left" : "public static final Complex I = new Complex(0.0, 1.0);",
      "right" : "public static final Complex I = new Complex(0.0, 1.0);",
      "info" : "FieldDeclaration[2398-2521]:FieldDeclaration[2398-2521]"
    }, {
      "left" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "right" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[2563-2687]:FieldDeclaration[2563-2687]"
    }, {
      "left" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2731-2884]:FieldDeclaration[2731-2884]"
    }, {
      "left" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "right" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "info" : "FieldDeclaration[2889-2999]:FieldDeclaration[2889-2999]"
    }, {
      "left" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "right" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "info" : "FieldDeclaration[3004-3115]:FieldDeclaration[3004-3115]"
    }, {
      "left" : "private static final long serialVersionUID = -6195664516687396620L;",
      "right" : "private static final long serialVersionUID = -6195664516687396620L;",
      "info" : "FieldDeclaration[3121-3231]:FieldDeclaration[3121-3231]"
    }, {
      "left" : "private final double imaginary;",
      "right" : "private final double imaginary;",
      "info" : "FieldDeclaration[3237-3299]:FieldDeclaration[3237-3299]"
    }, {
      "left" : "private final double real;",
      "right" : "private final double real;",
      "info" : "FieldDeclaration[3304-3356]:FieldDeclaration[3304-3356]"
    }, {
      "left" : "private final transient boolean isNaN;",
      "right" : "private final transient boolean isNaN;",
      "info" : "FieldDeclaration[3361-3462]:FieldDeclaration[3361-3462]"
    }, {
      "left" : "private final transient boolean isInfinite;",
      "right" : "private final transient boolean isInfinite;",
      "info" : "FieldDeclaration[3467-3569]:FieldDeclaration[3467-3569]"
    }, {
      "left" : "public Complex(double real)",
      "right" : "public Complex(double real)",
      "info" : "MethodDeclaration[3575-3745]:MethodDeclaration[3575-3745]"
    }, {
      "left" : "public Complex(double real, double imaginary)",
      "right" : "public Complex(double real, double imaginary)",
      "info" : "MethodDeclaration[3751-4192]:MethodDeclaration[3751-4192]"
    }, {
      "left" : "public double abs()",
      "right" : "public double abs()",
      "info" : "MethodDeclaration[4198-5170]:MethodDeclaration[4198-5170]"
    }, {
      "left" : "public Complex add(Complex addend) throws NullArgumentException",
      "right" : "public Complex add(Complex addend) throws NullArgumentException",
      "info" : "MethodDeclaration[5176-6199]:MethodDeclaration[5176-6199]"
    }, {
      "left" : "public Complex add(double addend)",
      "right" : "public Complex add(double addend)",
      "info" : "MethodDeclaration[6205-6663]:MethodDeclaration[6205-6663]"
    }, {
      "left" : "public Complex conjugate()",
      "right" : "public Complex conjugate()",
      "info" : "MethodDeclaration[6670-7406]:MethodDeclaration[6670-7406]"
    }, {
      "left" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "right" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[7412-10076]:MethodDeclaration[7412-10076]"
    }, {
      "left" : "public Complex divide(double divisor)",
      "right" : "public Complex divide(double divisor)",
      "info" : "MethodDeclaration[10082-10766]:MethodDeclaration[10082-10766]"
    }, {
      "left" : "public Complex reciprocal()",
      "right" : "public Complex reciprocal()",
      "info" : "MethodDeclaration[10772-11419]:MethodDeclaration[10772-11419]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[11425-12539]:MethodDeclaration[11425-12539]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12545-12957]:MethodDeclaration[12545-12957]"
    }, {
      "left" : "public double getImaginary()",
      "right" : "public double getImaginary()",
      "info" : "MethodDeclaration[12963-13117]:MethodDeclaration[12963-13117]"
    }, {
      "left" : "public double getReal()",
      "right" : "public double getReal()",
      "info" : "MethodDeclaration[13123-13257]:MethodDeclaration[13123-13257]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[13263-13534]:MethodDeclaration[13263-13534]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[13540-13977]:MethodDeclaration[13540-13977]"
    }, {
      "left" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "right" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[13983-15643]:MethodDeclaration[13983-15643]"
    }, {
      "left" : "public Complex multiply(final int factor)",
      "right" : "public Complex multiply(final int factor)",
      "info" : "MethodDeclaration[15649-16228]:MethodDeclaration[15649-16228]"
    }, {
      "left" : "public Complex multiply(double factor)",
      "right" : "public Complex multiply(double factor)",
      "info" : "MethodDeclaration[16234-16944]:MethodDeclaration[16234-16944]"
    }, {
      "left" : "public Complex negate()",
      "right" : "public Complex negate()",
      "info" : "MethodDeclaration[16950-17321]:MethodDeclaration[16950-17321]"
    }, {
      "left" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "right" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[17327-18390]:MethodDeclaration[17327-18390]"
    }, {
      "left" : "public Complex subtract(double subtrahend)",
      "right" : "public Complex subtract(double subtrahend)",
      "info" : "MethodDeclaration[18396-18845]:MethodDeclaration[18396-18845]"
    }, {
      "left" : "public Complex acos()",
      "right" : "public Complex acos()",
      "info" : "MethodDeclaration[18851-19538]:MethodDeclaration[18851-19538]"
    }, {
      "left" : "public Complex asin()",
      "right" : "public Complex asin()",
      "info" : "MethodDeclaration[19544-20217]:MethodDeclaration[19544-20217]"
    }, {
      "left" : "public Complex atan()",
      "right" : "public Complex atan()",
      "info" : "MethodDeclaration[20223-20938]:MethodDeclaration[20223-20938]"
    }, {
      "left" : "public Complex cos()",
      "right" : "public Complex cos()",
      "info" : "MethodDeclaration[20944-22266]:MethodDeclaration[20944-22266]"
    }, {
      "left" : "public Complex cosh()",
      "right" : "public Complex cosh()",
      "info" : "MethodDeclaration[22272-23631]:MethodDeclaration[22272-23631]"
    }, {
      "left" : "public Complex exp()",
      "right" : "public Complex exp()",
      "info" : "MethodDeclaration[23637-25013]:MethodDeclaration[23637-25013]"
    }, {
      "left" : "public Complex log()",
      "right" : "public Complex log()",
      "info" : "MethodDeclaration[25019-26564]:MethodDeclaration[25019-26564]"
    }, {
      "left" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "right" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[26570-27455]:MethodDeclaration[26570-27455]"
    }, {
      "left" : "public Complex pow(double x)",
      "right" : "public Complex pow(double x)",
      "info" : "MethodDeclaration[27461-27792]:MethodDeclaration[27461-27792]"
    }, {
      "left" : "public Complex sin()",
      "right" : "public Complex sin()",
      "info" : "MethodDeclaration[27798-29121]:MethodDeclaration[27798-29121]"
    }, {
      "left" : "public Complex sinh()",
      "right" : "public Complex sinh()",
      "info" : "MethodDeclaration[29127-30458]:MethodDeclaration[29127-30458]"
    }, {
      "left" : "public Complex sqrt()",
      "right" : "public Complex sqrt()",
      "info" : "MethodDeclaration[30464-32353]:MethodDeclaration[30464-32353]"
    }, {
      "left" : "public Complex sqrt1z()",
      "right" : "public Complex sqrt1z()",
      "info" : "MethodDeclaration[32359-33133]:MethodDeclaration[32359-33133]"
    }, {
      "left" : "public Complex tan()",
      "right" : "public Complex tan()",
      "info" : "MethodDeclaration[33139-34846]:MethodDeclaration[33139-34846]"
    }, {
      "left" : "public Complex tanh()",
      "right" : "public Complex tanh()",
      "info" : "MethodDeclaration[34852-36564]:MethodDeclaration[34852-36564]"
    }, {
      "left" : "public double getArgument()",
      "right" : "public double getArgument()",
      "info" : "MethodDeclaration[36572-37491]:MethodDeclaration[36572-37491]"
    }, {
      "left" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
      "right" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
      "info" : "MethodDeclaration[37497-39611]:MethodDeclaration[37497-39611]"
    }, {
      "left" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "right" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "info" : "MethodDeclaration[39617-40053]:MethodDeclaration[39617-40053]"
    }, {
      "left" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "right" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "info" : "MethodDeclaration[40059-40540]:MethodDeclaration[40059-40540]"
    }, {
      "left" : "public static Complex valueOf(double realPart)",
      "right" : "public static Complex valueOf(double realPart)",
      "info" : "MethodDeclaration[40546-40859]:MethodDeclaration[40546-40859]"
    }, {
      "left" : "protected final Object readResolve()",
      "right" : "protected final Object readResolve()",
      "info" : "MethodDeclaration[40865-41222]:MethodDeclaration[40865-41222]"
    }, {
      "left" : "public ComplexField getField()",
      "right" : "public ComplexField getField()",
      "info" : "MethodDeclaration[41228-41334]:MethodDeclaration[41228-41334]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[41340-41463]:MethodDeclaration[41340-41463]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3713-3745]:Block[3713-3745]"
    }, {
      "left" : "this(real, 0.0);",
      "right" : "this(real, 0.0);",
      "info" : "ConstructorInvocation[3723-3739]:ConstructorInvocation[3723-3739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3957-4192]:Block[3957-4192]"
    }, {
      "left" : "this.real = real;",
      "right" : "this.real = real;",
      "info" : "ExpressionStatement[3967-3984]:ExpressionStatement[3967-3984]"
    }, {
      "left" : "this.imaginary = imaginary;",
      "right" : "this.imaginary = imaginary;",
      "info" : "ExpressionStatement[3993-4020]:ExpressionStatement[3993-4020]"
    }, {
      "left" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "right" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "info" : "ExpressionStatement[4030-4084]:ExpressionStatement[4030-4084]"
    }, {
      "left" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "right" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "info" : "ExpressionStatement[4093-4186]:ExpressionStatement[4093-4186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4526-5170]:Block[4526-5170]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[4536-4589]:IfStatement[4536-4589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4547-4589]:Block[4547-4589]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[4561-4579]:ReturnStatement[4561-4579]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[4598-4672]:IfStatement[4598-4672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4616-4672]:Block[4616-4672]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[4630-4662]:ReturnStatement[4630-4662]"
    }, {
      "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "info" : "IfStatement[4681-5164]:IfStatement[4681-5164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4731-4947]:Block[4731-4947]"
    }, {
      "left" : "if (imaginary == 0.0)",
      "right" : "if (imaginary == 0.0)",
      "info" : "IfStatement[4745-4825]:IfStatement[4745-4825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4767-4825]:Block[4767-4825]"
    }, {
      "left" : "return FastMath.abs(real);",
      "right" : "return FastMath.abs(real);",
      "info" : "ReturnStatement[4785-4811]:ReturnStatement[4785-4811]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[4838-4866]:VariableDeclarationStatement[4838-4866]"
    }, {
      "left" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[4879-4937]:ReturnStatement[4879-4937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4953-5164]:Block[4953-5164]"
    }, {
      "left" : "if (real == 0.0)",
      "right" : "if (real == 0.0)",
      "info" : "IfStatement[4967-5047]:IfStatement[4967-5047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4984-5047]:Block[4984-5047]"
    }, {
      "left" : "return FastMath.abs(imaginary);",
      "right" : "return FastMath.abs(imaginary);",
      "info" : "ReturnStatement[5002-5033]:ReturnStatement[5002-5033]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[5060-5088]:VariableDeclarationStatement[5060-5088]"
    }, {
      "left" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[5101-5154]:ReturnStatement[5101-5154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5961-6199]:Block[5961-6199]"
    }, {
      "left" : "MathUtils.checkNotNull(addend);",
      "right" : "MathUtils.checkNotNull(addend);",
      "info" : "ExpressionStatement[5971-6002]:ExpressionStatement[5971-6002]"
    }, {
      "left" : "if (isNaN || addend.isNaN)",
      "right" : "if (isNaN || addend.isNaN)",
      "info" : "IfStatement[6011-6073]:IfStatement[6011-6073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6038-6073]:Block[6038-6073]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6052-6063]:ReturnStatement[6052-6063]"
    }, {
      "left" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "right" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "info" : "ReturnStatement[6083-6193]:ReturnStatement[6083-6193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6520-6663]:Block[6520-6663]"
    }, {
      "left" : "if (isNaN || Double.isNaN(addend))",
      "right" : "if (isNaN || Double.isNaN(addend))",
      "info" : "IfStatement[6530-6600]:IfStatement[6530-6600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6565-6600]:Block[6565-6600]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6579-6590]:ReturnStatement[6579-6590]"
    }, {
      "left" : "return createComplex(real + addend, imaginary);",
      "right" : "return createComplex(real + addend, imaginary);",
      "info" : "ReturnStatement[6610-6657]:ReturnStatement[6610-6657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7295-7406]:Block[7295-7406]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[7305-7351]:IfStatement[7305-7351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7316-7351]:Block[7316-7351]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[7330-7341]:ReturnStatement[7330-7341]"
    }, {
      "left" : "return createComplex(real, -imaginary);",
      "right" : "return createComplex(real, -imaginary);",
      "info" : "ReturnStatement[7361-7400]:ReturnStatement[7361-7400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9226-10076]:Block[9226-10076]"
    }, {
      "left" : "MathUtils.checkNotNull(divisor);",
      "right" : "MathUtils.checkNotNull(divisor);",
      "info" : "ExpressionStatement[9236-9268]:ExpressionStatement[9236-9268]"
    }, {
      "left" : "if (isNaN || divisor.isNaN)",
      "right" : "if (isNaN || divisor.isNaN)",
      "info" : "IfStatement[9277-9340]:IfStatement[9277-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9305-9340]:Block[9305-9340]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[9319-9330]:ReturnStatement[9319-9330]"
    }, {
      "left" : "final double c = divisor.getReal();",
      "right" : "final double c = divisor.getReal();",
      "info" : "VariableDeclarationStatement[9350-9385]:VariableDeclarationStatement[9350-9385]"
    }, {
      "left" : "final double d = divisor.getImaginary();",
      "right" : "final double d = divisor.getImaginary();",
      "info" : "VariableDeclarationStatement[9394-9434]:VariableDeclarationStatement[9394-9434]"
    }, {
      "left" : "if (c == 0.0 && d == 0.0)",
      "right" : "if (c == 0.0 && d == 0.0)",
      "info" : "IfStatement[9443-9504]:IfStatement[9443-9504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9469-9504]:Block[9469-9504]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[9483-9494]:ReturnStatement[9483-9494]"
    }, {
      "left" : "if (divisor.isInfinite() && !isInfinite())",
      "right" : "if (divisor.isInfinite() && !isInfinite())",
      "info" : "IfStatement[9514-9593]:IfStatement[9514-9593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9557-9593]:Block[9557-9593]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[9571-9583]:ReturnStatement[9571-9583]"
    }, {
      "left" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "right" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "info" : "IfStatement[9603-10070]:IfStatement[9603-10070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9642-9853]:Block[9642-9853]"
    }, {
      "left" : "double q = c / d;",
      "right" : "double q = c / d;",
      "info" : "VariableDeclarationStatement[9656-9673]:VariableDeclarationStatement[9656-9673]"
    }, {
      "left" : "double denominator = c * q + d;",
      "right" : "double denominator = c * q + d;",
      "info" : "VariableDeclarationStatement[9686-9717]:VariableDeclarationStatement[9686-9717]"
    }, {
      "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "info" : "ReturnStatement[9730-9843]:ReturnStatement[9730-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9859-10070]:Block[9859-10070]"
    }, {
      "left" : "double q = d / c;",
      "right" : "double q = d / c;",
      "info" : "VariableDeclarationStatement[9873-9890]:VariableDeclarationStatement[9873-9890]"
    }, {
      "left" : "double denominator = d * q + c;",
      "right" : "double denominator = d * q + c;",
      "info" : "VariableDeclarationStatement[9903-9934]:VariableDeclarationStatement[9903-9934]"
    }, {
      "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "info" : "ReturnStatement[9947-10060]:ReturnStatement[9947-10060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10420-10766]:Block[10420-10766]"
    }, {
      "left" : "if (isNaN || Double.isNaN(divisor))",
      "right" : "if (isNaN || Double.isNaN(divisor))",
      "info" : "IfStatement[10430-10501]:IfStatement[10430-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10466-10501]:Block[10466-10501]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10480-10491]:ReturnStatement[10480-10491]"
    }, {
      "left" : "if (divisor == 0d)",
      "right" : "if (divisor == 0d)",
      "info" : "IfStatement[10510-10564]:IfStatement[10510-10564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10529-10564]:Block[10529-10564]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10543-10554]:ReturnStatement[10543-10554]"
    }, {
      "left" : "if (Double.isInfinite(divisor))",
      "right" : "if (Double.isInfinite(divisor))",
      "info" : "IfStatement[10573-10663]:IfStatement[10573-10663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10605-10663]:Block[10605-10663]"
    }, {
      "left" : "return !isInfinite() ? ZERO : NaN;",
      "right" : "return !isInfinite() ? ZERO : NaN;",
      "info" : "ReturnStatement[10619-10653]:ReturnStatement[10619-10653]"
    }, {
      "left" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "right" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "info" : "ReturnStatement[10672-10760]:ReturnStatement[10672-10760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10825-11419]:Block[10825-11419]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[10835-10881]:IfStatement[10835-10881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10846-10881]:Block[10846-10881]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10860-10871]:ReturnStatement[10860-10871]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[10891-10963]:IfStatement[10891-10963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10928-10963]:Block[10928-10963]"
    }, {
      "left" : "return NaN;",
      "right" : "return INF;",
      "info" : "ReturnStatement[10942-10953]:ReturnStatement[10942-10953]"
    }, {
      "left" : "if (isInfinite)",
      "right" : "if (isInfinite)",
      "info" : "IfStatement[10973-11025]:IfStatement[10973-11025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10989-11025]:Block[10989-11025]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[11003-11015]:ReturnStatement[11003-11015]"
    }, {
      "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "info" : "IfStatement[11035-11413]:IfStatement[11035-11413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11085-11246]:Block[11085-11246]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[11099-11127]:VariableDeclarationStatement[11099-11127]"
    }, {
      "left" : "double scale = 1. / (real * q + imaginary);",
      "right" : "double scale = 1. / (real * q + imaginary);",
      "info" : "VariableDeclarationStatement[11140-11183]:VariableDeclarationStatement[11140-11183]"
    }, {
      "left" : "return createComplex(scale * q, -scale);",
      "right" : "return createComplex(scale * q, -scale);",
      "info" : "ReturnStatement[11196-11236]:ReturnStatement[11196-11236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11252-11413]:Block[11252-11413]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[11266-11294]:VariableDeclarationStatement[11266-11294]"
    }, {
      "left" : "double scale = 1. / (imaginary * q + real);",
      "right" : "double scale = 1. / (imaginary * q + real);",
      "info" : "VariableDeclarationStatement[11307-11350]:VariableDeclarationStatement[11307-11350]"
    }, {
      "left" : "return createComplex(scale, -scale * q);",
      "right" : "return createComplex(scale, -scale * q);",
      "info" : "ReturnStatement[11363-11403]:ReturnStatement[11363-11403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12194-12539]:Block[12194-12539]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[12204-12259]:IfStatement[12204-12259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12223-12259]:Block[12223-12259]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12237-12249]:ReturnStatement[12237-12249]"
    }, {
      "left" : "if (other instanceof Complex)",
      "right" : "if (other instanceof Complex)",
      "info" : "IfStatement[12268-12511]:IfStatement[12268-12511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12297-12511]:Block[12297-12511]"
    }, {
      "left" : "Complex c = (Complex)other;",
      "right" : "Complex c = (Complex)other;",
      "info" : "VariableDeclarationStatement[12311-12338]:VariableDeclarationStatement[12311-12338]"
    }, {
      "left" : "if (c.isNaN)",
      "right" : "if (c.isNaN)",
      "info" : "IfStatement[12351-12501]:IfStatement[12351-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12364-12409]:Block[12364-12409]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[12382-12395]:ReturnStatement[12382-12395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12501]:Block[12415-12501]"
    }, {
      "left" : "return (real == c.real) && (imaginary == c.imaginary);",
      "right" : "return (real == c.real) && (imaginary == c.imaginary);",
      "info" : "ReturnStatement[12433-12487]:ReturnStatement[12433-12487]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12520-12533]:ReturnStatement[12520-12533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12808-12957]:Block[12808-12957]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[12818-12862]:IfStatement[12818-12862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12829-12862]:Block[12829-12862]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[12843-12852]:ReturnStatement[12843-12852]"
    }, {
      "left" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "right" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "info" : "ReturnStatement[12871-12951]:ReturnStatement[12871-12951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13084-13117]:Block[13084-13117]"
    }, {
      "left" : "return imaginary;",
      "right" : "return imaginary;",
      "info" : "ReturnStatement[13094-13111]:ReturnStatement[13094-13111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13229-13257]:Block[13229-13257]"
    }, {
      "left" : "return real;",
      "right" : "return real;",
      "info" : "ReturnStatement[13239-13251]:ReturnStatement[13239-13251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13505-13534]:Block[13505-13534]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[13515-13528]:ReturnStatement[13515-13528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13943-13977]:Block[13943-13977]"
    }, {
      "left" : "return isInfinite;",
      "right" : "return isInfinite;",
      "info" : "ReturnStatement[13953-13971]:ReturnStatement[13953-13971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15078-15643]:Block[15078-15643]"
    }, {
      "left" : "MathUtils.checkNotNull(factor);",
      "right" : "MathUtils.checkNotNull(factor);",
      "info" : "ExpressionStatement[15088-15119]:ExpressionStatement[15088-15119]"
    }, {
      "left" : "if (isNaN || factor.isNaN)",
      "right" : "if (isNaN || factor.isNaN)",
      "info" : "IfStatement[15128-15190]:IfStatement[15128-15190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15155-15190]:Block[15155-15190]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[15169-15180]:ReturnStatement[15169-15180]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "info" : "IfStatement[15199-15476]:IfStatement[15199-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15369-15476]:Block[15369-15476]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[15455-15466]:ReturnStatement[15455-15466]"
    }, {
      "left" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "right" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "info" : "ReturnStatement[15485-15637]:ReturnStatement[15485-15637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15984-16228]:Block[15984-16228]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[15994-16040]:IfStatement[15994-16040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16005-16040]:Block[16005-16040]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16019-16030]:ReturnStatement[16019-16030]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary))",
      "info" : "IfStatement[16049-16157]:IfStatement[16049-16157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16122-16157]:Block[16122-16157]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[16136-16147]:ReturnStatement[16136-16147]"
    }, {
      "left" : "return createComplex(real * factor, imaginary * factor);",
      "right" : "return createComplex(real * factor, imaginary * factor);",
      "info" : "ReturnStatement[16166-16222]:ReturnStatement[16166-16222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16563-16944]:Block[16563-16944]"
    }, {
      "left" : "if (isNaN || Double.isNaN(factor))",
      "right" : "if (isNaN || Double.isNaN(factor))",
      "info" : "IfStatement[16573-16643]:IfStatement[16573-16643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16608-16643]:Block[16608-16643]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16622-16633]:ReturnStatement[16622-16633]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "info" : "IfStatement[16652-16873]:IfStatement[16652-16873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16766-16873]:Block[16766-16873]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[16852-16863]:ReturnStatement[16852-16863]"
    }, {
      "left" : "return createComplex(real * factor, imaginary * factor);",
      "right" : "return createComplex(real * factor, imaginary * factor);",
      "info" : "ReturnStatement[16882-16938]:ReturnStatement[16882-16938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17209-17321]:Block[17209-17321]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[17219-17265]:IfStatement[17219-17265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17230-17265]:Block[17230-17265]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17244-17255]:ReturnStatement[17244-17255]"
    }, {
      "left" : "return createComplex(-real, -imaginary);",
      "right" : "return createComplex(-real, -imaginary);",
      "info" : "ReturnStatement[17275-17315]:ReturnStatement[17275-17315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18136-18390]:Block[18136-18390]"
    }, {
      "left" : "MathUtils.checkNotNull(subtrahend);",
      "right" : "MathUtils.checkNotNull(subtrahend);",
      "info" : "ExpressionStatement[18146-18181]:ExpressionStatement[18146-18181]"
    }, {
      "left" : "if (isNaN || subtrahend.isNaN)",
      "right" : "if (isNaN || subtrahend.isNaN)",
      "info" : "IfStatement[18190-18256]:IfStatement[18190-18256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18221-18256]:Block[18221-18256]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[18235-18246]:ReturnStatement[18235-18246]"
    }, {
      "left" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "right" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "info" : "ReturnStatement[18266-18384]:ReturnStatement[18266-18384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18695-18845]:Block[18695-18845]"
    }, {
      "left" : "if (isNaN || Double.isNaN(subtrahend))",
      "right" : "if (isNaN || Double.isNaN(subtrahend))",
      "info" : "IfStatement[18705-18779]:IfStatement[18705-18779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18744-18779]:Block[18744-18779]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[18758-18769]:ReturnStatement[18758-18769]"
    }, {
      "left" : "return createComplex(real - subtrahend, imaginary);",
      "right" : "return createComplex(real - subtrahend, imaginary);",
      "info" : "ReturnStatement[18788-18839]:ReturnStatement[18788-18839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19396-19538]:Block[19396-19538]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[19406-19452]:IfStatement[19406-19452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19417-19452]:Block[19417-19452]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[19431-19442]:ReturnStatement[19431-19442]"
    }, {
      "left" : "return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());",
      "right" : "return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());",
      "info" : "ReturnStatement[19462-19532]:ReturnStatement[19462-19532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20080-20217]:Block[20080-20217]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[20090-20136]:IfStatement[20090-20136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20101-20136]:Block[20101-20136]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[20115-20126]:ReturnStatement[20115-20126]"
    }, {
      "left" : "return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());",
      "right" : "return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());",
      "info" : "ReturnStatement[20146-20211]:ReturnStatement[20146-20211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20755-20938]:Block[20755-20938]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[20765-20811]:IfStatement[20765-20811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20776-20811]:Block[20776-20811]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[20790-20801]:ReturnStatement[20790-20801]"
    }, {
      "left" : "return this.add(I).divide(I.subtract(this)).log()\n                .multiply(I.divide(createComplex(2.0, 0.0)));",
      "right" : "return this.add(I).divide(I.subtract(this)).log()\n                .multiply(I.divide(createComplex(2.0, 0.0)));",
      "info" : "ReturnStatement[20821-20932]:ReturnStatement[20821-20932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22049-22266]:Block[22049-22266]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[22059-22105]:IfStatement[22059-22105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22070-22105]:Block[22070-22105]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[22084-22095]:ReturnStatement[22084-22095]"
    }, {
      "left" : "return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),\n                             -FastMath.sin(real) * FastMath.sinh(imaginary));",
      "right" : "return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),\n                             -FastMath.sin(real) * FastMath.sinh(imaginary));",
      "info" : "ReturnStatement[22115-22260]:ReturnStatement[22115-22260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23415-23631]:Block[23415-23631]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[23425-23471]:IfStatement[23425-23471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23436-23471]:Block[23436-23471]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[23450-23461]:ReturnStatement[23450-23461]"
    }, {
      "left" : "return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),\n                             FastMath.sinh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),\n                             FastMath.sinh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[23481-23625]:ReturnStatement[23481-23625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24775-25013]:Block[24775-25013]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[24785-24831]:IfStatement[24785-24831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24796-24831]:Block[24796-24831]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[24810-24821]:ReturnStatement[24810-24821]"
    }, {
      "left" : "double expReal = FastMath.exp(real);",
      "right" : "double expReal = FastMath.exp(real);",
      "info" : "VariableDeclarationStatement[24841-24877]:VariableDeclarationStatement[24841-24877]"
    }, {
      "left" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "right" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[24886-25007]:ReturnStatement[24886-25007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26388-26564]:Block[26388-26564]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[26398-26444]:IfStatement[26398-26444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26409-26444]:Block[26409-26444]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[26423-26434]:ReturnStatement[26423-26434]"
    }, {
      "left" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "right" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "info" : "ReturnStatement[26454-26558]:ReturnStatement[26454-26558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27368-27455]:Block[27368-27455]"
    }, {
      "left" : "MathUtils.checkNotNull(x);",
      "right" : "MathUtils.checkNotNull(x);",
      "info" : "ExpressionStatement[27378-27404]:ExpressionStatement[27378-27404]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[27413-27449]:ReturnStatement[27413-27449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27740-27792]:Block[27740-27792]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[27750-27786]:ReturnStatement[27750-27786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28905-29121]:Block[28905-29121]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[28915-28961]:IfStatement[28915-28961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28926-28961]:Block[28926-28961]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[28940-28951]:ReturnStatement[28940-28951]"
    }, {
      "left" : "return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),\n                             FastMath.cos(real) * FastMath.sinh(imaginary));",
      "right" : "return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),\n                             FastMath.cos(real) * FastMath.sinh(imaginary));",
      "info" : "ReturnStatement[28971-29115]:ReturnStatement[28971-29115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30259-30458]:Block[30259-30458]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[30269-30315]:IfStatement[30269-30315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30280-30315]:Block[30280-30315]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[30294-30305]:ReturnStatement[30294-30305]"
    }, {
      "left" : "return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),\n            FastMath.cosh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),\n            FastMath.cosh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[30325-30452]:ReturnStatement[30325-30452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31862-32353]:Block[31862-32353]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[31872-31918]:IfStatement[31872-31918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31883-31918]:Block[31883-31918]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[31897-31908]:ReturnStatement[31897-31908]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[31928-32020]:IfStatement[31928-32020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31965-32020]:Block[31965-32020]"
    }, {
      "left" : "return createComplex(0.0, 0.0);",
      "right" : "return createComplex(0.0, 0.0);",
      "info" : "ReturnStatement[31979-32010]:ReturnStatement[31979-32010]"
    }, {
      "left" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "right" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "info" : "VariableDeclarationStatement[32030-32091]:VariableDeclarationStatement[32030-32091]"
    }, {
      "left" : "if (real >= 0.0)",
      "right" : "if (real >= 0.0)",
      "info" : "IfStatement[32100-32347]:IfStatement[32100-32347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32117-32188]:Block[32117-32188]"
    }, {
      "left" : "return createComplex(t, imaginary / (2.0 * t));",
      "right" : "return createComplex(t, imaginary / (2.0 * t));",
      "info" : "ReturnStatement[32131-32178]:ReturnStatement[32131-32178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32194-32347]:Block[32194-32347]"
    }, {
      "left" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 FastMath.copySign(1d, imaginary) * t);",
      "right" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 FastMath.copySign(1d, imaginary) * t);",
      "info" : "ReturnStatement[32208-32337]:ReturnStatement[32208-32337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33049-33133]:Block[33049-33133]"
    }, {
      "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "info" : "ReturnStatement[33059-33127]:ReturnStatement[33059-33127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34318-34846]:Block[34318-34846]"
    }, {
      "left" : "if (isNaN || Double.isInfinite(real))",
      "right" : "if (isNaN || Double.isInfinite(real))",
      "info" : "IfStatement[34328-34401]:IfStatement[34328-34401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34366-34401]:Block[34366-34401]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[34380-34391]:ReturnStatement[34380-34391]"
    }, {
      "left" : "if (imaginary > 20.0)",
      "right" : "if (imaginary > 20.0)",
      "info" : "IfStatement[34410-34487]:IfStatement[34410-34487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34432-34487]:Block[34432-34487]"
    }, {
      "left" : "return createComplex(0.0, 1.0);",
      "right" : "return createComplex(0.0, 1.0);",
      "info" : "ReturnStatement[34446-34477]:ReturnStatement[34446-34477]"
    }, {
      "left" : "if (imaginary < -20.0)",
      "right" : "if (imaginary < -20.0)",
      "info" : "IfStatement[34496-34575]:IfStatement[34496-34575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34519-34575]:Block[34519-34575]"
    }, {
      "left" : "return createComplex(0.0, -1.0);",
      "right" : "return createComplex(0.0, -1.0);",
      "info" : "ReturnStatement[34533-34565]:ReturnStatement[34533-34565]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[34585-34611]:VariableDeclarationStatement[34585-34611]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[34620-34656]:VariableDeclarationStatement[34620-34656]"
    }, {
      "left" : "double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);",
      "right" : "double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);",
      "info" : "VariableDeclarationStatement[34665-34724]:VariableDeclarationStatement[34665-34724]"
    }, {
      "left" : "return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);",
      "right" : "return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);",
      "info" : "ReturnStatement[34734-34840]:ReturnStatement[34734-34840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36042-36564]:Block[36042-36564]"
    }, {
      "left" : "if (isNaN || Double.isInfinite(imaginary))",
      "right" : "if (isNaN || Double.isInfinite(imaginary))",
      "info" : "IfStatement[36052-36130]:IfStatement[36052-36130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36095-36130]:Block[36095-36130]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[36109-36120]:ReturnStatement[36109-36120]"
    }, {
      "left" : "if (real > 20.0)",
      "right" : "if (real > 20.0)",
      "info" : "IfStatement[36139-36211]:IfStatement[36139-36211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36156-36211]:Block[36156-36211]"
    }, {
      "left" : "return createComplex(1.0, 0.0);",
      "right" : "return createComplex(1.0, 0.0);",
      "info" : "ReturnStatement[36170-36201]:ReturnStatement[36170-36201]"
    }, {
      "left" : "if (real < -20.0)",
      "right" : "if (real < -20.0)",
      "info" : "IfStatement[36220-36294]:IfStatement[36220-36294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36238-36294]:Block[36238-36294]"
    }, {
      "left" : "return createComplex(-1.0, 0.0);",
      "right" : "return createComplex(-1.0, 0.0);",
      "info" : "ReturnStatement[36252-36284]:ReturnStatement[36252-36284]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[36303-36329]:VariableDeclarationStatement[36303-36329]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[36338-36374]:VariableDeclarationStatement[36338-36374]"
    }, {
      "left" : "double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);",
      "right" : "double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);",
      "info" : "VariableDeclarationStatement[36383-36442]:VariableDeclarationStatement[36383-36442]"
    }, {
      "left" : "return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "right" : "return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "info" : "ReturnStatement[36452-36558]:ReturnStatement[36452-36558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37426-37491]:Block[37426-37491]"
    }, {
      "left" : "return FastMath.atan2(getImaginary(), getReal());",
      "right" : "return FastMath.atan2(getImaginary(), getReal());",
      "info" : "ReturnStatement[37436-37485]:ReturnStatement[37436-37485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38477-39611]:Block[38477-39611]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[38488-38658]:IfStatement[38488-38658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38500-38658]:Block[38500-38658]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "right" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "info" : "ThrowStatement[38514-38648]:ThrowStatement[38514-38648]"
    }, {
      "left" : "final List<Complex> result = new ArrayList<Complex>();",
      "right" : "final List<Complex> result = new ArrayList<Complex>();",
      "info" : "VariableDeclarationStatement[38668-38722]:VariableDeclarationStatement[38668-38722]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[38732-38810]:IfStatement[38732-38810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38743-38810]:Block[38743-38810]"
    }, {
      "left" : "result.add(NaN);",
      "right" : "result.add(NaN);",
      "info" : "ExpressionStatement[38757-38773]:ExpressionStatement[38757-38773]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38786-38800]:ReturnStatement[38786-38800]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[38819-38904]:IfStatement[38819-38904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38837-38904]:Block[38837-38904]"
    }, {
      "left" : "result.add(INF);",
      "right" : "result.add(INF);",
      "info" : "ExpressionStatement[38851-38867]:ExpressionStatement[38851-38867]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38880-38894]:ReturnStatement[38880-38894]"
    }, {
      "left" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "right" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "info" : "VariableDeclarationStatement[38989-39046]:VariableDeclarationStatement[38989-39046]"
    }, {
      "left" : "final double nthPhi = getArgument() / n;",
      "right" : "final double nthPhi = getArgument() / n;",
      "info" : "VariableDeclarationStatement[39126-39166]:VariableDeclarationStatement[39126-39166]"
    }, {
      "left" : "final double slice = 2 * FastMath.PI / n;",
      "right" : "final double slice = 2 * FastMath.PI / n;",
      "info" : "VariableDeclarationStatement[39175-39216]:VariableDeclarationStatement[39175-39216]"
    }, {
      "left" : "double innerPart = nthPhi;",
      "right" : "double innerPart = nthPhi;",
      "info" : "VariableDeclarationStatement[39225-39251]:VariableDeclarationStatement[39225-39251]"
    }, {
      "left" : "for (int k = 0; k < n ; k++)",
      "right" : "for (int k = 0; k < n ; k++)",
      "info" : "ForStatement[39260-39581]:ForStatement[39260-39581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39289-39581]:Block[39289-39581]"
    }, {
      "left" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "right" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "info" : "VariableDeclarationStatement[39329-39393]:VariableDeclarationStatement[39329-39393]"
    }, {
      "left" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "right" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "info" : "VariableDeclarationStatement[39406-39475]:VariableDeclarationStatement[39406-39475]"
    }, {
      "left" : "result.add(createComplex(realPart, imaginaryPart));",
      "right" : "result.add(createComplex(realPart, imaginaryPart));",
      "info" : "ExpressionStatement[39488-39539]:ExpressionStatement[39488-39539]"
    }, {
      "left" : "innerPart += slice;",
      "right" : "innerPart += slice;",
      "info" : "ExpressionStatement[39552-39571]:ExpressionStatement[39552-39571]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[39591-39605]:ReturnStatement[39591-39605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39993-40053]:Block[39993-40053]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[40003-40047]:ReturnStatement[40003-40047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40365-40540]:Block[40365-40540]"
    }, {
      "left" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "right" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "info" : "IfStatement[40375-40481]:IfStatement[40375-40481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40446-40481]:Block[40446-40481]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[40460-40471]:ReturnStatement[40460-40471]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[40490-40534]:ReturnStatement[40490-40534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40742-40859]:Block[40742-40859]"
    }, {
      "left" : "if (Double.isNaN(realPart))",
      "right" : "if (Double.isNaN(realPart))",
      "info" : "IfStatement[40752-40815]:IfStatement[40752-40815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40780-40815]:Block[40780-40815]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[40794-40805]:ReturnStatement[40794-40805]"
    }, {
      "left" : "return new Complex(realPart);",
      "right" : "return new Complex(realPart);",
      "info" : "ReturnStatement[40824-40853]:ReturnStatement[40824-40853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41168-41222]:Block[41168-41222]"
    }, {
      "left" : "return createComplex(real, imaginary);",
      "right" : "return createComplex(real, imaginary);",
      "info" : "ReturnStatement[41178-41216]:ReturnStatement[41178-41216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41284-41334]:Block[41284-41334]"
    }, {
      "left" : "return ComplexField.getInstance();",
      "right" : "return ComplexField.getInstance();",
      "info" : "ReturnStatement[41294-41328]:ReturnStatement[41294-41328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41404-41463]:Block[41404-41463]"
    }, {
      "left" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "right" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "info" : "ReturnStatement[41414-41457]:ReturnStatement[41414-41457]"
    } ]
  },
  "interFileMappings" : { }
}