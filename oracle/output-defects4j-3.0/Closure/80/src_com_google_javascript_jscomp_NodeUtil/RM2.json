{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1420-87934]:TypeDeclaration[1420-87986]"
    }, {
      "left" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "right" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "info" : "FieldDeclaration[1537-1608]:FieldDeclaration[1537-1608]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1745-2039]:FieldDeclaration[1745-2039]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[2083-2104]:MethodDeclaration[2083-2104]"
    }, {
      "left" : "static TernaryValue getExpressionBooleanValue(Node n)",
      "right" : "static TernaryValue getExpressionBooleanValue(Node n)",
      "info" : "MethodDeclaration[2108-3597]:MethodDeclaration[2108-3597]"
    }, {
      "left" : "static TernaryValue getBooleanValue(Node n)",
      "right" : "static TernaryValue getBooleanValue(Node n)",
      "info" : "MethodDeclaration[3601-4814]:MethodDeclaration[3601-4814]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[4819-6270]:MethodDeclaration[4819-6270]"
    }, {
      "left" : "static String getArrayElementStringValue(Node n)",
      "right" : "static String getArrayElementStringValue(Node n)",
      "info" : "MethodDeclaration[6274-6771]:MethodDeclaration[6274-6771]"
    }, {
      "left" : "static String arrayToString(Node literal)",
      "right" : "static String arrayToString(Node literal)",
      "info" : "MethodDeclaration[6775-7610]:MethodDeclaration[6775-7610]"
    }, {
      "left" : "static Double getNumberValue(Node n)",
      "right" : "static Double getNumberValue(Node n)",
      "info" : "MethodDeclaration[7614-9323]:MethodDeclaration[7614-9323]"
    }, {
      "left" : "static Double getStringNumberValue(String rawJsString)",
      "right" : "static Double getStringNumberValue(String rawJsString)",
      "info" : "MethodDeclaration[9327-10482]:MethodDeclaration[9327-10482]"
    }, {
      "left" : "static String trimJsWhiteSpace(String s)",
      "right" : "static String trimJsWhiteSpace(String s)",
      "info" : "MethodDeclaration[10486-10781]:MethodDeclaration[10486-10781]"
    }, {
      "left" : "static boolean isStrWhiteSpaceChar(int c)",
      "right" : "static boolean isStrWhiteSpaceChar(int c)",
      "info" : "MethodDeclaration[10785-11285]:MethodDeclaration[10785-11285]"
    }, {
      "left" : "static String getFunctionName(Node n)",
      "right" : "static String getFunctionName(Node n)",
      "info" : "MethodDeclaration[11289-12493]:MethodDeclaration[11289-12493]"
    }, {
      "left" : "static String getNearestFunctionName(Node n)",
      "right" : "static String getNearestFunctionName(Node n)",
      "info" : "MethodDeclaration[12497-13593]:MethodDeclaration[12497-13593]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[13598-14386]:MethodDeclaration[13598-14386]"
    }, {
      "left" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "right" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "info" : "MethodDeclaration[14390-16204]:MethodDeclaration[14390-16204]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[16208-17698]:MethodDeclaration[16208-17698]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[17702-18082]:MethodDeclaration[17702-18082]"
    }, {
      "left" : "static boolean isSimpleOperator(Node n)",
      "right" : "static boolean isSimpleOperator(Node n)",
      "info" : "MethodDeclaration[18086-18177]:MethodDeclaration[18086-18177]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[18181-19158]:MethodDeclaration[18181-19158]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[19162-19468]:MethodDeclaration[19162-19468]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[19472-19735]:MethodDeclaration[19472-19735]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[19739-19873]:MethodDeclaration[19739-19873]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[19877-20049]:MethodDeclaration[19877-20049]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20053-20185]:MethodDeclaration[20053-20185]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20189-25030]:MethodDeclaration[20189-25030]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[25034-25271]:MethodDeclaration[25034-25271]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "right" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[25275-25813]:MethodDeclaration[25275-25813]"
    }, {
      "left" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "right" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "info" : "FieldDeclaration[26026-26201]:FieldDeclaration[26026-26201]"
    }, {
      "left" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "right" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "info" : "FieldDeclaration[26204-26319]:FieldDeclaration[26204-26319]"
    }, {
      "left" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "right" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "info" : "FieldDeclaration[26322-26410]:FieldDeclaration[26322-26410]"
    }, {
      "left" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "right" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "info" : "FieldDeclaration[26413-26531]:FieldDeclaration[26413-26531]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[26535-26774]:MethodDeclaration[26535-26774]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "info" : "MethodDeclaration[26778-28943]:MethodDeclaration[26778-28943]"
    }, {
      "left" : "static boolean callHasLocalResult(Node n)",
      "right" : "static boolean callHasLocalResult(Node n)",
      "info" : "MethodDeclaration[28947-29180]:MethodDeclaration[28947-29180]"
    }, {
      "left" : "static boolean newHasLocalResult(Node n)",
      "right" : "static boolean newHasLocalResult(Node n)",
      "info" : "MethodDeclaration[29184-29386]:MethodDeclaration[29184-29386]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[29390-29762]:MethodDeclaration[29390-29762]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[29766-30354]:MethodDeclaration[29766-30354]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[30358-30598]:MethodDeclaration[30358-30598]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[30602-31937]:MethodDeclaration[30602-31937]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[32374-34429]:MethodDeclaration[32374-34429]"
    }, {
      "left" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "right" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "info" : "MethodDeclaration[34433-35043]:MethodDeclaration[34433-35043]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "TypeDeclaration[35047-35196]:TypeDeclaration[35047-35196]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[35117-35192]:MethodDeclaration[35117-35192]"
    }, {
      "left" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "right" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "info" : "FieldDeclaration[35200-35301]:FieldDeclaration[35200-35301]"
    }, {
      "left" : "static boolean isNumericResult(Node n)",
      "right" : "static boolean isNumericResult(Node n)",
      "info" : "MethodDeclaration[35305-35484]:MethodDeclaration[35305-35484]"
    }, {
      "left" : "static boolean isNumericResultHelper(Node n)",
      "right" : "static boolean isNumericResultHelper(Node n)",
      "info" : "MethodDeclaration[35488-36333]:MethodDeclaration[35488-36333]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "TypeDeclaration[36337-36485]:TypeDeclaration[36337-36485]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[36406-36481]:MethodDeclaration[36406-36481]"
    }, {
      "left" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "right" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "info" : "FieldDeclaration[36489-36587]:FieldDeclaration[36489-36587]"
    }, {
      "left" : "static boolean isBooleanResult(Node n)",
      "right" : "static boolean isBooleanResult(Node n)",
      "info" : "MethodDeclaration[36591-36770]:MethodDeclaration[36591-36770]"
    }, {
      "left" : "static boolean isBooleanResultHelper(Node n)",
      "right" : "static boolean isBooleanResultHelper(Node n)",
      "info" : "MethodDeclaration[36774-37328]:MethodDeclaration[36774-37354]"
    }, {
      "left" : "static boolean isUndefined(Node n)",
      "right" : "static boolean isUndefined(Node n)",
      "info" : "MethodDeclaration[37332-37540]:MethodDeclaration[37358-37566]"
    }, {
      "left" : "static boolean isNull(Node n)",
      "right" : "static boolean isNull(Node n)",
      "info" : "MethodDeclaration[37544-37617]:MethodDeclaration[37570-37643]"
    }, {
      "left" : "static boolean isNullOrUndefined(Node n)",
      "right" : "static boolean isNullOrUndefined(Node n)",
      "info" : "MethodDeclaration[37621-37707]:MethodDeclaration[37647-37733]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "TypeDeclaration[37711-37859]:TypeDeclaration[37737-37885]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[37784-37855]:MethodDeclaration[37810-37881]"
    }, {
      "left" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "right" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "info" : "FieldDeclaration[37863-37968]:FieldDeclaration[37889-37994]"
    }, {
      "left" : "static boolean mayBeString(Node n)",
      "right" : "static boolean mayBeString(Node n)",
      "info" : "MethodDeclaration[37972-38113]:MethodDeclaration[37998-38139]"
    }, {
      "left" : "static boolean mayBeString(Node n, boolean recurse)",
      "right" : "static boolean mayBeString(Node n, boolean recurse)",
      "info" : "MethodDeclaration[38117-38300]:MethodDeclaration[38143-38326]"
    }, {
      "left" : "static boolean mayBeStringHelper(Node n)",
      "right" : "static boolean mayBeStringHelper(Node n)",
      "info" : "MethodDeclaration[38304-38446]:MethodDeclaration[38330-38472]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[38450-38942]:MethodDeclaration[38476-38968]"
    }, {
      "left" : "static boolean isCommutative(int type)",
      "right" : "static boolean isCommutative(int type)",
      "info" : "MethodDeclaration[38946-39474]:MethodDeclaration[38972-39500]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[39478-39945]:MethodDeclaration[39504-39971]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[39949-40712]:MethodDeclaration[39975-40738]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[40716-40806]:MethodDeclaration[40742-40832]"
    }, {
      "left" : "static boolean containsFunction(Node n)",
      "right" : "static boolean containsFunction(Node n)",
      "info" : "MethodDeclaration[40810-41004]:MethodDeclaration[40836-41030]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[41008-41204]:MethodDeclaration[41034-41230]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[41208-41375]:MethodDeclaration[41234-41401]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[41379-41499]:MethodDeclaration[41405-41525]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[41503-41614]:MethodDeclaration[41529-41640]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[41618-41726]:MethodDeclaration[41644-41752]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[41730-41838]:MethodDeclaration[41756-41864]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[41842-42251]:MethodDeclaration[41868-42277]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[42255-42697]:MethodDeclaration[42281-42723]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[42701-42818]:MethodDeclaration[42727-42844]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[42822-43150]:MethodDeclaration[42848-43176]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[43154-43272]:MethodDeclaration[43180-43298]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[43276-43591]:MethodDeclaration[43302-43617]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[43595-43770]:MethodDeclaration[43621-43796]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[43774-44056]:MethodDeclaration[43800-44082]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[44060-44463]:MethodDeclaration[44086-44489]"
    }, {
      "left" : "static boolean isWithinLoop(Node n)",
      "right" : "static boolean isWithinLoop(Node n)",
      "info" : "MethodDeclaration[44467-44824]:MethodDeclaration[44493-44850]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[44828-45311]:MethodDeclaration[44854-45337]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[45315-46196]:MethodDeclaration[45341-46222]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[46200-47000]:MethodDeclaration[46226-47026]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[47004-47205]:MethodDeclaration[47030-47231]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[47209-47758]:MethodDeclaration[47235-47784]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[47762-47930]:MethodDeclaration[47788-47956]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[47934-48193]:MethodDeclaration[47960-48219]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[48197-48347]:MethodDeclaration[48223-48373]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[48351-48591]:MethodDeclaration[48377-48617]"
    }, {
      "left" : "static boolean isTryCatchNodeContainer(Node n)",
      "right" : "static boolean isTryCatchNodeContainer(Node n)",
      "info" : "MethodDeclaration[48595-48825]:MethodDeclaration[48621-48851]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[48829-51293]:MethodDeclaration[48855-51319]"
    }, {
      "left" : "static void maybeAddFinally(Node tryNode)",
      "right" : "static void maybeAddFinally(Node tryNode)",
      "info" : "MethodDeclaration[51297-51609]:MethodDeclaration[51323-51635]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[51613-52302]:MethodDeclaration[51639-52328]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[52306-52417]:MethodDeclaration[52332-52443]"
    }, {
      "left" : "static boolean isCallOrNew(Node node)",
      "right" : "static boolean isCallOrNew(Node node)",
      "info" : "MethodDeclaration[52421-52611]:MethodDeclaration[52447-52637]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[52615-52738]:MethodDeclaration[52641-52764]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[52742-52929]:MethodDeclaration[52768-52955]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[52933-53050]:MethodDeclaration[52959-53076]"
    }, {
      "left" : "static boolean isArrayLiteral(Node node)",
      "right" : "static boolean isArrayLiteral(Node node)",
      "info" : "MethodDeclaration[53055-53188]:MethodDeclaration[53081-53214]"
    }, {
      "left" : "static boolean isSparseArray(Node node)",
      "right" : "static boolean isSparseArray(Node node)",
      "info" : "MethodDeclaration[53192-53460]:MethodDeclaration[53218-53486]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[53464-53606]:MethodDeclaration[53490-53632]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[53610-53959]:MethodDeclaration[53636-53985]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[53963-54365]:MethodDeclaration[53989-54391]"
    }, {
      "left" : "static boolean isFunctionExpression(Node n)",
      "right" : "static boolean isFunctionExpression(Node n)",
      "info" : "MethodDeclaration[54369-55135]:MethodDeclaration[54395-55161]"
    }, {
      "left" : "static boolean isEmptyFunctionExpression(Node node)",
      "right" : "static boolean isEmptyFunctionExpression(Node node)",
      "info" : "MethodDeclaration[55139-55463]:MethodDeclaration[55165-55489]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[55467-55837]:MethodDeclaration[55493-55863]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[55841-56444]:MethodDeclaration[55867-56470]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[56449-56684]:MethodDeclaration[56475-56710]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[56688-56927]:MethodDeclaration[56714-56953]"
    }, {
      "left" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "right" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "info" : "MethodDeclaration[56931-57256]:MethodDeclaration[56957-57282]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[57260-57655]:MethodDeclaration[57286-57681]"
    }, {
      "left" : "static boolean isLhs(Node n, Node parent)",
      "right" : "static boolean isLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[57659-58177]:MethodDeclaration[57685-58203]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[58181-58653]:MethodDeclaration[58207-58679]"
    }, {
      "left" : "static String getObjectLitKeyName(Node key)",
      "right" : "static String getObjectLitKeyName(Node key)",
      "info" : "MethodDeclaration[58657-59065]:MethodDeclaration[58683-59091]"
    }, {
      "left" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "right" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "info" : "MethodDeclaration[59069-60080]:MethodDeclaration[59095-60106]"
    }, {
      "left" : "static boolean isGetOrSetKey(Node node)",
      "right" : "static boolean isGetOrSetKey(Node node)",
      "info" : "MethodDeclaration[60084-60415]:MethodDeclaration[60110-60441]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[60419-62332]:MethodDeclaration[60445-62358]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[62336-62839]:MethodDeclaration[62362-62865]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[62843-63148]:MethodDeclaration[62869-63174]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[63152-63358]:MethodDeclaration[63178-63384]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[63363-64110]:MethodDeclaration[63389-64136]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[64114-64415]:MethodDeclaration[64140-64441]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[64419-65241]:MethodDeclaration[64445-65267]"
    }, {
      "left" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[65245-65822]:MethodDeclaration[65271-65848]"
    }, {
      "left" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[65826-66981]:MethodDeclaration[65852-67007]"
    }, {
      "left" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[66985-67779]:MethodDeclaration[67011-67805]"
    }, {
      "left" : "static Node getRootOfQualifiedName(Node qName)",
      "right" : "static Node getRootOfQualifiedName(Node qName)",
      "info" : "MethodDeclaration[67783-68187]:MethodDeclaration[67809-68213]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[68191-68722]:MethodDeclaration[68217-68748]"
    }, {
      "left" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[68726-69028]:MethodDeclaration[68752-69054]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "right" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "info" : "MethodDeclaration[69032-69676]:MethodDeclaration[69058-69702]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "right" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "info" : "MethodDeclaration[69680-70449]:MethodDeclaration[69706-70475]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[70453-71320]:MethodDeclaration[70479-71346]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[71324-71985]:MethodDeclaration[71350-72011]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[71989-72426]:TypeDeclaration[72015-72452]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[72048-72103]:FieldDeclaration[72074-72129]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[72109-72422]:MethodDeclaration[72135-72448]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[72430-72764]:MethodDeclaration[72456-72790]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[72768-73066]:MethodDeclaration[72794-73092]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[73070-73306]:MethodDeclaration[73096-73332]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[73310-73669]:MethodDeclaration[73336-73695]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[73673-74031]:MethodDeclaration[73699-74057]"
    }, {
      "left" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "right" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "info" : "MethodDeclaration[74035-74346]:MethodDeclaration[74061-74372]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[74350-74819]:MethodDeclaration[74376-74845]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[74823-75175]:TypeDeclaration[74849-75201]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[74968-74986]:FieldDeclaration[74994-75012]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[74992-75049]:MethodDeclaration[75018-75075]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75055-75171]:MethodDeclaration[75081-75197]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[75179-75466]:TypeDeclaration[75205-75492]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[75311-75326]:FieldDeclaration[75337-75352]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[75332-75386]:MethodDeclaration[75358-75412]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75392-75462]:MethodDeclaration[75418-75488]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "TypeDeclaration[75471-75713]:TypeDeclaration[75497-75739]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75606-75709]:MethodDeclaration[75632-75735]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "TypeDeclaration[75717-75922]:TypeDeclaration[75743-75948]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75853-75918]:MethodDeclaration[75879-75944]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "TypeDeclaration[75926-76333]:TypeDeclaration[75952-76359]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76081-76329]:MethodDeclaration[76107-76355]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[76337-76605]:MethodDeclaration[76363-76631]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[76609-76920]:MethodDeclaration[76635-76946]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[76924-77132]:MethodDeclaration[76950-77158]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[77136-77383]:MethodDeclaration[77162-77409]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[77387-77914]:MethodDeclaration[77413-77940]"
    }, {
      "left" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[77918-78399]:MethodDeclaration[77944-78425]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[78403-78535]:TypeDeclaration[78429-78561]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[78509-78531]:MethodDeclaration[78535-78557]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78539-78993]:MethodDeclaration[78565-79019]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78997-79454]:MethodDeclaration[79023-79480]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[79458-79656]:MethodDeclaration[79484-79682]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[79660-79888]:MethodDeclaration[79686-79914]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[79892-80179]:MethodDeclaration[79918-80205]"
    }, {
      "left" : "static Node getFnParameters(Node fnNode)",
      "right" : "static Node getFnParameters(Node fnNode)",
      "info" : "MethodDeclaration[80183-80515]:MethodDeclaration[80209-80541]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[80519-81322]:MethodDeclaration[80545-81348]"
    }, {
      "left" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "right" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "info" : "MethodDeclaration[81326-81815]:MethodDeclaration[81352-81841]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[81819-82344]:MethodDeclaration[81845-82370]"
    }, {
      "left" : "static JSDocInfo getFunctionInfo(Node n)",
      "right" : "static JSDocInfo getFunctionInfo(Node n)",
      "info" : "MethodDeclaration[82348-82976]:MethodDeclaration[82374-83002]"
    }, {
      "left" : "static String getSourceName(Node n)",
      "right" : "static String getSourceName(Node n)",
      "info" : "MethodDeclaration[82980-83316]:MethodDeclaration[83006-83342]"
    }, {
      "left" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "right" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "info" : "MethodDeclaration[83320-83715]:MethodDeclaration[83346-83741]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value)",
      "right" : "static boolean evaluatesToLocalValue(Node value)",
      "info" : "MethodDeclaration[83719-83950]:MethodDeclaration[83745-83976]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "right" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "info" : "MethodDeclaration[83954-86617]:MethodDeclaration[83980-86669]"
    }, {
      "left" : "private static Node getNthSibling(Node first, int index)",
      "right" : "private static Node getNthSibling(Node first, int index)",
      "info" : "MethodDeclaration[86621-87019]:MethodDeclaration[86673-87071]"
    }, {
      "left" : "static Node getArgumentForFunction(Node function, int index)",
      "right" : "static Node getArgumentForFunction(Node function, int index)",
      "info" : "MethodDeclaration[87023-87344]:MethodDeclaration[87075-87396]"
    }, {
      "left" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "right" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "info" : "MethodDeclaration[87348-87655]:MethodDeclaration[87400-87707]"
    }, {
      "left" : "private static boolean isToStringMethodCall(Node call)",
      "right" : "private static boolean isToStringMethodCall(Node call)",
      "info" : "MethodDeclaration[87659-87932]:MethodDeclaration[87711-87984]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1504-1510]:Modifier[1504-1510]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1517-1522]:TYPE_DECLARATION_KIND[1517-1522]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1523-1531]:SimpleName[1523-1531]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2083-2090]:Modifier[2083-2090]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[2091-2099]:SimpleName[2091-2099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2102-2104]:Block[2102-2104]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2391-2397]:Modifier[2391-2397]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[2398-2410]:SimpleType[2398-2410]"
    }, {
      "left" : "getExpressionBooleanValue",
      "right" : "getExpressionBooleanValue",
      "info" : "SimpleName[2411-2436]:SimpleName[2411-2436]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2437-2443]:SingleVariableDeclaration[2437-2443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2445-3597]:Block[2445-3597]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
      "info" : "SwitchStatement[2451-3593]:SwitchStatement[2451-3593]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[2480-2498]:SwitchCase[2480-2498]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[2505-2522]:SwitchCase[2505-2522]"
    }, {
      "left" : "return getExpressionBooleanValue(n.getLastChild());",
      "right" : "return getExpressionBooleanValue(n.getLastChild());",
      "info" : "ReturnStatement[2598-2649]:ReturnStatement[2598-2649]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2656-2671]:SwitchCase[2656-2671]"
    }, {
      "left" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2680-2745]:VariableDeclarationStatement[2680-2745]"
    }, {
      "left" : "return value.not();",
      "right" : "return value.not();",
      "info" : "ReturnStatement[2754-2773]:ReturnStatement[2754-2773]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[2780-2795]:SwitchCase[2780-2795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2796-2979]:Block[2796-2979]"
    }, {
      "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2806-2870]:VariableDeclarationStatement[2806-2870]"
    }, {
      "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2879-2942]:VariableDeclarationStatement[2879-2942]"
    }, {
      "left" : "return lhs.and(rhs);",
      "right" : "return lhs.and(rhs);",
      "info" : "ReturnStatement[2951-2971]:ReturnStatement[2951-2971]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[2986-3000]:SwitchCase[2986-3000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3002-3184]:Block[3002-3184]"
    }, {
      "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[3012-3076]:VariableDeclarationStatement[3012-3076]"
    }, {
      "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3085-3148]:VariableDeclarationStatement[3085-3148]"
    }, {
      "left" : "return lhs.or(rhs);",
      "right" : "return lhs.or(rhs);",
      "info" : "ReturnStatement[3157-3176]:ReturnStatement[3157-3176]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3191-3207]:SwitchCase[3191-3207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3209-3537]:Block[3209-3537]"
    }, {
      "left" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
      "right" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
      "info" : "VariableDeclarationStatement[3219-3312]:VariableDeclarationStatement[3219-3312]"
    }, {
      "left" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3321-3391]:VariableDeclarationStatement[3321-3391]"
    }, {
      "left" : "if (trueValue.equals(falseValue))",
      "right" : "if (trueValue.equals(falseValue))",
      "info" : "IfStatement[3400-3529]:IfStatement[3400-3529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3434-3473]:Block[3434-3473]"
    }, {
      "left" : "return trueValue;",
      "right" : "return trueValue;",
      "info" : "ReturnStatement[3446-3463]:ReturnStatement[3446-3463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3479-3529]:Block[3479-3529]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[3491-3519]:ReturnStatement[3491-3519]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3544-3552]:SwitchCase[3544-3552]"
    }, {
      "left" : "return getBooleanValue(n);",
      "right" : "return getBooleanValue(n);",
      "info" : "ReturnStatement[3561-3587]:ReturnStatement[3561-3587]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3769-3775]:Modifier[3769-3775]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[3776-3788]:SimpleType[3776-3788]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[3789-3804]:SimpleName[3789-3804]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3805-3811]:SingleVariableDeclaration[3805-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3813-4814]:Block[3813-4814]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
      "info" : "SwitchStatement[3819-4776]:SwitchStatement[3819-4776]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[3848-3866]:SwitchCase[3848-3866]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "info" : "ReturnStatement[3875-3934]:ReturnStatement[3875-3934]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[3942-3960]:SwitchCase[3942-3960]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "info" : "ReturnStatement[3969-4020]:ReturnStatement[3969-4020]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[4028-4043]:SwitchCase[4028-4043]"
    }, {
      "left" : "return getBooleanValue(n.getLastChild()).not();",
      "right" : "return getBooleanValue(n.getLastChild()).not();",
      "info" : "ReturnStatement[4052-4099]:ReturnStatement[4052-4099]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4107-4123]:SwitchCase[4107-4123]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4130-4147]:SwitchCase[4130-4147]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[4154-4170]:SwitchCase[4154-4170]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4179-4205]:ReturnStatement[4179-4205]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4213-4229]:SwitchCase[4213-4229]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[4238-4266]:VariableDeclarationStatement[4238-4266]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[4275-4617]:IfStatement[4275-4617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4339-4535]:Block[4339-4535]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4499-4525]:ReturnStatement[4499-4525]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[4541-4617]:IfStatement[4541-4617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4570-4617]:Block[4570-4617]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4582-4607]:ReturnStatement[4582-4607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4626-4632]:BreakStatement[4626-4632]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4640-4656]:SwitchCase[4640-4656]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4663-4683]:SwitchCase[4663-4683]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[4690-4711]:SwitchCase[4690-4711]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[4718-4736]:SwitchCase[4718-4736]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4745-4770]:ReturnStatement[4745-4770]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[4782-4810]:ReturnStatement[4782-4810]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5039-5045]:Modifier[5039-5045]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5046-5052]:SimpleType[5046-5052]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[5053-5067]:SimpleName[5053-5067]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5068-5074]:SingleVariableDeclaration[5068-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5076-6270]:Block[5076-6270]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "info" : "SwitchStatement[5125-6249]:SwitchStatement[5125-6249]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5154-5172]:SwitchCase[5154-5172]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[5181-5202]:ReturnStatement[5181-5202]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5210-5226]:SwitchCase[5210-5226]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5235-5263]:VariableDeclarationStatement[5235-5263]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[5272-5409]:IfStatement[5272-5409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5375-5409]:Block[5375-5409]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[5387-5399]:ReturnStatement[5387-5399]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5418-5424]:BreakStatement[5418-5424]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[5432-5450]:SwitchCase[5432-5450]"
    }, {
      "left" : "double value = n.getDouble();",
      "right" : "double value = n.getDouble();",
      "info" : "VariableDeclarationStatement[5459-5488]:VariableDeclarationStatement[5459-5488]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[5497-5527]:VariableDeclarationStatement[5497-5527]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[5576-5720]:IfStatement[5576-5720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5600-5654]:Block[5600-5654]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[5612-5644]:ReturnStatement[5612-5644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5660-5720]:Block[5660-5720]"
    }, {
      "left" : "return Double.toString(n.getDouble());",
      "right" : "return Double.toString(n.getDouble());",
      "info" : "ReturnStatement[5672-5710]:ReturnStatement[5672-5710]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[5728-5745]:SwitchCase[5728-5745]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5752-5768]:SwitchCase[5752-5768]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[5775-5791]:SwitchCase[5775-5791]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[5800-5837]:ReturnStatement[5800-5837]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[5845-5861]:SwitchCase[5845-5861]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[5870-5889]:ReturnStatement[5870-5889]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[5897-5912]:SwitchCase[5897-5912]"
    }, {
      "left" : "TernaryValue child = getBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[5921-5977]:VariableDeclarationStatement[5921-5977]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[5986-6104]:IfStatement[5986-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6021-6104]:Block[6021-6104]"
    }, {
      "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "info" : "ReturnStatement[6033-6081]:ReturnStatement[6033-6081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6113-6119]:BreakStatement[6113-6119]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6127-6147]:SwitchCase[6127-6147]"
    }, {
      "left" : "return arrayToString(n);",
      "right" : "return arrayToString(n);",
      "info" : "ReturnStatement[6156-6180]:ReturnStatement[6156-6180]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6188-6209]:SwitchCase[6188-6209]"
    }, {
      "left" : "return \"[object Object]\";",
      "right" : "return \"[object Object]\";",
      "info" : "ReturnStatement[6218-6243]:ReturnStatement[6218-6243]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6254-6266]:ReturnStatement[6254-6266]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6650-6656]:Modifier[6650-6656]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6657-6663]:SimpleType[6657-6663]"
    }, {
      "left" : "getArrayElementStringValue",
      "right" : "getArrayElementStringValue",
      "info" : "SimpleName[6664-6690]:SimpleName[6664-6690]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6691-6697]:SingleVariableDeclaration[6691-6697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6771]:Block[6699-6771]"
    }, {
      "left" : "return NodeUtil.isNullOrUndefined(n) ? \"\" : getStringValue(n);",
      "right" : "return NodeUtil.isNullOrUndefined(n) ? \"\" : getStringValue(n);",
      "info" : "ReturnStatement[6705-6767]:ReturnStatement[6705-6767]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6775-6781]:Modifier[6775-6781]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6782-6788]:SimpleType[6782-6788]"
    }, {
      "left" : "arrayToString",
      "right" : "arrayToString",
      "info" : "SimpleName[6789-6802]:SimpleName[6789-6802]"
    }, {
      "left" : "Node literal",
      "right" : "Node literal",
      "info" : "SingleVariableDeclaration[6803-6815]:SingleVariableDeclaration[6803-6815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6817-7610]:Block[6817-7610]"
    }, {
      "left" : "Node first = literal.getFirstChild();",
      "right" : "Node first = literal.getFirstChild();",
      "info" : "VariableDeclarationStatement[6823-6860]:VariableDeclarationStatement[6823-6860]"
    }, {
      "left" : "int[] skipIndexes = (int[]) literal.getProp(Node.SKIP_INDEXES_PROP);",
      "right" : "int[] skipIndexes = (int[]) literal.getProp(Node.SKIP_INDEXES_PROP);",
      "info" : "VariableDeclarationStatement[6865-6933]:VariableDeclarationStatement[6865-6933]"
    }, {
      "left" : "StringBuilder result = new StringBuilder();",
      "right" : "StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6938-6981]:VariableDeclarationStatement[6938-6981]"
    }, {
      "left" : "int nextSlot = 0;",
      "right" : "int nextSlot = 0;",
      "info" : "VariableDeclarationStatement[6986-7003]:VariableDeclarationStatement[6986-7003]"
    }, {
      "left" : "int nextSkipSlot = 0;",
      "right" : "int nextSkipSlot = 0;",
      "info" : "VariableDeclarationStatement[7008-7029]:VariableDeclarationStatement[7008-7029]"
    }, {
      "left" : "for (Node n = first; n != null; n = n.getNext())",
      "right" : "for (Node n = first; n != null; n = n.getNext())",
      "info" : "ForStatement[7034-7576]:ForStatement[7034-7576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7083-7576]:Block[7083-7576]"
    }, {
      "left" : "while (skipIndexes != null && nextSkipSlot < skipIndexes.length)",
      "right" : "while (skipIndexes != null && nextSkipSlot < skipIndexes.length)",
      "info" : "WhileStatement[7091-7340]:WhileStatement[7091-7340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7340]:Block[7156-7340]"
    }, {
      "left" : "if (nextSlot == skipIndexes[nextSkipSlot])",
      "right" : "if (nextSlot == skipIndexes[nextSkipSlot])",
      "info" : "IfStatement[7166-7332]:IfStatement[7166-7332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7209-7298]:Block[7209-7298]"
    }, {
      "left" : "result.append(',');",
      "right" : "result.append(',');",
      "info" : "ExpressionStatement[7221-7240]:ExpressionStatement[7221-7240]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[7251-7262]:ExpressionStatement[7251-7262]"
    }, {
      "left" : "nextSkipSlot++;",
      "right" : "nextSkipSlot++;",
      "info" : "ExpressionStatement[7273-7288]:ExpressionStatement[7273-7288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7304-7332]:Block[7304-7332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7316-7322]:BreakStatement[7316-7322]"
    }, {
      "left" : "String childValue = getArrayElementStringValue(n);",
      "right" : "String childValue = getArrayElementStringValue(n);",
      "info" : "VariableDeclarationStatement[7347-7397]:VariableDeclarationStatement[7347-7397]"
    }, {
      "left" : "if (childValue == null)",
      "right" : "if (childValue == null)",
      "info" : "IfStatement[7404-7458]:IfStatement[7404-7458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7428-7458]:Block[7428-7458]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7438-7450]:ReturnStatement[7438-7450]"
    }, {
      "left" : "if (n != first)",
      "right" : "if (n != first)",
      "info" : "IfStatement[7465-7518]:IfStatement[7465-7518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7481-7518]:Block[7481-7518]"
    }, {
      "left" : "result.append(',');",
      "right" : "result.append(',');",
      "info" : "ExpressionStatement[7491-7510]:ExpressionStatement[7491-7510]"
    }, {
      "left" : "result.append(childValue);",
      "right" : "result.append(childValue);",
      "info" : "ExpressionStatement[7525-7551]:ExpressionStatement[7525-7551]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[7559-7570]:ExpressionStatement[7559-7570]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[7581-7606]:ReturnStatement[7581-7606]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7834-7840]:Modifier[7834-7840]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[7841-7847]:SimpleType[7841-7847]"
    }, {
      "left" : "getNumberValue",
      "right" : "getNumberValue",
      "info" : "SimpleName[7848-7862]:SimpleName[7848-7862]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7863-7869]:SingleVariableDeclaration[7863-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7871-9323]:Block[7871-9323]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "info" : "SwitchStatement[7877-9301]:SwitchStatement[7877-9301]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7906-7922]:SwitchCase[7906-7922]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[7931-7942]:ReturnStatement[7931-7942]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7950-7967]:SwitchCase[7950-7967]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[7974-7990]:SwitchCase[7974-7990]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[7999-8010]:ReturnStatement[7999-8010]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8018-8036]:SwitchCase[8018-8036]"
    }, {
      "left" : "return n.getDouble();",
      "right" : "return n.getDouble();",
      "info" : "ReturnStatement[8045-8066]:ReturnStatement[8045-8066]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8074-8090]:SwitchCase[8074-8090]"
    }, {
      "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "info" : "IfStatement[8099-8222]:IfStatement[8099-8222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8142-8176]:Block[8142-8176]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8154-8166]:ReturnStatement[8154-8166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8182-8222]:Block[8182-8222]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8194-8212]:ReturnStatement[8194-8212]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8230-8246]:SwitchCase[8230-8246]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8292-8320]:VariableDeclarationStatement[8292-8320]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[8329-8399]:IfStatement[8329-8399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8359-8399]:Block[8359-8399]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8371-8389]:ReturnStatement[8371-8389]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[8408-8472]:IfStatement[8408-8472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8432-8472]:Block[8432-8472]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8444-8462]:ReturnStatement[8444-8462]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[8481-8564]:IfStatement[8481-8564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8510-8564]:Block[8510-8564]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[8522-8554]:ReturnStatement[8522-8554]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8573-8585]:ReturnStatement[8573-8585]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8593-8608]:SwitchCase[8593-8608]"
    }, {
      "left" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "right" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "info" : "IfStatement[8617-8808]:IfStatement[8617-8808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8754-8808]:Block[8754-8808]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[8766-8798]:ReturnStatement[8766-8798]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8817-8829]:ReturnStatement[8817-8829]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[8837-8852]:SwitchCase[8837-8852]"
    }, {
      "left" : "TernaryValue child = getBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[8861-8917]:VariableDeclarationStatement[8861-8917]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[8926-9037]:IfStatement[8926-9037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8961-9037]:Block[8961-9037]"
    }, {
      "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "info" : "ReturnStatement[8973-9014]:ReturnStatement[8973-9014]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9046-9052]:BreakStatement[9046-9052]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[9060-9078]:SwitchCase[9060-9078]"
    }, {
      "left" : "return getStringNumberValue(n.getString());",
      "right" : "return getStringNumberValue(n.getString());",
      "info" : "ReturnStatement[9087-9130]:ReturnStatement[9087-9130]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[9138-9158]:SwitchCase[9138-9158]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[9165-9186]:SwitchCase[9165-9186]"
    }, {
      "left" : "String value = getStringValue(n);",
      "right" : "String value = getStringValue(n);",
      "info" : "VariableDeclarationStatement[9195-9228]:VariableDeclarationStatement[9195-9228]"
    }, {
      "left" : "return value != null ? getStringNumberValue(value) : null;",
      "right" : "return value != null ? getStringNumberValue(value) : null;",
      "info" : "ReturnStatement[9237-9295]:ReturnStatement[9237-9295]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9307-9319]:ReturnStatement[9307-9319]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9327-9333]:Modifier[9327-9333]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[9334-9340]:SimpleType[9334-9340]"
    }, {
      "left" : "getStringNumberValue",
      "right" : "getStringNumberValue",
      "info" : "SimpleName[9341-9361]:SimpleName[9341-9361]"
    }, {
      "left" : "String rawJsString",
      "right" : "String rawJsString",
      "info" : "SingleVariableDeclaration[9362-9380]:SingleVariableDeclaration[9362-9380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9382-10482]:Block[9382-10482]"
    }, {
      "left" : "String s = trimJsWhiteSpace(rawJsString);",
      "right" : "String s = trimJsWhiteSpace(rawJsString);",
      "info" : "VariableDeclarationStatement[9388-9429]:VariableDeclarationStatement[9388-9429]"
    }, {
      "left" : "if (s.length() == 0)",
      "right" : "if (s.length() == 0)",
      "info" : "IfStatement[9475-9521]:IfStatement[9475-9521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9496-9521]:Block[9496-9521]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[9504-9515]:ReturnStatement[9504-9515]"
    }, {
      "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "info" : "IfStatement[9527-9837]:IfStatement[9527-9837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9631-9837]:Block[9631-9837]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9680-9831]:TryStatement[9680-9831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9684-9762]:Block[9684-9762]"
    }, {
      "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "info" : "ReturnStatement[9694-9754]:ReturnStatement[9694-9754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9795-9831]:Block[9795-9831]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[9805-9823]:ReturnStatement[9805-9823]"
    }, {
      "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "info" : "IfStatement[9843-10091]:IfStatement[9843-10091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10001-10091]:Block[10001-10091]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10073-10085]:ReturnStatement[10073-10085]"
    }, {
      "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "info" : "IfStatement[10242-10360]:IfStatement[10242-10360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10334-10360]:Block[10334-10360]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10342-10354]:ReturnStatement[10342-10354]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10366-10478]:TryStatement[10366-10478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10370-10413]:Block[10370-10413]"
    }, {
      "left" : "return Double.parseDouble(s);",
      "right" : "return Double.parseDouble(s);",
      "info" : "ReturnStatement[10378-10407]:ReturnStatement[10378-10407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10446-10478]:Block[10446-10478]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10454-10472]:ReturnStatement[10454-10472]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10486-10492]:Modifier[10486-10492]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10493-10499]:SimpleType[10493-10499]"
    }, {
      "left" : "trimJsWhiteSpace",
      "right" : "trimJsWhiteSpace",
      "info" : "SimpleName[10500-10516]:SimpleName[10500-10516]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[10517-10525]:SingleVariableDeclaration[10517-10525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10527-10781]:Block[10527-10781]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[10533-10547]:VariableDeclarationStatement[10533-10547]"
    }, {
      "left" : "int end = s.length();",
      "right" : "int end = s.length();",
      "info" : "VariableDeclarationStatement[10552-10573]:VariableDeclarationStatement[10552-10573]"
    }, {
      "left" : "while (end > 0 && isStrWhiteSpaceChar(s.charAt(end-1)))",
      "right" : "while (end > 0 && isStrWhiteSpaceChar(s.charAt(end-1)))",
      "info" : "WhileStatement[10578-10654]:WhileStatement[10578-10654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10634-10654]:Block[10634-10654]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[10642-10648]:ExpressionStatement[10642-10648]"
    }, {
      "left" : "while (start < end && isStrWhiteSpaceChar(s.charAt(start)))",
      "right" : "while (start < end && isStrWhiteSpaceChar(s.charAt(start)))",
      "info" : "WhileStatement[10659-10741]:WhileStatement[10659-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10719-10741]:Block[10719-10741]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[10727-10735]:ExpressionStatement[10727-10735]"
    }, {
      "left" : "return s.substring(start, end);",
      "right" : "return s.substring(start, end);",
      "info" : "ReturnStatement[10746-10777]:ReturnStatement[10746-10777]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10836-10842]:Modifier[10836-10842]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10843-10850]:PrimitiveType[10843-10850]"
    }, {
      "left" : "isStrWhiteSpaceChar",
      "right" : "isStrWhiteSpaceChar",
      "info" : "SimpleName[10851-10870]:SimpleName[10851-10870]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[10871-10876]:SingleVariableDeclaration[10871-10876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10878-11285]:Block[10878-11285]"
    }, {
      "left" : "switch (c) {\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u000B': // <VT>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return true;\n      default:\n        return Character.getType(c) == Character.SPACE_SEPARATOR;\n    }",
      "right" : "switch (c) {\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u000B': // <VT>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return true;\n      default:\n        return Character.getType(c) == Character.SPACE_SEPARATOR;\n    }",
      "info" : "SwitchStatement[10884-11281]:SwitchStatement[10884-11281]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[10903-10912]:SwitchCase[10903-10912]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[10927-10937]:SwitchCase[10927-10937]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[10952-10962]:SwitchCase[10952-10962]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[10977-10987]:SwitchCase[10977-10987]"
    }, {
      "left" : "case '\\u00A0':",
      "right" : "case '\\u00A0':",
      "info" : "SwitchCase[11003-11017]:SwitchCase[11003-11017]"
    }, {
      "left" : "case '\\u000C':",
      "right" : "case '\\u000C':",
      "info" : "SwitchCase[11034-11048]:SwitchCase[11034-11048]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[11063-11077]:SwitchCase[11063-11077]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[11092-11106]:SwitchCase[11092-11106]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[11121-11135]:SwitchCase[11121-11135]"
    }, {
      "left" : "case '\\uFEFF':",
      "right" : "case '\\uFEFF':",
      "info" : "SwitchCase[11150-11164]:SwitchCase[11150-11164]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11182-11194]:ReturnStatement[11182-11194]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11201-11209]:SwitchCase[11201-11209]"
    }, {
      "left" : "return Character.getType(c) == Character.SPACE_SEPARATOR;",
      "right" : "return Character.getType(c) == Character.SPACE_SEPARATOR;",
      "info" : "ReturnStatement[11218-11275]:ReturnStatement[11218-11275]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11902-11908]:Modifier[11902-11908]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11909-11915]:SimpleType[11909-11915]"
    }, {
      "left" : "getFunctionName",
      "right" : "getFunctionName",
      "info" : "SimpleName[11916-11931]:SimpleName[11916-11931]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11932-11938]:SingleVariableDeclaration[11932-11938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-12493]:Block[11940-12493]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[11946-11974]:VariableDeclarationStatement[11946-11974]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[11979-12023]:VariableDeclarationStatement[11979-12023]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[12028-12489]:SwitchStatement[12028-12489]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12062-12078]:SwitchCase[12062-12078]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[12168-12194]:ReturnStatement[12168-12194]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[12202-12220]:SwitchCase[12202-12220]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[12322-12371]:ReturnStatement[12322-12371]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12379-12387]:SwitchCase[12379-12387]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[12427-12483]:ReturnStatement[12427-12483]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13098-13104]:Modifier[13098-13104]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13105-13111]:SimpleType[13105-13111]"
    }, {
      "left" : "getNearestFunctionName",
      "right" : "getNearestFunctionName",
      "info" : "SimpleName[13112-13134]:SimpleName[13112-13134]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13135-13141]:SingleVariableDeclaration[13135-13141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13143-13593]:Block[13143-13593]"
    }, {
      "left" : "String name = getFunctionName(n);",
      "right" : "String name = getFunctionName(n);",
      "info" : "VariableDeclarationStatement[13149-13182]:VariableDeclarationStatement[13149-13182]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[13187-13231]:IfStatement[13187-13231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13205-13231]:Block[13205-13231]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[13213-13225]:ReturnStatement[13213-13225]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[13288-13316]:VariableDeclarationStatement[13288-13316]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "info" : "SwitchStatement[13321-13571]:SwitchStatement[13321-13571]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[13355-13370]:SwitchCase[13355-13370]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[13377-13392]:SwitchCase[13377-13392]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13399-13417]:SwitchCase[13399-13417]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[13475-13501]:ReturnStatement[13475-13501]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[13508-13526]:SwitchCase[13508-13526]"
    }, {
      "left" : "return getStringValue(parent);",
      "right" : "return getStringValue(parent);",
      "info" : "ReturnStatement[13535-13565]:ReturnStatement[13535-13565]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13577-13589]:ReturnStatement[13577-13589]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13659-13665]:Modifier[13659-13665]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13666-13673]:PrimitiveType[13666-13673]"
    }, {
      "left" : "isImmutableValue",
      "right" : "isImmutableValue",
      "info" : "SimpleName[13674-13690]:SimpleName[13674-13690]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13691-13697]:SingleVariableDeclaration[13691-13697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13699-14386]:Block[13699-14386]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[13705-14363]:SwitchStatement[13705-14363]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13734-13752]:SwitchCase[13734-13752]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[13759-13777]:SwitchCase[13759-13777]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[13784-13800]:SwitchCase[13784-13800]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[13807-13823]:SwitchCase[13807-13823]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[13830-13847]:SwitchCase[13830-13847]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13856-13868]:ReturnStatement[13856-13868]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[13875-13890]:SwitchCase[13875-13890]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[13899-13942]:ReturnStatement[13899-13942]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[13949-13965]:SwitchCase[13949-13965]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[13972-13987]:SwitchCase[13972-13987]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[13996-14039]:ReturnStatement[13996-14039]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14046-14062]:SwitchCase[14046-14062]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[14071-14099]:VariableDeclarationStatement[14071-14099]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[14252-14357]:ReturnStatement[14252-14357]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14369-14382]:ReturnStatement[14369-14382]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15292-15298]:Modifier[15292-15298]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15299-15306]:PrimitiveType[15299-15306]"
    }, {
      "left" : "isLiteralValue",
      "right" : "isLiteralValue",
      "info" : "SimpleName[15307-15321]:SimpleName[15307-15321]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15322-15328]:SingleVariableDeclaration[15322-15328]"
    }, {
      "left" : "boolean includeFunctions",
      "right" : "boolean includeFunctions",
      "info" : "SingleVariableDeclaration[15330-15354]:SingleVariableDeclaration[15330-15354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15356-16204]:Block[15356-16204]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[15362-16200]:SwitchStatement[15362-16200]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[15391-15411]:SwitchCase[15391-15411]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[15418-15436]:SwitchCase[15418-15436]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[15500-15697]:ForStatement[15500-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15590-15697]:Block[15590-15697]"
    }, {
      "left" : "if (!isLiteralValue(child, includeFunctions))",
      "right" : "if (!isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[15602-15687]:IfStatement[15602-15687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15648-15687]:Block[15648-15687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15662-15675]:ReturnStatement[15662-15675]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15706-15718]:ReturnStatement[15706-15718]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[15726-15747]:SwitchCase[15726-15747]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[15809-16022]:ForStatement[15809-16022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15899-16022]:Block[15899-16022]"
    }, {
      "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "info" : "IfStatement[15911-16012]:IfStatement[15911-16012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15973-16012]:Block[15973-16012]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15987-16000]:ReturnStatement[15987-16000]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16031-16043]:ReturnStatement[16031-16043]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[16051-16071]:SwitchCase[16051-16071]"
    }, {
      "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "info" : "ReturnStatement[16080-16142]:ReturnStatement[16080-16142]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16150-16158]:SwitchCase[16150-16158]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[16167-16194]:ReturnStatement[16167-16194]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16395-16401]:Modifier[16395-16401]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16402-16409]:PrimitiveType[16402-16409]"
    }, {
      "left" : "isValidDefineValue",
      "right" : "isValidDefineValue",
      "info" : "SimpleName[16410-16428]:SimpleName[16410-16428]"
    }, {
      "left" : "Node val",
      "right" : "Node val",
      "info" : "SingleVariableDeclaration[16429-16437]:SingleVariableDeclaration[16429-16437]"
    }, {
      "left" : "Set<String> defines",
      "right" : "Set<String> defines",
      "info" : "SingleVariableDeclaration[16439-16458]:SingleVariableDeclaration[16439-16458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16460-17698]:Block[16460-17698]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[16466-17676]:SwitchStatement[16466-17676]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[16497-16515]:SwitchCase[16497-16515]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[16522-16540]:SwitchCase[16522-16540]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16547-16563]:SwitchCase[16547-16563]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16570-16587]:SwitchCase[16570-16587]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16596-16608]:ReturnStatement[16596-16608]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[16685-16700]:SwitchCase[16685-16700]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[16707-16725]:SwitchCase[16707-16725]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[16732-16750]:SwitchCase[16732-16750]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[16757-16774]:SwitchCase[16757-16774]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[16781-16799]:SwitchCase[16781-16799]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[16806-16821]:SwitchCase[16806-16821]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[16828-16842]:SwitchCase[16828-16842]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[16849-16863]:SwitchCase[16849-16863]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[16870-16884]:SwitchCase[16870-16884]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[16891-16905]:SwitchCase[16891-16905]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[16912-16927]:SwitchCase[16912-16927]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[16934-16948]:SwitchCase[16934-16948]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[16955-16970]:SwitchCase[16955-16970]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[16977-16992]:SwitchCase[16977-16992]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[16999-17013]:SwitchCase[16999-17013]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[17020-17035]:SwitchCase[17020-17035]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[17042-17058]:SwitchCase[17042-17058]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[17065-17081]:SwitchCase[17065-17081]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[17088-17103]:SwitchCase[17088-17103]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[17110-17126]:SwitchCase[17110-17126]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "info" : "ReturnStatement[17135-17254]:ReturnStatement[17135-17254]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[17321-17336]:SwitchCase[17321-17336]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[17343-17358]:SwitchCase[17343-17358]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[17365-17380]:SwitchCase[17365-17380]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[17389-17445]:ReturnStatement[17389-17445]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[17522-17538]:SwitchCase[17522-17538]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[17545-17564]:SwitchCase[17545-17564]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[17573-17670]:IfStatement[17573-17670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17600-17670]:Block[17600-17670]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[17612-17660]:ReturnStatement[17612-17660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17681-17694]:ReturnStatement[17681-17694]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17804-17810]:Modifier[17804-17810]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17811-17818]:PrimitiveType[17811-17818]"
    }, {
      "left" : "isEmptyBlock",
      "right" : "isEmptyBlock",
      "info" : "SimpleName[17819-17831]:SimpleName[17819-17831]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[17832-17842]:SingleVariableDeclaration[17832-17842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17844-18082]:Block[17844-18082]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[17850-17913]:IfStatement[17850-17913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17886-17913]:Block[17886-17913]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17894-17907]:ReturnStatement[17894-17907]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[17919-18061]:ForStatement[17919-18061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17984-18061]:Block[17984-18061]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[17992-18055]:IfStatement[17992-18055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18024-18055]:Block[18024-18055]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18034-18047]:ReturnStatement[18034-18047]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18066-18078]:ReturnStatement[18066-18078]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18086-18092]:Modifier[18086-18092]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18093-18100]:PrimitiveType[18093-18100]"
    }, {
      "left" : "isSimpleOperator",
      "right" : "isSimpleOperator",
      "info" : "SimpleName[18101-18117]:SimpleName[18101-18117]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18118-18124]:SingleVariableDeclaration[18118-18124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18126-18177]:Block[18126-18177]"
    }, {
      "left" : "return isSimpleOperatorType(n.getType());",
      "right" : "return isSimpleOperatorType(n.getType());",
      "info" : "ReturnStatement[18132-18173]:ReturnStatement[18132-18173]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18355-18361]:Modifier[18355-18361]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18362-18369]:PrimitiveType[18362-18369]"
    }, {
      "left" : "isSimpleOperatorType",
      "right" : "isSimpleOperatorType",
      "info" : "SimpleName[18370-18390]:SimpleName[18370-18390]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[18391-18399]:SingleVariableDeclaration[18391-18399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18401-19158]:Block[18401-19158]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[18407-19154]:SwitchStatement[18407-19154]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[18429-18444]:SwitchCase[18429-18444]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18451-18469]:SwitchCase[18451-18469]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[18476-18494]:SwitchCase[18476-18494]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[18501-18518]:SwitchCase[18501-18518]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[18525-18543]:SwitchCase[18525-18543]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[18550-18567]:SwitchCase[18550-18567]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[18574-18589]:SwitchCase[18574-18589]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[18596-18610]:SwitchCase[18596-18610]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[18617-18631]:SwitchCase[18617-18631]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[18638-18657]:SwitchCase[18638-18657]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18664-18683]:SwitchCase[18664-18683]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[18690-18704]:SwitchCase[18690-18704]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[18711-18733]:SwitchCase[18711-18733]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[18740-18754]:SwitchCase[18740-18754]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[18761-18776]:SwitchCase[18761-18776]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[18783-18797]:SwitchCase[18783-18797]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[18804-18819]:SwitchCase[18804-18819]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[18826-18841]:SwitchCase[18826-18841]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[18848-18862]:SwitchCase[18848-18862]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[18869-18884]:SwitchCase[18869-18884]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[18891-18906]:SwitchCase[18891-18906]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[18913-18929]:SwitchCase[18913-18929]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[18936-18952]:SwitchCase[18936-18952]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[18959-18974]:SwitchCase[18959-18974]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[18981-18999]:SwitchCase[18981-18999]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19006-19022]:SwitchCase[19006-19022]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19029-19044]:SwitchCase[19029-19044]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19051-19066]:SwitchCase[19051-19066]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[19073-19089]:SwitchCase[19073-19089]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19098-19110]:ReturnStatement[19098-19110]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19118-19126]:SwitchCase[19118-19126]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19135-19148]:ReturnStatement[19135-19148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19319-19325]:Modifier[19319-19325]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19326-19332]:Modifier[19326-19332]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19333-19337]:SimpleType[19333-19337]"
    }, {
      "left" : "newExpr",
      "right" : "newExpr",
      "info" : "SimpleName[19338-19345]:SimpleName[19338-19345]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[19346-19356]:SingleVariableDeclaration[19346-19356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19358-19468]:Block[19358-19468]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "info" : "VariableDeclarationStatement[19364-19447]:VariableDeclarationStatement[19364-19447]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[19452-19464]:ReturnStatement[19452-19464]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19642-19648]:Modifier[19642-19648]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19649-19656]:PrimitiveType[19649-19656]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[19657-19678]:SimpleName[19657-19678]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19679-19685]:SingleVariableDeclaration[19679-19685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19687-19735]:Block[19687-19735]"
    }, {
      "left" : "return mayEffectMutableState(n, null);",
      "right" : "return mayEffectMutableState(n, null);",
      "info" : "ReturnStatement[19693-19731]:ReturnStatement[19693-19731]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19739-19745]:Modifier[19739-19745]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19746-19753]:PrimitiveType[19746-19753]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[19754-19775]:SimpleName[19754-19775]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19776-19782]:SingleVariableDeclaration[19776-19782]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[19784-19809]:SingleVariableDeclaration[19784-19809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19811-19873]:Block[19811-19873]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true, compiler);",
      "right" : "return checkForStateChangeHelper(n, true, compiler);",
      "info" : "ReturnStatement[19817-19869]:ReturnStatement[19817-19869]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19962-19968]:Modifier[19962-19968]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19969-19976]:PrimitiveType[19969-19976]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[19977-19995]:SimpleName[19977-19995]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19996-20002]:SingleVariableDeclaration[19996-20002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20004-20049]:Block[20004-20049]"
    }, {
      "left" : "return mayHaveSideEffects(n, null);",
      "right" : "return mayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[20010-20045]:ReturnStatement[20010-20045]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20053-20059]:Modifier[20053-20059]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20060-20067]:PrimitiveType[20060-20067]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[20068-20086]:SimpleName[20068-20086]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20087-20093]:SingleVariableDeclaration[20087-20093]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[20095-20120]:SingleVariableDeclaration[20095-20120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20122-20185]:Block[20122-20185]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false, compiler);",
      "right" : "return checkForStateChangeHelper(n, false, compiler);",
      "info" : "ReturnStatement[20128-20181]:ReturnStatement[20128-20181]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20463-20470]:Modifier[20463-20470]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20471-20477]:Modifier[20471-20477]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20478-20485]:PrimitiveType[20478-20485]"
    }, {
      "left" : "checkForStateChangeHelper",
      "right" : "checkForStateChangeHelper",
      "info" : "SimpleName[20486-20511]:SimpleName[20486-20511]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20519-20525]:SingleVariableDeclaration[20519-20525]"
    }, {
      "left" : "boolean checkForNewObjects",
      "right" : "boolean checkForNewObjects",
      "info" : "SingleVariableDeclaration[20527-20553]:SingleVariableDeclaration[20527-20553]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[20555-20580]:SingleVariableDeclaration[20555-20580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20582-25030]:Block[20582-25030]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[20686-24832]:SwitchStatement[20686-24832]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[20774-20789]:SwitchCase[20774-20789]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[20796-20813]:SwitchCase[20796-20813]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[20820-20843]:SwitchCase[20820-20843]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[20850-20866]:SwitchCase[20850-20866]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[20873-20887]:SwitchCase[20873-20887]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[20894-20908]:SwitchCase[20894-20908]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[20915-20929]:SwitchCase[20915-20929]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[20936-20954]:SwitchCase[20936-20954]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[20961-20975]:SwitchCase[20961-20975]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[20982-20998]:SwitchCase[20982-20998]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21005-21021]:SwitchCase[21005-21021]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21028-21045]:SwitchCase[21028-21045]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21052-21068]:SwitchCase[21052-21068]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21075-21093]:SwitchCase[21075-21093]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[21100-21118]:SwitchCase[21100-21118]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[21125-21140]:SwitchCase[21125-21140]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[21147-21164]:SwitchCase[21147-21164]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21173-21179]:BreakStatement[21173-21179]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[21234-21251]:SwitchCase[21234-21251]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21260-21272]:ReturnStatement[21260-21272]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[21280-21301]:SwitchCase[21280-21301]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[21310-21368]:IfStatement[21310-21368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21334-21368]:Block[21334-21368]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21346-21358]:ReturnStatement[21346-21358]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[21377-21597]:ForStatement[21377-21597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21438-21597]:Block[21438-21597]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[21450-21587]:IfStatement[21450-21587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21549-21587]:Block[21549-21587]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21563-21575]:ReturnStatement[21563-21575]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21606-21619]:ReturnStatement[21606-21619]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[21627-21647]:SwitchCase[21627-21647]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[21654-21672]:SwitchCase[21654-21672]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[21681-21739]:IfStatement[21681-21739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21705-21739]:Block[21705-21739]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21717-21729]:ReturnStatement[21717-21729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21748-21754]:BreakStatement[21748-21754]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[21762-21777]:SwitchCase[21762-21777]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[21827-21843]:SwitchCase[21827-21843]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[21876-21941]:IfStatement[21876-21941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21907-21941]:Block[21907-21941]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21919-21931]:ReturnStatement[21919-21931]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21950-21956]:BreakStatement[21950-21956]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[21964-21984]:SwitchCase[21964-21984]"
    }, {
      "left" : "return checkForNewObjects || !isFunctionExpression(n);",
      "right" : "return checkForNewObjects || !isFunctionExpression(n);",
      "info" : "ReturnStatement[22217-22271]:ReturnStatement[22217-22271]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[22279-22294]:SwitchCase[22279-22294]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[22303-22361]:IfStatement[22303-22361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22327-22361]:Block[22327-22361]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22339-22351]:ReturnStatement[22339-22351]"
    }, {
      "left" : "if (!constructorCallHasSideEffects(n))",
      "right" : "if (!constructorCallHasSideEffects(n))",
      "info" : "IfStatement[22371-22532]:IfStatement[22371-22532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22410-22532]:Block[22410-22532]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22516-22522]:BreakStatement[22516-22522]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22541-22553]:ReturnStatement[22541-22553]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[22561-22577]:SwitchCase[22561-22577]"
    }, {
      "left" : "if (!functionCallHasSideEffects(n, compiler))",
      "right" : "if (!functionCallHasSideEffects(n, compiler))",
      "info" : "IfStatement[22691-22856]:IfStatement[22691-22856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22737-22856]:Block[22737-22856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22840-22846]:BreakStatement[22840-22846]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22865-22877]:ReturnStatement[22865-22877]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22885-22893]:SwitchCase[22885-22893]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[22902-22969]:IfStatement[22902-22969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22941-22969]:Block[22941-22969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22953-22959]:BreakStatement[22953-22959]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[22979-24804]:IfStatement[22979-24804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23002-24804]:Block[23002-24804]"
    }, {
      "left" : "Node assignTarget = n.getFirstChild();",
      "right" : "Node assignTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[23014-23052]:VariableDeclarationStatement[23014-23052]"
    }, {
      "left" : "if (isName(assignTarget))",
      "right" : "if (isName(assignTarget))",
      "info" : "IfStatement[23063-23127]:IfStatement[23063-23127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23089-23127]:Block[23089-23127]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23103-23115]:ReturnStatement[23103-23115]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[23360-23607]:IfStatement[23360-23607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23569-23607]:Block[23569-23607]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23583-23595]:ReturnStatement[23583-23595]"
    }, {
      "left" : "if (isGet(assignTarget))",
      "right" : "if (isGet(assignTarget))",
      "info" : "IfStatement[23619-24794]:IfStatement[23619-24794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23644-24522]:Block[23644-24522]"
    }, {
      "left" : "Node current = assignTarget.getFirstChild();",
      "right" : "Node current = assignTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[23944-23988]:VariableDeclarationStatement[23944-23988]"
    }, {
      "left" : "if (evaluatesToLocalValue(current))",
      "right" : "if (evaluatesToLocalValue(current))",
      "info" : "IfStatement[24001-24080]:IfStatement[24001-24080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24037-24080]:Block[24037-24080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24053-24066]:ReturnStatement[24053-24066]"
    }, {
      "left" : "while (isGet(current))",
      "right" : "while (isGet(current))",
      "info" : "WhileStatement[24371-24458]:WhileStatement[24371-24458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24394-24458]:Block[24394-24458]"
    }, {
      "left" : "current = current.getFirstChild();",
      "right" : "current = current.getFirstChild();",
      "info" : "ExpressionStatement[24410-24444]:ExpressionStatement[24410-24444]"
    }, {
      "left" : "return !isLiteralValue(current, true);",
      "right" : "return !isLiteralValue(current, true);",
      "info" : "ReturnStatement[24472-24510]:ReturnStatement[24472-24510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24528-24794]:Block[24528-24794]"
    }, {
      "left" : "return !isLiteralValue(assignTarget, true);",
      "right" : "return !isLiteralValue(assignTarget, true);",
      "info" : "ReturnStatement[24739-24782]:ReturnStatement[24739-24782]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24814-24826]:ReturnStatement[24814-24826]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[24838-25007]:ForStatement[24838-25007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24899-25007]:Block[24899-25007]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "info" : "IfStatement[24907-25001]:IfStatement[24907-25001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24971-25001]:Block[24971-25001]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24981-24993]:ReturnStatement[24981-24993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25013-25026]:ReturnStatement[25013-25026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25148-25154]:Modifier[25148-25154]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25155-25162]:PrimitiveType[25155-25162]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[25163-25192]:SimpleName[25163-25192]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[25193-25206]:SingleVariableDeclaration[25193-25206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25208-25271]:Block[25208-25271]"
    }, {
      "left" : "return constructorCallHasSideEffects(callNode, null);",
      "right" : "return constructorCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[25214-25267]:ReturnStatement[25214-25267]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25275-25281]:Modifier[25275-25281]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25282-25289]:PrimitiveType[25282-25289]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[25290-25319]:SimpleName[25290-25319]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[25327-25340]:SingleVariableDeclaration[25327-25340]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[25342-25367]:SingleVariableDeclaration[25342-25367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25369-25813]:Block[25369-25813]"
    }, {
      "left" : "if (callNode.getType() != Token.NEW)",
      "right" : "if (callNode.getType() != Token.NEW)",
      "info" : "IfStatement[25375-25529]:IfStatement[25375-25529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25412-25529]:Block[25412-25529]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[25420-25523]:ThrowStatement[25420-25523]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[25535-25598]:IfStatement[25535-25598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25571-25598]:Block[25571-25598]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25579-25592]:ReturnStatement[25579-25592]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[25604-25645]:VariableDeclarationStatement[25604-25645]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[25650-25791]:IfStatement[25650-25791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25764-25791]:Block[25764-25791]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25772-25785]:ReturnStatement[25772-25785]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25797-25809]:ReturnStatement[25797-25809]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26657-26663]:Modifier[26657-26663]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26664-26671]:PrimitiveType[26664-26671]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[26672-26698]:SimpleName[26672-26698]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[26699-26712]:SingleVariableDeclaration[26699-26712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26714-26774]:Block[26714-26774]"
    }, {
      "left" : "return functionCallHasSideEffects(callNode, null);",
      "right" : "return functionCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[26720-26770]:ReturnStatement[26720-26770]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27023-27029]:Modifier[27023-27029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27030-27037]:PrimitiveType[27030-27037]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[27038-27064]:SimpleName[27038-27064]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[27072-27085]:SingleVariableDeclaration[27072-27085]"
    }, {
      "left" : "@Nullable AbstractCompiler compiler",
      "right" : "@Nullable AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[27087-27122]:SingleVariableDeclaration[27087-27122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27124-28943]:Block[27124-28943]"
    }, {
      "left" : "if (callNode.getType() != Token.CALL)",
      "right" : "if (callNode.getType() != Token.CALL)",
      "info" : "IfStatement[27130-27286]:IfStatement[27130-27286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27168-27286]:Block[27168-27286]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[27176-27280]:ThrowStatement[27176-27280]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[27292-27355]:IfStatement[27292-27355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27328-27355]:Block[27328-27355]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27336-27349]:ReturnStatement[27336-27349]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[27361-27402]:VariableDeclarationStatement[27361-27402]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[27456-28921]:IfStatement[27456-28921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27494-27639]:Block[27494-27639]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[27502-27537]:VariableDeclarationStatement[27502-27537]"
    }, {
      "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "info" : "IfStatement[27544-27633]:IfStatement[27544-27633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27602-27633]:Block[27602-27633]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27612-27625]:ReturnStatement[27612-27625]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP)",
      "right" : "if (nameNode.getType() == Token.GETPROP)",
      "info" : "IfStatement[27645-28921]:IfStatement[27645-28921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27686-28921]:Block[27686-28921]"
    }, {
      "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[27694-27864]:IfStatement[27694-27864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27833-27864]:Block[27833-27864]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27843-27856]:ReturnStatement[27843-27856]"
    }, {
      "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "info" : "IfStatement[27872-28003]:IfStatement[27872-28003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27972-28003]:Block[27972-28003]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27982-27995]:ReturnStatement[27982-27995]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[28076-28286]:IfStatement[28076-28286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28130-28286]:Block[28130-28286]"
    }, {
      "left" : "String namespaceName = nameNode.getFirstChild().getString();",
      "right" : "String namespaceName = nameNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[28140-28200]:VariableDeclarationStatement[28140-28200]"
    }, {
      "left" : "if (namespaceName.equals(\"Math\"))",
      "right" : "if (namespaceName.equals(\"Math\"))",
      "info" : "IfStatement[28209-28278]:IfStatement[28209-28278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28243-28278]:Block[28243-28278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28255-28268]:ReturnStatement[28255-28268]"
    }, {
      "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "info" : "IfStatement[28294-28915]:IfStatement[28294-28915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28357-28915]:Block[28357-28915]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "info" : "IfStatement[28367-28907]:IfStatement[28367-28907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28499-28534]:Block[28499-28534]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28511-28524]:ReturnStatement[28511-28524]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[28540-28907]:IfStatement[28540-28907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28696-28907]:Block[28696-28907]"
    }, {
      "left" : "Node param = nameNode.getNext();",
      "right" : "Node param = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[28708-28740]:VariableDeclarationStatement[28708-28740]"
    }, {
      "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "info" : "IfStatement[28751-28897]:IfStatement[28751-28897]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28884-28897]:ReturnStatement[28884-28897]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28927-28939]:ReturnStatement[28927-28939]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29009-29015]:Modifier[29009-29015]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29016-29023]:PrimitiveType[29016-29023]"
    }, {
      "left" : "callHasLocalResult",
      "right" : "callHasLocalResult",
      "info" : "SimpleName[29024-29042]:SimpleName[29024-29042]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29043-29049]:SingleVariableDeclaration[29043-29049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29051-29180]:Block[29051-29180]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[29057-29109]:ExpressionStatement[29057-29109]"
    }, {
      "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "info" : "ReturnStatement[29114-29176]:ReturnStatement[29114-29176]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29245-29251]:Modifier[29245-29251]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29252-29259]:PrimitiveType[29252-29259]"
    }, {
      "left" : "newHasLocalResult",
      "right" : "newHasLocalResult",
      "info" : "SimpleName[29260-29277]:SimpleName[29260-29277]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29278-29284]:SingleVariableDeclaration[29278-29284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29286-29386]:Block[29286-29386]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[29292-29343]:ExpressionStatement[29292-29343]"
    }, {
      "left" : "return n.isOnlyModifiesThisCall();",
      "right" : "return n.isOnlyModifiesThisCall();",
      "info" : "ReturnStatement[29348-29382]:ReturnStatement[29348-29382]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29659-29665]:Modifier[29659-29665]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29666-29673]:PrimitiveType[29666-29673]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[29674-29700]:SimpleName[29674-29700]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29701-29707]:SingleVariableDeclaration[29701-29707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29709-29762]:Block[29709-29762]"
    }, {
      "left" : "return nodeTypeMayHaveSideEffects(n, null);",
      "right" : "return nodeTypeMayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[29715-29758]:ReturnStatement[29715-29758]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29766-29772]:Modifier[29766-29772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29773-29780]:PrimitiveType[29773-29780]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[29781-29807]:SimpleName[29781-29807]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29808-29814]:SingleVariableDeclaration[29808-29814]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[29816-29841]:SingleVariableDeclaration[29816-29841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29843-30354]:Block[29843-30354]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[29849-29898]:IfStatement[29849-29898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29872-29898]:Block[29872-29898]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29880-29892]:ReturnStatement[29880-29892]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[29904-30350]:SwitchStatement[29904-30350]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[29932-29951]:SwitchCase[29932-29951]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[29958-29973]:SwitchCase[29958-29973]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[29980-29995]:SwitchCase[29980-29995]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[30002-30019]:SwitchCase[30002-30019]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30028-30040]:ReturnStatement[30028-30040]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[30047-30063]:SwitchCase[30047-30063]"
    }, {
      "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[30072-30128]:ReturnStatement[30072-30128]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[30135-30150]:SwitchCase[30135-30150]"
    }, {
      "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[30159-30218]:ReturnStatement[30159-30218]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[30225-30241]:SwitchCase[30225-30241]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[30284-30307]:ReturnStatement[30284-30307]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30314-30322]:SwitchCase[30314-30322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30331-30344]:ReturnStatement[30331-30344]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30458-30464]:Modifier[30458-30464]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30465-30472]:PrimitiveType[30465-30472]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[30473-30490]:SimpleName[30473-30490]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30491-30497]:SingleVariableDeclaration[30491-30497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30499-30598]:Block[30499-30598]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[30505-30551]:VariableDeclarationStatement[30505-30551]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[30556-30594]:ReturnStatement[30556-30594]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30849-30855]:Modifier[30849-30855]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30856-30863]:PrimitiveType[30856-30863]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[30864-30881]:SimpleName[30864-30881]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30882-30888]:SingleVariableDeclaration[30882-30888]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[30890-30916]:SingleVariableDeclaration[30890-30916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30918-31937]:Block[30918-31937]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "info" : "SwitchStatement[30924-31761]:SwitchStatement[30924-31761]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[30953-30969]:SwitchCase[30953-30969]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[30976-30991]:SwitchCase[30976-30991]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31191-31203]:ReturnStatement[31191-31203]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[31210-31226]:SwitchCase[31210-31226]"
    }, {
      "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[31295-31376]:ReturnStatement[31295-31376]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[31450-31469]:SwitchCase[31450-31469]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[31476-31495]:SwitchCase[31476-31495]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31504-31516]:ReturnStatement[31504-31516]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[31524-31544]:SwitchCase[31524-31544]"
    }, {
      "left" : "Preconditions.checkState(isFunctionExpression(n));",
      "right" : "Preconditions.checkState(isFunctionExpression(n));",
      "info" : "ExpressionStatement[31683-31733]:ExpressionStatement[31683-31733]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31742-31755]:ReturnStatement[31742-31755]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[31767-31914]:ForStatement[31767-31914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31828-31914]:Block[31828-31914]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[31836-31908]:IfStatement[31836-31908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31878-31908]:Block[31878-31908]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31888-31900]:ReturnStatement[31888-31900]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31920-31933]:ReturnStatement[31920-31933]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32374-32380]:Modifier[32374-32380]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32381-32384]:PrimitiveType[32381-32384]"
    }, {
      "left" : "precedence",
      "right" : "precedence",
      "info" : "SimpleName[32385-32395]:SimpleName[32385-32395]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[32396-32404]:SingleVariableDeclaration[32396-32404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32406-34429]:Block[32406-34429]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[32412-34425]:SwitchStatement[32412-34425]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[32434-32451]:SwitchCase[32434-32451]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32453-32462]:ReturnStatement[32453-32462]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[32469-32493]:SwitchCase[32469-32493]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[32500-32525]:SwitchCase[32500-32525]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[32532-32557]:SwitchCase[32532-32557]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[32564-32586]:SwitchCase[32564-32586]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[32593-32615]:SwitchCase[32593-32615]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[32622-32645]:SwitchCase[32622-32645]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[32652-32674]:SwitchCase[32652-32674]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[32681-32703]:SwitchCase[32681-32703]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[32710-32732]:SwitchCase[32710-32732]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[32739-32761]:SwitchCase[32739-32761]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[32768-32790]:SwitchCase[32768-32790]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[32797-32815]:SwitchCase[32797-32815]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[32816-32825]:ReturnStatement[32816-32825]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[32832-32848]:SwitchCase[32832-32848]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[32851-32860]:ReturnStatement[32851-32860]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[32883-32897]:SwitchCase[32883-32897]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[32902-32911]:ReturnStatement[32902-32911]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[32918-32933]:SwitchCase[32918-32933]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[32937-32946]:ReturnStatement[32937-32946]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[32953-32970]:SwitchCase[32953-32970]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[32972-32981]:ReturnStatement[32972-32981]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[32988-33006]:SwitchCase[32988-33006]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[33007-33016]:ReturnStatement[33007-33016]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[33023-33041]:SwitchCase[33023-33041]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[33042-33051]:ReturnStatement[33042-33051]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[33058-33072]:SwitchCase[33058-33072]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[33079-33093]:SwitchCase[33079-33093]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[33100-33116]:SwitchCase[33100-33116]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[33123-33139]:SwitchCase[33123-33139]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[33142-33151]:ReturnStatement[33142-33151]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[33158-33172]:SwitchCase[33158-33172]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[33179-33193]:SwitchCase[33179-33193]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[33200-33214]:SwitchCase[33200-33214]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[33221-33235]:SwitchCase[33221-33235]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[33242-33264]:SwitchCase[33242-33264]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[33271-33285]:SwitchCase[33271-33285]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[33290-33299]:ReturnStatement[33290-33299]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[33306-33321]:SwitchCase[33306-33321]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[33328-33343]:SwitchCase[33328-33343]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[33350-33366]:SwitchCase[33350-33366]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[33369-33379]:ReturnStatement[33369-33379]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[33386-33401]:SwitchCase[33386-33401]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[33408-33423]:SwitchCase[33408-33423]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[33427-33437]:ReturnStatement[33427-33437]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[33444-33459]:SwitchCase[33444-33459]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[33466-33481]:SwitchCase[33466-33481]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[33488-33503]:SwitchCase[33488-33503]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[33507-33517]:ReturnStatement[33507-33517]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[33524-33539]:SwitchCase[33524-33539]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[33546-33561]:SwitchCase[33546-33561]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[33568-33583]:SwitchCase[33568-33583]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[33590-33609]:SwitchCase[33590-33609]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[33616-33634]:SwitchCase[33616-33634]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[33641-33657]:SwitchCase[33641-33657]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[33664-33679]:SwitchCase[33664-33679]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[33686-33704]:SwitchCase[33686-33704]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[33711-33726]:SwitchCase[33711-33726]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[33733-33748]:SwitchCase[33733-33748]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[33752-33762]:ReturnStatement[33752-33762]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[33770-33790]:SwitchCase[33770-33790]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[33797-33813]:SwitchCase[33797-33813]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[33820-33837]:SwitchCase[33820-33837]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[33844-33861]:SwitchCase[33844-33861]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[33868-33888]:SwitchCase[33868-33888]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[33895-33914]:SwitchCase[33895-33914]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[33921-33940]:SwitchCase[33921-33940]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[33947-33966]:SwitchCase[33947-33966]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[33973-33987]:SwitchCase[33973-33987]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[33994-34008]:SwitchCase[33994-34008]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[34015-34031]:SwitchCase[34015-34031]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[34038-34054]:SwitchCase[34038-34054]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[34061-34079]:SwitchCase[34061-34079]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[34086-34107]:SwitchCase[34086-34107]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[34114-34132]:SwitchCase[34114-34132]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[34139-34157]:SwitchCase[34139-34157]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[34164-34182]:SwitchCase[34164-34182]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[34189-34205]:SwitchCase[34189-34205]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[34212-34228]:SwitchCase[34212-34228]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[34237-34247]:ReturnStatement[34237-34247]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34255-34263]:SwitchCase[34255-34263]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[34264-34419]:ThrowStatement[34264-34419]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34545-34551]:Modifier[34545-34551]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34552-34559]:PrimitiveType[34552-34559]"
    }, {
      "left" : "valueCheck",
      "right" : "valueCheck",
      "info" : "SimpleName[34560-34570]:SimpleName[34560-34570]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34571-34577]:SingleVariableDeclaration[34571-34577]"
    }, {
      "left" : "Predicate<Node> p",
      "right" : "Predicate<Node> p",
      "info" : "SingleVariableDeclaration[34579-34596]:SingleVariableDeclaration[34579-34596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34598-35043]:Block[34598-35043]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "info" : "SwitchStatement[34604-35039]:SwitchStatement[34604-35039]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[34633-34651]:SwitchCase[34633-34651]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[34658-34675]:SwitchCase[34658-34675]"
    }, {
      "left" : "return valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[34684-34723]:ReturnStatement[34684-34723]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[34730-34745]:SwitchCase[34730-34745]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[34752-34766]:SwitchCase[34752-34766]"
    }, {
      "left" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[34775-34862]:ReturnStatement[34775-34862]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[34869-34885]:SwitchCase[34869-34885]"
    }, {
      "left" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[34894-34991]:ReturnStatement[34894-34991]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34998-35006]:SwitchCase[34998-35006]"
    }, {
      "left" : "return p.apply(n);",
      "right" : "return p.apply(n);",
      "info" : "ReturnStatement[35015-35033]:ReturnStatement[35015-35033]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35047-35053]:Modifier[35047-35053]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[35054-35059]:TYPE_DECLARATION_KIND[35054-35059]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "SimpleName[35060-35083]:SimpleName[35060-35083]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35117-35123]:Modifier[35117-35123]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35124-35131]:PrimitiveType[35124-35131]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[35132-35137]:SimpleName[35132-35137]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35138-35144]:SingleVariableDeclaration[35138-35144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35146-35192]:Block[35146-35192]"
    }, {
      "left" : "return isNumericResultHelper(n);",
      "right" : "return isNumericResultHelper(n);",
      "info" : "ReturnStatement[35154-35186]:ReturnStatement[35154-35186]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35387-35393]:Modifier[35387-35393]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35394-35401]:PrimitiveType[35394-35401]"
    }, {
      "left" : "isNumericResult",
      "right" : "isNumericResult",
      "info" : "SimpleName[35402-35417]:SimpleName[35402-35417]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35418-35424]:SingleVariableDeclaration[35418-35424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35426-35484]:Block[35426-35484]"
    }, {
      "left" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "info" : "ReturnStatement[35432-35480]:ReturnStatement[35432-35480]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35488-35494]:Modifier[35488-35494]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35495-35502]:PrimitiveType[35495-35502]"
    }, {
      "left" : "isNumericResultHelper",
      "right" : "isNumericResultHelper",
      "info" : "SimpleName[35503-35524]:SimpleName[35503-35524]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35525-35531]:SingleVariableDeclaration[35525-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35533-36333]:Block[35533-36333]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[35539-36329]:SwitchStatement[35539-36329]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[35568-35583]:SwitchCase[35568-35583]"
    }, {
      "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "info" : "ReturnStatement[35592-35677]:ReturnStatement[35592-35677]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[35684-35702]:SwitchCase[35684-35702]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[35709-35726]:SwitchCase[35709-35726]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[35733-35751]:SwitchCase[35733-35751]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[35758-35776]:SwitchCase[35758-35776]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[35783-35798]:SwitchCase[35783-35798]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[35805-35820]:SwitchCase[35805-35820]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[35827-35843]:SwitchCase[35827-35843]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[35850-35865]:SwitchCase[35850-35865]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[35872-35887]:SwitchCase[35872-35887]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[35894-35909]:SwitchCase[35894-35909]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[35916-35931]:SwitchCase[35916-35931]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[35938-35953]:SwitchCase[35938-35953]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[35960-35975]:SwitchCase[35960-35975]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[35982-35997]:SwitchCase[35982-35997]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[36004-36019]:SwitchCase[36004-36019]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[36026-36044]:SwitchCase[36026-36044]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36053-36065]:ReturnStatement[36053-36065]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[36072-36088]:SwitchCase[36072-36088]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[36097-36125]:VariableDeclarationStatement[36097-36125]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[36134-36192]:IfStatement[36134-36192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36158-36192]:Block[36158-36192]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36170-36182]:ReturnStatement[36170-36182]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[36201-36264]:IfStatement[36201-36264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36230-36264]:Block[36230-36264]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36242-36254]:ReturnStatement[36242-36254]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36273-36286]:ReturnStatement[36273-36286]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36293-36301]:SwitchCase[36293-36301]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36310-36323]:ReturnStatement[36310-36323]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36337-36343]:Modifier[36337-36343]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[36344-36349]:TYPE_DECLARATION_KIND[36344-36349]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "SimpleName[36350-36372]:SimpleName[36350-36372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36406-36412]:Modifier[36406-36412]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36413-36420]:PrimitiveType[36413-36420]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[36421-36426]:SimpleName[36421-36426]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36427-36433]:SingleVariableDeclaration[36427-36433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36435-36481]:Block[36435-36481]"
    }, {
      "left" : "return isBooleanResultHelper(n);",
      "right" : "return isBooleanResultHelper(n);",
      "info" : "ReturnStatement[36443-36475]:ReturnStatement[36443-36475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36674-36680]:Modifier[36674-36680]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36681-36688]:PrimitiveType[36681-36688]"
    }, {
      "left" : "isBooleanResult",
      "right" : "isBooleanResult",
      "info" : "SimpleName[36689-36704]:SimpleName[36689-36704]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36705-36711]:SingleVariableDeclaration[36705-36711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36713-36770]:Block[36713-36770]"
    }, {
      "left" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "info" : "ReturnStatement[36719-36766]:ReturnStatement[36719-36766]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36774-36780]:Modifier[36774-36780]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36781-36788]:PrimitiveType[36781-36788]"
    }, {
      "left" : "isBooleanResultHelper",
      "right" : "isBooleanResultHelper",
      "info" : "SimpleName[36789-36810]:SimpleName[36789-36810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36819-37328]:Block[36819-37354]"
    }, {
      "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[36825-37324]:SwitchStatement[36825-37350]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[36874-36890]:SwitchCase[36874-36890]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[36897-36914]:SwitchCase[36897-36914]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[36942-36956]:SwitchCase[36942-36956]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[36963-36977]:SwitchCase[36963-36977]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[36984-37000]:SwitchCase[36984-37000]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[37007-37023]:SwitchCase[37007-37023]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[37030-37044]:SwitchCase[37030-37044]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[37051-37065]:SwitchCase[37051-37065]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[37072-37086]:SwitchCase[37072-37086]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[37093-37107]:SwitchCase[37093-37107]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[37132-37146]:SwitchCase[37132-37146]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[37153-37175]:SwitchCase[37153-37175]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[37201-37216]:SwitchCase[37201-37216]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37269-37281]:ReturnStatement[37295-37307]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37288-37296]:SwitchCase[37314-37322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37305-37318]:ReturnStatement[37331-37344]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37332-37338]:Modifier[37358-37364]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37339-37346]:PrimitiveType[37365-37372]"
    }, {
      "left" : "isUndefined",
      "right" : "isUndefined",
      "info" : "SimpleName[37347-37358]:SimpleName[37373-37384]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37359-37365]:SingleVariableDeclaration[37385-37391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37367-37540]:Block[37393-37566]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "info" : "SwitchStatement[37373-37518]:SwitchStatement[37399-37544]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[37402-37418]:SwitchCase[37428-37444]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37427-37439]:ReturnStatement[37453-37465]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[37446-37462]:SwitchCase[37472-37488]"
    }, {
      "left" : "return n.getString().equals(\"undefined\");",
      "right" : "return n.getString().equals(\"undefined\");",
      "info" : "ReturnStatement[37471-37512]:ReturnStatement[37497-37538]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37523-37536]:ReturnStatement[37549-37562]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37544-37550]:Modifier[37570-37576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37551-37558]:PrimitiveType[37577-37584]"
    }, {
      "left" : "isNull",
      "right" : "isNull",
      "info" : "SimpleName[37559-37565]:SimpleName[37585-37591]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37566-37572]:SingleVariableDeclaration[37592-37598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37574-37617]:Block[37600-37643]"
    }, {
      "left" : "return n.getType() == Token.NULL;",
      "right" : "return n.getType() == Token.NULL;",
      "info" : "ReturnStatement[37580-37613]:ReturnStatement[37606-37639]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37621-37627]:Modifier[37647-37653]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37628-37635]:PrimitiveType[37654-37661]"
    }, {
      "left" : "isNullOrUndefined",
      "right" : "isNullOrUndefined",
      "info" : "SimpleName[37636-37653]:SimpleName[37662-37679]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37654-37660]:SingleVariableDeclaration[37680-37686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37662-37707]:Block[37688-37733]"
    }, {
      "left" : "return isNull(n) || isUndefined(n);",
      "right" : "return isNull(n) || isUndefined(n);",
      "info" : "ReturnStatement[37668-37703]:ReturnStatement[37694-37729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37711-37717]:Modifier[37737-37743]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[37718-37723]:TYPE_DECLARATION_KIND[37744-37749]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "SimpleName[37724-37750]:SimpleName[37750-37776]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37784-37790]:Modifier[37810-37816]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37791-37798]:PrimitiveType[37817-37824]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[37799-37804]:SimpleName[37825-37830]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37805-37811]:SingleVariableDeclaration[37831-37837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37813-37855]:Block[37839-37881]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[37821-37849]:ReturnStatement[37847-37875]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38040-38046]:Modifier[38066-38072]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38047-38054]:PrimitiveType[38073-38080]"
    }, {
      "left" : "mayBeString",
      "right" : "mayBeString",
      "info" : "SimpleName[38055-38066]:SimpleName[38081-38092]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38067-38073]:SingleVariableDeclaration[38093-38099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38075-38113]:Block[38101-38139]"
    }, {
      "left" : "return mayBeString(n, true);",
      "right" : "return mayBeString(n, true);",
      "info" : "ReturnStatement[38081-38109]:ReturnStatement[38107-38135]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38117-38123]:Modifier[38143-38149]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38124-38131]:PrimitiveType[38150-38157]"
    }, {
      "left" : "mayBeString",
      "right" : "mayBeString",
      "info" : "SimpleName[38132-38143]:SimpleName[38158-38169]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38144-38150]:SingleVariableDeclaration[38170-38176]"
    }, {
      "left" : "boolean recurse",
      "right" : "boolean recurse",
      "info" : "SingleVariableDeclaration[38152-38167]:SingleVariableDeclaration[38178-38193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38169-38300]:Block[38195-38326]"
    }, {
      "left" : "if (recurse)",
      "right" : "if (recurse)",
      "info" : "IfStatement[38175-38296]:IfStatement[38201-38322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38188-38248]:Block[38214-38274]"
    }, {
      "left" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "right" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "info" : "ReturnStatement[38196-38242]:ReturnStatement[38222-38268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38254-38296]:Block[38280-38322]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[38262-38290]:ReturnStatement[38288-38316]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38304-38310]:Modifier[38330-38336]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38311-38318]:PrimitiveType[38337-38344]"
    }, {
      "left" : "mayBeStringHelper",
      "right" : "mayBeStringHelper",
      "info" : "SimpleName[38319-38336]:SimpleName[38345-38362]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38337-38343]:SingleVariableDeclaration[38363-38369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38345-38446]:Block[38371-38472]"
    }, {
      "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "info" : "ReturnStatement[38351-38442]:ReturnStatement[38377-38468]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38675-38681]:Modifier[38701-38707]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38682-38689]:PrimitiveType[38708-38715]"
    }, {
      "left" : "isAssociative",
      "right" : "isAssociative",
      "info" : "SimpleName[38690-38703]:SimpleName[38716-38729]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[38704-38712]:SingleVariableDeclaration[38730-38738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38714-38942]:Block[38740-38968]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[38720-38938]:SwitchStatement[38746-38964]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[38742-38757]:SwitchCase[38768-38783]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[38764-38779]:SwitchCase[38790-38805]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[38786-38800]:SwitchCase[38812-38826]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[38807-38824]:SwitchCase[38833-38850]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[38831-38849]:SwitchCase[38857-38875]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[38856-38874]:SwitchCase[38882-38900]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38883-38895]:ReturnStatement[38909-38921]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38902-38910]:SwitchCase[38928-38936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38919-38932]:ReturnStatement[38945-38958]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39250-39256]:Modifier[39276-39282]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39257-39264]:PrimitiveType[39283-39290]"
    }, {
      "left" : "isCommutative",
      "right" : "isCommutative",
      "info" : "SimpleName[39265-39278]:SimpleName[39291-39304]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[39279-39287]:SingleVariableDeclaration[39305-39313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39289-39474]:Block[39315-39500]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[39295-39470]:SwitchStatement[39321-39496]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[39317-39332]:SwitchCase[39343-39358]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[39339-39356]:SwitchCase[39365-39382]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[39363-39381]:SwitchCase[39389-39407]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[39388-39406]:SwitchCase[39414-39432]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39415-39427]:ReturnStatement[39441-39453]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39434-39442]:SwitchCase[39460-39468]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39451-39464]:ReturnStatement[39477-39490]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39478-39484]:Modifier[39504-39510]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39485-39492]:PrimitiveType[39511-39518]"
    }, {
      "left" : "isAssignmentOp",
      "right" : "isAssignmentOp",
      "info" : "SimpleName[39493-39507]:SimpleName[39519-39533]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39508-39514]:SingleVariableDeclaration[39534-39540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39516-39945]:Block[39542-39971]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[39522-39923]:SwitchStatement[39548-39949]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[39550-39568]:SwitchCase[39576-39594]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[39575-39599]:SwitchCase[39601-39625]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[39606-39631]:SwitchCase[39632-39657]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[39638-39663]:SwitchCase[39664-39689]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[39670-39692]:SwitchCase[39696-39718]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[39699-39721]:SwitchCase[39725-39747]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[39728-39751]:SwitchCase[39754-39777]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[39758-39780]:SwitchCase[39784-39806]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[39787-39809]:SwitchCase[39813-39835]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[39816-39838]:SwitchCase[39842-39864]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[39845-39867]:SwitchCase[39871-39893]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[39874-39896]:SwitchCase[39900-39922]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39905-39917]:ReturnStatement[39931-39943]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39928-39941]:ReturnStatement[39954-39967]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39949-39955]:Modifier[39975-39981]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[39956-39959]:PrimitiveType[39982-39985]"
    }, {
      "left" : "getOpFromAssignmentOp",
      "right" : "getOpFromAssignmentOp",
      "info" : "SimpleName[39960-39981]:SimpleName[39986-40007]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39982-39988]:SingleVariableDeclaration[40008-40014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39990-40712]:Block[40016-40738]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[39996-40646]:SwitchStatement[40022-40672]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40024-40048]:SwitchCase[40050-40074]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[40057-40076]:ReturnStatement[40083-40102]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40083-40108]:SwitchCase[40109-40134]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[40117-40137]:ReturnStatement[40143-40163]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[40144-40169]:SwitchCase[40170-40195]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[40178-40198]:ReturnStatement[40204-40224]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[40205-40227]:SwitchCase[40231-40253]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[40236-40253]:ReturnStatement[40262-40279]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[40260-40282]:SwitchCase[40286-40308]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[40291-40308]:ReturnStatement[40317-40334]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[40315-40338]:SwitchCase[40341-40364]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[40347-40365]:ReturnStatement[40373-40391]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[40372-40394]:SwitchCase[40398-40420]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[40403-40420]:ReturnStatement[40429-40446]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[40427-40449]:SwitchCase[40453-40475]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[40458-40475]:ReturnStatement[40484-40501]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[40482-40504]:SwitchCase[40508-40530]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[40513-40530]:ReturnStatement[40539-40556]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[40537-40559]:SwitchCase[40563-40585]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[40568-40585]:ReturnStatement[40594-40611]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[40592-40614]:SwitchCase[40618-40640]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[40623-40640]:ReturnStatement[40649-40666]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[40651-40708]:ThrowStatement[40677-40734]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40716-40722]:Modifier[40742-40748]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40723-40730]:PrimitiveType[40749-40756]"
    }, {
      "left" : "isExpressionNode",
      "right" : "isExpressionNode",
      "info" : "SimpleName[40731-40747]:SimpleName[40757-40773]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40748-40754]:SingleVariableDeclaration[40774-40780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40756-40806]:Block[40782-40832]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[40762-40802]:ReturnStatement[40788-40828]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40915-40921]:Modifier[40941-40947]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40922-40929]:PrimitiveType[40948-40955]"
    }, {
      "left" : "containsFunction",
      "right" : "containsFunction",
      "info" : "SimpleName[40930-40946]:SimpleName[40956-40972]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40947-40953]:SingleVariableDeclaration[40973-40979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40955-41004]:Block[40981-41030]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[40961-41000]:ReturnStatement[40987-41026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41097-41103]:Modifier[41123-41129]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41104-41111]:PrimitiveType[41130-41137]"
    }, {
      "left" : "referencesThis",
      "right" : "referencesThis",
      "info" : "SimpleName[41112-41126]:SimpleName[41138-41152]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41127-41133]:SingleVariableDeclaration[41153-41159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41135-41204]:Block[41161-41230]"
    }, {
      "left" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "right" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "info" : "ReturnStatement[41141-41200]:ReturnStatement[41167-41226]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41260-41266]:Modifier[41286-41292]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41267-41274]:PrimitiveType[41293-41300]"
    }, {
      "left" : "isGet",
      "right" : "isGet",
      "info" : "SimpleName[41275-41280]:SimpleName[41301-41306]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41281-41287]:SingleVariableDeclaration[41307-41313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41289-41375]:Block[41315-41401]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[41295-41371]:ReturnStatement[41321-41397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41420-41426]:Modifier[41446-41452]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41427-41434]:PrimitiveType[41453-41460]"
    }, {
      "left" : "isGetProp",
      "right" : "isGetProp",
      "info" : "SimpleName[41435-41444]:SimpleName[41461-41470]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41445-41451]:SingleVariableDeclaration[41471-41477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41453-41499]:Block[41479-41525]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[41459-41495]:ReturnStatement[41485-41521]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41541-41547]:Modifier[41567-41573]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41548-41555]:PrimitiveType[41574-41581]"
    }, {
      "left" : "isName",
      "right" : "isName",
      "info" : "SimpleName[41556-41562]:SimpleName[41582-41588]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41563-41569]:SingleVariableDeclaration[41589-41595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41571-41614]:Block[41597-41640]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[41577-41610]:ReturnStatement[41603-41636]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41655-41661]:Modifier[41681-41687]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41662-41669]:PrimitiveType[41688-41695]"
    }, {
      "left" : "isNew",
      "right" : "isNew",
      "info" : "SimpleName[41670-41675]:SimpleName[41696-41701]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41676-41682]:SingleVariableDeclaration[41702-41708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41684-41726]:Block[41710-41752]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[41690-41722]:ReturnStatement[41716-41748]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41767-41773]:Modifier[41793-41799]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41774-41781]:PrimitiveType[41800-41807]"
    }, {
      "left" : "isVar",
      "right" : "isVar",
      "info" : "SimpleName[41782-41787]:SimpleName[41808-41813]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41788-41794]:SingleVariableDeclaration[41814-41820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41796-41838]:Block[41822-41864]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[41802-41834]:ReturnStatement[41828-41860]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42004-42010]:Modifier[42030-42036]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42011-42018]:PrimitiveType[42037-42044]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[42019-42035]:SimpleName[42045-42061]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42036-42042]:SingleVariableDeclaration[42062-42068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42044-42251]:Block[42070-42277]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[42174-42247]:ReturnStatement[42200-42273]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42394-42400]:Modifier[42420-42426]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[42401-42405]:SimpleType[42427-42431]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[42406-42422]:SimpleName[42432-42448]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42423-42429]:SingleVariableDeclaration[42449-42455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42431-42697]:Block[42457-42723]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[42437-42473]:ExpressionStatement[42463-42499]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[42478-42506]:VariableDeclarationStatement[42504-42532]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[42511-42693]:IfStatement[42537-42719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42530-42569]:Block[42556-42595]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[42538-42563]:ReturnStatement[42564-42589]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[42575-42693]:IfStatement[42601-42719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42628-42661]:Block[42654-42687]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[42636-42655]:ReturnStatement[42662-42681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42667-42693]:Block[42693-42719]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42675-42687]:ReturnStatement[42701-42713]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42741-42747]:Modifier[42767-42773]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42748-42755]:PrimitiveType[42774-42781]"
    }, {
      "left" : "isString",
      "right" : "isString",
      "info" : "SimpleName[42756-42764]:SimpleName[42782-42790]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42765-42771]:SingleVariableDeclaration[42791-42797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42773-42818]:Block[42799-42844]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[42779-42814]:ReturnStatement[42805-42840]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43009-43015]:Modifier[43035-43041]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43016-43023]:PrimitiveType[43042-43049]"
    }, {
      "left" : "isExprAssign",
      "right" : "isExprAssign",
      "info" : "SimpleName[43024-43036]:SimpleName[43050-43062]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43037-43043]:SingleVariableDeclaration[43063-43069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43045-43150]:Block[43071-43176]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[43051-43146]:ReturnStatement[43077-43172]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43195-43201]:Modifier[43221-43227]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43202-43209]:PrimitiveType[43228-43235]"
    }, {
      "left" : "isAssign",
      "right" : "isAssign",
      "info" : "SimpleName[43210-43218]:SimpleName[43236-43244]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43219-43225]:SingleVariableDeclaration[43245-43251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43227-43272]:Block[43253-43298]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[43233-43268]:ReturnStatement[43259-43294]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43454-43460]:Modifier[43480-43486]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43461-43468]:PrimitiveType[43487-43494]"
    }, {
      "left" : "isExprCall",
      "right" : "isExprCall",
      "info" : "SimpleName[43469-43479]:SimpleName[43495-43505]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43480-43486]:SingleVariableDeclaration[43506-43512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43488-43591]:Block[43514-43617]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[43494-43587]:ReturnStatement[43520-43613]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43663-43669]:Modifier[43689-43695]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43670-43677]:PrimitiveType[43696-43703]"
    }, {
      "left" : "isForIn",
      "right" : "isForIn",
      "info" : "SimpleName[43678-43685]:SimpleName[43704-43711]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43686-43692]:SingleVariableDeclaration[43712-43718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43694-43770]:Block[43720-43796]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[43700-43766]:ReturnStatement[43726-43792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43854-43860]:Modifier[43880-43886]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43861-43868]:PrimitiveType[43887-43894]"
    }, {
      "left" : "isLoopStructure",
      "right" : "isLoopStructure",
      "info" : "SimpleName[43869-43884]:SimpleName[43895-43910]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43885-43891]:SingleVariableDeclaration[43911-43917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43893-44056]:Block[43919-44082]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[43899-44052]:SwitchStatement[43925-44078]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[43928-43943]:SwitchCase[43954-43969]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[43950-43964]:SwitchCase[43976-43990]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[43971-43988]:SwitchCase[43997-44014]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43997-44009]:ReturnStatement[44023-44035]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44016-44024]:SwitchCase[44042-44050]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44033-44046]:ReturnStatement[44059-44072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44218-44224]:Modifier[44244-44250]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44225-44229]:SimpleType[44251-44255]"
    }, {
      "left" : "getLoopCodeBlock",
      "right" : "getLoopCodeBlock",
      "info" : "SimpleName[44230-44246]:SimpleName[44256-44272]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44247-44253]:SingleVariableDeclaration[44273-44279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44255-44463]:Block[44281-44489]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[44261-44459]:SwitchStatement[44287-44485]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[44290-44305]:SwitchCase[44316-44331]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[44312-44329]:SwitchCase[44338-44355]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[44338-44362]:ReturnStatement[44364-44388]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[44369-44383]:SwitchCase[44395-44409]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[44392-44417]:ReturnStatement[44418-44443]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44424-44432]:SwitchCase[44450-44458]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44441-44453]:ReturnStatement[44467-44479]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44576-44582]:Modifier[44602-44608]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44583-44590]:PrimitiveType[44609-44616]"
    }, {
      "left" : "isWithinLoop",
      "right" : "isWithinLoop",
      "info" : "SimpleName[44591-44603]:SimpleName[44617-44629]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44604-44610]:SingleVariableDeclaration[44630-44636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44612-44824]:Block[44638-44850]"
    }, {
      "left" : "for (Node parent : n.getAncestors())",
      "right" : "for (Node parent : n.getAncestors())",
      "info" : "EnhancedForStatement[44618-44802]:EnhancedForStatement[44644-44828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44655-44802]:Block[44681-44828]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(parent))",
      "right" : "if (NodeUtil.isLoopStructure(parent))",
      "info" : "IfStatement[44663-44731]:IfStatement[44689-44757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44701-44731]:Block[44727-44757]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44711-44723]:ReturnStatement[44737-44749]"
    }, {
      "left" : "if (NodeUtil.isFunction(parent))",
      "right" : "if (NodeUtil.isFunction(parent))",
      "info" : "IfStatement[44739-44796]:IfStatement[44765-44822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44772-44796]:Block[44798-44822]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44782-44788]:BreakStatement[44808-44814]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44807-44820]:ReturnStatement[44833-44846]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44918-44924]:Modifier[44944-44950]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44925-44932]:PrimitiveType[44951-44958]"
    }, {
      "left" : "isControlStructure",
      "right" : "isControlStructure",
      "info" : "SimpleName[44933-44951]:SimpleName[44959-44977]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44952-44958]:SingleVariableDeclaration[44978-44984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44960-45311]:Block[44986-45337]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[44966-45307]:SwitchStatement[44992-45333]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[44995-45010]:SwitchCase[45021-45036]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45017-45031]:SwitchCase[45043-45057]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45038-45055]:SwitchCase[45064-45081]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[45062-45078]:SwitchCase[45088-45104]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[45085-45099]:SwitchCase[45111-45125]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[45106-45123]:SwitchCase[45132-45149]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[45130-45145]:SwitchCase[45156-45171]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[45152-45169]:SwitchCase[45178-45195]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[45176-45194]:SwitchCase[45202-45220]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[45201-45217]:SwitchCase[45227-45243]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[45224-45243]:SwitchCase[45250-45269]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45252-45264]:ReturnStatement[45278-45290]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45271-45279]:SwitchCase[45297-45305]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45288-45301]:ReturnStatement[45314-45327]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45422-45428]:Modifier[45448-45454]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45429-45436]:PrimitiveType[45455-45462]"
    }, {
      "left" : "isControlStructureCodeBlock",
      "right" : "isControlStructureCodeBlock",
      "info" : "SimpleName[45437-45464]:SimpleName[45463-45490]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[45465-45476]:SingleVariableDeclaration[45491-45502]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45478-45484]:SingleVariableDeclaration[45504-45510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45486-46196]:Block[45512-46222]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[45492-46192]:SwitchStatement[45518-46218]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45526-45541]:SwitchCase[45552-45567]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45548-45565]:SwitchCase[45574-45591]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[45572-45589]:SwitchCase[45598-45615]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[45596-45612]:SwitchCase[45622-45638]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[45621-45655]:ReturnStatement[45647-45681]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45662-45676]:SwitchCase[45688-45702]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[45685-45720]:ReturnStatement[45711-45746]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[45727-45741]:SwitchCase[45753-45767]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[45750-45785]:ReturnStatement[45776-45811]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[45792-45807]:SwitchCase[45818-45833]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[45816-45881]:ReturnStatement[45842-45907]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[45888-45905]:SwitchCase[45914-45931]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[45914-45948]:ReturnStatement[45940-45974]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[45955-45973]:SwitchCase[45981-45999]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[45980-45996]:SwitchCase[46006-46022]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[46005-46040]:ReturnStatement[46031-46066]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[46047-46066]:SwitchCase[46073-46092]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46075-46087]:ReturnStatement[46101-46113]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46094-46102]:SwitchCase[46120-46128]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[46111-46164]:ExpressionStatement[46137-46190]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46173-46186]:ReturnStatement[46199-46212]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46411-46417]:Modifier[46437-46443]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46418-46422]:SimpleType[46444-46448]"
    }, {
      "left" : "getConditionExpression",
      "right" : "getConditionExpression",
      "info" : "SimpleName[46423-46445]:SimpleName[46449-46471]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46446-46452]:SingleVariableDeclaration[46472-46478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46454-47000]:Block[46480-47026]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[46460-46921]:SwitchStatement[46486-46947]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[46489-46503]:SwitchCase[46515-46529]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[46510-46527]:SwitchCase[46536-46553]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[46536-46561]:ReturnStatement[46562-46587]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[46568-46582]:SwitchCase[46594-46608]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[46591-46615]:ReturnStatement[46617-46641]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[46622-46637]:SwitchCase[46648-46663]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[46646-46793]:SwitchStatement[46672-46819]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[46685-46692]:SwitchCase[46711-46718]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46705-46717]:ReturnStatement[46731-46743]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[46728-46735]:SwitchCase[46754-46761]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[46748-46783]:ReturnStatement[46774-46809]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[46802-46871]:ThrowStatement[46828-46897]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[46878-46894]:SwitchCase[46904-46920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46903-46915]:ReturnStatement[46929-46941]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[46926-46996]:ThrowStatement[46952-47022]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47090-47096]:Modifier[47116-47122]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47097-47104]:PrimitiveType[47123-47130]"
    }, {
      "left" : "isStatementBlock",
      "right" : "isStatementBlock",
      "info" : "SimpleName[47105-47121]:SimpleName[47131-47147]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47122-47128]:SingleVariableDeclaration[47148-47154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47130-47205]:Block[47156-47231]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[47136-47201]:ReturnStatement[47162-47227]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47275-47281]:Modifier[47301-47307]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47282-47289]:PrimitiveType[47308-47315]"
    }, {
      "left" : "isStatement",
      "right" : "isStatement",
      "info" : "SimpleName[47290-47301]:SimpleName[47316-47327]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47302-47308]:SingleVariableDeclaration[47328-47334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47310-47758]:Block[47336-47784]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[47316-47344]:VariableDeclarationStatement[47342-47370]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[47544-47585]:ExpressionStatement[47570-47611]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[47590-47754]:SwitchStatement[47616-47780]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[47624-47642]:SwitchCase[47650-47668]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[47649-47666]:SwitchCase[47675-47692]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[47673-47690]:SwitchCase[47699-47716]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47699-47711]:ReturnStatement[47725-47737]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47718-47726]:SwitchCase[47744-47752]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47735-47748]:ReturnStatement[47761-47774]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47819-47825]:Modifier[47845-47851]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47826-47833]:PrimitiveType[47852-47859]"
    }, {
      "left" : "isSwitchCase",
      "right" : "isSwitchCase",
      "info" : "SimpleName[47834-47846]:SimpleName[47860-47872]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47847-47853]:SingleVariableDeclaration[47873-47879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47855-47930]:Block[47881-47956]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[47861-47926]:ReturnStatement[47887-47952]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48099-48105]:Modifier[48125-48131]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48106-48113]:PrimitiveType[48132-48139]"
    }, {
      "left" : "isReferenceName",
      "right" : "isReferenceName",
      "info" : "SimpleName[48114-48129]:SimpleName[48140-48155]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48130-48136]:SingleVariableDeclaration[48156-48162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48138-48193]:Block[48164-48219]"
    }, {
      "left" : "return isName(n) && !n.getString().isEmpty();",
      "right" : "return isName(n) && !n.getString().isEmpty();",
      "info" : "ReturnStatement[48144-48189]:ReturnStatement[48170-48215]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48248-48254]:Modifier[48274-48280]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48255-48262]:PrimitiveType[48281-48288]"
    }, {
      "left" : "isLabelName",
      "right" : "isLabelName",
      "info" : "SimpleName[48263-48274]:SimpleName[48289-48300]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48275-48281]:SingleVariableDeclaration[48301-48307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48283-48347]:Block[48309-48373]"
    }, {
      "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "info" : "ReturnStatement[48289-48343]:ReturnStatement[48315-48369]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48414-48420]:Modifier[48440-48446]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48421-48428]:PrimitiveType[48447-48454]"
    }, {
      "left" : "isTryFinallyNode",
      "right" : "isTryFinallyNode",
      "info" : "SimpleName[48429-48445]:SimpleName[48455-48471]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[48446-48457]:SingleVariableDeclaration[48472-48483]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[48459-48469]:SingleVariableDeclaration[48485-48495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48471-48591]:Block[48497-48617]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[48477-48587]:ReturnStatement[48503-48613]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48649-48655]:Modifier[48675-48681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48656-48663]:PrimitiveType[48682-48689]"
    }, {
      "left" : "isTryCatchNodeContainer",
      "right" : "isTryCatchNodeContainer",
      "info" : "SimpleName[48664-48687]:SimpleName[48690-48713]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48688-48694]:SingleVariableDeclaration[48714-48720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48696-48825]:Block[48722-48851]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[48702-48730]:VariableDeclarationStatement[48728-48756]"
    }, {
      "left" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "right" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "info" : "ReturnStatement[48735-48821]:ReturnStatement[48761-48847]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48903-48909]:Modifier[48929-48935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48910-48914]:PrimitiveType[48936-48940]"
    }, {
      "left" : "removeChild",
      "right" : "removeChild",
      "info" : "SimpleName[48915-48926]:SimpleName[48941-48952]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[48927-48938]:SingleVariableDeclaration[48953-48964]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[48940-48949]:SingleVariableDeclaration[48966-48975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48951-51293]:Block[48977-51319]"
    }, {
      "left" : "if (isTryFinallyNode(parent, node))",
      "right" : "if (isTryFinallyNode(parent, node))",
      "info" : "IfStatement[48957-51289]:IfStatement[48983-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48993-49266]:Block[49019-49292]"
    }, {
      "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "info" : "IfStatement[49001-49260]:IfStatement[49027-49286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49054-49159]:Block[49080-49185]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[49126-49151]:ExpressionStatement[49152-49177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49165-49260]:Block[49191-49286]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[49230-49252]:ExpressionStatement[49256-49278]"
    }, {
      "left" : "if (node.getType() == Token.CATCH)",
      "right" : "if (node.getType() == Token.CATCH)",
      "info" : "IfStatement[49272-51289]:IfStatement[49298-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49307-49531]:Block[49333-49557]"
    }, {
      "left" : "Node tryNode = node.getParent().getParent();",
      "right" : "Node tryNode = node.getParent().getParent();",
      "info" : "VariableDeclarationStatement[49388-49432]:VariableDeclarationStatement[49414-49458]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[49439-49494]:ExpressionStatement[49465-49520]"
    }, {
      "left" : "node.detachFromParent();",
      "right" : "node.detachFromParent();",
      "info" : "ExpressionStatement[49501-49525]:ExpressionStatement[49527-49551]"
    }, {
      "left" : "if (isTryCatchNodeContainer(node))",
      "right" : "if (isTryCatchNodeContainer(node))",
      "info" : "IfStatement[49537-51289]:IfStatement[49563-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49572-49830]:Block[49598-49856]"
    }, {
      "left" : "Node tryNode = node.getParent();",
      "right" : "Node tryNode = node.getParent();",
      "info" : "VariableDeclarationStatement[49701-49733]:VariableDeclarationStatement[49727-49759]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[49740-49795]:ExpressionStatement[49766-49821]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[49802-49824]:ExpressionStatement[49828-49850]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[49836-51289]:IfStatement[49862-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49871-50003]:Block[49897-50029]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[49975-49997]:ExpressionStatement[50001-50023]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "info" : "IfStatement[50009-51289]:IfStatement[50035-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50069-50163]:Block[50095-50189]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50132-50157]:ExpressionStatement[50158-50183]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[50169-51289]:IfStatement[50195-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50204-50523]:Block[50230-50549]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[50212-50517]:IfStatement[50238-50543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50246-50289]:Block[50272-50315]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50256-50281]:ExpressionStatement[50282-50307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50295-50517]:Block[50321-50543]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50370-50395]:ExpressionStatement[50396-50421]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[50469-50509]:ExpressionStatement[50495-50535]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[50529-51289]:IfStatement[50555-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50607-50825]:Block[50633-50851]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50678-50703]:ExpressionStatement[50704-50729]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[50779-50819]:ExpressionStatement[50805-50845]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[50831-51289]:IfStatement[50857-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50905-51145]:Block[50931-51171]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[51090-51139]:ExpressionStatement[51116-51165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51151-51289]:Block[51177-51315]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[51159-51283]:ThrowStatement[51185-51309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51357-51363]:Modifier[51383-51389]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51364-51368]:PrimitiveType[51390-51394]"
    }, {
      "left" : "maybeAddFinally",
      "right" : "maybeAddFinally",
      "info" : "SimpleName[51369-51384]:SimpleName[51395-51410]"
    }, {
      "left" : "Node tryNode",
      "right" : "Node tryNode",
      "info" : "SingleVariableDeclaration[51385-51397]:SingleVariableDeclaration[51411-51423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51399-51609]:Block[51425-51635]"
    }, {
      "left" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "right" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "info" : "ExpressionStatement[51405-51462]:ExpressionStatement[51431-51488]"
    }, {
      "left" : "if (!NodeUtil.hasFinally(tryNode))",
      "right" : "if (!NodeUtil.hasFinally(tryNode))",
      "info" : "IfStatement[51467-51605]:IfStatement[51493-51631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51502-51605]:Block[51528-51631]"
    }, {
      "left" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "right" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "info" : "ExpressionStatement[51510-51599]:ExpressionStatement[51536-51625]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51711-51717]:Modifier[51737-51743]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51718-51725]:PrimitiveType[51744-51751]"
    }, {
      "left" : "tryMergeBlock",
      "right" : "tryMergeBlock",
      "info" : "SimpleName[51726-51739]:SimpleName[51752-51765]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[51740-51750]:SingleVariableDeclaration[51766-51776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51752-52302]:Block[51778-52328]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[51758-51815]:ExpressionStatement[51784-51841]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[51820-51852]:VariableDeclarationStatement[51846-51878]"
    }, {
      "left" : "if (isStatementBlock(parent))",
      "right" : "if (isStatementBlock(parent))",
      "info" : "IfStatement[51983-52298]:IfStatement[52009-52324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52013-52265]:Block[52039-52291]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[52021-52043]:VariableDeclarationStatement[52047-52069]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[52050-52207]:WhileStatement[52076-52233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52078-52207]:Block[52104-52233]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[52088-52126]:VariableDeclarationStatement[52114-52152]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[52135-52173]:ExpressionStatement[52161-52199]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[52182-52199]:ExpressionStatement[52208-52225]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[52214-52240]:ExpressionStatement[52240-52266]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52247-52259]:ReturnStatement[52273-52285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52271-52298]:Block[52297-52324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52279-52292]:ReturnStatement[52305-52318]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52344-52350]:Modifier[52370-52376]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52351-52358]:PrimitiveType[52377-52384]"
    }, {
      "left" : "isCall",
      "right" : "isCall",
      "info" : "SimpleName[52359-52365]:SimpleName[52385-52391]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[52366-52372]:SingleVariableDeclaration[52392-52398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52374-52417]:Block[52400-52443]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[52380-52413]:ReturnStatement[52406-52439]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52510-52516]:Modifier[52536-52542]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52517-52524]:PrimitiveType[52543-52550]"
    }, {
      "left" : "isCallOrNew",
      "right" : "isCallOrNew",
      "info" : "SimpleName[52525-52536]:SimpleName[52551-52562]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52537-52546]:SingleVariableDeclaration[52563-52572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52548-52611]:Block[52574-52637]"
    }, {
      "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "info" : "ReturnStatement[52554-52607]:ReturnStatement[52580-52633]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52657-52663]:Modifier[52683-52689]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52664-52671]:PrimitiveType[52690-52697]"
    }, {
      "left" : "isFunction",
      "right" : "isFunction",
      "info" : "SimpleName[52672-52682]:SimpleName[52698-52708]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[52683-52689]:SingleVariableDeclaration[52709-52715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52691-52738]:Block[52717-52764]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[52697-52734]:ReturnStatement[52723-52760]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52808-52814]:Modifier[52834-52840]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[52815-52819]:SimpleType[52841-52845]"
    }, {
      "left" : "getFunctionBody",
      "right" : "getFunctionBody",
      "info" : "SimpleName[52820-52835]:SimpleName[52846-52861]"
    }, {
      "left" : "Node fn",
      "right" : "Node fn",
      "info" : "SingleVariableDeclaration[52836-52843]:SingleVariableDeclaration[52862-52869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52845-52929]:Block[52871-52955]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[52851-52895]:ExpressionStatement[52877-52921]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[52900-52925]:ReturnStatement[52926-52951]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52971-52977]:Modifier[52997-53003]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52978-52985]:PrimitiveType[53004-53011]"
    }, {
      "left" : "isThis",
      "right" : "isThis",
      "info" : "SimpleName[52986-52992]:SimpleName[53012-53018]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52993-53002]:SingleVariableDeclaration[53019-53028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53004-53050]:Block[53030-53076]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[53010-53046]:ReturnStatement[53036-53072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53097-53103]:Modifier[53123-53129]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53104-53111]:PrimitiveType[53130-53137]"
    }, {
      "left" : "isArrayLiteral",
      "right" : "isArrayLiteral",
      "info" : "SimpleName[53112-53126]:SimpleName[53138-53152]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53127-53136]:SingleVariableDeclaration[53153-53162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53138-53188]:Block[53164-53214]"
    }, {
      "left" : "return node.getType() == Token.ARRAYLIT;",
      "right" : "return node.getType() == Token.ARRAYLIT;",
      "info" : "ReturnStatement[53144-53184]:ReturnStatement[53170-53210]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53241-53247]:Modifier[53267-53273]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53248-53255]:PrimitiveType[53274-53281]"
    }, {
      "left" : "isSparseArray",
      "right" : "isSparseArray",
      "info" : "SimpleName[53256-53269]:SimpleName[53282-53295]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53270-53279]:SingleVariableDeclaration[53296-53305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53281-53460]:Block[53307-53486]"
    }, {
      "left" : "Preconditions.checkArgument(isArrayLiteral(node));",
      "right" : "Preconditions.checkArgument(isArrayLiteral(node));",
      "info" : "ExpressionStatement[53287-53337]:ExpressionStatement[53313-53363]"
    }, {
      "left" : "int[] skipList = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);",
      "right" : "int[] skipList = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);",
      "info" : "VariableDeclarationStatement[53342-53404]:VariableDeclarationStatement[53368-53430]"
    }, {
      "left" : "return skipList != null && skipList.length > 0;",
      "right" : "return skipList != null && skipList.length > 0;",
      "info" : "ReturnStatement[53409-53456]:ReturnStatement[53435-53482]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53525-53531]:Modifier[53551-53557]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53532-53539]:PrimitiveType[53558-53565]"
    }, {
      "left" : "containsCall",
      "right" : "containsCall",
      "info" : "SimpleName[53540-53552]:SimpleName[53566-53578]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53553-53559]:SingleVariableDeclaration[53579-53585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53561-53606]:Block[53587-53632]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[53567-53602]:ReturnStatement[53593-53628]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53849-53855]:Modifier[53875-53881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53856-53863]:PrimitiveType[53882-53889]"
    }, {
      "left" : "isFunctionDeclaration",
      "right" : "isFunctionDeclaration",
      "info" : "SimpleName[53864-53885]:SimpleName[53890-53911]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53886-53892]:SingleVariableDeclaration[53912-53918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53894-53959]:Block[53920-53985]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "info" : "ReturnStatement[53900-53955]:ReturnStatement[53926-53981]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54149-54155]:Modifier[54175-54181]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54156-54163]:PrimitiveType[54182-54189]"
    }, {
      "left" : "isHoistedFunctionDeclaration",
      "right" : "isHoistedFunctionDeclaration",
      "info" : "SimpleName[54164-54192]:SimpleName[54190-54218]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54193-54199]:SingleVariableDeclaration[54219-54225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54201-54365]:Block[54227-54391]"
    }, {
      "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[54207-54361]:ReturnStatement[54233-54387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55025-55031]:Modifier[55051-55057]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55032-55039]:PrimitiveType[55058-55065]"
    }, {
      "left" : "isFunctionExpression",
      "right" : "isFunctionExpression",
      "info" : "SimpleName[55040-55060]:SimpleName[55066-55086]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55061-55067]:SingleVariableDeclaration[55087-55093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55069-55135]:Block[55095-55161]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "info" : "ReturnStatement[55075-55131]:ReturnStatement[55101-55157]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55330-55336]:Modifier[55356-55362]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55337-55344]:PrimitiveType[55363-55370]"
    }, {
      "left" : "isEmptyFunctionExpression",
      "right" : "isEmptyFunctionExpression",
      "info" : "SimpleName[55345-55370]:SimpleName[55371-55396]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[55371-55380]:SingleVariableDeclaration[55397-55406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55382-55463]:Block[55408-55489]"
    }, {
      "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "info" : "ReturnStatement[55388-55459]:ReturnStatement[55414-55485]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55613-55619]:Modifier[55639-55645]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55620-55627]:PrimitiveType[55646-55653]"
    }, {
      "left" : "isVarArgsFunction",
      "right" : "isVarArgsFunction",
      "info" : "SimpleName[55628-55645]:SimpleName[55654-55671]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[55646-55659]:SingleVariableDeclaration[55672-55685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55661-55837]:Block[55687-55863]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[55667-55717]:ExpressionStatement[55693-55743]"
    }, {
      "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "info" : "ReturnStatement[55722-55833]:ReturnStatement[55748-55859]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55941-55947]:Modifier[55967-55973]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55948-55955]:PrimitiveType[55974-55981]"
    }, {
      "left" : "isObjectCallMethod",
      "right" : "isObjectCallMethod",
      "info" : "SimpleName[55956-55974]:SimpleName[55982-56000]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[55975-55988]:SingleVariableDeclaration[56001-56014]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[55990-56007]:SingleVariableDeclaration[56016-56033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56009-56444]:Block[56035-56470]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[56015-56422]:IfStatement[56041-56448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56053-56422]:Block[56079-56448]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[56061-56124]:VariableDeclarationStatement[56087-56150]"
    }, {
      "left" : "if (isGet(functionIndentifyingExpression))",
      "right" : "if (isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[56131-56416]:IfStatement[56157-56442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56174-56416]:Block[56200-56442]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[56184-56242]:VariableDeclarationStatement[56210-56268]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[56251-56408]:IfStatement[56277-56434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56303-56408]:Block[56329-56434]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[56315-56350]:VariableDeclarationStatement[56341-56376]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[56361-56398]:ReturnStatement[56387-56424]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56427-56440]:ReturnStatement[56453-56466]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56579-56585]:Modifier[56605-56611]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56586-56593]:PrimitiveType[56612-56619]"
    }, {
      "left" : "isFunctionObjectCall",
      "right" : "isFunctionObjectCall",
      "info" : "SimpleName[56594-56614]:SimpleName[56620-56640]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[56615-56628]:SingleVariableDeclaration[56641-56654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56630-56684]:Block[56656-56710]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[56636-56680]:ReturnStatement[56662-56706]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56820-56826]:Modifier[56846-56852]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56827-56834]:PrimitiveType[56853-56860]"
    }, {
      "left" : "isFunctionObjectApply",
      "right" : "isFunctionObjectApply",
      "info" : "SimpleName[56835-56856]:SimpleName[56861-56882]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[56857-56870]:SingleVariableDeclaration[56883-56896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56872-56927]:Block[56898-56953]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[56878-56923]:ReturnStatement[56904-56949]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57115-57121]:Modifier[57141-57147]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57122-57129]:PrimitiveType[57148-57155]"
    }, {
      "left" : "isFunctionObjectCallOrApply",
      "right" : "isFunctionObjectCallOrApply",
      "info" : "SimpleName[57130-57157]:SimpleName[57156-57183]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[57158-57171]:SingleVariableDeclaration[57184-57197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57173-57256]:Block[57199-57282]"
    }, {
      "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "info" : "ReturnStatement[57179-57252]:ReturnStatement[57205-57278]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57419-57425]:Modifier[57445-57451]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57426-57433]:PrimitiveType[57452-57459]"
    }, {
      "left" : "isSimpleFunctionObjectCall",
      "right" : "isSimpleFunctionObjectCall",
      "info" : "SimpleName[57434-57460]:SimpleName[57460-57486]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[57461-57474]:SingleVariableDeclaration[57487-57500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57476-57655]:Block[57502-57681]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[57482-57632]:IfStatement[57508-57658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57518-57632]:Block[57544-57658]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[57526-57626]:IfStatement[57552-57652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57596-57626]:Block[57622-57652]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57606-57618]:ReturnStatement[57632-57644]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57638-57651]:ReturnStatement[57664-57677]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58008-58014]:Modifier[58034-58040]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58015-58022]:PrimitiveType[58041-58048]"
    }, {
      "left" : "isLhs",
      "right" : "isLhs",
      "info" : "SimpleName[58023-58028]:SimpleName[58049-58054]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58029-58035]:SingleVariableDeclaration[58055-58061]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[58037-58048]:SingleVariableDeclaration[58063-58074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58050-58177]:Block[58076-58203]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[58056-58173]:ReturnStatement[58082-58199]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58373-58379]:Modifier[58399-58405]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58380-58387]:PrimitiveType[58406-58413]"
    }, {
      "left" : "isObjectLitKey",
      "right" : "isObjectLitKey",
      "info" : "SimpleName[58388-58402]:SimpleName[58414-58428]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[58403-58412]:SingleVariableDeclaration[58429-58438]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[58414-58425]:SingleVariableDeclaration[58440-58451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58427-58653]:Block[58453-58679]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[58433-58631]:SwitchStatement[58459-58657]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[58465-58483]:SwitchCase[58491-58509]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[58490-58508]:SwitchCase[58516-58534]"
    }, {
      "left" : "return parent.getType() == Token.OBJECTLIT;",
      "right" : "return parent.getType() == Token.OBJECTLIT;",
      "info" : "ReturnStatement[58517-58560]:ReturnStatement[58543-58586]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[58567-58582]:SwitchCase[58593-58608]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[58589-58604]:SwitchCase[58615-58630]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[58613-58625]:ReturnStatement[58639-58651]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58636-58649]:ReturnStatement[58662-58675]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58741-58747]:Modifier[58767-58773]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[58748-58754]:SimpleType[58774-58780]"
    }, {
      "left" : "getObjectLitKeyName",
      "right" : "getObjectLitKeyName",
      "info" : "SimpleName[58755-58774]:SimpleName[58781-58800]"
    }, {
      "left" : "Node key",
      "right" : "Node key",
      "info" : "SingleVariableDeclaration[58775-58783]:SingleVariableDeclaration[58801-58809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58785-59065]:Block[58811-59091]"
    }, {
      "left" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "right" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "info" : "SwitchStatement[58791-58992]:SwitchStatement[58817-59018]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[58822-58840]:SwitchCase[58848-58866]"
    }, {
      "left" : "return NodeUtil.getStringValue(key);",
      "right" : "return NodeUtil.getStringValue(key);",
      "info" : "ReturnStatement[58849-58885]:ReturnStatement[58875-58911]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[58892-58910]:SwitchCase[58918-58936]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[58917-58932]:SwitchCase[58943-58958]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[58939-58954]:SwitchCase[58965-58980]"
    }, {
      "left" : "return key.getString();",
      "right" : "return key.getString();",
      "info" : "ReturnStatement[58963-58986]:ReturnStatement[58989-59012]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "info" : "ThrowStatement[58997-59061]:ThrowStatement[59023-59087]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59170-59176]:Modifier[59196-59202]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[59177-59183]:SimpleType[59203-59209]"
    }, {
      "left" : "getObjectLitKeyTypeFromValueType",
      "right" : "getObjectLitKeyTypeFromValueType",
      "info" : "SimpleName[59184-59216]:SimpleName[59210-59242]"
    }, {
      "left" : "Node key",
      "right" : "Node key",
      "info" : "SingleVariableDeclaration[59217-59225]:SingleVariableDeclaration[59243-59251]"
    }, {
      "left" : "JSType valueType",
      "right" : "JSType valueType",
      "info" : "SingleVariableDeclaration[59227-59243]:SingleVariableDeclaration[59253-59269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59245-60080]:Block[59271-60106]"
    }, {
      "left" : "if (valueType != null)",
      "right" : "if (valueType != null)",
      "info" : "IfStatement[59251-60054]:IfStatement[59277-60080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59274-60054]:Block[59300-60080]"
    }, {
      "left" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "right" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "info" : "SwitchStatement[59282-60048]:SwitchStatement[59308-60074]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[59315-59330]:SwitchCase[59341-59356]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[59394-59593]:IfStatement[59420-59619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59426-59549]:Block[59452-59575]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[59440-59489]:VariableDeclarationStatement[59466-59515]"
    }, {
      "left" : "valueType = fntype.getReturnType();",
      "right" : "valueType = fntype.getReturnType();",
      "info" : "ExpressionStatement[59502-59537]:ExpressionStatement[59528-59563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59555-59593]:Block[59581-59619]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59569-59581]:ReturnStatement[59595-59607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59604-59610]:BreakStatement[59630-59636]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[59619-59634]:SwitchCase[59645-59660]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[59645-60023]:IfStatement[59671-60049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59677-59979]:Block[59703-60005]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[59746-59795]:VariableDeclarationStatement[59772-59821]"
    }, {
      "left" : "Node param = fntype.getParametersNode().getFirstChild();",
      "right" : "Node param = fntype.getParametersNode().getFirstChild();",
      "info" : "VariableDeclarationStatement[59808-59864]:VariableDeclarationStatement[59834-59890]"
    }, {
      "left" : "valueType = param.getJSType();",
      "right" : "valueType = param.getJSType();",
      "info" : "ExpressionStatement[59937-59967]:ExpressionStatement[59963-59993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59985-60023]:Block[60011-60049]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59999-60011]:ReturnStatement[60025-60037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60034-60040]:BreakStatement[60060-60066]"
    }, {
      "left" : "return valueType;",
      "right" : "return valueType;",
      "info" : "ReturnStatement[60059-60076]:ReturnStatement[60085-60102]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60251-60257]:Modifier[60277-60283]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60258-60265]:PrimitiveType[60284-60291]"
    }, {
      "left" : "isGetOrSetKey",
      "right" : "isGetOrSetKey",
      "info" : "SimpleName[60266-60279]:SimpleName[60292-60305]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[60280-60289]:SingleVariableDeclaration[60306-60315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60291-60415]:Block[60317-60441]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[60297-60393]:SwitchStatement[60323-60419]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[60329-60344]:SwitchCase[60355-60370]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[60351-60366]:SwitchCase[60377-60392]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60375-60387]:ReturnStatement[60401-60413]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60398-60411]:ReturnStatement[60424-60437]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60686-60692]:Modifier[60712-60718]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[60693-60699]:SimpleType[60719-60725]"
    }, {
      "left" : "opToStr",
      "right" : "opToStr",
      "info" : "SimpleName[60700-60707]:SimpleName[60726-60733]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[60708-60720]:SingleVariableDeclaration[60734-60746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60722-62332]:Block[60748-62358]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[60728-62328]:SwitchStatement[60754-62354]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[60754-60771]:SwitchCase[60780-60797]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[60772-60783]:ReturnStatement[60798-60809]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[60790-60804]:SwitchCase[60816-60830]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[60805-60817]:ReturnStatement[60831-60843]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[60824-60842]:SwitchCase[60850-60868]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[60843-60854]:ReturnStatement[60869-60880]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[60861-60876]:SwitchCase[60887-60902]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[60877-60889]:ReturnStatement[60903-60915]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[60896-60914]:SwitchCase[60922-60940]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[60915-60926]:ReturnStatement[60941-60952]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[60933-60949]:SwitchCase[60959-60975]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[60950-60963]:ReturnStatement[60976-60989]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[60970-60984]:SwitchCase[60996-61010]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[60985-60997]:ReturnStatement[61011-61023]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[61004-61019]:SwitchCase[61030-61045]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[61020-61031]:ReturnStatement[61046-61057]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[61038-61052]:SwitchCase[61064-61078]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[61053-61065]:ReturnStatement[61079-61091]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[61072-61088]:SwitchCase[61098-61114]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[61089-61102]:ReturnStatement[61115-61128]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[61109-61124]:SwitchCase[61135-61150]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[61125-61137]:ReturnStatement[61151-61163]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[61144-61158]:SwitchCase[61170-61184]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[61159-61171]:ReturnStatement[61185-61197]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[61178-61192]:SwitchCase[61204-61218]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[61193-61205]:ReturnStatement[61219-61231]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[61212-61226]:SwitchCase[61238-61252]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[61227-61238]:ReturnStatement[61253-61264]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[61245-61261]:SwitchCase[61271-61287]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[61262-61275]:ReturnStatement[61288-61301]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[61282-61297]:SwitchCase[61308-61323]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[61298-61310]:ReturnStatement[61324-61336]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[61317-61331]:SwitchCase[61343-61357]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[61332-61344]:ReturnStatement[61358-61370]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[61351-61365]:SwitchCase[61377-61391]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[61366-61377]:ReturnStatement[61392-61403]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[61384-61399]:SwitchCase[61410-61425]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[61400-61411]:ReturnStatement[61426-61437]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[61418-61433]:SwitchCase[61444-61459]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[61434-61445]:ReturnStatement[61460-61471]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[61452-61467]:SwitchCase[61478-61493]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[61468-61479]:ReturnStatement[61494-61505]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[61486-61504]:SwitchCase[61512-61530]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[61505-61516]:ReturnStatement[61531-61542]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[61523-61538]:SwitchCase[61549-61564]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[61539-61550]:ReturnStatement[61565-61576]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[61557-61572]:SwitchCase[61583-61598]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[61573-61584]:ReturnStatement[61599-61610]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[61591-61606]:SwitchCase[61617-61632]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[61607-61618]:ReturnStatement[61633-61644]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[61625-61640]:SwitchCase[61651-61666]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[61641-61652]:ReturnStatement[61667-61678]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[61659-61677]:SwitchCase[61685-61703]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[61678-61689]:ReturnStatement[61704-61715]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[61696-61720]:SwitchCase[61722-61746]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[61721-61733]:ReturnStatement[61747-61759]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[61740-61765]:SwitchCase[61766-61791]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[61766-61778]:ReturnStatement[61792-61804]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[61785-61810]:SwitchCase[61811-61836]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[61811-61823]:ReturnStatement[61837-61849]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[61830-61852]:SwitchCase[61856-61878]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[61853-61866]:ReturnStatement[61879-61892]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[61873-61895]:SwitchCase[61899-61921]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[61896-61909]:ReturnStatement[61922-61935]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[61916-61939]:SwitchCase[61942-61965]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[61940-61954]:ReturnStatement[61966-61980]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[61961-61983]:SwitchCase[61987-62009]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[61984-61996]:ReturnStatement[62010-62022]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[62003-62025]:SwitchCase[62029-62051]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[62026-62038]:ReturnStatement[62052-62064]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[62045-62067]:SwitchCase[62071-62093]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[62068-62080]:ReturnStatement[62094-62106]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[62087-62109]:SwitchCase[62113-62135]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[62110-62122]:ReturnStatement[62136-62148]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[62129-62151]:SwitchCase[62155-62177]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[62152-62164]:ReturnStatement[62178-62190]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[62171-62187]:SwitchCase[62197-62213]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[62188-62202]:ReturnStatement[62214-62228]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[62209-62227]:SwitchCase[62235-62253]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[62228-62244]:ReturnStatement[62254-62270]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[62251-62273]:SwitchCase[62277-62299]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[62274-62294]:ReturnStatement[62300-62320]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[62301-62309]:SwitchCase[62327-62335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[62310-62322]:ReturnStatement[62336-62348]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62610-62616]:Modifier[62636-62642]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[62617-62623]:SimpleType[62643-62649]"
    }, {
      "left" : "opToStrNoFail",
      "right" : "opToStrNoFail",
      "info" : "SimpleName[62624-62637]:SimpleName[62650-62663]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[62638-62650]:SingleVariableDeclaration[62664-62676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62652-62839]:Block[62678-62865]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[62658-62689]:VariableDeclarationStatement[62684-62715]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[62694-62819]:IfStatement[62720-62845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62711-62819]:Block[62737-62845]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[62719-62813]:ThrowStatement[62745-62839]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[62824-62835]:ReturnStatement[62850-62861]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62927-62933]:Modifier[62953-62959]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62934-62941]:PrimitiveType[62960-62967]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[62942-62954]:SimpleName[62968-62980]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[62955-62964]:SingleVariableDeclaration[62981-62990]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[62996-63004]:SingleVariableDeclaration[63022-63030]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[63036-63072]:SingleVariableDeclaration[63062-63098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63074-63148]:Block[63100-63174]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[63080-63144]:ReturnStatement[63106-63170]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63236-63242]:Modifier[63262-63268]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63243-63250]:PrimitiveType[63269-63276]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[63251-63263]:SimpleName[63277-63289]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[63264-63273]:SingleVariableDeclaration[63290-63299]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[63275-63283]:SingleVariableDeclaration[63301-63309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63285-63358]:Block[63311-63384]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[63291-63354]:ReturnStatement[63317-63380]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63578-63584]:Modifier[63604-63610]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63585-63589]:PrimitiveType[63611-63615]"
    }, {
      "left" : "redeclareVarsInsideBranch",
      "right" : "redeclareVarsInsideBranch",
      "info" : "SimpleName[63590-63615]:SimpleName[63616-63641]"
    }, {
      "left" : "Node branch",
      "right" : "Node branch",
      "info" : "SingleVariableDeclaration[63616-63627]:SingleVariableDeclaration[63642-63653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63629-64110]:Block[63655-64136]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[63635-63691]:VariableDeclarationStatement[63661-63717]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[63696-63737]:IfStatement[63722-63763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63716-63737]:Block[63742-63763]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63724-63731]:ReturnStatement[63750-63757]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[63743-63779]:VariableDeclarationStatement[63769-63805]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[63784-64106]:EnhancedForStatement[63810-64132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63811-64106]:Block[63837-64132]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[63819-64007]:VariableDeclarationStatement[63845-64033]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[64014-64065]:ExpressionStatement[64040-64091]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[64072-64100]:ExpressionStatement[64098-64126]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64222-64228]:Modifier[64248-64254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64229-64233]:PrimitiveType[64255-64259]"
    }, {
      "left" : "copyNameAnnotations",
      "right" : "copyNameAnnotations",
      "info" : "SimpleName[64234-64253]:SimpleName[64260-64279]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[64254-64265]:SingleVariableDeclaration[64280-64291]"
    }, {
      "left" : "Node destination",
      "right" : "Node destination",
      "info" : "SingleVariableDeclaration[64267-64283]:SingleVariableDeclaration[64293-64309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64285-64415]:Block[64311-64441]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[64291-64411]:IfStatement[64317-64437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64341-64411]:Block[64367-64437]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[64349-64405]:ExpressionStatement[64375-64431]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64536-64543]:Modifier[64562-64569]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64544-64550]:Modifier[64570-64576]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[64551-64555]:SimpleType[64577-64581]"
    }, {
      "left" : "getAddingRoot",
      "right" : "getAddingRoot",
      "info" : "SimpleName[64556-64569]:SimpleName[64582-64595]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[64570-64576]:SingleVariableDeclaration[64596-64602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64578-65241]:Block[64604-65267]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[64584-64607]:VariableDeclarationStatement[64610-64633]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[64612-64630]:VariableDeclarationStatement[64638-64656]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[64635-64921]:WhileStatement[64661-64947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64685-64921]:Block[64711-64947]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[64693-64723]:VariableDeclarationStatement[64719-64749]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[64730-64915]:IfStatement[64756-64941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64756-64811]:Block[64782-64837]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[64766-64788]:ExpressionStatement[64792-64814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64797-64803]:BreakStatement[64823-64829]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[64817-64915]:IfStatement[64843-64941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64845-64915]:Block[64871-64941]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[64855-64892]:ExpressionStatement[64881-64918]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64901-64907]:BreakStatement[64927-64933]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[64974-65084]:ExpressionStatement[65000-65110]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[65089-65214]:ExpressionStatement[65115-65240]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[65219-65237]:ReturnStatement[65245-65263]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65311-65317]:Modifier[65337-65343]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65318-65324]:Modifier[65344-65350]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[65325-65329]:SimpleType[65351-65355]"
    }, {
      "left" : "newFunctionNode",
      "right" : "newFunctionNode",
      "info" : "SimpleName[65330-65345]:SimpleName[65356-65371]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[65346-65357]:SingleVariableDeclaration[65372-65383]"
    }, {
      "left" : "List<Node> params",
      "right" : "List<Node> params",
      "info" : "SingleVariableDeclaration[65359-65376]:SingleVariableDeclaration[65385-65402]"
    }, {
      "left" : "Node body",
      "right" : "Node body",
      "info" : "SingleVariableDeclaration[65384-65393]:SingleVariableDeclaration[65410-65419]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[65395-65405]:SingleVariableDeclaration[65421-65431]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[65407-65417]:SingleVariableDeclaration[65433-65443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65419-65822]:Block[65445-65848]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[65425-65482]:VariableDeclarationStatement[65451-65508]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[65487-65564]:EnhancedForStatement[65513-65590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65513-65564]:Block[65539-65590]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[65521-65558]:ExpressionStatement[65547-65584]"
    }, {
      "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "info" : "VariableDeclarationStatement[65569-65626]:VariableDeclarationStatement[65595-65652]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[65631-65717]:ExpressionStatement[65657-65743]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[65722-65762]:ExpressionStatement[65748-65788]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[65767-65797]:ExpressionStatement[65793-65823]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[65802-65818]:ReturnStatement[65828-65844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66108-66114]:Modifier[66134-66140]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66115-66121]:Modifier[66141-66147]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[66122-66126]:SimpleType[66148-66152]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[66127-66147]:SimpleName[66153-66173]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[66155-66182]:SingleVariableDeclaration[66181-66208]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[66184-66195]:SingleVariableDeclaration[66210-66221]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[66197-66207]:SingleVariableDeclaration[66223-66233]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[66209-66219]:SingleVariableDeclaration[66235-66245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66221-66981]:Block[66247-67007]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[66227-66258]:VariableDeclarationStatement[66253-66284]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[66263-66344]:IfStatement[66289-66370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66281-66344]:Block[66307-66370]"
    }, {
      "left" : "return newName(convention, name, lineno, charno);",
      "right" : "return newName(convention, name, lineno, charno);",
      "info" : "ReturnStatement[66289-66338]:ReturnStatement[66315-66364]"
    }, {
      "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "info" : "VariableDeclarationStatement[66349-66433]:VariableDeclarationStatement[66375-66459]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[66438-66451]:VariableDeclarationStatement[66464-66477]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66456-66959]:DoStatement[66482-66985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66459-66937]:Block[66485-66963]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[66467-66489]:ExpressionStatement[66493-66515]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[66496-66533]:ExpressionStatement[66522-66559]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[66540-66673]:VariableDeclarationStatement[66566-66699]"
    }, {
      "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "info" : "VariableDeclarationStatement[66680-66747]:VariableDeclarationStatement[66706-66773]"
    }, {
      "left" : "if (convention.isConstantKey(part))",
      "right" : "if (convention.isConstantKey(part))",
      "info" : "IfStatement[66754-66861]:IfStatement[66780-66887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66790-66861]:Block[66816-66887]"
    }, {
      "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[66800-66853]:ExpressionStatement[66826-66879]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "info" : "ExpressionStatement[66868-66931]:ExpressionStatement[66894-66957]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[66965-66977]:ReturnStatement[66991-67003]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67512-67518]:Modifier[67538-67544]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[67519-67523]:SimpleType[67545-67549]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[67524-67544]:SimpleName[67550-67570]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[67552-67579]:SingleVariableDeclaration[67578-67605]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[67581-67592]:SingleVariableDeclaration[67607-67618]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[67594-67608]:SingleVariableDeclaration[67620-67634]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[67616-67635]:SingleVariableDeclaration[67642-67661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67637-67779]:Block[67663-67805]"
    }, {
      "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "info" : "VariableDeclarationStatement[67643-67702]:VariableDeclarationStatement[67669-67728]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[67707-67758]:ExpressionStatement[67733-67784]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[67763-67775]:ReturnStatement[67789-67801]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67869-67875]:Modifier[67895-67901]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[67876-67880]:SimpleType[67902-67906]"
    }, {
      "left" : "getRootOfQualifiedName",
      "right" : "getRootOfQualifiedName",
      "info" : "SimpleName[67881-67903]:SimpleName[67907-67929]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[67904-67914]:SingleVariableDeclaration[67930-67940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67916-68187]:Block[67942-68213]"
    }, {
      "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "info" : "ForStatement[67922-68183]:ForStatement[67948-68209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67999-68183]:Block[68025-68209]"
    }, {
      "left" : "int type = current.getType();",
      "right" : "int type = current.getType();",
      "info" : "VariableDeclarationStatement[68007-68036]:VariableDeclarationStatement[68033-68062]"
    }, {
      "left" : "if (type == Token.NAME || type == Token.THIS)",
      "right" : "if (type == Token.NAME || type == Token.THIS)",
      "info" : "IfStatement[68043-68122]:IfStatement[68069-68148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68089-68122]:Block[68115-68148]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[68099-68114]:ReturnStatement[68125-68140]"
    }, {
      "left" : "Preconditions.checkState(type == Token.GETPROP);",
      "right" : "Preconditions.checkState(type == Token.GETPROP);",
      "info" : "ExpressionStatement[68129-68177]:ExpressionStatement[68155-68203]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68499-68505]:Modifier[68525-68531]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68506-68510]:PrimitiveType[68532-68536]"
    }, {
      "left" : "setDebugInformation",
      "right" : "setDebugInformation",
      "info" : "SimpleName[68511-68530]:SimpleName[68537-68556]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[68531-68540]:SingleVariableDeclaration[68557-68566]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[68542-68556]:SingleVariableDeclaration[68568-68582]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[68592-68611]:SingleVariableDeclaration[68618-68637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68613-68722]:Block[68639-68748]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[68619-68662]:ExpressionStatement[68645-68688]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[68667-68718]:ExpressionStatement[68693-68744]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68726-68733]:Modifier[68752-68759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68734-68740]:Modifier[68760-68766]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[68741-68745]:SimpleType[68767-68771]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[68746-68753]:SimpleName[68772-68779]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[68761-68788]:SingleVariableDeclaration[68787-68814]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[68790-68801]:SingleVariableDeclaration[68816-68827]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[68803-68813]:SingleVariableDeclaration[68829-68839]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[68815-68825]:SingleVariableDeclaration[68841-68851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68827-69028]:Block[68853-69054]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "VariableDeclarationStatement[68833-68898]:VariableDeclarationStatement[68859-68924]"
    }, {
      "left" : "if (convention.isConstant(name))",
      "right" : "if (convention.isConstant(name))",
      "info" : "IfStatement[68903-69003]:IfStatement[68929-69029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68936-69003]:Block[68962-69029]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[68944-68997]:ExpressionStatement[68970-69023]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[69008-69024]:ReturnStatement[69034-69050]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69358-69364]:Modifier[69384-69390]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[69365-69369]:SimpleType[69391-69395]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[69370-69377]:SimpleName[69396-69403]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[69385-69412]:SingleVariableDeclaration[69411-69438]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[69414-69425]:SingleVariableDeclaration[69440-69451]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[69427-69441]:SingleVariableDeclaration[69453-69467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69443-69676]:Block[69469-69702]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[69449-69498]:VariableDeclarationStatement[69475-69524]"
    }, {
      "left" : "if (convention.isConstantKey(name))",
      "right" : "if (convention.isConstantKey(name))",
      "info" : "IfStatement[69503-69606]:IfStatement[69529-69632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69539-69606]:Block[69565-69632]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[69547-69600]:ExpressionStatement[69573-69626]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[69611-69651]:ExpressionStatement[69637-69677]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[69656-69672]:ReturnStatement[69682-69698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70193-70199]:Modifier[70219-70225]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[70200-70204]:SimpleType[70226-70230]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[70205-70212]:SimpleName[70231-70238]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[70220-70247]:SingleVariableDeclaration[70246-70273]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[70249-70260]:SingleVariableDeclaration[70275-70286]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[70268-70282]:SingleVariableDeclaration[70294-70308]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[70284-70303]:SingleVariableDeclaration[70310-70329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70305-70449]:Block[70331-70475]"
    }, {
      "left" : "Node nameNode = newName(convention, name, basisNode);",
      "right" : "Node nameNode = newName(convention, name, basisNode);",
      "info" : "VariableDeclarationStatement[70311-70364]:VariableDeclarationStatement[70337-70390]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[70369-70424]:ExpressionStatement[70395-70450]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[70429-70445]:ReturnStatement[70455-70471]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71049-71055]:Modifier[71075-71081]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71056-71063]:PrimitiveType[71082-71089]"
    }, {
      "left" : "isLatin",
      "right" : "isLatin",
      "info" : "SimpleName[71064-71071]:SimpleName[71090-71097]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[71072-71080]:SingleVariableDeclaration[71098-71106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71082-71320]:Block[71108-71346]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[71088-71120]:VariableDeclarationStatement[71114-71146]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[71125-71146]:VariableDeclarationStatement[71151-71172]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[71151-71299]:ForStatement[71177-71325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71193-71299]:Block[71219-71325]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[71201-71226]:VariableDeclarationStatement[71227-71252]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[71233-71293]:IfStatement[71259-71319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71262-71293]:Block[71288-71319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71272-71285]:ReturnStatement[71298-71311]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[71304-71316]:ReturnStatement[71330-71342]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71476-71482]:Modifier[71502-71508]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71483-71490]:PrimitiveType[71509-71516]"
    }, {
      "left" : "isValidPropertyName",
      "right" : "isValidPropertyName",
      "info" : "SimpleName[71491-71510]:SimpleName[71517-71536]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[71511-71522]:SingleVariableDeclaration[71537-71548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71524-71985]:Block[71550-72011]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "info" : "ReturnStatement[71530-71981]:ReturnStatement[71556-72007]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71989-71996]:Modifier[72015-72022]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71997-72003]:Modifier[72023-72029]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[72004-72009]:TYPE_DECLARATION_KIND[72030-72035]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "SimpleName[72010-72022]:SimpleName[72036-72048]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleType[72034-72041]:SimpleType[72060-72067]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72109-72115]:Modifier[72135-72141]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72116-72120]:PrimitiveType[72142-72146]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[72121-72126]:SimpleName[72147-72152]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[72127-72133]:SingleVariableDeclaration[72153-72159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72135-72422]:Block[72161-72448]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[72143-72416]:IfStatement[72169-72442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72174-72416]:Block[72200-72442]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[72184-72212]:VariableDeclarationStatement[72210-72238]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[72221-72408]:IfStatement[72247-72434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72274-72408]:Block[72300-72434]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[72286-72314]:VariableDeclarationStatement[72312-72340]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[72325-72398]:IfStatement[72351-72424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72354-72398]:Block[72380-72424]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[72368-72386]:ExpressionStatement[72394-72412]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72523-72529]:Modifier[72549-72555]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72530-72536]:Modifier[72556-72562]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[72537-72553]:ParameterizedType[72563-72579]"
    }, {
      "left" : "getVarsDeclaredInBranch",
      "right" : "getVarsDeclaredInBranch",
      "info" : "SimpleName[72554-72577]:SimpleName[72580-72603]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[72578-72587]:SingleVariableDeclaration[72604-72613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72589-72764]:Block[72615-72790]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[72595-72639]:VariableDeclarationStatement[72621-72665]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "info" : "ExpressionStatement[72644-72724]:ExpressionStatement[72670-72750]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[72729-72760]:ReturnStatement[72755-72786]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72886-72892]:Modifier[72912-72918]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[72893-72900]:PrimitiveType[72919-72926]"
    }, {
      "left" : "isPrototypePropertyDeclaration",
      "right" : "isPrototypePropertyDeclaration",
      "info" : "SimpleName[72901-72931]:SimpleName[72927-72957]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[72932-72938]:SingleVariableDeclaration[72958-72964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72940-73066]:Block[72966-73092]"
    }, {
      "left" : "if (!isExprAssign(n))",
      "right" : "if (!isExprAssign(n))",
      "info" : "IfStatement[72946-72995]:IfStatement[72972-73021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72968-72995]:Block[72994-73021]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[72976-72989]:ReturnStatement[73002-73015]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[73000-73062]:ReturnStatement[73026-73088]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73070-73076]:Modifier[73096-73102]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[73077-73084]:PrimitiveType[73103-73110]"
    }, {
      "left" : "isPrototypeProperty",
      "right" : "isPrototypeProperty",
      "info" : "SimpleName[73085-73104]:SimpleName[73111-73130]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[73105-73111]:SingleVariableDeclaration[73131-73137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73113-73306]:Block[73139-73332]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[73119-73159]:VariableDeclarationStatement[73145-73185]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[73164-73214]:IfStatement[73190-73240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73187-73214]:Block[73213-73240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73195-73208]:ReturnStatement[73221-73234]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[73219-73271]:VariableDeclarationStatement[73245-73297]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[73276-73302]:ReturnStatement[73302-73328]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73386-73392]:Modifier[73412-73418]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[73393-73397]:SimpleType[73419-73423]"
    }, {
      "left" : "getPrototypeClassName",
      "right" : "getPrototypeClassName",
      "info" : "SimpleName[73398-73419]:SimpleName[73424-73445]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[73420-73430]:SingleVariableDeclaration[73446-73456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73432-73669]:Block[73458-73695]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[73438-73455]:VariableDeclarationStatement[73464-73481]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[73460-73648]:WhileStatement[73486-73674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73483-73648]:Block[73509-73674]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[73491-73642]:IfStatement[73517-73668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73547-73592]:Block[73573-73618]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[73557-73584]:ReturnStatement[73583-73610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73598-73642]:Block[73624-73668]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[73608-73634]:ExpressionStatement[73634-73660]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73653-73665]:ReturnStatement[73679-73691]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73759-73765]:Modifier[73785-73791]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[73766-73772]:SimpleType[73792-73798]"
    }, {
      "left" : "getPrototypePropertyName",
      "right" : "getPrototypePropertyName",
      "info" : "SimpleName[73773-73797]:SimpleName[73799-73823]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[73798-73808]:SingleVariableDeclaration[73824-73834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73810-74031]:Block[73836-74057]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[73816-73859]:VariableDeclarationStatement[73842-73885]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[73864-73919]:VariableDeclarationStatement[73890-73945]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[73924-73983]:VariableDeclarationStatement[73950-74009]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[73988-74027]:ReturnStatement[74014-74053]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74114-74120]:Modifier[74140-74146]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[74121-74125]:SimpleType[74147-74151]"
    }, {
      "left" : "newUndefinedNode",
      "right" : "newUndefinedNode",
      "info" : "SimpleName[74126-74142]:SimpleName[74152-74168]"
    }, {
      "left" : "Node srcReferenceNode",
      "right" : "Node srcReferenceNode",
      "info" : "SingleVariableDeclaration[74143-74164]:SingleVariableDeclaration[74169-74190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74166-74346]:Block[74192-74372]"
    }, {
      "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "info" : "VariableDeclarationStatement[74172-74224]:VariableDeclarationStatement[74198-74250]"
    }, {
      "left" : "if (srcReferenceNode != null)",
      "right" : "if (srcReferenceNode != null)",
      "info" : "IfStatement[74229-74325]:IfStatement[74255-74351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74259-74325]:Block[74285-74351]"
    }, {
      "left" : "node.copyInformationFromForTree(srcReferenceNode);",
      "right" : "node.copyInformationFromForTree(srcReferenceNode);",
      "info" : "ExpressionStatement[74269-74319]:ExpressionStatement[74295-74345]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[74330-74342]:ReturnStatement[74356-74368]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74441-74447]:Modifier[74467-74473]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[74448-74452]:SimpleType[74474-74478]"
    }, {
      "left" : "newVarNode",
      "right" : "newVarNode",
      "info" : "SimpleName[74453-74463]:SimpleName[74479-74489]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[74464-74475]:SingleVariableDeclaration[74490-74501]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[74477-74487]:SingleVariableDeclaration[74503-74513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74489-74819]:Block[74515-74845]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[74495-74544]:VariableDeclarationStatement[74521-74570]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[74549-74713]:IfStatement[74575-74739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74568-74713]:Block[74594-74739]"
    }, {
      "left" : "Preconditions.checkState(value.getNext() == null);",
      "right" : "Preconditions.checkState(value.getNext() == null);",
      "info" : "ExpressionStatement[74576-74626]:ExpressionStatement[74602-74652]"
    }, {
      "left" : "nodeName.addChildToBack(value);",
      "right" : "nodeName.addChildToBack(value);",
      "info" : "ExpressionStatement[74633-74664]:ExpressionStatement[74659-74690]"
    }, {
      "left" : "nodeName.copyInformationFrom(value);",
      "right" : "nodeName.copyInformationFrom(value);",
      "info" : "ExpressionStatement[74671-74707]:ExpressionStatement[74697-74733]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "info" : "VariableDeclarationStatement[74718-74798]:VariableDeclarationStatement[74744-74824]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[74804-74815]:ReturnStatement[74830-74841]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74901-74908]:Modifier[74927-74934]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74909-74915]:Modifier[74935-74941]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[74916-74921]:TYPE_DECLARATION_KIND[74942-74947]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[74922-74935]:SimpleName[74948-74961]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[74992-75005]:SimpleName[75018-75031]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[75006-75017]:SingleVariableDeclaration[75032-75043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75018-75049]:Block[75044-75075]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[75026-75043]:ExpressionStatement[75052-75069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75055-75061]:Modifier[75081-75087]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75062-75069]:PrimitiveType[75088-75095]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75070-75075]:SimpleName[75096-75101]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75076-75082]:SingleVariableDeclaration[75102-75108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75084-75171]:Block[75110-75197]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[75092-75165]:ReturnStatement[75118-75191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75252-75258]:Modifier[75278-75284]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[75259-75264]:TYPE_DECLARATION_KIND[75285-75290]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[75265-75278]:SimpleName[75291-75304]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[75332-75345]:SimpleName[75358-75371]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[75346-75354]:SingleVariableDeclaration[75372-75380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75355-75386]:Block[75381-75412]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[75363-75380]:ExpressionStatement[75389-75406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75392-75398]:Modifier[75418-75424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75399-75406]:PrimitiveType[75425-75432]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75407-75412]:SimpleName[75433-75438]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75413-75419]:SingleVariableDeclaration[75439-75445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75421-75462]:Block[75447-75488]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[75429-75456]:ReturnStatement[75455-75482]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75543-75549]:Modifier[75569-75575]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[75550-75555]:TYPE_DECLARATION_KIND[75576-75581]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "SimpleName[75556-75572]:SimpleName[75582-75598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75606-75612]:Modifier[75632-75638]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75613-75620]:PrimitiveType[75639-75646]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75621-75626]:SimpleName[75647-75652]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75627-75633]:SingleVariableDeclaration[75653-75659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75635-75709]:Block[75661-75735]"
    }, {
      "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "info" : "ReturnStatement[75643-75703]:ReturnStatement[75669-75729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75791-75797]:Modifier[75817-75823]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[75798-75803]:TYPE_DECLARATION_KIND[75824-75829]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "SimpleName[75804-75820]:SimpleName[75830-75846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75853-75859]:Modifier[75879-75885]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75860-75867]:PrimitiveType[75886-75893]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75868-75873]:SimpleName[75894-75899]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75874-75880]:SingleVariableDeclaration[75900-75906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75882-75918]:Block[75908-75944]"
    }, {
      "left" : "return !isFunction(n);",
      "right" : "return !isFunction(n);",
      "info" : "ReturnStatement[75890-75912]:ReturnStatement[75916-75938]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76014-76020]:Modifier[76040-76046]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[76021-76026]:TYPE_DECLARATION_KIND[76047-76052]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "SimpleName[76027-76048]:SimpleName[76053-76074]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76081-76087]:Modifier[76107-76113]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[76088-76095]:PrimitiveType[76114-76121]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[76096-76101]:SimpleName[76122-76127]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[76102-76108]:SingleVariableDeclaration[76128-76134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76110-76329]:Block[76136-76355]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[76118-76146]:VariableDeclarationStatement[76144-76172]"
    }, {
      "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "info" : "ReturnStatement[76153-76323]:ReturnStatement[76179-76349]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76423-76429]:Modifier[76449-76455]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76430-76433]:PrimitiveType[76456-76459]"
    }, {
      "left" : "getNodeTypeReferenceCount",
      "right" : "getNodeTypeReferenceCount",
      "info" : "SimpleName[76434-76459]:SimpleName[76460-76485]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[76467-76476]:SingleVariableDeclaration[76493-76502]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[76478-76486]:SingleVariableDeclaration[76504-76512]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[76488-76524]:SingleVariableDeclaration[76514-76550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76526-76605]:Block[76552-76631]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[76532-76601]:ReturnStatement[76558-76627]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76684-76690]:Modifier[76710-76716]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[76691-76698]:PrimitiveType[76717-76724]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[76699-76715]:SimpleName[76725-76741]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[76716-76725]:SingleVariableDeclaration[76742-76751]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[76761-76772]:SingleVariableDeclaration[76787-76798]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[76808-76844]:SingleVariableDeclaration[76834-76870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76846-76920]:Block[76872-76946]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[76852-76916]:ReturnStatement[76878-76942]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76999-77005]:Modifier[77025-77031]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77006-77013]:PrimitiveType[77032-77039]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[77014-77030]:SimpleName[77040-77056]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77031-77040]:SingleVariableDeclaration[77057-77066]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[77042-77053]:SingleVariableDeclaration[77068-77079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77055-77132]:Block[77081-77158]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77061-77128]:ReturnStatement[77087-77154]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77229-77235]:Modifier[77255-77261]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77236-77239]:PrimitiveType[77262-77265]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "getNameReferenceCount",
      "info" : "SimpleName[77240-77261]:SimpleName[77266-77287]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77262-77271]:SingleVariableDeclaration[77288-77297]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[77273-77284]:SingleVariableDeclaration[77299-77310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77286-77383]:Block[77312-77409]"
    }, {
      "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77292-77379]:ReturnStatement[77318-77405]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77479-77485]:Modifier[77505-77511]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77486-77493]:PrimitiveType[77512-77519]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[77494-77497]:SimpleName[77520-77523]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77498-77507]:SingleVariableDeclaration[77524-77533]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[77530-77550]:SingleVariableDeclaration[77556-77576]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[77573-77609]:SingleVariableDeclaration[77599-77635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77611-77914]:Block[77637-77940]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[77617-77665]:IfStatement[77643-77691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77639-77665]:Block[77665-77691]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77647-77659]:ReturnStatement[77673-77685]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[77671-77737]:IfStatement[77697-77763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77710-77737]:Block[77736-77763]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77718-77731]:ReturnStatement[77744-77757]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[77743-77891]:ForStatement[77769-77917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77807-77891]:Block[77833-77917]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[77815-77885]:IfStatement[77841-77911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77855-77885]:Block[77881-77911]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77865-77877]:ReturnStatement[77891-77903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77897-77910]:ReturnStatement[77923-77936]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78031-78037]:Modifier[78057-78063]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[78038-78041]:PrimitiveType[78064-78067]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[78042-78050]:SimpleName[78068-78076]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[78058-78064]:SingleVariableDeclaration[78084-78090]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[78066-78086]:SingleVariableDeclaration[78092-78112]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[78088-78124]:SingleVariableDeclaration[78114-78150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78126-78399]:Block[78152-78425]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[78132-78146]:VariableDeclarationStatement[78158-78172]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[78152-78193]:IfStatement[78178-78219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78171-78193]:Block[78197-78219]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[78179-78187]:ExpressionStatement[78205-78213]"
    }, {
      "left" : "if (traverseChildrenPred.apply(n))",
      "right" : "if (traverseChildrenPred.apply(n))",
      "info" : "IfStatement[78199-78376]:IfStatement[78225-78402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78234-78376]:Block[78260-78402]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78242-78370]:ForStatement[78268-78396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78303-78370]:Block[78329-78396]"
    }, {
      "left" : "total += getCount(c, pred, traverseChildrenPred);",
      "right" : "total += getCount(c, pred, traverseChildrenPred);",
      "info" : "ExpressionStatement[78313-78362]:ExpressionStatement[78339-78388]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[78382-78395]:ReturnStatement[78408-78421]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78478-78484]:Modifier[78504-78510]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[78485-78494]:TYPE_DECLARATION_KIND[78511-78520]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleName[78495-78502]:SimpleName[78521-78528]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78509-78513]:PrimitiveType[78535-78539]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[78514-78519]:SimpleName[78540-78545]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[78520-78529]:SingleVariableDeclaration[78546-78555]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78644-78650]:Modifier[78670-78676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78651-78655]:PrimitiveType[78677-78681]"
    }, {
      "left" : "visitPreOrder",
      "right" : "visitPreOrder",
      "info" : "SimpleName[78656-78669]:SimpleName[78682-78695]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[78670-78679]:SingleVariableDeclaration[78696-78705]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[78702-78716]:SingleVariableDeclaration[78728-78742]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[78739-78775]:SingleVariableDeclaration[78765-78801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78777-78993]:Block[78803-79019]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[78783-78802]:ExpressionStatement[78809-78828]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[78808-78989]:IfStatement[78834-79015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78846-78989]:Block[78872-79015]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78854-78983]:ForStatement[78880-79009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78918-78983]:Block[78944-79009]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[78928-78975]:ExpressionStatement[78954-79001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79103-79109]:Modifier[79129-79135]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79110-79114]:PrimitiveType[79136-79140]"
    }, {
      "left" : "visitPostOrder",
      "right" : "visitPostOrder",
      "info" : "SimpleName[79115-79129]:SimpleName[79141-79155]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[79130-79139]:SingleVariableDeclaration[79156-79165]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[79162-79176]:SingleVariableDeclaration[79188-79202]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[79199-79235]:SingleVariableDeclaration[79225-79261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79237-79454]:Block[79263-79480]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79243-79425]:IfStatement[79269-79451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79281-79425]:Block[79307-79451]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79289-79419]:ForStatement[79315-79445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79353-79419]:Block[79379-79445]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[79363-79411]:ExpressionStatement[79389-79437]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[79431-79450]:ExpressionStatement[79457-79476]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79523-79529]:Modifier[79549-79555]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[79530-79537]:PrimitiveType[79556-79563]"
    }, {
      "left" : "hasFinally",
      "right" : "hasFinally",
      "info" : "SimpleName[79538-79548]:SimpleName[79564-79574]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[79549-79555]:SingleVariableDeclaration[79575-79581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79557-79656]:Block[79583-79682]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[79563-79617]:ExpressionStatement[79589-79643]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[79622-79652]:ReturnStatement[79648-79678]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79750-79756]:Modifier[79776-79782]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[79757-79761]:SimpleType[79783-79787]"
    }, {
      "left" : "getCatchBlock",
      "right" : "getCatchBlock",
      "info" : "SimpleName[79762-79775]:SimpleName[79788-79801]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[79776-79782]:SingleVariableDeclaration[79802-79808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79784-79888]:Block[79810-79914]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[79790-79844]:ExpressionStatement[79816-79870]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[79849-79884]:ReturnStatement[79875-79910]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80000-80006]:Modifier[80026-80032]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[80007-80014]:PrimitiveType[80033-80040]"
    }, {
      "left" : "hasCatchHandler",
      "right" : "hasCatchHandler",
      "info" : "SimpleName[80015-80030]:SimpleName[80041-80056]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[80031-80037]:SingleVariableDeclaration[80057-80063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80039-80179]:Block[80065-80205]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[80045-80101]:ExpressionStatement[80071-80127]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[80106-80175]:ReturnStatement[80132-80201]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80289-80295]:Modifier[80315-80321]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[80296-80300]:SimpleType[80322-80326]"
    }, {
      "left" : "getFnParameters",
      "right" : "getFnParameters",
      "info" : "SimpleName[80301-80316]:SimpleName[80327-80342]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[80317-80328]:SingleVariableDeclaration[80343-80354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80330-80515]:Block[80356-80541]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[80402-80466]:ExpressionStatement[80428-80492]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[80471-80511]:ReturnStatement[80497-80537]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81221-81227]:Modifier[81247-81253]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[81228-81235]:PrimitiveType[81254-81261]"
    }, {
      "left" : "isConstantName",
      "right" : "isConstantName",
      "info" : "SimpleName[81236-81250]:SimpleName[81262-81276]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[81251-81260]:SingleVariableDeclaration[81277-81286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81262-81322]:Block[81288-81348]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[81268-81318]:ReturnStatement[81294-81344]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81392-81398]:Modifier[81418-81424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[81399-81406]:PrimitiveType[81425-81432]"
    }, {
      "left" : "isConstantByConvention",
      "right" : "isConstantByConvention",
      "info" : "SimpleName[81407-81429]:SimpleName[81433-81455]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[81437-81464]:SingleVariableDeclaration[81463-81490]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[81466-81475]:SingleVariableDeclaration[81492-81501]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[81477-81488]:SingleVariableDeclaration[81503-81514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81490-81815]:Block[81516-81841]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[81496-81527]:VariableDeclarationStatement[81522-81553]"
    }, {
      "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "info" : "IfStatement[81532-81811]:IfStatement[81558-81837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81612-81664]:Block[81638-81690]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[81620-81658]:ReturnStatement[81646-81684]"
    }, {
      "left" : "if (isObjectLitKey(node, parent))",
      "right" : "if (isObjectLitKey(node, parent))",
      "info" : "IfStatement[81670-81811]:IfStatement[81696-81837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81704-81756]:Block[81730-81782]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[81712-81750]:ReturnStatement[81738-81776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81762-81811]:Block[81788-81837]"
    }, {
      "left" : "return convention.isConstant(name);",
      "right" : "return convention.isConstant(name);",
      "info" : "ReturnStatement[81770-81805]:ReturnStatement[81796-81831]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81909-81915]:Modifier[81935-81941]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[81916-81925]:SimpleType[81942-81951]"
    }, {
      "left" : "getInfoForNameNode",
      "right" : "getInfoForNameNode",
      "info" : "SimpleName[81926-81944]:SimpleName[81952-81970]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[81945-81958]:SingleVariableDeclaration[81971-81984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81960-82344]:Block[81986-82370]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[81966-81988]:VariableDeclarationStatement[81992-82014]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[81993-82012]:VariableDeclarationStatement[82019-82038]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[82017-82121]:IfStatement[82043-82147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82039-82121]:Block[82065-82147]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[82047-82078]:ExpressionStatement[82073-82104]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[82085-82115]:ExpressionStatement[82111-82141]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[82127-82323]:IfStatement[82153-82349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82280-82323]:Block[82306-82349]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[82288-82317]:ExpressionStatement[82314-82343]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[82328-82340]:ReturnStatement[82354-82366]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[82399-82405]:Modifier[82425-82431]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[82406-82415]:SimpleType[82432-82441]"
    }, {
      "left" : "getFunctionInfo",
      "right" : "getFunctionInfo",
      "info" : "SimpleName[82416-82431]:SimpleName[82442-82457]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[82432-82438]:SingleVariableDeclaration[82458-82464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82440-82976]:Block[82466-83002]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[82446-82502]:ExpressionStatement[82472-82528]"
    }, {
      "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[82507-82543]:VariableDeclarationStatement[82533-82569]"
    }, {
      "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[82548-82953]:IfStatement[82574-82979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82604-82953]:Block[82630-82979]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[82655-82683]:VariableDeclarationStatement[82681-82709]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN)",
      "right" : "if (parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[82690-82947]:IfStatement[82716-82973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82728-82799]:Block[82754-82825]"
    }, {
      "left" : "fnInfo = parent.getJSDocInfo();",
      "right" : "fnInfo = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[82760-82791]:ExpressionStatement[82786-82817]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[82805-82947]:IfStatement[82831-82973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82841-82947]:Block[82867-82973]"
    }, {
      "left" : "fnInfo = parent.getParent().getJSDocInfo();",
      "right" : "fnInfo = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[82896-82939]:ExpressionStatement[82922-82965]"
    }, {
      "left" : "return fnInfo;",
      "right" : "return fnInfo;",
      "info" : "ReturnStatement[82958-82972]:ReturnStatement[82984-82998]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83084-83090]:Modifier[83110-83116]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[83091-83097]:SimpleType[83117-83123]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[83098-83111]:SimpleName[83124-83137]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[83112-83118]:SingleVariableDeclaration[83138-83144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83120-83316]:Block[83146-83342]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[83126-83151]:VariableDeclarationStatement[83152-83177]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[83156-83289]:WhileStatement[83182-83315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83196-83289]:Block[83222-83315]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[83204-83258]:ExpressionStatement[83230-83284]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[83265-83283]:ExpressionStatement[83291-83309]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[83294-83312]:ReturnStatement[83320-83338]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83400-83406]:Modifier[83426-83432]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[83407-83411]:SimpleType[83433-83437]"
    }, {
      "left" : "newCallNode",
      "right" : "newCallNode",
      "info" : "SimpleName[83412-83423]:SimpleName[83438-83449]"
    }, {
      "left" : "Node callTarget",
      "right" : "Node callTarget",
      "info" : "SingleVariableDeclaration[83424-83439]:SingleVariableDeclaration[83450-83465]"
    }, {
      "left" : "Node... parameters",
      "right" : "Node... parameters",
      "info" : "SingleVariableDeclaration[83441-83459]:SingleVariableDeclaration[83467-83485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83461-83715]:Block[83487-83741]"
    }, {
      "left" : "boolean isFreeCall = isName(callTarget);",
      "right" : "boolean isFreeCall = isName(callTarget);",
      "info" : "VariableDeclarationStatement[83467-83507]:VariableDeclarationStatement[83493-83533]"
    }, {
      "left" : "Node call = new Node(Token.CALL, callTarget);",
      "right" : "Node call = new Node(Token.CALL, callTarget);",
      "info" : "VariableDeclarationStatement[83512-83557]:VariableDeclarationStatement[83538-83583]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "info" : "ExpressionStatement[83562-83610]:ExpressionStatement[83588-83636]"
    }, {
      "left" : "for (Node parameter : parameters)",
      "right" : "for (Node parameter : parameters)",
      "info" : "EnhancedForStatement[83615-83694]:EnhancedForStatement[83641-83720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83649-83694]:Block[83675-83720]"
    }, {
      "left" : "call.addChildToBack(parameter);",
      "right" : "call.addChildToBack(parameter);",
      "info" : "ExpressionStatement[83657-83688]:ExpressionStatement[83683-83714]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[83699-83711]:ReturnStatement[83725-83737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83823-83829]:Modifier[83849-83855]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[83830-83837]:PrimitiveType[83856-83863]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[83838-83859]:SimpleName[83864-83885]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[83860-83870]:SingleVariableDeclaration[83886-83896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83872-83950]:Block[83898-83976]"
    }, {
      "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "info" : "ReturnStatement[83878-83946]:ReturnStatement[83904-83972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84147-84153]:Modifier[84173-84179]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[84154-84161]:PrimitiveType[84180-84187]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[84162-84183]:SimpleName[84188-84209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84220-86617]:Block[84246-86669]"
    }, {
      "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "info" : "SwitchStatement[84226-86613]:SwitchStatement[84252-86665]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[84259-84277]:SwitchCase[84285-84303]"
    }, {
      "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "info" : "ReturnStatement[84475-84638]:ReturnStatement[84501-84664]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[84645-84662]:SwitchCase[84671-84688]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[84671-84730]:ReturnStatement[84697-84756]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[84737-84752]:SwitchCase[84763-84778]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[84759-84773]:SwitchCase[84785-84799]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[84782-84908]:ReturnStatement[84808-84934]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[84915-84931]:SwitchCase[84941-84957]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[84940-85076]:ReturnStatement[84966-85102]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[85083-85098]:SwitchCase[85109-85124]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[85105-85120]:SwitchCase[85131-85146]"
    }, {
      "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "info" : "IfStatement[85129-85297]:IfStatement[85155-85323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85175-85257]:Block[85201-85283]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "info" : "ReturnStatement[85187-85247]:ReturnStatement[85213-85273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85263-85297]:Block[85289-85323]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[85275-85287]:ReturnStatement[85301-85313]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[85304-85320]:SwitchCase[85330-85346]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[85329-85356]:ReturnStatement[85355-85382]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[85363-85379]:SwitchCase[85389-85405]"
    }, {
      "left" : "return isImmutableValue(value) || locals.apply(value);",
      "right" : "return isImmutableValue(value) || locals.apply(value);",
      "info" : "ReturnStatement[85388-85442]:ReturnStatement[85414-85468]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[85449-85468]:SwitchCase[85475-85494]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[85475-85494]:SwitchCase[85501-85520]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[85579-85606]:ReturnStatement[85605-85632]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[85613-85629]:SwitchCase[85639-85655]"
    }, {
      "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "info" : "ReturnStatement[85638-85749]:ReturnStatement[85664-85775]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[85756-85771]:SwitchCase[85782-85797]"
    }, {
      "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "info" : "ReturnStatement[85780-85850]:ReturnStatement[85806-85876]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[85857-85877]:SwitchCase[85883-85903]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[85884-85902]:SwitchCase[85910-85928]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[85909-85929]:SwitchCase[85935-85955]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[85936-85957]:SwitchCase[85962-85983]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86033-86045]:ReturnStatement[86059-86071]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[86052-86066]:SwitchCase[86104-86118]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86155-86167]:ReturnStatement[86207-86219]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[86174-86182]:SwitchCase[86226-86234]"
    }, {
      "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "info" : "IfStatement[86328-86467]:IfStatement[86380-86519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86433-86467]:Block[86485-86519]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86445-86457]:ReturnStatement[86497-86509]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "info" : "ThrowStatement[86477-86607]:ThrowStatement[86529-86659]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[86811-86818]:Modifier[86863-86870]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[86819-86825]:Modifier[86871-86877]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[86826-86830]:SimpleType[86878-86882]"
    }, {
      "left" : "getNthSibling",
      "right" : "getNthSibling",
      "info" : "SimpleName[86831-86844]:SimpleName[86883-86896]"
    }, {
      "left" : "Node first",
      "right" : "Node first",
      "info" : "SingleVariableDeclaration[86845-86855]:SingleVariableDeclaration[86897-86907]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[86857-86866]:SingleVariableDeclaration[86909-86918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86868-87019]:Block[86920-87071]"
    }, {
      "left" : "Node sibling = first;",
      "right" : "Node sibling = first;",
      "info" : "VariableDeclarationStatement[86874-86895]:VariableDeclarationStatement[86926-86947]"
    }, {
      "left" : "while (index != 0 && sibling != null)",
      "right" : "while (index != 0 && sibling != null)",
      "info" : "WhileStatement[86900-86995]:WhileStatement[86952-87047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86938-86995]:Block[86990-87047]"
    }, {
      "left" : "sibling = sibling.getNext();",
      "right" : "sibling = sibling.getNext();",
      "info" : "ExpressionStatement[86946-86974]:ExpressionStatement[86998-87026]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[86981-86989]:ExpressionStatement[87033-87041]"
    }, {
      "left" : "return sibling;",
      "right" : "return sibling;",
      "info" : "ReturnStatement[87000-87015]:ReturnStatement[87052-87067]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[87132-87138]:Modifier[87184-87190]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[87139-87143]:SimpleType[87191-87195]"
    }, {
      "left" : "getArgumentForFunction",
      "right" : "getArgumentForFunction",
      "info" : "SimpleName[87144-87166]:SimpleName[87196-87218]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[87167-87180]:SingleVariableDeclaration[87219-87232]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[87182-87191]:SingleVariableDeclaration[87234-87243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87193-87344]:Block[87245-87396]"
    }, {
      "left" : "Preconditions.checkState(isFunction(function));",
      "right" : "Preconditions.checkState(isFunction(function));",
      "info" : "ExpressionStatement[87199-87246]:ExpressionStatement[87251-87298]"
    }, {
      "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "info" : "ReturnStatement[87251-87340]:ReturnStatement[87303-87392]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[87471-87477]:Modifier[87523-87529]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[87478-87482]:SimpleType[87530-87534]"
    }, {
      "left" : "getArgumentForCallOrNew",
      "right" : "getArgumentForCallOrNew",
      "info" : "SimpleName[87483-87506]:SimpleName[87535-87558]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[87507-87516]:SingleVariableDeclaration[87559-87568]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[87518-87527]:SingleVariableDeclaration[87570-87579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87529-87655]:Block[87581-87707]"
    }, {
      "left" : "Preconditions.checkState(isCallOrNew(call));",
      "right" : "Preconditions.checkState(isCallOrNew(call));",
      "info" : "ExpressionStatement[87535-87579]:ExpressionStatement[87587-87631]"
    }, {
      "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "info" : "ReturnStatement[87584-87651]:ReturnStatement[87636-87703]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[87659-87666]:Modifier[87711-87718]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[87667-87673]:Modifier[87719-87725]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[87674-87681]:PrimitiveType[87726-87733]"
    }, {
      "left" : "isToStringMethodCall",
      "right" : "isToStringMethodCall",
      "info" : "SimpleName[87682-87702]:SimpleName[87734-87754]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[87703-87712]:SingleVariableDeclaration[87755-87764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87714-87932]:Block[87766-87984]"
    }, {
      "left" : "Node getNode = call.getFirstChild();",
      "right" : "Node getNode = call.getFirstChild();",
      "info" : "VariableDeclarationStatement[87720-87756]:VariableDeclarationStatement[87772-87808]"
    }, {
      "left" : "if (isGet(getNode))",
      "right" : "if (isGet(getNode))",
      "info" : "IfStatement[87761-87910]:IfStatement[87813-87962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87781-87910]:Block[87833-87962]"
    }, {
      "left" : "Node propNode = getNode.getLastChild();",
      "right" : "Node propNode = getNode.getLastChild();",
      "info" : "VariableDeclarationStatement[87789-87828]:VariableDeclarationStatement[87841-87880]"
    }, {
      "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "info" : "ReturnStatement[87835-87904]:ReturnStatement[87887-87956]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[87915-87928]:ReturnStatement[87967-87980]"
    } ]
  },
  "interFileMappings" : { }
}