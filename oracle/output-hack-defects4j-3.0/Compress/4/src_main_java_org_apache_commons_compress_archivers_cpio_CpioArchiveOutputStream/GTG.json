{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "TypeDeclaration[1180-13514]:TypeDeclaration[1180-13487]"
    }, {
      "left" : "private CpioArchiveEntry entry;",
      "right" : "private CpioArchiveEntry entry;",
      "info" : "FieldDeclaration[2524-2555]:FieldDeclaration[2524-2555]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2561-2592]:FieldDeclaration[2561-2592]"
    }, {
      "left" : "private boolean finished;",
      "right" : "private boolean finished;",
      "info" : "FieldDeclaration[2598-2623]:FieldDeclaration[2598-2623]"
    }, {
      "left" : "private final short entryFormat;",
      "right" : "private final short entryFormat;",
      "info" : "FieldDeclaration[2629-2751]:FieldDeclaration[2629-2751]"
    }, {
      "left" : "private final HashMap names = new HashMap();",
      "right" : "private final HashMap names = new HashMap();",
      "info" : "FieldDeclaration[2757-2801]:FieldDeclaration[2757-2801]"
    }, {
      "left" : "private long crc = 0;",
      "right" : "private long crc = 0;",
      "info" : "FieldDeclaration[2807-2828]:FieldDeclaration[2807-2828]"
    }, {
      "left" : "private long written;",
      "right" : "private long written;",
      "info" : "FieldDeclaration[2834-2855]:FieldDeclaration[2834-2855]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[2861-2892]:FieldDeclaration[2861-2892]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "info" : "MethodDeclaration[2898-3540]:MethodDeclaration[2898-3540]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out)",
      "info" : "MethodDeclaration[3546-3815]:MethodDeclaration[3546-3815]"
    }, {
      "left" : "private void ensureOpen() throws IOException",
      "right" : "private void ensureOpen() throws IOException",
      "info" : "MethodDeclaration[3821-4127]:MethodDeclaration[3821-4127]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[4133-5539]:MethodDeclaration[4133-5539]"
    }, {
      "left" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "right" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "info" : "MethodDeclaration[5545-6301]:MethodDeclaration[5545-6301]"
    }, {
      "left" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "right" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[6307-7148]:MethodDeclaration[6307-7148]"
    }, {
      "left" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "right" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "info" : "MethodDeclaration[7154-7796]:MethodDeclaration[7154-7796]"
    }, {
      "left" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[7802-8631]:MethodDeclaration[7802-8631]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[8778-9397]:MethodDeclaration[8778-9397]"
    }, {
      "left" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "right" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[9403-10660]:MethodDeclaration[9403-10660]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[10666-11486]:MethodDeclaration[10666-11486]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[11492-11890]:MethodDeclaration[11492-11863]"
    }, {
      "left" : "private void pad(int count) throws IOExceptio",
      "right" : "private void pad(int count) throws IOExceptio",
      "info" : "MethodDeclaration[11896-12055]:MethodDeclaration[11869-12028]"
    }, {
      "left" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[12061-12293]:MethodDeclaration[12034-12266]"
    }, {
      "left" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "right" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "info" : "MethodDeclaration[12299-13144]:MethodDeclaration[12272-13117]"
    }, {
      "left" : "private void writeCString(final String str) throws IOException",
      "right" : "private void writeCString(final String str) throws IOException",
      "info" : "MethodDeclaration[13150-13335]:MethodDeclaration[13123-13308]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[13341-13511]:MethodDeclaration[13314-13484]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveOutputStream",
      "right" : "ArchiveOutputStream",
      "info" : "SimpleType[2464-2483]:SimpleType[2464-2483]"
    }, {
      "left" : "CpioConstants",
      "right" : "CpioConstants",
      "info" : "SimpleType[2503-2516]:SimpleType[2503-2516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3102-3108]:Modifier[3102-3108]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[3109-3132]:SimpleName[3109-3132]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3133-3155]:SingleVariableDeclaration[3133-3155]"
    }, {
      "left" : "final short format",
      "right" : "final short format",
      "info" : "SingleVariableDeclaration[3157-3175]:SingleVariableDeclaration[3157-3175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3177-3540]:Block[3177-3540]"
    }, {
      "left" : "this.out = new FilterOutputStream(out);",
      "right" : "this.out = new FilterOutputStream(out);",
      "info" : "ExpressionStatement[3187-3226]:ExpressionStatement[3187-3226]"
    }, {
      "left" : "switch (format) {\n        case FORMAT_NEW:\n        case FORMAT_NEW_CRC:\n        case FORMAT_OLD_ASCII:\n        case FORMAT_OLD_BINARY:\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown format: \"+format);\n        \n        }",
      "right" : "switch (format) {\n        case FORMAT_NEW:\n        case FORMAT_NEW_CRC:\n        case FORMAT_OLD_ASCII:\n        case FORMAT_OLD_BINARY:\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown format: \"+format);\n        \n        }",
      "info" : "SwitchStatement[3235-3499]:SwitchStatement[3235-3499]"
    }, {
      "left" : "case FORMAT_NEW:",
      "right" : "case FORMAT_NEW:",
      "info" : "SwitchCase[3261-3277]:SwitchCase[3261-3277]"
    }, {
      "left" : "case FORMAT_NEW_CRC:",
      "right" : "case FORMAT_NEW_CRC:",
      "info" : "SwitchCase[3286-3306]:SwitchCase[3286-3306]"
    }, {
      "left" : "case FORMAT_OLD_ASCII:",
      "right" : "case FORMAT_OLD_ASCII:",
      "info" : "SwitchCase[3315-3337]:SwitchCase[3315-3337]"
    }, {
      "left" : "case FORMAT_OLD_BINARY:",
      "right" : "case FORMAT_OLD_BINARY:",
      "info" : "SwitchCase[3346-3369]:SwitchCase[3346-3369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3382-3388]:BreakStatement[3382-3388]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3397-3405]:SwitchCase[3397-3405]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown format: \"+format);",
      "right" : "throw new IllegalArgumentException(\"Unknown format: \"+format);",
      "info" : "ThrowStatement[3418-3480]:ThrowStatement[3418-3480]"
    }, {
      "left" : "this.entryFormat = format;",
      "right" : "this.entryFormat = format;",
      "info" : "ExpressionStatement[3508-3534]:ExpressionStatement[3508-3534]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3722-3728]:Modifier[3722-3728]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[3729-3752]:SimpleName[3729-3752]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3753-3775]:SingleVariableDeclaration[3753-3775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3777-3815]:Block[3777-3815]"
    }, {
      "left" : "this(out, FORMAT_NEW);",
      "right" : "this(out, FORMAT_NEW);",
      "info" : "ConstructorInvocation[3787-3809]:ConstructorInvocation[3787-3809]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3986-3993]:Modifier[3986-3993]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3994-3998]:PrimitiveType[3994-3998]"
    }, {
      "left" : "ensureOpen",
      "right" : "ensureOpen",
      "info" : "SimpleName[3999-4009]:SimpleName[3999-4009]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4019-4030]:SimpleType[4019-4030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4031-4127]:Block[4031-4127]"
    }, {
      "left" : "if (this.closed)",
      "right" : "if (this.closed)",
      "info" : "IfStatement[4041-4121]:IfStatement[4041-4121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4058-4121]:Block[4058-4121]"
    }, {
      "left" : "throw new IOException(\"Stream closed\");",
      "right" : "throw new IOException(\"Stream closed\");",
      "info" : "ThrowStatement[4072-4111]:ThrowStatement[4072-4111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4773-4779]:Modifier[4773-4779]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4780-4784]:PrimitiveType[4780-4784]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[4785-4800]:SimpleName[4785-4800]"
    }, {
      "left" : "ArchiveEntry entry",
      "right" : "ArchiveEntry entry",
      "info" : "SingleVariableDeclaration[4801-4819]:SingleVariableDeclaration[4801-4819]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4828-4839]:SimpleType[4828-4839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4840-5539]:Block[4840-5539]"
    }, {
      "left" : "CpioArchiveEntry e = (CpioArchiveEntry) entry;",
      "right" : "CpioArchiveEntry e = (CpioArchiveEntry) entry;",
      "info" : "VariableDeclarationStatement[4850-4896]:VariableDeclarationStatement[4850-4896]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[4905-4918]:ExpressionStatement[4905-4918]"
    }, {
      "left" : "if (this.entry != null)",
      "right" : "if (this.entry != null)",
      "info" : "IfStatement[4927-5019]:IfStatement[4927-5019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4951-5019]:Block[4951-5019]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[4965-4985]:ExpressionStatement[4965-4985]"
    }, {
      "left" : "if (e.getTime() == -1)",
      "right" : "if (e.getTime() == -1)",
      "info" : "IfStatement[5028-5113]:IfStatement[5028-5113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5051-5113]:Block[5051-5113]"
    }, {
      "left" : "e.setTime(System.currentTimeMillis());",
      "right" : "e.setTime(System.currentTimeMillis());",
      "info" : "ExpressionStatement[5065-5103]:ExpressionStatement[5065-5103]"
    }, {
      "left" : "final short format = e.getFormat();",
      "right" : "final short format = e.getFormat();",
      "info" : "VariableDeclarationStatement[5123-5158]:VariableDeclarationStatement[5123-5158]"
    }, {
      "left" : "if (format != this.entryFormat)",
      "right" : "if (format != this.entryFormat)",
      "info" : "IfStatement[5167-5323]:IfStatement[5167-5323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5198-5323]:Block[5198-5323]"
    }, {
      "left" : "throw new IOException(\"Header format: \"+format+\" does not match existing format: \"+this.entryFormat);",
      "right" : "throw new IOException(\"Header format: \"+format+\" does not match existing format: \"+this.entryFormat);",
      "info" : "ThrowStatement[5212-5313]:ThrowStatement[5212-5313]"
    }, {
      "left" : "if (this.names.put(e.getName(), e) != null)",
      "right" : "if (this.names.put(e.getName(), e) != null)",
      "info" : "IfStatement[5333-5458]:IfStatement[5333-5458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5377-5458]:Block[5377-5458]"
    }, {
      "left" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "right" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "info" : "ThrowStatement[5391-5448]:ThrowStatement[5391-5448]"
    }, {
      "left" : "writeHeader(e);",
      "right" : "writeHeader(e);",
      "info" : "ExpressionStatement[5468-5483]:ExpressionStatement[5468-5483]"
    }, {
      "left" : "this.entry = e;",
      "right" : "this.entry = e;",
      "info" : "ExpressionStatement[5492-5507]:ExpressionStatement[5492-5507]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[5516-5533]:ExpressionStatement[5516-5533]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5545-5552]:Modifier[5545-5552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5553-5557]:PrimitiveType[5553-5557]"
    }, {
      "left" : "writeHeader",
      "right" : "writeHeader",
      "info" : "SimpleName[5558-5569]:SimpleName[5558-5569]"
    }, {
      "left" : "final CpioArchiveEntry e",
      "right" : "final CpioArchiveEntry e",
      "info" : "SingleVariableDeclaration[5570-5594]:SingleVariableDeclaration[5570-5594]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5603-5614]:SimpleType[5603-5614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5615-6301]:Block[5615-6301]"
    }, {
      "left" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        }",
      "right" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        }",
      "info" : "SwitchStatement[5625-6295]:SwitchStatement[5625-6295]"
    }, {
      "left" : "case FORMAT_NEW:",
      "right" : "case FORMAT_NEW:",
      "info" : "SwitchCase[5658-5674]:SwitchCase[5658-5674]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));",
      "info" : "ExpressionStatement[5687-5735]:ExpressionStatement[5687-5735]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[5748-5765]:ExpressionStatement[5748-5765]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5778-5784]:BreakStatement[5778-5784]"
    }, {
      "left" : "case FORMAT_NEW_CRC:",
      "right" : "case FORMAT_NEW_CRC:",
      "info" : "SwitchCase[5793-5813]:SwitchCase[5793-5813]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));",
      "info" : "ExpressionStatement[5826-5878]:ExpressionStatement[5826-5878]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[5891-5908]:ExpressionStatement[5891-5908]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5921-5927]:BreakStatement[5921-5927]"
    }, {
      "left" : "case FORMAT_OLD_ASCII:",
      "right" : "case FORMAT_OLD_ASCII:",
      "info" : "SwitchCase[5936-5958]:SwitchCase[5936-5958]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));",
      "info" : "ExpressionStatement[5971-6025]:ExpressionStatement[5971-6025]"
    }, {
      "left" : "writeOldAsciiEntry(e);",
      "right" : "writeOldAsciiEntry(e);",
      "info" : "ExpressionStatement[6038-6060]:ExpressionStatement[6038-6060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6073-6079]:BreakStatement[6073-6079]"
    }, {
      "left" : "case FORMAT_OLD_BINARY:",
      "right" : "case FORMAT_OLD_BINARY:",
      "info" : "SwitchCase[6088-6111]:SwitchCase[6088-6111]"
    }, {
      "left" : "boolean swapHalfWord = true;",
      "right" : "boolean swapHalfWord = true;",
      "info" : "VariableDeclarationStatement[6124-6152]:VariableDeclarationStatement[6124-6152]"
    }, {
      "left" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "right" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "info" : "ExpressionStatement[6165-6216]:ExpressionStatement[6165-6216]"
    }, {
      "left" : "writeOldBinaryEntry(e, swapHalfWord);",
      "right" : "writeOldBinaryEntry(e, swapHalfWord);",
      "info" : "ExpressionStatement[6229-6266]:ExpressionStatement[6229-6266]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6279-6285]:BreakStatement[6279-6285]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6307-6314]:Modifier[6307-6314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6315-6319]:PrimitiveType[6315-6319]"
    }, {
      "left" : "writeNewEntry",
      "right" : "writeNewEntry",
      "info" : "SimpleName[6320-6333]:SimpleName[6320-6333]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[6334-6362]:SingleVariableDeclaration[6334-6362]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6371-6382]:SimpleType[6371-6382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6383-7148]:Block[6383-7148]"
    }, {
      "left" : "writeAsciiLong(entry.getInode(), 8, 16);",
      "right" : "writeAsciiLong(entry.getInode(), 8, 16);",
      "info" : "ExpressionStatement[6393-6433]:ExpressionStatement[6393-6433]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "right" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "info" : "ExpressionStatement[6442-6481]:ExpressionStatement[6442-6481]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "info" : "ExpressionStatement[6490-6528]:ExpressionStatement[6490-6528]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "info" : "ExpressionStatement[6537-6575]:ExpressionStatement[6537-6575]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "info" : "ExpressionStatement[6584-6632]:ExpressionStatement[6584-6632]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "right" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "info" : "ExpressionStatement[6641-6680]:ExpressionStatement[6641-6680]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "right" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "info" : "ExpressionStatement[6689-6728]:ExpressionStatement[6689-6728]"
    }, {
      "left" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[6737-6781]:ExpressionStatement[6737-6781]"
    }, {
      "left" : "writeAsciiLong(entry.getDeviceMin(), 8, 16);",
      "right" : "writeAsciiLong(entry.getDeviceMin(), 8, 16);",
      "info" : "ExpressionStatement[6790-6834]:ExpressionStatement[6790-6834]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[6843-6893]:ExpressionStatement[6843-6893]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "info" : "ExpressionStatement[6902-6952]:ExpressionStatement[6902-6952]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "info" : "ExpressionStatement[6961-7013]:ExpressionStatement[6961-7013]"
    }, {
      "left" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "right" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "info" : "ExpressionStatement[7022-7063]:ExpressionStatement[7022-7063]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[7072-7102]:ExpressionStatement[7072-7102]"
    }, {
      "left" : "pad(entry.getHeaderPadCount());",
      "right" : "pad(entry.getHeaderPadCount());",
      "info" : "ExpressionStatement[7111-7142]:ExpressionStatement[7111-7142]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7154-7161]:Modifier[7154-7161]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7162-7166]:PrimitiveType[7162-7166]"
    }, {
      "left" : "writeOldAsciiEntry",
      "right" : "writeOldAsciiEntry",
      "info" : "SimpleName[7167-7185]:SimpleName[7167-7185]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[7186-7214]:SingleVariableDeclaration[7186-7214]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7235-7246]:SimpleType[7235-7246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7247-7796]:Block[7247-7796]"
    }, {
      "left" : "writeAsciiLong(entry.getDevice(), 6, 8);",
      "right" : "writeAsciiLong(entry.getDevice(), 6, 8);",
      "info" : "ExpressionStatement[7257-7297]:ExpressionStatement[7257-7297]"
    }, {
      "left" : "writeAsciiLong(entry.getInode(), 6, 8);",
      "right" : "writeAsciiLong(entry.getInode(), 6, 8);",
      "info" : "ExpressionStatement[7306-7345]:ExpressionStatement[7306-7345]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "right" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "info" : "ExpressionStatement[7354-7392]:ExpressionStatement[7354-7392]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "info" : "ExpressionStatement[7401-7438]:ExpressionStatement[7401-7438]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "info" : "ExpressionStatement[7447-7484]:ExpressionStatement[7447-7484]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "info" : "ExpressionStatement[7493-7540]:ExpressionStatement[7493-7540]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "right" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "info" : "ExpressionStatement[7549-7595]:ExpressionStatement[7549-7595]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "right" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "info" : "ExpressionStatement[7604-7643]:ExpressionStatement[7604-7643]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "info" : "ExpressionStatement[7652-7703]:ExpressionStatement[7652-7703]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "right" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "info" : "ExpressionStatement[7712-7751]:ExpressionStatement[7712-7751]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[7760-7790]:ExpressionStatement[7760-7790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7802-7809]:Modifier[7802-7809]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7810-7814]:PrimitiveType[7810-7814]"
    }, {
      "left" : "writeOldBinaryEntry",
      "right" : "writeOldBinaryEntry",
      "info" : "SimpleName[7815-7834]:SimpleName[7815-7834]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[7835-7863]:SingleVariableDeclaration[7835-7863]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[7877-7903]:SingleVariableDeclaration[7877-7903]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7912-7923]:SimpleType[7912-7923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7924-8631]:Block[7924-8631]"
    }, {
      "left" : "writeBinaryLong(entry.getDevice(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getDevice(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[7934-7986]:ExpressionStatement[7934-7986]"
    }, {
      "left" : "writeBinaryLong(entry.getInode(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getInode(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[7995-8046]:ExpressionStatement[7995-8046]"
    }, {
      "left" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8055-8105]:ExpressionStatement[8055-8105]"
    }, {
      "left" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8114-8163]:ExpressionStatement[8114-8163]"
    }, {
      "left" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8172-8221]:ExpressionStatement[8172-8221]"
    }, {
      "left" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8230-8289]:ExpressionStatement[8230-8289]"
    }, {
      "left" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8298-8356]:ExpressionStatement[8298-8356]"
    }, {
      "left" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[8365-8415]:ExpressionStatement[8365-8415]"
    }, {
      "left" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "info" : "ExpressionStatement[8424-8487]:ExpressionStatement[8424-8487]"
    }, {
      "left" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[8496-8546]:ExpressionStatement[8496-8546]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[8555-8585]:ExpressionStatement[8555-8585]"
    }, {
      "left" : "pad(entry.getHeaderPadCount());",
      "right" : "pad(entry.getHeaderPadCount());",
      "info" : "ExpressionStatement[8594-8625]:ExpressionStatement[8594-8625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8778-8784]:Modifier[8778-8784]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8785-8789]:PrimitiveType[8785-8789]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[8790-8807]:SimpleName[8790-8807]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8817-8828]:SimpleType[8817-8828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8829-9397]:Block[8829-9397]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[8839-8852]:ExpressionStatement[8839-8852]"
    }, {
      "left" : "if (this.entry.getSize() != this.written)",
      "right" : "if (this.entry.getSize() != this.written)",
      "info" : "IfStatement[8862-9087]:IfStatement[8862-9087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8904-9087]:Block[8904-9087]"
    }, {
      "left" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.entry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "right" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.entry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "info" : "ThrowStatement[8918-9077]:ThrowStatement[8918-9077]"
    }, {
      "left" : "pad(this.entry.getDataPadCount());",
      "right" : "pad(this.entry.getDataPadCount());",
      "info" : "ExpressionStatement[9096-9130]:ExpressionStatement[9096-9130]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "info" : "IfStatement[9139-9316]:IfStatement[9139-9316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-9316]:Block[9185-9316]"
    }, {
      "left" : "if (this.crc != this.entry.getChksum())",
      "right" : "if (this.crc != this.entry.getChksum())",
      "info" : "IfStatement[9199-9306]:IfStatement[9199-9306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9239-9306]:Block[9239-9306]"
    }, {
      "left" : "throw new IOException(\"CRC Error\");",
      "right" : "throw new IOException(\"CRC Error\");",
      "info" : "ThrowStatement[9257-9292]:ThrowStatement[9257-9292]"
    }, {
      "left" : "this.entry = null;",
      "right" : "this.entry = null;",
      "info" : "ExpressionStatement[9325-9343]:ExpressionStatement[9325-9343]"
    }, {
      "left" : "this.crc = 0;",
      "right" : "this.crc = 0;",
      "info" : "ExpressionStatement[9352-9365]:ExpressionStatement[9352-9365]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[9374-9391]:ExpressionStatement[9374-9391]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9880-9886]:Modifier[9880-9886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9887-9891]:PrimitiveType[9887-9891]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[9892-9897]:SimpleName[9892-9897]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[9898-9912]:SingleVariableDeclaration[9898-9912]"
    }, {
      "left" : "final int off",
      "right" : "final int off",
      "info" : "SingleVariableDeclaration[9914-9927]:SingleVariableDeclaration[9914-9927]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[9929-9942]:SingleVariableDeclaration[9929-9942]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9963-9974]:SimpleType[9963-9974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9975-10660]:Block[9975-10660]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[9985-9998]:ExpressionStatement[9985-9998]"
    }, {
      "left" : "if (off < 0 || len < 0 || off > b.length - len)",
      "right" : "if (off < 0 || len < 0 || off > b.length - len)",
      "info" : "IfStatement[10007-10168]:IfStatement[10007-10168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10055-10117]:Block[10055-10117]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[10069-10107]:ThrowStatement[10069-10107]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[10123-10168]:IfStatement[10123-10168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10137-10168]:Block[10137-10168]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10151-10158]:ReturnStatement[10151-10158]"
    }, {
      "left" : "if (this.entry == null)",
      "right" : "if (this.entry == null)",
      "info" : "IfStatement[10178-10273]:IfStatement[10178-10273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10202-10273]:Block[10202-10273]"
    }, {
      "left" : "throw new IOException(\"no current CPIO entry\");",
      "right" : "throw new IOException(\"no current CPIO entry\");",
      "info" : "ThrowStatement[10216-10263]:ThrowStatement[10216-10263]"
    }, {
      "left" : "if (this.written + len > this.entry.getSize())",
      "right" : "if (this.written + len > this.entry.getSize())",
      "info" : "IfStatement[10282-10420]:IfStatement[10282-10420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10329-10420]:Block[10329-10420]"
    }, {
      "left" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "right" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "info" : "ThrowStatement[10343-10410]:ThrowStatement[10343-10410]"
    }, {
      "left" : "out.write(b, off, len);",
      "right" : "out.write(b, off, len);",
      "info" : "ExpressionStatement[10429-10452]:ExpressionStatement[10429-10452]"
    }, {
      "left" : "this.written += len;",
      "right" : "this.written += len;",
      "info" : "ExpressionStatement[10461-10481]:ExpressionStatement[10461-10481]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "info" : "IfStatement[10490-10654]:IfStatement[10490-10654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10536-10654]:Block[10536-10654]"
    }, {
      "left" : "for (int pos = 0; pos < len; pos++)",
      "right" : "for (int pos = 0; pos < len; pos++)",
      "info" : "ForStatement[10550-10644]:ForStatement[10550-10644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10586-10644]:Block[10586-10644]"
    }, {
      "left" : "this.crc += b[pos] & 0xFF;",
      "right" : "this.crc += b[pos] & 0xFF;",
      "info" : "ExpressionStatement[10604-10630]:ExpressionStatement[10604-10630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11029-11035]:Modifier[11029-11035]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11036-11040]:PrimitiveType[11036-11040]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[11041-11047]:SimpleName[11041-11047]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11057-11068]:SimpleType[11057-11068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11069-11486]:Block[11069-11486]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[11079-11092]:ExpressionStatement[11079-11092]"
    }, {
      "left" : "if (this.finished)",
      "right" : "if (this.finished)",
      "info" : "IfStatement[11102-11152]:IfStatement[11102-11152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11121-11152]:Block[11121-11152]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11135-11142]:ReturnStatement[11135-11142]"
    }, {
      "left" : "if (this.entry != null)",
      "right" : "if (this.entry != null)",
      "info" : "IfStatement[11161-11275]:IfStatement[11161-11275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11185-11275]:Block[11185-11275]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[11199-11265]:ThrowStatement[11199-11265]"
    }, {
      "left" : "this.entry = new CpioArchiveEntry(this.entryFormat);",
      "right" : "this.entry = new CpioArchiveEntry(this.entryFormat);",
      "info" : "ExpressionStatement[11284-11336]:ExpressionStatement[11284-11336]"
    }, {
      "left" : "this.entry.setName(CPIO_TRAILER);",
      "right" : "this.entry.setName(CPIO_TRAILER);",
      "info" : "ExpressionStatement[11345-11378]:ExpressionStatement[11345-11378]"
    }, {
      "left" : "this.entry.setNumberOfLinks(1);",
      "right" : "this.entry.setNumberOfLinks(1);",
      "info" : "ExpressionStatement[11387-11418]:ExpressionStatement[11387-11418]"
    }, {
      "left" : "writeHeader(this.entry);",
      "right" : "writeHeader(this.entry);",
      "info" : "ExpressionStatement[11427-11451]:ExpressionStatement[11427-11451]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[11460-11480]:ExpressionStatement[11460-11480]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11722-11728]:Modifier[11722-11728]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11729-11733]:PrimitiveType[11729-11733]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[11734-11739]:SimpleName[11734-11739]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11749-11760]:SimpleType[11749-11760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-11890]:Block[11761-11863]"
    }, {
      "left" : "if (!this.closed)",
      "right" : "if (!this.closed)",
      "info" : "IfStatement[11771-11884]:IfStatement[11771-11857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11789-11884]:Block[11789-11857]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[11830-11842]:ExpressionStatement[11803-11815]"
    }, {
      "left" : "this.closed = true;",
      "right" : "this.closed = true;",
      "info" : "ExpressionStatement[11855-11874]:ExpressionStatement[11828-11847]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11896-11903]:Modifier[11869-11876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11904-11908]:PrimitiveType[11877-11881]"
    }, {
      "left" : "pad",
      "right" : "pad",
      "info" : "SimpleName[11909-11912]:SimpleName[11882-11885]"
    }, {
      "left" : "int count",
      "right" : "int count",
      "info" : "SingleVariableDeclaration[11913-11922]:SingleVariableDeclaration[11886-11895]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11931-11942]:SimpleType[11904-11915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11942-12055]:Block[11915-12028]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[11952-12049]:IfStatement[11925-12022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11966-12049]:Block[11939-12022]"
    }, {
      "left" : "byte buff[] = new byte[count];",
      "right" : "byte buff[] = new byte[count];",
      "info" : "VariableDeclarationStatement[11980-12010]:VariableDeclarationStatement[11953-11983]"
    }, {
      "left" : "out.write(buff);",
      "right" : "out.write(buff);",
      "info" : "ExpressionStatement[12023-12039]:ExpressionStatement[11996-12012]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12061-12068]:Modifier[12034-12041]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12069-12073]:PrimitiveType[12042-12046]"
    }, {
      "left" : "writeBinaryLong",
      "right" : "writeBinaryLong",
      "info" : "SimpleName[12074-12089]:SimpleName[12047-12062]"
    }, {
      "left" : "final long number",
      "right" : "final long number",
      "info" : "SingleVariableDeclaration[12090-12107]:SingleVariableDeclaration[12063-12080]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[12109-12125]:SingleVariableDeclaration[12082-12098]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[12139-12165]:SingleVariableDeclaration[12112-12138]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12174-12185]:SimpleType[12147-12158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12186-12293]:Block[12159-12266]"
    }, {
      "left" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "right" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "info" : "VariableDeclarationStatement[12196-12263]:VariableDeclarationStatement[12169-12236]"
    }, {
      "left" : "out.write(tmp);",
      "right" : "out.write(tmp);",
      "info" : "ExpressionStatement[12272-12287]:ExpressionStatement[12245-12260]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12299-12306]:Modifier[12272-12279]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12307-12311]:PrimitiveType[12280-12284]"
    }, {
      "left" : "writeAsciiLong",
      "right" : "writeAsciiLong",
      "info" : "SimpleName[12312-12326]:SimpleName[12285-12299]"
    }, {
      "left" : "final long number",
      "right" : "final long number",
      "info" : "SingleVariableDeclaration[12327-12344]:SingleVariableDeclaration[12300-12317]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[12346-12362]:SingleVariableDeclaration[12319-12335]"
    }, {
      "left" : "final int radix",
      "right" : "final int radix",
      "info" : "SingleVariableDeclaration[12376-12391]:SingleVariableDeclaration[12349-12364]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12400-12411]:SimpleType[12373-12384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12412-13144]:Block[12385-13117]"
    }, {
      "left" : "StringBuffer tmp = new StringBuffer();",
      "right" : "StringBuffer tmp = new StringBuffer();",
      "info" : "VariableDeclarationStatement[12422-12460]:VariableDeclarationStatement[12395-12433]"
    }, {
      "left" : "String tmpStr;",
      "right" : "String tmpStr;",
      "info" : "VariableDeclarationStatement[12469-12483]:VariableDeclarationStatement[12442-12456]"
    }, {
      "left" : "if (radix == 16)",
      "right" : "if (radix == 16)",
      "info" : "IfStatement[12492-12719]:IfStatement[12465-12692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12509-12570]:Block[12482-12543]"
    }, {
      "left" : "tmp.append(Long.toHexString(number));",
      "right" : "tmp.append(Long.toHexString(number));",
      "info" : "ExpressionStatement[12523-12560]:ExpressionStatement[12496-12533]"
    }, {
      "left" : "if (radix == 8)",
      "right" : "if (radix == 8)",
      "info" : "IfStatement[12576-12719]:IfStatement[12549-12692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12592-12655]:Block[12565-12628]"
    }, {
      "left" : "tmp.append(Long.toOctalString(number));",
      "right" : "tmp.append(Long.toOctalString(number));",
      "info" : "ExpressionStatement[12606-12645]:ExpressionStatement[12579-12618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12661-12719]:Block[12634-12692]"
    }, {
      "left" : "tmp.append(Long.toString(number));",
      "right" : "tmp.append(Long.toString(number));",
      "info" : "ExpressionStatement[12675-12709]:ExpressionStatement[12648-12682]"
    }, {
      "left" : "if (tmp.length() <= length)",
      "right" : "if (tmp.length() <= length)",
      "info" : "IfStatement[12729-13045]:IfStatement[12702-13018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12757-12969]:Block[12730-12942]"
    }, {
      "left" : "long insertLength = length - tmp.length();",
      "right" : "long insertLength = length - tmp.length();",
      "info" : "VariableDeclarationStatement[12771-12813]:VariableDeclarationStatement[12744-12786]"
    }, {
      "left" : "for (int pos = 0; pos < insertLength; pos++)",
      "right" : "for (int pos = 0; pos < insertLength; pos++)",
      "info" : "ForStatement[12826-12922]:ForStatement[12799-12895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12871-12922]:Block[12844-12895]"
    }, {
      "left" : "tmp.insert(0, \"0\");",
      "right" : "tmp.insert(0, \"0\");",
      "info" : "ExpressionStatement[12889-12908]:ExpressionStatement[12862-12881]"
    }, {
      "left" : "tmpStr = tmp.toString();",
      "right" : "tmpStr = tmp.toString();",
      "info" : "ExpressionStatement[12935-12959]:ExpressionStatement[12908-12932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12975-13045]:Block[12948-13018]"
    }, {
      "left" : "tmpStr = tmp.substring(tmp.length() - length);",
      "right" : "tmpStr = tmp.substring(tmp.length() - length);",
      "info" : "ExpressionStatement[12989-13035]:ExpressionStatement[12962-13008]"
    }, {
      "left" : "out.write(tmpStr.getBytes());",
      "right" : "out.write(tmpStr.getBytes());",
      "info" : "ExpressionStatement[13054-13083]:ExpressionStatement[13027-13056]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13150-13157]:Modifier[13123-13130]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13158-13162]:PrimitiveType[13131-13135]"
    }, {
      "left" : "writeCString",
      "right" : "writeCString",
      "info" : "SimpleName[13163-13175]:SimpleName[13136-13148]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[13176-13192]:SingleVariableDeclaration[13149-13165]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13201-13212]:SimpleType[13174-13185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13213-13335]:Block[13186-13308]"
    }, {
      "left" : "out.write(str.getBytes());",
      "right" : "out.write(str.getBytes());",
      "info" : "ExpressionStatement[13223-13249]:ExpressionStatement[13196-13222]"
    }, {
      "left" : "out.write('\\0');",
      "right" : "out.write('\\0');",
      "info" : "ExpressionStatement[13313-13329]:ExpressionStatement[13286-13302]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13341-13347]:Modifier[13314-13320]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[13348-13360]:SimpleType[13321-13333]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[13361-13379]:SimpleName[13334-13352]"
    }, {
      "left" : "File inputFile",
      "right" : "File inputFile",
      "info" : "SingleVariableDeclaration[13380-13394]:SingleVariableDeclaration[13353-13367]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[13396-13412]:SingleVariableDeclaration[13369-13385]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13433-13444]:SimpleType[13406-13417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13445-13511]:Block[13418-13484]"
    }, {
      "left" : "return new CpioArchiveEntry(inputFile, entryName);",
      "right" : "return new CpioArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[13455-13505]:ReturnStatement[13428-13478]"
    } ]
  },
  "interFileMappings" : { }
}