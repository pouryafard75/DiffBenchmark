{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private String queue;",
      "right" : "private String queue;",
      "info" : "FieldDeclaration[209-230]:FieldDeclaration[209-230]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[235-255]:FieldDeclaration[235-255]"
    }, {
      "left" : "private static final char ESC = '\\\\';",
      "right" : "private static final char ESC = '\\\\';",
      "info" : "FieldDeclaration[265-302]:FieldDeclaration[265-302]"
    }, {
      "left" : "public TokenQueue(String data)",
      "right" : "public TokenQueue(String data)",
      "info" : "MethodDeclaration[343-528]:MethodDeclaration[343-528]"
    }, {
      "left" : "public boolean isEmpty()",
      "right" : "public boolean isEmpty()",
      "info" : "MethodDeclaration[534-694]:MethodDeclaration[534-694]"
    }, {
      "left" : "private int remainingLength()",
      "right" : "private int remainingLength()",
      "info" : "MethodDeclaration[704-778]:MethodDeclaration[704-778]"
    }, {
      "left" : "public char peek()",
      "right" : "public char peek()",
      "info" : "MethodDeclaration[784-996]:MethodDeclaration[784-996]"
    }, {
      "left" : "public void addFirst(Character c)",
      "right" : "public void addFirst(Character c)",
      "info" : "MethodDeclaration[1002-1209]:MethodDeclaration[1002-1209]"
    }, {
      "left" : "public void addFirst(String seq)",
      "right" : "public void addFirst(String seq)",
      "info" : "MethodDeclaration[1215-1457]:MethodDeclaration[1215-1457]"
    }, {
      "left" : "public boolean matches(String seq)",
      "right" : "public boolean matches(String seq)",
      "info" : "MethodDeclaration[1463-1772]:MethodDeclaration[1463-1772]"
    }, {
      "left" : "public boolean matchesCS(String seq)",
      "right" : "public boolean matchesCS(String seq)",
      "info" : "MethodDeclaration[1778-2015]:MethodDeclaration[1778-2015]"
    }, {
      "left" : "public boolean matchesAny(String... seq)",
      "right" : "public boolean matchesAny(String... seq)",
      "info" : "MethodDeclaration[2026-2406]:MethodDeclaration[2026-2406]"
    }, {
      "left" : "public boolean matchesAny(char... seq)",
      "right" : "public boolean matchesAny(char... seq)",
      "info" : "MethodDeclaration[2412-2637]:MethodDeclaration[2412-2637]"
    }, {
      "left" : "public boolean matchesStartTag()",
      "right" : "public boolean matchesStartTag()",
      "info" : "MethodDeclaration[2643-2834]:MethodDeclaration[2643-2834]"
    }, {
      "left" : "public boolean matchChomp(String seq)",
      "right" : "public boolean matchChomp(String seq)",
      "info" : "MethodDeclaration[2840-3305]:MethodDeclaration[2840-3305]"
    }, {
      "left" : "public boolean matchesWhitespace()",
      "right" : "public boolean matchesWhitespace()",
      "info" : "MethodDeclaration[3311-3537]:MethodDeclaration[3311-3537]"
    }, {
      "left" : "public boolean matchesWord()",
      "right" : "public boolean matchesWord()",
      "info" : "MethodDeclaration[3543-3778]:MethodDeclaration[3543-3778]"
    }, {
      "left" : "public void advance()",
      "right" : "public void advance()",
      "info" : "MethodDeclaration[3784-3907]:MethodDeclaration[3784-3907]"
    }, {
      "left" : "public char consume()",
      "right" : "public char consume()",
      "info" : "MethodDeclaration[3913-4075]:MethodDeclaration[3913-4075]"
    }, {
      "left" : "public void consume(String seq)",
      "right" : "public void consume(String seq)",
      "info" : "MethodDeclaration[4081-4740]:MethodDeclaration[4081-4740]"
    }, {
      "left" : "public String consumeTo(String seq)",
      "right" : "public String consumeTo(String seq)",
      "info" : "MethodDeclaration[4746-5334]:MethodDeclaration[4746-5334]"
    }, {
      "left" : "public String consumeToIgnoreCase(String seq)",
      "right" : "public String consumeToIgnoreCase(String seq)",
      "info" : "MethodDeclaration[5344-6167]:MethodDeclaration[5344-6167]"
    }, {
      "left" : "// todo: method name. not good that consumeTo cares for case, and consume to any doesn't. And the only use for this\n    // is is a case sensitive time...\n    public String consumeToAny(String... seq)",
      "right" : "// todo: method name. not good that consumeTo cares for case, and consume to any doesn't. And the only use for this\n    // is is a case sensitive time...\n    public String consumeToAny(String... seq)",
      "info" : "MethodDeclaration[6173-6768]:MethodDeclaration[6173-6768]"
    }, {
      "left" : "public String chompTo(String seq)",
      "right" : "public String chompTo(String seq)",
      "info" : "MethodDeclaration[6774-7341]:MethodDeclaration[6774-7341]"
    }, {
      "left" : "public String chompToIgnoreCase(String seq)",
      "right" : "public String chompToIgnoreCase(String seq)",
      "info" : "MethodDeclaration[7351-7521]:MethodDeclaration[7351-7521]"
    }, {
      "left" : "public static String unescape(String in)",
      "right" : "public static String unescape(String in)",
      "info" : "MethodDeclaration[9077-9601]:MethodDeclaration[9222-9746]"
    }, {
      "left" : "public boolean consumeWhitespace()",
      "right" : "public boolean consumeWhitespace()",
      "info" : "MethodDeclaration[9607-9924]:MethodDeclaration[9752-10069]"
    }, {
      "left" : "public String consumeWord()",
      "right" : "public String consumeWord()",
      "info" : "MethodDeclaration[9930-10253]:MethodDeclaration[10075-10398]"
    }, {
      "left" : "public String consumeTagName()",
      "right" : "public String consumeTagName()",
      "info" : "MethodDeclaration[10263-10580]:MethodDeclaration[10408-10725]"
    }, {
      "left" : "public String consumeElementSelector()",
      "right" : "public String consumeElementSelector()",
      "info" : "MethodDeclaration[10590-11015]:MethodDeclaration[10735-11160]"
    }, {
      "left" : "public String consumeCssIdentifier()",
      "right" : "public String consumeCssIdentifier()",
      "info" : "MethodDeclaration[11021-11409]:MethodDeclaration[11166-11554]"
    }, {
      "left" : "public String consumeAttributeKey()",
      "right" : "public String consumeAttributeKey()",
      "info" : "MethodDeclaration[11415-11743]:MethodDeclaration[11560-11888]"
    }, {
      "left" : "public String remainder()",
      "right" : "public String remainder()",
      "info" : "MethodDeclaration[11749-12012]:MethodDeclaration[11894-12157]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[12022-12105]:MethodDeclaration[12167-12250]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[467-528]:Block[467-528]"
    }, {
      "left" : "Validate.notNull(data);",
      "right" : "Validate.notNull(data);",
      "info" : "ExpressionStatement[477-500]:ExpressionStatement[477-500]"
    }, {
      "left" : "queue = data;",
      "right" : "queue = data;",
      "info" : "ExpressionStatement[509-522]:ExpressionStatement[509-522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[648-694]:Block[648-694]"
    }, {
      "left" : "return remainingLength() == 0;",
      "right" : "return remainingLength() == 0;",
      "info" : "ReturnStatement[658-688]:ReturnStatement[658-688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[734-778]:Block[734-778]"
    }, {
      "left" : "return queue.length() - pos;",
      "right" : "return queue.length() - pos;",
      "info" : "ReturnStatement[744-772]:ReturnStatement[744-772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[939-996]:Block[939-996]"
    }, {
      "left" : "return isEmpty() ? 0 : queue.charAt(pos);",
      "right" : "return isEmpty() ? 0 : queue.charAt(pos);",
      "info" : "ReturnStatement[949-990]:ReturnStatement[949-990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1170-1209]:Block[1170-1209]"
    }, {
      "left" : "addFirst(c.toString());",
      "right" : "addFirst(c.toString());",
      "info" : "ExpressionStatement[1180-1203]:ExpressionStatement[1180-1203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1340-1457]:Block[1340-1457]"
    }, {
      "left" : "queue = seq + queue.substring(pos);",
      "right" : "queue = seq + queue.substring(pos);",
      "info" : "ExpressionStatement[1399-1434]:ExpressionStatement[1399-1434]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[1443-1451]:ExpressionStatement[1443-1451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1696-1772]:Block[1696-1772]"
    }, {
      "left" : "return queue.regionMatches(true, pos, seq, 0, seq.length());",
      "right" : "return queue.regionMatches(true, pos, seq, 0, seq.length());",
      "info" : "ReturnStatement[1706-1766]:ReturnStatement[1706-1766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1965-2015]:Block[1965-2015]"
    }, {
      "left" : "return queue.startsWith(seq, pos);",
      "right" : "return queue.startsWith(seq, pos);",
      "info" : "ReturnStatement[1975-2009]:ReturnStatement[1975-2009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2279-2406]:Block[2279-2406]"
    }, {
      "left" : "for (String s : seq)",
      "right" : "for (String s : seq)",
      "info" : "EnhancedForStatement[2289-2378]:EnhancedForStatement[2289-2378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2310-2378]:Block[2310-2378]"
    }, {
      "left" : "if (matches(s))",
      "right" : "if (matches(s))",
      "info" : "IfStatement[2324-2368]:IfStatement[2324-2368]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2356-2368]:ReturnStatement[2356-2368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2387-2400]:ReturnStatement[2387-2400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2451-2637]:Block[2451-2637]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[2461-2501]:IfStatement[2461-2501]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2488-2501]:ReturnStatement[2488-2501]"
    }, {
      "left" : "for (char c: seq)",
      "right" : "for (char c: seq)",
      "info" : "EnhancedForStatement[2511-2609]:EnhancedForStatement[2511-2609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2529-2609]:Block[2529-2609]"
    }, {
      "left" : "if (queue.charAt(pos) == c)",
      "right" : "if (queue.charAt(pos) == c)",
      "info" : "IfStatement[2543-2599]:IfStatement[2543-2599]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2587-2599]:ReturnStatement[2587-2599]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2618-2631]:ReturnStatement[2618-2631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2676-2834]:Block[2676-2834]"
    }, {
      "left" : "return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetter(queue.charAt(pos+1)));",
      "right" : "return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetter(queue.charAt(pos+1)));",
      "info" : "ReturnStatement[2725-2828]:ReturnStatement[2725-2828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3159-3305]:Block[3159-3305]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[3169-3299]:IfStatement[3169-3299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3187-3256]:Block[3187-3256]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[3201-3221]:ExpressionStatement[3201-3221]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3234-3246]:ReturnStatement[3234-3246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3262-3299]:Block[3262-3299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3276-3289]:ReturnStatement[3276-3289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3457-3537]:Block[3457-3537]"
    }, {
      "left" : "return !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));",
      "right" : "return !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));",
      "info" : "ReturnStatement[3467-3531]:ReturnStatement[3467-3531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3696-3778]:Block[3696-3778]"
    }, {
      "left" : "return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));",
      "right" : "return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));",
      "info" : "ReturnStatement[3706-3772]:ReturnStatement[3706-3772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3869-3907]:Block[3869-3907]"
    }, {
      "left" : "if (!isEmpty())",
      "right" : "if (!isEmpty())",
      "info" : "IfStatement[3879-3901]:IfStatement[3879-3901]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3895-3901]:ExpressionStatement[3895-3901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4032-4075]:Block[4032-4075]"
    }, {
      "left" : "return queue.charAt(pos++);",
      "right" : "return queue.charAt(pos++);",
      "info" : "ReturnStatement[4042-4069]:ReturnStatement[4042-4069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4740]:Block[4432-4740]"
    }, {
      "left" : "if (!matches(seq))",
      "right" : "if (!matches(seq))",
      "info" : "IfStatement[4442-4546]:IfStatement[4442-4546]"
    }, {
      "left" : "throw new IllegalStateException(\"Queue did not match expected sequence\");",
      "right" : "throw new IllegalStateException(\"Queue did not match expected sequence\");",
      "info" : "ThrowStatement[4473-4546]:ThrowStatement[4473-4546]"
    }, {
      "left" : "int len = seq.length();",
      "right" : "int len = seq.length();",
      "info" : "VariableDeclarationStatement[4555-4578]:VariableDeclarationStatement[4555-4578]"
    }, {
      "left" : "if (len > remainingLength())",
      "right" : "if (len > remainingLength())",
      "info" : "IfStatement[4587-4705]:IfStatement[4587-4705]"
    }, {
      "left" : "throw new IllegalStateException(\"Queue not long enough to consume sequence\");",
      "right" : "throw new IllegalStateException(\"Queue not long enough to consume sequence\");",
      "info" : "ThrowStatement[4628-4705]:ThrowStatement[4628-4705]"
    }, {
      "left" : "pos += len;",
      "right" : "pos += len;",
      "info" : "ExpressionStatement[4723-4734]:ExpressionStatement[4723-4734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5067-5334]:Block[5067-5334]"
    }, {
      "left" : "int offset = queue.indexOf(seq, pos);",
      "right" : "int offset = queue.indexOf(seq, pos);",
      "info" : "VariableDeclarationStatement[5077-5114]:VariableDeclarationStatement[5077-5114]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[5123-5328]:IfStatement[5123-5328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5141-5279]:Block[5141-5279]"
    }, {
      "left" : "String consumed = queue.substring(pos, offset);",
      "right" : "String consumed = queue.substring(pos, offset);",
      "info" : "VariableDeclarationStatement[5155-5202]:VariableDeclarationStatement[5155-5202]"
    }, {
      "left" : "pos += consumed.length();",
      "right" : "pos += consumed.length();",
      "info" : "ExpressionStatement[5215-5240]:ExpressionStatement[5215-5240]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[5253-5269]:ReturnStatement[5253-5269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5285-5328]:Block[5285-5328]"
    }, {
      "left" : "return remainder();",
      "right" : "return remainder();",
      "info" : "ReturnStatement[5299-5318]:ReturnStatement[5299-5318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5390-6167]:Block[5390-6167]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[5400-5416]:VariableDeclarationStatement[5400-5416]"
    }, {
      "left" : "String first = seq.substring(0, 1);",
      "right" : "String first = seq.substring(0, 1);",
      "info" : "VariableDeclarationStatement[5425-5460]:VariableDeclarationStatement[5425-5460]"
    }, {
      "left" : "boolean canScan = first.toLowerCase().equals(first.toUpperCase());",
      "right" : "boolean canScan = first.toLowerCase().equals(first.toUpperCase());",
      "info" : "VariableDeclarationStatement[5469-5535]:VariableDeclarationStatement[5469-5535]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[5583-6116]:WhileStatement[5583-6116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5602-6116]:Block[5602-6116]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[5616-5656]:IfStatement[5616-5656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5650-5656]:BreakStatement[5650-5656]"
    }, {
      "left" : "if (canScan)",
      "right" : "if (canScan)",
      "info" : "IfStatement[5682-6106]:IfStatement[5682-6106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-6066]:Block[5695-6066]"
    }, {
      "left" : "int skip = queue.indexOf(first, pos) - pos;",
      "right" : "int skip = queue.indexOf(first, pos) - pos;",
      "info" : "VariableDeclarationStatement[5713-5756]:VariableDeclarationStatement[5713-5756]"
    }, {
      "left" : "if (skip == 0)",
      "right" : "if (skip == 0)",
      "info" : "IfStatement[5773-6052]:IfStatement[5773-6052]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[5878-5884]:ExpressionStatement[5878-5884]"
    }, {
      "left" : "if (skip < 0)",
      "right" : "if (skip < 0)",
      "info" : "IfStatement[5906-6052]:IfStatement[5906-6052]"
    }, {
      "left" : "pos = queue.length();",
      "right" : "pos = queue.length();",
      "info" : "ExpressionStatement[5977-5998]:ExpressionStatement[5977-5998]"
    }, {
      "left" : "pos += skip;",
      "right" : "pos += skip;",
      "info" : "ExpressionStatement[6040-6052]:ExpressionStatement[6040-6052]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[6100-6106]:ExpressionStatement[6100-6106]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[6126-6161]:ReturnStatement[6126-6161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6613-6768]:Block[6613-6768]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[6623-6639]:VariableDeclarationStatement[6623-6639]"
    }, {
      "left" : "while (!isEmpty() && !matchesAny(seq))",
      "right" : "while (!isEmpty() && !matchesAny(seq))",
      "info" : "WhileStatement[6648-6717]:WhileStatement[6648-6717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6687-6717]:Block[6687-6717]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[6701-6707]:ExpressionStatement[6701-6707]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[6727-6762]:ReturnStatement[6727-6762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7250-7341]:Block[7250-7341]"
    }, {
      "left" : "String data = consumeTo(seq);",
      "right" : "String data = consumeTo(seq);",
      "info" : "VariableDeclarationStatement[7260-7289]:VariableDeclarationStatement[7260-7289]"
    }, {
      "left" : "matchChomp(seq);",
      "right" : "matchChomp(seq);",
      "info" : "ExpressionStatement[7298-7314]:ExpressionStatement[7298-7314]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[7323-7335]:ReturnStatement[7323-7335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7395-7521]:Block[7395-7521]"
    }, {
      "left" : "String data = consumeToIgnoreCase(seq);",
      "right" : "String data = consumeToIgnoreCase(seq);",
      "info" : "VariableDeclarationStatement[7405-7444]:VariableDeclarationStatement[7405-7444]"
    }, {
      "left" : "matchChomp(seq);",
      "right" : "matchChomp(seq);",
      "info" : "ExpressionStatement[7478-7494]:ExpressionStatement[7478-7494]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[7503-7515]:ReturnStatement[7503-7515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9245-9601]:Block[9390-9746]"
    }, {
      "left" : "StringBuilder out = new StringBuilder();",
      "right" : "StringBuilder out = new StringBuilder();",
      "info" : "VariableDeclarationStatement[9255-9295]:VariableDeclarationStatement[9400-9440]"
    }, {
      "left" : "char last = 0;",
      "right" : "char last = 0;",
      "info" : "VariableDeclarationStatement[9304-9318]:VariableDeclarationStatement[9449-9463]"
    }, {
      "left" : "for (char c : in.toCharArray())",
      "right" : "for (char c : in.toCharArray())",
      "info" : "EnhancedForStatement[9327-9564]:EnhancedForStatement[9472-9709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9359-9564]:Block[9504-9709]"
    }, {
      "left" : "if (c == ESC)",
      "right" : "if (c == ESC)",
      "info" : "IfStatement[9373-9532]:IfStatement[9518-9677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9387-9483]:Block[9532-9628]"
    }, {
      "left" : "if (last != 0 && last == ESC)",
      "right" : "if (last != 0 && last == ESC)",
      "info" : "IfStatement[9405-9469]:IfStatement[9550-9614]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[9455-9469]:ExpressionStatement[9600-9614]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[9518-9532]:ExpressionStatement[9663-9677]"
    }, {
      "left" : "last = c;",
      "right" : "last = c;",
      "info" : "ExpressionStatement[9545-9554]:ExpressionStatement[9690-9699]"
    }, {
      "left" : "return out.toString();",
      "right" : "return out.toString();",
      "info" : "ReturnStatement[9573-9595]:ReturnStatement[9718-9740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9774-9924]:Block[9919-10069]"
    }, {
      "left" : "boolean seen = false;",
      "right" : "boolean seen = false;",
      "info" : "VariableDeclarationStatement[9784-9805]:VariableDeclarationStatement[9929-9950]"
    }, {
      "left" : "while (matchesWhitespace())",
      "right" : "while (matchesWhitespace())",
      "info" : "WhileStatement[9814-9897]:WhileStatement[9959-10042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9842-9897]:Block[9987-10042]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[9856-9862]:ExpressionStatement[10001-10007]"
    }, {
      "left" : "seen = true;",
      "right" : "seen = true;",
      "info" : "ExpressionStatement[9875-9887]:ExpressionStatement[10020-10032]"
    }, {
      "left" : "return seen;",
      "right" : "return seen;",
      "info" : "ReturnStatement[9906-9918]:ReturnStatement[10051-10063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10128-10253]:Block[10273-10398]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[10138-10154]:VariableDeclarationStatement[10283-10299]"
    }, {
      "left" : "while (matchesWord())\n            pos++;",
      "right" : "while (matchesWord())\n            pos++;",
      "info" : "WhileStatement[10163-10203]:WhileStatement[10308-10348]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[10197-10203]:ExpressionStatement[10342-10348]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[10212-10247]:ReturnStatement[10357-10392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10401-10580]:Block[10546-10725]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[10411-10427]:VariableDeclarationStatement[10556-10572]"
    }, {
      "left" : "while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\n            pos++;",
      "right" : "while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\n            pos++;",
      "info" : "WhileStatement[10436-10521]:WhileStatement[10581-10666]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[10515-10521]:ExpressionStatement[10660-10666]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[10539-10574]:ReturnStatement[10684-10719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-11015]:Block[10976-11160]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[10841-10857]:VariableDeclarationStatement[10986-11002]"
    }, {
      "left" : "while (!isEmpty() && (matchesWord() || matchesAny(\"*|\",\"|\", \"_\", \"-\")))\n            pos++;",
      "right" : "while (!isEmpty() && (matchesWord() || matchesAny(\"*|\",\"|\", \"_\", \"-\")))\n            pos++;",
      "info" : "WhileStatement[10866-10956]:WhileStatement[11011-11101]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[10950-10956]:ExpressionStatement[11095-11101]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[10974-11009]:ReturnStatement[11119-11154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11243-11409]:Block[11388-11554]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[11253-11269]:VariableDeclarationStatement[11398-11414]"
    }, {
      "left" : "while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))\n            pos++;",
      "right" : "while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))\n            pos++;",
      "info" : "WhileStatement[11278-11358]:WhileStatement[11423-11503]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[11352-11358]:ExpressionStatement[11497-11503]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[11368-11403]:ReturnStatement[11513-11548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11564-11743]:Block[11709-11888]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[11574-11590]:VariableDeclarationStatement[11719-11735]"
    }, {
      "left" : "while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))\n            pos++;",
      "right" : "while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))\n            pos++;",
      "info" : "WhileStatement[11599-11684]:WhileStatement[11744-11829]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[11678-11684]:ExpressionStatement[11823-11829]"
    }, {
      "left" : "return queue.substring(start, pos);",
      "right" : "return queue.substring(start, pos);",
      "info" : "ReturnStatement[11702-11737]:ReturnStatement[11847-11882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11878-12012]:Block[12023-12157]"
    }, {
      "left" : "final String remainder = queue.substring(pos, queue.length());",
      "right" : "final String remainder = queue.substring(pos, queue.length());",
      "info" : "VariableDeclarationStatement[11888-11950]:VariableDeclarationStatement[12033-12095]"
    }, {
      "left" : "pos = queue.length();",
      "right" : "pos = queue.length();",
      "info" : "ExpressionStatement[11959-11980]:ExpressionStatement[12104-12125]"
    }, {
      "left" : "return remainder;",
      "right" : "return remainder;",
      "info" : "ReturnStatement[11989-12006]:ReturnStatement[12134-12151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12061-12105]:Block[12206-12250]"
    }, {
      "left" : "return queue.substring(pos);",
      "right" : "return queue.substring(pos);",
      "info" : "ReturnStatement[12071-12099]:ReturnStatement[12216-12244]"
    } ]
  },
  "interFileMappings" : { }
}