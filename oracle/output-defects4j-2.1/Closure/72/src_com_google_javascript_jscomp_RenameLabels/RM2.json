{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RenameLabels",
      "right" : "RenameLabels",
      "info" : "TypeDeclaration[1056-8601]:TypeDeclaration[1056-8618]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2508-2548]:FieldDeclaration[2508-2548]"
    }, {
      "left" : "private final Supplier<String> nameSupplier;",
      "right" : "private final Supplier<String> nameSupplier;",
      "info" : "FieldDeclaration[2551-2595]:FieldDeclaration[2551-2595]"
    }, {
      "left" : "private final boolean removeUnused;",
      "right" : "private final boolean removeUnused;",
      "info" : "FieldDeclaration[2598-2633]:FieldDeclaration[2598-2633]"
    }, {
      "left" : "RenameLabels(AbstractCompiler compiler)",
      "right" : "RenameLabels(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[2637-2735]:MethodDeclaration[2637-2735]"
    }, {
      "left" : "RenameLabels(\n      AbstractCompiler compiler,\n      Supplier<String> supplier,\n      boolean removeUnused)",
      "right" : "RenameLabels(\n      AbstractCompiler compiler,\n      Supplier<String> supplier,\n      boolean removeUnused)",
      "info" : "MethodDeclaration[2739-2954]:MethodDeclaration[2739-2954]"
    }, {
      "left" : "DefaultNameSupplier",
      "right" : "DefaultNameSupplier",
      "info" : "TypeDeclaration[2958-3275]:TypeDeclaration[2958-3275]"
    }, {
      "left" : "final NameGenerator nameGenerator =\n        new NameGenerator(new HashSet<String>(), \"\", null);",
      "right" : "final NameGenerator nameGenerator =\n        new NameGenerator(new HashSet<String>(), \"\", null);",
      "info" : "FieldDeclaration[3082-3177]:FieldDeclaration[3082-3177]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[3183-3271]:MethodDeclaration[3183-3271]"
    }, {
      "left" : "ProcessLabels",
      "right" : "ProcessLabels",
      "info" : "TypeDeclaration[3279-8161]:TypeDeclaration[3279-8178]"
    }, {
      "left" : "ProcessLabels()",
      "right" : "ProcessLabels()",
      "info" : "MethodDeclaration[3401-3515]:MethodDeclaration[3401-3515]"
    }, {
      "left" : "final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();",
      "right" : "final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();",
      "info" : "FieldDeclaration[3681-3748]:FieldDeclaration[3681-3748]"
    }, {
      "left" : "final ArrayList<String> names = new ArrayList<String>();",
      "right" : "final ArrayList<String> names = new ArrayList<String>();",
      "info" : "FieldDeclaration[3857-3913]:FieldDeclaration[3857-3913]"
    }, {
      "left" : "public void enterScope(NodeTraversal nodeTraversal)",
      "right" : "public void enterScope(NodeTraversal nodeTraversal)",
      "info" : "MethodDeclaration[3920-4090]:MethodDeclaration[3920-4090]"
    }, {
      "left" : "public void exitScope(NodeTraversal nodeTraversal)",
      "right" : "public void exitScope(NodeTraversal nodeTraversal)",
      "info" : "MethodDeclaration[4096-4196]:MethodDeclaration[4096-4196]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node,\n        Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node,\n        Node parent)",
      "info" : "MethodDeclaration[4202-5265]:MethodDeclaration[4202-5265]"
    }, {
      "left" : "public void visit(NodeTraversal nodeTraversal, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal nodeTraversal, Node node, Node parent)",
      "info" : "MethodDeclaration[5271-5720]:MethodDeclaration[5271-5720]"
    }, {
      "left" : "private void visitBreakOrContinue(Node node)",
      "right" : "private void visitBreakOrContinue(Node node)",
      "info" : "MethodDeclaration[5726-6517]:MethodDeclaration[5726-6517]"
    }, {
      "left" : "private void visitLabel(Node node, Node parent)",
      "right" : "private void visitLabel(Node node, Node parent)",
      "info" : "MethodDeclaration[6523-7632]:MethodDeclaration[6523-7649]"
    }, {
      "left" : "String getNameForId(int id)",
      "right" : "String getNameForId(int id)",
      "info" : "MethodDeclaration[7638-7902]:MethodDeclaration[7655-7919]"
    }, {
      "left" : "LabelInfo getLabelInfo(String name)",
      "right" : "LabelInfo getLabelInfo(String name)",
      "info" : "MethodDeclaration[7908-8157]:MethodDeclaration[7925-8174]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[8165-8331]:MethodDeclaration[8182-8348]"
    }, {
      "left" : "LabelInfo",
      "right" : "LabelInfo",
      "info" : "TypeDeclaration[8336-8473]:TypeDeclaration[8353-8490]"
    }, {
      "left" : "boolean referenced = false;",
      "right" : "boolean referenced = false;",
      "info" : "FieldDeclaration[8373-8400]:FieldDeclaration[8390-8417]"
    }, {
      "left" : "final int id;",
      "right" : "final int id;",
      "info" : "FieldDeclaration[8405-8418]:FieldDeclaration[8422-8435]"
    }, {
      "left" : "LabelInfo(int id)",
      "right" : "LabelInfo(int id)",
      "info" : "MethodDeclaration[8424-8469]:MethodDeclaration[8441-8486]"
    }, {
      "left" : "LabelNamespace",
      "right" : "LabelNamespace",
      "info" : "TypeDeclaration[8478-8598]:TypeDeclaration[8495-8615]"
    }, {
      "left" : "final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>();",
      "right" : "final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>();",
      "info" : "FieldDeclaration[8520-8594]:FieldDeclaration[8537-8611]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2677-2735]:Block[2677-2735]"
    }, {
      "left" : "this(compiler, new DefaultNameSupplier(), true);",
      "right" : "this(compiler, new DefaultNameSupplier(), true);",
      "info" : "ConstructorInvocation[2683-2731]:ConstructorInvocation[2683-2731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2847-2954]:Block[2847-2954]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2853-2878]:ExpressionStatement[2853-2878]"
    }, {
      "left" : "this.nameSupplier = supplier;",
      "right" : "this.nameSupplier = supplier;",
      "info" : "ExpressionStatement[2883-2912]:ExpressionStatement[2883-2912]"
    }, {
      "left" : "this.removeUnused = removeUnused;",
      "right" : "this.removeUnused = removeUnused;",
      "info" : "ExpressionStatement[2917-2950]:ExpressionStatement[2917-2950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3217-3271]:Block[3217-3271]"
    }, {
      "left" : "return nameGenerator.generateNextName();",
      "right" : "return nameGenerator.generateNextName();",
      "info" : "ReturnStatement[3225-3265]:ReturnStatement[3225-3265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3417-3515]:Block[3417-3515]"
    }, {
      "left" : "namespaceStack.push(new LabelNamespace());",
      "right" : "namespaceStack.push(new LabelNamespace());",
      "info" : "ExpressionStatement[3467-3509]:ExpressionStatement[3467-3509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3986-4090]:Block[3986-4090]"
    }, {
      "left" : "namespaceStack.push(new LabelNamespace());",
      "right" : "namespaceStack.push(new LabelNamespace());",
      "info" : "ExpressionStatement[4042-4084]:ExpressionStatement[4042-4084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4161-4196]:Block[4161-4196]"
    }, {
      "left" : "namespaceStack.pop();",
      "right" : "namespaceStack.pop();",
      "info" : "ExpressionStatement[4169-4190]:ExpressionStatement[4169-4190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4469-5265]:Block[4469-5265]"
    }, {
      "left" : "if (node.getType() == Token.LABEL)",
      "right" : "if (node.getType() == Token.LABEL)",
      "info" : "IfStatement[4477-5239]:IfStatement[4477-5239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4512-5239]:Block[4512-5239]"
    }, {
      "left" : "LabelNamespace current = namespaceStack.peek();",
      "right" : "LabelNamespace current = namespaceStack.peek();",
      "info" : "VariableDeclarationStatement[4572-4619]:VariableDeclarationStatement[4572-4619]"
    }, {
      "left" : "int currentDepth = current.renameMap.size() + 1;",
      "right" : "int currentDepth = current.renameMap.size() + 1;",
      "info" : "VariableDeclarationStatement[4628-4676]:VariableDeclarationStatement[4628-4676]"
    }, {
      "left" : "String name = node.getFirstChild().getString();",
      "right" : "String name = node.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4685-4732]:VariableDeclarationStatement[4685-4732]"
    }, {
      "left" : "LabelInfo li = new LabelInfo(currentDepth);",
      "right" : "LabelInfo li = new LabelInfo(currentDepth);",
      "info" : "VariableDeclarationStatement[4792-4835]:VariableDeclarationStatement[4792-4835]"
    }, {
      "left" : "Preconditions.checkState(!current.renameMap.containsKey(name));",
      "right" : "Preconditions.checkState(!current.renameMap.containsKey(name));",
      "info" : "ExpressionStatement[4844-4907]:ExpressionStatement[4844-4907]"
    }, {
      "left" : "current.renameMap.put(name, li);",
      "right" : "current.renameMap.put(name, li);",
      "info" : "ExpressionStatement[4916-4948]:ExpressionStatement[4916-4948]"
    }, {
      "left" : "if (names.size() < currentDepth)",
      "right" : "if (names.size() < currentDepth)",
      "info" : "IfStatement[5015-5100]:IfStatement[5015-5100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5048-5100]:Block[5048-5100]"
    }, {
      "left" : "names.add(nameSupplier.get());",
      "right" : "names.add(nameSupplier.get());",
      "info" : "ExpressionStatement[5060-5090]:ExpressionStatement[5060-5090]"
    }, {
      "left" : "String newName = getNameForId(currentDepth);",
      "right" : "String newName = getNameForId(currentDepth);",
      "info" : "VariableDeclarationStatement[5110-5154]:VariableDeclarationStatement[5110-5154]"
    }, {
      "left" : "compiler.addToDebugLog(\"label renamed: \" + name + \" => \" + newName);",
      "right" : "compiler.addToDebugLog(\"label renamed: \" + name + \" => \" + newName);",
      "info" : "ExpressionStatement[5163-5231]:ExpressionStatement[5163-5231]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5247-5259]:ReturnStatement[5247-5259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5483-5720]:Block[5483-5720]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.LABEL:\n          visitLabel(node, parent);\n          break;\n\n        case Token.BREAK:\n        case Token.CONTINUE:\n          visitBreakOrContinue(node);\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.LABEL:\n          visitLabel(node, parent);\n          break;\n\n        case Token.BREAK:\n        case Token.CONTINUE:\n          visitBreakOrContinue(node);\n          break;\n      }",
      "info" : "SwitchStatement[5491-5714]:SwitchStatement[5491-5714]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[5525-5542]:SwitchCase[5525-5542]"
    }, {
      "left" : "visitLabel(node, parent);",
      "right" : "visitLabel(node, parent);",
      "info" : "ExpressionStatement[5553-5578]:ExpressionStatement[5553-5578]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5589-5595]:BreakStatement[5589-5595]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[5605-5622]:SwitchCase[5605-5622]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[5631-5651]:SwitchCase[5631-5651]"
    }, {
      "left" : "visitBreakOrContinue(node);",
      "right" : "visitBreakOrContinue(node);",
      "info" : "ExpressionStatement[5662-5689]:ExpressionStatement[5662-5689]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5700-5706]:BreakStatement[5700-5706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5890-6517]:Block[5890-6517]"
    }, {
      "left" : "Node nameNode = node.getFirstChild();",
      "right" : "Node nameNode = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[5898-5935]:VariableDeclarationStatement[5898-5935]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[5942-6511]:IfStatement[5942-6511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5964-6511]:Block[5964-6511]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[6020-6055]:VariableDeclarationStatement[6020-6055]"
    }, {
      "left" : "Preconditions.checkState(name.length() != 0);",
      "right" : "Preconditions.checkState(name.length() != 0);",
      "info" : "ExpressionStatement[6064-6109]:ExpressionStatement[6064-6109]"
    }, {
      "left" : "LabelInfo li = getLabelInfo(name);",
      "right" : "LabelInfo li = getLabelInfo(name);",
      "info" : "VariableDeclarationStatement[6118-6152]:VariableDeclarationStatement[6118-6152]"
    }, {
      "left" : "if (li != null)",
      "right" : "if (li != null)",
      "info" : "IfStatement[6161-6503]:IfStatement[6161-6503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6177-6503]:Block[6177-6503]"
    }, {
      "left" : "String newName = getNameForId(li.id);",
      "right" : "String newName = getNameForId(li.id);",
      "info" : "VariableDeclarationStatement[6189-6226]:VariableDeclarationStatement[6189-6226]"
    }, {
      "left" : "li.referenced = true;",
      "right" : "li.referenced = true;",
      "info" : "ExpressionStatement[6300-6321]:ExpressionStatement[6300-6321]"
    }, {
      "left" : "if (!name.equals(newName))",
      "right" : "if (!name.equals(newName))",
      "info" : "IfStatement[6332-6493]:IfStatement[6332-6493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6359-6493]:Block[6359-6493]"
    }, {
      "left" : "nameNode.setString(newName);",
      "right" : "nameNode.setString(newName);",
      "info" : "ExpressionStatement[6412-6440]:ExpressionStatement[6412-6440]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6453-6481]:ExpressionStatement[6453-6481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6706-7632]:Block[6706-7649]"
    }, {
      "left" : "Node nameNode = node.getFirstChild();",
      "right" : "Node nameNode = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[6714-6751]:VariableDeclarationStatement[6714-6751]"
    }, {
      "left" : "Preconditions.checkState(nameNode != null);",
      "right" : "Preconditions.checkState(nameNode != null);",
      "info" : "ExpressionStatement[6758-6801]:ExpressionStatement[6758-6801]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[6808-6843]:VariableDeclarationStatement[6808-6843]"
    }, {
      "left" : "LabelInfo li = getLabelInfo(name);",
      "right" : "LabelInfo li = getLabelInfo(name);",
      "info" : "VariableDeclarationStatement[6850-6884]:VariableDeclarationStatement[6850-6884]"
    }, {
      "left" : "if (li.referenced)",
      "right" : "if (li.referenced || !removeUnused)",
      "info" : "IfStatement[6919-7513]:IfStatement[6919-7530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6938-7175]:Block[6955-7192]"
    }, {
      "left" : "String newName = getNameForId(li.id);",
      "right" : "String newName = getNameForId(li.id);",
      "info" : "VariableDeclarationStatement[6948-6985]:VariableDeclarationStatement[6965-7002]"
    }, {
      "left" : "if (!name.equals(newName))",
      "right" : "if (!name.equals(newName))",
      "info" : "IfStatement[6994-7167]:IfStatement[7011-7184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7021-7167]:Block[7038-7184]"
    }, {
      "left" : "nameNode.setString(newName);",
      "right" : "nameNode.setString(newName);",
      "info" : "ExpressionStatement[7090-7118]:ExpressionStatement[7107-7135]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[7129-7157]:ExpressionStatement[7146-7174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7181-7513]:Block[7198-7530]"
    }, {
      "left" : "Node newChild = node.getLastChild();",
      "right" : "Node newChild = node.getLastChild();",
      "info" : "VariableDeclarationStatement[7248-7284]:VariableDeclarationStatement[7265-7301]"
    }, {
      "left" : "node.removeChild(newChild);",
      "right" : "node.removeChild(newChild);",
      "info" : "ExpressionStatement[7293-7320]:ExpressionStatement[7310-7337]"
    }, {
      "left" : "parent.replaceChild(node, newChild);",
      "right" : "parent.replaceChild(node, newChild);",
      "info" : "ExpressionStatement[7329-7365]:ExpressionStatement[7346-7382]"
    }, {
      "left" : "if (newChild.getType() == Token.BLOCK)",
      "right" : "if (newChild.getType() == Token.BLOCK)",
      "info" : "IfStatement[7374-7468]:IfStatement[7391-7485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7413-7468]:Block[7430-7485]"
    }, {
      "left" : "NodeUtil.tryMergeBlock(newChild);",
      "right" : "NodeUtil.tryMergeBlock(newChild);",
      "info" : "ExpressionStatement[7425-7458]:ExpressionStatement[7442-7475]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[7477-7505]:ExpressionStatement[7494-7522]"
    }, {
      "left" : "namespaceStack.peek().renameMap.remove(name);",
      "right" : "namespaceStack.peek().renameMap.remove(name);",
      "info" : "ExpressionStatement[7581-7626]:ExpressionStatement[7598-7643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7863-7902]:Block[7880-7919]"
    }, {
      "left" : "return names.get(id - 1);",
      "right" : "return names.get(id - 1);",
      "info" : "ReturnStatement[7871-7896]:ReturnStatement[7888-7913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8094-8157]:Block[8111-8174]"
    }, {
      "left" : "return namespaceStack.peek().renameMap.get(name);",
      "right" : "return namespaceStack.peek().renameMap.get(name);",
      "info" : "ReturnStatement[8102-8151]:ReturnStatement[8119-8168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8222-8331]:Block[8239-8348]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new ProcessLabels());",
      "right" : "NodeTraversal.traverse(compiler, root, new ProcessLabels());",
      "info" : "ExpressionStatement[8267-8327]:ExpressionStatement[8284-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8442-8469]:Block[8459-8486]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[8450-8463]:ExpressionStatement[8467-8480]"
    } ]
  },
  "interFileMappings" : { }
}