{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4535-71583]:TypeDeclaration[4535-71684]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[5090-5264]:FieldDeclaration[5090-5264]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5268-5445]:FieldDeclaration[5268-5445]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5449-5636]:FieldDeclaration[5449-5636]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5640-5824]:FieldDeclaration[5640-5824]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5828-6013]:FieldDeclaration[5828-6013]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[6017-6196]:FieldDeclaration[6017-6196]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[6200-6370]:FieldDeclaration[6200-6370]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6374-6564]:FieldDeclaration[6374-6564]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6568-6608]:FieldDeclaration[6568-6608]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6611-6664]:FieldDeclaration[6611-6664]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6667-6705]:FieldDeclaration[6667-6705]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6708-6756]:FieldDeclaration[6708-6756]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[6759-6801]:FieldDeclaration[6759-6801]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[6804-6882]:FieldDeclaration[6804-6882]"
    }, {
      "left" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "right" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[6885-6972]:FieldDeclaration[6885-6972]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "right" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7025-7120]:FieldDeclaration[7025-7120]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[7124-7797]:TypeDeclaration[7124-7797]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[7303-7319]:FieldDeclaration[7303-7319]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[7324-7342]:FieldDeclaration[7324-7342]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[7348-7685]:MethodDeclaration[7348-7685]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[7691-7793]:MethodDeclaration[7691-7793]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7801-7903]:MethodDeclaration[7801-7903]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[7907-8245]:MethodDeclaration[7907-8245]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[8249-10357]:MethodDeclaration[8249-10357]"
    }, {
      "left" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "right" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "info" : "MethodDeclaration[10361-12314]:MethodDeclaration[10361-12314]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[12318-13846]:MethodDeclaration[12318-13846]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[13850-14154]:MethodDeclaration[13850-14154]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[14158-14318]:MethodDeclaration[14158-14318]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[14322-14441]:MethodDeclaration[14322-14441]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[14445-15966]:TypeDeclaration[14445-15966]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[14544-14582]:FieldDeclaration[14544-14582]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[14588-14677]:MethodDeclaration[14588-14677]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[14683-15524]:MethodDeclaration[14683-15524]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "info" : "MethodDeclaration[15530-15962]:MethodDeclaration[15530-15962]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[15970-16080]:MethodDeclaration[15970-16080]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[16084-63794]:TypeDeclaration[16084-63895]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[16175-16247]:FieldDeclaration[16175-16247]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16253-16337]:FieldDeclaration[16253-16337]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[16343-16497]:FieldDeclaration[16343-16497]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16503-16757]:FieldDeclaration[16503-16757]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[16763-16858]:FieldDeclaration[16763-16858]"
    }, {
      "left" : "private InputId inputId;",
      "right" : "private InputId inputId;",
      "info" : "FieldDeclaration[16864-16944]:FieldDeclaration[16864-16944]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[16950-17025]:MethodDeclaration[16950-17025]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[17031-17144]:MethodDeclaration[17031-17144]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[17150-17650]:MethodDeclaration[17150-17650]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[17656-18713]:MethodDeclaration[17656-18713]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18719-20176]:MethodDeclaration[18719-20176]"
    }, {
      "left" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "right" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[20182-21207]:MethodDeclaration[20182-21207]"
    }, {
      "left" : "private void defineObjectLiteral(NodeTraversal t, Node objectLit)",
      "right" : "private void defineObjectLiteral(NodeTraversal t, Node objectLit)",
      "info" : "MethodDeclaration[21213-22907]:MethodDeclaration[21213-22907]"
    }, {
      "left" : "void processObjectLitProperties(\n        NodeTraversal t, Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "right" : "void processObjectLitProperties(\n        NodeTraversal t, Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "info" : "MethodDeclaration[22913-24689]:MethodDeclaration[22913-24689]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[24695-25599]:MethodDeclaration[24695-25599]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[25605-25905]:MethodDeclaration[25605-25905]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[25911-26130]:MethodDeclaration[25911-26130]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[26136-26762]:MethodDeclaration[26136-26762]"
    }, {
      "left" : "void defineFunctionLiteral(Node n, Node parent)",
      "right" : "void defineFunctionLiteral(Node n, Node parent)",
      "info" : "MethodDeclaration[26768-27668]:MethodDeclaration[26768-27668]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[27674-28478]:MethodDeclaration[27674-28478]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[28484-29158]:MethodDeclaration[28484-29158]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[29164-33978]:MethodDeclaration[29164-33978]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[33984-34851]:MethodDeclaration[33984-34851]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[34857-37177]:MethodDeclaration[34857-37177]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[37183-37707]:MethodDeclaration[37183-37707]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[37713-38890]:MethodDeclaration[37713-38890]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[38897-45054]:MethodDeclaration[38897-45054]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[45060-45300]:MethodDeclaration[45060-45300]"
    }, {
      "left" : "private Scope getQnameRootScope(Node n)",
      "right" : "private Scope getQnameRootScope(Node n)",
      "info" : "MethodDeclaration[45306-45653]:MethodDeclaration[45306-45653]"
    }, {
      "left" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "info" : "MethodDeclaration[45659-48136]:MethodDeclaration[45659-48136]"
    }, {
      "left" : "private FunctionType getFunctionType(@Nullable Var v)",
      "right" : "private FunctionType getFunctionType(@Nullable Var v)",
      "info" : "MethodDeclaration[48142-48353]:MethodDeclaration[48142-48353]"
    }, {
      "left" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "right" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "info" : "MethodDeclaration[48359-48674]:MethodDeclaration[48359-48674]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[48680-51594]:MethodDeclaration[48680-51594]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[51600-53511]:MethodDeclaration[51600-53511]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[53517-60109]:MethodDeclaration[53517-60210]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[60115-60663]:MethodDeclaration[60216-60764]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[60669-61982]:MethodDeclaration[60770-62083]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[61988-63765]:TypeDeclaration[62089-63866]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[62209-62243]:FieldDeclaration[62310-62344]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[62251-62333]:MethodDeclaration[62352-62434]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[62341-62824]:MethodDeclaration[62442-62925]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[62832-63759]:MethodDeclaration[62933-63860]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[63798-64187]:TypeDeclaration[63899-64288]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[63913-63937]:FieldDeclaration[64014-64038]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[63942-63973]:FieldDeclaration[64043-64074]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[63978-64009]:FieldDeclaration[64079-64110]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[64015-64183]:MethodDeclaration[64116-64284]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[64191-66402]:TypeDeclaration[64292-66503]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[64377-64444]:MethodDeclaration[64478-64545]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[64450-65024]:MethodDeclaration[64551-65125]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[65030-65272]:MethodDeclaration[65131-65373]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[65278-66398]:MethodDeclaration[65379-66499]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[66432-69604]:TypeDeclaration[66533-69705]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[66607-66740]:MethodDeclaration[66708-66841]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[66746-67229]:MethodDeclaration[66847-67330]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[67235-67769]:MethodDeclaration[67336-67870]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[67775-68640]:MethodDeclaration[67876-68741]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[68646-69576]:MethodDeclaration[68747-69677]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "TypeDeclaration[69633-71290]:TypeDeclaration[69734-71391]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[69901-69941]:FieldDeclaration[70002-70042]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> data;",
      "right" : "private final Map<Node, AstFunctionContents> data;",
      "info" : "FieldDeclaration[69946-69996]:FieldDeclaration[70047-70097]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "right" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "info" : "MethodDeclaration[70002-70173]:MethodDeclaration[70103-70274]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[70179-70446]:MethodDeclaration[70280-70547]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[70452-70633]:MethodDeclaration[70553-70734]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[70639-71286]:MethodDeclaration[70740-71387]"
    }, {
      "left" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "right" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "info" : "MethodDeclaration[71294-71581]:MethodDeclaration[71395-71682]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5032-5037]:Modifier[5032-5037]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5038-5043]:TYPE_DECLARATION_KIND[5038-5043]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5044-5061]:SimpleName[5044-5061]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[5073-5085]:SimpleType[5073-5085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7267-7274]:Modifier[7267-7274]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7275-7280]:TYPE_DECLARATION_KIND[7275-7280]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7281-7296]:SimpleName[7281-7296]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7348-7363]:SimpleName[7348-7363]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[7364-7373]:SingleVariableDeclaration[7364-7373]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7375-7386]:SingleVariableDeclaration[7375-7386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7388-7685]:Block[7388-7685]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[7396-7429]:ExpressionStatement[7396-7429]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[7436-7469]:ExpressionStatement[7436-7469]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7476-7493]:ExpressionStatement[7476-7493]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7500-7517]:ExpressionStatement[7500-7517]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[7658-7679]:ExpressionStatement[7658-7679]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7691-7695]:PrimitiveType[7691-7695]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7696-7703]:SimpleName[7696-7703]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7704-7715]:SingleVariableDeclaration[7704-7715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7793]:Block[7717-7793]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[7725-7787]:ExpressionStatement[7725-7787]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7801-7818]:SimpleName[7801-7818]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7819-7844]:SingleVariableDeclaration[7819-7844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7846-7903]:Block[7846-7903]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[7852-7899]:ConstructorInvocation[7852-7899]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7907-7924]:SimpleName[7907-7924]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7925-7950]:SingleVariableDeclaration[7925-7950]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[7958-7991]:SingleVariableDeclaration[7958-7991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7993-8245]:Block[7993-8245]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7999-8024]:ExpressionStatement[7999-8024]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[8029-8074]:ExpressionStatement[8029-8074]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[8079-8120]:ExpressionStatement[8079-8120]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8125-8172]:ExpressionStatement[8125-8172]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[8177-8241]:ExpressionStatement[8177-8241]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8386-8395]:MarkerAnnotation[8386-8395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8398-8404]:Modifier[8398-8404]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8405-8410]:SimpleType[8405-8410]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[8411-8422]:SimpleName[8411-8422]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8423-8432]:SingleVariableDeclaration[8423-8432]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[8434-8446]:SingleVariableDeclaration[8434-8446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8448-10357]:Block[8448-10357]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[8643-8665]:VariableDeclarationStatement[8643-8665]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[8670-8711]:VariableDeclarationStatement[8670-8711]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8716-9420]:IfStatement[8716-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8736-9215]:Block[8736-9215]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "info" : "ExpressionStatement[8802-8932]:ExpressionStatement[8802-8932]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[8991-9027]:ExpressionStatement[8991-9027]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9035-9108]:VariableDeclarationStatement[9035-9108]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[9115-9149]:ExpressionStatement[9115-9149]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[9156-9209]:ExpressionStatement[9156-9209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9420]:Block[9221-9420]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[9229-9264]:ExpressionStatement[9229-9264]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9271-9341]:VariableDeclarationStatement[9271-9341]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[9348-9381]:ExpressionStatement[9348-9381]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[9388-9414]:ExpressionStatement[9388-9414]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[9426-9465]:ExpressionStatement[9426-9465]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[9470-9498]:ExpressionStatement[9470-9498]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[9666-10138]:EnhancedForStatement[9666-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9724-10138]:Block[9724-10138]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[9732-9771]:VariableDeclarationStatement[9732-9771]"
    }, {
      "left" : "if (type != null && type.isFunctionType())",
      "right" : "if (type != null && type.isFunctionType())",
      "info" : "IfStatement[9778-10132]:IfStatement[9778-10132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9821-10132]:Block[9821-10132]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[9831-9880]:VariableDeclarationStatement[9831-9880]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[9889-9936]:VariableDeclarationStatement[9889-9936]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[9945-10124]:IfStatement[9945-10124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9978-10124]:Block[9978-10124]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[9990-10114]:ExpressionStatement[9990-10114]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[10144-10332]:IfStatement[10144-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10164-10332]:Block[10164-10332]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[10172-10326]:ExpressionStatement[10172-10326]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[10337-10353]:ReturnStatement[10337-10353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10646-10650]:PrimitiveType[10646-10650]"
    }, {
      "left" : "patchGlobalScope",
      "right" : "patchGlobalScope",
      "info" : "SimpleName[10651-10667]:SimpleName[10651-10667]"
    }, {
      "left" : "Scope globalScope",
      "right" : "Scope globalScope",
      "info" : "SingleVariableDeclaration[10668-10685]:SingleVariableDeclaration[10668-10685]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[10687-10702]:SingleVariableDeclaration[10687-10702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-12314]:Block[10704-12314]"
    }, {
      "left" : "Preconditions.checkState(scriptRoot.isScript());",
      "right" : "Preconditions.checkState(scriptRoot.isScript());",
      "info" : "ExpressionStatement[10859-10907]:ExpressionStatement[10859-10907]"
    }, {
      "left" : "Preconditions.checkNotNull(globalScope);",
      "right" : "Preconditions.checkNotNull(globalScope);",
      "info" : "ExpressionStatement[10912-10952]:ExpressionStatement[10912-10952]"
    }, {
      "left" : "Preconditions.checkState(globalScope.isGlobal());",
      "right" : "Preconditions.checkState(globalScope.isGlobal());",
      "info" : "ExpressionStatement[10957-11006]:ExpressionStatement[10957-11006]"
    }, {
      "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "info" : "VariableDeclarationStatement[11012-11067]:VariableDeclarationStatement[11012-11067]"
    }, {
      "left" : "Preconditions.checkNotNull(scriptName);",
      "right" : "Preconditions.checkNotNull(scriptName);",
      "info" : "ExpressionStatement[11072-11111]:ExpressionStatement[11072-11111]"
    }, {
      "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "info" : "EnhancedForStatement[11116-11311]:EnhancedForStatement[11116-11311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11189-11311]:Block[11189-11311]"
    }, {
      "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "info" : "IfStatement[11197-11305]:IfStatement[11197-11305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11250-11305]:Block[11250-11305]"
    }, {
      "left" : "functionAnalysisResults.remove(node);",
      "right" : "functionAnalysisResults.remove(node);",
      "info" : "ExpressionStatement[11260-11297]:ExpressionStatement[11260-11297]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "info" : "ExpressionStatement[11317-11420]:ExpressionStatement[11317-11420]"
    }, {
      "left" : "Iterator<Var> varIter = globalScope.getVars();",
      "right" : "Iterator<Var> varIter = globalScope.getVars();",
      "info" : "VariableDeclarationStatement[11723-11769]:VariableDeclarationStatement[11723-11769]"
    }, {
      "left" : "List<Var> varsToRemove = Lists.newArrayList();",
      "right" : "List<Var> varsToRemove = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11774-11820]:VariableDeclarationStatement[11774-11820]"
    }, {
      "left" : "while (varIter.hasNext())",
      "right" : "while (varIter.hasNext())",
      "info" : "WhileStatement[11825-11989]:WhileStatement[11825-11989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11851-11989]:Block[11851-11989]"
    }, {
      "left" : "Var oldVar = varIter.next();",
      "right" : "Var oldVar = varIter.next();",
      "info" : "VariableDeclarationStatement[11859-11887]:VariableDeclarationStatement[11859-11887]"
    }, {
      "left" : "if (scriptName.equals(oldVar.getInputName()))",
      "right" : "if (scriptName.equals(oldVar.getInputName()))",
      "info" : "IfStatement[11894-11983]:IfStatement[11894-11983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-11983]:Block[11940-11983]"
    }, {
      "left" : "varsToRemove.add(oldVar);",
      "right" : "varsToRemove.add(oldVar);",
      "info" : "ExpressionStatement[11950-11975]:ExpressionStatement[11950-11975]"
    }, {
      "left" : "for (Var var : varsToRemove)",
      "right" : "for (Var var : varsToRemove)",
      "info" : "EnhancedForStatement[11994-12129]:EnhancedForStatement[11994-12129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12023-12129]:Block[12023-12129]"
    }, {
      "left" : "globalScope.undeclare(var);",
      "right" : "globalScope.undeclare(var);",
      "info" : "ExpressionStatement[12031-12058]:ExpressionStatement[12031-12058]"
    }, {
      "left" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "right" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "info" : "ExpressionStatement[12065-12123]:ExpressionStatement[12065-12123]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "info" : "VariableDeclarationStatement[12176-12246]:VariableDeclarationStatement[12176-12246]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "info" : "ExpressionStatement[12251-12310]:ExpressionStatement[12251-12310]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[12446-12464]:MarkerAnnotation[12446-12464]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[12467-12472]:SimpleType[12467-12472]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[12473-12491]:SimpleName[12473-12491]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[12492-12501]:SingleVariableDeclaration[12492-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12503-13846]:Block[12503-13846]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[12510-12602]:ExpressionStatement[12510-12602]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[12608-12644]:VariableDeclarationStatement[12608-12644]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12649-12699]:ExpressionStatement[12649-12699]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12704-12763]:ExpressionStatement[12704-12763]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12768-12817]:ExpressionStatement[12768-12817]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12822-12872]:ExpressionStatement[12822-12872]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12877-12932]:ExpressionStatement[12877-12932]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12937-12990]:ExpressionStatement[12937-12990]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12995-13053]:ExpressionStatement[12995-13053]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13058-13109]:ExpressionStatement[13058-13109]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13114-13170]:ExpressionStatement[13114-13170]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13175-13235]:ExpressionStatement[13175-13235]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13240-13291]:ExpressionStatement[13240-13291]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13296-13354]:ExpressionStatement[13296-13354]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13359-13416]:ExpressionStatement[13359-13416]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13421-13476]:ExpressionStatement[13421-13476]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13481-13535]:ExpressionStatement[13481-13535]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[13540-13590]:ExpressionStatement[13540-13590]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[13768-13827]:ExpressionStatement[13768-13827]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[13833-13842]:ReturnStatement[13833-13842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13850-13857]:Modifier[13850-13857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13858-13862]:PrimitiveType[13858-13862]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[13863-13888]:SimpleName[13863-13888]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13889-13900]:SingleVariableDeclaration[13889-13900]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[13902-13918]:SingleVariableDeclaration[13902-13918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13920-14154]:Block[13920-14154]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[13926-13983]:VariableDeclarationStatement[13926-13983]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[13988-14056]:ExpressionStatement[13988-14056]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[14061-14150]:ExpressionStatement[14061-14150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14158-14165]:Modifier[14158-14165]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14166-14170]:PrimitiveType[14166-14170]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[14171-14193]:SimpleName[14171-14193]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14194-14205]:SingleVariableDeclaration[14194-14205]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14207-14218]:SingleVariableDeclaration[14207-14218]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14226-14242]:SingleVariableDeclaration[14226-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14244-14318]:Block[14244-14318]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[14250-14314]:ExpressionStatement[14250-14314]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14322-14329]:Modifier[14322-14329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14330-14334]:PrimitiveType[14330-14334]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[14335-14352]:SimpleName[14335-14352]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14353-14364]:SingleVariableDeclaration[14353-14364]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14366-14377]:SingleVariableDeclaration[14366-14377]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[14379-14387]:SingleVariableDeclaration[14379-14387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14389-14441]:Block[14389-14441]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[14395-14437]:ExpressionStatement[14395-14437]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14445-14452]:Modifier[14445-14452]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14453-14459]:Modifier[14453-14459]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14460-14465]:TYPE_DECLARATION_KIND[14460-14465]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14466-14490]:SimpleName[14466-14490]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[14505-14537]:SimpleType[14505-14537]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14588-14612]:SimpleName[14588-14612]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[14613-14636]:SingleVariableDeclaration[14613-14636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14638-14677]:Block[14638-14677]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[14646-14671]:ExpressionStatement[14646-14671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14683-14692]:MarkerAnnotation[14683-14692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14697-14703]:Modifier[14697-14703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14704-14708]:PrimitiveType[14704-14708]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14709-14714]:SimpleName[14709-14714]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14715-14730]:SingleVariableDeclaration[14715-14730]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14732-14741]:SingleVariableDeclaration[14732-14741]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14743-14754]:SingleVariableDeclaration[14743-14754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14756-15524]:Block[14756-15524]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[14764-14785]:VariableDeclarationStatement[14764-14785]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[14792-15518]:SwitchStatement[14792-15518]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14826-14841]:SwitchCase[14826-14841]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[14852-15087]:ForStatement[14852-15087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14947-15087]:Block[14947-15087]"
    }, {
      "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "info" : "ExpressionStatement[14961-15075]:ExpressionStatement[14961-15075]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15098-15104]:BreakStatement[15098-15104]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15113-15136]:SwitchCase[15113-15136]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[15147-15186]:VariableDeclarationStatement[15147-15186]"
    }, {
      "left" : "if (firstChild.isAssign())",
      "right" : "if (firstChild.isAssign())",
      "info" : "IfStatement[15197-15493]:IfStatement[15197-15493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15224-15382]:Block[15224-15382]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15238-15370]:ExpressionStatement[15238-15370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15388-15493]:Block[15388-15493]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15402-15481]:ExpressionStatement[15402-15481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15504-15510]:BreakStatement[15504-15510]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15530-15537]:Modifier[15530-15537]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15538-15542]:PrimitiveType[15538-15542]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[15543-15559]:SimpleName[15543-15559]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[15569-15582]:SingleVariableDeclaration[15569-15582]"
    }, {
      "left" : "Node valueNode",
      "right" : "Node valueNode",
      "info" : "SingleVariableDeclaration[15584-15598]:SingleVariableDeclaration[15584-15598]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[15600-15614]:SingleVariableDeclaration[15600-15614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15616-15962]:Block[15616-15962]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[15624-15956]:IfStatement[15624-15956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15656-15956]:Block[15656-15956]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15666-15948]:IfStatement[15666-15948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15684-15948]:Block[15684-15948]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[15696-15938]:IfStatement[15696-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15729-15817]:Block[15729-15817]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15743-15805]:ExpressionStatement[15743-15805]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[15823-15938]:IfStatement[15823-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-15938]:Block[15850-15938]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15864-15926]:ExpressionStatement[15864-15926]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15970-15977]:Modifier[15970-15977]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[15978-15984]:SimpleType[15978-15984]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[15985-15998]:SimpleName[15985-15998]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[15999-16022]:SingleVariableDeclaration[15999-16022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16024-16080]:Block[16024-16080]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[16030-16076]:ReturnStatement[16030-16076]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16084-16091]:Modifier[16084-16091]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[16092-16100]:Modifier[16092-16100]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16101-16106]:TYPE_DECLARATION_KIND[16101-16106]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[16107-16127]:SimpleName[16107-16127]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[16145-16167]:SimpleType[16145-16167]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16950-16957]:Modifier[16950-16957]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[16958-16978]:SimpleName[16958-16978]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[16979-16990]:SingleVariableDeclaration[16979-16990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16992-17025]:Block[16992-17025]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[17000-17019]:ExpressionStatement[17000-17019]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17031-17035]:PrimitiveType[17031-17035]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[17036-17051]:SimpleName[17036-17051]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17052-17061]:SingleVariableDeclaration[17052-17061]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17063-17074]:SingleVariableDeclaration[17063-17074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17076-17144]:Block[17076-17144]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[17084-17138]:ExpressionStatement[17084-17138]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17150-17154]:PrimitiveType[17150-17154]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[17155-17167]:SimpleName[17155-17167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17170-17650]:Block[17170-17650]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[17227-17319]:EnhancedForStatement[17227-17319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17277-17319]:Block[17277-17319]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[17287-17311]:ExpressionStatement[17287-17311]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[17382-17419]:VariableDeclarationStatement[17382-17419]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[17426-17517]:WhileStatement[17426-17517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17449-17517]:Block[17449-17517]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[17459-17509]:ExpressionStatement[17459-17509]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[17604-17644]:ExpressionStatement[17604-17644]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17656-17665]:MarkerAnnotation[17656-17665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17670-17676]:Modifier[17670-17676]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17677-17682]:Modifier[17677-17682]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17683-17690]:PrimitiveType[17683-17690]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[17691-17705]:SimpleName[17691-17705]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17706-17721]:SingleVariableDeclaration[17706-17721]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17723-17729]:SingleVariableDeclaration[17723-17729]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17739-17750]:SingleVariableDeclaration[17739-17750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17752-18713]:Block[17752-18713]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[17760-17785]:ExpressionStatement[17760-17785]"
    }, {
      "left" : "if (n.isFunction() ||\n          n.isScript())",
      "right" : "if (n.isFunction() ||\n          n.isScript())",
      "info" : "IfStatement[17792-17940]:IfStatement[17792-17940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17838-17940]:Block[17838-17940]"
    }, {
      "left" : "Preconditions.checkNotNull(inputId);",
      "right" : "Preconditions.checkNotNull(inputId);",
      "info" : "ExpressionStatement[17848-17884]:ExpressionStatement[17848-17884]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[17893-17932]:ExpressionStatement[17893-17932]"
    }, {
      "left" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[18072-18217]:VariableDeclarationStatement[18072-18217]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[18225-18684]:IfStatement[18225-18684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18238-18684]:Block[18238-18684]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[18374-18676]:IfStatement[18374-18676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18409-18676]:Block[18409-18676]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[18421-18666]:ForStatement[18421-18666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18528-18666]:Block[18528-18666]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[18542-18654]:IfStatement[18542-18654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18592-18654]:Block[18592-18654]"
    }, {
      "left" : "defineFunctionLiteral(child, n);",
      "right" : "defineFunctionLiteral(child, n);",
      "info" : "ExpressionStatement[18608-18640]:ExpressionStatement[18608-18640]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[18692-18707]:ReturnStatement[18692-18707]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18719-18728]:MarkerAnnotation[18719-18728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18733-18739]:Modifier[18733-18739]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18740-18744]:PrimitiveType[18740-18744]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[18745-18750]:SimpleName[18745-18750]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18751-18766]:SingleVariableDeclaration[18751-18766]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18768-18774]:SingleVariableDeclaration[18768-18774]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18776-18787]:SingleVariableDeclaration[18776-18787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18789-20176]:Block[18789-20176]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[18797-18822]:ExpressionStatement[18797-18822]"
    }, {
      "left" : "attachLiteralTypes(t, n);",
      "right" : "attachLiteralTypes(t, n);",
      "info" : "ExpressionStatement[18829-18854]:ExpressionStatement[18829-18854]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[18862-20170]:SwitchStatement[18862-20170]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[18893-18909]:SwitchCase[18893-18909]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[18920-18961]:ExpressionStatement[18920-18961]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "info" : "ExpressionStatement[18972-19042]:ExpressionStatement[18972-19042]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19053-19059]:BreakStatement[19053-19059]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19069-19089]:SwitchCase[19069-19089]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[19100-19206]:IfStatement[19100-19206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19154-19206]:Block[19154-19206]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[19168-19194]:ExpressionStatement[19168-19194]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[19283-19389]:IfStatement[19283-19389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19330-19389]:Block[19330-19389]"
    }, {
      "left" : "defineFunctionLiteral(n, parent);",
      "right" : "defineFunctionLiteral(n, parent);",
      "info" : "ExpressionStatement[19344-19377]:ExpressionStatement[19344-19377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19400-19406]:BreakStatement[19400-19406]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[19416-19434]:SwitchCase[19416-19434]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19495-19531]:VariableDeclarationStatement[19495-19531]"
    }, {
      "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[19542-19742]:IfStatement[19542-19742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19616-19742]:Block[19616-19742]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[19630-19730]:ExpressionStatement[19630-19730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19753-19759]:BreakStatement[19753-19759]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[19769-19786]:SwitchCase[19769-19786]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[19797-19820]:ExpressionStatement[19797-19820]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19831-19837]:BreakStatement[19831-19837]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[19847-19862]:SwitchCase[19847-19862]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[19873-19894]:ExpressionStatement[19873-19894]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19905-19911]:BreakStatement[19905-19911]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19921-19940]:SwitchCase[19921-19940]"
    }, {
      "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "info" : "IfStatement[19991-20145]:IfStatement[19991-20145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20055-20145]:Block[20055-20145]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[20069-20133]:ExpressionStatement[20069-20133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20156-20162]:BreakStatement[20156-20162]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20182-20189]:Modifier[20182-20189]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20190-20194]:PrimitiveType[20190-20194]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[20195-20213]:SimpleName[20195-20213]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20214-20229]:SingleVariableDeclaration[20214-20229]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20231-20237]:SingleVariableDeclaration[20231-20237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20239-21207]:Block[20239-21207]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[20247-21201]:SwitchStatement[20247-21201]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[20278-20294]:SwitchCase[20278-20294]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[20305-20343]:ExpressionStatement[20305-20343]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20354-20360]:BreakStatement[20354-20360]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[20370-20386]:SwitchCase[20370-20386]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[20397-20435]:ExpressionStatement[20397-20435]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20446-20452]:BreakStatement[20446-20452]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[20462-20480]:SwitchCase[20462-20480]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "info" : "IfStatement[20543-20657]:IfStatement[20543-20657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20591-20657]:Block[20591-20657]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[20605-20645]:ExpressionStatement[20605-20645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20668-20674]:BreakStatement[20668-20674]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[20684-20702]:SwitchCase[20684-20702]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[20713-20753]:ExpressionStatement[20713-20753]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20764-20770]:BreakStatement[20764-20770]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[20780-20796]:SwitchCase[20780-20796]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[20805-20822]:SwitchCase[20805-20822]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[20833-20874]:ExpressionStatement[20833-20874]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20885-20891]:BreakStatement[20885-20891]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[20901-20919]:SwitchCase[20901-20919]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[20930-20970]:ExpressionStatement[20930-20970]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20981-20987]:BreakStatement[20981-20987]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[20997-21018]:SwitchCase[20997-21018]"
    }, {
      "left" : "defineObjectLiteral(t, n);",
      "right" : "defineObjectLiteral(t, n);",
      "info" : "ExpressionStatement[21029-21055]:ExpressionStatement[21029-21055]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21066-21072]:BreakStatement[21066-21072]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21213-21220]:Modifier[21213-21220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21221-21225]:PrimitiveType[21221-21225]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[21226-21245]:SimpleName[21226-21245]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[21246-21261]:SingleVariableDeclaration[21246-21261]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[21263-21277]:SingleVariableDeclaration[21263-21277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21279-22907]:Block[21279-22907]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[21326-21345]:VariableDeclarationStatement[21326-21345]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21352-21394]:VariableDeclarationStatement[21352-21394]"
    }, {
      "left" : "if (info != null &&\n          info.getLendsName() != null)",
      "right" : "if (info != null &&\n          info.getLendsName() != null)",
      "info" : "IfStatement[21401-22190]:IfStatement[21401-22190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21460-22190]:Block[21460-22190]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[21470-21509]:VariableDeclarationStatement[21470-21509]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[21518-21557]:VariableDeclarationStatement[21518-21557]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[21566-22182]:IfStatement[21566-22182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21588-21704]:Block[21588-21704]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[21600-21694]:ExpressionStatement[21600-21694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21710-22182]:Block[21710-22182]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[21722-21748]:ExpressionStatement[21722-21748]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[21759-21851]:IfStatement[21759-21851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21777-21851]:Block[21777-21851]"
    }, {
      "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[21791-21839]:ExpressionStatement[21791-21839]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[21862-22172]:IfStatement[21862-22172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21924-22114]:Block[21924-22114]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[21938-22077]:ExpressionStatement[21938-22077]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[22090-22102]:ExpressionStatement[22090-22102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22120-22172]:Block[22120-22172]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[22134-22160]:ExpressionStatement[22134-22160]"
    }, {
      "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[22198-22242]:ExpressionStatement[22198-22242]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[22249-22297]:VariableDeclarationStatement[22249-22297]"
    }, {
      "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[22304-22359]:VariableDeclarationStatement[22304-22359]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[22366-22398]:VariableDeclarationStatement[22366-22398]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[22405-22572]:IfStatement[22405-22572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22454-22572]:Block[22454-22572]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[22464-22532]:ExpressionStatement[22464-22532]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[22541-22564]:ExpressionStatement[22541-22564]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22580-22664]:IfStatement[22580-22664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22598-22664]:Block[22598-22664]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType();",
      "right" : "type = typeRegistry.createAnonymousObjectType();",
      "info" : "ExpressionStatement[22608-22656]:ExpressionStatement[22608-22656]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[22672-22705]:ExpressionStatement[22672-22705]"
    }, {
      "left" : "processObjectLitProperties(\n          t, objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "right" : "processObjectLitProperties(\n          t, objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "info" : "ExpressionStatement[22791-22901]:ExpressionStatement[22791-22901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23299-23303]:PrimitiveType[23299-23303]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[23304-23330]:SimpleName[23304-23330]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[23340-23355]:SingleVariableDeclaration[23340-23355]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[23357-23368]:SingleVariableDeclaration[23357-23368]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[23370-23391]:SingleVariableDeclaration[23370-23391]"
    }, {
      "left" : "boolean declareOnOwner",
      "right" : "boolean declareOnOwner",
      "info" : "SingleVariableDeclaration[23401-23423]:SingleVariableDeclaration[23401-23423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23425-24689]:Block[23425-24689]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[23433-24683]:ForStatement[23433-24683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23534-24683]:Block[23534-24683]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[23544-23581]:VariableDeclarationStatement[23544-23581]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[23590-23648]:VariableDeclarationStatement[23590-23648]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[23657-23697]:VariableDeclarationStatement[23657-23697]"
    }, {
      "left" : "JSType valueType =\n            getDeclaredType(t.getSourceName(), info, keyNode, value);",
      "right" : "JSType valueType =\n            getDeclaredType(t.getSourceName(), info, keyNode, value);",
      "info" : "VariableDeclarationStatement[23706-23794]:VariableDeclarationStatement[23706-23794]"
    }, {
      "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "info" : "VariableDeclarationStatement[23803-23982]:VariableDeclarationStatement[23803-23982]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[23991-24675]:IfStatement[23991-24675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24012-24675]:Block[24012-24675]"
    }, {
      "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[24133-24192]:VariableDeclarationStatement[24133-24192]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[24203-24381]:IfStatement[24203-24381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24230-24315]:Block[24230-24315]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
      "info" : "ExpressionStatement[24244-24303]:ExpressionStatement[24244-24303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24321-24381]:Block[24321-24381]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[24335-24369]:ExpressionStatement[24335-24369]"
    }, {
      "left" : "if (objLitType != null && declareOnOwner)",
      "right" : "if (objLitType != null && declareOnOwner)",
      "info" : "IfStatement[24393-24665]:IfStatement[24393-24665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24435-24665]:Block[24435-24665]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[24509-24576]:VariableDeclarationStatement[24509-24576]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "info" : "ExpressionStatement[24589-24653]:ExpressionStatement[24589-24653]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24925-24932]:Modifier[24925-24932]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[24933-24939]:SimpleType[24933-24939]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[24940-24967]:SimpleName[24940-24967]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[24968-24985]:SingleVariableDeclaration[24968-24985]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[24995-25004]:SingleVariableDeclaration[24995-25004]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[25006-25020]:SingleVariableDeclaration[25006-25020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25022-25599]:Block[25022-25599]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[25030-25051]:VariableDeclarationStatement[25030-25051]"
    }, {
      "left" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "right" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "info" : "VariableDeclarationStatement[25058-25219]:VariableDeclarationStatement[25058-25219]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[25226-25572]:IfStatement[25226-25572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25244-25572]:Block[25244-25572]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[25254-25564]:IfStatement[25254-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25274-25350]:Block[25274-25350]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[25286-25340]:ExpressionStatement[25286-25340]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[25356-25564]:IfStatement[25356-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25413-25564]:Block[25413-25564]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[25425-25465]:VariableDeclarationStatement[25425-25465]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[25476-25554]:ExpressionStatement[25476-25554]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[25579-25593]:ReturnStatement[25579-25593]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25749-25753]:PrimitiveType[25749-25753]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[25754-25774]:SimpleName[25754-25774]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25775-25781]:SingleVariableDeclaration[25775-25781]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[25783-25791]:SingleVariableDeclaration[25783-25791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25793-25905]:Block[25793-25905]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[25801-25846]:ExpressionStatement[25801-25846]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[25853-25899]:ExpressionStatement[25853-25899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25961-25965]:PrimitiveType[25961-25965]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[25966-25977]:SimpleName[25966-25977]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25978-25984]:SingleVariableDeclaration[25978-25984]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[25986-25997]:SingleVariableDeclaration[25986-25997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25999-26130]:Block[25999-26130]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[26007-26044]:ExpressionStatement[26007-26044]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26051-26086]:VariableDeclarationStatement[26051-26086]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[26093-26124]:ExpressionStatement[26093-26124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26189-26193]:PrimitiveType[26189-26193]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[26194-26203]:SimpleName[26194-26203]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26204-26210]:SingleVariableDeclaration[26204-26210]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26212-26223]:SingleVariableDeclaration[26212-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26225-26762]:Block[26225-26762]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[26233-26268]:ExpressionStatement[26233-26268]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[26275-26309]:VariableDeclarationStatement[26275-26309]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[26316-26756]:IfStatement[26316-26756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26345-26608]:Block[26345-26608]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[26355-26489]:IfStatement[26355-26489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26373-26489]:Block[26373-26489]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[26416-26479]:ExpressionStatement[26416-26479]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[26498-26600]:EnhancedForStatement[26498-26600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26529-26600]:Block[26529-26600]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[26541-26590]:ExpressionStatement[26541-26590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26614-26756]:Block[26614-26756]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26624-26654]:VariableDeclarationStatement[26624-26654]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[26663-26748]:ExpressionStatement[26663-26748]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26819-26823]:PrimitiveType[26819-26823]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[26824-26845]:SimpleName[26824-26845]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26846-26852]:SingleVariableDeclaration[26846-26852]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26854-26865]:SingleVariableDeclaration[26854-26865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26867-27668]:Block[26867-27668]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[26875-26915]:ExpressionStatement[26875-26915]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(n);",
      "right" : "Node lValue = NodeUtil.getBestLValue(n);",
      "info" : "VariableDeclarationStatement[27029-27069]:VariableDeclarationStatement[27029-27069]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[27076-27122]:VariableDeclarationStatement[27076-27122]"
    }, {
      "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[27129-27186]:VariableDeclarationStatement[27129-27186]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[27193-27290]:VariableDeclarationStatement[27193-27290]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[27356-27389]:ExpressionStatement[27356-27389]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[27558-27662]:IfStatement[27558-27662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27597-27662]:Block[27597-27662]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[27607-27654]:ExpressionStatement[27607-27654]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28058-28065]:Modifier[28058-28065]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28066-28070]:PrimitiveType[28066-28070]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[28071-28081]:SimpleName[28071-28081]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[28082-28091]:SingleVariableDeclaration[28082-28091]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[28093-28101]:SingleVariableDeclaration[28093-28101]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[28103-28114]:SingleVariableDeclaration[28103-28114]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[28116-28130]:SingleVariableDeclaration[28116-28130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28132-28478]:Block[28132-28478]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[28140-28174]:VariableDeclarationStatement[28140-28174]"
    }, {
      "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "info" : "VariableDeclarationStatement[28207-28268]:VariableDeclarationStatement[28207-28268]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[28275-28437]:IfStatement[28275-28437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28293-28437]:Block[28293-28437]"
    }, {
      "left" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[28352-28429]:ExpressionStatement[28352-28429]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[28444-28472]:ExpressionStatement[28444-28472]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28808-28815]:Modifier[28808-28815]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28816-28823]:PrimitiveType[28816-28823]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[28824-28852]:SimpleName[28824-28852]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[28862-28879]:SingleVariableDeclaration[28862-28879]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[28881-28895]:SingleVariableDeclaration[28881-28895]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[28897-28908]:SingleVariableDeclaration[28897-28908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28910-29158]:Block[28910-29158]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[28918-28966]:IfStatement[28918-28966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28936-28966]:Block[28936-28966]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28946-28958]:ReturnStatement[28946-28958]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[28973-29089]:IfStatement[28973-29089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29089]:Block[29058-29089]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29068-29081]:ReturnStatement[29068-29081]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[29096-29152]:ReturnStatement[29096-29152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30185-30192]:Modifier[30185-30192]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[30193-30205]:SimpleType[30193-30205]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[30206-30233]:SimpleName[30206-30233]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[30243-30264]:SingleVariableDeclaration[30243-30264]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[30274-30295]:SingleVariableDeclaration[30274-30295]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[30305-30329]:SingleVariableDeclaration[30305-30329]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[30339-30364]:SingleVariableDeclaration[30339-30364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30366-33978]:Block[30366-33978]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[30375-30408]:VariableDeclarationStatement[30375-30408]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[30490-31133]:IfStatement[30490-31133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30558-31133]:Block[30558-31133]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[30568-30618]:VariableDeclarationStatement[30568-30618]"
    }, {
      "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "info" : "IfStatement[30627-31125]:IfStatement[30627-31125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30715-31125]:Block[30715-31125]"
    }, {
      "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[30727-30791]:VariableDeclarationStatement[30727-30791]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[30802-31115]:IfStatement[30802-31115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30917-31115]:Block[30917-31115]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[30931-30958]:ExpressionStatement[30931-30958]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[30972-31103]:IfStatement[30972-31103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31010-31103]:Block[31010-31103]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[31026-31089]:ExpressionStatement[31026-31089]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[31141-33926]:IfStatement[31141-33926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31167-33926]:Block[31167-33926]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[31177-31231]:VariableDeclarationStatement[31177-31231]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "info" : "VariableDeclarationStatement[31240-31312]:VariableDeclarationStatement[31240-31312]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[31321-31363]:VariableDeclarationStatement[31321-31363]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[31372-31460]:VariableDeclarationStatement[31372-31460]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[31469-31530]:VariableDeclarationStatement[31469-31530]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[31540-31937]:IfStatement[31540-31937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31576-31937]:Block[31576-31937]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[31588-31647]:VariableDeclarationStatement[31588-31647]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[31733-31776]:ExpressionStatement[31733-31776]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[31787-31927]:IfStatement[31787-31927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31814-31927]:Block[31814-31927]"
    }, {
      "left" : "functionType = type.toMaybeFunctionType();",
      "right" : "functionType = type.toMaybeFunctionType();",
      "info" : "ExpressionStatement[31828-31870]:ExpressionStatement[31828-31870]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[31883-31915]:ExpressionStatement[31883-31915]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[31947-33918]:IfStatement[31947-33918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31973-33918]:Block[31973-33918]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "info" : "VariableDeclarationStatement[32040-32097]:VariableDeclarationStatement[32040-32097]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[32108-32165]:VariableDeclarationStatement[32108-32165]"
    }, {
      "left" : "Var ownerVar = null;",
      "right" : "Var ownerVar = null;",
      "info" : "VariableDeclarationStatement[32176-32196]:VariableDeclarationStatement[32176-32196]"
    }, {
      "left" : "String propName = null;",
      "right" : "String propName = null;",
      "info" : "VariableDeclarationStatement[32207-32230]:VariableDeclarationStatement[32207-32230]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[32241-32269]:VariableDeclarationStatement[32241-32269]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[32280-32588]:IfStatement[32280-32588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32303-32588]:Block[32303-32588]"
    }, {
      "left" : "ownerVar = scope.getVar(ownerName);",
      "right" : "ownerVar = scope.getVar(ownerName);",
      "info" : "ExpressionStatement[32317-32352]:ExpressionStatement[32317-32352]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[32365-32465]:IfStatement[32365-32465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32387-32465]:Block[32387-32465]"
    }, {
      "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "info" : "ExpressionStatement[32403-32451]:ExpressionStatement[32403-32451]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[32478-32576]:IfStatement[32478-32576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32496-32576]:Block[32496-32576]"
    }, {
      "left" : "propName = name.substring(ownerName.length() + 1);",
      "right" : "propName = name.substring(ownerName.length() + 1);",
      "info" : "ExpressionStatement[32512-32562]:ExpressionStatement[32512-32562]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[32600-32639]:VariableDeclarationStatement[32600-32639]"
    }, {
      "left" : "if (ownerType != null && propName != null)",
      "right" : "if (ownerType != null && propName != null)",
      "info" : "IfStatement[32650-32800]:IfStatement[32650-32800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32693-32800]:Block[32693-32800]"
    }, {
      "left" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[32707-32788]:ExpressionStatement[32707-32788]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[32812-33204]:VariableDeclarationStatement[32812-33204]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[33254-33290]:VariableDeclarationStatement[33254-33290]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "info" : "IfStatement[33301-33690]:IfStatement[33301-33690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33363-33522]:Block[33363-33522]"
    }, {
      "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "info" : "ExpressionStatement[33377-33470]:ExpressionStatement[33377-33470]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[33483-33510]:ExpressionStatement[33483-33510]"
    }, {
      "left" : "if (ownerNode != null && ownerNode.isThis())",
      "right" : "if (ownerNode != null && ownerNode.isThis())",
      "info" : "IfStatement[33528-33690]:IfStatement[33528-33690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33573-33690]:Block[33573-33690]"
    }, {
      "left" : "builder.inferThisType(info, ownerNode.getJSType());",
      "right" : "builder.inferThisType(info, ownerNode.getJSType());",
      "info" : "ExpressionStatement[33587-33638]:ExpressionStatement[33587-33638]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[33651-33678]:ExpressionStatement[33651-33678]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[33702-33782]:IfStatement[33702-33782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33728-33782]:Block[33728-33782]"
    }, {
      "left" : "builder.inferThisType(info);",
      "right" : "builder.inferThisType(info);",
      "info" : "ExpressionStatement[33742-33770]:ExpressionStatement[33742-33770]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[33794-33908]:ExpressionStatement[33794-33908]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[33952-33972]:ReturnStatement[33952-33972]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34071-34078]:Modifier[34071-34078]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[34079-34091]:SimpleType[34079-34091]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[34092-34114]:SimpleName[34092-34114]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[34124-34144]:SingleVariableDeclaration[34124-34144]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[34146-34161]:SingleVariableDeclaration[34146-34161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34163-34851]:Block[34163-34851]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[34257-34311]:VariableDeclarationStatement[34257-34311]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[34318-34825]:IfStatement[34318-34825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34369-34425]:Block[34369-34425]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[34379-34417]:ReturnStatement[34379-34417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34431-34825]:Block[34431-34825]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[34543-34817]:EnhancedForStatement[34543-34817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34626-34817]:Block[34626-34817]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[34638-34681]:ExpressionStatement[34638-34681]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[34692-34807]:IfStatement[34692-34807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34743-34807]:Block[34743-34807]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[34757-34795]:ReturnStatement[34757-34795]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34833-34845]:ReturnStatement[34833-34845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35541-35548]:Modifier[35541-35548]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[35549-35557]:SimpleType[35549-35557]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[35558-35581]:SimpleName[35558-35581]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[35582-35593]:SingleVariableDeclaration[35582-35593]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[35595-35606]:SingleVariableDeclaration[35595-35606]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[35616-35630]:SingleVariableDeclaration[35616-35630]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[35632-35647]:SingleVariableDeclaration[35632-35647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35649-37177]:Block[35649-37177]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[35657-35690]:ExpressionStatement[35657-35690]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[35697-35751]:ExpressionStatement[35697-35751]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[35759-35784]:VariableDeclarationStatement[35759-35784]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[35791-36063]:IfStatement[35791-36063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35839-36063]:Block[35839-36063]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[35884-35934]:VariableDeclarationStatement[35884-35934]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[35943-36055]:IfStatement[35943-36055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35997-36055]:Block[35997-36055]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[36009-36045]:ExpressionStatement[36009-36045]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[36071-37024]:IfStatement[36071-37024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36093-37024]:Block[36093-37024]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[36103-36195]:VariableDeclarationStatement[36103-36195]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "info" : "ExpressionStatement[36204-36271]:ExpressionStatement[36204-36271]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[36281-37016]:IfStatement[36281-37016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36325-37016]:Block[36325-37016]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[36372-36406]:VariableDeclarationStatement[36372-36406]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[36417-37006]:WhileStatement[36417-37006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36437-37006]:Block[36437-37006]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[36451-36497]:VariableDeclarationStatement[36451-36497]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[36510-36961]:IfStatement[36510-36961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36531-36711]:Block[36531-36711]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[36603-36697]:ExpressionStatement[36603-36697]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[36717-36961]:IfStatement[36717-36961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36764-36888]:Block[36764-36888]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[36780-36874]:ExpressionStatement[36780-36874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36894-36961]:Block[36894-36961]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[36910-36947]:ExpressionStatement[36910-36947]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[36974-36994]:ExpressionStatement[36974-36994]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[37032-37147]:IfStatement[37032-37147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37070-37147]:Block[37070-37147]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[37080-37139]:ExpressionStatement[37080-37139]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[37155-37171]:ReturnStatement[37155-37171]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37587-37594]:Modifier[37587-37594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37595-37599]:PrimitiveType[37595-37599]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[37600-37610]:SimpleName[37600-37610]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[37611-37620]:SingleVariableDeclaration[37611-37620]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[37622-37633]:SingleVariableDeclaration[37622-37633]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[37635-37646]:SingleVariableDeclaration[37635-37646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37648-37707]:Block[37648-37707]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[37656-37701]:ExpressionStatement[37656-37701]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38196-38200]:PrimitiveType[38196-38200]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[38201-38211]:SimpleName[38201-38211]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38212-38218]:SingleVariableDeclaration[38212-38218]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[38220-38231]:SingleVariableDeclaration[38220-38231]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[38233-38244]:SingleVariableDeclaration[38233-38244]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[38246-38262]:SingleVariableDeclaration[38246-38262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38264-38890]:Block[38264-38890]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[38272-38326]:ExpressionStatement[38272-38326]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[38470-38817]:IfStatement[38470-38817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38486-38664]:Block[38486-38664]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "info" : "ExpressionStatement[38496-38656]:ExpressionStatement[38496-38656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38670-38817]:Block[38670-38817]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "info" : "ExpressionStatement[38680-38809]:ExpressionStatement[38680-38809]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[38824-38884]:ExpressionStatement[38824-38884]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39326-39330]:PrimitiveType[39326-39330]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[39331-39341]:SimpleName[39331-39341]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39342-39348]:SingleVariableDeclaration[39342-39348]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[39350-39361]:SingleVariableDeclaration[39350-39361]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[39363-39382]:SingleVariableDeclaration[39363-39382]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39392-39403]:SingleVariableDeclaration[39392-39403]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[39405-39421]:SingleVariableDeclaration[39405-39421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39423-45054]:Block[39423-45054]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[39431-39484]:ExpressionStatement[39431-39484]"
    }, {
      "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[39492-39545]:VariableDeclarationStatement[39492-39545]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "info" : "VariableDeclarationStatement[39552-39674]:VariableDeclarationStatement[39552-39674]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[39882-39913]:VariableDeclarationStatement[39882-39913]"
    }, {
      "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[39920-40301]:IfStatement[39920-40301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40003-40301]:Block[40003-40301]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[40013-40056]:VariableDeclarationStatement[40013-40056]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[40179-40293]:IfStatement[40179-40293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40229-40293]:Block[40229-40293]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[40241-40283]:ExpressionStatement[40241-40283]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(inputId);",
      "right" : "CompilerInput input = compiler.getInput(inputId);",
      "info" : "VariableDeclarationStatement[40345-40394]:VariableDeclarationStatement[40345-40394]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[40401-44111]:IfStatement[40401-44111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40455-40639]:Block[40455-40639]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[40465-40516]:VariableDeclarationStatement[40465-40516]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[40525-40631]:ExpressionStatement[40525-40631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40645-44111]:Block[40645-44111]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[40655-40717]:IfStatement[40655-40717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40670-40717]:Block[40670-40717]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[40682-40707]:ExpressionStatement[40682-40707]"
    }, {
      "left" : "boolean isExtern = n.isFromExterns();",
      "right" : "boolean isExtern = n.isFromExterns();",
      "info" : "VariableDeclarationStatement[40798-40835]:VariableDeclarationStatement[40798-40835]"
    }, {
      "left" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "VariableDeclarationStatement[40844-40934]:VariableDeclarationStatement[40844-40934]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[40944-41310]:IfStatement[40944-41310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40974-41310]:Block[40974-41310]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[40986-41031]:VariableDeclarationStatement[40986-41031]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[41042-41181]:VariableDeclarationStatement[41042-41181]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[41192-41300]:IfStatement[41192-41300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41211-41300]:Block[41211-41300]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[41225-41288]:ExpressionStatement[41225-41288]"
    }, {
      "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "info" : "VariableDeclarationStatement[41399-41454]:VariableDeclarationStatement[41399-41454]"
    }, {
      "left" : "if (fnType != null &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
      "right" : "if (fnType != null &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
      "info" : "IfStatement[41463-44103]:IfStatement[41463-44103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41580-44103]:Block[41580-44103]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "info" : "IfStatement[41592-44093]:IfStatement[41592-44093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41715-44093]:Block[41715-44093]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[41786-41850]:VariableDeclarationStatement[41786-41850]"
    }, {
      "left" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "right" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "info" : "VariableDeclarationStatement[41863-41927]:VariableDeclarationStatement[41863-41927]"
    }, {
      "left" : "String prototypeName = variableName + \".prototype\";",
      "right" : "String prototypeName = variableName + \".prototype\";",
      "info" : "VariableDeclarationStatement[41941-41992]:VariableDeclarationStatement[41941-41992]"
    }, {
      "left" : "if (scopeToDeclareIn.getOwnSlot(prototypeName) == null)",
      "right" : "if (scopeToDeclareIn.getOwnSlot(prototypeName) == null)",
      "info" : "IfStatement[42232-43154]:IfStatement[42232-43154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42288-43154]:Block[42288-43154]"
    }, {
      "left" : "prototypeSlot.setNode(n);",
      "right" : "prototypeSlot.setNode(n);",
      "info" : "ExpressionStatement[42785-42810]:ExpressionStatement[42785-42810]"
    }, {
      "left" : "scopeToDeclareIn.declare(prototypeName,\n                  n, prototypeSlot.getType(), input,\n                  /* declared iff there's an explicit supertype */\n                  superClassCtor == null ||\n                  superClassCtor.getInstanceType().equals(\n                      getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(prototypeName,\n                  n, prototypeSlot.getType(), input,\n                  /* declared iff there's an explicit supertype */\n                  superClassCtor == null ||\n                  superClassCtor.getInstanceType().equals(\n                      getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[42826-43140]:ExpressionStatement[42826-43140]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
      "right" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
      "info" : "IfStatement[43274-44081]:IfStatement[43274-44081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43840-44081]:Block[43840-44081]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
      "info" : "ExpressionStatement[43856-44067]:ExpressionStatement[43856-44067]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[44119-44546]:IfStatement[44119-44546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44150-44546]:Block[44150-44546]"
    }, {
      "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[44160-44242]:VariableDeclarationStatement[44160-44242]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[44251-44538]:IfStatement[44251-44538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44265-44453]:Block[44265-44453]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "info" : "ExpressionStatement[44277-44443]:ExpressionStatement[44277-44443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44459-44538]:Block[44459-44538]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "info" : "ExpressionStatement[44471-44528]:ExpressionStatement[44471-44528]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "info" : "IfStatement[44554-45048]:IfStatement[44554-45048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44699-45048]:Block[44699-45048]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[44709-44814]:VariableDeclarationStatement[44709-44814]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[44823-44876]:ExpressionStatement[44823-44876]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[44885-44935]:ExpressionStatement[44885-44935]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "info" : "ExpressionStatement[44944-45040]:ExpressionStatement[44944-45040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45152-45159]:Modifier[45152-45159]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45160-45167]:PrimitiveType[45160-45167]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[45168-45194]:SimpleName[45168-45194]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45195-45201]:SingleVariableDeclaration[45195-45201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45203-45300]:Block[45203-45300]"
    }, {
      "left" : "Scope scope = getQnameRootScope(n);",
      "right" : "Scope scope = getQnameRootScope(n);",
      "info" : "VariableDeclarationStatement[45211-45246]:VariableDeclarationStatement[45211-45246]"
    }, {
      "left" : "return scope != null && scope.isGlobal();",
      "right" : "return scope != null && scope.isGlobal();",
      "info" : "ReturnStatement[45253-45294]:ReturnStatement[45253-45294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45378-45385]:Modifier[45378-45385]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[45386-45391]:SimpleType[45386-45391]"
    }, {
      "left" : "getQnameRootScope",
      "right" : "getQnameRootScope",
      "info" : "SimpleName[45392-45409]:SimpleName[45392-45409]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45410-45416]:SingleVariableDeclaration[45410-45416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45418-45653]:Block[45418-45653]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[45426-45473]:VariableDeclarationStatement[45426-45473]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[45480-45628]:IfStatement[45480-45628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45499-45628]:Block[45499-45628]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[45509-45550]:VariableDeclarationStatement[45509-45550]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[45559-45620]:IfStatement[45559-45620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45576-45620]:Block[45576-45620]"
    }, {
      "left" : "return var.getScope();",
      "right" : "return var.getScope();",
      "info" : "ReturnStatement[45588-45610]:ReturnStatement[45588-45610]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45635-45647]:ReturnStatement[45635-45647]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46008-46015]:Modifier[46008-46015]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[46016-46022]:SimpleType[46016-46022]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[46023-46038]:SimpleName[46023-46038]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[46039-46056]:SingleVariableDeclaration[46039-46056]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[46058-46072]:SingleVariableDeclaration[46058-46072]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[46082-46093]:SingleVariableDeclaration[46082-46093]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[46095-46116]:SingleVariableDeclaration[46095-46116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46118-48136]:Block[46118-48136]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[46126-48061]:IfStatement[46126-48061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46162-46241]:Block[46162-46241]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[46172-46233]:ReturnStatement[46172-46233]"
    }, {
      "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "info" : "IfStatement[46247-48061]:IfStatement[46247-48061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46409-46453]:Block[46409-46453]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[46419-46445]:ReturnStatement[46419-46445]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[46459-48061]:IfStatement[46459-48061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46477-48061]:Block[46477-48061]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[46487-48053]:IfStatement[46487-48053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46520-46767]:Block[46520-46767]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[46532-46757]:IfStatement[46532-46757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46576-46628]:Block[46576-46628]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[46590-46616]:ReturnStatement[46590-46616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46634-46757]:Block[46634-46757]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[46648-46745]:ReturnStatement[46648-46745]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[46773-48053]:IfStatement[46773-48053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46821-46942]:Block[46821-46942]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[46833-46932]:ReturnStatement[46833-46932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46948-48053]:Block[46948-48053]"
    }, {
      "left" : "if (info.isConstant())",
      "right" : "if (info.isConstant())",
      "info" : "IfStatement[47028-48043]:IfStatement[47028-48043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47051-48043]:Block[47051-48043]"
    }, {
      "left" : "JSType knownType = null;",
      "right" : "JSType knownType = null;",
      "info" : "VariableDeclarationStatement[47065-47089]:VariableDeclarationStatement[47065-47089]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[47102-48031]:IfStatement[47102-48031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47122-48031]:Block[47122-48031]"
    }, {
      "left" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[47138-48017]:IfStatement[47138-48017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47227-47287]:Block[47227-47287]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47245-47271]:ReturnStatement[47245-47271]"
    }, {
      "left" : "if (rValue.isOr())",
      "right" : "if (rValue.isOr())",
      "info" : "IfStatement[47293-48017]:IfStatement[47293-48017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47312-48017]:Block[47312-48017]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[47524-47566]:VariableDeclarationStatement[47524-47566]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[47583-47625]:VariableDeclarationStatement[47583-47625]"
    }, {
      "left" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[47642-47797]:VariableDeclarationStatement[47642-47797]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[47814-48001]:IfStatement[47814-48001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47931-48001]:Block[47931-48001]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[47951-47983]:ReturnStatement[47951-47983]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[48069-48130]:ReturnStatement[48069-48130]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48142-48149]:Modifier[48142-48149]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[48150-48162]:SimpleType[48150-48162]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[48163-48178]:SimpleName[48163-48178]"
    }, {
      "left" : "@Nullable Var v",
      "right" : "@Nullable Var v",
      "info" : "SingleVariableDeclaration[48179-48194]:SingleVariableDeclaration[48179-48194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48196-48353]:Block[48196-48353]"
    }, {
      "left" : "JSType t = v == null ? null : v.getType();",
      "right" : "JSType t = v == null ? null : v.getType();",
      "info" : "VariableDeclarationStatement[48204-48246]:VariableDeclarationStatement[48204-48246]"
    }, {
      "left" : "ObjectType o = t == null ? null : t.dereference();",
      "right" : "ObjectType o = t == null ? null : t.dereference();",
      "info" : "VariableDeclarationStatement[48253-48303]:VariableDeclarationStatement[48253-48303]"
    }, {
      "left" : "return JSType.toMaybeFunctionType(o);",
      "right" : "return JSType.toMaybeFunctionType(o);",
      "info" : "ReturnStatement[48310-48347]:ReturnStatement[48310-48347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48446-48453]:Modifier[48446-48453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48454-48458]:PrimitiveType[48454-48458]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls",
      "right" : "checkForCallingConventionDefiningCalls",
      "info" : "SimpleName[48459-48497]:SimpleName[48459-48497]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48507-48513]:SingleVariableDeclaration[48507-48513]"
    }, {
      "left" : "Map<String, String> delegateCallingConventions",
      "right" : "Map<String, String> delegateCallingConventions",
      "info" : "SingleVariableDeclaration[48515-48561]:SingleVariableDeclaration[48515-48561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48563-48674]:Block[48563-48674]"
    }, {
      "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[48571-48668]:ExpressionStatement[48571-48668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48877-48884]:Modifier[48877-48884]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48885-48889]:PrimitiveType[48885-48889]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[48890-48916]:SimpleName[48890-48916]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[48926-48941]:SingleVariableDeclaration[48926-48941]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48943-48949]:SingleVariableDeclaration[48943-48949]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[48951-48962]:SingleVariableDeclaration[48951-48962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48964-51594]:Block[48964-51594]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[48972-49062]:VariableDeclarationStatement[48972-49062]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[49069-50238]:IfStatement[49069-50238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49095-50238]:Block[49095-50238]"
    }, {
      "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[49105-49202]:VariableDeclarationStatement[49105-49202]"
    }, {
      "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[49211-49304]:VariableDeclarationStatement[49211-49304]"
    }, {
      "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "info" : "IfStatement[49313-50230]:IfStatement[49313-50230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49423-50230]:Block[49423-50230]"
    }, {
      "left" : "ObjectType superClass = superCtor.getInstanceType();",
      "right" : "ObjectType superClass = superCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[49435-49487]:VariableDeclarationStatement[49435-49487]"
    }, {
      "left" : "ObjectType subClass = subCtor.getInstanceType();",
      "right" : "ObjectType subClass = subCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[49498-49546]:VariableDeclarationStatement[49498-49546]"
    }, {
      "left" : "superCtor = superClass.getConstructor();",
      "right" : "superCtor = superClass.getConstructor();",
      "info" : "ExpressionStatement[49744-49784]:ExpressionStatement[49744-49784]"
    }, {
      "left" : "subCtor = subClass.getConstructor();",
      "right" : "subCtor = subClass.getConstructor();",
      "info" : "ExpressionStatement[49795-49831]:ExpressionStatement[49795-49831]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "info" : "IfStatement[49843-50041]:IfStatement[49843-50041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49961-50041]:Block[49961-50041]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[49975-50029]:ExpressionStatement[49975-50029]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[50053-50220]:IfStatement[50053-50220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50095-50220]:Block[50095-50220]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[50109-50208]:ExpressionStatement[50109-50208]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[50246-50338]:VariableDeclarationStatement[50246-50338]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[50345-50868]:IfStatement[50345-50868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50383-50868]:Block[50383-50868]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[50393-50494]:VariableDeclarationStatement[50393-50494]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[50503-50860]:IfStatement[50503-50860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50527-50860]:Block[50527-50860]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[50539-50595]:VariableDeclarationStatement[50539-50595]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[50607-50850]:IfStatement[50607-50850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50633-50850]:Block[50633-50850]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[50647-50733]:VariableDeclarationStatement[50647-50733]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[50746-50838]:ExpressionStatement[50746-50838]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[50876-50974]:VariableDeclarationStatement[50876-50974]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[50981-51081]:IfStatement[50981-51081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51015-51081]:Block[51015-51081]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[51025-51073]:ExpressionStatement[51025-51073]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[51089-51181]:VariableDeclarationStatement[51089-51181]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[51188-51588]:IfStatement[51188-51588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51219-51588]:Block[51219-51588]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[51229-51326]:VariableDeclarationStatement[51229-51326]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[51335-51580]:IfStatement[51335-51580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51386-51460]:Block[51386-51460]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[51398-51450]:ExpressionStatement[51398-51450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51466-51580]:Block[51466-51580]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[51478-51570]:ExpressionStatement[51478-51570]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51678-51685]:Modifier[51678-51685]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51686-51690]:PrimitiveType[51686-51690]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[51691-51716]:SimpleName[51691-51716]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[51726-51767]:SingleVariableDeclaration[51726-51767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51769-53511]:Block[51769-53511]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[51777-51887]:VariableDeclarationStatement[51777-51887]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[51894-52010]:VariableDeclarationStatement[51894-52010]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[52017-52145]:VariableDeclarationStatement[52017-52145]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[52152-53505]:IfStatement[52152-53505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52262-53505]:Block[52262-53505]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52272-52334]:VariableDeclarationStatement[52272-52334]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52343-52411]:VariableDeclarationStatement[52343-52411]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52420-52490]:VariableDeclarationStatement[52420-52490]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[52500-53497]:IfStatement[52500-53497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52596-53497]:Block[52596-53497]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[52608-52705]:VariableDeclarationStatement[52608-52705]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[52716-52807]:ExpressionStatement[52716-52807]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[52818-52996]:VariableDeclarationStatement[52818-52996]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[53008-53182]:VariableDeclarationStatement[53008-53182]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[53193-53247]:ExpressionStatement[53193-53247]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[53259-53418]:ExpressionStatement[53259-53418]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[53429-53487]:ExpressionStatement[53429-53487]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53940-53944]:PrimitiveType[53940-53944]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[53945-53970]:SimpleName[53945-53970]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[53971-53986]:SingleVariableDeclaration[53971-53986]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[53988-54002]:SingleVariableDeclaration[53988-54002]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54012-54018]:SingleVariableDeclaration[54012-54018]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[54020-54031]:SingleVariableDeclaration[54020-54031]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[54033-54046]:SingleVariableDeclaration[54033-54046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54048-60109]:Block[54048-60210]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[54056-54091]:VariableDeclarationStatement[54056-54091]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[54098-54146]:VariableDeclarationStatement[54098-54146]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[54153-54189]:VariableDeclarationStatement[54153-54189]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[54196-54243]:VariableDeclarationStatement[54196-54243]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[54250-54314]:ExpressionStatement[54250-54314]"
    }, {
      "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[54972-55045]:VariableDeclarationStatement[54972-55045]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[55052-55181]:IfStatement[55052-55181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55095-55181]:Block[55095-55181]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[55140-55173]:ExpressionStatement[55140-55173]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[55423-56678]:IfStatement[55423-56678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55457-56678]:Block[55457-56678]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[55467-55498]:VariableDeclarationStatement[55467-55498]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[55507-56670]:IfStatement[55507-56670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55525-56670]:Block[55525-56670]"
    }, {
      "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "info" : "VariableDeclarationStatement[55854-55908]:VariableDeclarationStatement[55854-55908]"
    }, {
      "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "info" : "IfStatement[55919-56571]:IfStatement[55919-56571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56015-56149]:Block[56015-56149]"
    }, {
      "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "info" : "ExpressionStatement[56029-56137]:ExpressionStatement[56029-56137]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[56155-56571]:IfStatement[56155-56571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56183-56571]:Block[56183-56571]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56552-56559]:ReturnStatement[56552-56559]"
    }, {
      "left" : "if (qVar.getScope() == scope)",
      "right" : "if (qVar.getScope() == scope)",
      "info" : "IfStatement[56582-56660]:IfStatement[56582-56660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56612-56660]:Block[56612-56660]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[56626-56648]:ExpressionStatement[56626-56648]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[56686-56941]:IfStatement[56686-56941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56709-56941]:Block[56709-56941]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[56719-56916]:IfStatement[56719-56916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56746-56916]:Block[56746-56916]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[56758-56906]:ExpressionStatement[56758-56906]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56926-56933]:ReturnStatement[56926-56933]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[57954-57978]:VariableDeclarationStatement[57954-57978]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[57985-58314]:IfStatement[57985-58314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58003-58314]:Block[58003-58314]"
    }, {
      "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[58065-58306]:ExpressionStatement[58065-58306]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "info" : "IfStatement[58322-58529]:IfStatement[58322-58630]"
    }, {
      "left" : "inferred",
      "right" : "inferred",
      "info" : "SimpleName[58326-58334]:SimpleName[58326-58334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58336-58529]:Block[58381-58630]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.isFunction() &&\n            (info != null || !scope.isDeclared(qName, false)));",
      "right" : "inferred = false;",
      "info" : "ExpressionStatement[58388-58521]:ExpressionStatement[58463-58480]"
    }, {
      "left" : "!(rhsValue != null &&\n            rhsValue.isFunction() &&\n            (info != null || !scope.isDeclared(qName, false)))",
      "right" : "false",
      "info" : "PrefixExpression[58399-58520]:BooleanLiteral[58474-58479]"
    }, {
      "left" : "rhsValue != null &&\n            rhsValue.isFunction()",
      "right" : "inferred && rhsValue != null && rhsValue.isFunction()",
      "info" : "InfixExpression[58401-58454]:InfixExpression[58326-58379]"
    }, {
      "left" : "rhsValue != null",
      "right" : "rhsValue != null",
      "info" : "InfixExpression[58401-58417]:InfixExpression[58338-58354]"
    }, {
      "left" : "info != null",
      "right" : "info != null",
      "info" : "InfixExpression[58471-58483]:InfixExpression[58437-58449]"
    }, {
      "left" : "info != null || !scope.isDeclared(qName, false)",
      "right" : "!scope.isDeclared(qName, false) &&\n                   n.isUnscopedQualifiedName()",
      "info" : "InfixExpression[58471-58518]:InfixExpression[58500-58581]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[58537-60103]:IfStatement[58638-60204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58552-59408]:Block[58653-59509]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[58562-58610]:VariableDeclarationStatement[58663-58711]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[58619-59215]:IfStatement[58720-59316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58642-59215]:Block[58743-59316]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[58755-58822]:VariableDeclarationStatement[58856-58923]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[58833-59205]:IfStatement[58934-59306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59048-59205]:Block[59149-59306]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "info" : "ExpressionStatement[59136-59193]:ExpressionStatement[59237-59294]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[59357-59400]:ExpressionStatement[59458-59501]"
    }, {
      "left" : "if (rhsValue != null && rhsValue.isTrue())",
      "right" : "if (rhsValue != null && rhsValue.isTrue())",
      "info" : "IfStatement[59414-60103]:IfStatement[59515-60204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59457-60103]:Block[59558-60204]"
    }, {
      "left" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "right" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "info" : "VariableDeclarationStatement[59533-59623]:VariableDeclarationStatement[59634-59724]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[59632-60095]:IfStatement[59733-60196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59655-60095]:Block[59756-60196]"
    }, {
      "left" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[59667-59718]:VariableDeclarationStatement[59768-59819]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[59729-59796]:VariableDeclarationStatement[59830-59897]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[59807-59908]:VariableDeclarationStatement[59908-60009]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[59919-60085]:IfStatement[60020-60186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60002-60085]:Block[60103-60186]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "info" : "ExpressionStatement[60016-60073]:ExpressionStatement[60117-60174]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60335-60342]:Modifier[60436-60443]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[60343-60353]:SimpleType[60444-60454]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[60354-60367]:SimpleName[60455-60468]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[60368-60383]:SingleVariableDeclaration[60469-60484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60385-60663]:Block[60486-60764]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[60393-60431]:VariableDeclarationStatement[60494-60532]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[60438-60638]:IfStatement[60539-60739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60460-60638]:Block[60561-60739]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[60470-60511]:VariableDeclarationStatement[60571-60612]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[60520-60630]:ReturnStatement[60621-60731]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[60645-60657]:ReturnStatement[60746-60758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60800-60804]:PrimitiveType[60901-60905]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[60805-60828]:SimpleName[60906-60929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60831-61982]:Block[60932-62083]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[60839-61976]:EnhancedForStatement[60940-62077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60885-61976]:Block[60986-62077]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[60895-60914]:VariableDeclarationStatement[60996-61015]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[60923-60951]:VariableDeclarationStatement[61024-61052]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[60960-60996]:VariableDeclarationStatement[61061-61097]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[61005-61052]:VariableDeclarationStatement[61106-61153]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[61061-61095]:VariableDeclarationStatement[61162-61196]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[61104-61137]:VariableDeclarationStatement[61205-61238]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[61147-61214]:IfStatement[61248-61315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61183-61214]:Block[61284-61315]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[61195-61204]:ContinueStatement[61296-61305]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[61331-61379]:VariableDeclarationStatement[61432-61480]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[61388-61460]:VariableDeclarationStatement[61489-61561]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[61469-61510]:ExpressionStatement[61570-61611]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[61520-61968]:IfStatement[61621-62069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61608-61834]:Block[61709-61935]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "info" : "ExpressionStatement[61750-61824]:ExpressionStatement[61851-61925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61840-61968]:Block[61941-62069]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[61852-61958]:ExpressionStatement[61953-62059]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62114-62121]:Modifier[62215-62222]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[62122-62127]:Modifier[62223-62228]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[62128-62133]:TYPE_DECLARATION_KIND[62229-62234]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[62134-62151]:SimpleName[62235-62252]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[62168-62200]:SimpleType[62269-62301]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[62251-62268]:SimpleName[62352-62369]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[62269-62288]:SingleVariableDeclaration[62370-62389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62290-62333]:Block[62391-62434]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[62300-62325]:ExpressionStatement[62401-62426]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62341-62350]:MarkerAnnotation[62442-62451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62357-62363]:Modifier[62458-62464]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62364-62368]:PrimitiveType[62465-62469]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[62369-62374]:SimpleName[62470-62475]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[62375-62390]:SingleVariableDeclaration[62476-62491]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[62392-62398]:SingleVariableDeclaration[62493-62499]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[62400-62411]:SingleVariableDeclaration[62501-62512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62413-62824]:Block[62514-62925]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[62423-62816]:IfStatement[62524-62917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62445-62816]:Block[62546-62917]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[62457-62488]:VariableDeclarationStatement[62558-62589]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[62499-62806]:SwitchStatement[62600-62907]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[62538-62556]:SwitchCase[62639-62657]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[62571-62663]:ExpressionStatement[62672-62764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62678-62684]:BreakStatement[62779-62785]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[62697-62716]:SwitchCase[62798-62817]"
    }, {
      "left" : "maybeCollectMember(t, child, child, null);",
      "right" : "maybeCollectMember(t, child, child, null);",
      "info" : "ExpressionStatement[62731-62773]:ExpressionStatement[62832-62874]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62788-62794]:BreakStatement[62889-62895]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62832-62839]:Modifier[62933-62940]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62840-62844]:PrimitiveType[62941-62945]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[62845-62863]:SimpleName[62946-62964]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[62864-62879]:SingleVariableDeclaration[62965-62980]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[62891-62902]:SingleVariableDeclaration[62992-63003]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[62904-62926]:SingleVariableDeclaration[63005-63027]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[62928-62948]:SingleVariableDeclaration[63029-63049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62950-63759]:Block[63051-63860]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[62960-63010]:VariableDeclarationStatement[63061-63111]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[63206-63364]:IfStatement[63307-63465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63335-63364]:Block[63436-63465]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63347-63354]:ReturnStatement[63448-63455]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[63374-63417]:ExpressionStatement[63475-63518]"
    }, {
      "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "info" : "VariableDeclarationStatement[63426-63498]:VariableDeclarationStatement[63527-63599]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[63507-63541]:VariableDeclarationStatement[63608-63642]"
    }, {
      "left" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "right" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "info" : "IfStatement[63550-63751]:IfStatement[63651-63852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63620-63751]:Block[63721-63852]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "info" : "ExpressionStatement[63632-63741]:ExpressionStatement[63733-63842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63864-63871]:Modifier[63965-63972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63872-63878]:Modifier[63973-63979]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[63879-63884]:Modifier[63980-63985]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[63885-63890]:TYPE_DECLARATION_KIND[63986-63991]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[63891-63906]:SimpleName[63992-64007]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64015-64022]:Modifier[64116-64123]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[64023-64038]:SimpleName[64124-64139]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64039-64048]:SingleVariableDeclaration[64140-64149]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[64050-64066]:SingleVariableDeclaration[64151-64167]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[64068-64084]:SingleVariableDeclaration[64169-64185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64086-64183]:Block[64187-64284]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[64094-64111]:ExpressionStatement[64195-64212]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[64118-64143]:ExpressionStatement[64219-64244]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[64150-64177]:ExpressionStatement[64251-64278]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64302-64309]:Modifier[64403-64410]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[64310-64315]:Modifier[64411-64416]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[64316-64321]:TYPE_DECLARATION_KIND[64417-64422]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[64322-64340]:SimpleName[64423-64441]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[64349-64369]:SimpleType[64450-64470]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64377-64384]:Modifier[64478-64485]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[64385-64403]:SimpleName[64486-64504]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[64404-64415]:SingleVariableDeclaration[64505-64516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64417-64444]:Block[64518-64545]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[64425-64438]:SuperConstructorInvocation[64526-64539]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64694-64703]:MarkerAnnotation[64795-64804]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64704-64710]:Modifier[64805-64811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64711-64715]:PrimitiveType[64812-64816]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[64716-64721]:SimpleName[64817-64822]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[64722-64737]:SingleVariableDeclaration[64823-64838]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[64739-64745]:SingleVariableDeclaration[64840-64846]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[64747-64758]:SingleVariableDeclaration[64848-64859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64760-65024]:Block[64861-65125]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[64768-64794]:ExpressionStatement[64869-64895]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[64802-65018]:SwitchStatement[64903-65119]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[64834-64849]:SwitchCase[64935-64950]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[64890-64993]:IfStatement[64991-65094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64911-64993]:Block[65012-65094]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[64925-64981]:ExpressionStatement[65026-65082]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65004-65010]:BreakStatement[65105-65111]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65030-65039]:MarkerAnnotation[65131-65140]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65044-65048]:PrimitiveType[65145-65149]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[65049-65074]:SimpleName[65150-65175]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65084-65099]:SingleVariableDeclaration[65185-65200]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[65101-65115]:SingleVariableDeclaration[65202-65216]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65125-65131]:SingleVariableDeclaration[65226-65232]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[65133-65144]:SingleVariableDeclaration[65234-65245]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[65146-65159]:SingleVariableDeclaration[65247-65260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65161-65272]:Block[65262-65373]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[65169-65197]:ExpressionStatement[65270-65298]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[65204-65266]:ExpressionStatement[65305-65367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65439-65446]:Modifier[65540-65547]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65447-65451]:PrimitiveType[65548-65552]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[65452-65467]:SimpleName[65553-65568]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65477-65492]:SingleVariableDeclaration[65578-65593]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[65494-65508]:SingleVariableDeclaration[65595-65609]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[65510-65524]:SingleVariableDeclaration[65611-65625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65526-66398]:Block[65627-66499]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[65534-65603]:IfStatement[65635-65704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65578-65603]:Block[65679-65704]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[65588-65595]:ReturnStatement[65689-65696]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[65611-65657]:VariableDeclarationStatement[65712-65758]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[65664-65710]:IfStatement[65765-65811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65685-65710]:Block[65786-65811]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[65695-65702]:ReturnStatement[65796-65803]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[65884-65947]:ExpressionStatement[65985-66048]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[65955-66025]:VariableDeclarationStatement[66056-66126]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[66032-66190]:IfStatement[66133-66291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66054-66190]:Block[66155-66291]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[66064-66182]:ExpressionStatement[66165-66283]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[66198-66252]:ExpressionStatement[66299-66353]"
    }, {
      "left" : "if (candidate.isGetProp())",
      "right" : "if (candidate.isGetProp())",
      "info" : "IfStatement[66259-66392]:IfStatement[66360-66493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66286-66392]:Block[66387-66493]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[66296-66384]:ExpressionStatement[66397-66485]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66534-66541]:Modifier[66635-66642]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[66542-66547]:Modifier[66643-66648]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[66548-66553]:TYPE_DECLARATION_KIND[66649-66654]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[66554-66571]:SimpleName[66655-66672]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[66580-66600]:SimpleType[66681-66701]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66674-66681]:Modifier[66775-66782]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[66682-66699]:SimpleName[66783-66800]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[66700-66711]:SingleVariableDeclaration[66801-66812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66713-66740]:Block[66814-66841]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[66721-66734]:SuperConstructorInvocation[66822-66835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66807-66811]:PrimitiveType[66908-66912]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[66812-66817]:SimpleName[66913-66918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66820-67229]:Block[66921-67330]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[66828-66888]:ExpressionStatement[66929-66989]"
    }, {
      "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[66896-66985]:VariableDeclarationStatement[66997-67086]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[66992-67223]:IfStatement[67093-67324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67014-67223]:Block[67115-67324]"
    }, {
      "left" : "for (String varName : contents.getEscapedVarNames())",
      "right" : "for (String varName : contents.getEscapedVarNames())",
      "info" : "EnhancedForStatement[67024-67215]:EnhancedForStatement[67125-67316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67077-67215]:Block[67178-67316]"
    }, {
      "left" : "Var v = scope.getVar(varName);",
      "right" : "Var v = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[67089-67119]:VariableDeclarationStatement[67190-67220]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[67130-67178]:ExpressionStatement[67231-67279]"
    }, {
      "left" : "v.markEscaped();",
      "right" : "v.markEscaped();",
      "info" : "ExpressionStatement[67189-67205]:ExpressionStatement[67290-67306]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[67493-67502]:MarkerAnnotation[67594-67603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67503-67509]:Modifier[67604-67610]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67510-67514]:PrimitiveType[67611-67615]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[67515-67520]:SimpleName[67616-67621]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[67521-67536]:SingleVariableDeclaration[67622-67637]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[67538-67544]:SingleVariableDeclaration[67639-67645]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[67546-67557]:SingleVariableDeclaration[67647-67658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67559-67769]:Block[67660-67870]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[67567-67604]:IfStatement[67668-67705]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[67597-67604]:ReturnStatement[67698-67705]"
    }, {
      "left" : "if (n.isParamList() && parent == scope.getRootNode())",
      "right" : "if (n.isParamList() && parent == scope.getRootNode())",
      "info" : "IfStatement[67612-67729]:IfStatement[67713-67830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67666-67729]:Block[67767-67830]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[67676-67705]:ExpressionStatement[67777-67806]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[67714-67721]:ReturnStatement[67815-67822]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[67737-67763]:ExpressionStatement[67838-67864]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67837-67844]:Modifier[67938-67945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67845-67849]:PrimitiveType[67946-67950]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[67850-67870]:SimpleName[67951-67971]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[67871-67882]:SingleVariableDeclaration[67972-67983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67884-68640]:Block[67985-68741]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[67928-67969]:VariableDeclarationStatement[68029-68070]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[67976-68015]:VariableDeclarationStatement[68077-68116]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[68022-68601]:IfStatement[68123-68702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68045-68601]:Block[68146-68702]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[68055-68094]:VariableDeclarationStatement[68156-68195]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[68103-68593]:IfStatement[68204-68694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68513-68593]:Block[68614-68694]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[68525-68583]:ExpressionStatement[68626-68684]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[68609-68634]:ExpressionStatement[68710-68735]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68709-68716]:Modifier[68810-68817]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68717-68721]:PrimitiveType[68818-68822]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[68722-68738]:SimpleName[68823-68839]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[68739-68756]:SingleVariableDeclaration[68840-68857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68758-69576]:Block[68859-69677]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[68766-68826]:VariableDeclarationStatement[68867-68927]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[68833-68869]:VariableDeclarationStatement[68934-68970]"
    }, {
      "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[68876-68967]:VariableDeclarationStatement[68977-69068]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[68974-69570]:IfStatement[69075-69671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69000-69570]:Block[69101-69671]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[69010-69066]:VariableDeclarationStatement[69111-69167]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[69075-69562]:IfStatement[69176-69663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69104-69562]:Block[69205-69663]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[69116-69170]:VariableDeclarationStatement[69217-69271]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[69181-69552]:EnhancedForStatement[69282-69653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69232-69552]:Block[69333-69653]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[69246-69540]:IfStatement[69347-69641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69274-69453]:Block[69375-69554]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "info" : "ExpressionStatement[69290-69382]:ExpressionStatement[69391-69483]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[69397-69439]:ExpressionStatement[69498-69540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69459-69540]:Block[69560-69641]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[69475-69526]:ExpressionStatement[69576-69627]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69786-69793]:Modifier[69887-69894]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69794-69800]:Modifier[69895-69901]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[69801-69806]:TYPE_DECLARATION_KIND[69902-69907]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[69807-69833]:SimpleName[69908-69934]"
    }, {
      "left" : "AbstractScopedCallback",
      "right" : "AbstractScopedCallback",
      "info" : "SimpleType[69848-69870]:SimpleType[69949-69971]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[69882-69894]:SimpleType[69983-69995]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[70002-70028]:SimpleName[70103-70129]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[70038-70063]:SingleVariableDeclaration[70139-70164]"
    }, {
      "left" : "Map<Node, AstFunctionContents> outParam",
      "right" : "Map<Node, AstFunctionContents> outParam",
      "info" : "SingleVariableDeclaration[70065-70104]:SingleVariableDeclaration[70166-70205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70106-70173]:Block[70207-70274]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[70114-70139]:ExpressionStatement[70215-70240]"
    }, {
      "left" : "this.data = outParam;",
      "right" : "this.data = outParam;",
      "info" : "ExpressionStatement[70146-70167]:ExpressionStatement[70247-70268]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70179-70188]:MarkerAnnotation[70280-70289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70189-70195]:Modifier[70290-70296]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70196-70200]:PrimitiveType[70297-70301]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[70201-70208]:SimpleName[70302-70309]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[70209-70221]:SingleVariableDeclaration[70310-70322]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[70223-70232]:SingleVariableDeclaration[70324-70333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70234-70446]:Block[70335-70547]"
    }, {
      "left" : "if (externs == null)",
      "right" : "if (externs == null)",
      "info" : "IfStatement[70242-70440]:IfStatement[70343-70541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70263-70326]:Block[70364-70427]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[70273-70318]:ExpressionStatement[70374-70419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70332-70440]:Block[70433-70541]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "info" : "ExpressionStatement[70342-70432]:ExpressionStatement[70443-70533]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70452-70461]:MarkerAnnotation[70553-70562]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70462-70468]:Modifier[70563-70569]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70469-70473]:PrimitiveType[70570-70574]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[70474-70484]:SimpleName[70575-70585]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[70485-70500]:SingleVariableDeclaration[70586-70601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70502-70633]:Block[70603-70734]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[70510-70627]:IfStatement[70611-70728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70534-70627]:Block[70635-70728]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[70544-70570]:VariableDeclarationStatement[70645-70671]"
    }, {
      "left" : "data.put(n, new AstFunctionContents(n));",
      "right" : "data.put(n, new AstFunctionContents(n));",
      "info" : "ExpressionStatement[70579-70619]:ExpressionStatement[70680-70720]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70639-70648]:MarkerAnnotation[70740-70749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70649-70655]:Modifier[70750-70756]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70656-70660]:PrimitiveType[70757-70761]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[70661-70666]:SimpleName[70762-70767]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[70667-70682]:SingleVariableDeclaration[70768-70783]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[70684-70690]:SingleVariableDeclaration[70785-70791]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[70692-70703]:SingleVariableDeclaration[70793-70804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70705-71286]:Block[70806-71387]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[70713-70761]:IfStatement[70814-70862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70736-70761]:Block[70837-70862]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[70746-70753]:ReturnStatement[70847-70854]"
    }, {
      "left" : "if (n.isReturn() && n.getFirstChild() != null)",
      "right" : "if (n.isReturn() && n.getFirstChild() != null)",
      "info" : "IfStatement[70769-71280]:IfStatement[70870-71381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70816-70884]:Block[70917-70985]"
    }, {
      "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "info" : "ExpressionStatement[70826-70876]:ExpressionStatement[70927-70977]"
    }, {
      "left" : "if (n.isName() && NodeUtil.isLValue(n))",
      "right" : "if (n.isName() && NodeUtil.isLValue(n))",
      "info" : "IfStatement[70890-71280]:IfStatement[70991-71381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70930-71280]:Block[71031-71381]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[70940-70968]:VariableDeclarationStatement[71041-71069]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[70977-71004]:VariableDeclarationStatement[71078-71105]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[71013-71042]:VariableDeclarationStatement[71114-71143]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[71051-71272]:IfStatement[71152-71373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71068-71272]:Block[71169-71373]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[71080-71114]:VariableDeclarationStatement[71181-71215]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[71125-71262]:IfStatement[71226-71363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71174-71262]:Block[71275-71363]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "info" : "ExpressionStatement[71188-71250]:ExpressionStatement[71289-71351]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71294-71301]:Modifier[71395-71402]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleType[71302-71321]:SimpleType[71403-71422]"
    }, {
      "left" : "getFunctionAnalysisResults",
      "right" : "getFunctionAnalysisResults",
      "info" : "SimpleName[71322-71348]:SimpleName[71423-71449]"
    }, {
      "left" : "@Nullable Node n",
      "right" : "@Nullable Node n",
      "info" : "SingleVariableDeclaration[71349-71365]:SingleVariableDeclaration[71450-71466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71367-71581]:Block[71468-71682]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[71373-71414]:IfStatement[71474-71515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71388-71414]:Block[71489-71515]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[71396-71408]:ReturnStatement[71497-71509]"
    }, {
      "left" : "return functionAnalysisResults.get(n);",
      "right" : "return functionAnalysisResults.get(n);",
      "info" : "ReturnStatement[71539-71577]:ReturnStatement[71640-71678]"
    } ]
  },
  "interFileMappings" : { }
}