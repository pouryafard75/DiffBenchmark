{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractModule",
      "right" : "AbstractModule",
      "info" : "TypeDeclaration[4020-33225]:TypeDeclaration[4020-33330]"
    }, {
      "left" : "private static final Logger LOG = LogManager.getLogger(AbstractModule.class);",
      "right" : "private static final Logger LOG = LogManager.getLogger(AbstractModule.class);",
      "info" : "FieldDeclaration[4128-4205]:FieldDeclaration[4128-4205]"
    }, {
      "left" : "public static final String MODULE_DIR = \"module\";",
      "right" : "public static final String MODULE_DIR = \"module\";",
      "info" : "FieldDeclaration[4209-4258]:FieldDeclaration[4209-4258]"
    }, {
      "left" : "public static final String CLASSES_GEN = \"classes_gen\";",
      "right" : "public static final String CLASSES_GEN = \"classes_gen\";",
      "info" : "FieldDeclaration[4261-4316]:FieldDeclaration[4261-4316]"
    }, {
      "left" : "public static final String CLASSES = \"classes\";",
      "right" : "public static final String CLASSES = \"classes\";",
      "info" : "FieldDeclaration[4319-4366]:FieldDeclaration[4319-4366]"
    }, {
      "left" : "@Nullable\n  protected final IFile myDescriptorFile;",
      "right" : "@Nullable\n  protected final IFile myDescriptorFile;",
      "info" : "FieldDeclaration[4370-4421]:FieldDeclaration[4370-4421]"
    }, {
      "left" : "private SModuleReference myModuleReference;",
      "right" : "private SModuleReference myModuleReference;",
      "info" : "FieldDeclaration[4424-4467]:FieldDeclaration[4424-4467]"
    }, {
      "left" : "private Set<ModelRoot> mySModelRoots = new LinkedHashSet<ModelRoot>();",
      "right" : "private Set<ModelRoot> mySModelRoots = new LinkedHashSet<ModelRoot>();",
      "info" : "FieldDeclaration[4470-4540]:FieldDeclaration[4470-4540]"
    }, {
      "left" : "private Set<ModuleFacetBase> myFacets = new LinkedHashSet<ModuleFacetBase>();",
      "right" : "private Set<ModuleFacetBase> myFacets = new LinkedHashSet<ModuleFacetBase>();",
      "info" : "FieldDeclaration[4543-4620]:FieldDeclaration[4543-4620]"
    }, {
      "left" : "private ModuleScope myScope = new ModuleScope();",
      "right" : "private ModuleScope myScope = new ModuleScope();",
      "info" : "FieldDeclaration[4623-4671]:FieldDeclaration[4623-4671]"
    }, {
      "left" : "protected boolean myChanged = false;",
      "right" : "protected boolean myChanged = false;",
      "info" : "FieldDeclaration[4675-4711]:FieldDeclaration[4675-4711]"
    }, {
      "left" : "protected AbstractModule()",
      "right" : "protected AbstractModule()",
      "info" : "MethodDeclaration[4739-4787]:MethodDeclaration[4739-4787]"
    }, {
      "left" : "protected AbstractModule(@Nullable IFile myDescriptorFile)",
      "right" : "protected AbstractModule(@Nullable IFile myDescriptorFile)",
      "info" : "MethodDeclaration[4791-4901]:MethodDeclaration[4791-4901]"
    }, {
      "left" : "public SModuleId getModuleId()",
      "right" : "public SModuleId getModuleId()",
      "info" : "MethodDeclaration[4923-5067]:MethodDeclaration[4923-5067]"
    }, {
      "left" : "public String getModuleName()",
      "right" : "public String getModuleName()",
      "info" : "MethodDeclaration[5071-5216]:MethodDeclaration[5071-5216]"
    }, {
      "left" : "public Iterable<SDependency> getDeclaredDependencies()",
      "right" : "public Iterable<SDependency> getDeclaredDependencies()",
      "info" : "MethodDeclaration[5220-6388]:MethodDeclaration[5220-6388]"
    }, {
      "left" : "public Set<SLanguage> getAllUsedLanguages()",
      "right" : "public Set<SLanguage> getAllUsedLanguages()",
      "info" : "MethodDeclaration[6393-6722]:MethodDeclaration[6393-6722]"
    }, {
      "left" : "public Set<SLanguage> getUsedLanguages()",
      "right" : "public Set<SLanguage> getUsedLanguages()",
      "info" : "MethodDeclaration[6726-7659]:MethodDeclaration[6726-7659]"
    }, {
      "left" : "public SModel resolveInDependencies(SModelId ref)",
      "right" : "public SModel resolveInDependencies(SModelId ref)",
      "info" : "MethodDeclaration[7663-8787]:MethodDeclaration[7663-8787]"
    }, {
      "left" : "protected void setModuleReference(@NotNull SModuleReference reference)",
      "right" : "protected void setModuleReference(@NotNull SModuleReference reference)",
      "info" : "MethodDeclaration[8791-9436]:MethodDeclaration[8791-9436]"
    }, {
      "left" : "//module reference is immutable, so we cn return original\n  public SModuleReference getModuleReference()",
      "right" : "//module reference is immutable, so we cn return original\n  public SModuleReference getModuleReference()",
      "info" : "MethodDeclaration[9440-9705]:MethodDeclaration[9440-9705]"
    }, {
      "left" : "public ModuleDescriptor getModuleDescriptor()",
      "right" : "public ModuleDescriptor getModuleDescriptor()",
      "info" : "MethodDeclaration[9761-9863]:MethodDeclaration[9761-9863]"
    }, {
      "left" : "public final void setModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "right" : "public final void setModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "info" : "MethodDeclaration[9907-10152]:MethodDeclaration[9907-10152]"
    }, {
      "left" : "protected void doSetModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "right" : "protected void doSetModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "info" : "MethodDeclaration[10187-10311]:MethodDeclaration[10187-10311]"
    }, {
      "left" : "public void setChanged()",
      "right" : "public void setChanged()",
      "info" : "MethodDeclaration[10315-10402]:MethodDeclaration[10315-10402]"
    }, {
      "left" : "public void save()",
      "right" : "public void save()",
      "info" : "MethodDeclaration[10406-10520]:MethodDeclaration[10406-10520]"
    }, {
      "left" : "public Dependency addDependency(@NotNull SModuleReference moduleRef, boolean reexport)",
      "right" : "public Dependency addDependency(@NotNull SModuleReference moduleRef, boolean reexport)",
      "info" : "MethodDeclaration[10555-11277]:MethodDeclaration[10555-11277]"
    }, {
      "left" : "public void removeDependency(@NotNull Dependency dependency)",
      "right" : "public void removeDependency(@NotNull Dependency dependency)",
      "info" : "MethodDeclaration[11281-11631]:MethodDeclaration[11281-11631]"
    }, {
      "left" : "public void addUsedLanguage(SModuleReference langRef)",
      "right" : "public void addUsedLanguage(SModuleReference langRef)",
      "info" : "MethodDeclaration[11635-11859]:MethodDeclaration[11635-11859]"
    }, {
      "left" : "public void removeUsedLanguage(SModuleReference langRef)",
      "right" : "public void removeUsedLanguage(SModuleReference langRef)",
      "info" : "MethodDeclaration[11863-12089]:MethodDeclaration[11863-12089]"
    }, {
      "left" : "public void addUsedDevkit(SModuleReference devkitRef)",
      "right" : "public void addUsedDevkit(SModuleReference devkitRef)",
      "info" : "MethodDeclaration[12093-12316]:MethodDeclaration[12093-12316]"
    }, {
      "left" : "public void removeUsedDevkit(SModuleReference devkitRef)",
      "right" : "public void removeUsedDevkit(SModuleReference devkitRef)",
      "info" : "MethodDeclaration[12320-12546]:MethodDeclaration[12320-12546]"
    }, {
      "left" : "public final Collection<SModuleReference> getUsedLanguagesReferences()",
      "right" : "public final Collection<SModuleReference> getUsedLanguagesReferences()",
      "info" : "MethodDeclaration[12579-13029]:MethodDeclaration[12579-13029]"
    }, {
      "left" : "protected void updatePackagedDescriptor()",
      "right" : "protected void updatePackagedDescriptor()",
      "info" : "MethodDeclaration[13160-17545]:MethodDeclaration[13160-17545]"
    }, {
      "left" : "private String convertPath(String originalPath, IFile bundleHome, IFile sourcesDescriptorFile, ModuleDescriptor descriptor)",
      "right" : "private String convertPath(String originalPath, IFile bundleHome, IFile sourcesDescriptorFile, ModuleDescriptor descriptor)",
      "info" : "MethodDeclaration[17549-19254]:MethodDeclaration[17549-19254]"
    }, {
      "left" : "public Iterable<ModelRoot> getModelRoots()",
      "right" : "public Iterable<ModelRoot> getModelRoots()",
      "info" : "MethodDeclaration[19267-19488]:MethodDeclaration[19267-19488]"
    }, {
      "left" : "protected void reloadAfterDescriptorChange()",
      "right" : "protected void reloadAfterDescriptorChange()",
      "info" : "MethodDeclaration[19492-19569]:MethodDeclaration[19492-19569]"
    }, {
      "left" : "private void initFacetsAndModels()",
      "right" : "private void initFacetsAndModels()",
      "info" : "MethodDeclaration[19573-19688]:MethodDeclaration[19573-19688]"
    }, {
      "left" : "protected void collectFacetTypes(Set<String> types)",
      "right" : "protected void collectFacetTypes(Set<String> types)",
      "info" : "MethodDeclaration[19692-20220]:MethodDeclaration[19692-20220]"
    }, {
      "left" : "protected String translate(SModuleReference node)",
      "right" : "protected String translate(SModuleReference node)",
      "info" : "MethodDeclaration[20035-20159]:MethodDeclaration[20035-20159]"
    }, {
      "left" : "protected ModuleFacetBase setupFacet(ModuleFacetBase facet, Memento memento)",
      "right" : "protected ModuleFacetBase setupFacet(ModuleFacetBase facet, Memento memento)",
      "info" : "MethodDeclaration[20224-20466]:MethodDeclaration[20224-20466]"
    }, {
      "left" : "protected void updateFacets()",
      "right" : "protected void updateFacets()",
      "info" : "MethodDeclaration[20470-21759]:MethodDeclaration[20470-21759]"
    }, {
      "left" : "public void onModuleLoad()",
      "right" : "public void onModuleLoad()",
      "info" : "MethodDeclaration[21763-21855]:MethodDeclaration[21763-21855]"
    }, {
      "left" : "public boolean isReadOnly()",
      "right" : "public boolean isReadOnly()",
      "info" : "MethodDeclaration[21859-22018]:MethodDeclaration[21859-22018]"
    }, {
      "left" : "public boolean isPackaged()",
      "right" : "public boolean isPackaged()",
      "info" : "MethodDeclaration[22022-22258]:MethodDeclaration[22022-22258]"
    }, {
      "left" : "public IFile getModuleSourceDir()",
      "right" : "public IFile getModuleSourceDir()",
      "info" : "MethodDeclaration[22262-22654]:MethodDeclaration[22262-22654]"
    }, {
      "left" : "public IFile getDescriptorFile()",
      "right" : "public IFile getDescriptorFile()",
      "info" : "MethodDeclaration[22658-22822]:MethodDeclaration[22658-22822]"
    }, {
      "left" : "public void rename(String newName)",
      "right" : "protected void renameModels(String oldName, String newName)",
      "info" : "MethodDeclaration[22826-23618]:MethodDeclaration[23280-23723]"
    }, {
      "left" : "public SearchScope getScope()",
      "right" : "public SearchScope getScope()",
      "info" : "MethodDeclaration[23622-23709]:MethodDeclaration[23727-23814]"
    }, {
      "left" : "public void attach(@NotNull SRepository repository)",
      "right" : "public void attach(@NotNull SRepository repository)",
      "info" : "MethodDeclaration[23713-23931]:MethodDeclaration[23818-24036]"
    }, {
      "left" : "public IFile getFileToListen()",
      "right" : "public IFile getFileToListen()",
      "info" : "MethodDeclaration[23935-24024]:MethodDeclaration[24040-24129]"
    }, {
      "left" : "public Iterable<FileSystemListener> getListenerDependencies()",
      "right" : "public Iterable<FileSystemListener> getListenerDependencies()",
      "info" : "MethodDeclaration[24028-24435]:MethodDeclaration[24133-24540]"
    }, {
      "left" : "public void update(ProgressMonitor monitor, FileSystemEvent event)",
      "right" : "public void update(ProgressMonitor monitor, FileSystemEvent event)",
      "info" : "MethodDeclaration[24439-24899]:MethodDeclaration[24544-25004]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24903-25021]:MethodDeclaration[25008-25126]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[25025-25152]:MethodDeclaration[25130-25257]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[25156-25535]:MethodDeclaration[25261-25640]"
    }, {
      "left" : "public List<String> getSourcePaths()",
      "right" : "public List<String> getSourcePaths()",
      "info" : "MethodDeclaration[25539-25679]:MethodDeclaration[25644-25784]"
    }, {
      "left" : "public void updateModelsSet()",
      "right" : "public void updateModelsSet()",
      "info" : "MethodDeclaration[25683-25743]:MethodDeclaration[25788-25848]"
    }, {
      "left" : "protected Iterable<ModelRoot> loadRoots()",
      "right" : "protected Iterable<ModelRoot> loadRoots()",
      "info" : "MethodDeclaration[25747-26671]:MethodDeclaration[25852-26776]"
    }, {
      "left" : "private void doUpdateModelsSet()",
      "right" : "private void doUpdateModelsSet()",
      "info" : "MethodDeclaration[26675-28211]:MethodDeclaration[26780-28316]"
    }, {
      "left" : "public static void handleReadProblem(AbstractModule module, Exception e, boolean isInConflict)",
      "right" : "public static void handleReadProblem(AbstractModule module, Exception e, boolean isInConflict)",
      "info" : "MethodDeclaration[28215-28457]:MethodDeclaration[28320-28562]"
    }, {
      "left" : "public void updateSModelReferences()",
      "right" : "public void updateSModelReferences()",
      "info" : "MethodDeclaration[28461-28680]:MethodDeclaration[28566-28785]"
    }, {
      "left" : "public void updateModuleReferences()",
      "right" : "public void updateModuleReferences()",
      "info" : "MethodDeclaration[28684-28904]:MethodDeclaration[28789-29009]"
    }, {
      "left" : "protected void dependenciesChanged()",
      "right" : "protected void dependenciesChanged()",
      "info" : "MethodDeclaration[28908-29263]:MethodDeclaration[29013-29368]"
    }, {
      "left" : "protected ModuleDescriptor loadDescriptor()",
      "right" : "protected ModuleDescriptor loadDescriptor()",
      "info" : "MethodDeclaration[29267-29333]:MethodDeclaration[29372-29438]"
    }, {
      "left" : "public boolean isChanged()",
      "right" : "public boolean isChanged()",
      "info" : "MethodDeclaration[29337-29403]:MethodDeclaration[29442-29508]"
    }, {
      "left" : "public <T extends SModuleFacet> T getFacet(Class<T> clazz)",
      "right" : "public <T extends SModuleFacet> T getFacet(Class<T> clazz)",
      "info" : "MethodDeclaration[29407-29634]:MethodDeclaration[29512-29739]"
    }, {
      "left" : "public Iterable<SModuleFacet> getFacets()",
      "right" : "public Iterable<SModuleFacet> getFacets()",
      "info" : "MethodDeclaration[29638-29761]:MethodDeclaration[29743-29866]"
    }, {
      "left" : "ModuleScope",
      "right" : "ModuleScope",
      "info" : "TypeDeclaration[29765-31073]:TypeDeclaration[29870-31178]"
    }, {
      "left" : "protected ModuleScope()",
      "right" : "protected ModuleScope()",
      "info" : "MethodDeclaration[29817-29848]:MethodDeclaration[29922-29953]"
    }, {
      "left" : "public AbstractModule getModule()",
      "right" : "public AbstractModule getModule()",
      "info" : "MethodDeclaration[29854-29929]:MethodDeclaration[29959-30034]"
    }, {
      "left" : "protected Set<SModule> getInitialModules()",
      "right" : "protected Set<SModule> getInitialModules()",
      "info" : "MethodDeclaration[29935-30111]:MethodDeclaration[30040-30216]"
    }, {
      "left" : "protected Set<Language> getInitialUsedLanguages()",
      "right" : "protected Set<Language> getInitialUsedLanguages()",
      "info" : "MethodDeclaration[30117-30976]:MethodDeclaration[30222-31081]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[30982-31069]:MethodDeclaration[31087-31174]"
    }, {
      "left" : "public IFile getOutputPath()",
      "right" : "public IFile getOutputPath()",
      "info" : "MethodDeclaration[31077-31207]:MethodDeclaration[31182-31312]"
    }, {
      "left" : "public final String getGeneratorOutputPath()",
      "right" : "public final String getGeneratorOutputPath()",
      "info" : "MethodDeclaration[31211-31376]:MethodDeclaration[31316-31481]"
    }, {
      "left" : "public final String getTestsGeneratorOutputPath()",
      "right" : "public final String getTestsGeneratorOutputPath()",
      "info" : "MethodDeclaration[31380-31724]:MethodDeclaration[31485-31829]"
    }, {
      "left" : "public void validateLanguageVersions()",
      "right" : "public void validateLanguageVersions()",
      "info" : "MethodDeclaration[31728-32570]:MethodDeclaration[31833-32675]"
    }, {
      "left" : "public int getUsedLanguageVersion(SLanguage usedLanguage)",
      "right" : "public int getUsedLanguageVersion(SLanguage usedLanguage)",
      "info" : "MethodDeclaration[32574-33223]:MethodDeclaration[32679-33328]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4020-4026]:Modifier[4020-4026]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[4027-4035]:Modifier[4027-4035]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4036-4041]:TYPE_DECLARATION_KIND[4036-4041]"
    }, {
      "left" : "AbstractModule",
      "right" : "AbstractModule",
      "info" : "SimpleName[4042-4056]:SimpleName[4042-4056]"
    }, {
      "left" : "SModuleBase",
      "right" : "SModuleBase",
      "info" : "SimpleType[4065-4076]:SimpleType[4065-4076]"
    }, {
      "left" : "EditableSModule",
      "right" : "EditableSModule",
      "info" : "SimpleType[4088-4103]:SimpleType[4088-4103]"
    }, {
      "left" : "FileSystemListener",
      "right" : "FileSystemListener",
      "info" : "SimpleType[4105-4123]:SimpleType[4105-4123]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4739-4748]:Modifier[4739-4748]"
    }, {
      "left" : "AbstractModule",
      "right" : "AbstractModule",
      "info" : "SimpleName[4749-4763]:SimpleName[4749-4763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4766-4787]:Block[4766-4787]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[4772-4783]:ConstructorInvocation[4772-4783]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4791-4800]:Modifier[4791-4800]"
    }, {
      "left" : "AbstractModule",
      "right" : "AbstractModule",
      "info" : "SimpleName[4801-4815]:SimpleName[4801-4815]"
    }, {
      "left" : "@Nullable IFile myDescriptorFile",
      "right" : "@Nullable IFile myDescriptorFile",
      "info" : "SingleVariableDeclaration[4816-4848]:SingleVariableDeclaration[4816-4848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4850-4901]:Block[4850-4901]"
    }, {
      "left" : "this.myDescriptorFile = myDescriptorFile;",
      "right" : "this.myDescriptorFile = myDescriptorFile;",
      "info" : "ExpressionStatement[4856-4897]:ExpressionStatement[4856-4897]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4923-4932]:MarkerAnnotation[4923-4932]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4935-4941]:Modifier[4935-4941]"
    }, {
      "left" : "SModuleId",
      "right" : "SModuleId",
      "info" : "SimpleType[4942-4951]:SimpleType[4942-4951]"
    }, {
      "left" : "getModuleId",
      "right" : "getModuleId",
      "info" : "SimpleName[4952-4963]:SimpleName[4952-4963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4966-5067]:Block[4966-5067]"
    }, {
      "left" : "return getModuleReference().getModuleId();",
      "right" : "return getModuleReference().getModuleId();",
      "info" : "ReturnStatement[5021-5063]:ReturnStatement[5021-5063]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5071-5080]:MarkerAnnotation[5071-5080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5083-5089]:Modifier[5083-5089]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5090-5096]:SimpleType[5090-5096]"
    }, {
      "left" : "getModuleName",
      "right" : "getModuleName",
      "info" : "SimpleName[5097-5110]:SimpleName[5097-5110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5113-5216]:Block[5113-5216]"
    }, {
      "left" : "return getModuleReference().getModuleName();",
      "right" : "return getModuleReference().getModuleName();",
      "info" : "ReturnStatement[5168-5212]:ReturnStatement[5168-5212]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5220-5229]:MarkerAnnotation[5220-5229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5232-5238]:Modifier[5232-5238]"
    }, {
      "left" : "Iterable<SDependency>",
      "right" : "Iterable<SDependency>",
      "info" : "ParameterizedType[5239-5260]:ParameterizedType[5239-5260]"
    }, {
      "left" : "getDeclaredDependencies",
      "right" : "getDeclaredDependencies",
      "info" : "SimpleName[5261-5284]:SimpleName[5261-5284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5287-6388]:Block[5287-6388]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[5293-5309]:ExpressionStatement[5293-5309]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[5314-5366]:VariableDeclarationStatement[5314-5366]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[5371-5440]:IfStatement[5371-5440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5395-5440]:Block[5395-5440]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[5403-5434]:ReturnStatement[5403-5434]"
    }, {
      "left" : "HashSet<SDependency> result = new HashSet<SDependency>();",
      "right" : "HashSet<SDependency> result = new HashSet<SDependency>();",
      "info" : "VariableDeclarationStatement[5445-5502]:VariableDeclarationStatement[5445-5502]"
    }, {
      "left" : "final SRepository repo = getRepository();",
      "right" : "final SRepository repo = getRepository();",
      "info" : "VariableDeclarationStatement[5507-5548]:VariableDeclarationStatement[5507-5548]"
    }, {
      "left" : "if (repo == null)",
      "right" : "if (repo == null)",
      "info" : "IfStatement[5553-5716]:IfStatement[5553-5716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5571-5716]:Block[5571-5716]"
    }, {
      "left" : "throw new IllegalStateException(\"It is not possible to resolve all declared dependencies with a null repository : module \" + this);",
      "right" : "throw new IllegalStateException(\"It is not possible to resolve all declared dependencies with a null repository : module \" + this);",
      "info" : "ThrowStatement[5579-5710]:ThrowStatement[5579-5710]"
    }, {
      "left" : "for (Dependency d : descriptor.getDependencies())",
      "right" : "for (Dependency d : descriptor.getDependencies())",
      "info" : "EnhancedForStatement[5755-5905]:EnhancedForStatement[5755-5905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5805-5905]:Block[5805-5905]"
    }, {
      "left" : "result.add(new SDependencyImpl(d.getModuleRef(), repo, d.getScope(), d.isReexport()));",
      "right" : "result.add(new SDependencyImpl(d.getModuleRef(), repo, d.getScope(), d.isReexport()));",
      "info" : "ExpressionStatement[5813-5899]:ExpressionStatement[5813-5899]"
    }, {
      "left" : "for (SModuleReference usedDevkit : descriptor.getUsedDevkits())",
      "right" : "for (SModuleReference usedDevkit : descriptor.getUsedDevkits())",
      "info" : "EnhancedForStatement[5983-6365]:EnhancedForStatement[5983-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6047-6365]:Block[6047-6365]"
    }, {
      "left" : "final SModule devkit = usedDevkit.resolve(repo);",
      "right" : "final SModule devkit = usedDevkit.resolve(repo);",
      "info" : "VariableDeclarationStatement[6055-6103]:VariableDeclarationStatement[6055-6103]"
    }, {
      "left" : "if (DevKit.class.isInstance(devkit))",
      "right" : "if (DevKit.class.isInstance(devkit))",
      "info" : "IfStatement[6110-6359]:IfStatement[6110-6359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6147-6359]:Block[6147-6359]"
    }, {
      "left" : "for (Solution solution : ((DevKit) devkit).getAllExportedSolutions())",
      "right" : "for (Solution solution : ((DevKit) devkit).getAllExportedSolutions())",
      "info" : "EnhancedForStatement[6157-6351]:EnhancedForStatement[6157-6351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6227-6351]:Block[6227-6351]"
    }, {
      "left" : "result.add(new SDependencyImpl(solution.getModuleReference(), repo, SDependencyScope.DEFAULT, false));",
      "right" : "result.add(new SDependencyImpl(solution.getModuleReference(), repo, SDependencyScope.DEFAULT, false));",
      "info" : "ExpressionStatement[6239-6341]:ExpressionStatement[6239-6341]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6370-6384]:ReturnStatement[6370-6384]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[6563-6574]:MarkerAnnotation[6563-6574]"
    }, {
      "left" : "@ToRemove(version = 3.3)",
      "right" : "@ToRemove(version = 3.3)",
      "info" : "NormalAnnotation[6577-6601]:NormalAnnotation[6577-6601]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6604-6610]:Modifier[6604-6610]"
    }, {
      "left" : "Set<SLanguage>",
      "right" : "Set<SLanguage>",
      "info" : "ParameterizedType[6611-6625]:ParameterizedType[6611-6625]"
    }, {
      "left" : "getAllUsedLanguages",
      "right" : "getAllUsedLanguages",
      "info" : "SimpleName[6626-6645]:SimpleName[6626-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6648-6722]:Block[6648-6722]"
    }, {
      "left" : "return new SLanguageHierarchy(getUsedLanguages()).getExtended();",
      "right" : "return new SLanguageHierarchy(getUsedLanguages()).getExtended();",
      "info" : "ReturnStatement[6654-6718]:ReturnStatement[6654-6718]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6726-6735]:MarkerAnnotation[6726-6735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6738-6744]:Modifier[6738-6744]"
    }, {
      "left" : "Set<SLanguage>",
      "right" : "Set<SLanguage>",
      "info" : "ParameterizedType[6745-6759]:ParameterizedType[6745-6759]"
    }, {
      "left" : "getUsedLanguages",
      "right" : "getUsedLanguages",
      "info" : "SimpleName[6760-6776]:SimpleName[6760-6776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6779-7659]:Block[6779-7659]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[6785-6801]:ExpressionStatement[6785-6801]"
    }, {
      "left" : "LinkedHashSet<SLanguage> usedLanguages = new LinkedHashSet<SLanguage>();",
      "right" : "LinkedHashSet<SLanguage> usedLanguages = new LinkedHashSet<SLanguage>();",
      "info" : "VariableDeclarationStatement[6807-6879]:VariableDeclarationStatement[6807-6879]"
    }, {
      "left" : "LinkedHashSet<SModuleReference> devkits = new LinkedHashSet<SModuleReference>();",
      "right" : "LinkedHashSet<SModuleReference> devkits = new LinkedHashSet<SModuleReference>();",
      "info" : "VariableDeclarationStatement[6884-6964]:VariableDeclarationStatement[6884-6964]"
    }, {
      "left" : "for (SModel m : getModels())",
      "right" : "for (SModel m : getModels())",
      "info" : "EnhancedForStatement[6969-7188]:EnhancedForStatement[6969-7188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6998-7188]:Block[6998-7188]"
    }, {
      "left" : "final SModelInternal modelInternal = (SModelInternal) m;",
      "right" : "final SModelInternal modelInternal = (SModelInternal) m;",
      "info" : "VariableDeclarationStatement[7006-7062]:VariableDeclarationStatement[7006-7062]"
    }, {
      "left" : "usedLanguages.addAll(modelInternal.importedLanguageIds());",
      "right" : "usedLanguages.addAll(modelInternal.importedLanguageIds());",
      "info" : "ExpressionStatement[7069-7127]:ExpressionStatement[7069-7127]"
    }, {
      "left" : "devkits.addAll(modelInternal.importedDevkits());",
      "right" : "devkits.addAll(modelInternal.importedDevkits());",
      "info" : "ExpressionStatement[7134-7182]:ExpressionStatement[7134-7182]"
    }, {
      "left" : "final SRepository repository = getRepository();",
      "right" : "final SRepository repository = getRepository();",
      "info" : "VariableDeclarationStatement[7193-7240]:VariableDeclarationStatement[7193-7240]"
    }, {
      "left" : "if (repository != null)",
      "right" : "if (repository != null)",
      "info" : "IfStatement[7245-7571]:IfStatement[7245-7571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7269-7571]:Block[7269-7571]"
    }, {
      "left" : "for (SModuleReference devkitRef : devkits)",
      "right" : "for (SModuleReference devkitRef : devkits)",
      "info" : "EnhancedForStatement[7277-7565]:EnhancedForStatement[7277-7565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7320-7565]:Block[7320-7565]"
    }, {
      "left" : "final SModule module = devkitRef.resolve(repository);",
      "right" : "final SModule module = devkitRef.resolve(repository);",
      "info" : "VariableDeclarationStatement[7330-7383]:VariableDeclarationStatement[7330-7383]"
    }, {
      "left" : "if (module instanceof DevKit)",
      "right" : "if (module instanceof DevKit)",
      "info" : "IfStatement[7392-7557]:IfStatement[7392-7557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7422-7557]:Block[7422-7557]"
    }, {
      "left" : "for (SLanguage l : ((DevKit) module).getAllExportedLanguageIds())",
      "right" : "for (SLanguage l : ((DevKit) module).getAllExportedLanguageIds())",
      "info" : "EnhancedForStatement[7434-7547]:EnhancedForStatement[7434-7547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7500-7547]:Block[7500-7547]"
    }, {
      "left" : "usedLanguages.add(l);",
      "right" : "usedLanguages.add(l);",
      "info" : "ExpressionStatement[7514-7535]:ExpressionStatement[7514-7535]"
    }, {
      "left" : "usedLanguages.add(BootstrapLanguages.getLangCore());",
      "right" : "usedLanguages.add(BootstrapLanguages.getLangCore());",
      "info" : "ExpressionStatement[7576-7628]:ExpressionStatement[7576-7628]"
    }, {
      "left" : "return usedLanguages;",
      "right" : "return usedLanguages;",
      "info" : "ReturnStatement[7634-7655]:ReturnStatement[7634-7655]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7663-7672]:MarkerAnnotation[7663-7672]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7675-7681]:Modifier[7675-7681]"
    }, {
      "left" : "SModel",
      "right" : "SModel",
      "info" : "SimpleType[7682-7688]:SimpleType[7682-7688]"
    }, {
      "left" : "resolveInDependencies",
      "right" : "resolveInDependencies",
      "info" : "SimpleName[7689-7710]:SimpleName[7689-7710]"
    }, {
      "left" : "SModelId ref",
      "right" : "SModelId ref",
      "info" : "SingleVariableDeclaration[7711-7723]:SingleVariableDeclaration[7711-7723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7725-8787]:Block[7725-8787]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[7731-7747]:ExpressionStatement[7731-7747]"
    }, {
      "left" : "SModel rv = getModel(ref);",
      "right" : "SModel rv = getModel(ref);",
      "info" : "VariableDeclarationStatement[7752-7778]:VariableDeclarationStatement[7752-7778]"
    }, {
      "left" : "if (rv != null)",
      "right" : "if (rv != null)",
      "info" : "IfStatement[7783-7823]:IfStatement[7783-7823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7799-7823]:Block[7799-7823]"
    }, {
      "left" : "return rv;",
      "right" : "return rv;",
      "info" : "ReturnStatement[7807-7817]:ReturnStatement[7807-7817]"
    }, {
      "left" : "for (SModule visibleModule : new GlobalModuleDependenciesManager(this).getModules(Deptype.VISIBLE))",
      "right" : "for (SModule visibleModule : new GlobalModuleDependenciesManager(this).getModules(Deptype.VISIBLE))",
      "info" : "EnhancedForStatement[7828-8026]:EnhancedForStatement[7828-8026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7928-8026]:Block[7928-8026]"
    }, {
      "left" : "rv = visibleModule.getModel(ref);",
      "right" : "rv = visibleModule.getModel(ref);",
      "info" : "ExpressionStatement[7936-7969]:ExpressionStatement[7936-7969]"
    }, {
      "left" : "if (rv != null)",
      "right" : "if (rv != null)",
      "info" : "IfStatement[7976-8020]:IfStatement[7976-8020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7992-8020]:Block[7992-8020]"
    }, {
      "left" : "return rv;",
      "right" : "return rv;",
      "info" : "ReturnStatement[8002-8012]:ReturnStatement[8002-8012]"
    }, {
      "left" : "return SModelRepository.getInstance().getModelDescriptor(ref);",
      "right" : "return SModelRepository.getInstance().getModelDescriptor(ref);",
      "info" : "ReturnStatement[8721-8783]:ReturnStatement[8721-8783]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8791-8800]:Modifier[8791-8800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8801-8805]:PrimitiveType[8801-8805]"
    }, {
      "left" : "setModuleReference",
      "right" : "setModuleReference",
      "info" : "SimpleName[8806-8824]:SimpleName[8806-8824]"
    }, {
      "left" : "@NotNull SModuleReference reference",
      "right" : "@NotNull SModuleReference reference",
      "info" : "SingleVariableDeclaration[8825-8860]:SingleVariableDeclaration[8825-8860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8862-9436]:Block[8862-9436]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[8868-8886]:ExpressionStatement[8868-8886]"
    }, {
      "left" : "assert reference.getModuleId() != null : \"module must have an id\";",
      "right" : "assert reference.getModuleId() != null : \"module must have an id\";",
      "info" : "AssertStatement[8892-8958]:AssertStatement[8892-8958]"
    }, {
      "left" : "assert myModuleReference == null || reference.getModuleId().equals(myModuleReference.getModuleId()) : \"module id can't be changed\";",
      "right" : "assert myModuleReference == null || reference.getModuleId().equals(myModuleReference.getModuleId()) : \"module id can't be changed\";",
      "info" : "AssertStatement[8963-9094]:AssertStatement[8963-9094]"
    }, {
      "left" : "SModuleReference oldValue = myModuleReference;",
      "right" : "SModuleReference oldValue = myModuleReference;",
      "info" : "VariableDeclarationStatement[9100-9146]:VariableDeclarationStatement[9100-9146]"
    }, {
      "left" : "myModuleReference = reference;",
      "right" : "myModuleReference = reference;",
      "info" : "ExpressionStatement[9151-9181]:ExpressionStatement[9151-9181]"
    }, {
      "left" : "if (oldValue != null &&\n        oldValue.getModuleName() != null &&\n        !oldValue.getModuleName().equals(myModuleReference.getModuleName()))",
      "right" : "if (oldValue != null &&\n        oldValue.getModuleName() != null &&\n        !oldValue.getModuleName().equals(myModuleReference.getModuleName()))",
      "info" : "IfStatement[9186-9432]:IfStatement[9186-9432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9331-9432]:Block[9331-9432]"
    }, {
      "left" : "MPSModuleRepository.getInstance().moduleFqNameChanged(this, oldValue.getModuleName());",
      "right" : "MPSModuleRepository.getInstance().moduleFqNameChanged(this, oldValue.getModuleName());",
      "info" : "ExpressionStatement[9340-9426]:ExpressionStatement[9340-9426]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9440-9449]:MarkerAnnotation[9440-9449]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[9452-9460]:MarkerAnnotation[9452-9460]"
    }, {
      "left" : "//module reference is immutable, so we cn return original",
      "right" : "//module reference is immutable, so we cn return original",
      "info" : "LineComment[9463-9520]:LineComment[9463-9520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9523-9529]:Modifier[9523-9529]"
    }, {
      "left" : "SModuleReference",
      "right" : "SModuleReference",
      "info" : "SimpleType[9530-9546]:SimpleType[9530-9546]"
    }, {
      "left" : "getModuleReference",
      "right" : "getModuleReference",
      "info" : "SimpleName[9547-9565]:SimpleName[9547-9565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9568-9705]:Block[9568-9705]"
    }, {
      "left" : "return myModuleReference;",
      "right" : "return myModuleReference;",
      "info" : "ReturnStatement[9676-9701]:ReturnStatement[9676-9701]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[9761-9770]:MarkerAnnotation[9761-9770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9773-9779]:Modifier[9773-9779]"
    }, {
      "left" : "ModuleDescriptor",
      "right" : "ModuleDescriptor",
      "info" : "SimpleType[9780-9796]:SimpleType[9780-9796]"
    }, {
      "left" : "getModuleDescriptor",
      "right" : "getModuleDescriptor",
      "info" : "SimpleName[9797-9816]:SimpleName[9797-9816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9819-9863]:Block[9819-9863]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[9825-9841]:ExpressionStatement[9825-9841]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9847-9859]:ReturnStatement[9847-9859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9907-9913]:Modifier[9907-9913]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9914-9919]:Modifier[9914-9919]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9920-9924]:PrimitiveType[9920-9924]"
    }, {
      "left" : "setModuleDescriptor",
      "right" : "setModuleDescriptor",
      "info" : "SimpleName[9925-9944]:SimpleName[9925-9944]"
    }, {
      "left" : "ModuleDescriptor moduleDescriptor",
      "right" : "ModuleDescriptor moduleDescriptor",
      "info" : "SingleVariableDeclaration[9945-9978]:SingleVariableDeclaration[9945-9978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9980-10152]:Block[9980-10152]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[9986-10004]:ExpressionStatement[9986-10004]"
    }, {
      "left" : "doSetModuleDescriptor(moduleDescriptor);",
      "right" : "doSetModuleDescriptor(moduleDescriptor);",
      "info" : "ExpressionStatement[10009-10049]:ExpressionStatement[10009-10049]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[10054-10067]:ExpressionStatement[10054-10067]"
    }, {
      "left" : "reloadAfterDescriptorChange();",
      "right" : "reloadAfterDescriptorChange();",
      "info" : "ExpressionStatement[10072-10102]:ExpressionStatement[10072-10102]"
    }, {
      "left" : "fireChanged();",
      "right" : "fireChanged();",
      "info" : "ExpressionStatement[10107-10121]:ExpressionStatement[10107-10121]"
    }, {
      "left" : "dependenciesChanged();",
      "right" : "dependenciesChanged();",
      "info" : "ExpressionStatement[10126-10148]:ExpressionStatement[10126-10148]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10187-10196]:Modifier[10187-10196]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10197-10201]:PrimitiveType[10197-10201]"
    }, {
      "left" : "doSetModuleDescriptor",
      "right" : "doSetModuleDescriptor",
      "info" : "SimpleName[10202-10223]:SimpleName[10202-10223]"
    }, {
      "left" : "ModuleDescriptor moduleDescriptor",
      "right" : "ModuleDescriptor moduleDescriptor",
      "info" : "SingleVariableDeclaration[10224-10257]:SingleVariableDeclaration[10224-10257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10259-10311]:Block[10259-10311]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[10265-10307]:ThrowStatement[10265-10307]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10315-10324]:MarkerAnnotation[10315-10324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10327-10333]:Modifier[10327-10333]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10334-10338]:PrimitiveType[10334-10338]"
    }, {
      "left" : "setChanged",
      "right" : "setChanged",
      "info" : "SimpleName[10339-10349]:SimpleName[10339-10349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10352-10402]:Block[10352-10402]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[10358-10376]:ExpressionStatement[10358-10376]"
    }, {
      "left" : "myChanged = true;",
      "right" : "myChanged = true;",
      "info" : "ExpressionStatement[10381-10398]:ExpressionStatement[10381-10398]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10406-10415]:MarkerAnnotation[10406-10415]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10418-10424]:Modifier[10418-10424]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10425-10429]:PrimitiveType[10425-10429]"
    }, {
      "left" : "save",
      "right" : "save",
      "info" : "SimpleName[10430-10434]:SimpleName[10430-10434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10437-10520]:Block[10437-10520]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[10443-10461]:ExpressionStatement[10443-10461]"
    }, {
      "left" : "validateLanguageVersions();",
      "right" : "validateLanguageVersions();",
      "info" : "ExpressionStatement[10466-10493]:ExpressionStatement[10466-10493]"
    }, {
      "left" : "myChanged = false;",
      "right" : "myChanged = false;",
      "info" : "ExpressionStatement[10498-10516]:ExpressionStatement[10498-10516]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[10555-10564]:MarkerAnnotation[10555-10564]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10567-10573]:Modifier[10567-10573]"
    }, {
      "left" : "Dependency",
      "right" : "Dependency",
      "info" : "SimpleType[10574-10584]:SimpleType[10574-10584]"
    }, {
      "left" : "addDependency",
      "right" : "addDependency",
      "info" : "SimpleName[10585-10598]:SimpleName[10585-10598]"
    }, {
      "left" : "@NotNull SModuleReference moduleRef",
      "right" : "@NotNull SModuleReference moduleRef",
      "info" : "SingleVariableDeclaration[10599-10634]:SingleVariableDeclaration[10599-10634]"
    }, {
      "left" : "boolean reexport",
      "right" : "boolean reexport",
      "info" : "SingleVariableDeclaration[10636-10652]:SingleVariableDeclaration[10636-10652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10654-11277]:Block[10654-11277]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[10660-10678]:ExpressionStatement[10660-10678]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[10683-10735]:VariableDeclarationStatement[10683-10735]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[10740-10776]:IfStatement[10740-10776]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10764-10776]:ReturnStatement[10764-10776]"
    }, {
      "left" : "for (Dependency dep : descriptor.getDependencies())",
      "right" : "for (Dependency dep : descriptor.getDependencies())",
      "info" : "EnhancedForStatement[10781-11064]:EnhancedForStatement[10781-11064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10833-11064]:Block[10833-11064]"
    }, {
      "left" : "if (!EqualUtil.equals(dep.getModuleRef(), moduleRef))",
      "right" : "if (!EqualUtil.equals(dep.getModuleRef(), moduleRef))",
      "info" : "IfStatement[10841-10904]:IfStatement[10841-10904]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10895-10904]:ContinueStatement[10895-10904]"
    }, {
      "left" : "if (reexport && !dep.isReexport())",
      "right" : "if (reexport && !dep.isReexport())",
      "info" : "IfStatement[10912-11040]:IfStatement[10912-11040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10947-11040]:Block[10947-11040]"
    }, {
      "left" : "dep.setReexport(true);",
      "right" : "dep.setReexport(true);",
      "info" : "ExpressionStatement[10957-10979]:ExpressionStatement[10957-10979]"
    }, {
      "left" : "dependenciesChanged();",
      "right" : "dependenciesChanged();",
      "info" : "ExpressionStatement[10988-11010]:ExpressionStatement[10988-11010]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[11019-11032]:ExpressionStatement[11019-11032]"
    }, {
      "left" : "return dep;",
      "right" : "return dep;",
      "info" : "ReturnStatement[11047-11058]:ReturnStatement[11047-11058]"
    }, {
      "left" : "Dependency dep = new Dependency();",
      "right" : "Dependency dep = new Dependency();",
      "info" : "VariableDeclarationStatement[11070-11104]:VariableDeclarationStatement[11070-11104]"
    }, {
      "left" : "dep.setModuleRef(moduleRef);",
      "right" : "dep.setModuleRef(moduleRef);",
      "info" : "ExpressionStatement[11109-11137]:ExpressionStatement[11109-11137]"
    }, {
      "left" : "dep.setReexport(reexport);",
      "right" : "dep.setReexport(reexport);",
      "info" : "ExpressionStatement[11142-11168]:ExpressionStatement[11142-11168]"
    }, {
      "left" : "descriptor.getDependencies().add(dep);",
      "right" : "descriptor.getDependencies().add(dep);",
      "info" : "ExpressionStatement[11173-11211]:ExpressionStatement[11173-11211]"
    }, {
      "left" : "dependenciesChanged();",
      "right" : "dependenciesChanged();",
      "info" : "ExpressionStatement[11217-11239]:ExpressionStatement[11217-11239]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[11244-11257]:ExpressionStatement[11244-11257]"
    }, {
      "left" : "return dep;",
      "right" : "return dep;",
      "info" : "ReturnStatement[11262-11273]:ReturnStatement[11262-11273]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11281-11287]:Modifier[11281-11287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11288-11292]:PrimitiveType[11288-11292]"
    }, {
      "left" : "removeDependency",
      "right" : "removeDependency",
      "info" : "SimpleName[11293-11309]:SimpleName[11293-11309]"
    }, {
      "left" : "@NotNull Dependency dependency",
      "right" : "@NotNull Dependency dependency",
      "info" : "SingleVariableDeclaration[11310-11340]:SingleVariableDeclaration[11310-11340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11342-11631]:Block[11342-11631]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[11348-11366]:ExpressionStatement[11348-11366]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[11371-11423]:VariableDeclarationStatement[11371-11423]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[11428-11459]:IfStatement[11428-11459]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11452-11459]:ReturnStatement[11452-11459]"
    }, {
      "left" : "if (!descriptor.getDependencies().contains(dependency))",
      "right" : "if (!descriptor.getDependencies().contains(dependency))",
      "info" : "IfStatement[11464-11527]:IfStatement[11464-11527]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11520-11527]:ReturnStatement[11520-11527]"
    }, {
      "left" : "descriptor.getDependencies().remove(dependency);",
      "right" : "descriptor.getDependencies().remove(dependency);",
      "info" : "ExpressionStatement[11533-11581]:ExpressionStatement[11533-11581]"
    }, {
      "left" : "dependenciesChanged();",
      "right" : "dependenciesChanged();",
      "info" : "ExpressionStatement[11587-11609]:ExpressionStatement[11587-11609]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[11614-11627]:ExpressionStatement[11614-11627]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[11746-11757]:MarkerAnnotation[11746-11757]"
    }, {
      "left" : "@ToRemove(version = 3.3)",
      "right" : "@ToRemove(version = 3.3)",
      "info" : "NormalAnnotation[11760-11784]:NormalAnnotation[11760-11784]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11787-11793]:Modifier[11787-11793]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11794-11798]:PrimitiveType[11794-11798]"
    }, {
      "left" : "addUsedLanguage",
      "right" : "addUsedLanguage",
      "info" : "SimpleName[11799-11814]:SimpleName[11799-11814]"
    }, {
      "left" : "SModuleReference langRef",
      "right" : "SModuleReference langRef",
      "info" : "SingleVariableDeclaration[11815-11839]:SingleVariableDeclaration[11815-11839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11841-11859]:Block[11841-11859]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[11973-11984]:MarkerAnnotation[11973-11984]"
    }, {
      "left" : "@ToRemove(version = 3.3)",
      "right" : "@ToRemove(version = 3.3)",
      "info" : "NormalAnnotation[11987-12011]:NormalAnnotation[11987-12011]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12014-12020]:Modifier[12014-12020]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12021-12025]:PrimitiveType[12021-12025]"
    }, {
      "left" : "removeUsedLanguage",
      "right" : "removeUsedLanguage",
      "info" : "SimpleName[12026-12044]:SimpleName[12026-12044]"
    }, {
      "left" : "SModuleReference langRef",
      "right" : "SModuleReference langRef",
      "info" : "SingleVariableDeclaration[12045-12069]:SingleVariableDeclaration[12045-12069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12071-12089]:Block[12071-12089]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[12203-12214]:MarkerAnnotation[12203-12214]"
    }, {
      "left" : "@ToRemove(version = 3.3)",
      "right" : "@ToRemove(version = 3.3)",
      "info" : "NormalAnnotation[12217-12241]:NormalAnnotation[12217-12241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12244-12250]:Modifier[12244-12250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12251-12255]:PrimitiveType[12251-12255]"
    }, {
      "left" : "addUsedDevkit",
      "right" : "addUsedDevkit",
      "info" : "SimpleName[12256-12269]:SimpleName[12256-12269]"
    }, {
      "left" : "SModuleReference devkitRef",
      "right" : "SModuleReference devkitRef",
      "info" : "SingleVariableDeclaration[12270-12296]:SingleVariableDeclaration[12270-12296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12298-12316]:Block[12298-12316]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[12430-12441]:MarkerAnnotation[12430-12441]"
    }, {
      "left" : "@ToRemove(version = 3.3)",
      "right" : "@ToRemove(version = 3.3)",
      "info" : "NormalAnnotation[12444-12468]:NormalAnnotation[12444-12468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12471-12477]:Modifier[12471-12477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12478-12482]:PrimitiveType[12478-12482]"
    }, {
      "left" : "removeUsedDevkit",
      "right" : "removeUsedDevkit",
      "info" : "SimpleName[12483-12499]:SimpleName[12483-12499]"
    }, {
      "left" : "SModuleReference devkitRef",
      "right" : "SModuleReference devkitRef",
      "info" : "SingleVariableDeclaration[12500-12526]:SingleVariableDeclaration[12500-12526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12528-12546]:Block[12528-12546]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[12724-12735]:MarkerAnnotation[12724-12735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12738-12744]:Modifier[12738-12744]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[12745-12750]:Modifier[12745-12750]"
    }, {
      "left" : "Collection<SModuleReference>",
      "right" : "Collection<SModuleReference>",
      "info" : "ParameterizedType[12751-12779]:ParameterizedType[12751-12779]"
    }, {
      "left" : "getUsedLanguagesReferences",
      "right" : "getUsedLanguagesReferences",
      "info" : "SimpleName[12780-12806]:SimpleName[12780-12806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-13029]:Block[12809-13029]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[12815-12831]:ExpressionStatement[12815-12831]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[12836-12888]:VariableDeclarationStatement[12836-12888]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[12893-12947]:IfStatement[12893-12947]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[12917-12947]:ReturnStatement[12917-12947]"
    }, {
      "left" : "return Collections.unmodifiableCollection(descriptor.getUsedLanguages());",
      "right" : "return Collections.unmodifiableCollection(descriptor.getUsedLanguages());",
      "info" : "ReturnStatement[12952-13025]:ReturnStatement[12952-13025]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13160-13169]:Modifier[13160-13169]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13170-13174]:PrimitiveType[13170-13174]"
    }, {
      "left" : "updatePackagedDescriptor",
      "right" : "updatePackagedDescriptor",
      "info" : "SimpleName[13175-13199]:SimpleName[13175-13199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13202-17545]:Block[13202-17545]"
    }, {
      "left" : "if (!isPackaged())",
      "right" : "if (!isPackaged())",
      "info" : "IfStatement[13674-13700]:IfStatement[13674-13700]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13693-13700]:ReturnStatement[13693-13700]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[13706-13758]:VariableDeclarationStatement[13706-13758]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[13763-13794]:IfStatement[13763-13794]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13787-13794]:ReturnStatement[13787-13794]"
    }, {
      "left" : "DeploymentDescriptor deplDescriptor = descriptor.getDeploymentDescriptor();",
      "right" : "DeploymentDescriptor deplDescriptor = descriptor.getDeploymentDescriptor();",
      "info" : "VariableDeclarationStatement[13799-13874]:VariableDeclarationStatement[13799-13874]"
    }, {
      "left" : "if (deplDescriptor == null)",
      "right" : "if (deplDescriptor == null)",
      "info" : "IfStatement[13879-13914]:IfStatement[13879-13914]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13907-13914]:ReturnStatement[13907-13914]"
    }, {
      "left" : "final IFile bundleHomeFile = FileSystem.getInstance().getBundleHome(getDescriptorFile());",
      "right" : "final IFile bundleHomeFile = FileSystem.getInstance().getBundleHome(getDescriptorFile());",
      "info" : "VariableDeclarationStatement[13920-14009]:VariableDeclarationStatement[13920-14009]"
    }, {
      "left" : "if (bundleHomeFile == null)",
      "right" : "if (bundleHomeFile == null)",
      "info" : "IfStatement[14014-14049]:IfStatement[14014-14049]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14042-14049]:ReturnStatement[14042-14049]"
    }, {
      "left" : "IFile bundleParent = bundleHomeFile.getParent();",
      "right" : "IFile bundleParent = bundleHomeFile.getParent();",
      "info" : "VariableDeclarationStatement[14055-14103]:VariableDeclarationStatement[14055-14103]"
    }, {
      "left" : "if (bundleParent == null || !bundleParent.exists())",
      "right" : "if (bundleParent == null || !bundleParent.exists())",
      "info" : "IfStatement[14108-14167]:IfStatement[14108-14167]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14160-14167]:ReturnStatement[14160-14167]"
    }, {
      "left" : "IFile sourcesDescriptorFile = ModulesMiner.getRealDescriptorFile(getDescriptorFile().getPath(), deplDescriptor);",
      "right" : "IFile sourcesDescriptorFile = ModulesMiner.getRealDescriptorFile(getDescriptorFile().getPath(), deplDescriptor);",
      "info" : "VariableDeclarationStatement[14173-14285]:VariableDeclarationStatement[14173-14285]"
    }, {
      "left" : "if (sourcesDescriptorFile == null)",
      "right" : "if (sourcesDescriptorFile == null)",
      "info" : "IfStatement[14290-14501]:IfStatement[14290-14501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14325-14428]:Block[14325-14428]"
    }, {
      "left" : "assert descriptor instanceof DeploymentDescriptor;",
      "right" : "assert descriptor instanceof DeploymentDescriptor;",
      "info" : "AssertStatement[14372-14422]:AssertStatement[14372-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14434-14501]:Block[14434-14501]"
    }, {
      "left" : "assert !(descriptor instanceof DeploymentDescriptor);",
      "right" : "assert !(descriptor instanceof DeploymentDescriptor);",
      "info" : "AssertStatement[14442-14495]:AssertStatement[14442-14495]"
    }, {
      "left" : "if (sourcesDescriptorFile != null)",
      "right" : "if (sourcesDescriptorFile != null)",
      "info" : "IfStatement[14521-17058]:IfStatement[14521-17058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14556-17058]:Block[14556-17058]"
    }, {
      "left" : "descriptor.getAdditionalJavaStubPaths().clear();",
      "right" : "descriptor.getAdditionalJavaStubPaths().clear();",
      "info" : "ExpressionStatement[14753-14801]:ExpressionStatement[14753-14801]"
    }, {
      "left" : "List<ModelRootDescriptor> toRemove = new ArrayList<ModelRootDescriptor>();",
      "right" : "List<ModelRootDescriptor> toRemove = new ArrayList<ModelRootDescriptor>();",
      "info" : "VariableDeclarationStatement[14835-14909]:VariableDeclarationStatement[14835-14909]"
    }, {
      "left" : "List<ModelRootDescriptor> toAdd = new ArrayList<ModelRootDescriptor>();",
      "right" : "List<ModelRootDescriptor> toAdd = new ArrayList<ModelRootDescriptor>();",
      "info" : "VariableDeclarationStatement[14916-14987]:VariableDeclarationStatement[14916-14987]"
    }, {
      "left" : "for (ModelRootDescriptor rootDescriptor : descriptor.getModelRootDescriptors())",
      "right" : "for (ModelRootDescriptor rootDescriptor : descriptor.getModelRootDescriptors())",
      "info" : "EnhancedForStatement[14994-16930]:EnhancedForStatement[14994-16930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15074-16930]:Block[15074-16930]"
    }, {
      "left" : "String rootDescriptorType = rootDescriptor.getType();",
      "right" : "String rootDescriptorType = rootDescriptor.getType();",
      "info" : "VariableDeclarationStatement[15084-15137]:VariableDeclarationStatement[15084-15137]"
    }, {
      "left" : "if (rootDescriptorType.equals(PersistenceRegistry.JAVA_CLASSES_ROOT))",
      "right" : "if (rootDescriptorType.equals(PersistenceRegistry.JAVA_CLASSES_ROOT))",
      "info" : "IfStatement[15146-16922]:IfStatement[15146-16922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15216-16922]:Block[15216-16922]"
    }, {
      "left" : "String pathElement = rootDescriptor.getMemento().get(\"path\");",
      "right" : "String pathElement = rootDescriptor.getMemento().get(\"path\");",
      "info" : "VariableDeclarationStatement[15294-15355]:VariableDeclarationStatement[15294-15355]"
    }, {
      "left" : "boolean update = false;",
      "right" : "boolean update = false;",
      "info" : "VariableDeclarationStatement[15366-15389]:VariableDeclarationStatement[15366-15389]"
    }, {
      "left" : "Memento newMemento = new MementoImpl();",
      "right" : "Memento newMemento = new MementoImpl();",
      "info" : "VariableDeclarationStatement[15400-15439]:VariableDeclarationStatement[15400-15439]"
    }, {
      "left" : "if (pathElement != null)",
      "right" : "if (pathElement != null)",
      "info" : "IfStatement[15450-16782]:IfStatement[15450-16782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15475-15847]:Block[15475-15847]"
    }, {
      "left" : "String convertedPath = convertPath(pathElement, bundleHomeFile, sourcesDescriptorFile, descriptor);",
      "right" : "String convertedPath = convertPath(pathElement, bundleHomeFile, sourcesDescriptorFile, descriptor);",
      "info" : "VariableDeclarationStatement[15598-15697]:VariableDeclarationStatement[15598-15697]"
    }, {
      "left" : "if (convertedPath != null)",
      "right" : "if (convertedPath != null)",
      "info" : "IfStatement[15711-15835]:IfStatement[15711-15835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15738-15835]:Block[15738-15835]"
    }, {
      "left" : "newMemento.put(\"path\", convertedPath);",
      "right" : "newMemento.put(\"path\", convertedPath);",
      "info" : "ExpressionStatement[15754-15792]:ExpressionStatement[15754-15792]"
    }, {
      "left" : "update = true;",
      "right" : "update = true;",
      "info" : "ExpressionStatement[15807-15821]:ExpressionStatement[15807-15821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15853-16782]:Block[15853-16782]"
    }, {
      "left" : "String contentPath = rootDescriptor.getMemento().get(\"contentPath\");",
      "right" : "String contentPath = rootDescriptor.getMemento().get(\"contentPath\");",
      "info" : "VariableDeclarationStatement[15949-16017]:VariableDeclarationStatement[15949-16017]"
    }, {
      "left" : "List<String> paths = new LinkedList<String>();",
      "right" : "List<String> paths = new LinkedList<String>();",
      "info" : "VariableDeclarationStatement[16030-16076]:VariableDeclarationStatement[16030-16076]"
    }, {
      "left" : "for (Memento sourceRoot : rootDescriptor.getMemento().getChildren(\"sourceRoot\"))",
      "right" : "for (Memento sourceRoot : rootDescriptor.getMemento().getChildren(\"sourceRoot\"))",
      "info" : "EnhancedForStatement[16089-16269]:EnhancedForStatement[16089-16269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16170-16269]:Block[16170-16269]"
    }, {
      "left" : "paths.add(contentPath + File.separator + sourceRoot.get(\"location\"));",
      "right" : "paths.add(contentPath + File.separator + sourceRoot.get(\"location\"));",
      "info" : "ExpressionStatement[16186-16255]:ExpressionStatement[16186-16255]"
    }, {
      "left" : "newMemento.put(\"contentPath\", bundleParent.getPath());",
      "right" : "newMemento.put(\"contentPath\", bundleParent.getPath());",
      "info" : "ExpressionStatement[16282-16336]:ExpressionStatement[16282-16336]"
    }, {
      "left" : "Memento newMementoChild = newMemento.createChild(\"sourceRoot\");",
      "right" : "Memento newMementoChild = newMemento.createChild(\"sourceRoot\");",
      "info" : "VariableDeclarationStatement[16349-16412]:VariableDeclarationStatement[16349-16412]"
    }, {
      "left" : "for (String path : paths)",
      "right" : "for (String path : paths)",
      "info" : "EnhancedForStatement[16425-16770]:EnhancedForStatement[16425-16770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16451-16770]:Block[16451-16770]"
    }, {
      "left" : "String convertedPath = convertPath(path, bundleHomeFile, sourcesDescriptorFile, descriptor);",
      "right" : "String convertedPath = convertPath(path, bundleHomeFile, sourcesDescriptorFile, descriptor);",
      "info" : "VariableDeclarationStatement[16467-16559]:VariableDeclarationStatement[16467-16559]"
    }, {
      "left" : "if (convertedPath != null)",
      "right" : "if (convertedPath != null)",
      "info" : "IfStatement[16574-16756]:IfStatement[16574-16756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16601-16756]:Block[16601-16756]"
    }, {
      "left" : "newMementoChild.put(\"location\", convertedPath.replace(newMemento.get(\"contentPath\"), \"\"));",
      "right" : "newMementoChild.put(\"location\", convertedPath.replace(newMemento.get(\"contentPath\"), \"\"));",
      "info" : "ExpressionStatement[16619-16709]:ExpressionStatement[16619-16709]"
    }, {
      "left" : "update = true;",
      "right" : "update = true;",
      "info" : "ExpressionStatement[16726-16740]:ExpressionStatement[16726-16740]"
    }, {
      "left" : "if (update)",
      "right" : "if (update)",
      "info" : "IfStatement[16793-16872]:IfStatement[16793-16872]"
    }, {
      "left" : "toAdd.add(new ModelRootDescriptor(rootDescriptorType, newMemento));",
      "right" : "toAdd.add(new ModelRootDescriptor(rootDescriptorType, newMemento));",
      "info" : "ExpressionStatement[16805-16872]:ExpressionStatement[16805-16872]"
    }, {
      "left" : "toRemove.add(rootDescriptor);",
      "right" : "toRemove.add(rootDescriptor);",
      "info" : "ExpressionStatement[16883-16912]:ExpressionStatement[16883-16912]"
    }, {
      "left" : "descriptor.getModelRootDescriptors().removeAll(toRemove);",
      "right" : "descriptor.getModelRootDescriptors().removeAll(toRemove);",
      "info" : "ExpressionStatement[16937-16994]:ExpressionStatement[16937-16994]"
    }, {
      "left" : "descriptor.getModelRootDescriptors().addAll(toAdd);",
      "right" : "descriptor.getModelRootDescriptors().addAll(toAdd);",
      "info" : "ExpressionStatement[17001-17052]:ExpressionStatement[17001-17052]"
    }, {
      "left" : "for (String jarFile : deplDescriptor.getLibraries())",
      "right" : "for (String jarFile : deplDescriptor.getLibraries())",
      "info" : "EnhancedForStatement[17073-17541]:EnhancedForStatement[17073-17541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17126-17541]:Block[17126-17541]"
    }, {
      "left" : "IFile jar = jarFile.startsWith(\"/\")\n          ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile)\n          : bundleParent.getDescendant(jarFile);",
      "right" : "IFile jar = jarFile.startsWith(\"/\")\n          ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile)\n          : bundleParent.getDescendant(jarFile);",
      "info" : "VariableDeclarationStatement[17134-17306]:VariableDeclarationStatement[17134-17306]"
    }, {
      "left" : "if (jar.exists())",
      "right" : "if (jar.exists())",
      "info" : "IfStatement[17313-17535]:IfStatement[17313-17535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17331-17535]:Block[17331-17535]"
    }, {
      "left" : "String path = jar.getPath();",
      "right" : "String path = jar.getPath();",
      "info" : "VariableDeclarationStatement[17341-17369]:VariableDeclarationStatement[17341-17369]"
    }, {
      "left" : "descriptor.getAdditionalJavaStubPaths().add(path);",
      "right" : "descriptor.getAdditionalJavaStubPaths().add(path);",
      "info" : "ExpressionStatement[17378-17428]:ExpressionStatement[17378-17428]"
    }, {
      "left" : "descriptor.getModelRootDescriptors().add(ModelRootDescriptor.getJavaStubsModelRoot(path));",
      "right" : "descriptor.getModelRootDescriptors().add(ModelRootDescriptor.getJavaStubsModelRoot(path));",
      "info" : "ExpressionStatement[17437-17527]:ExpressionStatement[17437-17527]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[17843-17852]:MarkerAnnotation[17843-17852]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17855-17862]:Modifier[17855-17862]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[17863-17869]:SimpleType[17863-17869]"
    }, {
      "left" : "convertPath",
      "right" : "convertPath",
      "info" : "SimpleName[17870-17881]:SimpleName[17870-17881]"
    }, {
      "left" : "String originalPath",
      "right" : "String originalPath",
      "info" : "SingleVariableDeclaration[17882-17901]:SingleVariableDeclaration[17882-17901]"
    }, {
      "left" : "IFile bundleHome",
      "right" : "IFile bundleHome",
      "info" : "SingleVariableDeclaration[17903-17919]:SingleVariableDeclaration[17903-17919]"
    }, {
      "left" : "IFile sourcesDescriptorFile",
      "right" : "IFile sourcesDescriptorFile",
      "info" : "SingleVariableDeclaration[17921-17948]:SingleVariableDeclaration[17921-17948]"
    }, {
      "left" : "ModuleDescriptor descriptor",
      "right" : "ModuleDescriptor descriptor",
      "info" : "SingleVariableDeclaration[17950-17977]:SingleVariableDeclaration[17950-17977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17979-19254]:Block[17979-19254]"
    }, {
      "left" : "MacroHelper macroHelper = MacrosFactory.forModuleFile(sourcesDescriptorFile);",
      "right" : "MacroHelper macroHelper = MacrosFactory.forModuleFile(sourcesDescriptorFile);",
      "info" : "VariableDeclarationStatement[17985-18062]:VariableDeclarationStatement[17985-18062]"
    }, {
      "left" : "String canonicalPath = FileUtil.getCanonicalPath(originalPath).toLowerCase();",
      "right" : "String canonicalPath = FileUtil.getCanonicalPath(originalPath).toLowerCase();",
      "info" : "VariableDeclarationStatement[18068-18145]:VariableDeclarationStatement[18068-18145]"
    }, {
      "left" : "String suffix = descriptor.getCompileInMPS() ? CLASSES_GEN : CLASSES;",
      "right" : "String suffix = descriptor.getCompileInMPS() ? CLASSES_GEN : CLASSES;",
      "info" : "VariableDeclarationStatement[18188-18257]:VariableDeclarationStatement[18188-18257]"
    }, {
      "left" : "if (canonicalPath.endsWith(suffix))",
      "right" : "if (canonicalPath.endsWith(suffix))",
      "info" : "IfStatement[18262-18810]:IfStatement[18262-18810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18298-18677]:Block[18298-18677]"
    }, {
      "left" : "String classes = macroHelper.expandPath(\"${module}/\" + suffix);",
      "right" : "String classes = macroHelper.expandPath(\"${module}/\" + suffix);",
      "info" : "VariableDeclarationStatement[18483-18546]:VariableDeclarationStatement[18483-18546]"
    }, {
      "left" : "if (FileUtil.getCanonicalPath(classes).equalsIgnoreCase(canonicalPath))",
      "right" : "if (FileUtil.getCanonicalPath(classes).equalsIgnoreCase(canonicalPath))",
      "info" : "IfStatement[18553-18671]:IfStatement[18553-18671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18625-18671]:Block[18625-18671]"
    }, {
      "left" : "return bundleHome.getPath();",
      "right" : "return bundleHome.getPath();",
      "info" : "ReturnStatement[18635-18663]:ReturnStatement[18635-18663]"
    }, {
      "left" : "if (FileUtil.getCanonicalPath(bundleHome.getPath()).equalsIgnoreCase(canonicalPath))",
      "right" : "if (FileUtil.getCanonicalPath(bundleHome.getPath()).equalsIgnoreCase(canonicalPath))",
      "info" : "IfStatement[18683-18810]:IfStatement[18683-18810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18768-18810]:Block[18768-18810]"
    }, {
      "left" : "return bundleHome.getPath();",
      "right" : "return bundleHome.getPath();",
      "info" : "ReturnStatement[18776-18804]:ReturnStatement[18776-18804]"
    }, {
      "left" : "String mpsHomeLibPath = FileUtil.getCanonicalPath(PathManager.getHomePath() + File.separator + \"lib\").toLowerCase();",
      "right" : "String mpsHomeLibPath = FileUtil.getCanonicalPath(PathManager.getHomePath() + File.separator + \"lib\").toLowerCase();",
      "info" : "VariableDeclarationStatement[18839-18955]:VariableDeclarationStatement[18839-18955]"
    }, {
      "left" : "if (canonicalPath.startsWith(mpsHomeLibPath))",
      "right" : "if (canonicalPath.startsWith(mpsHomeLibPath))",
      "info" : "IfStatement[18960-19041]:IfStatement[18960-19041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19006-19041]:Block[19006-19041]"
    }, {
      "left" : "return canonicalPath;",
      "right" : "return canonicalPath;",
      "info" : "ReturnStatement[19014-19035]:ReturnStatement[19014-19035]"
    }, {
      "left" : "if (MacrosFactory.containsNonMPSMacros(macroHelper.shrinkPath(originalPath)))",
      "right" : "if (MacrosFactory.containsNonMPSMacros(macroHelper.shrinkPath(originalPath)))",
      "info" : "IfStatement[19047-19250]:IfStatement[19047-19250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19125-19159]:Block[19125-19159]"
    }, {
      "left" : "return originalPath;",
      "right" : "return originalPath;",
      "info" : "ReturnStatement[19133-19153]:ReturnStatement[19133-19153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19165-19250]:Block[19165-19250]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19232-19244]:ReturnStatement[19232-19244]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19267-19276]:MarkerAnnotation[19267-19276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19279-19285]:Modifier[19279-19285]"
    }, {
      "left" : "Iterable<ModelRoot>",
      "right" : "Iterable<ModelRoot>",
      "info" : "ParameterizedType[19286-19305]:ParameterizedType[19286-19305]"
    }, {
      "left" : "getModelRoots",
      "right" : "getModelRoots",
      "info" : "SimpleName[19306-19319]:SimpleName[19306-19319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19322-19488]:Block[19322-19488]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[19406-19422]:ExpressionStatement[19406-19422]"
    }, {
      "left" : "return Collections.unmodifiableCollection(mySModelRoots);",
      "right" : "return Collections.unmodifiableCollection(mySModelRoots);",
      "info" : "ReturnStatement[19427-19484]:ReturnStatement[19427-19484]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[19492-19501]:Modifier[19492-19501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19502-19506]:PrimitiveType[19502-19506]"
    }, {
      "left" : "reloadAfterDescriptorChange",
      "right" : "reloadAfterDescriptorChange",
      "info" : "SimpleName[19507-19534]:SimpleName[19507-19534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19537-19569]:Block[19537-19569]"
    }, {
      "left" : "initFacetsAndModels();",
      "right" : "initFacetsAndModels();",
      "info" : "ExpressionStatement[19543-19565]:ExpressionStatement[19543-19565]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19573-19580]:Modifier[19573-19580]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19581-19585]:PrimitiveType[19581-19585]"
    }, {
      "left" : "initFacetsAndModels",
      "right" : "initFacetsAndModels",
      "info" : "SimpleName[19586-19605]:SimpleName[19586-19605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19608-19688]:Block[19608-19688]"
    }, {
      "left" : "updatePackagedDescriptor();",
      "right" : "updatePackagedDescriptor();",
      "info" : "ExpressionStatement[19614-19641]:ExpressionStatement[19614-19641]"
    }, {
      "left" : "updateFacets();",
      "right" : "updateFacets();",
      "info" : "ExpressionStatement[19646-19661]:ExpressionStatement[19646-19661]"
    }, {
      "left" : "updateModelsSet();",
      "right" : "updateModelsSet();",
      "info" : "ExpressionStatement[19666-19684]:ExpressionStatement[19666-19684]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[19692-19701]:Modifier[19692-19701]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19702-19706]:PrimitiveType[19702-19706]"
    }, {
      "left" : "collectFacetTypes",
      "right" : "collectFacetTypes",
      "info" : "SimpleName[19707-19724]:SimpleName[19707-19724]"
    }, {
      "left" : "Set<String> types",
      "right" : "Set<String> types",
      "info" : "SingleVariableDeclaration[19725-19742]:SingleVariableDeclaration[19725-19742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19744-20220]:Block[19744-20220]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[19750-19802]:VariableDeclarationStatement[19750-19802]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[19807-19852]:IfStatement[19807-19852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19831-19852]:Block[19831-19852]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19839-19846]:ReturnStatement[19839-19846]"
    }, {
      "left" : "types.addAll(FacetsFacade.getInstance().getApplicableFacetTypes(\n        new TranslatingIterator<SModuleReference, String>(descriptor.getUsedLanguages().iterator()) {\n          @Override\n          protected String translate(SModuleReference node) {\n            return node.getModuleName();\n          }\n        }));",
      "right" : "types.addAll(FacetsFacade.getInstance().getApplicableFacetTypes(\n        new TranslatingIterator<SModuleReference, String>(descriptor.getUsedLanguages().iterator()) {\n          @Override\n          protected String translate(SModuleReference node) {\n            return node.getModuleName();\n          }\n        }));",
      "info" : "ExpressionStatement[19858-20172]:ExpressionStatement[19858-20172]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20035-20044]:MarkerAnnotation[20035-20044]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20055-20064]:Modifier[20055-20064]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20065-20071]:SimpleType[20065-20071]"
    }, {
      "left" : "translate",
      "right" : "translate",
      "info" : "SimpleName[20072-20081]:SimpleName[20072-20081]"
    }, {
      "left" : "SModuleReference node",
      "right" : "SModuleReference node",
      "info" : "SingleVariableDeclaration[20082-20103]:SingleVariableDeclaration[20082-20103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20105-20159]:Block[20105-20159]"
    }, {
      "left" : "return node.getModuleName();",
      "right" : "return node.getModuleName();",
      "info" : "ReturnStatement[20119-20147]:ReturnStatement[20119-20147]"
    }, {
      "left" : "types.add(JavaModuleFacet.FACET_TYPE);",
      "right" : "types.add(JavaModuleFacet.FACET_TYPE);",
      "info" : "ExpressionStatement[20178-20216]:ExpressionStatement[20178-20216]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20224-20233]:Modifier[20224-20233]"
    }, {
      "left" : "ModuleFacetBase",
      "right" : "ModuleFacetBase",
      "info" : "SimpleType[20234-20249]:SimpleType[20234-20249]"
    }, {
      "left" : "setupFacet",
      "right" : "setupFacet",
      "info" : "SimpleName[20250-20260]:SimpleName[20250-20260]"
    }, {
      "left" : "ModuleFacetBase facet",
      "right" : "ModuleFacetBase facet",
      "info" : "SingleVariableDeclaration[20261-20282]:SingleVariableDeclaration[20261-20282]"
    }, {
      "left" : "Memento memento",
      "right" : "Memento memento",
      "info" : "SingleVariableDeclaration[20284-20299]:SingleVariableDeclaration[20284-20299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20301-20466]:Block[20301-20466]"
    }, {
      "left" : "if (!facet.setModule(this))",
      "right" : "if (!facet.setModule(this))",
      "info" : "IfStatement[20307-20361]:IfStatement[20307-20361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20335-20361]:Block[20335-20361]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20343-20355]:ReturnStatement[20343-20355]"
    }, {
      "left" : "facet.load(memento != null ? memento : new MementoImpl());",
      "right" : "facet.load(memento != null ? memento : new MementoImpl());",
      "info" : "ExpressionStatement[20366-20424]:ExpressionStatement[20366-20424]"
    }, {
      "left" : "facet.attach();",
      "right" : "facet.attach();",
      "info" : "ExpressionStatement[20429-20444]:ExpressionStatement[20429-20444]"
    }, {
      "left" : "return facet;",
      "right" : "return facet;",
      "info" : "ReturnStatement[20449-20462]:ReturnStatement[20449-20462]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20470-20479]:Modifier[20470-20479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20480-20484]:PrimitiveType[20480-20484]"
    }, {
      "left" : "updateFacets",
      "right" : "updateFacets",
      "info" : "SimpleName[20485-20497]:SimpleName[20485-20497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20500-21759]:Block[20500-21759]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[20506-20524]:ExpressionStatement[20506-20524]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[20530-20582]:VariableDeclarationStatement[20530-20582]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[20587-20632]:IfStatement[20587-20632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20611-20632]:Block[20611-20632]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20619-20626]:ReturnStatement[20619-20626]"
    }, {
      "left" : "for (ModuleFacetBase facet : myFacets)",
      "right" : "for (ModuleFacetBase facet : myFacets)",
      "info" : "EnhancedForStatement[20638-20707]:EnhancedForStatement[20638-20707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20677-20707]:Block[20677-20707]"
    }, {
      "left" : "facet.dispose();",
      "right" : "facet.dispose();",
      "info" : "ExpressionStatement[20685-20701]:ExpressionStatement[20685-20701]"
    }, {
      "left" : "myFacets.clear();",
      "right" : "myFacets.clear();",
      "info" : "ExpressionStatement[20712-20729]:ExpressionStatement[20712-20729]"
    }, {
      "left" : "Map<String, Memento> config = new HashMap<String, Memento>();",
      "right" : "Map<String, Memento> config = new HashMap<String, Memento>();",
      "info" : "VariableDeclarationStatement[20735-20796]:VariableDeclarationStatement[20735-20796]"
    }, {
      "left" : "for (ModuleFacetDescriptor facetDescriptors : descriptor.getModuleFacetDescriptors())",
      "right" : "for (ModuleFacetDescriptor facetDescriptors : descriptor.getModuleFacetDescriptors())",
      "info" : "EnhancedForStatement[20801-20971]:EnhancedForStatement[20801-20971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20887-20971]:Block[20887-20971]"
    }, {
      "left" : "config.put(facetDescriptors.getType(), facetDescriptors.getMemento());",
      "right" : "config.put(facetDescriptors.getType(), facetDescriptors.getMemento());",
      "info" : "ExpressionStatement[20895-20965]:ExpressionStatement[20895-20965]"
    }, {
      "left" : "Set<String> types = new HashSet<String>();",
      "right" : "Set<String> types = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[20977-21019]:VariableDeclarationStatement[20977-21019]"
    }, {
      "left" : "collectFacetTypes(types);",
      "right" : "collectFacetTypes(types);",
      "info" : "ExpressionStatement[21024-21049]:ExpressionStatement[21024-21049]"
    }, {
      "left" : "types.addAll(config.keySet());",
      "right" : "types.addAll(config.keySet());",
      "info" : "ExpressionStatement[21054-21084]:ExpressionStatement[21054-21084]"
    }, {
      "left" : "for (String facetType : types)",
      "right" : "for (String facetType : types)",
      "info" : "EnhancedForStatement[21090-21755]:EnhancedForStatement[21090-21755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21121-21755]:Block[21121-21755]"
    }, {
      "left" : "FacetFactory factory = FacetsFacade.getInstance().getFacetFactory(facetType);",
      "right" : "FacetFactory factory = FacetsFacade.getInstance().getFacetFactory(facetType);",
      "info" : "VariableDeclarationStatement[21129-21206]:VariableDeclarationStatement[21129-21206]"
    }, {
      "left" : "if (factory == null)",
      "right" : "if (factory == null)",
      "info" : "IfStatement[21213-21347]:IfStatement[21213-21347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21234-21347]:Block[21234-21347]"
    }, {
      "left" : "LOG.error(\"no registered factory for a facet with type=`\" + facetType + \"'\");",
      "right" : "LOG.error(\"no registered factory for a facet with type=`\" + facetType + \"'\");",
      "info" : "ExpressionStatement[21244-21321]:ExpressionStatement[21244-21321]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21330-21339]:ContinueStatement[21330-21339]"
    }, {
      "left" : "SModuleFacet newFacet = factory.create();",
      "right" : "SModuleFacet newFacet = factory.create();",
      "info" : "VariableDeclarationStatement[21354-21395]:VariableDeclarationStatement[21354-21395]"
    }, {
      "left" : "if (!(newFacet instanceof ModuleFacetBase))",
      "right" : "if (!(newFacet instanceof ModuleFacetBase))",
      "info" : "IfStatement[21402-21549]:IfStatement[21402-21549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21446-21549]:Block[21446-21549]"
    }, {
      "left" : "LOG.error(\"broken facet factory: \" + factory.getClass().getName());",
      "right" : "LOG.error(\"broken facet factory: \" + factory.getClass().getName());",
      "info" : "ExpressionStatement[21456-21523]:ExpressionStatement[21456-21523]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21532-21541]:ContinueStatement[21532-21541]"
    }, {
      "left" : "ModuleFacetBase facet = (ModuleFacetBase) newFacet;",
      "right" : "ModuleFacetBase facet = (ModuleFacetBase) newFacet;",
      "info" : "VariableDeclarationStatement[21557-21608]:VariableDeclarationStatement[21557-21608]"
    }, {
      "left" : "Memento m = config.get(facetType);",
      "right" : "Memento m = config.get(facetType);",
      "info" : "VariableDeclarationStatement[21615-21649]:VariableDeclarationStatement[21615-21649]"
    }, {
      "left" : "facet = setupFacet(facet, m);",
      "right" : "facet = setupFacet(facet, m);",
      "info" : "ExpressionStatement[21656-21685]:ExpressionStatement[21656-21685]"
    }, {
      "left" : "if (facet != null)",
      "right" : "if (facet != null)",
      "info" : "IfStatement[21692-21749]:IfStatement[21692-21749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21711-21749]:Block[21711-21749]"
    }, {
      "left" : "myFacets.add(facet);",
      "right" : "myFacets.add(facet);",
      "info" : "ExpressionStatement[21721-21741]:ExpressionStatement[21721-21741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21763-21769]:Modifier[21763-21769]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21770-21774]:PrimitiveType[21770-21774]"
    }, {
      "left" : "onModuleLoad",
      "right" : "onModuleLoad",
      "info" : "SimpleName[21775-21787]:SimpleName[21775-21787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21790-21855]:Block[21790-21855]"
    }, {
      "left" : "updateSModelReferences();",
      "right" : "updateSModelReferences();",
      "info" : "ExpressionStatement[21796-21821]:ExpressionStatement[21796-21821]"
    }, {
      "left" : "updateModuleReferences();",
      "right" : "updateModuleReferences();",
      "info" : "ExpressionStatement[21826-21851]:ExpressionStatement[21826-21851]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21859-21868]:MarkerAnnotation[21859-21868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21871-21877]:Modifier[21871-21877]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21878-21885]:PrimitiveType[21878-21885]"
    }, {
      "left" : "isReadOnly",
      "right" : "isReadOnly",
      "info" : "SimpleName[21886-21896]:SimpleName[21886-21896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21899-22018]:Block[21899-22018]"
    }, {
      "left" : "return isPackaged();",
      "right" : "return isPackaged();",
      "info" : "ReturnStatement[21994-22014]:ReturnStatement[21994-22014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22022-22031]:MarkerAnnotation[22022-22031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22034-22040]:Modifier[22034-22040]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22041-22048]:PrimitiveType[22041-22048]"
    }, {
      "left" : "isPackaged",
      "right" : "isPackaged",
      "info" : "SimpleName[22049-22059]:SimpleName[22049-22059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22062-22258]:Block[22062-22258]"
    }, {
      "left" : "return getModuleSourceDir() == null || FileSystem.getInstance().isPackaged(getModuleSourceDir());",
      "right" : "return getModuleSourceDir() == null || FileSystem.getInstance().isPackaged(getModuleSourceDir());",
      "info" : "ReturnStatement[22157-22254]:ReturnStatement[22157-22254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22540-22546]:Modifier[22540-22546]"
    }, {
      "left" : "IFile",
      "right" : "IFile",
      "info" : "SimpleType[22547-22552]:SimpleType[22547-22552]"
    }, {
      "left" : "getModuleSourceDir",
      "right" : "getModuleSourceDir",
      "info" : "SimpleName[22553-22571]:SimpleName[22553-22571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22574-22654]:Block[22574-22654]"
    }, {
      "left" : "return myDescriptorFile != null ? myDescriptorFile.getParent() : null;",
      "right" : "return myDescriptorFile != null ? myDescriptorFile.getParent() : null;",
      "info" : "ReturnStatement[22580-22650]:ReturnStatement[22580-22650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22658-22664]:Modifier[22658-22664]"
    }, {
      "left" : "IFile",
      "right" : "IFile",
      "info" : "SimpleType[22665-22670]:SimpleType[22665-22670]"
    }, {
      "left" : "getDescriptorFile",
      "right" : "getDescriptorFile",
      "info" : "SimpleName[22671-22688]:SimpleName[22671-22688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22691-22822]:Block[22691-22822]"
    }, {
      "left" : "return myDescriptorFile;",
      "right" : "return myDescriptorFile;",
      "info" : "ReturnStatement[22794-22818]:ReturnStatement[22794-22818]"
    }, {
      "left" : "public",
      "right" : "protected",
      "info" : "Modifier[22826-22832]:Modifier[23280-23289]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22833-22837]:PrimitiveType[23290-23294]"
    }, {
      "left" : "rename",
      "right" : "renameModels",
      "info" : "SimpleName[22838-22844]:SimpleName[23295-23307]"
    }, {
      "left" : "String newName",
      "right" : "String newName",
      "info" : "SingleVariableDeclaration[22845-22859]:SingleVariableDeclaration[23324-23338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22861-23618]:Block[23340-23723]"
    }, {
      "left" : "for (SModel m : getModels())",
      "right" : "for (SModel m : getModels())",
      "info" : "EnhancedForStatement[22945-23248]:EnhancedForStatement[23424-23719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22974-23248]:Block[23453-23719]"
    }, {
      "left" : "if (m.isReadOnly())",
      "right" : "if (m.isReadOnly())",
      "info" : "IfStatement[22982-23011]:IfStatement[23461-23490]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23002-23011]:ContinueStatement[23481-23490]"
    }, {
      "left" : "if (!m.getModelName().startsWith(getModuleName() + \".\"))",
      "right" : "if (!m.getModelName().startsWith(oldName + \".\"))",
      "info" : "IfStatement[23018-23084]:IfStatement[23497-23555]"
    }, {
      "left" : "getModuleName()",
      "right" : "getModuleName()",
      "info" : "MethodInvocation[23051-23066]:MethodInvocation[22880-22895]"
    }, {
      "left" : "getModuleName() + \".\"",
      "right" : "getModuleName(), newName",
      "info" : "METHOD_INVOCATION_ARGUMENTS[23051-23072]:METHOD_INVOCATION_ARGUMENTS[22880-22904]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23075-23084]:ContinueStatement[23546-23555]"
    }, {
      "left" : "if (!(m instanceof EditableSModel))",
      "right" : "if (!(m instanceof EditableSModel))",
      "info" : "IfStatement[23091-23136]:IfStatement[23562-23607]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23127-23136]:ContinueStatement[23598-23607]"
    }, {
      "left" : "((EditableSModel) m).rename(newName + m.getModelName().substring(getModuleName().length()), true);",
      "right" : "((EditableSModel) m).rename(newName + m.getModelName().substring(getModuleName().length()), true);",
      "info" : "ExpressionStatement[23144-23242]:ExpressionStatement[23615-23713]"
    }, {
      "left" : "getRepository().saveAll();",
      "right" : "getRepository().saveAll();",
      "info" : "ExpressionStatement[23314-23340]:ExpressionStatement[22972-22998]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[23346-23398]:VariableDeclarationStatement[23004-23056]"
    }, {
      "left" : "if (myDescriptorFile != null)",
      "right" : "if (myDescriptorFile != null)",
      "info" : "IfStatement[23403-23538]:IfStatement[23061-23196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23433-23538]:Block[23091-23196]"
    }, {
      "left" : "myDescriptorFile.rename(newName + \".\" + FileUtil.getExtension(myDescriptorFile.getName()));",
      "right" : "myDescriptorFile.rename(newName + \".\" + FileUtil.getExtension(myDescriptorFile.getName()));",
      "info" : "ExpressionStatement[23441-23532]:ExpressionStatement[23099-23190]"
    }, {
      "left" : "descriptor.setNamespace(newName);",
      "right" : "descriptor.setNamespace(newName);",
      "info" : "ExpressionStatement[23544-23577]:ExpressionStatement[23202-23235]"
    }, {
      "left" : "setModuleDescriptor(descriptor);",
      "right" : "setModuleDescriptor(descriptor);",
      "info" : "ExpressionStatement[23582-23614]:ExpressionStatement[23240-23272]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[23622-23630]:MarkerAnnotation[23727-23735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23633-23639]:Modifier[23738-23744]"
    }, {
      "left" : "SearchScope",
      "right" : "SearchScope",
      "info" : "SimpleType[23640-23651]:SimpleType[23745-23756]"
    }, {
      "left" : "getScope",
      "right" : "getScope",
      "info" : "SimpleName[23652-23660]:SimpleName[23757-23765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23663-23709]:Block[23768-23814]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[23669-23685]:ExpressionStatement[23774-23790]"
    }, {
      "left" : "return myScope;",
      "right" : "return myScope;",
      "info" : "ReturnStatement[23690-23705]:ReturnStatement[23795-23810]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23713-23722]:MarkerAnnotation[23818-23827]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23725-23731]:Modifier[23830-23836]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23732-23736]:PrimitiveType[23837-23841]"
    }, {
      "left" : "attach",
      "right" : "attach",
      "info" : "SimpleName[23737-23743]:SimpleName[23842-23848]"
    }, {
      "left" : "@NotNull SRepository repository",
      "right" : "@NotNull SRepository repository",
      "info" : "SingleVariableDeclaration[23744-23775]:SingleVariableDeclaration[23849-23880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23777-23931]:Block[23882-24036]"
    }, {
      "left" : "super.attach(repository);",
      "right" : "super.attach(repository);",
      "info" : "ExpressionStatement[23783-23808]:ExpressionStatement[23888-23913]"
    }, {
      "left" : "if (myDescriptorFile != null)",
      "right" : "if (myDescriptorFile != null)",
      "info" : "IfStatement[23813-23900]:IfStatement[23918-24005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23843-23900]:Block[23948-24005]"
    }, {
      "left" : "FileSystem.getInstance().addListener(this);",
      "right" : "FileSystem.getInstance().addListener(this);",
      "info" : "ExpressionStatement[23851-23894]:ExpressionStatement[23956-23999]"
    }, {
      "left" : "initFacetsAndModels();",
      "right" : "initFacetsAndModels();",
      "info" : "ExpressionStatement[23905-23927]:ExpressionStatement[24010-24032]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[23935-23944]:MarkerAnnotation[24040-24049]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23947-23956]:MarkerAnnotation[24052-24061]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23959-23965]:Modifier[24064-24070]"
    }, {
      "left" : "IFile",
      "right" : "IFile",
      "info" : "SimpleType[23966-23971]:SimpleType[24071-24076]"
    }, {
      "left" : "getFileToListen",
      "right" : "getFileToListen",
      "info" : "SimpleName[23972-23987]:SimpleName[24077-24092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23990-24024]:Block[24095-24129]"
    }, {
      "left" : "return myDescriptorFile;",
      "right" : "return myDescriptorFile;",
      "info" : "ReturnStatement[23996-24020]:ReturnStatement[24101-24125]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24028-24037]:MarkerAnnotation[24133-24142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24040-24046]:Modifier[24145-24151]"
    }, {
      "left" : "Iterable<FileSystemListener>",
      "right" : "Iterable<FileSystemListener>",
      "info" : "ParameterizedType[24047-24075]:ParameterizedType[24152-24180]"
    }, {
      "left" : "getListenerDependencies",
      "right" : "getListenerDependencies",
      "info" : "SimpleName[24076-24099]:SimpleName[24181-24204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24102-24435]:Block[24207-24540]"
    }, {
      "left" : "List<FileSystemListener> listeners = new ArrayList<FileSystemListener>();",
      "right" : "List<FileSystemListener> listeners = new ArrayList<FileSystemListener>();",
      "info" : "VariableDeclarationStatement[24108-24181]:VariableDeclarationStatement[24213-24286]"
    }, {
      "left" : "for (MPSModuleOwner owner : MPSModuleRepository.getInstance().getOwners(this))",
      "right" : "for (MPSModuleOwner owner : MPSModuleRepository.getInstance().getOwners(this))",
      "info" : "EnhancedForStatement[24186-24380]:EnhancedForStatement[24291-24485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24265-24380]:Block[24370-24485]"
    }, {
      "left" : "if (owner instanceof FileSystemListener)",
      "right" : "if (owner instanceof FileSystemListener)",
      "info" : "IfStatement[24273-24374]:IfStatement[24378-24479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24314-24374]:Block[24419-24479]"
    }, {
      "left" : "listeners.add((FileSystemListener) owner);",
      "right" : "listeners.add((FileSystemListener) owner);",
      "info" : "ExpressionStatement[24324-24366]:ExpressionStatement[24429-24471]"
    }, {
      "left" : "return listeners.isEmpty() ? null : listeners;",
      "right" : "return listeners.isEmpty() ? null : listeners;",
      "info" : "ReturnStatement[24385-24431]:ReturnStatement[24490-24536]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24439-24448]:MarkerAnnotation[24544-24553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24451-24457]:Modifier[24556-24562]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24458-24462]:PrimitiveType[24563-24567]"
    }, {
      "left" : "update",
      "right" : "update",
      "info" : "SimpleName[24463-24469]:SimpleName[24568-24574]"
    }, {
      "left" : "ProgressMonitor monitor",
      "right" : "ProgressMonitor monitor",
      "info" : "SingleVariableDeclaration[24470-24493]:SingleVariableDeclaration[24575-24598]"
    }, {
      "left" : "FileSystemEvent event",
      "right" : "FileSystemEvent event",
      "info" : "SingleVariableDeclaration[24495-24516]:SingleVariableDeclaration[24600-24621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24518-24899]:Block[24623-25004]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[24524-24542]:ExpressionStatement[24629-24647]"
    }, {
      "left" : "for (IFile file : event.getRemoved())",
      "right" : "for (IFile file : event.getRemoved())",
      "info" : "EnhancedForStatement[24547-24730]:EnhancedForStatement[24652-24835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24585-24730]:Block[24690-24835]"
    }, {
      "left" : "if (file.equals(myDescriptorFile))",
      "right" : "if (file.equals(myDescriptorFile))",
      "info" : "IfStatement[24593-24724]:IfStatement[24698-24829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24628-24724]:Block[24733-24829]"
    }, {
      "left" : "ModuleRepositoryFacade.getInstance().removeModuleForced(this);",
      "right" : "ModuleRepositoryFacade.getInstance().removeModuleForced(this);",
      "info" : "ExpressionStatement[24638-24700]:ExpressionStatement[24743-24805]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24709-24716]:ReturnStatement[24814-24821]"
    }, {
      "left" : "for (IFile file : event.getChanged())",
      "right" : "for (IFile file : event.getChanged())",
      "info" : "EnhancedForStatement[24735-24895]:EnhancedForStatement[24840-25000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24773-24895]:Block[24878-25000]"
    }, {
      "left" : "if (file.equals(myDescriptorFile))",
      "right" : "if (file.equals(myDescriptorFile))",
      "info" : "IfStatement[24781-24889]:IfStatement[24886-24994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24816-24889]:Block[24921-24994]"
    }, {
      "left" : "SModuleOperations.reloadFromDisk(this);",
      "right" : "SModuleOperations.reloadFromDisk(this);",
      "info" : "ExpressionStatement[24826-24865]:ExpressionStatement[24931-24970]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24874-24881]:ReturnStatement[24979-24986]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24903-24912]:MarkerAnnotation[25008-25017]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24915-24921]:Modifier[25020-25026]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24922-24928]:SimpleType[25027-25033]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[24929-24937]:SimpleName[25034-25042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24940-25021]:Block[25045-25126]"
    }, {
      "left" : "String namespace = getModuleName();",
      "right" : "String namespace = getModuleName();",
      "info" : "VariableDeclarationStatement[24946-24981]:VariableDeclarationStatement[25051-25086]"
    }, {
      "left" : "return namespace + \" [module]\";",
      "right" : "return namespace + \" [module]\";",
      "info" : "ReturnStatement[24986-25017]:ReturnStatement[25091-25122]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[25081-25092]:MarkerAnnotation[25186-25197]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25095-25101]:Modifier[25200-25206]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25102-25108]:SimpleType[25207-25213]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[25109-25116]:SimpleName[25214-25221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25119-25152]:Block[25224-25257]"
    }, {
      "left" : "return getModuleName();",
      "right" : "return getModuleName();",
      "info" : "ReturnStatement[25125-25148]:ReturnStatement[25230-25253]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25156-25165]:MarkerAnnotation[25261-25270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25168-25174]:Modifier[25273-25279]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25175-25179]:PrimitiveType[25280-25284]"
    }, {
      "left" : "dispose",
      "right" : "dispose",
      "info" : "SimpleName[25180-25187]:SimpleName[25285-25292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25190-25535]:Block[25295-25640]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[25196-25214]:ExpressionStatement[25301-25319]"
    }, {
      "left" : "LOG.trace(\"Disposing the module \" + this);",
      "right" : "LOG.trace(\"Disposing the module \" + this);",
      "info" : "ExpressionStatement[25219-25261]:ExpressionStatement[25324-25366]"
    }, {
      "left" : "FileSystem.getInstance().removeListener(this);",
      "right" : "FileSystem.getInstance().removeListener(this);",
      "info" : "ExpressionStatement[25266-25312]:ExpressionStatement[25371-25417]"
    }, {
      "left" : "for (ModuleFacetBase f : myFacets)",
      "right" : "for (ModuleFacetBase f : myFacets)",
      "info" : "EnhancedForStatement[25317-25378]:EnhancedForStatement[25422-25483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25352-25378]:Block[25457-25483]"
    }, {
      "left" : "f.dispose();",
      "right" : "f.dispose();",
      "info" : "ExpressionStatement[25360-25372]:ExpressionStatement[25465-25477]"
    }, {
      "left" : "myFacets.clear();",
      "right" : "myFacets.clear();",
      "info" : "ExpressionStatement[25383-25400]:ExpressionStatement[25488-25505]"
    }, {
      "left" : "for (ModelRoot m : mySModelRoots)",
      "right" : "for (ModelRoot m : mySModelRoots)",
      "info" : "EnhancedForStatement[25405-25483]:EnhancedForStatement[25510-25588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25439-25483]:Block[25544-25588]"
    }, {
      "left" : "((ModelRootBase) m).dispose();",
      "right" : "((ModelRootBase) m).dispose();",
      "info" : "ExpressionStatement[25447-25477]:ExpressionStatement[25552-25582]"
    }, {
      "left" : "mySModelRoots.clear();",
      "right" : "mySModelRoots.clear();",
      "info" : "ExpressionStatement[25488-25510]:ExpressionStatement[25593-25615]"
    }, {
      "left" : "super.dispose();",
      "right" : "super.dispose();",
      "info" : "ExpressionStatement[25515-25531]:ExpressionStatement[25620-25636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25539-25545]:Modifier[25644-25650]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[25546-25558]:ParameterizedType[25651-25663]"
    }, {
      "left" : "getSourcePaths",
      "right" : "getSourcePaths",
      "info" : "SimpleName[25559-25573]:SimpleName[25664-25678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25576-25679]:Block[25681-25784]"
    }, {
      "left" : "assertCanRead();",
      "right" : "assertCanRead();",
      "info" : "ExpressionStatement[25582-25598]:ExpressionStatement[25687-25703]"
    }, {
      "left" : "return new ArrayList<String>(SModuleOperations.getAllSourcePaths(this));",
      "right" : "return new ArrayList<String>(SModuleOperations.getAllSourcePaths(this));",
      "info" : "ReturnStatement[25603-25675]:ReturnStatement[25708-25780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25683-25689]:Modifier[25788-25794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25690-25694]:PrimitiveType[25795-25799]"
    }, {
      "left" : "updateModelsSet",
      "right" : "updateModelsSet",
      "info" : "SimpleName[25695-25710]:SimpleName[25800-25815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25713-25743]:Block[25818-25848]"
    }, {
      "left" : "doUpdateModelsSet();",
      "right" : "doUpdateModelsSet();",
      "info" : "ExpressionStatement[25719-25739]:ExpressionStatement[25824-25844]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[25747-25756]:Modifier[25852-25861]"
    }, {
      "left" : "Iterable<ModelRoot>",
      "right" : "Iterable<ModelRoot>",
      "info" : "ParameterizedType[25757-25776]:ParameterizedType[25862-25881]"
    }, {
      "left" : "loadRoots",
      "right" : "loadRoots",
      "info" : "SimpleName[25777-25786]:SimpleName[25882-25891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25789-26671]:Block[25894-26776]"
    }, {
      "left" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor descriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[25795-25847]:VariableDeclarationStatement[25900-25952]"
    }, {
      "left" : "if (descriptor == null)",
      "right" : "if (descriptor == null)",
      "info" : "IfStatement[25852-25921]:IfStatement[25957-26026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25876-25921]:Block[25981-26026]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[25884-25915]:ReturnStatement[25989-26020]"
    }, {
      "left" : "List<ModelRoot> result = new ArrayList<ModelRoot>();",
      "right" : "List<ModelRoot> result = new ArrayList<ModelRoot>();",
      "info" : "VariableDeclarationStatement[25927-25979]:VariableDeclarationStatement[26032-26084]"
    }, {
      "left" : "for (ModelRootDescriptor modelRoot : descriptor.getModelRootDescriptors())",
      "right" : "for (ModelRootDescriptor modelRoot : descriptor.getModelRootDescriptors())",
      "info" : "EnhancedForStatement[25984-26648]:EnhancedForStatement[26089-26753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26059-26648]:Block[26164-26753]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26067-26642]:TryStatement[26172-26747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26071-26492]:Block[26176-26597]"
    }, {
      "left" : "ModelRootFactory modelRootFactory = PersistenceFacade.getInstance().getModelRootFactory(modelRoot.getType());",
      "right" : "ModelRootFactory modelRootFactory = PersistenceFacade.getInstance().getModelRootFactory(modelRoot.getType());",
      "info" : "VariableDeclarationStatement[26081-26190]:VariableDeclarationStatement[26186-26295]"
    }, {
      "left" : "if (modelRootFactory == null)",
      "right" : "if (modelRootFactory == null)",
      "info" : "IfStatement[26199-26362]:IfStatement[26304-26467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26229-26362]:Block[26334-26467]"
    }, {
      "left" : "LOG.error(\"Unknown model root type: `\" + modelRoot.getType() + \"'. Requested by: \" + this);",
      "right" : "LOG.error(\"Unknown model root type: `\" + modelRoot.getType() + \"'. Requested by: \" + this);",
      "info" : "ExpressionStatement[26241-26332]:ExpressionStatement[26346-26437]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26343-26352]:ContinueStatement[26448-26457]"
    }, {
      "left" : "ModelRoot root = modelRootFactory.create();",
      "right" : "ModelRoot root = modelRootFactory.create();",
      "info" : "VariableDeclarationStatement[26372-26415]:VariableDeclarationStatement[26477-26520]"
    }, {
      "left" : "root.load(modelRoot.getMemento());",
      "right" : "root.load(modelRoot.getMemento());",
      "info" : "ExpressionStatement[26424-26458]:ExpressionStatement[26529-26563]"
    }, {
      "left" : "result.add(root);",
      "right" : "result.add(root);",
      "info" : "ExpressionStatement[26467-26484]:ExpressionStatement[26572-26589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26513-26642]:Block[26618-26747]"
    }, {
      "left" : "LOG.error(\"Error loading models from root with type: `\" + modelRoot.getType() + \"'. Requested by: \" + this, e);",
      "right" : "LOG.error(\"Error loading models from root with type: `\" + modelRoot.getType() + \"'. Requested by: \" + this, e);",
      "info" : "ExpressionStatement[26523-26634]:ExpressionStatement[26628-26739]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26653-26667]:ReturnStatement[26758-26772]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26675-26682]:Modifier[26780-26787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26683-26687]:PrimitiveType[26788-26792]"
    }, {
      "left" : "doUpdateModelsSet",
      "right" : "doUpdateModelsSet",
      "info" : "SimpleName[26688-26705]:SimpleName[26793-26810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26708-28211]:Block[26813-28316]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[26714-26732]:ExpressionStatement[26819-26837]"
    }, {
      "left" : "for (SModel model : getModels())",
      "right" : "for (SModel model : getModels())",
      "info" : "EnhancedForStatement[26738-27207]:EnhancedForStatement[26843-27312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26771-27207]:Block[26876-27312]"
    }, {
      "left" : "if (model instanceof EditableSModel && ((EditableSModel) model).isChanged())",
      "right" : "if (model instanceof EditableSModel && ((EditableSModel) model).isChanged())",
      "info" : "IfStatement[26779-27201]:IfStatement[26884-27306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26856-27201]:Block[26961-27306]"
    }, {
      "left" : "LOG.error(\n            \"Trying to reload module \" + getModuleName() + \" which contains a non-saved model\" +\n                model.getModelName() + \"To prevent data loss, MPS will not update models in this module. \" +\n                \"Please save your work and restart MPS. See MPS-18743 for details.\"\n        );",
      "right" : "LOG.error(\n            \"Trying to reload module \" + getModuleName() + \" which contains a non-saved model\" +\n                model.getModelName() + \"To prevent data loss, MPS will not update models in this module. \" +\n                \"Please save your work and restart MPS. See MPS-18743 for details.\"\n        );",
      "info" : "ExpressionStatement[26866-27177]:ExpressionStatement[26971-27282]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27186-27193]:ReturnStatement[27291-27298]"
    }, {
      "left" : "Set<ModelRoot> toRemove = new HashSet<ModelRoot>(mySModelRoots);",
      "right" : "Set<ModelRoot> toRemove = new HashSet<ModelRoot>(mySModelRoots);",
      "info" : "VariableDeclarationStatement[27213-27277]:VariableDeclarationStatement[27318-27382]"
    }, {
      "left" : "Set<ModelRoot> toUpdate = new HashSet<ModelRoot>(mySModelRoots);",
      "right" : "Set<ModelRoot> toUpdate = new HashSet<ModelRoot>(mySModelRoots);",
      "info" : "VariableDeclarationStatement[27282-27346]:VariableDeclarationStatement[27387-27451]"
    }, {
      "left" : "Set<ModelRoot> toAttach = new HashSet<ModelRoot>();",
      "right" : "Set<ModelRoot> toAttach = new HashSet<ModelRoot>();",
      "info" : "VariableDeclarationStatement[27351-27402]:VariableDeclarationStatement[27456-27507]"
    }, {
      "left" : "for (ModelRoot root : loadRoots())",
      "right" : "for (ModelRoot root : loadRoots())",
      "info" : "EnhancedForStatement[27408-27746]:EnhancedForStatement[27513-27851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27443-27746]:Block[27548-27851]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27451-27740]:TryStatement[27556-27845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27455-27598]:Block[27560-27703]"
    }, {
      "left" : "if (mySModelRoots.contains(root))",
      "right" : "if (mySModelRoots.contains(root))",
      "info" : "IfStatement[27465-27590]:IfStatement[27570-27695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27499-27543]:Block[27604-27648]"
    }, {
      "left" : "toRemove.remove(root);",
      "right" : "toRemove.remove(root);",
      "info" : "ExpressionStatement[27511-27533]:ExpressionStatement[27616-27638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27549-27590]:Block[27654-27695]"
    }, {
      "left" : "toAttach.add(root);",
      "right" : "toAttach.add(root);",
      "info" : "ExpressionStatement[27561-27580]:ExpressionStatement[27666-27685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27619-27740]:Block[27724-27845]"
    }, {
      "left" : "LOG.error(\"Error loading models from root `\" + root.getPresentation() + \"'. Requested by: \" + this, e);",
      "right" : "LOG.error(\"Error loading models from root `\" + root.getPresentation() + \"'. Requested by: \" + this, e);",
      "info" : "ExpressionStatement[27629-27732]:ExpressionStatement[27734-27837]"
    }, {
      "left" : "toUpdate.removeAll(toRemove);",
      "right" : "toUpdate.removeAll(toRemove);",
      "info" : "ExpressionStatement[27751-27780]:ExpressionStatement[27856-27885]"
    }, {
      "left" : "for (ModelRoot modelRoot : toRemove)",
      "right" : "for (ModelRoot modelRoot : toRemove)",
      "info" : "EnhancedForStatement[27786-27875]:EnhancedForStatement[27891-27980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27823-27875]:Block[27928-27980]"
    }, {
      "left" : "((ModelRootBase) modelRoot).dispose();",
      "right" : "((ModelRootBase) modelRoot).dispose();",
      "info" : "ExpressionStatement[27831-27869]:ExpressionStatement[27936-27974]"
    }, {
      "left" : "mySModelRoots.removeAll(toRemove);",
      "right" : "mySModelRoots.removeAll(toRemove);",
      "info" : "ExpressionStatement[27880-27914]:ExpressionStatement[27985-28019]"
    }, {
      "left" : "for (ModelRoot modelRoot : toAttach)",
      "right" : "for (ModelRoot modelRoot : toAttach)",
      "info" : "EnhancedForStatement[27919-28114]:EnhancedForStatement[28024-28219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27956-28114]:Block[28061-28219]"
    }, {
      "left" : "ModelRootBase rootBase = (ModelRootBase) modelRoot;",
      "right" : "ModelRootBase rootBase = (ModelRootBase) modelRoot;",
      "info" : "VariableDeclarationStatement[27964-28015]:VariableDeclarationStatement[28069-28120]"
    }, {
      "left" : "rootBase.setModule(this);",
      "right" : "rootBase.setModule(this);",
      "info" : "ExpressionStatement[28022-28047]:ExpressionStatement[28127-28152]"
    }, {
      "left" : "mySModelRoots.add(modelRoot);",
      "right" : "mySModelRoots.add(modelRoot);",
      "info" : "ExpressionStatement[28054-28083]:ExpressionStatement[28159-28188]"
    }, {
      "left" : "rootBase.attach();",
      "right" : "rootBase.attach();",
      "info" : "ExpressionStatement[28090-28108]:ExpressionStatement[28195-28213]"
    }, {
      "left" : "for (ModelRoot modelRoot : toUpdate)",
      "right" : "for (ModelRoot modelRoot : toUpdate)",
      "info" : "EnhancedForStatement[28119-28207]:EnhancedForStatement[28224-28312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28156-28207]:Block[28261-28312]"
    }, {
      "left" : "((ModelRootBase) modelRoot).update();",
      "right" : "((ModelRootBase) modelRoot).update();",
      "info" : "ExpressionStatement[28164-28201]:ExpressionStatement[28269-28306]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28215-28221]:Modifier[28320-28326]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28222-28228]:Modifier[28327-28333]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28229-28233]:PrimitiveType[28334-28338]"
    }, {
      "left" : "handleReadProblem",
      "right" : "handleReadProblem",
      "info" : "SimpleName[28234-28251]:SimpleName[28339-28356]"
    }, {
      "left" : "AbstractModule module",
      "right" : "AbstractModule module",
      "info" : "SingleVariableDeclaration[28252-28273]:SingleVariableDeclaration[28357-28378]"
    }, {
      "left" : "Exception e",
      "right" : "Exception e",
      "info" : "SingleVariableDeclaration[28275-28286]:SingleVariableDeclaration[28380-28391]"
    }, {
      "left" : "boolean isInConflict",
      "right" : "boolean isInConflict",
      "info" : "SingleVariableDeclaration[28288-28308]:SingleVariableDeclaration[28393-28413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28310-28457]:Block[28415-28562]"
    }, {
      "left" : "SuspiciousModelHandler.getHandler().handleSuspiciousModule(module, isInConflict);",
      "right" : "SuspiciousModelHandler.getHandler().handleSuspiciousModule(module, isInConflict);",
      "info" : "ExpressionStatement[28316-28397]:ExpressionStatement[28421-28502]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[28402-28428]:ExpressionStatement[28507-28533]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[28433-28453]:ExpressionStatement[28538-28558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28461-28467]:Modifier[28566-28572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28468-28472]:PrimitiveType[28573-28577]"
    }, {
      "left" : "updateSModelReferences",
      "right" : "updateSModelReferences",
      "info" : "SimpleName[28473-28495]:SimpleName[28578-28600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28498-28680]:Block[28603-28785]"
    }, {
      "left" : "ModuleDescriptor moduleDescriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor moduleDescriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[28504-28562]:VariableDeclarationStatement[28609-28667]"
    }, {
      "left" : "if (moduleDescriptor == null)",
      "right" : "if (moduleDescriptor == null)",
      "info" : "IfStatement[28567-28604]:IfStatement[28672-28709]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28597-28604]:ReturnStatement[28702-28709]"
    }, {
      "left" : "if (moduleDescriptor.updateModelRefs())",
      "right" : "if (moduleDescriptor.updateModelRefs())",
      "info" : "IfStatement[28609-28676]:IfStatement[28714-28781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28649-28676]:Block[28754-28781]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[28657-28670]:ExpressionStatement[28762-28775]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28684-28690]:Modifier[28789-28795]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28691-28695]:PrimitiveType[28796-28800]"
    }, {
      "left" : "updateModuleReferences",
      "right" : "updateModuleReferences",
      "info" : "SimpleName[28696-28718]:SimpleName[28801-28823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28721-28904]:Block[28826-29009]"
    }, {
      "left" : "ModuleDescriptor moduleDescriptor = getModuleDescriptor();",
      "right" : "ModuleDescriptor moduleDescriptor = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[28727-28785]:VariableDeclarationStatement[28832-28890]"
    }, {
      "left" : "if (moduleDescriptor == null)",
      "right" : "if (moduleDescriptor == null)",
      "info" : "IfStatement[28790-28827]:IfStatement[28895-28932]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28820-28827]:ReturnStatement[28925-28932]"
    }, {
      "left" : "if (moduleDescriptor.updateModuleRefs())",
      "right" : "if (moduleDescriptor.updateModuleRefs())",
      "info" : "IfStatement[28832-28900]:IfStatement[28937-29005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28873-28900]:Block[28978-29005]"
    }, {
      "left" : "setChanged();",
      "right" : "setChanged();",
      "info" : "ExpressionStatement[28881-28894]:ExpressionStatement[28986-28999]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[28908-28917]:Modifier[29013-29022]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28918-28922]:PrimitiveType[29023-29027]"
    }, {
      "left" : "dependenciesChanged",
      "right" : "dependenciesChanged",
      "info" : "SimpleName[28923-28942]:SimpleName[29028-29047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28945-29263]:Block[29050-29368]"
    }, {
      "left" : "myScope.invalidateCaches();",
      "right" : "myScope.invalidateCaches();",
      "info" : "ExpressionStatement[29232-29259]:ExpressionStatement[29337-29364]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29267-29276]:Modifier[29372-29381]"
    }, {
      "left" : "ModuleDescriptor",
      "right" : "ModuleDescriptor",
      "info" : "SimpleType[29277-29293]:SimpleType[29382-29398]"
    }, {
      "left" : "loadDescriptor",
      "right" : "loadDescriptor",
      "info" : "SimpleName[29294-29308]:SimpleName[29399-29413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29311-29333]:Block[29416-29438]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29317-29329]:ReturnStatement[29422-29434]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29337-29346]:MarkerAnnotation[29442-29451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29349-29355]:Modifier[29454-29460]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29356-29363]:PrimitiveType[29461-29468]"
    }, {
      "left" : "isChanged",
      "right" : "isChanged",
      "info" : "SimpleName[29364-29373]:SimpleName[29469-29478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29376-29403]:Block[29481-29508]"
    }, {
      "left" : "return myChanged;",
      "right" : "return myChanged;",
      "info" : "ReturnStatement[29382-29399]:ReturnStatement[29487-29504]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[29407-29416]:MarkerAnnotation[29512-29521]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29419-29428]:MarkerAnnotation[29524-29533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29431-29437]:Modifier[29536-29542]"
    }, {
      "left" : "T extends SModuleFacet",
      "right" : "T extends SModuleFacet",
      "info" : "TypeParameter[29439-29461]:TypeParameter[29544-29566]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[29463-29464]:SimpleType[29568-29569]"
    }, {
      "left" : "getFacet",
      "right" : "getFacet",
      "info" : "SimpleName[29465-29473]:SimpleName[29570-29578]"
    }, {
      "left" : "Class<T> clazz",
      "right" : "Class<T> clazz",
      "info" : "SingleVariableDeclaration[29474-29488]:SingleVariableDeclaration[29579-29593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29490-29634]:Block[29595-29739]"
    }, {
      "left" : "for (SModuleFacet facet : getFacets())",
      "right" : "for (SModuleFacet facet : getFacets())",
      "info" : "EnhancedForStatement[29496-29613]:EnhancedForStatement[29601-29718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29535-29613]:Block[29640-29718]"
    }, {
      "left" : "if (clazz.isInstance(facet))",
      "right" : "if (clazz.isInstance(facet))",
      "info" : "IfStatement[29543-29607]:IfStatement[29648-29712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29572-29607]:Block[29677-29712]"
    }, {
      "left" : "return (T) facet;",
      "right" : "return (T) facet;",
      "info" : "ReturnStatement[29582-29599]:ReturnStatement[29687-29704]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29618-29630]:ReturnStatement[29723-29735]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29638-29647]:MarkerAnnotation[29743-29752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29650-29656]:Modifier[29755-29761]"
    }, {
      "left" : "Iterable<SModuleFacet>",
      "right" : "Iterable<SModuleFacet>",
      "info" : "ParameterizedType[29657-29679]:ParameterizedType[29762-29784]"
    }, {
      "left" : "getFacets",
      "right" : "getFacets",
      "info" : "SimpleName[29680-29689]:SimpleName[29785-29794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29692-29761]:Block[29797-29866]"
    }, {
      "left" : "return Collections.<SModuleFacet>unmodifiableSet(myFacets);",
      "right" : "return Collections.<SModuleFacet>unmodifiableSet(myFacets);",
      "info" : "ReturnStatement[29698-29757]:ReturnStatement[29803-29862]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29765-29771]:Modifier[29870-29876]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[29772-29777]:TYPE_DECLARATION_KIND[29877-29882]"
    }, {
      "left" : "ModuleScope",
      "right" : "ModuleScope",
      "info" : "SimpleName[29778-29789]:SimpleName[29883-29894]"
    }, {
      "left" : "DefaultScope",
      "right" : "DefaultScope",
      "info" : "SimpleType[29798-29810]:SimpleType[29903-29915]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29817-29826]:Modifier[29922-29931]"
    }, {
      "left" : "ModuleScope",
      "right" : "ModuleScope",
      "info" : "SimpleName[29827-29838]:SimpleName[29932-29943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29841-29848]:Block[29946-29953]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29854-29860]:Modifier[29959-29965]"
    }, {
      "left" : "AbstractModule",
      "right" : "AbstractModule",
      "info" : "SimpleType[29861-29875]:SimpleType[29966-29980]"
    }, {
      "left" : "getModule",
      "right" : "getModule",
      "info" : "SimpleName[29876-29885]:SimpleName[29981-29990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29888-29929]:Block[29993-30034]"
    }, {
      "left" : "return AbstractModule.this;",
      "right" : "return AbstractModule.this;",
      "info" : "ReturnStatement[29896-29923]:ReturnStatement[30001-30028]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29935-29944]:MarkerAnnotation[30040-30049]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29949-29958]:Modifier[30054-30063]"
    }, {
      "left" : "Set<SModule>",
      "right" : "Set<SModule>",
      "info" : "ParameterizedType[29959-29971]:ParameterizedType[30064-30076]"
    }, {
      "left" : "getInitialModules",
      "right" : "getInitialModules",
      "info" : "SimpleName[29972-29989]:SimpleName[30077-30094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29992-30111]:Block[30097-30216]"
    }, {
      "left" : "Set<SModule> result = new HashSet<SModule>();",
      "right" : "Set<SModule> result = new HashSet<SModule>();",
      "info" : "VariableDeclarationStatement[30000-30045]:VariableDeclarationStatement[30105-30150]"
    }, {
      "left" : "result.add(AbstractModule.this);",
      "right" : "result.add(AbstractModule.this);",
      "info" : "ExpressionStatement[30052-30084]:ExpressionStatement[30157-30189]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30091-30105]:ReturnStatement[30196-30210]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30117-30126]:MarkerAnnotation[30222-30231]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30131-30140]:Modifier[30236-30245]"
    }, {
      "left" : "Set<Language>",
      "right" : "Set<Language>",
      "info" : "ParameterizedType[30141-30154]:ParameterizedType[30246-30259]"
    }, {
      "left" : "getInitialUsedLanguages",
      "right" : "getInitialUsedLanguages",
      "info" : "SimpleName[30155-30178]:SimpleName[30260-30283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30181-30976]:Block[30286-31081]"
    }, {
      "left" : "HashSet<Language> result = new HashSet<Language>();",
      "right" : "HashSet<Language> result = new HashSet<Language>();",
      "info" : "VariableDeclarationStatement[30189-30240]:VariableDeclarationStatement[30294-30345]"
    }, {
      "left" : "for (SLanguage l : AbstractModule.this.getUsedLanguages())",
      "right" : "for (SLanguage l : AbstractModule.this.getUsedLanguages())",
      "info" : "EnhancedForStatement[30247-30466]:EnhancedForStatement[30352-30571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30306-30466]:Block[30411-30571]"
    }, {
      "left" : "SModule langModule = l.getSourceModule();",
      "right" : "SModule langModule = l.getSourceModule();",
      "info" : "VariableDeclarationStatement[30316-30357]:VariableDeclarationStatement[30421-30462]"
    }, {
      "left" : "if (langModule instanceof Language)",
      "right" : "if (langModule instanceof Language)",
      "info" : "IfStatement[30366-30458]:IfStatement[30471-30563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30402-30458]:Block[30507-30563]"
    }, {
      "left" : "result.add((Language) langModule);",
      "right" : "result.add((Language) langModule);",
      "info" : "ExpressionStatement[30414-30448]:ExpressionStatement[30519-30553]"
    }, {
      "left" : "if (AbstractModule.this instanceof Language)",
      "right" : "if (AbstractModule.this instanceof Language)",
      "info" : "IfStatement[30473-30812]:IfStatement[30578-30917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30518-30812]:Block[30623-30917]"
    }, {
      "left" : "result.add((Language) AbstractModule.this);",
      "right" : "result.add((Language) AbstractModule.this);",
      "info" : "ExpressionStatement[30528-30571]:ExpressionStatement[30633-30676]"
    }, {
      "left" : "result.add(ModuleRepositoryFacade.getInstance().getModule(BootstrapLanguages.descriptorLanguageRef(), Language.class));",
      "right" : "result.add(ModuleRepositoryFacade.getInstance().getModule(BootstrapLanguages.descriptorLanguageRef(), Language.class));",
      "info" : "ExpressionStatement[30685-30804]:ExpressionStatement[30790-30909]"
    }, {
      "left" : "if (AbstractModule.this instanceof Generator)",
      "right" : "if (AbstractModule.this instanceof Generator)",
      "info" : "IfStatement[30819-30949]:IfStatement[30924-31054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30865-30949]:Block[30970-31054]"
    }, {
      "left" : "result.add(((Generator) AbstractModule.this).getSourceLanguage());",
      "right" : "result.add(((Generator) AbstractModule.this).getSourceLanguage());",
      "info" : "ExpressionStatement[30875-30941]:ExpressionStatement[30980-31046]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30956-30970]:ReturnStatement[31061-31075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30982-30988]:Modifier[31087-31093]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30989-30995]:SimpleType[31094-31100]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[30996-31004]:SimpleName[31101-31109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31007-31069]:Block[31112-31174]"
    }, {
      "left" : "return \"Scope of module \" + AbstractModule.this;",
      "right" : "return \"Scope of module \" + AbstractModule.this;",
      "info" : "ReturnStatement[31015-31063]:ReturnStatement[31120-31168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31077-31083]:Modifier[31182-31188]"
    }, {
      "left" : "IFile",
      "right" : "IFile",
      "info" : "SimpleType[31084-31089]:SimpleType[31189-31194]"
    }, {
      "left" : "getOutputPath",
      "right" : "getOutputPath",
      "info" : "SimpleName[31090-31103]:SimpleName[31195-31208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31106-31207]:Block[31211-31312]"
    }, {
      "left" : "return ProjectPathUtil.getGeneratorOutputPath(getModuleSourceDir(), getModuleDescriptor());",
      "right" : "return ProjectPathUtil.getGeneratorOutputPath(getModuleSourceDir(), getModuleDescriptor());",
      "info" : "ReturnStatement[31112-31203]:ReturnStatement[31217-31308]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[31211-31222]:MarkerAnnotation[31316-31327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31225-31231]:Modifier[31330-31336]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31232-31237]:Modifier[31337-31342]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31238-31244]:SimpleType[31343-31349]"
    }, {
      "left" : "getGeneratorOutputPath",
      "right" : "getGeneratorOutputPath",
      "info" : "SimpleName[31245-31267]:SimpleName[31350-31372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31270-31376]:Block[31375-31481]"
    }, {
      "left" : "IFile outputPath = getOutputPath();",
      "right" : "IFile outputPath = getOutputPath();",
      "info" : "VariableDeclarationStatement[31276-31311]:VariableDeclarationStatement[31381-31416]"
    }, {
      "left" : "return outputPath != null ? outputPath.getPath() : null;",
      "right" : "return outputPath != null ? outputPath.getPath() : null;",
      "info" : "ReturnStatement[31316-31372]:ReturnStatement[31421-31477]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[31380-31391]:MarkerAnnotation[31485-31496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31394-31400]:Modifier[31499-31505]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31401-31406]:Modifier[31506-31511]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31407-31413]:SimpleType[31512-31518]"
    }, {
      "left" : "getTestsGeneratorOutputPath",
      "right" : "getTestsGeneratorOutputPath",
      "info" : "SimpleName[31414-31441]:SimpleName[31519-31546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31444-31724]:Block[31549-31829]"
    }, {
      "left" : "TestsFacet testsFacet = this.getFacet(TestsFacet.class);",
      "right" : "TestsFacet testsFacet = this.getFacet(TestsFacet.class);",
      "info" : "VariableDeclarationStatement[31450-31506]:VariableDeclarationStatement[31555-31611]"
    }, {
      "left" : "if (testsFacet == null)",
      "right" : "if (testsFacet == null)",
      "info" : "IfStatement[31511-31561]:IfStatement[31616-31666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31535-31561]:Block[31640-31666]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31543-31555]:ReturnStatement[31648-31660]"
    }, {
      "left" : "IFile testsOutputPath = testsFacet.getTestsOutputPath();",
      "right" : "IFile testsOutputPath = testsFacet.getTestsOutputPath();",
      "info" : "VariableDeclarationStatement[31566-31622]:VariableDeclarationStatement[31671-31727]"
    }, {
      "left" : "if (testsOutputPath == null)",
      "right" : "if (testsOutputPath == null)",
      "info" : "IfStatement[31627-31682]:IfStatement[31732-31787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31656-31682]:Block[31761-31787]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31664-31676]:ReturnStatement[31769-31781]"
    }, {
      "left" : "return testsOutputPath.getPath();",
      "right" : "return testsOutputPath.getPath();",
      "info" : "ReturnStatement[31687-31720]:ReturnStatement[31792-31825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31728-31734]:Modifier[31833-31839]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31735-31739]:PrimitiveType[31840-31844]"
    }, {
      "left" : "validateLanguageVersions",
      "right" : "validateLanguageVersions",
      "info" : "SimpleName[31740-31764]:SimpleName[31845-31869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31767-32570]:Block[31872-32675]"
    }, {
      "left" : "assertCanChange();",
      "right" : "assertCanChange();",
      "info" : "ExpressionStatement[31773-31791]:ExpressionStatement[31878-31896]"
    }, {
      "left" : "ModuleDescriptor md = getModuleDescriptor();",
      "right" : "ModuleDescriptor md = getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[31796-31840]:VariableDeclarationStatement[31901-31945]"
    }, {
      "left" : "Map<SLanguage, Integer> oldLanguageVersions = md.getLanguageVersions();",
      "right" : "Map<SLanguage, Integer> oldLanguageVersions = md.getLanguageVersions();",
      "info" : "VariableDeclarationStatement[31845-31916]:VariableDeclarationStatement[31950-32021]"
    }, {
      "left" : "Map<SLanguage, Integer> newLanguageVersions = new HashMap<SLanguage, Integer>();",
      "right" : "Map<SLanguage, Integer> newLanguageVersions = new HashMap<SLanguage, Integer>();",
      "info" : "VariableDeclarationStatement[31921-32001]:VariableDeclarationStatement[32026-32106]"
    }, {
      "left" : "if (!md.hasLanguageVersions())",
      "right" : "if (!md.hasLanguageVersions())",
      "info" : "IfStatement[32006-32480]:IfStatement[32111-32585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32037-32186]:Block[32142-32291]"
    }, {
      "left" : "for (SLanguage lang : getAllUsedLanguages())",
      "right" : "for (SLanguage lang : getAllUsedLanguages())",
      "info" : "EnhancedForStatement[32045-32141]:EnhancedForStatement[32150-32246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32090-32141]:Block[32195-32246]"
    }, {
      "left" : "newLanguageVersions.put(lang, 0);",
      "right" : "newLanguageVersions.put(lang, 0);",
      "info" : "ExpressionStatement[32100-32133]:ExpressionStatement[32205-32238]"
    }, {
      "left" : "md.setHasLanguageVersions(true);",
      "right" : "md.setHasLanguageVersions(true);",
      "info" : "ExpressionStatement[32148-32180]:ExpressionStatement[32253-32285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32192-32480]:Block[32297-32585]"
    }, {
      "left" : "for (SLanguage lang : getAllUsedLanguages())",
      "right" : "for (SLanguage lang : getAllUsedLanguages())",
      "info" : "EnhancedForStatement[32200-32474]:EnhancedForStatement[32305-32579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32245-32474]:Block[32350-32579]"
    }, {
      "left" : "if (oldLanguageVersions.containsKey(lang))",
      "right" : "if (oldLanguageVersions.containsKey(lang))",
      "info" : "IfStatement[32255-32466]:IfStatement[32360-32571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32298-32381]:Block[32403-32486]"
    }, {
      "left" : "newLanguageVersions.put(lang, oldLanguageVersions.get(lang));",
      "right" : "newLanguageVersions.put(lang, oldLanguageVersions.get(lang));",
      "info" : "ExpressionStatement[32310-32371]:ExpressionStatement[32415-32476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32387-32466]:Block[32492-32571]"
    }, {
      "left" : "newLanguageVersions.put(lang, lang.getLanguageVersion());",
      "right" : "newLanguageVersions.put(lang, lang.getLanguageVersion());",
      "info" : "ExpressionStatement[32399-32456]:ExpressionStatement[32504-32561]"
    }, {
      "left" : "oldLanguageVersions.clear();",
      "right" : "oldLanguageVersions.clear();",
      "info" : "ExpressionStatement[32485-32513]:ExpressionStatement[32590-32618]"
    }, {
      "left" : "oldLanguageVersions.putAll(newLanguageVersions);",
      "right" : "oldLanguageVersions.putAll(newLanguageVersions);",
      "info" : "ExpressionStatement[32518-32566]:ExpressionStatement[32623-32671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32574-32583]:MarkerAnnotation[32679-32688]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32586-32592]:Modifier[32691-32697]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32593-32596]:PrimitiveType[32698-32701]"
    }, {
      "left" : "getUsedLanguageVersion",
      "right" : "getUsedLanguageVersion",
      "info" : "SimpleName[32597-32619]:SimpleName[32702-32724]"
    }, {
      "left" : "SLanguage usedLanguage",
      "right" : "SLanguage usedLanguage",
      "info" : "SingleVariableDeclaration[32620-32642]:SingleVariableDeclaration[32725-32747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32644-33223]:Block[32749-33328]"
    }, {
      "left" : "Integer res = getModuleDescriptor().getLanguageVersions().get(usedLanguage);",
      "right" : "Integer res = getModuleDescriptor().getLanguageVersions().get(usedLanguage);",
      "info" : "VariableDeclarationStatement[32650-32726]:VariableDeclarationStatement[32755-32831]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[32731-33203]:IfStatement[32836-33308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32748-33203]:Block[32853-33308]"
    }, {
      "left" : "LOG.error(\n          \"getUsedLanguageVersion can't find a version for language \" + usedLanguage.getQualifiedName() +\n              \" in module \" + getModuleName() + \".\" +\n              \" This can either mean that the language is not imported into this module or that \" +\n              \"validateLanguageVersions was not called on this module in appropriate moment.\",\n          new Throwable());",
      "right" : "LOG.error(\n          \"getUsedLanguageVersion can't find a version for language \" + usedLanguage.getQualifiedName() +\n              \" in module \" + getModuleName() + \".\" +\n              \" This can either mean that the language is not imported into this module or that \" +\n              \"validateLanguageVersions was not called on this module in appropriate moment.\",\n          new Throwable());",
      "info" : "ExpressionStatement[32756-33149]:ExpressionStatement[32861-33254]"
    }, {
      "left" : "return usedLanguage.getLanguageVersion();",
      "right" : "return usedLanguage.getLanguageVersion();",
      "info" : "ReturnStatement[33156-33197]:ReturnStatement[33261-33302]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[33208-33219]:ReturnStatement[33313-33324]"
    } ]
  },
  "interFileMappings" : { }
}