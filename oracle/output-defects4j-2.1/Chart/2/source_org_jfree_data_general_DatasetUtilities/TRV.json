{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private DatasetUtilities()",
      "right" : "private DatasetUtilities()",
      "info" : "MethodDeclaration[8470-8620]:MethodDeclaration[8470-8620]"
    }, {
      "left" : "public static double calculatePieDatasetTotal(PieDataset dataset)",
      "right" : "public static double calculatePieDatasetTotal(PieDataset dataset)",
      "info" : "MethodDeclaration[8628-9727]:MethodDeclaration[8628-9727]"
    }, {
      "left" : "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,\r\n                                                    Comparable rowKey)",
      "right" : "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,\r\n                                                    Comparable rowKey)",
      "info" : "MethodDeclaration[9735-10264]:MethodDeclaration[9735-10264]"
    }, {
      "left" : "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,\r\n                                                    int row)",
      "right" : "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,\r\n                                                    int row)",
      "info" : "MethodDeclaration[10272-11057]:MethodDeclaration[10272-11057]"
    }, {
      "left" : "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,\r\n                                                       Comparable columnKey)",
      "right" : "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,\r\n                                                       Comparable columnKey)",
      "info" : "MethodDeclaration[11065-11627]:MethodDeclaration[11065-11627]"
    }, {
      "left" : "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,\r\n                                                       int column)",
      "right" : "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,\r\n                                                       int column)",
      "info" : "MethodDeclaration[11635-12403]:MethodDeclaration[11635-12403]"
    }, {
      "left" : "public static PieDataset createConsolidatedPieDataset(PieDataset source,\r\n            Comparable key, double minimumPercent)",
      "right" : "public static PieDataset createConsolidatedPieDataset(PieDataset source,\r\n            Comparable key, double minimumPercent)",
      "info" : "MethodDeclaration[12411-13247]:MethodDeclaration[12411-13247]"
    }, {
      "left" : "public static PieDataset createConsolidatedPieDataset(PieDataset source,\r\n            Comparable key, double minimumPercent, int minItems)",
      "right" : "public static PieDataset createConsolidatedPieDataset(PieDataset source,\r\n            Comparable key, double minimumPercent, int minItems)",
      "info" : "MethodDeclaration[13255-15896]:MethodDeclaration[13255-15896]"
    }, {
      "left" : "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,\r\n            String columnKeyPrefix, double[][] data)",
      "right" : "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,\r\n            String columnKeyPrefix, double[][] data)",
      "info" : "MethodDeclaration[15904-16951]:MethodDeclaration[15904-16951]"
    }, {
      "left" : "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,\r\n            String columnKeyPrefix, Number[][] data)",
      "right" : "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,\r\n            String columnKeyPrefix, Number[][] data)",
      "info" : "MethodDeclaration[16959-17911]:MethodDeclaration[16959-17911]"
    }, {
      "left" : "public static CategoryDataset createCategoryDataset(Comparable[] rowKeys,\r\n            Comparable[] columnKeys, double[][] data)",
      "right" : "public static CategoryDataset createCategoryDataset(Comparable[] rowKeys,\r\n            Comparable[] columnKeys, double[][] data)",
      "info" : "MethodDeclaration[17919-20217]:MethodDeclaration[17919-20217]"
    }, {
      "left" : "public static CategoryDataset createCategoryDataset(Comparable rowKey,\r\n                                                        KeyedValues rowData)",
      "right" : "public static CategoryDataset createCategoryDataset(Comparable rowKey,\r\n                                                        KeyedValues rowData)",
      "info" : "MethodDeclaration[20225-21189]:MethodDeclaration[20225-21189]"
    }, {
      "left" : "public static XYDataset sampleFunction2D(Function2D f, double start,\r\n            double end, int samples, Comparable seriesKey)",
      "right" : "public static XYDataset sampleFunction2D(Function2D f, double start,\r\n            double end, int samples, Comparable seriesKey)",
      "info" : "MethodDeclaration[21197-22098]:MethodDeclaration[21197-22098]"
    }, {
      "left" : "public static XYSeries sampleFunction2DToSeries(Function2D f,\r\n            double start, double end, int samples, Comparable seriesKey)",
      "right" : "public static XYSeries sampleFunction2DToSeries(Function2D f,\r\n            double start, double end, int samples, Comparable seriesKey)",
      "info" : "MethodDeclaration[22106-23539]:MethodDeclaration[22106-23539]"
    }, {
      "left" : "public static boolean isEmptyOrNull(PieDataset dataset)",
      "right" : "public static boolean isEmptyOrNull(PieDataset dataset)",
      "info" : "MethodDeclaration[23547-24374]:MethodDeclaration[23547-24374]"
    }, {
      "left" : "public static boolean isEmptyOrNull(CategoryDataset dataset)",
      "right" : "public static boolean isEmptyOrNull(CategoryDataset dataset)",
      "info" : "MethodDeclaration[24382-25227]:MethodDeclaration[24382-25227]"
    }, {
      "left" : "public static boolean isEmptyOrNull(XYDataset dataset)",
      "right" : "public static boolean isEmptyOrNull(XYDataset dataset)",
      "info" : "MethodDeclaration[25235-25802]:MethodDeclaration[25235-25802]"
    }, {
      "left" : "public static Range findDomainBounds(XYDataset dataset)",
      "right" : "public static Range findDomainBounds(XYDataset dataset)",
      "info" : "MethodDeclaration[25810-26169]:MethodDeclaration[25810-26169]"
    }, {
      "left" : "public static Range findDomainBounds(XYDataset dataset,\r\n                                         boolean includeInterval)",
      "right" : "public static Range findDomainBounds(XYDataset dataset,\r\n                                         boolean includeInterval)",
      "info" : "MethodDeclaration[26177-27288]:MethodDeclaration[26177-27288]"
    }, {
      "left" : "public static Range findDomainBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "right" : "public static Range findDomainBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "info" : "MethodDeclaration[27296-28519]:MethodDeclaration[27296-28519]"
    }, {
      "left" : "public static Range iterateDomainBounds(XYDataset dataset)",
      "right" : "public static Range iterateDomainBounds(XYDataset dataset)",
      "info" : "MethodDeclaration[28527-29053]:MethodDeclaration[28527-29053]"
    }, {
      "left" : "public static Range findRangeBounds(CategoryDataset dataset)",
      "right" : "public static Range findRangeBounds(CategoryDataset dataset)",
      "info" : "MethodDeclaration[31502-31846]:MethodDeclaration[31896-32240]"
    }, {
      "left" : "public static Range findRangeBounds(CategoryDataset dataset,\r\n                                        boolean includeInterval)",
      "right" : "public static Range findRangeBounds(CategoryDataset dataset,\r\n                                        boolean includeInterval)",
      "info" : "MethodDeclaration[31854-32792]:MethodDeclaration[32248-33186]"
    }, {
      "left" : "public static Range findRangeBounds(CategoryDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "right" : "public static Range findRangeBounds(CategoryDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "info" : "MethodDeclaration[32800-33980]:MethodDeclaration[33194-34374]"
    }, {
      "left" : "public static Range findRangeBounds(XYDataset dataset)",
      "right" : "public static Range findRangeBounds(XYDataset dataset)",
      "info" : "MethodDeclaration[33988-34415]:MethodDeclaration[34382-34809]"
    }, {
      "left" : "public static Range findRangeBounds(XYDataset dataset,\r\n                                        boolean includeInterval)",
      "right" : "public static Range findRangeBounds(XYDataset dataset,\r\n                                        boolean includeInterval)",
      "info" : "MethodDeclaration[34423-35461]:MethodDeclaration[34817-35855]"
    }, {
      "left" : "public static Range findRangeBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, Range xRange, boolean includeInterval)",
      "right" : "public static Range findRangeBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, Range xRange, boolean includeInterval)",
      "info" : "MethodDeclaration[35469-36818]:MethodDeclaration[35863-37212]"
    }, {
      "left" : "public static Range iterateCategoryRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "right" : "public static Range iterateCategoryRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "info" : "MethodDeclaration[36826-37518]:MethodDeclaration[37220-37912]"
    }, {
      "left" : "public static Range iterateRangeBounds(CategoryDataset dataset)",
      "right" : "public static Range iterateRangeBounds(CategoryDataset dataset)",
      "info" : "MethodDeclaration[37526-37934]:MethodDeclaration[37920-38328]"
    }, {
      "left" : "public static Range iterateRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "right" : "public static Range iterateRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "info" : "MethodDeclaration[37942-40939]:MethodDeclaration[38336-41333]"
    }, {
      "left" : "public static Range iterateToFindRangeBounds(CategoryDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "right" : "public static Range iterateToFindRangeBounds(CategoryDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "info" : "MethodDeclaration[40947-48191]:MethodDeclaration[41341-48585]"
    }, {
      "left" : "public static Range iterateXYRangeBounds(XYDataset dataset)",
      "right" : "public static Range iterateXYRangeBounds(XYDataset dataset)",
      "info" : "MethodDeclaration[48199-48647]:MethodDeclaration[48593-49041]"
    }, {
      "left" : "public static Range iterateRangeBounds(XYDataset dataset)",
      "right" : "public static Range iterateRangeBounds(XYDataset dataset)",
      "info" : "MethodDeclaration[48655-49051]:MethodDeclaration[49049-49445]"
    }, {
      "left" : "public static Range iterateToFindDomainBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "right" : "public static Range iterateToFindDomainBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, boolean includeInterval)",
      "info" : "MethodDeclaration[52270-55323]:MethodDeclaration[53048-56101]"
    }, {
      "left" : "public static Range iterateToFindRangeBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, Range xRange, boolean includeInterval)",
      "right" : "public static Range iterateToFindRangeBounds(XYDataset dataset,\r\n            List visibleSeriesKeys, Range xRange, boolean includeInterval)",
      "info" : "MethodDeclaration[55331-61362]:MethodDeclaration[56109-62140]"
    }, {
      "left" : "public static Number findMinimumDomainValue(XYDataset dataset)",
      "right" : "public static Number findMinimumDomainValue(XYDataset dataset)",
      "info" : "MethodDeclaration[61370-63570]:MethodDeclaration[62148-64348]"
    }, {
      "left" : "public static Number findMaximumDomainValue(XYDataset dataset)",
      "right" : "public static Number findMaximumDomainValue(XYDataset dataset)",
      "info" : "MethodDeclaration[63578-65819]:MethodDeclaration[64356-66597]"
    }, {
      "left" : "public static Number findMinimumRangeValue(CategoryDataset dataset)",
      "right" : "public static Number findMinimumRangeValue(CategoryDataset dataset)",
      "info" : "MethodDeclaration[65827-67956]:MethodDeclaration[66605-68734]"
    }, {
      "left" : "public static Number findMinimumRangeValue(XYDataset dataset)",
      "right" : "public static Number findMinimumRangeValue(XYDataset dataset)",
      "info" : "MethodDeclaration[67964-70376]:MethodDeclaration[68742-71154]"
    }, {
      "left" : "public static Number findMaximumRangeValue(CategoryDataset dataset)",
      "right" : "public static Number findMaximumRangeValue(CategoryDataset dataset)",
      "info" : "MethodDeclaration[70384-72528]:MethodDeclaration[71162-73306]"
    }, {
      "left" : "public static Number findMaximumRangeValue(XYDataset dataset)",
      "right" : "public static Number findMaximumRangeValue(XYDataset dataset)",
      "info" : "MethodDeclaration[72536-74919]:MethodDeclaration[73314-75697]"
    }, {
      "left" : "public static Range findStackedRangeBounds(CategoryDataset dataset)",
      "right" : "public static Range findStackedRangeBounds(CategoryDataset dataset)",
      "info" : "MethodDeclaration[74927-75388]:MethodDeclaration[75705-76166]"
    }, {
      "left" : "public static Range findStackedRangeBounds(CategoryDataset dataset,\r\n            double base)",
      "right" : "public static Range findStackedRangeBounds(CategoryDataset dataset,\r\n            double base)",
      "info" : "MethodDeclaration[75396-77172]:MethodDeclaration[76174-77950]"
    }, {
      "left" : "public static Range findStackedRangeBounds(CategoryDataset dataset,\r\n                                               KeyToGroupMap map)",
      "right" : "public static Range findStackedRangeBounds(CategoryDataset dataset,\r\n                                               KeyToGroupMap map)",
      "info" : "MethodDeclaration[77180-79895]:MethodDeclaration[77958-80673]"
    }, {
      "left" : "public static Number findMinimumStackedRangeValue(CategoryDataset dataset)",
      "right" : "public static Number findMinimumStackedRangeValue(CategoryDataset dataset)",
      "info" : "MethodDeclaration[79903-81378]:MethodDeclaration[80681-82156]"
    }, {
      "left" : "public static Number findMaximumStackedRangeValue(CategoryDataset dataset)",
      "right" : "public static Number findMaximumStackedRangeValue(CategoryDataset dataset)",
      "info" : "MethodDeclaration[81386-82830]:MethodDeclaration[82164-83608]"
    }, {
      "left" : "public static Range findStackedRangeBounds(TableXYDataset dataset)",
      "right" : "public static Range findStackedRangeBounds(TableXYDataset dataset)",
      "info" : "MethodDeclaration[82838-83264]:MethodDeclaration[83616-84042]"
    }, {
      "left" : "public static Range findStackedRangeBounds(TableXYDataset dataset,\r\n                                               double base)",
      "right" : "public static Range findStackedRangeBounds(TableXYDataset dataset,\r\n                                               double base)",
      "info" : "MethodDeclaration[83272-84916]:MethodDeclaration[84050-85694]"
    }, {
      "left" : "public static double calculateStackTotal(TableXYDataset dataset, int item)",
      "right" : "public static double calculateStackTotal(TableXYDataset dataset, int item)",
      "info" : "MethodDeclaration[84924-85580]:MethodDeclaration[85702-86358]"
    }, {
      "left" : "public static Range findCumulativeRangeBounds(CategoryDataset dataset)",
      "right" : "public static Range findCumulativeRangeBounds(CategoryDataset dataset)",
      "info" : "MethodDeclaration[85588-87180]:MethodDeclaration[86366-87958]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8620]:Block[8568-8620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8995-9727]:Block[8995-9727]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[9006-9116]:IfStatement[9006-9116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9027-9116]:Block[9027-9116]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[9042-9105]:ThrowStatement[9042-9105]"
    }, {
      "left" : "List keys = dataset.getKeys();",
      "right" : "List keys = dataset.getKeys();",
      "info" : "VariableDeclarationStatement[9126-9156]:VariableDeclarationStatement[9126-9156]"
    }, {
      "left" : "double totalValue = 0;",
      "right" : "double totalValue = 0;",
      "info" : "VariableDeclarationStatement[9166-9188]:VariableDeclarationStatement[9166-9188]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[9198-9234]:VariableDeclarationStatement[9198-9234]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[9244-9692]:WhileStatement[9244-9692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9271-9692]:Block[9271-9692]"
    }, {
      "left" : "Comparable current = (Comparable) iterator.next();",
      "right" : "Comparable current = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[9286-9336]:VariableDeclarationStatement[9286-9336]"
    }, {
      "left" : "if (current != null)",
      "right" : "if (current != null)",
      "info" : "IfStatement[9350-9681]:IfStatement[9350-9681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9371-9681]:Block[9371-9681]"
    }, {
      "left" : "Number value = dataset.getValue(current);",
      "right" : "Number value = dataset.getValue(current);",
      "info" : "VariableDeclarationStatement[9390-9431]:VariableDeclarationStatement[9390-9431]"
    }, {
      "left" : "double v = 0.0;",
      "right" : "double v = 0.0;",
      "info" : "VariableDeclarationStatement[9449-9464]:VariableDeclarationStatement[9449-9464]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[9482-9567]:IfStatement[9482-9567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9501-9567]:Block[9501-9567]"
    }, {
      "left" : "v = value.doubleValue();",
      "right" : "v = value.doubleValue();",
      "info" : "ExpressionStatement[9524-9548]:ExpressionStatement[9524-9548]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[9585-9666]:IfStatement[9585-9666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9596-9666]:Block[9596-9666]"
    }, {
      "left" : "totalValue = totalValue + v;",
      "right" : "totalValue = totalValue + v;",
      "info" : "ExpressionStatement[9619-9647]:ExpressionStatement[9619-9647]"
    }, {
      "left" : "return totalValue;",
      "right" : "return totalValue;",
      "info" : "ReturnStatement[9702-9720]:ReturnStatement[9702-9720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10154-10264]:Block[10154-10264]"
    }, {
      "left" : "int row = dataset.getRowIndex(rowKey);",
      "right" : "int row = dataset.getRowIndex(rowKey);",
      "info" : "VariableDeclarationStatement[10165-10203]:VariableDeclarationStatement[10165-10203]"
    }, {
      "left" : "return createPieDatasetForRow(dataset, row);",
      "right" : "return createPieDatasetForRow(dataset, row);",
      "info" : "ReturnStatement[10213-10257]:ReturnStatement[10213-10257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10693-11057]:Block[10693-11057]"
    }, {
      "left" : "DefaultPieDataset result = new DefaultPieDataset();",
      "right" : "DefaultPieDataset result = new DefaultPieDataset();",
      "info" : "VariableDeclarationStatement[10704-10755]:VariableDeclarationStatement[10704-10755]"
    }, {
      "left" : "int columnCount = dataset.getColumnCount();",
      "right" : "int columnCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[10765-10808]:VariableDeclarationStatement[10765-10808]"
    }, {
      "left" : "for (int current = 0; current < columnCount; current++)",
      "right" : "for (int current = 0; current < columnCount; current++)",
      "info" : "ForStatement[10818-11026]:ForStatement[10818-11026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10874-11026]:Block[10874-11026]"
    }, {
      "left" : "Comparable columnKey = dataset.getColumnKey(current);",
      "right" : "Comparable columnKey = dataset.getColumnKey(current);",
      "info" : "VariableDeclarationStatement[10889-10942]:VariableDeclarationStatement[10889-10942]"
    }, {
      "left" : "result.setValue(columnKey, dataset.getValue(row, current));",
      "right" : "result.setValue(columnKey, dataset.getValue(row, current));",
      "info" : "ExpressionStatement[10956-11015]:ExpressionStatement[10956-11015]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11036-11050]:ReturnStatement[11036-11050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11627]:Block[11502-11627]"
    }, {
      "left" : "int column = dataset.getColumnIndex(columnKey);",
      "right" : "int column = dataset.getColumnIndex(columnKey);",
      "info" : "VariableDeclarationStatement[11513-11560]:VariableDeclarationStatement[11513-11560]"
    }, {
      "left" : "return createPieDatasetForColumn(dataset, column);",
      "right" : "return createPieDatasetForColumn(dataset, column);",
      "info" : "ReturnStatement[11570-11620]:ReturnStatement[11570-11620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12084-12403]:Block[12084-12403]"
    }, {
      "left" : "DefaultPieDataset result = new DefaultPieDataset();",
      "right" : "DefaultPieDataset result = new DefaultPieDataset();",
      "info" : "VariableDeclarationStatement[12095-12146]:VariableDeclarationStatement[12095-12146]"
    }, {
      "left" : "int rowCount = dataset.getRowCount();",
      "right" : "int rowCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[12156-12193]:VariableDeclarationStatement[12156-12193]"
    }, {
      "left" : "for (int i = 0; i < rowCount; i++)",
      "right" : "for (int i = 0; i < rowCount; i++)",
      "info" : "ForStatement[12203-12372]:ForStatement[12203-12372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12238-12372]:Block[12238-12372]"
    }, {
      "left" : "Comparable rowKey = dataset.getRowKey(i);",
      "right" : "Comparable rowKey = dataset.getRowKey(i);",
      "info" : "VariableDeclarationStatement[12253-12294]:VariableDeclarationStatement[12253-12294]"
    }, {
      "left" : "result.setValue(rowKey, dataset.getValue(i, column));",
      "right" : "result.setValue(rowKey, dataset.getValue(i, column));",
      "info" : "ExpressionStatement[12308-12361]:ExpressionStatement[12308-12361]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12382-12396]:ReturnStatement[12382-12396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13127-13247]:Block[13127-13247]"
    }, {
      "left" : "return DatasetUtilities.createConsolidatedPieDataset(source, key,\r\n                minimumPercent, 2);",
      "right" : "return DatasetUtilities.createConsolidatedPieDataset(source, key,\r\n                minimumPercent, 2);",
      "info" : "ReturnStatement[13138-13240]:ReturnStatement[13138-13240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14199-15896]:Block[14199-15896]"
    }, {
      "left" : "DefaultPieDataset result = new DefaultPieDataset();",
      "right" : "DefaultPieDataset result = new DefaultPieDataset();",
      "info" : "VariableDeclarationStatement[14212-14263]:VariableDeclarationStatement[14212-14263]"
    }, {
      "left" : "double total = DatasetUtilities.calculatePieDatasetTotal(source);",
      "right" : "double total = DatasetUtilities.calculatePieDatasetTotal(source);",
      "info" : "VariableDeclarationStatement[14273-14338]:VariableDeclarationStatement[14273-14338]"
    }, {
      "left" : "List keys = source.getKeys();",
      "right" : "List keys = source.getKeys();",
      "info" : "VariableDeclarationStatement[14422-14451]:VariableDeclarationStatement[14422-14451]"
    }, {
      "left" : "ArrayList otherKeys = new ArrayList();",
      "right" : "ArrayList otherKeys = new ArrayList();",
      "info" : "VariableDeclarationStatement[14461-14499]:VariableDeclarationStatement[14461-14499]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[14509-14545]:VariableDeclarationStatement[14509-14545]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[14555-14954]:WhileStatement[14555-14954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14582-14954]:Block[14582-14954]"
    }, {
      "left" : "Comparable currentKey = (Comparable) iterator.next();",
      "right" : "Comparable currentKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[14597-14650]:VariableDeclarationStatement[14597-14650]"
    }, {
      "left" : "Number dataValue = source.getValue(currentKey);",
      "right" : "Number dataValue = source.getValue(currentKey);",
      "info" : "VariableDeclarationStatement[14664-14711]:VariableDeclarationStatement[14664-14711]"
    }, {
      "left" : "if (dataValue != null)",
      "right" : "if (dataValue != null)",
      "info" : "IfStatement[14725-14943]:IfStatement[14725-14943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14748-14943]:Block[14748-14943]"
    }, {
      "left" : "double value = dataValue.doubleValue();",
      "right" : "double value = dataValue.doubleValue();",
      "info" : "VariableDeclarationStatement[14767-14806]:VariableDeclarationStatement[14767-14806]"
    }, {
      "left" : "if (value / total < minimumPercent)",
      "right" : "if (value / total < minimumPercent)",
      "info" : "IfStatement[14824-14928]:IfStatement[14824-14928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14860-14928]:Block[14860-14928]"
    }, {
      "left" : "otherKeys.add(currentKey);",
      "right" : "otherKeys.add(currentKey);",
      "info" : "ExpressionStatement[14883-14909]:ExpressionStatement[14883-14909]"
    }, {
      "left" : "iterator = keys.iterator();",
      "right" : "iterator = keys.iterator();",
      "info" : "ExpressionStatement[15041-15068]:ExpressionStatement[15041-15068]"
    }, {
      "left" : "double otherValue = 0;",
      "right" : "double otherValue = 0;",
      "info" : "VariableDeclarationStatement[15078-15100]:VariableDeclarationStatement[15078-15100]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[15110-15716]:WhileStatement[15110-15716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15137-15716]:Block[15137-15716]"
    }, {
      "left" : "Comparable currentKey = (Comparable) iterator.next();",
      "right" : "Comparable currentKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[15152-15205]:VariableDeclarationStatement[15152-15205]"
    }, {
      "left" : "Number dataValue = source.getValue(currentKey);",
      "right" : "Number dataValue = source.getValue(currentKey);",
      "info" : "VariableDeclarationStatement[15219-15266]:VariableDeclarationStatement[15219-15266]"
    }, {
      "left" : "if (dataValue != null)",
      "right" : "if (dataValue != null)",
      "info" : "IfStatement[15280-15705]:IfStatement[15280-15705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15303-15705]:Block[15303-15705]"
    }, {
      "left" : "if (otherKeys.contains(currentKey)\r\n                    && otherKeys.size() >= minItems)",
      "right" : "if (otherKeys.contains(currentKey)\r\n                    && otherKeys.size() >= minItems)",
      "info" : "IfStatement[15322-15690]:IfStatement[15322-15690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15411-15542]:Block[15411-15542]"
    }, {
      "left" : "otherValue += dataValue.doubleValue();",
      "right" : "otherValue += dataValue.doubleValue();",
      "info" : "ExpressionStatement[15485-15523]:ExpressionStatement[15485-15523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15565-15690]:Block[15565-15690]"
    }, {
      "left" : "result.setValue(currentKey, dataValue);",
      "right" : "result.setValue(currentKey, dataValue);",
      "info" : "ExpressionStatement[15632-15671]:ExpressionStatement[15632-15671]"
    }, {
      "left" : "if (otherKeys.size() >= minItems)",
      "right" : "if (otherKeys.size() >= minItems)",
      "info" : "IfStatement[15772-15865]:IfStatement[15772-15865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15806-15865]:Block[15806-15865]"
    }, {
      "left" : "result.setValue(key, otherValue);",
      "right" : "result.setValue(key, otherValue);",
      "info" : "ExpressionStatement[15821-15854]:ExpressionStatement[15821-15854]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15875-15889]:ReturnStatement[15875-15889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16520-16951]:Block[16520-16951]"
    }, {
      "left" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "right" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "info" : "VariableDeclarationStatement[16533-16594]:VariableDeclarationStatement[16533-16594]"
    }, {
      "left" : "for (int r = 0; r < data.length; r++)",
      "right" : "for (int r = 0; r < data.length; r++)",
      "info" : "ForStatement[16604-16918]:ForStatement[16604-16918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16642-16918]:Block[16642-16918]"
    }, {
      "left" : "String rowKey = rowKeyPrefix + (r + 1);",
      "right" : "String rowKey = rowKeyPrefix + (r + 1);",
      "info" : "VariableDeclarationStatement[16657-16696]:VariableDeclarationStatement[16657-16696]"
    }, {
      "left" : "for (int c = 0; c < data[r].length; c++)",
      "right" : "for (int c = 0; c < data[r].length; c++)",
      "info" : "ForStatement[16710-16907]:ForStatement[16710-16907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16751-16907]:Block[16751-16907]"
    }, {
      "left" : "String columnKey = columnKeyPrefix + (c + 1);",
      "right" : "String columnKey = columnKeyPrefix + (c + 1);",
      "info" : "VariableDeclarationStatement[16770-16815]:VariableDeclarationStatement[16770-16815]"
    }, {
      "left" : "result.addValue(new Double(data[r][c]), rowKey, columnKey);",
      "right" : "result.addValue(new Double(data[r][c]), rowKey, columnKey);",
      "info" : "ExpressionStatement[16833-16892]:ExpressionStatement[16833-16892]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16928-16942]:ReturnStatement[16928-16942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17492-17911]:Block[17492-17911]"
    }, {
      "left" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "right" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "info" : "VariableDeclarationStatement[17505-17566]:VariableDeclarationStatement[17505-17566]"
    }, {
      "left" : "for (int r = 0; r < data.length; r++)",
      "right" : "for (int r = 0; r < data.length; r++)",
      "info" : "ForStatement[17576-17878]:ForStatement[17576-17878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17614-17878]:Block[17614-17878]"
    }, {
      "left" : "String rowKey = rowKeyPrefix + (r + 1);",
      "right" : "String rowKey = rowKeyPrefix + (r + 1);",
      "info" : "VariableDeclarationStatement[17629-17668]:VariableDeclarationStatement[17629-17668]"
    }, {
      "left" : "for (int c = 0; c < data[r].length; c++)",
      "right" : "for (int c = 0; c < data[r].length; c++)",
      "info" : "ForStatement[17682-17867]:ForStatement[17682-17867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17723-17867]:Block[17723-17867]"
    }, {
      "left" : "String columnKey = columnKeyPrefix + (c + 1);",
      "right" : "String columnKey = columnKeyPrefix + (c + 1);",
      "info" : "VariableDeclarationStatement[17742-17787]:VariableDeclarationStatement[17742-17787]"
    }, {
      "left" : "result.addValue(data[r][c], rowKey, columnKey);",
      "right" : "result.addValue(data[r][c], rowKey, columnKey);",
      "info" : "ExpressionStatement[17805-17852]:ExpressionStatement[17805-17852]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17888-17902]:ReturnStatement[17888-17902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18547-20217]:Block[18547-20217]"
    }, {
      "left" : "if (rowKeys == null)",
      "right" : "if (rowKeys == null)",
      "info" : "IfStatement[18591-18701]:IfStatement[18591-18701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18612-18701]:Block[18612-18701]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'rowKeys' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'rowKeys' argument.\");",
      "info" : "ThrowStatement[18627-18690]:ThrowStatement[18627-18690]"
    }, {
      "left" : "if (columnKeys == null)",
      "right" : "if (columnKeys == null)",
      "info" : "IfStatement[18711-18827]:IfStatement[18711-18827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18735-18827]:Block[18735-18827]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'columnKeys' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'columnKeys' argument.\");",
      "info" : "ThrowStatement[18750-18816]:ThrowStatement[18750-18816]"
    }, {
      "left" : "if (ArrayUtilities.hasDuplicateItems(rowKeys))",
      "right" : "if (ArrayUtilities.hasDuplicateItems(rowKeys))",
      "info" : "IfStatement[18837-18978]:IfStatement[18837-18978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18884-18978]:Block[18884-18978]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Duplicate items in 'rowKeys'.\");",
      "right" : "throw new IllegalArgumentException(\"Duplicate items in 'rowKeys'.\");",
      "info" : "ThrowStatement[18899-18967]:ThrowStatement[18899-18967]"
    }, {
      "left" : "if (ArrayUtilities.hasDuplicateItems(columnKeys))",
      "right" : "if (ArrayUtilities.hasDuplicateItems(columnKeys))",
      "info" : "IfStatement[18988-19157]:IfStatement[18988-19157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19038-19157]:Block[19038-19157]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                    \"Duplicate items in 'columnKeys'.\");",
      "right" : "throw new IllegalArgumentException(\r\n                    \"Duplicate items in 'columnKeys'.\");",
      "info" : "ThrowStatement[19053-19146]:ThrowStatement[19053-19146]"
    }, {
      "left" : "if (rowKeys.length != data.length)",
      "right" : "if (rowKeys.length != data.length)",
      "info" : "IfStatement[19167-19382]:IfStatement[19167-19382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19202-19382]:Block[19202-19382]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                \"The number of row keys does not match the number of rows in \"\r\n                + \"the data array.\");",
      "right" : "throw new IllegalArgumentException(\r\n                \"The number of row keys does not match the number of rows in \"\r\n                + \"the data array.\");",
      "info" : "ThrowStatement[19217-19371]:ThrowStatement[19217-19371]"
    }, {
      "left" : "int columnCount = 0;",
      "right" : "int columnCount = 0;",
      "info" : "VariableDeclarationStatement[19392-19412]:VariableDeclarationStatement[19392-19412]"
    }, {
      "left" : "for (int r = 0; r < data.length; r++)",
      "right" : "for (int r = 0; r < data.length; r++)",
      "info" : "ForStatement[19422-19538]:ForStatement[19422-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19460-19538]:Block[19460-19538]"
    }, {
      "left" : "columnCount = Math.max(columnCount, data[r].length);",
      "right" : "columnCount = Math.max(columnCount, data[r].length);",
      "info" : "ExpressionStatement[19475-19527]:ExpressionStatement[19475-19527]"
    }, {
      "left" : "if (columnKeys.length != columnCount)",
      "right" : "if (columnKeys.length != columnCount)",
      "info" : "IfStatement[19548-19772]:IfStatement[19548-19772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19586-19772]:Block[19586-19772]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                \"The number of column keys does not match the number of \"\r\n                + \"columns in the data array.\");",
      "right" : "throw new IllegalArgumentException(\r\n                \"The number of column keys does not match the number of \"\r\n                + \"columns in the data array.\");",
      "info" : "ThrowStatement[19601-19761]:ThrowStatement[19601-19761]"
    }, {
      "left" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "right" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "info" : "VariableDeclarationStatement[19815-19876]:VariableDeclarationStatement[19815-19876]"
    }, {
      "left" : "for (int r = 0; r < data.length; r++)",
      "right" : "for (int r = 0; r < data.length; r++)",
      "info" : "ForStatement[19886-20184]:ForStatement[19886-20184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19924-20184]:Block[19924-20184]"
    }, {
      "left" : "Comparable rowKey = rowKeys[r];",
      "right" : "Comparable rowKey = rowKeys[r];",
      "info" : "VariableDeclarationStatement[19939-19970]:VariableDeclarationStatement[19939-19970]"
    }, {
      "left" : "for (int c = 0; c < data[r].length; c++)",
      "right" : "for (int c = 0; c < data[r].length; c++)",
      "info" : "ForStatement[19984-20173]:ForStatement[19984-20173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20025-20173]:Block[20025-20173]"
    }, {
      "left" : "Comparable columnKey = columnKeys[c];",
      "right" : "Comparable columnKey = columnKeys[c];",
      "info" : "VariableDeclarationStatement[20044-20081]:VariableDeclarationStatement[20044-20081]"
    }, {
      "left" : "result.addValue(new Double(data[r][c]), rowKey, columnKey);",
      "right" : "result.addValue(new Double(data[r][c]), rowKey, columnKey);",
      "info" : "ExpressionStatement[20099-20158]:ExpressionStatement[20099-20158]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20194-20208]:ReturnStatement[20194-20208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20695-21189]:Block[20695-21189]"
    }, {
      "left" : "if (rowKey == null)",
      "right" : "if (rowKey == null)",
      "info" : "IfStatement[20708-20816]:IfStatement[20708-20816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20728-20816]:Block[20728-20816]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'rowKey' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'rowKey' argument.\");",
      "info" : "ThrowStatement[20743-20805]:ThrowStatement[20743-20805]"
    }, {
      "left" : "if (rowData == null)",
      "right" : "if (rowData == null)",
      "info" : "IfStatement[20826-20936]:IfStatement[20826-20936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20847-20936]:Block[20847-20936]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'rowData' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'rowData' argument.\");",
      "info" : "ThrowStatement[20862-20925]:ThrowStatement[20862-20925]"
    }, {
      "left" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "right" : "DefaultCategoryDataset result = new DefaultCategoryDataset();",
      "info" : "VariableDeclarationStatement[20946-21007]:VariableDeclarationStatement[20946-21007]"
    }, {
      "left" : "for (int i = 0; i < rowData.getItemCount(); i++)",
      "right" : "for (int i = 0; i < rowData.getItemCount(); i++)",
      "info" : "ForStatement[21017-21156]:ForStatement[21017-21156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21066-21156]:Block[21066-21156]"
    }, {
      "left" : "result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));",
      "right" : "result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));",
      "info" : "ExpressionStatement[21081-21145]:ExpressionStatement[21081-21145]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[21166-21180]:ReturnStatement[21166-21180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21846-22098]:Block[21846-22098]"
    }, {
      "left" : "XYSeries series = sampleFunction2DToSeries(f, start, end, samples,\r\n                seriesKey);",
      "right" : "XYSeries series = sampleFunction2DToSeries(f, start, end, samples,\r\n                seriesKey);",
      "info" : "VariableDeclarationStatement[21895-21990]:VariableDeclarationStatement[21895-21990]"
    }, {
      "left" : "XYSeriesCollection collection = new XYSeriesCollection(series);",
      "right" : "XYSeriesCollection collection = new XYSeriesCollection(series);",
      "info" : "VariableDeclarationStatement[22000-22063]:VariableDeclarationStatement[22000-22063]"
    }, {
      "left" : "return collection;",
      "right" : "return collection;",
      "info" : "ReturnStatement[22073-22091]:ReturnStatement[22073-22091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22790-23539]:Block[22790-23539]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[22803-22901]:IfStatement[22803-22901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22818-22901]:Block[22818-22901]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'f' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'f' argument.\");",
      "info" : "ThrowStatement[22833-22890]:ThrowStatement[22833-22890]"
    }, {
      "left" : "if (seriesKey == null)",
      "right" : "if (seriesKey == null)",
      "info" : "IfStatement[22911-23025]:IfStatement[22911-23025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22934-23025]:Block[22934-23025]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'seriesKey' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'seriesKey' argument.\");",
      "info" : "ThrowStatement[22949-23014]:ThrowStatement[22949-23014]"
    }, {
      "left" : "if (start >= end)",
      "right" : "if (start >= end)",
      "info" : "IfStatement[23035-23143]:IfStatement[23035-23143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23053-23143]:Block[23053-23143]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Requires 'start' < 'end'.\");",
      "right" : "throw new IllegalArgumentException(\"Requires 'start' < 'end'.\");",
      "info" : "ThrowStatement[23068-23132]:ThrowStatement[23068-23132]"
    }, {
      "left" : "if (samples < 2)",
      "right" : "if (samples < 2)",
      "info" : "IfStatement[23153-23257]:IfStatement[23153-23257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23170-23257]:Block[23170-23257]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Requires 'samples' > 1\");",
      "right" : "throw new IllegalArgumentException(\"Requires 'samples' > 1\");",
      "info" : "ThrowStatement[23185-23246]:ThrowStatement[23185-23246]"
    }, {
      "left" : "XYSeries series = new XYSeries(seriesKey);",
      "right" : "XYSeries series = new XYSeries(seriesKey);",
      "info" : "VariableDeclarationStatement[23269-23311]:VariableDeclarationStatement[23269-23311]"
    }, {
      "left" : "double step = (end - start) / (samples - 1);",
      "right" : "double step = (end - start) / (samples - 1);",
      "info" : "VariableDeclarationStatement[23321-23365]:VariableDeclarationStatement[23321-23365]"
    }, {
      "left" : "for (int i = 0; i < samples; i++)",
      "right" : "for (int i = 0; i < samples; i++)",
      "info" : "ForStatement[23375-23508]:ForStatement[23375-23508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23409-23508]:Block[23409-23508]"
    }, {
      "left" : "double x = start + (step * i);",
      "right" : "double x = start + (step * i);",
      "info" : "VariableDeclarationStatement[23424-23454]:VariableDeclarationStatement[23424-23454]"
    }, {
      "left" : "series.add(x, f.getValue(x));",
      "right" : "series.add(x, f.getValue(x));",
      "info" : "ExpressionStatement[23468-23497]:ExpressionStatement[23468-23497]"
    }, {
      "left" : "return series;",
      "right" : "return series;",
      "info" : "ReturnStatement[23518-23532]:ReturnStatement[23518-23532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23855-24374]:Block[23855-24374]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[23868-23927]:IfStatement[23868-23927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23889-23927]:Block[23889-23927]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23904-23916]:ReturnStatement[23904-23916]"
    }, {
      "left" : "int itemCount = dataset.getItemCount();",
      "right" : "int itemCount = dataset.getItemCount();",
      "info" : "VariableDeclarationStatement[23939-23978]:VariableDeclarationStatement[23939-23978]"
    }, {
      "left" : "if (itemCount == 0)",
      "right" : "if (itemCount == 0)",
      "info" : "IfStatement[23988-24046]:IfStatement[23988-24046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24008-24046]:Block[24008-24046]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24023-24035]:ReturnStatement[24023-24035]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[24058-24341]:ForStatement[24058-24341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24103-24341]:Block[24103-24341]"
    }, {
      "left" : "Number y = dataset.getValue(item);",
      "right" : "Number y = dataset.getValue(item);",
      "info" : "VariableDeclarationStatement[24118-24152]:VariableDeclarationStatement[24118-24152]"
    }, {
      "left" : "if (y != null)",
      "right" : "if (y != null)",
      "info" : "IfStatement[24166-24330]:IfStatement[24166-24330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24181-24330]:Block[24181-24330]"
    }, {
      "left" : "double yy = y.doubleValue();",
      "right" : "double yy = y.doubleValue();",
      "info" : "VariableDeclarationStatement[24200-24228]:VariableDeclarationStatement[24200-24228]"
    }, {
      "left" : "if (yy > 0.0)",
      "right" : "if (yy > 0.0)",
      "info" : "IfStatement[24246-24315]:IfStatement[24246-24315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24260-24315]:Block[24260-24315]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24283-24296]:ReturnStatement[24283-24296]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24353-24365]:ReturnStatement[24353-24365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24695-25227]:Block[24695-25227]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[24708-24767]:IfStatement[24708-24767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24729-24767]:Block[24729-24767]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24744-24756]:ReturnStatement[24744-24756]"
    }, {
      "left" : "int rowCount = dataset.getRowCount();",
      "right" : "int rowCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[24779-24816]:VariableDeclarationStatement[24779-24816]"
    }, {
      "left" : "int columnCount = dataset.getColumnCount();",
      "right" : "int columnCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[24826-24869]:VariableDeclarationStatement[24826-24869]"
    }, {
      "left" : "if (rowCount == 0 || columnCount == 0)",
      "right" : "if (rowCount == 0 || columnCount == 0)",
      "info" : "IfStatement[24879-24956]:IfStatement[24879-24956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24918-24956]:Block[24918-24956]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24933-24945]:ReturnStatement[24933-24945]"
    }, {
      "left" : "for (int r = 0; r < rowCount; r++)",
      "right" : "for (int r = 0; r < rowCount; r++)",
      "info" : "ForStatement[24968-25194]:ForStatement[24968-25194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25003-25194]:Block[25003-25194]"
    }, {
      "left" : "for (int c = 0; c < columnCount; c++)",
      "right" : "for (int c = 0; c < columnCount; c++)",
      "info" : "ForStatement[25018-25183]:ForStatement[25018-25183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25056-25183]:Block[25056-25183]"
    }, {
      "left" : "if (dataset.getValue(r, c) != null)",
      "right" : "if (dataset.getValue(r, c) != null)",
      "info" : "IfStatement[25075-25166]:IfStatement[25075-25166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25111-25166]:Block[25111-25166]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25134-25147]:ReturnStatement[25134-25147]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25206-25218]:ReturnStatement[25206-25218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25542-25802]:Block[25542-25802]"
    }, {
      "left" : "if (dataset != null)",
      "right" : "if (dataset != null)",
      "info" : "IfStatement[25553-25773]:IfStatement[25553-25773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25574-25773]:Block[25574-25773]"
    }, {
      "left" : "for (int s = 0; s < dataset.getSeriesCount(); s++)",
      "right" : "for (int s = 0; s < dataset.getSeriesCount(); s++)",
      "info" : "ForStatement[25589-25762]:ForStatement[25589-25762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25640-25762]:Block[25640-25762]"
    }, {
      "left" : "if (dataset.getItemCount(s) > 0)",
      "right" : "if (dataset.getItemCount(s) > 0)",
      "info" : "IfStatement[25659-25747]:IfStatement[25659-25747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25692-25747]:Block[25692-25747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25715-25728]:ReturnStatement[25715-25728]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25783-25795]:ReturnStatement[25783-25795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26112-26169]:Block[26112-26169]"
    }, {
      "left" : "return findDomainBounds(dataset, true);",
      "right" : "return findDomainBounds(dataset, true);",
      "info" : "ReturnStatement[26123-26162]:ReturnStatement[26123-26162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26768-27288]:Block[26768-27288]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[26781-26891]:IfStatement[26781-26891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26802-26891]:Block[26802-26891]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[26817-26880]:ThrowStatement[26817-26880]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[26903-26923]:VariableDeclarationStatement[26903-26923]"
    }, {
      "left" : "if (dataset instanceof DomainInfo)",
      "right" : "if (dataset instanceof DomainInfo)",
      "info" : "IfStatement[26998-27255]:IfStatement[26998-27255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27033-27159]:Block[27033-27159]"
    }, {
      "left" : "DomainInfo info = (DomainInfo) dataset;",
      "right" : "DomainInfo info = (DomainInfo) dataset;",
      "info" : "VariableDeclarationStatement[27048-27087]:VariableDeclarationStatement[27048-27087]"
    }, {
      "left" : "result = info.getDomainBounds(includeInterval);",
      "right" : "result = info.getDomainBounds(includeInterval);",
      "info" : "ExpressionStatement[27101-27148]:ExpressionStatement[27101-27148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27174-27255]:Block[27174-27255]"
    }, {
      "left" : "result = iterateDomainBounds(dataset, includeInterval);",
      "right" : "result = iterateDomainBounds(dataset, includeInterval);",
      "info" : "ExpressionStatement[27189-27244]:ExpressionStatement[27189-27244]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27265-27279]:ReturnStatement[27265-27279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27999-28519]:Block[27999-28519]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[28010-28120]:IfStatement[28010-28120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28031-28120]:Block[28031-28120]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[28046-28109]:ThrowStatement[28046-28109]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[28130-28150]:VariableDeclarationStatement[28130-28150]"
    }, {
      "left" : "if (dataset instanceof XYDomainInfo)",
      "right" : "if (dataset instanceof XYDomainInfo)",
      "info" : "IfStatement[28160-28488]:IfStatement[28160-28488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28197-28346]:Block[28197-28346]"
    }, {
      "left" : "XYDomainInfo info = (XYDomainInfo) dataset;",
      "right" : "XYDomainInfo info = (XYDomainInfo) dataset;",
      "info" : "VariableDeclarationStatement[28212-28255]:VariableDeclarationStatement[28212-28255]"
    }, {
      "left" : "result = info.getDomainBounds(visibleSeriesKeys, includeInterval);",
      "right" : "result = info.getDomainBounds(visibleSeriesKeys, includeInterval);",
      "info" : "ExpressionStatement[28269-28335]:ExpressionStatement[28269-28335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28361-28488]:Block[28361-28488]"
    }, {
      "left" : "result = iterateToFindDomainBounds(dataset, visibleSeriesKeys,\r\n                    includeInterval);",
      "right" : "result = iterateToFindDomainBounds(dataset, visibleSeriesKeys,\r\n                    includeInterval);",
      "info" : "ExpressionStatement[28376-28477]:ExpressionStatement[28376-28477]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28498-28512]:ReturnStatement[28498-28512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28993-29053]:Block[28993-29053]"
    }, {
      "left" : "return iterateDomainBounds(dataset, true);",
      "right" : "return iterateDomainBounds(dataset, true);",
      "info" : "ReturnStatement[29004-29046]:ReturnStatement[29004-29046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31790-31846]:Block[32184-32240]"
    }, {
      "left" : "return findRangeBounds(dataset, true);",
      "right" : "return findRangeBounds(dataset, true);",
      "info" : "ReturnStatement[31801-31839]:ReturnStatement[32195-32233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32348-32792]:Block[32742-33186]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[32359-32469]:IfStatement[32753-32863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32380-32469]:Block[32774-32863]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[32395-32458]:ThrowStatement[32789-32852]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[32479-32499]:VariableDeclarationStatement[32873-32893]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[32509-32761]:IfStatement[32903-33155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32543-32666]:Block[32937-33060]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[32558-32595]:VariableDeclarationStatement[32952-32989]"
    }, {
      "left" : "result = info.getRangeBounds(includeInterval);",
      "right" : "result = info.getRangeBounds(includeInterval);",
      "info" : "ExpressionStatement[32609-32655]:ExpressionStatement[33003-33049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32681-32761]:Block[33075-33155]"
    }, {
      "left" : "result = iterateRangeBounds(dataset, includeInterval);",
      "right" : "result = iterateRangeBounds(dataset, includeInterval);",
      "info" : "ExpressionStatement[32696-32750]:ExpressionStatement[33090-33144]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32771-32785]:ReturnStatement[33165-33179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33447-33980]:Block[33841-34374]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[33458-33568]:IfStatement[33852-33962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33479-33568]:Block[33873-33962]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[33494-33557]:ThrowStatement[33888-33951]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[33578-33598]:VariableDeclarationStatement[33972-33992]"
    }, {
      "left" : "if (dataset instanceof CategoryRangeInfo)",
      "right" : "if (dataset instanceof CategoryRangeInfo)",
      "info" : "IfStatement[33608-33949]:IfStatement[34002-34343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33650-33808]:Block[34044-34202]"
    }, {
      "left" : "CategoryRangeInfo info = (CategoryRangeInfo) dataset;",
      "right" : "CategoryRangeInfo info = (CategoryRangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[33665-33718]:VariableDeclarationStatement[34059-34112]"
    }, {
      "left" : "result = info.getRangeBounds(visibleSeriesKeys, includeInterval);",
      "right" : "result = info.getRangeBounds(visibleSeriesKeys, includeInterval);",
      "info" : "ExpressionStatement[33732-33797]:ExpressionStatement[34126-34191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33823-33949]:Block[34217-34343]"
    }, {
      "left" : "result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\r\n                    includeInterval);",
      "right" : "result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\r\n                    includeInterval);",
      "info" : "ExpressionStatement[33838-33938]:ExpressionStatement[34232-34332]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33959-33973]:ReturnStatement[34353-34367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34359-34415]:Block[34753-34809]"
    }, {
      "left" : "return findRangeBounds(dataset, true);",
      "right" : "return findRangeBounds(dataset, true);",
      "info" : "ReturnStatement[34370-34408]:ReturnStatement[34764-34802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35017-35461]:Block[35411-35855]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[35028-35138]:IfStatement[35422-35532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35049-35138]:Block[35443-35532]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[35064-35127]:ThrowStatement[35458-35521]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[35148-35168]:VariableDeclarationStatement[35542-35562]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[35178-35430]:IfStatement[35572-35824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35212-35335]:Block[35606-35729]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[35227-35264]:VariableDeclarationStatement[35621-35658]"
    }, {
      "left" : "result = info.getRangeBounds(includeInterval);",
      "right" : "result = info.getRangeBounds(includeInterval);",
      "info" : "ExpressionStatement[35278-35324]:ExpressionStatement[35672-35718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35350-35430]:Block[35744-35824]"
    }, {
      "left" : "result = iterateRangeBounds(dataset, includeInterval);",
      "right" : "result = iterateRangeBounds(dataset, includeInterval);",
      "info" : "ExpressionStatement[35365-35419]:ExpressionStatement[35759-35813]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35440-35454]:ReturnStatement[35834-35848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36266-36818]:Block[36660-37212]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[36277-36387]:IfStatement[36671-36781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36298-36387]:Block[36692-36781]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[36313-36376]:ThrowStatement[36707-36770]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[36397-36417]:VariableDeclarationStatement[36791-36811]"
    }, {
      "left" : "if (dataset instanceof XYRangeInfo)",
      "right" : "if (dataset instanceof XYRangeInfo)",
      "info" : "IfStatement[36427-36787]:IfStatement[36821-37181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36463-36638]:Block[36857-37032]"
    }, {
      "left" : "XYRangeInfo info = (XYRangeInfo) dataset;",
      "right" : "XYRangeInfo info = (XYRangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[36478-36519]:VariableDeclarationStatement[36872-36913]"
    }, {
      "left" : "result = info.getRangeBounds(visibleSeriesKeys, xRange,\r\n                    includeInterval);",
      "right" : "result = info.getRangeBounds(visibleSeriesKeys, xRange,\r\n                    includeInterval);",
      "info" : "ExpressionStatement[36533-36627]:ExpressionStatement[36927-37021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36653-36787]:Block[37047-37181]"
    }, {
      "left" : "result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\r\n                    xRange, includeInterval);",
      "right" : "result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\r\n                    xRange, includeInterval);",
      "info" : "ExpressionStatement[36668-36776]:ExpressionStatement[37062-37170]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[36797-36811]:ReturnStatement[37191-37205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37448-37518]:Block[37842-37912]"
    }, {
      "left" : "return iterateRangeBounds(dataset, includeInterval);",
      "right" : "return iterateRangeBounds(dataset, includeInterval);",
      "info" : "ReturnStatement[37459-37511]:ReturnStatement[37853-37905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37875-37934]:Block[38269-38328]"
    }, {
      "left" : "return iterateRangeBounds(dataset, true);",
      "right" : "return iterateRangeBounds(dataset, true);",
      "info" : "ReturnStatement[37886-37927]:ReturnStatement[38280-38321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38469-40939]:Block[38863-41333]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[38480-38522]:VariableDeclarationStatement[38874-38916]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[38532-38574]:VariableDeclarationStatement[38926-38968]"
    }, {
      "left" : "int rowCount = dataset.getRowCount();",
      "right" : "int rowCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[38584-38621]:VariableDeclarationStatement[38978-39015]"
    }, {
      "left" : "int columnCount = dataset.getColumnCount();",
      "right" : "int columnCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[38631-38674]:VariableDeclarationStatement[39025-39068]"
    }, {
      "left" : "if (includeInterval && dataset instanceof IntervalCategoryDataset)",
      "right" : "if (includeInterval && dataset instanceof IntervalCategoryDataset)",
      "info" : "IfStatement[38684-40767]:IfStatement[39078-41161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38751-40126]:Block[39145-40520]"
    }, {
      "left" : "IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;",
      "right" : "IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[38880-38944]:VariableDeclarationStatement[39274-39338]"
    }, {
      "left" : "Number value, lvalue, uvalue;",
      "right" : "Number value, lvalue, uvalue;",
      "info" : "VariableDeclarationStatement[38958-38987]:VariableDeclarationStatement[39352-39381]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[39001-40115]:ForStatement[39395-40509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39042-40115]:Block[39436-40509]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[39061-40100]:ForStatement[39455-40494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39114-40100]:Block[39508-40494]"
    }, {
      "left" : "value = icd.getValue(row, column);",
      "right" : "value = icd.getValue(row, column);",
      "info" : "ExpressionStatement[39137-39171]:ExpressionStatement[39531-39565]"
    }, {
      "left" : "double v;",
      "right" : "double v;",
      "info" : "VariableDeclarationStatement[39193-39202]:VariableDeclarationStatement[39587-39596]"
    }, {
      "left" : "if ((value != null)\r\n                            && !Double.isNaN(v = value.doubleValue()))",
      "right" : "if ((value != null)\r\n                            && !Double.isNaN(v = value.doubleValue()))",
      "info" : "IfStatement[39224-39454]:IfStatement[39618-39848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39316-39454]:Block[39710-39848]"
    }, {
      "left" : "minimum = Math.min(v, minimum);",
      "right" : "minimum = Math.min(v, minimum);",
      "info" : "ExpressionStatement[39343-39374]:ExpressionStatement[39737-39768]"
    }, {
      "left" : "maximum = Math.max(v, maximum);",
      "right" : "maximum = Math.max(v, maximum);",
      "info" : "ExpressionStatement[39400-39431]:ExpressionStatement[39794-39825]"
    }, {
      "left" : "lvalue = icd.getStartValue(row, column);",
      "right" : "lvalue = icd.getStartValue(row, column);",
      "info" : "ExpressionStatement[39476-39516]:ExpressionStatement[39870-39910]"
    }, {
      "left" : "if (lvalue != null\r\n                            && !Double.isNaN(v = lvalue.doubleValue()))",
      "right" : "if (lvalue != null\r\n                            && !Double.isNaN(v = lvalue.doubleValue()))",
      "info" : "IfStatement[39538-39768]:IfStatement[39932-40162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39630-39768]:Block[40024-40162]"
    }, {
      "left" : "minimum = Math.min(v, minimum);",
      "right" : "minimum = Math.min(v, minimum);",
      "info" : "ExpressionStatement[39657-39688]:ExpressionStatement[40051-40082]"
    }, {
      "left" : "maximum = Math.max(v, maximum);",
      "right" : "maximum = Math.max(v, maximum);",
      "info" : "ExpressionStatement[39714-39745]:ExpressionStatement[40108-40139]"
    }, {
      "left" : "uvalue = icd.getEndValue(row, column);",
      "right" : "uvalue = icd.getEndValue(row, column);",
      "info" : "ExpressionStatement[39790-39828]:ExpressionStatement[40184-40222]"
    }, {
      "left" : "if (uvalue != null \r\n                            && !Double.isNaN(v = uvalue.doubleValue()))",
      "right" : "if (uvalue != null \r\n                            && !Double.isNaN(v = uvalue.doubleValue()))",
      "info" : "IfStatement[39850-40081]:IfStatement[40244-40475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39943-40081]:Block[40337-40475]"
    }, {
      "left" : "minimum = Math.min(v, minimum);",
      "right" : "minimum = Math.min(v, minimum);",
      "info" : "ExpressionStatement[39970-40001]:ExpressionStatement[40364-40395]"
    }, {
      "left" : "maximum = Math.max(v, maximum);",
      "right" : "maximum = Math.max(v, maximum);",
      "info" : "ExpressionStatement[40027-40058]:ExpressionStatement[40421-40452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40141-40767]:Block[40535-41161]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[40221-40756]:ForStatement[40615-41150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40262-40756]:Block[40656-41150]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[40281-40741]:ForStatement[40675-41135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40334-40741]:Block[40728-41135]"
    }, {
      "left" : "Number value = dataset.getValue(row, column);",
      "right" : "Number value = dataset.getValue(row, column);",
      "info" : "VariableDeclarationStatement[40357-40402]:VariableDeclarationStatement[40751-40796]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[40424-40722]:IfStatement[40818-41116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40443-40722]:Block[40837-41116]"
    }, {
      "left" : "double v = value.doubleValue();",
      "right" : "double v = value.doubleValue();",
      "info" : "VariableDeclarationStatement[40470-40501]:VariableDeclarationStatement[40864-40895]"
    }, {
      "left" : "if (!Double.isNaN(v))",
      "right" : "if (!Double.isNaN(v))",
      "info" : "IfStatement[40527-40699]:IfStatement[40921-41093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40549-40699]:Block[40943-41093]"
    }, {
      "left" : "minimum = Math.min(minimum, v);",
      "right" : "minimum = Math.min(minimum, v);",
      "info" : "ExpressionStatement[40580-40611]:ExpressionStatement[40974-41005]"
    }, {
      "left" : "maximum = Math.max(maximum, v);",
      "right" : "maximum = Math.max(maximum, v);",
      "info" : "ExpressionStatement[40641-40672]:ExpressionStatement[41035-41066]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[40777-40932]:IfStatement[41171-41326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40818-40856]:Block[41212-41250]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40833-40845]:ReturnStatement[41227-41239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40871-40932]:Block[41265-41326]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[40886-40921]:ReturnStatement[41280-41315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41563-48191]:Block[41957-48585]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[41576-41686]:IfStatement[41970-42080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41597-41686]:Block[41991-42080]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[41612-41675]:ThrowStatement[42006-42069]"
    }, {
      "left" : "if (visibleSeriesKeys == null)",
      "right" : "if (visibleSeriesKeys == null)",
      "info" : "IfStatement[41696-41848]:IfStatement[42090-42242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41727-41848]:Block[42121-42242]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "right" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "info" : "ThrowStatement[41742-41837]:ThrowStatement[42136-42231]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[41860-41902]:VariableDeclarationStatement[42254-42296]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[41912-41954]:VariableDeclarationStatement[42306-42348]"
    }, {
      "left" : "int columnCount = dataset.getColumnCount();",
      "right" : "int columnCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[41964-42007]:VariableDeclarationStatement[42358-42401]"
    }, {
      "left" : "if (includeInterval\r\n                && dataset instanceof BoxAndWhiskerCategoryDataset)",
      "right" : "if (includeInterval\r\n                && dataset instanceof BoxAndWhiskerCategoryDataset)",
      "info" : "IfStatement[42017-48019]:IfStatement[42411-48413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42106-43366]:Block[42500-43760]"
    }, {
      "left" : "BoxAndWhiskerCategoryDataset bx\r\n                    = (BoxAndWhiskerCategoryDataset) dataset;",
      "right" : "BoxAndWhiskerCategoryDataset bx\r\n                    = (BoxAndWhiskerCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[42181-42275]:VariableDeclarationStatement[42575-42669]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[42289-42338]:VariableDeclarationStatement[42683-42732]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[42352-43355]:WhileStatement[42746-43749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42379-43355]:Block[42773-43749]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[42398-42450]:VariableDeclarationStatement[42792-42844]"
    }, {
      "left" : "int series = dataset.getRowIndex(seriesKey);",
      "right" : "int series = dataset.getRowIndex(seriesKey);",
      "info" : "VariableDeclarationStatement[42468-42512]:VariableDeclarationStatement[42862-42906]"
    }, {
      "left" : "int itemCount = dataset.getColumnCount();",
      "right" : "int itemCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[42530-42571]:VariableDeclarationStatement[42924-42965]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[42589-43340]:ForStatement[42983-43734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42634-43340]:Block[43028-43734]"
    }, {
      "left" : "Number lvalue = bx.getMinRegularValue(series, item);",
      "right" : "Number lvalue = bx.getMinRegularValue(series, item);",
      "info" : "VariableDeclarationStatement[42657-42709]:VariableDeclarationStatement[43051-43103]"
    }, {
      "left" : "if (lvalue == null)",
      "right" : "if (lvalue == null)",
      "info" : "IfStatement[42731-42836]:IfStatement[43125-43230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42751-42836]:Block[43145-43230]"
    }, {
      "left" : "lvalue = bx.getValue(series, item);",
      "right" : "lvalue = bx.getValue(series, item);",
      "info" : "ExpressionStatement[42778-42813]:ExpressionStatement[43172-43207]"
    }, {
      "left" : "Number uvalue = bx.getMaxRegularValue(series, item);",
      "right" : "Number uvalue = bx.getMaxRegularValue(series, item);",
      "info" : "VariableDeclarationStatement[42858-42910]:VariableDeclarationStatement[43252-43304]"
    }, {
      "left" : "if (uvalue == null)",
      "right" : "if (uvalue == null)",
      "info" : "IfStatement[42932-43037]:IfStatement[43326-43431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42952-43037]:Block[43346-43431]"
    }, {
      "left" : "uvalue = bx.getValue(series, item);",
      "right" : "uvalue = bx.getValue(series, item);",
      "info" : "ExpressionStatement[42979-43014]:ExpressionStatement[43373-43408]"
    }, {
      "left" : "if (lvalue != null)",
      "right" : "if (lvalue != null)",
      "info" : "IfStatement[43059-43179]:IfStatement[43453-43573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43079-43179]:Block[43473-43573]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "right" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "info" : "ExpressionStatement[43106-43156]:ExpressionStatement[43500-43550]"
    }, {
      "left" : "if (uvalue != null)",
      "right" : "if (uvalue != null)",
      "info" : "IfStatement[43201-43321]:IfStatement[43595-43715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43221-43321]:Block[43615-43715]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "right" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "info" : "ExpressionStatement[43248-43298]:ExpressionStatement[43642-43692]"
    }, {
      "left" : "if (includeInterval\r\n                && dataset instanceof IntervalCategoryDataset)",
      "right" : "if (includeInterval\r\n                && dataset instanceof IntervalCategoryDataset)",
      "info" : "IfStatement[43381-48019]:IfStatement[43775-48413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43465-44538]:Block[43859-44932]"
    }, {
      "left" : "IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;",
      "right" : "IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[43594-43658]:VariableDeclarationStatement[43988-44052]"
    }, {
      "left" : "Number lvalue, uvalue;",
      "right" : "Number lvalue, uvalue;",
      "info" : "VariableDeclarationStatement[43672-43694]:VariableDeclarationStatement[44066-44088]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[43708-43757]:VariableDeclarationStatement[44102-44151]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[43771-44527]:WhileStatement[44165-44921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43798-44527]:Block[44192-44921]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[43817-43869]:VariableDeclarationStatement[44211-44263]"
    }, {
      "left" : "int series = dataset.getRowIndex(seriesKey);",
      "right" : "int series = dataset.getRowIndex(seriesKey);",
      "info" : "VariableDeclarationStatement[43887-43931]:VariableDeclarationStatement[44281-44325]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[43949-44512]:ForStatement[44343-44906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44002-44512]:Block[44396-44906]"
    }, {
      "left" : "lvalue = icd.getStartValue(series, column);",
      "right" : "lvalue = icd.getStartValue(series, column);",
      "info" : "ExpressionStatement[44025-44068]:ExpressionStatement[44419-44462]"
    }, {
      "left" : "uvalue = icd.getEndValue(series, column);",
      "right" : "uvalue = icd.getEndValue(series, column);",
      "info" : "ExpressionStatement[44090-44131]:ExpressionStatement[44484-44525]"
    }, {
      "left" : "if (lvalue != null && !Double.isNaN(lvalue.doubleValue()))",
      "right" : "if (lvalue != null && !Double.isNaN(lvalue.doubleValue()))",
      "info" : "IfStatement[44153-44312]:IfStatement[44547-44706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44212-44312]:Block[44606-44706]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "right" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "info" : "ExpressionStatement[44239-44289]:ExpressionStatement[44633-44683]"
    }, {
      "left" : "if (uvalue != null && !Double.isNaN(uvalue.doubleValue()))",
      "right" : "if (uvalue != null && !Double.isNaN(uvalue.doubleValue()))",
      "info" : "IfStatement[44334-44493]:IfStatement[44728-44887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44393-44493]:Block[44787-44887]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "right" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "info" : "ExpressionStatement[44420-44470]:ExpressionStatement[44814-44864]"
    }, {
      "left" : "if (includeInterval\r\n                && dataset instanceof MultiValueCategoryDataset)",
      "right" : "if (includeInterval\r\n                && dataset instanceof MultiValueCategoryDataset)",
      "info" : "IfStatement[44553-48019]:IfStatement[44947-48413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44639-45730]:Block[45033-46124]"
    }, {
      "left" : "MultiValueCategoryDataset mvcd\r\n                    = (MultiValueCategoryDataset) dataset;",
      "right" : "MultiValueCategoryDataset mvcd\r\n                    = (MultiValueCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[44768-44858]:VariableDeclarationStatement[45162-45252]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[44872-44921]:VariableDeclarationStatement[45266-45315]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[44935-45719]:WhileStatement[45329-46113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44962-45719]:Block[45356-46113]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[44981-45033]:VariableDeclarationStatement[45375-45427]"
    }, {
      "left" : "int series = dataset.getRowIndex(seriesKey);",
      "right" : "int series = dataset.getRowIndex(seriesKey);",
      "info" : "VariableDeclarationStatement[45051-45095]:VariableDeclarationStatement[45445-45489]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[45113-45704]:ForStatement[45507-46098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45166-45704]:Block[45560-46098]"
    }, {
      "left" : "List values = mvcd.getValues(series, column);",
      "right" : "List values = mvcd.getValues(series, column);",
      "info" : "VariableDeclarationStatement[45189-45234]:VariableDeclarationStatement[45583-45628]"
    }, {
      "left" : "Iterator valueIterator = values.iterator();",
      "right" : "Iterator valueIterator = values.iterator();",
      "info" : "VariableDeclarationStatement[45256-45299]:VariableDeclarationStatement[45650-45693]"
    }, {
      "left" : "while (valueIterator.hasNext())",
      "right" : "while (valueIterator.hasNext())",
      "info" : "WhileStatement[45321-45686]:WhileStatement[45715-46080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45353-45686]:Block[45747-46080]"
    }, {
      "left" : "Object o = valueIterator.next();",
      "right" : "Object o = valueIterator.next();",
      "info" : "VariableDeclarationStatement[45377-45409]:VariableDeclarationStatement[45771-45803]"
    }, {
      "left" : "if (o instanceof Number)",
      "right" : "if (o instanceof Number)",
      "info" : "IfStatement[45417-45663]:IfStatement[45811-46057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45441-45663]:Block[45835-46057]"
    }, {
      "left" : "double v = ((Number) o).doubleValue();",
      "right" : "double v = ((Number) o).doubleValue();",
      "info" : "VariableDeclarationStatement[45451-45489]:VariableDeclarationStatement[45845-45883]"
    }, {
      "left" : "if (!Double.isNaN(v))",
      "right" : "if (!Double.isNaN(v))",
      "info" : "IfStatement[45498-45654]:IfStatement[45892-46048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45519-45654]:Block[45913-46048]"
    }, {
      "left" : "minimum = Math.min(minimum, v);",
      "right" : "minimum = Math.min(minimum, v);",
      "info" : "ExpressionStatement[45551-45582]:ExpressionStatement[45945-45976]"
    }, {
      "left" : "maximum = Math.max(maximum, v);",
      "right" : "maximum = Math.max(maximum, v);",
      "info" : "ExpressionStatement[45613-45644]:ExpressionStatement[46007-46038]"
    }, {
      "left" : "if (includeInterval\r\n                && dataset instanceof StatisticalCategoryDataset)",
      "right" : "if (includeInterval\r\n                && dataset instanceof StatisticalCategoryDataset)",
      "info" : "IfStatement[45745-48019]:IfStatement[46139-48413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45832-47194]:Block[46226-47588]"
    }, {
      "left" : "StatisticalCategoryDataset scd\r\n                    = (StatisticalCategoryDataset) dataset;",
      "right" : "StatisticalCategoryDataset scd\r\n                    = (StatisticalCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[45961-46052]:VariableDeclarationStatement[46355-46446]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[46066-46115]:VariableDeclarationStatement[46460-46509]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[46129-47183]:WhileStatement[46523-47577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46156-47183]:Block[46550-47577]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[46175-46227]:VariableDeclarationStatement[46569-46621]"
    }, {
      "left" : "int series = dataset.getRowIndex(seriesKey);",
      "right" : "int series = dataset.getRowIndex(seriesKey);",
      "info" : "VariableDeclarationStatement[46245-46289]:VariableDeclarationStatement[46639-46683]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[46307-47168]:ForStatement[46701-47562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46360-47168]:Block[46754-47562]"
    }, {
      "left" : "Number meanN = scd.getMeanValue(series, column);",
      "right" : "Number meanN = scd.getMeanValue(series, column);",
      "info" : "VariableDeclarationStatement[46383-46431]:VariableDeclarationStatement[46777-46825]"
    }, {
      "left" : "if (meanN != null)",
      "right" : "if (meanN != null)",
      "info" : "IfStatement[46453-47149]:IfStatement[46847-47543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46472-47149]:Block[46866-47543]"
    }, {
      "left" : "double std = 0.0;",
      "right" : "double std = 0.0;",
      "info" : "VariableDeclarationStatement[46499-46516]:VariableDeclarationStatement[46893-46910]"
    }, {
      "left" : "Number stdN = scd.getStdDevValue(series, column);",
      "right" : "Number stdN = scd.getStdDevValue(series, column);",
      "info" : "VariableDeclarationStatement[46542-46591]:VariableDeclarationStatement[46936-46985]"
    }, {
      "left" : "if (stdN != null)",
      "right" : "if (stdN != null)",
      "info" : "IfStatement[46617-46847]:IfStatement[47011-47241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46635-46847]:Block[47029-47241]"
    }, {
      "left" : "std = stdN.doubleValue();",
      "right" : "std = stdN.doubleValue();",
      "info" : "ExpressionStatement[46666-46691]:ExpressionStatement[47060-47085]"
    }, {
      "left" : "if (Double.isNaN(std))",
      "right" : "if (Double.isNaN(std))",
      "info" : "IfStatement[46721-46820]:IfStatement[47115-47214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46744-46820]:Block[47138-47214]"
    }, {
      "left" : "std = 0.0;",
      "right" : "std = 0.0;",
      "info" : "ExpressionStatement[46779-46789]:ExpressionStatement[47173-47183]"
    }, {
      "left" : "double mean = meanN.doubleValue();",
      "right" : "double mean = meanN.doubleValue();",
      "info" : "VariableDeclarationStatement[46873-46907]:VariableDeclarationStatement[47267-47301]"
    }, {
      "left" : "if (!Double.isNaN(mean))",
      "right" : "if (!Double.isNaN(mean))",
      "info" : "IfStatement[46933-47126]:IfStatement[47327-47520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46958-47126]:Block[47352-47520]"
    }, {
      "left" : "minimum = Math.min(minimum, mean - std);",
      "right" : "minimum = Math.min(minimum, mean - std);",
      "info" : "ExpressionStatement[46989-47029]:ExpressionStatement[47383-47423]"
    }, {
      "left" : "maximum = Math.max(maximum, mean + std);",
      "right" : "maximum = Math.max(maximum, mean + std);",
      "info" : "ExpressionStatement[47059-47099]:ExpressionStatement[47453-47493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47209-48019]:Block[47603-48413]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[47289-47338]:VariableDeclarationStatement[47683-47732]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[47352-48008]:WhileStatement[47746-48402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47379-48008]:Block[47773-48402]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[47398-47450]:VariableDeclarationStatement[47792-47844]"
    }, {
      "left" : "int series = dataset.getRowIndex(seriesKey);",
      "right" : "int series = dataset.getRowIndex(seriesKey);",
      "info" : "VariableDeclarationStatement[47468-47512]:VariableDeclarationStatement[47862-47906]"
    }, {
      "left" : "for (int column = 0; column < columnCount; column++)",
      "right" : "for (int column = 0; column < columnCount; column++)",
      "info" : "ForStatement[47530-47993]:ForStatement[47924-48387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47583-47993]:Block[47977-48387]"
    }, {
      "left" : "Number value = dataset.getValue(series, column);",
      "right" : "Number value = dataset.getValue(series, column);",
      "info" : "VariableDeclarationStatement[47606-47654]:VariableDeclarationStatement[48000-48048]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[47676-47974]:IfStatement[48070-48368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47695-47974]:Block[48089-48368]"
    }, {
      "left" : "double v = value.doubleValue();",
      "right" : "double v = value.doubleValue();",
      "info" : "VariableDeclarationStatement[47722-47753]:VariableDeclarationStatement[48116-48147]"
    }, {
      "left" : "if (!Double.isNaN(v))",
      "right" : "if (!Double.isNaN(v))",
      "info" : "IfStatement[47779-47951]:IfStatement[48173-48345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47801-47951]:Block[48195-48345]"
    }, {
      "left" : "minimum = Math.min(minimum, v);",
      "right" : "minimum = Math.min(minimum, v);",
      "info" : "ExpressionStatement[47832-47863]:ExpressionStatement[48226-48257]"
    }, {
      "left" : "maximum = Math.max(maximum, v);",
      "right" : "maximum = Math.max(maximum, v);",
      "info" : "ExpressionStatement[47893-47924]:ExpressionStatement[48287-48318]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[48029-48184]:IfStatement[48423-48578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48070-48108]:Block[48464-48502]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48085-48097]:ReturnStatement[48479-48491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48123-48184]:Block[48517-48578]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[48138-48173]:ReturnStatement[48532-48567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48594-48647]:Block[48988-49041]"
    }, {
      "left" : "return iterateRangeBounds(dataset);",
      "right" : "return iterateRangeBounds(dataset);",
      "info" : "ReturnStatement[48605-48640]:ReturnStatement[48999-49034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48992-49051]:Block[49386-49445]"
    }, {
      "left" : "return iterateRangeBounds(dataset, true);",
      "right" : "return iterateRangeBounds(dataset, true);",
      "info" : "ReturnStatement[49003-49044]:ReturnStatement[49397-49438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53027-55323]:Block[53805-56101]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[53040-53150]:IfStatement[53818-53928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53061-53150]:Block[53839-53928]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[53076-53139]:ThrowStatement[53854-53917]"
    }, {
      "left" : "if (visibleSeriesKeys == null)",
      "right" : "if (visibleSeriesKeys == null)",
      "info" : "IfStatement[53160-53312]:IfStatement[53938-54090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53191-53312]:Block[53969-54090]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "right" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "info" : "ThrowStatement[53206-53301]:ThrowStatement[53984-54079]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[53324-53366]:VariableDeclarationStatement[54102-54144]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[53376-53418]:VariableDeclarationStatement[54154-54196]"
    }, {
      "left" : "if (includeInterval && dataset instanceof IntervalXYDataset)",
      "right" : "if (includeInterval && dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[53430-55149]:IfStatement[54208-55927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53491-54433]:Block[54269-55211]"
    }, {
      "left" : "IntervalXYDataset ixyd = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset ixyd = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[53563-53616]:VariableDeclarationStatement[54341-54394]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[53630-53679]:VariableDeclarationStatement[54408-54457]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[53693-54422]:WhileStatement[54471-55200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53720-54422]:Block[54498-55200]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[53739-53791]:VariableDeclarationStatement[54517-54569]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[53809-53849]:VariableDeclarationStatement[54587-54627]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[53867-53912]:VariableDeclarationStatement[54645-54690]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[53930-54407]:ForStatement[54708-55185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53975-54407]:Block[54753-55185]"
    }, {
      "left" : "double lvalue = ixyd.getStartXValue(series, item);",
      "right" : "double lvalue = ixyd.getStartXValue(series, item);",
      "info" : "VariableDeclarationStatement[53998-54048]:VariableDeclarationStatement[54776-54826]"
    }, {
      "left" : "double uvalue = ixyd.getEndXValue(series, item);",
      "right" : "double uvalue = ixyd.getEndXValue(series, item);",
      "info" : "VariableDeclarationStatement[54070-54118]:VariableDeclarationStatement[54848-54896]"
    }, {
      "left" : "if (!Double.isNaN(lvalue))",
      "right" : "if (!Double.isNaN(lvalue))",
      "info" : "IfStatement[54140-54253]:IfStatement[54918-55031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54167-54253]:Block[54945-55031]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue);",
      "right" : "minimum = Math.min(minimum, lvalue);",
      "info" : "ExpressionStatement[54194-54230]:ExpressionStatement[54972-55008]"
    }, {
      "left" : "if (!Double.isNaN(uvalue))",
      "right" : "if (!Double.isNaN(uvalue))",
      "info" : "IfStatement[54275-54388]:IfStatement[55053-55166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54302-54388]:Block[55080-55166]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue);",
      "right" : "maximum = Math.max(maximum, uvalue);",
      "info" : "ExpressionStatement[54329-54365]:ExpressionStatement[55107-55143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54448-55149]:Block[55226-55927]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[54511-54560]:VariableDeclarationStatement[55289-55338]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[54574-55138]:WhileStatement[55352-55916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54601-55138]:Block[55379-55916]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[54620-54672]:VariableDeclarationStatement[55398-55450]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[54690-54730]:VariableDeclarationStatement[55468-55508]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[54748-54793]:VariableDeclarationStatement[55526-55571]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[54811-55123]:ForStatement[55589-55901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54856-55123]:Block[55634-55901]"
    }, {
      "left" : "double x = dataset.getXValue(series, item);",
      "right" : "double x = dataset.getXValue(series, item);",
      "info" : "VariableDeclarationStatement[54879-54922]:VariableDeclarationStatement[55657-55700]"
    }, {
      "left" : "if (!Double.isNaN(x))",
      "right" : "if (!Double.isNaN(x))",
      "info" : "IfStatement[54944-55104]:IfStatement[55722-55882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54966-55104]:Block[55744-55882]"
    }, {
      "left" : "minimum = Math.min(minimum, x);",
      "right" : "minimum = Math.min(minimum, x);",
      "info" : "ExpressionStatement[54993-55024]:ExpressionStatement[55771-55802]"
    }, {
      "left" : "maximum = Math.max(maximum, x);",
      "right" : "maximum = Math.max(maximum, x);",
      "info" : "ExpressionStatement[55050-55081]:ExpressionStatement[55828-55859]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[55161-55316]:IfStatement[55939-56094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55202-55240]:Block[55980-56018]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55217-55229]:ReturnStatement[55995-56007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55255-55316]:Block[56033-56094]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[55270-55305]:ReturnStatement[56048-56083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56216-61362]:Block[56994-62140]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[56229-56339]:IfStatement[57007-57117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56250-56339]:Block[57028-57117]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[56265-56328]:ThrowStatement[57043-57106]"
    }, {
      "left" : "if (visibleSeriesKeys == null)",
      "right" : "if (visibleSeriesKeys == null)",
      "info" : "IfStatement[56349-56501]:IfStatement[57127-57279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56380-56501]:Block[57158-57279]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "right" : "throw new IllegalArgumentException(\r\n                    \"Null 'visibleSeriesKeys' argument.\");",
      "info" : "ThrowStatement[56395-56490]:ThrowStatement[57173-57268]"
    }, {
      "left" : "if (xRange == null)",
      "right" : "if (xRange == null)",
      "info" : "IfStatement[56511-56618]:IfStatement[57289-57396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56531-56618]:Block[57309-57396]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'xRange' argument\");",
      "right" : "throw new IllegalArgumentException(\"Null 'xRange' argument\");",
      "info" : "ThrowStatement[56546-56607]:ThrowStatement[57324-57385]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[56630-56672]:VariableDeclarationStatement[57408-57450]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[56682-56724]:VariableDeclarationStatement[57460-57502]"
    }, {
      "left" : "if (includeInterval && dataset instanceof OHLCDataset)",
      "right" : "if (includeInterval && dataset instanceof OHLCDataset)",
      "info" : "IfStatement[56783-61190]:IfStatement[57561-61968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56838-57923]:Block[57616-58701]"
    }, {
      "left" : "OHLCDataset ohlc = (OHLCDataset) dataset;",
      "right" : "OHLCDataset ohlc = (OHLCDataset) dataset;",
      "info" : "VariableDeclarationStatement[56904-56945]:VariableDeclarationStatement[57682-57723]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[56959-57008]:VariableDeclarationStatement[57737-57786]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[57022-57912]:WhileStatement[57800-58690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57049-57912]:Block[57827-58690]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[57068-57120]:VariableDeclarationStatement[57846-57898]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[57138-57178]:VariableDeclarationStatement[57916-57956]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[57196-57241]:VariableDeclarationStatement[57974-58019]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[57259-57897]:ForStatement[58037-58675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57304-57897]:Block[58082-58675]"
    }, {
      "left" : "double x = ohlc.getXValue(series, item);",
      "right" : "double x = ohlc.getXValue(series, item);",
      "info" : "VariableDeclarationStatement[57327-57367]:VariableDeclarationStatement[58105-58145]"
    }, {
      "left" : "if (xRange.contains(x))",
      "right" : "if (xRange.contains(x))",
      "info" : "IfStatement[57389-57878]:IfStatement[58167-58656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57413-57878]:Block[58191-58656]"
    }, {
      "left" : "double lvalue = ohlc.getLowValue(series, item);",
      "right" : "double lvalue = ohlc.getLowValue(series, item);",
      "info" : "VariableDeclarationStatement[57440-57487]:VariableDeclarationStatement[58218-58265]"
    }, {
      "left" : "double uvalue = ohlc.getHighValue(series, item);",
      "right" : "double uvalue = ohlc.getHighValue(series, item);",
      "info" : "VariableDeclarationStatement[57513-57561]:VariableDeclarationStatement[58291-58339]"
    }, {
      "left" : "if (!Double.isNaN(lvalue))",
      "right" : "if (!Double.isNaN(lvalue))",
      "info" : "IfStatement[57587-57708]:IfStatement[58365-58486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57614-57708]:Block[58392-58486]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue);",
      "right" : "minimum = Math.min(minimum, lvalue);",
      "info" : "ExpressionStatement[57645-57681]:ExpressionStatement[58423-58459]"
    }, {
      "left" : "if (!Double.isNaN(uvalue))",
      "right" : "if (!Double.isNaN(uvalue))",
      "info" : "IfStatement[57734-57855]:IfStatement[58512-58633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57761-57855]:Block[58539-58633]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue);",
      "right" : "maximum = Math.max(maximum, uvalue);",
      "info" : "ExpressionStatement[57792-57828]:ExpressionStatement[58570-58606]"
    }, {
      "left" : "if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset)",
      "right" : "if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset)",
      "info" : "IfStatement[57938-61190]:IfStatement[58716-61968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58004-59141]:Block[58782-59919]"
    }, {
      "left" : "BoxAndWhiskerXYDataset bx = (BoxAndWhiskerXYDataset) dataset;",
      "right" : "BoxAndWhiskerXYDataset bx = (BoxAndWhiskerXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[58081-58142]:VariableDeclarationStatement[58859-58920]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[58156-58205]:VariableDeclarationStatement[58934-58983]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[58219-59130]:WhileStatement[58997-59908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58246-59130]:Block[59024-59908]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[58265-58317]:VariableDeclarationStatement[59043-59095]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[58335-58375]:VariableDeclarationStatement[59113-59153]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[58393-58438]:VariableDeclarationStatement[59171-59216]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[58456-59115]:ForStatement[59234-59893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58501-59115]:Block[59279-59893]"
    }, {
      "left" : "double x = bx.getXValue(series, item);",
      "right" : "double x = bx.getXValue(series, item);",
      "info" : "VariableDeclarationStatement[58524-58562]:VariableDeclarationStatement[59302-59340]"
    }, {
      "left" : "if (xRange.contains(x))",
      "right" : "if (xRange.contains(x))",
      "info" : "IfStatement[58584-59096]:IfStatement[59362-59874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58608-59096]:Block[59386-59874]"
    }, {
      "left" : "Number lvalue = bx.getMinRegularValue(series, item);",
      "right" : "Number lvalue = bx.getMinRegularValue(series, item);",
      "info" : "VariableDeclarationStatement[58635-58687]:VariableDeclarationStatement[59413-59465]"
    }, {
      "left" : "Number uvalue = bx.getMaxRegularValue(series, item);",
      "right" : "Number uvalue = bx.getMaxRegularValue(series, item);",
      "info" : "VariableDeclarationStatement[58713-58765]:VariableDeclarationStatement[59491-59543]"
    }, {
      "left" : "if (lvalue != null)",
      "right" : "if (lvalue != null)",
      "info" : "IfStatement[58791-58919]:IfStatement[59569-59697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58811-58919]:Block[59589-59697]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "right" : "minimum = Math.min(minimum, lvalue.doubleValue());",
      "info" : "ExpressionStatement[58842-58892]:ExpressionStatement[59620-59670]"
    }, {
      "left" : "if (uvalue != null)",
      "right" : "if (uvalue != null)",
      "info" : "IfStatement[58945-59073]:IfStatement[59723-59851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58965-59073]:Block[59743-59851]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "right" : "maximum = Math.max(maximum, uvalue.doubleValue());",
      "info" : "ExpressionStatement[58996-59046]:ExpressionStatement[59774-59824]"
    }, {
      "left" : "if (includeInterval && dataset instanceof IntervalXYDataset)",
      "right" : "if (includeInterval && dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[59156-61190]:IfStatement[59934-61968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59217-60323]:Block[59995-61101]"
    }, {
      "left" : "IntervalXYDataset ixyd = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset ixyd = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[59289-59342]:VariableDeclarationStatement[60067-60120]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[59356-59405]:VariableDeclarationStatement[60134-60183]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[59419-60312]:WhileStatement[60197-61090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59446-60312]:Block[60224-61090]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[59465-59517]:VariableDeclarationStatement[60243-60295]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[59535-59575]:VariableDeclarationStatement[60313-60353]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[59593-59638]:VariableDeclarationStatement[60371-60416]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[59656-60297]:ForStatement[60434-61075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59701-60297]:Block[60479-61075]"
    }, {
      "left" : "double x = ixyd.getXValue(series, item);",
      "right" : "double x = ixyd.getXValue(series, item);",
      "info" : "VariableDeclarationStatement[59724-59764]:VariableDeclarationStatement[60502-60542]"
    }, {
      "left" : "if (xRange.contains(x))",
      "right" : "if (xRange.contains(x))",
      "info" : "IfStatement[59786-60278]:IfStatement[60564-61056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59810-60278]:Block[60588-61056]"
    }, {
      "left" : "double lvalue = ixyd.getStartYValue(series, item);",
      "right" : "double lvalue = ixyd.getStartYValue(series, item);",
      "info" : "VariableDeclarationStatement[59837-59887]:VariableDeclarationStatement[60615-60665]"
    }, {
      "left" : "double uvalue = ixyd.getEndYValue(series, item);",
      "right" : "double uvalue = ixyd.getEndYValue(series, item);",
      "info" : "VariableDeclarationStatement[59913-59961]:VariableDeclarationStatement[60691-60739]"
    }, {
      "left" : "if (!Double.isNaN(lvalue))",
      "right" : "if (!Double.isNaN(lvalue))",
      "info" : "IfStatement[59987-60108]:IfStatement[60765-60886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60014-60108]:Block[60792-60886]"
    }, {
      "left" : "minimum = Math.min(minimum, lvalue);",
      "right" : "minimum = Math.min(minimum, lvalue);",
      "info" : "ExpressionStatement[60045-60081]:ExpressionStatement[60823-60859]"
    }, {
      "left" : "if (!Double.isNaN(uvalue))",
      "right" : "if (!Double.isNaN(uvalue))",
      "info" : "IfStatement[60134-60255]:IfStatement[60912-61033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60161-60255]:Block[60939-61033]"
    }, {
      "left" : "maximum = Math.max(maximum, uvalue);",
      "right" : "maximum = Math.max(maximum, uvalue);",
      "info" : "ExpressionStatement[60192-60228]:ExpressionStatement[60970-61006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60338-61190]:Block[61116-61968]"
    }, {
      "left" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "right" : "Iterator iterator = visibleSeriesKeys.iterator();",
      "info" : "VariableDeclarationStatement[60401-60450]:VariableDeclarationStatement[61179-61228]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[60464-61179]:WhileStatement[61242-61957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60491-61179]:Block[61269-61957]"
    }, {
      "left" : "Comparable seriesKey = (Comparable) iterator.next();",
      "right" : "Comparable seriesKey = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[60510-60562]:VariableDeclarationStatement[61288-61340]"
    }, {
      "left" : "int series = dataset.indexOf(seriesKey);",
      "right" : "int series = dataset.indexOf(seriesKey);",
      "info" : "VariableDeclarationStatement[60580-60620]:VariableDeclarationStatement[61358-61398]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[60638-60683]:VariableDeclarationStatement[61416-61461]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[60701-61164]:ForStatement[61479-61942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60746-61164]:Block[61524-61942]"
    }, {
      "left" : "double x = dataset.getXValue(series, item);",
      "right" : "double x = dataset.getXValue(series, item);",
      "info" : "VariableDeclarationStatement[60769-60812]:VariableDeclarationStatement[61547-61590]"
    }, {
      "left" : "double y = dataset.getYValue(series, item);",
      "right" : "double y = dataset.getYValue(series, item);",
      "info" : "VariableDeclarationStatement[60834-60877]:VariableDeclarationStatement[61612-61655]"
    }, {
      "left" : "if (xRange.contains(x))",
      "right" : "if (xRange.contains(x))",
      "info" : "IfStatement[60899-61145]:IfStatement[61677-61923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60923-61145]:Block[61701-61923]"
    }, {
      "left" : "if (!Double.isNaN(y))",
      "right" : "if (!Double.isNaN(y))",
      "info" : "IfStatement[60950-61122]:IfStatement[61728-61900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60972-61122]:Block[61750-61900]"
    }, {
      "left" : "minimum = Math.min(minimum, y);",
      "right" : "minimum = Math.min(minimum, y);",
      "info" : "ExpressionStatement[61003-61034]:ExpressionStatement[61781-61812]"
    }, {
      "left" : "maximum = Math.max(maximum, y);",
      "right" : "maximum = Math.max(maximum, y);",
      "info" : "ExpressionStatement[61064-61095]:ExpressionStatement[61842-61873]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[61200-61355]:IfStatement[61978-62133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61241-61279]:Block[62019-62057]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61256-61268]:ReturnStatement[62034-62046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61294-61355]:Block[62072-62133]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[61309-61344]:ReturnStatement[62087-62122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62021-63570]:Block[62799-64348]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[62032-62142]:IfStatement[62810-62920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62053-62142]:Block[62831-62920]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[62068-62131]:ThrowStatement[62846-62909]"
    }, {
      "left" : "Number result = null;",
      "right" : "Number result = null;",
      "info" : "VariableDeclarationStatement[62152-62173]:VariableDeclarationStatement[62930-62951]"
    }, {
      "left" : "if (dataset instanceof DomainInfo)",
      "right" : "if (dataset instanceof DomainInfo)",
      "info" : "IfStatement[62246-63537]:IfStatement[63024-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62281-62410]:Block[63059-63188]"
    }, {
      "left" : "DomainInfo info = (DomainInfo) dataset;",
      "right" : "DomainInfo info = (DomainInfo) dataset;",
      "info" : "VariableDeclarationStatement[62296-62335]:VariableDeclarationStatement[63074-63113]"
    }, {
      "left" : "return new Double(info.getDomainLowerBound(true));",
      "right" : "return new Double(info.getDomainLowerBound(true));",
      "info" : "ReturnStatement[62349-62399]:ReturnStatement[63127-63177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62425-63537]:Block[63203-64315]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[62440-62482]:VariableDeclarationStatement[63218-63260]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[62496-62539]:VariableDeclarationStatement[63274-63317]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[62553-63341]:ForStatement[63331-64119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62606-63341]:Block[63384-64119]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[62625-62670]:VariableDeclarationStatement[63403-63448]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[62688-63326]:ForStatement[63466-64104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62733-63326]:Block[63511-64104]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[62758-62771]:VariableDeclarationStatement[63536-63549]"
    }, {
      "left" : "if (dataset instanceof IntervalXYDataset)",
      "right" : "if (dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[62793-63172]:IfStatement[63571-63950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62835-63055]:Block[63613-63833]"
    }, {
      "left" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[62862-62954]:VariableDeclarationStatement[63640-63732]"
    }, {
      "left" : "value = intervalXYData.getStartXValue(series, item);",
      "right" : "value = intervalXYData.getStartXValue(series, item);",
      "info" : "ExpressionStatement[62980-63032]:ExpressionStatement[63758-63810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63082-63172]:Block[63860-63950]"
    }, {
      "left" : "value = dataset.getXValue(series, item);",
      "right" : "value = dataset.getXValue(series, item);",
      "info" : "ExpressionStatement[63109-63149]:ExpressionStatement[63887-63927]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[63194-63305]:IfStatement[63972-64083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63220-63305]:Block[63998-64083]"
    }, {
      "left" : "minimum = Math.min(minimum, value);",
      "right" : "minimum = Math.min(minimum, value);",
      "info" : "ExpressionStatement[63247-63282]:ExpressionStatement[64025-64060]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[63355-63526]:IfStatement[64133-64304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63396-63444]:Block[64174-64222]"
    }, {
      "left" : "result = null;",
      "right" : "result = null;",
      "info" : "ExpressionStatement[63415-63429]:ExpressionStatement[64193-64207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63463-63526]:Block[64241-64304]"
    }, {
      "left" : "result = new Double(minimum);",
      "right" : "result = new Double(minimum);",
      "info" : "ExpressionStatement[63482-63511]:ExpressionStatement[64260-64289]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[63549-63563]:ReturnStatement[64327-64341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64213-65819]:Block[64991-66597]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[64224-64334]:IfStatement[65002-65112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64245-64334]:Block[65023-65112]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[64260-64323]:ThrowStatement[65038-65101]"
    }, {
      "left" : "Number result = null;",
      "right" : "Number result = null;",
      "info" : "VariableDeclarationStatement[64344-64365]:VariableDeclarationStatement[65122-65143]"
    }, {
      "left" : "if (dataset instanceof DomainInfo)",
      "right" : "if (dataset instanceof DomainInfo)",
      "info" : "IfStatement[64438-65786]:IfStatement[65216-66564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64473-64602]:Block[65251-65380]"
    }, {
      "left" : "DomainInfo info = (DomainInfo) dataset;",
      "right" : "DomainInfo info = (DomainInfo) dataset;",
      "info" : "VariableDeclarationStatement[64488-64527]:VariableDeclarationStatement[65266-65305]"
    }, {
      "left" : "return new Double(info.getDomainUpperBound(true));",
      "right" : "return new Double(info.getDomainUpperBound(true));",
      "info" : "ReturnStatement[64541-64591]:ReturnStatement[65319-65369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64676-65786]:Block[65454-66564]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[64691-64733]:VariableDeclarationStatement[65469-65511]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[64747-64790]:VariableDeclarationStatement[65525-65568]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[64804-65588]:ForStatement[65582-66366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64857-65588]:Block[65635-66366]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[64876-64921]:VariableDeclarationStatement[65654-65699]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[64939-65573]:ForStatement[65717-66351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64984-65573]:Block[65762-66351]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[65009-65022]:VariableDeclarationStatement[65787-65800]"
    }, {
      "left" : "if (dataset instanceof IntervalXYDataset)",
      "right" : "if (dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[65044-65421]:IfStatement[65822-66199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65086-65304]:Block[65864-66082]"
    }, {
      "left" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[65113-65205]:VariableDeclarationStatement[65891-65983]"
    }, {
      "left" : "value = intervalXYData.getEndXValue(series, item);",
      "right" : "value = intervalXYData.getEndXValue(series, item);",
      "info" : "ExpressionStatement[65231-65281]:ExpressionStatement[66009-66059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65331-65421]:Block[66109-66199]"
    }, {
      "left" : "value = dataset.getXValue(series, item);",
      "right" : "value = dataset.getXValue(series, item);",
      "info" : "ExpressionStatement[65358-65398]:ExpressionStatement[66136-66176]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[65443-65554]:IfStatement[66221-66332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65469-65554]:Block[66247-66332]"
    }, {
      "left" : "maximum = Math.max(maximum, value);",
      "right" : "maximum = Math.max(maximum, value);",
      "info" : "ExpressionStatement[65496-65531]:ExpressionStatement[66274-66309]"
    }, {
      "left" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "right" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[65602-65773]:IfStatement[66380-66551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65643-65691]:Block[66421-66469]"
    }, {
      "left" : "result = null;",
      "right" : "result = null;",
      "info" : "ExpressionStatement[65662-65676]:ExpressionStatement[66440-66454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65710-65773]:Block[66488-66551]"
    }, {
      "left" : "result = new Double(maximum);",
      "right" : "result = new Double(maximum);",
      "info" : "ExpressionStatement[65729-65758]:ExpressionStatement[66507-66536]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[65798-65812]:ReturnStatement[66576-66590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66465-67956]:Block[67243-68734]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[66478-66588]:IfStatement[67256-67366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66499-66588]:Block[67277-67366]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[66514-66577]:ThrowStatement[67292-67355]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[66600-67947]:IfStatement[67378-68725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66634-66760]:Block[67412-67538]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[66649-66686]:VariableDeclarationStatement[67427-67464]"
    }, {
      "left" : "return new Double(info.getRangeLowerBound(true));",
      "right" : "return new Double(info.getRangeLowerBound(true));",
      "info" : "ReturnStatement[66700-66749]:ReturnStatement[67478-67527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66847-67947]:Block[67625-68725]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[66862-66904]:VariableDeclarationStatement[67640-67682]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[66918-66958]:VariableDeclarationStatement[67696-67736]"
    }, {
      "left" : "int itemCount = dataset.getColumnCount();",
      "right" : "int itemCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[66972-67013]:VariableDeclarationStatement[67750-67791]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[67027-67753]:ForStatement[67805-68531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67080-67753]:Block[67858-68531]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[67099-67738]:ForStatement[67877-68516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67144-67738]:Block[67922-68516]"
    }, {
      "left" : "Number value;",
      "right" : "Number value;",
      "info" : "VariableDeclarationStatement[67167-67180]:VariableDeclarationStatement[67945-67958]"
    }, {
      "left" : "if (dataset instanceof IntervalCategoryDataset)",
      "right" : "if (dataset instanceof IntervalCategoryDataset)",
      "info" : "IfStatement[67202-67579]:IfStatement[67980-68357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67250-67463]:Block[68028-68241]"
    }, {
      "left" : "IntervalCategoryDataset icd\r\n                                = (IntervalCategoryDataset) dataset;",
      "right" : "IntervalCategoryDataset icd\r\n                                = (IntervalCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[67277-67374]:VariableDeclarationStatement[68055-68152]"
    }, {
      "left" : "value = icd.getStartValue(series, item);",
      "right" : "value = icd.getStartValue(series, item);",
      "info" : "ExpressionStatement[67400-67440]:ExpressionStatement[68178-68218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67490-67579]:Block[68268-68357]"
    }, {
      "left" : "value = dataset.getValue(series, item);",
      "right" : "value = dataset.getValue(series, item);",
      "info" : "ExpressionStatement[67517-67556]:ExpressionStatement[68295-68334]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[67601-67719]:IfStatement[68379-68497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67620-67719]:Block[68398-68497]"
    }, {
      "left" : "minimum = Math.min(minimum, value.doubleValue());",
      "right" : "minimum = Math.min(minimum, value.doubleValue());",
      "info" : "ExpressionStatement[67647-67696]:ExpressionStatement[68425-68474]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[67767-67934]:IfStatement[68545-68712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67808-67854]:Block[68586-68632]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[67827-67839]:ReturnStatement[68605-68617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67873-67934]:Block[68651-68712]"
    }, {
      "left" : "return new Double(minimum);",
      "right" : "return new Double(minimum);",
      "info" : "ReturnStatement[67892-67919]:ReturnStatement[68670-68697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68596-70376]:Block[69374-71154]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[68609-68719]:IfStatement[69387-69497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68630-68719]:Block[69408-69497]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[68645-68708]:ThrowStatement[69423-69486]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[68773-70367]:IfStatement[69551-71145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68807-68933]:Block[69585-69711]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[68822-68859]:VariableDeclarationStatement[69600-69637]"
    }, {
      "left" : "return new Double(info.getRangeLowerBound(true));",
      "right" : "return new Double(info.getRangeLowerBound(true));",
      "info" : "ReturnStatement[68873-68922]:ReturnStatement[69651-69700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69020-70367]:Block[69798-71145]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[69035-69077]:VariableDeclarationStatement[69813-69855]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[69091-69134]:VariableDeclarationStatement[69869-69912]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[69148-70173]:ForStatement[69926-70951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69201-70173]:Block[69979-70951]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[69220-69265]:VariableDeclarationStatement[69998-70043]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[69283-70158]:ForStatement[70061-70936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69328-70158]:Block[70106-70936]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[69353-69366]:VariableDeclarationStatement[70131-70144]"
    }, {
      "left" : "if (dataset instanceof IntervalXYDataset)",
      "right" : "if (dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[69388-70004]:IfStatement[70166-70782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69430-69654]:Block[70208-70432]"
    }, {
      "left" : "IntervalXYDataset intervalXYData\r\n                                = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset intervalXYData\r\n                                = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[69457-69553]:VariableDeclarationStatement[70235-70331]"
    }, {
      "left" : "value = intervalXYData.getStartYValue(series, item);",
      "right" : "value = intervalXYData.getStartYValue(series, item);",
      "info" : "ExpressionStatement[69579-69631]:ExpressionStatement[70357-70409]"
    }, {
      "left" : "if (dataset instanceof OHLCDataset)",
      "right" : "if (dataset instanceof OHLCDataset)",
      "info" : "IfStatement[69681-70004]:IfStatement[70459-70782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69717-69887]:Block[70495-70665]"
    }, {
      "left" : "OHLCDataset highLowData = (OHLCDataset) dataset;",
      "right" : "OHLCDataset highLowData = (OHLCDataset) dataset;",
      "info" : "VariableDeclarationStatement[69744-69792]:VariableDeclarationStatement[70522-70570]"
    }, {
      "left" : "value = highLowData.getLowValue(series, item);",
      "right" : "value = highLowData.getLowValue(series, item);",
      "info" : "ExpressionStatement[69818-69864]:ExpressionStatement[70596-70642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69914-70004]:Block[70692-70782]"
    }, {
      "left" : "value = dataset.getYValue(series, item);",
      "right" : "value = dataset.getYValue(series, item);",
      "info" : "ExpressionStatement[69941-69981]:ExpressionStatement[70719-70759]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[70026-70137]:IfStatement[70804-70915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70052-70137]:Block[70830-70915]"
    }, {
      "left" : "minimum = Math.min(minimum, value);",
      "right" : "minimum = Math.min(minimum, value);",
      "info" : "ExpressionStatement[70079-70114]:ExpressionStatement[70857-70892]"
    }, {
      "left" : "if (minimum == Double.POSITIVE_INFINITY)",
      "right" : "if (minimum == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[70187-70354]:IfStatement[70965-71132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70228-70274]:Block[71006-71052]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[70247-70259]:ReturnStatement[71025-71037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70293-70354]:Block[71071-71132]"
    }, {
      "left" : "return new Double(minimum);",
      "right" : "return new Double(minimum);",
      "info" : "ReturnStatement[70312-70339]:ReturnStatement[71090-71117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70999-72528]:Block[71777-73306]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[71012-71122]:IfStatement[71790-71900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71033-71122]:Block[71811-71900]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[71048-71111]:ThrowStatement[71826-71889]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[71176-72519]:IfStatement[71954-73297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71210-71336]:Block[71988-72114]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[71225-71262]:VariableDeclarationStatement[72003-72040]"
    }, {
      "left" : "return new Double(info.getRangeUpperBound(true));",
      "right" : "return new Double(info.getRangeUpperBound(true));",
      "info" : "ReturnStatement[71276-71325]:ReturnStatement[72054-72103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71423-72519]:Block[72201-73297]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[71440-71482]:VariableDeclarationStatement[72218-72260]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[71496-71536]:VariableDeclarationStatement[72274-72314]"
    }, {
      "left" : "int itemCount = dataset.getColumnCount();",
      "right" : "int itemCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[71550-71591]:VariableDeclarationStatement[72328-72369]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[71605-72325]:ForStatement[72383-73103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71658-72325]:Block[72436-73103]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[71677-72310]:ForStatement[72455-73088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71722-72310]:Block[72500-73088]"
    }, {
      "left" : "Number value;",
      "right" : "Number value;",
      "info" : "VariableDeclarationStatement[71745-71758]:VariableDeclarationStatement[72523-72536]"
    }, {
      "left" : "if (dataset instanceof IntervalCategoryDataset)",
      "right" : "if (dataset instanceof IntervalCategoryDataset)",
      "info" : "IfStatement[71780-72151]:IfStatement[72558-72929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71828-72035]:Block[72606-72813]"
    }, {
      "left" : "IntervalCategoryDataset icd\r\n                            = (IntervalCategoryDataset) dataset;",
      "right" : "IntervalCategoryDataset icd\r\n                            = (IntervalCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[71855-71948]:VariableDeclarationStatement[72633-72726]"
    }, {
      "left" : "value = icd.getEndValue(series, item);",
      "right" : "value = icd.getEndValue(series, item);",
      "info" : "ExpressionStatement[71974-72012]:ExpressionStatement[72752-72790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72062-72151]:Block[72840-72929]"
    }, {
      "left" : "value = dataset.getValue(series, item);",
      "right" : "value = dataset.getValue(series, item);",
      "info" : "ExpressionStatement[72089-72128]:ExpressionStatement[72867-72906]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[72173-72291]:IfStatement[72951-73069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72192-72291]:Block[72970-73069]"
    }, {
      "left" : "maximum = Math.max(maximum, value.doubleValue());",
      "right" : "maximum = Math.max(maximum, value.doubleValue());",
      "info" : "ExpressionStatement[72219-72268]:ExpressionStatement[72997-73046]"
    }, {
      "left" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "right" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[72339-72506]:IfStatement[73117-73284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72380-72426]:Block[73158-73204]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[72399-72411]:ReturnStatement[73177-73189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72445-72506]:Block[73223-73284]"
    }, {
      "left" : "return new Double(maximum);",
      "right" : "return new Double(maximum);",
      "info" : "ReturnStatement[72464-72491]:ReturnStatement[73242-73269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73145-74919]:Block[73923-75697]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[73158-73268]:IfStatement[73936-74046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73179-73268]:Block[73957-74046]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[73194-73257]:ThrowStatement[73972-74035]"
    }, {
      "left" : "if (dataset instanceof RangeInfo)",
      "right" : "if (dataset instanceof RangeInfo)",
      "info" : "IfStatement[73322-74910]:IfStatement[74100-75688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73356-73482]:Block[74134-74260]"
    }, {
      "left" : "RangeInfo info = (RangeInfo) dataset;",
      "right" : "RangeInfo info = (RangeInfo) dataset;",
      "info" : "VariableDeclarationStatement[73371-73408]:VariableDeclarationStatement[74149-74186]"
    }, {
      "left" : "return new Double(info.getRangeUpperBound(true));",
      "right" : "return new Double(info.getRangeUpperBound(true));",
      "info" : "ReturnStatement[73422-73471]:ReturnStatement[74200-74249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73570-74910]:Block[74348-75688]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[73587-73629]:VariableDeclarationStatement[74365-74407]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[73643-73686]:VariableDeclarationStatement[74421-74464]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[73700-74716]:ForStatement[74478-75494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73753-74716]:Block[74531-75494]"
    }, {
      "left" : "int itemCount = dataset.getItemCount(series);",
      "right" : "int itemCount = dataset.getItemCount(series);",
      "info" : "VariableDeclarationStatement[73772-73817]:VariableDeclarationStatement[74550-74595]"
    }, {
      "left" : "for (int item = 0; item < itemCount; item++)",
      "right" : "for (int item = 0; item < itemCount; item++)",
      "info" : "ForStatement[73835-74701]:ForStatement[74613-75479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73880-74701]:Block[74658-75479]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[73903-73916]:VariableDeclarationStatement[74681-74694]"
    }, {
      "left" : "if (dataset instanceof IntervalXYDataset)",
      "right" : "if (dataset instanceof IntervalXYDataset)",
      "info" : "IfStatement[73938-74549]:IfStatement[74716-75327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73980-74198]:Block[74758-74976]"
    }, {
      "left" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "right" : "IntervalXYDataset intervalXYData\r\n                            = (IntervalXYDataset) dataset;",
      "info" : "VariableDeclarationStatement[74007-74099]:VariableDeclarationStatement[74785-74877]"
    }, {
      "left" : "value = intervalXYData.getEndYValue(series, item);",
      "right" : "value = intervalXYData.getEndYValue(series, item);",
      "info" : "ExpressionStatement[74125-74175]:ExpressionStatement[74903-74953]"
    }, {
      "left" : "if (dataset instanceof OHLCDataset)",
      "right" : "if (dataset instanceof OHLCDataset)",
      "info" : "IfStatement[74225-74549]:IfStatement[75003-75327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74261-74432]:Block[75039-75210]"
    }, {
      "left" : "OHLCDataset highLowData = (OHLCDataset) dataset;",
      "right" : "OHLCDataset highLowData = (OHLCDataset) dataset;",
      "info" : "VariableDeclarationStatement[74288-74336]:VariableDeclarationStatement[75066-75114]"
    }, {
      "left" : "value = highLowData.getHighValue(series, item);",
      "right" : "value = highLowData.getHighValue(series, item);",
      "info" : "ExpressionStatement[74362-74409]:ExpressionStatement[75140-75187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74459-74549]:Block[75237-75327]"
    }, {
      "left" : "value = dataset.getYValue(series, item);",
      "right" : "value = dataset.getYValue(series, item);",
      "info" : "ExpressionStatement[74486-74526]:ExpressionStatement[75264-75304]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[74571-74682]:IfStatement[75349-75460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74597-74682]:Block[75375-75460]"
    }, {
      "left" : "maximum = Math.max(maximum, value);",
      "right" : "maximum = Math.max(maximum, value);",
      "info" : "ExpressionStatement[74624-74659]:ExpressionStatement[75402-75437]"
    }, {
      "left" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "right" : "if (maximum == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[74730-74897]:IfStatement[75508-75675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74771-74817]:Block[75549-75595]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74790-74802]:ReturnStatement[75568-75580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74836-74897]:Block[75614-75675]"
    }, {
      "left" : "return new Double(maximum);",
      "right" : "return new Double(maximum);",
      "info" : "ReturnStatement[74855-74882]:ReturnStatement[75633-75660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75326-75388]:Block[76104-76166]"
    }, {
      "left" : "return findStackedRangeBounds(dataset, 0.0);",
      "right" : "return findStackedRangeBounds(dataset, 0.0);",
      "info" : "ReturnStatement[75337-75381]:ReturnStatement[76115-76159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75871-77172]:Block[76649-77950]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[75882-75992]:IfStatement[76660-76770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75903-75992]:Block[76681-76770]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[75918-75981]:ThrowStatement[76696-76759]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[76002-76022]:VariableDeclarationStatement[76780-76800]"
    }, {
      "left" : "double minimum = Double.POSITIVE_INFINITY;",
      "right" : "double minimum = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[76032-76074]:VariableDeclarationStatement[76810-76852]"
    }, {
      "left" : "double maximum = Double.NEGATIVE_INFINITY;",
      "right" : "double maximum = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[76084-76126]:VariableDeclarationStatement[76862-76904]"
    }, {
      "left" : "int categoryCount = dataset.getColumnCount();",
      "right" : "int categoryCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[76136-76181]:VariableDeclarationStatement[76914-76959]"
    }, {
      "left" : "for (int item = 0; item < categoryCount; item++)",
      "right" : "for (int item = 0; item < categoryCount; item++)",
      "info" : "ForStatement[76191-77042]:ForStatement[76969-77820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76240-77042]:Block[77018-77820]"
    }, {
      "left" : "double positive = base;",
      "right" : "double positive = base;",
      "info" : "VariableDeclarationStatement[76255-76278]:VariableDeclarationStatement[77033-77056]"
    }, {
      "left" : "double negative = base;",
      "right" : "double negative = base;",
      "info" : "VariableDeclarationStatement[76292-76315]:VariableDeclarationStatement[77070-77093]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[76329-76369]:VariableDeclarationStatement[77107-77147]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[76383-76927]:ForStatement[77161-77705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76436-76927]:Block[77214-77705]"
    }, {
      "left" : "Number number = dataset.getValue(series, item);",
      "right" : "Number number = dataset.getValue(series, item);",
      "info" : "VariableDeclarationStatement[76455-76502]:VariableDeclarationStatement[77233-77280]"
    }, {
      "left" : "if (number != null)",
      "right" : "if (number != null)",
      "info" : "IfStatement[76520-76912]:IfStatement[77298-77690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76540-76912]:Block[77318-77690]"
    }, {
      "left" : "double value = number.doubleValue();",
      "right" : "double value = number.doubleValue();",
      "info" : "VariableDeclarationStatement[76563-76599]:VariableDeclarationStatement[77341-77377]"
    }, {
      "left" : "if (value > 0.0)",
      "right" : "if (value > 0.0)",
      "info" : "IfStatement[76621-76716]:IfStatement[77399-77494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76638-76716]:Block[77416-77494]"
    }, {
      "left" : "positive = positive + value;",
      "right" : "positive = positive + value;",
      "info" : "ExpressionStatement[76665-76693]:ExpressionStatement[77443-77471]"
    }, {
      "left" : "if (value < 0.0)",
      "right" : "if (value < 0.0)",
      "info" : "IfStatement[76738-76893]:IfStatement[77516-77671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76755-76893]:Block[77533-77671]"
    }, {
      "left" : "negative = negative + value;",
      "right" : "negative = negative + value;",
      "info" : "ExpressionStatement[76782-76810]:ExpressionStatement[77560-77588]"
    }, {
      "left" : "minimum = Math.min(minimum, negative);",
      "right" : "minimum = Math.min(minimum, negative);",
      "info" : "ExpressionStatement[76941-76979]:ExpressionStatement[77719-77757]"
    }, {
      "left" : "maximum = Math.max(maximum, positive);",
      "right" : "maximum = Math.max(maximum, positive);",
      "info" : "ExpressionStatement[76993-77031]:ExpressionStatement[77771-77809]"
    }, {
      "left" : "if (minimum <= maximum)",
      "right" : "if (minimum <= maximum)",
      "info" : "IfStatement[77052-77139]:IfStatement[77830-77917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77076-77139]:Block[77854-77917]"
    }, {
      "left" : "result = new Range(minimum, maximum);",
      "right" : "result = new Range(minimum, maximum);",
      "info" : "ExpressionStatement[77091-77128]:ExpressionStatement[77869-77906]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[77149-77163]:ReturnStatement[77927-77941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77694-79895]:Block[78472-80673]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[77705-77815]:IfStatement[78483-78593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77726-77815]:Block[78504-78593]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[77741-77804]:ThrowStatement[78519-78582]"
    }, {
      "left" : "boolean hasValidData = false;",
      "right" : "boolean hasValidData = false;",
      "info" : "VariableDeclarationStatement[77825-77854]:VariableDeclarationStatement[78603-78632]"
    }, {
      "left" : "Range result = null;",
      "right" : "Range result = null;",
      "info" : "VariableDeclarationStatement[77864-77884]:VariableDeclarationStatement[78642-78662]"
    }, {
      "left" : "int[] groupIndex = new int[dataset.getRowCount()];",
      "right" : "int[] groupIndex = new int[dataset.getRowCount()];",
      "info" : "VariableDeclarationStatement[77969-78019]:VariableDeclarationStatement[78747-78797]"
    }, {
      "left" : "for (int i = 0; i < dataset.getRowCount(); i++)",
      "right" : "for (int i = 0; i < dataset.getRowCount(); i++)",
      "info" : "ForStatement[78029-78195]:ForStatement[78807-78973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78077-78195]:Block[78855-78973]"
    }, {
      "left" : "groupIndex[i] = map.getGroupIndex(map.getGroup(\r\n                    dataset.getRowKey(i)));",
      "right" : "groupIndex[i] = map.getGroupIndex(map.getGroup(\r\n                    dataset.getRowKey(i)));",
      "info" : "ExpressionStatement[78092-78184]:ExpressionStatement[78870-78962]"
    }, {
      "left" : "int groupCount = map.getGroupCount();",
      "right" : "int groupCount = map.getGroupCount();",
      "info" : "VariableDeclarationStatement[78257-78294]:VariableDeclarationStatement[79035-79072]"
    }, {
      "left" : "double[] minimum = new double[groupCount];",
      "right" : "double[] minimum = new double[groupCount];",
      "info" : "VariableDeclarationStatement[78304-78346]:VariableDeclarationStatement[79082-79124]"
    }, {
      "left" : "double[] maximum = new double[groupCount];",
      "right" : "double[] maximum = new double[groupCount];",
      "info" : "VariableDeclarationStatement[78356-78398]:VariableDeclarationStatement[79134-79176]"
    }, {
      "left" : "int categoryCount = dataset.getColumnCount();",
      "right" : "int categoryCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[78410-78455]:VariableDeclarationStatement[79188-79233]"
    }, {
      "left" : "for (int item = 0; item < categoryCount; item++)",
      "right" : "for (int item = 0; item < categoryCount; item++)",
      "info" : "ForStatement[78465-79648]:ForStatement[79243-80426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78514-79648]:Block[79292-80426]"
    }, {
      "left" : "double[] positive = new double[groupCount];",
      "right" : "double[] positive = new double[groupCount];",
      "info" : "VariableDeclarationStatement[78529-78572]:VariableDeclarationStatement[79307-79350]"
    }, {
      "left" : "double[] negative = new double[groupCount];",
      "right" : "double[] negative = new double[groupCount];",
      "info" : "VariableDeclarationStatement[78586-78629]:VariableDeclarationStatement[79364-79407]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[78643-78683]:VariableDeclarationStatement[79421-79461]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[78697-79440]:ForStatement[79475-80218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78750-79440]:Block[79528-80218]"
    }, {
      "left" : "Number number = dataset.getValue(series, item);",
      "right" : "Number number = dataset.getValue(series, item);",
      "info" : "VariableDeclarationStatement[78769-78816]:VariableDeclarationStatement[79547-79594]"
    }, {
      "left" : "if (number != null)",
      "right" : "if (number != null)",
      "info" : "IfStatement[78834-79425]:IfStatement[79612-80203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78854-79425]:Block[79632-80203]"
    }, {
      "left" : "hasValidData = true;",
      "right" : "hasValidData = true;",
      "info" : "ExpressionStatement[78877-78897]:ExpressionStatement[79655-79675]"
    }, {
      "left" : "double value = number.doubleValue();",
      "right" : "double value = number.doubleValue();",
      "info" : "VariableDeclarationStatement[78919-78955]:VariableDeclarationStatement[79697-79733]"
    }, {
      "left" : "if (value > 0.0)",
      "right" : "if (value > 0.0)",
      "info" : "IfStatement[78977-79146]:IfStatement[79755-79924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78994-79146]:Block[79772-79924]"
    }, {
      "left" : "positive[groupIndex[series]]\r\n                                 = positive[groupIndex[series]] + value;",
      "right" : "positive[groupIndex[series]]\r\n                                 = positive[groupIndex[series]] + value;",
      "info" : "ExpressionStatement[79021-79123]:ExpressionStatement[79799-79901]"
    }, {
      "left" : "if (value < 0.0)",
      "right" : "if (value < 0.0)",
      "info" : "IfStatement[79168-79406]:IfStatement[79946-80184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79185-79406]:Block[79963-80184]"
    }, {
      "left" : "negative[groupIndex[series]]\r\n                                 = negative[groupIndex[series]] + value;",
      "right" : "negative[groupIndex[series]]\r\n                                 = negative[groupIndex[series]] + value;",
      "info" : "ExpressionStatement[79212-79314]:ExpressionStatement[79990-80092]"
    }, {
      "left" : "for (int g = 0; g < groupCount; g++)",
      "right" : "for (int g = 0; g < groupCount; g++)",
      "info" : "ForStatement[79454-79637]:ForStatement[80232-80415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79491-79637]:Block[80269-80415]"
    }, {
      "left" : "minimum[g] = Math.min(minimum[g], negative[g]);",
      "right" : "minimum[g] = Math.min(minimum[g], negative[g]);",
      "info" : "ExpressionStatement[79510-79557]:ExpressionStatement[80288-80335]"
    }, {
      "left" : "maximum[g] = Math.max(maximum[g], positive[g]);",
      "right" : "maximum[g] = Math.max(maximum[g], positive[g]);",
      "info" : "ExpressionStatement[79575-79622]:ExpressionStatement[80353-80400]"
    }, {
      "left" : "if (hasValidData)",
      "right" : "if (hasValidData)",
      "info" : "IfStatement[79658-79864]:IfStatement[80436-80642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79676-79864]:Block[80454-80642]"
    }, {
      "left" : "for (int j = 0; j < groupCount; j++)",
      "right" : "for (int j = 0; j < groupCount; j++)",
      "info" : "ForStatement[79691-79853]:ForStatement[80469-80631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79728-79853]:Block[80506-80631]"
    }, {
      "left" : "result = Range.combine(result, new Range(minimum[j],\r\n                        maximum[j]));",
      "right" : "result = Range.combine(result, new Range(minimum[j],\r\n                        maximum[j]));",
      "info" : "ExpressionStatement[79747-79838]:ExpressionStatement[80525-80616]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[79874-79888]:ReturnStatement[80652-80666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80303-81378]:Block[81081-82156]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[80314-80424]:IfStatement[81092-81202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80335-80424]:Block[81113-81202]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[80350-80413]:ThrowStatement[81128-81191]"
    }, {
      "left" : "Number result = null;",
      "right" : "Number result = null;",
      "info" : "VariableDeclarationStatement[80434-80455]:VariableDeclarationStatement[81212-81233]"
    }, {
      "left" : "boolean hasValidData = false;",
      "right" : "boolean hasValidData = false;",
      "info" : "VariableDeclarationStatement[80465-80494]:VariableDeclarationStatement[81243-81272]"
    }, {
      "left" : "double minimum = 0.0;",
      "right" : "double minimum = 0.0;",
      "info" : "VariableDeclarationStatement[80504-80525]:VariableDeclarationStatement[81282-81303]"
    }, {
      "left" : "int categoryCount = dataset.getColumnCount();",
      "right" : "int categoryCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[80535-80580]:VariableDeclarationStatement[81313-81358]"
    }, {
      "left" : "for (int item = 0; item < categoryCount; item++)",
      "right" : "for (int item = 0; item < categoryCount; item++)",
      "info" : "ForStatement[80590-81264]:ForStatement[81368-82042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80639-81264]:Block[81417-82042]"
    }, {
      "left" : "double total = 0.0;",
      "right" : "double total = 0.0;",
      "info" : "VariableDeclarationStatement[80654-80673]:VariableDeclarationStatement[81432-81451]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[80687-80727]:VariableDeclarationStatement[81465-81505]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[80741-81204]:ForStatement[81519-81982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80794-81204]:Block[81572-81982]"
    }, {
      "left" : "Number number = dataset.getValue(series, item);",
      "right" : "Number number = dataset.getValue(series, item);",
      "info" : "VariableDeclarationStatement[80813-80860]:VariableDeclarationStatement[81591-81638]"
    }, {
      "left" : "if (number != null)",
      "right" : "if (number != null)",
      "info" : "IfStatement[80878-81189]:IfStatement[81656-81967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80898-81189]:Block[81676-81967]"
    }, {
      "left" : "hasValidData = true;",
      "right" : "hasValidData = true;",
      "info" : "ExpressionStatement[80921-80941]:ExpressionStatement[81699-81719]"
    }, {
      "left" : "double value = number.doubleValue();",
      "right" : "double value = number.doubleValue();",
      "info" : "VariableDeclarationStatement[80963-80999]:VariableDeclarationStatement[81741-81777]"
    }, {
      "left" : "if (value < 0.0)",
      "right" : "if (value < 0.0)",
      "info" : "IfStatement[81021-81170]:IfStatement[81799-81948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81038-81170]:Block[81816-81948]"
    }, {
      "left" : "total = total + value;",
      "right" : "total = total + value;",
      "info" : "ExpressionStatement[81065-81087]:ExpressionStatement[81843-81865]"
    }, {
      "left" : "minimum = Math.min(minimum, total);",
      "right" : "minimum = Math.min(minimum, total);",
      "info" : "ExpressionStatement[81218-81253]:ExpressionStatement[81996-82031]"
    }, {
      "left" : "if (hasValidData)",
      "right" : "if (hasValidData)",
      "info" : "IfStatement[81274-81347]:IfStatement[82052-82125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81292-81347]:Block[82070-82125]"
    }, {
      "left" : "result = new Double(minimum);",
      "right" : "result = new Double(minimum);",
      "info" : "ExpressionStatement[81307-81336]:ExpressionStatement[82085-82114]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[81357-81371]:ReturnStatement[82135-82149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81815-82830]:Block[82593-83608]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[81826-81936]:IfStatement[82604-82714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81847-81936]:Block[82625-82714]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[81862-81925]:ThrowStatement[82640-82703]"
    }, {
      "left" : "Number result = null;",
      "right" : "Number result = null;",
      "info" : "VariableDeclarationStatement[81946-81967]:VariableDeclarationStatement[82724-82745]"
    }, {
      "left" : "boolean hasValidData = false;",
      "right" : "boolean hasValidData = false;",
      "info" : "VariableDeclarationStatement[81977-82006]:VariableDeclarationStatement[82755-82784]"
    }, {
      "left" : "double maximum = 0.0;",
      "right" : "double maximum = 0.0;",
      "info" : "VariableDeclarationStatement[82016-82037]:VariableDeclarationStatement[82794-82815]"
    }, {
      "left" : "int categoryCount = dataset.getColumnCount();",
      "right" : "int categoryCount = dataset.getColumnCount();",
      "info" : "VariableDeclarationStatement[82047-82092]:VariableDeclarationStatement[82825-82870]"
    }, {
      "left" : "for (int item = 0; item < categoryCount; item++)",
      "right" : "for (int item = 0; item < categoryCount; item++)",
      "info" : "ForStatement[82102-82716]:ForStatement[82880-83494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82151-82716]:Block[82929-83494]"
    }, {
      "left" : "double total = 0.0;",
      "right" : "double total = 0.0;",
      "info" : "VariableDeclarationStatement[82166-82185]:VariableDeclarationStatement[82944-82963]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[82199-82239]:VariableDeclarationStatement[82977-83017]"
    }, {
      "left" : "for (int series = 0; series < seriesCount; series++)",
      "right" : "for (int series = 0; series < seriesCount; series++)",
      "info" : "ForStatement[82253-82656]:ForStatement[83031-83434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82306-82656]:Block[83084-83434]"
    }, {
      "left" : "Number number = dataset.getValue(series, item);",
      "right" : "Number number = dataset.getValue(series, item);",
      "info" : "VariableDeclarationStatement[82325-82372]:VariableDeclarationStatement[83103-83150]"
    }, {
      "left" : "if (number != null)",
      "right" : "if (number != null)",
      "info" : "IfStatement[82390-82641]:IfStatement[83168-83419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82410-82641]:Block[83188-83419]"
    }, {
      "left" : "hasValidData = true;",
      "right" : "hasValidData = true;",
      "info" : "ExpressionStatement[82433-82453]:ExpressionStatement[83211-83231]"
    }, {
      "left" : "double value = number.doubleValue();",
      "right" : "double value = number.doubleValue();",
      "info" : "VariableDeclarationStatement[82475-82511]:VariableDeclarationStatement[83253-83289]"
    }, {
      "left" : "if (value > 0.0)",
      "right" : "if (value > 0.0)",
      "info" : "IfStatement[82533-82622]:IfStatement[83311-83400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82550-82622]:Block[83328-83400]"
    }, {
      "left" : "total = total + value;",
      "right" : "total = total + value;",
      "info" : "ExpressionStatement[82577-82599]:ExpressionStatement[83355-83377]"
    }, {
      "left" : "maximum = Math.max(maximum, total);",
      "right" : "maximum = Math.max(maximum, total);",
      "info" : "ExpressionStatement[82670-82705]:ExpressionStatement[83448-83483]"
    }, {
      "left" : "if (hasValidData)",
      "right" : "if (hasValidData)",
      "info" : "IfStatement[82726-82799]:IfStatement[83504-83577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82744-82799]:Block[83522-83577]"
    }, {
      "left" : "result = new Double(maximum);",
      "right" : "result = new Double(maximum);",
      "info" : "ExpressionStatement[82759-82788]:ExpressionStatement[83537-83566]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[82809-82823]:ReturnStatement[83587-83601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83202-83264]:Block[83980-84042]"
    }, {
      "left" : "return findStackedRangeBounds(dataset, 0.0);",
      "right" : "return findStackedRangeBounds(dataset, 0.0);",
      "info" : "ReturnStatement[83213-83257]:ReturnStatement[83991-84035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83773-84916]:Block[84551-85694]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[83784-83894]:IfStatement[84562-84672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83805-83894]:Block[84583-84672]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[83820-83883]:ThrowStatement[84598-84661]"
    }, {
      "left" : "double minimum = base;",
      "right" : "double minimum = base;",
      "info" : "VariableDeclarationStatement[83904-83926]:VariableDeclarationStatement[84682-84704]"
    }, {
      "left" : "double maximum = base;",
      "right" : "double maximum = base;",
      "info" : "VariableDeclarationStatement[83936-83958]:VariableDeclarationStatement[84714-84736]"
    }, {
      "left" : "for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++)",
      "right" : "for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++)",
      "info" : "ForStatement[83968-84761]:ForStatement[84746-85539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84032-84761]:Block[84810-85539]"
    }, {
      "left" : "double positive = base;",
      "right" : "double positive = base;",
      "info" : "VariableDeclarationStatement[84047-84070]:VariableDeclarationStatement[84825-84848]"
    }, {
      "left" : "double negative = base;",
      "right" : "double negative = base;",
      "info" : "VariableDeclarationStatement[84084-84107]:VariableDeclarationStatement[84862-84885]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[84121-84164]:VariableDeclarationStatement[84899-84942]"
    }, {
      "left" : "for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++)",
      "right" : "for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++)",
      "info" : "ForStatement[84178-84568]:ForStatement[84956-85346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84237-84568]:Block[85015-85346]"
    }, {
      "left" : "double y = dataset.getYValue(seriesNo, itemNo);",
      "right" : "double y = dataset.getYValue(seriesNo, itemNo);",
      "info" : "VariableDeclarationStatement[84256-84303]:VariableDeclarationStatement[85034-85081]"
    }, {
      "left" : "if (!Double.isNaN(y))",
      "right" : "if (!Double.isNaN(y))",
      "info" : "IfStatement[84321-84553]:IfStatement[85099-85331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84343-84553]:Block[85121-85331]"
    }, {
      "left" : "if (y > 0.0)",
      "right" : "if (y > 0.0)",
      "info" : "IfStatement[84366-84534]:IfStatement[85144-85312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84379-84443]:Block[85157-85221]"
    }, {
      "left" : "positive += y;",
      "right" : "positive += y;",
      "info" : "ExpressionStatement[84406-84420]:ExpressionStatement[85184-85198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84470-84534]:Block[85248-85312]"
    }, {
      "left" : "negative += y;",
      "right" : "negative += y;",
      "info" : "ExpressionStatement[84497-84511]:ExpressionStatement[85275-85289]"
    }, {
      "left" : "if (positive > maximum)",
      "right" : "if (positive > maximum)",
      "info" : "IfStatement[84582-84659]:IfStatement[85360-85437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84606-84659]:Block[85384-85437]"
    }, {
      "left" : "maximum = positive;",
      "right" : "maximum = positive;",
      "info" : "ExpressionStatement[84625-84644]:ExpressionStatement[85403-85422]"
    }, {
      "left" : "if (negative < minimum)",
      "right" : "if (negative < minimum)",
      "info" : "IfStatement[84673-84750]:IfStatement[85451-85528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84697-84750]:Block[85475-85528]"
    }, {
      "left" : "minimum = negative;",
      "right" : "minimum = negative;",
      "info" : "ExpressionStatement[84716-84735]:ExpressionStatement[85494-85513]"
    }, {
      "left" : "if (minimum <= maximum)",
      "right" : "if (minimum <= maximum)",
      "info" : "IfStatement[84771-84909]:IfStatement[85549-85687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84795-84856]:Block[85573-85634]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[84810-84845]:ReturnStatement[85588-85623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84871-84909]:Block[85649-85687]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[84886-84898]:ReturnStatement[85664-85676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85255-85580]:Block[86033-86358]"
    }, {
      "left" : "double total = 0.0;",
      "right" : "double total = 0.0;",
      "info" : "VariableDeclarationStatement[85266-85285]:VariableDeclarationStatement[86044-86063]"
    }, {
      "left" : "int seriesCount = dataset.getSeriesCount();",
      "right" : "int seriesCount = dataset.getSeriesCount();",
      "info" : "VariableDeclarationStatement[85295-85338]:VariableDeclarationStatement[86073-86116]"
    }, {
      "left" : "for (int s = 0; s < seriesCount; s++)",
      "right" : "for (int s = 0; s < seriesCount; s++)",
      "info" : "ForStatement[85348-85550]:ForStatement[86126-86328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85386-85550]:Block[86164-86328]"
    }, {
      "left" : "double value = dataset.getYValue(s, item);",
      "right" : "double value = dataset.getYValue(s, item);",
      "info" : "VariableDeclarationStatement[85401-85443]:VariableDeclarationStatement[86179-86221]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[85457-85539]:IfStatement[86235-86317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85483-85539]:Block[86261-86317]"
    }, {
      "left" : "total = total + value;",
      "right" : "total = total + value;",
      "info" : "ExpressionStatement[85502-85524]:ExpressionStatement[86280-86302]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[85560-85573]:ReturnStatement[86338-86351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85981-87180]:Block[86759-87958]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[85992-86102]:IfStatement[86770-86880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86013-86102]:Block[86791-86880]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'dataset' argument.\");",
      "info" : "ThrowStatement[86028-86091]:ThrowStatement[86806-86869]"
    }, {
      "left" : "boolean allItemsNull = true;",
      "right" : "boolean allItemsNull = true;",
      "info" : "VariableDeclarationStatement[86112-86140]:VariableDeclarationStatement[86890-86918]"
    }, {
      "left" : "double minimum = 0.0;",
      "right" : "double minimum = 0.0;",
      "info" : "VariableDeclarationStatement[86265-86286]:VariableDeclarationStatement[87043-87064]"
    }, {
      "left" : "double maximum = 0.0;",
      "right" : "double maximum = 0.0;",
      "info" : "VariableDeclarationStatement[86296-86317]:VariableDeclarationStatement[87074-87095]"
    }, {
      "left" : "for (int row = 0; row < dataset.getRowCount(); row++)",
      "right" : "for (int row = 0; row < dataset.getRowCount(); row++)",
      "info" : "ForStatement[86327-87030]:ForStatement[87105-87808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86381-87030]:Block[87159-87808]"
    }, {
      "left" : "double runningTotal = 0.0;",
      "right" : "double runningTotal = 0.0;",
      "info" : "VariableDeclarationStatement[86396-86422]:VariableDeclarationStatement[87174-87200]"
    }, {
      "left" : "for (int column = 0; column <= dataset.getColumnCount() - 1;\r\n                 column++)",
      "right" : "for (int column = 0; column <= dataset.getColumnCount() - 1;\r\n                 column++)",
      "info" : "ForStatement[86436-87019]:ForStatement[87214-87797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86525-87019]:Block[87303-87797]"
    }, {
      "left" : "Number n = dataset.getValue(row, column);",
      "right" : "Number n = dataset.getValue(row, column);",
      "info" : "VariableDeclarationStatement[86544-86585]:VariableDeclarationStatement[87322-87363]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[86603-87004]:IfStatement[87381-87782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86618-87004]:Block[87396-87782]"
    }, {
      "left" : "allItemsNull = false;",
      "right" : "allItemsNull = false;",
      "info" : "ExpressionStatement[86641-86662]:ExpressionStatement[87419-87440]"
    }, {
      "left" : "double value = n.doubleValue();",
      "right" : "double value = n.doubleValue();",
      "info" : "VariableDeclarationStatement[86684-86715]:VariableDeclarationStatement[87462-87493]"
    }, {
      "left" : "if (!Double.isNaN(value))",
      "right" : "if (!Double.isNaN(value))",
      "info" : "IfStatement[86737-86985]:IfStatement[87515-87763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86763-86985]:Block[87541-87763]"
    }, {
      "left" : "runningTotal = runningTotal + value;",
      "right" : "runningTotal = runningTotal + value;",
      "info" : "ExpressionStatement[86790-86826]:ExpressionStatement[87568-87604]"
    }, {
      "left" : "minimum = Math.min(minimum, runningTotal);",
      "right" : "minimum = Math.min(minimum, runningTotal);",
      "info" : "ExpressionStatement[86852-86894]:ExpressionStatement[87630-87672]"
    }, {
      "left" : "maximum = Math.max(maximum, runningTotal);",
      "right" : "maximum = Math.max(maximum, runningTotal);",
      "info" : "ExpressionStatement[86920-86962]:ExpressionStatement[87698-87740]"
    }, {
      "left" : "if (!allItemsNull)",
      "right" : "if (!allItemsNull)",
      "info" : "IfStatement[87040-87173]:IfStatement[87818-87951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87059-87120]:Block[87837-87898]"
    }, {
      "left" : "return new Range(minimum, maximum);",
      "right" : "return new Range(minimum, maximum);",
      "info" : "ReturnStatement[87074-87109]:ReturnStatement[87852-87887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87135-87173]:Block[87913-87951]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[87150-87162]:ReturnStatement[87928-87940]"
    } ]
  },
  "interFileMappings" : { }
}