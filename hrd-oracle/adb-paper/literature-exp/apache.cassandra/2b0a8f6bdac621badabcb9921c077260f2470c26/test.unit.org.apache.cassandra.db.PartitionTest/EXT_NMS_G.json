{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PartitionTest",
      "right" : "PartitionTest",
      "info" : "TypeDeclaration[1907-8218]:TypeDeclaration[1907-8240]"
    }, {
      "left" : "static int version = MessagingService.current_version;",
      "right" : "static int version = MessagingService.current_version;",
      "info" : "FieldDeclaration[1940-1994]:FieldDeclaration[1940-1994]"
    }, {
      "left" : "private static final String KEYSPACE1 = \"Keyspace1\";",
      "right" : "private static final String KEYSPACE1 = \"Keyspace1\";",
      "info" : "FieldDeclaration[1999-2051]:FieldDeclaration[1999-2051]"
    }, {
      "left" : "private static final String CF_STANDARD1 = \"Standard1\";",
      "right" : "private static final String CF_STANDARD1 = \"Standard1\";",
      "info" : "FieldDeclaration[2056-2111]:FieldDeclaration[2056-2111]"
    }, {
      "left" : "private static final String CF_TENCOL = \"TenColumns\";",
      "right" : "private static final String CF_TENCOL = \"TenColumns\";",
      "info" : "FieldDeclaration[2116-2169]:FieldDeclaration[2116-2169]"
    }, {
      "left" : "private static final String CF_COUNTER1 = \"Counter1\";",
      "right" : "private static final String CF_COUNTER1 = \"Counter1\";",
      "info" : "FieldDeclaration[2174-2227]:FieldDeclaration[2174-2227]"
    }, {
      "left" : "public static void defineSchema() throws ConfigurationException",
      "right" : "public static void defineSchema() throws ConfigurationException",
      "info" : "MethodDeclaration[2233-2774]:MethodDeclaration[2233-2774]"
    }, {
      "left" : "public void testSingleColumn() throws IOException",
      "right" : "public void testSingleColumn() throws IOException",
      "info" : "MethodDeclaration[2780-3754]:MethodDeclaration[2780-3754]"
    }, {
      "left" : "public void testManyColumns() throws IOException",
      "right" : "public void testManyColumns() throws IOException",
      "info" : "MethodDeclaration[3760-5283]:MethodDeclaration[3760-5283]"
    }, {
      "left" : "public void testDigest() throws NoSuchAlgorithmException",
      "right" : "public void testDigest() throws NoSuchAlgorithmException",
      "info" : "MethodDeclaration[5289-7391]:MethodDeclaration[5289-7391]"
    }, {
      "left" : "public void testColumnStatsRecordsRowDeletesCorrectly()",
      "right" : "public void testColumnStatsRecordsRowDeletesCorrectly()",
      "info" : "MethodDeclaration[7397-8216]:MethodDeclaration[7397-8238]"
    } ],
    "mappings" : [
 {
      "left" : "@BeforeClass",
      "right" : "@BeforeClass",
      "info" : "MarkerAnnotation[2233-2245]:MarkerAnnotation[2233-2245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2250-2256]:Modifier[2250-2256]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2257-2263]:Modifier[2257-2263]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2264-2268]:PrimitiveType[2264-2268]"
    }, {
      "left" : "defineSchema",
      "right" : "defineSchema",
      "info" : "SimpleName[2269-2281]:SimpleName[2269-2281]"
    }, {
      "left" : "ConfigurationException",
      "right" : "ConfigurationException",
      "info" : "SimpleType[2291-2313]:SimpleType[2291-2313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2774]:Block[2318-2774]"
    }, {
      "left" : "SchemaLoader.prepareServer();",
      "right" : "SchemaLoader.prepareServer();",
      "info" : "ExpressionStatement[2328-2357]:ExpressionStatement[2328-2357]"
    }, {
      "left" : "SchemaLoader.createKeyspace(KEYSPACE1,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1),\n                                    SchemaLoader.standardCFMD(KEYSPACE1, CF_TENCOL, 10, AsciiType.instance),\n                                    SchemaLoader.denseCFMD(KEYSPACE1, CF_COUNTER1, BytesType.instance));",
      "right" : "SchemaLoader.createKeyspace(KEYSPACE1,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1),\n                                    SchemaLoader.standardCFMD(KEYSPACE1, CF_TENCOL, 10, AsciiType.instance),\n                                    SchemaLoader.denseCFMD(KEYSPACE1, CF_COUNTER1, BytesType.instance));",
      "info" : "ExpressionStatement[2366-2768]:ExpressionStatement[2366-2768]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2780-2785]:MarkerAnnotation[2780-2785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2790-2796]:Modifier[2790-2796]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2797-2801]:PrimitiveType[2797-2801]"
    }, {
      "left" : "testSingleColumn",
      "right" : "testSingleColumn",
      "info" : "SimpleName[2802-2818]:SimpleName[2802-2818]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2828-2839]:SimpleType[2828-2839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2844-3754]:Block[2844-3754]"
    }, {
      "left" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);",
      "right" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);",
      "info" : "VariableDeclarationStatement[2854-2938]:VariableDeclarationStatement[2854-2938]"
    }, {
      "left" : "PartitionUpdate update = new RowUpdateBuilder(cfs.metadata, 5, \"key1\")\n                                 .clustering(\"c\")\n                                 .add(\"val\", \"val1\")\n                                 .buildUpdate();",
      "right" : "PartitionUpdate update = new RowUpdateBuilder(cfs.metadata, 5, \"key1\")\n                                 .clustering(\"c\")\n                                 .add(\"val\", \"val1\")\n                                 .buildUpdate();",
      "info" : "VariableDeclarationStatement[2947-3169]:VariableDeclarationStatement[2947-3169]"
    }, {
      "left" : "ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());",
      "right" : "ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());",
      "info" : "VariableDeclarationStatement[3179-3309]:VariableDeclarationStatement[3179-3309]"
    }, {
      "left" : "DataOutputBuffer bufOut = new DataOutputBuffer();",
      "right" : "DataOutputBuffer bufOut = new DataOutputBuffer();",
      "info" : "VariableDeclarationStatement[3319-3368]:VariableDeclarationStatement[3319-3368]"
    }, {
      "left" : "CachedPartition.cacheSerializer.serialize(partition, bufOut);",
      "right" : "CachedPartition.cacheSerializer.serialize(partition, bufOut);",
      "info" : "ExpressionStatement[3377-3438]:ExpressionStatement[3377-3438]"
    }, {
      "left" : "CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));",
      "right" : "CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));",
      "info" : "VariableDeclarationStatement[3448-3565]:VariableDeclarationStatement[3448-3565]"
    }, {
      "left" : "assert deserialized != null;",
      "right" : "assert deserialized != null;",
      "info" : "AssertStatement[3575-3603]:AssertStatement[3575-3603]"
    }, {
      "left" : "assert deserialized.metadata().cfName.equals(CF_STANDARD1);",
      "right" : "assert deserialized.metadata().cfName.equals(CF_STANDARD1);",
      "info" : "AssertStatement[3612-3671]:AssertStatement[3612-3671]"
    }, {
      "left" : "assert deserialized.partitionKey().equals(partition.partitionKey());",
      "right" : "assert deserialized.partitionKey().equals(partition.partitionKey());",
      "info" : "AssertStatement[3680-3748]:AssertStatement[3680-3748]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3760-3765]:MarkerAnnotation[3760-3765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3770-3776]:Modifier[3770-3776]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3777-3781]:PrimitiveType[3777-3781]"
    }, {
      "left" : "testManyColumns",
      "right" : "testManyColumns",
      "info" : "SimpleName[3782-3797]:SimpleName[3782-3797]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3807-3818]:SimpleType[3807-3818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3823-5283]:Block[3823-5283]"
    }, {
      "left" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "right" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "info" : "VariableDeclarationStatement[3833-3914]:VariableDeclarationStatement[3833-3914]"
    }, {
      "left" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\")\n                                   .clustering(\"c\")\n                                   .add(\"val\", \"val1\");",
      "right" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\")\n                                   .clustering(\"c\")\n                                   .add(\"val\", \"val1\");",
      "info" : "VariableDeclarationStatement[3923-4103]:VariableDeclarationStatement[3923-4103]"
    }, {
      "left" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "right" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ForStatement[4113-4188]:ForStatement[4113-4188]"
    }, {
      "left" : "builder.add(\"val\" + i, \"val\" + i);",
      "right" : "builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ExpressionStatement[4154-4188]:ExpressionStatement[4154-4188]"
    }, {
      "left" : "PartitionUpdate update = builder.buildUpdate();",
      "right" : "PartitionUpdate update = builder.buildUpdate();",
      "info" : "VariableDeclarationStatement[4198-4245]:VariableDeclarationStatement[4198-4245]"
    }, {
      "left" : "ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());",
      "right" : "ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());",
      "info" : "VariableDeclarationStatement[4255-4385]:VariableDeclarationStatement[4255-4385]"
    }, {
      "left" : "DataOutputBuffer bufOut = new DataOutputBuffer();",
      "right" : "DataOutputBuffer bufOut = new DataOutputBuffer();",
      "info" : "VariableDeclarationStatement[4395-4444]:VariableDeclarationStatement[4395-4444]"
    }, {
      "left" : "CachedPartition.cacheSerializer.serialize(partition, bufOut);",
      "right" : "CachedPartition.cacheSerializer.serialize(partition, bufOut);",
      "info" : "ExpressionStatement[4453-4514]:ExpressionStatement[4453-4514]"
    }, {
      "left" : "CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));",
      "right" : "CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));",
      "info" : "VariableDeclarationStatement[4524-4641]:VariableDeclarationStatement[4524-4641]"
    }, {
      "left" : "assertEquals(partition.columns().regulars.columnCount(), deserialized.columns().regulars.columnCount());",
      "right" : "assertEquals(partition.columns().regulars.columnCount(), deserialized.columns().regulars.columnCount());",
      "info" : "ExpressionStatement[4651-4755]:ExpressionStatement[4651-4755]"
    }, {
      "left" : "assertTrue(deserialized.columns().regulars.getSimple(1).equals(partition.columns().regulars.getSimple(1)));",
      "right" : "assertTrue(deserialized.columns().regulars.getSimple(1).equals(partition.columns().regulars.getSimple(1)));",
      "info" : "ExpressionStatement[4764-4871]:ExpressionStatement[4764-4871]"
    }, {
      "left" : "assertTrue(deserialized.columns().regulars.getSimple(5).equals(partition.columns().regulars.getSimple(5)));",
      "right" : "assertTrue(deserialized.columns().regulars.getSimple(5).equals(partition.columns().regulars.getSimple(5)));",
      "info" : "ExpressionStatement[4880-4987]:ExpressionStatement[4880-4987]"
    }, {
      "left" : "ColumnDefinition cDef = cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes(\"val8\"));",
      "right" : "ColumnDefinition cDef = cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes(\"val8\"));",
      "info" : "VariableDeclarationStatement[4997-5084]:VariableDeclarationStatement[4997-5084]"
    }, {
      "left" : "assertTrue(partition.lastRow().getCell(cDef).value().equals(deserialized.lastRow().getCell(cDef).value()));",
      "right" : "assertTrue(partition.lastRow().getCell(cDef).value().equals(deserialized.lastRow().getCell(cDef).value()));",
      "info" : "ExpressionStatement[5093-5200]:ExpressionStatement[5093-5200]"
    }, {
      "left" : "assert deserialized.partitionKey().equals(partition.partitionKey());",
      "right" : "assert deserialized.partitionKey().equals(partition.partitionKey());",
      "info" : "AssertStatement[5209-5277]:AssertStatement[5209-5277]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5289-5294]:MarkerAnnotation[5289-5294]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5299-5305]:Modifier[5299-5305]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5306-5310]:PrimitiveType[5306-5310]"
    }, {
      "left" : "testDigest",
      "right" : "testDigest",
      "info" : "SimpleName[5311-5321]:SimpleName[5311-5321]"
    }, {
      "left" : "NoSuchAlgorithmException",
      "right" : "NoSuchAlgorithmException",
      "info" : "SimpleType[5331-5355]:SimpleType[5331-5355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5360-7391]:Block[5360-7391]"
    }, {
      "left" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "right" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "info" : "VariableDeclarationStatement[5370-5451]:VariableDeclarationStatement[5370-5451]"
    }, {
      "left" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\").clustering(\"c\").add(\"val\", \"val1\");",
      "right" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\").clustering(\"c\").add(\"val\", \"val1\");",
      "info" : "VariableDeclarationStatement[5460-5568]:VariableDeclarationStatement[5460-5568]"
    }, {
      "left" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "right" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ForStatement[5577-5652]:ForStatement[5577-5652]"
    }, {
      "left" : "builder.add(\"val\" + i, \"val\" + i);",
      "right" : "builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ExpressionStatement[5618-5652]:ExpressionStatement[5618-5652]"
    }, {
      "left" : "builder.build().applyUnsafe();",
      "right" : "builder.build().applyUnsafe();",
      "info" : "ExpressionStatement[5661-5691]:ExpressionStatement[5661-5691]"
    }, {
      "left" : "new RowUpdateBuilder(cfs.metadata, 5, \"key2\").clustering(\"c\").add(\"val\", \"val2\").build().applyUnsafe();",
      "right" : "new RowUpdateBuilder(cfs.metadata, 5, \"key2\").clustering(\"c\").add(\"val\", \"val2\").build().applyUnsafe();",
      "info" : "ExpressionStatement[5701-5804]:ExpressionStatement[5701-5804]"
    }, {
      "left" : "ArrayBackedPartition p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key1\").build());",
      "right" : "ArrayBackedPartition p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key1\").build());",
      "info" : "VariableDeclarationStatement[5814-5903]:VariableDeclarationStatement[5814-5903]"
    }, {
      "left" : "ArrayBackedPartition p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "right" : "ArrayBackedPartition p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "info" : "VariableDeclarationStatement[5912-6001]:VariableDeclarationStatement[5912-6001]"
    }, {
      "left" : "MessageDigest digest1 = MessageDigest.getInstance(\"MD5\");",
      "right" : "MessageDigest digest1 = MessageDigest.getInstance(\"MD5\");",
      "info" : "VariableDeclarationStatement[6011-6068]:VariableDeclarationStatement[6011-6068]"
    }, {
      "left" : "MessageDigest digest2 = MessageDigest.getInstance(\"MD5\");",
      "right" : "MessageDigest digest2 = MessageDigest.getInstance(\"MD5\");",
      "info" : "VariableDeclarationStatement[6077-6134]:VariableDeclarationStatement[6077-6134]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "right" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "info" : "ExpressionStatement[6143-6207]:ExpressionStatement[6143-6207]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "right" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "info" : "ExpressionStatement[6216-6280]:ExpressionStatement[6216-6280]"
    }, {
      "left" : "assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));",
      "right" : "assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));",
      "info" : "ExpressionStatement[6289-6352]:ExpressionStatement[6289-6352]"
    }, {
      "left" : "p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "right" : "p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "info" : "ExpressionStatement[6362-6430]:ExpressionStatement[6362-6430]"
    }, {
      "left" : "p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "right" : "p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "info" : "ExpressionStatement[6439-6507]:ExpressionStatement[6439-6507]"
    }, {
      "left" : "digest1 = MessageDigest.getInstance(\"MD5\");",
      "right" : "digest1 = MessageDigest.getInstance(\"MD5\");",
      "info" : "ExpressionStatement[6516-6559]:ExpressionStatement[6516-6559]"
    }, {
      "left" : "digest2 = MessageDigest.getInstance(\"MD5\");",
      "right" : "digest2 = MessageDigest.getInstance(\"MD5\");",
      "info" : "ExpressionStatement[6568-6611]:ExpressionStatement[6568-6611]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "right" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "info" : "ExpressionStatement[6620-6684]:ExpressionStatement[6620-6684]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "right" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "info" : "ExpressionStatement[6693-6757]:ExpressionStatement[6693-6757]"
    }, {
      "left" : "assertTrue(Arrays.equals(digest1.digest(), digest2.digest()));",
      "right" : "assertTrue(Arrays.equals(digest1.digest(), digest2.digest()));",
      "info" : "ExpressionStatement[6766-6828]:ExpressionStatement[6766-6828]"
    }, {
      "left" : "p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "right" : "p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "info" : "ExpressionStatement[6838-6906]:ExpressionStatement[6838-6906]"
    }, {
      "left" : "RowUpdateBuilder.deleteRow(cfs.metadata, 6, \"key2\", \"c\").applyUnsafe();",
      "right" : "RowUpdateBuilder.deleteRow(cfs.metadata, 6, \"key2\", \"c\").applyUnsafe();",
      "info" : "ExpressionStatement[6915-6986]:ExpressionStatement[6915-6986]"
    }, {
      "left" : "p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "right" : "p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key2\").build());",
      "info" : "ExpressionStatement[6995-7063]:ExpressionStatement[6995-7063]"
    }, {
      "left" : "digest1 = MessageDigest.getInstance(\"MD5\");",
      "right" : "digest1 = MessageDigest.getInstance(\"MD5\");",
      "info" : "ExpressionStatement[7072-7115]:ExpressionStatement[7072-7115]"
    }, {
      "left" : "digest2 = MessageDigest.getInstance(\"MD5\");",
      "right" : "digest2 = MessageDigest.getInstance(\"MD5\");",
      "info" : "ExpressionStatement[7124-7167]:ExpressionStatement[7124-7167]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "right" : "UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);",
      "info" : "ExpressionStatement[7176-7240]:ExpressionStatement[7176-7240]"
    }, {
      "left" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "right" : "UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);",
      "info" : "ExpressionStatement[7249-7313]:ExpressionStatement[7249-7313]"
    }, {
      "left" : "assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));",
      "right" : "assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));",
      "info" : "ExpressionStatement[7322-7385]:ExpressionStatement[7322-7385]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7397-7402]:MarkerAnnotation[7397-7402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7407-7413]:Modifier[7407-7413]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7414-7418]:PrimitiveType[7414-7418]"
    }, {
      "left" : "testColumnStatsRecordsRowDeletesCorrectly",
      "right" : "testColumnStatsRecordsRowDeletesCorrectly",
      "info" : "SimpleName[7419-7460]:SimpleName[7419-7460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7467-8216]:Block[7467-8238]"
    }, {
      "left" : "long timestamp = System.currentTimeMillis();",
      "right" : "long timestamp = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[7477-7521]:VariableDeclarationStatement[7477-7521]"
    }, {
      "left" : "int localDeletionTime = (int) (timestamp / 1000);",
      "right" : "int localDeletionTime = (int) (timestamp / 1000);",
      "info" : "VariableDeclarationStatement[7530-7579]:VariableDeclarationStatement[7530-7579]"
    }, {
      "left" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "right" : "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);",
      "info" : "VariableDeclarationStatement[7589-7670]:VariableDeclarationStatement[7589-7670]"
    }, {
      "left" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\").clustering(\"c\").add(\"val\", \"val1\");",
      "right" : "RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, \"key1\").clustering(\"c\").add(\"val\", \"val1\");",
      "info" : "VariableDeclarationStatement[7679-7787]:VariableDeclarationStatement[7679-7787]"
    }, {
      "left" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "right" : "for (int i = 0; i < 10; i++)\n            builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ForStatement[7796-7871]:ForStatement[7796-7871]"
    }, {
      "left" : "builder.add(\"val\" + i, \"val\" + i);",
      "right" : "builder.add(\"val\" + i, \"val\" + i);",
      "info" : "ExpressionStatement[7837-7871]:ExpressionStatement[7837-7871]"
    }, {
      "left" : "builder.build().applyUnsafe();",
      "right" : "builder.build().applyUnsafe();",
      "info" : "ExpressionStatement[7880-7910]:ExpressionStatement[7880-7910]"
    }, {
      "left" : "RowUpdateBuilder.deleteRow(cfs.metadata, 10, \"key1\", \"c\").applyUnsafe();",
      "right" : "RowUpdateBuilder.deleteRowAt(cfs.metadata, 10L, localDeletionTime, \"key1\", \"c\").applyUnsafe();",
      "info" : "ExpressionStatement[7920-7992]:ExpressionStatement[7920-8014]"
    }, {
      "left" : "deleteRow",
      "right" : "deleteRowAt",
      "info" : "SimpleName[7937-7946]:SimpleName[7937-7948]"
    }, {
      "left" : "10",
      "right" : "10L",
      "info" : "NumberLiteral[7961-7963]:NumberLiteral[7963-7966]"
    }, {
      "left" : "ArrayBackedPartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key1\").build());",
      "right" : "ArrayBackedPartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, \"key1\").build());",
      "info" : "VariableDeclarationStatement[8001-8097]:VariableDeclarationStatement[8023-8119]"
    }, {
      "left" : "RowStats stats = partition.stats();",
      "right" : "RowStats stats = partition.stats();",
      "info" : "VariableDeclarationStatement[8106-8141]:VariableDeclarationStatement[8128-8163]"
    }, {
      "left" : "assertEquals(localDeletionTime, stats.minLocalDeletionTime);",
      "right" : "assertEquals(localDeletionTime, stats.minLocalDeletionTime);",
      "info" : "ExpressionStatement[8150-8210]:ExpressionStatement[8172-8232]"
    } ]
  },
  "interFileMappings" : { }
}