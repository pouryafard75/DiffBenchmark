{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[38621-39449]:MethodDeclaration[38631-39459]"
    }, {
      "left" : "private static String nullString = String.valueOf(0x0000);",
      "right" : "private static String nullString = String.valueOf(0x0000);",
      "info" : "FieldDeclaration[67033-67091]:FieldDeclaration[67043-67101]"
    }, {
      "left" : "abstract boolean process(Token t, TreeBuilder tb);",
      "right" : "abstract boolean process(Token t, TreeBuilder tb);",
      "info" : "MethodDeclaration[67097-67147]:MethodDeclaration[67107-67157]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67153-67615]:MethodDeclaration[67163-67625]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67621-67848]:MethodDeclaration[67631-67858]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67854-68083]:MethodDeclaration[67864-68093]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38621-38628]:PrimitiveType[38631-38638]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38629-38643]:SimpleName[38639-38653]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38644-38651]:SingleVariableDeclaration[38654-38661]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[38653-38667]:SingleVariableDeclaration[38663-38677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38669-39449]:Block[38679-39459]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38683-38717]:VariableDeclarationStatement[38693-38727]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38730-38783]:VariableDeclarationStatement[38740-38793]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38796-38846]:VariableDeclarationStatement[38806-38856]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38859-39414]:WhileStatement[38869-39424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38880-39414]:Block[38890-39424]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[38898-38923]:VariableDeclarationStatement[38908-38933]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38940-39400]:IfStatement[38950-39410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38974-39229]:Block[38984-39239]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38996-39028]:ExpressionStatement[39006-39038]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[39049-39138]:IfStatement[39059-39148]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39123-39138]:ExpressionStatement[39133-39148]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39159-39184]:ExpressionStatement[39169-39194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39205-39211]:BreakStatement[39215-39221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39235-39400]:Block[39245-39410]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39257-39382]:IfStatement[39267-39392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39281-39382]:Block[39291-39392]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39307-39322]:ExpressionStatement[39317-39332]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39347-39360]:ReturnStatement[39357-39370]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39427-39439]:ReturnStatement[39437-39449]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67097-67105]:Modifier[67107-67115]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67106-67113]:PrimitiveType[67116-67123]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67114-67121]:SimpleName[67124-67131]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67122-67129]:SingleVariableDeclaration[67132-67139]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67131-67145]:SingleVariableDeclaration[67141-67155]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67153-67160]:Modifier[67163-67170]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67161-67167]:Modifier[67171-67177]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67168-67175]:PrimitiveType[67178-67185]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67176-67188]:SimpleName[67186-67198]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67189-67196]:SingleVariableDeclaration[67199-67206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67198-67615]:Block[67208-67625]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67208-67587]:IfStatement[67218-67597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67229-67587]:Block[67239-67597]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67243-67283]:VariableDeclarationStatement[67253-67293]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67374-67552]:ForStatement[67384-67562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67414-67552]:Block[67424-67562]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67432-67456]:VariableDeclarationStatement[67442-67466]"
    }, {
      "left" : "if (!Character.isWhitespace(c))",
      "right" : "if (!Character.isWhitespace(c))",
      "info" : "IfStatement[67473-67538]:IfStatement[67483-67548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67525-67538]:ReturnStatement[67535-67548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67565-67577]:ReturnStatement[67575-67587]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67596-67609]:ReturnStatement[67606-67619]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67621-67628]:Modifier[67631-67638]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67629-67635]:Modifier[67639-67645]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67636-67640]:PrimitiveType[67646-67650]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[67641-67653]:SimpleName[67651-67663]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67654-67677]:SingleVariableDeclaration[67664-67687]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67679-67693]:SingleVariableDeclaration[67689-67703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67695-67848]:Block[67705-67858]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67705-67725]:ExpressionStatement[67715-67735]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67734-67781]:ExpressionStatement[67744-67791]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67790-67813]:ExpressionStatement[67800-67823]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67822-67842]:ExpressionStatement[67832-67852]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67854-67861]:Modifier[67864-67871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67862-67868]:Modifier[67872-67878]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67869-67873]:PrimitiveType[67879-67883]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[67874-67887]:SimpleName[67884-67897]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67888-67911]:SingleVariableDeclaration[67898-67921]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67913-67927]:SingleVariableDeclaration[67923-67937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67929-68083]:Block[67939-68093]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67939-67959]:ExpressionStatement[67949-67969]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[67968-68016]:ExpressionStatement[67978-68026]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68025-68048]:ExpressionStatement[68035-68058]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68057-68077]:ExpressionStatement[68067-68087]"
    } ]
  },
  "interFileMappings" : { }
}