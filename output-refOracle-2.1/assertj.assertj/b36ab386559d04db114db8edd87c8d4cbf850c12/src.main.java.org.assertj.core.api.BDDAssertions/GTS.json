{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BDDAssertions",
      "right" : "BDDAssertions",
      "info" : "TypeDeclaration[1221-18522]:TypeDeclaration[1221-18609]"
    }, {
      "left" : "public static <T> OptionalAssert<T> then(Optional<T> optional)",
      "right" : "public static <T> OptionalAssert<T> then(Optional<T> optional)",
      "info" : "MethodDeclaration[2294-2633]:MethodDeclaration[2294-2636]"
    }, {
      "left" : "public static OptionalIntAssert then(OptionalInt optional)",
      "right" : "public static OptionalIntAssert then(OptionalInt optional)",
      "info" : "MethodDeclaration[2637-2897]:MethodDeclaration[2640-2898]"
    }, {
      "left" : "public static OptionalLongAssert then(OptionalLong optional)",
      "right" : "public static OptionalLongAssert then(OptionalLong optional)",
      "info" : "MethodDeclaration[2901-3166]:MethodDeclaration[2902-3163]"
    }, {
      "left" : "public static OptionalDoubleAssert then(OptionalDouble optional)",
      "right" : "public static OptionalDoubleAssert then(OptionalDouble optional)",
      "info" : "MethodDeclaration[3170-3439]:MethodDeclaration[3167-3434]"
    }, {
      "left" : "public static AbstractBigDecimalAssert<?> then(BigDecimal actual)",
      "right" : "public static AbstractBigDecimalAssert<?> then(BigDecimal actual)",
      "info" : "MethodDeclaration[3443-3730]:MethodDeclaration[3438-3728]"
    }, {
      "left" : "public static AbstractBooleanAssert<?> then(boolean actual)",
      "right" : "public static AbstractBooleanAssert<?> then(boolean actual)",
      "info" : "MethodDeclaration[3734-4012]:MethodDeclaration[3732-4013]"
    }, {
      "left" : "public static AbstractBooleanAssert<?> then(Boolean actual)",
      "right" : "public static AbstractBooleanAssert<?> then(Boolean actual)",
      "info" : "MethodDeclaration[4016-4294]:MethodDeclaration[4017-4298]"
    }, {
      "left" : "public static AbstractBooleanArrayAssert<?> then(boolean[] actual)",
      "right" : "public static AbstractBooleanArrayAssert<?> then(boolean[] actual)",
      "info" : "MethodDeclaration[4298-4588]:MethodDeclaration[4302-4595]"
    }, {
      "left" : "public static AbstractByteAssert<?> then(byte actual)",
      "right" : "public static AbstractByteAssert<?> then(byte actual)",
      "info" : "MethodDeclaration[4592-4861]:MethodDeclaration[4599-4871]"
    }, {
      "left" : "public static AbstractByteAssert<?> then(Byte actual)",
      "right" : "public static AbstractByteAssert<?> then(Byte actual)",
      "info" : "MethodDeclaration[4865-5134]:MethodDeclaration[4875-5147]"
    }, {
      "left" : "public static AbstractByteArrayAssert<?> then(byte[] actual)",
      "right" : "public static AbstractByteArrayAssert<?> then(byte[] actual)",
      "info" : "MethodDeclaration[5138-5419]:MethodDeclaration[5151-5435]"
    }, {
      "left" : "public static AbstractCharacterAssert<?> then(char actual)",
      "right" : "public static AbstractCharacterAssert<?> then(char actual)",
      "info" : "MethodDeclaration[5423-5702]:MethodDeclaration[5439-5721]"
    }, {
      "left" : "public static AbstractCharArrayAssert<?> then(char[] actual)",
      "right" : "public static AbstractCharArrayAssert<?> then(char[] actual)",
      "info" : "MethodDeclaration[5706-5987]:MethodDeclaration[5725-6009]"
    }, {
      "left" : "public static AbstractCharacterAssert<?> then(Character actual)",
      "right" : "public static AbstractCharacterAssert<?> then(Character actual)",
      "info" : "MethodDeclaration[5991-6275]:MethodDeclaration[6013-6300]"
    }, {
      "left" : "public static AbstractClassAssert<?> then(Class<?> actual)",
      "right" : "public static AbstractClassAssert<?> then(Class<?> actual)",
      "info" : "MethodDeclaration[6279-6553]:MethodDeclaration[6304-6581]"
    }, {
      "left" : "public static <T extends Comparable<? super T>> AbstractComparableAssert<?, T> then(T actual)",
      "right" : "public static <T extends Comparable<? super T>> AbstractComparableAssert<?, T> then(T actual)",
      "info" : "MethodDeclaration[6557-6922]:MethodDeclaration[6585-6950]"
    }, {
      "left" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> then(Iterable<? extends T> actual)",
      "right" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> then(Iterable<? extends T> actual)",
      "info" : "MethodDeclaration[6926-7273]:MethodDeclaration[6954-7301]"
    }, {
      "left" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> then(Iterator<? extends T> actual)",
      "right" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> then(Iterator<? extends T> actual)",
      "info" : "MethodDeclaration[7277-7740]:MethodDeclaration[7305-7768]"
    }, {
      "left" : "public static AbstractDoubleAssert<?> then(double actual)",
      "right" : "public static AbstractDoubleAssert<?> then(double actual)",
      "info" : "MethodDeclaration[7744-8019]:MethodDeclaration[7772-8050]"
    }, {
      "left" : "public static AbstractDoubleAssert<?> then(Double actual)",
      "right" : "public static AbstractDoubleAssert<?> then(Double actual)",
      "info" : "MethodDeclaration[8023-8298]:MethodDeclaration[8054-8332]"
    }, {
      "left" : "public static AbstractDoubleArrayAssert<?> then(double[] actual)",
      "right" : "public static AbstractDoubleArrayAssert<?> then(double[] actual)",
      "info" : "MethodDeclaration[8302-8589]:MethodDeclaration[8336-8626]"
    }, {
      "left" : "public static AbstractFileAssert<?> then(File actual)",
      "right" : "public static AbstractFileAssert<?> then(File actual)",
      "info" : "MethodDeclaration[8593-8862]:MethodDeclaration[8630-8902]"
    }, {
      "left" : "public static AbstractInputStreamAssert<?, ? extends InputStream> then(InputStream actual)",
      "right" : "public static AbstractInputStreamAssert<?, ? extends InputStream> then(InputStream actual)",
      "info" : "MethodDeclaration[8866-9179]:MethodDeclaration[8906-9222]"
    }, {
      "left" : "public static AbstractFloatAssert<?> then(float actual)",
      "right" : "public static AbstractFloatAssert<?> then(float actual)",
      "info" : "MethodDeclaration[9183-9455]:MethodDeclaration[9226-9501]"
    }, {
      "left" : "public static AbstractFloatAssert<?> then(Float actual)",
      "right" : "public static AbstractFloatAssert<?> then(Float actual)",
      "info" : "MethodDeclaration[9459-9731]:MethodDeclaration[9505-9780]"
    }, {
      "left" : "public static AbstractFloatArrayAssert<?> then(float[] actual)",
      "right" : "public static AbstractFloatArrayAssert<?> then(float[] actual)",
      "info" : "MethodDeclaration[9735-10019]:MethodDeclaration[9784-10071]"
    }, {
      "left" : "public static AbstractIntegerAssert<?> then(int actual)",
      "right" : "public static AbstractIntegerAssert<?> then(int actual)",
      "info" : "MethodDeclaration[10023-10297]:MethodDeclaration[10075-10352]"
    }, {
      "left" : "public static AbstractIntArrayAssert<?> then(int[] actual)",
      "right" : "public static AbstractIntArrayAssert<?> then(int[] actual)",
      "info" : "MethodDeclaration[10301-10579]:MethodDeclaration[10356-10637]"
    }, {
      "left" : "public static AbstractIntegerAssert<?> then(Integer actual)",
      "right" : "public static AbstractIntegerAssert<?> then(Integer actual)",
      "info" : "MethodDeclaration[10583-10861]:MethodDeclaration[10641-10922]"
    }, {
      "left" : "public static <T> AbstractListAssert<?, ? extends List<? extends T>, T> then(List<? extends T> actual)",
      "right" : "public static <T> AbstractListAssert<?, ? extends List<? extends T>, T> then(List<? extends T> actual)",
      "info" : "MethodDeclaration[10865-11192]:MethodDeclaration[10926-11253]"
    }, {
      "left" : "public static AbstractLongAssert<?> then(long actual)",
      "right" : "public static AbstractLongAssert<?> then(long actual)",
      "info" : "MethodDeclaration[11196-11465]:MethodDeclaration[11257-11529]"
    }, {
      "left" : "public static AbstractLongAssert<?> then(Long actual)",
      "right" : "public static AbstractLongAssert<?> then(Long actual)",
      "info" : "MethodDeclaration[11469-11738]:MethodDeclaration[11533-11805]"
    }, {
      "left" : "public static AbstractLongArrayAssert<?> then(long[] actual)",
      "right" : "public static AbstractLongArrayAssert<?> then(long[] actual)",
      "info" : "MethodDeclaration[11742-12023]:MethodDeclaration[11809-12093]"
    }, {
      "left" : "public static <T> AbstractObjectAssert<?, T> then(T actual)",
      "right" : "public static <T> AbstractObjectAssert<?, T> then(T actual)",
      "info" : "MethodDeclaration[12027-12304]:MethodDeclaration[12097-12377]"
    }, {
      "left" : "public static <T> AbstractObjectArrayAssert<?, T> then(T[] actual)",
      "right" : "public static <T> AbstractObjectArrayAssert<?, T> then(T[] actual)",
      "info" : "MethodDeclaration[12308-12597]:MethodDeclaration[12381-12673]"
    }, {
      "left" : "public static <K, V> AbstractMapAssert<?, ? extends Map<K, V>, K, V> then(Map<K, V> actual)",
      "right" : "public static <K, V> AbstractMapAssert<?, ? extends Map<K, V>, K, V> then(Map<K, V> actual)",
      "info" : "MethodDeclaration[12601-12907]:MethodDeclaration[12677-12986]"
    }, {
      "left" : "public static AbstractShortAssert<?> then(short actual)",
      "right" : "public static AbstractShortAssert<?> then(short actual)",
      "info" : "MethodDeclaration[12911-13183]:MethodDeclaration[12990-13265]"
    }, {
      "left" : "public static AbstractShortAssert<?> then(Short actual)",
      "right" : "public static AbstractShortAssert<?> then(Short actual)",
      "info" : "MethodDeclaration[13187-13459]:MethodDeclaration[13269-13544]"
    }, {
      "left" : "public static AbstractShortArrayAssert<?> then(short[] actual)",
      "right" : "public static AbstractShortArrayAssert<?> then(short[] actual)",
      "info" : "MethodDeclaration[13463-13747]:MethodDeclaration[13548-13835]"
    }, {
      "left" : "public static AbstractCharSequenceAssert<?, ? extends CharSequence> then(CharSequence actual)",
      "right" : "public static AbstractCharSequenceAssert<?, ? extends CharSequence> then(CharSequence actual)",
      "info" : "MethodDeclaration[13751-14068]:MethodDeclaration[13839-14159]"
    }, {
      "left" : "public static AbstractCharSequenceAssert<?, String> then(String actual)",
      "right" : "public static AbstractCharSequenceAssert<?, String> then(String actual)",
      "info" : "MethodDeclaration[14072-14361]:MethodDeclaration[14163-14455]"
    }, {
      "left" : "public static AbstractDateAssert<?> then(Date actual)",
      "right" : "public static AbstractDateAssert<?> then(Date actual)",
      "info" : "MethodDeclaration[14365-14634]:MethodDeclaration[14459-14731]"
    }, {
      "left" : "public static AbstractThrowableAssert<?, ? extends Throwable> then(Throwable actual)",
      "right" : "public static AbstractThrowableAssert<?, ? extends Throwable> then(Throwable actual)",
      "info" : "MethodDeclaration[14638-14946]:MethodDeclaration[14735-15046]"
    }, {
      "left" : "public static AbstractThrowableAssert<?, ? extends Throwable> thenThrownBy(ThrowingCallable shouldRaiseThrowable)",
      "right" : "public static AbstractThrowableAssert<?, ? extends Throwable> thenThrownBy(ThrowingCallable shouldRaiseThrowable)",
      "info" : "MethodDeclaration[14952-16163]:MethodDeclaration[15050-16261]"
    }, {
      "left" : "public static AbstractLocalDateAssert<?> then(LocalDate actual)",
      "right" : "public static AbstractLocalDateAssert<?> then(LocalDate actual)",
      "info" : "MethodDeclaration[16167-16451]:MethodDeclaration[16265-16552]"
    }, {
      "left" : "public static AbstractLocalDateTimeAssert<?> then(LocalDateTime actual)",
      "right" : "public static AbstractLocalDateTimeAssert<?> then(LocalDateTime actual)",
      "info" : "MethodDeclaration[16455-16751]:MethodDeclaration[16556-16855]"
    }, {
      "left" : "public static AbstractZonedDateTimeAssert<?> then(ZonedDateTime actual)",
      "right" : "public static AbstractZonedDateTimeAssert<?> then(ZonedDateTime actual)",
      "info" : "MethodDeclaration[16755-17051]:MethodDeclaration[16859-17158]"
    }, {
      "left" : "public static AbstractLocalTimeAssert<?> then(LocalTime actual)",
      "right" : "public static AbstractLocalTimeAssert<?> then(LocalTime actual)",
      "info" : "MethodDeclaration[17055-17318]:MethodDeclaration[17162-17428]"
    }, {
      "left" : "public static AbstractOffsetTimeAssert<?> then(OffsetTime actual)",
      "right" : "public static AbstractOffsetTimeAssert<?> then(OffsetTime actual)",
      "info" : "MethodDeclaration[17322-17597]:MethodDeclaration[17432-17701]"
    }, {
      "left" : "public static AbstractUriAssert<?> then(URI actual)",
      "right" : "public static AbstractUriAssert<?> then(URI actual)",
      "info" : "MethodDeclaration[17607-17855]:MethodDeclaration[17705-17953]"
    }, {
      "left" : "public static AbstractUrlAssert<?> then(URL actual)",
      "right" : "public static AbstractUrlAssert<?> then(URL actual)",
      "info" : "MethodDeclaration[17859-18107]:MethodDeclaration[17957-18205]"
    }, {
      "left" : "public static AbstractOffsetDateTimeAssert<?> then(OffsetDateTime actual)",
      "right" : "public static AbstractOffsetDateTimeAssert<?> then(OffsetDateTime actual)",
      "info" : "MethodDeclaration[18111-18394]:MethodDeclaration[18209-18486]"
    }, {
      "left" : "protected BDDAssertions()",
      "right" : "protected BDDAssertions()",
      "info" : "MethodDeclaration[18400-18520]:MethodDeclaration[18490-18607]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2598-2633]:Block[2598-2636]"
    }, {
      "left" : "return assertThat(optional);",
      "right" : "return assertThat(optional);",
      "info" : "ReturnStatement[2601-2629]:ReturnStatement[2604-2632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2857-2897]:Block[2860-2898]"
    }, {
      "left" : "return assertThat(optional);",
      "right" : "return assertThat(optional);",
      "info" : "ReturnStatement[2865-2893]:ReturnStatement[2866-2894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3125-3166]:Block[3125-3163]"
    }, {
      "left" : "return assertThat(optional);",
      "right" : "return assertThat(optional);",
      "info" : "ReturnStatement[3133-3161]:ReturnStatement[3131-3159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3399-3439]:Block[3396-3434]"
    }, {
      "left" : "return assertThat(optional);",
      "right" : "return assertThat(optional);",
      "info" : "ReturnStatement[3407-3435]:ReturnStatement[3402-3430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3697-3730]:Block[3692-3728]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[3700-3726]:ReturnStatement[3698-3724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3979-4012]:Block[3977-4013]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[3982-4008]:ReturnStatement[3983-4009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4261-4294]:Block[4262-4298]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[4264-4290]:ReturnStatement[4268-4294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4555-4588]:Block[4559-4595]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[4558-4584]:ReturnStatement[4565-4591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4828-4861]:Block[4835-4871]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[4831-4857]:ReturnStatement[4841-4867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5101-5134]:Block[5111-5147]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[5104-5130]:ReturnStatement[5117-5143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5386-5419]:Block[5399-5435]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[5389-5415]:ReturnStatement[5405-5431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5669-5702]:Block[5685-5721]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[5672-5698]:ReturnStatement[5691-5717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5954-5987]:Block[5973-6009]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[5957-5983]:ReturnStatement[5979-6005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6242-6275]:Block[6264-6300]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[6245-6271]:ReturnStatement[6270-6296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6520-6553]:Block[6545-6581]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[6523-6549]:ReturnStatement[6551-6577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6886-6922]:Block[6914-6950]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[6892-6918]:ReturnStatement[6920-6946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7227-7273]:Block[7255-7301]"
    }, {
      "left" : "return new IterableAssert<>(actual);",
      "right" : "return new IterableAssert<>(actual);",
      "info" : "ReturnStatement[7233-7269]:ReturnStatement[7261-7297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7694-7740]:Block[7722-7768]"
    }, {
      "left" : "return new IterableAssert<>(actual);",
      "right" : "return new IterableAssert<>(actual);",
      "info" : "ReturnStatement[7700-7736]:ReturnStatement[7728-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7986-8019]:Block[8014-8050]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[7989-8015]:ReturnStatement[8020-8046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8265-8298]:Block[8296-8332]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[8268-8294]:ReturnStatement[8302-8328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8556-8589]:Block[8590-8626]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[8559-8585]:ReturnStatement[8596-8622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8829-8862]:Block[8866-8902]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[8832-8858]:ReturnStatement[8872-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9146-9179]:Block[9186-9222]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[9149-9175]:ReturnStatement[9192-9218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9422-9455]:Block[9465-9501]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[9425-9451]:ReturnStatement[9471-9497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9698-9731]:Block[9744-9780]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[9701-9727]:ReturnStatement[9750-9776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9986-10019]:Block[10035-10071]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[9989-10015]:ReturnStatement[10041-10067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10264-10297]:Block[10316-10352]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[10267-10293]:ReturnStatement[10322-10348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10546-10579]:Block[10601-10637]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[10549-10575]:ReturnStatement[10607-10633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10828-10861]:Block[10886-10922]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[10831-10857]:ReturnStatement[10892-10918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11150-11192]:Block[11211-11253]"
    }, {
      "left" : "return new ListAssert<>(actual);",
      "right" : "return new ListAssert<>(actual);",
      "info" : "ReturnStatement[11156-11188]:ReturnStatement[11217-11249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11432-11465]:Block[11493-11529]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[11435-11461]:ReturnStatement[11499-11525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11705-11738]:Block[11769-11805]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[11708-11734]:ReturnStatement[11775-11801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11990-12023]:Block[12057-12093]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[11993-12019]:ReturnStatement[12063-12089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12271-12304]:Block[12341-12377]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[12274-12300]:ReturnStatement[12347-12373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12564-12597]:Block[12637-12673]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[12567-12593]:ReturnStatement[12643-12669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12874-12907]:Block[12950-12986]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[12877-12903]:ReturnStatement[12956-12982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13150-13183]:Block[13229-13265]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[13153-13179]:ReturnStatement[13235-13261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13426-13459]:Block[13508-13544]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[13429-13455]:ReturnStatement[13514-13540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13714-13747]:Block[13799-13835]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[13717-13743]:ReturnStatement[13805-13831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14035-14068]:Block[14123-14159]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[14038-14064]:ReturnStatement[14129-14155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14328-14361]:Block[14419-14455]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[14331-14357]:ReturnStatement[14425-14451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14601-14634]:Block[14695-14731]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[14604-14630]:ReturnStatement[14701-14727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14913-14946]:Block[15010-15046]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[14916-14942]:ReturnStatement[15016-15042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16105-16163]:Block[16203-16261]"
    }, {
      "left" : "return assertThatThrownBy(shouldRaiseThrowable);",
      "right" : "return assertThatThrownBy(shouldRaiseThrowable);",
      "info" : "ReturnStatement[16111-16159]:ReturnStatement[16209-16257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16418-16451]:Block[16516-16552]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[16421-16447]:ReturnStatement[16522-16548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16718-16751]:Block[16819-16855]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[16721-16747]:ReturnStatement[16825-16851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17018-17051]:Block[17122-17158]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[17021-17047]:ReturnStatement[17128-17154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17285-17318]:Block[17392-17428]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[17288-17314]:ReturnStatement[17398-17424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17555-17597]:Block[17665-17701]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[17565-17591]:ReturnStatement[17671-17697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17819-17855]:Block[17917-17953]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[17825-17851]:ReturnStatement[17923-17949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18071-18107]:Block[18169-18205]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[18077-18103]:ReturnStatement[18175-18201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18352-18394]:Block[18450-18486]"
    }, {
      "left" : "return assertThat(actual);",
      "right" : "return assertThat(actual);",
      "info" : "ReturnStatement[18362-18388]:ReturnStatement[18456-18482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18515-18520]:Block[18605-18607]"
    } ]
  },
  "interFileMappings" : { }
}