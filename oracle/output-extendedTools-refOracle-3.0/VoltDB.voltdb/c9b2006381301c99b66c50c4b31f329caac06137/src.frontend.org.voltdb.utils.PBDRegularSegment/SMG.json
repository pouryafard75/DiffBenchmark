{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PBDRegularSegment",
      "right" : "PBDRegularSegment",
      "info" : "TypeDeclaration[1070-12278]:TypeDeclaration[1070-12604]"
    }, {
      "left" : "private static final VoltLogger LOG = new VoltLogger(\"HOST\");",
      "right" : "private static final VoltLogger LOG = new VoltLogger(\"HOST\");",
      "info" : "FieldDeclaration[1465-1526]:FieldDeclaration[1465-1526]"
    }, {
      "left" : "private boolean m_syncedSinceLastEdit = true;",
      "right" : "private boolean m_syncedSinceLastEdit = true;",
      "info" : "FieldDeclaration[1575-1620]:FieldDeclaration[1575-1620]"
    }, {
      "left" : "private final File m_file;",
      "right" : "private final File m_file;",
      "info" : "FieldDeclaration[1625-1651]:FieldDeclaration[1625-1651]"
    }, {
      "left" : "private RandomAccessFile m_ras;",
      "right" : "private RandomAccessFile m_ras;",
      "info" : "FieldDeclaration[1656-1687]:FieldDeclaration[1656-1687]"
    }, {
      "left" : "private FileChannel m_fc;",
      "right" : "private FileChannel m_fc;",
      "info" : "FieldDeclaration[1692-1717]:FieldDeclaration[1692-1717]"
    }, {
      "left" : "private boolean m_closed = true;",
      "right" : "private boolean m_closed = true;",
      "info" : "FieldDeclaration[1722-1754]:FieldDeclaration[1722-1754]"
    }, {
      "left" : "private int m_objectReadIndex = 0;",
      "right" : "private int m_objectReadIndex = 0;",
      "info" : "FieldDeclaration[1828-1862]:FieldDeclaration[1828-1862]"
    }, {
      "left" : "private int m_bytesRead = 0;",
      "right" : "private int m_bytesRead = 0;",
      "info" : "FieldDeclaration[1867-1895]:FieldDeclaration[1867-1895]"
    }, {
      "left" : "private long m_readOffset = SEGMENT_HEADER_BYTES;",
      "right" : "private long m_readOffset = SEGMENT_HEADER_BYTES;",
      "info" : "FieldDeclaration[1938-1987]:FieldDeclaration[1938-1987]"
    }, {
      "left" : "private final Long m_index;",
      "right" : "private final Long m_index;",
      "info" : "FieldDeclaration[2018-2045]:FieldDeclaration[2018-2045]"
    }, {
      "left" : "private int m_discardCount;",
      "right" : "private int m_discardCount;",
      "info" : "FieldDeclaration[2051-2078]:FieldDeclaration[2051-2078]"
    }, {
      "left" : "private int m_numOfEntries = -1;",
      "right" : "private int m_numOfEntries = -1;",
      "info" : "FieldDeclaration[2083-2115]:FieldDeclaration[2083-2115]"
    }, {
      "left" : "private int m_size = -1;",
      "right" : "private int m_size = -1;",
      "info" : "FieldDeclaration[2120-2144]:FieldDeclaration[2120-2144]"
    }, {
      "left" : "private DBBPool.BBContainer m_tmpHeaderBuf = null;",
      "right" : "private DBBPool.BBContainer m_tmpHeaderBuf = null;",
      "info" : "FieldDeclaration[2150-2200]:FieldDeclaration[2150-2200]"
    }, {
      "left" : "public PBDRegularSegment(Long index, File file)",
      "right" : "public PBDRegularSegment(Long index, File file)",
      "info" : "MethodDeclaration[2206-2326]:MethodDeclaration[2206-2326]"
    }, {
      "left" : "public long segmentId()",
      "right" : "public long segmentId()",
      "info" : "MethodDeclaration[2332-2405]:MethodDeclaration[2332-2405]"
    }, {
      "left" : "public File file()",
      "right" : "public File file()",
      "info" : "MethodDeclaration[2411-2478]:MethodDeclaration[2411-2478]"
    }, {
      "left" : "public void reset()",
      "right" : "public void reset()",
      "info" : "MethodDeclaration[2484-2818]:MethodDeclaration[2484-2818]"
    }, {
      "left" : "public int getNumEntries() throws IOException",
      "right" : "public int getNumEntries() throws IOException",
      "info" : "MethodDeclaration[2824-3351]:MethodDeclaration[2824-3351]"
    }, {
      "left" : "public boolean isBeingPolled()",
      "right" : "public boolean isBeingPolled()",
      "info" : "MethodDeclaration[3357-3452]:MethodDeclaration[3357-3452]"
    }, {
      "left" : "public int readIndex()",
      "right" : "public int readIndex()",
      "info" : "MethodDeclaration[3458-3540]:MethodDeclaration[3458-3540]"
    }, {
      "left" : "public void open(boolean forWrite) throws IOException",
      "right" : "private void open(boolean forWrite, boolean truncate) throws IOException",
      "info" : "MethodDeclaration[3546-4274]:MethodDeclaration[3665-4574]"
    }, {
      "left" : "private void initNumEntries() throws IOException",
      "right" : "private void initNumEntries(int count, int size) throws IOException",
      "info" : "MethodDeclaration[4280-4661]:MethodDeclaration[4580-4987]"
    }, {
      "left" : "private void incrementNumEntries(int size) throws IOException",
      "right" : "private void incrementNumEntries(int size) throws IOException",
      "info" : "MethodDeclaration[4667-5067]:MethodDeclaration[4993-5393]"
    }, {
      "left" : "private int remaining() throws IOException",
      "right" : "private int remaining() throws IOException",
      "info" : "MethodDeclaration[5073-5351]:MethodDeclaration[5399-5677]"
    }, {
      "left" : "public void closeAndDelete() throws IOException",
      "right" : "public void closeAndDelete() throws IOException",
      "info" : "MethodDeclaration[5357-5519]:MethodDeclaration[5683-5845]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[5525-5601]:MethodDeclaration[5851-5927]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[5607-5888]:MethodDeclaration[5933-6214]"
    }, {
      "left" : "public void sync() throws IOException",
      "right" : "public void sync() throws IOException",
      "info" : "MethodDeclaration[5894-6132]:MethodDeclaration[6220-6458]"
    }, {
      "left" : "public boolean hasMoreEntries() throws IOException",
      "right" : "public boolean hasMoreEntries() throws IOException",
      "info" : "MethodDeclaration[6138-6328]:MethodDeclaration[6464-6654]"
    }, {
      "left" : "public boolean isEmpty() throws IOException",
      "right" : "public boolean isEmpty() throws IOException",
      "info" : "MethodDeclaration[6334-6515]:MethodDeclaration[6660-6841]"
    }, {
      "left" : "public boolean offer(DBBPool.BBContainer cont, boolean compress) throws IOException",
      "right" : "public boolean offer(DBBPool.BBContainer cont, boolean compress) throws IOException",
      "info" : "MethodDeclaration[6521-8191]:MethodDeclaration[6847-8517]"
    }, {
      "left" : "public int offer(DeferredSerialization ds) throws IOException",
      "right" : "public int offer(DeferredSerialization ds) throws IOException",
      "info" : "MethodDeclaration[8197-8950]:MethodDeclaration[8523-9276]"
    }, {
      "left" : "public DBBPool.BBContainer poll(BinaryDeque.OutputContainerFactory factory) throws IOException",
      "right" : "public DBBPool.BBContainer poll(BinaryDeque.OutputContainerFactory factory) throws IOException",
      "info" : "MethodDeclaration[8956-12107]:MethodDeclaration[9282-12433]"
    }, {
      "left" : "private boolean m_discarded = false;",
      "right" : "private boolean m_discarded = false;",
      "info" : "FieldDeclaration[11527-11563]:FieldDeclaration[11853-11889]"
    }, {
      "left" : "public void discard()",
      "right" : "public void discard()",
      "info" : "MethodDeclaration[11581-11975]:MethodDeclaration[11907-12301]"
    }, {
      "left" : "public int uncompressedBytesToRead()",
      "right" : "public int uncompressedBytesToRead()",
      "info" : "MethodDeclaration[12113-12276]:MethodDeclaration[12439-12602]"
    } ],
    "mappings" : [
 {
      "left" : "PBDSegment",
      "right" : "PBDSegment",
      "info" : "SimpleType[1448-1458]:SimpleType[1448-1458]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2206-2212]:Modifier[2206-2212]"
    }, {
      "left" : "PBDRegularSegment",
      "right" : "PBDRegularSegment",
      "info" : "SimpleName[2213-2230]:SimpleName[2213-2230]"
    }, {
      "left" : "Long index",
      "right" : "Long index",
      "info" : "SingleVariableDeclaration[2231-2241]:SingleVariableDeclaration[2231-2241]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[2243-2252]:SingleVariableDeclaration[2243-2252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2254-2326]:Block[2254-2326]"
    }, {
      "left" : "m_index = index;",
      "right" : "m_index = index;",
      "info" : "ExpressionStatement[2264-2280]:ExpressionStatement[2264-2280]"
    }, {
      "left" : "m_file = file;",
      "right" : "m_file = file;",
      "info" : "ExpressionStatement[2289-2303]:ExpressionStatement[2289-2303]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[2312-2320]:ExpressionStatement[2312-2320]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2332-2341]:MarkerAnnotation[2332-2341]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2346-2352]:Modifier[2346-2352]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[2353-2357]:PrimitiveType[2353-2357]"
    }, {
      "left" : "segmentId",
      "right" : "segmentId",
      "info" : "SimpleName[2358-2367]:SimpleName[2358-2367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2374-2405]:Block[2374-2405]"
    }, {
      "left" : "return m_index;",
      "right" : "return m_index;",
      "info" : "ReturnStatement[2384-2399]:ReturnStatement[2384-2399]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2411-2420]:MarkerAnnotation[2411-2420]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2425-2431]:Modifier[2425-2431]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[2432-2436]:SimpleType[2432-2436]"
    }, {
      "left" : "file",
      "right" : "file",
      "info" : "SimpleName[2437-2441]:SimpleName[2437-2441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2448-2478]:Block[2448-2478]"
    }, {
      "left" : "return m_file;",
      "right" : "return m_file;",
      "info" : "ReturnStatement[2458-2472]:ReturnStatement[2458-2472]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2484-2493]:MarkerAnnotation[2484-2493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2498-2504]:Modifier[2498-2504]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2505-2509]:PrimitiveType[2505-2509]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[2510-2515]:SimpleName[2510-2515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2522-2818]:Block[2522-2818]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[2532-2562]:ExpressionStatement[2532-2562]"
    }, {
      "left" : "m_objectReadIndex = 0;",
      "right" : "m_objectReadIndex = 0;",
      "info" : "ExpressionStatement[2571-2593]:ExpressionStatement[2571-2593]"
    }, {
      "left" : "m_bytesRead = 0;",
      "right" : "m_bytesRead = 0;",
      "info" : "ExpressionStatement[2602-2618]:ExpressionStatement[2602-2618]"
    }, {
      "left" : "m_readOffset = SEGMENT_HEADER_BYTES;",
      "right" : "m_readOffset = SEGMENT_HEADER_BYTES;",
      "info" : "ExpressionStatement[2627-2663]:ExpressionStatement[2627-2663]"
    }, {
      "left" : "m_discardCount = 0;",
      "right" : "m_discardCount = 0;",
      "info" : "ExpressionStatement[2672-2691]:ExpressionStatement[2672-2691]"
    }, {
      "left" : "if (m_tmpHeaderBuf != null)",
      "right" : "if (m_tmpHeaderBuf != null)",
      "info" : "IfStatement[2700-2812]:IfStatement[2700-2812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2728-2812]:Block[2728-2812]"
    }, {
      "left" : "m_tmpHeaderBuf.discard();",
      "right" : "m_tmpHeaderBuf.discard();",
      "info" : "ExpressionStatement[2742-2767]:ExpressionStatement[2742-2767]"
    }, {
      "left" : "m_tmpHeaderBuf = null;",
      "right" : "m_tmpHeaderBuf = null;",
      "info" : "ExpressionStatement[2780-2802]:ExpressionStatement[2780-2802]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2824-2833]:MarkerAnnotation[2824-2833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2838-2844]:Modifier[2838-2844]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2845-2848]:PrimitiveType[2845-2848]"
    }, {
      "left" : "getNumEntries",
      "right" : "getNumEntries",
      "info" : "SimpleName[2849-2862]:SimpleName[2849-2862]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2872-2883]:SimpleType[2872-2883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2888-3351]:Block[2888-3351]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[2898-2948]:IfStatement[2898-2948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2912-2948]:Block[2912-2948]"
    }, {
      "left" : "open(false);",
      "right" : "open(false);",
      "info" : "ExpressionStatement[2926-2938]:ExpressionStatement[2926-2938]"
    }, {
      "left" : "if (m_fc.size() > 0)",
      "right" : "if (m_fc.size() > 0)",
      "info" : "IfStatement[2957-3345]:IfStatement[2957-3345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2978-3250]:Block[2978-3250]"
    }, {
      "left" : "m_tmpHeaderBuf.b().clear();",
      "right" : "m_tmpHeaderBuf.b().clear();",
      "info" : "ExpressionStatement[2992-3019]:ExpressionStatement[2992-3019]"
    }, {
      "left" : "PBDUtils.readBufferFully(m_fc, m_tmpHeaderBuf.b(), COUNT_OFFSET);",
      "right" : "PBDUtils.readBufferFully(m_fc, m_tmpHeaderBuf.b(), COUNT_OFFSET);",
      "info" : "ExpressionStatement[3032-3097]:ExpressionStatement[3032-3097]"
    }, {
      "left" : "m_numOfEntries = m_tmpHeaderBuf.b().getInt();",
      "right" : "m_numOfEntries = m_tmpHeaderBuf.b().getInt();",
      "info" : "ExpressionStatement[3110-3155]:ExpressionStatement[3110-3155]"
    }, {
      "left" : "m_size = m_tmpHeaderBuf.b().getInt();",
      "right" : "m_size = m_tmpHeaderBuf.b().getInt();",
      "info" : "ExpressionStatement[3168-3205]:ExpressionStatement[3168-3205]"
    }, {
      "left" : "return m_numOfEntries;",
      "right" : "return m_numOfEntries;",
      "info" : "ReturnStatement[3218-3240]:ReturnStatement[3218-3240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3256-3345]:Block[3256-3345]"
    }, {
      "left" : "m_numOfEntries = 0;",
      "right" : "m_numOfEntries = 0;",
      "info" : "ExpressionStatement[3270-3289]:ExpressionStatement[3270-3289]"
    }, {
      "left" : "m_size = 0;",
      "right" : "m_size = 0;",
      "info" : "ExpressionStatement[3302-3313]:ExpressionStatement[3302-3313]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[3326-3335]:ReturnStatement[3326-3335]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3357-3366]:MarkerAnnotation[3357-3366]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3371-3377]:Modifier[3371-3377]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3378-3385]:PrimitiveType[3378-3385]"
    }, {
      "left" : "isBeingPolled",
      "right" : "isBeingPolled",
      "info" : "SimpleName[3386-3399]:SimpleName[3386-3399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3406-3452]:Block[3406-3452]"
    }, {
      "left" : "return m_objectReadIndex != 0;",
      "right" : "return m_objectReadIndex != 0;",
      "info" : "ReturnStatement[3416-3446]:ReturnStatement[3416-3446]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3458-3467]:MarkerAnnotation[3458-3467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3472-3478]:Modifier[3472-3478]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3479-3482]:PrimitiveType[3479-3482]"
    }, {
      "left" : "readIndex",
      "right" : "readIndex",
      "info" : "SimpleName[3483-3492]:SimpleName[3483-3492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3499-3540]:Block[3499-3540]"
    }, {
      "left" : "return m_objectReadIndex;",
      "right" : "return m_objectReadIndex;",
      "info" : "ReturnStatement[3509-3534]:ReturnStatement[3509-3534]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3546-3555]:MarkerAnnotation[3546-3555]"
    }, {
      "left" : "public",
      "right" : "private",
      "info" : "Modifier[3560-3566]:Modifier[3837-3844]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3567-3571]:PrimitiveType[3845-3849]"
    }, {
      "left" : "open",
      "right" : "open",
      "info" : "SimpleName[3572-3576]:SimpleName[3850-3854]"
    }, {
      "left" : "boolean forWrite",
      "right" : "boolean forWrite",
      "info" : "SingleVariableDeclaration[3577-3593]:SingleVariableDeclaration[3855-3871]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3602-3613]:SimpleType[3898-3909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3618-4274]:Block[3914-4574]"
    }, {
      "left" : "if (!m_closed)",
      "right" : "if (!m_closed)",
      "info" : "IfStatement[3628-3718]:IfStatement[3924-4014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3643-3718]:Block[3939-4014]"
    }, {
      "left" : "throw new IOException(\"Segment is already opened\");",
      "right" : "throw new IOException(\"Segment is already opened\");",
      "info" : "ThrowStatement[3657-3708]:ThrowStatement[3953-4004]"
    }, {
      "left" : "if (!m_file.exists())",
      "right" : "if (!m_file.exists())",
      "info" : "IfStatement[3728-3924]:IfStatement[4024-4220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3750-3924]:Block[4046-4220]"
    }, {
      "left" : "if (!forWrite)",
      "right" : "if (!forWrite)",
      "info" : "IfStatement[3764-3871]:IfStatement[4060-4167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3779-3871]:Block[4075-4167]"
    }, {
      "left" : "throw new IOException(\"File \" + m_file + \" does not exist\");",
      "right" : "throw new IOException(\"File \" + m_file + \" does not exist\");",
      "info" : "ThrowStatement[3797-3857]:ThrowStatement[4093-4153]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[3884-3914]:ExpressionStatement[4180-4210]"
    }, {
      "left" : "assert(m_ras == null);",
      "right" : "assert(m_ras == null);",
      "info" : "AssertStatement[3933-3955]:AssertStatement[4229-4251]"
    }, {
      "left" : "m_ras = new RandomAccessFile( m_file, forWrite ? \"rw\" : \"r\");",
      "right" : "m_ras = new RandomAccessFile( m_file, forWrite ? \"rw\" : \"r\");",
      "info" : "ExpressionStatement[3964-4025]:ExpressionStatement[4260-4321]"
    }, {
      "left" : "m_fc = m_ras.getChannel();",
      "right" : "m_fc = m_ras.getChannel();",
      "info" : "ExpressionStatement[4034-4060]:ExpressionStatement[4330-4356]"
    }, {
      "left" : "m_tmpHeaderBuf = DBBPool.allocateDirect(SEGMENT_HEADER_BYTES);",
      "right" : "m_tmpHeaderBuf = DBBPool.allocateDirect(SEGMENT_HEADER_BYTES);",
      "info" : "ExpressionStatement[4069-4131]:ExpressionStatement[4365-4427]"
    }, {
      "left" : "if (forWrite)",
      "right" : "if (truncate)",
      "info" : "IfStatement[4141-4196]:IfStatement[4437-4496]"
    }, {
      "left" : "forWrite",
      "right" : "truncate",
      "info" : "SimpleName[4145-4153]:SimpleName[4441-4449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4155-4196]:Block[4451-4496]"
    }, {
      "left" : "initNumEntries();",
      "right" : "initNumEntries(0, 0);",
      "info" : "ExpressionStatement[4169-4186]:ExpressionStatement[4465-4486]"
    }, {
      "left" : "m_fc.position(SEGMENT_HEADER_BYTES);",
      "right" : "m_fc.position(SEGMENT_HEADER_BYTES);",
      "info" : "ExpressionStatement[4205-4241]:ExpressionStatement[4505-4541]"
    }, {
      "left" : "m_closed = false;",
      "right" : "m_closed = false;",
      "info" : "ExpressionStatement[4251-4268]:ExpressionStatement[4551-4568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4280-4287]:Modifier[4580-4587]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4288-4292]:PrimitiveType[4588-4592]"
    }, {
      "left" : "initNumEntries",
      "right" : "initNumEntries",
      "info" : "SimpleName[4293-4307]:SimpleName[4593-4607]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4317-4328]:SimpleType[4636-4647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4329-4661]:Block[4648-4987]"
    }, {
      "left" : "m_numOfEntries = 0;",
      "right" : "m_numOfEntries = count;",
      "info" : "ExpressionStatement[4339-4358]:ExpressionStatement[4658-4681]"
    }, {
      "left" : "m_size = 0;",
      "right" : "m_size = size;",
      "info" : "ExpressionStatement[4367-4378]:ExpressionStatement[4690-4704]"
    }, {
      "left" : "m_tmpHeaderBuf.b().clear();",
      "right" : "m_tmpHeaderBuf.b().clear();",
      "info" : "ExpressionStatement[4388-4415]:ExpressionStatement[4714-4741]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(m_numOfEntries);",
      "right" : "m_tmpHeaderBuf.b().putInt(m_numOfEntries);",
      "info" : "ExpressionStatement[4424-4466]:ExpressionStatement[4750-4792]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(m_size);",
      "right" : "m_tmpHeaderBuf.b().putInt(m_size);",
      "info" : "ExpressionStatement[4475-4509]:ExpressionStatement[4801-4835]"
    }, {
      "left" : "m_tmpHeaderBuf.b().flip();",
      "right" : "m_tmpHeaderBuf.b().flip();",
      "info" : "ExpressionStatement[4518-4544]:ExpressionStatement[4844-4870]"
    }, {
      "left" : "PBDUtils.writeBuffer(m_fc, m_tmpHeaderBuf.bDR(), COUNT_OFFSET);",
      "right" : "PBDUtils.writeBuffer(m_fc, m_tmpHeaderBuf.bDR(), COUNT_OFFSET);",
      "info" : "ExpressionStatement[4553-4616]:ExpressionStatement[4879-4942]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[4625-4655]:ExpressionStatement[4951-4981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4667-4674]:Modifier[4993-5000]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4675-4679]:PrimitiveType[5001-5005]"
    }, {
      "left" : "incrementNumEntries",
      "right" : "incrementNumEntries",
      "info" : "SimpleName[4680-4699]:SimpleName[5006-5025]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[4700-4708]:SingleVariableDeclaration[5026-5034]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4717-4728]:SimpleType[5043-5054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4733-5067]:Block[5059-5393]"
    }, {
      "left" : "m_numOfEntries++;",
      "right" : "m_numOfEntries++;",
      "info" : "ExpressionStatement[4743-4760]:ExpressionStatement[5069-5086]"
    }, {
      "left" : "m_size += size;",
      "right" : "m_size += size;",
      "info" : "ExpressionStatement[4769-4784]:ExpressionStatement[5095-5110]"
    }, {
      "left" : "m_tmpHeaderBuf.b().clear();",
      "right" : "m_tmpHeaderBuf.b().clear();",
      "info" : "ExpressionStatement[4794-4821]:ExpressionStatement[5120-5147]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(m_numOfEntries);",
      "right" : "m_tmpHeaderBuf.b().putInt(m_numOfEntries);",
      "info" : "ExpressionStatement[4830-4872]:ExpressionStatement[5156-5198]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(m_size);",
      "right" : "m_tmpHeaderBuf.b().putInt(m_size);",
      "info" : "ExpressionStatement[4881-4915]:ExpressionStatement[5207-5241]"
    }, {
      "left" : "m_tmpHeaderBuf.b().flip();",
      "right" : "m_tmpHeaderBuf.b().flip();",
      "info" : "ExpressionStatement[4924-4950]:ExpressionStatement[5250-5276]"
    }, {
      "left" : "PBDUtils.writeBuffer(m_fc, m_tmpHeaderBuf.bDR(), COUNT_OFFSET);",
      "right" : "PBDUtils.writeBuffer(m_fc, m_tmpHeaderBuf.bDR(), COUNT_OFFSET);",
      "info" : "ExpressionStatement[4959-5022]:ExpressionStatement[5285-5348]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[5031-5061]:ExpressionStatement[5357-5387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5163-5170]:Modifier[5489-5496]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5171-5174]:PrimitiveType[5497-5500]"
    }, {
      "left" : "remaining",
      "right" : "remaining",
      "info" : "SimpleName[5175-5184]:SimpleName[5501-5510]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5194-5205]:SimpleType[5520-5531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5206-5351]:Block[5532-5677]"
    }, {
      "left" : "return (int)(PBDSegment.CHUNK_SIZE - m_fc.position()) - SEGMENT_HEADER_BYTES;",
      "right" : "return (int)(PBDSegment.CHUNK_SIZE - m_fc.position()) - SEGMENT_HEADER_BYTES;",
      "info" : "ReturnStatement[5268-5345]:ReturnStatement[5594-5671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5357-5366]:MarkerAnnotation[5683-5692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5371-5377]:Modifier[5697-5703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5378-5382]:PrimitiveType[5704-5708]"
    }, {
      "left" : "closeAndDelete",
      "right" : "closeAndDelete",
      "info" : "SimpleName[5383-5397]:SimpleName[5709-5723]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5407-5418]:SimpleType[5733-5744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5419-5519]:Block[5745-5845]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[5429-5437]:ExpressionStatement[5755-5763]"
    }, {
      "left" : "m_file.delete();",
      "right" : "m_file.delete();",
      "info" : "ExpressionStatement[5446-5462]:ExpressionStatement[5772-5788]"
    }, {
      "left" : "m_numOfEntries = -1;",
      "right" : "m_numOfEntries = -1;",
      "info" : "ExpressionStatement[5472-5492]:ExpressionStatement[5798-5818]"
    }, {
      "left" : "m_size = -1;",
      "right" : "m_size = -1;",
      "info" : "ExpressionStatement[5501-5513]:ExpressionStatement[5827-5839]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5525-5534]:MarkerAnnotation[5851-5860]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5539-5545]:Modifier[5865-5871]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5546-5553]:PrimitiveType[5872-5879]"
    }, {
      "left" : "isClosed",
      "right" : "isClosed",
      "info" : "SimpleName[5554-5562]:SimpleName[5880-5888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5601]:Block[5895-5927]"
    }, {
      "left" : "return m_closed;",
      "right" : "return m_closed;",
      "info" : "ReturnStatement[5579-5595]:ReturnStatement[5905-5921]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5607-5616]:MarkerAnnotation[5933-5942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5621-5627]:Modifier[5947-5953]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5628-5632]:PrimitiveType[5954-5958]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5633-5638]:SimpleName[5959-5964]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5648-5659]:SimpleType[5974-5985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5660-5888]:Block[5986-6214]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5670-5882]:TryStatement[5996-6208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-5761]:Block[6000-6087]"
    }, {
      "left" : "if (m_fc != null)",
      "right" : "if (m_fc != null)",
      "info" : "IfStatement[5688-5751]:IfStatement[6014-6077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5706-5751]:Block[6032-6077]"
    }, {
      "left" : "m_fc.close();",
      "right" : "m_fc.close();",
      "info" : "ExpressionStatement[5724-5737]:ExpressionStatement[6050-6063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5770-5882]:Block[6096-6208]"
    }, {
      "left" : "m_ras = null;",
      "right" : "m_ras = null;",
      "info" : "ExpressionStatement[5784-5797]:ExpressionStatement[6110-6123]"
    }, {
      "left" : "m_fc = null;",
      "right" : "m_fc = null;",
      "info" : "ExpressionStatement[5810-5822]:ExpressionStatement[6136-6148]"
    }, {
      "left" : "m_closed = true;",
      "right" : "m_closed = true;",
      "info" : "ExpressionStatement[5835-5851]:ExpressionStatement[6161-6177]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[5864-5872]:ExpressionStatement[6190-6198]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5894-5903]:MarkerAnnotation[6220-6229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5908-5914]:Modifier[6234-6240]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5915-5919]:PrimitiveType[6241-6245]"
    }, {
      "left" : "sync",
      "right" : "sync",
      "info" : "SimpleName[5920-5924]:SimpleName[6246-6250]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5934-5945]:SimpleType[6260-6271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5946-6132]:Block[6272-6458]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[5956-6010]:IfStatement[6282-6336]"
    }, {
      "left" : "throw new IOException(\"Segment closed\");",
      "right" : "throw new IOException(\"Segment closed\");",
      "info" : "ThrowStatement[5970-6010]:ThrowStatement[6296-6336]"
    }, {
      "left" : "if (!m_syncedSinceLastEdit)",
      "right" : "if (!m_syncedSinceLastEdit)",
      "info" : "IfStatement[6019-6088]:IfStatement[6345-6414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6047-6088]:Block[6373-6414]"
    }, {
      "left" : "m_fc.force(true);",
      "right" : "m_fc.force(true);",
      "info" : "ExpressionStatement[6061-6078]:ExpressionStatement[6387-6404]"
    }, {
      "left" : "m_syncedSinceLastEdit = true;",
      "right" : "m_syncedSinceLastEdit = true;",
      "info" : "ExpressionStatement[6097-6126]:ExpressionStatement[6423-6452]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6138-6147]:MarkerAnnotation[6464-6473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6152-6158]:Modifier[6478-6484]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6159-6166]:PrimitiveType[6485-6492]"
    }, {
      "left" : "hasMoreEntries",
      "right" : "hasMoreEntries",
      "info" : "SimpleName[6167-6181]:SimpleName[6493-6507]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6191-6202]:SimpleType[6517-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6207-6328]:Block[6533-6654]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6217-6271]:IfStatement[6543-6597]"
    }, {
      "left" : "throw new IOException(\"Segment closed\");",
      "right" : "throw new IOException(\"Segment closed\");",
      "info" : "ThrowStatement[6231-6271]:ThrowStatement[6557-6597]"
    }, {
      "left" : "return m_objectReadIndex < m_numOfEntries;",
      "right" : "return m_objectReadIndex < m_numOfEntries;",
      "info" : "ReturnStatement[6280-6322]:ReturnStatement[6606-6648]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6334-6343]:MarkerAnnotation[6660-6669]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6348-6354]:Modifier[6674-6680]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6355-6362]:PrimitiveType[6681-6688]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[6363-6370]:SimpleName[6689-6696]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6380-6391]:SimpleType[6706-6717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6396-6515]:Block[6722-6841]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6406-6460]:IfStatement[6732-6786]"
    }, {
      "left" : "throw new IOException(\"Segment closed\");",
      "right" : "throw new IOException(\"Segment closed\");",
      "info" : "ThrowStatement[6420-6460]:ThrowStatement[6746-6786]"
    }, {
      "left" : "return m_discardCount == m_numOfEntries;",
      "right" : "return m_discardCount == m_numOfEntries;",
      "info" : "ReturnStatement[6469-6509]:ReturnStatement[6795-6835]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6521-6530]:MarkerAnnotation[6847-6856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6535-6541]:Modifier[6861-6867]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6542-6549]:PrimitiveType[6868-6875]"
    }, {
      "left" : "offer",
      "right" : "offer",
      "info" : "SimpleName[6550-6555]:SimpleName[6876-6881]"
    }, {
      "left" : "DBBPool.BBContainer cont",
      "right" : "DBBPool.BBContainer cont",
      "info" : "SingleVariableDeclaration[6556-6580]:SingleVariableDeclaration[6882-6906]"
    }, {
      "left" : "boolean compress",
      "right" : "boolean compress",
      "info" : "SingleVariableDeclaration[6582-6598]:SingleVariableDeclaration[6908-6924]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6607-6618]:SimpleType[6933-6944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6623-8191]:Block[6949-8517]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6633-6687]:IfStatement[6959-7013]"
    }, {
      "left" : "throw new IOException(\"Segment closed\");",
      "right" : "throw new IOException(\"Segment closed\");",
      "info" : "ThrowStatement[6647-6687]:ThrowStatement[6973-7013]"
    }, {
      "left" : "final ByteBuffer buf = cont.b();",
      "right" : "final ByteBuffer buf = cont.b();",
      "info" : "VariableDeclarationStatement[6696-6728]:VariableDeclarationStatement[7022-7054]"
    }, {
      "left" : "final int remaining = buf.remaining();",
      "right" : "final int remaining = buf.remaining();",
      "info" : "VariableDeclarationStatement[6737-6775]:VariableDeclarationStatement[7063-7101]"
    }, {
      "left" : "if (remaining < 32 || !buf.isDirect())",
      "right" : "if (remaining < 32 || !buf.isDirect())",
      "info" : "IfStatement[6784-6840]:IfStatement[7110-7166]"
    }, {
      "left" : "compress = false;",
      "right" : "compress = false;",
      "info" : "ExpressionStatement[6823-6840]:ExpressionStatement[7149-7166]"
    }, {
      "left" : "final int maxCompressedSize = (compress ? CompressionService.maxCompressedLength(remaining) : remaining) + OBJECT_HEADER_BYTES;",
      "right" : "final int maxCompressedSize = (compress ? CompressionService.maxCompressedLength(remaining) : remaining) + OBJECT_HEADER_BYTES;",
      "info" : "VariableDeclarationStatement[6849-6976]:VariableDeclarationStatement[7175-7302]"
    }, {
      "left" : "if (remaining() < maxCompressedSize)",
      "right" : "if (remaining() < maxCompressedSize)",
      "info" : "IfStatement[6985-7035]:IfStatement[7311-7361]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7022-7035]:ReturnStatement[7348-7361]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[7045-7075]:ExpressionStatement[7371-7401]"
    }, {
      "left" : "DBBPool.BBContainer destBuf = cont;",
      "right" : "DBBPool.BBContainer destBuf = cont;",
      "info" : "VariableDeclarationStatement[7084-7119]:VariableDeclarationStatement[7410-7445]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7129-8163]:TryStatement[7455-8489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-8038]:Block[7459-8364]"
    }, {
      "left" : "m_tmpHeaderBuf.b().clear();",
      "right" : "m_tmpHeaderBuf.b().clear();",
      "info" : "ExpressionStatement[7147-7174]:ExpressionStatement[7473-7500]"
    }, {
      "left" : "if (compress)",
      "right" : "if (compress)",
      "info" : "IfStatement[7188-7720]:IfStatement[7514-8046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7202-7560]:Block[7528-7886]"
    }, {
      "left" : "destBuf = DBBPool.allocateDirectAndPool(maxCompressedSize);",
      "right" : "destBuf = DBBPool.allocateDirectAndPool(maxCompressedSize);",
      "info" : "ExpressionStatement[7220-7279]:ExpressionStatement[7546-7605]"
    }, {
      "left" : "final int compressedSize = CompressionService.compressBuffer(buf, destBuf.b());",
      "right" : "final int compressedSize = CompressionService.compressBuffer(buf, destBuf.b());",
      "info" : "VariableDeclarationStatement[7296-7375]:VariableDeclarationStatement[7622-7701]"
    }, {
      "left" : "destBuf.b().limit(compressedSize);",
      "right" : "destBuf.b().limit(compressedSize);",
      "info" : "ExpressionStatement[7392-7426]:ExpressionStatement[7718-7752]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(compressedSize);",
      "right" : "m_tmpHeaderBuf.b().putInt(compressedSize);",
      "info" : "ExpressionStatement[7444-7486]:ExpressionStatement[7770-7812]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(FLAG_COMPRESSED);",
      "right" : "m_tmpHeaderBuf.b().putInt(FLAG_COMPRESSED);",
      "info" : "ExpressionStatement[7503-7546]:ExpressionStatement[7829-7872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7566-7720]:Block[7892-8046]"
    }, {
      "left" : "destBuf = cont;",
      "right" : "destBuf = cont;",
      "info" : "ExpressionStatement[7584-7599]:ExpressionStatement[7910-7925]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(remaining);",
      "right" : "m_tmpHeaderBuf.b().putInt(remaining);",
      "info" : "ExpressionStatement[7616-7653]:ExpressionStatement[7942-7979]"
    }, {
      "left" : "m_tmpHeaderBuf.b().putInt(NO_FLAGS);",
      "right" : "m_tmpHeaderBuf.b().putInt(NO_FLAGS);",
      "info" : "ExpressionStatement[7670-7706]:ExpressionStatement[7996-8032]"
    }, {
      "left" : "m_tmpHeaderBuf.b().flip();",
      "right" : "m_tmpHeaderBuf.b().flip();",
      "info" : "ExpressionStatement[7734-7760]:ExpressionStatement[8060-8086]"
    }, {
      "left" : "while (m_tmpHeaderBuf.b().hasRemaining())",
      "right" : "while (m_tmpHeaderBuf.b().hasRemaining())",
      "info" : "WhileStatement[7773-7878]:WhileStatement[8099-8204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7815-7878]:Block[8141-8204]"
    }, {
      "left" : "m_fc.write(m_tmpHeaderBuf.b());",
      "right" : "m_fc.write(m_tmpHeaderBuf.b());",
      "info" : "ExpressionStatement[7833-7864]:ExpressionStatement[8159-8190]"
    }, {
      "left" : "while (destBuf.b().hasRemaining())",
      "right" : "while (destBuf.b().hasRemaining())",
      "info" : "WhileStatement[7892-7983]:WhileStatement[8218-8309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7927-7983]:Block[8253-8309]"
    }, {
      "left" : "m_fc.write(destBuf.b());",
      "right" : "m_fc.write(destBuf.b());",
      "info" : "ExpressionStatement[7945-7969]:ExpressionStatement[8271-8295]"
    }, {
      "left" : "incrementNumEntries(remaining);",
      "right" : "incrementNumEntries(remaining);",
      "info" : "ExpressionStatement[7997-8028]:ExpressionStatement[8323-8354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8047-8163]:Block[8373-8489]"
    }, {
      "left" : "destBuf.discard();",
      "right" : "destBuf.discard();",
      "info" : "ExpressionStatement[8061-8079]:ExpressionStatement[8387-8405]"
    }, {
      "left" : "if (compress)",
      "right" : "if (compress)",
      "info" : "IfStatement[8092-8153]:IfStatement[8418-8479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8153]:Block[8432-8479]"
    }, {
      "left" : "cont.discard();",
      "right" : "cont.discard();",
      "info" : "ExpressionStatement[8124-8139]:ExpressionStatement[8450-8465]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8173-8185]:ReturnStatement[8499-8511]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8197-8206]:MarkerAnnotation[8523-8532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8211-8217]:Modifier[8537-8543]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8218-8221]:PrimitiveType[8544-8547]"
    }, {
      "left" : "offer",
      "right" : "offer",
      "info" : "SimpleName[8222-8227]:SimpleName[8548-8553]"
    }, {
      "left" : "DeferredSerialization ds",
      "right" : "DeferredSerialization ds",
      "info" : "SingleVariableDeclaration[8228-8252]:SingleVariableDeclaration[8554-8578]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8261-8272]:SimpleType[8587-8598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8277-8950]:Block[8603-9276]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[8287-8333]:IfStatement[8613-8659]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[8301-8333]:ThrowStatement[8627-8659]"
    }, {
      "left" : "final int fullSize = ds.getSerializedSize() + OBJECT_HEADER_BYTES;",
      "right" : "final int fullSize = ds.getSerializedSize() + OBJECT_HEADER_BYTES;",
      "info" : "VariableDeclarationStatement[8342-8408]:VariableDeclarationStatement[8668-8734]"
    }, {
      "left" : "if (remaining() < fullSize)",
      "right" : "if (remaining() < fullSize)",
      "info" : "IfStatement[8417-8455]:IfStatement[8743-8781]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[8445-8455]:ReturnStatement[8771-8781]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[8465-8495]:ExpressionStatement[8791-8821]"
    }, {
      "left" : "DBBPool.BBContainer destBuf = DBBPool.allocateDirectAndPool(fullSize);",
      "right" : "DBBPool.BBContainer destBuf = DBBPool.allocateDirectAndPool(fullSize);",
      "info" : "VariableDeclarationStatement[8504-8574]:VariableDeclarationStatement[8830-8900]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8584-8944]:TryStatement[8910-9270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8588-8893]:Block[8914-9219]"
    }, {
      "left" : "final int written = PBDUtils.writeDeferredSerialization(destBuf.b(), ds);",
      "right" : "final int written = PBDUtils.writeDeferredSerialization(destBuf.b(), ds);",
      "info" : "VariableDeclarationStatement[8602-8675]:VariableDeclarationStatement[8928-9001]"
    }, {
      "left" : "destBuf.b().flip();",
      "right" : "destBuf.b().flip();",
      "info" : "ExpressionStatement[8688-8707]:ExpressionStatement[9014-9033]"
    }, {
      "left" : "while (destBuf.b().hasRemaining())",
      "right" : "while (destBuf.b().hasRemaining())",
      "info" : "WhileStatement[8721-8812]:WhileStatement[9047-9138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8756-8812]:Block[9082-9138]"
    }, {
      "left" : "m_fc.write(destBuf.b());",
      "right" : "m_fc.write(destBuf.b());",
      "info" : "ExpressionStatement[8774-8798]:ExpressionStatement[9100-9124]"
    }, {
      "left" : "incrementNumEntries(written);",
      "right" : "incrementNumEntries(written);",
      "info" : "ExpressionStatement[8826-8855]:ExpressionStatement[9152-9181]"
    }, {
      "left" : "return written;",
      "right" : "return written;",
      "info" : "ReturnStatement[8868-8883]:ReturnStatement[9194-9209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8902-8944]:Block[9228-9270]"
    }, {
      "left" : "destBuf.discard();",
      "right" : "destBuf.discard();",
      "info" : "ExpressionStatement[8916-8934]:ExpressionStatement[9242-9260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8956-8965]:MarkerAnnotation[9282-9291]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8970-8976]:Modifier[9296-9302]"
    }, {
      "left" : "DBBPool.BBContainer",
      "right" : "DBBPool.BBContainer",
      "info" : "SimpleType[8977-8996]:SimpleType[9303-9322]"
    }, {
      "left" : "poll",
      "right" : "poll",
      "info" : "SimpleName[8997-9001]:SimpleName[9323-9327]"
    }, {
      "left" : "BinaryDeque.OutputContainerFactory factory",
      "right" : "BinaryDeque.OutputContainerFactory factory",
      "info" : "SingleVariableDeclaration[9002-9044]:SingleVariableDeclaration[9328-9370]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9053-9064]:SimpleType[9379-9390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9069-12107]:Block[9395-12433]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[9079-9125]:IfStatement[9405-9451]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[9093-9125]:ThrowStatement[9419-9451]"
    }, {
      "left" : "if (!hasMoreEntries())",
      "right" : "if (!hasMoreEntries())",
      "info" : "IfStatement[9135-9194]:IfStatement[9461-9520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9158-9194]:Block[9484-9520]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9172-9184]:ReturnStatement[9498-9510]"
    }, {
      "left" : "final long writePos = m_fc.position();",
      "right" : "final long writePos = m_fc.position();",
      "info" : "VariableDeclarationStatement[9204-9242]:VariableDeclarationStatement[9530-9568]"
    }, {
      "left" : "m_fc.position(m_readOffset);",
      "right" : "m_fc.position(m_readOffset);",
      "info" : "ExpressionStatement[9251-9279]:ExpressionStatement[9577-9605]"
    }, {
      "left" : "m_objectReadIndex++;",
      "right" : "m_objectReadIndex++;",
      "info" : "ExpressionStatement[9288-9308]:ExpressionStatement[9614-9634]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9318-12101]:TryStatement[9644-12427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9322-12000]:Block[9648-12326]"
    }, {
      "left" : "m_tmpHeaderBuf.b().clear();",
      "right" : "m_tmpHeaderBuf.b().clear();",
      "info" : "ExpressionStatement[9406-9433]:ExpressionStatement[9732-9759]"
    }, {
      "left" : "while (m_tmpHeaderBuf.b().hasRemaining())",
      "right" : "while (m_tmpHeaderBuf.b().hasRemaining())",
      "info" : "WhileStatement[9446-9659]:WhileStatement[9772-9985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9488-9659]:Block[9814-9985]"
    }, {
      "left" : "int read = m_fc.read(m_tmpHeaderBuf.b());",
      "right" : "int read = m_fc.read(m_tmpHeaderBuf.b());",
      "info" : "VariableDeclarationStatement[9506-9547]:VariableDeclarationStatement[9832-9873]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[9564-9645]:IfStatement[9890-9971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9580-9645]:Block[9906-9971]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[9602-9627]:ThrowStatement[9928-9953]"
    }, {
      "left" : "m_tmpHeaderBuf.b().flip();",
      "right" : "m_tmpHeaderBuf.b().flip();",
      "info" : "ExpressionStatement[9672-9698]:ExpressionStatement[9998-10024]"
    }, {
      "left" : "final int length = m_tmpHeaderBuf.b().getInt();",
      "right" : "final int length = m_tmpHeaderBuf.b().getInt();",
      "info" : "VariableDeclarationStatement[9711-9758]:VariableDeclarationStatement[10037-10084]"
    }, {
      "left" : "final int flags = m_tmpHeaderBuf.b().getInt();",
      "right" : "final int flags = m_tmpHeaderBuf.b().getInt();",
      "info" : "VariableDeclarationStatement[9771-9817]:VariableDeclarationStatement[10097-10143]"
    }, {
      "left" : "final boolean compressed = (flags & FLAG_COMPRESSED) != 0;",
      "right" : "final boolean compressed = (flags & FLAG_COMPRESSED) != 0;",
      "info" : "VariableDeclarationStatement[9830-9888]:VariableDeclarationStatement[10156-10214]"
    }, {
      "left" : "final int uncompressedLen;",
      "right" : "final int uncompressedLen;",
      "info" : "VariableDeclarationStatement[9901-9927]:VariableDeclarationStatement[10227-10253]"
    }, {
      "left" : "if (length < 1)",
      "right" : "if (length < 1)",
      "info" : "IfStatement[9941-10037]:IfStatement[10267-10363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9957-10037]:Block[10283-10363]"
    }, {
      "left" : "throw new IOException(\"Read an invalid length\");",
      "right" : "throw new IOException(\"Read an invalid length\");",
      "info" : "ThrowStatement[9975-10023]:ThrowStatement[10301-10349]"
    }, {
      "left" : "final DBBPool.BBContainer retcont;",
      "right" : "final DBBPool.BBContainer retcont;",
      "info" : "VariableDeclarationStatement[10051-10085]:VariableDeclarationStatement[10377-10411]"
    }, {
      "left" : "if (compressed)",
      "right" : "if (compressed)",
      "info" : "IfStatement[10098-11406]:IfStatement[10424-11732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10114-10972]:Block[10440-11298]"
    }, {
      "left" : "final DBBPool.BBContainer compressedBuf = DBBPool.allocateDirectAndPool(length);",
      "right" : "final DBBPool.BBContainer compressedBuf = DBBPool.allocateDirectAndPool(length);",
      "info" : "VariableDeclarationStatement[10132-10212]:VariableDeclarationStatement[10458-10538]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10229-10958]:TryStatement[10555-11284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10233-10885]:Block[10559-11211]"
    }, {
      "left" : "while (compressedBuf.b().hasRemaining())",
      "right" : "while (compressedBuf.b().hasRemaining())",
      "info" : "WhileStatement[10255-10506]:WhileStatement[10581-10832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10296-10506]:Block[10622-10832]"
    }, {
      "left" : "int read = m_fc.read(compressedBuf.b());",
      "right" : "int read = m_fc.read(compressedBuf.b());",
      "info" : "VariableDeclarationStatement[10322-10362]:VariableDeclarationStatement[10648-10688]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[10387-10484]:IfStatement[10713-10810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10403-10484]:Block[10729-10810]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[10433-10458]:ThrowStatement[10759-10784]"
    }, {
      "left" : "compressedBuf.b().flip();",
      "right" : "compressedBuf.b().flip();",
      "info" : "ExpressionStatement[10527-10552]:ExpressionStatement[10853-10878]"
    }, {
      "left" : "uncompressedLen = CompressionService.uncompressedLength(compressedBuf.bDR());",
      "right" : "uncompressedLen = CompressionService.uncompressedLength(compressedBuf.bDR());",
      "info" : "ExpressionStatement[10574-10651]:ExpressionStatement[10900-10977]"
    }, {
      "left" : "retcont = factory.getContainer(uncompressedLen);",
      "right" : "retcont = factory.getContainer(uncompressedLen);",
      "info" : "ExpressionStatement[10672-10720]:ExpressionStatement[10998-11046]"
    }, {
      "left" : "retcont.b().limit(uncompressedLen);",
      "right" : "retcont.b().limit(uncompressedLen);",
      "info" : "ExpressionStatement[10741-10776]:ExpressionStatement[11067-11102]"
    }, {
      "left" : "CompressionService.decompressBuffer(compressedBuf.bDR(), retcont.b());",
      "right" : "CompressionService.decompressBuffer(compressedBuf.bDR(), retcont.b());",
      "info" : "ExpressionStatement[10797-10867]:ExpressionStatement[11123-11193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10894-10958]:Block[11220-11284]"
    }, {
      "left" : "compressedBuf.discard();",
      "right" : "compressedBuf.discard();",
      "info" : "ExpressionStatement[10916-10940]:ExpressionStatement[11242-11266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10978-11406]:Block[11304-11732]"
    }, {
      "left" : "uncompressedLen = length;",
      "right" : "uncompressedLen = length;",
      "info" : "ExpressionStatement[10996-11021]:ExpressionStatement[11322-11347]"
    }, {
      "left" : "retcont = factory.getContainer(length);",
      "right" : "retcont = factory.getContainer(length);",
      "info" : "ExpressionStatement[11038-11077]:ExpressionStatement[11364-11403]"
    }, {
      "left" : "retcont.b().limit(length);",
      "right" : "retcont.b().limit(length);",
      "info" : "ExpressionStatement[11094-11120]:ExpressionStatement[11420-11446]"
    }, {
      "left" : "while (retcont.b().hasRemaining())",
      "right" : "while (retcont.b().hasRemaining())",
      "info" : "WhileStatement[11137-11356]:WhileStatement[11463-11682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11172-11356]:Block[11498-11682]"
    }, {
      "left" : "int read = m_fc.read(retcont.b());",
      "right" : "int read = m_fc.read(retcont.b());",
      "info" : "VariableDeclarationStatement[11194-11228]:VariableDeclarationStatement[11520-11554]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[11249-11338]:IfStatement[11575-11664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11265-11338]:Block[11591-11664]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[11291-11316]:ThrowStatement[11617-11642]"
    }, {
      "left" : "retcont.b().flip();",
      "right" : "retcont.b().flip();",
      "info" : "ExpressionStatement[11373-11392]:ExpressionStatement[11699-11718]"
    }, {
      "left" : "m_bytesRead += uncompressedLen;",
      "right" : "m_bytesRead += uncompressedLen;",
      "info" : "ExpressionStatement[11420-11451]:ExpressionStatement[11746-11777]"
    }, {
      "left" : "return new DBBPool.BBContainer(retcont.b()) {\n                private boolean m_discarded = false;\n\n                @Override\n                public void discard() {\n                    checkDoubleFree();\n                    if (m_discarded) {\n                        LOG.error(\"PBD Container discarded more than once\");\n                        return;\n                    }\n\n                    m_discarded = true;\n                    retcont.discard();\n                    m_discardCount++;\n                }\n            };",
      "right" : "return new DBBPool.BBContainer(retcont.b()) {\n                private boolean m_discarded = false;\n\n                @Override\n                public void discard() {\n                    checkDoubleFree();\n                    if (m_discarded) {\n                        LOG.error(\"PBD Container discarded more than once\");\n                        return;\n                    }\n\n                    m_discarded = true;\n                    retcont.discard();\n                    m_discardCount++;\n                }\n            };",
      "info" : "ReturnStatement[11465-11990]:ReturnStatement[11791-12316]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11581-11590]:MarkerAnnotation[11907-11916]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11607-11613]:Modifier[11933-11939]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11614-11618]:PrimitiveType[11940-11944]"
    }, {
      "left" : "discard",
      "right" : "discard",
      "info" : "SimpleName[11619-11626]:SimpleName[11945-11952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11629-11975]:Block[11955-12301]"
    }, {
      "left" : "checkDoubleFree();",
      "right" : "checkDoubleFree();",
      "info" : "ExpressionStatement[11651-11669]:ExpressionStatement[11977-11995]"
    }, {
      "left" : "if (m_discarded)",
      "right" : "if (m_discarded)",
      "info" : "IfStatement[11690-11839]:IfStatement[12016-12165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11707-11839]:Block[12033-12165]"
    }, {
      "left" : "LOG.error(\"PBD Container discarded more than once\");",
      "right" : "LOG.error(\"PBD Container discarded more than once\");",
      "info" : "ExpressionStatement[11733-11785]:ExpressionStatement[12059-12111]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11810-11817]:ReturnStatement[12136-12143]"
    }, {
      "left" : "m_discarded = true;",
      "right" : "m_discarded = true;",
      "info" : "ExpressionStatement[11861-11880]:ExpressionStatement[12187-12206]"
    }, {
      "left" : "retcont.discard();",
      "right" : "retcont.discard();",
      "info" : "ExpressionStatement[11901-11919]:ExpressionStatement[12227-12245]"
    }, {
      "left" : "m_discardCount++;",
      "right" : "m_discardCount++;",
      "info" : "ExpressionStatement[11940-11957]:ExpressionStatement[12266-12283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12009-12101]:Block[12335-12427]"
    }, {
      "left" : "m_readOffset = m_fc.position();",
      "right" : "m_readOffset = m_fc.position();",
      "info" : "ExpressionStatement[12023-12054]:ExpressionStatement[12349-12380]"
    }, {
      "left" : "m_fc.position(writePos);",
      "right" : "m_fc.position(writePos);",
      "info" : "ExpressionStatement[12067-12091]:ExpressionStatement[12393-12417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12113-12122]:MarkerAnnotation[12439-12448]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12127-12133]:Modifier[12453-12459]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12134-12137]:PrimitiveType[12460-12463]"
    }, {
      "left" : "uncompressedBytesToRead",
      "right" : "uncompressedBytesToRead",
      "info" : "SimpleName[12138-12161]:SimpleName[12464-12487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12164-12276]:Block[12490-12602]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[12174-12233]:IfStatement[12500-12559]"
    }, {
      "left" : "throw new RuntimeException(\"Segment closed\");",
      "right" : "throw new RuntimeException(\"Segment closed\");",
      "info" : "ThrowStatement[12188-12233]:ThrowStatement[12514-12559]"
    }, {
      "left" : "return m_size - m_bytesRead;",
      "right" : "return m_size - m_bytesRead;",
      "info" : "ReturnStatement[12242-12270]:ReturnStatement[12568-12596]"
    } ]
  },
  "interFileMappings" : { }
}