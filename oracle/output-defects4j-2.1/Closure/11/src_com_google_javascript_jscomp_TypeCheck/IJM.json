{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeCheck",
      "right" : "TypeCheck",
      "info" : "TypeDeclaration[2207-67293]:TypeDeclaration[2207-67218]"
    }, {
      "left" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "right" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "info" : "FieldDeclaration[2412-2580]:FieldDeclaration[2412-2580]"
    }, {
      "left" : "static final DiagnosticType BAD_DELETE =\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "right" : "static final DiagnosticType BAD_DELETE =\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "info" : "FieldDeclaration[2647-2809]:FieldDeclaration[2647-2809]"
    }, {
      "left" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "right" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "info" : "FieldDeclaration[2844-2958]:FieldDeclaration[2844-2958]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3092-3308]:FieldDeclaration[3092-3308]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3312-3559]:FieldDeclaration[3312-3559]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "right" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "info" : "FieldDeclaration[3563-3741]:FieldDeclaration[3563-3741]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "right" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "info" : "FieldDeclaration[3838-4003]:FieldDeclaration[3838-4003]"
    }, {
      "left" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "right" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "info" : "FieldDeclaration[4007-4178]:FieldDeclaration[4007-4178]"
    }, {
      "left" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "right" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "info" : "FieldDeclaration[4182-4351]:FieldDeclaration[4182-4351]"
    }, {
      "left" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "right" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "info" : "FieldDeclaration[4355-4509]:FieldDeclaration[4355-4509]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "info" : "FieldDeclaration[4513-4711]:FieldDeclaration[4513-4711]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "right" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "info" : "FieldDeclaration[4715-4890]:FieldDeclaration[4715-4890]"
    }, {
      "left" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "right" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "info" : "FieldDeclaration[4894-5067]:FieldDeclaration[4894-5067]"
    }, {
      "left" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "right" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "info" : "FieldDeclaration[5071-5189]:FieldDeclaration[5071-5189]"
    }, {
      "left" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "right" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "info" : "FieldDeclaration[5193-5350]:FieldDeclaration[5193-5350]"
    }, {
      "left" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "right" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "info" : "FieldDeclaration[5354-5611]:FieldDeclaration[5354-5611]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "right" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "info" : "FieldDeclaration[5615-5814]:FieldDeclaration[5615-5814]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "right" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "info" : "FieldDeclaration[5818-6015]:FieldDeclaration[5818-6015]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "right" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "info" : "FieldDeclaration[6019-6265]:FieldDeclaration[6019-6265]"
    }, {
      "left" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "right" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "info" : "FieldDeclaration[6269-6435]:FieldDeclaration[6269-6435]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6439-6675]:FieldDeclaration[6439-6675]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6679-6912]:FieldDeclaration[6679-6912]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[6916-7238]:FieldDeclaration[6916-7238]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "right" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "info" : "FieldDeclaration[7242-7416]:FieldDeclaration[7242-7416]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "right" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "info" : "FieldDeclaration[7420-7624]:FieldDeclaration[7420-7624]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "right" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "info" : "FieldDeclaration[7628-7791]:FieldDeclaration[7628-7791]"
    }, {
      "left" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "right" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "info" : "FieldDeclaration[7795-7947]:FieldDeclaration[7795-7947]"
    }, {
      "left" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "right" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "info" : "FieldDeclaration[7951-8188]:FieldDeclaration[7951-8188]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "right" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "info" : "FieldDeclaration[8192-8411]:FieldDeclaration[8192-8411]"
    }, {
      "left" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "right" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "info" : "FieldDeclaration[8415-8685]:FieldDeclaration[8415-8685]"
    }, {
      "left" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "right" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "info" : "FieldDeclaration[8689-8861]:FieldDeclaration[8689-8861]"
    }, {
      "left" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "right" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "info" : "FieldDeclaration[8865-10025]:FieldDeclaration[8865-10025]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[10029-10069]:FieldDeclaration[10029-10069]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[10072-10110]:FieldDeclaration[10072-10110]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[10114-10174]:FieldDeclaration[10114-10174]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[10178-10220]:FieldDeclaration[10178-10220]"
    }, {
      "left" : "private Scope topScope;",
      "right" : "private Scope topScope;",
      "info" : "FieldDeclaration[10223-10246]:FieldDeclaration[10223-10246]"
    }, {
      "left" : "private ScopeCreator scopeCreator;",
      "right" : "private ScopeCreator scopeCreator;",
      "info" : "FieldDeclaration[10250-10284]:FieldDeclaration[10250-10284]"
    }, {
      "left" : "private final CheckLevel reportMissingOverride;",
      "right" : "private final CheckLevel reportMissingOverride;",
      "info" : "FieldDeclaration[10288-10335]:FieldDeclaration[10288-10335]"
    }, {
      "left" : "private final CheckLevel reportUnknownTypes;",
      "right" : "private final CheckLevel reportUnknownTypes;",
      "info" : "FieldDeclaration[10338-10382]:FieldDeclaration[10338-10382]"
    }, {
      "left" : "private boolean reportMissingProperties = true;",
      "right" : "private boolean reportMissingProperties = true;",
      "info" : "FieldDeclaration[10482-10529]:FieldDeclaration[10482-10529]"
    }, {
      "left" : "private InferJSDocInfo inferJSDocInfo = null;",
      "right" : "private InferJSDocInfo inferJSDocInfo = null;",
      "info" : "FieldDeclaration[10533-10578]:FieldDeclaration[10533-10578]"
    }, {
      "left" : "private int typedCount = 0;",
      "right" : "private int typedCount = 0;",
      "info" : "FieldDeclaration[10659-10686]:FieldDeclaration[10659-10686]"
    }, {
      "left" : "private int nullCount = 0;",
      "right" : "private int nullCount = 0;",
      "info" : "FieldDeclaration[10689-10715]:FieldDeclaration[10689-10715]"
    }, {
      "left" : "private int unknownCount = 0;",
      "right" : "private int unknownCount = 0;",
      "info" : "FieldDeclaration[10718-10747]:FieldDeclaration[10718-10747]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[10750-10776]:FieldDeclaration[10750-10776]"
    }, {
      "left" : "private int noTypeCheckSection = 0;",
      "right" : "private int noTypeCheckSection = 0;",
      "info" : "FieldDeclaration[10867-10902]:FieldDeclaration[10867-10902]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[10906-11573]:MethodDeclaration[10906-11573]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[11577-11908]:MethodDeclaration[11577-11908]"
    }, {
      "left" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "right" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[11912-12153]:MethodDeclaration[11912-12153]"
    }, {
      "left" : "TypeCheck reportMissingProperties(boolean report)",
      "right" : "TypeCheck reportMissingProperties(boolean report)",
      "info" : "MethodDeclaration[12157-12344]:MethodDeclaration[12157-12344]"
    }, {
      "left" : "public void process(Node externsRoot, Node jsRoot)",
      "right" : "public void process(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[12348-13044]:MethodDeclaration[12348-13044]"
    }, {
      "left" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "right" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[13048-13745]:MethodDeclaration[13048-13745]"
    }, {
      "left" : "public void check(Node node, boolean externs)",
      "right" : "public void check(Node node, boolean externs)",
      "info" : "MethodDeclaration[13750-14099]:MethodDeclaration[13750-14099]"
    }, {
      "left" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "right" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "info" : "MethodDeclaration[14104-14641]:MethodDeclaration[14104-14641]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "info" : "MethodDeclaration[14645-14840]:MethodDeclaration[14645-14840]"
    }, {
      "left" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14844-15985]:MethodDeclaration[14844-15985]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15989-26624]:MethodDeclaration[15989-26624]"
    }, {
      "left" : "private void checkTypeofString(NodeTraversal t, Node n, String s)",
      "right" : "private void checkTypeofString(NodeTraversal t, Node n, String s)",
      "info" : "MethodDeclaration[26628-26945]:MethodDeclaration[26628-26945]"
    }, {
      "left" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "right" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[26949-27439]:MethodDeclaration[26949-27439]"
    }, {
      "left" : "private void visitAssign(NodeTraversal t, Node assign)",
      "right" : "private void visitAssign(NodeTraversal t, Node assign)",
      "info" : "MethodDeclaration[27443-31697]:MethodDeclaration[27443-31697]"
    }, {
      "left" : "private void checkPropertyInheritanceOnGetpropAssign(\n      NodeTraversal t, Node assign, Node object, String property,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkPropertyInheritanceOnGetpropAssign(\n      NodeTraversal t, Node assign, Node object, String property,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[31701-32943]:MethodDeclaration[31701-32943]"
    }, {
      "left" : "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit)",
      "right" : "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit)",
      "info" : "MethodDeclaration[32947-35336]:MethodDeclaration[32947-35336]"
    }, {
      "left" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "right" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "info" : "MethodDeclaration[35340-35764]:MethodDeclaration[35340-35764]"
    }, {
      "left" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[35768-40922]:MethodDeclaration[35768-40922]"
    }, {
      "left" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "right" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "info" : "MethodDeclaration[40926-41875]:MethodDeclaration[40926-41875]"
    }, {
      "left" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "right" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "info" : "MethodDeclaration[41879-43082]:MethodDeclaration[41879-43082]"
    }, {
      "left" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "right" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[43086-44499]:MethodDeclaration[43086-44499]"
    }, {
      "left" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "right" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[44503-45595]:MethodDeclaration[44503-45520]"
    }, {
      "left" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[45599-47171]:MethodDeclaration[45524-47096]"
    }, {
      "left" : "private void checkPropertyAccessHelper(JSType objectType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccessHelper(JSType objectType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[47175-47587]:MethodDeclaration[47100-47512]"
    }, {
      "left" : "private boolean isPropertyTest(Node getProp)",
      "right" : "private boolean isPropertyTest(Node getProp)",
      "info" : "MethodDeclaration[47591-48546]:MethodDeclaration[47516-48471]"
    }, {
      "left" : "private void visitGetElem(NodeTraversal t, Node n)",
      "right" : "private void visitGetElem(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[48550-48961]:MethodDeclaration[48475-48886]"
    }, {
      "left" : "private void visitVar(NodeTraversal t, Node n)",
      "right" : "private void visitVar(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[48965-50247]:MethodDeclaration[48890-50172]"
    }, {
      "left" : "private void visitNew(NodeTraversal t, Node n)",
      "right" : "private void visitNew(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[50251-50844]:MethodDeclaration[50176-50769]"
    }, {
      "left" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "right" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "info" : "MethodDeclaration[50848-52356]:MethodDeclaration[50773-52281]"
    }, {
      "left" : "private void visitFunction(NodeTraversal t, Node n)",
      "right" : "private void visitFunction(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[52360-56074]:MethodDeclaration[52285-55999]"
    }, {
      "left" : "private void visitCall(NodeTraversal t, Node n)",
      "right" : "private void visitCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[56078-58327]:MethodDeclaration[56003-58252]"
    }, {
      "left" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "right" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "info" : "MethodDeclaration[58331-59781]:MethodDeclaration[58256-59706]"
    }, {
      "left" : "private void visitReturn(NodeTraversal t, Node n)",
      "right" : "private void visitReturn(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[59785-60907]:MethodDeclaration[59710-60832]"
    }, {
      "left" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "right" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[60911-62984]:MethodDeclaration[60836-62909]"
    }, {
      "left" : "private void checkEnumAlias(\n      NodeTraversal t, JSDocInfo declInfo, Node value)",
      "right" : "private void checkEnumAlias(\n      NodeTraversal t, JSDocInfo declInfo, Node value)",
      "info" : "MethodDeclaration[62989-64041]:MethodDeclaration[62914-63966]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[64045-64612]:MethodDeclaration[63970-64537]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[64940-65158]:MethodDeclaration[64865-65083]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "info" : "MethodDeclaration[65162-65280]:MethodDeclaration[65087-65205]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "info" : "MethodDeclaration[65284-66914]:MethodDeclaration[65209-66839]"
    }, {
      "left" : "double getTypedPercent()",
      "right" : "double getTypedPercent()",
      "info" : "MethodDeclaration[66918-67185]:MethodDeclaration[66843-67110]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[67189-67291]:MethodDeclaration[67114-67216]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11170-11573]:Block[11170-11573]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[11176-11201]:ExpressionStatement[11176-11201]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[11206-11251]:ExpressionStatement[11206-11251]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[11256-11301]:ExpressionStatement[11256-11301]"
    }, {
      "left" : "this.typeRegistry = typeRegistry;",
      "right" : "this.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[11306-11339]:ExpressionStatement[11306-11339]"
    }, {
      "left" : "this.topScope = topScope;",
      "right" : "this.topScope = topScope;",
      "info" : "ExpressionStatement[11344-11369]:ExpressionStatement[11344-11369]"
    }, {
      "left" : "this.scopeCreator = scopeCreator;",
      "right" : "this.scopeCreator = scopeCreator;",
      "info" : "ExpressionStatement[11374-11407]:ExpressionStatement[11374-11407]"
    }, {
      "left" : "this.reportMissingOverride = reportMissingOverride;",
      "right" : "this.reportMissingOverride = reportMissingOverride;",
      "info" : "ExpressionStatement[11412-11463]:ExpressionStatement[11412-11463]"
    }, {
      "left" : "this.reportUnknownTypes = reportUnknownTypes;",
      "right" : "this.reportUnknownTypes = reportUnknownTypes;",
      "info" : "ExpressionStatement[11468-11513]:ExpressionStatement[11468-11513]"
    }, {
      "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "info" : "ExpressionStatement[11518-11569]:ExpressionStatement[11518-11569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11786-11908]:Block[11786-11908]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "info" : "ConstructorInvocation[11792-11904]:ConstructorInvocation[11792-11904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12037-12153]:Block[12037-12153]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "info" : "ConstructorInvocation[12043-12149]:ConstructorInvocation[12043-12149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12284-12344]:Block[12284-12344]"
    }, {
      "left" : "reportMissingProperties = report;",
      "right" : "reportMissingProperties = report;",
      "info" : "ExpressionStatement[12290-12323]:ExpressionStatement[12290-12323]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12328-12340]:ReturnStatement[12328-12340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12660-13044]:Block[12660-13044]"
    }, {
      "left" : "Preconditions.checkNotNull(scopeCreator);",
      "right" : "Preconditions.checkNotNull(scopeCreator);",
      "info" : "ExpressionStatement[12666-12707]:ExpressionStatement[12666-12707]"
    }, {
      "left" : "Preconditions.checkNotNull(topScope);",
      "right" : "Preconditions.checkNotNull(topScope);",
      "info" : "ExpressionStatement[12712-12749]:ExpressionStatement[12712-12749]"
    }, {
      "left" : "Node externsAndJs = jsRoot.getParent();",
      "right" : "Node externsAndJs = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[12755-12794]:VariableDeclarationStatement[12755-12794]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[12799-12846]:ExpressionStatement[12799-12846]"
    }, {
      "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "info" : "ExpressionStatement[12851-12944]:ExpressionStatement[12851-12944]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[12950-13014]:IfStatement[12950-13014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12975-13014]:Block[12975-13014]"
    }, {
      "left" : "check(externsRoot, true);",
      "right" : "check(externsRoot, true);",
      "info" : "ExpressionStatement[12983-13008]:ExpressionStatement[12983-13008]"
    }, {
      "left" : "check(jsRoot, false);",
      "right" : "check(jsRoot, false);",
      "info" : "ExpressionStatement[13019-13040]:ExpressionStatement[13019-13040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13168-13745]:Block[13168-13745]"
    }, {
      "left" : "Preconditions.checkState(scopeCreator == null);",
      "right" : "Preconditions.checkState(scopeCreator == null);",
      "info" : "ExpressionStatement[13174-13221]:ExpressionStatement[13174-13221]"
    }, {
      "left" : "Preconditions.checkState(topScope == null);",
      "right" : "Preconditions.checkState(topScope == null);",
      "info" : "ExpressionStatement[13226-13269]:ExpressionStatement[13226-13269]"
    }, {
      "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "info" : "ExpressionStatement[13275-13328]:ExpressionStatement[13275-13328]"
    }, {
      "left" : "Node externsAndJsRoot = jsRoot.getParent();",
      "right" : "Node externsAndJsRoot = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[13333-13376]:VariableDeclarationStatement[13333-13376]"
    }, {
      "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "info" : "ExpressionStatement[13382-13455]:ExpressionStatement[13382-13455]"
    }, {
      "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "info" : "ExpressionStatement[13460-13520]:ExpressionStatement[13460-13520]"
    }, {
      "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "info" : "VariableDeclarationStatement[13526-13640]:VariableDeclarationStatement[13526-13640]"
    }, {
      "left" : "inference.process(externsRoot, jsRoot);",
      "right" : "inference.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13646-13685]:ExpressionStatement[13646-13685]"
    }, {
      "left" : "process(externsRoot, jsRoot);",
      "right" : "process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13690-13719]:ExpressionStatement[13690-13719]"
    }, {
      "left" : "return topScope;",
      "right" : "return topScope;",
      "info" : "ReturnStatement[13725-13741]:ReturnStatement[13725-13741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13796-14099]:Block[13796-14099]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[13802-13835]:ExpressionStatement[13802-13835]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "info" : "VariableDeclarationStatement[13841-13907]:VariableDeclarationStatement[13841-13907]"
    }, {
      "left" : "inExterns = externs;",
      "right" : "inExterns = externs;",
      "info" : "ExpressionStatement[13912-13932]:ExpressionStatement[13912-13932]"
    }, {
      "left" : "t.traverseWithScope(node, topScope);",
      "right" : "t.traverseWithScope(node, topScope);",
      "info" : "ExpressionStatement[13937-13973]:ExpressionStatement[13937-13973]"
    }, {
      "left" : "if (externs)",
      "right" : "if (externs)",
      "info" : "IfStatement[13978-14095]:IfStatement[13978-14095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13991-14040]:Block[13991-14040]"
    }, {
      "left" : "inferJSDocInfo.process(node, null);",
      "right" : "inferJSDocInfo.process(node, null);",
      "info" : "ExpressionStatement[13999-14034]:ExpressionStatement[13999-14034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14046-14095]:Block[14046-14095]"
    }, {
      "left" : "inferJSDocInfo.process(null, node);",
      "right" : "inferJSDocInfo.process(null, node);",
      "info" : "ExpressionStatement[14054-14089]:ExpressionStatement[14054-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14171-14641]:Block[14171-14641]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "info" : "SwitchStatement[14177-14637]:SwitchStatement[14177-14637]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[14206-14224]:SwitchCase[14206-14224]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[14231-14248]:SwitchCase[14231-14248]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14255-14270]:SwitchCase[14255-14270]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14277-14297]:SwitchCase[14277-14297]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[14304-14322]:SwitchCase[14304-14322]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[14331-14365]:VariableDeclarationStatement[14331-14365]"
    }, {
      "left" : "if (info != null && info.isNoTypeCheck())",
      "right" : "if (info != null && info.isNoTypeCheck())",
      "info" : "IfStatement[14374-14556]:IfStatement[14374-14556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14416-14556]:Block[14416-14556]"
    }, {
      "left" : "if (enterSection)",
      "right" : "if (enterSection)",
      "info" : "IfStatement[14428-14546]:IfStatement[14428-14546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14446-14493]:Block[14446-14493]"
    }, {
      "left" : "noTypeCheckSection++;",
      "right" : "noTypeCheckSection++;",
      "info" : "ExpressionStatement[14460-14481]:ExpressionStatement[14460-14481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14499-14546]:Block[14499-14546]"
    }, {
      "left" : "noTypeCheckSection--;",
      "right" : "noTypeCheckSection--;",
      "info" : "ExpressionStatement[14513-14534]:ExpressionStatement[14513-14534]"
    }, {
      "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "info" : "ExpressionStatement[14565-14616]:ExpressionStatement[14565-14616]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14625-14631]:BreakStatement[14625-14631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14748-14840]:Block[14748-14840]"
    }, {
      "left" : "if (noTypeCheckSection == 0)",
      "right" : "if (noTypeCheckSection == 0)",
      "info" : "IfStatement[14754-14836]:IfStatement[14754-14836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14783-14836]:Block[14783-14836]"
    }, {
      "left" : "t.report(n, diagnosticType, arguments);",
      "right" : "t.report(n, diagnosticType, arguments);",
      "info" : "ExpressionStatement[14791-14830]:ExpressionStatement[14791-14830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14931-15985]:Block[14931-15985]"
    }, {
      "left" : "checkNoTypeCheckSection(n, true);",
      "right" : "checkNoTypeCheckSection(n, true);",
      "info" : "ExpressionStatement[14937-14970]:ExpressionStatement[14937-14970]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "info" : "SwitchStatement[14975-15964]:SwitchStatement[14975-15964]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15004-15024]:SwitchCase[15004-15024]"
    }, {
      "left" : "final Scope outerScope = t.getScope();",
      "right" : "final Scope outerScope = t.getScope();",
      "info" : "VariableDeclarationStatement[15065-15103]:VariableDeclarationStatement[15065-15103]"
    }, {
      "left" : "final String functionPrivateName = n.getFirstChild().getString();",
      "right" : "final String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[15112-15177]:VariableDeclarationStatement[15112-15177]"
    }, {
      "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "info" : "IfStatement[15186-15735]:IfStatement[15186-15735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15654-15735]:Block[15654-15735]"
    }, {
      "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "info" : "ExpressionStatement[15666-15725]:ExpressionStatement[15666-15725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15952-15958]:BreakStatement[15952-15958]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15969-15981]:ReturnStatement[15969-15981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16502-26624]:Block[16502-26624]"
    }, {
      "left" : "JSType childType;",
      "right" : "JSType childType;",
      "info" : "VariableDeclarationStatement[16508-16525]:VariableDeclarationStatement[16508-16525]"
    }, {
      "left" : "JSType leftType, rightType;",
      "right" : "JSType leftType, rightType;",
      "info" : "VariableDeclarationStatement[16530-16557]:VariableDeclarationStatement[16530-16557]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[16562-16579]:VariableDeclarationStatement[16562-16579]"
    }, {
      "left" : "boolean typeable = true;",
      "right" : "boolean typeable = true;",
      "info" : "VariableDeclarationStatement[16650-16674]:VariableDeclarationStatement[16650-16674]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        validator.expectObject(t, n, getJSType(n.getLastChild()),\n                               \"'in' requires an object\");\n        left = n.getFirstChild();\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        validator.expectObject(t, n, getJSType(n.getLastChild()),\n                               \"'in' requires an object\");\n        left = n.getFirstChild();\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "info" : "SwitchStatement[16680-26398]:SwitchStatement[16680-26398]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16709-16725]:SwitchCase[16709-16725]"
    }, {
      "left" : "typeable = visitName(t, n, parent);",
      "right" : "typeable = visitName(t, n, parent);",
      "info" : "ExpressionStatement[16734-16769]:ExpressionStatement[16734-16769]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16778-16784]:BreakStatement[16778-16784]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[16792-16814]:SwitchCase[16792-16814]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[16823-16840]:ExpressionStatement[16823-16840]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16849-16855]:BreakStatement[16849-16855]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[16863-16880]:SwitchCase[16863-16880]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[16889-16936]:ExpressionStatement[16889-16936]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16945-16951]:BreakStatement[16945-16951]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16959-16975]:SwitchCase[16959-16975]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16982-16999]:SwitchCase[16982-16999]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[17008-17040]:ExpressionStatement[17008-17040]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17049-17055]:BreakStatement[17049-17055]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[17063-17079]:SwitchCase[17063-17079]"
    }, {
      "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "info" : "ExpressionStatement[17088-17136]:ExpressionStatement[17088-17136]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17145-17151]:BreakStatement[17145-17151]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[17159-17175]:SwitchCase[17159-17175]"
    }, {
      "left" : "ensureTyped(t, n, NULL_TYPE);",
      "right" : "ensureTyped(t, n, NULL_TYPE);",
      "info" : "ExpressionStatement[17184-17213]:ExpressionStatement[17184-17213]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17222-17228]:BreakStatement[17222-17228]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[17236-17254]:SwitchCase[17236-17254]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[17263-17294]:ExpressionStatement[17263-17294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17303-17309]:BreakStatement[17303-17309]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[17317-17335]:SwitchCase[17317-17335]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[17344-17375]:ExpressionStatement[17344-17375]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17384-17390]:BreakStatement[17384-17390]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[17398-17420]:SwitchCase[17398-17420]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[17429-17446]:ExpressionStatement[17429-17446]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17455-17461]:BreakStatement[17455-17461]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[17469-17491]:SwitchCase[17469-17491]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[17498-17520]:SwitchCase[17498-17520]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17587-17593]:BreakStatement[17587-17593]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[17601-17621]:SwitchCase[17601-17621]"
    }, {
      "left" : "ensureTyped(t, n, ARRAY_TYPE);",
      "right" : "ensureTyped(t, n, ARRAY_TYPE);",
      "info" : "ExpressionStatement[17630-17660]:ExpressionStatement[17630-17660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17669-17675]:BreakStatement[17669-17675]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[17683-17701]:SwitchCase[17683-17701]"
    }, {
      "left" : "ensureTyped(t, n, REGEXP_TYPE);",
      "right" : "ensureTyped(t, n, REGEXP_TYPE);",
      "info" : "ExpressionStatement[17710-17741]:ExpressionStatement[17710-17741]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17750-17756]:BreakStatement[17750-17756]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[17764-17783]:SwitchCase[17764-17783]"
    }, {
      "left" : "visitGetProp(t, n, parent);",
      "right" : "visitGetProp(t, n, parent);",
      "info" : "ExpressionStatement[17792-17819]:ExpressionStatement[17792-17819]"
    }, {
      "left" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
      "right" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
      "info" : "ExpressionStatement[17828-17912]:ExpressionStatement[17828-17912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17921-17927]:BreakStatement[17921-17927]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[17935-17954]:SwitchCase[17935-17954]"
    }, {
      "left" : "visitGetElem(t, n);",
      "right" : "visitGetElem(t, n);",
      "info" : "ExpressionStatement[17963-17982]:ExpressionStatement[17963-17982]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18191-18208]:ExpressionStatement[18191-18208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18217-18223]:BreakStatement[18217-18223]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[18231-18246]:SwitchCase[18231-18246]"
    }, {
      "left" : "visitVar(t, n);",
      "right" : "visitVar(t, n);",
      "info" : "ExpressionStatement[18255-18270]:ExpressionStatement[18255-18270]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18279-18296]:ExpressionStatement[18279-18296]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18305-18311]:BreakStatement[18305-18311]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18319-18334]:SwitchCase[18319-18334]"
    }, {
      "left" : "visitNew(t, n);",
      "right" : "visitNew(t, n);",
      "info" : "ExpressionStatement[18343-18358]:ExpressionStatement[18343-18358]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18367-18373]:BreakStatement[18367-18373]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[18381-18397]:SwitchCase[18381-18397]"
    }, {
      "left" : "visitCall(t, n);",
      "right" : "visitCall(t, n);",
      "info" : "ExpressionStatement[18406-18422]:ExpressionStatement[18406-18422]"
    }, {
      "left" : "typeable = !parent.isExprResult();",
      "right" : "typeable = !parent.isExprResult();",
      "info" : "ExpressionStatement[18431-18465]:ExpressionStatement[18431-18465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18474-18480]:BreakStatement[18474-18480]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[18488-18506]:SwitchCase[18488-18506]"
    }, {
      "left" : "visitReturn(t, n);",
      "right" : "visitReturn(t, n);",
      "info" : "ExpressionStatement[18515-18533]:ExpressionStatement[18515-18533]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18542-18559]:ExpressionStatement[18542-18559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18568-18574]:BreakStatement[18568-18574]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[18582-18597]:SwitchCase[18582-18597]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[18604-18619]:SwitchCase[18604-18619]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[18628-18653]:ExpressionStatement[18628-18653]"
    }, {
      "left" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "right" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "info" : "ExpressionStatement[18662-18747]:ExpressionStatement[18662-18747]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[18756-18787]:ExpressionStatement[18756-18787]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18796-18802]:BreakStatement[18796-18802]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[18810-18825]:SwitchCase[18810-18825]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[18834-18866]:ExpressionStatement[18834-18866]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18875-18881]:BreakStatement[18875-18881]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[18889-18905]:SwitchCase[18889-18905]"
    }, {
      "left" : "ensureTyped(t, n, VOID_TYPE);",
      "right" : "ensureTyped(t, n, VOID_TYPE);",
      "info" : "ExpressionStatement[18914-18943]:ExpressionStatement[18914-18943]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18952-18958]:BreakStatement[18952-18958]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[18966-18984]:SwitchCase[18966-18984]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[18993-19024]:ExpressionStatement[18993-19024]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19033-19039]:BreakStatement[19033-19039]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19047-19065]:SwitchCase[19047-19065]"
    }, {
      "left" : "childType = getJSType(n.getFirstChild());",
      "right" : "childType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[19074-19115]:ExpressionStatement[19074-19115]"
    }, {
      "left" : "if (!childType.matchesInt32Context())",
      "right" : "if (!childType.matchesInt32Context())",
      "info" : "IfStatement[19124-19279]:IfStatement[19124-19279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19162-19279]:Block[19162-19279]"
    }, {
      "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "info" : "ExpressionStatement[19174-19269]:ExpressionStatement[19174-19269]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19288-19319]:ExpressionStatement[19288-19319]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19328-19334]:BreakStatement[19328-19334]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19342-19357]:SwitchCase[19342-19357]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19364-19379]:SwitchCase[19364-19379]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[19388-19413]:ExpressionStatement[19388-19413]"
    }, {
      "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "info" : "ExpressionStatement[19422-19488]:ExpressionStatement[19422-19488]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19497-19528]:ExpressionStatement[19497-19528]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19537-19543]:BreakStatement[19537-19543]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19551-19565]:SwitchCase[19551-19565]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19572-19586]:SwitchCase[19572-19586]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19593-19609]:SwitchCase[19593-19609]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19616-19632]:SwitchCase[19616-19632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19633-21456]:Block[19633-21456]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[19643-19668]:ExpressionStatement[19643-19668]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[19677-19702]:ExpressionStatement[19677-19702]"
    }, {
      "left" : "if (left.isTypeOf())",
      "right" : "if (left.isTypeOf())",
      "info" : "IfStatement[19712-19964]:IfStatement[19712-19964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19733-19850]:Block[19733-19850]"
    }, {
      "left" : "if (right.isString())",
      "right" : "if (right.isString())",
      "info" : "IfStatement[19745-19840]:IfStatement[19745-19840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19767-19840]:Block[19767-19840]"
    }, {
      "left" : "checkTypeofString(t, right, right.getString());",
      "right" : "checkTypeofString(t, right, right.getString());",
      "info" : "ExpressionStatement[19781-19828]:ExpressionStatement[19781-19828]"
    }, {
      "left" : "if (right.isTypeOf() && left.isString())",
      "right" : "if (right.isTypeOf() && left.isString())",
      "info" : "IfStatement[19856-19964]:IfStatement[19856-19964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19897-19964]:Block[19897-19964]"
    }, {
      "left" : "checkTypeofString(t, left, left.getString());",
      "right" : "checkTypeofString(t, left, left.getString());",
      "info" : "ExpressionStatement[19909-19954]:ExpressionStatement[19909-19954]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[19974-20001]:ExpressionStatement[19974-20001]"
    }, {
      "left" : "rightType = getJSType(right);",
      "right" : "rightType = getJSType(right);",
      "info" : "ExpressionStatement[20010-20039]:ExpressionStatement[20010-20039]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20523-20591]:VariableDeclarationStatement[20523-20591]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20600-20670]:VariableDeclarationStatement[20600-20670]"
    }, {
      "left" : "TernaryValue result = TernaryValue.UNKNOWN;",
      "right" : "TernaryValue result = TernaryValue.UNKNOWN;",
      "info" : "VariableDeclarationStatement[20680-20723]:VariableDeclarationStatement[20680-20723]"
    }, {
      "left" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
      "right" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
      "info" : "IfStatement[20732-21215]:IfStatement[20732-21215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20788-20948]:Block[20788-20948]"
    }, {
      "left" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "right" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "info" : "ExpressionStatement[20800-20865]:ExpressionStatement[20800-20865]"
    }, {
      "left" : "if (n.isNE())",
      "right" : "if (n.isNE())",
      "info" : "IfStatement[20876-20938]:IfStatement[20876-20938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20890-20938]:Block[20890-20938]"
    }, {
      "left" : "result = result.not();",
      "right" : "result = result.not();",
      "info" : "ExpressionStatement[20904-20926]:ExpressionStatement[20904-20926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20954-21215]:Block[20954-21215]"
    }, {
      "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
      "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
      "info" : "IfStatement[20992-21205]:IfStatement[20992-21205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21087-21205]:Block[21087-21205]"
    }, {
      "left" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
      "right" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
      "info" : "ExpressionStatement[21101-21193]:ExpressionStatement[21101-21193]"
    }, {
      "left" : "if (result != TernaryValue.UNKNOWN)",
      "right" : "if (result != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[21225-21392]:IfStatement[21225-21392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21261-21392]:Block[21261-21392]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "info" : "ExpressionStatement[21273-21382]:ExpressionStatement[21273-21382]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[21401-21433]:ExpressionStatement[21401-21433]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21442-21448]:BreakStatement[21442-21448]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[21464-21478]:SwitchCase[21464-21478]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[21485-21499]:SwitchCase[21485-21499]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[21506-21520]:SwitchCase[21506-21520]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[21527-21541]:SwitchCase[21527-21541]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[21550-21590]:ExpressionStatement[21550-21590]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[21599-21639]:ExpressionStatement[21599-21639]"
    }, {
      "left" : "if (rightType.isNumber())",
      "right" : "if (rightType.isNumber())",
      "info" : "IfStatement[21648-22721]:IfStatement[21648-22721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21674-21785]:Block[21674-21785]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "info" : "ExpressionStatement[21686-21775]:ExpressionStatement[21686-21775]"
    }, {
      "left" : "if (leftType.isNumber())",
      "right" : "if (leftType.isNumber())",
      "info" : "IfStatement[21791-22721]:IfStatement[21791-22721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21816-21929]:Block[21816-21929]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "info" : "ExpressionStatement[21828-21919]:ExpressionStatement[21828-21919]"
    }, {
      "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "info" : "IfStatement[21935-22721]:IfStatement[21935-22721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22027-22055]:Block[22027-22055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22061-22721]:Block[22061-22721]"
    }, {
      "left" : "String message = \"left side of comparison\";",
      "right" : "String message = \"left side of comparison\";",
      "info" : "VariableDeclarationStatement[22272-22315]:VariableDeclarationStatement[22272-22315]"
    }, {
      "left" : "validator.expectString(t, n, leftType, message);",
      "right" : "validator.expectString(t, n, leftType, message);",
      "info" : "ExpressionStatement[22326-22374]:ExpressionStatement[22326-22374]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[22385-22488]:ExpressionStatement[22385-22488]"
    }, {
      "left" : "message = \"right side of comparison\";",
      "right" : "message = \"right side of comparison\";",
      "info" : "ExpressionStatement[22499-22536]:ExpressionStatement[22499-22536]"
    }, {
      "left" : "validator.expectString(t, n, rightType, message);",
      "right" : "validator.expectString(t, n, rightType, message);",
      "info" : "ExpressionStatement[22547-22596]:ExpressionStatement[22547-22596]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[22607-22711]:ExpressionStatement[22607-22711]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[22730-22762]:ExpressionStatement[22730-22762]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22771-22777]:BreakStatement[22771-22777]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[22785-22799]:SwitchCase[22785-22799]"
    }, {
      "left" : "validator.expectObject(t, n, getJSType(n.getLastChild()),\n                               \"'in' requires an object\");",
      "right" : "validator.expectObject(t, n, getJSType(n.getLastChild()),\n                               \"'in' requires an object\");",
      "info" : "ExpressionStatement[22808-22924]:ExpressionStatement[22808-22924]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[22933-22958]:ExpressionStatement[22933-22958]"
    }, {
      "left" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
      "right" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
      "info" : "ExpressionStatement[22967-23037]:ExpressionStatement[22967-23037]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23046-23078]:ExpressionStatement[23046-23078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23087-23093]:BreakStatement[23087-23093]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[23101-23123]:SwitchCase[23101-23123]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[23132-23157]:ExpressionStatement[23132-23157]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[23166-23191]:ExpressionStatement[23166-23191]"
    }, {
      "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[23200-23260]:ExpressionStatement[23200-23260]"
    }, {
      "left" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
      "right" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
      "info" : "ExpressionStatement[23269-23375]:ExpressionStatement[23269-23375]"
    }, {
      "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "info" : "ExpressionStatement[23384-23480]:ExpressionStatement[23384-23480]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23489-23521]:ExpressionStatement[23489-23521]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23530-23536]:BreakStatement[23530-23536]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[23544-23562]:SwitchCase[23544-23562]"
    }, {
      "left" : "visitAssign(t, n);",
      "right" : "visitAssign(t, n);",
      "info" : "ExpressionStatement[23571-23589]:ExpressionStatement[23571-23589]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[23598-23615]:ExpressionStatement[23598-23615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23624-23630]:BreakStatement[23624-23630]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[23638-23660]:SwitchCase[23638-23660]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[23667-23689]:SwitchCase[23667-23689]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[23696-23719]:SwitchCase[23696-23719]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[23726-23748]:SwitchCase[23726-23748]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[23755-23777]:SwitchCase[23755-23777]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[23784-23808]:SwitchCase[23784-23808]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[23815-23840]:SwitchCase[23815-23840]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[23847-23872]:SwitchCase[23847-23872]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[23879-23901]:SwitchCase[23879-23901]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[23908-23930]:SwitchCase[23908-23930]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[23937-23959]:SwitchCase[23937-23959]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[23966-23981]:SwitchCase[23966-23981]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[23988-24003]:SwitchCase[23988-24003]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[24010-24026]:SwitchCase[24010-24026]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[24033-24048]:SwitchCase[24033-24048]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[24055-24070]:SwitchCase[24055-24070]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[24077-24094]:SwitchCase[24077-24094]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[24101-24119]:SwitchCase[24101-24119]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[24126-24144]:SwitchCase[24126-24144]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[24151-24166]:SwitchCase[24151-24166]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[24173-24188]:SwitchCase[24173-24188]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[24195-24210]:SwitchCase[24195-24210]"
    }, {
      "left" : "visitBinaryOperator(n.getType(), t, n);",
      "right" : "visitBinaryOperator(n.getType(), t, n);",
      "info" : "ExpressionStatement[24219-24258]:ExpressionStatement[24219-24258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24267-24273]:BreakStatement[24267-24273]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[24281-24300]:SwitchCase[24281-24300]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[24309-24341]:ExpressionStatement[24309-24341]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24350-24356]:BreakStatement[24350-24356]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[24364-24380]:SwitchCase[24364-24380]"
    }, {
      "left" : "JSType switchType = getJSType(parent.getFirstChild());",
      "right" : "JSType switchType = getJSType(parent.getFirstChild());",
      "info" : "VariableDeclarationStatement[24389-24443]:VariableDeclarationStatement[24389-24443]"
    }, {
      "left" : "JSType caseType = getJSType(n.getFirstChild());",
      "right" : "JSType caseType = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[24452-24499]:VariableDeclarationStatement[24452-24499]"
    }, {
      "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "info" : "ExpressionStatement[24508-24570]:ExpressionStatement[24508-24570]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24579-24596]:ExpressionStatement[24579-24596]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24605-24611]:BreakStatement[24605-24611]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[24619-24635]:SwitchCase[24619-24635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24636-24844]:Block[24636-24844]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24646-24677]:VariableDeclarationStatement[24646-24677]"
    }, {
      "left" : "childType = getJSType(child);",
      "right" : "childType = getJSType(child);",
      "info" : "ExpressionStatement[24686-24715]:ExpressionStatement[24686-24715]"
    }, {
      "left" : "validator.expectObject(t, child, childType, \"with requires an object\");",
      "right" : "validator.expectObject(t, child, childType, \"with requires an object\");",
      "info" : "ExpressionStatement[24724-24795]:ExpressionStatement[24724-24795]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24804-24821]:ExpressionStatement[24804-24821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24830-24836]:BreakStatement[24830-24836]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[24852-24872]:SwitchCase[24852-24872]"
    }, {
      "left" : "visitFunction(t, n);",
      "right" : "visitFunction(t, n);",
      "info" : "ExpressionStatement[24881-24901]:ExpressionStatement[24881-24901]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24910-24916]:BreakStatement[24910-24916]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[24980-24997]:SwitchCase[24980-24997]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[25004-25026]:SwitchCase[25004-25026]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[25033-25051]:SwitchCase[25033-25051]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[25058-25075]:SwitchCase[25058-25075]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[25082-25099]:SwitchCase[25082-25099]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[25106-25121]:SwitchCase[25106-25121]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[25128-25146]:SwitchCase[25128-25146]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[25153-25176]:SwitchCase[25153-25176]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[25183-25200]:SwitchCase[25183-25200]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[25207-25224]:SwitchCase[25207-25224]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[25231-25255]:SwitchCase[25231-25255]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[25262-25282]:SwitchCase[25262-25282]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[25289-25309]:SwitchCase[25289-25309]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[25316-25333]:SwitchCase[25316-25333]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25342-25359]:ExpressionStatement[25342-25359]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25368-25374]:BreakStatement[25368-25374]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25431-25445]:SwitchCase[25431-25445]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25452-25467]:SwitchCase[25452-25467]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[25474-25488]:SwitchCase[25474-25488]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25495-25512]:SwitchCase[25495-25512]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25521-25538]:ExpressionStatement[25521-25538]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25547-25553]:BreakStatement[25547-25553]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[25619-25634]:SwitchCase[25619-25634]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[25641-25657]:SwitchCase[25641-25657]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[25664-25685]:SwitchCase[25664-25685]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[25692-25706]:SwitchCase[25692-25706]"
    }, {
      "left" : "if (n.getJSType() != null)",
      "right" : "if (n.getJSType() != null)",
      "info" : "IfStatement[25715-26120]:IfStatement[25715-26120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25742-25818]:Block[25742-25818]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[25790-25808]:ExpressionStatement[25790-25808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25824-26120]:Block[25824-26120]"
    }, {
      "left" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
      "right" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
      "info" : "IfStatement[25915-26110]:IfStatement[25915-26110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25996-26060]:Block[25996-26060]"
    }, {
      "left" : "ensureTyped(t, n, parent.getJSType());",
      "right" : "ensureTyped(t, n, parent.getJSType());",
      "info" : "ExpressionStatement[26010-26048]:ExpressionStatement[26010-26048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26066-26110]:Block[26066-26110]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[26080-26098]:ExpressionStatement[26080-26098]"
    }, {
      "left" : "if (n.isObjectLit())",
      "right" : "if (n.isObjectLit())",
      "info" : "IfStatement[26129-26254]:IfStatement[26129-26254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26150-26254]:Block[26150-26254]"
    }, {
      "left" : "for (Node key : n.children())",
      "right" : "for (Node key : n.children())",
      "info" : "EnhancedForStatement[26162-26244]:EnhancedForStatement[26162-26244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26192-26244]:Block[26192-26244]"
    }, {
      "left" : "visitObjLitKey(t, key, n);",
      "right" : "visitObjLitKey(t, key, n);",
      "info" : "ExpressionStatement[26206-26232]:ExpressionStatement[26206-26232]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26263-26269]:BreakStatement[26263-26269]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26277-26285]:SwitchCase[26277-26285]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "info" : "ExpressionStatement[26294-26350]:ExpressionStatement[26294-26350]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[26359-26377]:ExpressionStatement[26359-26377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26386-26392]:BreakStatement[26386-26392]"
    }, {
      "left" : "typeable = typeable && !inExterns;",
      "right" : "typeable = typeable && !inExterns;",
      "info" : "ExpressionStatement[26481-26515]:ExpressionStatement[26481-26515]"
    }, {
      "left" : "if (typeable)",
      "right" : "if (typeable)",
      "info" : "IfStatement[26521-26580]:IfStatement[26521-26580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26535-26580]:Block[26535-26580]"
    }, {
      "left" : "doPercentTypedAccounting(t, n);",
      "right" : "doPercentTypedAccounting(t, n);",
      "info" : "ExpressionStatement[26543-26574]:ExpressionStatement[26543-26574]"
    }, {
      "left" : "checkNoTypeCheckSection(n, false);",
      "right" : "checkNoTypeCheckSection(n, false);",
      "info" : "ExpressionStatement[26586-26620]:ExpressionStatement[26586-26620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26694-26945]:Block[26694-26945]"
    }, {
      "left" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
      "right" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
      "info" : "IfStatement[26700-26941]:IfStatement[26700-26941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26886-26941]:Block[26886-26941]"
    }, {
      "left" : "validator.expectValidTypeofName(t, n, s);",
      "right" : "validator.expectValidTypeofName(t, n, s);",
      "info" : "ExpressionStatement[26894-26935]:ExpressionStatement[26894-26935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27118-27439]:Block[27118-27439]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[27124-27152]:VariableDeclarationStatement[27124-27152]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[27157-27435]:IfStatement[27157-27435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27175-27201]:Block[27175-27201]"
    }, {
      "left" : "nullCount++;",
      "right" : "nullCount++;",
      "info" : "ExpressionStatement[27183-27195]:ExpressionStatement[27183-27195]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[27207-27435]:IfStatement[27207-27435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27233-27402]:Block[27233-27402]"
    }, {
      "left" : "if (reportUnknownTypes.isOn())",
      "right" : "if (reportUnknownTypes.isOn())",
      "info" : "IfStatement[27241-27374]:IfStatement[27241-27374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27272-27374]:Block[27272-27374]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "info" : "ExpressionStatement[27282-27366]:ExpressionStatement[27282-27366]"
    }, {
      "left" : "unknownCount++;",
      "right" : "unknownCount++;",
      "info" : "ExpressionStatement[27381-27396]:ExpressionStatement[27381-27396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27408-27435]:Block[27408-27435]"
    }, {
      "left" : "typedCount++;",
      "right" : "typedCount++;",
      "info" : "ExpressionStatement[27416-27429]:ExpressionStatement[27416-27429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27818-31697]:Block[27818-31697]"
    }, {
      "left" : "JSDocInfo info = assign.getJSDocInfo();",
      "right" : "JSDocInfo info = assign.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[27824-27863]:VariableDeclarationStatement[27824-27863]"
    }, {
      "left" : "Node lvalue = assign.getFirstChild();",
      "right" : "Node lvalue = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[27868-27905]:VariableDeclarationStatement[27868-27905]"
    }, {
      "left" : "Node rvalue = assign.getLastChild();",
      "right" : "Node rvalue = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[27910-27946]:VariableDeclarationStatement[27910-27946]"
    }, {
      "left" : "if (lvalue.isGetProp())",
      "right" : "if (lvalue.isGetProp())",
      "info" : "IfStatement[28024-30471]:IfStatement[28024-30471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28048-30471]:Block[28048-30471]"
    }, {
      "left" : "Node object = lvalue.getFirstChild();",
      "right" : "Node object = lvalue.getFirstChild();",
      "info" : "VariableDeclarationStatement[28056-28093]:VariableDeclarationStatement[28056-28093]"
    }, {
      "left" : "JSType objectJsType = getJSType(object);",
      "right" : "JSType objectJsType = getJSType(object);",
      "info" : "VariableDeclarationStatement[28100-28140]:VariableDeclarationStatement[28100-28140]"
    }, {
      "left" : "String property = lvalue.getLastChild().getString();",
      "right" : "String property = lvalue.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[28147-28199]:VariableDeclarationStatement[28147-28199]"
    }, {
      "left" : "if (object.isGetProp())",
      "right" : "if (object.isGetProp())",
      "info" : "IfStatement[28327-28612]:IfStatement[28327-28612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28351-28612]:Block[28351-28612]"
    }, {
      "left" : "JSType jsType = getJSType(object.getFirstChild());",
      "right" : "JSType jsType = getJSType(object.getFirstChild());",
      "info" : "VariableDeclarationStatement[28361-28411]:VariableDeclarationStatement[28361-28411]"
    }, {
      "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[28420-28604]:IfStatement[28420-28604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28515-28604]:Block[28515-28604]"
    }, {
      "left" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "right" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "info" : "ExpressionStatement[28527-28594]:ExpressionStatement[28527-28594]"
    }, {
      "left" : "checkEnumAlias(t, info, rvalue);",
      "right" : "checkEnumAlias(t, info, rvalue);",
      "info" : "ExpressionStatement[28620-28652]:ExpressionStatement[28620-28652]"
    }, {
      "left" : "if (property.equals(\"prototype\"))",
      "right" : "if (property.equals(\"prototype\"))",
      "info" : "IfStatement[28908-29347]:IfStatement[28908-29347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28942-29347]:Block[28942-29347]"
    }, {
      "left" : "if (objectJsType != null && objectJsType.isFunctionType())",
      "right" : "if (objectJsType != null && objectJsType.isFunctionType())",
      "info" : "IfStatement[28952-29339]:IfStatement[28952-29339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29011-29339]:Block[29011-29339]"
    }, {
      "left" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[29023-29086]:VariableDeclarationStatement[29023-29086]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[29097-29329]:IfStatement[29097-29329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29131-29329]:Block[29131-29329]"
    }, {
      "left" : "JSType rvalueType = rvalue.getJSType();",
      "right" : "JSType rvalueType = rvalue.getJSType();",
      "info" : "VariableDeclarationStatement[29145-29184]:VariableDeclarationStatement[29145-29184]"
    }, {
      "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "info" : "ExpressionStatement[29197-29297]:ExpressionStatement[29197-29297]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29310-29317]:ReturnStatement[29310-29317]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[29504-29594]:VariableDeclarationStatement[29504-29594]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[29601-30197]:IfStatement[29601-30197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29619-30197]:Block[29619-30197]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[29629-30189]:IfStatement[29629-30189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29770-30189]:Block[29770-30189]"
    }, {
      "left" : "JSType expectedType = type.getPropertyType(property);",
      "right" : "JSType expectedType = type.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[29782-29835]:VariableDeclarationStatement[29782-29835]"
    }, {
      "left" : "if (!expectedType.isUnknownType())",
      "right" : "if (!expectedType.isUnknownType())",
      "info" : "IfStatement[29846-30179]:IfStatement[29846-30179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29881-30179]:Block[29881-30179]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, property);",
      "info" : "ExpressionStatement[29895-30028]:ExpressionStatement[29895-30028]"
    }, {
      "left" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, property, info, expectedType);",
      "right" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, property, info, expectedType);",
      "info" : "ExpressionStatement[30041-30147]:ExpressionStatement[30041-30147]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30160-30167]:ReturnStatement[30160-30167]"
    }, {
      "left" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, property, info, getNativeType(UNKNOWN_TYPE));",
      "right" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, property, info, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[30350-30465]:ExpressionStatement[30350-30465]"
    }, {
      "left" : "JSType leftType = getJSType(lvalue);",
      "right" : "JSType leftType = getJSType(lvalue);",
      "info" : "VariableDeclarationStatement[30720-30756]:VariableDeclarationStatement[30720-30756]"
    }, {
      "left" : "if (lvalue.isQualifiedName())",
      "right" : "if (lvalue.isQualifiedName())",
      "info" : "IfStatement[30761-31351]:IfStatement[30761-31351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30791-31351]:Block[30791-31351]"
    }, {
      "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "info" : "VariableDeclarationStatement[30841-30894]:VariableDeclarationStatement[30841-30894]"
    }, {
      "left" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
      "right" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[30901-30958]:VariableDeclarationStatement[30901-30958]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[30965-31345]:IfStatement[30965-31345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30982-31345]:Block[30982-31345]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[30992-31047]:IfStatement[30992-31047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31018-31047]:Block[31018-31047]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31030-31037]:ReturnStatement[31030-31037]"
    }, {
      "left" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
      "right" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
      "info" : "IfStatement[31057-31253]:IfStatement[31057-31253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31157-31253]:Block[31157-31253]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31236-31243]:ReturnStatement[31236-31243]"
    }, {
      "left" : "if (var.getType() != null)",
      "right" : "if (var.getType() != null)",
      "info" : "IfStatement[31263-31337]:IfStatement[31263-31337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31290-31337]:Block[31290-31337]"
    }, {
      "left" : "leftType = var.getType();",
      "right" : "leftType = var.getType();",
      "info" : "ExpressionStatement[31302-31327]:ExpressionStatement[31302-31327]"
    }, {
      "left" : "Node rightChild = assign.getLastChild();",
      "right" : "Node rightChild = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[31419-31459]:VariableDeclarationStatement[31419-31459]"
    }, {
      "left" : "JSType rightType = getJSType(rightChild);",
      "right" : "JSType rightType = getJSType(rightChild);",
      "info" : "VariableDeclarationStatement[31464-31505]:VariableDeclarationStatement[31464-31505]"
    }, {
      "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "info" : "IfStatement[31510-31693]:IfStatement[31510-31693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31602-31650]:Block[31602-31650]"
    }, {
      "left" : "ensureTyped(t, assign, rightType);",
      "right" : "ensureTyped(t, assign, rightType);",
      "info" : "ExpressionStatement[31610-31644]:ExpressionStatement[31610-31644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31656-31693]:Block[31656-31693]"
    }, {
      "left" : "ensureTyped(t, assign);",
      "right" : "ensureTyped(t, assign);",
      "info" : "ExpressionStatement[31664-31687]:ExpressionStatement[31664-31687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31864-32943]:Block[31864-32943]"
    }, {
      "left" : "if (object.isGetProp())",
      "right" : "if (object.isGetProp())",
      "info" : "IfStatement[32371-32939]:IfStatement[32371-32939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32395-32939]:Block[32395-32939]"
    }, {
      "left" : "Node object2 = object.getFirstChild();",
      "right" : "Node object2 = object.getFirstChild();",
      "info" : "VariableDeclarationStatement[32403-32441]:VariableDeclarationStatement[32403-32441]"
    }, {
      "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "info" : "VariableDeclarationStatement[32448-32514]:VariableDeclarationStatement[32448-32514]"
    }, {
      "left" : "if (\"prototype\".equals(property2))",
      "right" : "if (\"prototype\".equals(property2))",
      "info" : "IfStatement[32522-32933]:IfStatement[32522-32933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32557-32933]:Block[32557-32933]"
    }, {
      "left" : "JSType jsType = getJSType(object2);",
      "right" : "JSType jsType = getJSType(object2);",
      "info" : "VariableDeclarationStatement[32567-32602]:VariableDeclarationStatement[32567-32602]"
    }, {
      "left" : "if (jsType.isFunctionType())",
      "right" : "if (jsType.isFunctionType())",
      "info" : "IfStatement[32611-32925]:IfStatement[32611-32925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32640-32925]:Block[32640-32925]"
    }, {
      "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[32652-32709]:VariableDeclarationStatement[32652-32709]"
    }, {
      "left" : "if (functionType.isConstructor() || functionType.isInterface())",
      "right" : "if (functionType.isConstructor() || functionType.isInterface())",
      "info" : "IfStatement[32720-32915]:IfStatement[32720-32915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32784-32915]:Block[32784-32915]"
    }, {
      "left" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
      "right" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
      "info" : "ExpressionStatement[32798-32903]:ExpressionStatement[32798-32903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33296-35336]:Block[33296-35336]"
    }, {
      "left" : "if (objlit.isFromExterns())",
      "right" : "if (objlit.isFromExterns())",
      "info" : "IfStatement[33433-33509]:IfStatement[33433-33509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33461-33509]:Block[33461-33509]"
    }, {
      "left" : "ensureTyped(t, key);",
      "right" : "ensureTyped(t, key);",
      "info" : "ExpressionStatement[33469-33489]:ExpressionStatement[33469-33489]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33496-33503]:ReturnStatement[33496-33503]"
    }, {
      "left" : "Node rvalue = key.getFirstChild();",
      "right" : "Node rvalue = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[33743-33777]:VariableDeclarationStatement[33743-33777]"
    }, {
      "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "info" : "VariableDeclarationStatement[33782-33876]:VariableDeclarationStatement[33782-33876]"
    }, {
      "left" : "if (rightType == null)",
      "right" : "if (rightType == null)",
      "info" : "IfStatement[33881-33958]:IfStatement[33881-33958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33904-33958]:Block[33904-33958]"
    }, {
      "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[33912-33952]:ExpressionStatement[33912-33952]"
    }, {
      "left" : "Node owner = objlit;",
      "right" : "Node owner = objlit;",
      "info" : "VariableDeclarationStatement[33964-33984]:VariableDeclarationStatement[33964-33984]"
    }, {
      "left" : "JSType keyType = getJSType(key);",
      "right" : "JSType keyType = getJSType(key);",
      "info" : "VariableDeclarationStatement[34044-34076]:VariableDeclarationStatement[34044-34076]"
    }, {
      "left" : "JSType allowedValueType = keyType;",
      "right" : "JSType allowedValueType = keyType;",
      "info" : "VariableDeclarationStatement[34082-34116]:VariableDeclarationStatement[34082-34116]"
    }, {
      "left" : "if (allowedValueType.isEnumElementType())",
      "right" : "if (allowedValueType.isEnumElementType())",
      "info" : "IfStatement[34121-34267]:IfStatement[34121-34267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34163-34267]:Block[34163-34267]"
    }, {
      "left" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
      "right" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
      "info" : "ExpressionStatement[34171-34261]:ExpressionStatement[34171-34261]"
    }, {
      "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "info" : "VariableDeclarationStatement[34273-34422]:VariableDeclarationStatement[34273-34422]"
    }, {
      "left" : "if (valid)",
      "right" : "if (valid)",
      "info" : "IfStatement[34427-34523]:IfStatement[34427-34523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34438-34483]:Block[34438-34483]"
    }, {
      "left" : "ensureTyped(t, key, rightType);",
      "right" : "ensureTyped(t, key, rightType);",
      "info" : "ExpressionStatement[34446-34477]:ExpressionStatement[34446-34477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34489-34523]:Block[34489-34523]"
    }, {
      "left" : "ensureTyped(t, key);",
      "right" : "ensureTyped(t, key);",
      "info" : "ExpressionStatement[34497-34517]:ExpressionStatement[34497-34517]"
    }, {
      "left" : "JSType objlitType = getJSType(objlit);",
      "right" : "JSType objlitType = getJSType(objlit);",
      "info" : "VariableDeclarationStatement[34809-34847]:VariableDeclarationStatement[34809-34847]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[34852-34938]:VariableDeclarationStatement[34852-34938]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[34943-35332]:IfStatement[34943-35332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34961-35332]:Block[34961-35332]"
    }, {
      "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "info" : "VariableDeclarationStatement[34969-35021]:VariableDeclarationStatement[34969-35021]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[35028-35312]:IfStatement[35028-35312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35165-35312]:Block[35165-35312]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "info" : "ExpressionStatement[35175-35304]:ExpressionStatement[35175-35304]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35319-35326]:ReturnStatement[35319-35326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35524-35764]:Block[35524-35764]"
    }, {
      "left" : "for (; type != null; type = type.getImplicitPrototype())",
      "right" : "for (; type != null; type = type.getImplicitPrototype())",
      "info" : "ForStatement[35530-35742]:ForStatement[35530-35742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35587-35742]:Block[35587-35742]"
    }, {
      "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "info" : "VariableDeclarationStatement[35595-35650]:VariableDeclarationStatement[35595-35650]"
    }, {
      "left" : "if (docInfo != null && docInfo.isImplicitCast())",
      "right" : "if (docInfo != null && docInfo.isImplicitCast())",
      "info" : "IfStatement[35657-35736]:IfStatement[35657-35736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35706-35736]:Block[35706-35736]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35716-35728]:ReturnStatement[35716-35728]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35747-35760]:ReturnStatement[35747-35760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36185-40922]:Block[36185-40922]"
    }, {
      "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "info" : "IfStatement[36282-36345]:IfStatement[36282-36345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36324-36345]:Block[36324-36345]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36332-36339]:ReturnStatement[36332-36339]"
    }, {
      "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[36351-36413]:VariableDeclarationStatement[36351-36413]"
    }, {
      "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
      "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[36418-36535]:VariableDeclarationStatement[36418-36535]"
    }, {
      "left" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
      "right" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
      "info" : "VariableDeclarationStatement[36540-36676]:VariableDeclarationStatement[36540-36676]"
    }, {
      "left" : "boolean superInterfaceHasProperty = false;",
      "right" : "boolean superInterfaceHasProperty = false;",
      "info" : "VariableDeclarationStatement[36703-36745]:VariableDeclarationStatement[36703-36745]"
    }, {
      "left" : "boolean superInterfaceHasDeclaredProperty = false;",
      "right" : "boolean superInterfaceHasDeclaredProperty = false;",
      "info" : "VariableDeclarationStatement[36750-36800]:VariableDeclarationStatement[36750-36800]"
    }, {
      "left" : "if (ctorType.isInterface())",
      "right" : "if (ctorType.isInterface())",
      "info" : "IfStatement[36805-37209]:IfStatement[36805-37209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36833-37209]:Block[36833-37209]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[36841-37203]:EnhancedForStatement[36841-37203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36907-37203]:Block[36907-37203]"
    }, {
      "left" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
      "right" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
      "info" : "ExpressionStatement[36917-37038]:ExpressionStatement[36917-37038]"
    }, {
      "left" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
      "right" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
      "info" : "ExpressionStatement[37047-37195]:ExpressionStatement[37047-37195]"
    }, {
      "left" : "boolean declaredOverride = info != null && info.isOverride();",
      "right" : "boolean declaredOverride = info != null && info.isOverride();",
      "info" : "VariableDeclarationStatement[37214-37275]:VariableDeclarationStatement[37214-37275]"
    }, {
      "left" : "boolean foundInterfaceProperty = false;",
      "right" : "boolean foundInterfaceProperty = false;",
      "info" : "VariableDeclarationStatement[37281-37320]:VariableDeclarationStatement[37281-37320]"
    }, {
      "left" : "if (ctorType.isConstructor())",
      "right" : "if (ctorType.isConstructor())",
      "info" : "IfStatement[37325-38373]:IfStatement[37325-38373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37355-38373]:Block[37355-38373]"
    }, {
      "left" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "right" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "info" : "EnhancedForStatement[37363-38367]:EnhancedForStatement[37363-38367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37448-38367]:Block[37448-38367]"
    }, {
      "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "info" : "IfStatement[37458-37581]:IfStatement[37458-37581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37550-37581]:Block[37550-37581]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37562-37571]:ContinueStatement[37562-37571]"
    }, {
      "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[37590-37684]:VariableDeclarationStatement[37590-37684]"
    }, {
      "left" : "Preconditions.checkNotNull(interfaceType);",
      "right" : "Preconditions.checkNotNull(interfaceType);",
      "info" : "ExpressionStatement[37693-37735]:ExpressionStatement[37693-37735]"
    }, {
      "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[37745-37843]:VariableDeclarationStatement[37745-37843]"
    }, {
      "left" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
      "right" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
      "info" : "ExpressionStatement[37852-37936]:ExpressionStatement[37852-37936]"
    }, {
      "left" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
      "right" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
      "info" : "IfStatement[37945-38359]:IfStatement[37945-38359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38048-38359]:Block[38048-38359]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "info" : "ExpressionStatement[38162-38349]:ExpressionStatement[38162-38349]"
    }, {
      "left" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "right" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "info" : "IfStatement[38379-38555]:IfStatement[38379-38555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38474-38555]:Block[38474-38555]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38542-38549]:ReturnStatement[38542-38549]"
    }, {
      "left" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "right" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "info" : "VariableDeclarationStatement[38561-38685]:VariableDeclarationStatement[38561-38685]"
    }, {
      "left" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
      "right" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
      "info" : "VariableDeclarationStatement[38690-38883]:VariableDeclarationStatement[38690-38883]"
    }, {
      "left" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
      "right" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
      "info" : "IfStatement[38888-39272]:IfStatement[38888-39272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39019-39272]:Block[39019-39272]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "info" : "ExpressionStatement[39121-39266]:ExpressionStatement[39121-39266]"
    }, {
      "left" : "if (superClassHasDeclaredProperty)",
      "right" : "if (superClassHasDeclaredProperty)",
      "info" : "IfStatement[39341-40918]:IfStatement[39341-40918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39376-39821]:Block[39376-39821]"
    }, {
      "left" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
      "right" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[39430-39527]:VariableDeclarationStatement[39430-39527]"
    }, {
      "left" : "if (!propertyType.canAssignTo(superClassPropType))",
      "right" : "if (!propertyType.canAssignTo(superClassPropType))",
      "info" : "IfStatement[39534-39815]:IfStatement[39534-39815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39585-39815]:Block[39585-39815]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "info" : "ExpressionStatement[39595-39807]:ExpressionStatement[39595-39807]"
    }, {
      "left" : "if (superInterfaceHasDeclaredProperty)",
      "right" : "if (superInterfaceHasDeclaredProperty)",
      "info" : "IfStatement[39827-40918]:IfStatement[39827-40918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39866-40608]:Block[39866-40608]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[39920-40602]:EnhancedForStatement[39920-40602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39986-40602]:Block[39986-40602]"
    }, {
      "left" : "if (interfaceType.hasProperty(propertyName))",
      "right" : "if (interfaceType.hasProperty(propertyName))",
      "info" : "IfStatement[39996-40594]:IfStatement[39996-40594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40041-40594]:Block[40041-40594]"
    }, {
      "left" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
      "right" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[40053-40138]:VariableDeclarationStatement[40053-40138]"
    }, {
      "left" : "if (!propertyType.canAssignTo(superPropertyType))",
      "right" : "if (!propertyType.canAssignTo(superPropertyType))",
      "info" : "IfStatement[40149-40584]:IfStatement[40149-40584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40199-40584]:Block[40199-40584]"
    }, {
      "left" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "right" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "info" : "ExpressionStatement[40213-40316]:ExpressionStatement[40213-40316]"
    }, {
      "left" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "right" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "info" : "ExpressionStatement[40329-40572]:ExpressionStatement[40329-40572]"
    }, {
      "left" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "right" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "info" : "IfStatement[40614-40918]:IfStatement[40614-40918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40715-40918]:Block[40715-40918]"
    }, {
      "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "info" : "ExpressionStatement[40784-40912]:ExpressionStatement[40784-40912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41129-41875]:Block[41129-41875]"
    }, {
      "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[41135-41207]:ExpressionStatement[41135-41207]"
    }, {
      "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "info" : "ExpressionStatement[41212-41263]:ExpressionStatement[41212-41263]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[41364-41871]:WhileStatement[41364-41871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41377-41871]:Block[41377-41871]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[41385-41474]:VariableDeclarationStatement[41385-41474]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[41481-41548]:IfStatement[41481-41548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41517-41548]:Block[41517-41548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41527-41540]:ReturnStatement[41527-41540]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "info" : "IfStatement[41555-41679]:IfStatement[41555-41679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41649-41679]:Block[41649-41679]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41659-41671]:ReturnStatement[41659-41671]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[41686-41733]:ExpressionStatement[41686-41733]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[41740-41789]:IfStatement[41740-41789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41758-41789]:Block[41758-41789]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41768-41781]:ReturnStatement[41768-41781]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[41796-41865]:ExpressionStatement[41796-41865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42127-43082]:Block[42127-43082]"
    }, {
      "left" : "JSType rvalueType = getJSType(rvalue);",
      "right" : "JSType rvalueType = getJSType(rvalue);",
      "info" : "VariableDeclarationStatement[42134-42172]:VariableDeclarationStatement[42134-42172]"
    }, {
      "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "info" : "VariableDeclarationStatement[42371-42462]:VariableDeclarationStatement[42371-42462]"
    }, {
      "left" : "if (!rvalueType.isFunctionType())",
      "right" : "if (!rvalueType.isFunctionType())",
      "info" : "IfStatement[42467-42834]:IfStatement[42467-42834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42501-42834]:Block[42501-42834]"
    }, {
      "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "info" : "VariableDeclarationStatement[42584-42698]:VariableDeclarationStatement[42584-42698]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "info" : "ExpressionStatement[42705-42828]:ExpressionStatement[42705-42828]"
    }, {
      "left" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "right" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "info" : "IfStatement[42840-43078]:IfStatement[42840-43078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42952-43078]:Block[42952-43078]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "info" : "ExpressionStatement[42960-43072]:ExpressionStatement[42960-43072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43459-44499]:Block[43459-44499]"
    }, {
      "left" : "int parentNodeType = parent.getType();",
      "right" : "int parentNodeType = parent.getType();",
      "info" : "VariableDeclarationStatement[43917-43955]:VariableDeclarationStatement[43917-43955]"
    }, {
      "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
      "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
      "info" : "IfStatement[43960-44151]:IfStatement[43960-44151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44124-44151]:Block[44124-44151]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44132-44145]:ReturnStatement[44132-44145]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[44157-44185]:VariableDeclarationStatement[44157-44185]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[44190-44449]:IfStatement[44190-44449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44208-44449]:Block[44208-44449]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[44216-44251]:ExpressionStatement[44216-44251]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[44258-44303]:VariableDeclarationStatement[44258-44303]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[44310-44443]:IfStatement[44310-44443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44327-44443]:Block[44327-44443]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[44337-44368]:VariableDeclarationStatement[44337-44368]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[44377-44435]:IfStatement[44377-44435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44398-44435]:Block[44398-44435]"
    }, {
      "left" : "type = varType;",
      "right" : "type = varType;",
      "info" : "ExpressionStatement[44410-44425]:ExpressionStatement[44410-44425]"
    }, {
      "left" : "ensureTyped(t, n, type);",
      "right" : "ensureTyped(t, n, type);",
      "info" : "ExpressionStatement[44454-44478]:ExpressionStatement[44454-44478]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44483-44495]:ReturnStatement[44483-44495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44841-45595]:Block[44841-45520]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[45053-45086]:VariableDeclarationStatement[45053-45086]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[45091-45124]:VariableDeclarationStatement[45091-45124]"
    }, {
      "left" : "JSType childType = getJSType(objNode);",
      "right" : "JSType childType = getJSType(objNode);",
      "info" : "VariableDeclarationStatement[45129-45167]:VariableDeclarationStatement[45129-45167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45197-45285]:Block[45197-45285]"
    }, {
      "left" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
      "right" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
      "info" : "ExpressionStatement[45205-45279]:ExpressionStatement[45205-45279]"
    }, {
      "left" : "if (n.getJSType() != null && parent.isAssign())",
      "right" : "if (childType.isDict())",
      "info" : "IfStatement[45291-45568]:IfStatement[45173-45493]"
    }, {
      "left" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
      "right" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[45366-45568]:IfStatement[45291-45493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45495-45568]:Block[45420-45493]"
    }, {
      "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "info" : "ExpressionStatement[45503-45562]:ExpressionStatement[45428-45487]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[45573-45591]:ExpressionStatement[45498-45516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46020-47171]:Block[45945-47096]"
    }, {
      "left" : "JSType propType = getJSType(n);",
      "right" : "JSType propType = getJSType(n);",
      "info" : "VariableDeclarationStatement[46291-46322]:VariableDeclarationStatement[46216-46247]"
    }, {
      "left" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[46327-47167]:IfStatement[46252-47092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46398-47167]:Block[46323-47092]"
    }, {
      "left" : "childType = childType.autobox();",
      "right" : "childType = childType.autobox();",
      "info" : "ExpressionStatement[46406-46438]:ExpressionStatement[46331-46363]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(childType);",
      "right" : "ObjectType objectType = ObjectType.cast(childType);",
      "info" : "VariableDeclarationStatement[46445-46496]:VariableDeclarationStatement[46370-46421]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[46503-47161]:IfStatement[46428-47086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46527-47084]:Block[46452-47009]"
    }, {
      "left" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[46718-47075]:IfStatement[46643-47000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46857-47075]:Block[46782-47000]"
    }, {
      "left" : "if (objectType instanceof EnumType)",
      "right" : "if (objectType instanceof EnumType)",
      "info" : "IfStatement[46869-47065]:IfStatement[46794-46990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46905-46979]:Block[46830-46904]"
    }, {
      "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "info" : "ExpressionStatement[46919-46967]:ExpressionStatement[46844-46892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46985-47065]:Block[46910-46990]"
    }, {
      "left" : "checkPropertyAccessHelper(objectType, propName, t, n);",
      "right" : "checkPropertyAccessHelper(objectType, propName, t, n);",
      "info" : "ExpressionStatement[46999-47053]:ExpressionStatement[46924-46978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47090-47161]:Block[47015-47086]"
    }, {
      "left" : "checkPropertyAccessHelper(childType, propName, t, n);",
      "right" : "checkPropertyAccessHelper(childType, propName, t, n);",
      "info" : "ExpressionStatement[47100-47153]:ExpressionStatement[47025-47078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47281-47587]:Block[47206-47512]"
    }, {
      "left" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties && !isPropertyTest(n))",
      "right" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties && !isPropertyTest(n))",
      "info" : "IfStatement[47287-47583]:IfStatement[47212-47508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47375-47583]:Block[47300-47508]"
    }, {
      "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "info" : "IfStatement[47383-47577]:IfStatement[47308-47502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47445-47577]:Block[47370-47502]"
    }, {
      "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n            validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n            validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "info" : "ExpressionStatement[47455-47569]:ExpressionStatement[47380-47494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47843-48546]:Block[47768-48471]"
    }, {
      "left" : "Node parent = getProp.getParent();",
      "right" : "Node parent = getProp.getParent();",
      "info" : "VariableDeclarationStatement[47849-47883]:VariableDeclarationStatement[47774-47808]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "info" : "SwitchStatement[47888-48524]:SwitchStatement[47813-48449]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[47922-47938]:SwitchCase[47847-47863]"
    }, {
      "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "info" : "ReturnStatement[47947-48065]:ReturnStatement[47872-47990]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[48073-48087]:SwitchCase[47998-48012]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[48094-48111]:SwitchCase[48019-48036]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[48118-48132]:SwitchCase[48043-48057]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[48139-48154]:SwitchCase[48064-48079]"
    }, {
      "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "info" : "ReturnStatement[48163-48221]:ReturnStatement[48088-48146]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[48229-48251]:SwitchCase[48154-48176]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[48258-48276]:SwitchCase[48183-48201]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48285-48297]:ReturnStatement[48210-48222]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[48305-48320]:SwitchCase[48230-48245]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[48327-48343]:SwitchCase[48252-48268]"
    }, {
      "left" : "return parent.getFirstChild() == getProp;",
      "right" : "return parent.getFirstChild() == getProp;",
      "info" : "ReturnStatement[48352-48393]:ReturnStatement[48277-48318]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[48401-48416]:SwitchCase[48326-48341]"
    }, {
      "left" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
      "right" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
      "info" : "ReturnStatement[48425-48518]:ReturnStatement[48350-48443]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48529-48542]:ReturnStatement[48454-48467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48827-48961]:Block[48752-48886]"
    }, {
      "left" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
      "right" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[48833-48934]:ExpressionStatement[48758-48859]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[48939-48957]:ExpressionStatement[48864-48882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49234-50247]:Block[49159-50172]"
    }, {
      "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "info" : "VariableDeclarationStatement[49402-49464]:VariableDeclarationStatement[49327-49389]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[49469-50243]:EnhancedForStatement[49394-50168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49500-50243]:Block[49425-50168]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[49508-49542]:VariableDeclarationStatement[49433-49467]"
    }, {
      "left" : "Var var = t.getScope().getVar(name.getString());",
      "right" : "Var var = t.getScope().getVar(name.getString());",
      "info" : "VariableDeclarationStatement[49619-49667]:VariableDeclarationStatement[49544-49592]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[49675-50237]:IfStatement[49600-50162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49694-50237]:Block[49619-50162]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[49704-49740]:VariableDeclarationStatement[49629-49665]"
    }, {
      "left" : "JSType nameType = var.getType();",
      "right" : "JSType nameType = var.getType();",
      "info" : "VariableDeclarationStatement[49749-49781]:VariableDeclarationStatement[49674-49706]"
    }, {
      "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "info" : "ExpressionStatement[49790-49861]:ExpressionStatement[49715-49786]"
    }, {
      "left" : "JSDocInfo info = name.getJSDocInfo();",
      "right" : "JSDocInfo info = name.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[49871-49908]:VariableDeclarationStatement[49796-49833]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[49917-49972]:IfStatement[49842-49897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49935-49972]:Block[49860-49897]"
    }, {
      "left" : "info = varInfo;",
      "right" : "info = varInfo;",
      "info" : "ExpressionStatement[49947-49962]:ExpressionStatement[49872-49887]"
    }, {
      "left" : "checkEnumAlias(t, info, value);",
      "right" : "checkEnumAlias(t, info, value);",
      "info" : "ExpressionStatement[49982-50013]:ExpressionStatement[49907-49938]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[50022-50229]:IfStatement[49947-50154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50048-50102]:Block[49973-50027]"
    }, {
      "left" : "ensureTyped(t, name, valueType);",
      "right" : "ensureTyped(t, name, valueType);",
      "info" : "ExpressionStatement[50060-50092]:ExpressionStatement[49985-50017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50108-50229]:Block[50033-50154]"
    }, {
      "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "info" : "ExpressionStatement[50120-50219]:ExpressionStatement[50045-50144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50334-50844]:Block[50259-50769]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[50340-50377]:VariableDeclarationStatement[50265-50302]"
    }, {
      "left" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
      "right" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[50382-50450]:VariableDeclarationStatement[50307-50375]"
    }, {
      "left" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
      "right" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
      "info" : "IfStatement[50455-50840]:IfStatement[50380-50765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50527-50763]:Block[50452-50688]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[50535-50584]:VariableDeclarationStatement[50460-50509]"
    }, {
      "left" : "if (fnType != null)",
      "right" : "if (fnType != null)",
      "info" : "IfStatement[50591-50757]:IfStatement[50516-50682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50611-50715]:Block[50536-50640]"
    }, {
      "left" : "visitParameterList(t, n, fnType);",
      "right" : "visitParameterList(t, n, fnType);",
      "info" : "ExpressionStatement[50621-50654]:ExpressionStatement[50546-50579]"
    }, {
      "left" : "ensureTyped(t, n, fnType.getInstanceType());",
      "right" : "ensureTyped(t, n, fnType.getInstanceType());",
      "info" : "ExpressionStatement[50663-50707]:ExpressionStatement[50588-50632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50721-50757]:Block[50646-50682]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[50731-50749]:ExpressionStatement[50656-50674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50769-50840]:Block[50694-50765]"
    }, {
      "left" : "report(t, n, NOT_A_CONSTRUCTOR);",
      "right" : "report(t, n, NOT_A_CONSTRUCTOR);",
      "info" : "ExpressionStatement[50777-50809]:ExpressionStatement[50702-50734]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[50816-50834]:ExpressionStatement[50741-50759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51592-52356]:Block[51517-52281]"
    }, {
      "left" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
      "right" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
      "info" : "VariableDeclarationStatement[51598-51666]:VariableDeclarationStatement[51523-51591]"
    }, {
      "left" : "for (String name : currentPropertyNames)",
      "right" : "for (String name : currentPropertyNames)",
      "info" : "EnhancedForStatement[51671-52165]:EnhancedForStatement[51596-52090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51712-52165]:Block[51637-52090]"
    }, {
      "left" : "ObjectType oType = properties.get(name);",
      "right" : "ObjectType oType = properties.get(name);",
      "info" : "VariableDeclarationStatement[51720-51760]:VariableDeclarationStatement[51645-51685]"
    }, {
      "left" : "if (oType != null)",
      "right" : "if (oType != null)",
      "info" : "IfStatement[51767-52109]:IfStatement[51692-52034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51786-52109]:Block[51711-52034]"
    }, {
      "left" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "right" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "info" : "IfStatement[51796-52101]:IfStatement[51721-52026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51895-52101]:Block[51820-52026]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "right" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "info" : "ExpressionStatement[51907-52091]:ExpressionStatement[51832-52016]"
    }, {
      "left" : "currentProperties.put(name, interfaceType);",
      "right" : "currentProperties.put(name, interfaceType);",
      "info" : "ExpressionStatement[52116-52159]:ExpressionStatement[52041-52084]"
    }, {
      "left" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "right" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "info" : "EnhancedForStatement[52170-52352]:EnhancedForStatement[52095-52277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52237-52352]:Block[52162-52277]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "info" : "ExpressionStatement[52245-52346]:ExpressionStatement[52170-52271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52653-56074]:Block[52578-55999]"
    }, {
      "left" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
      "right" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
      "info" : "VariableDeclarationStatement[52659-52729]:VariableDeclarationStatement[52584-52654]"
    }, {
      "left" : "String functionPrivateName = n.getFirstChild().getString();",
      "right" : "String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[52734-52793]:VariableDeclarationStatement[52659-52718]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[52798-56070]:IfStatement[52723-55995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52832-54709]:Block[52757-54634]"
    }, {
      "left" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
      "right" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[52840-52911]:VariableDeclarationStatement[52765-52836]"
    }, {
      "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface() && functionType.isConstructor())",
      "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface() && functionType.isConstructor())",
      "info" : "IfStatement[52918-54703]:IfStatement[52843-54628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53090-53240]:Block[53015-53165]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
      "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
      "info" : "ExpressionStatement[53100-53232]:ExpressionStatement[53025-53157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53246-54703]:Block[53171-54628]"
    }, {
      "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n            baseConstructor != null)",
      "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n            baseConstructor != null)",
      "info" : "IfStatement[53256-53846]:IfStatement[53181-53771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53355-53846]:Block[53280-53771]"
    }, {
      "left" : "if (functionType.makesStructs() && !baseConstructor.makesStructs())",
      "right" : "if (functionType.makesStructs() && !baseConstructor.makesStructs())",
      "info" : "IfStatement[53367-53836]:IfStatement[53292-53761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53435-53591]:Block[53360-53516]"
    }, {
      "left" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"struct\", functionPrivateName));",
      "right" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"struct\", functionPrivateName));",
      "info" : "ExpressionStatement[53449-53579]:ExpressionStatement[53374-53504]"
    }, {
      "left" : "if (functionType.makesDicts() &&\n                     !baseConstructor.makesDicts())",
      "right" : "if (functionType.makesDicts() &&\n                     !baseConstructor.makesDicts())",
      "info" : "IfStatement[53597-53836]:IfStatement[53522-53761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53682-53836]:Block[53607-53761]"
    }, {
      "left" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"dict\", functionPrivateName));",
      "right" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"dict\", functionPrivateName));",
      "info" : "ExpressionStatement[53696-53824]:ExpressionStatement[53621-53749]"
    }, {
      "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[53917-54599]:EnhancedForStatement[53842-54524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53986-54599]:Block[53911-54524]"
    }, {
      "left" : "boolean badImplementedType = false;",
      "right" : "boolean badImplementedType = false;",
      "info" : "VariableDeclarationStatement[53998-54033]:VariableDeclarationStatement[53923-53958]"
    }, {
      "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "info" : "VariableDeclarationStatement[54044-54105]:VariableDeclarationStatement[53969-54030]"
    }, {
      "left" : "if (baseInterfaceObj != null)",
      "right" : "if (baseInterfaceObj != null)",
      "info" : "IfStatement[54116-54472]:IfStatement[54041-54397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54146-54414]:Block[54071-54339]"
    }, {
      "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "info" : "VariableDeclarationStatement[54160-54244]:VariableDeclarationStatement[54085-54169]"
    }, {
      "left" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "right" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "info" : "IfStatement[54257-54402]:IfStatement[54182-54327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54346-54402]:Block[54271-54327]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[54362-54388]:ExpressionStatement[54287-54313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54420-54472]:Block[54345-54397]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[54434-54460]:ExpressionStatement[54359-54385]"
    }, {
      "left" : "if (badImplementedType)",
      "right" : "if (badImplementedType)",
      "info" : "IfStatement[54483-54589]:IfStatement[54408-54514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54507-54589]:Block[54432-54514]"
    }, {
      "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "info" : "ExpressionStatement[54521-54577]:ExpressionStatement[54446-54502]"
    }, {
      "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "info" : "ExpressionStatement[54636-54695]:ExpressionStatement[54561-54620]"
    }, {
      "left" : "if (functionType.isInterface())",
      "right" : "if (functionType.isInterface())",
      "info" : "IfStatement[54715-56070]:IfStatement[54640-55995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54747-56070]:Block[54672-55995]"
    }, {
      "left" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[54802-55148]:EnhancedForStatement[54727-55073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54871-55148]:Block[54796-55073]"
    }, {
      "left" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "right" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "info" : "IfStatement[54881-55140]:IfStatement[54806-55065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54984-55140]:Block[54909-55065]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
      "right" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
      "info" : "ExpressionStatement[54996-55130]:ExpressionStatement[54921-55055]"
    }, {
      "left" : "if (functionType.hasImplementedInterfaces())",
      "right" : "if (functionType.hasImplementedInterfaces())",
      "info" : "IfStatement[55206-55364]:IfStatement[55131-55289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55251-55364]:Block[55176-55289]"
    }, {
      "left" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
      "right" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
      "info" : "ExpressionStatement[55261-55356]:ExpressionStatement[55186-55281]"
    }, {
      "left" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "right" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "info" : "IfStatement[55437-56064]:IfStatement[55362-55989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55488-56064]:Block[55413-55989]"
    }, {
      "left" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[55560-55647]:VariableDeclarationStatement[55485-55572]"
    }, {
      "left" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[55656-55750]:VariableDeclarationStatement[55581-55675]"
    }, {
      "left" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[55759-56056]:EnhancedForStatement[55684-55981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55829-56056]:Block[55754-55981]"
    }, {
      "left" : "currentProperties.clear();",
      "right" : "currentProperties.clear();",
      "info" : "ExpressionStatement[55841-55867]:ExpressionStatement[55766-55792]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "info" : "ExpressionStatement[55878-55998]:ExpressionStatement[55803-55923]"
    }, {
      "left" : "properties.putAll(currentProperties);",
      "right" : "properties.putAll(currentProperties);",
      "info" : "ExpressionStatement[56009-56046]:ExpressionStatement[55934-55971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56349-58327]:Block[56274-58252]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[56355-56386]:VariableDeclarationStatement[56280-56311]"
    }, {
      "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[56391-56458]:VariableDeclarationStatement[56316-56383]"
    }, {
      "left" : "if (!childType.canBeCalled())",
      "right" : "if (!childType.canBeCalled())",
      "info" : "IfStatement[56464-56596]:IfStatement[56389-56521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56494-56596]:Block[56419-56521]"
    }, {
      "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[56502-56551]:ExpressionStatement[56427-56476]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[56558-56576]:ExpressionStatement[56483-56501]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56583-56590]:ReturnStatement[56508-56515]"
    }, {
      "left" : "if (childType.isFunctionType())",
      "right" : "if (childType.isFunctionType())",
      "info" : "IfStatement[56727-58114]:IfStatement[56652-58039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56759-58076]:Block[56684-58001]"
    }, {
      "left" : "FunctionType functionType = childType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = childType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[56767-56827]:VariableDeclarationStatement[56692-56752]"
    }, {
      "left" : "boolean isExtern = false;",
      "right" : "boolean isExtern = false;",
      "info" : "VariableDeclarationStatement[56835-56860]:VariableDeclarationStatement[56760-56785]"
    }, {
      "left" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "right" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[56867-56925]:VariableDeclarationStatement[56792-56850]"
    }, {
      "left" : "if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
      "right" : "if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
      "info" : "IfStatement[56932-57106]:IfStatement[56857-57031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57023-57106]:Block[56948-57031]"
    }, {
      "left" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
      "right" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
      "info" : "ExpressionStatement[57033-57098]:ExpressionStatement[56958-57023]"
    }, {
      "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "info" : "IfStatement[57259-57560]:IfStatement[57184-57485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57481-57560]:Block[57406-57485]"
    }, {
      "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[57491-57552]:ExpressionStatement[57416-57477]"
    }, {
      "left" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isNativeObjectType() &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
      "right" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isNativeObjectType() &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
      "info" : "IfStatement[57663-57968]:IfStatement[57588-57893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57892-57968]:Block[57817-57893]"
    }, {
      "left" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "right" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "info" : "ExpressionStatement[57902-57960]:ExpressionStatement[57827-57885]"
    }, {
      "left" : "visitParameterList(t, n, functionType);",
      "right" : "visitParameterList(t, n, functionType);",
      "info" : "ExpressionStatement[57976-58015]:ExpressionStatement[57901-57940]"
    }, {
      "left" : "ensureTyped(t, n, functionType.getReturnType());",
      "right" : "ensureTyped(t, n, functionType.getReturnType());",
      "info" : "ExpressionStatement[58022-58070]:ExpressionStatement[57947-57995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58082-58114]:Block[58007-58039]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[58090-58108]:ExpressionStatement[58015-58033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58488-59781]:Block[58413-59706]"
    }, {
      "left" : "Iterator<Node> arguments = call.children().iterator();",
      "right" : "Iterator<Node> arguments = call.children().iterator();",
      "info" : "VariableDeclarationStatement[58494-58548]:VariableDeclarationStatement[58419-58473]"
    }, {
      "left" : "arguments.next();",
      "right" : "arguments.next();",
      "info" : "ExpressionStatement[58553-58570]:ExpressionStatement[58478-58495]"
    }, {
      "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[58602-58670]:VariableDeclarationStatement[58527-58595]"
    }, {
      "left" : "int ordinal = 0;",
      "right" : "int ordinal = 0;",
      "info" : "VariableDeclarationStatement[58675-58691]:VariableDeclarationStatement[58600-58616]"
    }, {
      "left" : "Node parameter = null;",
      "right" : "Node parameter = null;",
      "info" : "VariableDeclarationStatement[58696-58718]:VariableDeclarationStatement[58621-58643]"
    }, {
      "left" : "Node argument = null;",
      "right" : "Node argument = null;",
      "info" : "VariableDeclarationStatement[58723-58744]:VariableDeclarationStatement[58648-58669]"
    }, {
      "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "info" : "WhileStatement[58749-59278]:WhileStatement[58674-59203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58872-59278]:Block[58797-59203]"
    }, {
      "left" : "if (parameters.hasNext())",
      "right" : "if (parameters.hasNext())",
      "info" : "IfStatement[59016-59090]:IfStatement[58941-59015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59042-59090]:Block[58967-59015]"
    }, {
      "left" : "parameter = parameters.next();",
      "right" : "parameter = parameters.next();",
      "info" : "ExpressionStatement[59052-59082]:ExpressionStatement[58977-59007]"
    }, {
      "left" : "argument = arguments.next();",
      "right" : "argument = arguments.next();",
      "info" : "ExpressionStatement[59097-59125]:ExpressionStatement[59022-59050]"
    }, {
      "left" : "ordinal++;",
      "right" : "ordinal++;",
      "info" : "ExpressionStatement[59132-59142]:ExpressionStatement[59057-59067]"
    }, {
      "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "info" : "ExpressionStatement[59150-59272]:ExpressionStatement[59075-59197]"
    }, {
      "left" : "int numArgs = call.getChildCount() - 1;",
      "right" : "int numArgs = call.getChildCount() - 1;",
      "info" : "VariableDeclarationStatement[59284-59323]:VariableDeclarationStatement[59209-59248]"
    }, {
      "left" : "int minArgs = functionType.getMinArguments();",
      "right" : "int minArgs = functionType.getMinArguments();",
      "info" : "VariableDeclarationStatement[59328-59373]:VariableDeclarationStatement[59253-59298]"
    }, {
      "left" : "int maxArgs = functionType.getMaxArguments();",
      "right" : "int maxArgs = functionType.getMaxArguments();",
      "info" : "VariableDeclarationStatement[59378-59423]:VariableDeclarationStatement[59303-59348]"
    }, {
      "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "info" : "IfStatement[59428-59777]:IfStatement[59353-59702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59472-59777]:Block[59397-59702]"
    }, {
      "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "info" : "ExpressionStatement[59480-59771]:ExpressionStatement[59405-59696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60060-60907]:Block[59985-60832]"
    }, {
      "left" : "JSType jsType = getJSType(t.getEnclosingFunction());",
      "right" : "JSType jsType = getJSType(t.getEnclosingFunction());",
      "info" : "VariableDeclarationStatement[60066-60118]:VariableDeclarationStatement[59991-60043]"
    }, {
      "left" : "if (jsType.isFunctionType())",
      "right" : "if (jsType.isFunctionType())",
      "info" : "IfStatement[60124-60903]:IfStatement[60049-60828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60153-60903]:Block[60078-60828]"
    }, {
      "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[60161-60218]:VariableDeclarationStatement[60086-60143]"
    }, {
      "left" : "JSType returnType = functionType.getReturnType();",
      "right" : "JSType returnType = functionType.getReturnType();",
      "info" : "VariableDeclarationStatement[60226-60275]:VariableDeclarationStatement[60151-60200]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[60383-60463]:IfStatement[60308-60388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60407-60463]:Block[60332-60388]"
    }, {
      "left" : "returnType = getNativeType(VOID_TYPE);",
      "right" : "returnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[60417-60455]:ExpressionStatement[60342-60380]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[60515-60550]:VariableDeclarationStatement[60440-60475]"
    }, {
      "left" : "JSType actualReturnType;",
      "right" : "JSType actualReturnType;",
      "info" : "VariableDeclarationStatement[60557-60581]:VariableDeclarationStatement[60482-60506]"
    }, {
      "left" : "if (valueNode == null)",
      "right" : "if (valueNode == null)",
      "info" : "IfStatement[60588-60760]:IfStatement[60513-60685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60611-60696]:Block[60536-60621]"
    }, {
      "left" : "actualReturnType = getNativeType(VOID_TYPE);",
      "right" : "actualReturnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[60621-60665]:ExpressionStatement[60546-60590]"
    }, {
      "left" : "valueNode = n;",
      "right" : "valueNode = n;",
      "info" : "ExpressionStatement[60674-60688]:ExpressionStatement[60599-60613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60702-60760]:Block[60627-60685]"
    }, {
      "left" : "actualReturnType = getJSType(valueNode);",
      "right" : "actualReturnType = getJSType(valueNode);",
      "info" : "ExpressionStatement[60712-60752]:ExpressionStatement[60637-60677]"
    }, {
      "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "info" : "ExpressionStatement[60787-60897]:ExpressionStatement[60712-60822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61368-62984]:Block[61293-62909]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[61374-61404]:VariableDeclarationStatement[61299-61329]"
    }, {
      "left" : "JSType leftType = getJSType(left);",
      "right" : "JSType leftType = getJSType(left);",
      "info" : "VariableDeclarationStatement[61409-61443]:VariableDeclarationStatement[61334-61368]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[61448-61478]:VariableDeclarationStatement[61373-61403]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[61483-61519]:VariableDeclarationStatement[61408-61444]"
    }, {
      "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
      "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
      "info" : "SwitchStatement[61524-62957]:SwitchStatement[61449-62882]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[61544-61566]:SwitchCase[61469-61491]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[61573-61595]:SwitchCase[61498-61520]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[61602-61617]:SwitchCase[61527-61542]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[61624-61639]:SwitchCase[61549-61564]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[61646-61669]:SwitchCase[61571-61594]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[61676-61692]:SwitchCase[61601-61617]"
    }, {
      "left" : "if (!leftType.matchesInt32Context())",
      "right" : "if (!leftType.matchesInt32Context())",
      "info" : "IfStatement[61701-61862]:IfStatement[61626-61787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61738-61862]:Block[61663-61787]"
    }, {
      "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "info" : "ExpressionStatement[61750-61852]:ExpressionStatement[61675-61777]"
    }, {
      "left" : "if (!rightType.matchesUint32Context())",
      "right" : "if (!rightType.matchesUint32Context())",
      "info" : "IfStatement[61871-62036]:IfStatement[61796-61961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61910-62036]:Block[61835-61961]"
    }, {
      "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "info" : "ExpressionStatement[61922-62026]:ExpressionStatement[61847-61951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62045-62051]:BreakStatement[61970-61976]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[62059-62081]:SwitchCase[61984-62006]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[62088-62110]:SwitchCase[62013-62035]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[62117-62139]:SwitchCase[62042-62064]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[62146-62168]:SwitchCase[62071-62093]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[62175-62190]:SwitchCase[62100-62115]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[62197-62212]:SwitchCase[62122-62137]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[62219-62234]:SwitchCase[62144-62159]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[62241-62256]:SwitchCase[62166-62181]"
    }, {
      "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "info" : "ExpressionStatement[62265-62323]:ExpressionStatement[62190-62248]"
    }, {
      "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "info" : "ExpressionStatement[62332-62393]:ExpressionStatement[62257-62318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62402-62408]:BreakStatement[62327-62333]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[62416-62441]:SwitchCase[62341-62366]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[62448-62473]:SwitchCase[62373-62398]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[62480-62504]:SwitchCase[62405-62429]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[62511-62529]:SwitchCase[62436-62454]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[62536-62554]:SwitchCase[62461-62479]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[62561-62578]:SwitchCase[62486-62503]"
    }, {
      "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "info" : "ExpressionStatement[62587-62686]:ExpressionStatement[62512-62611]"
    }, {
      "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "info" : "ExpressionStatement[62695-62797]:ExpressionStatement[62620-62722]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62806-62812]:BreakStatement[62731-62737]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[62820-62842]:SwitchCase[62745-62767]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[62849-62864]:SwitchCase[62774-62789]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62873-62879]:BreakStatement[62798-62804]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[62887-62895]:SwitchCase[62812-62820]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
      "info" : "ExpressionStatement[62904-62951]:ExpressionStatement[62829-62876]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[62962-62980]:ExpressionStatement[62887-62905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63512-64041]:Block[63437-63966]"
    }, {
      "left" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
      "right" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
      "info" : "IfStatement[63518-63597]:IfStatement[63443-63522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63576-63597]:Block[63501-63522]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63584-63591]:ReturnStatement[63509-63516]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[63603-63639]:VariableDeclarationStatement[63528-63564]"
    }, {
      "left" : "if (!valueType.isEnumType())",
      "right" : "if (!valueType.isEnumType())",
      "info" : "IfStatement[63644-63694]:IfStatement[63569-63619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63673-63694]:Block[63598-63619]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63681-63688]:ReturnStatement[63606-63613]"
    }, {
      "left" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
      "right" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
      "info" : "VariableDeclarationStatement[63700-63753]:VariableDeclarationStatement[63625-63678]"
    }, {
      "left" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
      "right" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
      "info" : "VariableDeclarationStatement[63758-63849]:VariableDeclarationStatement[63683-63774]"
    }, {
      "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
      "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
      "info" : "ExpressionStatement[63854-64037]:ExpressionStatement[63779-63962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64184-64612]:Block[64109-64537]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[64190-64220]:VariableDeclarationStatement[64115-64145]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[64225-64608]:IfStatement[64150-64533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64245-64574]:Block[64170-64499]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[64533-64568]:ReturnStatement[64458-64493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64580-64608]:Block[64505-64533]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[64588-64602]:ReturnStatement[64513-64527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65101-65158]:Block[65026-65083]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[65107-65154]:ExpressionStatement[65032-65079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65231-65280]:Block[65156-65205]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(type));",
      "right" : "ensureTyped(t, n, getNativeType(type));",
      "info" : "ExpressionStatement[65237-65276]:ExpressionStatement[65162-65201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66159-66914]:Block[66084-66839]"
    }, {
      "left" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
      "right" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
      "info" : "ExpressionStatement[66223-66338]:ExpressionStatement[66148-66263]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[66343-66377]:VariableDeclarationStatement[66268-66302]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[66382-66845]:IfStatement[66307-66770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66400-66845]:Block[66325-66770]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[66408-66596]:IfStatement[66333-66521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66428-66596]:Block[66353-66521]"
    }, {
      "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "info" : "VariableDeclarationStatement[66438-66508]:VariableDeclarationStatement[66363-66433]"
    }, {
      "left" : "validator.expectCanCast(t, n, infoType, type);",
      "right" : "validator.expectCanCast(t, n, infoType, type);",
      "info" : "ExpressionStatement[66517-66563]:ExpressionStatement[66442-66488]"
    }, {
      "left" : "type = infoType;",
      "right" : "type = infoType;",
      "info" : "ExpressionStatement[66572-66588]:ExpressionStatement[66497-66513]"
    }, {
      "left" : "if (info.isImplicitCast() && !inExterns)",
      "right" : "if (info.isImplicitCast() && !inExterns)",
      "info" : "IfStatement[66604-66839]:IfStatement[66529-66764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66645-66839]:Block[66570-66764]"
    }, {
      "left" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
      "right" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
      "info" : "VariableDeclarationStatement[66655-66744]:VariableDeclarationStatement[66580-66669]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "info" : "ExpressionStatement[66753-66831]:ExpressionStatement[66678-66756]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[66851-66910]:IfStatement[66776-66835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66878-66910]:Block[66803-66835]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[66886-66904]:ExpressionStatement[66811-66829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67063-67185]:Block[66988-67110]"
    }, {
      "left" : "int total = nullCount + unknownCount + typedCount;",
      "right" : "int total = nullCount + unknownCount + typedCount;",
      "info" : "VariableDeclarationStatement[67069-67119]:VariableDeclarationStatement[66994-67044]"
    }, {
      "left" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
      "right" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
      "info" : "ReturnStatement[67124-67181]:ReturnStatement[67049-67106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67239-67291]:Block[67164-67216]"
    }, {
      "left" : "return typeRegistry.getNativeType(typeId);",
      "right" : "return typeRegistry.getNativeType(typeId);",
      "info" : "ReturnStatement[67245-67287]:ReturnStatement[67170-67212]"
    } ]
  },
  "interFileMappings" : { }
}