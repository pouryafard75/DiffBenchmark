{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeCheck",
      "right" : "TypeCheck",
      "info" : "TypeDeclaration[2222-66929]:TypeDeclaration[2222-66974]"
    }, {
      "left" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "right" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "info" : "FieldDeclaration[2427-2595]:FieldDeclaration[2427-2595]"
    }, {
      "left" : "static final DiagnosticType BAD_DELETE =\n      // TODO(user): make this an error\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "right" : "static final DiagnosticType BAD_DELETE =\n      // TODO(user): make this an error\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "info" : "FieldDeclaration[2627-2829]:FieldDeclaration[2627-2829]"
    }, {
      "left" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "right" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "info" : "FieldDeclaration[2864-2978]:FieldDeclaration[2864-2978]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3112-3328]:FieldDeclaration[3112-3328]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3332-3579]:FieldDeclaration[3332-3579]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "right" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "info" : "FieldDeclaration[3583-3761]:FieldDeclaration[3583-3761]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "right" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "info" : "FieldDeclaration[3858-4023]:FieldDeclaration[3858-4023]"
    }, {
      "left" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "right" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "info" : "FieldDeclaration[4027-4198]:FieldDeclaration[4027-4198]"
    }, {
      "left" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "right" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "info" : "FieldDeclaration[4202-4371]:FieldDeclaration[4202-4371]"
    }, {
      "left" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "right" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "info" : "FieldDeclaration[4375-4529]:FieldDeclaration[4375-4529]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "info" : "FieldDeclaration[4533-4731]:FieldDeclaration[4533-4731]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "right" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "info" : "FieldDeclaration[4735-4910]:FieldDeclaration[4735-4910]"
    }, {
      "left" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "right" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "info" : "FieldDeclaration[4914-5087]:FieldDeclaration[4914-5087]"
    }, {
      "left" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "right" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "info" : "FieldDeclaration[5091-5209]:FieldDeclaration[5091-5209]"
    }, {
      "left" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "right" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "info" : "FieldDeclaration[5213-5370]:FieldDeclaration[5213-5370]"
    }, {
      "left" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "right" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "info" : "FieldDeclaration[5374-5631]:FieldDeclaration[5374-5631]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "right" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "info" : "FieldDeclaration[5635-5834]:FieldDeclaration[5635-5834]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{0} cannot extend this type; \" +\n          \"a constructor can only extend objects \" +\n          \"and an interface can only extend interfaces\");",
      "right" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{0} cannot extend this type; \" +\n          \"a constructor can only extend objects \" +\n          \"and an interface can only extend interfaces\");",
      "info" : "FieldDeclaration[5838-6121]:FieldDeclaration[5838-6121]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "right" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "info" : "FieldDeclaration[6125-6371]:FieldDeclaration[6125-6371]"
    }, {
      "left" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "right" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "info" : "FieldDeclaration[6375-6541]:FieldDeclaration[6375-6541]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6545-6781]:FieldDeclaration[6545-6781]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6785-7018]:FieldDeclaration[6785-7018]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[7022-7344]:FieldDeclaration[7022-7344]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "right" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "info" : "FieldDeclaration[7348-7522]:FieldDeclaration[7348-7522]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "right" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "info" : "FieldDeclaration[7526-7730]:FieldDeclaration[7526-7730]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "right" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "info" : "FieldDeclaration[7734-7897]:FieldDeclaration[7734-7897]"
    }, {
      "left" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "right" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "info" : "FieldDeclaration[7901-8053]:FieldDeclaration[7901-8053]"
    }, {
      "left" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "right" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "info" : "FieldDeclaration[8057-8294]:FieldDeclaration[8057-8294]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "right" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "info" : "FieldDeclaration[8298-8517]:FieldDeclaration[8298-8517]"
    }, {
      "left" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "right" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "info" : "FieldDeclaration[8521-8791]:FieldDeclaration[8521-8791]"
    }, {
      "left" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "right" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "info" : "FieldDeclaration[8795-8967]:FieldDeclaration[8795-8967]"
    }, {
      "left" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "right" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "info" : "FieldDeclaration[8971-10131]:FieldDeclaration[8971-10131]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[10135-10175]:FieldDeclaration[10135-10175]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[10178-10216]:FieldDeclaration[10178-10216]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[10220-10280]:FieldDeclaration[10220-10280]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[10284-10326]:FieldDeclaration[10284-10326]"
    }, {
      "left" : "private Scope topScope;",
      "right" : "private Scope topScope;",
      "info" : "FieldDeclaration[10329-10352]:FieldDeclaration[10329-10352]"
    }, {
      "left" : "private ScopeCreator scopeCreator;",
      "right" : "private ScopeCreator scopeCreator;",
      "info" : "FieldDeclaration[10356-10390]:FieldDeclaration[10356-10390]"
    }, {
      "left" : "private final CheckLevel reportMissingOverride;",
      "right" : "private final CheckLevel reportMissingOverride;",
      "info" : "FieldDeclaration[10394-10441]:FieldDeclaration[10394-10441]"
    }, {
      "left" : "private final CheckLevel reportUnknownTypes;",
      "right" : "private final CheckLevel reportUnknownTypes;",
      "info" : "FieldDeclaration[10444-10488]:FieldDeclaration[10444-10488]"
    }, {
      "left" : "private boolean reportMissingProperties = true;",
      "right" : "private boolean reportMissingProperties = true;",
      "info" : "FieldDeclaration[10588-10635]:FieldDeclaration[10588-10635]"
    }, {
      "left" : "private InferJSDocInfo inferJSDocInfo = null;",
      "right" : "private InferJSDocInfo inferJSDocInfo = null;",
      "info" : "FieldDeclaration[10639-10684]:FieldDeclaration[10639-10684]"
    }, {
      "left" : "private int typedCount = 0;",
      "right" : "private int typedCount = 0;",
      "info" : "FieldDeclaration[10765-10792]:FieldDeclaration[10765-10792]"
    }, {
      "left" : "private int nullCount = 0;",
      "right" : "private int nullCount = 0;",
      "info" : "FieldDeclaration[10795-10821]:FieldDeclaration[10795-10821]"
    }, {
      "left" : "private int unknownCount = 0;",
      "right" : "private int unknownCount = 0;",
      "info" : "FieldDeclaration[10824-10853]:FieldDeclaration[10824-10853]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[10856-10882]:FieldDeclaration[10856-10882]"
    }, {
      "left" : "private int noTypeCheckSection = 0;",
      "right" : "private int noTypeCheckSection = 0;",
      "info" : "FieldDeclaration[10973-11008]:FieldDeclaration[10973-11008]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[11012-11679]:MethodDeclaration[11012-11679]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[11683-12014]:MethodDeclaration[11683-12014]"
    }, {
      "left" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "right" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[12018-12259]:MethodDeclaration[12018-12259]"
    }, {
      "left" : "TypeCheck reportMissingProperties(boolean report)",
      "right" : "TypeCheck reportMissingProperties(boolean report)",
      "info" : "MethodDeclaration[12263-12450]:MethodDeclaration[12263-12450]"
    }, {
      "left" : "public void process(Node externsRoot, Node jsRoot)",
      "right" : "public void process(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[12454-13138]:MethodDeclaration[12454-13138]"
    }, {
      "left" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "right" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[13142-13839]:MethodDeclaration[13142-13839]"
    }, {
      "left" : "public void check(Node node, boolean externs)",
      "right" : "public void check(Node node, boolean externs)",
      "info" : "MethodDeclaration[13844-14193]:MethodDeclaration[13844-14193]"
    }, {
      "left" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "right" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "info" : "MethodDeclaration[14198-14735]:MethodDeclaration[14198-14735]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "info" : "MethodDeclaration[14739-14934]:MethodDeclaration[14739-14934]"
    }, {
      "left" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14938-16181]:MethodDeclaration[14938-16181]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[16185-26978]:MethodDeclaration[16185-27023]"
    }, {
      "left" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "right" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[26982-27472]:MethodDeclaration[27027-27517]"
    }, {
      "left" : "private void visitAssign(NodeTraversal t, Node assign)",
      "right" : "private void visitAssign(NodeTraversal t, Node assign)",
      "info" : "MethodDeclaration[27476-31576]:MethodDeclaration[27521-31621]"
    }, {
      "left" : "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit)",
      "right" : "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit)",
      "info" : "MethodDeclaration[31580-33554]:MethodDeclaration[31625-33599]"
    }, {
      "left" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "right" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "info" : "MethodDeclaration[33558-33981]:MethodDeclaration[33603-34026]"
    }, {
      "left" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[33985-38509]:MethodDeclaration[34030-38554]"
    }, {
      "left" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "right" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "info" : "MethodDeclaration[38513-39462]:MethodDeclaration[38558-39507]"
    }, {
      "left" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "right" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "info" : "MethodDeclaration[39466-40793]:MethodDeclaration[39511-40838]"
    }, {
      "left" : "private void visitAnnotatedAssignGetprop(NodeTraversal t,\n      Node assign, JSType type, Node object, String property, Node rvalue)",
      "right" : "private void visitAnnotatedAssignGetprop(NodeTraversal t,\n      Node assign, JSType type, Node object, String property, Node rvalue)",
      "info" : "MethodDeclaration[40797-41246]:MethodDeclaration[40842-41291]"
    }, {
      "left" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "right" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[41250-42655]:MethodDeclaration[41295-42700]"
    }, {
      "left" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "right" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[42659-43991]:MethodDeclaration[42704-44036]"
    }, {
      "left" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[43995-45086]:MethodDeclaration[44040-45131]"
    }, {
      "left" : "private boolean isPropertyTest(Node getProp)",
      "right" : "private boolean isPropertyTest(Node getProp)",
      "info" : "MethodDeclaration[45090-46060]:MethodDeclaration[45135-46105]"
    }, {
      "left" : "private void visitGetElem(NodeTraversal t, Node n)",
      "right" : "private void visitGetElem(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[46064-46512]:MethodDeclaration[46109-46557]"
    }, {
      "left" : "private void visitVar(NodeTraversal t, Node n)",
      "right" : "private void visitVar(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[46516-48074]:MethodDeclaration[46561-48119]"
    }, {
      "left" : "private void visitNew(NodeTraversal t, Node n)",
      "right" : "private void visitNew(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[48078-48977]:MethodDeclaration[48123-49022]"
    }, {
      "left" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "right" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "info" : "MethodDeclaration[48981-50489]:MethodDeclaration[49026-50534]"
    }, {
      "left" : "private void visitFunction(NodeTraversal t, Node n)",
      "right" : "private void visitFunction(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[50493-53558]:MethodDeclaration[50538-53603]"
    }, {
      "left" : "private void visitCall(NodeTraversal t, Node n)",
      "right" : "private void visitCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[53562-55884]:MethodDeclaration[53607-55929]"
    }, {
      "left" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "right" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "info" : "MethodDeclaration[55888-57338]:MethodDeclaration[55933-57383]"
    }, {
      "left" : "private void visitReturn(NodeTraversal t, Node n)",
      "right" : "private void visitReturn(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[57342-58637]:MethodDeclaration[57387-58682]"
    }, {
      "left" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "right" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[58641-60720]:MethodDeclaration[58686-60765]"
    }, {
      "left" : "private void checkEnumInitializer(\n      NodeTraversal t, Node value, JSType primitiveType)",
      "right" : "private void checkEnumInitializer(\n      NodeTraversal t, Node value, JSType primitiveType)",
      "info" : "MethodDeclaration[60724-62675]:MethodDeclaration[60769-62720]"
    }, {
      "left" : "private static boolean isReference(Node n)",
      "right" : "private static boolean isReference(Node n)",
      "info" : "MethodDeclaration[62680-63160]:MethodDeclaration[62725-63205]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[63164-63731]:MethodDeclaration[63209-63776]"
    }, {
      "left" : "private FunctionType getFunctionType(Node n)",
      "right" : "private FunctionType getFunctionType(Node n)",
      "info" : "MethodDeclaration[63735-64172]:MethodDeclaration[63780-64217]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[64500-64718]:MethodDeclaration[64545-64763]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "info" : "MethodDeclaration[64722-64840]:MethodDeclaration[64767-64885]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "info" : "MethodDeclaration[64844-66510]:MethodDeclaration[64889-66555]"
    }, {
      "left" : "double getTypedPercent()",
      "right" : "double getTypedPercent()",
      "info" : "MethodDeclaration[66514-66821]:MethodDeclaration[66559-66866]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[66825-66927]:MethodDeclaration[66870-66972]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11276-11679]:Block[11276-11679]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[11282-11307]:ExpressionStatement[11282-11307]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[11312-11357]:ExpressionStatement[11312-11357]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[11362-11407]:ExpressionStatement[11362-11407]"
    }, {
      "left" : "this.typeRegistry = typeRegistry;",
      "right" : "this.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[11412-11445]:ExpressionStatement[11412-11445]"
    }, {
      "left" : "this.topScope = topScope;",
      "right" : "this.topScope = topScope;",
      "info" : "ExpressionStatement[11450-11475]:ExpressionStatement[11450-11475]"
    }, {
      "left" : "this.scopeCreator = scopeCreator;",
      "right" : "this.scopeCreator = scopeCreator;",
      "info" : "ExpressionStatement[11480-11513]:ExpressionStatement[11480-11513]"
    }, {
      "left" : "this.reportMissingOverride = reportMissingOverride;",
      "right" : "this.reportMissingOverride = reportMissingOverride;",
      "info" : "ExpressionStatement[11518-11569]:ExpressionStatement[11518-11569]"
    }, {
      "left" : "this.reportUnknownTypes = reportUnknownTypes;",
      "right" : "this.reportUnknownTypes = reportUnknownTypes;",
      "info" : "ExpressionStatement[11574-11619]:ExpressionStatement[11574-11619]"
    }, {
      "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "info" : "ExpressionStatement[11624-11675]:ExpressionStatement[11624-11675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11892-12014]:Block[11892-12014]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "info" : "ConstructorInvocation[11898-12010]:ConstructorInvocation[11898-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12143-12259]:Block[12143-12259]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "info" : "ConstructorInvocation[12149-12255]:ConstructorInvocation[12149-12255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12390-12450]:Block[12390-12450]"
    }, {
      "left" : "reportMissingProperties = report;",
      "right" : "reportMissingProperties = report;",
      "info" : "ExpressionStatement[12396-12429]:ExpressionStatement[12396-12429]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12434-12446]:ReturnStatement[12434-12446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12754-13138]:Block[12754-13138]"
    }, {
      "left" : "Preconditions.checkNotNull(scopeCreator);",
      "right" : "Preconditions.checkNotNull(scopeCreator);",
      "info" : "ExpressionStatement[12760-12801]:ExpressionStatement[12760-12801]"
    }, {
      "left" : "Preconditions.checkNotNull(topScope);",
      "right" : "Preconditions.checkNotNull(topScope);",
      "info" : "ExpressionStatement[12806-12843]:ExpressionStatement[12806-12843]"
    }, {
      "left" : "Node externsAndJs = jsRoot.getParent();",
      "right" : "Node externsAndJs = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[12849-12888]:VariableDeclarationStatement[12849-12888]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[12893-12940]:ExpressionStatement[12893-12940]"
    }, {
      "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "info" : "ExpressionStatement[12945-13038]:ExpressionStatement[12945-13038]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[13044-13108]:IfStatement[13044-13108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13069-13108]:Block[13069-13108]"
    }, {
      "left" : "check(externsRoot, true);",
      "right" : "check(externsRoot, true);",
      "info" : "ExpressionStatement[13077-13102]:ExpressionStatement[13077-13102]"
    }, {
      "left" : "check(jsRoot, false);",
      "right" : "check(jsRoot, false);",
      "info" : "ExpressionStatement[13113-13134]:ExpressionStatement[13113-13134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13262-13839]:Block[13262-13839]"
    }, {
      "left" : "Preconditions.checkState(scopeCreator == null);",
      "right" : "Preconditions.checkState(scopeCreator == null);",
      "info" : "ExpressionStatement[13268-13315]:ExpressionStatement[13268-13315]"
    }, {
      "left" : "Preconditions.checkState(topScope == null);",
      "right" : "Preconditions.checkState(topScope == null);",
      "info" : "ExpressionStatement[13320-13363]:ExpressionStatement[13320-13363]"
    }, {
      "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "info" : "ExpressionStatement[13369-13422]:ExpressionStatement[13369-13422]"
    }, {
      "left" : "Node externsAndJsRoot = jsRoot.getParent();",
      "right" : "Node externsAndJsRoot = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[13427-13470]:VariableDeclarationStatement[13427-13470]"
    }, {
      "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "info" : "ExpressionStatement[13476-13549]:ExpressionStatement[13476-13549]"
    }, {
      "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "info" : "ExpressionStatement[13554-13614]:ExpressionStatement[13554-13614]"
    }, {
      "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "info" : "VariableDeclarationStatement[13620-13734]:VariableDeclarationStatement[13620-13734]"
    }, {
      "left" : "inference.process(externsRoot, jsRoot);",
      "right" : "inference.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13740-13779]:ExpressionStatement[13740-13779]"
    }, {
      "left" : "process(externsRoot, jsRoot);",
      "right" : "process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13784-13813]:ExpressionStatement[13784-13813]"
    }, {
      "left" : "return topScope;",
      "right" : "return topScope;",
      "info" : "ReturnStatement[13819-13835]:ReturnStatement[13819-13835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13890-14193]:Block[13890-14193]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[13896-13929]:ExpressionStatement[13896-13929]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "info" : "VariableDeclarationStatement[13935-14001]:VariableDeclarationStatement[13935-14001]"
    }, {
      "left" : "inExterns = externs;",
      "right" : "inExterns = externs;",
      "info" : "ExpressionStatement[14006-14026]:ExpressionStatement[14006-14026]"
    }, {
      "left" : "t.traverseWithScope(node, topScope);",
      "right" : "t.traverseWithScope(node, topScope);",
      "info" : "ExpressionStatement[14031-14067]:ExpressionStatement[14031-14067]"
    }, {
      "left" : "if (externs)",
      "right" : "if (externs)",
      "info" : "IfStatement[14072-14189]:IfStatement[14072-14189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14085-14134]:Block[14085-14134]"
    }, {
      "left" : "inferJSDocInfo.process(node, null);",
      "right" : "inferJSDocInfo.process(node, null);",
      "info" : "ExpressionStatement[14093-14128]:ExpressionStatement[14093-14128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14140-14189]:Block[14140-14189]"
    }, {
      "left" : "inferJSDocInfo.process(null, node);",
      "right" : "inferJSDocInfo.process(null, node);",
      "info" : "ExpressionStatement[14148-14183]:ExpressionStatement[14148-14183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14265-14735]:Block[14265-14735]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "info" : "SwitchStatement[14271-14731]:SwitchStatement[14271-14731]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[14300-14318]:SwitchCase[14300-14318]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[14325-14342]:SwitchCase[14325-14342]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14349-14364]:SwitchCase[14349-14364]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14371-14391]:SwitchCase[14371-14391]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[14398-14416]:SwitchCase[14398-14416]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[14425-14459]:VariableDeclarationStatement[14425-14459]"
    }, {
      "left" : "if (info != null && info.isNoTypeCheck())",
      "right" : "if (info != null && info.isNoTypeCheck())",
      "info" : "IfStatement[14468-14650]:IfStatement[14468-14650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14510-14650]:Block[14510-14650]"
    }, {
      "left" : "if (enterSection)",
      "right" : "if (enterSection)",
      "info" : "IfStatement[14522-14640]:IfStatement[14522-14640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14540-14587]:Block[14540-14587]"
    }, {
      "left" : "noTypeCheckSection++;",
      "right" : "noTypeCheckSection++;",
      "info" : "ExpressionStatement[14554-14575]:ExpressionStatement[14554-14575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14593-14640]:Block[14593-14640]"
    }, {
      "left" : "noTypeCheckSection--;",
      "right" : "noTypeCheckSection--;",
      "info" : "ExpressionStatement[14607-14628]:ExpressionStatement[14607-14628]"
    }, {
      "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "info" : "ExpressionStatement[14659-14710]:ExpressionStatement[14659-14710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14719-14725]:BreakStatement[14719-14725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14842-14934]:Block[14842-14934]"
    }, {
      "left" : "if (noTypeCheckSection == 0)",
      "right" : "if (noTypeCheckSection == 0)",
      "info" : "IfStatement[14848-14930]:IfStatement[14848-14930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14877-14930]:Block[14877-14930]"
    }, {
      "left" : "t.report(n, diagnosticType, arguments);",
      "right" : "t.report(n, diagnosticType, arguments);",
      "info" : "ExpressionStatement[14885-14924]:ExpressionStatement[14885-14924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15013-16181]:Block[15013-16181]"
    }, {
      "left" : "checkNoTypeCheckSection(n, true);",
      "right" : "checkNoTypeCheckSection(n, true);",
      "info" : "ExpressionStatement[15019-15052]:ExpressionStatement[15019-15052]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "info" : "SwitchStatement[15057-16160]:SwitchStatement[15057-16160]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15086-15106]:SwitchCase[15086-15106]"
    }, {
      "left" : "final TypeCheck outerThis = this;",
      "right" : "final TypeCheck outerThis = this;",
      "info" : "VariableDeclarationStatement[15147-15180]:VariableDeclarationStatement[15147-15180]"
    }, {
      "left" : "final Scope outerScope = t.getScope();",
      "right" : "final Scope outerScope = t.getScope();",
      "info" : "VariableDeclarationStatement[15189-15227]:VariableDeclarationStatement[15189-15227]"
    }, {
      "left" : "final FunctionType functionType = (FunctionType) n.getJSType();",
      "right" : "final FunctionType functionType = (FunctionType) n.getJSType();",
      "info" : "VariableDeclarationStatement[15236-15299]:VariableDeclarationStatement[15236-15299]"
    }, {
      "left" : "final String functionPrivateName = n.getFirstChild().getString();",
      "right" : "final String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[15308-15373]:VariableDeclarationStatement[15308-15373]"
    }, {
      "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "info" : "IfStatement[15382-15931]:IfStatement[15382-15931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-15931]:Block[15850-15931]"
    }, {
      "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "info" : "ExpressionStatement[15862-15921]:ExpressionStatement[15862-15921]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16148-16154]:BreakStatement[16148-16154]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16165-16177]:ReturnStatement[16165-16177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16686-26978]:Block[16686-27023]"
    }, {
      "left" : "JSType childType;",
      "right" : "JSType childType;",
      "info" : "VariableDeclarationStatement[16692-16709]:VariableDeclarationStatement[16692-16709]"
    }, {
      "left" : "JSType leftType, rightType;",
      "right" : "JSType leftType, rightType;",
      "info" : "VariableDeclarationStatement[16714-16741]:VariableDeclarationStatement[16714-16741]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[16746-16763]:VariableDeclarationStatement[16746-16763]"
    }, {
      "left" : "boolean typeable = true;",
      "right" : "boolean typeable = true;",
      "info" : "VariableDeclarationStatement[16834-16858]:VariableDeclarationStatement[16834-16858]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n          // Object literal keys are not typeable\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n        } else {\n          // Object literal keys are not typeable\n          typeable = false;\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "info" : "SwitchStatement[16864-26752]:SwitchStatement[16864-26797]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16893-16909]:SwitchCase[16893-16909]"
    }, {
      "left" : "typeable = visitName(t, n, parent);",
      "right" : "typeable = visitName(t, n, parent);",
      "info" : "ExpressionStatement[16918-16953]:ExpressionStatement[16918-16953]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16962-16968]:BreakStatement[16962-16968]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[16976-16990]:SwitchCase[16976-16990]"
    }, {
      "left" : "if (parent.getType() != Token.FUNCTION)",
      "right" : "if (parent.getType() != Token.FUNCTION)",
      "info" : "IfStatement[17103-17258]:IfStatement[17103-17258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17143-17213]:Block[17143-17213]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[17155-17203]:ExpressionStatement[17155-17203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17219-17258]:Block[17219-17258]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[17231-17248]:ExpressionStatement[17231-17248]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17267-17273]:BreakStatement[17267-17273]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[17281-17298]:SwitchCase[17281-17298]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[17307-17354]:ExpressionStatement[17307-17354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17363-17369]:BreakStatement[17363-17369]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[17377-17393]:SwitchCase[17377-17393]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[17400-17417]:SwitchCase[17400-17417]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[17426-17458]:ExpressionStatement[17426-17458]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17467-17473]:BreakStatement[17467-17473]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[17481-17497]:SwitchCase[17481-17497]"
    }, {
      "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "info" : "ExpressionStatement[17506-17554]:ExpressionStatement[17506-17554]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17563-17569]:BreakStatement[17563-17569]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[17577-17600]:SwitchCase[17577-17600]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[17609-17627]:ExpressionStatement[17609-17627]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17636-17642]:BreakStatement[17636-17642]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[17650-17669]:SwitchCase[17650-17669]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[17678-17726]:ExpressionStatement[17678-17726]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17735-17741]:BreakStatement[17735-17741]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[17749-17765]:SwitchCase[17749-17765]"
    }, {
      "left" : "ensureTyped(t, n, NULL_TYPE);",
      "right" : "ensureTyped(t, n, NULL_TYPE);",
      "info" : "ExpressionStatement[17774-17803]:ExpressionStatement[17774-17803]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17812-17818]:BreakStatement[17812-17818]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[17826-17844]:SwitchCase[17826-17844]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[17853-17884]:ExpressionStatement[17853-17884]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17893-17899]:BreakStatement[17893-17899]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[17907-17925]:SwitchCase[17907-17925]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "info" : "IfStatement[17992-18143]:IfStatement[17992-18188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18040-18143]:Block[18040-18093]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[18052-18083]:ExpressionStatement[18052-18083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18152-18158]:BreakStatement[18315-18321]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[18166-18181]:SwitchCase[18211-18226]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[18188-18203]:SwitchCase[18233-18248]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18270-18276]:BreakStatement[18197-18203]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[18284-18304]:SwitchCase[18329-18349]"
    }, {
      "left" : "ensureTyped(t, n, ARRAY_TYPE);",
      "right" : "ensureTyped(t, n, ARRAY_TYPE);",
      "info" : "ExpressionStatement[18313-18343]:ExpressionStatement[18358-18388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18352-18358]:BreakStatement[18397-18403]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[18366-18384]:SwitchCase[18411-18429]"
    }, {
      "left" : "ensureTyped(t, n, REGEXP_TYPE);",
      "right" : "ensureTyped(t, n, REGEXP_TYPE);",
      "info" : "ExpressionStatement[18393-18424]:ExpressionStatement[18438-18469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18433-18439]:BreakStatement[18478-18484]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18447-18466]:SwitchCase[18492-18511]"
    }, {
      "left" : "visitGetProp(t, n, parent);",
      "right" : "visitGetProp(t, n, parent);",
      "info" : "ExpressionStatement[18475-18502]:ExpressionStatement[18520-18547]"
    }, {
      "left" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
      "right" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
      "info" : "ExpressionStatement[18511-18610]:ExpressionStatement[18556-18655]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18619-18625]:BreakStatement[18664-18670]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[18633-18652]:SwitchCase[18678-18697]"
    }, {
      "left" : "visitGetElem(t, n);",
      "right" : "visitGetElem(t, n);",
      "info" : "ExpressionStatement[18661-18680]:ExpressionStatement[18706-18725]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18889-18906]:ExpressionStatement[18934-18951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18915-18921]:BreakStatement[18960-18966]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[18929-18944]:SwitchCase[18974-18989]"
    }, {
      "left" : "visitVar(t, n);",
      "right" : "visitVar(t, n);",
      "info" : "ExpressionStatement[18953-18968]:ExpressionStatement[18998-19013]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18977-18994]:ExpressionStatement[19022-19039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19003-19009]:BreakStatement[19048-19054]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[19017-19032]:SwitchCase[19062-19077]"
    }, {
      "left" : "visitNew(t, n);",
      "right" : "visitNew(t, n);",
      "info" : "ExpressionStatement[19041-19056]:ExpressionStatement[19086-19101]"
    }, {
      "left" : "typeable = true;",
      "right" : "typeable = true;",
      "info" : "ExpressionStatement[19065-19081]:ExpressionStatement[19110-19126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19090-19096]:BreakStatement[19135-19141]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19104-19120]:SwitchCase[19149-19165]"
    }, {
      "left" : "visitCall(t, n);",
      "right" : "visitCall(t, n);",
      "info" : "ExpressionStatement[19129-19145]:ExpressionStatement[19174-19190]"
    }, {
      "left" : "typeable = !NodeUtil.isExpressionNode(parent);",
      "right" : "typeable = !NodeUtil.isExpressionNode(parent);",
      "info" : "ExpressionStatement[19154-19200]:ExpressionStatement[19199-19245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19209-19215]:BreakStatement[19254-19260]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[19223-19241]:SwitchCase[19268-19286]"
    }, {
      "left" : "visitReturn(t, n);",
      "right" : "visitReturn(t, n);",
      "info" : "ExpressionStatement[19250-19268]:ExpressionStatement[19295-19313]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[19277-19294]:ExpressionStatement[19322-19339]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19303-19309]:BreakStatement[19348-19354]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[19317-19332]:SwitchCase[19362-19377]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[19339-19354]:SwitchCase[19384-19399]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[19363-19388]:ExpressionStatement[19408-19433]"
    }, {
      "left" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "right" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "info" : "ExpressionStatement[19397-19482]:ExpressionStatement[19442-19527]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19491-19522]:ExpressionStatement[19536-19567]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19531-19537]:BreakStatement[19576-19582]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19545-19560]:SwitchCase[19590-19605]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[19569-19601]:ExpressionStatement[19614-19646]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19610-19616]:BreakStatement[19655-19661]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19624-19640]:SwitchCase[19669-19685]"
    }, {
      "left" : "ensureTyped(t, n, VOID_TYPE);",
      "right" : "ensureTyped(t, n, VOID_TYPE);",
      "info" : "ExpressionStatement[19649-19678]:ExpressionStatement[19694-19723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19687-19693]:BreakStatement[19732-19738]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[19701-19719]:SwitchCase[19746-19764]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[19728-19759]:ExpressionStatement[19773-19804]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19768-19774]:BreakStatement[19813-19819]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19782-19800]:SwitchCase[19827-19845]"
    }, {
      "left" : "childType = getJSType(n.getFirstChild());",
      "right" : "childType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[19809-19850]:ExpressionStatement[19854-19895]"
    }, {
      "left" : "if (!childType.matchesInt32Context())",
      "right" : "if (!childType.matchesInt32Context())",
      "info" : "IfStatement[19859-20014]:IfStatement[19904-20059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19897-20014]:Block[19942-20059]"
    }, {
      "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "info" : "ExpressionStatement[19909-20004]:ExpressionStatement[19954-20049]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[20023-20054]:ExpressionStatement[20068-20099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20063-20069]:BreakStatement[20108-20114]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[20077-20092]:SwitchCase[20122-20137]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[20099-20114]:SwitchCase[20144-20159]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[20123-20148]:ExpressionStatement[20168-20193]"
    }, {
      "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "info" : "ExpressionStatement[20157-20223]:ExpressionStatement[20202-20268]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[20232-20263]:ExpressionStatement[20277-20308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20272-20278]:BreakStatement[20317-20323]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[20286-20300]:SwitchCase[20331-20345]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[20307-20321]:SwitchCase[20352-20366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20322-21005]:Block[20367-21050]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[20332-20372]:ExpressionStatement[20377-20417]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[20381-20421]:ExpressionStatement[20426-20466]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20431-20499]:VariableDeclarationStatement[20476-20544]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20508-20578]:VariableDeclarationStatement[20553-20623]"
    }, {
      "left" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "right" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "info" : "VariableDeclarationStatement[20587-20677]:VariableDeclarationStatement[20632-20722]"
    }, {
      "left" : "if (result != TernaryValue.UNKNOWN)",
      "right" : "if (result != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[20686-20941]:IfStatement[20731-20986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20722-20941]:Block[20767-20986]"
    }, {
      "left" : "if (n.getType() == Token.NE)",
      "right" : "if (n.getType() == Token.NE)",
      "info" : "IfStatement[20734-20811]:IfStatement[20779-20856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20763-20811]:Block[20808-20856]"
    }, {
      "left" : "result = result.not();",
      "right" : "result = result.not();",
      "info" : "ExpressionStatement[20777-20799]:ExpressionStatement[20822-20844]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "info" : "ExpressionStatement[20822-20931]:ExpressionStatement[20867-20976]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[20950-20982]:ExpressionStatement[20995-21027]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20991-20997]:BreakStatement[21036-21042]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[21013-21029]:SwitchCase[21058-21074]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[21036-21052]:SwitchCase[21081-21097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21053-21597]:Block[21098-21642]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[21063-21103]:ExpressionStatement[21108-21148]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[21112-21152]:ExpressionStatement[21157-21197]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[21162-21230]:VariableDeclarationStatement[21207-21275]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[21239-21309]:VariableDeclarationStatement[21284-21354]"
    }, {
      "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
      "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
      "info" : "IfStatement[21318-21533]:IfStatement[21363-21578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21411-21533]:Block[21456-21578]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
      "info" : "ExpressionStatement[21423-21523]:ExpressionStatement[21468-21568]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[21542-21574]:ExpressionStatement[21587-21619]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21583-21589]:BreakStatement[21628-21634]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[21605-21619]:SwitchCase[21650-21664]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[21626-21640]:SwitchCase[21671-21685]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[21647-21661]:SwitchCase[21692-21706]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[21668-21682]:SwitchCase[21713-21727]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[21691-21731]:ExpressionStatement[21736-21776]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[21740-21780]:ExpressionStatement[21785-21825]"
    }, {
      "left" : "if (rightType.isNumber())",
      "right" : "if (rightType.isNumber())",
      "info" : "IfStatement[21789-22862]:IfStatement[21834-22907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21815-21926]:Block[21860-21971]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "info" : "ExpressionStatement[21827-21916]:ExpressionStatement[21872-21961]"
    }, {
      "left" : "if (leftType.isNumber())",
      "right" : "if (leftType.isNumber())",
      "info" : "IfStatement[21932-22862]:IfStatement[21977-22907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21957-22070]:Block[22002-22115]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "info" : "ExpressionStatement[21969-22060]:ExpressionStatement[22014-22105]"
    }, {
      "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "info" : "IfStatement[22076-22862]:IfStatement[22121-22907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22168-22196]:Block[22213-22241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22202-22862]:Block[22247-22907]"
    }, {
      "left" : "String message = \"left side of comparison\";",
      "right" : "String message = \"left side of comparison\";",
      "info" : "VariableDeclarationStatement[22413-22456]:VariableDeclarationStatement[22458-22501]"
    }, {
      "left" : "validator.expectString(t, n, leftType, message);",
      "right" : "validator.expectString(t, n, leftType, message);",
      "info" : "ExpressionStatement[22467-22515]:ExpressionStatement[22512-22560]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[22526-22629]:ExpressionStatement[22571-22674]"
    }, {
      "left" : "message = \"right side of comparison\";",
      "right" : "message = \"right side of comparison\";",
      "info" : "ExpressionStatement[22640-22677]:ExpressionStatement[22685-22722]"
    }, {
      "left" : "validator.expectString(t, n, rightType, message);",
      "right" : "validator.expectString(t, n, rightType, message);",
      "info" : "ExpressionStatement[22688-22737]:ExpressionStatement[22733-22782]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[22748-22852]:ExpressionStatement[22793-22897]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[22871-22903]:ExpressionStatement[22916-22948]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22912-22918]:BreakStatement[22957-22963]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[22926-22940]:SwitchCase[22971-22985]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[22949-22974]:ExpressionStatement[22994-23019]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[22983-23008]:ExpressionStatement[23028-23053]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[23017-23044]:ExpressionStatement[23062-23089]"
    }, {
      "left" : "rightType = getJSType(right);",
      "right" : "rightType = getJSType(right);",
      "info" : "ExpressionStatement[23053-23082]:ExpressionStatement[23098-23127]"
    }, {
      "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "info" : "ExpressionStatement[23091-23158]:ExpressionStatement[23136-23203]"
    }, {
      "left" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
      "right" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
      "info" : "ExpressionStatement[23167-23230]:ExpressionStatement[23212-23275]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23239-23271]:ExpressionStatement[23284-23316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23280-23286]:BreakStatement[23325-23331]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[23294-23316]:SwitchCase[23339-23361]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[23325-23350]:ExpressionStatement[23370-23395]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[23359-23384]:ExpressionStatement[23404-23429]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[23393-23420]:ExpressionStatement[23438-23465]"
    }, {
      "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[23429-23489]:ExpressionStatement[23474-23534]"
    }, {
      "left" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
      "right" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
      "info" : "ExpressionStatement[23499-23598]:ExpressionStatement[23544-23643]"
    }, {
      "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "info" : "ExpressionStatement[23607-23703]:ExpressionStatement[23652-23748]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23712-23744]:ExpressionStatement[23757-23789]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23753-23759]:BreakStatement[23798-23804]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[23767-23785]:SwitchCase[23812-23830]"
    }, {
      "left" : "visitAssign(t, n);",
      "right" : "visitAssign(t, n);",
      "info" : "ExpressionStatement[23794-23812]:ExpressionStatement[23839-23857]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[23821-23838]:ExpressionStatement[23866-23883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23847-23853]:BreakStatement[23892-23898]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[23861-23883]:SwitchCase[23906-23928]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[23890-23912]:SwitchCase[23935-23957]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[23919-23942]:SwitchCase[23964-23987]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[23949-23971]:SwitchCase[23994-24016]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[23978-24000]:SwitchCase[24023-24045]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[24007-24031]:SwitchCase[24052-24076]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[24038-24063]:SwitchCase[24083-24108]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[24070-24095]:SwitchCase[24115-24140]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[24102-24124]:SwitchCase[24147-24169]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[24131-24153]:SwitchCase[24176-24198]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[24160-24182]:SwitchCase[24205-24227]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[24189-24204]:SwitchCase[24234-24249]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[24211-24226]:SwitchCase[24256-24271]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[24233-24249]:SwitchCase[24278-24294]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[24256-24271]:SwitchCase[24301-24316]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[24278-24293]:SwitchCase[24323-24338]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[24300-24317]:SwitchCase[24345-24362]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[24324-24342]:SwitchCase[24369-24387]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[24349-24367]:SwitchCase[24394-24412]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[24374-24389]:SwitchCase[24419-24434]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[24396-24411]:SwitchCase[24441-24456]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[24418-24433]:SwitchCase[24463-24478]"
    }, {
      "left" : "visitBinaryOperator(n.getType(), t, n);",
      "right" : "visitBinaryOperator(n.getType(), t, n);",
      "info" : "ExpressionStatement[24442-24481]:ExpressionStatement[24487-24526]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24490-24496]:BreakStatement[24535-24541]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[24504-24523]:SwitchCase[24549-24568]"
    }, {
      "left" : "if (!isReference(n.getFirstChild()))",
      "right" : "if (!isReference(n.getFirstChild()))",
      "info" : "IfStatement[24532-24616]:IfStatement[24577-24661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24569-24616]:Block[24614-24661]"
    }, {
      "left" : "report(t, n, BAD_DELETE);",
      "right" : "report(t, n, BAD_DELETE);",
      "info" : "ExpressionStatement[24581-24606]:ExpressionStatement[24626-24651]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[24625-24657]:ExpressionStatement[24670-24702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24666-24672]:BreakStatement[24711-24717]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[24680-24696]:SwitchCase[24725-24741]"
    }, {
      "left" : "JSType switchType = getJSType(parent.getFirstChild());",
      "right" : "JSType switchType = getJSType(parent.getFirstChild());",
      "info" : "VariableDeclarationStatement[24705-24759]:VariableDeclarationStatement[24750-24804]"
    }, {
      "left" : "JSType caseType = getJSType(n.getFirstChild());",
      "right" : "JSType caseType = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[24768-24815]:VariableDeclarationStatement[24813-24860]"
    }, {
      "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "info" : "ExpressionStatement[24824-24886]:ExpressionStatement[24869-24931]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24895-24912]:ExpressionStatement[24940-24957]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24921-24927]:BreakStatement[24966-24972]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[24935-24951]:SwitchCase[24980-24996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24952-25173]:Block[24997-25218]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24962-24993]:VariableDeclarationStatement[25007-25038]"
    }, {
      "left" : "childType = getJSType(child);",
      "right" : "childType = getJSType(child);",
      "info" : "ExpressionStatement[25002-25031]:ExpressionStatement[25047-25076]"
    }, {
      "left" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
      "right" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
      "info" : "ExpressionStatement[25040-25124]:ExpressionStatement[25085-25169]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25133-25150]:ExpressionStatement[25178-25195]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25159-25165]:BreakStatement[25204-25210]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[25181-25201]:SwitchCase[25226-25246]"
    }, {
      "left" : "visitFunction(t, n);",
      "right" : "visitFunction(t, n);",
      "info" : "ExpressionStatement[25210-25230]:ExpressionStatement[25255-25275]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25239-25245]:BreakStatement[25284-25290]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[25309-25326]:SwitchCase[25354-25371]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[25333-25355]:SwitchCase[25378-25400]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[25362-25380]:SwitchCase[25407-25425]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[25387-25404]:SwitchCase[25432-25449]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[25411-25428]:SwitchCase[25456-25473]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[25435-25450]:SwitchCase[25480-25495]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[25457-25475]:SwitchCase[25502-25520]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[25482-25505]:SwitchCase[25527-25550]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[25512-25529]:SwitchCase[25557-25574]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[25536-25553]:SwitchCase[25581-25598]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[25560-25579]:SwitchCase[25605-25624]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[25586-25606]:SwitchCase[25631-25651]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[25613-25633]:SwitchCase[25658-25678]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[25640-25657]:SwitchCase[25685-25702]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25666-25683]:ExpressionStatement[25711-25728]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25692-25698]:BreakStatement[25737-25743]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25755-25769]:SwitchCase[25800-25814]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25776-25791]:SwitchCase[25821-25836]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[25798-25812]:SwitchCase[25843-25857]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25819-25836]:SwitchCase[25864-25881]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25845-25862]:ExpressionStatement[25890-25907]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25871-25877]:BreakStatement[25916-25922]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[25943-25958]:SwitchCase[25988-26003]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[25965-25981]:SwitchCase[26010-26026]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[25988-26009]:SwitchCase[26033-26054]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[26016-26030]:SwitchCase[26061-26075]"
    }, {
      "left" : "if (n.getJSType() != null)",
      "right" : "if (n.getJSType() != null)",
      "info" : "IfStatement[26039-26459]:IfStatement[26084-26504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26066-26142]:Block[26111-26187]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[26114-26132]:ExpressionStatement[26159-26177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26148-26459]:Block[26193-26504]"
    }, {
      "left" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
      "right" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
      "info" : "IfStatement[26239-26449]:IfStatement[26284-26494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26335-26399]:Block[26380-26444]"
    }, {
      "left" : "ensureTyped(t, n, parent.getJSType());",
      "right" : "ensureTyped(t, n, parent.getJSType());",
      "info" : "ExpressionStatement[26349-26387]:ExpressionStatement[26394-26432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26405-26449]:Block[26450-26494]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[26419-26437]:ExpressionStatement[26464-26482]"
    }, {
      "left" : "if (n.getType() == Token.OBJECTLIT)",
      "right" : "if (n.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[26468-26608]:IfStatement[26513-26653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26504-26608]:Block[26549-26653]"
    }, {
      "left" : "for (Node key : n.children())",
      "right" : "for (Node key : n.children())",
      "info" : "EnhancedForStatement[26516-26598]:EnhancedForStatement[26561-26643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26546-26598]:Block[26591-26643]"
    }, {
      "left" : "visitObjLitKey(t, key, n);",
      "right" : "visitObjLitKey(t, key, n);",
      "info" : "ExpressionStatement[26560-26586]:ExpressionStatement[26605-26631]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26617-26623]:BreakStatement[26662-26668]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26631-26639]:SwitchCase[26676-26684]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "info" : "ExpressionStatement[26648-26704]:ExpressionStatement[26693-26749]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[26713-26731]:ExpressionStatement[26758-26776]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26740-26746]:BreakStatement[26785-26791]"
    }, {
      "left" : "typeable = typeable && !inExterns;",
      "right" : "typeable = typeable && !inExterns;",
      "info" : "ExpressionStatement[26835-26869]:ExpressionStatement[26880-26914]"
    }, {
      "left" : "if (typeable)",
      "right" : "if (typeable)",
      "info" : "IfStatement[26875-26934]:IfStatement[26920-26979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26889-26934]:Block[26934-26979]"
    }, {
      "left" : "doPercentTypedAccounting(t, n);",
      "right" : "doPercentTypedAccounting(t, n);",
      "info" : "ExpressionStatement[26897-26928]:ExpressionStatement[26942-26973]"
    }, {
      "left" : "checkNoTypeCheckSection(n, false);",
      "right" : "checkNoTypeCheckSection(n, false);",
      "info" : "ExpressionStatement[26940-26974]:ExpressionStatement[26985-27019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27151-27472]:Block[27196-27517]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[27157-27185]:VariableDeclarationStatement[27202-27230]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[27190-27468]:IfStatement[27235-27513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27208-27234]:Block[27253-27279]"
    }, {
      "left" : "nullCount++;",
      "right" : "nullCount++;",
      "info" : "ExpressionStatement[27216-27228]:ExpressionStatement[27261-27273]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[27240-27468]:IfStatement[27285-27513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27266-27435]:Block[27311-27480]"
    }, {
      "left" : "if (reportUnknownTypes.isOn())",
      "right" : "if (reportUnknownTypes.isOn())",
      "info" : "IfStatement[27274-27407]:IfStatement[27319-27452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27305-27407]:Block[27350-27452]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "info" : "ExpressionStatement[27315-27399]:ExpressionStatement[27360-27444]"
    }, {
      "left" : "unknownCount++;",
      "right" : "unknownCount++;",
      "info" : "ExpressionStatement[27414-27429]:ExpressionStatement[27459-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27441-27468]:Block[27486-27513]"
    }, {
      "left" : "typedCount++;",
      "right" : "typedCount++;",
      "info" : "ExpressionStatement[27449-27462]:ExpressionStatement[27494-27507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27866-31576]:Block[27911-31621]"
    }, {
      "left" : "JSDocInfo info = assign.getJSDocInfo();",
      "right" : "JSDocInfo info = assign.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[27872-27911]:VariableDeclarationStatement[27917-27956]"
    }, {
      "left" : "Node lvalue = assign.getFirstChild();",
      "right" : "Node lvalue = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[27916-27953]:VariableDeclarationStatement[27961-27998]"
    }, {
      "left" : "Node rvalue = assign.getLastChild();",
      "right" : "Node rvalue = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[27958-27994]:VariableDeclarationStatement[28003-28039]"
    }, {
      "left" : "if (lvalue.getType() == Token.GETPROP)",
      "right" : "if (lvalue.getType() == Token.GETPROP)",
      "info" : "IfStatement[28000-31226]:IfStatement[28045-31271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28039-30921]:Block[28084-30966]"
    }, {
      "left" : "Node object = lvalue.getFirstChild();",
      "right" : "Node object = lvalue.getFirstChild();",
      "info" : "VariableDeclarationStatement[28047-28084]:VariableDeclarationStatement[28092-28129]"
    }, {
      "left" : "JSType objectJsType = getJSType(object);",
      "right" : "JSType objectJsType = getJSType(object);",
      "info" : "VariableDeclarationStatement[28091-28131]:VariableDeclarationStatement[28136-28176]"
    }, {
      "left" : "String property = lvalue.getLastChild().getString();",
      "right" : "String property = lvalue.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[28138-28190]:VariableDeclarationStatement[28183-28235]"
    }, {
      "left" : "if (object.getType() == Token.GETPROP)",
      "right" : "if (object.getType() == Token.GETPROP)",
      "info" : "IfStatement[28318-28618]:IfStatement[28363-28663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28357-28618]:Block[28402-28663]"
    }, {
      "left" : "JSType jsType = getJSType(object.getFirstChild());",
      "right" : "JSType jsType = getJSType(object.getFirstChild());",
      "info" : "VariableDeclarationStatement[28367-28417]:VariableDeclarationStatement[28412-28462]"
    }, {
      "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[28426-28610]:IfStatement[28471-28655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28521-28610]:Block[28566-28655]"
    }, {
      "left" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "right" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "info" : "ExpressionStatement[28533-28600]:ExpressionStatement[28578-28645]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[28670-28882]:IfStatement[28715-28927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28706-28882]:Block[28751-28927]"
    }, {
      "left" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
      "right" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
      "info" : "ExpressionStatement[28716-28858]:ExpressionStatement[28761-28903]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28867-28874]:ReturnStatement[28912-28919]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[28934-29145]:IfStatement[28979-29190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28983-29145]:Block[29028-29190]"
    }, {
      "left" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
      "right" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
      "info" : "ExpressionStatement[28993-29121]:ExpressionStatement[29038-29166]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29130-29137]:ReturnStatement[29175-29182]"
    }, {
      "left" : "if (property.equals(\"prototype\"))",
      "right" : "if (property.equals(\"prototype\"))",
      "info" : "IfStatement[29186-29663]:IfStatement[29231-29708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29220-29663]:Block[29265-29708]"
    }, {
      "left" : "if (objectJsType instanceof FunctionType)",
      "right" : "if (objectJsType instanceof FunctionType)",
      "info" : "IfStatement[29230-29639]:IfStatement[29275-29684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29272-29573]:Block[29317-29618]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) objectJsType;",
      "right" : "FunctionType functionType = (FunctionType) objectJsType;",
      "info" : "VariableDeclarationStatement[29284-29340]:VariableDeclarationStatement[29329-29385]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[29351-29563]:IfStatement[29396-29608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29385-29563]:Block[29430-29608]"
    }, {
      "left" : "JSType rvalueType = rvalue.getJSType();",
      "right" : "JSType rvalueType = rvalue.getJSType();",
      "info" : "VariableDeclarationStatement[29399-29438]:VariableDeclarationStatement[29444-29483]"
    }, {
      "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "info" : "ExpressionStatement[29451-29551]:ExpressionStatement[29496-29596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29579-29639]:Block[29624-29684]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29648-29655]:ReturnStatement[29693-29700]"
    }, {
      "left" : "if (object.getType() == Token.GETPROP)",
      "right" : "if (object.getType() == Token.GETPROP)",
      "info" : "IfStatement[29713-30416]:IfStatement[29758-30461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29752-30416]:Block[29797-30461]"
    }, {
      "left" : "Node object2 = object.getFirstChild();",
      "right" : "Node object2 = object.getFirstChild();",
      "info" : "VariableDeclarationStatement[29762-29800]:VariableDeclarationStatement[29807-29845]"
    }, {
      "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "info" : "VariableDeclarationStatement[29809-29875]:VariableDeclarationStatement[29854-29920]"
    }, {
      "left" : "if (\"prototype\".equals(property2))",
      "right" : "if (\"prototype\".equals(property2))",
      "info" : "IfStatement[29885-30408]:IfStatement[29930-30453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29920-30408]:Block[29965-30453]"
    }, {
      "left" : "JSType jsType = object2.getJSType();",
      "right" : "JSType jsType = object2.getJSType();",
      "info" : "VariableDeclarationStatement[29932-29968]:VariableDeclarationStatement[29977-30013]"
    }, {
      "left" : "if (jsType instanceof FunctionType)",
      "right" : "if (jsType instanceof FunctionType)",
      "info" : "IfStatement[29979-30380]:IfStatement[30024-30425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30015-30310]:Block[30060-30355]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) jsType;",
      "right" : "FunctionType functionType = (FunctionType) jsType;",
      "info" : "VariableDeclarationStatement[30029-30079]:VariableDeclarationStatement[30074-30124]"
    }, {
      "left" : "if (functionType.isConstructor() || functionType.isInterface())",
      "right" : "if (functionType.isConstructor() || functionType.isInterface())",
      "info" : "IfStatement[30092-30298]:IfStatement[30137-30343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30156-30298]:Block[30201-30343]"
    }, {
      "left" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
      "right" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
      "info" : "ExpressionStatement[30172-30284]:ExpressionStatement[30217-30329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30316-30380]:Block[30361-30425]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30391-30398]:ReturnStatement[30436-30443]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[30456-30546]:VariableDeclarationStatement[30501-30591]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[30553-30915]:IfStatement[30598-30960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30571-30915]:Block[30616-30960]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[30581-30891]:IfStatement[30626-30936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30722-30891]:Block[30767-30936]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
      "info" : "ExpressionStatement[30734-30881]:ExpressionStatement[30779-30926]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30900-30907]:ReturnStatement[30945-30952]"
    }, {
      "left" : "if (lvalue.getType() == Token.NAME)",
      "right" : "if (lvalue.getType() == Token.NAME)",
      "info" : "IfStatement[30927-31226]:IfStatement[30972-31271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30963-31226]:Block[31008-31271]"
    }, {
      "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "info" : "VariableDeclarationStatement[31013-31066]:VariableDeclarationStatement[31058-31111]"
    }, {
      "left" : "Var var = t.getScope().getVar(lvalue.getString());",
      "right" : "Var var = t.getScope().getVar(lvalue.getString());",
      "info" : "VariableDeclarationStatement[31073-31123]:VariableDeclarationStatement[31118-31168]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[31130-31220]:IfStatement[31175-31265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31147-31220]:Block[31192-31265]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[31157-31212]:IfStatement[31202-31257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31183-31212]:Block[31228-31257]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31195-31202]:ReturnStatement[31240-31247]"
    }, {
      "left" : "JSType leftType = getJSType(lvalue);",
      "right" : "JSType leftType = getJSType(lvalue);",
      "info" : "VariableDeclarationStatement[31257-31293]:VariableDeclarationStatement[31302-31338]"
    }, {
      "left" : "Node rightChild = assign.getLastChild();",
      "right" : "Node rightChild = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[31298-31338]:VariableDeclarationStatement[31343-31383]"
    }, {
      "left" : "JSType rightType = getJSType(rightChild);",
      "right" : "JSType rightType = getJSType(rightChild);",
      "info" : "VariableDeclarationStatement[31343-31384]:VariableDeclarationStatement[31388-31429]"
    }, {
      "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "info" : "IfStatement[31389-31572]:IfStatement[31434-31617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31481-31529]:Block[31526-31574]"
    }, {
      "left" : "ensureTyped(t, assign, rightType);",
      "right" : "ensureTyped(t, assign, rightType);",
      "info" : "ExpressionStatement[31489-31523]:ExpressionStatement[31534-31568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31535-31572]:Block[31580-31617]"
    }, {
      "left" : "ensureTyped(t, assign);",
      "right" : "ensureTyped(t, assign);",
      "info" : "ExpressionStatement[31543-31566]:ExpressionStatement[31588-31611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31929-33554]:Block[31974-33599]"
    }, {
      "left" : "Node rvalue = key.getFirstChild();",
      "right" : "Node rvalue = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[32162-32196]:VariableDeclarationStatement[32207-32241]"
    }, {
      "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "info" : "VariableDeclarationStatement[32201-32295]:VariableDeclarationStatement[32246-32340]"
    }, {
      "left" : "if (rightType == null)",
      "right" : "if (rightType == null)",
      "info" : "IfStatement[32300-32377]:IfStatement[32345-32422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32323-32377]:Block[32368-32422]"
    }, {
      "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[32331-32371]:ExpressionStatement[32376-32416]"
    }, {
      "left" : "Node owner = objlit;",
      "right" : "Node owner = objlit;",
      "info" : "VariableDeclarationStatement[32383-32403]:VariableDeclarationStatement[32428-32448]"
    }, {
      "left" : "JSType keyType = getJSType(key);",
      "right" : "JSType keyType = getJSType(key);",
      "info" : "VariableDeclarationStatement[32463-32495]:VariableDeclarationStatement[32508-32540]"
    }, {
      "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "info" : "VariableDeclarationStatement[32500-32640]:VariableDeclarationStatement[32545-32685]"
    }, {
      "left" : "if (valid)",
      "right" : "if (valid)",
      "info" : "IfStatement[32645-32741]:IfStatement[32690-32786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32656-32701]:Block[32701-32746]"
    }, {
      "left" : "ensureTyped(t, key, rightType);",
      "right" : "ensureTyped(t, key, rightType);",
      "info" : "ExpressionStatement[32664-32695]:ExpressionStatement[32709-32740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32707-32741]:Block[32752-32786]"
    }, {
      "left" : "ensureTyped(t, key);",
      "right" : "ensureTyped(t, key);",
      "info" : "ExpressionStatement[32715-32735]:ExpressionStatement[32760-32780]"
    }, {
      "left" : "JSType objlitType = getJSType(objlit);",
      "right" : "JSType objlitType = getJSType(objlit);",
      "info" : "VariableDeclarationStatement[33027-33065]:VariableDeclarationStatement[33072-33110]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[33070-33156]:VariableDeclarationStatement[33115-33201]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[33161-33550]:IfStatement[33206-33595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33179-33550]:Block[33224-33595]"
    }, {
      "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "info" : "VariableDeclarationStatement[33187-33239]:VariableDeclarationStatement[33232-33284]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[33246-33530]:IfStatement[33291-33575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33383-33530]:Block[33428-33575]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "info" : "ExpressionStatement[33393-33522]:ExpressionStatement[33438-33567]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33537-33544]:ReturnStatement[33582-33589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33741-33981]:Block[33786-34026]"
    }, {
      "left" : "for (; type != null; type = type.getImplicitPrototype())",
      "right" : "for (; type != null; type = type.getImplicitPrototype())",
      "info" : "ForStatement[33747-33959]:ForStatement[33792-34004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33804-33959]:Block[33849-34004]"
    }, {
      "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "info" : "VariableDeclarationStatement[33812-33867]:VariableDeclarationStatement[33857-33912]"
    }, {
      "left" : "if (docInfo != null && docInfo.isImplicitCast())",
      "right" : "if (docInfo != null && docInfo.isImplicitCast())",
      "info" : "IfStatement[33874-33953]:IfStatement[33919-33998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33923-33953]:Block[33968-33998]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33933-33945]:ReturnStatement[33978-33990]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33964-33977]:ReturnStatement[34009-34022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34402-38509]:Block[34447-38554]"
    }, {
      "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "info" : "IfStatement[34499-34562]:IfStatement[34544-34607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34541-34562]:Block[34586-34607]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34549-34556]:ReturnStatement[34594-34601]"
    }, {
      "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[34568-34630]:VariableDeclarationStatement[34613-34675]"
    }, {
      "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
      "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[34635-34749]:VariableDeclarationStatement[34680-34794]"
    }, {
      "left" : "boolean superInterfacesHasProperty = false;",
      "right" : "boolean superInterfacesHasProperty = false;",
      "info" : "VariableDeclarationStatement[34775-34818]:VariableDeclarationStatement[34820-34863]"
    }, {
      "left" : "if (ctorType.isInterface())",
      "right" : "if (ctorType.isInterface())",
      "info" : "IfStatement[34823-35058]:IfStatement[34868-35103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34851-35058]:Block[34896-35103]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[34859-35052]:EnhancedForStatement[34904-35097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34925-35052]:Block[34970-35097]"
    }, {
      "left" : "superInterfacesHasProperty =\n          superInterfacesHasProperty || interfaceType.hasProperty(propertyName);",
      "right" : "superInterfacesHasProperty =\n          superInterfacesHasProperty || interfaceType.hasProperty(propertyName);",
      "info" : "ExpressionStatement[34935-35044]:ExpressionStatement[34980-35089]"
    }, {
      "left" : "boolean declaredOverride = info != null && info.isOverride();",
      "right" : "boolean declaredOverride = info != null && info.isOverride();",
      "info" : "VariableDeclarationStatement[35063-35124]:VariableDeclarationStatement[35108-35169]"
    }, {
      "left" : "boolean foundInterfaceProperty = false;",
      "right" : "boolean foundInterfaceProperty = false;",
      "info" : "VariableDeclarationStatement[35130-35169]:VariableDeclarationStatement[35175-35214]"
    }, {
      "left" : "if (ctorType.isConstructor())",
      "right" : "if (ctorType.isConstructor())",
      "info" : "IfStatement[35174-36197]:IfStatement[35219-36242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35204-36197]:Block[35249-36242]"
    }, {
      "left" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "right" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "info" : "EnhancedForStatement[35212-36191]:EnhancedForStatement[35257-36236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35297-36191]:Block[35342-36236]"
    }, {
      "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "info" : "IfStatement[35307-35430]:IfStatement[35352-35475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35399-35430]:Block[35444-35475]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35411-35420]:ContinueStatement[35456-35465]"
    }, {
      "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[35439-35533]:VariableDeclarationStatement[35484-35578]"
    }, {
      "left" : "Preconditions.checkNotNull(interfaceType);",
      "right" : "Preconditions.checkNotNull(interfaceType);",
      "info" : "ExpressionStatement[35542-35584]:ExpressionStatement[35587-35629]"
    }, {
      "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[35593-35691]:VariableDeclarationStatement[35638-35736]"
    }, {
      "left" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
      "right" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
      "info" : "ExpressionStatement[35700-35772]:ExpressionStatement[35745-35817]"
    }, {
      "left" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
      "right" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
      "info" : "IfStatement[35781-36183]:IfStatement[35826-36228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35872-36183]:Block[35917-36228]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "info" : "ExpressionStatement[35986-36173]:ExpressionStatement[36031-36218]"
    }, {
      "left" : "if (!declaredOverride && !superClassHasProperty\n        && !superInterfacesHasProperty)",
      "right" : "if (!declaredOverride && !superClassHasProperty\n        && !superInterfacesHasProperty)",
      "info" : "IfStatement[36203-36372]:IfStatement[36248-36417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36291-36372]:Block[36336-36417]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36359-36366]:ReturnStatement[36404-36411]"
    }, {
      "left" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "right" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "info" : "VariableDeclarationStatement[36378-36490]:VariableDeclarationStatement[36423-36535]"
    }, {
      "left" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
      "right" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
      "info" : "IfStatement[36495-36864]:IfStatement[36540-36909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36611-36864]:Block[36656-36909]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "info" : "ExpressionStatement[36713-36858]:ExpressionStatement[36758-36903]"
    }, {
      "left" : "if (!declaredOverride)",
      "right" : "if (!declaredOverride)",
      "info" : "IfStatement[36869-36952]:IfStatement[36914-36997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36892-36952]:Block[36937-36997]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36939-36946]:ReturnStatement[36984-36991]"
    }, {
      "left" : "if (superClassHasProperty)",
      "right" : "if (superClassHasProperty)",
      "info" : "IfStatement[37020-38505]:IfStatement[37065-38550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37047-37489]:Block[37092-37534]"
    }, {
      "left" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
      "right" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[37101-37195]:VariableDeclarationStatement[37146-37240]"
    }, {
      "left" : "if (!propertyType.canAssignTo(superClassPropType))",
      "right" : "if (!propertyType.canAssignTo(superClassPropType))",
      "info" : "IfStatement[37202-37483]:IfStatement[37247-37528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37253-37483]:Block[37298-37528]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "info" : "ExpressionStatement[37263-37475]:ExpressionStatement[37308-37520]"
    }, {
      "left" : "if (superInterfacesHasProperty)",
      "right" : "if (superInterfacesHasProperty)",
      "info" : "IfStatement[37495-38505]:IfStatement[37540-38550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37527-38267]:Block[37572-38312]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[37581-38261]:EnhancedForStatement[37626-38306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37647-38261]:Block[37692-38306]"
    }, {
      "left" : "if (interfaceType.hasProperty(propertyName))",
      "right" : "if (interfaceType.hasProperty(propertyName))",
      "info" : "IfStatement[37657-38253]:IfStatement[37702-38298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37702-38253]:Block[37747-38298]"
    }, {
      "left" : "JSType superPropertyType =\n            interfaceType.getPropertyType(propertyName);",
      "right" : "JSType superPropertyType =\n            interfaceType.getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[37714-37797]:VariableDeclarationStatement[37759-37842]"
    }, {
      "left" : "if (!propertyType.canAssignTo(superPropertyType))",
      "right" : "if (!propertyType.canAssignTo(superPropertyType))",
      "info" : "IfStatement[37808-38243]:IfStatement[37853-38288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37858-38243]:Block[37903-38288]"
    }, {
      "left" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "right" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "info" : "ExpressionStatement[37872-37975]:ExpressionStatement[37917-38020]"
    }, {
      "left" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "right" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "info" : "ExpressionStatement[37988-38231]:ExpressionStatement[38033-38276]"
    }, {
      "left" : "if (!foundInterfaceProperty)",
      "right" : "if (!foundInterfaceProperty)",
      "info" : "IfStatement[38273-38505]:IfStatement[38318-38550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38302-38505]:Block[38347-38550]"
    }, {
      "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "info" : "ExpressionStatement[38371-38499]:ExpressionStatement[38416-38544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38716-39462]:Block[38761-39507]"
    }, {
      "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[38722-38794]:ExpressionStatement[38767-38839]"
    }, {
      "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "info" : "ExpressionStatement[38799-38850]:ExpressionStatement[38844-38895]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[38951-39458]:WhileStatement[38996-39503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38964-39458]:Block[39009-39503]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[38972-39061]:VariableDeclarationStatement[39017-39106]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[39068-39135]:IfStatement[39113-39180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39104-39135]:Block[39149-39180]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39114-39127]:ReturnStatement[39159-39172]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "info" : "IfStatement[39142-39266]:IfStatement[39187-39311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39236-39266]:Block[39281-39311]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39246-39258]:ReturnStatement[39291-39303]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[39273-39320]:ExpressionStatement[39318-39365]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[39327-39376]:IfStatement[39372-39421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39345-39376]:Block[39390-39421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39355-39368]:ReturnStatement[39400-39413]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[39383-39452]:ExpressionStatement[39428-39497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39714-40793]:Block[39759-40838]"
    }, {
      "left" : "JSType rvalueType = getJSType(rvalue);",
      "right" : "JSType rvalueType = getJSType(rvalue);",
      "info" : "VariableDeclarationStatement[39721-39759]:VariableDeclarationStatement[39766-39804]"
    }, {
      "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "info" : "VariableDeclarationStatement[39958-40049]:VariableDeclarationStatement[40003-40094]"
    }, {
      "left" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
      "right" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
      "info" : "IfStatement[40054-40530]:IfStatement[40099-40575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40197-40530]:Block[40242-40575]"
    }, {
      "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "info" : "VariableDeclarationStatement[40280-40394]:VariableDeclarationStatement[40325-40439]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "info" : "ExpressionStatement[40401-40524]:ExpressionStatement[40446-40569]"
    }, {
      "left" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "right" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "info" : "IfStatement[40536-40789]:IfStatement[40581-40834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40663-40789]:Block[40708-40834]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "info" : "ExpressionStatement[40671-40783]:ExpressionStatement[40716-40828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41082-41246]:Block[41127-41291]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
      "right" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
      "info" : "ExpressionStatement[41142-41242]:ExpressionStatement[41187-41287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41623-42655]:Block[41668-42700]"
    }, {
      "left" : "int parentNodeType = parent.getType();",
      "right" : "int parentNodeType = parent.getType();",
      "info" : "VariableDeclarationStatement[42081-42119]:VariableDeclarationStatement[42126-42164]"
    }, {
      "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
      "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
      "info" : "IfStatement[42124-42307]:IfStatement[42169-42352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42280-42307]:Block[42325-42352]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42288-42301]:ReturnStatement[42333-42346]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[42313-42341]:VariableDeclarationStatement[42358-42386]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[42346-42605]:IfStatement[42391-42650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42364-42605]:Block[42409-42650]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[42372-42407]:ExpressionStatement[42417-42452]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[42414-42459]:VariableDeclarationStatement[42459-42504]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[42466-42599]:IfStatement[42511-42644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42483-42599]:Block[42528-42644]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[42493-42524]:VariableDeclarationStatement[42538-42569]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[42533-42591]:IfStatement[42578-42636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42554-42591]:Block[42599-42636]"
    }, {
      "left" : "type = varType;",
      "right" : "type = varType;",
      "info" : "ExpressionStatement[42566-42581]:ExpressionStatement[42611-42626]"
    }, {
      "left" : "ensureTyped(t, n, type);",
      "right" : "ensureTyped(t, n, type);",
      "info" : "ExpressionStatement[42610-42634]:ExpressionStatement[42655-42679]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42639-42651]:ReturnStatement[42684-42696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42997-43991]:Block[43042-44036]"
    }, {
      "left" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
      "right" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[43214-43298]:IfStatement[43259-43343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43277-43298]:Block[43322-43343]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43285-43292]:ReturnStatement[43330-43337]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[43510-43543]:VariableDeclarationStatement[43555-43588]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[43548-43581]:VariableDeclarationStatement[43593-43626]"
    }, {
      "left" : "JSType childType = getJSType(objNode);",
      "right" : "JSType childType = getJSType(objNode);",
      "info" : "VariableDeclarationStatement[43586-43624]:VariableDeclarationStatement[43631-43669]"
    }, {
      "left" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
      "right" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[43721-43899]:IfStatement[43766-43944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43853-43899]:Block[43898-43944]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[43861-43879]:ExpressionStatement[43906-43924]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43886-43893]:ReturnStatement[43931-43938]"
    }, {
      "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "info" : "ExpressionStatement[43905-43964]:ExpressionStatement[43950-44009]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[43969-43987]:ExpressionStatement[44014-44032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44161-45086]:Block[44206-45131]"
    }, {
      "left" : "ObjectType objectType = childType.dereference();",
      "right" : "ObjectType objectType = childType.dereference();",
      "info" : "VariableDeclarationStatement[44167-44215]:VariableDeclarationStatement[44212-44260]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[44220-45082]:IfStatement[44265-45127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44244-44932]:Block[44289-44977]"
    }, {
      "left" : "JSType propType = getJSType(n);",
      "right" : "JSType propType = getJSType(n);",
      "info" : "VariableDeclarationStatement[44252-44283]:VariableDeclarationStatement[44297-44328]"
    }, {
      "left" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[44290-44926]:IfStatement[44335-44971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44476-44926]:Block[44521-44971]"
    }, {
      "left" : "if (objectType instanceof EnumType)",
      "right" : "if (objectType instanceof EnumType)",
      "info" : "IfStatement[44486-44918]:IfStatement[44531-44963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44522-44592]:Block[44567-44637]"
    }, {
      "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "info" : "ExpressionStatement[44534-44582]:ExpressionStatement[44579-44627]"
    }, {
      "left" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
      "right" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
      "info" : "IfStatement[44598-44918]:IfStatement[44643-44963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44690-44918]:Block[44735-44963]"
    }, {
      "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "info" : "IfStatement[44702-44908]:IfStatement[44747-44953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44764-44908]:Block[44809-44953]"
    }, {
      "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "info" : "ExpressionStatement[44778-44896]:ExpressionStatement[44823-44941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44938-45082]:Block[44983-45127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45342-46060]:Block[45387-46105]"
    }, {
      "left" : "Node parent = getProp.getParent();",
      "right" : "Node parent = getProp.getParent();",
      "info" : "VariableDeclarationStatement[45348-45382]:VariableDeclarationStatement[45393-45427]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "info" : "SwitchStatement[45387-46038]:SwitchStatement[45432-46083]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[45421-45437]:SwitchCase[45466-45482]"
    }, {
      "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "info" : "ReturnStatement[45446-45564]:ReturnStatement[45491-45609]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[45572-45586]:SwitchCase[45617-45631]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45593-45610]:SwitchCase[45638-45655]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45617-45631]:SwitchCase[45662-45676]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45638-45653]:SwitchCase[45683-45698]"
    }, {
      "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "info" : "ReturnStatement[45662-45720]:ReturnStatement[45707-45765]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[45728-45750]:SwitchCase[45773-45795]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[45757-45775]:SwitchCase[45802-45820]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45784-45796]:ReturnStatement[45829-45841]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[45804-45819]:SwitchCase[45849-45864]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[45826-45842]:SwitchCase[45871-45887]"
    }, {
      "left" : "return parent.getFirstChild() == getProp;",
      "right" : "return parent.getFirstChild() == getProp;",
      "info" : "ReturnStatement[45851-45892]:ReturnStatement[45896-45937]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[45900-45915]:SwitchCase[45945-45960]"
    }, {
      "left" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
      "right" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
      "info" : "ReturnStatement[45924-46032]:ReturnStatement[45969-46077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46043-46056]:ReturnStatement[46088-46101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46341-46512]:Block[46386-46557]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[46347-46377]:VariableDeclarationStatement[46392-46422]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[46382-46412]:VariableDeclarationStatement[46427-46457]"
    }, {
      "left" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
      "right" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
      "info" : "ExpressionStatement[46417-46485]:ExpressionStatement[46462-46530]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[46490-46508]:ExpressionStatement[46535-46553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46785-48074]:Block[46830-48119]"
    }, {
      "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "info" : "VariableDeclarationStatement[46953-47015]:VariableDeclarationStatement[46998-47060]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[47020-48070]:EnhancedForStatement[47065-48115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47051-48070]:Block[47096-48115]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[47059-47093]:VariableDeclarationStatement[47104-47138]"
    }, {
      "left" : "Var var = t.getScope().getVar(name.getString());",
      "right" : "Var var = t.getScope().getVar(name.getString());",
      "info" : "VariableDeclarationStatement[47170-47218]:VariableDeclarationStatement[47215-47263]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[47226-48064]:IfStatement[47271-48109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47245-48064]:Block[47290-48109]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[47255-47291]:VariableDeclarationStatement[47300-47336]"
    }, {
      "left" : "JSType nameType = var.getType();",
      "right" : "JSType nameType = var.getType();",
      "info" : "VariableDeclarationStatement[47300-47332]:VariableDeclarationStatement[47345-47377]"
    }, {
      "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "info" : "ExpressionStatement[47341-47412]:ExpressionStatement[47386-47457]"
    }, {
      "left" : "JSDocInfo info = name.getJSDocInfo();",
      "right" : "JSDocInfo info = name.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[47422-47459]:VariableDeclarationStatement[47467-47504]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[47468-47523]:IfStatement[47513-47568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47486-47523]:Block[47531-47568]"
    }, {
      "left" : "info = varInfo;",
      "right" : "info = varInfo;",
      "info" : "ExpressionStatement[47498-47513]:ExpressionStatement[47543-47558]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[47532-48056]:IfStatement[47577-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47581-47843]:Block[47626-47888]"
    }, {
      "left" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
      "right" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
      "info" : "ExpressionStatement[47707-47833]:ExpressionStatement[47752-47878]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[47849-48056]:IfStatement[47894-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47875-47929]:Block[47920-47974]"
    }, {
      "left" : "ensureTyped(t, name, valueType);",
      "right" : "ensureTyped(t, name, valueType);",
      "info" : "ExpressionStatement[47887-47919]:ExpressionStatement[47932-47964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47935-48056]:Block[47980-48101]"
    }, {
      "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "info" : "ExpressionStatement[47947-48046]:ExpressionStatement[47992-48091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48161-48977]:Block[48206-49022]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[48167-48204]:VariableDeclarationStatement[48212-48249]"
    }, {
      "left" : "FunctionType type = getFunctionType(constructor);",
      "right" : "FunctionType type = getFunctionType(constructor);",
      "info" : "VariableDeclarationStatement[48209-48258]:VariableDeclarationStatement[48254-48303]"
    }, {
      "left" : "if (type != null && type.isConstructor())",
      "right" : "if (type != null && type.isConstructor())",
      "info" : "IfStatement[48263-48973]:IfStatement[48308-49018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48305-48399]:Block[48350-48444]"
    }, {
      "left" : "visitParameterList(t, n, type);",
      "right" : "visitParameterList(t, n, type);",
      "info" : "ExpressionStatement[48313-48344]:ExpressionStatement[48358-48389]"
    }, {
      "left" : "ensureTyped(t, n, type.getInstanceType());",
      "right" : "ensureTyped(t, n, type.getInstanceType());",
      "info" : "ExpressionStatement[48351-48393]:ExpressionStatement[48396-48438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48405-48973]:Block[48450-49018]"
    }, {
      "left" : "if (constructor.getType() != Token.GETPROP)",
      "right" : "if (constructor.getType() != Token.GETPROP)",
      "info" : "IfStatement[48470-48942]:IfStatement[48515-48987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48514-48942]:Block[48559-48987]"
    }, {
      "left" : "Node line;",
      "right" : "Node line;",
      "info" : "VariableDeclarationStatement[48729-48739]:VariableDeclarationStatement[48774-48784]"
    }, {
      "left" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
      "right" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
      "info" : "IfStatement[48748-48890]:IfStatement[48793-48935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48812-48843]:Block[48857-48888]"
    }, {
      "left" : "line = n;",
      "right" : "line = n;",
      "info" : "ExpressionStatement[48824-48833]:ExpressionStatement[48869-48878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48849-48890]:Block[48894-48935]"
    }, {
      "left" : "line = constructor;",
      "right" : "line = constructor;",
      "info" : "ExpressionStatement[48861-48880]:ExpressionStatement[48906-48925]"
    }, {
      "left" : "report(t, line, NOT_A_CONSTRUCTOR);",
      "right" : "report(t, line, NOT_A_CONSTRUCTOR);",
      "info" : "ExpressionStatement[48899-48934]:ExpressionStatement[48944-48979]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[48949-48967]:ExpressionStatement[48994-49012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49725-50489]:Block[49770-50534]"
    }, {
      "left" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
      "right" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
      "info" : "VariableDeclarationStatement[49731-49799]:VariableDeclarationStatement[49776-49844]"
    }, {
      "left" : "for (String name : currentPropertyNames)",
      "right" : "for (String name : currentPropertyNames)",
      "info" : "EnhancedForStatement[49804-50298]:EnhancedForStatement[49849-50343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49845-50298]:Block[49890-50343]"
    }, {
      "left" : "ObjectType oType = properties.get(name);",
      "right" : "ObjectType oType = properties.get(name);",
      "info" : "VariableDeclarationStatement[49853-49893]:VariableDeclarationStatement[49898-49938]"
    }, {
      "left" : "if (oType != null)",
      "right" : "if (oType != null)",
      "info" : "IfStatement[49900-50242]:IfStatement[49945-50287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49919-50242]:Block[49964-50287]"
    }, {
      "left" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "right" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "info" : "IfStatement[49929-50234]:IfStatement[49974-50279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50028-50234]:Block[50073-50279]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "right" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "info" : "ExpressionStatement[50040-50224]:ExpressionStatement[50085-50269]"
    }, {
      "left" : "currentProperties.put(name, interfaceType);",
      "right" : "currentProperties.put(name, interfaceType);",
      "info" : "ExpressionStatement[50249-50292]:ExpressionStatement[50294-50337]"
    }, {
      "left" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "right" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "info" : "EnhancedForStatement[50303-50485]:EnhancedForStatement[50348-50530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50370-50485]:Block[50415-50530]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "info" : "ExpressionStatement[50378-50479]:ExpressionStatement[50423-50524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50786-53558]:Block[50831-53603]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) n.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) n.getJSType();",
      "info" : "VariableDeclarationStatement[50792-50849]:VariableDeclarationStatement[50837-50894]"
    }, {
      "left" : "String functionPrivateName = n.getFirstChild().getString();",
      "right" : "String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[50854-50913]:VariableDeclarationStatement[50899-50958]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[50918-53554]:IfStatement[50963-53599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50952-52232]:Block[50997-52277]"
    }, {
      "left" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
      "right" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
      "info" : "VariableDeclarationStatement[50960-51070]:VariableDeclarationStatement[51005-51115]"
    }, {
      "left" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isInterface() && functionType.isConstructor()))",
      "right" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isInterface() && functionType.isConstructor()))",
      "info" : "IfStatement[51077-52226]:IfStatement[51122-52271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51251-51362]:Block[51296-51407]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "info" : "ExpressionStatement[51261-51354]:ExpressionStatement[51306-51399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51368-52226]:Block[51413-52271]"
    }, {
      "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[51440-52122]:EnhancedForStatement[51485-52167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51509-52122]:Block[51554-52167]"
    }, {
      "left" : "boolean badImplementedType = false;",
      "right" : "boolean badImplementedType = false;",
      "info" : "VariableDeclarationStatement[51521-51556]:VariableDeclarationStatement[51566-51601]"
    }, {
      "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "info" : "VariableDeclarationStatement[51567-51628]:VariableDeclarationStatement[51612-51673]"
    }, {
      "left" : "if (baseInterfaceObj != null)",
      "right" : "if (baseInterfaceObj != null)",
      "info" : "IfStatement[51639-51995]:IfStatement[51684-52040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51669-51937]:Block[51714-51982]"
    }, {
      "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "info" : "VariableDeclarationStatement[51683-51767]:VariableDeclarationStatement[51728-51812]"
    }, {
      "left" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "right" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "info" : "IfStatement[51780-51925]:IfStatement[51825-51970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51869-51925]:Block[51914-51970]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[51885-51911]:ExpressionStatement[51930-51956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51943-51995]:Block[51988-52040]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[51957-51983]:ExpressionStatement[52002-52028]"
    }, {
      "left" : "if (badImplementedType)",
      "right" : "if (badImplementedType)",
      "info" : "IfStatement[52006-52112]:IfStatement[52051-52157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52030-52112]:Block[52075-52157]"
    }, {
      "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "info" : "ExpressionStatement[52044-52100]:ExpressionStatement[52089-52145]"
    }, {
      "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "info" : "ExpressionStatement[52159-52218]:ExpressionStatement[52204-52263]"
    }, {
      "left" : "if (functionType.isInterface())",
      "right" : "if (functionType.isInterface())",
      "info" : "IfStatement[52238-53554]:IfStatement[52283-53599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52270-53554]:Block[52315-53599]"
    }, {
      "left" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[52325-52632]:EnhancedForStatement[52370-52677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52394-52632]:Block[52439-52677]"
    }, {
      "left" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "right" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "info" : "IfStatement[52404-52624]:IfStatement[52449-52669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52507-52624]:Block[52552-52669]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "right" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "info" : "ExpressionStatement[52519-52614]:ExpressionStatement[52564-52659]"
    }, {
      "left" : "if (functionType.hasImplementedInterfaces())",
      "right" : "if (functionType.hasImplementedInterfaces())",
      "info" : "IfStatement[52690-52848]:IfStatement[52735-52893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52735-52848]:Block[52780-52893]"
    }, {
      "left" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
      "right" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
      "info" : "ExpressionStatement[52745-52840]:ExpressionStatement[52790-52885]"
    }, {
      "left" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "right" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "info" : "IfStatement[52921-53548]:IfStatement[52966-53593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52972-53548]:Block[53017-53593]"
    }, {
      "left" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[53044-53131]:VariableDeclarationStatement[53089-53176]"
    }, {
      "left" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[53140-53234]:VariableDeclarationStatement[53185-53279]"
    }, {
      "left" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[53243-53540]:EnhancedForStatement[53288-53585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53313-53540]:Block[53358-53585]"
    }, {
      "left" : "currentProperties.clear();",
      "right" : "currentProperties.clear();",
      "info" : "ExpressionStatement[53325-53351]:ExpressionStatement[53370-53396]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "info" : "ExpressionStatement[53362-53482]:ExpressionStatement[53407-53527]"
    }, {
      "left" : "properties.putAll(currentProperties);",
      "right" : "properties.putAll(currentProperties);",
      "info" : "ExpressionStatement[53493-53530]:ExpressionStatement[53538-53575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53833-55884]:Block[53878-55929]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[53839-53870]:VariableDeclarationStatement[53884-53915]"
    }, {
      "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[53875-53942]:VariableDeclarationStatement[53920-53987]"
    }, {
      "left" : "if (!childType.canBeCalled())",
      "right" : "if (!childType.canBeCalled())",
      "info" : "IfStatement[53948-54080]:IfStatement[53993-54125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53978-54080]:Block[54023-54125]"
    }, {
      "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[53986-54035]:ExpressionStatement[54031-54080]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[54042-54060]:ExpressionStatement[54087-54105]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54067-54074]:ReturnStatement[54112-54119]"
    }, {
      "left" : "if (childType instanceof FunctionType)",
      "right" : "if (childType instanceof FunctionType)",
      "info" : "IfStatement[54211-55671]:IfStatement[54256-55716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54250-55633]:Block[54295-55678]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) childType;",
      "right" : "FunctionType functionType = (FunctionType) childType;",
      "info" : "VariableDeclarationStatement[54258-54311]:VariableDeclarationStatement[54303-54356]"
    }, {
      "left" : "boolean isExtern = false;",
      "right" : "boolean isExtern = false;",
      "info" : "VariableDeclarationStatement[54319-54344]:VariableDeclarationStatement[54364-54389]"
    }, {
      "left" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "right" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[54351-54409]:VariableDeclarationStatement[54396-54454]"
    }, {
      "left" : "if(functionJSDocInfo != null)",
      "right" : "if(functionJSDocInfo != null)",
      "info" : "IfStatement[54416-54634]:IfStatement[54461-54679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54446-54634]:Block[54491-54679]"
    }, {
      "left" : "String sourceName = functionJSDocInfo.getSourceName();",
      "right" : "String sourceName = functionJSDocInfo.getSourceName();",
      "info" : "VariableDeclarationStatement[54456-54510]:VariableDeclarationStatement[54501-54555]"
    }, {
      "left" : "CompilerInput functionSource = compiler.getInput(sourceName);",
      "right" : "CompilerInput functionSource = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[54519-54580]:VariableDeclarationStatement[54564-54625]"
    }, {
      "left" : "isExtern = functionSource.isExtern();",
      "right" : "isExtern = functionSource.isExtern();",
      "info" : "ExpressionStatement[54589-54626]:ExpressionStatement[54634-54671]"
    }, {
      "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "info" : "IfStatement[54787-55088]:IfStatement[54832-55133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55009-55088]:Block[55054-55133]"
    }, {
      "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[55019-55080]:ExpressionStatement[55064-55125]"
    }, {
      "left" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isNativeObjectType() &&\n          !(child.getType() == Token.GETELEM ||\n            child.getType() == Token.GETPROP))",
      "right" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isNativeObjectType() &&\n          !(child.getType() == Token.GETELEM ||\n            child.getType() == Token.GETPROP))",
      "info" : "IfStatement[55190-55525]:IfStatement[55235-55570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55449-55525]:Block[55494-55570]"
    }, {
      "left" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "right" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "info" : "ExpressionStatement[55459-55517]:ExpressionStatement[55504-55562]"
    }, {
      "left" : "visitParameterList(t, n, functionType);",
      "right" : "visitParameterList(t, n, functionType);",
      "info" : "ExpressionStatement[55533-55572]:ExpressionStatement[55578-55617]"
    }, {
      "left" : "ensureTyped(t, n, functionType.getReturnType());",
      "right" : "ensureTyped(t, n, functionType.getReturnType());",
      "info" : "ExpressionStatement[55579-55627]:ExpressionStatement[55624-55672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55639-55671]:Block[55684-55716]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[55647-55665]:ExpressionStatement[55692-55710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56045-57338]:Block[56090-57383]"
    }, {
      "left" : "Iterator<Node> arguments = call.children().iterator();",
      "right" : "Iterator<Node> arguments = call.children().iterator();",
      "info" : "VariableDeclarationStatement[56051-56105]:VariableDeclarationStatement[56096-56150]"
    }, {
      "left" : "arguments.next();",
      "right" : "arguments.next();",
      "info" : "ExpressionStatement[56110-56127]:ExpressionStatement[56155-56172]"
    }, {
      "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[56159-56227]:VariableDeclarationStatement[56204-56272]"
    }, {
      "left" : "int ordinal = 0;",
      "right" : "int ordinal = 0;",
      "info" : "VariableDeclarationStatement[56232-56248]:VariableDeclarationStatement[56277-56293]"
    }, {
      "left" : "Node parameter = null;",
      "right" : "Node parameter = null;",
      "info" : "VariableDeclarationStatement[56253-56275]:VariableDeclarationStatement[56298-56320]"
    }, {
      "left" : "Node argument = null;",
      "right" : "Node argument = null;",
      "info" : "VariableDeclarationStatement[56280-56301]:VariableDeclarationStatement[56325-56346]"
    }, {
      "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "info" : "WhileStatement[56306-56835]:WhileStatement[56351-56880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56429-56835]:Block[56474-56880]"
    }, {
      "left" : "if (parameters.hasNext())",
      "right" : "if (parameters.hasNext())",
      "info" : "IfStatement[56573-56647]:IfStatement[56618-56692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56599-56647]:Block[56644-56692]"
    }, {
      "left" : "parameter = parameters.next();",
      "right" : "parameter = parameters.next();",
      "info" : "ExpressionStatement[56609-56639]:ExpressionStatement[56654-56684]"
    }, {
      "left" : "argument = arguments.next();",
      "right" : "argument = arguments.next();",
      "info" : "ExpressionStatement[56654-56682]:ExpressionStatement[56699-56727]"
    }, {
      "left" : "ordinal++;",
      "right" : "ordinal++;",
      "info" : "ExpressionStatement[56689-56699]:ExpressionStatement[56734-56744]"
    }, {
      "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "info" : "ExpressionStatement[56707-56829]:ExpressionStatement[56752-56874]"
    }, {
      "left" : "int numArgs = call.getChildCount() - 1;",
      "right" : "int numArgs = call.getChildCount() - 1;",
      "info" : "VariableDeclarationStatement[56841-56880]:VariableDeclarationStatement[56886-56925]"
    }, {
      "left" : "int minArgs = functionType.getMinArguments();",
      "right" : "int minArgs = functionType.getMinArguments();",
      "info" : "VariableDeclarationStatement[56885-56930]:VariableDeclarationStatement[56930-56975]"
    }, {
      "left" : "int maxArgs = functionType.getMaxArguments();",
      "right" : "int maxArgs = functionType.getMaxArguments();",
      "info" : "VariableDeclarationStatement[56935-56980]:VariableDeclarationStatement[56980-57025]"
    }, {
      "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "info" : "IfStatement[56985-57334]:IfStatement[57030-57379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57029-57334]:Block[57074-57379]"
    }, {
      "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "info" : "ExpressionStatement[57037-57328]:ExpressionStatement[57082-57373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57617-58637]:Block[57662-58682]"
    }, {
      "left" : "Node function = t.getEnclosingFunction();",
      "right" : "Node function = t.getEnclosingFunction();",
      "info" : "VariableDeclarationStatement[57623-57664]:VariableDeclarationStatement[57668-57709]"
    }, {
      "left" : "if (function == null)",
      "right" : "if (function == null)",
      "info" : "IfStatement[57764-57807]:IfStatement[57809-57852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57786-57807]:Block[57831-57852]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57794-57801]:ReturnStatement[57839-57846]"
    }, {
      "left" : "JSType jsType = getJSType(function);",
      "right" : "JSType jsType = getJSType(function);",
      "info" : "VariableDeclarationStatement[57812-57848]:VariableDeclarationStatement[57857-57893]"
    }, {
      "left" : "if (jsType instanceof FunctionType)",
      "right" : "if (jsType instanceof FunctionType)",
      "info" : "IfStatement[57854-58633]:IfStatement[57899-58678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57890-58633]:Block[57935-58678]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) jsType;",
      "right" : "FunctionType functionType = (FunctionType) jsType;",
      "info" : "VariableDeclarationStatement[57898-57948]:VariableDeclarationStatement[57943-57993]"
    }, {
      "left" : "JSType returnType = functionType.getReturnType();",
      "right" : "JSType returnType = functionType.getReturnType();",
      "info" : "VariableDeclarationStatement[57956-58005]:VariableDeclarationStatement[58001-58050]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[58113-58193]:IfStatement[58158-58238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58137-58193]:Block[58182-58238]"
    }, {
      "left" : "returnType = getNativeType(VOID_TYPE);",
      "right" : "returnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[58147-58185]:ExpressionStatement[58192-58230]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[58245-58280]:VariableDeclarationStatement[58290-58325]"
    }, {
      "left" : "JSType actualReturnType;",
      "right" : "JSType actualReturnType;",
      "info" : "VariableDeclarationStatement[58287-58311]:VariableDeclarationStatement[58332-58356]"
    }, {
      "left" : "if (valueNode == null)",
      "right" : "if (valueNode == null)",
      "info" : "IfStatement[58318-58490]:IfStatement[58363-58535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58341-58426]:Block[58386-58471]"
    }, {
      "left" : "actualReturnType = getNativeType(VOID_TYPE);",
      "right" : "actualReturnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[58351-58395]:ExpressionStatement[58396-58440]"
    }, {
      "left" : "valueNode = n;",
      "right" : "valueNode = n;",
      "info" : "ExpressionStatement[58404-58418]:ExpressionStatement[58449-58463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58432-58490]:Block[58477-58535]"
    }, {
      "left" : "actualReturnType = getJSType(valueNode);",
      "right" : "actualReturnType = getJSType(valueNode);",
      "info" : "ExpressionStatement[58442-58482]:ExpressionStatement[58487-58527]"
    }, {
      "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "info" : "ExpressionStatement[58517-58627]:ExpressionStatement[58562-58672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59098-60720]:Block[59143-60765]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[59104-59134]:VariableDeclarationStatement[59149-59179]"
    }, {
      "left" : "JSType leftType = getJSType(left);",
      "right" : "JSType leftType = getJSType(left);",
      "info" : "VariableDeclarationStatement[59139-59173]:VariableDeclarationStatement[59184-59218]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[59178-59208]:VariableDeclarationStatement[59223-59253]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[59213-59249]:VariableDeclarationStatement[59258-59294]"
    }, {
      "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
      "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
      "info" : "SwitchStatement[59254-60693]:SwitchStatement[59299-60738]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[59274-59296]:SwitchCase[59319-59341]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[59303-59325]:SwitchCase[59348-59370]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[59332-59347]:SwitchCase[59377-59392]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[59354-59369]:SwitchCase[59399-59414]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[59376-59399]:SwitchCase[59421-59444]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[59406-59422]:SwitchCase[59451-59467]"
    }, {
      "left" : "if (!leftType.matchesInt32Context())",
      "right" : "if (!leftType.matchesInt32Context())",
      "info" : "IfStatement[59431-59592]:IfStatement[59476-59637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59468-59592]:Block[59513-59637]"
    }, {
      "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "info" : "ExpressionStatement[59480-59582]:ExpressionStatement[59525-59627]"
    }, {
      "left" : "if (!rightType.matchesUint32Context())",
      "right" : "if (!rightType.matchesUint32Context())",
      "info" : "IfStatement[59601-59766]:IfStatement[59646-59811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59640-59766]:Block[59685-59811]"
    }, {
      "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "info" : "ExpressionStatement[59652-59756]:ExpressionStatement[59697-59801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59775-59781]:BreakStatement[59820-59826]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[59789-59811]:SwitchCase[59834-59856]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[59818-59840]:SwitchCase[59863-59885]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[59847-59869]:SwitchCase[59892-59914]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[59876-59898]:SwitchCase[59921-59943]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[59905-59920]:SwitchCase[59950-59965]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[59927-59942]:SwitchCase[59972-59987]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[59949-59964]:SwitchCase[59994-60009]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[59971-59986]:SwitchCase[60016-60031]"
    }, {
      "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "info" : "ExpressionStatement[59995-60053]:ExpressionStatement[60040-60098]"
    }, {
      "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "info" : "ExpressionStatement[60062-60123]:ExpressionStatement[60107-60168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60132-60138]:BreakStatement[60177-60183]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[60146-60171]:SwitchCase[60191-60216]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[60178-60203]:SwitchCase[60223-60248]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[60210-60234]:SwitchCase[60255-60279]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[60241-60259]:SwitchCase[60286-60304]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[60266-60284]:SwitchCase[60311-60329]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[60291-60308]:SwitchCase[60336-60353]"
    }, {
      "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "info" : "ExpressionStatement[60317-60416]:ExpressionStatement[60362-60461]"
    }, {
      "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "info" : "ExpressionStatement[60425-60527]:ExpressionStatement[60470-60572]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60536-60542]:BreakStatement[60581-60587]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[60550-60572]:SwitchCase[60595-60617]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[60579-60594]:SwitchCase[60624-60639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60603-60609]:BreakStatement[60648-60654]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60617-60625]:SwitchCase[60662-60670]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
      "info" : "ExpressionStatement[60634-60687]:ExpressionStatement[60679-60732]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[60698-60716]:ExpressionStatement[60743-60761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61479-62675]:Block[61524-62720]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[61485-62671]:IfStatement[61530-62716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61525-61907]:Block[61570-61952]"
    }, {
      "left" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
      "right" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
      "info" : "ForStatement[61533-61901]:ForStatement[61578-61946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61617-61901]:Block[61662-61946]"
    }, {
      "left" : "Node propValue = key.getFirstChild();",
      "right" : "Node propValue = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[61627-61664]:VariableDeclarationStatement[61672-61709]"
    }, {
      "left" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
      "right" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
      "info" : "ExpressionStatement[61750-61893]:ExpressionStatement[61795-61938]"
    }, {
      "left" : "if (value.getJSType() instanceof EnumType)",
      "right" : "if (value.getJSType() instanceof EnumType)",
      "info" : "IfStatement[61913-62671]:IfStatement[61958-62716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61956-62596]:Block[62001-62641]"
    }, {
      "left" : "EnumType valueEnumType = (EnumType) value.getJSType();",
      "right" : "EnumType valueEnumType = (EnumType) value.getJSType();",
      "info" : "VariableDeclarationStatement[62307-62361]:VariableDeclarationStatement[62352-62406]"
    }, {
      "left" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
      "right" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
      "info" : "VariableDeclarationStatement[62368-62461]:VariableDeclarationStatement[62413-62506]"
    }, {
      "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
      "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
      "info" : "ExpressionStatement[62468-62590]:ExpressionStatement[62513-62635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62602-62671]:Block[62647-62716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62987-63160]:Block[63032-63205]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[62993-63155]:SwitchStatement[63038-63200]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[63022-63041]:SwitchCase[63067-63086]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[63048-63067]:SwitchCase[63093-63112]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[63074-63090]:SwitchCase[63119-63135]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63099-63111]:ReturnStatement[63144-63156]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[63119-63127]:SwitchCase[63164-63172]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63136-63149]:ReturnStatement[63181-63194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63303-63731]:Block[63348-63776]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[63309-63339]:VariableDeclarationStatement[63354-63384]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[63344-63727]:IfStatement[63389-63772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63364-63693]:Block[63409-63738]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[63652-63687]:ReturnStatement[63697-63732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63699-63727]:Block[63744-63772]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[63707-63721]:ReturnStatement[63752-63766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63882-64172]:Block[63927-64217]"
    }, {
      "left" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
      "right" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[63888-63946]:VariableDeclarationStatement[63933-63991]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[63951-64168]:IfStatement[63996-64213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63977-64055]:Block[64022-64100]"
    }, {
      "left" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
      "right" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
      "info" : "ReturnStatement[63985-64049]:ReturnStatement[64030-64094]"
    }, {
      "left" : "if (type instanceof FunctionType)",
      "right" : "if (type instanceof FunctionType)",
      "info" : "IfStatement[64061-64168]:IfStatement[64106-64213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64095-64136]:Block[64140-64181]"
    }, {
      "left" : "return (FunctionType) type;",
      "right" : "return (FunctionType) type;",
      "info" : "ReturnStatement[64103-64130]:ReturnStatement[64148-64175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64142-64168]:Block[64187-64213]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64150-64162]:ReturnStatement[64195-64207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64661-64718]:Block[64706-64763]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[64667-64714]:ExpressionStatement[64712-64759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64791-64840]:Block[64836-64885]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(type));",
      "right" : "ensureTyped(t, n, getNativeType(type));",
      "info" : "ExpressionStatement[64797-64836]:ExpressionStatement[64842-64881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65719-66510]:Block[65764-66555]"
    }, {
      "left" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
      "right" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
      "info" : "ExpressionStatement[65783-65919]:ExpressionStatement[65828-65964]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[65924-65958]:VariableDeclarationStatement[65969-66003]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[65963-66441]:IfStatement[66008-66486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65981-66441]:Block[66026-66486]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[65989-66177]:IfStatement[66034-66222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66009-66177]:Block[66054-66222]"
    }, {
      "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "info" : "VariableDeclarationStatement[66019-66089]:VariableDeclarationStatement[66064-66134]"
    }, {
      "left" : "validator.expectCanCast(t, n, infoType, type);",
      "right" : "validator.expectCanCast(t, n, infoType, type);",
      "info" : "ExpressionStatement[66098-66144]:ExpressionStatement[66143-66189]"
    }, {
      "left" : "type = infoType;",
      "right" : "type = infoType;",
      "info" : "ExpressionStatement[66153-66169]:ExpressionStatement[66198-66214]"
    }, {
      "left" : "if (info.isImplicitCast() && !inExterns)",
      "right" : "if (info.isImplicitCast() && !inExterns)",
      "info" : "IfStatement[66185-66435]:IfStatement[66230-66480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66226-66435]:Block[66271-66480]"
    }, {
      "left" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
      "right" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
      "info" : "VariableDeclarationStatement[66236-66340]:VariableDeclarationStatement[66281-66385]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "info" : "ExpressionStatement[66349-66427]:ExpressionStatement[66394-66472]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[66447-66506]:IfStatement[66492-66551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66474-66506]:Block[66519-66551]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[66482-66500]:ExpressionStatement[66527-66545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66659-66821]:Block[66704-66866]"
    }, {
      "left" : "int total = nullCount + unknownCount + typedCount;",
      "right" : "int total = nullCount + unknownCount + typedCount;",
      "info" : "VariableDeclarationStatement[66665-66715]:VariableDeclarationStatement[66710-66760]"
    }, {
      "left" : "if (total == 0)",
      "right" : "if (total == 0)",
      "info" : "IfStatement[66720-66817]:IfStatement[66765-66862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66736-66761]:Block[66781-66806]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[66744-66755]:ReturnStatement[66789-66800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66767-66817]:Block[66812-66862]"
    }, {
      "left" : "return (100.0 * typedCount) / total;",
      "right" : "return (100.0 * typedCount) / total;",
      "info" : "ReturnStatement[66775-66811]:ReturnStatement[66820-66856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66875-66927]:Block[66920-66972]"
    }, {
      "left" : "return typeRegistry.getNativeType(typeId);",
      "right" : "return typeRegistry.getNativeType(typeId);",
      "info" : "ReturnStatement[66881-66923]:ReturnStatement[66926-66968]"
    } ]
  },
  "interFileMappings" : { }
}