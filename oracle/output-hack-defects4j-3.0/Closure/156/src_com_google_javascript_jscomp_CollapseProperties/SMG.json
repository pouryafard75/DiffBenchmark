{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "TypeDeclaration[1585-32761]:TypeDeclaration[1585-33137]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "right" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "info" : "FieldDeclaration[3149-3324]:FieldDeclaration[3149-3324]"
    }, {
      "left" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "right" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "info" : "FieldDeclaration[3328-3504]:FieldDeclaration[3328-3504]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "right" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "info" : "FieldDeclaration[3508-3653]:FieldDeclaration[3508-3653]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3657-3691]:FieldDeclaration[3657-3691]"
    }, {
      "left" : "private List<Name> globalNames;",
      "right" : "private List<Name> globalNames;",
      "info" : "FieldDeclaration[3695-3757]:FieldDeclaration[3695-3757]"
    }, {
      "left" : "private Map<String, Name> nameMap;",
      "right" : "private Map<String, Name> nameMap;",
      "info" : "FieldDeclaration[3761-3868]:FieldDeclaration[3761-3868]"
    }, {
      "left" : "private final boolean collapsePropertiesOnExternTypes;",
      "right" : "private final boolean collapsePropertiesOnExternTypes;",
      "info" : "FieldDeclaration[3872-3926]:FieldDeclaration[3872-3926]"
    }, {
      "left" : "private final boolean inlineAliases;",
      "right" : "private final boolean inlineAliases;",
      "info" : "FieldDeclaration[3929-3965]:FieldDeclaration[3929-3965]"
    }, {
      "left" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "right" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "info" : "MethodDeclaration[3969-4585]:MethodDeclaration[3969-4585]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4589-5457]:MethodDeclaration[4589-5457]"
    }, {
      "left" : "private void inlineAliases(GlobalNamespace namespace)",
      "right" : "private void inlineAliases(GlobalNamespace namespace)",
      "info" : "MethodDeclaration[5461-7577]:MethodDeclaration[5461-7577]"
    }, {
      "left" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "right" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "info" : "MethodDeclaration[7581-9588]:MethodDeclaration[7581-9588]"
    }, {
      "left" : "private void checkNamespaces()",
      "right" : "private void checkNamespaces()",
      "info" : "MethodDeclaration[9592-10420]:MethodDeclaration[9592-10420]"
    }, {
      "left" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[10424-10808]:MethodDeclaration[10424-10808]"
    }, {
      "left" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[10812-11208]:MethodDeclaration[10812-11208]"
    }, {
      "left" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "right" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "info" : "MethodDeclaration[11212-11835]:MethodDeclaration[11212-11835]"
    }, {
      "left" : "private void flattenReferencesTo(Name n, String alias)",
      "right" : "private void flattenReferencesTo(Name n, String alias)",
      "info" : "MethodDeclaration[11839-13184]:MethodDeclaration[11839-13184]"
    }, {
      "left" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "right" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "info" : "MethodDeclaration[13188-14419]:MethodDeclaration[13188-14419]"
    }, {
      "left" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "right" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "info" : "MethodDeclaration[14423-15563]:MethodDeclaration[14423-15563]"
    }, {
      "left" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "right" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "info" : "MethodDeclaration[15567-16420]:MethodDeclaration[15567-16420]"
    }, {
      "left" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "right" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "info" : "MethodDeclaration[16424-17665]:MethodDeclaration[16424-17663]"
    }, {
      "left" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "right" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "info" : "MethodDeclaration[17669-20260]:MethodDeclaration[17667-20258]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclaration(Name n, String alias)",
      "right" : "private void updateObjLitOrFunctionDeclaration(\n      Name n, String alias, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[20264-22024]:MethodDeclaration[20262-22142]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[22028-24315]:MethodDeclaration[22146-24507]"
    }, {
      "left" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "right" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "info" : "MethodDeclaration[24319-25239]:MethodDeclaration[24511-25431]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[24927-25215]:MethodDeclaration[25119-25407]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtVarNode(Name n)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtVarNode(\n      Name n, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[25243-26458]:MethodDeclaration[25435-26742]"
    }, {
      "left" : "private void updateFunctionDeclarationAtFunctionNode(Name n)",
      "right" : "private void updateFunctionDeclarationAtFunctionNode(\n      Name n, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[26462-26962]:MethodDeclaration[26746-27338]"
    }, {
      "left" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "right" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "info" : "MethodDeclaration[26966-30661]:MethodDeclaration[27342-31037]"
    }, {
      "left" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "right" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "info" : "MethodDeclaration[30665-32396]:MethodDeclaration[31041-32772]"
    }, {
      "left" : "private static String appendPropForAlias(String root, String prop)",
      "right" : "private static String appendPropForAlias(String root, String prop)",
      "info" : "MethodDeclaration[32400-32759]:MethodDeclaration[32776-33135]"
    } ],
    "mappings" : [
 {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[3117-3129]:SimpleType[3117-3129]"
    }, {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "SimpleName[4318-4336]:SimpleName[4318-4336]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4337-4362]:SingleVariableDeclaration[4337-4362]"
    }, {
      "left" : "boolean collapsePropertiesOnExternTypes",
      "right" : "boolean collapsePropertiesOnExternTypes",
      "info" : "SingleVariableDeclaration[4370-4409]:SingleVariableDeclaration[4370-4409]"
    }, {
      "left" : "boolean inlineAliases",
      "right" : "boolean inlineAliases",
      "info" : "SingleVariableDeclaration[4411-4432]:SingleVariableDeclaration[4411-4432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4434-4585]:Block[4434-4585]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4440-4465]:ExpressionStatement[4440-4465]"
    }, {
      "left" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "right" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "info" : "ExpressionStatement[4470-4541]:ExpressionStatement[4470-4541]"
    }, {
      "left" : "this.inlineAliases = inlineAliases;",
      "right" : "this.inlineAliases = inlineAliases;",
      "info" : "ExpressionStatement[4546-4581]:ExpressionStatement[4546-4581]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4589-4598]:MarkerAnnotation[4589-4598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4601-4607]:Modifier[4601-4607]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4608-4612]:PrimitiveType[4608-4612]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4613-4620]:SimpleName[4613-4620]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4621-4633]:SingleVariableDeclaration[4621-4633]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4635-4644]:SingleVariableDeclaration[4635-4644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4646-5457]:Block[4646-5457]"
    }, {
      "left" : "GlobalNamespace namespace;",
      "right" : "GlobalNamespace namespace;",
      "info" : "VariableDeclarationStatement[4652-4678]:VariableDeclarationStatement[4652-4678]"
    }, {
      "left" : "if (collapsePropertiesOnExternTypes)",
      "right" : "if (collapsePropertiesOnExternTypes)",
      "info" : "IfStatement[4683-4859]:IfStatement[4683-4859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4720-4791]:Block[4720-4791]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "right" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "info" : "ExpressionStatement[4728-4785]:ExpressionStatement[4728-4785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4797-4859]:Block[4797-4859]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, root);",
      "right" : "namespace = new GlobalNamespace(compiler, root);",
      "info" : "ExpressionStatement[4805-4853]:ExpressionStatement[4805-4853]"
    }, {
      "left" : "if (inlineAliases)",
      "right" : "if (inlineAliases)",
      "info" : "IfStatement[4865-4923]:IfStatement[4865-4923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4884-4923]:Block[4884-4923]"
    }, {
      "left" : "inlineAliases(namespace);",
      "right" : "inlineAliases(namespace);",
      "info" : "ExpressionStatement[4892-4917]:ExpressionStatement[4892-4917]"
    }, {
      "left" : "nameMap = namespace.getNameIndex();",
      "right" : "nameMap = namespace.getNameIndex();",
      "info" : "ExpressionStatement[4928-4963]:ExpressionStatement[4928-4963]"
    }, {
      "left" : "globalNames = namespace.getNameForest();",
      "right" : "globalNames = namespace.getNameForest();",
      "info" : "ExpressionStatement[4968-5008]:ExpressionStatement[4968-5008]"
    }, {
      "left" : "checkNamespaces();",
      "right" : "checkNamespaces();",
      "info" : "ExpressionStatement[5013-5031]:ExpressionStatement[5013-5031]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[5037-5135]:EnhancedForStatement[5037-5135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5064-5135]:Block[5064-5135]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(n, n.name);",
      "right" : "flattenReferencesToCollapsibleDescendantNames(n, n.name);",
      "info" : "ExpressionStatement[5072-5129]:ExpressionStatement[5072-5129]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[5361-5453]:EnhancedForStatement[5361-5453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5388-5453]:Block[5388-5453]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(n, n.name);",
      "right" : "collapseDeclarationOfNameAndDescendants(n, n.name);",
      "info" : "ExpressionStatement[5396-5447]:ExpressionStatement[5396-5447]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6156-6163]:Modifier[6156-6163]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6164-6168]:PrimitiveType[6164-6168]"
    }, {
      "left" : "inlineAliases",
      "right" : "inlineAliases",
      "info" : "SimpleName[6169-6182]:SimpleName[6169-6182]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[6183-6208]:SingleVariableDeclaration[6183-6208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6210-7577]:Block[6210-7577]"
    }, {
      "left" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "right" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "info" : "VariableDeclarationStatement[6284-6355]:VariableDeclarationStatement[6284-6355]"
    }, {
      "left" : "while (!workList.isEmpty())",
      "right" : "while (!workList.isEmpty())",
      "info" : "WhileStatement[6360-7573]:WhileStatement[6360-7573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6388-7573]:Block[6388-7573]"
    }, {
      "left" : "Name name = workList.pop();",
      "right" : "Name name = workList.pop();",
      "info" : "VariableDeclarationStatement[6396-6423]:VariableDeclarationStatement[6396-6423]"
    }, {
      "left" : "if (name.type == Name.Type.GET || name.type == Name.Type.SET)",
      "right" : "if (name.type == Name.Type.GET || name.type == Name.Type.SET)",
      "info" : "IfStatement[6507-6596]:IfStatement[6507-6596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6596]:Block[6569-6596]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6579-6588]:ContinueStatement[6579-6588]"
    }, {
      "left" : "if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "right" : "if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "info" : "IfStatement[6604-7159]:IfStatement[6604-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6688-7159]:Block[6688-7159]"
    }, {
      "left" : "List<Ref> refs = Lists.newArrayList(name.refs);",
      "right" : "List<Ref> refs = Lists.newArrayList(name.refs);",
      "info" : "VariableDeclarationStatement[6808-6855]:VariableDeclarationStatement[6808-6855]"
    }, {
      "left" : "for (Ref ref : refs)",
      "right" : "for (Ref ref : refs)",
      "info" : "EnhancedForStatement[6864-7151]:EnhancedForStatement[6864-7151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6885-7151]:Block[6885-7151]"
    }, {
      "left" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "right" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "info" : "IfStatement[6897-7141]:IfStatement[6897-7141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6955-7141]:Block[6955-7141]"
    }, {
      "left" : "if (inlineAliasIfPossible(ref, namespace))",
      "right" : "if (inlineAliasIfPossible(ref, namespace))",
      "info" : "IfStatement[7036-7129]:IfStatement[7036-7129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7079-7129]:Block[7079-7129]"
    }, {
      "left" : "name.removeRef(ref);",
      "right" : "name.removeRef(ref);",
      "info" : "ExpressionStatement[7095-7115]:ExpressionStatement[7095-7115]"
    }, {
      "left" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "right" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "info" : "IfStatement[7266-7567]:IfStatement[7266-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7410-7567]:Block[7410-7567]"
    }, {
      "left" : "workList.addAll(name.props);",
      "right" : "workList.addAll(name.props);",
      "info" : "ExpressionStatement[7531-7559]:ExpressionStatement[7531-7559]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7581-7588]:Modifier[7581-7588]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7589-7596]:PrimitiveType[7589-7596]"
    }, {
      "left" : "inlineAliasIfPossible",
      "right" : "inlineAliasIfPossible",
      "info" : "SimpleName[7597-7618]:SimpleName[7597-7618]"
    }, {
      "left" : "Ref alias",
      "right" : "Ref alias",
      "info" : "SingleVariableDeclaration[7619-7628]:SingleVariableDeclaration[7619-7628]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[7630-7655]:SingleVariableDeclaration[7630-7655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7657-9588]:Block[7657-9588]"
    }, {
      "left" : "Node aliasParent = alias.node.getParent();",
      "right" : "Node aliasParent = alias.node.getParent();",
      "info" : "VariableDeclarationStatement[7893-7935]:VariableDeclarationStatement[7893-7935]"
    }, {
      "left" : "if (aliasParent.getType() == Token.NAME)",
      "right" : "if (aliasParent.getType() == Token.NAME)",
      "info" : "IfStatement[7940-9565]:IfStatement[7940-9565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7981-9565]:Block[7981-9565]"
    }, {
      "left" : "Scope scope = alias.scope;",
      "right" : "Scope scope = alias.scope;",
      "info" : "VariableDeclarationStatement[8067-8093]:VariableDeclarationStatement[8067-8093]"
    }, {
      "left" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "right" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "info" : "VariableDeclarationStatement[8100-8153]:VariableDeclarationStatement[8100-8153]"
    }, {
      "left" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "right" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "info" : "VariableDeclarationStatement[8160-8364]:VariableDeclarationStatement[8160-8364]"
    }, {
      "left" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "right" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "info" : "ExpressionStatement[8371-8435]:ExpressionStatement[8371-8435]"
    }, {
      "left" : "ReferenceCollection aliasRefs =\n          collector.getReferenceCollection(aliasVar);",
      "right" : "ReferenceCollection aliasRefs =\n          collector.getReferenceCollection(aliasVar);",
      "info" : "VariableDeclarationStatement[8443-8528]:VariableDeclarationStatement[8443-8528]"
    }, {
      "left" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "right" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "info" : "IfStatement[8535-9559]:IfStatement[8535-9559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8678-9559]:Block[8678-9559]"
    }, {
      "left" : "int size = aliasRefs.references.size();",
      "right" : "int size = aliasRefs.references.size();",
      "info" : "VariableDeclarationStatement[8749-8788]:VariableDeclarationStatement[8749-8788]"
    }, {
      "left" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "right" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "info" : "VariableDeclarationStatement[8797-8860]:VariableDeclarationStatement[8797-8860]"
    }, {
      "left" : "for (int i = 1; i < size; i++)",
      "right" : "for (int i = 1; i < size; i++)",
      "info" : "ForStatement[8869-9174]:ForStatement[8869-9174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8900-9174]:Block[8900-9174]"
    }, {
      "left" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "right" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "info" : "VariableDeclarationStatement[8912-9003]:VariableDeclarationStatement[8912-9003]"
    }, {
      "left" : "Node newNode = alias.node.cloneTree();",
      "right" : "Node newNode = alias.node.cloneTree();",
      "info" : "VariableDeclarationStatement[9015-9053]:VariableDeclarationStatement[9015-9053]"
    }, {
      "left" : "aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);",
      "right" : "aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);",
      "info" : "ExpressionStatement[9064-9131]:ExpressionStatement[9064-9131]"
    }, {
      "left" : "newNodes.add(newNode);",
      "right" : "newNodes.add(newNode);",
      "info" : "ExpressionStatement[9142-9164]:ExpressionStatement[9142-9164]"
    }, {
      "left" : "aliasParent.replaceChild(alias.node, new Node(Token.NULL));",
      "right" : "aliasParent.replaceChild(alias.node, new Node(Token.NULL));",
      "info" : "ExpressionStatement[9232-9291]:ExpressionStatement[9232-9291]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9300-9328]:ExpressionStatement[9300-9328]"
    }, {
      "left" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "right" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "info" : "ExpressionStatement[9484-9530]:ExpressionStatement[9484-9530]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9539-9551]:ReturnStatement[9539-9551]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9571-9584]:ReturnStatement[9571-9584]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9734-9741]:Modifier[9734-9741]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9742-9746]:PrimitiveType[9742-9746]"
    }, {
      "left" : "checkNamespaces",
      "right" : "checkNamespaces",
      "info" : "SimpleName[9747-9762]:SimpleName[9747-9762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9765-10420]:Block[9765-10420]"
    }, {
      "left" : "for (Name name : nameMap.values())",
      "right" : "for (Name name : nameMap.values())",
      "info" : "EnhancedForStatement[9771-10416]:EnhancedForStatement[9771-10416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9806-10416]:Block[9806-10416]"
    }, {
      "left" : "if (name.isNamespace() && name.refs != null &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1))",
      "right" : "if (name.isNamespace() && name.refs != null &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1))",
      "info" : "IfStatement[9814-10410]:IfStatement[9814-10410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9936-10410]:Block[9936-10410]"
    }, {
      "left" : "boolean initialized = name.declaration != null;",
      "right" : "boolean initialized = name.declaration != null;",
      "info" : "VariableDeclarationStatement[9946-9993]:VariableDeclarationStatement[9946-9993]"
    }, {
      "left" : "for (Ref ref : name.refs)",
      "right" : "for (Ref ref : name.refs)",
      "info" : "EnhancedForStatement[10002-10402]:EnhancedForStatement[10002-10402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10028-10402]:Block[10028-10402]"
    }, {
      "left" : "if (ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "right" : "if (ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "info" : "IfStatement[10040-10392]:IfStatement[10040-10392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10135-10283]:Block[10135-10283]"
    }, {
      "left" : "if (initialized)",
      "right" : "if (initialized)",
      "info" : "IfStatement[10149-10238]:IfStatement[10149-10238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10166-10238]:Block[10166-10238]"
    }, {
      "left" : "warnAboutNamespaceRedefinition(name, ref);",
      "right" : "warnAboutNamespaceRedefinition(name, ref);",
      "info" : "ExpressionStatement[10182-10224]:ExpressionStatement[10182-10224]"
    }, {
      "left" : "initialized = true;",
      "right" : "initialized = true;",
      "info" : "ExpressionStatement[10252-10271]:ExpressionStatement[10252-10271]"
    }, {
      "left" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "right" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "info" : "IfStatement[10289-10392]:IfStatement[10289-10392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10328-10392]:Block[10328-10392]"
    }, {
      "left" : "warnAboutNamespaceAliasing(name, ref);",
      "right" : "warnAboutNamespaceAliasing(name, ref);",
      "info" : "ExpressionStatement[10342-10380]:ExpressionStatement[10342-10380]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10603-10610]:Modifier[10603-10610]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10611-10615]:PrimitiveType[10611-10615]"
    }, {
      "left" : "warnAboutNamespaceAliasing",
      "right" : "warnAboutNamespaceAliasing",
      "info" : "SimpleName[10616-10642]:SimpleName[10616-10642]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[10643-10655]:SingleVariableDeclaration[10643-10655]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[10657-10664]:SingleVariableDeclaration[10657-10664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10666-10808]:Block[10666-10808]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));",
      "info" : "ExpressionStatement[10672-10804]:ExpressionStatement[10672-10804]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10996-11003]:Modifier[10996-11003]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11004-11008]:PrimitiveType[11004-11008]"
    }, {
      "left" : "warnAboutNamespaceRedefinition",
      "right" : "warnAboutNamespaceRedefinition",
      "info" : "SimpleName[11009-11039]:SimpleName[11009-11039]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[11040-11052]:SingleVariableDeclaration[11040-11052]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[11054-11061]:SingleVariableDeclaration[11054-11061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11063-11208]:Block[11063-11208]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));",
      "info" : "ExpressionStatement[11069-11204]:ExpressionStatement[11069-11204]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11464-11471]:Modifier[11464-11471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11472-11476]:PrimitiveType[11472-11476]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames",
      "right" : "flattenReferencesToCollapsibleDescendantNames",
      "info" : "SimpleName[11477-11522]:SimpleName[11477-11522]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[11530-11536]:SingleVariableDeclaration[11530-11536]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[11538-11550]:SingleVariableDeclaration[11538-11550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11552-11835]:Block[11552-11835]"
    }, {
      "left" : "if (n.props == null)",
      "right" : "if (n.props == null)",
      "info" : "IfStatement[11558-11586]:IfStatement[11558-11586]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11579-11586]:ReturnStatement[11579-11586]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[11592-11831]:EnhancedForStatement[11592-11831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11615-11831]:Block[11615-11831]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.name);",
      "right" : "String propAlias = appendPropForAlias(alias, p.name);",
      "info" : "VariableDeclarationStatement[11623-11676]:VariableDeclarationStatement[11623-11676]"
    }, {
      "left" : "if (p.canCollapse())",
      "right" : "if (p.canCollapse())",
      "info" : "IfStatement[11684-11757]:IfStatement[11684-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11705-11757]:Block[11705-11757]"
    }, {
      "left" : "flattenReferencesTo(p, propAlias);",
      "right" : "flattenReferencesTo(p, propAlias);",
      "info" : "ExpressionStatement[11715-11749]:ExpressionStatement[11715-11749]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "right" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "info" : "ExpressionStatement[11765-11825]:ExpressionStatement[11765-11825]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12090-12097]:Modifier[12090-12097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12098-12102]:PrimitiveType[12098-12102]"
    }, {
      "left" : "flattenReferencesTo",
      "right" : "flattenReferencesTo",
      "info" : "SimpleName[12103-12122]:SimpleName[12103-12122]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[12123-12129]:SingleVariableDeclaration[12123-12129]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[12131-12143]:SingleVariableDeclaration[12131-12143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12145-13184]:Block[12145-13184]"
    }, {
      "left" : "if (n.refs != null)",
      "right" : "if (n.refs != null)",
      "info" : "IfStatement[12151-12842]:IfStatement[12151-12842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12171-12842]:Block[12171-12842]"
    }, {
      "left" : "String originalName = n.fullName();",
      "right" : "String originalName = n.fullName();",
      "info" : "VariableDeclarationStatement[12179-12214]:VariableDeclarationStatement[12179-12214]"
    }, {
      "left" : "for (Ref r : n.refs)",
      "right" : "for (Ref r : n.refs)",
      "info" : "EnhancedForStatement[12221-12836]:EnhancedForStatement[12221-12836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12242-12836]:Block[12242-12836]"
    }, {
      "left" : "Node rParent = r.node.getParent();",
      "right" : "Node rParent = r.node.getParent();",
      "info" : "VariableDeclarationStatement[12252-12286]:VariableDeclarationStatement[12252-12286]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(r.node, rParent) &&\n            (r.getTwin() == null || r.isSet()))",
      "right" : "if (!NodeUtil.isObjectLitKey(r.node, rParent) &&\n            (r.getTwin() == null || r.isSet()))",
      "info" : "IfStatement[12656-12828]:IfStatement[12656-12828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12753-12828]:Block[12753-12828]"
    }, {
      "left" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "right" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "info" : "ExpressionStatement[12765-12818]:ExpressionStatement[12765-12818]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[13075-13180]:IfStatement[13075-13180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13096-13180]:Block[13096-13180]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[13104-13174]:EnhancedForStatement[13104-13174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13127-13174]:Block[13127-13174]"
    }, {
      "left" : "flattenPrefixes(alias, p, 1);",
      "right" : "flattenPrefixes(alias, p, 1);",
      "info" : "ExpressionStatement[13137-13166]:ExpressionStatement[13137-13166]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13525-13532]:Modifier[13525-13532]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13533-13537]:PrimitiveType[13533-13537]"
    }, {
      "left" : "flattenPrefixes",
      "right" : "flattenPrefixes",
      "info" : "SimpleName[13538-13553]:SimpleName[13538-13553]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[13554-13566]:SingleVariableDeclaration[13554-13566]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[13568-13574]:SingleVariableDeclaration[13568-13574]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[13576-13585]:SingleVariableDeclaration[13576-13585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13587-14419]:Block[13587-14419]"
    }, {
      "left" : "String originalName = n.fullName();",
      "right" : "String originalName = n.fullName();",
      "info" : "VariableDeclarationStatement[13736-13771]:VariableDeclarationStatement[13736-13771]"
    }, {
      "left" : "if (n.declaration != null && n.declaration.node != null &&\n        n.declaration.node.getType() == Token.GETPROP)",
      "right" : "if (n.declaration != null && n.declaration.node != null &&\n        n.declaration.node.getType() == Token.GETPROP)",
      "info" : "IfStatement[13776-13974]:IfStatement[13776-13974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13890-13974]:Block[13890-13974]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);",
      "info" : "ExpressionStatement[13898-13968]:ExpressionStatement[13898-13968]"
    }, {
      "left" : "if (n.refs != null)",
      "right" : "if (n.refs != null)",
      "info" : "IfStatement[13980-14296]:IfStatement[13980-14296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-14296]:Block[14000-14296]"
    }, {
      "left" : "for (Ref r : n.refs)",
      "right" : "for (Ref r : n.refs)",
      "info" : "EnhancedForStatement[14008-14290]:EnhancedForStatement[14008-14290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14029-14290]:Block[14029-14290]"
    }, {
      "left" : "if (r.getTwin() == null || r.isSet())",
      "right" : "if (r.getTwin() == null || r.isSet())",
      "info" : "IfStatement[14164-14282]:IfStatement[14164-14282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14202-14282]:Block[14202-14282]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "info" : "ExpressionStatement[14214-14272]:ExpressionStatement[14214-14272]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[14302-14415]:IfStatement[14302-14415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14323-14415]:Block[14323-14415]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[14331-14409]:EnhancedForStatement[14331-14409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14354-14409]:Block[14354-14409]"
    }, {
      "left" : "flattenPrefixes(alias, p, depth + 1);",
      "right" : "flattenPrefixes(alias, p, depth + 1);",
      "info" : "ExpressionStatement[14364-14401]:ExpressionStatement[14364-14401]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14800-14807]:Modifier[14800-14807]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14808-14812]:PrimitiveType[14808-14812]"
    }, {
      "left" : "flattenNameRefAtDepth",
      "right" : "flattenNameRefAtDepth",
      "info" : "SimpleName[14813-14834]:SimpleName[14813-14834]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[14835-14847]:SingleVariableDeclaration[14835-14847]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14849-14855]:SingleVariableDeclaration[14849-14855]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[14857-14866]:SingleVariableDeclaration[14857-14866]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[14874-14893]:SingleVariableDeclaration[14874-14893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14895-15563]:Block[14895-15563]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[15122-15146]:VariableDeclarationStatement[15122-15146]"
    }, {
      "left" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "right" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "info" : "VariableDeclarationStatement[15151-15215]:VariableDeclarationStatement[15151-15215]"
    }, {
      "left" : "boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());",
      "right" : "boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());",
      "info" : "VariableDeclarationStatement[15220-15281]:VariableDeclarationStatement[15220-15281]"
    }, {
      "left" : "Preconditions.checkState(isObjKey || isQName);",
      "right" : "Preconditions.checkState(isObjKey || isQName);",
      "info" : "ExpressionStatement[15286-15332]:ExpressionStatement[15286-15332]"
    }, {
      "left" : "if (isQName)",
      "right" : "if (isQName)",
      "info" : "IfStatement[15337-15559]:IfStatement[15337-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15350-15559]:Block[15350-15559]"
    }, {
      "left" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "right" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "info" : "ForStatement[15358-15449]:ForStatement[15358-15449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15409-15449]:Block[15409-15449]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[15419-15441]:ExpressionStatement[15419-15441]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[15456-15553]:IfStatement[15456-15553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15477-15553]:Block[15477-15553]"
    }, {
      "left" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "right" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "info" : "ExpressionStatement[15487-15545]:ExpressionStatement[15487-15545]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15867-15874]:Modifier[15867-15874]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15875-15879]:PrimitiveType[15875-15879]"
    }, {
      "left" : "flattenNameRef",
      "right" : "flattenNameRef",
      "info" : "SimpleName[15880-15894]:SimpleName[15880-15894]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[15895-15907]:SingleVariableDeclaration[15895-15907]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15909-15915]:SingleVariableDeclaration[15909-15915]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15917-15928]:SingleVariableDeclaration[15917-15928]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[15936-15955]:SingleVariableDeclaration[15936-15955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15957-16420]:Block[15957-16420]"
    }, {
      "left" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "right" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "info" : "VariableDeclarationStatement[16110-16203]:VariableDeclarationStatement[16110-16203]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "right" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "info" : "ExpressionStatement[16208-16260]:ExpressionStatement[16208-16260]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[16265-16293]:VariableDeclarationStatement[16265-16293]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[16298-16350]:IfStatement[16298-16350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16316-16350]:Block[16316-16350]"
    }, {
      "left" : "ref.setJSType(type);",
      "right" : "ref.setJSType(type);",
      "info" : "ExpressionStatement[16324-16344]:ExpressionStatement[16324-16344]"
    }, {
      "left" : "parent.replaceChild(n, ref);",
      "right" : "parent.replaceChild(n, ref);",
      "info" : "ExpressionStatement[16355-16383]:ExpressionStatement[16355-16383]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[16388-16416]:ExpressionStatement[16388-16416]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16714-16721]:Modifier[16714-16721]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16722-16726]:PrimitiveType[16722-16726]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants",
      "right" : "collapseDeclarationOfNameAndDescendants",
      "info" : "SimpleName[16727-16766]:SimpleName[16727-16766]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[16767-16773]:SingleVariableDeclaration[16767-16773]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[16775-16787]:SingleVariableDeclaration[16775-16787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16789-17665]:Block[16789-17663]"
    }, {
      "left" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "right" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "info" : "VariableDeclarationStatement[16795-16864]:VariableDeclarationStatement[16795-16864]"
    }, {
      "left" : "if (n.canCollapse() && canCollapseChildNames)",
      "right" : "if (n.canCollapse())",
      "info" : "IfStatement[16945-17049]:IfStatement[16945-17047]"
    }, {
      "left" : "n.canCollapse()",
      "right" : "n.canCollapse()",
      "info" : "MethodInvocation[16949-16964]:MethodInvocation[16949-16964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16991-17049]:Block[16966-17047]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration(n, alias);",
      "right" : "updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);",
      "info" : "ExpressionStatement[16999-17043]:ExpressionStatement[16974-17041]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[17055-17661]:IfStatement[17053-17659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17076-17661]:Block[17074-17659]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[17084-17655]:EnhancedForStatement[17082-17653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17107-17655]:Block[17105-17653]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));",
      "right" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));",
      "info" : "ExpressionStatement[17196-17287]:ExpressionStatement[17194-17285]"
    }, {
      "left" : "if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN)",
      "right" : "if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN)",
      "info" : "IfStatement[17297-17647]:IfStatement[17295-17645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17533-17647]:Block[17531-17645]"
    }, {
      "left" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);",
      "right" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);",
      "info" : "ExpressionStatement[17545-17637]:ExpressionStatement[17543-17635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18184-18191]:Modifier[18182-18189]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18192-18196]:PrimitiveType[18190-18194]"
    }, {
      "left" : "updateSimpleDeclaration",
      "right" : "updateSimpleDeclaration",
      "info" : "SimpleName[18197-18220]:SimpleName[18195-18218]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[18221-18233]:SingleVariableDeclaration[18219-18231]"
    }, {
      "left" : "Name refName",
      "right" : "Name refName",
      "info" : "SingleVariableDeclaration[18235-18247]:SingleVariableDeclaration[18233-18245]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[18249-18256]:SingleVariableDeclaration[18247-18254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18258-20260]:Block[18256-20258]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[18264-18297]:VariableDeclarationStatement[18262-18295]"
    }, {
      "left" : "Node parent = ref.node.getParent();",
      "right" : "Node parent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[18302-18337]:VariableDeclarationStatement[18300-18335]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[18342-18375]:VariableDeclarationStatement[18340-18373]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[18380-18418]:VariableDeclarationStatement[18378-18416]"
    }, {
      "left" : "Node greatGreatGramps = greatGramps.getParent();",
      "right" : "Node greatGreatGramps = greatGramps.getParent();",
      "info" : "VariableDeclarationStatement[18423-18471]:VariableDeclarationStatement[18421-18469]"
    }, {
      "left" : "if (rvalue != null && rvalue.getType() == Token.FUNCTION)",
      "right" : "if (rvalue != null && rvalue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[18477-18611]:IfStatement[18475-18609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18535-18611]:Block[18533-18609]"
    }, {
      "left" : "checkForHosedThisReferences(rvalue, refName.docInfo, refName);",
      "right" : "checkForHosedThisReferences(rvalue, refName.docInfo, refName);",
      "info" : "ExpressionStatement[18543-18605]:ExpressionStatement[18541-18603]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());",
      "info" : "VariableDeclarationStatement[18651-18784]:VariableDeclarationStatement[18649-18782]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "right" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "info" : "ExpressionStatement[18789-18853]:ExpressionStatement[18787-18851]"
    }, {
      "left" : "if (gramps.getType() == Token.EXPR_RESULT)",
      "right" : "if (gramps.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[18859-20222]:IfStatement[18857-20220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18902-19431]:Block[18900-19429]"
    }, {
      "left" : "parent.removeChild(rvalue);",
      "right" : "parent.removeChild(rvalue);",
      "info" : "ExpressionStatement[19256-19283]:ExpressionStatement[19254-19281]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[19290-19323]:ExpressionStatement[19288-19321]"
    }, {
      "left" : "Node varNode = new Node(Token.VAR, nameNode);",
      "right" : "Node varNode = new Node(Token.VAR, nameNode);",
      "info" : "VariableDeclarationStatement[19331-19376]:VariableDeclarationStatement[19329-19374]"
    }, {
      "left" : "greatGramps.replaceChild(gramps, varNode);",
      "right" : "greatGramps.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[19383-19425]:ExpressionStatement[19381-19423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19437-20222]:Block[19435-20220]"
    }, {
      "left" : "Preconditions.checkNotNull(ref.getTwin());",
      "right" : "Preconditions.checkNotNull(ref.getTwin());",
      "info" : "ExpressionStatement[19489-19531]:ExpressionStatement[19487-19529]"
    }, {
      "left" : "Node current = gramps;",
      "right" : "Node current = gramps;",
      "info" : "VariableDeclarationStatement[19648-19670]:VariableDeclarationStatement[19646-19668]"
    }, {
      "left" : "Node currentParent = gramps.getParent();",
      "right" : "Node currentParent = gramps.getParent();",
      "info" : "VariableDeclarationStatement[19677-19717]:VariableDeclarationStatement[19675-19715]"
    }, {
      "left" : "for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "right" : "for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "info" : "ForStatement[19724-19919]:ForStatement[19722-19917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19917-19919]:Block[19915-19917]"
    }, {
      "left" : "Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "right" : "Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[20016-20114]:VariableDeclarationStatement[20014-20112]"
    }, {
      "left" : "currentParent.addChildBefore(stubVar, current);",
      "right" : "currentParent.addChildBefore(stubVar, current);",
      "info" : "ExpressionStatement[20121-20168]:ExpressionStatement[20119-20166]"
    }, {
      "left" : "parent.replaceChild(ref.node, nameNode);",
      "right" : "parent.replaceChild(ref.node, nameNode);",
      "info" : "ExpressionStatement[20176-20216]:ExpressionStatement[20174-20214]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[20228-20256]:ExpressionStatement[20226-20254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21288-21295]:Modifier[21286-21293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21296-21300]:PrimitiveType[21294-21298]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration",
      "right" : "updateObjLitOrFunctionDeclaration",
      "info" : "SimpleName[21301-21334]:SimpleName[21299-21332]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[21335-21341]:SingleVariableDeclaration[21340-21346]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[21343-21355]:SingleVariableDeclaration[21348-21360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21357-22024]:Block[21393-22142]"
    }, {
      "left" : "if (n.declaration == null)",
      "right" : "if (n.declaration == null)",
      "info" : "IfStatement[21363-21513]:IfStatement[21399-21549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21390-21513]:Block[21426-21549]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21500-21507]:ReturnStatement[21536-21543]"
    }, {
      "left" : "if (n.declaration.getTwin() != null)",
      "right" : "if (n.declaration.getTwin() != null)",
      "info" : "IfStatement[21519-21666]:IfStatement[21555-21702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21556-21666]:Block[21592-21702]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21653-21660]:ReturnStatement[21689-21696]"
    }, {
      "left" : "switch (n.declaration.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n);\n        break;\n    }",
      "right" : "switch (n.declaration.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);\n        break;\n    }",
      "info" : "SwitchStatement[21672-22020]:SwitchStatement[21708-22138]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[21730-21748]:SwitchCase[21766-21784]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);",
      "info" : "ExpressionStatement[21757-21813]:ExpressionStatement[21793-21885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21822-21828]:BreakStatement[21894-21900]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[21835-21850]:SwitchCase[21907-21922]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode(n);",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);",
      "info" : "ExpressionStatement[21859-21905]:ExpressionStatement[21931-22000]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21914-21920]:BreakStatement[22009-22015]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[21927-21947]:SwitchCase[22022-22042]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode(n);",
      "right" : "updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);",
      "info" : "ExpressionStatement[21956-21999]:ExpressionStatement[22051-22117]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22008-22014]:BreakStatement[22126-22132]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22365-22372]:Modifier[22483-22490]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22373-22377]:PrimitiveType[22491-22495]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "info" : "SimpleName[22378-22423]:SimpleName[22496-22541]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[22431-22437]:SingleVariableDeclaration[22549-22555]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[22439-22451]:SingleVariableDeclaration[22557-22569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22453-24315]:Block[22602-24507]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[22662-22686]:VariableDeclarationStatement[22811-22835]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[22691-22724]:VariableDeclarationStatement[22840-22873]"
    }, {
      "left" : "Node varNode = new Node(Token.VAR);",
      "right" : "Node varNode = new Node(Token.VAR);",
      "info" : "VariableDeclarationStatement[22729-22764]:VariableDeclarationStatement[22878-22913]"
    }, {
      "left" : "Node varParent = ref.node.getAncestor(3);",
      "right" : "Node varParent = ref.node.getAncestor(3);",
      "info" : "VariableDeclarationStatement[22769-22810]:VariableDeclarationStatement[22918-22959]"
    }, {
      "left" : "Node gramps = ref.node.getAncestor(2);",
      "right" : "Node gramps = ref.node.getAncestor(2);",
      "info" : "VariableDeclarationStatement[22815-22853]:VariableDeclarationStatement[22964-23002]"
    }, {
      "left" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "right" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "info" : "VariableDeclarationStatement[22858-22913]:VariableDeclarationStatement[23007-23062]"
    }, {
      "left" : "boolean insertedVarNode = false;",
      "right" : "boolean insertedVarNode = false;",
      "info" : "VariableDeclarationStatement[22918-22950]:VariableDeclarationStatement[23067-23099]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[22956-23927]:IfStatement[23105-24076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22990-23148]:Block[23139-23297]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[23048-23088]:ExpressionStatement[23197-23237]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[23095-23111]:ExpressionStatement[23244-23260]"
    }, {
      "left" : "insertedVarNode = true;",
      "right" : "insertedVarNode = true;",
      "info" : "ExpressionStatement[23118-23141]:ExpressionStatement[23267-23290]"
    }, {
      "left" : "if (!n.isSimpleName())",
      "right" : "if (!n.isSimpleName())",
      "info" : "IfStatement[23154-23927]:IfStatement[23303-24076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23177-23927]:Block[23326-24076]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION)",
      "right" : "if (rvalue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[23233-23341]:IfStatement[23382-23490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23273-23341]:Block[23422-23490]"
    }, {
      "left" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "right" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "info" : "ExpressionStatement[23283-23333]:ExpressionStatement[23432-23482]"
    }, {
      "left" : "ref.node.getParent().removeChild(rvalue);",
      "right" : "ref.node.getParent().removeChild(rvalue);",
      "info" : "ExpressionStatement[23349-23390]:ExpressionStatement[23498-23539]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.fullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.fullName());",
      "info" : "VariableDeclarationStatement[23398-23530]:VariableDeclarationStatement[23547-23679]"
    }, {
      "left" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[23538-23676]:IfStatement[23687-23825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23605-23676]:Block[23754-23825]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[23615-23668]:ExpressionStatement[23764-23817]"
    }, {
      "left" : "varNode.addChildToBack(nameNode);",
      "right" : "varNode.addChildToBack(nameNode);",
      "info" : "ExpressionStatement[23684-23717]:ExpressionStatement[23833-23866]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[23724-23757]:ExpressionStatement[23873-23906]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[23764-23804]:ExpressionStatement[23913-23953]"
    }, {
      "left" : "ref.node = nameNode;",
      "right" : "ref.node = nameNode;",
      "info" : "ExpressionStatement[23871-23891]:ExpressionStatement[24020-24040]"
    }, {
      "left" : "insertedVarNode = true;",
      "right" : "insertedVarNode = true;",
      "info" : "ExpressionStatement[23898-23921]:ExpressionStatement[24047-24070]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[23933-24089]:IfStatement[24117-24274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23947-24089]:Block[24131-24274]"
    }, {
      "left" : "declareVarsForObjLitValues(\n            n, alias, rvalue,\n            varNode, varParent.getChildBefore(varNode), varParent);",
      "right" : "declareVarsForObjLitValues(\n            n, alias, rvalue,\n            varNode, varParent.getChildBefore(varNode), varParent);",
      "info" : "ExpressionStatement[23957-24082]:ExpressionStatement[24141-24266]"
    }, {
      "left" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "right" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "info" : "ExpressionStatement[24096-24158]:ExpressionStatement[24282-24344]"
    }, {
      "left" : "if (insertedVarNode)",
      "right" : "if (insertedVarNode)",
      "info" : "IfStatement[24164-24311]:IfStatement[24356-24503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24185-24311]:Block[24377-24503]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[24193-24270]:IfStatement[24385-24462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24221-24270]:Block[24413-24462]"
    }, {
      "left" : "varParent.removeChild(varNode);",
      "right" : "varParent.removeChild(varNode);",
      "info" : "ExpressionStatement[24231-24262]:ExpressionStatement[24423-24454]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[24277-24305]:ExpressionStatement[24469-24497]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24467-24474]:Modifier[24659-24666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24475-24479]:PrimitiveType[24667-24671]"
    }, {
      "left" : "checkForHosedThisReferences",
      "right" : "checkForHosedThisReferences",
      "info" : "SimpleName[24480-24507]:SimpleName[24672-24699]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[24508-24521]:SingleVariableDeclaration[24700-24713]"
    }, {
      "left" : "JSDocInfo docInfo",
      "right" : "JSDocInfo docInfo",
      "info" : "SingleVariableDeclaration[24523-24540]:SingleVariableDeclaration[24715-24732]"
    }, {
      "left" : "final Name name",
      "right" : "final Name name",
      "info" : "SingleVariableDeclaration[24548-24563]:SingleVariableDeclaration[24740-24755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24565-25239]:Block[24757-25431]"
    }, {
      "left" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "right" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "info" : "IfStatement[24708-25235]:IfStatement[24900-25427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24793-25235]:Block[24985-25427]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n          });",
      "right" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n          });",
      "info" : "ExpressionStatement[24801-25229]:ExpressionStatement[24993-25421]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24927-24933]:Modifier[25119-25125]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24934-24938]:PrimitiveType[25126-25130]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[24939-24944]:SimpleName[25131-25136]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[24945-24960]:SingleVariableDeclaration[25137-25152]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24962-24968]:SingleVariableDeclaration[25154-25160]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[24970-24981]:SingleVariableDeclaration[25162-25173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24983-25215]:Block[25175-25407]"
    }, {
      "left" : "if (n.getType() == Token.THIS)",
      "right" : "if (n.getType() == Token.THIS)",
      "info" : "IfStatement[24999-25201]:IfStatement[25191-25393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25030-25201]:Block[25222-25393]"
    }, {
      "left" : "compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));",
      "right" : "compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));",
      "info" : "ExpressionStatement[25048-25185]:ExpressionStatement[25240-25377]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25496-25503]:Modifier[25688-25695]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25504-25508]:PrimitiveType[25696-25700]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "info" : "SimpleName[25509-25551]:SimpleName[25701-25743]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[25552-25558]:SingleVariableDeclaration[25751-25757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25560-26458]:Block[25790-26742]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[25567-25591]:VariableDeclarationStatement[25851-25875]"
    }, {
      "left" : "String name = ref.node.getString();",
      "right" : "String name = ref.node.getString();",
      "info" : "VariableDeclarationStatement[25596-25631]:VariableDeclarationStatement[25880-25915]"
    }, {
      "left" : "Node rvalue = ref.node.getFirstChild();",
      "right" : "Node rvalue = ref.node.getFirstChild();",
      "info" : "VariableDeclarationStatement[25636-25675]:VariableDeclarationStatement[25920-25959]"
    }, {
      "left" : "Node varNode = ref.node.getParent();",
      "right" : "Node varNode = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[25680-25716]:VariableDeclarationStatement[25964-26000]"
    }, {
      "left" : "Node gramps = varNode.getParent();",
      "right" : "Node gramps = varNode.getParent();",
      "info" : "VariableDeclarationStatement[25721-25755]:VariableDeclarationStatement[26005-26039]"
    }, {
      "left" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "right" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "info" : "VariableDeclarationStatement[25761-25816]:VariableDeclarationStatement[26045-26100]"
    }, {
      "left" : "int numChanges = 0;",
      "right" : "int numChanges = 0;",
      "info" : "VariableDeclarationStatement[25821-25840]:VariableDeclarationStatement[26105-26124]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[25846-26002]:IfStatement[26130-26286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25860-26002]:Block[26144-26286]"
    }, {
      "left" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "right" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "info" : "ExpressionStatement[25868-25996]:ExpressionStatement[26152-26280]"
    }, {
      "left" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "right" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "info" : "ExpressionStatement[26008-26080]:ExpressionStatement[26292-26364]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[26086-26386]:IfStatement[26370-26670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26120-26386]:Block[26404-26670]"
    }, {
      "left" : "varNode.removeChild(ref.node);",
      "right" : "varNode.removeChild(ref.node);",
      "info" : "ExpressionStatement[26128-26158]:ExpressionStatement[26412-26442]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[26165-26239]:IfStatement[26449-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26193-26239]:Block[26477-26523]"
    }, {
      "left" : "gramps.removeChild(varNode);",
      "right" : "gramps.removeChild(varNode);",
      "info" : "ExpressionStatement[26203-26231]:ExpressionStatement[26487-26515]"
    }, {
      "left" : "numChanges++;",
      "right" : "numChanges++;",
      "info" : "ExpressionStatement[26246-26259]:ExpressionStatement[26530-26543]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[26364-26380]:ExpressionStatement[26648-26664]"
    }, {
      "left" : "if (numChanges > 0)",
      "right" : "if (numChanges > 0)",
      "info" : "IfStatement[26392-26454]:IfStatement[26676-26738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26412-26454]:Block[26696-26738]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[26420-26448]:ExpressionStatement[26704-26732]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26720-26727]:Modifier[27004-27011]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26728-26732]:PrimitiveType[27012-27016]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode",
      "right" : "updateFunctionDeclarationAtFunctionNode",
      "info" : "SimpleName[26733-26772]:SimpleName[27017-27056]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[26773-26779]:SingleVariableDeclaration[27064-27070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26781-26962]:Block[27103-27338]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[26788-26812]:VariableDeclarationStatement[27164-27188]"
    }, {
      "left" : "String fnName = ref.node.getString();",
      "right" : "String fnName = ref.node.getString();",
      "info" : "VariableDeclarationStatement[26817-26854]:VariableDeclarationStatement[27193-27230]"
    }, {
      "left" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "right" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "info" : "ExpressionStatement[26859-26958]:ExpressionStatement[27235-27334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27556-27563]:Modifier[27932-27939]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27564-27567]:PrimitiveType[27940-27943]"
    }, {
      "left" : "declareVarsForObjLitValues",
      "right" : "declareVarsForObjLitValues",
      "info" : "SimpleName[27568-27594]:SimpleName[27944-27970]"
    }, {
      "left" : "Name objlitName",
      "right" : "Name objlitName",
      "info" : "SingleVariableDeclaration[27602-27617]:SingleVariableDeclaration[27978-27993]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[27619-27631]:SingleVariableDeclaration[27995-28007]"
    }, {
      "left" : "Node objlit",
      "right" : "Node objlit",
      "info" : "SingleVariableDeclaration[27633-27644]:SingleVariableDeclaration[28009-28020]"
    }, {
      "left" : "Node varNode",
      "right" : "Node varNode",
      "info" : "SingleVariableDeclaration[27646-27658]:SingleVariableDeclaration[28022-28034]"
    }, {
      "left" : "Node nameToAddAfter",
      "right" : "Node nameToAddAfter",
      "info" : "SingleVariableDeclaration[27666-27685]:SingleVariableDeclaration[28042-28061]"
    }, {
      "left" : "Node varParent",
      "right" : "Node varParent",
      "info" : "SingleVariableDeclaration[27687-27701]:SingleVariableDeclaration[28063-28077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27703-30661]:Block[28079-31037]"
    }, {
      "left" : "int numVars = 0;",
      "right" : "int numVars = 0;",
      "info" : "VariableDeclarationStatement[27709-27725]:VariableDeclarationStatement[28085-28101]"
    }, {
      "left" : "int arbitraryNameCounter = 0;",
      "right" : "int arbitraryNameCounter = 0;",
      "info" : "VariableDeclarationStatement[27730-27759]:VariableDeclarationStatement[28106-28135]"
    }, {
      "left" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "right" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "info" : "VariableDeclarationStatement[27764-27815]:VariableDeclarationStatement[28140-28191]"
    }, {
      "left" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "right" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "info" : "ForStatement[27821-30637]:ForStatement[28197-31013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27907-30637]:Block[28283-31013]"
    }, {
      "left" : "Node value = key.getFirstChild();",
      "right" : "Node value = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[27915-27948]:VariableDeclarationStatement[28291-28324]"
    }, {
      "left" : "nextKey = key.getNext();",
      "right" : "nextKey = key.getNext();",
      "info" : "ExpressionStatement[27955-27979]:ExpressionStatement[28331-28355]"
    }, {
      "left" : "if (key.getType() == Token.GET || key.getType() == Token.SET)",
      "right" : "if (key.getType() == Token.GET || key.getType() == Token.SET)",
      "info" : "IfStatement[28042-28131]:IfStatement[28418-28507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28104-28131]:Block[28480-28507]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28114-28123]:ContinueStatement[28490-28499]"
    }, {
      "left" : "boolean isJsIdentifier = key.getType() != Token.NUMBER &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "right" : "boolean isJsIdentifier = key.getType() != Token.NUMBER &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "info" : "VariableDeclarationStatement[28507-28640]:VariableDeclarationStatement[28883-29016]"
    }, {
      "left" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "right" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "info" : "VariableDeclarationStatement[28647-28749]:VariableDeclarationStatement[29023-29125]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, propName);",
      "right" : "String propAlias = appendPropForAlias(alias, propName);",
      "info" : "VariableDeclarationStatement[28756-28811]:VariableDeclarationStatement[29132-29187]"
    }, {
      "left" : "String qName = objlitName.fullName() + '.' + propName;",
      "right" : "String qName = objlitName.fullName() + '.' + propName;",
      "info" : "VariableDeclarationStatement[28818-28872]:VariableDeclarationStatement[29194-29248]"
    }, {
      "left" : "Node refNode = null;",
      "right" : "Node refNode = null;",
      "info" : "VariableDeclarationStatement[28880-28900]:VariableDeclarationStatement[29256-29276]"
    }, {
      "left" : "if (discardKeys)",
      "right" : "if (discardKeys)",
      "info" : "IfStatement[28907-29294]:IfStatement[29283-29670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28924-29000]:Block[29300-29376]"
    }, {
      "left" : "objlit.removeChild(key);",
      "right" : "objlit.removeChild(key);",
      "info" : "ExpressionStatement[28934-28958]:ExpressionStatement[29310-29334]"
    }, {
      "left" : "value.detachFromParent();",
      "right" : "value.detachFromParent();",
      "info" : "ExpressionStatement[28967-28992]:ExpressionStatement[29343-29368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29006-29294]:Block[29382-29670]"
    }, {
      "left" : "refNode = Node.newString(Token.NAME, propAlias);",
      "right" : "refNode = Node.newString(Token.NAME, propAlias);",
      "info" : "ExpressionStatement[29065-29113]:ExpressionStatement[29441-29489]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[29122-29243]:IfStatement[29498-29619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29169-29243]:Block[29545-29619]"
    }, {
      "left" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[29181-29233]:ExpressionStatement[29557-29609]"
    }, {
      "left" : "key.replaceChild(value, refNode);",
      "right" : "key.replaceChild(value, refNode);",
      "info" : "ExpressionStatement[29253-29286]:ExpressionStatement[29629-29662]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "right" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "info" : "VariableDeclarationStatement[29377-29431]:VariableDeclarationStatement[29753-29807]"
    }, {
      "left" : "nameNode.addChildToFront(value);",
      "right" : "nameNode.addChildToFront(value);",
      "info" : "ExpressionStatement[29438-29470]:ExpressionStatement[29814-29846]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[29477-29595]:IfStatement[29853-29971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29524-29595]:Block[29900-29971]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[29534-29587]:ExpressionStatement[29910-29963]"
    }, {
      "left" : "Node newVar = new Node(Token.VAR, nameNode)\n          .copyInformationFromForTree(key);",
      "right" : "Node newVar = new Node(Token.VAR, nameNode)\n          .copyInformationFromForTree(key);",
      "info" : "VariableDeclarationStatement[29602-29689]:VariableDeclarationStatement[29978-30065]"
    }, {
      "left" : "if (nameToAddAfter != null)",
      "right" : "if (nameToAddAfter != null)",
      "info" : "IfStatement[29696-29856]:IfStatement[30072-30232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29724-29790]:Block[30100-30166]"
    }, {
      "left" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "right" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "info" : "ExpressionStatement[29734-29782]:ExpressionStatement[30110-30158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29796-29856]:Block[30172-30232]"
    }, {
      "left" : "varParent.addChildBefore(newVar, varNode);",
      "right" : "varParent.addChildBefore(newVar, varNode);",
      "info" : "ExpressionStatement[29806-29848]:ExpressionStatement[30182-30224]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[29863-29891]:ExpressionStatement[30239-30267]"
    }, {
      "left" : "nameToAddAfter = newVar;",
      "right" : "nameToAddAfter = newVar;",
      "info" : "ExpressionStatement[29898-29922]:ExpressionStatement[30274-30298]"
    }, {
      "left" : "if (isJsIdentifier)",
      "right" : "if (isJsIdentifier)",
      "info" : "IfStatement[29930-30613]:IfStatement[30306-30989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29950-30613]:Block[30326-30989]"
    }, {
      "left" : "Name p = nameMap.get(qName);",
      "right" : "Name p = nameMap.get(qName);",
      "info" : "VariableDeclarationStatement[30152-30180]:VariableDeclarationStatement[30528-30556]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[30189-30605]:IfStatement[30565-30981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30204-30605]:Block[30580-30981]"
    }, {
      "left" : "if (!discardKeys)",
      "right" : "if (!discardKeys)",
      "info" : "IfStatement[30216-30416]:IfStatement[30592-30792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30234-30416]:Block[30610-30792]"
    }, {
      "left" : "Ref newAlias =\n                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "right" : "Ref newAlias =\n                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[30248-30335]:VariableDeclarationStatement[30624-30711]"
    }, {
      "left" : "newAlias.node = refNode;",
      "right" : "newAlias.node = refNode;",
      "info" : "ExpressionStatement[30348-30372]:ExpressionStatement[30724-30748]"
    }, {
      "left" : "p.addRef(newAlias);",
      "right" : "p.addRef(newAlias);",
      "info" : "ExpressionStatement[30385-30404]:ExpressionStatement[30761-30780]"
    }, {
      "left" : "p.declaration.node = nameNode;",
      "right" : "p.declaration.node = nameNode;",
      "info" : "ExpressionStatement[30428-30458]:ExpressionStatement[30804-30834]"
    }, {
      "left" : "if (value.getType() == Token.FUNCTION)",
      "right" : "if (value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[30470-30595]:IfStatement[30846-30971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30509-30595]:Block[30885-30971]"
    }, {
      "left" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "right" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "info" : "ExpressionStatement[30523-30583]:ExpressionStatement[30899-30959]"
    }, {
      "left" : "numVars++;",
      "right" : "numVars++;",
      "info" : "ExpressionStatement[30621-30631]:ExpressionStatement[30997-31007]"
    }, {
      "left" : "return numVars;",
      "right" : "return numVars;",
      "info" : "ReturnStatement[30642-30657]:ReturnStatement[31018-31033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31239-31246]:Modifier[31615-31622]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31247-31250]:PrimitiveType[31623-31626]"
    }, {
      "left" : "addStubsForUndeclaredProperties",
      "right" : "addStubsForUndeclaredProperties",
      "info" : "SimpleName[31251-31282]:SimpleName[31627-31658]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[31290-31296]:SingleVariableDeclaration[31666-31672]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[31298-31310]:SingleVariableDeclaration[31674-31686]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[31312-31323]:SingleVariableDeclaration[31688-31699]"
    }, {
      "left" : "Node addAfter",
      "right" : "Node addAfter",
      "info" : "SingleVariableDeclaration[31325-31338]:SingleVariableDeclaration[31701-31714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31340-32396]:Block[31716-32772]"
    }, {
      "left" : "Preconditions.checkState(n.canCollapseUnannotatedChildNames());",
      "right" : "Preconditions.checkState(n.canCollapseUnannotatedChildNames());",
      "info" : "ExpressionStatement[31346-31409]:ExpressionStatement[31722-31785]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "right" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "info" : "ExpressionStatement[31414-31477]:ExpressionStatement[31790-31853]"
    }, {
      "left" : "Preconditions.checkNotNull(addAfter);",
      "right" : "Preconditions.checkNotNull(addAfter);",
      "info" : "ExpressionStatement[31482-31519]:ExpressionStatement[31858-31895]"
    }, {
      "left" : "int numStubs = 0;",
      "right" : "int numStubs = 0;",
      "info" : "VariableDeclarationStatement[31524-31541]:VariableDeclarationStatement[31900-31917]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[31546-32371]:IfStatement[31922-32747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31567-32371]:Block[31943-32747]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[31575-32365]:EnhancedForStatement[31951-32741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31598-32365]:Block[31974-32741]"
    }, {
      "left" : "if (p.needsToBeStubbed())",
      "right" : "if (p.needsToBeStubbed())",
      "info" : "IfStatement[31608-32357]:IfStatement[31984-32733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31634-32357]:Block[32010-32733]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.name);",
      "right" : "String propAlias = appendPropForAlias(alias, p.name);",
      "info" : "VariableDeclarationStatement[31646-31699]:VariableDeclarationStatement[32022-32075]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "right" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "info" : "VariableDeclarationStatement[31710-31764]:VariableDeclarationStatement[32086-32140]"
    }, {
      "left" : "Node newVar = new Node(Token.VAR, nameNode)\n              .copyInformationFromForTree(addAfter);",
      "right" : "Node newVar = new Node(Token.VAR, nameNode)\n              .copyInformationFromForTree(addAfter);",
      "info" : "VariableDeclarationStatement[31775-31871]:VariableDeclarationStatement[32151-32247]"
    }, {
      "left" : "parent.addChildAfter(newVar, addAfter);",
      "right" : "parent.addChildAfter(newVar, addAfter);",
      "info" : "ExpressionStatement[31882-31921]:ExpressionStatement[32258-32297]"
    }, {
      "left" : "addAfter = newVar;",
      "right" : "addAfter = newVar;",
      "info" : "ExpressionStatement[31932-31950]:ExpressionStatement[32308-32326]"
    }, {
      "left" : "numStubs++;",
      "right" : "numStubs++;",
      "info" : "ExpressionStatement[31961-31972]:ExpressionStatement[32337-32348]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[31983-32011]:ExpressionStatement[32359-32387]"
    }, {
      "left" : "if (p.refs.get(0).node.getLastChild().getBooleanProp(\n                Node.IS_CONSTANT_NAME))",
      "right" : "if (p.refs.get(0).node.getLastChild().getBooleanProp(\n                Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[32174-32347]:IfStatement[32550-32723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32268-32347]:Block[32644-32723]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[32282-32335]:ExpressionStatement[32658-32711]"
    }, {
      "left" : "return numStubs;",
      "right" : "return numStubs;",
      "info" : "ReturnStatement[32376-32392]:ReturnStatement[32752-32768]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32400-32407]:Modifier[32776-32783]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32408-32414]:Modifier[32784-32790]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32415-32421]:SimpleType[32791-32797]"
    }, {
      "left" : "appendPropForAlias",
      "right" : "appendPropForAlias",
      "info" : "SimpleName[32422-32440]:SimpleName[32798-32816]"
    }, {
      "left" : "String root",
      "right" : "String root",
      "info" : "SingleVariableDeclaration[32441-32452]:SingleVariableDeclaration[32817-32828]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[32454-32465]:SingleVariableDeclaration[32830-32841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32467-32759]:Block[32843-33135]"
    }, {
      "left" : "if (prop.indexOf('$') != -1)",
      "right" : "if (prop.indexOf('$') != -1)",
      "info" : "IfStatement[32473-32725]:IfStatement[32849-33101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32502-32725]:Block[32878-33101]"
    }, {
      "left" : "prop = prop.replaceAll(\"\\\\$\", \"\\\\$0\");",
      "right" : "prop = prop.replaceAll(\"\\\\$\", \"\\\\$0\");",
      "info" : "ExpressionStatement[32681-32719]:ExpressionStatement[33057-33095]"
    }, {
      "left" : "return root + '$' + prop;",
      "right" : "return root + '$' + prop;",
      "info" : "ReturnStatement[32730-32755]:ReturnStatement[33106-33131]"
    } ]
  },
  "interFileMappings" : { }
}