{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = -6587513359895466954L;",
      "right" : "private static final long serialVersionUID = -6587513359895466954L;",
      "info" : "FieldDeclaration[1241-1351]:FieldDeclaration[1241-1351]"
    }, {
      "left" : "private static double[] lanczos =\n    {\n        0.99999999999999709182,\n        57.156235665862923517,\n        -59.597960355475491248,\n        14.136097974741747174,\n        -0.49191381609762019978,\n        .33994649984811888699e-4,\n        .46523628927048575665e-4,\n        -.98374475304879564677e-4,\n        .15808870322491248884e-3,\n        -.21026444172410488319e-3,\n        .21743961811521264320e-3,\n        -.16431810653676389022e-3,\n        .84418223983852743293e-4,\n        -.26190838401581408670e-4,\n        .36899182659531622704e-5,\n    };",
      "right" : "private static double[] lanczos =\n    {\n        0.99999999999999709182,\n        57.156235665862923517,\n        -59.597960355475491248,\n        14.136097974741747174,\n        -0.49191381609762019978,\n        .33994649984811888699e-4,\n        .46523628927048575665e-4,\n        -.98374475304879564677e-4,\n        .15808870322491248884e-3,\n        -.21026444172410488319e-3,\n        .21743961811521264320e-3,\n        -.16431810653676389022e-3,\n        .84418223983852743293e-4,\n        -.26190838401581408670e-4,\n        .36899182659531622704e-5,\n    };",
      "info" : "FieldDeclaration[1459-2040]:FieldDeclaration[1460-2041]"
    }, {
      "left" : "private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);",
      "right" : "private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);",
      "info" : "FieldDeclaration[2046-2185]:FieldDeclaration[2047-2186]"
    }, {
      "left" : "private Gamma()",
      "right" : "private Gamma()",
      "info" : "MethodDeclaration[2196-2305]:MethodDeclaration[2197-2306]"
    }, {
      "left" : "public static double logGamma(double x)",
      "right" : "public static double logGamma(double x)",
      "info" : "MethodDeclaration[2311-3557]:MethodDeclaration[2312-3558]"
    }, {
      "left" : "public static double regularizedGammaP(double a, double x)\n        throws MathException",
      "right" : "public static double regularizedGammaP(double a, double x)\n        throws MathException",
      "info" : "MethodDeclaration[3563-3996]:MethodDeclaration[3564-3997]"
    }, {
      "left" : "public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException",
      "right" : "public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException",
      "info" : "MethodDeclaration[4019-6540]:MethodDeclaration[4020-6541]"
    }, {
      "left" : "public static double regularizedGammaQ(double a, double x)\n        throws MathException",
      "right" : "public static double regularizedGammaQ(double a, double x)\n        throws MathException",
      "info" : "MethodDeclaration[6550-6997]:MethodDeclaration[6551-6998]"
    }, {
      "left" : "public static double regularizedGammaQ(final double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException",
      "right" : "public static double regularizedGammaQ(final double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException",
      "info" : "MethodDeclaration[7007-9325]:MethodDeclaration[7008-9326]"
    }, {
      "left" : "private static final long serialVersionUID = 5378525034886164398L;",
      "right" : "private static final long serialVersionUID = 5378525034886164398L;",
      "info" : "FieldDeclaration[8812-8878]:FieldDeclaration[8813-8879]"
    }, {
      "left" : "protected double getA(int n, double x)",
      "right" : "protected double getA(int n, double x)",
      "info" : "MethodDeclaration[8896-9008]:MethodDeclaration[8897-9009]"
    }, {
      "left" : "protected double getB(int n, double x)",
      "right" : "protected double getB(int n, double x)",
      "info" : "MethodDeclaration[9026-9124]:MethodDeclaration[9027-9125]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2281-2305]:Block[2282-2306]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2291-2299]:SuperConstructorInvocation[2292-2300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3022-3557]:Block[3023-3558]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[3032-3043]:VariableDeclarationStatement[3033-3044]"
    }, {
      "left" : "if (Double.isNaN(x) || (x <= 0.0))",
      "right" : "if (Double.isNaN(x) || (x <= 0.0))",
      "info" : "IfStatement[3053-3530]:IfStatement[3054-3531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3088-3129]:Block[3089-3130]"
    }, {
      "left" : "ret = Double.NaN;",
      "right" : "ret = Double.NaN;",
      "info" : "ExpressionStatement[3102-3119]:ExpressionStatement[3103-3120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3135-3530]:Block[3136-3531]"
    }, {
      "left" : "double g = 607.0 / 128.0;",
      "right" : "double g = 607.0 / 128.0;",
      "info" : "VariableDeclarationStatement[3149-3174]:VariableDeclarationStatement[3150-3175]"
    }, {
      "left" : "double sum = 0.0;",
      "right" : "double sum = 0.0;",
      "info" : "VariableDeclarationStatement[3200-3217]:VariableDeclarationStatement[3201-3218]"
    }, {
      "left" : "for (int i = lanczos.length - 1; i > 0; --i)",
      "right" : "for (int i = lanczos.length - 1; i > 0; --i)",
      "info" : "ForStatement[3230-3342]:ForStatement[3231-3343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3275-3342]:Block[3276-3343]"
    }, {
      "left" : "sum = sum + (lanczos[i] / (x + i));",
      "right" : "sum = sum + (lanczos[i] / (x + i));",
      "info" : "ExpressionStatement[3293-3328]:ExpressionStatement[3294-3329]"
    }, {
      "left" : "sum = sum + lanczos[0];",
      "right" : "sum = sum + lanczos[0];",
      "info" : "ExpressionStatement[3355-3378]:ExpressionStatement[3356-3379]"
    }, {
      "left" : "double tmp = x + g + .5;",
      "right" : "double tmp = x + g + .5;",
      "info" : "VariableDeclarationStatement[3392-3416]:VariableDeclarationStatement[3393-3417]"
    }, {
      "left" : "ret = ((x + .5) * Math.log(tmp)) - tmp +\n                HALF_LOG_2_PI + Math.log(sum / x);",
      "right" : "ret = ((x + .5) * Math.log(tmp)) - tmp +\n                HALF_LOG_2_PI + Math.log(sum / x);",
      "info" : "ExpressionStatement[3429-3520]:ExpressionStatement[3430-3521]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[3540-3551]:ReturnStatement[3541-3552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3913-3996]:Block[3914-3997]"
    }, {
      "left" : "return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "right" : "return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[3923-3990]:ReturnStatement[3924-3991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5401-6540]:Block[5402-6541]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[5411-5422]:VariableDeclarationStatement[5412-5423]"
    }, {
      "left" : "if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0))",
      "right" : "if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0))",
      "info" : "IfStatement[5432-6513]:IfStatement[5433-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5499-5540]:Block[5500-5541]"
    }, {
      "left" : "ret = Double.NaN;",
      "right" : "ret = Double.NaN;",
      "info" : "ExpressionStatement[5513-5530]:ExpressionStatement[5514-5531]"
    }, {
      "left" : "if (x == 0.0)",
      "right" : "if (x == 0.0)",
      "info" : "IfStatement[5546-6513]:IfStatement[5547-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5560-5594]:Block[5561-5595]"
    }, {
      "left" : "ret = 0.0;",
      "right" : "ret = 0.0;",
      "info" : "ExpressionStatement[5574-5584]:ExpressionStatement[5575-5585]"
    }, {
      "left" : "if (a >= 1.0 && x > a)",
      "right" : "if (a >= 1.0 && x > a)",
      "info" : "IfStatement[5600-6513]:IfStatement[5601-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5623-5807]:Block[5624-5808]"
    }, {
      "left" : "ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",
      "right" : "ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",
      "info" : "ExpressionStatement[5737-5797]:ExpressionStatement[5738-5798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5813-6513]:Block[5814-6514]"
    }, {
      "left" : "double n = 0.0;",
      "right" : "double n = 0.0;",
      "info" : "VariableDeclarationStatement[5859-5874]:VariableDeclarationStatement[5860-5875]"
    }, {
      "left" : "double an = 1.0 / a;",
      "right" : "double an = 1.0 / a;",
      "info" : "VariableDeclarationStatement[5912-5932]:VariableDeclarationStatement[5913-5933]"
    }, {
      "left" : "double sum = an;",
      "right" : "double sum = an;",
      "info" : "VariableDeclarationStatement[5975-5991]:VariableDeclarationStatement[5976-5992]"
    }, {
      "left" : "while (Math.abs(an) > epsilon && n < maxIterations)",
      "right" : "while (Math.abs(an) > epsilon && n < maxIterations)",
      "info" : "WhileStatement[6019-6281]:WhileStatement[6020-6282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6071-6281]:Block[6072-6282]"
    }, {
      "left" : "n = n + 1.0;",
      "right" : "n = n + 1.0;",
      "info" : "ExpressionStatement[6143-6155]:ExpressionStatement[6144-6156]"
    }, {
      "left" : "an = an * (x / (a + n));",
      "right" : "an = an * (x / (a + n));",
      "info" : "ExpressionStatement[6172-6196]:ExpressionStatement[6173-6197]"
    }, {
      "left" : "sum = sum + an;",
      "right" : "sum = sum + an;",
      "info" : "ExpressionStatement[6252-6267]:ExpressionStatement[6253-6268]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[6294-6503]:IfStatement[6295-6504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6318-6406]:Block[6319-6407]"
    }, {
      "left" : "throw new MaxIterationsExceededException(maxIterations);",
      "right" : "throw new MaxIterationsExceededException(maxIterations);",
      "info" : "ThrowStatement[6336-6392]:ThrowStatement[6337-6393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6412-6503]:Block[6413-6504]"
    }, {
      "left" : "ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;",
      "right" : "ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;",
      "info" : "ExpressionStatement[6430-6489]:ExpressionStatement[6431-6490]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[6523-6534]:ReturnStatement[6524-6535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6914-6997]:Block[6915-6998]"
    }, {
      "left" : "return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "right" : "return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[6924-6991]:ReturnStatement[6925-6992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8280-9325]:Block[8281-9326]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[8290-8301]:VariableDeclarationStatement[8291-8302]"
    }, {
      "left" : "if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0))",
      "right" : "if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0))",
      "info" : "IfStatement[8311-9298]:IfStatement[8312-9299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8378-8419]:Block[8379-8420]"
    }, {
      "left" : "ret = Double.NaN;",
      "right" : "ret = Double.NaN;",
      "info" : "ExpressionStatement[8392-8409]:ExpressionStatement[8393-8410]"
    }, {
      "left" : "if (x == 0.0)",
      "right" : "if (x == 0.0)",
      "info" : "IfStatement[8425-9298]:IfStatement[8426-9299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8439-8473]:Block[8440-8474]"
    }, {
      "left" : "ret = 1.0;",
      "right" : "ret = 1.0;",
      "info" : "ExpressionStatement[8453-8463]:ExpressionStatement[8454-8464]"
    }, {
      "left" : "if (x < a || a < 1.0)",
      "right" : "if (x < a || a < 1.0)",
      "info" : "IfStatement[8479-9298]:IfStatement[8480-9299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8501-8685]:Block[8502-8686]"
    }, {
      "left" : "ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",
      "right" : "ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",
      "info" : "ExpressionStatement[8615-8675]:ExpressionStatement[8616-8676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8691-9298]:Block[8692-9299]"
    }, {
      "left" : "ContinuedFraction cf = new ContinuedFraction() {\n\n                private static final long serialVersionUID = 5378525034886164398L;\n\n                protected double getA(int n, double x) {\n                    return ((2.0 * n) + 1.0) - a + x;\n                }\n\n                protected double getB(int n, double x) {\n                    return n * (a - n);\n                }\n            };",
      "right" : "ContinuedFraction cf = new ContinuedFraction() {\n\n                private static final long serialVersionUID = 5378525034886164398L;\n\n                protected double getA(int n, double x) {\n                    return ((2.0 * n) + 1.0) - a + x;\n                }\n\n                protected double getB(int n, double x) {\n                    return n * (a - n);\n                }\n            };",
      "info" : "VariableDeclarationStatement[8746-9139]:VariableDeclarationStatement[8747-9140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8935-9008]:Block[8936-9009]"
    }, {
      "left" : "return ((2.0 * n) + 1.0) - a + x;",
      "right" : "return ((2.0 * n) + 1.0) - a + x;",
      "info" : "ReturnStatement[8957-8990]:ReturnStatement[8958-8991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9065-9124]:Block[9066-9125]"
    }, {
      "left" : "return n * (a - n);",
      "right" : "return n * (a - n);",
      "info" : "ReturnStatement[9087-9106]:ReturnStatement[9088-9107]"
    }, {
      "left" : "ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",
      "right" : "ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",
      "info" : "ExpressionStatement[9165-9216]:ExpressionStatement[9166-9217]"
    }, {
      "left" : "ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;",
      "right" : "ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;",
      "info" : "ExpressionStatement[9229-9288]:ExpressionStatement[9230-9289]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[9308-9319]:ReturnStatement[9309-9320]"
    } ]
  },
  "interFileMappings" : { }
}