{
  "matchedElements" : [
 {
    "left" : "class : StdDateFormat",
    "right" : "class : StdDateFormat",
    "info" : "TypeDeclaration[279-19669]:TypeDeclaration[279-19984]"
  }, {
    "left" : "DATE_FORMAT_STR_ISO8601",
    "right" : "DATE_FORMAT_STR_ISO8601",
    "info" : "FieldDeclaration[964-1229]:FieldDeclaration[964-1229]"
  }, {
    "left" : "DATE_FORMAT_STR_ISO8601_Z",
    "right" : "DATE_FORMAT_STR_ISO8601_Z",
    "info" : "FieldDeclaration[1235-1429]:FieldDeclaration[1235-1429]"
  }, {
    "left" : "DATE_FORMAT_STR_PLAIN",
    "right" : "DATE_FORMAT_STR_PLAIN",
    "info" : "FieldDeclaration[1435-1567]:FieldDeclaration[1435-1567]"
  }, {
    "left" : "DATE_FORMAT_STR_RFC1123",
    "right" : "DATE_FORMAT_STR_RFC1123",
    "info" : "FieldDeclaration[1573-1762]:FieldDeclaration[1573-1762]"
  }, {
    "left" : "ALL_FORMATS",
    "right" : "ALL_FORMATS",
    "info" : "FieldDeclaration[1768-2047]:FieldDeclaration[1768-2047]"
  }, {
    "left" : "DEFAULT_TIMEZONE",
    "right" : "DEFAULT_TIMEZONE",
    "info" : "FieldDeclaration[2053-2227]:FieldDeclaration[2053-2227]"
  }, {
    "left" : "DEFAULT_LOCALE",
    "right" : "DEFAULT_LOCALE",
    "info" : "FieldDeclaration[2321-2376]:FieldDeclaration[2321-2376]"
  }, {
    "left" : "DATE_FORMAT_RFC1123",
    "right" : "DATE_FORMAT_RFC1123",
    "info" : "FieldDeclaration[2386-2440]:FieldDeclaration[2386-2440]"
  }, {
    "left" : "DATE_FORMAT_ISO8601",
    "right" : "DATE_FORMAT_ISO8601",
    "info" : "FieldDeclaration[2446-2500]:FieldDeclaration[2446-2500]"
  }, {
    "left" : "DATE_FORMAT_ISO8601_Z",
    "right" : "DATE_FORMAT_ISO8601_Z",
    "info" : "FieldDeclaration[2505-2561]:FieldDeclaration[2505-2561]"
  }, {
    "left" : "DATE_FORMAT_PLAIN",
    "right" : "DATE_FORMAT_PLAIN",
    "info" : "FieldDeclaration[2567-2619]:FieldDeclaration[2567-2619]"
  }, {
    "left" : "instance",
    "right" : "instance",
    "info" : "FieldDeclaration[3601-3769]:FieldDeclaration[3601-3769]"
  }, {
    "left" : "_timezone",
    "right" : "_timezone",
    "info" : "FieldDeclaration[3779-3945]:FieldDeclaration[3779-3945]"
  }, {
    "left" : "_locale",
    "right" : "_locale",
    "info" : "FieldDeclaration[3951-3982]:FieldDeclaration[3951-3982]"
  }, {
    "left" : "_lenient",
    "right" : "_lenient",
    "info" : "FieldDeclaration[3988-4205]:FieldDeclaration[3988-4205]"
  }, {
    "left" : "_formatRFC1123",
    "right" : "_formatRFC1123",
    "info" : "FieldDeclaration[4215-4261]:FieldDeclaration[4215-4261]"
  }, {
    "left" : "_formatISO8601",
    "right" : "_formatISO8601",
    "info" : "FieldDeclaration[4266-4312]:FieldDeclaration[4266-4312]"
  }, {
    "left" : "_formatISO8601_z",
    "right" : "_formatISO8601_z",
    "info" : "FieldDeclaration[4317-4365]:FieldDeclaration[4317-4365]"
  }, {
    "left" : "_formatPlain",
    "right" : "_formatPlain",
    "info" : "FieldDeclaration[4370-4414]:FieldDeclaration[4370-4414]"
  }, {
    "left" : "public StdDateFormat()",
    "right" : "public StdDateFormat()",
    "info" : "MethodDeclaration[4622-4686]:MethodDeclaration[4622-4686]"
  }, {
    "left" : "public StdDateFormat(tz , loc )",
    "right" : "public StdDateFormat(tz , loc )",
    "info" : "MethodDeclaration[4692-4821]:MethodDeclaration[4692-4821]"
  }, {
    "left" : "protected StdDateFormat(tz , loc , lenient )",
    "right" : "protected StdDateFormat(tz , loc , lenient )",
    "info" : "MethodDeclaration[4827-4975]:MethodDeclaration[4827-4975]"
  }, {
    "left" : "public getDefaultTimeZone() : ",
    "right" : "public getDefaultTimeZone() : ",
    "info" : "MethodDeclaration[4985-5069]:MethodDeclaration[4985-5069]"
  }, {
    "left" : "public withTimeZone(tz ) : ",
    "right" : "public withTimeZone(tz ) : ",
    "info" : "MethodDeclaration[5079-5514]:MethodDeclaration[5079-5514]"
  }, {
    "left" : "public withLocale(loc ) : ",
    "right" : "public withLocale(loc ) : ",
    "info" : "MethodDeclaration[5520-5701]:MethodDeclaration[5520-5701]"
  }, {
    "left" : "public clone() : ",
    "right" : "public clone() : ",
    "info" : "MethodDeclaration[5711-5974]:MethodDeclaration[5711-5974]"
  }, {
    "left" : "public getISO8601Format(tz ) : ",
    "right" : "public getISO8601Format(tz ) : ",
    "info" : "MethodDeclaration[5980-6187]:MethodDeclaration[5980-6187]"
  }, {
    "left" : "public getISO8601Format(tz , loc ) : ",
    "right" : "public getISO8601Format(tz , loc ) : ",
    "info" : "MethodDeclaration[6193-6555]:MethodDeclaration[6193-6555]"
  }, {
    "left" : "public getRFC1123Format(tz , loc ) : ",
    "right" : "public getRFC1123Format(tz , loc ) : ",
    "info" : "MethodDeclaration[6561-6931]:MethodDeclaration[6561-6931]"
  }, {
    "left" : "public getRFC1123Format(tz ) : ",
    "right" : "public getRFC1123Format(tz ) : ",
    "info" : "MethodDeclaration[6937-7144]:MethodDeclaration[6937-7144]"
  }, {
    "left" : "public getTimeZone() : ",
    "right" : "public getTimeZone() : ",
    "info" : "MethodDeclaration[7327-7417]:MethodDeclaration[7327-7417]"
  }, {
    "left" : "public setTimeZone(tz ) : void",
    "right" : "public setTimeZone(tz ) : void",
    "info" : "MethodDeclaration[7423-7731]:MethodDeclaration[7423-7731]"
  }, {
    "left" : "public isLenient() : boolean",
    "right" : "public isLenient() : boolean",
    "info" : "MethodDeclaration[7737-8186]:MethodDeclaration[8198-8409]"
  }, {
    "left" : "public parse(dateStr ) : ",
    "right" : "public parse(dateStr ) : ",
    "info" : "MethodDeclaration[8363-10148]:MethodDeclaration[8586-10371]"
  }, {
    "left" : "public parse(dateStr , pos ...) : ",
    "right" : "public parse(dateStr , pos ...) : ",
    "info" : "MethodDeclaration[10154-11353]:MethodDeclaration[10377-11576]"
  }, {
    "left" : "public format(date , toAppendTo , fieldPosition ) : ",
    "right" : "public format(date , toAppendTo , fieldPosition ) : ",
    "info" : "MethodDeclaration[11534-11921]:MethodDeclaration[11757-12144]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[12096-12370]:MethodDeclaration[12319-12593]"
  }, {
    "left" : "protected looksLikeISO8601(dateStr ) : boolean",
    "right" : "protected looksLikeISO8601(dateStr ) : boolean",
    "info" : "MethodDeclaration[12546-12985]:MethodDeclaration[12769-13208]"
  }, {
    "left" : "protected parseAsISO8601(dateStr , pos , throwErrors boolean) : ",
    "right" : "protected parseAsISO8601(dateStr , pos , throwErrors boolean) : ",
    "info" : "MethodDeclaration[12991-18211]:MethodDeclaration[13214-18434]"
  }, {
    "left" : "protected parseAsRFC1123(dateStr , pos ...) : ",
    "right" : "protected parseAsRFC1123(dateStr , pos ...) : ",
    "info" : "MethodDeclaration[18217-18531]:MethodDeclaration[18440-18754]"
  }, {
    "left" : "private hasTimeZone(str ) : boolean",
    "right" : "private hasTimeZone(str ) : boolean",
    "info" : "MethodDeclaration[18537-19024]:MethodDeclaration[18760-19247]"
  }, {
    "left" : "private _cloneFormat(df , format , tz , loc , lenient ) : ",
    "right" : "private _cloneFormat(df , format , tz , loc , lenient ) : ",
    "info" : "MethodDeclaration[19030-19499]:MethodDeclaration[19253-19814]"
  }, {
    "left" : "protected _clearFormats() : void",
    "right" : "protected _clearFormats() : void",
    "info" : "MethodDeclaration[19505-19667]:MethodDeclaration[19820-19982]"
  } ],
  "mappings" : [
 {
    "left" : "@SuppressWarnings(\"serial\")",
    "right" : "@SuppressWarnings(\"serial\")",
    "info" : "SingleMemberAnnotation[557-584]:SingleMemberAnnotation[557-584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2239-2315]:Block[2239-2315]"
  }, {
    "left" : "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\");",
    "right" : "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\");",
    "info" : "ExpressionStatement[2249-2296]:ExpressionStatement[2249-2296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2848-3591]:Block[2848-3591]"
  }, {
    "left" : "DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);",
    "right" : "DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[2986-3070]:ExpressionStatement[2986-3070]"
  }, {
    "left" : "DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);",
    "right" : "DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);",
    "info" : "ExpressionStatement[3079-3129]:ExpressionStatement[3079-3129]"
  }, {
    "left" : "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);",
    "right" : "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[3138-3222]:ExpressionStatement[3138-3222]"
  }, {
    "left" : "DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);",
    "right" : "DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);",
    "info" : "ExpressionStatement[3231-3281]:ExpressionStatement[3231-3281]"
  }, {
    "left" : "DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);",
    "right" : "DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[3290-3378]:ExpressionStatement[3290-3378]"
  }, {
    "left" : "DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);",
    "right" : "DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);",
    "info" : "ExpressionStatement[3387-3439]:ExpressionStatement[3387-3439]"
  }, {
    "left" : "DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);",
    "right" : "DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[3448-3528]:ExpressionStatement[3448-3528]"
  }, {
    "left" : "DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);",
    "right" : "DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);",
    "info" : "ExpressionStatement[3537-3585]:ExpressionStatement[3537-3585]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4622-4628]:Modifier[4622-4628]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleName[4629-4642]:SimpleName[4629-4642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4645-4686]:Block[4645-4686]"
  }, {
    "left" : "_locale = DEFAULT_LOCALE;",
    "right" : "_locale = DEFAULT_LOCALE;",
    "info" : "ExpressionStatement[4655-4680]:ExpressionStatement[4655-4680]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[4692-4703]:MarkerAnnotation[4692-4703]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4721-4727]:Modifier[4721-4727]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleName[4728-4741]:SimpleName[4728-4741]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[4742-4753]:SingleVariableDeclaration[4742-4753]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[4755-4765]:SingleVariableDeclaration[4755-4765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4767-4821]:Block[4767-4821]"
  }, {
    "left" : "_timezone = tz;",
    "right" : "_timezone = tz;",
    "info" : "ExpressionStatement[4777-4792]:ExpressionStatement[4777-4792]"
  }, {
    "left" : "_locale = loc;",
    "right" : "_locale = loc;",
    "info" : "ExpressionStatement[4801-4815]:ExpressionStatement[4801-4815]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4827-4836]:Modifier[4827-4836]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleName[4837-4850]:SimpleName[4837-4850]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[4851-4862]:SingleVariableDeclaration[4851-4862]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[4864-4874]:SingleVariableDeclaration[4864-4874]"
  }, {
    "left" : "Boolean lenient",
    "right" : "Boolean lenient",
    "info" : "SingleVariableDeclaration[4876-4891]:SingleVariableDeclaration[4876-4891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4893-4975]:Block[4893-4975]"
  }, {
    "left" : "_timezone = tz;",
    "right" : "_timezone = tz;",
    "info" : "ExpressionStatement[4903-4918]:ExpressionStatement[4903-4918]"
  }, {
    "left" : "_locale = loc;",
    "right" : "_locale = loc;",
    "info" : "ExpressionStatement[4927-4941]:ExpressionStatement[4927-4941]"
  }, {
    "left" : "_lenient = lenient;",
    "right" : "_lenient = lenient;",
    "info" : "ExpressionStatement[4950-4969]:ExpressionStatement[4950-4969]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4985-4991]:Modifier[4985-4991]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4992-4998]:Modifier[4992-4998]"
  }, {
    "left" : "TimeZone",
    "right" : "TimeZone",
    "info" : "SimpleType[4999-5007]:SimpleType[4999-5007]"
  }, {
    "left" : "getDefaultTimeZone",
    "right" : "getDefaultTimeZone",
    "info" : "SimpleName[5008-5026]:SimpleName[5008-5026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5029-5069]:Block[5029-5069]"
  }, {
    "left" : "return DEFAULT_TIMEZONE;",
    "right" : "return DEFAULT_TIMEZONE;",
    "info" : "ReturnStatement[5039-5063]:ReturnStatement[5039-5063]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5240-5246]:Modifier[5240-5246]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleType[5247-5260]:SimpleType[5247-5260]"
  }, {
    "left" : "withTimeZone",
    "right" : "withTimeZone",
    "info" : "SimpleName[5261-5273]:SimpleName[5261-5273]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[5274-5285]:SingleVariableDeclaration[5274-5285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5287-5514]:Block[5287-5514]"
  }, {
    "left" : "if (tz == null)",
    "right" : "if (tz == null)",
    "info" : "IfStatement[5297-5359]:IfStatement[5297-5359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5313-5359]:Block[5313-5359]"
  }, {
    "left" : "tz = DEFAULT_TIMEZONE;",
    "right" : "tz = DEFAULT_TIMEZONE;",
    "info" : "ExpressionStatement[5327-5349]:ExpressionStatement[5327-5349]"
  }, {
    "left" : "if ((tz == _timezone) || tz.equals(_timezone))",
    "right" : "if ((tz == _timezone) || tz.equals(_timezone))",
    "info" : "IfStatement[5368-5451]:IfStatement[5368-5451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5415-5451]:Block[5415-5451]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[5429-5441]:ReturnStatement[5429-5441]"
  }, {
    "left" : "return new StdDateFormat(tz, _locale, _lenient);",
    "right" : "return new StdDateFormat(tz, _locale, _lenient);",
    "info" : "ReturnStatement[5460-5508]:ReturnStatement[5460-5508]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5520-5526]:Modifier[5520-5526]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleType[5527-5540]:SimpleType[5527-5540]"
  }, {
    "left" : "withLocale",
    "right" : "withLocale",
    "info" : "SimpleName[5541-5551]:SimpleName[5541-5551]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[5552-5562]:SingleVariableDeclaration[5552-5562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5564-5701]:Block[5564-5701]"
  }, {
    "left" : "if (loc.equals(_locale))",
    "right" : "if (loc.equals(_locale))",
    "info" : "IfStatement[5574-5635]:IfStatement[5574-5635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5599-5635]:Block[5599-5635]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[5613-5625]:ReturnStatement[5613-5625]"
  }, {
    "left" : "return new StdDateFormat(_timezone, loc, _lenient);",
    "right" : "return new StdDateFormat(_timezone, loc, _lenient);",
    "info" : "ReturnStatement[5644-5695]:ReturnStatement[5644-5695]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5711-5720]:MarkerAnnotation[5711-5720]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5725-5731]:Modifier[5725-5731]"
  }, {
    "left" : "StdDateFormat",
    "right" : "StdDateFormat",
    "info" : "SimpleType[5732-5745]:SimpleType[5732-5745]"
  }, {
    "left" : "clone",
    "right" : "clone",
    "info" : "SimpleName[5746-5751]:SimpleName[5746-5751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5754-5974]:Block[5754-5974]"
  }, {
    "left" : "return new StdDateFormat(_timezone, _locale, _lenient);",
    "right" : "return new StdDateFormat(_timezone, _locale, _lenient);",
    "info" : "ReturnStatement[5913-5968]:ReturnStatement[5913-5968]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[6056-6067]:MarkerAnnotation[6056-6067]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6072-6078]:Modifier[6072-6078]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6079-6085]:Modifier[6079-6085]"
  }, {
    "left" : "DateFormat",
    "right" : "DateFormat",
    "info" : "SimpleType[6086-6096]:SimpleType[6086-6096]"
  }, {
    "left" : "getISO8601Format",
    "right" : "getISO8601Format",
    "info" : "SimpleName[6097-6113]:SimpleName[6097-6113]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[6114-6125]:SingleVariableDeclaration[6114-6125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6127-6187]:Block[6127-6187]"
  }, {
    "left" : "return getISO8601Format(tz, DEFAULT_LOCALE);",
    "right" : "return getISO8601Format(tz, DEFAULT_LOCALE);",
    "info" : "ReturnStatement[6137-6181]:ReturnStatement[6137-6181]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6391-6397]:Modifier[6391-6397]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6398-6404]:Modifier[6398-6404]"
  }, {
    "left" : "DateFormat",
    "right" : "DateFormat",
    "info" : "SimpleType[6405-6415]:SimpleType[6405-6415]"
  }, {
    "left" : "getISO8601Format",
    "right" : "getISO8601Format",
    "info" : "SimpleName[6416-6432]:SimpleName[6416-6432]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[6433-6444]:SingleVariableDeclaration[6433-6444]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[6446-6456]:SingleVariableDeclaration[6446-6456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6458-6555]:Block[6458-6555]"
  }, {
    "left" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
    "right" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
    "info" : "ReturnStatement[6468-6549]:ReturnStatement[6468-6549]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6751-6757]:Modifier[6751-6757]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6758-6764]:Modifier[6758-6764]"
  }, {
    "left" : "DateFormat",
    "right" : "DateFormat",
    "info" : "SimpleType[6765-6775]:SimpleType[6765-6775]"
  }, {
    "left" : "getRFC1123Format",
    "right" : "getRFC1123Format",
    "info" : "SimpleName[6776-6792]:SimpleName[6776-6792]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[6793-6804]:SingleVariableDeclaration[6793-6804]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[6806-6816]:SingleVariableDeclaration[6806-6816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6818-6931]:Block[6818-6931]"
  }, {
    "left" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
    "right" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
    "info" : "ReturnStatement[6828-6925]:ReturnStatement[6828-6925]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[7013-7024]:MarkerAnnotation[7013-7024]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7029-7035]:Modifier[7029-7035]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7036-7042]:Modifier[7036-7042]"
  }, {
    "left" : "DateFormat",
    "right" : "DateFormat",
    "info" : "SimpleType[7043-7053]:SimpleType[7043-7053]"
  }, {
    "left" : "getRFC1123Format",
    "right" : "getRFC1123Format",
    "info" : "SimpleName[7054-7070]:SimpleName[7054-7070]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[7071-7082]:SingleVariableDeclaration[7071-7082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7084-7144]:Block[7084-7144]"
  }, {
    "left" : "return getRFC1123Format(tz, DEFAULT_LOCALE);",
    "right" : "return getRFC1123Format(tz, DEFAULT_LOCALE);",
    "info" : "ReturnStatement[7094-7138]:ReturnStatement[7094-7138]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7327-7336]:MarkerAnnotation[7327-7336]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7354-7360]:Modifier[7354-7360]"
  }, {
    "left" : "TimeZone",
    "right" : "TimeZone",
    "info" : "SimpleType[7361-7369]:SimpleType[7361-7369]"
  }, {
    "left" : "getTimeZone",
    "right" : "getTimeZone",
    "info" : "SimpleName[7370-7381]:SimpleName[7370-7381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7384-7417]:Block[7384-7417]"
  }, {
    "left" : "return _timezone;",
    "right" : "return _timezone;",
    "info" : "ReturnStatement[7394-7411]:ReturnStatement[7394-7411]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7423-7432]:MarkerAnnotation[7423-7432]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7437-7443]:Modifier[7437-7443]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7444-7448]:PrimitiveType[7444-7448]"
  }, {
    "left" : "setTimeZone",
    "right" : "setTimeZone",
    "info" : "SimpleName[7449-7460]:SimpleName[7449-7460]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[7461-7472]:SingleVariableDeclaration[7461-7472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7478-7731]:Block[7478-7731]"
  }, {
    "left" : "if (!tz.equals(_timezone))",
    "right" : "if (!tz.equals(_timezone))",
    "info" : "IfStatement[7630-7725]:IfStatement[7630-7725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7657-7725]:Block[7657-7725]"
  }, {
    "left" : "_clearFormats();",
    "right" : "_clearFormats();",
    "info" : "ExpressionStatement[7671-7687]:ExpressionStatement[7671-7687]"
  }, {
    "left" : "_timezone = tz;",
    "right" : "_timezone = tz;",
    "info" : "ExpressionStatement[7700-7715]:ExpressionStatement[7700-7715]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7975-7984]:MarkerAnnotation[8198-8207]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8002-8008]:Modifier[8225-8231]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8009-8016]:PrimitiveType[8232-8239]"
  }, {
    "left" : "isLenient",
    "right" : "isLenient",
    "info" : "SimpleName[8017-8026]:SimpleName[8240-8249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8029-8186]:Block[8252-8409]"
  }, {
    "left" : "if (_lenient == null)",
    "right" : "if (_lenient == null)",
    "info" : "IfStatement[8039-8140]:IfStatement[8262-8363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8061-8140]:Block[8284-8363]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8118-8130]:ReturnStatement[8341-8353]"
  }, {
    "left" : "return _lenient.booleanValue();",
    "right" : "return _lenient.booleanValue();",
    "info" : "ReturnStatement[8149-8180]:ReturnStatement[8372-8403]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8363-8372]:MarkerAnnotation[8586-8595]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8377-8383]:Modifier[8600-8606]"
  }, {
    "left" : "Date",
    "right" : "Date",
    "info" : "SimpleType[8384-8388]:SimpleType[8607-8611]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[8389-8394]:SimpleName[8612-8617]"
  }, {
    "left" : "String dateStr",
    "right" : "String dateStr",
    "info" : "SingleVariableDeclaration[8395-8409]:SingleVariableDeclaration[8618-8632]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[8418-8432]:SimpleType[8641-8655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8437-10148]:Block[8660-10371]"
  }, {
    "left" : "dateStr = dateStr.trim();",
    "right" : "dateStr = dateStr.trim();",
    "info" : "ExpressionStatement[8447-8472]:ExpressionStatement[8670-8695]"
  }, {
    "left" : "ParsePosition pos = new ParsePosition(0);",
    "right" : "ParsePosition pos = new ParsePosition(0);",
    "info" : "VariableDeclarationStatement[8481-8522]:VariableDeclarationStatement[8704-8745]"
  }, {
    "left" : "Date dt;",
    "right" : "Date dt;",
    "info" : "VariableDeclarationStatement[8532-8540]:VariableDeclarationStatement[8755-8763]"
  }, {
    "left" : "if (looksLikeISO8601(dateStr))",
    "right" : "if (looksLikeISO8601(dateStr))",
    "info" : "IfStatement[8550-9585]:IfStatement[8773-9808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8581-8670]:Block[8804-8893]"
  }, {
    "left" : "dt = parseAsISO8601(dateStr, pos, true);",
    "right" : "dt = parseAsISO8601(dateStr, pos, true);",
    "info" : "ExpressionStatement[8620-8660]:ExpressionStatement[8843-8883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8676-9585]:Block[8899-9808]"
  }, {
    "left" : "int i = dateStr.length();",
    "right" : "int i = dateStr.length();",
    "info" : "VariableDeclarationStatement[8751-8776]:VariableDeclarationStatement[8974-8999]"
  }, {
    "left" : "while (--i >= 0)",
    "right" : "while (--i >= 0)",
    "info" : "WhileStatement[8789-9138]:WhileStatement[9012-9361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8806-9138]:Block[9029-9361]"
  }, {
    "left" : "char ch = dateStr.charAt(i);",
    "right" : "char ch = dateStr.charAt(i);",
    "info" : "VariableDeclarationStatement[8824-8852]:VariableDeclarationStatement[9047-9075]"
  }, {
    "left" : "if (ch < '0' || ch > '9')",
    "right" : "if (ch < '0' || ch > '9')",
    "info" : "IfStatement[8869-9124]:IfStatement[9092-9347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8895-9124]:Block[9118-9347]"
  }, {
    "left" : "if (i > 0 || ch != '-')",
    "right" : "if (i > 0 || ch != '-')",
    "info" : "IfStatement[9028-9106]:IfStatement[9251-9329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9052-9106]:Block[9275-9329]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9078-9084]:BreakStatement[9301-9307]"
  }, {
    "left" : "if ((i < 0)\n                // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                    && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
    "right" : "if ((i < 0)\n                // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                    && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
    "info" : "IfStatement[9151-9575]:IfStatement[9374-9798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9374-9445]:Block[9597-9668]"
  }, {
    "left" : "dt = new Date(Long.parseLong(dateStr));",
    "right" : "dt = new Date(Long.parseLong(dateStr));",
    "info" : "ExpressionStatement[9392-9431]:ExpressionStatement[9615-9654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9451-9575]:Block[9674-9798]"
  }, {
    "left" : "dt = parseAsRFC1123(dateStr, pos);",
    "right" : "dt = parseAsRFC1123(dateStr, pos);",
    "info" : "ExpressionStatement[9527-9561]:ExpressionStatement[9750-9784]"
  }, {
    "left" : "if (dt != null)",
    "right" : "if (dt != null)",
    "info" : "IfStatement[9594-9644]:IfStatement[9817-9867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9610-9644]:Block[9833-9867]"
  }, {
    "left" : "return dt;",
    "right" : "return dt;",
    "info" : "ReturnStatement[9624-9634]:ReturnStatement[9847-9857]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[9654-9693]:VariableDeclarationStatement[9877-9916]"
  }, {
    "left" : "for (String f : ALL_FORMATS)",
    "right" : "for (String f : ALL_FORMATS)",
    "info" : "EnhancedForStatement[9702-9907]:EnhancedForStatement[9925-10130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9731-9907]:Block[9954-10130]"
  }, {
    "left" : "if (sb.length() > 0)",
    "right" : "if (sb.length() > 0)",
    "info" : "IfStatement[9745-9871]:IfStatement[9968-10094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9766-9818]:Block[9989-10041]"
  }, {
    "left" : "sb.append(\"\\\", \\\"\");",
    "right" : "sb.append(\"\\\", \\\"\");",
    "info" : "ExpressionStatement[9784-9804]:ExpressionStatement[10007-10027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9824-9871]:Block[10047-10094]"
  }, {
    "left" : "sb.append('\"');",
    "right" : "sb.append('\"');",
    "info" : "ExpressionStatement[9842-9857]:ExpressionStatement[10065-10080]"
  }, {
    "left" : "sb.append(f);",
    "right" : "sb.append(f);",
    "info" : "ExpressionStatement[9884-9897]:ExpressionStatement[10107-10120]"
  }, {
    "left" : "sb.append('\"');",
    "right" : "sb.append('\"');",
    "info" : "ExpressionStatement[9916-9931]:ExpressionStatement[10139-10154]"
  }, {
    "left" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
    "right" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
    "info" : "ThrowStatement[9940-10142]:ThrowStatement[10163-10365]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10154-10163]:MarkerAnnotation[10377-10386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10168-10174]:Modifier[10391-10397]"
  }, {
    "left" : "Date",
    "right" : "Date",
    "info" : "SimpleType[10175-10179]:SimpleType[10398-10402]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[10180-10185]:SimpleName[10403-10408]"
  }, {
    "left" : "String dateStr",
    "right" : "String dateStr",
    "info" : "SingleVariableDeclaration[10186-10200]:SingleVariableDeclaration[10409-10423]"
  }, {
    "left" : "ParsePosition pos",
    "right" : "ParsePosition pos",
    "info" : "SingleVariableDeclaration[10202-10219]:SingleVariableDeclaration[10425-10442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10225-11353]:Block[10448-11576]"
  }, {
    "left" : "if (looksLikeISO8601(dateStr))",
    "right" : "if (looksLikeISO8601(dateStr))",
    "info" : "IfStatement[10235-10518]:IfStatement[10458-10741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10266-10518]:Block[10489-10741]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10305-10508]:TryStatement[10528-10731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10309-10384]:Block[10532-10607]"
  }, {
    "left" : "return parseAsISO8601(dateStr, pos, false);",
    "right" : "return parseAsISO8601(dateStr, pos, false);",
    "info" : "ReturnStatement[10327-10370]:ReturnStatement[10550-10593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10410-10508]:Block[10633-10731]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10482-10494]:ReturnStatement[10705-10717]"
  }, {
    "left" : "int i = dateStr.length();",
    "right" : "int i = dateStr.length();",
    "info" : "VariableDeclarationStatement[10584-10609]:VariableDeclarationStatement[10807-10832]"
  }, {
    "left" : "while (--i >= 0)",
    "right" : "while (--i >= 0)",
    "info" : "WhileStatement[10618-10935]:WhileStatement[10841-11158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10635-10935]:Block[10858-11158]"
  }, {
    "left" : "char ch = dateStr.charAt(i);",
    "right" : "char ch = dateStr.charAt(i);",
    "info" : "VariableDeclarationStatement[10649-10677]:VariableDeclarationStatement[10872-10900]"
  }, {
    "left" : "if (ch < '0' || ch > '9')",
    "right" : "if (ch < '0' || ch > '9')",
    "info" : "IfStatement[10690-10925]:IfStatement[10913-11148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10716-10925]:Block[10939-11148]"
  }, {
    "left" : "if (i > 0 || ch != '-')",
    "right" : "if (i > 0 || ch != '-')",
    "info" : "IfStatement[10841-10911]:IfStatement[11064-11134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10865-10911]:Block[11088-11134]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10887-10893]:BreakStatement[11110-11116]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[10944-11252]:IfStatement[11167-11475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10955-11252]:Block[11178-11475]"
  }, {
    "left" : "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))",
    "right" : "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))",
    "info" : "IfStatement[11096-11242]:IfStatement[11319-11465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11169-11242]:Block[11392-11465]"
  }, {
    "left" : "return new Date(Long.parseLong(dateStr));",
    "right" : "return new Date(Long.parseLong(dateStr));",
    "info" : "ReturnStatement[11187-11228]:ReturnStatement[11410-11451]"
  }, {
    "left" : "return parseAsRFC1123(dateStr, pos);",
    "right" : "return parseAsRFC1123(dateStr, pos);",
    "info" : "ReturnStatement[11311-11347]:ReturnStatement[11534-11570]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11534-11543]:MarkerAnnotation[11757-11766]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11548-11554]:Modifier[11771-11777]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[11555-11567]:SimpleType[11778-11790]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[11568-11574]:SimpleName[11791-11797]"
  }, {
    "left" : "Date date",
    "right" : "Date date",
    "info" : "SingleVariableDeclaration[11575-11584]:SingleVariableDeclaration[11798-11807]"
  }, {
    "left" : "StringBuffer toAppendTo",
    "right" : "StringBuffer toAppendTo",
    "info" : "SingleVariableDeclaration[11586-11609]:SingleVariableDeclaration[11809-11832]"
  }, {
    "left" : "FieldPosition fieldPosition",
    "right" : "FieldPosition fieldPosition",
    "info" : "SingleVariableDeclaration[11623-11650]:SingleVariableDeclaration[11846-11873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11656-11921]:Block[11879-12144]"
  }, {
    "left" : "if (_formatISO8601 == null)",
    "right" : "if (_formatISO8601 == null)",
    "info" : "IfStatement[11666-11844]:IfStatement[11889-12067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11694-11844]:Block[11917-12067]"
  }, {
    "left" : "_formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale, _lenient);",
    "right" : "_formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[11708-11834]:ExpressionStatement[11931-12057]"
  }, {
    "left" : "return _formatISO8601.format(date, toAppendTo, fieldPosition);",
    "right" : "return _formatISO8601.format(date, toAppendTo, fieldPosition);",
    "info" : "ReturnStatement[11853-11915]:ReturnStatement[12076-12138]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12096-12105]:MarkerAnnotation[12319-12328]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12110-12116]:Modifier[12333-12339]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[12117-12123]:SimpleType[12340-12346]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[12124-12132]:SimpleName[12347-12355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12135-12370]:Block[12358-12593]"
  }, {
    "left" : "String str = \"DateFormat \"+getClass().getName();",
    "right" : "String str = \"DateFormat \"+getClass().getName();",
    "info" : "VariableDeclarationStatement[12145-12193]:VariableDeclarationStatement[12368-12416]"
  }, {
    "left" : "TimeZone tz = _timezone;",
    "right" : "TimeZone tz = _timezone;",
    "info" : "VariableDeclarationStatement[12202-12226]:VariableDeclarationStatement[12425-12449]"
  }, {
    "left" : "if (tz != null)",
    "right" : "if (tz != null)",
    "info" : "IfStatement[12235-12304]:IfStatement[12458-12527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12251-12304]:Block[12474-12527]"
  }, {
    "left" : "str += \" (timezone: \"+tz+\")\";",
    "right" : "str += \" (timezone: \"+tz+\")\";",
    "info" : "ExpressionStatement[12265-12294]:ExpressionStatement[12488-12517]"
  }, {
    "left" : "str += \"(locale: \"+_locale+\")\";",
    "right" : "str += \"(locale: \"+_locale+\")\";",
    "info" : "ExpressionStatement[12313-12344]:ExpressionStatement[12536-12567]"
  }, {
    "left" : "return str;",
    "right" : "return str;",
    "info" : "ReturnStatement[12353-12364]:ReturnStatement[12576-12587]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[12672-12681]:Modifier[12895-12904]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12682-12689]:PrimitiveType[12905-12912]"
  }, {
    "left" : "looksLikeISO8601",
    "right" : "looksLikeISO8601",
    "info" : "SimpleName[12690-12706]:SimpleName[12913-12929]"
  }, {
    "left" : "String dateStr",
    "right" : "String dateStr",
    "info" : "SingleVariableDeclaration[12707-12721]:SingleVariableDeclaration[12930-12944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12727-12985]:Block[12950-13208]"
  }, {
    "left" : "if (dateStr.length() >= 5\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-')",
    "right" : "if (dateStr.length() >= 5\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-')",
    "info" : "IfStatement[12737-12957]:IfStatement[12960-13180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12921-12957]:Block[13144-13180]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12935-12947]:ReturnStatement[13158-13170]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12966-12979]:ReturnStatement[13189-13202]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[12991-13000]:Modifier[13214-13223]"
  }, {
    "left" : "Date",
    "right" : "Date",
    "info" : "SimpleType[13001-13005]:SimpleType[13224-13228]"
  }, {
    "left" : "parseAsISO8601",
    "right" : "parseAsISO8601",
    "info" : "SimpleName[13006-13020]:SimpleName[13229-13243]"
  }, {
    "left" : "String dateStr",
    "right" : "String dateStr",
    "info" : "SingleVariableDeclaration[13021-13035]:SingleVariableDeclaration[13244-13258]"
  }, {
    "left" : "ParsePosition pos",
    "right" : "ParsePosition pos",
    "info" : "SingleVariableDeclaration[13037-13054]:SingleVariableDeclaration[13260-13277]"
  }, {
    "left" : "boolean throwErrors",
    "right" : "boolean throwErrors",
    "info" : "SingleVariableDeclaration[13056-13075]:SingleVariableDeclaration[13279-13298]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[13096-13110]:SimpleType[13319-13333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13115-18211]:Block[13338-18434]"
  }, {
    "left" : "int len = dateStr.length();",
    "right" : "int len = dateStr.length();",
    "info" : "VariableDeclarationStatement[13505-13532]:VariableDeclarationStatement[13728-13755]"
  }, {
    "left" : "char c = dateStr.charAt(len-1);",
    "right" : "char c = dateStr.charAt(len-1);",
    "info" : "VariableDeclarationStatement[13541-13572]:VariableDeclarationStatement[13764-13795]"
  }, {
    "left" : "DateFormat df;",
    "right" : "DateFormat df;",
    "info" : "VariableDeclarationStatement[13581-13595]:VariableDeclarationStatement[13804-13818]"
  }, {
    "left" : "String formatStr;",
    "right" : "String formatStr;",
    "info" : "VariableDeclarationStatement[13604-13621]:VariableDeclarationStatement[13827-13844]"
  }, {
    "left" : "if (len <= 10 && Character.isDigit(c))",
    "right" : "if (len <= 10 && Character.isDigit(c))",
    "info" : "IfStatement[13674-17794]:IfStatement[13897-18017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13713-13980]:Block[13936-14203]"
  }, {
    "left" : "df = _formatPlain;",
    "right" : "df = _formatPlain;",
    "info" : "ExpressionStatement[13727-13745]:ExpressionStatement[13950-13968]"
  }, {
    "left" : "formatStr = DATE_FORMAT_STR_PLAIN;",
    "right" : "formatStr = DATE_FORMAT_STR_PLAIN;",
    "info" : "ExpressionStatement[13758-13792]:ExpressionStatement[13981-14015]"
  }, {
    "left" : "if (df == null)",
    "right" : "if (df == null)",
    "info" : "IfStatement[13805-13970]:IfStatement[14028-14193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13821-13970]:Block[14044-14193]"
  }, {
    "left" : "df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr,\n                        _timezone, _locale, _lenient);",
    "right" : "df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr,\n                        _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[13839-13956]:ExpressionStatement[14062-14179]"
  }, {
    "left" : "if (c == 'Z')",
    "right" : "if (c == 'Z')",
    "info" : "IfStatement[13986-17794]:IfStatement[14209-18017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14000-14548]:Block[14223-14771]"
  }, {
    "left" : "df = _formatISO8601_z;",
    "right" : "df = _formatISO8601_z;",
    "info" : "ExpressionStatement[14014-14036]:ExpressionStatement[14237-14259]"
  }, {
    "left" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
    "right" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
    "info" : "ExpressionStatement[14049-14087]:ExpressionStatement[14272-14310]"
  }, {
    "left" : "if (df == null)",
    "right" : "if (df == null)",
    "info" : "IfStatement[14100-14273]:IfStatement[14323-14496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14116-14273]:Block[14339-14496]"
  }, {
    "left" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                        _timezone, _locale, _lenient);",
    "right" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                        _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[14134-14259]:ExpressionStatement[14357-14482]"
  }, {
    "left" : "if (dateStr.charAt(len-4) == ':')",
    "right" : "if (dateStr.charAt(len-4) == ':')",
    "info" : "IfStatement[14343-14538]:IfStatement[14566-14761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14377-14538]:Block[14600-14761]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(dateStr);",
    "right" : "StringBuilder sb = new StringBuilder(dateStr);",
    "info" : "VariableDeclarationStatement[14395-14441]:VariableDeclarationStatement[14618-14664]"
  }, {
    "left" : "sb.insert(len-1, \".000\");",
    "right" : "sb.insert(len-1, \".000\");",
    "info" : "ExpressionStatement[14458-14483]:ExpressionStatement[14681-14706]"
  }, {
    "left" : "dateStr = sb.toString();",
    "right" : "dateStr = sb.toString();",
    "info" : "ExpressionStatement[14500-14524]:ExpressionStatement[14723-14747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14554-17794]:Block[14777-18017]"
  }, {
    "left" : "if (hasTimeZone(dateStr))",
    "right" : "if (hasTimeZone(dateStr))",
    "info" : "IfStatement[14633-17784]:IfStatement[14856-18007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14659-16748]:Block[14882-16971]"
  }, {
    "left" : "c = dateStr.charAt(len-3);",
    "right" : "c = dateStr.charAt(len-3);",
    "info" : "ExpressionStatement[14677-14703]:ExpressionStatement[14900-14926]"
  }, {
    "left" : "if (c == ':')",
    "right" : "if (c == ':')",
    "info" : "IfStatement[14720-15124]:IfStatement[14943-15347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14734-14971]:Block[14957-15194]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(dateStr);",
    "right" : "StringBuilder sb = new StringBuilder(dateStr);",
    "info" : "VariableDeclarationStatement[14817-14863]:VariableDeclarationStatement[15040-15086]"
  }, {
    "left" : "sb.delete(len-3, len-2);",
    "right" : "sb.delete(len-3, len-2);",
    "info" : "ExpressionStatement[14884-14908]:ExpressionStatement[15107-15131]"
  }, {
    "left" : "dateStr = sb.toString();",
    "right" : "dateStr = sb.toString();",
    "info" : "ExpressionStatement[14929-14953]:ExpressionStatement[15152-15176]"
  }, {
    "left" : "if (c == '+' || c == '-')",
    "right" : "if (c == '+' || c == '-')",
    "info" : "IfStatement[14977-15124]:IfStatement[15200-15347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15003-15124]:Block[15226-15347]"
  }, {
    "left" : "dateStr += \"00\";",
    "right" : "dateStr += \"00\";",
    "info" : "ExpressionStatement[15090-15106]:ExpressionStatement[15313-15329]"
  }, {
    "left" : "len = dateStr.length();",
    "right" : "len = dateStr.length();",
    "info" : "ExpressionStatement[15223-15246]:ExpressionStatement[15446-15469]"
  }, {
    "left" : "int timeLen = len - dateStr.lastIndexOf('T') - 6;",
    "right" : "int timeLen = len - dateStr.lastIndexOf('T') - 6;",
    "info" : "VariableDeclarationStatement[15330-15379]:VariableDeclarationStatement[15553-15602]"
  }, {
    "left" : "if (timeLen < 12)",
    "right" : "if (timeLen < 12)",
    "info" : "IfStatement[15396-16434]:IfStatement[15619-16657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15414-16434]:Block[15637-16657]"
  }, {
    "left" : "int offset = len - 5;",
    "right" : "int offset = len - 5;",
    "info" : "VariableDeclarationStatement[15466-15487]:VariableDeclarationStatement[15689-15710]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(dateStr);",
    "right" : "StringBuilder sb = new StringBuilder(dateStr);",
    "info" : "VariableDeclarationStatement[15546-15592]:VariableDeclarationStatement[15769-15815]"
  }, {
    "left" : "switch (timeLen) {\n                    case 11:\n                        sb.insert(offset, '0'); break;\n                    case 10:\n                        sb.insert(offset, \"00\"); break;\n                    case 9: // is this legal? (just second fraction marker)\n                        sb.insert(offset, \"000\"); break;\n                    case 8:\n                        sb.insert(offset, \".000\"); break;\n                    case 7: // not legal to have single-digit second\n                        break;\n                    case 6: // probably not legal, but let's allow\n                        sb.insert(offset, \"00.000\");\n                    case 5: // is legal to omit seconds\n                        sb.insert(offset, \":00.000\");\n                    }",
    "right" : "switch (timeLen) {\n                    case 11:\n                        sb.insert(offset, '0'); break;\n                    case 10:\n                        sb.insert(offset, \"00\"); break;\n                    case 9: // is this legal? (just second fraction marker)\n                        sb.insert(offset, \"000\"); break;\n                    case 8:\n                        sb.insert(offset, \".000\"); break;\n                    case 7: // not legal to have single-digit second\n                        break;\n                    case 6: // probably not legal, but let's allow\n                        sb.insert(offset, \"00.000\");\n                    case 5: // is legal to omit seconds\n                        sb.insert(offset, \":00.000\");\n                    }",
    "info" : "SwitchStatement[15613-16371]:SwitchStatement[15836-16594]"
  }, {
    "left" : "case 11:",
    "right" : "case 11:",
    "info" : "SwitchCase[15652-15660]:SwitchCase[15875-15883]"
  }, {
    "left" : "sb.insert(offset, '0');",
    "right" : "sb.insert(offset, '0');",
    "info" : "ExpressionStatement[15685-15708]:ExpressionStatement[15908-15931]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15709-15715]:BreakStatement[15932-15938]"
  }, {
    "left" : "case 10:",
    "right" : "case 10:",
    "info" : "SwitchCase[15736-15744]:SwitchCase[15959-15967]"
  }, {
    "left" : "sb.insert(offset, \"00\");",
    "right" : "sb.insert(offset, \"00\");",
    "info" : "ExpressionStatement[15769-15793]:ExpressionStatement[15992-16016]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15794-15800]:BreakStatement[16017-16023]"
  }, {
    "left" : "case 9:",
    "right" : "case 9:",
    "info" : "SwitchCase[15821-15828]:SwitchCase[16044-16051]"
  }, {
    "left" : "sb.insert(offset, \"000\");",
    "right" : "sb.insert(offset, \"000\");",
    "info" : "ExpressionStatement[15901-15926]:ExpressionStatement[16124-16149]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15927-15933]:BreakStatement[16150-16156]"
  }, {
    "left" : "case 8:",
    "right" : "case 8:",
    "info" : "SwitchCase[15954-15961]:SwitchCase[16177-16184]"
  }, {
    "left" : "sb.insert(offset, \".000\");",
    "right" : "sb.insert(offset, \".000\");",
    "info" : "ExpressionStatement[15986-16012]:ExpressionStatement[16209-16235]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16013-16019]:BreakStatement[16236-16242]"
  }, {
    "left" : "case 7:",
    "right" : "case 7:",
    "info" : "SwitchCase[16040-16047]:SwitchCase[16263-16270]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16113-16119]:BreakStatement[16336-16342]"
  }, {
    "left" : "case 6:",
    "right" : "case 6:",
    "info" : "SwitchCase[16140-16147]:SwitchCase[16363-16370]"
  }, {
    "left" : "sb.insert(offset, \"00.000\");",
    "right" : "sb.insert(offset, \"00.000\");",
    "info" : "ExpressionStatement[16211-16239]:ExpressionStatement[16434-16462]"
  }, {
    "left" : "case 5:",
    "right" : "case 5:",
    "info" : "SwitchCase[16260-16267]:SwitchCase[16483-16490]"
  }, {
    "left" : "sb.insert(offset, \":00.000\");",
    "right" : "sb.insert(offset, \":00.000\");",
    "info" : "ExpressionStatement[16320-16349]:ExpressionStatement[16543-16572]"
  }, {
    "left" : "dateStr = sb.toString();",
    "right" : "dateStr = sb.toString();",
    "info" : "ExpressionStatement[16392-16416]:ExpressionStatement[16615-16639]"
  }, {
    "left" : "df = _formatISO8601;",
    "right" : "df = _formatISO8601;",
    "info" : "ExpressionStatement[16451-16471]:ExpressionStatement[16674-16694]"
  }, {
    "left" : "formatStr = DATE_FORMAT_STR_ISO8601;",
    "right" : "formatStr = DATE_FORMAT_STR_ISO8601;",
    "info" : "ExpressionStatement[16488-16524]:ExpressionStatement[16711-16747]"
  }, {
    "left" : "if (_formatISO8601 == null)",
    "right" : "if (_formatISO8601 == null)",
    "info" : "IfStatement[16541-16734]:IfStatement[16764-16957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16569-16734]:Block[16792-16957]"
  }, {
    "left" : "df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,\n                            _timezone, _locale, _lenient);",
    "right" : "df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,\n                            _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[16591-16716]:ExpressionStatement[16814-16939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16754-17784]:Block[16977-18007]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(dateStr);",
    "right" : "StringBuilder sb = new StringBuilder(dateStr);",
    "info" : "VariableDeclarationStatement[16849-16895]:VariableDeclarationStatement[17072-17118]"
  }, {
    "left" : "int timeLen = len - dateStr.lastIndexOf('T') - 1;",
    "right" : "int timeLen = len - dateStr.lastIndexOf('T') - 1;",
    "info" : "VariableDeclarationStatement[16977-17026]:VariableDeclarationStatement[17200-17249]"
  }, {
    "left" : "if (timeLen < 12)",
    "right" : "if (timeLen < 12)",
    "info" : "IfStatement[17043-17401]:IfStatement[17266-17624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17061-17401]:Block[17284-17624]"
  }, {
    "left" : "switch (timeLen) {\n                    case 11: sb.append('0');\n                    case 10: sb.append('0');\n                    case 9: sb.append('0');\n                        break;\n                    default:\n                        sb.append(\".000\");\n                    }",
    "right" : "switch (timeLen) {\n                    case 11: sb.append('0');\n                    case 10: sb.append('0');\n                    case 9: sb.append('0');\n                        break;\n                    default:\n                        sb.append(\".000\");\n                    }",
    "info" : "SwitchStatement[17106-17383]:SwitchStatement[17329-17606]"
  }, {
    "left" : "case 11:",
    "right" : "case 11:",
    "info" : "SwitchCase[17145-17153]:SwitchCase[17368-17376]"
  }, {
    "left" : "sb.append('0');",
    "right" : "sb.append('0');",
    "info" : "ExpressionStatement[17154-17169]:ExpressionStatement[17377-17392]"
  }, {
    "left" : "case 10:",
    "right" : "case 10:",
    "info" : "SwitchCase[17190-17198]:SwitchCase[17413-17421]"
  }, {
    "left" : "sb.append('0');",
    "right" : "sb.append('0');",
    "info" : "ExpressionStatement[17199-17214]:ExpressionStatement[17422-17437]"
  }, {
    "left" : "case 9:",
    "right" : "case 9:",
    "info" : "SwitchCase[17235-17242]:SwitchCase[17458-17465]"
  }, {
    "left" : "sb.append('0');",
    "right" : "sb.append('0');",
    "info" : "ExpressionStatement[17243-17258]:ExpressionStatement[17466-17481]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17283-17289]:BreakStatement[17506-17512]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[17310-17318]:SwitchCase[17533-17541]"
  }, {
    "left" : "sb.append(\".000\");",
    "right" : "sb.append(\".000\");",
    "info" : "ExpressionStatement[17343-17361]:ExpressionStatement[17566-17584]"
  }, {
    "left" : "sb.append('Z');",
    "right" : "sb.append('Z');",
    "info" : "ExpressionStatement[17418-17433]:ExpressionStatement[17641-17656]"
  }, {
    "left" : "dateStr = sb.toString();",
    "right" : "dateStr = sb.toString();",
    "info" : "ExpressionStatement[17450-17474]:ExpressionStatement[17673-17697]"
  }, {
    "left" : "df = _formatISO8601_z;",
    "right" : "df = _formatISO8601_z;",
    "info" : "ExpressionStatement[17491-17513]:ExpressionStatement[17714-17736]"
  }, {
    "left" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
    "right" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
    "info" : "ExpressionStatement[17530-17568]:ExpressionStatement[17753-17791]"
  }, {
    "left" : "if (df == null)",
    "right" : "if (df == null)",
    "info" : "IfStatement[17585-17770]:IfStatement[17808-17993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17601-17770]:Block[17824-17993]"
  }, {
    "left" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                            _timezone, _locale, _lenient);",
    "right" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                            _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[17623-17752]:ExpressionStatement[17846-17975]"
  }, {
    "left" : "Date dt = df.parse(dateStr, pos);",
    "right" : "Date dt = df.parse(dateStr, pos);",
    "info" : "VariableDeclarationStatement[17803-17836]:VariableDeclarationStatement[18026-18059]"
  }, {
    "left" : "if (dt == null)",
    "right" : "if (dt == null)",
    "info" : "IfStatement[17906-18186]:IfStatement[18129-18409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17922-18186]:Block[18145-18409]"
  }, {
    "left" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                           dateStr, formatStr, _lenient),\n               pos.getErrorIndex());",
    "right" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                           dateStr, formatStr, _lenient),\n               pos.getErrorIndex());",
    "info" : "ThrowStatement[17936-18176]:ThrowStatement[18159-18399]"
  }, {
    "left" : "return dt;",
    "right" : "return dt;",
    "info" : "ReturnStatement[18195-18205]:ReturnStatement[18418-18428]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[18217-18226]:Modifier[18440-18449]"
  }, {
    "left" : "Date",
    "right" : "Date",
    "info" : "SimpleType[18227-18231]:SimpleType[18450-18454]"
  }, {
    "left" : "parseAsRFC1123",
    "right" : "parseAsRFC1123",
    "info" : "SimpleName[18232-18246]:SimpleName[18455-18469]"
  }, {
    "left" : "String dateStr",
    "right" : "String dateStr",
    "info" : "SingleVariableDeclaration[18247-18261]:SingleVariableDeclaration[18470-18484]"
  }, {
    "left" : "ParsePosition pos",
    "right" : "ParsePosition pos",
    "info" : "SingleVariableDeclaration[18263-18280]:SingleVariableDeclaration[18486-18503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18286-18531]:Block[18509-18754]"
  }, {
    "left" : "if (_formatRFC1123 == null)",
    "right" : "if (_formatRFC1123 == null)",
    "info" : "IfStatement[18296-18474]:IfStatement[18519-18697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18324-18474]:Block[18547-18697]"
  }, {
    "left" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
    "right" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
    "info" : "ExpressionStatement[18338-18464]:ExpressionStatement[18561-18687]"
  }, {
    "left" : "return _formatRFC1123.parse(dateStr, pos);",
    "right" : "return _formatRFC1123.parse(dateStr, pos);",
    "info" : "ReturnStatement[18483-18525]:ReturnStatement[18706-18748]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18537-18544]:Modifier[18760-18767]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[18545-18550]:Modifier[18768-18773]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18551-18557]:Modifier[18774-18780]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18558-18565]:PrimitiveType[18781-18788]"
  }, {
    "left" : "hasTimeZone",
    "right" : "hasTimeZone",
    "info" : "SimpleName[18566-18577]:SimpleName[18789-18800]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[18578-18588]:SingleVariableDeclaration[18801-18811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18594-19024]:Block[18817-19247]"
  }, {
    "left" : "int len = str.length();",
    "right" : "int len = str.length();",
    "info" : "VariableDeclarationStatement[18676-18699]:VariableDeclarationStatement[18899-18922]"
  }, {
    "left" : "if (len >= 6)",
    "right" : "if (len >= 6)",
    "info" : "IfStatement[18708-18996]:IfStatement[18931-19219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18722-18996]:Block[18945-19219]"
  }, {
    "left" : "char c = str.charAt(len-6);",
    "right" : "char c = str.charAt(len-6);",
    "info" : "VariableDeclarationStatement[18736-18763]:VariableDeclarationStatement[18959-18986]"
  }, {
    "left" : "if (c == '+' || c == '-')",
    "right" : "if (c == '+' || c == '-')",
    "info" : "IfStatement[18776-18814]:IfStatement[18999-19037]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18802-18814]:ReturnStatement[19025-19037]"
  }, {
    "left" : "c = str.charAt(len-5);",
    "right" : "c = str.charAt(len-5);",
    "info" : "ExpressionStatement[18827-18849]:ExpressionStatement[19050-19072]"
  }, {
    "left" : "if (c == '+' || c == '-')",
    "right" : "if (c == '+' || c == '-')",
    "info" : "IfStatement[18862-18900]:IfStatement[19085-19123]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18888-18900]:ReturnStatement[19111-19123]"
  }, {
    "left" : "c = str.charAt(len-3);",
    "right" : "c = str.charAt(len-3);",
    "info" : "ExpressionStatement[18913-18935]:ExpressionStatement[19136-19158]"
  }, {
    "left" : "if (c == '+' || c == '-')",
    "right" : "if (c == '+' || c == '-')",
    "info" : "IfStatement[18948-18986]:IfStatement[19171-19209]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18974-18986]:ReturnStatement[19197-19209]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19005-19018]:ReturnStatement[19228-19241]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19030-19037]:Modifier[19253-19260]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[19038-19043]:Modifier[19261-19266]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19044-19050]:Modifier[19267-19273]"
  }, {
    "left" : "DateFormat",
    "right" : "DateFormat",
    "info" : "SimpleType[19051-19061]:SimpleType[19274-19284]"
  }, {
    "left" : "_cloneFormat",
    "right" : "_cloneFormat",
    "info" : "SimpleName[19062-19074]:SimpleName[19285-19297]"
  }, {
    "left" : "DateFormat df",
    "right" : "DateFormat df",
    "info" : "SingleVariableDeclaration[19075-19088]:SingleVariableDeclaration[19298-19311]"
  }, {
    "left" : "String format",
    "right" : "String format",
    "info" : "SingleVariableDeclaration[19090-19103]:SingleVariableDeclaration[19313-19326]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[19117-19128]:SingleVariableDeclaration[19340-19351]"
  }, {
    "left" : "Locale loc",
    "right" : "Locale loc",
    "info" : "SingleVariableDeclaration[19130-19140]:SingleVariableDeclaration[19353-19363]"
  }, {
    "left" : "Boolean lenient",
    "right" : "Boolean lenient",
    "info" : "SingleVariableDeclaration[19142-19157]:SingleVariableDeclaration[19365-19380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19163-19499]:Block[19386-19814]"
  }, {
    "left" : "if (!loc.equals(DEFAULT_LOCALE))",
    "right" : "if (!loc.equals(DEFAULT_LOCALE))",
    "info" : "IfStatement[19173-19474]:IfStatement[19396-19697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19206-19335]:Block[19429-19558]"
  }, {
    "left" : "df = new SimpleDateFormat(format, loc);",
    "right" : "df = new SimpleDateFormat(format, loc);",
    "info" : "ExpressionStatement[19220-19259]:ExpressionStatement[19443-19482]"
  }, {
    "left" : "df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz);",
    "right" : "df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz);",
    "info" : "ExpressionStatement[19272-19325]:ExpressionStatement[19495-19548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19341-19474]:Block[19564-19697]"
  }, {
    "left" : "df = (DateFormat) df.clone();",
    "right" : "df = (DateFormat) df.clone();",
    "info" : "ExpressionStatement[19355-19384]:ExpressionStatement[19578-19607]"
  }, {
    "left" : "if (tz != null)",
    "right" : "if (tz != null)",
    "info" : "IfStatement[19397-19464]:IfStatement[19620-19687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19413-19464]:Block[19636-19687]"
  }, {
    "left" : "df.setTimeZone(tz);",
    "right" : "df.setTimeZone(tz);",
    "info" : "ExpressionStatement[19431-19450]:ExpressionStatement[19654-19673]"
  }, {
    "left" : "return df;",
    "right" : "return df;",
    "info" : "ReturnStatement[19483-19493]:ReturnStatement[19798-19808]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[19505-19514]:Modifier[19820-19829]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19515-19519]:PrimitiveType[19830-19834]"
  }, {
    "left" : "_clearFormats",
    "right" : "_clearFormats",
    "info" : "SimpleName[19520-19533]:SimpleName[19835-19848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19536-19667]:Block[19851-19982]"
  }, {
    "left" : "_formatRFC1123 = null;",
    "right" : "_formatRFC1123 = null;",
    "info" : "ExpressionStatement[19546-19568]:ExpressionStatement[19861-19883]"
  }, {
    "left" : "_formatISO8601 = null;",
    "right" : "_formatISO8601 = null;",
    "info" : "ExpressionStatement[19577-19599]:ExpressionStatement[19892-19914]"
  }, {
    "left" : "_formatISO8601_z = null;",
    "right" : "_formatISO8601_z = null;",
    "info" : "ExpressionStatement[19608-19632]:ExpressionStatement[19923-19947]"
  }, {
    "left" : "_formatPlain = null;",
    "right" : "_formatPlain = null;",
    "info" : "ExpressionStatement[19641-19661]:ExpressionStatement[19956-19976]"
  } ]
}