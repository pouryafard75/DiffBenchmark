{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);",
      "right" : "private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);",
      "info" : "FieldDeclaration[3411-3542]:FieldDeclaration[3411-3542]"
    }, {
      "left" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "right" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "info" : "FieldDeclaration[3548-3710]:FieldDeclaration[3548-3710]"
    }, {
      "left" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "right" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "info" : "FieldDeclaration[3716-3858]:FieldDeclaration[3716-3858]"
    }, {
      "left" : "static final int EXP_INT_TABLE_MAX_INDEX = 750;",
      "right" : "static final int EXP_INT_TABLE_MAX_INDEX = 750;",
      "info" : "FieldDeclaration[3864-3976]:FieldDeclaration[3864-3976]"
    }, {
      "left" : "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
      "right" : "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
      "info" : "FieldDeclaration[3981-4102]:FieldDeclaration[3981-4102]"
    }, {
      "left" : "static final int LN_MANT_LEN = 1024;",
      "right" : "static final int LN_MANT_LEN = 1024;",
      "info" : "FieldDeclaration[4107-4178]:FieldDeclaration[4107-4178]"
    }, {
      "left" : "static final int EXP_FRAC_TABLE_LEN = 1025;",
      "right" : "static final int EXP_FRAC_TABLE_LEN = 1025;",
      "info" : "FieldDeclaration[4183-4273]:FieldDeclaration[4183-4273]"
    }, {
      "left" : "private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
      "right" : "private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
      "info" : "FieldDeclaration[4307-4668]:FieldDeclaration[4307-4668]"
    }, {
      "left" : "private static final double LN_2_A = 0.693147063255310059;",
      "right" : "private static final double LN_2_A = 0.693147063255310059;",
      "info" : "FieldDeclaration[4674-4763]:FieldDeclaration[4674-4763]"
    }, {
      "left" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "right" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "info" : "FieldDeclaration[4769-4859]:FieldDeclaration[4769-4859]"
    }, {
      "left" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "right" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "info" : "FieldDeclaration[4865-5402]:FieldDeclaration[4865-5402]"
    }, {
      "left" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "right" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "info" : "FieldDeclaration[5408-5817]:FieldDeclaration[5408-5817]"
    }, {
      "left" : "private static final int SINE_TABLE_LEN = 14;",
      "right" : "private static final int SINE_TABLE_LEN = 14;",
      "info" : "FieldDeclaration[5823-5953]:FieldDeclaration[5823-5953]"
    }, {
      "left" : "private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
      "right" : "private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
      "info" : "FieldDeclaration[5959-6459]:FieldDeclaration[5959-6459]"
    }, {
      "left" : "private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
      "right" : "private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
      "info" : "FieldDeclaration[6465-6993]:FieldDeclaration[6465-6993]"
    }, {
      "left" : "private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
      "right" : "private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
      "info" : "FieldDeclaration[6999-7507]:FieldDeclaration[6999-7507]"
    }, {
      "left" : "private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
      "right" : "private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
      "info" : "FieldDeclaration[7513-8050]:FieldDeclaration[7513-8050]"
    }, {
      "left" : "private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
      "right" : "private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
      "info" : "FieldDeclaration[8057-8579]:FieldDeclaration[8057-8579]"
    }, {
      "left" : "private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
      "right" : "private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
      "info" : "FieldDeclaration[8585-9140]:FieldDeclaration[8585-9140]"
    }, {
      "left" : "private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "right" : "private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "info" : "FieldDeclaration[9146-10018]:FieldDeclaration[9146-10018]"
    }, {
      "left" : "private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "right" : "private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "info" : "FieldDeclaration[10024-10220]:FieldDeclaration[10024-10220]"
    }, {
      "left" : "private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "right" : "private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "info" : "FieldDeclaration[10226-10499]:FieldDeclaration[10226-10499]"
    }, {
      "left" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "right" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "info" : "FieldDeclaration[10505-10841]:FieldDeclaration[10505-10841]"
    }, {
      "left" : "private static final long HEX_40000000 = 0x40000000L;",
      "right" : "private static final long HEX_40000000 = 0x40000000L;",
      "info" : "FieldDeclaration[11120-11313]:FieldDeclaration[11120-11313]"
    }, {
      "left" : "private static final long MASK_30BITS = -1L - (HEX_40000000 -1);",
      "right" : "private static final long MASK_30BITS = -1L - (HEX_40000000 -1);",
      "info" : "FieldDeclaration[11334-11446]:FieldDeclaration[11334-11446]"
    }, {
      "left" : "private static final double TWO_POWER_52 = 4503599627370496.0;",
      "right" : "private static final double TWO_POWER_52 = 4503599627370496.0;",
      "info" : "FieldDeclaration[11476-11632]:FieldDeclaration[11476-11632]"
    }, {
      "left" : "private static final double F_1_3 = 1d / 3d;",
      "right" : "private static final double F_1_3 = 1d / 3d;",
      "info" : "FieldDeclaration[11696-11771]:FieldDeclaration[11761-11836]"
    }, {
      "left" : "private static final double F_1_5 = 1d / 5d;",
      "right" : "private static final double F_1_5 = 1d / 5d;",
      "info" : "FieldDeclaration[11776-11851]:FieldDeclaration[11841-11916]"
    }, {
      "left" : "private static final double F_1_7 = 1d / 7d;",
      "right" : "private static final double F_1_7 = 1d / 7d;",
      "info" : "FieldDeclaration[11856-11931]:FieldDeclaration[11921-11996]"
    }, {
      "left" : "private static final double F_1_9 = 1d / 9d;",
      "right" : "private static final double F_1_9 = 1d / 9d;",
      "info" : "FieldDeclaration[11936-12011]:FieldDeclaration[12001-12076]"
    }, {
      "left" : "private static final double F_1_11 = 1d / 11d;",
      "right" : "private static final double F_1_11 = 1d / 11d;",
      "info" : "FieldDeclaration[12016-12093]:FieldDeclaration[12081-12158]"
    }, {
      "left" : "private static final double F_1_13 = 1d / 13d;",
      "right" : "private static final double F_1_13 = 1d / 13d;",
      "info" : "FieldDeclaration[12098-12175]:FieldDeclaration[12163-12240]"
    }, {
      "left" : "private static final double F_1_15 = 1d / 15d;",
      "right" : "private static final double F_1_15 = 1d / 15d;",
      "info" : "FieldDeclaration[12180-12257]:FieldDeclaration[12245-12322]"
    }, {
      "left" : "private static final double F_1_17 = 1d / 17d;",
      "right" : "private static final double F_1_17 = 1d / 17d;",
      "info" : "FieldDeclaration[12262-12339]:FieldDeclaration[12327-12404]"
    }, {
      "left" : "private static final double F_3_4 = 3d / 4d;",
      "right" : "private static final double F_3_4 = 3d / 4d;",
      "info" : "FieldDeclaration[12344-12419]:FieldDeclaration[12409-12484]"
    }, {
      "left" : "private static final double F_15_16 = 15d / 16d;",
      "right" : "private static final double F_15_16 = 15d / 16d;",
      "info" : "FieldDeclaration[12424-12503]:FieldDeclaration[12489-12568]"
    }, {
      "left" : "private static final double F_13_14 = 13d / 14d;",
      "right" : "private static final double F_13_14 = 13d / 14d;",
      "info" : "FieldDeclaration[12508-12587]:FieldDeclaration[12573-12652]"
    }, {
      "left" : "private static final double F_11_12 = 11d / 12d;",
      "right" : "private static final double F_11_12 = 11d / 12d;",
      "info" : "FieldDeclaration[12592-12671]:FieldDeclaration[12657-12736]"
    }, {
      "left" : "private static final double F_9_10 = 9d / 10d;",
      "right" : "private static final double F_9_10 = 9d / 10d;",
      "info" : "FieldDeclaration[12676-12753]:FieldDeclaration[12741-12818]"
    }, {
      "left" : "private static final double F_7_8 = 7d / 8d;",
      "right" : "private static final double F_7_8 = 7d / 8d;",
      "info" : "FieldDeclaration[12758-12833]:FieldDeclaration[12823-12898]"
    }, {
      "left" : "private static final double F_5_6 = 5d / 6d;",
      "right" : "private static final double F_5_6 = 5d / 6d;",
      "info" : "FieldDeclaration[12838-12913]:FieldDeclaration[12903-12978]"
    }, {
      "left" : "private static final double F_1_2 = 1d / 2d;",
      "right" : "private static final double F_1_2 = 1d / 2d;",
      "info" : "FieldDeclaration[12918-12993]:FieldDeclaration[12983-13058]"
    }, {
      "left" : "private static final double F_1_4 = 1d / 4d;",
      "right" : "private static final double F_1_4 = 1d / 4d;",
      "info" : "FieldDeclaration[12998-13073]:FieldDeclaration[13063-13138]"
    }, {
      "left" : "private FastMath()",
      "right" : "private FastMath()",
      "info" : "MethodDeclaration[13079-13143]:MethodDeclaration[13144-13208]"
    }, {
      "left" : "private static double doubleHighPart(double d)",
      "right" : "private static double doubleHighPart(double d)",
      "info" : "MethodDeclaration[13180-13775]:MethodDeclaration[13245-13840]"
    }, {
      "left" : "public static double sqrt(final double a)",
      "right" : "public static double sqrt(final double a)",
      "info" : "MethodDeclaration[13781-14079]:MethodDeclaration[13846-14144]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[14085-15907]:MethodDeclaration[14150-15972]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[15913-19217]:MethodDeclaration[15978-19282]"
    }, {
      "left" : "public static double tanh(double x)",
      "right" : "public static double tanh(double x)",
      "info" : "MethodDeclaration[19223-22354]:MethodDeclaration[19288-22419]"
    }, {
      "left" : "public static double acosh(final double a)",
      "right" : "public static double acosh(final double a)",
      "info" : "MethodDeclaration[22360-22633]:MethodDeclaration[22425-22698]"
    }, {
      "left" : "public static double asinh(double a)",
      "right" : "public static double asinh(double a)",
      "info" : "MethodDeclaration[22639-23937]:MethodDeclaration[22704-24002]"
    }, {
      "left" : "public static double atanh(double a)",
      "right" : "public static double atanh(double a)",
      "info" : "MethodDeclaration[23943-25070]:MethodDeclaration[24008-25135]"
    }, {
      "left" : "public static double signum(final double a)",
      "right" : "public static double signum(final double a)",
      "info" : "MethodDeclaration[25076-25476]:MethodDeclaration[25141-25541]"
    }, {
      "left" : "public static float signum(final float a)",
      "right" : "public static float signum(final float a)",
      "info" : "MethodDeclaration[25482-25884]:MethodDeclaration[25547-25949]"
    }, {
      "left" : "public static double nextUp(final double a)",
      "right" : "public static double nextUp(final double a)",
      "info" : "MethodDeclaration[25890-26174]:MethodDeclaration[25955-26239]"
    }, {
      "left" : "public static float nextUp(final float a)",
      "right" : "public static float nextUp(final float a)",
      "info" : "MethodDeclaration[26180-26461]:MethodDeclaration[26245-26526]"
    }, {
      "left" : "public static double random()",
      "right" : "public static double random()",
      "info" : "MethodDeclaration[26467-26739]:MethodDeclaration[26532-26804]"
    }, {
      "left" : "public static double exp(double x)",
      "right" : "public static double exp(double x)",
      "info" : "MethodDeclaration[26745-27590]:MethodDeclaration[26810-27655]"
    }, {
      "left" : "private static double exp(double x, double extra, double[] hiPrec)",
      "right" : "private static double exp(double x, double extra, double[] hiPrec)",
      "info" : "MethodDeclaration[27596-32397]:MethodDeclaration[27661-32462]"
    }, {
      "left" : "public static double expm1(double x)",
      "right" : "public static double expm1(double x)",
      "info" : "MethodDeclaration[32403-32591]:MethodDeclaration[32468-32656]"
    }, {
      "left" : "private static double expm1(double x, double hiPrecOut[])",
      "right" : "private static double expm1(double x, double hiPrecOut[])",
      "info" : "MethodDeclaration[32597-36940]:MethodDeclaration[32662-37005]"
    }, {
      "left" : "public static double log(final double x)",
      "right" : "public static double log(final double x)",
      "info" : "MethodDeclaration[36946-37121]:MethodDeclaration[37011-37186]"
    }, {
      "left" : "private static double log(final double x, final double[] hiPrec)",
      "right" : "private static double log(final double x, final double[] hiPrec)",
      "info" : "MethodDeclaration[37127-44517]:MethodDeclaration[37192-44582]"
    }, {
      "left" : "public static double log1p(final double x)",
      "right" : "public static double log1p(final double x)",
      "info" : "MethodDeclaration[44523-45680]:MethodDeclaration[44588-45745]"
    }, {
      "left" : "public static double log10(final double x)",
      "right" : "public static double log10(final double x)",
      "info" : "MethodDeclaration[45686-46382]:MethodDeclaration[45751-46447]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[46388-47231]:MethodDeclaration[46453-47296]"
    }, {
      "left" : "public static double pow(double d, int e)",
      "right" : "public static double pow(double d, int e)",
      "info" : "MethodDeclaration[51454-53940]:MethodDeclaration[51519-54005]"
    }, {
      "left" : "private static double polySine(final double x)",
      "right" : "private static double polySine(final double x)",
      "info" : "MethodDeclaration[53946-54463]:MethodDeclaration[54011-54528]"
    }, {
      "left" : "private static double polyCosine(double x)",
      "right" : "private static double polyCosine(double x)",
      "info" : "MethodDeclaration[54469-54933]:MethodDeclaration[54534-54998]"
    }, {
      "left" : "private static double sinQ(double xa, double xb)",
      "right" : "private static double sinQ(double xa, double xb)",
      "info" : "MethodDeclaration[54939-58196]:MethodDeclaration[55004-58261]"
    }, {
      "left" : "private static double cosQ(double xa, double xb)",
      "right" : "private static double cosQ(double xa, double xb)",
      "info" : "MethodDeclaration[58202-58790]:MethodDeclaration[58267-58855]"
    }, {
      "left" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "right" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "info" : "MethodDeclaration[58796-63313]:MethodDeclaration[58861-63378]"
    }, {
      "left" : "private static void reducePayneHanek(double x, double result[])",
      "right" : "private static void reducePayneHanek(double x, double result[])",
      "info" : "MethodDeclaration[63319-69784]:MethodDeclaration[63384-69849]"
    }, {
      "left" : "public static double sin(double x)",
      "right" : "public static double sin(double x)",
      "info" : "MethodDeclaration[69790-71541]:MethodDeclaration[69855-71606]"
    }, {
      "left" : "public static double cos(double x)",
      "right" : "public static double cos(double x)",
      "info" : "MethodDeclaration[71547-72984]:MethodDeclaration[71612-73049]"
    }, {
      "left" : "public static double tan(double x)",
      "right" : "public static double tan(double x)",
      "info" : "MethodDeclaration[72990-75006]:MethodDeclaration[73055-75071]"
    }, {
      "left" : "public static double atan(double x)",
      "right" : "public static double atan(double x)",
      "info" : "MethodDeclaration[75012-75184]:MethodDeclaration[75077-75249]"
    }, {
      "left" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "right" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "info" : "MethodDeclaration[75190-79902]:MethodDeclaration[75255-79967]"
    }, {
      "left" : "public static double atan2(double y, double x)",
      "right" : "public static double atan2(double y, double x)",
      "info" : "MethodDeclaration[79908-82950]:MethodDeclaration[79973-83015]"
    }, {
      "left" : "public static double asin(double x)",
      "right" : "public static double asin(double x)",
      "info" : "MethodDeclaration[82956-84654]:MethodDeclaration[83021-84719]"
    }, {
      "left" : "public static double acos(double x)",
      "right" : "public static double acos(double x)",
      "info" : "MethodDeclaration[84660-86463]:MethodDeclaration[84725-86528]"
    }, {
      "left" : "public static double cbrt(double x)",
      "right" : "public static double cbrt(double x)",
      "info" : "MethodDeclaration[86469-89162]:MethodDeclaration[86534-89227]"
    }, {
      "left" : "public static double toRadians(double x)",
      "right" : "public static double toRadians(double x)",
      "info" : "MethodDeclaration[89168-89950]:MethodDeclaration[89233-90015]"
    }, {
      "left" : "public static double toDegrees(double x)",
      "right" : "public static double toDegrees(double x)",
      "info" : "MethodDeclaration[89956-90584]:MethodDeclaration[90021-90649]"
    }, {
      "left" : "public static int abs(final int x)",
      "right" : "public static int abs(final int x)",
      "info" : "MethodDeclaration[90590-90788]:MethodDeclaration[90655-90853]"
    }, {
      "left" : "public static long abs(final long x)",
      "right" : "public static long abs(final long x)",
      "info" : "MethodDeclaration[90794-90995]:MethodDeclaration[90859-91060]"
    }, {
      "left" : "public static float abs(final float x)",
      "right" : "public static float abs(final float x)",
      "info" : "MethodDeclaration[91001-91243]:MethodDeclaration[91066-91308]"
    }, {
      "left" : "public static double abs(double x)",
      "right" : "public static double abs(double x)",
      "info" : "MethodDeclaration[91249-91484]:MethodDeclaration[91314-91549]"
    }, {
      "left" : "public static double ulp(double x)",
      "right" : "public static double ulp(double x)",
      "info" : "MethodDeclaration[91490-91868]:MethodDeclaration[91555-91933]"
    }, {
      "left" : "public static float ulp(float x)",
      "right" : "public static float ulp(float x)",
      "info" : "MethodDeclaration[91874-92242]:MethodDeclaration[91939-92307]"
    }, {
      "left" : "public static double scalb(final double d, final int n)",
      "right" : "public static double scalb(final double d, final int n)",
      "info" : "MethodDeclaration[92248-95502]:MethodDeclaration[92313-95567]"
    }, {
      "left" : "public static float scalb(final float f, final int n)",
      "right" : "public static float scalb(final float f, final int n)",
      "info" : "MethodDeclaration[95508-98647]:MethodDeclaration[95573-98712]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[98653-100769]:MethodDeclaration[98718-100834]"
    }, {
      "left" : "public static float nextAfter(final float f, final double direction)",
      "right" : "public static float nextAfter(final float f, final double direction)",
      "info" : "MethodDeclaration[100775-102866]:MethodDeclaration[100840-102931]"
    }, {
      "left" : "public static double floor(double x)",
      "right" : "public static double floor(double x)",
      "info" : "MethodDeclaration[102872-103429]:MethodDeclaration[102937-103494]"
    }, {
      "left" : "public static double ceil(double x)",
      "right" : "public static double ceil(double x)",
      "info" : "MethodDeclaration[103435-103919]:MethodDeclaration[103500-103984]"
    }, {
      "left" : "public static double rint(double x)",
      "right" : "public static double rint(double x)",
      "info" : "MethodDeclaration[103925-104624]:MethodDeclaration[103990-104689]"
    }, {
      "left" : "public static long round(double x)",
      "right" : "public static long round(double x)",
      "info" : "MethodDeclaration[104630-104846]:MethodDeclaration[104695-104911]"
    }, {
      "left" : "public static int round(final float x)",
      "right" : "public static int round(final float x)",
      "info" : "MethodDeclaration[104852-105069]:MethodDeclaration[104917-105134]"
    }, {
      "left" : "public static int min(final int a, final int b)",
      "right" : "public static int min(final int a, final int b)",
      "info" : "MethodDeclaration[105075-105329]:MethodDeclaration[105140-105394]"
    }, {
      "left" : "public static long min(final long a, final long b)",
      "right" : "public static long min(final long a, final long b)",
      "info" : "MethodDeclaration[105335-105592]:MethodDeclaration[105400-105657]"
    }, {
      "left" : "public static float min(final float a, final float b)",
      "right" : "public static float min(final float a, final float b)",
      "info" : "MethodDeclaration[105598-106267]:MethodDeclaration[105663-106332]"
    }, {
      "left" : "public static double min(final double a, final double b)",
      "right" : "public static double min(final double a, final double b)",
      "info" : "MethodDeclaration[106273-106971]:MethodDeclaration[106338-107036]"
    }, {
      "left" : "public static int max(final int a, final int b)",
      "right" : "public static int max(final int a, final int b)",
      "info" : "MethodDeclaration[106977-107231]:MethodDeclaration[107042-107296]"
    }, {
      "left" : "public static long max(final long a, final long b)",
      "right" : "public static long max(final long a, final long b)",
      "info" : "MethodDeclaration[107237-107494]:MethodDeclaration[107302-107559]"
    }, {
      "left" : "public static float max(final float a, final float b)",
      "right" : "public static float max(final float a, final float b)",
      "info" : "MethodDeclaration[107500-108169]:MethodDeclaration[107565-108234]"
    }, {
      "left" : "public static double max(final double a, final double b)",
      "right" : "public static double max(final double a, final double b)",
      "info" : "MethodDeclaration[108175-108873]:MethodDeclaration[108240-108938]"
    }, {
      "left" : "public static double hypot(final double x, final double y)",
      "right" : "public static double hypot(final double x, final double y)",
      "info" : "MethodDeclaration[108879-110613]:MethodDeclaration[108944-110678]"
    }, {
      "left" : "public static double IEEEremainder(double dividend, double divisor)",
      "right" : "public static double IEEEremainder(double dividend, double divisor)",
      "info" : "MethodDeclaration[110619-111937]:MethodDeclaration[110684-112002]"
    }, {
      "left" : "public static double copySign(double magnitude, double sign",
      "right" : "public static double copySign(double magnitude, double sign",
      "info" : "MethodDeclaration[111943-112595]:MethodDeclaration[112008-112660]"
    }, {
      "left" : "public static float copySign(float magnitude, float sign",
      "right" : "public static float copySign(float magnitude, float sign",
      "info" : "MethodDeclaration[112601-113242]:MethodDeclaration[112666-113307]"
    }, {
      "left" : "public static int getExponent(final double d)",
      "right" : "public static int getExponent(final double d)",
      "info" : "MethodDeclaration[113248-113703]:MethodDeclaration[113313-113768]"
    }, {
      "left" : "public static int getExponent(final float f)",
      "right" : "public static int getExponent(final float f)",
      "info" : "MethodDeclaration[113709-114150]:MethodDeclaration[113774-114215]"
    }, {
      "left" : "public static void main(String[] a)",
      "right" : "public static void main(String[] a)",
      "info" : "MethodDeclaration[114156-115425]:MethodDeclaration[114221-115490]"
    }, {
      "left" : "ExpIntTable",
      "right" : "ExpIntTable",
      "info" : "TypeDeclaration[115431-117232]:TypeDeclaration[115496-117297]"
    }, {
      "left" : "private static final double[] EXP_INT_TABLE_A;",
      "right" : "private static final double[] EXP_INT_TABLE_A;",
      "info" : "FieldDeclaration[115570-115787]:FieldDeclaration[115635-115852]"
    }, {
      "left" : "private static final double[] EXP_INT_TABLE_B;",
      "right" : "private static final double[] EXP_INT_TABLE_B;",
      "info" : "FieldDeclaration[115796-116012]:FieldDeclaration[115861-116077]"
    }, {
      "left" : "ExpFracTable",
      "right" : "ExpFracTable",
      "info" : "TypeDeclaration[117238-118619]:TypeDeclaration[117303-118684]"
    }, {
      "left" : "private static final double[] EXP_FRAC_TABLE_A;",
      "right" : "private static final double[] EXP_FRAC_TABLE_A;",
      "info" : "FieldDeclaration[117378-117594]:FieldDeclaration[117443-117659]"
    }, {
      "left" : "private static final double[] EXP_FRAC_TABLE_B;",
      "right" : "private static final double[] EXP_FRAC_TABLE_B;",
      "info" : "FieldDeclaration[117603-117796]:FieldDeclaration[117668-117861]"
    }, {
      "left" : "lnMant",
      "right" : "lnMant",
      "info" : "TypeDeclaration[118625-119417]:TypeDeclaration[118690-119482]"
    }, {
      "left" : "private static final double[][] LN_MANT;",
      "right" : "private static final double[][] LN_MANT;",
      "info" : "FieldDeclaration[118759-118894]:FieldDeclaration[118824-118959]"
    }, {
      "left" : "CodyWaite",
      "right" : "CodyWaite",
      "info" : "TypeDeclaration[119423-121267]:TypeDeclaration[119488-121332]"
    }, {
      "left" : "private final int finalK;",
      "right" : "private final int finalK;",
      "info" : "FieldDeclaration[119542-119584]:FieldDeclaration[119607-119649]"
    }, {
      "left" : "private final double finalRemA;",
      "right" : "private final double finalRemA;",
      "info" : "FieldDeclaration[119593-119644]:FieldDeclaration[119658-119709]"
    }, {
      "left" : "private final double finalRemB;",
      "right" : "private final double finalRemB;",
      "info" : "FieldDeclaration[119653-119704]:FieldDeclaration[119718-119769]"
    }, {
      "left" : "CodyWaite(double xa,\n                  double xb)",
      "right" : "CodyWaite(double xa,\n                  double xb)",
      "info" : "MethodDeclaration[119714-120927]:MethodDeclaration[119779-120992]"
    }, {
      "left" : "int getK()",
      "right" : "int getK()",
      "info" : "MethodDeclaration[120937-121031]:MethodDeclaration[121002-121096]"
    }, {
      "left" : "double getRemA()",
      "right" : "double getRemA()",
      "info" : "MethodDeclaration[121040-121146]:MethodDeclaration[121105-121211]"
    }, {
      "left" : "double getRemB()",
      "right" : "double getRemB()",
      "info" : "MethodDeclaration[121155-121261]:MethodDeclaration[121220-121326]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13122-13129]:Modifier[13187-13194]"
    }, {
      "left" : "FastMath",
      "right" : "FastMath",
      "info" : "SimpleName[13130-13138]:SimpleName[13195-13203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13141-13143]:Block[13206-13208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13431-13438]:Modifier[13496-13503]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13439-13445]:Modifier[13504-13510]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[13446-13452]:PrimitiveType[13511-13517]"
    }, {
      "left" : "doubleHighPart",
      "right" : "doubleHighPart",
      "info" : "SimpleName[13453-13467]:SimpleName[13518-13532]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[13468-13476]:SingleVariableDeclaration[13533-13541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13478-13775]:Block[13543-13840]"
    }, {
      "left" : "if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN)",
      "right" : "if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN)",
      "info" : "IfStatement[13488-13625]:IfStatement[13553-13690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13542-13625]:Block[13607-13690]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[13556-13565]:ReturnStatement[13621-13630]"
    }, {
      "left" : "long xl = Double.doubleToLongBits(d);",
      "right" : "long xl = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[13634-13671]:VariableDeclarationStatement[13699-13736]"
    }, {
      "left" : "xl = xl & MASK_30BITS;",
      "right" : "xl = xl & MASK_30BITS;",
      "info" : "ExpressionStatement[13680-13702]:ExpressionStatement[13745-13767]"
    }, {
      "left" : "return Double.longBitsToDouble(xl);",
      "right" : "return Double.longBitsToDouble(xl);",
      "info" : "ReturnStatement[13734-13769]:ReturnStatement[13799-13834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14001-14007]:Modifier[14066-14072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14008-14014]:Modifier[14073-14079]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14015-14021]:PrimitiveType[14080-14086]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[14022-14026]:SimpleName[14087-14091]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[14027-14041]:SingleVariableDeclaration[14092-14106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14043-14079]:Block[14108-14144]"
    }, {
      "left" : "return Math.sqrt(a);",
      "right" : "return Math.sqrt(a);",
      "info" : "ReturnStatement[14053-14073]:ReturnStatement[14118-14138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14233-14239]:Modifier[14298-14304]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14240-14246]:Modifier[14305-14311]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14247-14253]:PrimitiveType[14312-14318]"
    }, {
      "left" : "cosh",
      "right" : "cosh",
      "info" : "SimpleName[14254-14258]:SimpleName[14319-14323]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[14259-14267]:SingleVariableDeclaration[14324-14332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14269-15907]:Block[14334-15972]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[14277-14318]:IfStatement[14342-14383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14289-14318]:Block[14354-14383]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[14301-14310]:ReturnStatement[14366-14375]"
    }, {
      "left" : "if (x > 20)",
      "right" : "if (x > 20)",
      "info" : "IfStatement[14472-14978]:IfStatement[14537-15043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14484-14720]:Block[14549-14785]"
    }, {
      "left" : "if (x >= LOG_MAX_VALUE)",
      "right" : "if (x >= LOG_MAX_VALUE)",
      "info" : "IfStatement[14496-14712]:IfStatement[14561-14777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14520-14658]:Block[14585-14723]"
    }, {
      "left" : "final double t = exp(0.5 * x);",
      "right" : "final double t = exp(0.5 * x);",
      "info" : "VariableDeclarationStatement[14580-14610]:VariableDeclarationStatement[14645-14675]"
    }, {
      "left" : "return (0.5 * t) * t;",
      "right" : "return (0.5 * t) * t;",
      "info" : "ReturnStatement[14625-14646]:ReturnStatement[14690-14711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14664-14712]:Block[14729-14777]"
    }, {
      "left" : "return 0.5 * exp(x);",
      "right" : "return 0.5 * exp(x);",
      "info" : "ReturnStatement[14680-14700]:ReturnStatement[14745-14765]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[14726-14978]:IfStatement[14791-15043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14739-14978]:Block[14804-15043]"
    }, {
      "left" : "if (x <= -LOG_MAX_VALUE)",
      "right" : "if (x <= -LOG_MAX_VALUE)",
      "info" : "IfStatement[14751-14970]:IfStatement[14816-15035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14776-14915]:Block[14841-14980]"
    }, {
      "left" : "final double t = exp(-0.5 * x);",
      "right" : "final double t = exp(-0.5 * x);",
      "info" : "VariableDeclarationStatement[14836-14867]:VariableDeclarationStatement[14901-14932]"
    }, {
      "left" : "return (0.5 * t) * t;",
      "right" : "return (0.5 * t) * t;",
      "info" : "ReturnStatement[14882-14903]:ReturnStatement[14947-14968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14921-14970]:Block[14986-15035]"
    }, {
      "left" : "return 0.5 * exp(-x);",
      "right" : "return 0.5 * exp(-x);",
      "info" : "ReturnStatement[14937-14958]:ReturnStatement[15002-15023]"
    }, {
      "left" : "final double hiPrec[] = new double[2];",
      "right" : "final double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[14986-15024]:VariableDeclarationStatement[15051-15089]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[15031-15071]:IfStatement[15096-15136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15044-15071]:Block[15109-15136]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[15056-15063]:ExpressionStatement[15121-15128]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[15078-15098]:ExpressionStatement[15143-15163]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[15106-15140]:VariableDeclarationStatement[15171-15205]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[15147-15189]:VariableDeclarationStatement[15212-15254]"
    }, {
      "left" : "double temp = ya * HEX_40000000;",
      "right" : "double temp = ya * HEX_40000000;",
      "info" : "VariableDeclarationStatement[15197-15229]:VariableDeclarationStatement[15262-15294]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[15236-15266]:VariableDeclarationStatement[15301-15331]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[15273-15295]:VariableDeclarationStatement[15338-15360]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[15324-15346]:VariableDeclarationStatement[15389-15411]"
    }, {
      "left" : "temp = recip * HEX_40000000;",
      "right" : "temp = recip * HEX_40000000;",
      "info" : "ExpressionStatement[15353-15381]:ExpressionStatement[15418-15446]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[15388-15424]:VariableDeclarationStatement[15453-15489]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[15431-15462]:VariableDeclarationStatement[15496-15527]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[15512-15588]:ExpressionStatement[15577-15653]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[15619-15649]:ExpressionStatement[15684-15714]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[15678-15697]:ExpressionStatement[15743-15762]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[15704-15732]:ExpressionStatement[15769-15797]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[15739-15749]:ExpressionStatement[15804-15814]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[15756-15775]:ExpressionStatement[15821-15840]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[15782-15810]:ExpressionStatement[15847-15875]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[15817-15827]:ExpressionStatement[15882-15892]"
    }, {
      "left" : "double result = ya + yb;",
      "right" : "double result = ya + yb;",
      "info" : "VariableDeclarationStatement[15835-15859]:VariableDeclarationStatement[15900-15924]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[15866-15880]:ExpressionStatement[15931-15945]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15887-15901]:ReturnStatement[15952-15966]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16057-16063]:Modifier[16122-16128]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16064-16070]:Modifier[16129-16135]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[16071-16077]:PrimitiveType[16136-16142]"
    }, {
      "left" : "sinh",
      "right" : "sinh",
      "info" : "SimpleName[16078-16082]:SimpleName[16143-16147]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[16083-16091]:SingleVariableDeclaration[16148-16156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16093-19217]:Block[16158-19282]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[16101-16124]:VariableDeclarationStatement[16166-16189]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[16131-16172]:IfStatement[16196-16237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16143-16172]:Block[16208-16237]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[16155-16164]:ReturnStatement[16220-16229]"
    }, {
      "left" : "if (x > 20)",
      "right" : "if (x > 20)",
      "info" : "IfStatement[16328-16836]:IfStatement[16393-16901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16340-16576]:Block[16405-16641]"
    }, {
      "left" : "if (x >= LOG_MAX_VALUE)",
      "right" : "if (x >= LOG_MAX_VALUE)",
      "info" : "IfStatement[16352-16568]:IfStatement[16417-16633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16376-16514]:Block[16441-16579]"
    }, {
      "left" : "final double t = exp(0.5 * x);",
      "right" : "final double t = exp(0.5 * x);",
      "info" : "VariableDeclarationStatement[16436-16466]:VariableDeclarationStatement[16501-16531]"
    }, {
      "left" : "return (0.5 * t) * t;",
      "right" : "return (0.5 * t) * t;",
      "info" : "ReturnStatement[16481-16502]:ReturnStatement[16546-16567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16520-16568]:Block[16585-16633]"
    }, {
      "left" : "return 0.5 * exp(x);",
      "right" : "return 0.5 * exp(x);",
      "info" : "ReturnStatement[16536-16556]:ReturnStatement[16601-16621]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[16582-16836]:IfStatement[16647-16901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16595-16836]:Block[16660-16901]"
    }, {
      "left" : "if (x <= -LOG_MAX_VALUE)",
      "right" : "if (x <= -LOG_MAX_VALUE)",
      "info" : "IfStatement[16607-16828]:IfStatement[16672-16893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16632-16772]:Block[16697-16837]"
    }, {
      "left" : "final double t = exp(-0.5 * x);",
      "right" : "final double t = exp(-0.5 * x);",
      "info" : "VariableDeclarationStatement[16692-16723]:VariableDeclarationStatement[16757-16788]"
    }, {
      "left" : "return (-0.5 * t) * t;",
      "right" : "return (-0.5 * t) * t;",
      "info" : "ReturnStatement[16738-16760]:ReturnStatement[16803-16825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16778-16828]:Block[16843-16893]"
    }, {
      "left" : "return -0.5 * exp(-x);",
      "right" : "return -0.5 * exp(-x);",
      "info" : "ReturnStatement[16794-16816]:ReturnStatement[16859-16881]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[16844-16885]:IfStatement[16909-16950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16856-16885]:Block[16921-16950]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[16868-16877]:ReturnStatement[16933-16942]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[16893-16958]:IfStatement[16958-17023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16906-16958]:Block[16971-17023]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[16918-16925]:ExpressionStatement[16983-16990]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[16936-16950]:ExpressionStatement[17001-17015]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[16966-16980]:VariableDeclarationStatement[17031-17045]"
    }, {
      "left" : "if (x > 0.25)",
      "right" : "if (x > 0.25)",
      "info" : "IfStatement[16988-19132]:IfStatement[17053-19197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17002-18009]:Block[17067-18074]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[17014-17046]:VariableDeclarationStatement[17079-17111]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[17057-17077]:ExpressionStatement[17122-17142]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[17089-17123]:VariableDeclarationStatement[17154-17188]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[17134-17176]:VariableDeclarationStatement[17199-17241]"
    }, {
      "left" : "double temp = ya * HEX_40000000;",
      "right" : "double temp = ya * HEX_40000000;",
      "info" : "VariableDeclarationStatement[17188-17220]:VariableDeclarationStatement[17253-17285]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[17231-17261]:VariableDeclarationStatement[17296-17326]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[17272-17294]:VariableDeclarationStatement[17337-17359]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[17331-17353]:VariableDeclarationStatement[17396-17418]"
    }, {
      "left" : "temp = recip * HEX_40000000;",
      "right" : "temp = recip * HEX_40000000;",
      "info" : "ExpressionStatement[17364-17392]:ExpressionStatement[17429-17457]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[17403-17439]:VariableDeclarationStatement[17468-17504]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[17450-17481]:VariableDeclarationStatement[17515-17546]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[17539-17615]:ExpressionStatement[17604-17680]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[17654-17684]:ExpressionStatement[17719-17749]"
    }, {
      "left" : "recipa = -recipa;",
      "right" : "recipa = -recipa;",
      "info" : "ExpressionStatement[17696-17713]:ExpressionStatement[17761-17778]"
    }, {
      "left" : "recipb = -recipb;",
      "right" : "recipb = -recipb;",
      "info" : "ExpressionStatement[17724-17741]:ExpressionStatement[17789-17806]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[17778-17797]:ExpressionStatement[17843-17862]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[17808-17836]:ExpressionStatement[17873-17901]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[17847-17857]:ExpressionStatement[17912-17922]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[17868-17887]:ExpressionStatement[17933-17952]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[17898-17926]:ExpressionStatement[17963-17991]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[17937-17947]:ExpressionStatement[18002-18012]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[17959-17976]:ExpressionStatement[18024-18041]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[17987-18001]:ExpressionStatement[18052-18066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18021-19132]:Block[18086-19197]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[18033-18065]:VariableDeclarationStatement[18098-18130]"
    }, {
      "left" : "expm1(x, hiPrec);",
      "right" : "expm1(x, hiPrec);",
      "info" : "ExpressionStatement[18076-18093]:ExpressionStatement[18141-18158]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[18105-18139]:VariableDeclarationStatement[18170-18204]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[18150-18192]:VariableDeclarationStatement[18215-18257]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[18267-18291]:VariableDeclarationStatement[18332-18356]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[18302-18330]:VariableDeclarationStatement[18367-18395]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[18341-18382]:VariableDeclarationStatement[18406-18447]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[18393-18420]:VariableDeclarationStatement[18458-18485]"
    }, {
      "left" : "double temp = ratio * HEX_40000000;",
      "right" : "double temp = ratio * HEX_40000000;",
      "info" : "VariableDeclarationStatement[18431-18466]:VariableDeclarationStatement[18496-18531]"
    }, {
      "left" : "double ra = ratio + temp - temp;",
      "right" : "double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[18477-18509]:VariableDeclarationStatement[18542-18574]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[18520-18543]:VariableDeclarationStatement[18585-18608]"
    }, {
      "left" : "temp = denom * HEX_40000000;",
      "right" : "temp = denom * HEX_40000000;",
      "info" : "ExpressionStatement[18555-18583]:ExpressionStatement[18620-18648]"
    }, {
      "left" : "double za = denom + temp - temp;",
      "right" : "double za = denom + temp - temp;",
      "info" : "VariableDeclarationStatement[18594-18626]:VariableDeclarationStatement[18659-18691]"
    }, {
      "left" : "double zb = denom - za;",
      "right" : "double zb = denom - za;",
      "info" : "VariableDeclarationStatement[18637-18660]:VariableDeclarationStatement[18702-18725]"
    }, {
      "left" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "right" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "info" : "ExpressionStatement[18672-18724]:ExpressionStatement[18737-18789]"
    }, {
      "left" : "rb += yb*denomr;",
      "right" : "rb += yb*denomr;",
      "info" : "ExpressionStatement[18763-18779]:ExpressionStatement[18828-18844]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[18826-18863]:ExpressionStatement[18891-18928]"
    }, {
      "left" : "temp = ya + ra;",
      "right" : "temp = ya + ra;",
      "info" : "ExpressionStatement[18917-18932]:ExpressionStatement[18982-18997]"
    }, {
      "left" : "yb += -(temp - ya - ra);",
      "right" : "yb += -(temp - ya - ra);",
      "info" : "ExpressionStatement[18943-18967]:ExpressionStatement[19008-19032]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[18978-18988]:ExpressionStatement[19043-19053]"
    }, {
      "left" : "temp = ya + rb;",
      "right" : "temp = ya + rb;",
      "info" : "ExpressionStatement[18999-19014]:ExpressionStatement[19064-19079]"
    }, {
      "left" : "yb += -(temp - ya - rb);",
      "right" : "yb += -(temp - ya - rb);",
      "info" : "ExpressionStatement[19025-19049]:ExpressionStatement[19090-19114]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[19060-19070]:ExpressionStatement[19125-19135]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[19082-19099]:ExpressionStatement[19147-19164]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[19110-19124]:ExpressionStatement[19175-19189]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[19140-19189]:IfStatement[19205-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19152-19189]:Block[19217-19254]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[19164-19181]:ExpressionStatement[19229-19246]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[19197-19211]:ReturnStatement[19262-19276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19373-19379]:Modifier[19438-19444]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19380-19386]:Modifier[19445-19451]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[19387-19393]:PrimitiveType[19452-19458]"
    }, {
      "left" : "tanh",
      "right" : "tanh",
      "info" : "SimpleName[19394-19398]:SimpleName[19459-19463]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[19399-19407]:SingleVariableDeclaration[19464-19472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19409-22354]:Block[19474-22419]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[19417-19440]:VariableDeclarationStatement[19482-19505]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[19448-19489]:IfStatement[19513-19554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19460-19489]:Block[19525-19554]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[19472-19481]:ReturnStatement[19537-19546]"
    }, {
      "left" : "if (x > 20.0)",
      "right" : "if (x > 20.0)",
      "info" : "IfStatement[19696-19741]:IfStatement[19761-19806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19710-19741]:Block[19775-19806]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[19722-19733]:ReturnStatement[19787-19798]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[19749-19794]:IfStatement[19814-19859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19762-19794]:Block[19827-19859]"
    }, {
      "left" : "return -1.0;",
      "right" : "return -1.0;",
      "info" : "ReturnStatement[19774-19786]:ReturnStatement[19839-19851]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[19802-19843]:IfStatement[19867-19908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19814-19843]:Block[19879-19908]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[19826-19835]:ReturnStatement[19891-19900]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[19851-19916]:IfStatement[19916-19981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19864-19916]:Block[19929-19981]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[19876-19883]:ExpressionStatement[19941-19948]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[19894-19908]:ExpressionStatement[19959-19973]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19924-19938]:VariableDeclarationStatement[19989-20003]"
    }, {
      "left" : "if (x >= 0.5)",
      "right" : "if (x >= 0.5)",
      "info" : "IfStatement[19945-22269]:IfStatement[20010-22334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19959-21162]:Block[20024-21227]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[19971-20003]:VariableDeclarationStatement[20036-20068]"
    }, {
      "left" : "exp(x*2.0, 0.0, hiPrec);",
      "right" : "exp(x*2.0, 0.0, hiPrec);",
      "info" : "ExpressionStatement[20067-20091]:ExpressionStatement[20132-20156]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[20103-20137]:VariableDeclarationStatement[20168-20202]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[20148-20190]:VariableDeclarationStatement[20213-20255]"
    }, {
      "left" : "double na = -1.0 + ya;",
      "right" : "double na = -1.0 + ya;",
      "info" : "VariableDeclarationStatement[20228-20250]:VariableDeclarationStatement[20293-20315]"
    }, {
      "left" : "double nb = -(na + 1.0 - ya);",
      "right" : "double nb = -(na + 1.0 - ya);",
      "info" : "VariableDeclarationStatement[20261-20290]:VariableDeclarationStatement[20326-20355]"
    }, {
      "left" : "double temp = na + yb;",
      "right" : "double temp = na + yb;",
      "info" : "VariableDeclarationStatement[20301-20323]:VariableDeclarationStatement[20366-20388]"
    }, {
      "left" : "nb += -(temp - na - yb);",
      "right" : "nb += -(temp - na - yb);",
      "info" : "ExpressionStatement[20334-20358]:ExpressionStatement[20399-20423]"
    }, {
      "left" : "na = temp;",
      "right" : "na = temp;",
      "info" : "ExpressionStatement[20369-20379]:ExpressionStatement[20434-20444]"
    }, {
      "left" : "double da = 1.0 + ya;",
      "right" : "double da = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[20419-20440]:VariableDeclarationStatement[20484-20505]"
    }, {
      "left" : "double db = -(da - 1.0 - ya);",
      "right" : "double db = -(da - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[20451-20480]:VariableDeclarationStatement[20516-20545]"
    }, {
      "left" : "temp = da + yb;",
      "right" : "temp = da + yb;",
      "info" : "ExpressionStatement[20491-20506]:ExpressionStatement[20556-20571]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[20517-20541]:ExpressionStatement[20582-20606]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[20552-20562]:ExpressionStatement[20617-20627]"
    }, {
      "left" : "temp = da * HEX_40000000;",
      "right" : "temp = da * HEX_40000000;",
      "info" : "ExpressionStatement[20574-20599]:ExpressionStatement[20639-20664]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[20610-20640]:VariableDeclarationStatement[20675-20705]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[20651-20673]:VariableDeclarationStatement[20716-20738]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[20712-20733]:VariableDeclarationStatement[20777-20798]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[20744-20772]:ExpressionStatement[20809-20837]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[20783-20819]:VariableDeclarationStatement[20848-20884]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[20830-20861]:VariableDeclarationStatement[20895-20926]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[20919-20991]:ExpressionStatement[20984-21056]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[21031-21049]:ExpressionStatement[21096-21114]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[21088-21117]:ExpressionStatement[21153-21182]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[21129-21154]:ExpressionStatement[21194-21219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21174-22269]:Block[21239-22334]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[21186-21218]:VariableDeclarationStatement[21251-21283]"
    }, {
      "left" : "expm1(x*2.0, hiPrec);",
      "right" : "expm1(x*2.0, hiPrec);",
      "info" : "ExpressionStatement[21280-21301]:ExpressionStatement[21345-21366]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[21313-21347]:VariableDeclarationStatement[21378-21412]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[21358-21400]:VariableDeclarationStatement[21423-21465]"
    }, {
      "left" : "double na = ya;",
      "right" : "double na = ya;",
      "info" : "VariableDeclarationStatement[21438-21453]:VariableDeclarationStatement[21503-21518]"
    }, {
      "left" : "double nb = yb;",
      "right" : "double nb = yb;",
      "info" : "VariableDeclarationStatement[21464-21479]:VariableDeclarationStatement[21529-21544]"
    }, {
      "left" : "double da = 2.0 + ya;",
      "right" : "double da = 2.0 + ya;",
      "info" : "VariableDeclarationStatement[21519-21540]:VariableDeclarationStatement[21584-21605]"
    }, {
      "left" : "double db = -(da - 2.0 - ya);",
      "right" : "double db = -(da - 2.0 - ya);",
      "info" : "VariableDeclarationStatement[21551-21580]:VariableDeclarationStatement[21616-21645]"
    }, {
      "left" : "double temp = da + yb;",
      "right" : "double temp = da + yb;",
      "info" : "VariableDeclarationStatement[21591-21613]:VariableDeclarationStatement[21656-21678]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[21624-21648]:ExpressionStatement[21689-21713]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[21659-21669]:ExpressionStatement[21724-21734]"
    }, {
      "left" : "temp = da * HEX_40000000;",
      "right" : "temp = da * HEX_40000000;",
      "info" : "ExpressionStatement[21681-21706]:ExpressionStatement[21746-21771]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[21717-21747]:VariableDeclarationStatement[21782-21812]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[21758-21780]:VariableDeclarationStatement[21823-21845]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[21819-21840]:VariableDeclarationStatement[21884-21905]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[21851-21879]:ExpressionStatement[21916-21944]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[21890-21926]:VariableDeclarationStatement[21955-21991]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[21937-21968]:VariableDeclarationStatement[22002-22033]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[22026-22098]:ExpressionStatement[22091-22163]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[22138-22156]:ExpressionStatement[22203-22221]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[22195-22224]:ExpressionStatement[22260-22289]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[22236-22261]:ExpressionStatement[22301-22326]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[22277-22326]:IfStatement[22342-22391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22289-22326]:Block[22354-22391]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[22301-22318]:ExpressionStatement[22366-22383]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22334-22348]:ReturnStatement[22399-22413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22524-22530]:Modifier[22589-22595]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22531-22537]:Modifier[22596-22602]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[22538-22544]:PrimitiveType[22603-22609]"
    }, {
      "left" : "acosh",
      "right" : "acosh",
      "info" : "SimpleName[22545-22550]:SimpleName[22610-22615]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[22551-22565]:SingleVariableDeclaration[22616-22630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22567-22633]:Block[22632-22698]"
    }, {
      "left" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "right" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "info" : "ReturnStatement[22577-22627]:ReturnStatement[22642-22692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22799-22805]:Modifier[22864-22870]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22806-22812]:Modifier[22871-22877]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[22813-22819]:PrimitiveType[22878-22884]"
    }, {
      "left" : "asinh",
      "right" : "asinh",
      "info" : "SimpleName[22820-22825]:SimpleName[22885-22890]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[22826-22834]:SingleVariableDeclaration[22891-22899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22836-23937]:Block[22901-24002]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[22846-22871]:VariableDeclarationStatement[22911-22936]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[22880-22951]:IfStatement[22945-23016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22891-22951]:Block[22956-23016]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[22905-22921]:ExpressionStatement[22970-22986]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[22934-22941]:ExpressionStatement[22999-23006]"
    }, {
      "left" : "double absAsinh;",
      "right" : "double absAsinh;",
      "info" : "VariableDeclarationStatement[22961-22977]:VariableDeclarationStatement[23026-23042]"
    }, {
      "left" : "if (a > 0.167)",
      "right" : "if (a > 0.167)",
      "info" : "IfStatement[22986-23882]:IfStatement[23051-23947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23001-23079]:Block[23066-23144]"
    }, {
      "left" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "right" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "info" : "ExpressionStatement[23015-23069]:ExpressionStatement[23080-23134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23085-23882]:Block[23150-23947]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[23099-23123]:VariableDeclarationStatement[23164-23188]"
    }, {
      "left" : "if (a > 0.097)",
      "right" : "if (a > 0.097)",
      "info" : "IfStatement[23136-23872]:IfStatement[23201-23937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23151-23395]:Block[23216-23460]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[23169-23381]:ExpressionStatement[23234-23446]"
    }, {
      "left" : "if (a > 0.036)",
      "right" : "if (a > 0.036)",
      "info" : "IfStatement[23401-23872]:IfStatement[23466-23937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23416-23608]:Block[23481-23673]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[23434-23594]:ExpressionStatement[23499-23659]"
    }, {
      "left" : "if (a > 0.0036)",
      "right" : "if (a > 0.0036)",
      "info" : "IfStatement[23614-23872]:IfStatement[23679-23937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23630-23771]:Block[23695-23836]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[23648-23757]:ExpressionStatement[23713-23822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23777-23872]:Block[23842-23937]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[23795-23858]:ExpressionStatement[23860-23923]"
    }, {
      "left" : "return negative ? -absAsinh : absAsinh;",
      "right" : "return negative ? -absAsinh : absAsinh;",
      "info" : "ReturnStatement[23892-23931]:ReturnStatement[23957-23996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24109-24115]:Modifier[24174-24180]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24116-24122]:Modifier[24181-24187]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24123-24129]:PrimitiveType[24188-24194]"
    }, {
      "left" : "atanh",
      "right" : "atanh",
      "info" : "SimpleName[24130-24135]:SimpleName[24195-24200]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[24136-24144]:SingleVariableDeclaration[24201-24209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24146-25070]:Block[24211-25135]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[24156-24181]:VariableDeclarationStatement[24221-24246]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[24190-24261]:IfStatement[24255-24326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24201-24261]:Block[24266-24326]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[24215-24231]:ExpressionStatement[24280-24296]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[24244-24251]:ExpressionStatement[24309-24316]"
    }, {
      "left" : "double absAtanh;",
      "right" : "double absAtanh;",
      "info" : "VariableDeclarationStatement[24271-24287]:VariableDeclarationStatement[24336-24352]"
    }, {
      "left" : "if (a > 0.15)",
      "right" : "if (a > 0.15)",
      "info" : "IfStatement[24296-25015]:IfStatement[24361-25080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24310-24383]:Block[24375-24448]"
    }, {
      "left" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "right" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "info" : "ExpressionStatement[24324-24373]:ExpressionStatement[24389-24438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24389-25015]:Block[24454-25080]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[24403-24427]:VariableDeclarationStatement[24468-24492]"
    }, {
      "left" : "if (a > 0.087)",
      "right" : "if (a > 0.087)",
      "info" : "IfStatement[24440-25005]:IfStatement[24505-25070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24455-24628]:Block[24520-24693]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));",
      "info" : "ExpressionStatement[24473-24614]:ExpressionStatement[24538-24679]"
    }, {
      "left" : "if (a > 0.031)",
      "right" : "if (a > 0.031)",
      "info" : "IfStatement[24634-25005]:IfStatement[24699-25070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24649-24790]:Block[24714-24855]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));",
      "info" : "ExpressionStatement[24667-24776]:ExpressionStatement[24732-24841]"
    }, {
      "left" : "if (a > 0.003)",
      "right" : "if (a > 0.003)",
      "info" : "IfStatement[24796-25005]:IfStatement[24861-25070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24811-24920]:Block[24876-24985]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));",
      "info" : "ExpressionStatement[24829-24906]:ExpressionStatement[24894-24971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24926-25005]:Block[24991-25070]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));",
      "info" : "ExpressionStatement[24944-24991]:ExpressionStatement[25009-25056]"
    }, {
      "left" : "return negative ? -absAtanh : absAtanh;",
      "right" : "return negative ? -absAtanh : absAtanh;",
      "info" : "ReturnStatement[25025-25064]:ReturnStatement[25090-25129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25329-25335]:Modifier[25394-25400]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25336-25342]:Modifier[25401-25407]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[25343-25349]:PrimitiveType[25408-25414]"
    }, {
      "left" : "signum",
      "right" : "signum",
      "info" : "SimpleName[25350-25356]:SimpleName[25415-25421]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[25357-25371]:SingleVariableDeclaration[25422-25436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25373-25476]:Block[25438-25541]"
    }, {
      "left" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);",
      "right" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);",
      "info" : "ReturnStatement[25383-25431]:ReturnStatement[25448-25496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25735-25741]:Modifier[25800-25806]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25742-25748]:Modifier[25807-25813]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[25749-25754]:PrimitiveType[25814-25819]"
    }, {
      "left" : "signum",
      "right" : "signum",
      "info" : "SimpleName[25755-25761]:SimpleName[25820-25826]"
    }, {
      "left" : "final float a",
      "right" : "final float a",
      "info" : "SingleVariableDeclaration[25762-25775]:SingleVariableDeclaration[25827-25840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25777-25884]:Block[25842-25949]"
    }, {
      "left" : "return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);",
      "right" : "return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);",
      "info" : "ReturnStatement[25787-25839]:ReturnStatement[25852-25904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26068-26074]:Modifier[26133-26139]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26075-26081]:Modifier[26140-26146]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[26082-26088]:PrimitiveType[26147-26153]"
    }, {
      "left" : "nextUp",
      "right" : "nextUp",
      "info" : "SimpleName[26089-26095]:SimpleName[26154-26160]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[26096-26110]:SingleVariableDeclaration[26161-26175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26112-26174]:Block[26177-26239]"
    }, {
      "left" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "right" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[26122-26168]:ReturnStatement[26187-26233]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26358-26364]:Modifier[26423-26429]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26365-26371]:Modifier[26430-26436]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[26372-26377]:PrimitiveType[26437-26442]"
    }, {
      "left" : "nextUp",
      "right" : "nextUp",
      "info" : "SimpleName[26378-26384]:SimpleName[26443-26449]"
    }, {
      "left" : "final float a",
      "right" : "final float a",
      "info" : "SingleVariableDeclaration[26385-26398]:SingleVariableDeclaration[26450-26463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26400-26461]:Block[26465-26526]"
    }, {
      "left" : "return nextAfter(a, Float.POSITIVE_INFINITY);",
      "right" : "return nextAfter(a, Float.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[26410-26455]:ReturnStatement[26475-26520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26672-26678]:Modifier[26737-26743]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26679-26685]:Modifier[26744-26750]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[26686-26692]:PrimitiveType[26751-26757]"
    }, {
      "left" : "random",
      "right" : "random",
      "info" : "SimpleName[26693-26699]:SimpleName[26758-26764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26702-26739]:Block[26767-26804]"
    }, {
      "left" : "return Math.random();",
      "right" : "return Math.random();",
      "info" : "ReturnStatement[26712-26733]:ReturnStatement[26777-26798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27514-27520]:Modifier[27579-27585]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27521-27527]:Modifier[27586-27592]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[27528-27534]:PrimitiveType[27593-27599]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[27535-27538]:SimpleName[27600-27603]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[27539-27547]:SingleVariableDeclaration[27604-27612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27549-27590]:Block[27614-27655]"
    }, {
      "left" : "return exp(x, 0.0, null);",
      "right" : "return exp(x, 0.0, null);",
      "info" : "ReturnStatement[27559-27584]:ReturnStatement[27624-27649]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27896-27903]:Modifier[27961-27968]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27904-27910]:Modifier[27969-27975]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[27911-27917]:PrimitiveType[27976-27982]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[27918-27921]:SimpleName[27983-27986]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[27922-27930]:SingleVariableDeclaration[27987-27995]"
    }, {
      "left" : "double extra",
      "right" : "double extra",
      "info" : "SingleVariableDeclaration[27932-27944]:SingleVariableDeclaration[27997-28009]"
    }, {
      "left" : "double[] hiPrec",
      "right" : "double[] hiPrec",
      "info" : "SingleVariableDeclaration[27946-27961]:SingleVariableDeclaration[28011-28026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27963-32397]:Block[28028-32462]"
    }, {
      "left" : "double intPartA;",
      "right" : "double intPartA;",
      "info" : "VariableDeclarationStatement[27973-27989]:VariableDeclarationStatement[28038-28054]"
    }, {
      "left" : "double intPartB;",
      "right" : "double intPartB;",
      "info" : "VariableDeclarationStatement[27998-28014]:VariableDeclarationStatement[28063-28079]"
    }, {
      "left" : "int intVal;",
      "right" : "int intVal;",
      "info" : "VariableDeclarationStatement[28023-28034]:VariableDeclarationStatement[28088-28099]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[28187-29942]:IfStatement[28252-30007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28200-29479]:Block[28265-29544]"
    }, {
      "left" : "intVal = (int) -x;",
      "right" : "intVal = (int) -x;",
      "info" : "ExpressionStatement[28214-28232]:ExpressionStatement[28279-28297]"
    }, {
      "left" : "if (intVal > 746)",
      "right" : "if (intVal > 746)",
      "info" : "IfStatement[28246-28437]:IfStatement[28311-28502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28264-28437]:Block[28329-28502]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[28282-28395]:IfStatement[28347-28460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28302-28395]:Block[28367-28460]"
    }, {
      "left" : "hiPrec[0] = 0.0;",
      "right" : "hiPrec[0] = 0.0;",
      "info" : "ExpressionStatement[28324-28340]:ExpressionStatement[28389-28405]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[28361-28377]:ExpressionStatement[28426-28442]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[28412-28423]:ReturnStatement[28477-28488]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[28451-28836]:IfStatement[28516-28901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28469-28836]:Block[28534-28901]"
    }, {
      "left" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "right" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "info" : "VariableDeclarationStatement[28546-28625]:VariableDeclarationStatement[28611-28690]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[28642-28791]:IfStatement[28707-28856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28662-28791]:Block[28727-28856]"
    }, {
      "left" : "hiPrec[0] /= 285040095144011776.0;",
      "right" : "hiPrec[0] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[28684-28718]:ExpressionStatement[28749-28783]"
    }, {
      "left" : "hiPrec[1] /= 285040095144011776.0;",
      "right" : "hiPrec[1] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[28739-28773]:ExpressionStatement[28804-28838]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28808-28822]:ReturnStatement[28873-28887]"
    }, {
      "left" : "if (intVal == 709)",
      "right" : "if (intVal == 709)",
      "info" : "IfStatement[28850-29246]:IfStatement[28915-29311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28869-29246]:Block[28934-29311]"
    }, {
      "left" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "right" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "info" : "VariableDeclarationStatement[28956-29035]:VariableDeclarationStatement[29021-29100]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[29052-29201]:IfStatement[29117-29266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29072-29201]:Block[29137-29266]"
    }, {
      "left" : "hiPrec[0] /= 4.455505956692756620;",
      "right" : "hiPrec[0] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[29094-29128]:ExpressionStatement[29159-29193]"
    }, {
      "left" : "hiPrec[1] /= 4.455505956692756620;",
      "right" : "hiPrec[1] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[29149-29183]:ExpressionStatement[29214-29248]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[29218-29232]:ReturnStatement[29283-29297]"
    }, {
      "left" : "intVal++;",
      "right" : "intVal++;",
      "info" : "ExpressionStatement[29260-29269]:ExpressionStatement[29325-29334]"
    }, {
      "left" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "right" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "info" : "ExpressionStatement[29283-29354]:ExpressionStatement[29348-29419]"
    }, {
      "left" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "right" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "info" : "ExpressionStatement[29367-29438]:ExpressionStatement[29432-29503]"
    }, {
      "left" : "intVal = -intVal;",
      "right" : "intVal = -intVal;",
      "info" : "ExpressionStatement[29452-29469]:ExpressionStatement[29517-29534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29485-29942]:Block[29550-30007]"
    }, {
      "left" : "intVal = (int) x;",
      "right" : "intVal = (int) x;",
      "info" : "ExpressionStatement[29499-29516]:ExpressionStatement[29564-29581]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[29530-29763]:IfStatement[29595-29828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29548-29763]:Block[29613-29828]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[29566-29700]:IfStatement[29631-29765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29586-29700]:Block[29651-29765]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[29608-29645]:ExpressionStatement[29673-29710]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[29666-29682]:ExpressionStatement[29731-29747]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[29717-29749]:ReturnStatement[29782-29814]"
    }, {
      "left" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "right" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "info" : "ExpressionStatement[29777-29848]:ExpressionStatement[29842-29913]"
    }, {
      "left" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "right" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "info" : "ExpressionStatement[29861-29932]:ExpressionStatement[29926-29997]"
    }, {
      "left" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "right" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "info" : "VariableDeclarationStatement[30179-30229]:VariableDeclarationStatement[30244-30294]"
    }, {
      "left" : "final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];",
      "right" : "final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];",
      "info" : "VariableDeclarationStatement[30238-30302]:VariableDeclarationStatement[30303-30367]"
    }, {
      "left" : "final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "right" : "final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[30311-30375]:VariableDeclarationStatement[30376-30440]"
    }, {
      "left" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "right" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "info" : "VariableDeclarationStatement[30627-30682]:VariableDeclarationStatement[30692-30747]"
    }, {
      "left" : "double z = 0.04168701738764507;",
      "right" : "double z = 0.04168701738764507;",
      "info" : "VariableDeclarationStatement[31096-31127]:VariableDeclarationStatement[31161-31192]"
    }, {
      "left" : "z = z * epsilon + 0.1666666505023083;",
      "right" : "z = z * epsilon + 0.1666666505023083;",
      "info" : "ExpressionStatement[31136-31173]:ExpressionStatement[31201-31238]"
    }, {
      "left" : "z = z * epsilon + 0.5000000000042687;",
      "right" : "z = z * epsilon + 0.5000000000042687;",
      "info" : "ExpressionStatement[31182-31219]:ExpressionStatement[31247-31284]"
    }, {
      "left" : "z = z * epsilon + 1.0;",
      "right" : "z = z * epsilon + 1.0;",
      "info" : "ExpressionStatement[31228-31250]:ExpressionStatement[31293-31315]"
    }, {
      "left" : "z = z * epsilon + -3.940510424527919E-20;",
      "right" : "z = z * epsilon + -3.940510424527919E-20;",
      "info" : "ExpressionStatement[31259-31300]:ExpressionStatement[31324-31365]"
    }, {
      "left" : "double tempA = intPartA * fracPartA;",
      "right" : "double tempA = intPartA * fracPartA;",
      "info" : "VariableDeclarationStatement[31534-31570]:VariableDeclarationStatement[31599-31635]"
    }, {
      "left" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "right" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "info" : "VariableDeclarationStatement[31579-31661]:VariableDeclarationStatement[31644-31726]"
    }, {
      "left" : "final double tempC = tempB + tempA;",
      "right" : "final double tempC = tempB + tempA;",
      "info" : "VariableDeclarationStatement[31939-31974]:VariableDeclarationStatement[32004-32039]"
    }, {
      "left" : "final double result;",
      "right" : "final double result;",
      "info" : "VariableDeclarationStatement[31983-32003]:VariableDeclarationStatement[32048-32068]"
    }, {
      "left" : "if (extra != 0.0)",
      "right" : "if (extra != 0.0)",
      "info" : "IfStatement[32012-32180]:IfStatement[32077-32245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32030-32117]:Block[32095-32182]"
    }, {
      "left" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "right" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[32044-32107]:ExpressionStatement[32109-32172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32123-32180]:Block[32188-32245]"
    }, {
      "left" : "result = tempC*z + tempB + tempA;",
      "right" : "result = tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[32137-32170]:ExpressionStatement[32202-32235]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[32190-32367]:IfStatement[32255-32432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32210-32367]:Block[32275-32432]"
    }, {
      "left" : "hiPrec[0] = tempA;",
      "right" : "hiPrec[0] = tempA;",
      "info" : "ExpressionStatement[32268-32286]:ExpressionStatement[32333-32351]"
    }, {
      "left" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "right" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "info" : "ExpressionStatement[32299-32357]:ExpressionStatement[32364-32422]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32377-32391]:ReturnStatement[32442-32456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32518-32524]:Modifier[32583-32589]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32525-32531]:Modifier[32590-32596]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[32532-32538]:PrimitiveType[32597-32603]"
    }, {
      "left" : "expm1",
      "right" : "expm1",
      "info" : "SimpleName[32539-32544]:SimpleName[32604-32609]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[32545-32553]:SingleVariableDeclaration[32610-32618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32555-32591]:Block[32620-32656]"
    }, {
      "left" : "return expm1(x, null);",
      "right" : "return expm1(x, null);",
      "info" : "ReturnStatement[32563-32585]:ReturnStatement[32628-32650]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32799-32806]:Modifier[32864-32871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32807-32813]:Modifier[32872-32878]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[32814-32820]:PrimitiveType[32879-32885]"
    }, {
      "left" : "expm1",
      "right" : "expm1",
      "info" : "SimpleName[32821-32826]:SimpleName[32886-32891]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[32827-32835]:SingleVariableDeclaration[32892-32900]"
    }, {
      "left" : "double hiPrecOut[]",
      "right" : "double hiPrecOut[]",
      "info" : "SingleVariableDeclaration[32837-32855]:SingleVariableDeclaration[32902-32920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32857-36940]:Block[32922-37005]"
    }, {
      "left" : "if (x != x || x == 0.0)",
      "right" : "if (x != x || x == 0.0)",
      "info" : "IfStatement[32867-32939]:IfStatement[32932-33004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32891-32939]:Block[32956-33004]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[32920-32929]:ReturnStatement[32985-32994]"
    }, {
      "left" : "if (x <= -1.0 || x >= 1.0)",
      "right" : "if (x <= -1.0 || x >= 1.0)",
      "info" : "IfStatement[32949-33423]:IfStatement[33014-33488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32976-33423]:Block[33041-33488]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[33063-33095]:VariableDeclarationStatement[33128-33160]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[33108-33128]:ExpressionStatement[33173-33193]"
    }, {
      "left" : "if (x > 0.0)",
      "right" : "if (x > 0.0)",
      "info" : "IfStatement[33141-33413]:IfStatement[33206-33478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33154-33222]:Block[33219-33287]"
    }, {
      "left" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "right" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "info" : "ReturnStatement[33172-33208]:ReturnStatement[33237-33273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33228-33413]:Block[33293-33478]"
    }, {
      "left" : "final double ra = -1.0 + hiPrec[0];",
      "right" : "final double ra = -1.0 + hiPrec[0];",
      "info" : "VariableDeclarationStatement[33246-33281]:VariableDeclarationStatement[33311-33346]"
    }, {
      "left" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "right" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "info" : "VariableDeclarationStatement[33298-33334]:VariableDeclarationStatement[33363-33399]"
    }, {
      "left" : "rb += hiPrec[1];",
      "right" : "rb += hiPrec[1];",
      "info" : "ExpressionStatement[33351-33367]:ExpressionStatement[33416-33432]"
    }, {
      "left" : "return ra + rb;",
      "right" : "return ra + rb;",
      "info" : "ReturnStatement[33384-33399]:ReturnStatement[33449-33464]"
    }, {
      "left" : "double baseA;",
      "right" : "double baseA;",
      "info" : "VariableDeclarationStatement[33433-33446]:VariableDeclarationStatement[33498-33511]"
    }, {
      "left" : "double baseB;",
      "right" : "double baseB;",
      "info" : "VariableDeclarationStatement[33455-33468]:VariableDeclarationStatement[33520-33533]"
    }, {
      "left" : "double epsilon;",
      "right" : "double epsilon;",
      "info" : "VariableDeclarationStatement[33477-33492]:VariableDeclarationStatement[33542-33557]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[33501-33526]:VariableDeclarationStatement[33566-33591]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[33536-33609]:IfStatement[33601-33674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33549-33609]:Block[33614-33674]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[33563-33570]:ExpressionStatement[33628-33635]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[33583-33599]:ExpressionStatement[33648-33664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33619-34100]:Block[33684-34165]"
    }, {
      "left" : "int intFrac = (int) (x * 1024.0);",
      "right" : "int intFrac = (int) (x * 1024.0);",
      "info" : "VariableDeclarationStatement[33633-33666]:VariableDeclarationStatement[33698-33731]"
    }, {
      "left" : "double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "right" : "double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "info" : "VariableDeclarationStatement[33679-33739]:VariableDeclarationStatement[33744-33804]"
    }, {
      "left" : "double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "right" : "double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[33752-33806]:VariableDeclarationStatement[33817-33871]"
    }, {
      "left" : "double temp = tempA + tempB;",
      "right" : "double temp = tempA + tempB;",
      "info" : "VariableDeclarationStatement[33820-33848]:VariableDeclarationStatement[33885-33913]"
    }, {
      "left" : "tempB = -(temp - tempA - tempB);",
      "right" : "tempB = -(temp - tempA - tempB);",
      "info" : "ExpressionStatement[33861-33893]:ExpressionStatement[33926-33958]"
    }, {
      "left" : "tempA = temp;",
      "right" : "tempA = temp;",
      "info" : "ExpressionStatement[33906-33919]:ExpressionStatement[33971-33984]"
    }, {
      "left" : "temp = tempA * HEX_40000000;",
      "right" : "temp = tempA * HEX_40000000;",
      "info" : "ExpressionStatement[33933-33961]:ExpressionStatement[33998-34026]"
    }, {
      "left" : "baseA = tempA + temp - temp;",
      "right" : "baseA = tempA + temp - temp;",
      "info" : "ExpressionStatement[33974-34002]:ExpressionStatement[34039-34067]"
    }, {
      "left" : "baseB = tempB + (tempA - baseA);",
      "right" : "baseB = tempB + (tempA - baseA);",
      "info" : "ExpressionStatement[34015-34047]:ExpressionStatement[34080-34112]"
    }, {
      "left" : "epsilon = x - intFrac/1024.0;",
      "right" : "epsilon = x - intFrac/1024.0;",
      "info" : "ExpressionStatement[34061-34090]:ExpressionStatement[34126-34155]"
    }, {
      "left" : "double zb = 0.008336750013465571;",
      "right" : "double zb = 0.008336750013465571;",
      "info" : "VariableDeclarationStatement[34148-34181]:VariableDeclarationStatement[34213-34246]"
    }, {
      "left" : "zb = zb * epsilon + 0.041666663879186654;",
      "right" : "zb = zb * epsilon + 0.041666663879186654;",
      "info" : "ExpressionStatement[34190-34231]:ExpressionStatement[34255-34296]"
    }, {
      "left" : "zb = zb * epsilon + 0.16666666666745392;",
      "right" : "zb = zb * epsilon + 0.16666666666745392;",
      "info" : "ExpressionStatement[34240-34280]:ExpressionStatement[34305-34345]"
    }, {
      "left" : "zb = zb * epsilon + 0.49999999999999994;",
      "right" : "zb = zb * epsilon + 0.49999999999999994;",
      "info" : "ExpressionStatement[34289-34329]:ExpressionStatement[34354-34394]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[34338-34356]:ExpressionStatement[34403-34421]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[34365-34383]:ExpressionStatement[34430-34448]"
    }, {
      "left" : "double za = epsilon;",
      "right" : "double za = epsilon;",
      "info" : "VariableDeclarationStatement[34393-34413]:VariableDeclarationStatement[34458-34478]"
    }, {
      "left" : "double temp = za + zb;",
      "right" : "double temp = za + zb;",
      "info" : "VariableDeclarationStatement[34422-34444]:VariableDeclarationStatement[34487-34509]"
    }, {
      "left" : "zb = -(temp - za - zb);",
      "right" : "zb = -(temp - za - zb);",
      "info" : "ExpressionStatement[34453-34476]:ExpressionStatement[34518-34541]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[34485-34495]:ExpressionStatement[34550-34560]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[34505-34530]:ExpressionStatement[34570-34595]"
    }, {
      "left" : "temp = za + temp - temp;",
      "right" : "temp = za + temp - temp;",
      "info" : "ExpressionStatement[34539-34563]:ExpressionStatement[34604-34628]"
    }, {
      "left" : "zb += za - temp;",
      "right" : "zb += za - temp;",
      "info" : "ExpressionStatement[34572-34588]:ExpressionStatement[34637-34653]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[34597-34607]:ExpressionStatement[34662-34672]"
    }, {
      "left" : "double ya = za * baseA;",
      "right" : "double ya = za * baseA;",
      "info" : "VariableDeclarationStatement[34705-34728]:VariableDeclarationStatement[34770-34793]"
    }, {
      "left" : "temp = ya + za * baseB;",
      "right" : "temp = ya + za * baseB;",
      "info" : "ExpressionStatement[34791-34814]:ExpressionStatement[34856-34879]"
    }, {
      "left" : "double yb = -(temp - ya - za * baseB);",
      "right" : "double yb = -(temp - ya - za * baseB);",
      "info" : "VariableDeclarationStatement[34823-34861]:VariableDeclarationStatement[34888-34926]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34870-34880]:ExpressionStatement[34935-34945]"
    }, {
      "left" : "temp = ya + zb * baseA;",
      "right" : "temp = ya + zb * baseA;",
      "info" : "ExpressionStatement[34890-34913]:ExpressionStatement[34955-34978]"
    }, {
      "left" : "yb += -(temp - ya - zb * baseA);",
      "right" : "yb += -(temp - ya - zb * baseA);",
      "info" : "ExpressionStatement[34922-34954]:ExpressionStatement[34987-35019]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34963-34973]:ExpressionStatement[35028-35038]"
    }, {
      "left" : "temp = ya + zb * baseB;",
      "right" : "temp = ya + zb * baseB;",
      "info" : "ExpressionStatement[34983-35006]:ExpressionStatement[35048-35071]"
    }, {
      "left" : "yb += -(temp - ya - zb*baseB);",
      "right" : "yb += -(temp - ya - zb*baseB);",
      "info" : "ExpressionStatement[35015-35045]:ExpressionStatement[35080-35110]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[35054-35064]:ExpressionStatement[35119-35129]"
    }, {
      "left" : "temp = ya + baseA;",
      "right" : "temp = ya + baseA;",
      "info" : "ExpressionStatement[35138-35156]:ExpressionStatement[35203-35221]"
    }, {
      "left" : "yb += -(temp - baseA - ya);",
      "right" : "yb += -(temp - baseA - ya);",
      "info" : "ExpressionStatement[35165-35192]:ExpressionStatement[35230-35257]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[35201-35211]:ExpressionStatement[35266-35276]"
    }, {
      "left" : "temp = ya + za;",
      "right" : "temp = ya + za;",
      "info" : "ExpressionStatement[35221-35236]:ExpressionStatement[35286-35301]"
    }, {
      "left" : "yb += -(temp - ya - za);",
      "right" : "yb += -(temp - ya - za);",
      "info" : "ExpressionStatement[35312-35336]:ExpressionStatement[35377-35401]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[35345-35355]:ExpressionStatement[35410-35420]"
    }, {
      "left" : "temp = ya + baseB;",
      "right" : "temp = ya + baseB;",
      "info" : "ExpressionStatement[35365-35383]:ExpressionStatement[35430-35448]"
    }, {
      "left" : "yb += -(temp - ya - baseB);",
      "right" : "yb += -(temp - ya - baseB);",
      "info" : "ExpressionStatement[35468-35495]:ExpressionStatement[35533-35560]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[35504-35514]:ExpressionStatement[35569-35579]"
    }, {
      "left" : "temp = ya + zb;",
      "right" : "temp = ya + zb;",
      "info" : "ExpressionStatement[35524-35539]:ExpressionStatement[35589-35604]"
    }, {
      "left" : "yb += -(temp - ya - zb);",
      "right" : "yb += -(temp - ya - zb);",
      "info" : "ExpressionStatement[35615-35639]:ExpressionStatement[35680-35704]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[35648-35658]:ExpressionStatement[35713-35723]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[35668-36803]:IfStatement[35733-36868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35682-36803]:Block[35747-36868]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[35761-35785]:VariableDeclarationStatement[35826-35850]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[35798-35826]:VariableDeclarationStatement[35863-35891]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[35839-35880]:VariableDeclarationStatement[35904-35945]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[35893-35920]:VariableDeclarationStatement[35958-35985]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[35933-35961]:ExpressionStatement[35998-36026]"
    }, {
      "left" : "final double ra = ratio + temp - temp;",
      "right" : "final double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[35974-36012]:VariableDeclarationStatement[36039-36077]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[36025-36048]:VariableDeclarationStatement[36090-36113]"
    }, {
      "left" : "temp = denom * HEX_40000000;",
      "right" : "temp = denom * HEX_40000000;",
      "info" : "ExpressionStatement[36062-36090]:ExpressionStatement[36127-36155]"
    }, {
      "left" : "za = denom + temp - temp;",
      "right" : "za = denom + temp - temp;",
      "info" : "ExpressionStatement[36103-36128]:ExpressionStatement[36168-36193]"
    }, {
      "left" : "zb = denom - za;",
      "right" : "zb = denom - za;",
      "info" : "ExpressionStatement[36141-36157]:ExpressionStatement[36206-36222]"
    }, {
      "left" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "right" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "info" : "ExpressionStatement[36171-36231]:ExpressionStatement[36236-36296]"
    }, {
      "left" : "rb += yb * denomr;",
      "right" : "rb += yb * denomr;",
      "info" : "ExpressionStatement[36607-36625]:ExpressionStatement[36672-36690]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[36672-36709]:ExpressionStatement[36737-36774]"
    }, {
      "left" : "ya = -ra;",
      "right" : "ya = -ra;",
      "info" : "ExpressionStatement[36762-36771]:ExpressionStatement[36827-36836]"
    }, {
      "left" : "yb = -rb;",
      "right" : "yb = -rb;",
      "info" : "ExpressionStatement[36784-36793]:ExpressionStatement[36849-36858]"
    }, {
      "left" : "if (hiPrecOut != null)",
      "right" : "if (hiPrecOut != null)",
      "info" : "IfStatement[36813-36909]:IfStatement[36878-36974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36836-36909]:Block[36901-36974]"
    }, {
      "left" : "hiPrecOut[0] = ya;",
      "right" : "hiPrecOut[0] = ya;",
      "info" : "ExpressionStatement[36850-36868]:ExpressionStatement[36915-36933]"
    }, {
      "left" : "hiPrecOut[1] = yb;",
      "right" : "hiPrecOut[1] = yb;",
      "info" : "ExpressionStatement[36881-36899]:ExpressionStatement[36946-36964]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[36919-36934]:ReturnStatement[36984-36999]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37044-37050]:Modifier[37109-37115]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37051-37057]:Modifier[37116-37122]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[37058-37064]:PrimitiveType[37123-37129]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[37065-37068]:SimpleName[37130-37133]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[37069-37083]:SingleVariableDeclaration[37134-37148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37085-37121]:Block[37150-37186]"
    }, {
      "left" : "return log(x, null);",
      "right" : "return log(x, null);",
      "info" : "ReturnStatement[37095-37115]:ReturnStatement[37160-37180]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37368-37375]:Modifier[37433-37440]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37376-37382]:Modifier[37441-37447]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[37383-37389]:PrimitiveType[37448-37454]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[37390-37393]:SimpleName[37455-37458]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[37394-37408]:SingleVariableDeclaration[37459-37473]"
    }, {
      "left" : "final double[] hiPrec",
      "right" : "final double[] hiPrec",
      "info" : "SingleVariableDeclaration[37410-37431]:SingleVariableDeclaration[37475-37496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37433-44517]:Block[37498-44582]"
    }, {
      "left" : "if (x==0)",
      "right" : "if (x==0)",
      "info" : "IfStatement[37443-37541]:IfStatement[37508-37606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37453-37541]:Block[37518-37606]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[37499-37531]:ReturnStatement[37564-37596]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[37550-37589]:VariableDeclarationStatement[37615-37654]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "right" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "info" : "IfStatement[37661-37899]:IfStatement[37726-37964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37710-37899]:Block[37775-37964]"
    }, {
      "left" : "if (x != 0.0)",
      "right" : "if (x != 0.0)",
      "info" : "IfStatement[37724-37889]:IfStatement[37789-37954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37738-37889]:Block[37803-37954]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37756-37839]:IfStatement[37821-37904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37776-37839]:Block[37841-37904]"
    }, {
      "left" : "hiPrec[0] = Double.NaN;",
      "right" : "hiPrec[0] = Double.NaN;",
      "info" : "ExpressionStatement[37798-37821]:ExpressionStatement[37863-37886]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[37857-37875]:ReturnStatement[37922-37940]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[37966-38160]:IfStatement[38031-38225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38001-38160]:Block[38066-38225]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[38015-38104]:IfStatement[38080-38169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38035-38104]:Block[38100-38169]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[38053-38090]:ExpressionStatement[38118-38155]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[38118-38150]:ReturnStatement[38183-38215]"
    }, {
      "left" : "int exp = (int)(bits >> 52)-1023;",
      "right" : "int exp = (int)(bits >> 52)-1023;",
      "info" : "VariableDeclarationStatement[38205-38238]:VariableDeclarationStatement[38270-38303]"
    }, {
      "left" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "right" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "info" : "IfStatement[38248-38749]:IfStatement[38313-38814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38287-38749]:Block[38352-38814]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[38327-38542]:IfStatement[38392-38607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38339-38542]:Block[38404-38607]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[38381-38478]:IfStatement[38446-38543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38401-38478]:Block[38466-38543]"
    }, {
      "left" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "info" : "ExpressionStatement[38423-38460]:ExpressionStatement[38488-38525]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[38496-38528]:ReturnStatement[38561-38593]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[38606-38617]:ExpressionStatement[38671-38682]"
    }, {
      "left" : "while ( (bits & 0x0010000000000000L) == 0)",
      "right" : "while ( (bits & 0x0010000000000000L) == 0)",
      "info" : "WhileStatement[38630-38739]:WhileStatement[38695-38804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38673-38739]:Block[38738-38804]"
    }, {
      "left" : "--exp;",
      "right" : "--exp;",
      "info" : "ExpressionStatement[38691-38697]:ExpressionStatement[38756-38762]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[38714-38725]:ExpressionStatement[38779-38790]"
    }, {
      "left" : "if (exp == -1 || exp == 0)",
      "right" : "if (exp == -1 || exp == 0)",
      "info" : "IfStatement[38760-40581]:IfStatement[38825-40646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38787-40581]:Block[38852-40646]"
    }, {
      "left" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "right" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "info" : "IfStatement[38801-40571]:IfStatement[38866-40636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38845-40571]:Block[38910-40636]"
    }, {
      "left" : "double xa = x - 1.0;",
      "right" : "double xa = x - 1.0;",
      "info" : "VariableDeclarationStatement[39073-39093]:VariableDeclarationStatement[39138-39158]"
    }, {
      "left" : "double xb = xa - x + 1.0;",
      "right" : "double xb = xa - x + 1.0;",
      "info" : "VariableDeclarationStatement[39110-39135]:VariableDeclarationStatement[39175-39200]"
    }, {
      "left" : "double tmp = xa * HEX_40000000;",
      "right" : "double tmp = xa * HEX_40000000;",
      "info" : "VariableDeclarationStatement[39152-39183]:VariableDeclarationStatement[39217-39248]"
    }, {
      "left" : "double aa = xa + tmp - tmp;",
      "right" : "double aa = xa + tmp - tmp;",
      "info" : "VariableDeclarationStatement[39200-39227]:VariableDeclarationStatement[39265-39292]"
    }, {
      "left" : "double ab = xa - aa;",
      "right" : "double ab = xa - aa;",
      "info" : "VariableDeclarationStatement[39244-39264]:VariableDeclarationStatement[39309-39329]"
    }, {
      "left" : "xa = aa;",
      "right" : "xa = aa;",
      "info" : "ExpressionStatement[39281-39289]:ExpressionStatement[39346-39354]"
    }, {
      "left" : "xb = ab;",
      "right" : "xb = ab;",
      "info" : "ExpressionStatement[39306-39314]:ExpressionStatement[39371-39379]"
    }, {
      "left" : "final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];",
      "right" : "final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];",
      "info" : "VariableDeclarationStatement[39332-39401]:VariableDeclarationStatement[39397-39466]"
    }, {
      "left" : "double ya = lnCoef_last[0];",
      "right" : "double ya = lnCoef_last[0];",
      "info" : "VariableDeclarationStatement[39418-39445]:VariableDeclarationStatement[39483-39510]"
    }, {
      "left" : "double yb = lnCoef_last[1];",
      "right" : "double yb = lnCoef_last[1];",
      "info" : "VariableDeclarationStatement[39462-39489]:VariableDeclarationStatement[39527-39554]"
    }, {
      "left" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[39507-40247]:ForStatement[39572-40312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39559-40247]:Block[39624-40312]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[39626-39639]:ExpressionStatement[39691-39704]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[39660-39693]:ExpressionStatement[39725-39758]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[39760-39784]:ExpressionStatement[39825-39849]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39805-39825]:ExpressionStatement[39870-39890]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39846-39864]:ExpressionStatement[39911-39929]"
    }, {
      "left" : "final double[] lnCoef_i = LN_QUICK_COEF[i];",
      "right" : "final double[] lnCoef_i = LN_QUICK_COEF[i];",
      "info" : "VariableDeclarationStatement[39937-39980]:VariableDeclarationStatement[40002-40045]"
    }, {
      "left" : "aa = ya + lnCoef_i[0];",
      "right" : "aa = ya + lnCoef_i[0];",
      "info" : "ExpressionStatement[40001-40023]:ExpressionStatement[40066-40088]"
    }, {
      "left" : "ab = yb + lnCoef_i[1];",
      "right" : "ab = yb + lnCoef_i[1];",
      "info" : "ExpressionStatement[40044-40066]:ExpressionStatement[40109-40131]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[40125-40149]:ExpressionStatement[40190-40214]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[40170-40190]:ExpressionStatement[40235-40255]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[40211-40229]:ExpressionStatement[40276-40294]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[40306-40319]:ExpressionStatement[40371-40384]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[40336-40369]:ExpressionStatement[40401-40434]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[40428-40452]:ExpressionStatement[40493-40517]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[40469-40489]:ExpressionStatement[40534-40554]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[40506-40524]:ExpressionStatement[40571-40589]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[40542-40557]:ReturnStatement[40607-40622]"
    }, {
      "left" : "final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "right" : "final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "info" : "VariableDeclarationStatement[40674-40753]:VariableDeclarationStatement[40739-40818]"
    }, {
      "left" : "final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));",
      "right" : "final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));",
      "info" : "VariableDeclarationStatement[41061-41156]:VariableDeclarationStatement[41126-41221]"
    }, {
      "left" : "double lnza = 0.0;",
      "right" : "double lnza = 0.0;",
      "info" : "VariableDeclarationStatement[41166-41184]:VariableDeclarationStatement[41231-41249]"
    }, {
      "left" : "double lnzb = 0.0;",
      "right" : "double lnzb = 0.0;",
      "info" : "VariableDeclarationStatement[41193-41211]:VariableDeclarationStatement[41258-41276]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[41221-43462]:IfStatement[41286-43527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41241-43005]:Block[41306-43070]"
    }, {
      "left" : "double tmp = epsilon * HEX_40000000;",
      "right" : "double tmp = epsilon * HEX_40000000;",
      "info" : "VariableDeclarationStatement[41292-41328]:VariableDeclarationStatement[41357-41393]"
    }, {
      "left" : "double aa = epsilon + tmp - tmp;",
      "right" : "double aa = epsilon + tmp - tmp;",
      "info" : "VariableDeclarationStatement[41341-41373]:VariableDeclarationStatement[41406-41438]"
    }, {
      "left" : "double ab = epsilon - aa;",
      "right" : "double ab = epsilon - aa;",
      "info" : "VariableDeclarationStatement[41386-41411]:VariableDeclarationStatement[41451-41476]"
    }, {
      "left" : "double xa = aa;",
      "right" : "double xa = aa;",
      "info" : "VariableDeclarationStatement[41424-41439]:VariableDeclarationStatement[41489-41504]"
    }, {
      "left" : "double xb = ab;",
      "right" : "double xb = ab;",
      "info" : "VariableDeclarationStatement[41452-41467]:VariableDeclarationStatement[41517-41532]"
    }, {
      "left" : "final double numer = bits & 0x3ffffffffffL;",
      "right" : "final double numer = bits & 0x3ffffffffffL;",
      "info" : "VariableDeclarationStatement[41553-41596]:VariableDeclarationStatement[41618-41661]"
    }, {
      "left" : "final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);",
      "right" : "final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);",
      "info" : "VariableDeclarationStatement[41609-41674]:VariableDeclarationStatement[41674-41739]"
    }, {
      "left" : "aa = numer - xa*denom - xb * denom;",
      "right" : "aa = numer - xa*denom - xb * denom;",
      "info" : "ExpressionStatement[41687-41722]:ExpressionStatement[41752-41787]"
    }, {
      "left" : "xb += aa / denom;",
      "right" : "xb += aa / denom;",
      "info" : "ExpressionStatement[41735-41752]:ExpressionStatement[41800-41817]"
    }, {
      "left" : "final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];",
      "right" : "final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];",
      "info" : "VariableDeclarationStatement[41812-41883]:VariableDeclarationStatement[41877-41948]"
    }, {
      "left" : "double ya = lnCoef_last[0];",
      "right" : "double ya = lnCoef_last[0];",
      "info" : "VariableDeclarationStatement[41896-41923]:VariableDeclarationStatement[41961-41988]"
    }, {
      "left" : "double yb = lnCoef_last[1];",
      "right" : "double yb = lnCoef_last[1];",
      "info" : "VariableDeclarationStatement[41936-41963]:VariableDeclarationStatement[42001-42028]"
    }, {
      "left" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[41977-42658]:ForStatement[42042-42723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42031-42658]:Block[42096-42723]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[42090-42103]:ExpressionStatement[42155-42168]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[42120-42153]:ExpressionStatement[42185-42218]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[42212-42236]:ExpressionStatement[42277-42301]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[42253-42273]:ExpressionStatement[42318-42338]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[42290-42308]:ExpressionStatement[42355-42373]"
    }, {
      "left" : "final double[] lnCoef_i = LN_HI_PREC_COEF[i];",
      "right" : "final double[] lnCoef_i = LN_HI_PREC_COEF[i];",
      "info" : "VariableDeclarationStatement[42374-42419]:VariableDeclarationStatement[42439-42484]"
    }, {
      "left" : "aa = ya + lnCoef_i[0];",
      "right" : "aa = ya + lnCoef_i[0];",
      "info" : "ExpressionStatement[42436-42458]:ExpressionStatement[42501-42523]"
    }, {
      "left" : "ab = yb + lnCoef_i[1];",
      "right" : "ab = yb + lnCoef_i[1];",
      "info" : "ExpressionStatement[42475-42497]:ExpressionStatement[42540-42562]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[42548-42572]:ExpressionStatement[42613-42637]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[42589-42609]:ExpressionStatement[42654-42674]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[42626-42644]:ExpressionStatement[42691-42709]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[42709-42722]:ExpressionStatement[42774-42787]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[42735-42768]:ExpressionStatement[42800-42833]"
    }, {
      "left" : "lnza = aa + ab;",
      "right" : "lnza = aa + ab;",
      "info" : "ExpressionStatement[42942-42957]:ExpressionStatement[43007-43022]"
    }, {
      "left" : "lnzb = -(lnza - aa - ab);",
      "right" : "lnzb = -(lnza - aa - ab);",
      "info" : "ExpressionStatement[42970-42995]:ExpressionStatement[43035-43060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43011-43462]:Block[43076-43527]"
    }, {
      "left" : "lnza = -0.16624882440418567;",
      "right" : "lnza = -0.16624882440418567;",
      "info" : "ExpressionStatement[43136-43164]:ExpressionStatement[43201-43229]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "right" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "info" : "ExpressionStatement[43177-43221]:ExpressionStatement[43242-43286]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "right" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "info" : "ExpressionStatement[43234-43278]:ExpressionStatement[43299-43343]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "right" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "info" : "ExpressionStatement[43291-43334]:ExpressionStatement[43356-43399]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.5;",
      "right" : "lnza = lnza * epsilon + -0.5;",
      "info" : "ExpressionStatement[43347-43376]:ExpressionStatement[43412-43441]"
    }, {
      "left" : "lnza = lnza * epsilon + 1.0;",
      "right" : "lnza = lnza * epsilon + 1.0;",
      "info" : "ExpressionStatement[43389-43417]:ExpressionStatement[43454-43482]"
    }, {
      "left" : "lnza = lnza * epsilon;",
      "right" : "lnza = lnza * epsilon;",
      "info" : "ExpressionStatement[43430-43452]:ExpressionStatement[43495-43517]"
    }, {
      "left" : "double a = LN_2_A*exp;",
      "right" : "double a = LN_2_A*exp;",
      "info" : "VariableDeclarationStatement[43890-43912]:VariableDeclarationStatement[43955-43977]"
    }, {
      "left" : "double b = 0.0;",
      "right" : "double b = 0.0;",
      "info" : "VariableDeclarationStatement[43921-43936]:VariableDeclarationStatement[43986-44001]"
    }, {
      "left" : "double c = a+lnm[0];",
      "right" : "double c = a+lnm[0];",
      "info" : "VariableDeclarationStatement[43945-43965]:VariableDeclarationStatement[44010-44030]"
    }, {
      "left" : "double d = -(c-a-lnm[0]);",
      "right" : "double d = -(c-a-lnm[0]);",
      "info" : "VariableDeclarationStatement[43974-43999]:VariableDeclarationStatement[44039-44064]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44008-44014]:ExpressionStatement[44073-44079]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44023-44033]:ExpressionStatement[44088-44098]"
    }, {
      "left" : "c = a + lnza;",
      "right" : "c = a + lnza;",
      "info" : "ExpressionStatement[44043-44056]:ExpressionStatement[44108-44121]"
    }, {
      "left" : "d = -(c - a - lnza);",
      "right" : "d = -(c - a - lnza);",
      "info" : "ExpressionStatement[44065-44085]:ExpressionStatement[44130-44150]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44094-44100]:ExpressionStatement[44159-44165]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44109-44119]:ExpressionStatement[44174-44184]"
    }, {
      "left" : "c = a + LN_2_B*exp;",
      "right" : "c = a + LN_2_B*exp;",
      "info" : "ExpressionStatement[44129-44148]:ExpressionStatement[44194-44213]"
    }, {
      "left" : "d = -(c - a - LN_2_B*exp);",
      "right" : "d = -(c - a - LN_2_B*exp);",
      "info" : "ExpressionStatement[44157-44183]:ExpressionStatement[44222-44248]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44192-44198]:ExpressionStatement[44257-44263]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44207-44217]:ExpressionStatement[44272-44282]"
    }, {
      "left" : "c = a + lnm[1];",
      "right" : "c = a + lnm[1];",
      "info" : "ExpressionStatement[44227-44242]:ExpressionStatement[44292-44307]"
    }, {
      "left" : "d = -(c - a - lnm[1]);",
      "right" : "d = -(c - a - lnm[1]);",
      "info" : "ExpressionStatement[44251-44273]:ExpressionStatement[44316-44338]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44282-44288]:ExpressionStatement[44347-44353]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44297-44307]:ExpressionStatement[44362-44372]"
    }, {
      "left" : "c = a + lnzb;",
      "right" : "c = a + lnzb;",
      "info" : "ExpressionStatement[44317-44330]:ExpressionStatement[44382-44395]"
    }, {
      "left" : "d = -(c - a - lnzb);",
      "right" : "d = -(c - a - lnzb);",
      "info" : "ExpressionStatement[44339-44359]:ExpressionStatement[44404-44424]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44368-44374]:ExpressionStatement[44433-44439]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44383-44393]:ExpressionStatement[44448-44458]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[44403-44488]:IfStatement[44468-44553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44423-44488]:Block[44488-44553]"
    }, {
      "left" : "hiPrec[0] = a;",
      "right" : "hiPrec[0] = a;",
      "info" : "ExpressionStatement[44437-44451]:ExpressionStatement[44502-44516]"
    }, {
      "left" : "hiPrec[1] = b;",
      "right" : "hiPrec[1] = b;",
      "info" : "ExpressionStatement[44464-44478]:ExpressionStatement[44529-44543]"
    }, {
      "left" : "return a + b;",
      "right" : "return a + b;",
      "info" : "ReturnStatement[44498-44511]:ReturnStatement[44563-44576]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44633-44639]:Modifier[44698-44704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44640-44646]:Modifier[44705-44711]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[44647-44653]:PrimitiveType[44712-44718]"
    }, {
      "left" : "log1p",
      "right" : "log1p",
      "info" : "SimpleName[44654-44659]:SimpleName[44719-44724]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[44660-44674]:SingleVariableDeclaration[44725-44739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44676-45680]:Block[44741-45745]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[44686-44755]:IfStatement[44751-44820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44699-44755]:Block[44764-44820]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[44713-44745]:ReturnStatement[44778-44810]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[44765-44856]:IfStatement[44830-44921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44800-44856]:Block[44865-44921]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[44814-44846]:ReturnStatement[44879-44911]"
    }, {
      "left" : "if (x > 1e-6 ||\n            x < -1e-6)",
      "right" : "if (x > 1e-6 ||\n            x < -1e-6)",
      "info" : "IfStatement[44866-45674]:IfStatement[44931-45739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44905-45498]:Block[44970-45563]"
    }, {
      "left" : "final double xpa = 1 + x;",
      "right" : "final double xpa = 1 + x;",
      "info" : "VariableDeclarationStatement[44919-44944]:VariableDeclarationStatement[44984-45009]"
    }, {
      "left" : "final double xpb = -(xpa - 1 - x);",
      "right" : "final double xpb = -(xpa - 1 - x);",
      "info" : "VariableDeclarationStatement[44957-44991]:VariableDeclarationStatement[45022-45056]"
    }, {
      "left" : "final double[] hiPrec = new double[2];",
      "right" : "final double[] hiPrec = new double[2];",
      "info" : "VariableDeclarationStatement[45005-45043]:VariableDeclarationStatement[45070-45108]"
    }, {
      "left" : "final double lores = log(xpa, hiPrec);",
      "right" : "final double lores = log(xpa, hiPrec);",
      "info" : "VariableDeclarationStatement[45056-45094]:VariableDeclarationStatement[45121-45159]"
    }, {
      "left" : "if (Double.isInfinite(lores))",
      "right" : "if (Double.isInfinite(lores))",
      "info" : "IfStatement[45107-45225]:IfStatement[45172-45290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45137-45225]:Block[45202-45290]"
    }, {
      "left" : "return lores;",
      "right" : "return lores;",
      "info" : "ReturnStatement[45198-45211]:ReturnStatement[45263-45276]"
    }, {
      "left" : "final double fx1 = xpb / xpa;",
      "right" : "final double fx1 = xpb / xpa;",
      "info" : "VariableDeclarationStatement[45351-45380]:VariableDeclarationStatement[45416-45445]"
    }, {
      "left" : "final double epsilon = 0.5 * fx1 + 1;",
      "right" : "final double epsilon = 0.5 * fx1 + 1;",
      "info" : "VariableDeclarationStatement[45393-45430]:VariableDeclarationStatement[45458-45495]"
    }, {
      "left" : "return epsilon * fx1 + hiPrec[1] + hiPrec[0];",
      "right" : "return epsilon * fx1 + hiPrec[1] + hiPrec[0];",
      "info" : "ReturnStatement[45443-45488]:ReturnStatement[45508-45553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45504-45674]:Block[45569-45739]"
    }, {
      "left" : "final double y = (x * F_1_3 - F_1_2) * x + 1;",
      "right" : "final double y = (x * F_1_3 - F_1_2) * x + 1;",
      "info" : "VariableDeclarationStatement[45593-45638]:VariableDeclarationStatement[45658-45703]"
    }, {
      "left" : "return y * x;",
      "right" : "return y * x;",
      "info" : "ReturnStatement[45651-45664]:ReturnStatement[45716-45729]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45782-45788]:Modifier[45847-45853]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45789-45795]:Modifier[45854-45860]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[45796-45802]:PrimitiveType[45861-45867]"
    }, {
      "left" : "log10",
      "right" : "log10",
      "info" : "SimpleName[45803-45808]:SimpleName[45868-45873]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[45809-45823]:SingleVariableDeclaration[45874-45888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45825-46382]:Block[45890-46447]"
    }, {
      "left" : "final double hiPrec[] = new double[2];",
      "right" : "final double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[45835-45873]:VariableDeclarationStatement[45900-45938]"
    }, {
      "left" : "final double lores = log(x, hiPrec);",
      "right" : "final double lores = log(x, hiPrec);",
      "info" : "VariableDeclarationStatement[45883-45919]:VariableDeclarationStatement[45948-45984]"
    }, {
      "left" : "if (Double.isInfinite(lores))",
      "right" : "if (Double.isInfinite(lores))",
      "info" : "IfStatement[45928-46037]:IfStatement[45993-46102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45957-46037]:Block[46022-46102]"
    }, {
      "left" : "return lores;",
      "right" : "return lores;",
      "info" : "ReturnStatement[46014-46027]:ReturnStatement[46079-46092]"
    }, {
      "left" : "final double tmp = hiPrec[0] * HEX_40000000;",
      "right" : "final double tmp = hiPrec[0] * HEX_40000000;",
      "info" : "VariableDeclarationStatement[46047-46091]:VariableDeclarationStatement[46112-46156]"
    }, {
      "left" : "final double lna = hiPrec[0] + tmp - tmp;",
      "right" : "final double lna = hiPrec[0] + tmp - tmp;",
      "info" : "VariableDeclarationStatement[46100-46141]:VariableDeclarationStatement[46165-46206]"
    }, {
      "left" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "right" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "info" : "VariableDeclarationStatement[46150-46197]:VariableDeclarationStatement[46215-46262]"
    }, {
      "left" : "final double rln10a = 0.4342944622039795;",
      "right" : "final double rln10a = 0.4342944622039795;",
      "info" : "VariableDeclarationStatement[46207-46248]:VariableDeclarationStatement[46272-46313]"
    }, {
      "left" : "final double rln10b = 1.9699272335463627E-8;",
      "right" : "final double rln10b = 1.9699272335463627E-8;",
      "info" : "VariableDeclarationStatement[46257-46301]:VariableDeclarationStatement[46322-46366]"
    }, {
      "left" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "right" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "info" : "ReturnStatement[46311-46376]:ReturnStatement[46376-46441]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47141-47147]:Modifier[47206-47212]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47148-47154]:Modifier[47213-47219]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[47155-47161]:PrimitiveType[47220-47226]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[47162-47165]:SimpleName[47227-47230]"
    }, {
      "left" : "double base",
      "right" : "double base",
      "info" : "SingleVariableDeclaration[47166-47177]:SingleVariableDeclaration[47231-47242]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[47179-47187]:SingleVariableDeclaration[47244-47252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47189-47231]:Block[47254-47296]"
    }, {
      "left" : "return log(x) / log(base);",
      "right" : "return log(x) / log(base);",
      "info" : "ReturnStatement[47199-47225]:ReturnStatement[47264-47290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51604-51610]:Modifier[51669-51675]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51611-51617]:Modifier[51676-51682]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[51618-51624]:PrimitiveType[51683-51689]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[51625-51628]:SimpleName[51690-51693]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[51629-51637]:SingleVariableDeclaration[51694-51702]"
    }, {
      "left" : "int e",
      "right" : "int e",
      "info" : "SingleVariableDeclaration[51639-51644]:SingleVariableDeclaration[51704-51709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51646-53940]:Block[51711-54005]"
    }, {
      "left" : "if (e == 0)",
      "right" : "if (e == 0)",
      "info" : "IfStatement[51657-51777]:IfStatement[51722-51842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51669-51704]:Block[51734-51769]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[51683-51694]:ReturnStatement[51748-51759]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[51710-51777]:IfStatement[51775-51842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51721-51777]:Block[51786-51842]"
    }, {
      "left" : "e = -e;",
      "right" : "e = -e;",
      "info" : "ExpressionStatement[51735-51742]:ExpressionStatement[51800-51807]"
    }, {
      "left" : "d = 1.0 / d;",
      "right" : "d = 1.0 / d;",
      "info" : "ExpressionStatement[51755-51767]:ExpressionStatement[51820-51832]"
    }, {
      "left" : "final int splitFactor = 0x8000001;",
      "right" : "final int splitFactor = 0x8000001;",
      "info" : "VariableDeclarationStatement[51947-51981]:VariableDeclarationStatement[52012-52046]"
    }, {
      "left" : "final double cd       = splitFactor * d;",
      "right" : "final double cd       = splitFactor * d;",
      "info" : "VariableDeclarationStatement[51990-52030]:VariableDeclarationStatement[52055-52095]"
    }, {
      "left" : "final double d1High   = cd - (cd - d);",
      "right" : "final double d1High   = cd - (cd - d);",
      "info" : "VariableDeclarationStatement[52039-52077]:VariableDeclarationStatement[52104-52142]"
    }, {
      "left" : "final double d1Low    = d - d1High;",
      "right" : "final double d1Low    = d - d1High;",
      "info" : "VariableDeclarationStatement[52086-52121]:VariableDeclarationStatement[52151-52186]"
    }, {
      "left" : "double resultHigh = 1;",
      "right" : "double resultHigh = 1;",
      "info" : "VariableDeclarationStatement[52157-52179]:VariableDeclarationStatement[52222-52244]"
    }, {
      "left" : "double resultLow  = 0;",
      "right" : "double resultLow  = 0;",
      "info" : "VariableDeclarationStatement[52188-52210]:VariableDeclarationStatement[52253-52275]"
    }, {
      "left" : "double d2p     = d;",
      "right" : "double d2p     = d;",
      "info" : "VariableDeclarationStatement[52238-52257]:VariableDeclarationStatement[52303-52322]"
    }, {
      "left" : "double d2pHigh = d1High;",
      "right" : "double d2pHigh = d1High;",
      "info" : "VariableDeclarationStatement[52266-52290]:VariableDeclarationStatement[52331-52355]"
    }, {
      "left" : "double d2pLow  = d1Low;",
      "right" : "double d2pLow  = d1Low;",
      "info" : "VariableDeclarationStatement[52299-52322]:VariableDeclarationStatement[52364-52387]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[52332-53893]:WhileStatement[52397-53958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52347-53893]:Block[52412-53958]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[52362-53080]:IfStatement[52427-53145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52382-53080]:Block[52447-53145]"
    }, {
      "left" : "final double tmpHigh = resultHigh * d2p;",
      "right" : "final double tmpHigh = resultHigh * d2p;",
      "info" : "VariableDeclarationStatement[52630-52670]:VariableDeclarationStatement[52695-52735]"
    }, {
      "left" : "final double cRH     = splitFactor * resultHigh;",
      "right" : "final double cRH     = splitFactor * resultHigh;",
      "info" : "VariableDeclarationStatement[52687-52735]:VariableDeclarationStatement[52752-52800]"
    }, {
      "left" : "final double rHH     = cRH - (cRH - resultHigh);",
      "right" : "final double rHH     = cRH - (cRH - resultHigh);",
      "info" : "VariableDeclarationStatement[52752-52800]:VariableDeclarationStatement[52817-52865]"
    }, {
      "left" : "final double rHL     = resultHigh - rHH;",
      "right" : "final double rHL     = resultHigh - rHH;",
      "info" : "VariableDeclarationStatement[52817-52857]:VariableDeclarationStatement[52882-52922]"
    }, {
      "left" : "final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);",
      "right" : "final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);",
      "info" : "VariableDeclarationStatement[52874-52973]:VariableDeclarationStatement[52939-53038]"
    }, {
      "left" : "resultHigh = tmpHigh;",
      "right" : "resultHigh = tmpHigh;",
      "info" : "ExpressionStatement[52990-53011]:ExpressionStatement[53055-53076]"
    }, {
      "left" : "resultLow  = resultLow * d2p + tmpLow;",
      "right" : "resultLow  = resultLow * d2p + tmpLow;",
      "info" : "ExpressionStatement[53028-53066]:ExpressionStatement[53093-53131]"
    }, {
      "left" : "final double tmpHigh = d2pHigh * d2p;",
      "right" : "final double tmpHigh = d2pHigh * d2p;",
      "info" : "VariableDeclarationStatement[53314-53351]:VariableDeclarationStatement[53379-53416]"
    }, {
      "left" : "final double cD2pH   = splitFactor * d2pHigh;",
      "right" : "final double cD2pH   = splitFactor * d2pHigh;",
      "info" : "VariableDeclarationStatement[53364-53409]:VariableDeclarationStatement[53429-53474]"
    }, {
      "left" : "final double d2pHH   = cD2pH - (cD2pH - d2pHigh);",
      "right" : "final double d2pHH   = cD2pH - (cD2pH - d2pHigh);",
      "info" : "VariableDeclarationStatement[53422-53471]:VariableDeclarationStatement[53487-53536]"
    }, {
      "left" : "final double d2pHL   = d2pHigh - d2pHH;",
      "right" : "final double d2pHL   = d2pHigh - d2pHH;",
      "info" : "VariableDeclarationStatement[53484-53523]:VariableDeclarationStatement[53549-53588]"
    }, {
      "left" : "final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);",
      "right" : "final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);",
      "info" : "VariableDeclarationStatement[53536-53643]:VariableDeclarationStatement[53601-53708]"
    }, {
      "left" : "final double cTmpH   = splitFactor * tmpHigh;",
      "right" : "final double cTmpH   = splitFactor * tmpHigh;",
      "info" : "VariableDeclarationStatement[53656-53701]:VariableDeclarationStatement[53721-53766]"
    }, {
      "left" : "d2pHigh = cTmpH - (cTmpH - tmpHigh);",
      "right" : "d2pHigh = cTmpH - (cTmpH - tmpHigh);",
      "info" : "ExpressionStatement[53714-53750]:ExpressionStatement[53779-53815]"
    }, {
      "left" : "d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);",
      "right" : "d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);",
      "info" : "ExpressionStatement[53763-53817]:ExpressionStatement[53828-53882]"
    }, {
      "left" : "d2p     = d2pHigh + d2pLow;",
      "right" : "d2p     = d2pHigh + d2pLow;",
      "info" : "ExpressionStatement[53830-53857]:ExpressionStatement[53895-53922]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[53871-53882]:ExpressionStatement[53936-53947]"
    }, {
      "left" : "return resultHigh + resultLow;",
      "right" : "return resultHigh + resultLow;",
      "info" : "ReturnStatement[53903-53933]:ReturnStatement[53968-53998]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54126-54133]:Modifier[54191-54198]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54134-54140]:Modifier[54199-54205]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[54141-54147]:PrimitiveType[54206-54212]"
    }, {
      "left" : "polySine",
      "right" : "polySine",
      "info" : "SimpleName[54148-54156]:SimpleName[54213-54221]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[54157-54171]:SingleVariableDeclaration[54222-54236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54177-54463]:Block[54242-54528]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[54187-54203]:VariableDeclarationStatement[54252-54268]"
    }, {
      "left" : "double p = 2.7553817452272217E-6;",
      "right" : "double p = 2.7553817452272217E-6;",
      "info" : "VariableDeclarationStatement[54213-54246]:VariableDeclarationStatement[54278-54311]"
    }, {
      "left" : "p = p * x2 + -1.9841269659586505E-4;",
      "right" : "p = p * x2 + -1.9841269659586505E-4;",
      "info" : "ExpressionStatement[54255-54291]:ExpressionStatement[54320-54356]"
    }, {
      "left" : "p = p * x2 + 0.008333333333329196;",
      "right" : "p = p * x2 + 0.008333333333329196;",
      "info" : "ExpressionStatement[54300-54334]:ExpressionStatement[54365-54399]"
    }, {
      "left" : "p = p * x2 + -0.16666666666666666;",
      "right" : "p = p * x2 + -0.16666666666666666;",
      "info" : "ExpressionStatement[54343-54377]:ExpressionStatement[54408-54442]"
    }, {
      "left" : "p = p * x2 * x;",
      "right" : "p = p * x2 * x;",
      "info" : "ExpressionStatement[54423-54438]:ExpressionStatement[54488-54503]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[54448-54457]:ReturnStatement[54513-54522]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54649-54656]:Modifier[54714-54721]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54657-54663]:Modifier[54722-54728]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[54664-54670]:PrimitiveType[54729-54735]"
    }, {
      "left" : "polyCosine",
      "right" : "polyCosine",
      "info" : "SimpleName[54671-54681]:SimpleName[54736-54746]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[54682-54690]:SingleVariableDeclaration[54747-54755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54692-54933]:Block[54757-54998]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[54702-54718]:VariableDeclarationStatement[54767-54783]"
    }, {
      "left" : "double p = 2.479773539153719E-5;",
      "right" : "double p = 2.479773539153719E-5;",
      "info" : "VariableDeclarationStatement[54728-54760]:VariableDeclarationStatement[54793-54825]"
    }, {
      "left" : "p = p * x2 + -0.0013888888689039883;",
      "right" : "p = p * x2 + -0.0013888888689039883;",
      "info" : "ExpressionStatement[54769-54805]:ExpressionStatement[54834-54870]"
    }, {
      "left" : "p = p * x2 + 0.041666666666621166;",
      "right" : "p = p * x2 + 0.041666666666621166;",
      "info" : "ExpressionStatement[54814-54848]:ExpressionStatement[54879-54913]"
    }, {
      "left" : "p = p * x2 + -0.49999999999999994;",
      "right" : "p = p * x2 + -0.49999999999999994;",
      "info" : "ExpressionStatement[54857-54891]:ExpressionStatement[54922-54956]"
    }, {
      "left" : "p *= x2;",
      "right" : "p *= x2;",
      "info" : "ExpressionStatement[54900-54908]:ExpressionStatement[54965-54973]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[54918-54927]:ReturnStatement[54983-54992]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55222-55229]:Modifier[55287-55294]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55230-55236]:Modifier[55295-55301]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[55237-55243]:PrimitiveType[55302-55308]"
    }, {
      "left" : "sinQ",
      "right" : "sinQ",
      "info" : "SimpleName[55244-55248]:SimpleName[55309-55313]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[55249-55258]:SingleVariableDeclaration[55314-55323]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[55260-55269]:SingleVariableDeclaration[55325-55334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55271-58196]:Block[55336-58261]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[55281-55316]:VariableDeclarationStatement[55346-55381]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHS[idx];",
      "right" : "final double epsilon = xa - EIGHTHS[idx];",
      "info" : "VariableDeclarationStatement[55325-55366]:VariableDeclarationStatement[55390-55431]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[55414-55453]:VariableDeclarationStatement[55479-55518]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[55462-55501]:VariableDeclarationStatement[55527-55566]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[55510-55551]:VariableDeclarationStatement[55575-55616]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[55560-55601]:VariableDeclarationStatement[55625-55666]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[55668-55693]:VariableDeclarationStatement[55733-55758]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[55702-55737]:VariableDeclarationStatement[55767-55802]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[55746-55773]:VariableDeclarationStatement[55811-55838]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[55782-55825]:VariableDeclarationStatement[55847-55890]"
    }, {
      "left" : "final double temp = sinEpsA * HEX_40000000;",
      "right" : "final double temp = sinEpsA * HEX_40000000;",
      "info" : "VariableDeclarationStatement[55874-55917]:VariableDeclarationStatement[55939-55982]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[55926-55965]:VariableDeclarationStatement[55991-56030]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[55974-56002]:ExpressionStatement[56039-56067]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[56011-56027]:ExpressionStatement[56076-56092]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[56092-56106]:VariableDeclarationStatement[56157-56171]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[56913-56926]:VariableDeclarationStatement[56978-56991]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[56935-56948]:VariableDeclarationStatement[57000-57013]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[56958-56975]:VariableDeclarationStatement[57023-57040]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[56984-57001]:VariableDeclarationStatement[57049-57066]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[57010-57034]:VariableDeclarationStatement[57075-57099]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[57043-57049]:ExpressionStatement[57108-57114]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[57058-57068]:ExpressionStatement[57123-57133]"
    }, {
      "left" : "t = costA * sinEpsA;",
      "right" : "t = costA * sinEpsA;",
      "info" : "ExpressionStatement[57078-57098]:ExpressionStatement[57143-57163]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[57107-57117]:ExpressionStatement[57172-57182]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[57126-57143]:ExpressionStatement[57191-57208]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[57152-57158]:ExpressionStatement[57217-57223]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[57167-57177]:ExpressionStatement[57232-57242]"
    }, {
      "left" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "right" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "info" : "ExpressionStatement[57187-57229]:ExpressionStatement[57252-57294]"
    }, {
      "left" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "right" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "info" : "ExpressionStatement[57435-57503]:ExpressionStatement[57500-57568]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[57875-58141]:IfStatement[57940-58206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57890-58141]:Block[57955-58206]"
    }, {
      "left" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "right" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "info" : "ExpressionStatement[57904-58010]:ExpressionStatement[57969-58075]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[58049-58059]:ExpressionStatement[58114-58124]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[58072-58089]:ExpressionStatement[58137-58154]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[58102-58108]:ExpressionStatement[58167-58173]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[58121-58131]:ExpressionStatement[58186-58196]"
    }, {
      "left" : "result = a + b;",
      "right" : "result = a + b;",
      "info" : "ExpressionStatement[58151-58166]:ExpressionStatement[58216-58231]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58176-58190]:ReturnStatement[58241-58255]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58509-58516]:Modifier[58574-58581]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58517-58523]:Modifier[58582-58588]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[58524-58530]:PrimitiveType[58589-58595]"
    }, {
      "left" : "cosQ",
      "right" : "cosQ",
      "info" : "SimpleName[58531-58535]:SimpleName[58596-58600]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[58536-58545]:SingleVariableDeclaration[58601-58610]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[58547-58556]:SingleVariableDeclaration[58612-58621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58558-58790]:Block[58623-58855]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[58568-58607]:VariableDeclarationStatement[58633-58672]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[58616-58658]:VariableDeclarationStatement[58681-58723]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[58668-58695]:VariableDeclarationStatement[58733-58760]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[58704-58732]:VariableDeclarationStatement[58769-58797]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[58741-58756]:ExpressionStatement[58806-58821]"
    }, {
      "left" : "return sinQ(a, b);",
      "right" : "return sinQ(a, b);",
      "info" : "ReturnStatement[58766-58784]:ReturnStatement[58831-58849]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59213-59220]:Modifier[59278-59285]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59221-59227]:Modifier[59286-59292]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[59228-59234]:PrimitiveType[59293-59299]"
    }, {
      "left" : "tanQ",
      "right" : "tanQ",
      "info" : "SimpleName[59235-59239]:SimpleName[59300-59304]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[59240-59249]:SingleVariableDeclaration[59305-59314]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[59251-59260]:SingleVariableDeclaration[59316-59325]"
    }, {
      "left" : "boolean cotanFlag",
      "right" : "boolean cotanFlag",
      "info" : "SingleVariableDeclaration[59262-59279]:SingleVariableDeclaration[59327-59344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59281-63313]:Block[59346-63378]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[59292-59327]:VariableDeclarationStatement[59357-59392]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHS[idx];",
      "right" : "final double epsilon = xa - EIGHTHS[idx];",
      "info" : "VariableDeclarationStatement[59336-59377]:VariableDeclarationStatement[59401-59442]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[59425-59464]:VariableDeclarationStatement[59490-59529]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[59473-59512]:VariableDeclarationStatement[59538-59577]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[59521-59562]:VariableDeclarationStatement[59586-59627]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[59571-59612]:VariableDeclarationStatement[59636-59677]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[59679-59704]:VariableDeclarationStatement[59744-59769]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[59713-59748]:VariableDeclarationStatement[59778-59813]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[59757-59784]:VariableDeclarationStatement[59822-59849]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[59793-59836]:VariableDeclarationStatement[59858-59901]"
    }, {
      "left" : "double temp = sinEpsA * HEX_40000000;",
      "right" : "double temp = sinEpsA * HEX_40000000;",
      "info" : "VariableDeclarationStatement[59885-59922]:VariableDeclarationStatement[59950-59987]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[59931-59970]:VariableDeclarationStatement[59996-60035]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[59979-60007]:ExpressionStatement[60044-60072]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[60016-60032]:ExpressionStatement[60081-60097]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[60895-60908]:VariableDeclarationStatement[60960-60973]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[60917-60930]:VariableDeclarationStatement[60982-60995]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[60964-60981]:VariableDeclarationStatement[61029-61046]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[60990-61007]:VariableDeclarationStatement[61055-61072]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[61016-61040]:VariableDeclarationStatement[61081-61105]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61049-61055]:ExpressionStatement[61114-61120]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[61064-61074]:ExpressionStatement[61129-61139]"
    }, {
      "left" : "t = costA*sinEpsA;",
      "right" : "t = costA*sinEpsA;",
      "info" : "ExpressionStatement[61084-61102]:ExpressionStatement[61149-61167]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[61111-61121]:ExpressionStatement[61176-61186]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[61130-61147]:ExpressionStatement[61195-61212]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61156-61162]:ExpressionStatement[61221-61227]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[61171-61181]:ExpressionStatement[61236-61246]"
    }, {
      "left" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "right" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "info" : "ExpressionStatement[61191-61229]:ExpressionStatement[61256-61294]"
    }, {
      "left" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "right" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "info" : "ExpressionStatement[61238-61300]:ExpressionStatement[61303-61365]"
    }, {
      "left" : "double sina = a + b;",
      "right" : "double sina = a + b;",
      "info" : "VariableDeclarationStatement[61310-61330]:VariableDeclarationStatement[61375-61395]"
    }, {
      "left" : "double sinb = -(sina - a - b);",
      "right" : "double sinb = -(sina - a - b);",
      "info" : "VariableDeclarationStatement[61339-61369]:VariableDeclarationStatement[61404-61434]"
    }, {
      "left" : "a = b = c = d = 0.0;",
      "right" : "a = b = c = d = 0.0;",
      "info" : "ExpressionStatement[61406-61426]:ExpressionStatement[61471-61491]"
    }, {
      "left" : "t = costA*cosEpsA;",
      "right" : "t = costA*cosEpsA;",
      "info" : "ExpressionStatement[61436-61454]:ExpressionStatement[61501-61519]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[61463-61473]:ExpressionStatement[61528-61538]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[61482-61499]:ExpressionStatement[61547-61564]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61508-61514]:ExpressionStatement[61573-61579]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[61523-61533]:ExpressionStatement[61588-61598]"
    }, {
      "left" : "t = -sintA*sinEpsA;",
      "right" : "t = -sintA*sinEpsA;",
      "info" : "ExpressionStatement[61543-61562]:ExpressionStatement[61608-61627]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[61571-61581]:ExpressionStatement[61636-61646]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[61590-61607]:ExpressionStatement[61655-61672]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61616-61622]:ExpressionStatement[61681-61687]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[61631-61641]:ExpressionStatement[61696-61706]"
    }, {
      "left" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "right" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "info" : "ExpressionStatement[61651-61705]:ExpressionStatement[61716-61770]"
    }, {
      "left" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "right" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "info" : "ExpressionStatement[61714-61770]:ExpressionStatement[61779-61835]"
    }, {
      "left" : "double cosa = a + b;",
      "right" : "double cosa = a + b;",
      "info" : "VariableDeclarationStatement[61780-61800]:VariableDeclarationStatement[61845-61865]"
    }, {
      "left" : "double cosb = -(cosa - a - b);",
      "right" : "double cosb = -(cosa - a - b);",
      "info" : "VariableDeclarationStatement[61809-61839]:VariableDeclarationStatement[61874-61904]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[61849-61997]:IfStatement[61914-62062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61864-61997]:Block[61929-62062]"
    }, {
      "left" : "double tmp;",
      "right" : "double tmp;",
      "info" : "VariableDeclarationStatement[61878-61889]:VariableDeclarationStatement[61943-61954]"
    }, {
      "left" : "tmp = cosa;",
      "right" : "tmp = cosa;",
      "info" : "ExpressionStatement[61902-61913]:ExpressionStatement[61967-61978]"
    }, {
      "left" : "cosa = sina;",
      "right" : "cosa = sina;",
      "info" : "ExpressionStatement[61914-61926]:ExpressionStatement[61979-61991]"
    }, {
      "left" : "sina = tmp;",
      "right" : "sina = tmp;",
      "info" : "ExpressionStatement[61927-61938]:ExpressionStatement[61992-62003]"
    }, {
      "left" : "tmp = cosb;",
      "right" : "tmp = cosb;",
      "info" : "ExpressionStatement[61951-61962]:ExpressionStatement[62016-62027]"
    }, {
      "left" : "cosb = sinb;",
      "right" : "cosb = sinb;",
      "info" : "ExpressionStatement[61963-61975]:ExpressionStatement[62028-62040]"
    }, {
      "left" : "sinb = tmp;",
      "right" : "sinb = tmp;",
      "info" : "ExpressionStatement[61976-61987]:ExpressionStatement[62041-62052]"
    }, {
      "left" : "double est = sina/cosa;",
      "right" : "double est = sina/cosa;",
      "info" : "VariableDeclarationStatement[62308-62331]:VariableDeclarationStatement[62373-62396]"
    }, {
      "left" : "temp = est * HEX_40000000;",
      "right" : "temp = est * HEX_40000000;",
      "info" : "ExpressionStatement[62421-62447]:ExpressionStatement[62486-62512]"
    }, {
      "left" : "double esta = (est + temp) - temp;",
      "right" : "double esta = (est + temp) - temp;",
      "info" : "VariableDeclarationStatement[62456-62490]:VariableDeclarationStatement[62521-62555]"
    }, {
      "left" : "double estb =  est - esta;",
      "right" : "double estb =  est - esta;",
      "info" : "VariableDeclarationStatement[62499-62525]:VariableDeclarationStatement[62564-62590]"
    }, {
      "left" : "temp = cosa * HEX_40000000;",
      "right" : "temp = cosa * HEX_40000000;",
      "info" : "ExpressionStatement[62535-62562]:ExpressionStatement[62600-62627]"
    }, {
      "left" : "double cosaa = (cosa + temp) - temp;",
      "right" : "double cosaa = (cosa + temp) - temp;",
      "info" : "VariableDeclarationStatement[62571-62607]:VariableDeclarationStatement[62636-62672]"
    }, {
      "left" : "double cosab =  cosa - cosaa;",
      "right" : "double cosab =  cosa - cosaa;",
      "info" : "VariableDeclarationStatement[62616-62645]:VariableDeclarationStatement[62681-62710]"
    }, {
      "left" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "right" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "info" : "VariableDeclarationStatement[62739-62816]:VariableDeclarationStatement[62804-62881]"
    }, {
      "left" : "err += sinb/cosa;",
      "right" : "err += sinb/cosa;",
      "info" : "ExpressionStatement[62862-62879]:ExpressionStatement[62927-62944]"
    }, {
      "left" : "err += -sina * cosb / cosa / cosa;",
      "right" : "err += -sina * cosb / cosa / cosa;",
      "info" : "ExpressionStatement[62937-62971]:ExpressionStatement[63002-63036]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[63013-63282]:IfStatement[63078-63347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63028-63282]:Block[63093-63347]"
    }, {
      "left" : "double xbadj = xb + est*est*xb;",
      "right" : "double xbadj = xb + est*est*xb;",
      "info" : "VariableDeclarationStatement[63139-63170]:VariableDeclarationStatement[63204-63235]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[63183-63245]:IfStatement[63248-63310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63198-63245]:Block[63263-63310]"
    }, {
      "left" : "xbadj = -xbadj;",
      "right" : "xbadj = -xbadj;",
      "info" : "ExpressionStatement[63216-63231]:ExpressionStatement[63281-63296]"
    }, {
      "left" : "err += xbadj;",
      "right" : "err += xbadj;",
      "info" : "ExpressionStatement[63259-63272]:ExpressionStatement[63324-63337]"
    }, {
      "left" : "return est+err;",
      "right" : "return est+err;",
      "info" : "ReturnStatement[63292-63307]:ReturnStatement[63357-63372]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63826-63833]:Modifier[63891-63898]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63834-63840]:Modifier[63899-63905]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63841-63845]:PrimitiveType[63906-63910]"
    }, {
      "left" : "reducePayneHanek",
      "right" : "reducePayneHanek",
      "info" : "SimpleName[63846-63862]:SimpleName[63911-63927]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[63863-63871]:SingleVariableDeclaration[63928-63936]"
    }, {
      "left" : "double result[]",
      "right" : "double result[]",
      "info" : "SingleVariableDeclaration[63873-63888]:SingleVariableDeclaration[63938-63953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63894-69784]:Block[63959-69849]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[63947-63988]:VariableDeclarationStatement[64012-64053]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[63997-64050]:VariableDeclarationStatement[64062-64115]"
    }, {
      "left" : "inbits &= 0x000fffffffffffffL;",
      "right" : "inbits &= 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[64112-64142]:ExpressionStatement[64177-64207]"
    }, {
      "left" : "inbits |= 0x0010000000000000L;",
      "right" : "inbits |= 0x0010000000000000L;",
      "info" : "ExpressionStatement[64151-64181]:ExpressionStatement[64216-64246]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[64247-64258]:ExpressionStatement[64312-64323]"
    }, {
      "left" : "inbits <<= 11;",
      "right" : "inbits <<= 11;",
      "info" : "ExpressionStatement[64267-64281]:ExpressionStatement[64332-64346]"
    }, {
      "left" : "long shpi0;",
      "right" : "long shpi0;",
      "info" : "VariableDeclarationStatement[64359-64370]:VariableDeclarationStatement[64424-64435]"
    }, {
      "left" : "long shpiA;",
      "right" : "long shpiA;",
      "info" : "VariableDeclarationStatement[64379-64390]:VariableDeclarationStatement[64444-64455]"
    }, {
      "left" : "long shpiB;",
      "right" : "long shpiB;",
      "info" : "VariableDeclarationStatement[64399-64410]:VariableDeclarationStatement[64464-64475]"
    }, {
      "left" : "int idx = exponent >> 6;",
      "right" : "int idx = exponent >> 6;",
      "info" : "VariableDeclarationStatement[64419-64443]:VariableDeclarationStatement[64484-64508]"
    }, {
      "left" : "int shift = exponent - (idx << 6);",
      "right" : "int shift = exponent - (idx << 6);",
      "info" : "VariableDeclarationStatement[64452-64486]:VariableDeclarationStatement[64517-64551]"
    }, {
      "left" : "if (shift != 0)",
      "right" : "if (shift != 0)",
      "info" : "IfStatement[64496-64955]:IfStatement[64561-65020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64512-64809]:Block[64577-64874]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "right" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "info" : "ExpressionStatement[64526-64579]:ExpressionStatement[64591-64644]"
    }, {
      "left" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "right" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "info" : "ExpressionStatement[64592-64631]:ExpressionStatement[64657-64696]"
    }, {
      "left" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "right" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "info" : "ExpressionStatement[64644-64714]:ExpressionStatement[64709-64779]"
    }, {
      "left" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "right" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "info" : "ExpressionStatement[64727-64799]:ExpressionStatement[64792-64864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64815-64955]:Block[64880-65020]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "right" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "info" : "ExpressionStatement[64829-64871]:ExpressionStatement[64894-64936]"
    }, {
      "left" : "shpiA = RECIP_2PI[idx];",
      "right" : "shpiA = RECIP_2PI[idx];",
      "info" : "ExpressionStatement[64884-64907]:ExpressionStatement[64949-64972]"
    }, {
      "left" : "shpiB = RECIP_2PI[idx+1];",
      "right" : "shpiB = RECIP_2PI[idx+1];",
      "info" : "ExpressionStatement[64920-64945]:ExpressionStatement[64985-65010]"
    }, {
      "left" : "long a = inbits >>> 32;",
      "right" : "long a = inbits >>> 32;",
      "info" : "VariableDeclarationStatement[65003-65026]:VariableDeclarationStatement[65068-65091]"
    }, {
      "left" : "long b = inbits & 0xffffffffL;",
      "right" : "long b = inbits & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[65035-65065]:VariableDeclarationStatement[65100-65130]"
    }, {
      "left" : "long c = shpiA >>> 32;",
      "right" : "long c = shpiA >>> 32;",
      "info" : "VariableDeclarationStatement[65075-65097]:VariableDeclarationStatement[65140-65162]"
    }, {
      "left" : "long d = shpiA & 0xffffffffL;",
      "right" : "long d = shpiA & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[65106-65135]:VariableDeclarationStatement[65171-65200]"
    }, {
      "left" : "long ac = a * c;",
      "right" : "long ac = a * c;",
      "info" : "VariableDeclarationStatement[65145-65161]:VariableDeclarationStatement[65210-65226]"
    }, {
      "left" : "long bd = b * d;",
      "right" : "long bd = b * d;",
      "info" : "VariableDeclarationStatement[65170-65186]:VariableDeclarationStatement[65235-65251]"
    }, {
      "left" : "long bc = b * c;",
      "right" : "long bc = b * c;",
      "info" : "VariableDeclarationStatement[65195-65211]:VariableDeclarationStatement[65260-65276]"
    }, {
      "left" : "long ad = a * d;",
      "right" : "long ad = a * d;",
      "info" : "VariableDeclarationStatement[65220-65236]:VariableDeclarationStatement[65285-65301]"
    }, {
      "left" : "long prodB = bd + (ad << 32);",
      "right" : "long prodB = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[65246-65275]:VariableDeclarationStatement[65311-65340]"
    }, {
      "left" : "long prodA = ac + (ad >>> 32);",
      "right" : "long prodA = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[65284-65314]:VariableDeclarationStatement[65349-65379]"
    }, {
      "left" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[65324-65371]:VariableDeclarationStatement[65389-65436]"
    }, {
      "left" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "right" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "info" : "VariableDeclarationStatement[65380-65420]:VariableDeclarationStatement[65445-65485]"
    }, {
      "left" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[65429-65481]:VariableDeclarationStatement[65494-65546]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[65511-65612]:IfStatement[65576-65677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65580-65612]:Block[65645-65677]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[65594-65602]:ExpressionStatement[65659-65667]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[65622-65664]:ExpressionStatement[65687-65729]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[65673-65705]:ExpressionStatement[65738-65770]"
    }, {
      "left" : "prodB = prodB + (bc << 32);",
      "right" : "prodB = prodB + (bc << 32);",
      "info" : "ExpressionStatement[65715-65742]:ExpressionStatement[65780-65807]"
    }, {
      "left" : "prodA = prodA + (bc >>> 32);",
      "right" : "prodA = prodA + (bc >>> 32);",
      "info" : "ExpressionStatement[65751-65779]:ExpressionStatement[65816-65844]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[65789-65833]:ExpressionStatement[65854-65898]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[65863-65964]:IfStatement[65928-66029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65932-65964]:Block[65997-66029]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[65946-65954]:ExpressionStatement[66011-66019]"
    }, {
      "left" : "c = shpiB >>> 32;",
      "right" : "c = shpiB >>> 32;",
      "info" : "ExpressionStatement[66012-66029]:ExpressionStatement[66077-66094]"
    }, {
      "left" : "d = shpiB & 0xffffffffL;",
      "right" : "d = shpiB & 0xffffffffL;",
      "info" : "ExpressionStatement[66038-66062]:ExpressionStatement[66103-66127]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[66071-66082]:ExpressionStatement[66136-66147]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[66091-66102]:ExpressionStatement[66156-66167]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[66111-66122]:ExpressionStatement[66176-66187]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[66160-66189]:ExpressionStatement[66225-66254]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[66199-66241]:ExpressionStatement[66264-66306]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[66250-66290]:ExpressionStatement[66315-66355]"
    }, {
      "left" : "prodB += ac;",
      "right" : "prodB += ac;",
      "info" : "ExpressionStatement[66299-66311]:ExpressionStatement[66364-66376]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[66320-66364]:ExpressionStatement[66385-66429]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[66393-66494]:IfStatement[66458-66559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66462-66494]:Block[66527-66559]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[66476-66484]:ExpressionStatement[66541-66549]"
    }, {
      "left" : "c = shpi0 >>> 32;",
      "right" : "c = shpi0 >>> 32;",
      "info" : "ExpressionStatement[66536-66553]:ExpressionStatement[66601-66618]"
    }, {
      "left" : "d = shpi0 & 0xffffffffL;",
      "right" : "d = shpi0 & 0xffffffffL;",
      "info" : "ExpressionStatement[66562-66586]:ExpressionStatement[66627-66651]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[66596-66607]:ExpressionStatement[66661-66672]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[66616-66627]:ExpressionStatement[66681-66692]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[66636-66647]:ExpressionStatement[66701-66712]"
    }, {
      "left" : "prodA += bd + ((bc + ad) << 32);",
      "right" : "prodA += bd + ((bc + ad) << 32);",
      "info" : "ExpressionStatement[66657-66689]:ExpressionStatement[66722-66754]"
    }, {
      "left" : "int intPart = (int)(prodA >>> 62);",
      "right" : "int intPart = (int)(prodA >>> 62);",
      "info" : "VariableDeclarationStatement[67063-67097]:VariableDeclarationStatement[67128-67162]"
    }, {
      "left" : "prodA <<= 2;",
      "right" : "prodA <<= 2;",
      "info" : "ExpressionStatement[67135-67147]:ExpressionStatement[67200-67212]"
    }, {
      "left" : "prodA |= prodB >>> 62;",
      "right" : "prodA |= prodB >>> 62;",
      "info" : "ExpressionStatement[67156-67178]:ExpressionStatement[67221-67243]"
    }, {
      "left" : "prodB <<= 2;",
      "right" : "prodB <<= 2;",
      "info" : "ExpressionStatement[67187-67199]:ExpressionStatement[67252-67264]"
    }, {
      "left" : "a = prodA >>> 32;",
      "right" : "a = prodA >>> 32;",
      "info" : "ExpressionStatement[67240-67257]:ExpressionStatement[67305-67322]"
    }, {
      "left" : "b = prodA & 0xffffffffL;",
      "right" : "b = prodA & 0xffffffffL;",
      "info" : "ExpressionStatement[67266-67290]:ExpressionStatement[67331-67355]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[67300-67326]:ExpressionStatement[67365-67391]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[67335-67368]:ExpressionStatement[67400-67433]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[67378-67389]:ExpressionStatement[67443-67454]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[67398-67409]:ExpressionStatement[67463-67474]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[67418-67429]:ExpressionStatement[67483-67494]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[67438-67449]:ExpressionStatement[67503-67514]"
    }, {
      "left" : "long prod2B = bd + (ad << 32);",
      "right" : "long prod2B = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[67459-67489]:VariableDeclarationStatement[67524-67554]"
    }, {
      "left" : "long prod2A = ac + (ad >>> 32);",
      "right" : "long prod2A = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[67498-67529]:VariableDeclarationStatement[67563-67594]"
    }, {
      "left" : "bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67539-67578]:ExpressionStatement[67604-67643]"
    }, {
      "left" : "bitb = (ad & 0x80000000L ) != 0;",
      "right" : "bitb = (ad & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[67587-67619]:ExpressionStatement[67652-67684]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67628-67673]:ExpressionStatement[67693-67738]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[67703-67805]:IfStatement[67768-67870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67772-67805]:Block[67837-67870]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[67786-67795]:ExpressionStatement[67851-67860]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67815-67858]:ExpressionStatement[67880-67923]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[67867-67899]:ExpressionStatement[67932-67964]"
    }, {
      "left" : "prod2B = prod2B + (bc << 32);",
      "right" : "prod2B = prod2B + (bc << 32);",
      "info" : "ExpressionStatement[67909-67938]:ExpressionStatement[67974-68003]"
    }, {
      "left" : "prod2A = prod2A + (bc >>> 32);",
      "right" : "prod2A = prod2A + (bc >>> 32);",
      "info" : "ExpressionStatement[67947-67977]:ExpressionStatement[68012-68042]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67987-68032]:ExpressionStatement[68052-68097]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[68062-68164]:IfStatement[68127-68229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68131-68164]:Block[68196-68229]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[68145-68154]:ExpressionStatement[68210-68219]"
    }, {
      "left" : "c = PI_O_4_BITS[1] >>> 32;",
      "right" : "c = PI_O_4_BITS[1] >>> 32;",
      "info" : "ExpressionStatement[68218-68244]:ExpressionStatement[68283-68309]"
    }, {
      "left" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "info" : "ExpressionStatement[68253-68286]:ExpressionStatement[68318-68351]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[68295-68306]:ExpressionStatement[68360-68371]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[68315-68326]:ExpressionStatement[68380-68391]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[68335-68346]:ExpressionStatement[68400-68411]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[68384-68413]:ExpressionStatement[68449-68478]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68423-68466]:ExpressionStatement[68488-68531]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[68475-68515]:ExpressionStatement[68540-68580]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[68524-68537]:ExpressionStatement[68589-68602]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68546-68591]:ExpressionStatement[68611-68656]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[68620-68722]:IfStatement[68685-68787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68689-68722]:Block[68754-68787]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[68703-68712]:ExpressionStatement[68768-68777]"
    }, {
      "left" : "a = prodB >>> 32;",
      "right" : "a = prodB >>> 32;",
      "info" : "ExpressionStatement[68777-68794]:ExpressionStatement[68842-68859]"
    }, {
      "left" : "b = prodB & 0xffffffffL;",
      "right" : "b = prodB & 0xffffffffL;",
      "info" : "ExpressionStatement[68803-68827]:ExpressionStatement[68868-68892]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[68836-68862]:ExpressionStatement[68901-68927]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[68871-68904]:ExpressionStatement[68936-68969]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[68913-68924]:ExpressionStatement[68978-68989]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[68933-68944]:ExpressionStatement[68998-69009]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[68953-68964]:ExpressionStatement[69018-69029]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[69002-69031]:ExpressionStatement[69067-69096]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[69041-69084]:ExpressionStatement[69106-69149]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[69093-69133]:ExpressionStatement[69158-69198]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[69142-69155]:ExpressionStatement[69207-69220]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[69164-69209]:ExpressionStatement[69229-69274]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[69238-69340]:IfStatement[69303-69405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69307-69340]:Block[69372-69405]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[69321-69330]:ExpressionStatement[69386-69395]"
    }, {
      "left" : "double tmpA = (prod2A >>> 12) / TWO_POWER_52;",
      "right" : "double tmpA = (prod2A >>> 12) / TWO_POWER_52;",
      "info" : "VariableDeclarationStatement[69382-69427]:VariableDeclarationStatement[69447-69492]"
    }, {
      "left" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;",
      "right" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;",
      "info" : "VariableDeclarationStatement[69459-69549]:VariableDeclarationStatement[69524-69614]"
    }, {
      "left" : "double sumA = tmpA + tmpB;",
      "right" : "double sumA = tmpA + tmpB;",
      "info" : "VariableDeclarationStatement[69571-69597]:VariableDeclarationStatement[69636-69662]"
    }, {
      "left" : "double sumB = -(sumA - tmpA - tmpB);",
      "right" : "double sumB = -(sumA - tmpA - tmpB);",
      "info" : "VariableDeclarationStatement[69606-69642]:VariableDeclarationStatement[69671-69707]"
    }, {
      "left" : "result[0] = intPart;",
      "right" : "result[0] = intPart;",
      "info" : "ExpressionStatement[69694-69714]:ExpressionStatement[69759-69779]"
    }, {
      "left" : "result[1] = sumA * 2.0;",
      "right" : "result[1] = sumA * 2.0;",
      "info" : "ExpressionStatement[69723-69746]:ExpressionStatement[69788-69811]"
    }, {
      "left" : "result[2] = sumB * 2.0;",
      "right" : "result[2] = sumB * 2.0;",
      "info" : "ExpressionStatement[69755-69778]:ExpressionStatement[69820-69843]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[69883-69889]:Modifier[69948-69954]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69890-69896]:Modifier[69955-69961]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[69897-69903]:PrimitiveType[69962-69968]"
    }, {
      "left" : "sin",
      "right" : "sin",
      "info" : "SimpleName[69904-69907]:SimpleName[69969-69972]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[69908-69916]:SingleVariableDeclaration[69973-69981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69918-71541]:Block[69983-71606]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[69928-69953]:VariableDeclarationStatement[69993-70018]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[69962-69979]:VariableDeclarationStatement[70027-70044]"
    }, {
      "left" : "double xa;",
      "right" : "double xa;",
      "info" : "VariableDeclarationStatement[69988-69998]:VariableDeclarationStatement[70053-70063]"
    }, {
      "left" : "double xb = 0.0;",
      "right" : "double xb = 0.0;",
      "info" : "VariableDeclarationStatement[70007-70023]:VariableDeclarationStatement[70072-70088]"
    }, {
      "left" : "xa = x;",
      "right" : "xa = x;",
      "info" : "ExpressionStatement[70080-70087]:ExpressionStatement[70145-70152]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[70096-70169]:IfStatement[70161-70234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70107-70169]:Block[70172-70234]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[70121-70137]:ExpressionStatement[70186-70202]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[70150-70159]:ExpressionStatement[70215-70224]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[70226-70399]:IfStatement[70291-70464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70241-70399]:Block[70306-70464]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[70255-70294]:VariableDeclarationStatement[70320-70359]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[70307-70365]:IfStatement[70372-70430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70321-70365]:Block[70386-70430]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[70339-70351]:ReturnStatement[70404-70416]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[70378-70389]:ReturnStatement[70443-70454]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[70409-70499]:IfStatement[70474-70564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70457-70499]:Block[70522-70564]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[70471-70489]:ReturnStatement[70536-70554]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[70554-71133]:IfStatement[70619-71198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70574-70931]:Block[70639-70996]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[70710-70749]:VariableDeclarationStatement[70775-70814]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[70762-70798]:ExpressionStatement[70827-70863]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[70811-70851]:ExpressionStatement[70876-70916]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[70864-70886]:ExpressionStatement[70929-70951]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[70899-70921]:ExpressionStatement[70964-70986]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[70937-71133]:IfStatement[71002-71198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70966-71133]:Block[71031-71198]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[70980-71023]:VariableDeclarationStatement[71045-71088]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[71036-71061]:ExpressionStatement[71101-71126]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[71074-71092]:ExpressionStatement[71139-71157]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[71105-71123]:ExpressionStatement[71170-71188]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[71143-71210]:IfStatement[71208-71275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71157-71210]:Block[71222-71275]"
    }, {
      "left" : "quadrant ^= 2;",
      "right" : "quadrant ^= 2;",
      "info" : "ExpressionStatement[71171-71185]:ExpressionStatement[71236-71250]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[71220-71535]:SwitchStatement[71285-71600]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[71252-71259]:SwitchCase[71317-71324]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[71276-71296]:ReturnStatement[71341-71361]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[71309-71316]:SwitchCase[71374-71381]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[71333-71353]:ReturnStatement[71398-71418]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[71366-71373]:SwitchCase[71431-71438]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[71390-71411]:ReturnStatement[71455-71476]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[71424-71431]:SwitchCase[71489-71496]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[71448-71469]:ReturnStatement[71513-71534]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[71482-71490]:SwitchCase[71547-71555]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[71507-71525]:ReturnStatement[71572-71590]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71642-71648]:Modifier[71707-71713]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71649-71655]:Modifier[71714-71720]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[71656-71662]:PrimitiveType[71721-71727]"
    }, {
      "left" : "cos",
      "right" : "cos",
      "info" : "SimpleName[71663-71666]:SimpleName[71728-71731]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[71667-71675]:SingleVariableDeclaration[71732-71740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71677-72984]:Block[71742-73049]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[71687-71704]:VariableDeclarationStatement[71752-71769]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[71761-71775]:VariableDeclarationStatement[71826-71840]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[71784-71828]:IfStatement[71849-71893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71795-71828]:Block[71860-71893]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[71809-71818]:ExpressionStatement[71874-71883]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[71838-71928]:IfStatement[71903-71993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71886-71928]:Block[71951-71993]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[71900-71918]:ReturnStatement[71965-71983]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[71983-71997]:VariableDeclarationStatement[72048-72062]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[72006-72585]:IfStatement[72071-72650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72026-72383]:Block[72091-72448]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[72162-72201]:VariableDeclarationStatement[72227-72266]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[72214-72250]:ExpressionStatement[72279-72315]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[72263-72303]:ExpressionStatement[72328-72368]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[72316-72338]:ExpressionStatement[72381-72403]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[72351-72373]:ExpressionStatement[72416-72438]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[72389-72585]:IfStatement[72454-72650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72418-72585]:Block[72483-72650]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[72432-72475]:VariableDeclarationStatement[72497-72540]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[72488-72513]:ExpressionStatement[72553-72578]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[72526-72544]:ExpressionStatement[72591-72609]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[72557-72575]:ExpressionStatement[72622-72640]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[72663-72978]:SwitchStatement[72728-73043]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[72695-72702]:SwitchCase[72760-72767]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[72719-72739]:ReturnStatement[72784-72804]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[72752-72759]:SwitchCase[72817-72824]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[72776-72797]:ReturnStatement[72841-72862]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[72810-72817]:SwitchCase[72875-72882]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[72834-72855]:ReturnStatement[72899-72920]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[72868-72875]:SwitchCase[72933-72940]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[72892-72912]:ReturnStatement[72957-72977]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[72925-72933]:SwitchCase[72990-72998]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[72950-72968]:ReturnStatement[73015-73033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73086-73092]:Modifier[73151-73157]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73093-73099]:Modifier[73158-73164]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[73100-73106]:PrimitiveType[73165-73171]"
    }, {
      "left" : "tan",
      "right" : "tan",
      "info" : "SimpleName[73107-73110]:SimpleName[73172-73175]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[73111-73119]:SingleVariableDeclaration[73176-73184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73121-75006]:Block[73186-75071]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[73131-73156]:VariableDeclarationStatement[73196-73221]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[73165-73182]:VariableDeclarationStatement[73230-73247]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[73239-73253]:VariableDeclarationStatement[73304-73318]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[73262-73335]:IfStatement[73327-73400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73273-73335]:Block[73338-73400]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[73287-73303]:ExpressionStatement[73352-73368]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[73316-73325]:ExpressionStatement[73381-73390]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[73392-73565]:IfStatement[73457-73630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73407-73565]:Block[73472-73630]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[73421-73460]:VariableDeclarationStatement[73486-73525]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[73473-73531]:IfStatement[73538-73596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73487-73531]:Block[73552-73596]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[73505-73517]:ReturnStatement[73570-73582]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[73544-73555]:ReturnStatement[73609-73620]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[73575-73665]:IfStatement[73640-73730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73623-73665]:Block[73688-73730]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[73637-73655]:ReturnStatement[73702-73720]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[73720-73734]:VariableDeclarationStatement[73785-73799]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[73743-74322]:IfStatement[73808-74387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73763-74120]:Block[73828-74185]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[73899-73938]:VariableDeclarationStatement[73964-74003]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[73951-73987]:ExpressionStatement[74016-74052]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[74000-74040]:ExpressionStatement[74065-74105]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[74053-74075]:ExpressionStatement[74118-74140]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[74088-74110]:ExpressionStatement[74153-74175]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[74126-74322]:IfStatement[74191-74387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74155-74322]:Block[74220-74387]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[74169-74212]:VariableDeclarationStatement[74234-74277]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[74225-74250]:ExpressionStatement[74290-74315]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[74263-74281]:ExpressionStatement[74328-74346]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[74294-74312]:ExpressionStatement[74359-74377]"
    }, {
      "left" : "if (xa > 1.5)",
      "right" : "if (xa > 1.5)",
      "info" : "IfStatement[74332-74741]:IfStatement[74397-74806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74346-74741]:Block[74411-74806]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[74413-74452]:VariableDeclarationStatement[74478-74517]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[74465-74507]:VariableDeclarationStatement[74530-74572]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[74521-74548]:VariableDeclarationStatement[74586-74613]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[74561-74589]:VariableDeclarationStatement[74626-74654]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[74602-74617]:ExpressionStatement[74667-74682]"
    }, {
      "left" : "xa = a + b;",
      "right" : "xa = a + b;",
      "info" : "ExpressionStatement[74631-74642]:ExpressionStatement[74696-74707]"
    }, {
      "left" : "xb = -(xa - a - b);",
      "right" : "xb = -(xa - a - b);",
      "info" : "ExpressionStatement[74655-74674]:ExpressionStatement[74720-74739]"
    }, {
      "left" : "quadrant ^= 1;",
      "right" : "quadrant ^= 1;",
      "info" : "ExpressionStatement[74687-74701]:ExpressionStatement[74752-74766]"
    }, {
      "left" : "negative ^= true;",
      "right" : "negative ^= true;",
      "info" : "ExpressionStatement[74714-74731]:ExpressionStatement[74779-74796]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[74751-74765]:VariableDeclarationStatement[74816-74830]"
    }, {
      "left" : "if ((quadrant & 1) == 0)",
      "right" : "if ((quadrant & 1) == 0)",
      "info" : "IfStatement[74774-74911]:IfStatement[74839-74976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74799-74852]:Block[74864-74917]"
    }, {
      "left" : "result = tanQ(xa, xb, false);",
      "right" : "result = tanQ(xa, xb, false);",
      "info" : "ExpressionStatement[74813-74842]:ExpressionStatement[74878-74907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74858-74911]:Block[74923-74976]"
    }, {
      "left" : "result = -tanQ(xa, xb, true);",
      "right" : "result = -tanQ(xa, xb, true);",
      "info" : "ExpressionStatement[74872-74901]:ExpressionStatement[74937-74966]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[74921-74976]:IfStatement[74986-75041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74935-74976]:Block[75000-75041]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[74949-74966]:ExpressionStatement[75014-75031]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[74986-75000]:ReturnStatement[75051-75065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75105-75111]:Modifier[75170-75176]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75112-75118]:Modifier[75177-75183]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[75119-75125]:PrimitiveType[75184-75190]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[75126-75130]:SimpleName[75191-75195]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[75131-75139]:SingleVariableDeclaration[75196-75204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75141-75184]:Block[75206-75249]"
    }, {
      "left" : "return atan(x, 0.0, false);",
      "right" : "return atan(x, 0.0, false);",
      "info" : "ReturnStatement[75151-75178]:ReturnStatement[75216-75243]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75524-75531]:Modifier[75589-75596]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75532-75538]:Modifier[75597-75603]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[75539-75545]:PrimitiveType[75604-75610]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[75546-75550]:SimpleName[75611-75615]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[75551-75560]:SingleVariableDeclaration[75616-75625]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[75562-75571]:SingleVariableDeclaration[75627-75636]"
    }, {
      "left" : "boolean leftPlane",
      "right" : "boolean leftPlane",
      "info" : "SingleVariableDeclaration[75573-75590]:SingleVariableDeclaration[75638-75655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75592-79902]:Block[75657-79967]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[75602-75625]:VariableDeclarationStatement[75667-75690]"
    }, {
      "left" : "int idx;",
      "right" : "int idx;",
      "info" : "VariableDeclarationStatement[75634-75642]:VariableDeclarationStatement[75699-75707]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[75652-75777]:IfStatement[75717-75842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75667-75777]:Block[75732-75842]"
    }, {
      "left" : "return leftPlane ? copySign(Math.PI, xa) : xa;",
      "right" : "return leftPlane ? copySign(Math.PI, xa) : xa;",
      "info" : "ReturnStatement[75721-75767]:ReturnStatement[75786-75832]"
    }, {
      "left" : "if (xa < 0)",
      "right" : "if (xa < 0)",
      "info" : "IfStatement[75787-75905]:IfStatement[75852-75970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75799-75905]:Block[75864-75970]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[75837-75846]:ExpressionStatement[75902-75911]"
    }, {
      "left" : "xb = -xb;",
      "right" : "xb = -xb;",
      "info" : "ExpressionStatement[75859-75868]:ExpressionStatement[75924-75933]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[75881-75895]:ExpressionStatement[75946-75960]"
    }, {
      "left" : "if (xa > 1.633123935319537E16)",
      "right" : "if (xa > 1.633123935319537E16)",
      "info" : "IfStatement[75915-76059]:IfStatement[75980-76124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75946-76059]:Block[76011-76124]"
    }, {
      "left" : "return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);",
      "right" : "return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);",
      "info" : "ReturnStatement[75980-76049]:ReturnStatement[76045-76114]"
    }, {
      "left" : "if (xa < 1)",
      "right" : "if (xa < 1)",
      "info" : "IfStatement[76158-76423]:IfStatement[76223-76488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76170-76259]:Block[76235-76324]"
    }, {
      "left" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "right" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "info" : "ExpressionStatement[76184-76249]:ExpressionStatement[76249-76314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76265-76423]:Block[76330-76488]"
    }, {
      "left" : "final double oneOverXa = 1 / xa;",
      "right" : "final double oneOverXa = 1 / xa;",
      "info" : "VariableDeclarationStatement[76279-76311]:VariableDeclarationStatement[76344-76376]"
    }, {
      "left" : "idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
      "right" : "idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
      "info" : "ExpressionStatement[76324-76413]:ExpressionStatement[76389-76478]"
    }, {
      "left" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "right" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[76432-76472]:VariableDeclarationStatement[76497-76537]"
    }, {
      "left" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "right" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "info" : "VariableDeclarationStatement[76481-76531]:VariableDeclarationStatement[76546-76596]"
    }, {
      "left" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "right" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[76540-76574]:ExpressionStatement[76605-76639]"
    }, {
      "left" : "double temp = epsA + epsB;",
      "right" : "double temp = epsA + epsB;",
      "info" : "VariableDeclarationStatement[76584-76610]:VariableDeclarationStatement[76649-76675]"
    }, {
      "left" : "epsB = -(temp - epsA - epsB);",
      "right" : "epsB = -(temp - epsA - epsB);",
      "info" : "ExpressionStatement[76619-76648]:ExpressionStatement[76684-76713]"
    }, {
      "left" : "epsA = temp;",
      "right" : "epsA = temp;",
      "info" : "ExpressionStatement[76657-76669]:ExpressionStatement[76722-76734]"
    }, {
      "left" : "temp = xa * HEX_40000000;",
      "right" : "temp = xa * HEX_40000000;",
      "info" : "ExpressionStatement[76732-76757]:ExpressionStatement[76797-76822]"
    }, {
      "left" : "double ya = xa + temp - temp;",
      "right" : "double ya = xa + temp - temp;",
      "info" : "VariableDeclarationStatement[76766-76795]:VariableDeclarationStatement[76831-76860]"
    }, {
      "left" : "double yb = xb + xa - ya;",
      "right" : "double yb = xb + xa - ya;",
      "info" : "VariableDeclarationStatement[76804-76829]:VariableDeclarationStatement[76869-76894]"
    }, {
      "left" : "xa = ya;",
      "right" : "xa = ya;",
      "info" : "ExpressionStatement[76838-76846]:ExpressionStatement[76903-76911]"
    }, {
      "left" : "xb += yb;",
      "right" : "xb += yb;",
      "info" : "ExpressionStatement[76855-76864]:ExpressionStatement[76920-76929]"
    }, {
      "left" : "if (idx == 0)",
      "right" : "if (idx == 0)",
      "info" : "IfStatement[76909-78264]:IfStatement[76974-78329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76923-77408]:Block[76988-77473]"
    }, {
      "left" : "final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "right" : "final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "info" : "VariableDeclarationStatement[77179-77270]:VariableDeclarationStatement[77244-77335]"
    }, {
      "left" : "ya = epsA * denom;",
      "right" : "ya = epsA * denom;",
      "info" : "ExpressionStatement[77349-77367]:ExpressionStatement[77414-77432]"
    }, {
      "left" : "yb = epsB * denom;",
      "right" : "yb = epsB * denom;",
      "info" : "ExpressionStatement[77380-77398]:ExpressionStatement[77445-77463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77414-78264]:Block[77479-78329]"
    }, {
      "left" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "right" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[77428-77469]:VariableDeclarationStatement[77493-77534]"
    }, {
      "left" : "double za = 1d + temp2;",
      "right" : "double za = 1d + temp2;",
      "info" : "VariableDeclarationStatement[77482-77505]:VariableDeclarationStatement[77547-77570]"
    }, {
      "left" : "double zb = -(za - 1d - temp2);",
      "right" : "double zb = -(za - 1d - temp2);",
      "info" : "VariableDeclarationStatement[77518-77549]:VariableDeclarationStatement[77583-77614]"
    }, {
      "left" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "right" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[77562-77624]:ExpressionStatement[77627-77689]"
    }, {
      "left" : "temp = za + temp2;",
      "right" : "temp = za + temp2;",
      "info" : "ExpressionStatement[77637-77655]:ExpressionStatement[77702-77720]"
    }, {
      "left" : "zb += -(temp - za - temp2);",
      "right" : "zb += -(temp - za - temp2);",
      "info" : "ExpressionStatement[77668-77695]:ExpressionStatement[77733-77760]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[77708-77718]:ExpressionStatement[77773-77783]"
    }, {
      "left" : "zb += xb * TANGENT_TABLE_B[idx];",
      "right" : "zb += xb * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[77732-77764]:ExpressionStatement[77797-77829]"
    }, {
      "left" : "ya = epsA / za;",
      "right" : "ya = epsA / za;",
      "info" : "ExpressionStatement[77777-77792]:ExpressionStatement[77842-77857]"
    }, {
      "left" : "temp = ya * HEX_40000000;",
      "right" : "temp = ya * HEX_40000000;",
      "info" : "ExpressionStatement[77806-77831]:ExpressionStatement[77871-77896]"
    }, {
      "left" : "final double yaa = (ya + temp) - temp;",
      "right" : "final double yaa = (ya + temp) - temp;",
      "info" : "VariableDeclarationStatement[77844-77882]:VariableDeclarationStatement[77909-77947]"
    }, {
      "left" : "final double yab = ya - yaa;",
      "right" : "final double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[77895-77923]:VariableDeclarationStatement[77960-77988]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[77937-77962]:ExpressionStatement[78002-78027]"
    }, {
      "left" : "final double zaa = (za + temp) - temp;",
      "right" : "final double zaa = (za + temp) - temp;",
      "info" : "VariableDeclarationStatement[77975-78013]:VariableDeclarationStatement[78040-78078]"
    }, {
      "left" : "final double zab = za - zaa;",
      "right" : "final double zab = za - zaa;",
      "info" : "VariableDeclarationStatement[78026-78054]:VariableDeclarationStatement[78091-78119]"
    }, {
      "left" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "right" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "info" : "ExpressionStatement[78119-78184]:ExpressionStatement[78184-78249]"
    }, {
      "left" : "yb += -epsA * zb / za / za;",
      "right" : "yb += -epsA * zb / za / za;",
      "info" : "ExpressionStatement[78198-78225]:ExpressionStatement[78263-78290]"
    }, {
      "left" : "yb += epsB / za;",
      "right" : "yb += epsB / za;",
      "info" : "ExpressionStatement[78238-78254]:ExpressionStatement[78303-78319]"
    }, {
      "left" : "epsA = ya;",
      "right" : "epsA = ya;",
      "info" : "ExpressionStatement[78275-78285]:ExpressionStatement[78340-78350]"
    }, {
      "left" : "epsB = yb;",
      "right" : "epsB = yb;",
      "info" : "ExpressionStatement[78294-78304]:ExpressionStatement[78359-78369]"
    }, {
      "left" : "final double epsA2 = epsA * epsA;",
      "right" : "final double epsA2 = epsA * epsA;",
      "info" : "VariableDeclarationStatement[78348-78381]:VariableDeclarationStatement[78413-78446]"
    }, {
      "left" : "yb = 0.07490822288864472;",
      "right" : "yb = 0.07490822288864472;",
      "info" : "ExpressionStatement[78647-78672]:ExpressionStatement[78712-78737]"
    }, {
      "left" : "yb = yb * epsA2 + -0.09088450866185192;",
      "right" : "yb = yb * epsA2 + -0.09088450866185192;",
      "info" : "ExpressionStatement[78681-78720]:ExpressionStatement[78746-78785]"
    }, {
      "left" : "yb = yb * epsA2 + 0.11111095942313305;",
      "right" : "yb = yb * epsA2 + 0.11111095942313305;",
      "info" : "ExpressionStatement[78729-78767]:ExpressionStatement[78794-78832]"
    }, {
      "left" : "yb = yb * epsA2 + -0.1428571423679182;",
      "right" : "yb = yb * epsA2 + -0.1428571423679182;",
      "info" : "ExpressionStatement[78776-78814]:ExpressionStatement[78841-78879]"
    }, {
      "left" : "yb = yb * epsA2 + 0.19999999999923582;",
      "right" : "yb = yb * epsA2 + 0.19999999999923582;",
      "info" : "ExpressionStatement[78823-78861]:ExpressionStatement[78888-78926]"
    }, {
      "left" : "yb = yb * epsA2 + -0.33333333333333287;",
      "right" : "yb = yb * epsA2 + -0.33333333333333287;",
      "info" : "ExpressionStatement[78870-78909]:ExpressionStatement[78935-78974]"
    }, {
      "left" : "yb = yb * epsA2 * epsA;",
      "right" : "yb = yb * epsA2 * epsA;",
      "info" : "ExpressionStatement[78918-78941]:ExpressionStatement[78983-79006]"
    }, {
      "left" : "ya = epsA;",
      "right" : "ya = epsA;",
      "info" : "ExpressionStatement[78952-78962]:ExpressionStatement[79017-79027]"
    }, {
      "left" : "temp = ya + yb;",
      "right" : "temp = ya + yb;",
      "info" : "ExpressionStatement[78972-78987]:ExpressionStatement[79037-79052]"
    }, {
      "left" : "yb = -(temp - ya - yb);",
      "right" : "yb = -(temp - ya - yb);",
      "info" : "ExpressionStatement[78996-79019]:ExpressionStatement[79061-79084]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[79028-79038]:ExpressionStatement[79093-79103]"
    }, {
      "left" : "yb += epsB / (1d + epsA * epsA);",
      "right" : "yb += epsB / (1d + epsA * epsA);",
      "info" : "ExpressionStatement[79108-79140]:ExpressionStatement[79173-79205]"
    }, {
      "left" : "double za = EIGHTHS[idx] + ya;",
      "right" : "double za = EIGHTHS[idx] + ya;",
      "info" : "VariableDeclarationStatement[79193-79223]:VariableDeclarationStatement[79258-79288]"
    }, {
      "left" : "double zb = -(za - EIGHTHS[idx] - ya);",
      "right" : "double zb = -(za - EIGHTHS[idx] - ya);",
      "info" : "VariableDeclarationStatement[79232-79270]:VariableDeclarationStatement[79297-79335]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[79279-79294]:ExpressionStatement[79344-79359]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[79303-79327]:ExpressionStatement[79368-79392]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[79336-79346]:ExpressionStatement[79401-79411]"
    }, {
      "left" : "double result = za + zb;",
      "right" : "double result = za + zb;",
      "info" : "VariableDeclarationStatement[79356-79380]:VariableDeclarationStatement[79421-79445]"
    }, {
      "left" : "double resultb = -(result - za - zb);",
      "right" : "double resultb = -(result - za - zb);",
      "info" : "VariableDeclarationStatement[79389-79426]:VariableDeclarationStatement[79454-79491]"
    }, {
      "left" : "if (leftPlane)",
      "right" : "if (leftPlane)",
      "info" : "IfStatement[79436-79796]:IfStatement[79501-79861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79451-79796]:Block[79516-79861]"
    }, {
      "left" : "final double pia = 1.5707963267948966 * 2;",
      "right" : "final double pia = 1.5707963267948966 * 2;",
      "info" : "VariableDeclarationStatement[79508-79550]:VariableDeclarationStatement[79573-79615]"
    }, {
      "left" : "final double pib = 6.123233995736766E-17 * 2;",
      "right" : "final double pib = 6.123233995736766E-17 * 2;",
      "info" : "VariableDeclarationStatement[79563-79608]:VariableDeclarationStatement[79628-79673]"
    }, {
      "left" : "za = pia - result;",
      "right" : "za = pia - result;",
      "info" : "ExpressionStatement[79622-79640]:ExpressionStatement[79687-79705]"
    }, {
      "left" : "zb = -(za - pia + result);",
      "right" : "zb = -(za - pia + result);",
      "info" : "ExpressionStatement[79653-79679]:ExpressionStatement[79718-79744]"
    }, {
      "left" : "zb += pib - resultb;",
      "right" : "zb += pib - resultb;",
      "info" : "ExpressionStatement[79692-79712]:ExpressionStatement[79757-79777]"
    }, {
      "left" : "result = za + zb;",
      "right" : "result = za + zb;",
      "info" : "ExpressionStatement[79726-79743]:ExpressionStatement[79791-79808]"
    }, {
      "left" : "resultb = -(result - za - zb);",
      "right" : "resultb = -(result - za - zb);",
      "info" : "ExpressionStatement[79756-79786]:ExpressionStatement[79821-79851]"
    }, {
      "left" : "if (negate ^ leftPlane)",
      "right" : "if (negate ^ leftPlane)",
      "info" : "IfStatement[79807-79872]:IfStatement[79872-79937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79831-79872]:Block[79896-79937]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[79845-79862]:ExpressionStatement[79910-79927]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[79882-79896]:ReturnStatement[79947-79961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[80092-80098]:Modifier[80157-80163]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80099-80105]:Modifier[80164-80170]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[80106-80112]:PrimitiveType[80171-80177]"
    }, {
      "left" : "atan2",
      "right" : "atan2",
      "info" : "SimpleName[80113-80118]:SimpleName[80178-80183]"
    }, {
      "left" : "double y",
      "right" : "double y",
      "info" : "SingleVariableDeclaration[80119-80127]:SingleVariableDeclaration[80184-80192]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[80129-80137]:SingleVariableDeclaration[80194-80202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80139-82950]:Block[80204-83015]"
    }, {
      "left" : "if (x != x || y != y)",
      "right" : "if (x != x || y != y)",
      "info" : "IfStatement[80149-80213]:IfStatement[80214-80278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80171-80213]:Block[80236-80278]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[80185-80203]:ReturnStatement[80250-80268]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[80223-80858]:IfStatement[80288-80923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80235-80858]:Block[80300-80923]"
    }, {
      "left" : "final double result = x * y;",
      "right" : "final double result = x * y;",
      "info" : "VariableDeclarationStatement[80249-80277]:VariableDeclarationStatement[80314-80342]"
    }, {
      "left" : "final double invx = 1d / x;",
      "right" : "final double invx = 1d / x;",
      "info" : "VariableDeclarationStatement[80290-80317]:VariableDeclarationStatement[80355-80382]"
    }, {
      "left" : "final double invy = 1d / y;",
      "right" : "final double invy = 1d / y;",
      "info" : "VariableDeclarationStatement[80330-80357]:VariableDeclarationStatement[80395-80422]"
    }, {
      "left" : "if (invx == 0)",
      "right" : "if (invx == 0)",
      "info" : "IfStatement[80371-80587]:IfStatement[80436-80652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80386-80587]:Block[80451-80652]"
    }, {
      "left" : "if (x > 0)",
      "right" : "if (x > 0)",
      "info" : "IfStatement[80421-80573]:IfStatement[80486-80638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80432-80499]:Block[80497-80564]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[80454-80463]:ReturnStatement[80519-80528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80505-80573]:Block[80570-80638]"
    }, {
      "left" : "return copySign(Math.PI, y);",
      "right" : "return copySign(Math.PI, y);",
      "info" : "ReturnStatement[80527-80555]:ReturnStatement[80592-80620]"
    }, {
      "left" : "if (x < 0 || invx < 0)",
      "right" : "if (x < 0 || invx < 0)",
      "info" : "IfStatement[80601-80848]:IfStatement[80666-80913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80624-80796]:Block[80689-80861]"
    }, {
      "left" : "if (y < 0 || invy < 0)",
      "right" : "if (y < 0 || invy < 0)",
      "info" : "IfStatement[80642-80782]:IfStatement[80707-80847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80665-80721]:Block[80730-80786]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[80687-80703]:ReturnStatement[80752-80768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80727-80782]:Block[80792-80847]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[80749-80764]:ReturnStatement[80814-80829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80802-80848]:Block[80867-80913]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[80820-80834]:ReturnStatement[80885-80899]"
    }, {
      "left" : "if (y == Double.POSITIVE_INFINITY)",
      "right" : "if (y == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80901-81191]:IfStatement[80966-81256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80936-81191]:Block[81001-81256]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80950-81040]:IfStatement[81015-81105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80985-81040]:Block[81050-81105]"
    }, {
      "left" : "return Math.PI * F_1_4;",
      "right" : "return Math.PI * F_1_4;",
      "info" : "ReturnStatement[81003-81026]:ReturnStatement[81068-81091]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[81054-81144]:IfStatement[81119-81209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81089-81144]:Block[81154-81209]"
    }, {
      "left" : "return Math.PI * F_3_4;",
      "right" : "return Math.PI * F_3_4;",
      "info" : "ReturnStatement[81107-81130]:ReturnStatement[81172-81195]"
    }, {
      "left" : "return Math.PI * F_1_2;",
      "right" : "return Math.PI * F_1_2;",
      "info" : "ReturnStatement[81158-81181]:ReturnStatement[81223-81246]"
    }, {
      "left" : "if (y == Double.NEGATIVE_INFINITY)",
      "right" : "if (y == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[81201-81494]:IfStatement[81266-81559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81236-81494]:Block[81301-81559]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[81250-81341]:IfStatement[81315-81406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81285-81341]:Block[81350-81406]"
    }, {
      "left" : "return -Math.PI * F_1_4;",
      "right" : "return -Math.PI * F_1_4;",
      "info" : "ReturnStatement[81303-81327]:ReturnStatement[81368-81392]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[81355-81446]:IfStatement[81420-81511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81390-81446]:Block[81455-81511]"
    }, {
      "left" : "return -Math.PI * F_3_4;",
      "right" : "return -Math.PI * F_3_4;",
      "info" : "ReturnStatement[81408-81432]:ReturnStatement[81473-81497]"
    }, {
      "left" : "return -Math.PI * F_1_2;",
      "right" : "return -Math.PI * F_1_2;",
      "info" : "ReturnStatement[81460-81484]:ReturnStatement[81525-81549]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[81504-81710]:IfStatement[81569-81775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81539-81710]:Block[81604-81775]"
    }, {
      "left" : "if (y > 0 || 1 / y > 0)",
      "right" : "if (y > 0 || 1 / y > 0)",
      "info" : "IfStatement[81553-81619]:IfStatement[81618-81684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81577-81619]:Block[81642-81684]"
    }, {
      "left" : "return 0d;",
      "right" : "return 0d;",
      "info" : "ReturnStatement[81595-81605]:ReturnStatement[81660-81670]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[81633-81700]:IfStatement[81698-81765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81657-81700]:Block[81722-81765]"
    }, {
      "left" : "return -0d;",
      "right" : "return -0d;",
      "info" : "ReturnStatement[81675-81686]:ReturnStatement[81740-81751]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[81720-81948]:IfStatement[81785-82013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81763-81948]:Block[81828-82013]"
    }, {
      "left" : "if (y > 0.0 || 1 / y > 0.0)",
      "right" : "if (y > 0.0 || 1 / y > 0.0)",
      "info" : "IfStatement[81777-81852]:IfStatement[81842-81917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81805-81852]:Block[81870-81917]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[81823-81838]:ReturnStatement[81888-81903]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[81866-81938]:IfStatement[81931-82003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81890-81938]:Block[81955-82003]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[81908-81924]:ReturnStatement[81973-81989]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[82014-82223]:IfStatement[82079-82288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82026-82223]:Block[82091-82288]"
    }, {
      "left" : "if (y > 0 || 1 / y > 0)",
      "right" : "if (y > 0 || 1 / y > 0)",
      "info" : "IfStatement[82040-82119]:IfStatement[82105-82184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82064-82119]:Block[82129-82184]"
    }, {
      "left" : "return Math.PI * F_1_2;",
      "right" : "return Math.PI * F_1_2;",
      "info" : "ReturnStatement[82082-82105]:ReturnStatement[82147-82170]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[82133-82213]:IfStatement[82198-82278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82157-82213]:Block[82222-82278]"
    }, {
      "left" : "return -Math.PI * F_1_2;",
      "right" : "return -Math.PI * F_1_2;",
      "info" : "ReturnStatement[82175-82199]:ReturnStatement[82240-82264]"
    }, {
      "left" : "final double r = y / x;",
      "right" : "final double r = y / x;",
      "info" : "VariableDeclarationStatement[82266-82289]:VariableDeclarationStatement[82331-82354]"
    }, {
      "left" : "if (Double.isInfinite(r))",
      "right" : "if (Double.isInfinite(r))",
      "info" : "IfStatement[82298-82416]:IfStatement[82363-82481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82324-82416]:Block[82389-82481]"
    }, {
      "left" : "return atan(r, 0, x < 0);",
      "right" : "return atan(r, 0, x < 0);",
      "info" : "ReturnStatement[82381-82406]:ReturnStatement[82446-82471]"
    }, {
      "left" : "double ra = doubleHighPart(r);",
      "right" : "double ra = doubleHighPart(r);",
      "info" : "VariableDeclarationStatement[82426-82456]:VariableDeclarationStatement[82491-82521]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[82465-82484]:VariableDeclarationStatement[82530-82549]"
    }, {
      "left" : "final double xa = doubleHighPart(x);",
      "right" : "final double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[82513-82549]:VariableDeclarationStatement[82578-82614]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[82558-82583]:VariableDeclarationStatement[82623-82648]"
    }, {
      "left" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "right" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "info" : "ExpressionStatement[82593-82647]:ExpressionStatement[82658-82712]"
    }, {
      "left" : "final double temp = ra + rb;",
      "right" : "final double temp = ra + rb;",
      "info" : "VariableDeclarationStatement[82657-82685]:VariableDeclarationStatement[82722-82750]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[82694-82717]:ExpressionStatement[82759-82782]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[82726-82736]:ExpressionStatement[82791-82801]"
    }, {
      "left" : "if (ra == 0)",
      "right" : "if (ra == 0)",
      "info" : "IfStatement[82746-82847]:IfStatement[82811-82912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82759-82847]:Block[82824-82912]"
    }, {
      "left" : "ra = copySign(0d, y);",
      "right" : "ra = copySign(0d, y);",
      "info" : "ExpressionStatement[82816-82837]:ExpressionStatement[82881-82902]"
    }, {
      "left" : "final double result = atan(ra, rb, x < 0);",
      "right" : "final double result = atan(ra, rb, x < 0);",
      "info" : "VariableDeclarationStatement[82878-82920]:VariableDeclarationStatement[82943-82985]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[82930-82944]:ReturnStatement[82995-83009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[83086-83092]:Modifier[83151-83157]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83093-83099]:Modifier[83158-83164]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[83100-83106]:PrimitiveType[83165-83171]"
    }, {
      "left" : "asin",
      "right" : "asin",
      "info" : "SimpleName[83107-83111]:SimpleName[83172-83176]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[83112-83120]:SingleVariableDeclaration[83177-83185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83122-84654]:Block[83187-84719]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[83130-83180]:IfStatement[83195-83245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83142-83180]:Block[83207-83245]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[83154-83172]:ReturnStatement[83219-83237]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[83188-83251]:IfStatement[83253-83316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83213-83251]:Block[83278-83316]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[83225-83243]:ReturnStatement[83290-83308]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[83259-83312]:IfStatement[83324-83377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83273-83312]:Block[83338-83377]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[83285-83304]:ReturnStatement[83350-83369]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[83320-83375]:IfStatement[83385-83440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83335-83375]:Block[83400-83440]"
    }, {
      "left" : "return -Math.PI/2.0;",
      "right" : "return -Math.PI/2.0;",
      "info" : "ReturnStatement[83347-83367]:ReturnStatement[83412-83432]"
    }, {
      "left" : "if (x == 0.0)",
      "right" : "if (x == 0.0)",
      "info" : "IfStatement[83383-83466]:IfStatement[83448-83531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83397-83466]:Block[83462-83531]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[83449-83458]:ReturnStatement[83514-83523]"
    }, {
      "left" : "double temp = x * HEX_40000000;",
      "right" : "double temp = x * HEX_40000000;",
      "info" : "VariableDeclarationStatement[83545-83576]:VariableDeclarationStatement[83610-83641]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[83583-83617]:VariableDeclarationStatement[83648-83682]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[83624-83649]:VariableDeclarationStatement[83689-83714]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[83679-83697]:VariableDeclarationStatement[83744-83762]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[83704-83734]:VariableDeclarationStatement[83769-83799]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[83770-83779]:ExpressionStatement[83835-83844]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[83786-83795]:ExpressionStatement[83851-83860]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[83803-83824]:VariableDeclarationStatement[83868-83889]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[83831-83860]:VariableDeclarationStatement[83896-83925]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[83868-83883]:ExpressionStatement[83933-83948]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[83890-83914]:ExpressionStatement[83955-83979]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[83921-83931]:ExpressionStatement[83986-83996]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[83963-83972]:VariableDeclarationStatement[84028-84037]"
    }, {
      "left" : "y = sqrt(za);",
      "right" : "y = sqrt(za);",
      "info" : "ExpressionStatement[83979-83992]:ExpressionStatement[84044-84057]"
    }, {
      "left" : "temp = y * HEX_40000000;",
      "right" : "temp = y * HEX_40000000;",
      "info" : "ExpressionStatement[83999-84023]:ExpressionStatement[84064-84088]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[84030-84051]:ExpressionStatement[84095-84116]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[84058-84070]:ExpressionStatement[84123-84135]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[84115-84162]:ExpressionStatement[84180-84227]"
    }, {
      "left" : "double dx = zb / (2.0*y);",
      "right" : "double dx = zb / (2.0*y);",
      "info" : "VariableDeclarationStatement[84209-84234]:VariableDeclarationStatement[84274-84299]"
    }, {
      "left" : "double r = x/y;",
      "right" : "double r = x/y;",
      "info" : "VariableDeclarationStatement[84273-84288]:VariableDeclarationStatement[84338-84353]"
    }, {
      "left" : "temp = r * HEX_40000000;",
      "right" : "temp = r * HEX_40000000;",
      "info" : "ExpressionStatement[84295-84319]:ExpressionStatement[84360-84384]"
    }, {
      "left" : "double ra = r + temp - temp;",
      "right" : "double ra = r + temp - temp;",
      "info" : "VariableDeclarationStatement[84326-84354]:VariableDeclarationStatement[84391-84419]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[84361-84380]:VariableDeclarationStatement[84426-84445]"
    }, {
      "left" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "right" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "info" : "ExpressionStatement[84388-84434]:ExpressionStatement[84453-84499]"
    }, {
      "left" : "rb += -x * dx / y / y;",
      "right" : "rb += -x * dx / y / y;",
      "info" : "ExpressionStatement[84478-84500]:ExpressionStatement[84543-84565]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[84551-84566]:ExpressionStatement[84616-84631]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[84573-84596]:ExpressionStatement[84638-84661]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[84603-84613]:ExpressionStatement[84668-84678]"
    }, {
      "left" : "return atan(ra, rb, false);",
      "right" : "return atan(ra, rb, false);",
      "info" : "ReturnStatement[84621-84648]:ReturnStatement[84686-84713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[84794-84800]:Modifier[84859-84865]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84801-84807]:Modifier[84866-84872]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[84808-84814]:PrimitiveType[84873-84879]"
    }, {
      "left" : "acos",
      "right" : "acos",
      "info" : "SimpleName[84815-84819]:SimpleName[84880-84884]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[84820-84828]:SingleVariableDeclaration[84885-84893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84830-86463]:Block[84895-86528]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[84838-84888]:IfStatement[84903-84953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84850-84888]:Block[84915-84953]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[84862-84880]:ReturnStatement[84927-84945]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[84896-84959]:IfStatement[84961-85024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84921-84959]:Block[84986-85024]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[84933-84951]:ReturnStatement[84998-85016]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[84967-85017]:IfStatement[85032-85082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84982-85017]:Block[85047-85082]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[84994-85009]:ReturnStatement[85059-85074]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[85025-85070]:IfStatement[85090-85135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85039-85070]:Block[85104-85135]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[85051-85062]:ReturnStatement[85116-85127]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[85078-85129]:IfStatement[85143-85194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85090-85129]:Block[85155-85194]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[85102-85121]:ReturnStatement[85167-85186]"
    }, {
      "left" : "double temp = x * HEX_40000000;",
      "right" : "double temp = x * HEX_40000000;",
      "info" : "VariableDeclarationStatement[85208-85239]:VariableDeclarationStatement[85273-85304]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[85246-85280]:VariableDeclarationStatement[85311-85345]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[85287-85312]:VariableDeclarationStatement[85352-85377]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[85342-85360]:VariableDeclarationStatement[85407-85425]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[85367-85397]:VariableDeclarationStatement[85432-85462]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[85433-85442]:ExpressionStatement[85498-85507]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[85449-85458]:ExpressionStatement[85514-85523]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[85466-85487]:VariableDeclarationStatement[85531-85552]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[85494-85523]:VariableDeclarationStatement[85559-85588]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[85531-85546]:ExpressionStatement[85596-85611]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[85553-85577]:ExpressionStatement[85618-85642]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[85584-85594]:ExpressionStatement[85649-85659]"
    }, {
      "left" : "double y = sqrt(za);",
      "right" : "double y = sqrt(za);",
      "info" : "VariableDeclarationStatement[85626-85646]:VariableDeclarationStatement[85691-85711]"
    }, {
      "left" : "temp = y * HEX_40000000;",
      "right" : "temp = y * HEX_40000000;",
      "info" : "ExpressionStatement[85653-85677]:ExpressionStatement[85718-85742]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[85684-85705]:ExpressionStatement[85749-85770]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[85712-85724]:ExpressionStatement[85777-85789]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[85769-85816]:ExpressionStatement[85834-85881]"
    }, {
      "left" : "yb += zb / (2.0*y);",
      "right" : "yb += zb / (2.0*y);",
      "info" : "ExpressionStatement[85863-85882]:ExpressionStatement[85928-85947]"
    }, {
      "left" : "y = ya+yb;",
      "right" : "y = ya+yb;",
      "info" : "ExpressionStatement[85889-85899]:ExpressionStatement[85954-85964]"
    }, {
      "left" : "yb = -(y - ya - yb);",
      "right" : "yb = -(y - ya - yb);",
      "info" : "ExpressionStatement[85906-85926]:ExpressionStatement[85971-85991]"
    }, {
      "left" : "double r = y/x;",
      "right" : "double r = y/x;",
      "info" : "VariableDeclarationStatement[85965-85980]:VariableDeclarationStatement[86030-86045]"
    }, {
      "left" : "if (Double.isInfinite(r))",
      "right" : "if (Double.isInfinite(r))",
      "info" : "IfStatement[86013-86136]:IfStatement[86078-86201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86039-86136]:Block[86104-86201]"
    }, {
      "left" : "return Math.PI/2;",
      "right" : "return Math.PI/2;",
      "info" : "ReturnStatement[86076-86093]:ReturnStatement[86141-86158]"
    }, {
      "left" : "double ra = doubleHighPart(r);",
      "right" : "double ra = doubleHighPart(r);",
      "info" : "VariableDeclarationStatement[86144-86174]:VariableDeclarationStatement[86209-86239]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[86181-86200]:VariableDeclarationStatement[86246-86265]"
    }, {
      "left" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "right" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "info" : "ExpressionStatement[86208-86254]:ExpressionStatement[86273-86319]"
    }, {
      "left" : "rb += yb / x;",
      "right" : "rb += yb / x;",
      "info" : "ExpressionStatement[86298-86311]:ExpressionStatement[86363-86376]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[86362-86377]:ExpressionStatement[86427-86442]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[86384-86407]:ExpressionStatement[86449-86472]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[86414-86424]:ExpressionStatement[86479-86489]"
    }, {
      "left" : "return atan(ra, rb, x<0);",
      "right" : "return atan(ra, rb, x<0);",
      "info" : "ReturnStatement[86432-86457]:ReturnStatement[86497-86522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[86603-86609]:Modifier[86668-86674]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[86610-86616]:Modifier[86675-86681]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[86617-86623]:PrimitiveType[86682-86688]"
    }, {
      "left" : "cbrt",
      "right" : "cbrt",
      "info" : "SimpleName[86624-86628]:SimpleName[86689-86693]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[86629-86637]:SingleVariableDeclaration[86694-86702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86639-89162]:Block[86704-89227]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[86688-86729]:VariableDeclarationStatement[86753-86794]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[86736-86789]:VariableDeclarationStatement[86801-86854]"
    }, {
      "left" : "boolean subnormal = false;",
      "right" : "boolean subnormal = false;",
      "info" : "VariableDeclarationStatement[86796-86822]:VariableDeclarationStatement[86861-86887]"
    }, {
      "left" : "if (exponent == -1023)",
      "right" : "if (exponent == -1023)",
      "info" : "IfStatement[86830-87145]:IfStatement[86895-87210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86853-87145]:Block[86918-87210]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[86865-86914]:IfStatement[86930-86979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86877-86914]:Block[86942-86979]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[86893-86902]:ReturnStatement[86958-86967]"
    }, {
      "left" : "subnormal = true;",
      "right" : "subnormal = true;",
      "info" : "ExpressionStatement[86966-86983]:ExpressionStatement[87031-87048]"
    }, {
      "left" : "x *= 1.8014398509481984E16;",
      "right" : "x *= 1.8014398509481984E16;",
      "info" : "ExpressionStatement[86994-87021]:ExpressionStatement[87059-87086]"
    }, {
      "left" : "inbits = Double.doubleToLongBits(x);",
      "right" : "inbits = Double.doubleToLongBits(x);",
      "info" : "ExpressionStatement[87041-87077]:ExpressionStatement[87106-87142]"
    }, {
      "left" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "ExpressionStatement[87088-87137]:ExpressionStatement[87153-87202]"
    }, {
      "left" : "if (exponent == 1024)",
      "right" : "if (exponent == 1024)",
      "info" : "IfStatement[87153-87253]:IfStatement[87218-87318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87175-87253]:Block[87240-87318]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[87236-87245]:ReturnStatement[87301-87310]"
    }, {
      "left" : "int exp3 = exponent / 3;",
      "right" : "int exp3 = exponent / 3;",
      "info" : "VariableDeclarationStatement[87298-87322]:VariableDeclarationStatement[87363-87387]"
    }, {
      "left" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "right" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "info" : "VariableDeclarationStatement[87412-87562]:VariableDeclarationStatement[87477-87627]"
    }, {
      "left" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "right" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "info" : "VariableDeclarationStatement[87620-87718]:VariableDeclarationStatement[87685-87783]"
    }, {
      "left" : "double est = -0.010714690733195933;",
      "right" : "double est = -0.010714690733195933;",
      "info" : "VariableDeclarationStatement[87783-87818]:VariableDeclarationStatement[87848-87883]"
    }, {
      "left" : "est = est * mant + 0.0875862700108075;",
      "right" : "est = est * mant + 0.0875862700108075;",
      "info" : "ExpressionStatement[87825-87863]:ExpressionStatement[87890-87928]"
    }, {
      "left" : "est = est * mant + -0.3058015757857271;",
      "right" : "est = est * mant + -0.3058015757857271;",
      "info" : "ExpressionStatement[87870-87909]:ExpressionStatement[87935-87974]"
    }, {
      "left" : "est = est * mant + 0.7249995199969751;",
      "right" : "est = est * mant + 0.7249995199969751;",
      "info" : "ExpressionStatement[87916-87954]:ExpressionStatement[87981-88019]"
    }, {
      "left" : "est = est * mant + 0.5039018405998233;",
      "right" : "est = est * mant + 0.5039018405998233;",
      "info" : "ExpressionStatement[87961-87999]:ExpressionStatement[88026-88064]"
    }, {
      "left" : "est *= CBRTTWO[exponent % 3 + 2];",
      "right" : "est *= CBRTTWO[exponent % 3 + 2];",
      "info" : "ExpressionStatement[88007-88040]:ExpressionStatement[88072-88105]"
    }, {
      "left" : "final double xs = x / (p2*p2*p2);",
      "right" : "final double xs = x / (p2*p2*p2);",
      "info" : "VariableDeclarationStatement[88304-88337]:VariableDeclarationStatement[88369-88402]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[88344-88384]:ExpressionStatement[88409-88449]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[88391-88431]:ExpressionStatement[88456-88496]"
    }, {
      "left" : "double temp = est * HEX_40000000;",
      "right" : "double temp = est * HEX_40000000;",
      "info" : "VariableDeclarationStatement[88529-88562]:VariableDeclarationStatement[88594-88627]"
    }, {
      "left" : "double ya = est + temp - temp;",
      "right" : "double ya = est + temp - temp;",
      "info" : "VariableDeclarationStatement[88569-88599]:VariableDeclarationStatement[88634-88664]"
    }, {
      "left" : "double yb = est - ya;",
      "right" : "double yb = est - ya;",
      "info" : "VariableDeclarationStatement[88606-88627]:VariableDeclarationStatement[88671-88692]"
    }, {
      "left" : "double za = ya * ya;",
      "right" : "double za = ya * ya;",
      "info" : "VariableDeclarationStatement[88635-88655]:VariableDeclarationStatement[88700-88720]"
    }, {
      "left" : "double zb = ya * yb * 2.0 + yb * yb;",
      "right" : "double zb = ya * yb * 2.0 + yb * yb;",
      "info" : "VariableDeclarationStatement[88662-88698]:VariableDeclarationStatement[88727-88763]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[88705-88730]:ExpressionStatement[88770-88795]"
    }, {
      "left" : "double temp2 = za + temp - temp;",
      "right" : "double temp2 = za + temp - temp;",
      "info" : "VariableDeclarationStatement[88737-88769]:VariableDeclarationStatement[88802-88834]"
    }, {
      "left" : "zb += za - temp2;",
      "right" : "zb += za - temp2;",
      "info" : "ExpressionStatement[88776-88793]:ExpressionStatement[88841-88858]"
    }, {
      "left" : "za = temp2;",
      "right" : "za = temp2;",
      "info" : "ExpressionStatement[88800-88811]:ExpressionStatement[88865-88876]"
    }, {
      "left" : "zb = za * yb + ya * zb + zb * yb;",
      "right" : "zb = za * yb + ya * zb + zb * yb;",
      "info" : "ExpressionStatement[88819-88852]:ExpressionStatement[88884-88917]"
    }, {
      "left" : "za = za * ya;",
      "right" : "za = za * ya;",
      "info" : "ExpressionStatement[88859-88872]:ExpressionStatement[88924-88937]"
    }, {
      "left" : "double na = xs - za;",
      "right" : "double na = xs - za;",
      "info" : "VariableDeclarationStatement[88880-88900]:VariableDeclarationStatement[88945-88965]"
    }, {
      "left" : "double nb = -(na - xs + za);",
      "right" : "double nb = -(na - xs + za);",
      "info" : "VariableDeclarationStatement[88907-88935]:VariableDeclarationStatement[88972-89000]"
    }, {
      "left" : "nb -= zb;",
      "right" : "nb -= zb;",
      "info" : "ExpressionStatement[88942-88951]:ExpressionStatement[89007-89016]"
    }, {
      "left" : "est += (na+nb)/(3*est*est);",
      "right" : "est += (na+nb)/(3*est*est);",
      "info" : "ExpressionStatement[88959-88986]:ExpressionStatement[89024-89051]"
    }, {
      "left" : "est *= p2;",
      "right" : "est *= p2;",
      "info" : "ExpressionStatement[89049-89059]:ExpressionStatement[89114-89124]"
    }, {
      "left" : "if (subnormal)",
      "right" : "if (subnormal)",
      "info" : "IfStatement[89067-89137]:IfStatement[89132-89202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89082-89137]:Block[89147-89202]"
    }, {
      "left" : "est *= 3.814697265625E-6;",
      "right" : "est *= 3.814697265625E-6;",
      "info" : "ExpressionStatement[89094-89119]:ExpressionStatement[89159-89184]"
    }, {
      "left" : "return est;",
      "right" : "return est;",
      "info" : "ReturnStatement[89145-89156]:ReturnStatement[89210-89221]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[89327-89333]:Modifier[89392-89398]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[89334-89340]:Modifier[89399-89405]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[89341-89347]:PrimitiveType[89406-89412]"
    }, {
      "left" : "toRadians",
      "right" : "toRadians",
      "info" : "SimpleName[89348-89357]:SimpleName[89413-89422]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[89358-89366]:SingleVariableDeclaration[89423-89431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89372-89950]:Block[89437-90015]"
    }, {
      "left" : "if (Double.isInfinite(x) || x == 0.0)",
      "right" : "if (Double.isInfinite(x) || x == 0.0)",
      "info" : "IfStatement[89382-89493]:IfStatement[89447-89558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89420-89493]:Block[89485-89558]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[89474-89483]:ReturnStatement[89539-89548]"
    }, {
      "left" : "final double facta = 0.01745329052209854;",
      "right" : "final double facta = 0.01745329052209854;",
      "info" : "VariableDeclarationStatement[89566-89607]:VariableDeclarationStatement[89631-89672]"
    }, {
      "left" : "final double factb = 1.997844754509471E-9;",
      "right" : "final double factb = 1.997844754509471E-9;",
      "info" : "VariableDeclarationStatement[89616-89658]:VariableDeclarationStatement[89681-89723]"
    }, {
      "left" : "double xa = doubleHighPart(x);",
      "right" : "double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[89668-89698]:VariableDeclarationStatement[89733-89763]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[89707-89726]:VariableDeclarationStatement[89772-89791]"
    }, {
      "left" : "double result = xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "double result = xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "VariableDeclarationStatement[89736-89802]:VariableDeclarationStatement[89801-89867]"
    }, {
      "left" : "if (result == 0)",
      "right" : "if (result == 0)",
      "info" : "IfStatement[89811-89921]:IfStatement[89876-89986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89828-89921]:Block[89893-89986]"
    }, {
      "left" : "result = result * x;",
      "right" : "result = result * x;",
      "info" : "ExpressionStatement[89842-89862]:ExpressionStatement[89907-89927]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[89930-89944]:ReturnStatement[89995-90009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90115-90121]:Modifier[90180-90186]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90122-90128]:Modifier[90187-90193]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[90129-90135]:PrimitiveType[90194-90200]"
    }, {
      "left" : "toDegrees",
      "right" : "toDegrees",
      "info" : "SimpleName[90136-90145]:SimpleName[90201-90210]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[90146-90154]:SingleVariableDeclaration[90211-90219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90160-90584]:Block[90225-90649]"
    }, {
      "left" : "if (Double.isInfinite(x) || x == 0.0)",
      "right" : "if (Double.isInfinite(x) || x == 0.0)",
      "info" : "IfStatement[90170-90281]:IfStatement[90235-90346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90208-90281]:Block[90273-90346]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[90262-90271]:ReturnStatement[90327-90336]"
    }, {
      "left" : "final double facta = 57.2957763671875;",
      "right" : "final double facta = 57.2957763671875;",
      "info" : "VariableDeclarationStatement[90354-90392]:VariableDeclarationStatement[90419-90457]"
    }, {
      "left" : "final double factb = 3.145894820876798E-6;",
      "right" : "final double factb = 3.145894820876798E-6;",
      "info" : "VariableDeclarationStatement[90401-90443]:VariableDeclarationStatement[90466-90508]"
    }, {
      "left" : "double xa = doubleHighPart(x);",
      "right" : "double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[90453-90483]:VariableDeclarationStatement[90518-90548]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[90492-90511]:VariableDeclarationStatement[90557-90576]"
    }, {
      "left" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "ReturnStatement[90521-90578]:ReturnStatement[90586-90643]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90713-90719]:Modifier[90778-90784]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90720-90726]:Modifier[90785-90791]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[90727-90730]:PrimitiveType[90792-90795]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[90731-90734]:SimpleName[90796-90799]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[90735-90746]:SingleVariableDeclaration[90800-90811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90748-90788]:Block[90813-90853]"
    }, {
      "left" : "return (x < 0) ? -x : x;",
      "right" : "return (x < 0) ? -x : x;",
      "info" : "ReturnStatement[90758-90782]:ReturnStatement[90823-90847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90917-90923]:Modifier[90982-90988]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90924-90930]:Modifier[90989-90995]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[90931-90935]:PrimitiveType[90996-91000]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[90936-90939]:SimpleName[91001-91004]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[90940-90952]:SingleVariableDeclaration[91005-91017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90954-90995]:Block[91019-91060]"
    }, {
      "left" : "return (x < 0l) ? -x : x;",
      "right" : "return (x < 0l) ? -x : x;",
      "info" : "ReturnStatement[90964-90989]:ReturnStatement[91029-91054]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91124-91130]:Modifier[91189-91195]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[91131-91137]:Modifier[91196-91202]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[91138-91143]:PrimitiveType[91203-91208]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[91144-91147]:SimpleName[91209-91212]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[91148-91161]:SingleVariableDeclaration[91213-91226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91163-91243]:Block[91228-91308]"
    }, {
      "left" : "return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;",
      "right" : "return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;",
      "info" : "ReturnStatement[91173-91221]:ReturnStatement[91238-91286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91372-91378]:Modifier[91437-91443]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[91379-91385]:Modifier[91444-91450]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[91386-91392]:PrimitiveType[91451-91457]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[91393-91396]:SimpleName[91458-91461]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[91397-91405]:SingleVariableDeclaration[91462-91470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91407-91484]:Block[91472-91549]"
    }, {
      "left" : "return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;",
      "right" : "return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;",
      "info" : "ReturnStatement[91417-91462]:ReturnStatement[91482-91527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91654-91660]:Modifier[91719-91725]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[91661-91667]:Modifier[91726-91732]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[91668-91674]:PrimitiveType[91733-91739]"
    }, {
      "left" : "ulp",
      "right" : "ulp",
      "info" : "SimpleName[91675-91678]:SimpleName[91740-91743]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[91679-91687]:SingleVariableDeclaration[91744-91752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91689-91868]:Block[91754-91933]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[91699-91781]:IfStatement[91764-91846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91725-91781]:Block[91790-91846]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[91739-91771]:ReturnStatement[91804-91836]"
    }, {
      "left" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "right" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "info" : "ReturnStatement[91790-91862]:ReturnStatement[91855-91927]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92038-92044]:Modifier[92103-92109]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[92045-92051]:Modifier[92110-92116]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[92052-92057]:PrimitiveType[92117-92122]"
    }, {
      "left" : "ulp",
      "right" : "ulp",
      "info" : "SimpleName[92058-92061]:SimpleName[92123-92126]"
    }, {
      "left" : "float x",
      "right" : "float x",
      "info" : "SingleVariableDeclaration[92062-92069]:SingleVariableDeclaration[92127-92134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92071-92242]:Block[92136-92307]"
    }, {
      "left" : "if (Float.isInfinite(x))",
      "right" : "if (Float.isInfinite(x))",
      "info" : "IfStatement[92081-92161]:IfStatement[92146-92226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92106-92161]:Block[92171-92226]"
    }, {
      "left" : "return Float.POSITIVE_INFINITY;",
      "right" : "return Float.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[92120-92151]:ReturnStatement[92185-92216]"
    }, {
      "left" : "return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));",
      "right" : "return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));",
      "info" : "ReturnStatement[92170-92236]:ReturnStatement[92235-92301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92414-92420]:Modifier[92479-92485]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[92421-92427]:Modifier[92486-92492]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[92428-92434]:PrimitiveType[92493-92499]"
    }, {
      "left" : "scalb",
      "right" : "scalb",
      "info" : "SimpleName[92435-92440]:SimpleName[92500-92505]"
    }, {
      "left" : "final double d",
      "right" : "final double d",
      "info" : "SingleVariableDeclaration[92441-92455]:SingleVariableDeclaration[92506-92520]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[92457-92468]:SingleVariableDeclaration[92522-92533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92470-95502]:Block[92535-95567]"
    }, {
      "left" : "if ((n > -1023) && (n < 1024))",
      "right" : "if ((n > -1023) && (n < 1024))",
      "info" : "IfStatement[92572-92689]:IfStatement[92637-92754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92603-92689]:Block[92668-92754]"
    }, {
      "left" : "return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);",
      "right" : "return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);",
      "info" : "ReturnStatement[92617-92679]:ReturnStatement[92682-92744]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0))",
      "info" : "IfStatement[92731-92821]:IfStatement[92796-92886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92788-92821]:Block[92853-92886]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[92802-92811]:ReturnStatement[92867-92876]"
    }, {
      "left" : "if (n < -2098)",
      "right" : "if (n < -2098)",
      "info" : "IfStatement[92830-92897]:IfStatement[92895-92962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92845-92897]:Block[92910-92962]"
    }, {
      "left" : "return (d > 0) ? 0.0 : -0.0;",
      "right" : "return (d > 0) ? 0.0 : -0.0;",
      "info" : "ReturnStatement[92859-92887]:ReturnStatement[92924-92952]"
    }, {
      "left" : "if (n > 2097)",
      "right" : "if (n > 2097)",
      "info" : "IfStatement[92906-93013]:IfStatement[92971-93078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92920-93013]:Block[92985-93078]"
    }, {
      "left" : "return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[92934-93003]:ReturnStatement[92999-93068]"
    }, {
      "left" : "final long bits = Double.doubleToLongBits(d);",
      "right" : "final long bits = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[93046-93091]:VariableDeclarationStatement[93111-93156]"
    }, {
      "left" : "final long sign = bits & 0x8000000000000000L;",
      "right" : "final long sign = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[93100-93145]:VariableDeclarationStatement[93165-93210]"
    }, {
      "left" : "int  exponent   = ((int) (bits >>> 52)) & 0x7ff;",
      "right" : "int  exponent   = ((int) (bits >>> 52)) & 0x7ff;",
      "info" : "VariableDeclarationStatement[93154-93202]:VariableDeclarationStatement[93219-93267]"
    }, {
      "left" : "long mantissa   = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa   = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[93211-93256]:VariableDeclarationStatement[93276-93321]"
    }, {
      "left" : "int scaledExponent = exponent + n;",
      "right" : "int scaledExponent = exponent + n;",
      "info" : "VariableDeclarationStatement[93301-93335]:VariableDeclarationStatement[93366-93400]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[93345-95495]:IfStatement[93410-95560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93356-94525]:Block[93421-94590]"
    }, {
      "left" : "if (scaledExponent > 0)",
      "right" : "if (scaledExponent > 0)",
      "info" : "IfStatement[93422-94515]:IfStatement[93487-94580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93446-93657]:Block[93511-93722]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[93561-93643]:ReturnStatement[93626-93708]"
    }, {
      "left" : "if (scaledExponent > -53)",
      "right" : "if (scaledExponent > -53)",
      "info" : "IfStatement[93663-94515]:IfStatement[93728-94580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93689-94364]:Block[93754-94429]"
    }, {
      "left" : "mantissa = mantissa | (1L << 52);",
      "right" : "mantissa = mantissa | (1L << 52);",
      "info" : "ExpressionStatement[93844-93877]:ExpressionStatement[93909-93942]"
    }, {
      "left" : "final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));",
      "right" : "final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));",
      "info" : "VariableDeclarationStatement[93981-94054]:VariableDeclarationStatement[94046-94119]"
    }, {
      "left" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "right" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "info" : "ExpressionStatement[94071-94116]:ExpressionStatement[94136-94181]"
    }, {
      "left" : "if (mostSignificantLostBit != 0)",
      "right" : "if (mostSignificantLostBit != 0)",
      "info" : "IfStatement[94133-94284]:IfStatement[94198-94349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94166-94284]:Block[94231-94349]"
    }, {
      "left" : "mantissa++;",
      "right" : "mantissa++;",
      "info" : "ExpressionStatement[94255-94266]:ExpressionStatement[94320-94331]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | mantissa);",
      "info" : "ReturnStatement[94301-94349]:ReturnStatement[94366-94414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94370-94515]:Block[94435-94580]"
    }, {
      "left" : "return (sign == 0L) ? 0.0 : -0.0;",
      "right" : "return (sign == 0L) ? 0.0 : -0.0;",
      "info" : "ReturnStatement[94468-94501]:ReturnStatement[94533-94566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94531-95495]:Block[94596-95560]"
    }, {
      "left" : "if (exponent == 0)",
      "right" : "if (exponent == 0)",
      "info" : "IfStatement[94596-95485]:IfStatement[94661-95550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94615-95226]:Block[94680-95291]"
    }, {
      "left" : "while ((mantissa >>> 52) != 1)",
      "right" : "while ((mantissa >>> 52) != 1)",
      "info" : "WhileStatement[94697-94831]:WhileStatement[94762-94896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94728-94831]:Block[94793-94896]"
    }, {
      "left" : "mantissa = mantissa << 1;",
      "right" : "mantissa = mantissa << 1;",
      "info" : "ExpressionStatement[94750-94775]:ExpressionStatement[94815-94840]"
    }, {
      "left" : "--scaledExponent;",
      "right" : "--scaledExponent;",
      "info" : "ExpressionStatement[94796-94813]:ExpressionStatement[94861-94878]"
    }, {
      "left" : "++scaledExponent;",
      "right" : "++scaledExponent;",
      "info" : "ExpressionStatement[94848-94865]:ExpressionStatement[94913-94930]"
    }, {
      "left" : "mantissa = mantissa & 0x000fffffffffffffL;",
      "right" : "mantissa = mantissa & 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[94882-94924]:ExpressionStatement[94947-94989]"
    }, {
      "left" : "if (scaledExponent < 2047)",
      "right" : "if (scaledExponent < 2047)",
      "info" : "IfStatement[94942-95211]:IfStatement[95007-95276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94969-95091]:Block[95034-95156]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[94991-95073]:ReturnStatement[95056-95138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95097-95211]:Block[95162-95276]"
    }, {
      "left" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[95119-95193]:ReturnStatement[95184-95258]"
    }, {
      "left" : "if (scaledExponent < 2047)",
      "right" : "if (scaledExponent < 2047)",
      "info" : "IfStatement[95232-95485]:IfStatement[95297-95550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95259-95373]:Block[95324-95438]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[95277-95359]:ReturnStatement[95342-95424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95379-95485]:Block[95444-95550]"
    }, {
      "left" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[95397-95471]:ReturnStatement[95462-95536]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[95673-95679]:Modifier[95738-95744]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[95680-95686]:Modifier[95745-95751]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[95687-95692]:PrimitiveType[95752-95757]"
    }, {
      "left" : "scalb",
      "right" : "scalb",
      "info" : "SimpleName[95693-95698]:SimpleName[95758-95763]"
    }, {
      "left" : "final float f",
      "right" : "final float f",
      "info" : "SingleVariableDeclaration[95699-95712]:SingleVariableDeclaration[95764-95777]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[95714-95725]:SingleVariableDeclaration[95779-95790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95727-98647]:Block[95792-98712]"
    }, {
      "left" : "if ((n > -127) && (n < 128))",
      "right" : "if ((n > -127) && (n < 128))",
      "info" : "IfStatement[95829-95931]:IfStatement[95894-95996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95858-95931]:Block[95923-95996]"
    }, {
      "left" : "return f * Float.intBitsToFloat((n + 127) << 23);",
      "right" : "return f * Float.intBitsToFloat((n + 127) << 23);",
      "info" : "ReturnStatement[95872-95921]:ReturnStatement[95937-95986]"
    }, {
      "left" : "if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f))",
      "right" : "if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f))",
      "info" : "IfStatement[95973-96062]:IfStatement[96038-96127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96029-96062]:Block[96094-96127]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[96043-96052]:ReturnStatement[96108-96117]"
    }, {
      "left" : "if (n < -277)",
      "right" : "if (n < -277)",
      "info" : "IfStatement[96071-96139]:IfStatement[96136-96204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96085-96139]:Block[96150-96204]"
    }, {
      "left" : "return (f > 0) ? 0.0f : -0.0f;",
      "right" : "return (f > 0) ? 0.0f : -0.0f;",
      "info" : "ReturnStatement[96099-96129]:ReturnStatement[96164-96194]"
    }, {
      "left" : "if (n > 276)",
      "right" : "if (n > 276)",
      "info" : "IfStatement[96148-96252]:IfStatement[96213-96317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96161-96252]:Block[96226-96317]"
    }, {
      "left" : "return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[96175-96242]:ReturnStatement[96240-96307]"
    }, {
      "left" : "final int bits = Float.floatToIntBits(f);",
      "right" : "final int bits = Float.floatToIntBits(f);",
      "info" : "VariableDeclarationStatement[96285-96326]:VariableDeclarationStatement[96350-96391]"
    }, {
      "left" : "final int sign = bits & 0x80000000;",
      "right" : "final int sign = bits & 0x80000000;",
      "info" : "VariableDeclarationStatement[96335-96370]:VariableDeclarationStatement[96400-96435]"
    }, {
      "left" : "int  exponent  = (bits >>> 23) & 0xff;",
      "right" : "int  exponent  = (bits >>> 23) & 0xff;",
      "info" : "VariableDeclarationStatement[96379-96417]:VariableDeclarationStatement[96444-96482]"
    }, {
      "left" : "int mantissa   = bits & 0x007fffff;",
      "right" : "int mantissa   = bits & 0x007fffff;",
      "info" : "VariableDeclarationStatement[96426-96461]:VariableDeclarationStatement[96491-96526]"
    }, {
      "left" : "int scaledExponent = exponent + n;",
      "right" : "int scaledExponent = exponent + n;",
      "info" : "VariableDeclarationStatement[96506-96540]:VariableDeclarationStatement[96571-96605]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[96550-98640]:IfStatement[96615-98705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96561-97712]:Block[96626-97777]"
    }, {
      "left" : "if (scaledExponent > 0)",
      "right" : "if (scaledExponent > 0)",
      "info" : "IfStatement[96626-97702]:IfStatement[96691-97767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96650-96849]:Block[96715-96914]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[96765-96835]:ReturnStatement[96830-96900]"
    }, {
      "left" : "if (scaledExponent > -24)",
      "right" : "if (scaledExponent > -24)",
      "info" : "IfStatement[96855-97702]:IfStatement[96920-97767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96881-97550]:Block[96946-97615]"
    }, {
      "left" : "mantissa = mantissa | (1 << 23);",
      "right" : "mantissa = mantissa | (1 << 23);",
      "info" : "ExpressionStatement[97036-97068]:ExpressionStatement[97101-97133]"
    }, {
      "left" : "final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));",
      "right" : "final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));",
      "info" : "VariableDeclarationStatement[97172-97243]:VariableDeclarationStatement[97237-97308]"
    }, {
      "left" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "right" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "info" : "ExpressionStatement[97260-97305]:ExpressionStatement[97325-97370]"
    }, {
      "left" : "if (mostSignificantLostBit != 0)",
      "right" : "if (mostSignificantLostBit != 0)",
      "info" : "IfStatement[97322-97473]:IfStatement[97387-97538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97355-97473]:Block[97420-97538]"
    }, {
      "left" : "mantissa++;",
      "right" : "mantissa++;",
      "info" : "ExpressionStatement[97444-97455]:ExpressionStatement[97509-97520]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | mantissa);",
      "info" : "ReturnStatement[97490-97535]:ReturnStatement[97555-97600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97556-97702]:Block[97621-97767]"
    }, {
      "left" : "return (sign == 0) ? 0.0f : -0.0f;",
      "right" : "return (sign == 0) ? 0.0f : -0.0f;",
      "info" : "ReturnStatement[97654-97688]:ReturnStatement[97719-97753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97718-98640]:Block[97783-98705]"
    }, {
      "left" : "if (exponent == 0)",
      "right" : "if (exponent == 0)",
      "info" : "IfStatement[97782-98630]:IfStatement[97847-98695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97801-98387]:Block[97866-98452]"
    }, {
      "left" : "while ((mantissa >>> 23) != 1)",
      "right" : "while ((mantissa >>> 23) != 1)",
      "info" : "WhileStatement[97883-98017]:WhileStatement[97948-98082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97914-98017]:Block[97979-98082]"
    }, {
      "left" : "mantissa = mantissa << 1;",
      "right" : "mantissa = mantissa << 1;",
      "info" : "ExpressionStatement[97936-97961]:ExpressionStatement[98001-98026]"
    }, {
      "left" : "--scaledExponent;",
      "right" : "--scaledExponent;",
      "info" : "ExpressionStatement[97982-97999]:ExpressionStatement[98047-98064]"
    }, {
      "left" : "++scaledExponent;",
      "right" : "++scaledExponent;",
      "info" : "ExpressionStatement[98034-98051]:ExpressionStatement[98099-98116]"
    }, {
      "left" : "mantissa = mantissa & 0x007fffff;",
      "right" : "mantissa = mantissa & 0x007fffff;",
      "info" : "ExpressionStatement[98068-98101]:ExpressionStatement[98133-98166]"
    }, {
      "left" : "if (scaledExponent < 255)",
      "right" : "if (scaledExponent < 255)",
      "info" : "IfStatement[98119-98372]:IfStatement[98184-98437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98145-98255]:Block[98210-98320]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[98167-98237]:ReturnStatement[98232-98302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98261-98372]:Block[98326-98437]"
    }, {
      "left" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[98283-98354]:ReturnStatement[98348-98419]"
    }, {
      "left" : "if (scaledExponent < 255)",
      "right" : "if (scaledExponent < 255)",
      "info" : "IfStatement[98393-98630]:IfStatement[98458-98695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98419-98521]:Block[98484-98586]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[98437-98507]:ReturnStatement[98502-98572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98527-98630]:Block[98592-98695]"
    }, {
      "left" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[98545-98616]:ReturnStatement[98610-98681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[99800-99806]:Modifier[99865-99871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[99807-99813]:Modifier[99872-99878]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[99814-99820]:PrimitiveType[99879-99885]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[99821-99830]:SimpleName[99886-99895]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[99831-99839]:SingleVariableDeclaration[99896-99904]"
    }, {
      "left" : "double direction",
      "right" : "double direction",
      "info" : "SingleVariableDeclaration[99841-99857]:SingleVariableDeclaration[99906-99922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99859-100769]:Block[99924-100834]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isNaN(direction))",
      "right" : "if (Double.isNaN(d) || Double.isNaN(direction))",
      "info" : "IfStatement[99922-100293]:IfStatement[99987-100358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99970-100012]:Block[100035-100077]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[99984-100002]:ReturnStatement[100049-100067]"
    }, {
      "left" : "if (d == direction)",
      "right" : "if (d == direction)",
      "info" : "IfStatement[100018-100293]:IfStatement[100083-100358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100038-100079]:Block[100103-100144]"
    }, {
      "left" : "return direction;",
      "right" : "return direction;",
      "info" : "ReturnStatement[100052-100069]:ReturnStatement[100117-100134]"
    }, {
      "left" : "if (Double.isInfinite(d))",
      "right" : "if (Double.isInfinite(d))",
      "info" : "IfStatement[100085-100293]:IfStatement[100150-100358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100111-100189]:Block[100176-100254]"
    }, {
      "left" : "return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;",
      "right" : "return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;",
      "info" : "ReturnStatement[100125-100179]:ReturnStatement[100190-100244]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[100195-100293]:IfStatement[100260-100358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100207-100293]:Block[100272-100358]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[100221-100283]:ReturnStatement[100286-100348]"
    }, {
      "left" : "final long bits = Double.doubleToLongBits(d);",
      "right" : "final long bits = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[100416-100461]:VariableDeclarationStatement[100481-100526]"
    }, {
      "left" : "final long sign = bits & 0x8000000000000000L;",
      "right" : "final long sign = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[100470-100515]:VariableDeclarationStatement[100535-100580]"
    }, {
      "left" : "if ((direction < d) ^ (sign == 0L))",
      "right" : "if ((direction < d) ^ (sign == 0L))",
      "info" : "IfStatement[100524-100762]:IfStatement[100589-100827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100560-100658]:Block[100625-100723]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));",
      "right" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));",
      "info" : "ReturnStatement[100574-100648]:ReturnStatement[100639-100713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100664-100762]:Block[100729-100827]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));",
      "right" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));",
      "info" : "ReturnStatement[100678-100752]:ReturnStatement[100743-100817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101922-101928]:Modifier[101987-101993]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101929-101935]:Modifier[101994-102000]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[101936-101941]:PrimitiveType[102001-102006]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[101942-101951]:SimpleName[102007-102016]"
    }, {
      "left" : "final float f",
      "right" : "final float f",
      "info" : "SingleVariableDeclaration[101952-101965]:SingleVariableDeclaration[102017-102030]"
    }, {
      "left" : "final double direction",
      "right" : "final double direction",
      "info" : "SingleVariableDeclaration[101967-101989]:SingleVariableDeclaration[102032-102054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101991-102866]:Block[102056-102931]"
    }, {
      "left" : "if (Double.isNaN(f) || Double.isNaN(direction))",
      "right" : "if (Double.isNaN(f) || Double.isNaN(direction))",
      "info" : "IfStatement[102054-102429]:IfStatement[102119-102494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102102-102143]:Block[102167-102208]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[102116-102133]:ReturnStatement[102181-102198]"
    }, {
      "left" : "if (f == direction)",
      "right" : "if (f == direction)",
      "info" : "IfStatement[102149-102429]:IfStatement[102214-102494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102169-102218]:Block[102234-102283]"
    }, {
      "left" : "return (float) direction;",
      "right" : "return (float) direction;",
      "info" : "ReturnStatement[102183-102208]:ReturnStatement[102248-102273]"
    }, {
      "left" : "if (Float.isInfinite(f))",
      "right" : "if (Float.isInfinite(f))",
      "info" : "IfStatement[102224-102429]:IfStatement[102289-102494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102249-102326]:Block[102314-102391]"
    }, {
      "left" : "return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;",
      "right" : "return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;",
      "info" : "ReturnStatement[102263-102316]:ReturnStatement[102328-102381]"
    }, {
      "left" : "if (f == 0f)",
      "right" : "if (f == 0f)",
      "info" : "IfStatement[102332-102429]:IfStatement[102397-102494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102345-102429]:Block[102410-102494]"
    }, {
      "left" : "return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;",
      "info" : "ReturnStatement[102359-102419]:ReturnStatement[102424-102484]"
    }, {
      "left" : "final int bits = Float.floatToIntBits(f);",
      "right" : "final int bits = Float.floatToIntBits(f);",
      "info" : "VariableDeclarationStatement[102552-102593]:VariableDeclarationStatement[102617-102658]"
    }, {
      "left" : "final int sign = bits & 0x80000000;",
      "right" : "final int sign = bits & 0x80000000;",
      "info" : "VariableDeclarationStatement[102602-102637]:VariableDeclarationStatement[102667-102702]"
    }, {
      "left" : "if ((direction < f) ^ (sign == 0))",
      "right" : "if ((direction < f) ^ (sign == 0))",
      "info" : "IfStatement[102646-102859]:IfStatement[102711-102924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102681-102767]:Block[102746-102832]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));",
      "right" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));",
      "info" : "ReturnStatement[102695-102757]:ReturnStatement[102760-102822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102773-102859]:Block[102838-102924]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));",
      "right" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));",
      "info" : "ReturnStatement[102787-102849]:ReturnStatement[102852-102914]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[103062-103068]:Modifier[103127-103133]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[103069-103075]:Modifier[103134-103140]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[103076-103082]:PrimitiveType[103141-103147]"
    }, {
      "left" : "floor",
      "right" : "floor",
      "info" : "SimpleName[103083-103088]:SimpleName[103148-103153]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[103089-103097]:SingleVariableDeclaration[103154-103162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103099-103429]:Block[103164-103494]"
    }, {
      "left" : "long y;",
      "right" : "long y;",
      "info" : "VariableDeclarationStatement[103109-103116]:VariableDeclarationStatement[103174-103181]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[103126-103178]:IfStatement[103191-103243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103138-103178]:Block[103203-103243]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[103159-103168]:ReturnStatement[103224-103233]"
    }, {
      "left" : "if (x >= TWO_POWER_52 || x <= -TWO_POWER_52)",
      "right" : "if (x >= TWO_POWER_52 || x <= -TWO_POWER_52)",
      "info" : "IfStatement[103188-103266]:IfStatement[103253-103331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103233-103266]:Block[103298-103331]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[103247-103256]:ReturnStatement[103312-103321]"
    }, {
      "left" : "y = (long) x;",
      "right" : "y = (long) x;",
      "info" : "ExpressionStatement[103276-103289]:ExpressionStatement[103341-103354]"
    }, {
      "left" : "if (x < 0 && y != x)",
      "right" : "if (x < 0 && y != x)",
      "info" : "IfStatement[103298-103347]:IfStatement[103363-103412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103319-103347]:Block[103384-103412]"
    }, {
      "left" : "y--;",
      "right" : "y--;",
      "info" : "ExpressionStatement[103333-103337]:ExpressionStatement[103398-103402]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[103357-103404]:IfStatement[103422-103469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103369-103404]:Block[103434-103469]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[103383-103394]:ReturnStatement[103448-103459]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103414-103423]:ReturnStatement[103479-103488]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[103624-103630]:Modifier[103689-103695]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[103631-103637]:Modifier[103696-103702]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[103638-103644]:PrimitiveType[103703-103709]"
    }, {
      "left" : "ceil",
      "right" : "ceil",
      "info" : "SimpleName[103645-103649]:SimpleName[103710-103714]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[103650-103658]:SingleVariableDeclaration[103715-103723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103660-103919]:Block[103725-103984]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[103670-103679]:VariableDeclarationStatement[103735-103744]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[103689-103741]:IfStatement[103754-103806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103701-103741]:Block[103766-103806]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[103722-103731]:ReturnStatement[103787-103796]"
    }, {
      "left" : "y = floor(x);",
      "right" : "y = floor(x);",
      "info" : "ExpressionStatement[103751-103764]:ExpressionStatement[103816-103829]"
    }, {
      "left" : "if (y == x)",
      "right" : "if (y == x)",
      "info" : "IfStatement[103773-103818]:IfStatement[103838-103883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103785-103818]:Block[103850-103883]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103799-103808]:ReturnStatement[103864-103873]"
    }, {
      "left" : "y += 1.0;",
      "right" : "y += 1.0;",
      "info" : "ExpressionStatement[103828-103837]:ExpressionStatement[103893-103902]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[103847-103894]:IfStatement[103912-103959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103859-103894]:Block[103924-103959]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[103873-103884]:ReturnStatement[103938-103949]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103904-103913]:ReturnStatement[103969-103978]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[104202-104208]:Modifier[104267-104273]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[104209-104215]:Modifier[104274-104280]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[104216-104222]:PrimitiveType[104281-104287]"
    }, {
      "left" : "rint",
      "right" : "rint",
      "info" : "SimpleName[104223-104227]:SimpleName[104288-104292]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[104228-104236]:SingleVariableDeclaration[104293-104301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104238-104624]:Block[104303-104689]"
    }, {
      "left" : "double y = floor(x);",
      "right" : "double y = floor(x);",
      "info" : "VariableDeclarationStatement[104248-104268]:VariableDeclarationStatement[104313-104333]"
    }, {
      "left" : "double d = x - y;",
      "right" : "double d = x - y;",
      "info" : "VariableDeclarationStatement[104277-104294]:VariableDeclarationStatement[104342-104359]"
    }, {
      "left" : "if (d > 0.5)",
      "right" : "if (d > 0.5)",
      "info" : "IfStatement[104304-104454]:IfStatement[104369-104519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104317-104454]:Block[104382-104519]"
    }, {
      "left" : "if (y == -1.0)",
      "right" : "if (y == -1.0)",
      "info" : "IfStatement[104331-104418]:IfStatement[104396-104483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104346-104418]:Block[104411-104483]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[104364-104376]:ReturnStatement[104429-104441]"
    }, {
      "left" : "return y+1.0;",
      "right" : "return y+1.0;",
      "info" : "ReturnStatement[104431-104444]:ReturnStatement[104496-104509]"
    }, {
      "left" : "if (d < 0.5)",
      "right" : "if (d < 0.5)",
      "info" : "IfStatement[104463-104509]:IfStatement[104528-104574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104476-104509]:Block[104541-104574]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[104490-104499]:ReturnStatement[104555-104564]"
    }, {
      "left" : "long z = (long) y;",
      "right" : "long z = (long) y;",
      "info" : "VariableDeclarationStatement[104557-104575]:VariableDeclarationStatement[104622-104640]"
    }, {
      "left" : "return (z & 1) == 0 ? y : y + 1.0;",
      "right" : "return (z & 1) == 0 ? y : y + 1.0;",
      "info" : "ReturnStatement[104584-104618]:ReturnStatement[104649-104683]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[104766-104772]:Modifier[104831-104837]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[104773-104779]:Modifier[104838-104844]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[104780-104784]:PrimitiveType[104845-104849]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[104785-104790]:SimpleName[104850-104855]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[104791-104799]:SingleVariableDeclaration[104856-104864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104801-104846]:Block[104866-104911]"
    }, {
      "left" : "return (long) floor(x + 0.5);",
      "right" : "return (long) floor(x + 0.5);",
      "info" : "ReturnStatement[104811-104840]:ReturnStatement[104876-104905]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[104985-104991]:Modifier[105050-105056]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[104992-104998]:Modifier[105057-105063]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[104999-105002]:PrimitiveType[105064-105067]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[105003-105008]:SimpleName[105068-105073]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[105009-105022]:SingleVariableDeclaration[105074-105087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105024-105069]:Block[105089-105134]"
    }, {
      "left" : "return (int) floor(x + 0.5f);",
      "right" : "return (int) floor(x + 0.5f);",
      "info" : "ReturnStatement[105034-105063]:ReturnStatement[105099-105128]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[105241-105247]:Modifier[105306-105312]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[105248-105254]:Modifier[105313-105319]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[105255-105258]:PrimitiveType[105320-105323]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[105259-105262]:SimpleName[105324-105327]"
    }, {
      "left" : "final int a",
      "right" : "final int a",
      "info" : "SingleVariableDeclaration[105263-105274]:SingleVariableDeclaration[105328-105339]"
    }, {
      "left" : "final int b",
      "right" : "final int b",
      "info" : "SingleVariableDeclaration[105276-105287]:SingleVariableDeclaration[105341-105352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105289-105329]:Block[105354-105394]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[105299-105323]:ReturnStatement[105364-105388]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[105501-105507]:Modifier[105566-105572]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[105508-105514]:Modifier[105573-105579]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[105515-105519]:PrimitiveType[105580-105584]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[105520-105523]:SimpleName[105585-105588]"
    }, {
      "left" : "final long a",
      "right" : "final long a",
      "info" : "SingleVariableDeclaration[105524-105536]:SingleVariableDeclaration[105589-105601]"
    }, {
      "left" : "final long b",
      "right" : "final long b",
      "info" : "SingleVariableDeclaration[105538-105550]:SingleVariableDeclaration[105603-105615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105552-105592]:Block[105617-105657]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[105562-105586]:ReturnStatement[105627-105651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[105764-105770]:Modifier[105829-105835]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[105771-105777]:Modifier[105836-105842]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[105778-105783]:PrimitiveType[105843-105848]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[105784-105787]:SimpleName[105849-105852]"
    }, {
      "left" : "final float a",
      "right" : "final float a",
      "info" : "SingleVariableDeclaration[105788-105801]:SingleVariableDeclaration[105853-105866]"
    }, {
      "left" : "final float b",
      "right" : "final float b",
      "info" : "SingleVariableDeclaration[105803-105816]:SingleVariableDeclaration[105868-105881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105818-106267]:Block[105883-106332]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[105828-105872]:IfStatement[105893-105937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105839-105872]:Block[105904-105937]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[105853-105862]:ReturnStatement[105918-105927]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[105881-105925]:IfStatement[105946-105990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105892-105925]:Block[105957-105990]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[105906-105915]:ReturnStatement[105971-105980]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[105981-106034]:IfStatement[106046-106099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105993-106034]:Block[106058-106099]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[106007-106024]:ReturnStatement[106072-106089]"
    }, {
      "left" : "int bits = Float.floatToRawIntBits(a);",
      "right" : "int bits = Float.floatToRawIntBits(a);",
      "info" : "VariableDeclarationStatement[106139-106177]:VariableDeclarationStatement[106204-106242]"
    }, {
      "left" : "if (bits == 0x80000000)",
      "right" : "if (bits == 0x80000000)",
      "info" : "IfStatement[106186-106243]:IfStatement[106251-106308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106210-106243]:Block[106275-106308]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[106224-106233]:ReturnStatement[106289-106298]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[106252-106261]:ReturnStatement[106317-106326]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[106439-106445]:Modifier[106504-106510]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[106446-106452]:Modifier[106511-106517]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[106453-106459]:PrimitiveType[106518-106524]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[106460-106463]:SimpleName[106525-106528]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[106464-106478]:SingleVariableDeclaration[106529-106543]"
    }, {
      "left" : "final double b",
      "right" : "final double b",
      "info" : "SingleVariableDeclaration[106480-106494]:SingleVariableDeclaration[106545-106559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106496-106971]:Block[106561-107036]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[106506-106550]:IfStatement[106571-106615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106517-106550]:Block[106582-106615]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[106531-106540]:ReturnStatement[106596-106605]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[106559-106603]:IfStatement[106624-106668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106570-106603]:Block[106635-106668]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[106584-106593]:ReturnStatement[106649-106658]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[106659-106713]:IfStatement[106724-106778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106671-106713]:Block[106736-106778]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[106685-106703]:ReturnStatement[106750-106768]"
    }, {
      "left" : "long bits = Double.doubleToRawLongBits(a);",
      "right" : "long bits = Double.doubleToRawLongBits(a);",
      "info" : "VariableDeclarationStatement[106830-106872]:VariableDeclarationStatement[106895-106937]"
    }, {
      "left" : "if (bits == 0x8000000000000000L)",
      "right" : "if (bits == 0x8000000000000000L)",
      "info" : "IfStatement[106881-106947]:IfStatement[106946-107012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106914-106947]:Block[106979-107012]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[106928-106937]:ReturnStatement[106993-107002]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[106956-106965]:ReturnStatement[107021-107030]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[107143-107149]:Modifier[107208-107214]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[107150-107156]:Modifier[107215-107221]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[107157-107160]:PrimitiveType[107222-107225]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[107161-107164]:SimpleName[107226-107229]"
    }, {
      "left" : "final int a",
      "right" : "final int a",
      "info" : "SingleVariableDeclaration[107165-107176]:SingleVariableDeclaration[107230-107241]"
    }, {
      "left" : "final int b",
      "right" : "final int b",
      "info" : "SingleVariableDeclaration[107178-107189]:SingleVariableDeclaration[107243-107254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107191-107231]:Block[107256-107296]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[107201-107225]:ReturnStatement[107266-107290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[107403-107409]:Modifier[107468-107474]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[107410-107416]:Modifier[107475-107481]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[107417-107421]:PrimitiveType[107482-107486]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[107422-107425]:SimpleName[107487-107490]"
    }, {
      "left" : "final long a",
      "right" : "final long a",
      "info" : "SingleVariableDeclaration[107426-107438]:SingleVariableDeclaration[107491-107503]"
    }, {
      "left" : "final long b",
      "right" : "final long b",
      "info" : "SingleVariableDeclaration[107440-107452]:SingleVariableDeclaration[107505-107517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107454-107494]:Block[107519-107559]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[107464-107488]:ReturnStatement[107529-107553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[107666-107672]:Modifier[107731-107737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[107673-107679]:Modifier[107738-107744]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[107680-107685]:PrimitiveType[107745-107750]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[107686-107689]:SimpleName[107751-107754]"
    }, {
      "left" : "final float a",
      "right" : "final float a",
      "info" : "SingleVariableDeclaration[107690-107703]:SingleVariableDeclaration[107755-107768]"
    }, {
      "left" : "final float b",
      "right" : "final float b",
      "info" : "SingleVariableDeclaration[107705-107718]:SingleVariableDeclaration[107770-107783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107720-108169]:Block[107785-108234]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[107730-107774]:IfStatement[107795-107839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107741-107774]:Block[107806-107839]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[107755-107764]:ReturnStatement[107820-107829]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[107783-107827]:IfStatement[107848-107892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107794-107827]:Block[107859-107892]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[107808-107817]:ReturnStatement[107873-107882]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[107883-107936]:IfStatement[107948-108001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107895-107936]:Block[107960-108001]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[107909-107926]:ReturnStatement[107974-107991]"
    }, {
      "left" : "int bits = Float.floatToRawIntBits(a);",
      "right" : "int bits = Float.floatToRawIntBits(a);",
      "info" : "VariableDeclarationStatement[108041-108079]:VariableDeclarationStatement[108106-108144]"
    }, {
      "left" : "if (bits == 0x80000000)",
      "right" : "if (bits == 0x80000000)",
      "info" : "IfStatement[108088-108145]:IfStatement[108153-108210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108112-108145]:Block[108177-108210]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[108126-108135]:ReturnStatement[108191-108200]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[108154-108163]:ReturnStatement[108219-108228]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[108341-108347]:Modifier[108406-108412]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[108348-108354]:Modifier[108413-108419]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[108355-108361]:PrimitiveType[108420-108426]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[108362-108365]:SimpleName[108427-108430]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[108366-108380]:SingleVariableDeclaration[108431-108445]"
    }, {
      "left" : "final double b",
      "right" : "final double b",
      "info" : "SingleVariableDeclaration[108382-108396]:SingleVariableDeclaration[108447-108461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108398-108873]:Block[108463-108938]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[108408-108452]:IfStatement[108473-108517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108419-108452]:Block[108484-108517]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[108433-108442]:ReturnStatement[108498-108507]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[108461-108505]:IfStatement[108526-108570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108472-108505]:Block[108537-108570]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[108486-108495]:ReturnStatement[108551-108560]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[108561-108615]:IfStatement[108626-108680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108573-108615]:Block[108638-108680]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[108587-108605]:ReturnStatement[108652-108670]"
    }, {
      "left" : "long bits = Double.doubleToRawLongBits(a);",
      "right" : "long bits = Double.doubleToRawLongBits(a);",
      "info" : "VariableDeclarationStatement[108732-108774]:VariableDeclarationStatement[108797-108839]"
    }, {
      "left" : "if (bits == 0x8000000000000000L)",
      "right" : "if (bits == 0x8000000000000000L)",
      "info" : "IfStatement[108783-108849]:IfStatement[108848-108914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108816-108849]:Block[108881-108914]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[108830-108839]:ReturnStatement[108895-108904]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[108858-108867]:ReturnStatement[108923-108932]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[109410-109416]:Modifier[109475-109481]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[109417-109423]:Modifier[109482-109488]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[109424-109430]:PrimitiveType[109489-109495]"
    }, {
      "left" : "hypot",
      "right" : "hypot",
      "info" : "SimpleName[109431-109436]:SimpleName[109496-109501]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[109437-109451]:SingleVariableDeclaration[109502-109516]"
    }, {
      "left" : "final double y",
      "right" : "final double y",
      "info" : "SingleVariableDeclaration[109453-109467]:SingleVariableDeclaration[109518-109532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109469-110613]:Block[109534-110678]"
    }, {
      "left" : "if (Double.isInfinite(x) || Double.isInfinite(y))",
      "right" : "if (Double.isInfinite(x) || Double.isInfinite(y))",
      "info" : "IfStatement[109479-110607]:IfStatement[109544-110672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109529-109585]:Block[109594-109650]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[109543-109575]:ReturnStatement[109608-109640]"
    }, {
      "left" : "if (Double.isNaN(x) || Double.isNaN(y))",
      "right" : "if (Double.isNaN(x) || Double.isNaN(y))",
      "info" : "IfStatement[109591-110607]:IfStatement[109656-110672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109631-109673]:Block[109696-109738]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[109645-109663]:ReturnStatement[109710-109728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109679-110607]:Block[109744-110672]"
    }, {
      "left" : "final int expX = getExponent(x);",
      "right" : "final int expX = getExponent(x);",
      "info" : "VariableDeclarationStatement[109694-109726]:VariableDeclarationStatement[109759-109791]"
    }, {
      "left" : "final int expY = getExponent(y);",
      "right" : "final int expY = getExponent(y);",
      "info" : "VariableDeclarationStatement[109739-109771]:VariableDeclarationStatement[109804-109836]"
    }, {
      "left" : "if (expX > expY + 27)",
      "right" : "if (expX > expY + 27)",
      "info" : "IfStatement[109784-110596]:IfStatement[109849-110661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109806-109906]:Block[109871-109971]"
    }, {
      "left" : "return abs(x);",
      "right" : "return abs(x);",
      "info" : "ReturnStatement[109878-109892]:ReturnStatement[109943-109957]"
    }, {
      "left" : "if (expY > expX + 27)",
      "right" : "if (expY > expX + 27)",
      "info" : "IfStatement[109912-110596]:IfStatement[109977-110661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109934-110034]:Block[109999-110099]"
    }, {
      "left" : "return abs(y);",
      "right" : "return abs(y);",
      "info" : "ReturnStatement[110006-110020]:ReturnStatement[110071-110085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110040-110596]:Block[110105-110661]"
    }, {
      "left" : "final int middleExp = (expX + expY) / 2;",
      "right" : "final int middleExp = (expX + expY) / 2;",
      "info" : "VariableDeclarationStatement[110142-110182]:VariableDeclarationStatement[110207-110247]"
    }, {
      "left" : "final double scaledX = scalb(x, -middleExp);",
      "right" : "final double scaledX = scalb(x, -middleExp);",
      "info" : "VariableDeclarationStatement[110261-110305]:VariableDeclarationStatement[110326-110370]"
    }, {
      "left" : "final double scaledY = scalb(y, -middleExp);",
      "right" : "final double scaledY = scalb(y, -middleExp);",
      "info" : "VariableDeclarationStatement[110322-110366]:VariableDeclarationStatement[110387-110431]"
    }, {
      "left" : "final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);",
      "right" : "final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);",
      "info" : "VariableDeclarationStatement[110429-110496]:VariableDeclarationStatement[110494-110561]"
    }, {
      "left" : "return scalb(scaledH, middleExp);",
      "right" : "return scalb(scaledH, middleExp);",
      "info" : "ReturnStatement[110548-110581]:ReturnStatement[110613-110646]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[111763-111769]:Modifier[111828-111834]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[111770-111776]:Modifier[111835-111841]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[111777-111783]:PrimitiveType[111842-111848]"
    }, {
      "left" : "IEEEremainder",
      "right" : "IEEEremainder",
      "info" : "SimpleName[111784-111797]:SimpleName[111849-111862]"
    }, {
      "left" : "double dividend",
      "right" : "double dividend",
      "info" : "SingleVariableDeclaration[111798-111813]:SingleVariableDeclaration[111863-111878]"
    }, {
      "left" : "double divisor",
      "right" : "double divisor",
      "info" : "SingleVariableDeclaration[111815-111829]:SingleVariableDeclaration[111880-111894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111831-111937]:Block[111896-112002]"
    }, {
      "left" : "return StrictMath.IEEEremainder(dividend, divisor);",
      "right" : "return StrictMath.IEEEremainder(dividend, divisor);",
      "info" : "ReturnStatement[111841-111892]:ReturnStatement[111906-111957]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[112269-112275]:Modifier[112334-112340]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[112276-112282]:Modifier[112341-112347]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[112283-112289]:PrimitiveType[112348-112354]"
    }, {
      "left" : "copySign",
      "right" : "copySign",
      "info" : "SimpleName[112290-112298]:SimpleName[112355-112363]"
    }, {
      "left" : "double magnitude",
      "right" : "double magnitude",
      "info" : "SingleVariableDeclaration[112299-112315]:SingleVariableDeclaration[112364-112380]"
    }, {
      "left" : "double sign",
      "right" : "double sign",
      "info" : "SingleVariableDeclaration[112317-112328]:SingleVariableDeclaration[112382-112393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112329-112595]:Block[112394-112660]"
    }, {
      "left" : "long m = Double.doubleToLongBits(magnitude);",
      "right" : "long m = Double.doubleToLongBits(magnitude);",
      "info" : "VariableDeclarationStatement[112339-112383]:VariableDeclarationStatement[112404-112448]"
    }, {
      "left" : "long s = Double.doubleToLongBits(sign);",
      "right" : "long s = Double.doubleToLongBits(sign);",
      "info" : "VariableDeclarationStatement[112392-112431]:VariableDeclarationStatement[112457-112496]"
    }, {
      "left" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "right" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "info" : "IfStatement[112440-112549]:IfStatement[112505-112614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112484-112549]:Block[112549-112614]"
    }, {
      "left" : "return magnitude;",
      "right" : "return magnitude;",
      "info" : "ReturnStatement[112522-112539]:ReturnStatement[112587-112604]"
    }, {
      "left" : "return -magnitude;",
      "right" : "return -magnitude;",
      "info" : "ReturnStatement[112558-112576]:ReturnStatement[112623-112641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[112927-112933]:Modifier[112992-112998]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[112934-112940]:Modifier[112999-113005]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[112941-112946]:PrimitiveType[113006-113011]"
    }, {
      "left" : "copySign",
      "right" : "copySign",
      "info" : "SimpleName[112947-112955]:SimpleName[113012-113020]"
    }, {
      "left" : "float magnitude",
      "right" : "float magnitude",
      "info" : "SingleVariableDeclaration[112956-112971]:SingleVariableDeclaration[113021-113036]"
    }, {
      "left" : "float sign",
      "right" : "float sign",
      "info" : "SingleVariableDeclaration[112973-112983]:SingleVariableDeclaration[113038-113048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112984-113242]:Block[113049-113307]"
    }, {
      "left" : "int m = Float.floatToIntBits(magnitude);",
      "right" : "int m = Float.floatToIntBits(magnitude);",
      "info" : "VariableDeclarationStatement[112994-113034]:VariableDeclarationStatement[113059-113099]"
    }, {
      "left" : "int s = Float.floatToIntBits(sign);",
      "right" : "int s = Float.floatToIntBits(sign);",
      "info" : "VariableDeclarationStatement[113043-113078]:VariableDeclarationStatement[113108-113143]"
    }, {
      "left" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "right" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "info" : "IfStatement[113087-113196]:IfStatement[113152-113261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113131-113196]:Block[113196-113261]"
    }, {
      "left" : "return magnitude;",
      "right" : "return magnitude;",
      "info" : "ReturnStatement[113169-113186]:ReturnStatement[113234-113251]"
    }, {
      "left" : "return -magnitude;",
      "right" : "return -magnitude;",
      "info" : "ReturnStatement[113205-113223]:ReturnStatement[113270-113288]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[113575-113581]:Modifier[113640-113646]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[113582-113588]:Modifier[113647-113653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[113589-113592]:PrimitiveType[113654-113657]"
    }, {
      "left" : "getExponent",
      "right" : "getExponent",
      "info" : "SimpleName[113593-113604]:SimpleName[113658-113669]"
    }, {
      "left" : "final double d",
      "right" : "final double d",
      "info" : "SingleVariableDeclaration[113605-113619]:SingleVariableDeclaration[113670-113684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113621-113703]:Block[113686-113768]"
    }, {
      "left" : "return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;",
      "right" : "return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;",
      "info" : "ReturnStatement[113631-113697]:ReturnStatement[113696-113762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[114034-114040]:Modifier[114099-114105]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[114041-114047]:Modifier[114106-114112]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[114048-114051]:PrimitiveType[114113-114116]"
    }, {
      "left" : "getExponent",
      "right" : "getExponent",
      "info" : "SimpleName[114052-114063]:SimpleName[114117-114128]"
    }, {
      "left" : "final float f",
      "right" : "final float f",
      "info" : "SingleVariableDeclaration[114064-114077]:SingleVariableDeclaration[114129-114142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114079-114150]:Block[114144-114215]"
    }, {
      "left" : "return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;",
      "right" : "return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;",
      "info" : "ReturnStatement[114089-114144]:ReturnStatement[114154-114209]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[114315-114321]:Modifier[114380-114386]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[114322-114328]:Modifier[114387-114393]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[114329-114333]:PrimitiveType[114394-114398]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[114334-114338]:SimpleName[114399-114403]"
    }, {
      "left" : "String[] a",
      "right" : "String[] a",
      "info" : "SingleVariableDeclaration[114339-114349]:SingleVariableDeclaration[114404-114414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114351-115425]:Block[114416-115490]"
    }, {
      "left" : "PrintStream out = System.out;",
      "right" : "PrintStream out = System.out;",
      "info" : "VariableDeclarationStatement[114361-114390]:VariableDeclarationStatement[114426-114455]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",
      "info" : "ExpressionStatement[114399-114495]:ExpressionStatement[114464-114560]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",
      "info" : "ExpressionStatement[114504-114600]:ExpressionStatement[114569-114665]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",
      "info" : "ExpressionStatement[114609-114709]:ExpressionStatement[114674-114774]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",
      "info" : "ExpressionStatement[114718-114818]:ExpressionStatement[114783-114883]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);",
      "right" : "FastMathCalc.printarray(out, \"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);",
      "info" : "ExpressionStatement[114827-114895]:ExpressionStatement[114892-114960]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);",
      "info" : "ExpressionStatement[114904-114979]:ExpressionStatement[114969-115044]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);",
      "info" : "ExpressionStatement[114988-115063]:ExpressionStatement[115053-115128]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);",
      "info" : "ExpressionStatement[115072-115151]:ExpressionStatement[115137-115216]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);",
      "info" : "ExpressionStatement[115160-115239]:ExpressionStatement[115225-115304]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);",
      "info" : "ExpressionStatement[115248-115329]:ExpressionStatement[115313-115394]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);",
      "info" : "ExpressionStatement[115338-115419]:ExpressionStatement[115403-115484]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[115527-115534]:Modifier[115592-115599]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[115535-115541]:Modifier[115600-115606]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[115542-115547]:TYPE_DECLARATION_KIND[115607-115612]"
    }, {
      "left" : "ExpIntTable",
      "right" : "ExpIntTable",
      "info" : "SimpleName[115548-115559]:SimpleName[115613-115624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116029-117226]:Block[116094-117291]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[116043-117216]:IfStatement[116108-117281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116076-117053]:Block[116141-117118]"
    }, {
      "left" : "EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];",
      "right" : "EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];",
      "info" : "ExpressionStatement[116094-116151]:ExpressionStatement[116159-116216]"
    }, {
      "left" : "EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];",
      "right" : "EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];",
      "info" : "ExpressionStatement[116168-116225]:ExpressionStatement[116233-116290]"
    }, {
      "left" : "final double tmp[] = new double[2];",
      "right" : "final double tmp[] = new double[2];",
      "info" : "VariableDeclarationStatement[116243-116278]:VariableDeclarationStatement[116308-116343]"
    }, {
      "left" : "final double recip[] = new double[2];",
      "right" : "final double recip[] = new double[2];",
      "info" : "VariableDeclarationStatement[116295-116332]:VariableDeclarationStatement[116360-116397]"
    }, {
      "left" : "for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++)",
      "right" : "for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++)",
      "info" : "ForStatement[116390-117039]:ForStatement[116455-117104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116449-117039]:Block[116514-117104]"
    }, {
      "left" : "FastMathCalc.expint(i, tmp);",
      "right" : "FastMathCalc.expint(i, tmp);",
      "info" : "ExpressionStatement[116471-116499]:ExpressionStatement[116536-116564]"
    }, {
      "left" : "EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];",
      "right" : "EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];",
      "info" : "ExpressionStatement[116520-116583]:ExpressionStatement[116585-116648]"
    }, {
      "left" : "EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];",
      "right" : "EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];",
      "info" : "ExpressionStatement[116604-116667]:ExpressionStatement[116669-116732]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[116689-117021]:IfStatement[116754-117086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116701-117021]:Block[116766-117086]"
    }, {
      "left" : "FastMathCalc.splitReciprocal(tmp, recip);",
      "right" : "FastMathCalc.splitReciprocal(tmp, recip);",
      "info" : "ExpressionStatement[116778-116819]:ExpressionStatement[116843-116884]"
    }, {
      "left" : "EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];",
      "right" : "EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];",
      "info" : "ExpressionStatement[116844-116909]:ExpressionStatement[116909-116974]"
    }, {
      "left" : "EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];",
      "right" : "EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];",
      "info" : "ExpressionStatement[116934-116999]:ExpressionStatement[116999-117064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117059-117216]:Block[117124-117281]"
    }, {
      "left" : "EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();",
      "right" : "EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();",
      "info" : "ExpressionStatement[117077-117131]:ExpressionStatement[117142-117196]"
    }, {
      "left" : "EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();",
      "right" : "EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();",
      "info" : "ExpressionStatement[117148-117202]:ExpressionStatement[117213-117267]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[117334-117341]:Modifier[117399-117406]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[117342-117348]:Modifier[117407-117413]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[117349-117354]:TYPE_DECLARATION_KIND[117414-117419]"
    }, {
      "left" : "ExpFracTable",
      "right" : "ExpFracTable",
      "info" : "SimpleName[117355-117367]:SimpleName[117420-117432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117813-118613]:Block[117878-118678]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[117827-118603]:IfStatement[117892-118668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117860-118436]:Block[117925-118501]"
    }, {
      "left" : "EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "right" : "EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "info" : "ExpressionStatement[117878-117937]:ExpressionStatement[117943-118002]"
    }, {
      "left" : "EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "right" : "EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "info" : "ExpressionStatement[117954-118013]:ExpressionStatement[118019-118078]"
    }, {
      "left" : "final double tmp[] = new double[2];",
      "right" : "final double tmp[] = new double[2];",
      "info" : "VariableDeclarationStatement[118031-118066]:VariableDeclarationStatement[118096-118131]"
    }, {
      "left" : "final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);",
      "right" : "final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);",
      "info" : "VariableDeclarationStatement[118125-118177]:VariableDeclarationStatement[118190-118242]"
    }, {
      "left" : "for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++)",
      "right" : "for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++)",
      "info" : "ForStatement[118194-118422]:ForStatement[118259-118487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118244-118422]:Block[118309-118487]"
    }, {
      "left" : "FastMathCalc.slowexp(i * factor, tmp);",
      "right" : "FastMathCalc.slowexp(i * factor, tmp);",
      "info" : "ExpressionStatement[118266-118304]:ExpressionStatement[118331-118369]"
    }, {
      "left" : "EXP_FRAC_TABLE_A[i] = tmp[0];",
      "right" : "EXP_FRAC_TABLE_A[i] = tmp[0];",
      "info" : "ExpressionStatement[118325-118354]:ExpressionStatement[118390-118419]"
    }, {
      "left" : "EXP_FRAC_TABLE_B[i] = tmp[1];",
      "right" : "EXP_FRAC_TABLE_B[i] = tmp[1];",
      "info" : "ExpressionStatement[118375-118404]:ExpressionStatement[118440-118469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118442-118603]:Block[118507-118668]"
    }, {
      "left" : "EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();",
      "right" : "EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();",
      "info" : "ExpressionStatement[118460-118516]:ExpressionStatement[118525-118581]"
    }, {
      "left" : "EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();",
      "right" : "EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();",
      "info" : "ExpressionStatement[118533-118589]:ExpressionStatement[118598-118654]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[118721-118728]:Modifier[118786-118793]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[118729-118735]:Modifier[118794-118800]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[118736-118741]:TYPE_DECLARATION_KIND[118801-118806]"
    }, {
      "left" : "lnMant",
      "right" : "lnMant",
      "info" : "SimpleName[118742-118748]:SimpleName[118807-118813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118911-119411]:Block[118976-119476]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[118925-119401]:IfStatement[118990-119466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118958-119318]:Block[119023-119383]"
    }, {
      "left" : "LN_MANT = new double[FastMath.LN_MANT_LEN][];",
      "right" : "LN_MANT = new double[FastMath.LN_MANT_LEN][];",
      "info" : "ExpressionStatement[118976-119021]:ExpressionStatement[119041-119086]"
    }, {
      "left" : "for (int i = 0; i < LN_MANT.length; i++)",
      "right" : "for (int i = 0; i < LN_MANT.length; i++)",
      "info" : "ForStatement[119080-119304]:ForStatement[119145-119369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119121-119304]:Block[119186-119369]"
    }, {
      "left" : "final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );",
      "right" : "final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );",
      "info" : "VariableDeclarationStatement[119143-119228]:VariableDeclarationStatement[119208-119293]"
    }, {
      "left" : "LN_MANT[i] = FastMathCalc.slowLog(d);",
      "right" : "LN_MANT[i] = FastMathCalc.slowLog(d);",
      "info" : "ExpressionStatement[119249-119286]:ExpressionStatement[119314-119351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119324-119401]:Block[119389-119466]"
    }, {
      "left" : "LN_MANT = FastMathLiteralArrays.loadLnMant();",
      "right" : "LN_MANT = FastMathLiteralArrays.loadLnMant();",
      "info" : "ExpressionStatement[119342-119387]:ExpressionStatement[119407-119452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[119501-119508]:Modifier[119566-119573]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[119509-119515]:Modifier[119574-119580]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[119516-119521]:TYPE_DECLARATION_KIND[119581-119586]"
    }, {
      "left" : "CodyWaite",
      "right" : "CodyWaite",
      "info" : "SimpleName[119522-119531]:SimpleName[119587-119596]"
    }, {
      "left" : "CodyWaite",
      "right" : "CodyWaite",
      "info" : "SimpleName[119800-119809]:SimpleName[119865-119874]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[119810-119819]:SingleVariableDeclaration[119875-119884]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[119839-119848]:SingleVariableDeclaration[119904-119913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119850-120927]:Block[119915-120992]"
    }, {
      "left" : "int k = (int)(xa * 0.6366197723675814);",
      "right" : "int k = (int)(xa * 0.6366197723675814);",
      "info" : "VariableDeclarationStatement[119941-119980]:VariableDeclarationStatement[120006-120045]"
    }, {
      "left" : "double remA;",
      "right" : "double remA;",
      "info" : "VariableDeclarationStatement[120028-120040]:VariableDeclarationStatement[120093-120105]"
    }, {
      "left" : "double remB;",
      "right" : "double remB;",
      "info" : "VariableDeclarationStatement[120053-120065]:VariableDeclarationStatement[120118-120130]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[120078-120817]:WhileStatement[120143-120882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120091-120817]:Block[120156-120882]"
    }, {
      "left" : "double a = -k * 1.570796251296997;",
      "right" : "double a = -k * 1.570796251296997;",
      "info" : "VariableDeclarationStatement[120109-120143]:VariableDeclarationStatement[120174-120208]"
    }, {
      "left" : "remA = xa + a;",
      "right" : "remA = xa + a;",
      "info" : "ExpressionStatement[120160-120174]:ExpressionStatement[120225-120239]"
    }, {
      "left" : "remB = -(remA - xa - a);",
      "right" : "remB = -(remA - xa - a);",
      "info" : "ExpressionStatement[120191-120215]:ExpressionStatement[120256-120280]"
    }, {
      "left" : "a = -k * 7.549789948768648E-8;",
      "right" : "a = -k * 7.549789948768648E-8;",
      "info" : "ExpressionStatement[120233-120263]:ExpressionStatement[120298-120328]"
    }, {
      "left" : "double b = remA;",
      "right" : "double b = remA;",
      "info" : "VariableDeclarationStatement[120280-120296]:VariableDeclarationStatement[120345-120361]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[120313-120326]:ExpressionStatement[120378-120391]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[120343-120367]:ExpressionStatement[120408-120432]"
    }, {
      "left" : "a = -k * 6.123233995736766E-17;",
      "right" : "a = -k * 6.123233995736766E-17;",
      "info" : "ExpressionStatement[120385-120416]:ExpressionStatement[120450-120481]"
    }, {
      "left" : "b = remA;",
      "right" : "b = remA;",
      "info" : "ExpressionStatement[120433-120442]:ExpressionStatement[120498-120507]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[120459-120472]:ExpressionStatement[120524-120537]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[120489-120513]:ExpressionStatement[120554-120578]"
    }, {
      "left" : "if (remA > 0)",
      "right" : "if (remA > 0)",
      "info" : "IfStatement[120531-120591]:IfStatement[120596-120656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120545-120591]:Block[120610-120656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[120567-120573]:BreakStatement[120632-120638]"
    }, {
      "left" : "--k;",
      "right" : "--k;",
      "info" : "ExpressionStatement[120799-120803]:ExpressionStatement[120864-120868]"
    }, {
      "left" : "this.finalK = k;",
      "right" : "this.finalK = k;",
      "info" : "ExpressionStatement[120831-120847]:ExpressionStatement[120896-120912]"
    }, {
      "left" : "this.finalRemA = remA;",
      "right" : "this.finalRemA = remA;",
      "info" : "ExpressionStatement[120860-120882]:ExpressionStatement[120925-120947]"
    }, {
      "left" : "this.finalRemB = remB;",
      "right" : "this.finalRemB = remB;",
      "info" : "ExpressionStatement[120895-120917]:ExpressionStatement[120960-120982]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[120982-120985]:PrimitiveType[121047-121050]"
    }, {
      "left" : "getK",
      "right" : "getK",
      "info" : "SimpleName[120986-120990]:SimpleName[121051-121055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120993-121031]:Block[121058-121096]"
    }, {
      "left" : "return finalK;",
      "right" : "return finalK;",
      "info" : "ReturnStatement[121007-121021]:ReturnStatement[121072-121086]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[121088-121094]:PrimitiveType[121153-121159]"
    }, {
      "left" : "getRemA",
      "right" : "getRemA",
      "info" : "SimpleName[121095-121102]:SimpleName[121160-121167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121105-121146]:Block[121170-121211]"
    }, {
      "left" : "return finalRemA;",
      "right" : "return finalRemA;",
      "info" : "ReturnStatement[121119-121136]:ReturnStatement[121184-121201]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[121203-121209]:PrimitiveType[121268-121274]"
    }, {
      "left" : "getRemB",
      "right" : "getRemB",
      "info" : "SimpleName[121210-121217]:SimpleName[121275-121282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121220-121261]:Block[121285-121326]"
    }, {
      "left" : "return finalRemB;",
      "right" : "return finalRemB;",
      "info" : "ReturnStatement[121234-121251]:ReturnStatement[121299-121316]"
    } ]
  },
  "interFileMappings" : { }
}