{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GoExternalToolsAction",
      "right" : "GoExternalToolsAction",
      "info" : "TypeDeclaration[1634-4060]:TypeDeclaration[1634-4548]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(GoExternalToolsAction.class);",
      "right" : "private static final Logger LOG = Logger.getInstance(GoExternalToolsAction.class);",
      "info" : "FieldDeclaration[1706-1788]:FieldDeclaration[1706-1788]"
    }, {
      "left" : "private static void error(@NotNull String title, @NotNull Project project, @Nullable Exception ex)",
      "right" : "private static void error(@NotNull String title, @NotNull Project project, @Nullable Exception ex)",
      "info" : "MethodDeclaration[1792-2160]:MethodDeclaration[1792-2160]"
    }, {
      "left" : "public void update(@NotNull AnActionEvent e)",
      "right" : "public void update(@NotNull AnActionEvent e)",
      "info" : "MethodDeclaration[2164-2691]:MethodDeclaration[2164-2691]"
    }, {
      "left" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "right" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "info" : "MethodDeclaration[2695-3217]:MethodDeclaration[2695-3213]"
    }, {
      "left" : "protected boolean doSomething(@NotNull VirtualFile virtualFile, @Nullable Module module, @NotNull Project project, @NotNull String title)\n    throws ExecutionException",
      "right" : "protected boolean doSomething(@NotNull VirtualFile virtualFile,\n                                @Nullable Module module,\n                                @NotNull Project project,\n                                @NotNull String title,\n                                boolean withProgress) throws ExecutionException",
      "info" : "MethodDeclaration[3221-3757]:MethodDeclaration[3556-4245]"
    }, {
      "left" : "protected abstract GoExecutor createExecutor(@NotNull Project project,\n                                               @Nullable Module module,\n                                               @NotNull String title,\n                                               @NotNull String filePath);",
      "right" : "protected abstract GoExecutor createExecutor(@NotNull Project project,\n                                               @Nullable Module module,\n                                               @NotNull String title,\n                                               @NotNull String filePath);",
      "info" : "MethodDeclaration[3761-4058]:MethodDeclaration[4249-4546]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1891-2160]:Block[1891-2160]"
    }, {
      "left" : "String message = ex == null ? \"\" : ExceptionUtil.getUserStackTrace(ex, LOG);",
      "right" : "String message = ex == null ? \"\" : ExceptionUtil.getUserStackTrace(ex, LOG);",
      "info" : "VariableDeclarationStatement[1897-1973]:VariableDeclarationStatement[1897-1973]"
    }, {
      "left" : "NotificationType type = NotificationType.ERROR;",
      "right" : "NotificationType type = NotificationType.ERROR;",
      "info" : "VariableDeclarationStatement[1978-2025]:VariableDeclarationStatement[1978-2025]"
    }, {
      "left" : "Notifications.Bus.notify(GoConstants.GO_EXECUTION_NOTIFICATION_GROUP.createNotification(title, message, type, null), project);",
      "right" : "Notifications.Bus.notify(GoConstants.GO_EXECUTION_NOTIFICATION_GROUP.createNotification(title, message, type, null), project);",
      "info" : "ExpressionStatement[2030-2156]:ExpressionStatement[2030-2156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2221-2691]:Block[2221-2691]"
    }, {
      "left" : "super.update(e);",
      "right" : "super.update(e);",
      "info" : "ExpressionStatement[2227-2243]:ExpressionStatement[2227-2243]"
    }, {
      "left" : "Project project = e.getProject();",
      "right" : "Project project = e.getProject();",
      "info" : "VariableDeclarationStatement[2248-2281]:VariableDeclarationStatement[2248-2281]"
    }, {
      "left" : "VirtualFile file = e.getData(CommonDataKeys.VIRTUAL_FILE);",
      "right" : "VirtualFile file = e.getData(CommonDataKeys.VIRTUAL_FILE);",
      "info" : "VariableDeclarationStatement[2286-2344]:VariableDeclarationStatement[2286-2344]"
    }, {
      "left" : "if (project == null || file == null || !file.isInLocalFileSystem() || file.getFileType() != GoFileType.INSTANCE)",
      "right" : "if (project == null || file == null || !file.isInLocalFileSystem() || file.getFileType() != GoFileType.INSTANCE)",
      "info" : "IfStatement[2349-2528]:IfStatement[2349-2528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2462-2528]:Block[2462-2528]"
    }, {
      "left" : "e.getPresentation().setEnabled(false);",
      "right" : "e.getPresentation().setEnabled(false);",
      "info" : "ExpressionStatement[2470-2508]:ExpressionStatement[2470-2508]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2515-2522]:ReturnStatement[2515-2522]"
    }, {
      "left" : "Module module = ModuleUtilCore.findModuleForFile(file, project);",
      "right" : "Module module = ModuleUtilCore.findModuleForFile(file, project);",
      "info" : "VariableDeclarationStatement[2533-2597]:VariableDeclarationStatement[2533-2597]"
    }, {
      "left" : "e.getPresentation().setEnabled(GoSdkService.getInstance(project).isGoModule(module));",
      "right" : "e.getPresentation().setEnabled(GoSdkService.getInstance(project).isGoModule(module));",
      "info" : "ExpressionStatement[2602-2687]:ExpressionStatement[2602-2687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2761-3217]:Block[2761-3213]"
    }, {
      "left" : "Project project = e.getProject();",
      "right" : "Project project = e.getProject();",
      "info" : "VariableDeclarationStatement[2767-2800]:VariableDeclarationStatement[2767-2800]"
    }, {
      "left" : "VirtualFile file = e.getRequiredData(CommonDataKeys.VIRTUAL_FILE);",
      "right" : "VirtualFile file = e.getRequiredData(CommonDataKeys.VIRTUAL_FILE);",
      "info" : "VariableDeclarationStatement[2805-2871]:VariableDeclarationStatement[2805-2871]"
    }, {
      "left" : "assert project != null;",
      "right" : "assert project != null;",
      "info" : "AssertStatement[2876-2899]:AssertStatement[2876-2899]"
    }, {
      "left" : "String title = StringUtil.notNullize(e.getPresentation().getText());",
      "right" : "String title = StringUtil.notNullize(e.getPresentation().getText());",
      "info" : "VariableDeclarationStatement[2904-2972]:VariableDeclarationStatement[2904-2972]"
    }, {
      "left" : "final Module module = ModuleUtilCore.findModuleForFile(file, project);",
      "right" : "final Module module = ModuleUtilCore.findModuleForFile(file, project);",
      "info" : "VariableDeclarationStatement[2982-3052]:VariableDeclarationStatement[2978-3048]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3057-3213]:TryStatement[3053-3209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3061-3117]:Block[3057-3113]"
    }, {
      "left" : "doSomething(file, module, project, title);",
      "right" : "doSomething(file, module, project, title);",
      "info" : "ExpressionStatement[3069-3111]:ExpressionStatement[3065-3107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3152-3213]:Block[3148-3209]"
    }, {
      "left" : "error(title, project, ex);",
      "right" : "error(title, project, ex);",
      "info" : "ExpressionStatement[3160-3186]:ExpressionStatement[3156-3182]"
    }, {
      "left" : "LOG.error(ex);",
      "right" : "LOG.error(ex);",
      "info" : "ExpressionStatement[3193-3207]:ExpressionStatement[3189-3203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3389-3757]:Block[3870-4245]"
    }, {
      "left" : "Document document = FileDocumentManager.getInstance().getDocument(virtualFile);",
      "right" : "Document document = FileDocumentManager.getInstance().getDocument(virtualFile);",
      "info" : "VariableDeclarationStatement[3395-3474]:VariableDeclarationStatement[3876-3955]"
    }, {
      "left" : "assert document != null;",
      "right" : "assert document != null;",
      "info" : "AssertStatement[3479-3503]:AssertStatement[3960-3984]"
    }, {
      "left" : "final String filePath = virtualFile.getCanonicalPath();",
      "right" : "final String filePath = virtualFile.getCanonicalPath();",
      "info" : "VariableDeclarationStatement[3508-3563]:VariableDeclarationStatement[3989-4044]"
    }, {
      "left" : "assert filePath != null;",
      "right" : "assert filePath != null;",
      "info" : "AssertStatement[3568-3592]:AssertStatement[4049-4073]"
    }, {
      "left" : "FileDocumentManager.getInstance().saveDocument(document);",
      "right" : "FileDocumentManager.getInstance().saveDocument(document);",
      "info" : "ExpressionStatement[3598-3655]:ExpressionStatement[4079-4136]"
    }, {
      "left" : "createExecutor(project, module, title, filePath).executeWithProgress(false);",
      "right" : "createExecutor(project, module, title, filePath).executeWithProgress(withProgress);",
      "info" : "ExpressionStatement[3660-3736]:ExpressionStatement[4141-4224]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3741-3753]:ReturnStatement[4229-4241]"
    } ]
  },
  "interFileMappings" : { }
}