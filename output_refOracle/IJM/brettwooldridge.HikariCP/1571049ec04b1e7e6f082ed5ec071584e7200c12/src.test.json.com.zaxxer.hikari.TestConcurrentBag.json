{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1153-4555]:TypeDeclaration[1167-4569]"
  }, {
    "left" : "private static HikariDataSource ds;",
    "right" : "private static HikariDataSource ds;",
    "info" : "FieldDeclaration[1228-1263]:FieldDeclaration[1242-1277]"
  }, {
    "left" : "@BeforeClass\n   public static void setup()\n   {\n      HikariConfig config = new HikariConfig();\n      config.setMinimumIdle(1);\n      config.setMaximumPoolSize(2);\n      config.setInitializationFailFast(true);\n      config.setConnectionTestQuery(\"VALUES 1\");\n      config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");\n\n      ds = new HikariDataSource(config);      \n   }",
    "right" : "@BeforeClass\n   public static void setup()\n   {\n      HikariConfig config = new HikariConfig();\n      config.setMinimumIdle(1);\n      config.setMaximumPoolSize(2);\n      config.setInitializationFailFast(true);\n      config.setConnectionTestQuery(\"VALUES 1\");\n      config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");\n\n      ds = new HikariDataSource(config);      \n   }",
    "info" : "MethodDeclaration[1268-1658]:MethodDeclaration[1282-1672]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[1663-1735]:MethodDeclaration[1677-1749]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[1740-4553]:MethodDeclaration[1754-4567]"
  }, {
    "left" : "public ) : Future<Boolean>",
    "right" : "public ) : Future<Boolean>",
    "info" : "MethodDeclaration[1921-2935]:MethodDeclaration[1935-2949]"
  }, {
    "left" : "public ) : boolean",
    "right" : "public ) : boolean",
    "info" : "MethodDeclaration[2045-2158]:MethodDeclaration[2059-2172]"
  }, {
    "left" : "public ) : boolean",
    "right" : "public ) : boolean",
    "info" : "MethodDeclaration[2190-2309]:MethodDeclaration[2204-2323]"
  }, {
    "left" : "public timeout long, unit TimeUnit) : Boolean",
    "right" : "public timeout long, unit TimeUnit) : Boolean",
    "info" : "MethodDeclaration[2341-2544]:MethodDeclaration[2355-2558]"
  }, {
    "left" : "public ) : Boolean",
    "right" : "public ) : Boolean",
    "info" : "MethodDeclaration[2576-2734]:MethodDeclaration[2590-2748]"
  }, {
    "left" : "public mayInterruptIfRunning boolean) : boolean",
    "right" : "public mayInterruptIfRunning boolean) : boolean",
    "info" : "MethodDeclaration[2766-2909]:MethodDeclaration[2780-2923]"
  } ],
  "mappings" : [
 {
    "left" : "import com.zaxxer.hikari.util.IBagStateListener;",
    "right" : "import com.zaxxer.hikari.util.ConcurrentBag.IBagStateListener;",
    "info" : "ImportDeclaration[1103-1151]:ImportDeclaration[1103-1165]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1192-1198]:Modifier[1206-1212]"
  }, {
    "left" : "@BeforeClass",
    "right" : "@BeforeClass",
    "info" : "MarkerAnnotation[1268-1280]:MarkerAnnotation[1282-1294]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1284-1290]:Modifier[1298-1304]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1291-1297]:Modifier[1305-1311]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1298-1302]:PrimitiveType[1312-1316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1314-1658]:Block[1328-1672]"
  }, {
    "left" : "HikariConfig config = new HikariConfig();",
    "right" : "HikariConfig config = new HikariConfig();",
    "info" : "VariableDeclarationStatement[1322-1363]:VariableDeclarationStatement[1336-1377]"
  }, {
    "left" : "config.setMinimumIdle(1);",
    "right" : "config.setMinimumIdle(1);",
    "info" : "ExpressionStatement[1370-1395]:ExpressionStatement[1384-1409]"
  }, {
    "left" : "config.setMaximumPoolSize(2);",
    "right" : "config.setMaximumPoolSize(2);",
    "info" : "ExpressionStatement[1402-1431]:ExpressionStatement[1416-1445]"
  }, {
    "left" : "config.setInitializationFailFast(true);",
    "right" : "config.setInitializationFailFast(true);",
    "info" : "ExpressionStatement[1438-1477]:ExpressionStatement[1452-1491]"
  }, {
    "left" : "config.setConnectionTestQuery(\"VALUES 1\");",
    "right" : "config.setConnectionTestQuery(\"VALUES 1\");",
    "info" : "ExpressionStatement[1484-1526]:ExpressionStatement[1498-1540]"
  }, {
    "left" : "config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");",
    "right" : "config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");",
    "info" : "ExpressionStatement[1533-1605]:ExpressionStatement[1547-1619]"
  }, {
    "left" : "ds = new HikariDataSource(config);",
    "right" : "ds = new HikariDataSource(config);",
    "info" : "ExpressionStatement[1613-1647]:ExpressionStatement[1627-1661]"
  }, {
    "left" : "@AfterClass",
    "right" : "@AfterClass",
    "info" : "MarkerAnnotation[1663-1674]:MarkerAnnotation[1677-1688]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1678-1684]:Modifier[1692-1698]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1685-1691]:Modifier[1699-1705]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1692-1696]:PrimitiveType[1706-1710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1711-1735]:Block[1725-1749]"
  }, {
    "left" : "ds.close();",
    "right" : "ds.close();",
    "info" : "ExpressionStatement[1719-1730]:ExpressionStatement[1733-1744]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[1740-1745]:MarkerAnnotation[1754-1759]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1749-1755]:Modifier[1763-1769]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1756-1760]:PrimitiveType[1770-1774]"
  }, {
    "left" : "InterruptedException",
    "right" : "InterruptedException",
    "info" : "SimpleType[1788-1808]:SimpleType[1802-1822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1812-4553]:Block[1826-4567]"
  }, {
    "left" : "ConcurrentBag<PoolBagEntry> bag = new ConcurrentBag<PoolBagEntry>(new IBagStateListener() {\n         @Override\n         public Future<Boolean> addBagItem()\n         {\n            return new Future<Boolean>() {\n               @Override\n               public boolean isDone()\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean isCancelled()\n               {\n                  return false;\n               }\n               \n               @Override\n               public Boolean get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException\n               {\n                  return null;\n               }\n               \n               @Override\n               public Boolean get() throws InterruptedException, ExecutionException\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean cancel(boolean mayInterruptIfRunning)\n               {\n                  return false;\n               }\n            };\n         }\n      });",
    "right" : "ConcurrentBag<PoolBagEntry> bag = new ConcurrentBag<PoolBagEntry>(new IBagStateListener() {\n         @Override\n         public Future<Boolean> addBagItem()\n         {\n            return new Future<Boolean>() {\n               @Override\n               public boolean isDone()\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean isCancelled()\n               {\n                  return false;\n               }\n               \n               @Override\n               public Boolean get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException\n               {\n                  return null;\n               }\n               \n               @Override\n               public Boolean get() throws InterruptedException, ExecutionException\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean cancel(boolean mayInterruptIfRunning)\n               {\n                  return false;\n               }\n            };\n         }\n      });",
    "info" : "VariableDeclarationStatement[1820-2945]:VariableDeclarationStatement[1834-2959]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[1921-1930]:MarkerAnnotation[1935-1944]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1940-1946]:Modifier[1954-1960]"
  }, {
    "left" : "Future<Boolean>",
    "right" : "Future<Boolean>",
    "info" : "ParameterizedType[1947-1962]:ParameterizedType[1961-1976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1985-2935]:Block[1999-2949]"
  }, {
    "left" : "return new Future<Boolean>() {\n               @Override\n               public boolean isDone()\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean isCancelled()\n               {\n                  return false;\n               }\n               \n               @Override\n               public Boolean get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException\n               {\n                  return null;\n               }\n               \n               @Override\n               public Boolean get() throws InterruptedException, ExecutionException\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean cancel(boolean mayInterruptIfRunning)\n               {\n                  return false;\n               }\n            };",
    "right" : "return new Future<Boolean>() {\n               @Override\n               public boolean isDone()\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean isCancelled()\n               {\n                  return false;\n               }\n               \n               @Override\n               public Boolean get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException\n               {\n                  return null;\n               }\n               \n               @Override\n               public Boolean get() throws InterruptedException, ExecutionException\n               {\n                  return true;\n               }\n               \n               @Override\n               public boolean cancel(boolean mayInterruptIfRunning)\n               {\n                  return false;\n               }\n            };",
    "info" : "ReturnStatement[1999-2924]:ReturnStatement[2013-2938]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2045-2054]:MarkerAnnotation[2059-2068]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2070-2076]:Modifier[2084-2090]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2077-2084]:PrimitiveType[2091-2098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2109-2158]:Block[2123-2172]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2129-2141]:ReturnStatement[2143-2155]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2190-2199]:MarkerAnnotation[2204-2213]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2215-2221]:Modifier[2229-2235]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2222-2229]:PrimitiveType[2236-2243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2259-2309]:Block[2273-2323]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2279-2292]:ReturnStatement[2293-2306]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2341-2350]:MarkerAnnotation[2355-2364]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2366-2372]:Modifier[2380-2386]"
  }, {
    "left" : "Boolean",
    "right" : "Boolean",
    "info" : "SimpleType[2373-2380]:SimpleType[2387-2394]"
  }, {
    "left" : "long timeout",
    "right" : "long timeout",
    "info" : "SingleVariableDeclaration[2385-2397]:SingleVariableDeclaration[2399-2411]"
  }, {
    "left" : "TimeUnit unit",
    "right" : "TimeUnit unit",
    "info" : "SingleVariableDeclaration[2399-2412]:SingleVariableDeclaration[2413-2426]"
  }, {
    "left" : "InterruptedException",
    "right" : "InterruptedException",
    "info" : "SimpleType[2421-2441]:SimpleType[2435-2455]"
  }, {
    "left" : "ExecutionException",
    "right" : "ExecutionException",
    "info" : "SimpleType[2443-2461]:SimpleType[2457-2475]"
  }, {
    "left" : "TimeoutException",
    "right" : "TimeoutException",
    "info" : "SimpleType[2463-2479]:SimpleType[2477-2493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2495-2544]:Block[2509-2558]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[2515-2527]:ReturnStatement[2529-2541]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2576-2585]:MarkerAnnotation[2590-2599]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2601-2607]:Modifier[2615-2621]"
  }, {
    "left" : "Boolean",
    "right" : "Boolean",
    "info" : "SimpleType[2608-2615]:SimpleType[2622-2629]"
  }, {
    "left" : "InterruptedException",
    "right" : "InterruptedException",
    "info" : "SimpleType[2629-2649]:SimpleType[2643-2663]"
  }, {
    "left" : "ExecutionException",
    "right" : "ExecutionException",
    "info" : "SimpleType[2651-2669]:SimpleType[2665-2683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2685-2734]:Block[2699-2748]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2705-2717]:ReturnStatement[2719-2731]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2766-2775]:MarkerAnnotation[2780-2789]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2791-2797]:Modifier[2805-2811]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2798-2805]:PrimitiveType[2812-2819]"
  }, {
    "left" : "boolean mayInterruptIfRunning",
    "right" : "boolean mayInterruptIfRunning",
    "info" : "SingleVariableDeclaration[2813-2842]:SingleVariableDeclaration[2827-2856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2859-2909]:Block[2873-2923]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2879-2892]:ReturnStatement[2893-2906]"
  }, {
    "left" : "Assert.assertEquals(0, bag.values(8).size());",
    "right" : "Assert.assertEquals(0, bag.values(8).size());",
    "info" : "ExpressionStatement[2952-2997]:ExpressionStatement[2966-3011]"
  }, {
    "left" : "HikariPool pool = TestElf.getPool(ds);",
    "right" : "HikariPool pool = TestElf.getPool(ds);",
    "info" : "VariableDeclarationStatement[3005-3043]:VariableDeclarationStatement[3019-3057]"
  }, {
    "left" : "PoolBagEntry reserved = new PoolBagEntry(null, 0, TestElf.getPool(ds));",
    "right" : "PoolBagEntry reserved = new PoolBagEntry(null, 0, TestElf.getPool(ds));",
    "info" : "VariableDeclarationStatement[3050-3121]:VariableDeclarationStatement[3064-3135]"
  }, {
    "left" : "bag.add(reserved);",
    "right" : "bag.add(reserved);",
    "info" : "ExpressionStatement[3128-3146]:ExpressionStatement[3142-3160]"
  }, {
    "left" : "bag.reserve(reserved);",
    "right" : "bag.reserve(reserved);",
    "info" : "ExpressionStatement[3153-3175]:ExpressionStatement[3167-3189]"
  }, {
    "left" : "PoolBagEntry inuse = new PoolBagEntry(null, 0, pool);",
    "right" : "PoolBagEntry inuse = new PoolBagEntry(null, 0, pool);",
    "info" : "VariableDeclarationStatement[3200-3253]:VariableDeclarationStatement[3214-3267]"
  }, {
    "left" : "bag.add(inuse);",
    "right" : "bag.add(inuse);",
    "info" : "ExpressionStatement[3260-3275]:ExpressionStatement[3274-3289]"
  }, {
    "left" : "bag.borrow(2, TimeUnit.MILLISECONDS);",
    "right" : "bag.borrow(2, TimeUnit.MILLISECONDS);",
    "info" : "ExpressionStatement[3282-3319]:ExpressionStatement[3296-3333]"
  }, {
    "left" : "PoolBagEntry notinuse = new PoolBagEntry(null, 0, pool);",
    "right" : "PoolBagEntry notinuse = new PoolBagEntry(null, 0, pool);",
    "info" : "VariableDeclarationStatement[3343-3399]:VariableDeclarationStatement[3357-3413]"
  }, {
    "left" : "bag.add(notinuse);",
    "right" : "bag.add(notinuse);",
    "info" : "ExpressionStatement[3406-3424]:ExpressionStatement[3420-3438]"
  }, {
    "left" : "bag.dumpState();",
    "right" : "bag.dumpState();",
    "info" : "ExpressionStatement[3446-3462]:ExpressionStatement[3460-3476]"
  }, {
    "left" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
    "right" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
    "info" : "VariableDeclarationStatement[3470-3527]:VariableDeclarationStatement[3484-3541]"
  }, {
    "left" : "PrintStream ps = new PrintStream(baos, true);",
    "right" : "PrintStream ps = new PrintStream(baos, true);",
    "info" : "VariableDeclarationStatement[3534-3579]:VariableDeclarationStatement[3548-3593]"
  }, {
    "left" : "TestElf.setSlf4jTargetStream(ConcurrentBag.class, ps);",
    "right" : "TestElf.setSlf4jTargetStream(ConcurrentBag.class, ps);",
    "info" : "ExpressionStatement[3586-3640]:ExpressionStatement[3600-3654]"
  }, {
    "left" : "bag.requite(reserved);",
    "right" : "bag.requite(reserved);",
    "info" : "ExpressionStatement[3654-3676]:ExpressionStatement[3668-3690]"
  }, {
    "left" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"does not exist\"));",
    "right" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"does not exist\"));",
    "info" : "ExpressionStatement[3683-3760]:ExpressionStatement[3697-3774]"
  }, {
    "left" : "bag.remove(notinuse);",
    "right" : "bag.remove(notinuse);",
    "info" : "ExpressionStatement[3768-3789]:ExpressionStatement[3782-3803]"
  }, {
    "left" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"not borrowed or reserved\"));",
    "right" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"not borrowed or reserved\"));",
    "info" : "ExpressionStatement[3796-3883]:ExpressionStatement[3810-3897]"
  }, {
    "left" : "bag.unreserve(notinuse);",
    "right" : "bag.unreserve(notinuse);",
    "info" : "ExpressionStatement[3891-3915]:ExpressionStatement[3905-3929]"
  }, {
    "left" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"was not reserved\"));",
    "right" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"was not reserved\"));",
    "info" : "ExpressionStatement[3922-4001]:ExpressionStatement[3936-4015]"
  }, {
    "left" : "bag.remove(inuse);",
    "right" : "bag.remove(inuse);",
    "info" : "ExpressionStatement[4009-4027]:ExpressionStatement[4023-4041]"
  }, {
    "left" : "bag.remove(inuse);",
    "right" : "bag.remove(inuse);",
    "info" : "ExpressionStatement[4034-4052]:ExpressionStatement[4048-4066]"
  }, {
    "left" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"not borrowed or reserved\"));",
    "right" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"not borrowed or reserved\"));",
    "info" : "ExpressionStatement[4059-4146]:ExpressionStatement[4073-4160]"
  }, {
    "left" : "bag.close();",
    "right" : "bag.close();",
    "info" : "ExpressionStatement[4154-4166]:ExpressionStatement[4168-4180]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4173-4498]:TryStatement[4187-4512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4177-4363]:Block[4191-4377]"
  }, {
    "left" : "PoolBagEntry bagEntry = new PoolBagEntry(null, 0, pool);",
    "right" : "PoolBagEntry bagEntry = new PoolBagEntry(null, 0, pool);",
    "info" : "VariableDeclarationStatement[4188-4244]:VariableDeclarationStatement[4202-4258]"
  }, {
    "left" : "bag.add(bagEntry);",
    "right" : "bag.add(bagEntry);",
    "info" : "ExpressionStatement[4254-4272]:ExpressionStatement[4268-4286]"
  }, {
    "left" : "Assert.assertNotEquals(bagEntry, bag.borrow(100, TimeUnit.MILLISECONDS));",
    "right" : "Assert.assertNotEquals(bagEntry, bag.borrow(100, TimeUnit.MILLISECONDS));",
    "info" : "ExpressionStatement[4282-4355]:ExpressionStatement[4296-4369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4402-4498]:Block[4416-4512]"
  }, {
    "left" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"ignoring add()\"));",
    "right" : "Assert.assertTrue(new String(baos.toByteArray()).contains(\"ignoring add()\"));",
    "info" : "ExpressionStatement[4413-4490]:ExpressionStatement[4427-4504]"
  }, {
    "left" : "Assert.assertNotNull(notinuse.toString());",
    "right" : "Assert.assertNotNull(notinuse.toString());",
    "info" : "ExpressionStatement[4506-4548]:ExpressionStatement[4520-4562]"
  } ]
}