{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BracketingNthOrderBrentSolver",
      "right" : "BracketingNthOrderBrentSolver",
      "info" : "TypeDeclaration[1201-14911]:TypeDeclaration[1201-15313]"
    }, {
      "left" : "private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "right" : "private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "info" : "FieldDeclaration[1913-2012]:FieldDeclaration[1913-2012]"
    }, {
      "left" : "private static final int DEFAULT_MAXIMAL_ORDER = 5;",
      "right" : "private static final int DEFAULT_MAXIMAL_ORDER = 5;",
      "info" : "FieldDeclaration[2018-2103]:FieldDeclaration[2018-2103]"
    }, {
      "left" : "private static final int MAXIMAL_AGING = 2;",
      "right" : "private static final int MAXIMAL_AGING = 2;",
      "info" : "FieldDeclaration[2109-2235]:FieldDeclaration[2109-2235]"
    }, {
      "left" : "private static final double REDUCTION_FACTOR = 1.0 / 16.0;",
      "right" : "private static final double REDUCTION_FACTOR = 1.0 / 16.0;",
      "info" : "FieldDeclaration[2241-2376]:FieldDeclaration[2241-2376]"
    }, {
      "left" : "private final int maximalOrder;",
      "right" : "private final int maximalOrder;",
      "info" : "FieldDeclaration[2382-2439]:FieldDeclaration[2382-2439]"
    }, {
      "left" : "private AllowedSolution allowed;",
      "right" : "private AllowedSolution allowed;",
      "info" : "FieldDeclaration[2445-2542]:FieldDeclaration[2445-2542]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver()",
      "right" : "public BracketingNthOrderBrentSolver()",
      "info" : "MethodDeclaration[2548-2766]:MethodDeclaration[2548-2766]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[2772-3410]:MethodDeclaration[2772-3410]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[3416-4194]:MethodDeclaration[3416-4194]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final double functionValueAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final double functionValueAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[4200-5139]:MethodDeclaration[4200-5139]"
    }, {
      "left" : "public int getMaximalOrder()",
      "right" : "public int getMaximalOrder()",
      "info" : "MethodDeclaration[5145-5278]:MethodDeclaration[5145-5278]"
    }, {
      "left" : "protected double doSolve()",
      "right" : "protected double doSolve()",
      "info" : "MethodDeclaration[5284-12932]:MethodDeclaration[5284-13334]"
    }, {
      "left" : "private double guessX(final double targetY, final double[] x, final double[] y,\n                          final int start, final int end)",
      "right" : "private double guessX(final double targetY, final double[] x, final double[] y,\n                          final int start, final int end)",
      "info" : "MethodDeclaration[12938-14325]:MethodDeclaration[13340-14727]"
    }, {
      "left" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution)",
      "right" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[14331-14589]:MethodDeclaration[14733-14991]"
    }, {
      "left" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution)",
      "right" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[14595-14908]:MethodDeclaration[14997-15310]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2695-2766]:Block[2695-2766]"
    }, {
      "left" : "this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",
      "right" : "this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",
      "info" : "ConstructorInvocation[2705-2760]:ConstructorInvocation[2705-2760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3165-3410]:Block[3165-3410]"
    }, {
      "left" : "super(absoluteAccuracy);",
      "right" : "super(absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3175-3199]:SuperConstructorInvocation[3175-3199]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[3208-3313]:IfStatement[3208-3313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3230-3313]:Block[3230-3313]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[3244-3303]:ThrowStatement[3244-3303]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[3322-3355]:ExpressionStatement[3322-3355]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[3364-3404]:ExpressionStatement[3364-3404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3931-4194]:Block[3931-4194]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3941-3983]:SuperConstructorInvocation[3941-3983]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[3992-4097]:IfStatement[3992-4097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4014-4097]:Block[4014-4097]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[4028-4087]:ThrowStatement[4028-4087]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[4106-4139]:ExpressionStatement[4106-4139]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[4148-4188]:ExpressionStatement[4148-4188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4853-5139]:Block[4853-5139]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "info" : "SuperConstructorInvocation[4863-4928]:SuperConstructorInvocation[4863-4928]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[4937-5042]:IfStatement[4937-5042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4959-5042]:Block[4959-5042]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[4973-5032]:ThrowStatement[4973-5032]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[5051-5084]:ExpressionStatement[5051-5084]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[5093-5133]:ExpressionStatement[5093-5133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5242-5278]:Block[5242-5278]"
    }, {
      "left" : "return maximalOrder;",
      "right" : "return maximalOrder;",
      "info" : "ReturnStatement[5252-5272]:ReturnStatement[5252-5272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5362-12932]:Block[5362-13334]"
    }, {
      "left" : "final double[] x = new double[maximalOrder + 1];",
      "right" : "final double[] x = new double[maximalOrder + 1];",
      "info" : "VariableDeclarationStatement[5421-5469]:VariableDeclarationStatement[5421-5469]"
    }, {
      "left" : "final double[] y = new double[maximalOrder + 1];",
      "right" : "final double[] y = new double[maximalOrder + 1];",
      "info" : "VariableDeclarationStatement[5478-5526]:VariableDeclarationStatement[5478-5526]"
    }, {
      "left" : "x[0] = getMin();",
      "right" : "x[0] = getMin();",
      "info" : "ExpressionStatement[5535-5551]:ExpressionStatement[5535-5551]"
    }, {
      "left" : "x[1] = getStartValue();",
      "right" : "x[1] = getStartValue();",
      "info" : "ExpressionStatement[5560-5583]:ExpressionStatement[5560-5583]"
    }, {
      "left" : "x[2] = getMax();",
      "right" : "x[2] = getMax();",
      "info" : "ExpressionStatement[5592-5608]:ExpressionStatement[5592-5608]"
    }, {
      "left" : "verifySequence(x[0], x[1], x[2]);",
      "right" : "verifySequence(x[0], x[1], x[2]);",
      "info" : "ExpressionStatement[5617-5650]:ExpressionStatement[5617-5650]"
    }, {
      "left" : "y[1] = computeObjectiveValue(x[1]);",
      "right" : "y[1] = computeObjectiveValue(x[1]);",
      "info" : "ExpressionStatement[5694-5729]:ExpressionStatement[5694-5729]"
    }, {
      "left" : "if (Precision.equals(y[1], 0.0, 1))",
      "right" : "if (Precision.equals(y[1], 0.0, 1))",
      "info" : "IfStatement[5738-5875]:IfStatement[5738-5875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5774-5875]:Block[5774-5875]"
    }, {
      "left" : "return x[1];",
      "right" : "return x[1];",
      "info" : "ReturnStatement[5853-5865]:ReturnStatement[5853-5865]"
    }, {
      "left" : "y[0] = computeObjectiveValue(x[0]);",
      "right" : "y[0] = computeObjectiveValue(x[0]);",
      "info" : "ExpressionStatement[5921-5956]:ExpressionStatement[5921-5956]"
    }, {
      "left" : "if (Precision.equals(y[0], 0.0, 1))",
      "right" : "if (Precision.equals(y[0], 0.0, 1))",
      "info" : "IfStatement[5965-6103]:IfStatement[5965-6103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6001-6103]:Block[6001-6103]"
    }, {
      "left" : "return x[0];",
      "right" : "return x[0];",
      "info" : "ReturnStatement[6081-6093]:ReturnStatement[6081-6093]"
    }, {
      "left" : "int nbPoints;",
      "right" : "int nbPoints;",
      "info" : "VariableDeclarationStatement[6113-6126]:VariableDeclarationStatement[6113-6126]"
    }, {
      "left" : "int signChangeIndex;",
      "right" : "int signChangeIndex;",
      "info" : "VariableDeclarationStatement[6135-6155]:VariableDeclarationStatement[6135-6155]"
    }, {
      "left" : "if (y[0] * y[1] < 0)",
      "right" : "if (y[0] * y[1] < 0)",
      "info" : "IfStatement[6164-6888]:IfStatement[6164-6888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6185-6319]:Block[6185-6319]"
    }, {
      "left" : "nbPoints        = 2;",
      "right" : "nbPoints        = 2;",
      "info" : "ExpressionStatement[6255-6275]:ExpressionStatement[6255-6275]"
    }, {
      "left" : "signChangeIndex = 1;",
      "right" : "signChangeIndex = 1;",
      "info" : "ExpressionStatement[6288-6308]:ExpressionStatement[6288-6308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6325-6888]:Block[6325-6888]"
    }, {
      "left" : "y[2] = computeObjectiveValue(x[2]);",
      "right" : "y[2] = computeObjectiveValue(x[2]);",
      "info" : "ExpressionStatement[6380-6415]:ExpressionStatement[6380-6415]"
    }, {
      "left" : "if (Precision.equals(y[2], 0.0, 1))",
      "right" : "if (Precision.equals(y[2], 0.0, 1))",
      "info" : "IfStatement[6428-6579]:IfStatement[6428-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6464-6579]:Block[6464-6579]"
    }, {
      "left" : "return x[2];",
      "right" : "return x[2];",
      "info" : "ReturnStatement[6553-6565]:ReturnStatement[6553-6565]"
    }, {
      "left" : "if (y[1] * y[2] < 0)",
      "right" : "if (y[1] * y[2] < 0)",
      "info" : "IfStatement[6593-6877]:IfStatement[6593-6877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6614-6783]:Block[6614-6783]"
    }, {
      "left" : "nbPoints        = 3;",
      "right" : "nbPoints        = 3;",
      "info" : "ExpressionStatement[6712-6732]:ExpressionStatement[6712-6732]"
    }, {
      "left" : "signChangeIndex = 2;",
      "right" : "signChangeIndex = 2;",
      "info" : "ExpressionStatement[6749-6769]:ExpressionStatement[6749-6769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6789-6877]:Block[6789-6877]"
    }, {
      "left" : "throw new NoBracketingException(x[0], x[2], y[0], y[2]);",
      "right" : "throw new NoBracketingException(x[0], x[2], y[0], y[2]);",
      "info" : "ThrowStatement[6807-6863]:ThrowStatement[6807-6863]"
    }, {
      "left" : "final double[] tmpX = new double[x.length];",
      "right" : "final double[] tmpX = new double[x.length];",
      "info" : "VariableDeclarationStatement[6967-7010]:VariableDeclarationStatement[6967-7010]"
    }, {
      "left" : "double xA    = x[signChangeIndex - 1];",
      "right" : "double xA    = x[signChangeIndex - 1];",
      "info" : "VariableDeclarationStatement[7071-7109]:VariableDeclarationStatement[7071-7109]"
    }, {
      "left" : "double yA    = y[signChangeIndex - 1];",
      "right" : "double yA    = y[signChangeIndex - 1];",
      "info" : "VariableDeclarationStatement[7118-7156]:VariableDeclarationStatement[7118-7156]"
    }, {
      "left" : "double absYA = FastMath.abs(yA);",
      "right" : "double absYA = FastMath.abs(yA);",
      "info" : "VariableDeclarationStatement[7165-7197]:VariableDeclarationStatement[7165-7197]"
    }, {
      "left" : "int agingA   = 0;",
      "right" : "int agingA   = 0;",
      "info" : "VariableDeclarationStatement[7206-7223]:VariableDeclarationStatement[7206-7223]"
    }, {
      "left" : "double xB    = x[signChangeIndex];",
      "right" : "double xB    = x[signChangeIndex];",
      "info" : "VariableDeclarationStatement[7232-7266]:VariableDeclarationStatement[7232-7266]"
    }, {
      "left" : "double yB    = y[signChangeIndex];",
      "right" : "double yB    = y[signChangeIndex];",
      "info" : "VariableDeclarationStatement[7275-7309]:VariableDeclarationStatement[7275-7309]"
    }, {
      "left" : "double absYB = FastMath.abs(yB);",
      "right" : "double absYB = FastMath.abs(yB);",
      "info" : "VariableDeclarationStatement[7318-7350]:VariableDeclarationStatement[7318-7350]"
    }, {
      "left" : "int agingB   = 0;",
      "right" : "int agingB   = 0;",
      "info" : "VariableDeclarationStatement[7359-7376]:VariableDeclarationStatement[7359-7376]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7409-12925]:WhileStatement[7409-13327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7422-12925]:Block[7422-13327]"
    }, {
      "left" : "final double xTol = getAbsoluteAccuracy() +\n                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));",
      "right" : "final double xTol = getAbsoluteAccuracy() +\n                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));",
      "info" : "VariableDeclarationStatement[7493-7642]:VariableDeclarationStatement[7493-7642]"
    }, {
      "left" : "if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy()))",
      "right" : "if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy()))",
      "info" : "IfStatement[7655-8315]:IfStatement[7655-8315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7741-8315]:Block[7741-8315]"
    }, {
      "left" : "switch (allowed) {\n                case ANY_SIDE :\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE :\n                    return xA;\n                case RIGHT_SIDE :\n                    return xB;\n                case BELOW_SIDE :\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE :\n                    return (yA <  0) ? xB : xA;\n                default :\n                    // this should never happen\n                    throw new MathInternalError(null);\n                }",
      "right" : "switch (allowed) {\n                case ANY_SIDE :\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE :\n                    return xA;\n                case RIGHT_SIDE :\n                    return xB;\n                case BELOW_SIDE :\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE :\n                    return (yA <  0) ? xB : xA;\n                default :\n                    // this should never happen\n                    throw new MathInternalError(null);\n                }",
      "info" : "SwitchStatement[7759-8301]:SwitchStatement[7759-8301]"
    }, {
      "left" : "case ANY_SIDE :",
      "right" : "case ANY_SIDE :",
      "info" : "SwitchCase[7794-7809]:SwitchCase[7794-7809]"
    }, {
      "left" : "return absYA < absYB ? xA : xB;",
      "right" : "return absYA < absYB ? xA : xB;",
      "info" : "ReturnStatement[7830-7861]:ReturnStatement[7830-7861]"
    }, {
      "left" : "case LEFT_SIDE :",
      "right" : "case LEFT_SIDE :",
      "info" : "SwitchCase[7878-7894]:SwitchCase[7878-7894]"
    }, {
      "left" : "return xA;",
      "right" : "return xA;",
      "info" : "ReturnStatement[7915-7925]:ReturnStatement[7915-7925]"
    }, {
      "left" : "case RIGHT_SIDE :",
      "right" : "case RIGHT_SIDE :",
      "info" : "SwitchCase[7942-7959]:SwitchCase[7942-7959]"
    }, {
      "left" : "return xB;",
      "right" : "return xB;",
      "info" : "ReturnStatement[7980-7990]:ReturnStatement[7980-7990]"
    }, {
      "left" : "case BELOW_SIDE :",
      "right" : "case BELOW_SIDE :",
      "info" : "SwitchCase[8007-8024]:SwitchCase[8007-8024]"
    }, {
      "left" : "return (yA <= 0) ? xA : xB;",
      "right" : "return (yA <= 0) ? xA : xB;",
      "info" : "ReturnStatement[8045-8072]:ReturnStatement[8045-8072]"
    }, {
      "left" : "case ABOVE_SIDE :",
      "right" : "case ABOVE_SIDE :",
      "info" : "SwitchCase[8089-8106]:SwitchCase[8089-8106]"
    }, {
      "left" : "return (yA <  0) ? xB : xA;",
      "right" : "return (yA <  0) ? xB : xA;",
      "info" : "ReturnStatement[8127-8154]:ReturnStatement[8127-8154]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[8171-8180]:SwitchCase[8171-8180]"
    }, {
      "left" : "throw new MathInternalError(null);",
      "right" : "throw new MathInternalError(null);",
      "info" : "ThrowStatement[8249-8283]:ThrowStatement[8249-8283]"
    }, {
      "left" : "double targetY;",
      "right" : "double targetY;",
      "info" : "VariableDeclarationStatement[8381-8396]:VariableDeclarationStatement[8381-8396]"
    }, {
      "left" : "if (agingA >= MAXIMAL_AGING)",
      "right" : "if (agingA >= MAXIMAL_AGING)",
      "info" : "IfStatement[8409-8877]:IfStatement[8409-9279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8438-8580]:Block[8438-8781]"
    }, {
      "left" : "if (agingB >= MAXIMAL_AGING)",
      "right" : "if (agingB >= MAXIMAL_AGING)",
      "info" : "IfStatement[8586-8877]:IfStatement[8787-9279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8615-8756]:Block[8816-9158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8762-8877]:Block[9164-9279]"
    }, {
      "left" : "targetY = 0;",
      "right" : "targetY = 0;",
      "info" : "ExpressionStatement[8851-8863]:ExpressionStatement[9253-9265]"
    }, {
      "left" : "double nextX;",
      "right" : "double nextX;",
      "info" : "VariableDeclarationStatement[8943-8956]:VariableDeclarationStatement[9345-9358]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[8969-8983]:VariableDeclarationStatement[9371-9385]"
    }, {
      "left" : "int end   = nbPoints;",
      "right" : "int end   = nbPoints;",
      "info" : "VariableDeclarationStatement[8996-9017]:VariableDeclarationStatement[9398-9419]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[9030-10215]:DoStatement[9432-10617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9033-10165]:Block[9435-10567]"
    }, {
      "left" : "System.arraycopy(x, start, tmpX, start, end - start);",
      "right" : "System.arraycopy(x, start, tmpX, start, end - start);",
      "info" : "ExpressionStatement[9144-9197]:ExpressionStatement[9546-9599]"
    }, {
      "left" : "nextX = guessX(targetY, tmpX, y, start, end);",
      "right" : "nextX = guessX(targetY, tmpX, y, start, end);",
      "info" : "ExpressionStatement[9214-9259]:ExpressionStatement[9616-9661]"
    }, {
      "left" : "if (!((nextX > xA) && (nextX < xB)))",
      "right" : "if (!((nextX > xA) && (nextX < xB)))",
      "info" : "IfStatement[9277-10150]:IfStatement[9679-10552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9314-10150]:Block[9716-10552]"
    }, {
      "left" : "if (signChangeIndex - start >= end - signChangeIndex)",
      "right" : "if (signChangeIndex - start >= end - signChangeIndex)",
      "info" : "IfStatement[9684-10036]:IfStatement[10086-10438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9738-9887]:Block[10140-10289]"
    }, {
      "left" : "++start;",
      "right" : "++start;",
      "info" : "ExpressionStatement[9857-9865]:ExpressionStatement[10259-10267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9893-10036]:Block[10295-10438]"
    }, {
      "left" : "--end;",
      "right" : "--end;",
      "info" : "ExpressionStatement[10008-10014]:ExpressionStatement[10410-10416]"
    }, {
      "left" : "nextX = Double.NaN;",
      "right" : "nextX = Double.NaN;",
      "info" : "ExpressionStatement[10112-10131]:ExpressionStatement[10514-10533]"
    }, {
      "left" : "if (Double.isNaN(nextX))",
      "right" : "if (Double.isNaN(nextX))",
      "info" : "IfStatement[10229-10443]:IfStatement[10631-10845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10254-10443]:Block[10656-10845]"
    }, {
      "left" : "nextX = xA + 0.5 * (xB - xA);",
      "right" : "nextX = xA + 0.5 * (xB - xA);",
      "info" : "ExpressionStatement[10314-10343]:ExpressionStatement[10716-10745]"
    }, {
      "left" : "start = signChangeIndex - 1;",
      "right" : "start = signChangeIndex - 1;",
      "info" : "ExpressionStatement[10360-10388]:ExpressionStatement[10762-10790]"
    }, {
      "left" : "end   = signChangeIndex;",
      "right" : "end   = signChangeIndex;",
      "info" : "ExpressionStatement[10405-10429]:ExpressionStatement[10807-10831]"
    }, {
      "left" : "final double nextY = computeObjectiveValue(nextX);",
      "right" : "final double nextY = computeObjectiveValue(nextX);",
      "info" : "VariableDeclarationStatement[10514-10564]:VariableDeclarationStatement[10916-10966]"
    }, {
      "left" : "if (Precision.equals(nextY, 0.0, 1))",
      "right" : "if (Precision.equals(nextY, 0.0, 1))",
      "info" : "IfStatement[10577-10819]:IfStatement[10979-11221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10614-10819]:Block[11016-11221]"
    }, {
      "left" : "return nextX;",
      "right" : "return nextX;",
      "info" : "ReturnStatement[10792-10805]:ReturnStatement[11194-11207]"
    }, {
      "left" : "if ((nbPoints > 2) && (end - start != nbPoints))",
      "right" : "if ((nbPoints > 2) && (end - start != nbPoints))",
      "info" : "IfStatement[10833-11829]:IfStatement[11235-12231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10882-11264]:Block[11284-11666]"
    }, {
      "left" : "nbPoints = end - start;",
      "right" : "nbPoints = end - start;",
      "info" : "ExpressionStatement[11064-11087]:ExpressionStatement[11466-11489]"
    }, {
      "left" : "System.arraycopy(x, start, x, 0, nbPoints);",
      "right" : "System.arraycopy(x, start, x, 0, nbPoints);",
      "info" : "ExpressionStatement[11104-11147]:ExpressionStatement[11506-11549]"
    }, {
      "left" : "System.arraycopy(y, start, y, 0, nbPoints);",
      "right" : "System.arraycopy(y, start, y, 0, nbPoints);",
      "info" : "ExpressionStatement[11164-11207]:ExpressionStatement[11566-11609]"
    }, {
      "left" : "signChangeIndex -= start;",
      "right" : "signChangeIndex -= start;",
      "info" : "ExpressionStatement[11224-11249]:ExpressionStatement[11626-11651]"
    }, {
      "left" : "if (nbPoints == x.length)",
      "right" : "if (nbPoints == x.length)",
      "info" : "IfStatement[11271-11829]:IfStatement[11673-12231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11297-11829]:Block[11699-12231]"
    }, {
      "left" : "nbPoints--;",
      "right" : "nbPoints--;",
      "info" : "ExpressionStatement[11392-11403]:ExpressionStatement[11794-11805]"
    }, {
      "left" : "if (signChangeIndex >= (x.length + 1) / 2)",
      "right" : "if (signChangeIndex >= (x.length + 1) / 2)",
      "info" : "IfStatement[11502-11814]:IfStatement[11904-12216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11545-11814]:Block[11947-12216]"
    }, {
      "left" : "System.arraycopy(x, 1, x, 0, nbPoints);",
      "right" : "System.arraycopy(x, 1, x, 0, nbPoints);",
      "info" : "ExpressionStatement[11658-11697]:ExpressionStatement[12060-12099]"
    }, {
      "left" : "System.arraycopy(y, 1, y, 0, nbPoints);",
      "right" : "System.arraycopy(y, 1, y, 0, nbPoints);",
      "info" : "ExpressionStatement[11718-11757]:ExpressionStatement[12120-12159]"
    }, {
      "left" : "--signChangeIndex;",
      "right" : "--signChangeIndex;",
      "info" : "ExpressionStatement[11778-11796]:ExpressionStatement[12180-12198]"
    }, {
      "left" : "System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",
      "right" : "System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",
      "info" : "ExpressionStatement[11978-12067]:ExpressionStatement[12380-12469]"
    }, {
      "left" : "x[signChangeIndex] = nextX;",
      "right" : "x[signChangeIndex] = nextX;",
      "info" : "ExpressionStatement[12080-12107]:ExpressionStatement[12482-12509]"
    }, {
      "left" : "System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",
      "right" : "System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",
      "info" : "ExpressionStatement[12120-12209]:ExpressionStatement[12522-12611]"
    }, {
      "left" : "y[signChangeIndex] = nextY;",
      "right" : "y[signChangeIndex] = nextY;",
      "info" : "ExpressionStatement[12222-12249]:ExpressionStatement[12624-12651]"
    }, {
      "left" : "++nbPoints;",
      "right" : "++nbPoints;",
      "info" : "ExpressionStatement[12262-12273]:ExpressionStatement[12664-12675]"
    }, {
      "left" : "if (nextY * yA <= 0)",
      "right" : "if (nextY * yA <= 0)",
      "info" : "IfStatement[12333-12914]:IfStatement[12735-13316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12354-12589]:Block[12756-12991]"
    }, {
      "left" : "xB = nextX;",
      "right" : "xB = nextX;",
      "info" : "ExpressionStatement[12440-12451]:ExpressionStatement[12842-12853]"
    }, {
      "left" : "yB = nextY;",
      "right" : "yB = nextY;",
      "info" : "ExpressionStatement[12468-12479]:ExpressionStatement[12870-12881]"
    }, {
      "left" : "absYB = FastMath.abs(yB);",
      "right" : "absYB = FastMath.abs(yB);",
      "info" : "ExpressionStatement[12496-12521]:ExpressionStatement[12898-12923]"
    }, {
      "left" : "++agingA;",
      "right" : "++agingA;",
      "info" : "ExpressionStatement[12538-12547]:ExpressionStatement[12940-12949]"
    }, {
      "left" : "agingB = 0;",
      "right" : "agingB = 0;",
      "info" : "ExpressionStatement[12564-12575]:ExpressionStatement[12966-12977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12595-12914]:Block[12997-13316]"
    }, {
      "left" : "xA = nextX;",
      "right" : "xA = nextX;",
      "info" : "ExpressionStatement[12680-12691]:ExpressionStatement[13082-13093]"
    }, {
      "left" : "yA = nextY;",
      "right" : "yA = nextY;",
      "info" : "ExpressionStatement[12708-12719]:ExpressionStatement[13110-13121]"
    }, {
      "left" : "absYA = FastMath.abs(yA);",
      "right" : "absYA = FastMath.abs(yA);",
      "info" : "ExpressionStatement[12736-12761]:ExpressionStatement[13138-13163]"
    }, {
      "left" : "agingA = 0;",
      "right" : "agingA = 0;",
      "info" : "ExpressionStatement[12778-12789]:ExpressionStatement[13180-13191]"
    }, {
      "left" : "++agingB;",
      "right" : "++agingB;",
      "info" : "ExpressionStatement[12806-12815]:ExpressionStatement[13208-13217]"
    }, {
      "left" : "signChangeIndex++;",
      "right" : "signChangeIndex++;",
      "info" : "ExpressionStatement[12881-12899]:ExpressionStatement[13283-13301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13842-14325]:Block[14244-14727]"
    }, {
      "left" : "for (int i = start; i < end - 1; ++i)",
      "right" : "for (int i = start; i < end - 1; ++i)",
      "info" : "ForStatement[13917-14137]:ForStatement[14319-14539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13955-14137]:Block[14357-14539]"
    }, {
      "left" : "final int delta = i + 1 - start;",
      "right" : "final int delta = i + 1 - start;",
      "info" : "VariableDeclarationStatement[13969-14001]:VariableDeclarationStatement[14371-14403]"
    }, {
      "left" : "for (int j = end - 1; j > i; --j)",
      "right" : "for (int j = end - 1; j > i; --j)",
      "info" : "ForStatement[14014-14127]:ForStatement[14416-14529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14048-14127]:Block[14450-14529]"
    }, {
      "left" : "x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);",
      "right" : "x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);",
      "info" : "ExpressionStatement[14066-14113]:ExpressionStatement[14468-14515]"
    }, {
      "left" : "double x0 = 0;",
      "right" : "double x0 = 0;",
      "info" : "VariableDeclarationStatement[14178-14192]:VariableDeclarationStatement[14580-14594]"
    }, {
      "left" : "for (int j = end - 1; j >= start; --j)",
      "right" : "for (int j = end - 1; j >= start; --j)",
      "info" : "ForStatement[14201-14298]:ForStatement[14603-14700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14240-14298]:Block[14642-14700]"
    }, {
      "left" : "x0 = x[j] + x0 * (targetY - y[j]);",
      "right" : "x0 = x[j] + x0 * (targetY - y[j]);",
      "info" : "ExpressionStatement[14254-14288]:ExpressionStatement[14656-14690]"
    }, {
      "left" : "return x0;",
      "right" : "return x0;",
      "info" : "ReturnStatement[14308-14318]:ReturnStatement[14710-14720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14492-14589]:Block[14894-14991]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[14502-14533]:ExpressionStatement[14904-14935]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max);",
      "right" : "return super.solve(maxEval, f, min, max);",
      "info" : "ReturnStatement[14542-14583]:ReturnStatement[14944-14985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14799-14908]:Block[15201-15310]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[14809-14840]:ExpressionStatement[15211-15242]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max, startValue);",
      "right" : "return super.solve(maxEval, f, min, max, startValue);",
      "info" : "ReturnStatement[14849-14902]:ReturnStatement[15251-15304]"
    } ]
  },
  "interFileMappings" : { }
}