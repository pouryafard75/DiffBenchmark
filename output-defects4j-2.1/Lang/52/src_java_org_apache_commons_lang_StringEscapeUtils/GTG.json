{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StringEscapeUtils",
      "right" : "StringEscapeUtils",
      "info" : "TypeDeclaration[988-26498]:TypeDeclaration[988-26640]"
    }, {
      "left" : "public StringEscapeUtils()",
      "right" : "public StringEscapeUtils()",
      "info" : "MethodDeclaration[1520-1928]:MethodDeclaration[1520-1928]"
    }, {
      "left" : "public static String escapeJava(String str)",
      "right" : "public static String escapeJava(String str)",
      "info" : "MethodDeclaration[2042-2896]:MethodDeclaration[2042-2896]"
    }, {
      "left" : "public static void escapeJava(Writer out, String str) throws IOException",
      "right" : "public static void escapeJava(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[2902-3538]:MethodDeclaration[2902-3538]"
    }, {
      "left" : "public static String escapeJavaScript(String str)",
      "right" : "public static String escapeJavaScript(String str)",
      "info" : "MethodDeclaration[3544-4473]:MethodDeclaration[3544-4473]"
    }, {
      "left" : "public static void escapeJavaScript(Writer out, String str) throws IOException",
      "right" : "public static void escapeJavaScript(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[4479-5133]:MethodDeclaration[4479-5133]"
    }, {
      "left" : "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes)",
      "right" : "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes)",
      "info" : "MethodDeclaration[5139-5935]:MethodDeclaration[5139-5935]"
    }, {
      "left" : "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException",
      "right" : "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException",
      "info" : "MethodDeclaration[5941-8736]:MethodDeclaration[5941-8878]"
    }, {
      "left" : "private static String hex(char ch)",
      "right" : "private static String hex(char ch)",
      "info" : "MethodDeclaration[8742-9066]:MethodDeclaration[8884-9208]"
    }, {
      "left" : "public static String unescapeJava(String str)",
      "right" : "public static String unescapeJava(String str)",
      "info" : "MethodDeclaration[9072-9980]:MethodDeclaration[9214-10122]"
    }, {
      "left" : "public static void unescapeJava(Writer out, String str) throws IOException",
      "right" : "public static void unescapeJava(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[9986-13684]:MethodDeclaration[10128-13826]"
    }, {
      "left" : "public static String unescapeJavaScript(String str)",
      "right" : "public static String unescapeJavaScript(String str)",
      "info" : "MethodDeclaration[13690-14289]:MethodDeclaration[13832-14431]"
    }, {
      "left" : "public static void unescapeJavaScript(Writer out, String str) throws IOException",
      "right" : "public static void unescapeJavaScript(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[14295-15157]:MethodDeclaration[14437-15299]"
    }, {
      "left" : "public static String escapeHtml(String str)",
      "right" : "public static String escapeHtml(String str)",
      "info" : "MethodDeclaration[15264-16990]:MethodDeclaration[15406-17132]"
    }, {
      "left" : "public static void escapeHtml(Writer writer, String string) throws IOException",
      "right" : "public static void escapeHtml(Writer writer, String string) throws IOException",
      "info" : "MethodDeclaration[16996-18874]:MethodDeclaration[17138-19016]"
    }, {
      "left" : "public static String unescapeHtml(String str)",
      "right" : "public static String unescapeHtml(String str)",
      "info" : "MethodDeclaration[18958-20130]:MethodDeclaration[19100-20272]"
    }, {
      "left" : "public static void unescapeHtml(Writer writer, String string) throws IOException",
      "right" : "public static void unescapeHtml(Writer writer, String string) throws IOException",
      "info" : "MethodDeclaration[20136-21269]:MethodDeclaration[20278-21411]"
    }, {
      "left" : "public static void escapeXml(Writer writer, String str) throws IOException",
      "right" : "public static void escapeXml(Writer writer, String str) throws IOException",
      "info" : "MethodDeclaration[21353-22530]:MethodDeclaration[21495-22672]"
    }, {
      "left" : "public static String escapeXml(String str)",
      "right" : "public static String escapeXml(String str)",
      "info" : "MethodDeclaration[22536-23459]:MethodDeclaration[22678-23601]"
    }, {
      "left" : "public static void unescapeXml(Writer writer, String str) throws IOException",
      "right" : "public static void unescapeXml(Writer writer, String str) throws IOException",
      "info" : "MethodDeclaration[23543-24627]:MethodDeclaration[23685-24769]"
    }, {
      "left" : "public static String unescapeXml(String str)",
      "right" : "public static String unescapeXml(String str)",
      "info" : "MethodDeclaration[24633-25465]:MethodDeclaration[24775-25607]"
    }, {
      "left" : "public static String escapeSql(String str)",
      "right" : "public static String escapeSql(String str)",
      "info" : "MethodDeclaration[25549-26495]:MethodDeclaration[25691-26637]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1906-1928]:Block[1906-1928]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1914-1922]:SuperConstructorInvocation[1914-1922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2839-2896]:Block[2839-2896]"
    }, {
      "left" : "return escapeJavaStyleString(str, false);",
      "right" : "return escapeJavaStyleString(str, false);",
      "info" : "ReturnStatement[2849-2890]:ReturnStatement[2849-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3483-3538]:Block[3483-3538]"
    }, {
      "left" : "escapeJavaStyleString(out, str, false);",
      "right" : "escapeJavaStyleString(out, str, false);",
      "info" : "ExpressionStatement[3493-3532]:ExpressionStatement[3493-3532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4417-4473]:Block[4417-4473]"
    }, {
      "left" : "return escapeJavaStyleString(str, true);",
      "right" : "return escapeJavaStyleString(str, true);",
      "info" : "ReturnStatement[4427-4467]:ReturnStatement[4427-4467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5079-5133]:Block[5079-5133]"
    }, {
      "left" : "escapeJavaStyleString(out, str, true);",
      "right" : "escapeJavaStyleString(out, str, true);",
      "info" : "ExpressionStatement[5089-5127]:ExpressionStatement[5089-5127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5493-5935]:Block[5493-5935]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[5503-5556]:IfStatement[5503-5556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5520-5556]:Block[5520-5556]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5534-5546]:ReturnStatement[5534-5546]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5565-5929]:TryStatement[5565-5929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5756]:Block[5569-5756]"
    }, {
      "left" : "StringWriter writer = new StringWriter(str.length() * 2);",
      "right" : "StringWriter writer = new StringWriter(str.length() * 2);",
      "info" : "VariableDeclarationStatement[5583-5640]:VariableDeclarationStatement[5583-5640]"
    }, {
      "left" : "escapeJavaStyleString(writer, str, escapeSingleQuotes);",
      "right" : "escapeJavaStyleString(writer, str, escapeSingleQuotes);",
      "info" : "ExpressionStatement[5653-5708]:ExpressionStatement[5653-5708]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[5721-5746]:ReturnStatement[5721-5746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5781-5929]:Block[5781-5929]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[5872-5894]:ExpressionStatement[5872-5894]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5907-5919]:ReturnStatement[5907-5919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6395-8736]:Block[6395-8878]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[6405-6512]:IfStatement[6405-6512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6422-6512]:Block[6422-6512]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "info" : "ThrowStatement[6436-6502]:ThrowStatement[6436-6502]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6521-6569]:IfStatement[6521-6569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6538-6569]:Block[6538-6569]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6552-6559]:ReturnStatement[6552-6559]"
    }, {
      "left" : "int sz;",
      "right" : "int sz;",
      "info" : "VariableDeclarationStatement[6578-6585]:VariableDeclarationStatement[6578-6585]"
    }, {
      "left" : "sz = str.length();",
      "right" : "sz = str.length();",
      "info" : "ExpressionStatement[6594-6612]:ExpressionStatement[6594-6612]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[6621-8730]:ForStatement[6621-8872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6650-8730]:Block[6650-8872]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[6664-6688]:VariableDeclarationStatement[6664-6688]"
    }, {
      "left" : "if (ch > 0xfff)",
      "right" : "if (ch > 0xfff)",
      "info" : "IfStatement[6732-8720]:IfStatement[6732-8862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6748-6807]:Block[6748-6807]"
    }, {
      "left" : "out.write(\"\\\\u\" + hex(ch));",
      "right" : "out.write(\"\\\\u\" + hex(ch));",
      "info" : "ExpressionStatement[6766-6793]:ExpressionStatement[6766-6793]"
    }, {
      "left" : "if (ch > 0xff)",
      "right" : "if (ch > 0xff)",
      "info" : "IfStatement[6813-8720]:IfStatement[6813-8862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6828-6888]:Block[6828-6888]"
    }, {
      "left" : "out.write(\"\\\\u0\" + hex(ch));",
      "right" : "out.write(\"\\\\u0\" + hex(ch));",
      "info" : "ExpressionStatement[6846-6874]:ExpressionStatement[6846-6874]"
    }, {
      "left" : "if (ch > 0x7f)",
      "right" : "if (ch > 0x7f)",
      "info" : "IfStatement[6894-8720]:IfStatement[6894-8862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6909-6970]:Block[6909-6970]"
    }, {
      "left" : "out.write(\"\\\\u00\" + hex(ch));",
      "right" : "out.write(\"\\\\u00\" + hex(ch));",
      "info" : "ExpressionStatement[6927-6956]:ExpressionStatement[6927-6956]"
    }, {
      "left" : "if (ch < 32)",
      "right" : "if (ch < 32)",
      "info" : "IfStatement[6976-8720]:IfStatement[6976-8862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6989-8044]:Block[6989-8044]"
    }, {
      "left" : "switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }",
      "info" : "SwitchStatement[7007-8030]:SwitchStatement[7007-8030]"
    }, {
      "left" : "case '\\b':",
      "right" : "case '\\b':",
      "info" : "SwitchCase[7041-7051]:SwitchCase[7041-7051]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7076-7092]:ExpressionStatement[7076-7092]"
    }, {
      "left" : "out.write('b');",
      "right" : "out.write('b');",
      "info" : "ExpressionStatement[7117-7132]:ExpressionStatement[7117-7132]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7157-7163]:BreakStatement[7157-7163]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[7184-7194]:SwitchCase[7184-7194]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7219-7235]:ExpressionStatement[7219-7235]"
    }, {
      "left" : "out.write('n');",
      "right" : "out.write('n');",
      "info" : "ExpressionStatement[7260-7275]:ExpressionStatement[7260-7275]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7300-7306]:BreakStatement[7300-7306]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[7327-7337]:SwitchCase[7327-7337]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7362-7378]:ExpressionStatement[7362-7378]"
    }, {
      "left" : "out.write('t');",
      "right" : "out.write('t');",
      "info" : "ExpressionStatement[7403-7418]:ExpressionStatement[7403-7418]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7443-7449]:BreakStatement[7443-7449]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[7470-7480]:SwitchCase[7470-7480]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7505-7521]:ExpressionStatement[7505-7521]"
    }, {
      "left" : "out.write('f');",
      "right" : "out.write('f');",
      "info" : "ExpressionStatement[7546-7561]:ExpressionStatement[7546-7561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7586-7592]:BreakStatement[7586-7592]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[7613-7623]:SwitchCase[7613-7623]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7648-7664]:ExpressionStatement[7648-7664]"
    }, {
      "left" : "out.write('r');",
      "right" : "out.write('r');",
      "info" : "ExpressionStatement[7689-7704]:ExpressionStatement[7689-7704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7729-7735]:BreakStatement[7729-7735]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[7756-7765]:SwitchCase[7756-7765]"
    }, {
      "left" : "if (ch > 0xf)",
      "right" : "if (ch > 0xf)",
      "info" : "IfStatement[7790-7981]:IfStatement[7790-7981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7804-7889]:Block[7804-7889]"
    }, {
      "left" : "out.write(\"\\\\u00\" + hex(ch));",
      "right" : "out.write(\"\\\\u00\" + hex(ch));",
      "info" : "ExpressionStatement[7834-7863]:ExpressionStatement[7834-7863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7895-7981]:Block[7895-7981]"
    }, {
      "left" : "out.write(\"\\\\u000\" + hex(ch));",
      "right" : "out.write(\"\\\\u000\" + hex(ch));",
      "info" : "ExpressionStatement[7925-7955]:ExpressionStatement[7925-7955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8006-8012]:BreakStatement[8006-8012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8050-8720]:Block[8050-8862]"
    }, {
      "left" : "switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    case '/':\n                        out.write('\\\\');\n                        out.write('/');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "info" : "SwitchStatement[8068-8706]:SwitchStatement[8068-8848]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[8102-8112]:SwitchCase[8102-8112]"
    }, {
      "left" : "if (escapeSingleQuote)",
      "right" : "if (escapeSingleQuote)",
      "info" : "IfStatement[8137-8230]:IfStatement[8137-8230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8160-8230]:Block[8160-8230]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8188-8204]:ExpressionStatement[8188-8204]"
    }, {
      "left" : "out.write('\\'');",
      "right" : "out.write('\\'');",
      "info" : "ExpressionStatement[8255-8271]:ExpressionStatement[8255-8271]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8296-8302]:BreakStatement[8296-8302]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[8323-8332]:SwitchCase[8323-8332]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8357-8373]:ExpressionStatement[8357-8373]"
    }, {
      "left" : "out.write('\"');",
      "right" : "out.write('\"');",
      "info" : "ExpressionStatement[8398-8413]:ExpressionStatement[8398-8413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8438-8444]:BreakStatement[8438-8444]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[8465-8475]:SwitchCase[8465-8475]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8500-8516]:ExpressionStatement[8541-8557]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8541-8557]:ExpressionStatement[8643-8659]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8582-8588]:BreakStatement[8582-8588]"
    }, {
      "left" : "default :",
      "right" : "case '/':",
      "info" : "SwitchCase[8609-8618]:SwitchCase[8609-8618]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[8643-8657]:ExpressionStatement[8785-8799]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8682-8688]:BreakStatement[8824-8830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9005-9066]:Block[9147-9208]"
    }, {
      "left" : "return Integer.toHexString(ch).toUpperCase();",
      "right" : "return Integer.toHexString(ch).toUpperCase();",
      "info" : "ReturnStatement[9015-9060]:ReturnStatement[9157-9202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9571-9980]:Block[9713-10122]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[9581-9634]:IfStatement[9723-9776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9598-9634]:Block[9740-9776]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9612-9624]:ReturnStatement[9754-9766]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9643-9974]:TryStatement[9785-10116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9647-9801]:Block[9789-9943]"
    }, {
      "left" : "StringWriter writer = new StringWriter(str.length());",
      "right" : "StringWriter writer = new StringWriter(str.length());",
      "info" : "VariableDeclarationStatement[9661-9714]:VariableDeclarationStatement[9803-9856]"
    }, {
      "left" : "unescapeJava(writer, str);",
      "right" : "unescapeJava(writer, str);",
      "info" : "ExpressionStatement[9727-9753]:ExpressionStatement[9869-9895]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[9766-9791]:ReturnStatement[9908-9933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9826-9974]:Block[9968-10116]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[9917-9939]:ExpressionStatement[10059-10081]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9952-9964]:ReturnStatement[10094-10106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10757-13684]:Block[10899-13826]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[10767-10874]:IfStatement[10909-11016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10784-10874]:Block[10926-11016]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "info" : "ThrowStatement[10798-10864]:ThrowStatement[10940-11006]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[10883-10931]:IfStatement[11025-11073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10900-10931]:Block[11042-11073]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10914-10921]:ReturnStatement[11056-11063]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[10940-10962]:VariableDeclarationStatement[11082-11104]"
    }, {
      "left" : "StringBuffer unicode = new StringBuffer(4);",
      "right" : "StringBuffer unicode = new StringBuffer(4);",
      "info" : "VariableDeclarationStatement[10971-11014]:VariableDeclarationStatement[11113-11156]"
    }, {
      "left" : "boolean hadSlash = false;",
      "right" : "boolean hadSlash = false;",
      "info" : "VariableDeclarationStatement[11023-11048]:VariableDeclarationStatement[11165-11190]"
    }, {
      "left" : "boolean inUnicode = false;",
      "right" : "boolean inUnicode = false;",
      "info" : "VariableDeclarationStatement[11057-11083]:VariableDeclarationStatement[11199-11225]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[11092-13499]:ForStatement[11234-13641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11121-13499]:Block[11263-13641]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[11135-11159]:VariableDeclarationStatement[11277-11301]"
    }, {
      "left" : "if (inUnicode)",
      "right" : "if (inUnicode)",
      "info" : "IfStatement[11172-12025]:IfStatement[11314-12167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11187-12025]:Block[11329-12167]"
    }, {
      "left" : "unicode.append(ch);",
      "right" : "unicode.append(ch);",
      "info" : "ExpressionStatement[11303-11322]:ExpressionStatement[11445-11464]"
    }, {
      "left" : "if (unicode.length() == 4)",
      "right" : "if (unicode.length() == 4)",
      "info" : "IfStatement[11339-11985]:IfStatement[11481-12127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11366-11985]:Block[11508-12127]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11514-11967]:TryStatement[11656-12109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11518-11799]:Block[11660-11941]"
    }, {
      "left" : "int value = Integer.parseInt(unicode.toString(), 16);",
      "right" : "int value = Integer.parseInt(unicode.toString(), 16);",
      "info" : "VariableDeclarationStatement[11544-11597]:VariableDeclarationStatement[11686-11739]"
    }, {
      "left" : "out.write((char) value);",
      "right" : "out.write((char) value);",
      "info" : "ExpressionStatement[11622-11646]:ExpressionStatement[11764-11788]"
    }, {
      "left" : "unicode.setLength(0);",
      "right" : "unicode.setLength(0);",
      "info" : "ExpressionStatement[11671-11692]:ExpressionStatement[11813-11834]"
    }, {
      "left" : "inUnicode = false;",
      "right" : "inUnicode = false;",
      "info" : "ExpressionStatement[11717-11735]:ExpressionStatement[11859-11877]"
    }, {
      "left" : "hadSlash = false;",
      "right" : "hadSlash = false;",
      "info" : "ExpressionStatement[11760-11777]:ExpressionStatement[11902-11919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11834-11967]:Block[11976-12109]"
    }, {
      "left" : "throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);",
      "right" : "throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);",
      "info" : "ThrowStatement[11860-11945]:ThrowStatement[12002-12087]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12002-12011]:ContinueStatement[12144-12153]"
    }, {
      "left" : "if (hadSlash)",
      "right" : "if (hadSlash)",
      "info" : "IfStatement[12038-13462]:IfStatement[12180-13604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12052-13366]:Block[12194-13508]"
    }, {
      "left" : "hadSlash = false;",
      "right" : "hadSlash = false;",
      "info" : "ExpressionStatement[12113-12130]:ExpressionStatement[12255-12272]"
    }, {
      "left" : "switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "info" : "SwitchStatement[12147-13326]:SwitchStatement[12289-13468]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[12181-12191]:SwitchCase[12323-12333]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[12216-12232]:ExpressionStatement[12358-12374]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12257-12263]:BreakStatement[12399-12405]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[12284-12294]:SwitchCase[12426-12436]"
    }, {
      "left" : "out.write('\\'');",
      "right" : "out.write('\\'');",
      "info" : "ExpressionStatement[12319-12335]:ExpressionStatement[12461-12477]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12360-12366]:BreakStatement[12502-12508]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[12387-12397]:SwitchCase[12529-12539]"
    }, {
      "left" : "out.write('\"');",
      "right" : "out.write('\"');",
      "info" : "ExpressionStatement[12422-12437]:ExpressionStatement[12564-12579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12462-12468]:BreakStatement[12604-12610]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[12489-12498]:SwitchCase[12631-12640]"
    }, {
      "left" : "out.write('\\r');",
      "right" : "out.write('\\r');",
      "info" : "ExpressionStatement[12523-12539]:ExpressionStatement[12665-12681]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12564-12570]:BreakStatement[12706-12712]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[12591-12600]:SwitchCase[12733-12742]"
    }, {
      "left" : "out.write('\\f');",
      "right" : "out.write('\\f');",
      "info" : "ExpressionStatement[12625-12641]:ExpressionStatement[12767-12783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12666-12672]:BreakStatement[12808-12814]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[12693-12702]:SwitchCase[12835-12844]"
    }, {
      "left" : "out.write('\\t');",
      "right" : "out.write('\\t');",
      "info" : "ExpressionStatement[12727-12743]:ExpressionStatement[12869-12885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12768-12774]:BreakStatement[12910-12916]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[12795-12804]:SwitchCase[12937-12946]"
    }, {
      "left" : "out.write('\\n');",
      "right" : "out.write('\\n');",
      "info" : "ExpressionStatement[12829-12845]:ExpressionStatement[12971-12987]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12870-12876]:BreakStatement[13012-13018]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[12897-12906]:SwitchCase[13039-13048]"
    }, {
      "left" : "out.write('\\b');",
      "right" : "out.write('\\b');",
      "info" : "ExpressionStatement[12931-12947]:ExpressionStatement[13073-13089]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12972-12978]:BreakStatement[13114-13120]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[12999-13008]:SwitchCase[13141-13150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13033-13208]:Block[13175-13350]"
    }, {
      "left" : "inUnicode = true;",
      "right" : "inUnicode = true;",
      "info" : "ExpressionStatement[13130-13147]:ExpressionStatement[13272-13289]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13176-13182]:BreakStatement[13318-13324]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[13229-13238]:SwitchCase[13371-13380]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[13263-13277]:ExpressionStatement[13405-13419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13302-13308]:BreakStatement[13444-13450]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13343-13352]:ContinueStatement[13485-13494]"
    }, {
      "left" : "if (ch == '\\\\')",
      "right" : "if (ch == '\\\\')",
      "info" : "IfStatement[13372-13462]:IfStatement[13514-13604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13388-13462]:Block[13530-13604]"
    }, {
      "left" : "hadSlash = true;",
      "right" : "hadSlash = true;",
      "info" : "ExpressionStatement[13406-13422]:ExpressionStatement[13548-13564]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13439-13448]:ContinueStatement[13581-13590]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[13475-13489]:ExpressionStatement[13617-13631]"
    }, {
      "left" : "if (hadSlash)",
      "right" : "if (hadSlash)",
      "info" : "IfStatement[13508-13678]:IfStatement[13650-13820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13522-13678]:Block[13664-13820]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[13652-13668]:ExpressionStatement[13794-13810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14248-14289]:Block[14390-14431]"
    }, {
      "left" : "return unescapeJava(str);",
      "right" : "return unescapeJava(str);",
      "info" : "ReturnStatement[14258-14283]:ReturnStatement[14400-14425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15118-15157]:Block[15260-15299]"
    }, {
      "left" : "unescapeJava(out, str);",
      "right" : "unescapeJava(out, str);",
      "info" : "ExpressionStatement[15128-15151]:ExpressionStatement[15270-15293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16587-16990]:Block[16729-17132]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[16597-16650]:IfStatement[16739-16792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16614-16650]:Block[16756-16792]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16628-16640]:ReturnStatement[16770-16782]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16659-16984]:TryStatement[16801-17126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16663-16829]:Block[16805-16971]"
    }, {
      "left" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "right" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "info" : "VariableDeclarationStatement[16677-16744]:VariableDeclarationStatement[16819-16886]"
    }, {
      "left" : "escapeHtml(writer, str);",
      "right" : "escapeHtml(writer, str);",
      "info" : "ExpressionStatement[16757-16781]:ExpressionStatement[16899-16923]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[16794-16819]:ReturnStatement[16936-16961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16852-16984]:Block[16994-17126]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[16929-16949]:ExpressionStatement[17071-17091]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16962-16974]:ReturnStatement[17104-17116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18637-18874]:Block[18779-19016]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[18647-18760]:IfStatement[18789-18902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18668-18760]:Block[18810-18902]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[18682-18750]:ThrowStatement[18824-18892]"
    }, {
      "left" : "if (string == null)",
      "right" : "if (string == null)",
      "info" : "IfStatement[18769-18820]:IfStatement[18911-18962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18789-18820]:Block[18931-18962]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18803-18810]:ReturnStatement[18945-18952]"
    }, {
      "left" : "Entities.HTML40.escape(writer, string);",
      "right" : "Entities.HTML40.escape(writer, string);",
      "info" : "ExpressionStatement[18829-18868]:ExpressionStatement[18971-19010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19725-20130]:Block[19867-20272]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[19735-19788]:IfStatement[19877-19930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19752-19788]:Block[19894-19930]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19766-19778]:ReturnStatement[19908-19920]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19797-20124]:TryStatement[19939-20266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19801-19969]:Block[19943-20111]"
    }, {
      "left" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "right" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "info" : "VariableDeclarationStatement[19815-19882]:VariableDeclarationStatement[19957-20024]"
    }, {
      "left" : "unescapeHtml(writer, str);",
      "right" : "unescapeHtml(writer, str);",
      "info" : "ExpressionStatement[19895-19921]:ExpressionStatement[20037-20063]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[19934-19959]:ReturnStatement[20076-20101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19992-20124]:Block[20134-20266]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[20069-20089]:ExpressionStatement[20211-20231]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20102-20114]:ReturnStatement[20244-20256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21030-21269]:Block[21172-21411]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[21040-21153]:IfStatement[21182-21295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21061-21153]:Block[21203-21295]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[21075-21143]:ThrowStatement[21217-21285]"
    }, {
      "left" : "if (string == null)",
      "right" : "if (string == null)",
      "info" : "IfStatement[21162-21213]:IfStatement[21304-21355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21182-21213]:Block[21324-21355]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21196-21203]:ReturnStatement[21338-21345]"
    }, {
      "left" : "Entities.HTML40.unescape(writer, string);",
      "right" : "Entities.HTML40.unescape(writer, string);",
      "info" : "ExpressionStatement[21222-21263]:ExpressionStatement[21364-21405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22302-22530]:Block[22444-22672]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[22312-22425]:IfStatement[22454-22567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22333-22425]:Block[22475-22567]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[22347-22415]:ThrowStatement[22489-22557]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22434-22482]:IfStatement[22576-22624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22451-22482]:Block[22593-22624]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22465-22472]:ReturnStatement[22607-22614]"
    }, {
      "left" : "Entities.XML.escape(writer, str);",
      "right" : "Entities.XML.escape(writer, str);",
      "info" : "ExpressionStatement[22491-22524]:ExpressionStatement[22633-22666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23349-23459]:Block[23491-23601]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23359-23412]:IfStatement[23501-23554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23376-23412]:Block[23518-23554]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23390-23402]:ReturnStatement[23532-23544]"
    }, {
      "left" : "return Entities.XML.escape(str);",
      "right" : "return Entities.XML.escape(str);",
      "info" : "ReturnStatement[23421-23453]:ReturnStatement[23563-23595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24397-24627]:Block[24539-24769]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[24407-24520]:IfStatement[24549-24662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24428-24520]:Block[24570-24662]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[24442-24510]:ThrowStatement[24584-24652]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24529-24577]:IfStatement[24671-24719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24546-24577]:Block[24688-24719]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24560-24567]:ReturnStatement[24702-24709]"
    }, {
      "left" : "Entities.XML.unescape(writer, str);",
      "right" : "Entities.XML.unescape(writer, str);",
      "info" : "ExpressionStatement[24586-24621]:ExpressionStatement[24728-24763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25353-25465]:Block[25495-25607]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25363-25416]:IfStatement[25505-25558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25380-25416]:Block[25522-25558]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25394-25406]:ReturnStatement[25536-25548]"
    }, {
      "left" : "return Entities.XML.unescape(str);",
      "right" : "return Entities.XML.unescape(str);",
      "info" : "ReturnStatement[25425-25459]:ReturnStatement[25567-25601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26374-26495]:Block[26516-26637]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[26384-26437]:IfStatement[26526-26579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26401-26437]:Block[26543-26579]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26415-26427]:ReturnStatement[26557-26569]"
    }, {
      "left" : "return StringUtils.replace(str, \"'\", \"''\");",
      "right" : "return StringUtils.replace(str, \"'\", \"''\");",
      "info" : "ReturnStatement[26446-26489]:ReturnStatement[26588-26631]"
    } ]
  },
  "interFileMappings" : { }
}