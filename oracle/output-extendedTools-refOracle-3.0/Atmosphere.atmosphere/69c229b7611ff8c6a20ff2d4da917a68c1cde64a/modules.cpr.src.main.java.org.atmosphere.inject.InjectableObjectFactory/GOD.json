{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InjectableObjectFactory",
      "right" : "InjectableObjectFactory",
      "info" : "TypeDeclaration[1255-10028]:TypeDeclaration[1365-9624]"
    }, {
      "left" : "protected static final Logger logger = LoggerFactory.getLogger(AtmosphereFramework.class);",
      "right" : "protected static final Logger logger = LoggerFactory.getLogger(AtmosphereFramework.class);",
      "info" : "FieldDeclaration[1861-1951]:FieldDeclaration[1971-2061]"
    }, {
      "left" : "private final static ServiceLoader<Injectable> injectableServiceLoader = ServiceLoader.load(Injectable.class);",
      "right" : "private final static ServiceLoader<Injectable> injectableServiceLoader = ServiceLoader.load(Injectable.class);",
      "info" : "FieldDeclaration[1956-2066]:FieldDeclaration[2066-2176]"
    }, {
      "left" : "private final LinkedList<Injectable<?>> injectables = new LinkedList<Injectable<?>>();",
      "right" : "private final LinkedList<Injectable<?>> injectables = new LinkedList<Injectable<?>>();",
      "info" : "FieldDeclaration[2071-2157]:FieldDeclaration[2181-2267]"
    }, {
      "left" : "private final LinkedList<InjectIntrospector<?>> introspectors = new LinkedList<InjectIntrospector<?>>();",
      "right" : "private final LinkedList<InjectIntrospector<?>> introspectors = new LinkedList<InjectIntrospector<?>>();",
      "info" : "FieldDeclaration[2162-2266]:FieldDeclaration[2272-2376]"
    }, {
      "left" : "private final LinkedList<InjectIntrospector<?>> requestScopedIntrospectors = new LinkedList<InjectIntrospector<?>>();",
      "right" : "private final LinkedList<InjectIntrospector<?>> requestScopedIntrospectors = new LinkedList<InjectIntrospector<?>>();",
      "info" : "FieldDeclaration[2271-2388]:FieldDeclaration[2381-2498]"
    }, {
      "left" : "private AtmosphereConfig config;",
      "right" : "private AtmosphereConfig config;",
      "info" : "FieldDeclaration[2394-2426]:FieldDeclaration[2504-2536]"
    }, {
      "left" : "public void configure(AtmosphereConfig config)",
      "right" : "public void configure(AtmosphereConfig config)",
      "info" : "MethodDeclaration[2432-3901]:MethodDeclaration[2542-4011]"
    }, {
      "left" : "public <T, U extends T> U newClassInstance(Class<T> classType,\n                                               Class<U> defaultType) throws InstantiationException, IllegalAccessException",
      "right" : "public <T, U extends T> U newClassInstance(Class<T> classType,\n                                               Class<U> defaultType) throws InstantiationException, IllegalAccessException",
      "info" : "MethodDeclaration[3907-4304]:MethodDeclaration[4017-4414]"
    }, {
      "left" : "public <T> T inject(T instance) throws InstantiationException, IllegalAccessException",
      "right" : "public <T> T inject(T instance) throws InstantiationException, IllegalAccessException",
      "info" : "MethodDeclaration[4310-4850]:MethodDeclaration[4420-4960]"
    }, {
      "left" : "public <U> void applyMethods(U instance, Class<U> defaultType) throws IllegalAccessException",
      "right" : "public <U> void applyMethods(U instance, Class<U> defaultType) throws IllegalAccessException",
      "info" : "MethodDeclaration[4856-5434]:MethodDeclaration[4966-5470]"
    }, {
      "left" : "private <U> void injectMethods(Set<Method> methods, U instance) throws IllegalAccessException",
      "right" : "private <U> void injectMethods(Set<Method> methods, U instance) throws IllegalAccessException",
      "info" : "MethodDeclaration[5440-5729]:MethodDeclaration[5476-5765]"
    }, {
      "left" : "public <U> void injectInjectable(U instance, Class<? extends U> defaultType, AtmosphereFramework framework) throws IllegalAccessException",
      "right" : "public <U> void injectInjectable(U instance, Class<? extends U> defaultType, AtmosphereFramework framework) throws IllegalAccessException",
      "info" : "MethodDeclaration[5735-6314]:MethodDeclaration[5771-6350]"
    }, {
      "left" : "public <U> void injectFields(Set<Field> fields, U instance, AtmosphereFramework framework, LinkedList<Injectable<?>> injectable) throws IllegalAccessException",
      "right" : "public <U> void injectFields(Set<Field> fields, U instance, AtmosphereFramework framework, LinkedList<Injectable<?>> injectable) throws IllegalAccessException",
      "info" : "MethodDeclaration[6760-8195]:MethodDeclaration[6356-7791]"
    }, {
      "left" : "public AtmosphereObjectFactory allowInjectionOf(Injectable<?> injectable)",
      "right" : "public AtmosphereObjectFactory allowInjectionOf(Injectable<?> injectable)",
      "info" : "MethodDeclaration[8201-8340]:MethodDeclaration[7797-7936]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[8346-8448]:MethodDeclaration[7942-8044]"
    }, {
      "left" : "public <U> U getInjectable(Class<U> u)",
      "right" : "public <U> U getInjectable(Class<U> u)",
      "info" : "MethodDeclaration[8454-8984]:MethodDeclaration[8050-8580]"
    }, {
      "left" : "public void requestScoped(Object instance, Class defaultType, AtmosphereResource r) throws IllegalAccessException",
      "right" : "public void requestScoped(Object instance, Class defaultType, AtmosphereResource r) throws IllegalAccessException",
      "info" : "MethodDeclaration[8990-10026]:MethodDeclaration[8586-9622]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1767-1773]:Modifier[1877-1883]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1774-1779]:TYPE_DECLARATION_KIND[1884-1889]"
    }, {
      "left" : "InjectableObjectFactory",
      "right" : "InjectableObjectFactory",
      "info" : "SimpleName[1780-1803]:SimpleName[1890-1913]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2432-2441]:MarkerAnnotation[2542-2551]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2446-2452]:Modifier[2556-2562]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2453-2457]:PrimitiveType[2563-2567]"
    }, {
      "left" : "configure",
      "right" : "configure",
      "info" : "SimpleName[2458-2467]:SimpleName[2568-2577]"
    }, {
      "left" : "AtmosphereConfig config",
      "right" : "AtmosphereConfig config",
      "info" : "SingleVariableDeclaration[2468-2491]:SingleVariableDeclaration[2578-2601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2493-3901]:Block[2603-4011]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[2503-2524]:ExpressionStatement[2613-2634]"
    }, {
      "left" : "for (Injectable<?> i : injectableServiceLoader)",
      "right" : "for (Injectable<?> i : injectableServiceLoader)",
      "info" : "EnhancedForStatement[2533-3615]:EnhancedForStatement[2643-3725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2581-3615]:Block[2691-3725]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2595-3605]:TryStatement[2705-3715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2599-3532]:Block[2709-3642]"
    }, {
      "left" : "logger.debug(\"Adding class {} as injectable\", i.getClass());",
      "right" : "logger.debug(\"Adding class {} as injectable\", i.getClass());",
      "info" : "ExpressionStatement[2617-2677]:ExpressionStatement[2727-2787]"
    }, {
      "left" : "if (InjectIntrospector.class.isAssignableFrom(i.getClass()))",
      "right" : "if (InjectIntrospector.class.isAssignableFrom(i.getClass()))",
      "info" : "IfStatement[2694-3167]:IfStatement[2804-3277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2755-3167]:Block[2865-3277]"
    }, {
      "left" : "InjectIntrospector<?> ii = InjectIntrospector.class.cast(i);",
      "right" : "InjectIntrospector<?> ii = InjectIntrospector.class.cast(i);",
      "info" : "VariableDeclarationStatement[2777-2837]:VariableDeclarationStatement[2887-2947]"
    }, {
      "left" : "introspectors.addFirst(ii);",
      "right" : "introspectors.addFirst(ii);",
      "info" : "ExpressionStatement[2859-2886]:ExpressionStatement[2969-2996]"
    }, {
      "left" : "if (i.getClass().isAnnotationPresent(RequestScoped.class))",
      "right" : "if (i.getClass().isAnnotationPresent(RequestScoped.class))",
      "info" : "IfStatement[2907-3149]:IfStatement[3017-3259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2966-3149]:Block[3076-3259]"
    }, {
      "left" : "config.properties().put(FrameworkConfig.NEED_RUNTIME_INJECTION, true);",
      "right" : "config.properties().put(FrameworkConfig.NEED_RUNTIME_INJECTION, true);",
      "info" : "ExpressionStatement[2992-3062]:ExpressionStatement[3102-3172]"
    }, {
      "left" : "requestScopedIntrospectors.addFirst(ii);",
      "right" : "requestScopedIntrospectors.addFirst(ii);",
      "info" : "ExpressionStatement[3087-3127]:ExpressionStatement[3197-3237]"
    }, {
      "left" : "if (i.getClass().isAnnotationPresent(ApplicationScoped.class) ||\n                        // For backward compatibility with 2.2+\n                        (!i.getClass().isAnnotationPresent(RequestScoped.class) && !i.getClass().isAnnotationPresent(RequestScoped.class)))",
      "right" : "if (i.getClass().isAnnotationPresent(ApplicationScoped.class) ||\n                        // For backward compatibility with 2.2+\n                        (!i.getClass().isAnnotationPresent(RequestScoped.class) && !i.getClass().isAnnotationPresent(RequestScoped.class)))",
      "info" : "IfStatement[3185-3518]:IfStatement[3295-3628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3454-3518]:Block[3564-3628]"
    }, {
      "left" : "injectables.addFirst(i);",
      "right" : "injectables.addFirst(i);",
      "info" : "ExpressionStatement[3476-3500]:ExpressionStatement[3586-3610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3553-3605]:Block[3663-3715]"
    }, {
      "left" : "logger.error(\"\", e);",
      "right" : "logger.error(\"\", e);",
      "info" : "ExpressionStatement[3571-3591]:ExpressionStatement[3681-3701]"
    }, {
      "left" : "for (Injectable<?> i : injectables)",
      "right" : "for (Injectable<?> i : injectables)",
      "info" : "EnhancedForStatement[3659-3895]:EnhancedForStatement[3769-4005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3695-3895]:Block[3805-4005]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3709-3885]:TryStatement[3819-3995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3713-3799]:Block[3823-3909]"
    }, {
      "left" : "injectInjectable(i, i.getClass(), config.framework());",
      "right" : "injectInjectable(i, i.getClass(), config.framework());",
      "info" : "ExpressionStatement[3731-3785]:ExpressionStatement[3841-3895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3833-3885]:Block[3943-3995]"
    }, {
      "left" : "logger.error(\"\", e);",
      "right" : "logger.error(\"\", e);",
      "info" : "ExpressionStatement[3851-3871]:ExpressionStatement[3961-3981]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3907-3916]:MarkerAnnotation[4017-4026]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3921-3927]:Modifier[4031-4037]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[3929-3930]:TypeParameter[4039-4040]"
    }, {
      "left" : "U extends T",
      "right" : "U extends T",
      "info" : "TypeParameter[3932-3943]:TypeParameter[4042-4053]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "SimpleType[3945-3946]:SimpleType[4055-4056]"
    }, {
      "left" : "newClassInstance",
      "right" : "newClassInstance",
      "info" : "SimpleName[3947-3963]:SimpleName[4057-4073]"
    }, {
      "left" : "Class<T> classType",
      "right" : "Class<T> classType",
      "info" : "SingleVariableDeclaration[3964-3982]:SingleVariableDeclaration[4074-4092]"
    }, {
      "left" : "Class<U> defaultType",
      "right" : "Class<U> defaultType",
      "info" : "SingleVariableDeclaration[4031-4051]:SingleVariableDeclaration[4141-4161]"
    }, {
      "left" : "InstantiationException",
      "right" : "InstantiationException",
      "info" : "SimpleType[4060-4082]:SimpleType[4170-4192]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[4084-4106]:SimpleType[4194-4216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4107-4304]:Block[4217-4414]"
    }, {
      "left" : "U instance = defaultType.newInstance();",
      "right" : "U instance = defaultType.newInstance();",
      "info" : "VariableDeclarationStatement[4118-4157]:VariableDeclarationStatement[4228-4267]"
    }, {
      "left" : "injectInjectable(instance, defaultType, config.framework());",
      "right" : "injectInjectable(instance, defaultType, config.framework());",
      "info" : "ExpressionStatement[4167-4227]:ExpressionStatement[4277-4337]"
    }, {
      "left" : "applyMethods(instance, defaultType);",
      "right" : "applyMethods(instance, defaultType);",
      "info" : "ExpressionStatement[4236-4272]:ExpressionStatement[4346-4382]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[4282-4298]:ReturnStatement[4392-4408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4589-4595]:Modifier[4699-4705]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[4597-4598]:TypeParameter[4707-4708]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[4600-4601]:SimpleType[4710-4711]"
    }, {
      "left" : "inject",
      "right" : "inject",
      "info" : "SimpleName[4602-4608]:SimpleName[4712-4718]"
    }, {
      "left" : "T instance",
      "right" : "T instance",
      "info" : "SingleVariableDeclaration[4609-4619]:SingleVariableDeclaration[4719-4729]"
    }, {
      "left" : "InstantiationException",
      "right" : "InstantiationException",
      "info" : "SimpleType[4628-4650]:SimpleType[4738-4760]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[4652-4674]:SimpleType[4762-4784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4675-4850]:Block[4785-4960]"
    }, {
      "left" : "injectInjectable(instance, instance.getClass(), config.framework());",
      "right" : "injectInjectable(instance, instance.getClass(), config.framework());",
      "info" : "ExpressionStatement[4686-4754]:ExpressionStatement[4796-4864]"
    }, {
      "left" : "applyMethods(instance, (Class<T>) instance.getClass());",
      "right" : "applyMethods(instance, (Class<T>) instance.getClass());",
      "info" : "ExpressionStatement[4763-4818]:ExpressionStatement[4873-4928]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[4828-4844]:ReturnStatement[4938-4954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5101-5107]:Modifier[5211-5217]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[5109-5110]:TypeParameter[5219-5220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5112-5116]:PrimitiveType[5222-5226]"
    }, {
      "left" : "applyMethods",
      "right" : "applyMethods",
      "info" : "SimpleName[5117-5129]:SimpleName[5227-5239]"
    }, {
      "left" : "U instance",
      "right" : "U instance",
      "info" : "SingleVariableDeclaration[5130-5140]:SingleVariableDeclaration[5240-5250]"
    }, {
      "left" : "Class<U> defaultType",
      "right" : "Class<U> defaultType",
      "info" : "SingleVariableDeclaration[5142-5162]:SingleVariableDeclaration[5252-5272]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[5171-5193]:SimpleType[5281-5303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5194-5434]:Block[5304-5470]"
    }, {
      "left" : "Set<Method> methods = new HashSet<Method>();",
      "right" : "Set<Method> methods = new HashSet<Method>();",
      "info" : "VariableDeclarationStatement[5204-5248]:VariableDeclarationStatement[5314-5358]"
    }, {
      "left" : "methods.addAll(Arrays.asList(defaultType.getDeclaredMethods()));",
      "right" : "methods.addAll(getInheritedPrivateMethod(defaultType));",
      "info" : "ExpressionStatement[5257-5321]:ExpressionStatement[5367-5422]"
    }, {
      "left" : "defaultType",
      "right" : "defaultType",
      "info" : "SimpleName[5286-5297]:SimpleName[5408-5419]"
    }, {
      "left" : "injectMethods(methods, instance);",
      "right" : "injectMethods(methods, instance);",
      "info" : "ExpressionStatement[5395-5428]:ExpressionStatement[5431-5464]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5440-5447]:Modifier[5476-5483]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[5449-5450]:TypeParameter[5485-5486]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5452-5456]:PrimitiveType[5488-5492]"
    }, {
      "left" : "injectMethods",
      "right" : "injectMethods",
      "info" : "SimpleName[5457-5470]:SimpleName[5493-5506]"
    }, {
      "left" : "Set<Method> methods",
      "right" : "Set<Method> methods",
      "info" : "SingleVariableDeclaration[5471-5490]:SingleVariableDeclaration[5507-5526]"
    }, {
      "left" : "U instance",
      "right" : "U instance",
      "info" : "SingleVariableDeclaration[5492-5502]:SingleVariableDeclaration[5528-5538]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[5511-5533]:SimpleType[5547-5569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5534-5729]:Block[5570-5765]"
    }, {
      "left" : "for (Method m : methods)",
      "right" : "for (Method m : methods)",
      "info" : "EnhancedForStatement[5544-5723]:EnhancedForStatement[5580-5759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5723]:Block[5605-5759]"
    }, {
      "left" : "for (Injectable c : introspectors)",
      "right" : "for (Injectable c : introspectors)",
      "info" : "EnhancedForStatement[5583-5713]:EnhancedForStatement[5619-5749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5618-5713]:Block[5654-5749]"
    }, {
      "left" : "InjectIntrospector.class.cast(c).introspectMethod(m, instance);",
      "right" : "InjectIntrospector.class.cast(c).introspectMethod(m, instance);",
      "info" : "ExpressionStatement[5636-5699]:ExpressionStatement[5672-5735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5991-5997]:Modifier[6027-6033]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[5999-6000]:TypeParameter[6035-6036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6002-6006]:PrimitiveType[6038-6042]"
    }, {
      "left" : "injectInjectable",
      "right" : "injectInjectable",
      "info" : "SimpleName[6007-6023]:SimpleName[6043-6059]"
    }, {
      "left" : "U instance",
      "right" : "U instance",
      "info" : "SingleVariableDeclaration[6024-6034]:SingleVariableDeclaration[6060-6070]"
    }, {
      "left" : "Class<? extends U> defaultType",
      "right" : "Class<? extends U> defaultType",
      "info" : "SingleVariableDeclaration[6036-6066]:SingleVariableDeclaration[6072-6102]"
    }, {
      "left" : "AtmosphereFramework framework",
      "right" : "AtmosphereFramework framework",
      "info" : "SingleVariableDeclaration[6068-6097]:SingleVariableDeclaration[6104-6133]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[6106-6128]:SimpleType[6142-6164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6129-6314]:Block[6165-6350]"
    }, {
      "left" : "Set<Field> fields = new HashSet<Field>();",
      "right" : "Set<Field> fields = new HashSet<Field>();",
      "info" : "VariableDeclarationStatement[6139-6180]:VariableDeclarationStatement[6175-6216]"
    }, {
      "left" : "fields.addAll(getInheritedPrivateFields(defaultType));",
      "right" : "fields.addAll(getInheritedPrivateFields(defaultType));",
      "info" : "ExpressionStatement[6189-6243]:ExpressionStatement[6225-6279]"
    }, {
      "left" : "injectFields(fields, instance, framework, injectables);",
      "right" : "injectFields(fields, instance, framework, injectables);",
      "info" : "ExpressionStatement[6253-6308]:ExpressionStatement[6289-6344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6760-6766]:Modifier[6356-6362]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[6768-6769]:TypeParameter[6364-6365]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6771-6775]:PrimitiveType[6367-6371]"
    }, {
      "left" : "injectFields",
      "right" : "injectFields",
      "info" : "SimpleName[6776-6788]:SimpleName[6372-6384]"
    }, {
      "left" : "Set<Field> fields",
      "right" : "Set<Field> fields",
      "info" : "SingleVariableDeclaration[6789-6806]:SingleVariableDeclaration[6385-6402]"
    }, {
      "left" : "U instance",
      "right" : "U instance",
      "info" : "SingleVariableDeclaration[6808-6818]:SingleVariableDeclaration[6404-6414]"
    }, {
      "left" : "AtmosphereFramework framework",
      "right" : "AtmosphereFramework framework",
      "info" : "SingleVariableDeclaration[6820-6849]:SingleVariableDeclaration[6416-6445]"
    }, {
      "left" : "LinkedList<Injectable<?>> injectable",
      "right" : "LinkedList<Injectable<?>> injectable",
      "info" : "SingleVariableDeclaration[6851-6887]:SingleVariableDeclaration[6447-6483]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[6896-6918]:SimpleType[6492-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6919-8195]:Block[6515-7791]"
    }, {
      "left" : "for (Field field : fields)",
      "right" : "for (Field field : fields)",
      "info" : "EnhancedForStatement[6929-8189]:EnhancedForStatement[6525-7785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6956-8189]:Block[6552-7785]"
    }, {
      "left" : "if (field.isAnnotationPresent(Inject.class))",
      "right" : "if (field.isAnnotationPresent(Inject.class))",
      "info" : "IfStatement[6970-8179]:IfStatement[6566-7775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7015-8179]:Block[6611-7775]"
    }, {
      "left" : "for (Injectable c : injectable)",
      "right" : "for (Injectable c : injectable)",
      "info" : "EnhancedForStatement[7033-8165]:EnhancedForStatement[6629-7761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7065-8165]:Block[6661-7761]"
    }, {
      "left" : "if (c.supportedType(field.getType()))",
      "right" : "if (c.supportedType(field.getType()))",
      "info" : "IfStatement[7087-8147]:IfStatement[6683-7743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7125-8147]:Block[6721-7743]"
    }, {
      "left" : "if (InjectIntrospector.class.isAssignableFrom(c.getClass()))",
      "right" : "if (InjectIntrospector.class.isAssignableFrom(c.getClass()))",
      "info" : "IfStatement[7152-7325]:IfStatement[6748-6921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7213-7325]:Block[6809-6921]"
    }, {
      "left" : "InjectIntrospector.class.cast(c).introspectField(field);",
      "right" : "InjectIntrospector.class.cast(c).introspectField(field);",
      "info" : "ExpressionStatement[7243-7299]:ExpressionStatement[6839-6895]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7351-8094]:TryStatement[6947-7690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7355-7871]:Block[6951-7467]"
    }, {
      "left" : "field.setAccessible(true);",
      "right" : "field.setAccessible(true);",
      "info" : "ExpressionStatement[7385-7411]:ExpressionStatement[6981-7007]"
    }, {
      "left" : "Object o = c.injectable(framework.getAtmosphereConfig());",
      "right" : "Object o = c.injectable(framework.getAtmosphereConfig());",
      "info" : "VariableDeclarationStatement[7440-7497]:VariableDeclarationStatement[7036-7093]"
    }, {
      "left" : "if (o == null)",
      "right" : "if (o == null)",
      "info" : "IfStatement[7527-7551]:IfStatement[7123-7147]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7542-7551]:ContinueStatement[7138-7147]"
    }, {
      "left" : "if (field.getType().equals(Boolean.TYPE))",
      "right" : "if (field.getType().equals(Boolean.TYPE))",
      "info" : "IfStatement[7581-7845]:IfStatement[7177-7441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7623-7752]:Block[7219-7348]"
    }, {
      "left" : "field.setBoolean(instance, Boolean.class.cast(o).booleanValue());",
      "right" : "field.setBoolean(instance, Boolean.class.cast(o).booleanValue());",
      "info" : "ExpressionStatement[7657-7722]:ExpressionStatement[7253-7318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7758-7845]:Block[7354-7441]"
    }, {
      "left" : "field.set(instance, o);",
      "right" : "field.set(instance, o);",
      "info" : "ExpressionStatement[7792-7815]:ExpressionStatement[7388-7411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7893-8002]:Block[7489-7598]"
    }, {
      "left" : "logger.warn(\"Injectable {} failed to inject\", c, ex);",
      "right" : "logger.warn(\"Injectable {} failed to inject\", c, ex);",
      "info" : "ExpressionStatement[7923-7976]:ExpressionStatement[7519-7572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8011-8094]:Block[7607-7690]"
    }, {
      "left" : "field.setAccessible(false);",
      "right" : "field.setAccessible(false);",
      "info" : "ExpressionStatement[8041-8068]:ExpressionStatement[7637-7664]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8119-8125]:BreakStatement[7715-7721]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8201-8207]:Modifier[7797-7803]"
    }, {
      "left" : "AtmosphereObjectFactory",
      "right" : "AtmosphereObjectFactory",
      "info" : "SimpleType[8208-8231]:SimpleType[7804-7827]"
    }, {
      "left" : "allowInjectionOf",
      "right" : "allowInjectionOf",
      "info" : "SimpleName[8232-8248]:SimpleName[7828-7844]"
    }, {
      "left" : "Injectable<?> injectable",
      "right" : "Injectable<?> injectable",
      "info" : "SingleVariableDeclaration[8249-8273]:SingleVariableDeclaration[7845-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8275-8340]:Block[7871-7936]"
    }, {
      "left" : "injectables.add(injectable);",
      "right" : "injectables.add(injectable);",
      "info" : "ExpressionStatement[8285-8313]:ExpressionStatement[7881-7909]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8322-8334]:ReturnStatement[7918-7930]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8346-8355]:MarkerAnnotation[7942-7951]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8360-8366]:Modifier[7956-7962]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8367-8373]:SimpleType[7963-7969]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[8374-8382]:SimpleName[7970-7978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8385-8448]:Block[7981-8044]"
    }, {
      "left" : "return InjectableObjectFactory.class.getName();",
      "right" : "return InjectableObjectFactory.class.getName();",
      "info" : "ReturnStatement[8395-8442]:ReturnStatement[7991-8038]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8763-8769]:Modifier[8359-8365]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[8771-8772]:TypeParameter[8367-8368]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "SimpleType[8774-8775]:SimpleType[8370-8371]"
    }, {
      "left" : "getInjectable",
      "right" : "getInjectable",
      "info" : "SimpleName[8776-8789]:SimpleName[8372-8385]"
    }, {
      "left" : "Class<U> u",
      "right" : "Class<U> u",
      "info" : "SingleVariableDeclaration[8790-8800]:SingleVariableDeclaration[8386-8396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8802-8984]:Block[8398-8580]"
    }, {
      "left" : "for (Injectable c : injectables)",
      "right" : "for (Injectable c : injectables)",
      "info" : "EnhancedForStatement[8812-8957]:EnhancedForStatement[8408-8553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8845-8957]:Block[8441-8553]"
    }, {
      "left" : "if (c.supportedType(u))",
      "right" : "if (c.supportedType(u))",
      "info" : "IfStatement[8859-8947]:IfStatement[8455-8543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8883-8947]:Block[8479-8543]"
    }, {
      "left" : "return (U) c.injectable(config);",
      "right" : "return (U) c.injectable(config);",
      "info" : "ReturnStatement[8901-8933]:ReturnStatement[8497-8529]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8966-8978]:ReturnStatement[8562-8574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8990-8996]:Modifier[8586-8592]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8997-9001]:PrimitiveType[8593-8597]"
    }, {
      "left" : "requestScoped",
      "right" : "requestScoped",
      "info" : "SimpleName[9002-9015]:SimpleName[8598-8611]"
    }, {
      "left" : "Object instance",
      "right" : "Object instance",
      "info" : "SingleVariableDeclaration[9016-9031]:SingleVariableDeclaration[8612-8627]"
    }, {
      "left" : "Class defaultType",
      "right" : "Class defaultType",
      "info" : "SingleVariableDeclaration[9033-9050]:SingleVariableDeclaration[8629-8646]"
    }, {
      "left" : "AtmosphereResource r",
      "right" : "AtmosphereResource r",
      "info" : "SingleVariableDeclaration[9052-9072]:SingleVariableDeclaration[8648-8668]"
    }, {
      "left" : "IllegalAccessException",
      "right" : "IllegalAccessException",
      "info" : "SimpleType[9081-9103]:SimpleType[8677-8699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9104-10026]:Block[8700-9622]"
    }, {
      "left" : "Set<Field> fields = new HashSet<>();",
      "right" : "Set<Field> fields = new HashSet<>();",
      "info" : "VariableDeclarationStatement[9114-9150]:VariableDeclarationStatement[8710-8746]"
    }, {
      "left" : "fields.addAll(getInheritedPrivateFields(defaultType));",
      "right" : "fields.addAll(getInheritedPrivateFields(defaultType));",
      "info" : "ExpressionStatement[9159-9213]:ExpressionStatement[8755-8809]"
    }, {
      "left" : "for (Field field : fields)",
      "right" : "for (Field field : fields)",
      "info" : "EnhancedForStatement[9223-10020]:EnhancedForStatement[8819-9616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9250-10020]:Block[8846-9616]"
    }, {
      "left" : "for (InjectIntrospector c : requestScopedIntrospectors)",
      "right" : "for (InjectIntrospector c : requestScopedIntrospectors)",
      "info" : "EnhancedForStatement[9264-10010]:EnhancedForStatement[8860-9606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9320-10010]:Block[8916-9606]"
    }, {
      "left" : "for (Class annotation : c.getClass().getAnnotation(RequestScoped.class).value())",
      "right" : "for (Class annotation : c.getClass().getAnnotation(RequestScoped.class).value())",
      "info" : "EnhancedForStatement[9339-9996]:EnhancedForStatement[8935-9592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9420-9996]:Block[9016-9592]"
    }, {
      "left" : "if (field.isAnnotationPresent(annotation))",
      "right" : "if (field.isAnnotationPresent(annotation))",
      "info" : "IfStatement[9442-9978]:IfStatement[9038-9574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9485-9978]:Block[9081-9574]"
    }, {
      "left" : "c.introspectField(field);",
      "right" : "c.introspectField(field);",
      "info" : "ExpressionStatement[9512-9537]:ExpressionStatement[9108-9133]"
    }, {
      "left" : "if (c.supportedType(field.getType()))",
      "right" : "if (c.supportedType(field.getType()))",
      "info" : "IfStatement[9563-9956]:IfStatement[9159-9552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9601-9956]:Block[9197-9552]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9631-9895]:TryStatement[9227-9491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9635-9795]:Block[9231-9391]"
    }, {
      "left" : "field.setAccessible(true);",
      "right" : "field.setAccessible(true);",
      "info" : "ExpressionStatement[9669-9695]:ExpressionStatement[9265-9291]"
    }, {
      "left" : "field.set(instance, c.injectable(r));",
      "right" : "field.set(instance, c.injectable(r));",
      "info" : "ExpressionStatement[9728-9765]:ExpressionStatement[9324-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9804-9895]:Block[9400-9491]"
    }, {
      "left" : "field.setAccessible(false);",
      "right" : "field.setAccessible(false);",
      "info" : "ExpressionStatement[9838-9865]:ExpressionStatement[9434-9461]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9924-9930]:BreakStatement[9520-9526]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java" : {
      "matchedElements" : [
 {
        "left" : "private Set<Field> getInheritedPrivateFields(Class<?> type)",
        "right" : "public final static Set<Field> getInheritedPrivateFields(Class<?> type)",
        "info" : "MethodDeclaration[6320-6754]:MethodDeclaration[9634-10080]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6380-6754]:Block[9706-10080]"
      }, {
        "left" : "Set<Field> result = new HashSet<Field>();",
        "right" : "Set<Field> result = new HashSet<Field>();",
        "info" : "VariableDeclarationStatement[6390-6431]:VariableDeclarationStatement[9716-9757]"
      }, {
        "left" : "Class<?> i = type;",
        "right" : "Class<?> i = type;",
        "info" : "VariableDeclarationStatement[6441-6459]:VariableDeclarationStatement[9767-9785]"
      }, {
        "left" : "while (i != null && i != Object.class)",
        "right" : "while (i != null && i != Object.class)",
        "info" : "WhileStatement[6468-6724]:WhileStatement[9794-10050]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6507-6724]:Block[9833-10050]"
      }, {
        "left" : "for (Field field : i.getDeclaredFields())",
        "right" : "for (Field field : i.getDeclaredFields())",
        "info" : "EnhancedForStatement[6521-6679]:EnhancedForStatement[9847-10005]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6563-6679]:Block[9889-10005]"
      }, {
        "left" : "if (!field.isSynthetic())",
        "right" : "if (!field.isSynthetic())",
        "info" : "IfStatement[6581-6665]:IfStatement[9907-9991]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6607-6665]:Block[9933-9991]"
      }, {
        "left" : "result.add(field);",
        "right" : "result.add(field);",
        "info" : "ExpressionStatement[6629-6647]:ExpressionStatement[9955-9973]"
      }, {
        "left" : "i = i.getSuperclass();",
        "right" : "i = i.getSuperclass();",
        "info" : "ExpressionStatement[6692-6714]:ExpressionStatement[10018-10040]"
      }, {
        "left" : "return result;",
        "right" : "return result;",
        "info" : "ReturnStatement[6734-6748]:ReturnStatement[10060-10074]"
      } ]
    }
  }
}