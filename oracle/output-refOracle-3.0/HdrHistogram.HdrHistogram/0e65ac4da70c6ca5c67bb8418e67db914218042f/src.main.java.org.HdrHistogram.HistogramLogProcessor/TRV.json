{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String versionString = \"Histogram Log Processor version \" + Version.version;",
      "right" : "public static final String versionString = \"Histogram Log Processor version \" + Version.version;",
      "info" : "FieldDeclaration[1963-2059]:FieldDeclaration[1963-2059]"
    }, {
      "left" : "private final HistogramLogProcessorConfiguration config;",
      "right" : "private final HistogramLogProcessorConfiguration config;",
      "info" : "FieldDeclaration[2065-2121]:FieldDeclaration[2065-2121]"
    }, {
      "left" : "private HistogramLogReader logReader;",
      "right" : "private HistogramLogReader logReader;",
      "info" : "FieldDeclaration[2127-2164]:FieldDeclaration[2127-2164]"
    }, {
      "left" : "HistogramLogProcessorConfiguration",
      "right" : "HistogramLogProcessorConfiguration",
      "info" : "TypeDeclaration[2170-6360]:TypeDeclaration[2170-6360]"
    }, {
      "left" : "public boolean verbose = false;",
      "right" : "public boolean verbose = false;",
      "info" : "FieldDeclaration[2236-2267]:FieldDeclaration[2236-2267]"
    }, {
      "left" : "public String outputFileName = null;",
      "right" : "public String outputFileName = null;",
      "info" : "FieldDeclaration[2276-2312]:FieldDeclaration[2276-2312]"
    }, {
      "left" : "public String inputFileName = null;",
      "right" : "public String inputFileName = null;",
      "info" : "FieldDeclaration[2321-2356]:FieldDeclaration[2321-2356]"
    }, {
      "left" : "public double rangeStartTimeSec = 0.0;",
      "right" : "public double rangeStartTimeSec = 0.0;",
      "info" : "FieldDeclaration[2366-2404]:FieldDeclaration[2366-2404]"
    }, {
      "left" : "public double rangeEndTimeSec = Double.MAX_VALUE;",
      "right" : "public double rangeEndTimeSec = Double.MAX_VALUE;",
      "info" : "FieldDeclaration[2413-2462]:FieldDeclaration[2413-2462]"
    }, {
      "left" : "public boolean logFormatCsv = false;",
      "right" : "public boolean logFormatCsv = false;",
      "info" : "FieldDeclaration[2472-2508]:FieldDeclaration[2472-2508]"
    }, {
      "left" : "public int percentilesOutputTicksPerHalf = 5;",
      "right" : "public int percentilesOutputTicksPerHalf = 5;",
      "info" : "FieldDeclaration[2518-2563]:FieldDeclaration[2518-2563]"
    }, {
      "left" : "public Double outputValueUnitRatio = 1000000.0;",
      "right" : "public Double outputValueUnitRatio = 1000000.0;",
      "info" : "FieldDeclaration[2572-2619]:FieldDeclaration[2572-2619]"
    }, {
      "left" : "public boolean error = false;",
      "right" : "public boolean error = false;",
      "info" : "FieldDeclaration[2666-2695]:FieldDeclaration[2666-2695]"
    }, {
      "left" : "public String errorMessage = \"\";",
      "right" : "public String errorMessage = \"\";",
      "info" : "FieldDeclaration[2704-2736]:FieldDeclaration[2704-2736]"
    }, {
      "left" : "public HistogramLogProcessorConfiguration(final String[] args)",
      "right" : "public HistogramLogProcessorConfiguration(final String[] args)",
      "info" : "MethodDeclaration[2746-6354]:MethodDeclaration[2746-6354]"
    }, {
      "left" : "private void outputTimeRange(final PrintStream log, final String title)",
      "right" : "private void outputTimeRange(final PrintStream log, final String title)",
      "info" : "MethodDeclaration[6366-6779]:MethodDeclaration[6366-6779]"
    }, {
      "left" : "private void outputStartTime(final PrintStream log, final Double startTime)",
      "right" : "private void outputStartTime(final PrintStream log, final Double startTime)",
      "info" : "MethodDeclaration[6785-7026]:MethodDeclaration[6785-7026]"
    }, {
      "left" : "public HistogramLogProcessor(final String[] args) throws FileNotFoundException",
      "right" : "public HistogramLogProcessor(final String[] args) throws FileNotFoundException",
      "info" : "MethodDeclaration[16478-17974]:MethodDeclaration[16451-17947]"
    }, {
      "left" : "public static void main(final String[] args)",
      "right" : "public static void main(final String[] args)",
      "info" : "MethodDeclaration[17980-18386]:MethodDeclaration[17953-18359]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2170-2177]:Modifier[2170-2177]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2178-2184]:Modifier[2178-2184]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2185-2190]:TYPE_DECLARATION_KIND[2185-2190]"
    }, {
      "left" : "HistogramLogProcessorConfiguration",
      "right" : "HistogramLogProcessorConfiguration",
      "info" : "SimpleName[2191-2225]:SimpleName[2191-2225]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2746-2752]:Modifier[2746-2752]"
    }, {
      "left" : "HistogramLogProcessorConfiguration",
      "right" : "HistogramLogProcessorConfiguration",
      "info" : "SimpleName[2753-2787]:SimpleName[2753-2787]"
    }, {
      "left" : "final String[] args",
      "right" : "final String[] args",
      "info" : "SingleVariableDeclaration[2788-2807]:SingleVariableDeclaration[2788-2807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2809-6354]:Block[2809-6354]"
    }, {
      "left" : "boolean askedForHelp= false;",
      "right" : "boolean askedForHelp= false;",
      "info" : "VariableDeclarationStatement[2823-2851]:VariableDeclarationStatement[2823-2851]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2864-6344]:TryStatement[2864-6344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2868-4234]:Block[2868-4234]"
    }, {
      "left" : "for (int i = 0; i < args.length; ++i)",
      "right" : "for (int i = 0; i < args.length; ++i)",
      "info" : "ForStatement[2886-4219]:ForStatement[2886-4219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2924-4219]:Block[2924-4219]"
    }, {
      "left" : "if (args[i].equals(\"-csv\"))",
      "right" : "if (args[i].equals(\"-csv\"))",
      "info" : "IfStatement[2946-4201]:IfStatement[2946-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2974-3042]:Block[2974-3042]"
    }, {
      "left" : "logFormatCsv = true;",
      "right" : "logFormatCsv = true;",
      "info" : "ExpressionStatement[3000-3020]:ExpressionStatement[3000-3020]"
    }, {
      "left" : "if (args[i].equals(\"-v\"))",
      "right" : "if (args[i].equals(\"-v\"))",
      "info" : "IfStatement[3048-4201]:IfStatement[3048-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3074-3137]:Block[3074-3137]"
    }, {
      "left" : "verbose = true;",
      "right" : "verbose = true;",
      "info" : "ExpressionStatement[3100-3115]:ExpressionStatement[3100-3115]"
    }, {
      "left" : "if (args[i].equals(\"-i\"))",
      "right" : "if (args[i].equals(\"-i\"))",
      "info" : "IfStatement[3143-4201]:IfStatement[3143-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3169-3243]:Block[3169-3243]"
    }, {
      "left" : "inputFileName = args[++i];",
      "right" : "inputFileName = args[++i];",
      "info" : "ExpressionStatement[3195-3221]:ExpressionStatement[3195-3221]"
    }, {
      "left" : "if (args[i].equals(\"-start\"))",
      "right" : "if (args[i].equals(\"-start\"))",
      "info" : "IfStatement[3249-4201]:IfStatement[3249-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3279-3377]:Block[3279-3377]"
    }, {
      "left" : "rangeStartTimeSec = Double.parseDouble(args[++i]);",
      "right" : "rangeStartTimeSec = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3305-3355]:ExpressionStatement[3305-3355]"
    }, {
      "left" : "if (args[i].equals(\"-end\"))",
      "right" : "if (args[i].equals(\"-end\"))",
      "info" : "IfStatement[3383-4201]:IfStatement[3383-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3411-3507]:Block[3411-3507]"
    }, {
      "left" : "rangeEndTimeSec = Double.parseDouble(args[++i]);",
      "right" : "rangeEndTimeSec = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3437-3485]:ExpressionStatement[3437-3485]"
    }, {
      "left" : "if (args[i].equals(\"-o\"))",
      "right" : "if (args[i].equals(\"-o\"))",
      "info" : "IfStatement[3513-4201]:IfStatement[3513-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3539-3614]:Block[3539-3614]"
    }, {
      "left" : "outputFileName = args[++i];",
      "right" : "outputFileName = args[++i];",
      "info" : "ExpressionStatement[3565-3592]:ExpressionStatement[3565-3592]"
    }, {
      "left" : "if (args[i].equals(\"-percentilesOutputTicksPerHalf\"))",
      "right" : "if (args[i].equals(\"-percentilesOutputTicksPerHalf\"))",
      "info" : "IfStatement[3620-4201]:IfStatement[3620-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3674-3782]:Block[3674-3782]"
    }, {
      "left" : "percentilesOutputTicksPerHalf = Integer.parseInt(args[++i]);",
      "right" : "percentilesOutputTicksPerHalf = Integer.parseInt(args[++i]);",
      "info" : "ExpressionStatement[3700-3760]:ExpressionStatement[3700-3760]"
    }, {
      "left" : "if (args[i].equals(\"-outputValueUnitRatio\"))",
      "right" : "if (args[i].equals(\"-outputValueUnitRatio\"))",
      "info" : "IfStatement[3788-4201]:IfStatement[3788-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3833-3934]:Block[3833-3934]"
    }, {
      "left" : "outputValueUnitRatio = Double.parseDouble(args[++i]);",
      "right" : "outputValueUnitRatio = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3859-3912]:ExpressionStatement[3859-3912]"
    }, {
      "left" : "if (args[i].equals(\"-h\"))",
      "right" : "if (args[i].equals(\"-h\"))",
      "info" : "IfStatement[3940-4201]:IfStatement[3940-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3966-4099]:Block[3966-4099]"
    }, {
      "left" : "askedForHelp = true;",
      "right" : "askedForHelp = true;",
      "info" : "ExpressionStatement[3992-4012]:ExpressionStatement[3992-4012]"
    }, {
      "left" : "throw new Exception(\"Help: \" + args[i]);",
      "right" : "throw new Exception(\"Help: \" + args[i]);",
      "info" : "ThrowStatement[4037-4077]:ThrowStatement[4037-4077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4105-4201]:Block[4105-4201]"
    }, {
      "left" : "throw new Exception(\"Invalid args: \" + args[i]);",
      "right" : "throw new Exception(\"Invalid args: \" + args[i]);",
      "info" : "ThrowStatement[4131-4179]:ThrowStatement[4131-4179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-6344]:Block[4255-6344]"
    }, {
      "left" : "error = true;",
      "right" : "error = true;",
      "info" : "ExpressionStatement[4273-4286]:ExpressionStatement[4273-4286]"
    }, {
      "left" : "errorMessage = \"Error: \" + versionString + \" launched with the following args:\\n\";",
      "right" : "errorMessage = \"Error: \" + versionString + \" launched with the following args:\\n\";",
      "info" : "ExpressionStatement[4303-4385]:ExpressionStatement[4303-4385]"
    }, {
      "left" : "for (String arg : args)",
      "right" : "for (String arg : args)",
      "info" : "EnhancedForStatement[4403-4493]:EnhancedForStatement[4403-4493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4427-4493]:Block[4427-4493]"
    }, {
      "left" : "errorMessage += arg + \" \";",
      "right" : "errorMessage += arg + \" \";",
      "info" : "ExpressionStatement[4449-4475]:ExpressionStatement[4449-4475]"
    }, {
      "left" : "if (!askedForHelp)",
      "right" : "if (!askedForHelp)",
      "info" : "IfStatement[4510-4717]:IfStatement[4510-4717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4529-4717]:Block[4529-4717]"
    }, {
      "left" : "errorMessage += \"\\nWhich was parsed as an error, indicated by the following exception:\\n\" + e;",
      "right" : "errorMessage += \"\\nWhich was parsed as an error, indicated by the following exception:\\n\" + e;",
      "info" : "ExpressionStatement[4551-4645]:ExpressionStatement[4551-4645]"
    }, {
      "left" : "System.err.println(errorMessage);",
      "right" : "System.err.println(errorMessage);",
      "info" : "ExpressionStatement[4666-4699]:ExpressionStatement[4666-4699]"
    }, {
      "left" : "final String validArgs =\n                        \"\\\"[-csv] [-v] [-i inputFileName] [-o outputFileName] \" +\n                                \"[-start rangeStartTimeSec] [-end rangeEndTimeSec] \" +\n                                \"[-outputValueUnitRatio r]\";",
      "right" : "final String validArgs =\n                        \"\\\"[-csv] [-v] [-i inputFileName] [-o outputFileName] \" +\n                                \"[-start rangeStartTimeSec] [-end rangeEndTimeSec] \" +\n                                \"[-outputValueUnitRatio r]\";",
      "info" : "VariableDeclarationStatement[4735-4989]:VariableDeclarationStatement[4735-4989]"
    }, {
      "left" : "System.err.println(\"valid arguments = \" + validArgs);",
      "right" : "System.err.println(\"valid arguments = \" + validArgs);",
      "info" : "ExpressionStatement[5007-5060]:ExpressionStatement[5007-5060]"
    }, {
      "left" : "System.err.println(\n                        \" [-h]                        help\\n\" +\n                                \" [-v]                        Provide verbose error output\\n\" +\n                                \" [-csv]                      Use CSV format for output log files\\n\" +\n                                \" [-i logFileName]            File name of Histogram Log to process (default is standard input)\\n\" +\n                                \" [-o outputFileName]         File name to output to (default is standard output)\\n\" +\n                                \"                             (will replace occurrences of %pid and %date with appropriate information)\\n\" +\n                                \" [-start rangeStartTimeSec]  The start time for the range in the file, in seconds (default 0.0)\\n\" +\n                                \" [-end rangeEndTimeSec]      The end time for the range in the file, in seconds (default is infinite)\\n\" +\n                                \" [-outputValueUnitRatio r]   The scaling factor by which to divide histogram recorded values units\\n\" +\n                                \"                             in output. [default = 1000000.0 (1 msec in nsec)]\\n\"\n                );",
      "right" : "System.err.println(\n                        \" [-h]                        help\\n\" +\n                                \" [-v]                        Provide verbose error output\\n\" +\n                                \" [-csv]                      Use CSV format for output log files\\n\" +\n                                \" [-i logFileName]            File name of Histogram Log to process (default is standard input)\\n\" +\n                                \" [-o outputFileName]         File name to output to (default is standard output)\\n\" +\n                                \"                             (will replace occurrences of %pid and %date with appropriate information)\\n\" +\n                                \" [-start rangeStartTimeSec]  The start time for the range in the file, in seconds (default 0.0)\\n\" +\n                                \" [-end rangeEndTimeSec]      The end time for the range in the file, in seconds (default is infinite)\\n\" +\n                                \" [-outputValueUnitRatio r]   The scaling factor by which to divide histogram recorded values units\\n\" +\n                                \"                             in output. [default = 1000000.0 (1 msec in nsec)]\\n\"\n                );",
      "info" : "ExpressionStatement[5078-6298]:ExpressionStatement[5078-6298]"
    }, {
      "left" : "System.exit(1);",
      "right" : "System.exit(1);",
      "info" : "ExpressionStatement[6315-6330]:ExpressionStatement[6315-6330]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6366-6373]:Modifier[6366-6373]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6374-6378]:PrimitiveType[6374-6378]"
    }, {
      "left" : "outputTimeRange",
      "right" : "outputTimeRange",
      "info" : "SimpleName[6379-6394]:SimpleName[6379-6394]"
    }, {
      "left" : "final PrintStream log",
      "right" : "final PrintStream log",
      "info" : "SingleVariableDeclaration[6395-6416]:SingleVariableDeclaration[6395-6416]"
    }, {
      "left" : "final String title",
      "right" : "final String title",
      "info" : "SingleVariableDeclaration[6418-6436]:SingleVariableDeclaration[6418-6436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6438-6779]:Block[6438-6779]"
    }, {
      "left" : "log.format(Locale.US, \"#[%s between %.3f and\", title, config.rangeStartTimeSec);",
      "right" : "log.format(Locale.US, \"#[%s between %.3f and\", title, config.rangeStartTimeSec);",
      "info" : "ExpressionStatement[6448-6528]:ExpressionStatement[6448-6528]"
    }, {
      "left" : "if (config.rangeEndTimeSec < Double.MAX_VALUE)",
      "right" : "if (config.rangeEndTimeSec < Double.MAX_VALUE)",
      "info" : "IfStatement[6537-6714]:IfStatement[6537-6714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6584-6652]:Block[6584-6652]"
    }, {
      "left" : "log.format(\" %.3f\", config.rangeEndTimeSec);",
      "right" : "log.format(\" %.3f\", config.rangeEndTimeSec);",
      "info" : "ExpressionStatement[6598-6642]:ExpressionStatement[6598-6642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6658-6714]:Block[6658-6714]"
    }, {
      "left" : "log.format(\" %s\", \"<Infinite>\");",
      "right" : "log.format(\" %s\", \"<Infinite>\");",
      "info" : "ExpressionStatement[6672-6704]:ExpressionStatement[6672-6704]"
    }, {
      "left" : "log.format(\" seconds (relative to StartTime)]\\n\");",
      "right" : "log.format(\" seconds (relative to StartTime)]\\n\");",
      "info" : "ExpressionStatement[6723-6773]:ExpressionStatement[6723-6773]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6785-6792]:Modifier[6785-6792]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6793-6797]:PrimitiveType[6793-6797]"
    }, {
      "left" : "outputStartTime",
      "right" : "outputStartTime",
      "info" : "SimpleName[6798-6813]:SimpleName[6798-6813]"
    }, {
      "left" : "final PrintStream log",
      "right" : "final PrintStream log",
      "info" : "SingleVariableDeclaration[6814-6835]:SingleVariableDeclaration[6814-6835]"
    }, {
      "left" : "final Double startTime",
      "right" : "final Double startTime",
      "info" : "SingleVariableDeclaration[6837-6859]:SingleVariableDeclaration[6837-6859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6861-7026]:Block[6861-7026]"
    }, {
      "left" : "log.format(Locale.US, \"#[StartTime: %.3f (seconds since epoch), %s]\\n\",\n                startTime, (new Date((long) (startTime * 1000))).toString());",
      "right" : "log.format(Locale.US, \"#[StartTime: %.3f (seconds since epoch), %s]\\n\",\n                startTime, (new Date((long) (startTime * 1000))).toString());",
      "info" : "ExpressionStatement[6871-7020]:ExpressionStatement[6871-7020]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17578-17584]:Modifier[17551-17557]"
    }, {
      "left" : "HistogramLogProcessor",
      "right" : "HistogramLogProcessor",
      "info" : "SimpleName[17585-17606]:SimpleName[17558-17579]"
    }, {
      "left" : "final String[] args",
      "right" : "final String[] args",
      "info" : "SingleVariableDeclaration[17607-17626]:SingleVariableDeclaration[17580-17599]"
    }, {
      "left" : "FileNotFoundException",
      "right" : "FileNotFoundException",
      "info" : "SimpleType[17635-17656]:SimpleType[17608-17629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17657-17974]:Block[17630-17947]"
    }, {
      "left" : "this.setName(\"HistogramLogProcessor\");",
      "right" : "this.setName(\"HistogramLogProcessor\");",
      "info" : "ExpressionStatement[17667-17705]:ExpressionStatement[17640-17678]"
    }, {
      "left" : "config = new HistogramLogProcessorConfiguration(args);",
      "right" : "config = new HistogramLogProcessorConfiguration(args);",
      "info" : "ExpressionStatement[17714-17768]:ExpressionStatement[17687-17741]"
    }, {
      "left" : "if (config.inputFileName != null)",
      "right" : "if (config.inputFileName != null)",
      "info" : "IfStatement[17777-17968]:IfStatement[17750-17941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17811-17892]:Block[17784-17865]"
    }, {
      "left" : "logReader = new HistogramLogReader(config.inputFileName);",
      "right" : "logReader = new HistogramLogReader(config.inputFileName);",
      "info" : "ExpressionStatement[17825-17882]:ExpressionStatement[17798-17855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17898-17968]:Block[17871-17941]"
    }, {
      "left" : "logReader = new HistogramLogReader(System.in);",
      "right" : "logReader = new HistogramLogReader(System.in);",
      "info" : "ExpressionStatement[17912-17958]:ExpressionStatement[17885-17931]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18067-18073]:Modifier[18040-18046]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18074-18080]:Modifier[18047-18053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18081-18085]:PrimitiveType[18054-18058]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[18086-18090]:SimpleName[18059-18063]"
    }, {
      "left" : "final String[] args",
      "right" : "final String[] args",
      "info" : "SingleVariableDeclaration[18091-18110]:SingleVariableDeclaration[18064-18083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18113-18386]:Block[18086-18359]"
    }, {
      "left" : "final HistogramLogProcessor processor;",
      "right" : "final HistogramLogProcessor processor;",
      "info" : "VariableDeclarationStatement[18123-18161]:VariableDeclarationStatement[18096-18134]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18170-18380]:TryStatement[18143-18353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18174-18273]:Block[18147-18246]"
    }, {
      "left" : "processor = new HistogramLogProcessor(args);",
      "right" : "processor = new HistogramLogProcessor(args);",
      "info" : "ExpressionStatement[18188-18232]:ExpressionStatement[18161-18205]"
    }, {
      "left" : "processor.start();",
      "right" : "processor.start();",
      "info" : "ExpressionStatement[18245-18263]:ExpressionStatement[18218-18236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18307-18380]:Block[18280-18353]"
    }, {
      "left" : "System.err.println(\"failed to open input file.\");",
      "right" : "System.err.println(\"failed to open input file.\");",
      "info" : "ExpressionStatement[18321-18370]:ExpressionStatement[18294-18343]"
    } ]
  },
  "interFileMappings" : { }
}