{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10068-38448]:MethodDeclaration[10068-38448]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67211-67271]:FieldDeclaration[67249-67309]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67277-67331]:MethodDeclaration[67315-67369]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67337-67544]:MethodDeclaration[67375-67582]"
    }, {
      "left" : "private static boolean isWhitespace(String data)",
      "right" : "private static boolean isWhitespace(String data)",
      "info" : "MethodDeclaration[67550-67873]:MethodDeclaration[67588-67911]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67879-68110]:MethodDeclaration[67917-68148]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68116-68349]:MethodDeclaration[68154-68387]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[68519-70962]:TypeDeclaration[68557-71000]"
    }, {
      "left" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[68566-68727]:FieldDeclaration[68604-68765]"
    }, {
      "left" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[68736-69039]:FieldDeclaration[68774-69077]"
    }, {
      "left" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[69048-69138]:FieldDeclaration[69086-69176]"
    }, {
      "left" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "right" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "info" : "FieldDeclaration[69147-69232]:FieldDeclaration[69185-69270]"
    }, {
      "left" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[69241-69331]:FieldDeclaration[69279-69369]"
    }, {
      "left" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[69340-69402]:FieldDeclaration[69378-69440]"
    }, {
      "left" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69411-69551]:FieldDeclaration[69449-69589]"
    }, {
      "left" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[69560-69655]:FieldDeclaration[69598-69693]"
    }, {
      "left" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[69664-69783]:FieldDeclaration[69702-69821]"
    }, {
      "left" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[69792-69882]:FieldDeclaration[69830-69920]"
    }, {
      "left" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "right" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "info" : "FieldDeclaration[69891-69988]:FieldDeclaration[69929-70026]"
    }, {
      "left" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[69997-70083]:FieldDeclaration[70035-70121]"
    }, {
      "left" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[70092-70165]:FieldDeclaration[70130-70203]"
    }, {
      "left" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70174-70327]:FieldDeclaration[70212-70365]"
    }, {
      "left" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[70336-70659]:FieldDeclaration[70374-70697]"
    }, {
      "left" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[70668-70838]:FieldDeclaration[70706-70876]"
    }, {
      "left" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70847-70956]:FieldDeclaration[70885-70994]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-38448]:Block[10113-38448]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10127-38413]:SwitchStatement[10127-38413]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10161-10176]:SwitchCase[10161-10176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10177-10883]:Block[10177-10883]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10199-10235]:VariableDeclarationStatement[10199-10235]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10256-10838]:IfStatement[10256-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10292-10444]:Block[10292-10444]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10369-10384]:ExpressionStatement[10369-10384]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10409-10422]:ReturnStatement[10409-10422]"
    }, {
      "left" : "if (tb.framesetOk() && isWhitespace(c))",
      "right" : "if (tb.framesetOk() && isWhitespace(c))",
      "info" : "IfStatement[10450-10838]:IfStatement[10450-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10490-10665]:Block[10490-10665]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10570-10605]:ExpressionStatement[10570-10605]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10630-10643]:ExpressionStatement[10630-10643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10671-10838]:Block[10671-10838]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10697-10732]:ExpressionStatement[10697-10732]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10757-10770]:ExpressionStatement[10757-10770]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10795-10816]:ExpressionStatement[10795-10816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10859-10865]:BreakStatement[10859-10865]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10900-10913]:SwitchCase[10900-10913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10914-11006]:Block[10914-11006]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10936-10961]:ExpressionStatement[10936-10961]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10982-10988]:BreakStatement[10982-10988]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[11023-11036]:SwitchCase[11023-11036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11037-11126]:Block[11037-11126]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11059-11074]:ExpressionStatement[11059-11074]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11095-11108]:ReturnStatement[11095-11108]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11143-11157]:SwitchCase[11143-11157]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11178-11219]:VariableDeclarationStatement[11178-11219]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[11240-11276]:VariableDeclarationStatement[11240-11276]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[11297-26818]:IfStatement[11297-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11319-12064]:Block[11319-12064]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[11345-11865]:IfStatement[11345-11865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11393-11865]:Block[11393-11865]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11423-11438]:ExpressionStatement[11423-11438]"
    }, {
      "left" : "tb.processEndTag(\"a\");",
      "right" : "tb.processEndTag(\"a\");",
      "info" : "ExpressionStatement[11467-11489]:ExpressionStatement[11467-11489]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[11566-11608]:VariableDeclarationStatement[11566-11608]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[11637-11839]:IfStatement[11637-11839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11661-11839]:Block[11661-11839]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[11695-11745]:ExpressionStatement[11695-11745]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[11778-11809]:ExpressionStatement[11778-11809]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[11890-11925]:ExpressionStatement[11890-11925]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[11950-11982]:VariableDeclarationStatement[11950-11982]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[12007-12042]:ExpressionStatement[12007-12042]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[12070-26818]:IfStatement[12070-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12139-12318]:Block[12139-12318]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12165-12200]:ExpressionStatement[12165-12200]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[12225-12250]:ExpressionStatement[12225-12250]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12275-12296]:ExpressionStatement[12275-12296]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[12324-26818]:IfStatement[12324-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12386-12584]:Block[12386-12584]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[12412-12517]:IfStatement[12412-12517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12439-12517]:Block[12439-12517]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[12469-12491]:ExpressionStatement[12469-12491]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12542-12562]:ExpressionStatement[12542-12562]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[12590-26818]:IfStatement[12590-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12615-12824]:Block[12615-12824]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12722-12757]:ExpressionStatement[12722-12757]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12782-12802]:ExpressionStatement[12782-12802]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[12830-26818]:IfStatement[12830-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12853-13661]:Block[12853-13661]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12879-12900]:ExpressionStatement[12879-12900]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12925-12966]:VariableDeclarationStatement[12925-12966]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[12991-13464]:ForStatement[12991-13464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13034-13464]:Block[13034-13464]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[13064-13090]:VariableDeclarationStatement[13064-13090]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[13119-13277]:IfStatement[13119-13277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13151-13277]:Block[13151-13277]"
    }, {
      "left" : "tb.processEndTag(\"li\");",
      "right" : "tb.processEndTag(\"li\");",
      "info" : "ExpressionStatement[13185-13208]:ExpressionStatement[13185-13208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13241-13247]:BreakStatement[13241-13247]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[13306-13438]:IfStatement[13306-13438]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13432-13438]:BreakStatement[13432-13438]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13489-13594]:IfStatement[13489-13594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13516-13594]:Block[13516-13594]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[13546-13568]:ExpressionStatement[13546-13568]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13619-13639]:ExpressionStatement[13619-13639]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[13667-26818]:IfStatement[13667-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13692-14113]:Block[13692-14113]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[13718-13733]:ExpressionStatement[13718-13733]"
    }, {
      "left" : "Element html = tb.getStack().get(0);",
      "right" : "Element html = tb.getStack().get(0);",
      "info" : "VariableDeclarationStatement[13817-13853]:VariableDeclarationStatement[13817-13853]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[13878-14091]:EnhancedForStatement[13878-14091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13931-14091]:Block[13931-14091]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[13961-14065]:IfStatement[13961-14065]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[14032-14065]:ExpressionStatement[14032-14065]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[14119-26818]:IfStatement[14119-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14179-14256]:Block[14179-14256]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[14205-14234]:ReturnStatement[14205-14234]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[14262-26818]:IfStatement[14262-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14287-15055]:Block[14287-15055]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14313-14328]:ExpressionStatement[14313-14328]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[14353-14394]:VariableDeclarationStatement[14353-14394]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[14419-15033]:IfStatement[14419-15033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14507-14639]:Block[14507-14639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14590-14603]:ReturnStatement[14590-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14645-15033]:Block[14645-15033]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14675-14696]:ExpressionStatement[14675-14696]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[14725-14753]:VariableDeclarationStatement[14725-14753]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[14782-15007]:EnhancedForStatement[14782-15007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14835-15007]:Block[14835-15007]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14869-14977]:IfStatement[14869-14977]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[14944-14977]:ExpressionStatement[14944-14977]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[15061-26818]:IfStatement[15061-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15090-16051]:Block[15090-16051]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15116-15131]:ExpressionStatement[15116-15131]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15156-15197]:VariableDeclarationStatement[15156-15197]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[15222-16029]:IfStatement[15222-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15310-15442]:Block[15310-15442]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15393-15406]:ReturnStatement[15393-15406]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[15448-16029]:IfStatement[15448-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15470-15558]:Block[15470-15558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15500-15513]:ReturnStatement[15500-15513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15564-16029]:Block[15564-16029]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[15594-15624]:VariableDeclarationStatement[15594-15624]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[15653-15730]:IfStatement[15653-15730]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[15714-15730]:ExpressionStatement[15714-15730]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "info" : "WhileStatement[15813-15899]:WhileStatement[15813-15899]"
    }, {
      "left" : "stack.remove(stack.size()-1);",
      "right" : "stack.remove(stack.size()-1);",
      "info" : "ExpressionStatement[15870-15899]:ExpressionStatement[15870-15899]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[15928-15948]:ExpressionStatement[15928-15948]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[15977-16003]:ExpressionStatement[15977-16003]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[16057-26818]:IfStatement[16057-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16108-16517]:Block[16108-16517]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16134-16239]:IfStatement[16134-16239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16161-16239]:Block[16161-16239]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16191-16213]:ExpressionStatement[16191-16213]"
    }, {
      "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "info" : "IfStatement[16264-16450]:IfStatement[16264-16450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16341-16450]:Block[16341-16450]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16371-16386]:ExpressionStatement[16371-16386]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[16415-16424]:ExpressionStatement[16415-16424]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16475-16495]:ExpressionStatement[16475-16495]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[16523-26818]:IfStatement[16523-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16587-16888]:Block[16587-16888]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16613-16718]:IfStatement[16613-16718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16640-16718]:Block[16640-16718]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16670-16692]:ExpressionStatement[16670-16692]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16743-16763]:ExpressionStatement[16743-16763]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16845-16866]:ExpressionStatement[16845-16866]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[16894-26818]:IfStatement[16894-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16919-17298]:Block[16919-17298]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[16945-17091]:IfStatement[16945-17091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16978-17091]:Block[16978-17091]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17008-17023]:ExpressionStatement[17008-17023]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17052-17065]:ReturnStatement[17052-17065]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17116-17221]:IfStatement[17116-17221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17143-17221]:Block[17143-17221]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[17173-17195]:ExpressionStatement[17173-17195]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[17246-17276]:ExpressionStatement[17246-17276]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[17304-26818]:IfStatement[17304-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17351-18192]:Block[17351-18192]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17377-17398]:ExpressionStatement[17377-17398]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[17423-17464]:VariableDeclarationStatement[17423-17464]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[17489-17995]:ForStatement[17489-17995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17532-17995]:Block[17532-17995]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[17562-17588]:VariableDeclarationStatement[17562-17588]"
    }, {
      "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "info" : "IfStatement[17617-17808]:IfStatement[17617-17808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17673-17808]:Block[17673-17808]"
    }, {
      "left" : "tb.processEndTag(el.nodeName());",
      "right" : "tb.processEndTag(el.nodeName());",
      "info" : "ExpressionStatement[17707-17739]:ExpressionStatement[17707-17739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17772-17778]:BreakStatement[17772-17778]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[17837-17969]:IfStatement[17837-17969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17963-17969]:BreakStatement[17963-17969]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18020-18125]:IfStatement[18020-18125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18047-18125]:Block[18047-18125]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18077-18099]:ExpressionStatement[18077-18099]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18150-18170]:ExpressionStatement[18150-18170]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[18198-26818]:IfStatement[18198-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18228-18528]:Block[18228-18528]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18254-18359]:IfStatement[18254-18359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18281-18359]:Block[18281-18359]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18311-18333]:ExpressionStatement[18311-18333]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18384-18404]:ExpressionStatement[18384-18404]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[18429-18479]:ExpressionStatement[18429-18479]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[18534-26818]:IfStatement[18534-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18561-19065]:Block[18561-19065]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[18587-19043]:IfStatement[18587-19043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18619-18847]:Block[18619-18847]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18700-18715]:ExpressionStatement[18700-18715]"
    }, {
      "left" : "tb.processEndTag(\"button\");",
      "right" : "tb.processEndTag(\"button\");",
      "info" : "ExpressionStatement[18744-18771]:ExpressionStatement[18744-18771]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[18800-18821]:ExpressionStatement[18800-18821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18853-19043]:Block[18853-19043]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18883-18918]:ExpressionStatement[18883-18918]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18947-18967]:ExpressionStatement[18947-18967]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[18996-19017]:ExpressionStatement[18996-19017]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "info" : "IfStatement[19071-26818]:IfStatement[19071-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19124-19326]:Block[19124-19326]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19150-19185]:ExpressionStatement[19150-19185]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19210-19243]:VariableDeclarationStatement[19210-19243]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19268-19304]:ExpressionStatement[19268-19304]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19332-26818]:IfStatement[19332-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19357-19797]:Block[19357-19797]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19383-19418]:ExpressionStatement[19383-19418]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19443-19656]:IfStatement[19443-19656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19467-19656]:Block[19467-19656]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19497-19512]:ExpressionStatement[19497-19512]"
    }, {
      "left" : "tb.processEndTag(\"nobr\");",
      "right" : "tb.processEndTag(\"nobr\");",
      "info" : "ExpressionStatement[19541-19566]:ExpressionStatement[19541-19566]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19595-19630]:ExpressionStatement[19595-19630]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19681-19714]:VariableDeclarationStatement[19681-19714]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19739-19775]:ExpressionStatement[19739-19775]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[19803-26818]:IfStatement[19803-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19864-20101]:Block[19864-20101]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19890-19925]:ExpressionStatement[19890-19925]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19950-19970]:ExpressionStatement[19950-19970]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[19995-20033]:ExpressionStatement[19995-20033]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20058-20079]:ExpressionStatement[20058-20079]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20107-26818]:IfStatement[20107-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20133-20488]:Block[20133-20488]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20159-20327]:IfStatement[20159-20327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20249-20327]:Block[20249-20327]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[20279-20301]:ExpressionStatement[20279-20301]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20352-20372]:ExpressionStatement[20352-20372]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20397-20418]:ExpressionStatement[20397-20418]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20443-20466]:ExpressionStatement[20443-20466]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20494-26818]:IfStatement[20494-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20520-20789]:Block[20520-20789]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20546-20581]:ExpressionStatement[20546-20581]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20606-20644]:VariableDeclarationStatement[20606-20644]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20669-20767]:IfStatement[20669-20767]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20746-20767]:ExpressionStatement[20746-20767]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[20795-26818]:IfStatement[20795-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20854-20927]:Block[20854-20927]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20880-20905]:ExpressionStatement[20880-20905]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[20933-26818]:IfStatement[20933-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20956-21205]:Block[20956-21205]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20982-21087]:IfStatement[20982-21087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21009-21087]:Block[21009-21087]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[21039-21061]:ExpressionStatement[21039-21061]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21112-21137]:ExpressionStatement[21112-21137]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21162-21183]:ExpressionStatement[21162-21183]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21211-26818]:IfStatement[21211-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21237-21509]:Block[21237-21509]"
    }, {
      "left" : "if (tb.getFromStack(\"svg\") == null)",
      "right" : "if (tb.getFromStack(\"svg\") == null)",
      "info" : "IfStatement[21263-21487]:IfStatement[21263-21487]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21327-21367]:ReturnStatement[21327-21367]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[21467-21487]:ExpressionStatement[21467-21487]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21515-26818]:IfStatement[21515-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21543-23231]:Block[21543-23231]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21637-21652]:ExpressionStatement[21637-21652]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21677-21751]:IfStatement[21677-21751]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21738-21751]:ReturnStatement[21738-21751]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[21777-21819]:ExpressionStatement[21777-21819]"
    }, {
      "left" : "tb.processStartTag(\"form\");",
      "right" : "tb.processStartTag(\"form\");",
      "info" : "ExpressionStatement[21844-21871]:ExpressionStatement[21844-21871]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21896-22113]:IfStatement[21896-22113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21938-22113]:Block[21938-22113]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[21968-22003]:VariableDeclarationStatement[21968-22003]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22032-22087]:ExpressionStatement[22032-22087]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[22138-22163]:ExpressionStatement[22138-22163]"
    }, {
      "left" : "tb.processStartTag(\"label\");",
      "right" : "tb.processStartTag(\"label\");",
      "info" : "ExpressionStatement[22188-22216]:ExpressionStatement[22188-22216]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22291-22500]:VariableDeclarationStatement[22291-22500]"
    }, {
      "left" : "tb.process(new Token.Character().data(prompt));",
      "right" : "tb.process(new Token.Character().data(prompt));",
      "info" : "ExpressionStatement[22526-22573]:ExpressionStatement[22526-22573]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22632-22675]:VariableDeclarationStatement[22632-22675]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22700-22930]:EnhancedForStatement[22700-22930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22743-22930]:Block[22743-22930]"
    }, {
      "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22773-22904]:IfStatement[22773-22904]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22881-22904]:ExpressionStatement[22881-22904]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[22955-22991]:ExpressionStatement[22955-22991]"
    }, {
      "left" : "tb.processStartTag(\"input\", inputAttribs);",
      "right" : "tb.processStartTag(\"input\", inputAttribs);",
      "info" : "ExpressionStatement[23016-23058]:ExpressionStatement[23016-23058]"
    }, {
      "left" : "tb.processEndTag(\"label\");",
      "right" : "tb.processEndTag(\"label\");",
      "info" : "ExpressionStatement[23083-23109]:ExpressionStatement[23083-23109]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[23134-23159]:ExpressionStatement[23134-23159]"
    }, {
      "left" : "tb.processEndTag(\"form\");",
      "right" : "tb.processEndTag(\"form\");",
      "info" : "ExpressionStatement[23184-23209]:ExpressionStatement[23184-23209]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23237-26818]:IfStatement[23237-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23266-23778]:Block[23266-23778]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23292-23312]:ExpressionStatement[23292-23312]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23570-23617]:ExpressionStatement[23570-23617]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23642-23665]:ExpressionStatement[23642-23665]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23690-23711]:ExpressionStatement[23690-23711]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23736-23756]:ExpressionStatement[23736-23756]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23784-26818]:IfStatement[23784-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23808-24120]:Block[23808-24120]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23834-23939]:IfStatement[23834-23939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23861-23939]:Block[23861-23939]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[23891-23913]:ExpressionStatement[23891-23913]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[23964-23999]:ExpressionStatement[23964-23999]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24024-24045]:ExpressionStatement[24024-24045]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24070-24098]:ExpressionStatement[24070-24098]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24126-26818]:IfStatement[24126-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24153-24275]:Block[24153-24275]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24179-24200]:ExpressionStatement[24179-24200]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24225-24253]:ExpressionStatement[24225-24253]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24281-26818]:IfStatement[24281-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24309-24451]:Block[24309-24451]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24401-24429]:ExpressionStatement[24401-24429]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24457-26818]:IfStatement[24457-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24484-25020]:Block[24484-25020]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24510-24545]:ExpressionStatement[24510-24545]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24570-24590]:ExpressionStatement[24570-24590]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24615-24636]:ExpressionStatement[24615-24636]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24662-24702]:VariableDeclarationStatement[24662-24702]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24727-24998]:IfStatement[24727-24998]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[24885-24916]:ExpressionStatement[24885-24916]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[24974-24998]:ExpressionStatement[24974-24998]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[25026-26818]:IfStatement[25026-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25087-25348]:Block[25087-25348]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25113-25221]:IfStatement[25113-25221]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[25194-25221]:ExpressionStatement[25194-25221]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25246-25281]:ExpressionStatement[25246-25281]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25306-25326]:ExpressionStatement[25306-25326]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25354-26818]:IfStatement[25354-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25412-25879]:Block[25412-25879]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25438-25857]:IfStatement[25438-25857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25462-25857]:Block[25462-25857]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25492-25520]:ExpressionStatement[25492-25520]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25549-25782]:IfStatement[25549-25782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25601-25782]:Block[25601-25782]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25635-25650]:ExpressionStatement[25635-25650]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25683-25711]:ExpressionStatement[25683-25711]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25811-25831]:ExpressionStatement[25811-25831]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25885-26818]:IfStatement[25885-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25910-26205]:Block[25910-26205]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25936-25971]:ExpressionStatement[25936-25971]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26096-26116]:ExpressionStatement[26096-26116]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26141-26183]:ExpressionStatement[26141-26183]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26211-26818]:IfStatement[26211-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26235-26519]:Block[26235-26519]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26261-26296]:ExpressionStatement[26261-26296]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26410-26430]:ExpressionStatement[26410-26430]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26455-26497]:ExpressionStatement[26455-26497]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26525-26818]:IfStatement[26525-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26583-26684]:Block[26583-26684]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26609-26624]:ExpressionStatement[26609-26624]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26649-26662]:ReturnStatement[26649-26662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26690-26818]:Block[26690-26818]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26716-26751]:ExpressionStatement[26716-26751]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26776-26796]:ExpressionStatement[26776-26796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26839-26845]:BreakStatement[26839-26845]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26863-26875]:SwitchCase[26863-26875]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26896-26931]:VariableDeclarationStatement[26896-26931]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[26952-26979]:ExpressionStatement[26952-26979]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[27000-38156]:IfStatement[27000-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27070-32782]:Block[27070-32782]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[27150-32760]:ForStatement[27150-32760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27178-32760]:Block[27178-32760]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[27208-27263]:VariableDeclarationStatement[27208-27263]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[27292-27900]:IfStatement[27292-27900]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[27346-27375]:ReturnStatement[27346-27375]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[27409-27900]:IfStatement[27409-27900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27436-27641]:Block[27436-27641]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27470-27485]:ExpressionStatement[27470-27485]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[27518-27566]:ExpressionStatement[27518-27566]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27599-27611]:ReturnStatement[27599-27611]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[27647-27900]:IfStatement[27647-27900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27685-27810]:Block[27685-27810]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27719-27734]:ExpressionStatement[27719-27734]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27767-27780]:ReturnStatement[27767-27780]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[27816-27900]:IfStatement[27816-27900]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27885-27900]:ExpressionStatement[27885-27900]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[27930-27959]:VariableDeclarationStatement[27930-27959]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[27988-28018]:VariableDeclarationStatement[27988-28018]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[28047-28085]:VariableDeclarationStatement[28047-28085]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[28114-28155]:VariableDeclarationStatement[28114-28155]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[28346-28381]:VariableDeclarationStatement[28346-28381]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[28410-28964]:ForStatement[28410-28964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28460-28964]:Block[28460-28964]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[28494-28521]:VariableDeclarationStatement[28494-28521]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[28554-28934]:IfStatement[28554-28934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28574-28747]:Block[28574-28747]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[28612-28647]:ExpressionStatement[28612-28647]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[28684-28713]:ExpressionStatement[28684-28713]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[28753-28934]:IfStatement[28753-28934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28800-28934]:Block[28800-28934]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[28838-28857]:ExpressionStatement[28838-28857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28894-28900]:BreakStatement[28894-28900]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[28993-29250]:IfStatement[28993-29250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29020-29250]:Block[29020-29250]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[29054-29094]:ExpressionStatement[29054-29094]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[29127-29175]:ExpressionStatement[29127-29175]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29208-29220]:ReturnStatement[29208-29220]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[29554-29583]:VariableDeclarationStatement[29554-29583]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[29612-29645]:VariableDeclarationStatement[29612-29645]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[29674-31231]:ForStatement[29674-31231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29702-31231]:Block[29702-31231]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[29736-29823]:IfStatement[29736-29823]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[29794-29823]:ExpressionStatement[29794-29823]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[29856-30139]:IfStatement[29856-30139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29900-30069]:Block[29900-30069]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[29964-29989]:ExpressionStatement[29964-29989]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30026-30035]:ContinueStatement[30026-30035]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[30075-30139]:IfStatement[30075-30139]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30133-30139]:BreakStatement[30133-30139]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[30173-30282]:VariableDeclarationStatement[30173-30282]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[30412-30465]:ExpressionStatement[30412-30465]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[30498-30535]:ExpressionStatement[30498-30535]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[30568-30587]:ExpressionStatement[30568-30587]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[30621-30973]:IfStatement[30621-30973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30652-30973]:Block[30652-30973]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31006-31091]:IfStatement[31006-31091]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31073-31091]:ExpressionStatement[31073-31091]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[31124-31151]:ExpressionStatement[31124-31151]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[31185-31201]:ExpressionStatement[31185-31201]"
    }, {
      "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[31261-31787]:IfStatement[31261-31787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31346-31562]:Block[31346-31562]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31380-31465]:IfStatement[31380-31465]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31447-31465]:ExpressionStatement[31447-31465]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[31498-31532]:ExpressionStatement[31498-31532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31568-31787]:Block[31568-31787]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31602-31687]:IfStatement[31602-31687]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31669-31687]:ExpressionStatement[31669-31687]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[31720-31757]:ExpressionStatement[31720-31757]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[31817-31880]:VariableDeclarationStatement[31817-31880]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[31909-31960]:ExpressionStatement[31909-31960]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[31989-32085]:VariableDeclarationStatement[31989-32085]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[32114-32308]:EnhancedForStatement[32114-32308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32148-32308]:Block[32148-32308]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[32182-32213]:ExpressionStatement[32182-32213]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[32337-32372]:ExpressionStatement[32337-32372]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32401-32449]:ExpressionStatement[32401-32449]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[32630-32659]:ExpressionStatement[32630-32659]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[32688-32734]:ExpressionStatement[32688-32734]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[32788-38156]:IfStatement[32788-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32847-33349]:Block[32847-33349]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[32873-33327]:IfStatement[32873-33327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32896-33057]:Block[32896-33057]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32974-32989]:ExpressionStatement[32974-32989]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33018-33031]:ReturnStatement[33018-33031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33063-33327]:Block[33063-33327]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[33093-33121]:ExpressionStatement[33093-33121]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33150-33247]:IfStatement[33150-33247]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33232-33247]:ExpressionStatement[33232-33247]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33276-33301]:ExpressionStatement[33276-33301]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[33355-38156]:IfStatement[33355-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33380-33536]:Block[33380-33536]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[33485-33514]:ReturnStatement[33485-33514]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[33542-38156]:IfStatement[33542-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33565-34031]:Block[33565-34031]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[33591-34009]:IfStatement[33591-34009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33622-33735]:Block[33622-33735]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33652-33667]:ExpressionStatement[33652-33667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33696-33709]:ReturnStatement[33696-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33741-34009]:Block[33741-34009]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[33771-33803]:ExpressionStatement[33771-33803]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33832-33929]:IfStatement[33832-33929]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33914-33929]:ExpressionStatement[33914-33929]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33958-33983]:ExpressionStatement[33958-33983]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[34037-38156]:IfStatement[34037-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34062-34495]:Block[34062-34495]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[34088-34473]:IfStatement[34088-34473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34113-34226]:Block[34113-34226]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34143-34158]:ExpressionStatement[34143-34158]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34187-34200]:ReturnStatement[34187-34200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34232-34473]:Block[34232-34473]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[34422-34447]:ExpressionStatement[34422-34447]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[34501-38156]:IfStatement[34501-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34526-34715]:Block[34526-34715]"
    }, {
      "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "info" : "VariableDeclarationStatement[34552-34598]:VariableDeclarationStatement[34552-34598]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[34623-34693]:IfStatement[34623-34693]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[34667-34693]:ReturnStatement[34667-34693]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[34721-38156]:IfStatement[34721-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34746-35438]:Block[34746-35438]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[34772-34814]:VariableDeclarationStatement[34772-34814]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[34839-34863]:ExpressionStatement[34839-34863]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[34888-35416]:IfStatement[34888-35416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34934-35047]:Block[34934-35047]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34964-34979]:ExpressionStatement[34964-34979]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35008-35021]:ReturnStatement[35008-35021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35053-35416]:Block[35053-35416]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[35083-35111]:ExpressionStatement[35083-35111]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35140-35237]:IfStatement[35140-35237]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35222-35237]:ExpressionStatement[35222-35237]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[35358-35390]:ExpressionStatement[35358-35390]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[35444-38156]:IfStatement[35444-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35466-36043]:Block[35466-36043]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[35492-36021]:IfStatement[35492-36021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35521-35747]:Block[35521-35747]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35551-35566]:ExpressionStatement[35551-35566]"
    }, {
      "left" : "tb.processStartTag(name);",
      "right" : "tb.processStartTag(name);",
      "info" : "ExpressionStatement[35595-35620]:ExpressionStatement[35595-35620]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[35695-35721]:ReturnStatement[35695-35721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35753-36021]:Block[35753-36021]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[35783-35815]:ExpressionStatement[35783-35815]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35844-35941]:IfStatement[35844-35941]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35926-35941]:ExpressionStatement[35926-35941]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[35970-35995]:ExpressionStatement[35970-35995]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[36049-38156]:IfStatement[36049-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36096-36554]:Block[36096-36554]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[36122-36532]:IfStatement[36122-36532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36145-36258]:Block[36145-36258]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36175-36190]:ExpressionStatement[36175-36190]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36219-36232]:ReturnStatement[36219-36232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36264-36532]:Block[36264-36532]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36294-36326]:ExpressionStatement[36294-36326]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36355-36452]:IfStatement[36355-36452]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36437-36452]:ExpressionStatement[36437-36452]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36481-36506]:ExpressionStatement[36481-36506]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[36560-38156]:IfStatement[36560-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36611-37097]:Block[36611-37097]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[36637-37075]:IfStatement[36637-37075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36674-36787]:Block[36674-36787]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36704-36719]:ExpressionStatement[36704-36719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36748-36761]:ReturnStatement[36748-36761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36793-37075]:Block[36793-37075]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36823-36855]:ExpressionStatement[36823-36855]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36884-36981]:IfStatement[36884-36981]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36966-36981]:ExpressionStatement[36966-36981]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[37010-37049]:ExpressionStatement[37010-37049]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[37103-38156]:IfStatement[37103-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37131-37242]:Block[37131-37242]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37191-37220]:ReturnStatement[37191-37220]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[37248-38156]:IfStatement[37248-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37309-37893]:Block[37309-37893]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37335-37871]:IfStatement[37335-37871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37360-37871]:Block[37360-37871]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37390-37538]:IfStatement[37390-37538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37413-37538]:Block[37413-37538]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37447-37462]:ExpressionStatement[37447-37462]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37495-37508]:ReturnStatement[37495-37508]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37567-37595]:ExpressionStatement[37567-37595]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37624-37721]:IfStatement[37624-37721]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37706-37721]:ExpressionStatement[37706-37721]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37750-37775]:ExpressionStatement[37750-37775]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37804-37845]:ExpressionStatement[37804-37845]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37899-38156]:IfStatement[37899-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37922-38073]:Block[37922-38073]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37948-37963]:ExpressionStatement[37948-37963]"
    }, {
      "left" : "tb.processStartTag(\"br\");",
      "right" : "tb.processStartTag(\"br\");",
      "info" : "ExpressionStatement[37988-38013]:ExpressionStatement[37988-38013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38038-38051]:ReturnStatement[38038-38051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38079-38156]:Block[38079-38156]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[38105-38134]:ReturnStatement[38105-38134]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38178-38184]:BreakStatement[38178-38184]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38201-38210]:SwitchCase[38201-38210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38393-38399]:BreakStatement[38393-38399]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38426-38438]:ReturnStatement[38426-38438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67382-67544]:Block[67420-67582]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67392-67516]:IfStatement[67430-67554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67413-67516]:Block[67451-67554]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67427-67467]:VariableDeclarationStatement[67465-67505]"
    }, {
      "left" : "return isWhitespace(data);",
      "right" : "return isWhitespace(data);",
      "info" : "ReturnStatement[67480-67506]:ReturnStatement[67518-67544]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67525-67538]:ReturnStatement[67563-67576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67599-67873]:Block[67637-67911]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67683-67846]:ForStatement[67721-67884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67723-67846]:Block[67761-67884]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67737-67761]:VariableDeclarationStatement[67775-67799]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[67774-67836]:IfStatement[67812-67874]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67823-67836]:ReturnStatement[67861-67874]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67855-67867]:ReturnStatement[67893-67905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67957-68110]:Block[67995-68148]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67967-67987]:ExpressionStatement[68005-68025]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67996-68043]:ExpressionStatement[68034-68081]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68052-68075]:ExpressionStatement[68090-68113]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68084-68104]:ExpressionStatement[68122-68142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68195-68349]:Block[68233-68387]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68205-68225]:ExpressionStatement[68243-68263]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68234-68282]:ExpressionStatement[68272-68320]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68291-68314]:ExpressionStatement[68329-68352]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68323-68343]:ExpressionStatement[68361-68381]"
    } ]
  },
  "interFileMappings" : { }
}