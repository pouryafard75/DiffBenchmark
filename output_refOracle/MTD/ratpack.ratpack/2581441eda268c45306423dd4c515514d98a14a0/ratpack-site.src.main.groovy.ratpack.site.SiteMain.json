{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1367-7549]:TypeDeclaration[1373-7555]"
  }, {
    "left" : "public args String) : void",
    "right" : "public args String) : void",
    "info" : "MethodDeclaration[1393-7547]:MethodDeclaration[1399-7553]"
  } ],
  "mappings" : [
 {
    "left" : "package ratpack.site;",
    "right" : "package ratpack.site;",
    "info" : "PackageDeclaration[615-636]:PackageDeclaration[615-636]"
  }, {
    "left" : "import ratpack.codahale.metrics.CodaHaleMetricsModule;",
    "right" : "import ratpack.codahale.metrics.CodaHaleMetricsModule;",
    "info" : "ImportDeclaration[638-692]:ImportDeclaration[638-692]"
  }, {
    "left" : "import ratpack.func.Block;",
    "right" : "import ratpack.func.Block;",
    "info" : "ImportDeclaration[693-719]:ImportDeclaration[693-719]"
  }, {
    "left" : "import ratpack.func.Pair;",
    "right" : "import ratpack.func.Pair;",
    "info" : "ImportDeclaration[720-745]:ImportDeclaration[720-745]"
  }, {
    "left" : "import ratpack.groovy.template.MarkupTemplateModule;",
    "right" : "import ratpack.groovy.template.MarkupTemplateModule;",
    "info" : "ImportDeclaration[746-798]:ImportDeclaration[746-798]"
  }, {
    "left" : "import ratpack.groovy.template.TextTemplateModule;",
    "right" : "import ratpack.groovy.template.TextTemplateModule;",
    "info" : "ImportDeclaration[799-849]:ImportDeclaration[799-849]"
  }, {
    "left" : "import ratpack.guice.Guice;",
    "right" : "import ratpack.guice.Guice;",
    "info" : "ImportDeclaration[850-877]:ImportDeclaration[850-877]"
  }, {
    "left" : "import ratpack.jackson.JacksonModule;",
    "right" : "import ratpack.jackson.guice.JacksonModule;",
    "info" : "ImportDeclaration[878-915]:ImportDeclaration[878-921]"
  }, {
    "left" : "import ratpack.newrelic.NewRelicModule;",
    "right" : "import ratpack.newrelic.NewRelicModule;",
    "info" : "ImportDeclaration[916-955]:ImportDeclaration[922-961]"
  }, {
    "left" : "import ratpack.registry.Registry;",
    "right" : "import ratpack.registry.Registry;",
    "info" : "ImportDeclaration[956-989]:ImportDeclaration[962-995]"
  }, {
    "left" : "import ratpack.rx.RxRatpack;",
    "right" : "import ratpack.rx.RxRatpack;",
    "info" : "ImportDeclaration[990-1018]:ImportDeclaration[996-1024]"
  }, {
    "left" : "import ratpack.server.RatpackServer;",
    "right" : "import ratpack.server.RatpackServer;",
    "info" : "ImportDeclaration[1019-1055]:ImportDeclaration[1025-1061]"
  }, {
    "left" : "import ratpack.server.ServerConfig;",
    "right" : "import ratpack.server.ServerConfig;",
    "info" : "ImportDeclaration[1056-1091]:ImportDeclaration[1062-1097]"
  }, {
    "left" : "import ratpack.site.github.GitHubApi;",
    "right" : "import ratpack.site.github.GitHubApi;",
    "info" : "ImportDeclaration[1092-1129]:ImportDeclaration[1098-1135]"
  }, {
    "left" : "import ratpack.site.github.GitHubData;",
    "right" : "import ratpack.site.github.GitHubData;",
    "info" : "ImportDeclaration[1130-1168]:ImportDeclaration[1136-1174]"
  }, {
    "left" : "import ratpack.site.github.RatpackVersion;",
    "right" : "import ratpack.site.github.RatpackVersion;",
    "info" : "ImportDeclaration[1169-1211]:ImportDeclaration[1175-1217]"
  }, {
    "left" : "import ratpack.site.github.RatpackVersions;",
    "right" : "import ratpack.site.github.RatpackVersions;",
    "info" : "ImportDeclaration[1212-1255]:ImportDeclaration[1218-1261]"
  }, {
    "left" : "import asset.pipeline.ratpack.AssetPipelineModule;",
    "right" : "import asset.pipeline.ratpack.AssetPipelineModule;",
    "info" : "ImportDeclaration[1256-1306]:ImportDeclaration[1262-1312]"
  }, {
    "left" : "import static ratpack.groovy.Groovy.groovyMarkupTemplate;",
    "right" : "import static ratpack.groovy.Groovy.groovyMarkupTemplate;",
    "info" : "ImportDeclaration[1308-1365]:ImportDeclaration[1314-1371]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1367-1373]:Modifier[1373-1379]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1393-1399]:Modifier[1399-1405]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1400-1406]:Modifier[1406-1412]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1407-1411]:PrimitiveType[1413-1417]"
  }, {
    "left" : "String... args",
    "right" : "String... args",
    "info" : "SingleVariableDeclaration[1417-1431]:SingleVariableDeclaration[1423-1437]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[1440-1449]:SimpleType[1446-1455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1450-7547]:Block[1456-7553]"
  }, {
    "left" : "RatpackServer.start(b -> {\n        RxRatpack.initialize();\n        ServerConfig serverConfig = ServerConfig.findBaseDir()\n          .env()\n          .require(\"/github\", SiteModule.GitHubConfig.class)\n          .build();\n\n        b\n          .serverConfig(serverConfig)\n          .registry(\n            Guice.registry(s -> s\n                .module(JacksonModule.class)\n                .module(NewRelicModule.class)\n                .module(new AssetPipelineModule())\n                .module(new CodaHaleMetricsModule(), c ->\n                    c.csv(csv -> csv.enable(false))\n                )\n                .module(SiteModule.class)\n                .module(MarkupTemplateModule.class, conf -> {\n                  conf.setAutoNewLine(true);\n                  conf.setUseDoubleQuotes(true);\n                  conf.setAutoIndent(true);\n                })\n                .module(TextTemplateModule.class, conf ->\n                    conf.setStaticallyCompile(true)\n                )\n            )\n          )\n          .handlers(c -> {\n\n            int longCache = 60 * 60 * 24 * 365; // one year\n            int shortCache = 60 * 10; // ten mins\n\n            c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));\n          });\n      }\n    );",
    "right" : "RatpackServer.start(b -> {\n        RxRatpack.initialize();\n        ServerConfig serverConfig = ServerConfig.findBaseDir()\n          .env()\n          .require(\"/github\", SiteModule.GitHubConfig.class)\n          .build();\n\n        b\n          .serverConfig(serverConfig)\n          .registry(\n            Guice.registry(s -> s\n                .module(JacksonModule.class)\n                .module(NewRelicModule.class)\n                .module(new AssetPipelineModule())\n                .module(new CodaHaleMetricsModule(), c ->\n                    c.csv(csv -> csv.enable(false))\n                )\n                .module(SiteModule.class)\n                .module(MarkupTemplateModule.class, conf -> {\n                  conf.setAutoNewLine(true);\n                  conf.setUseDoubleQuotes(true);\n                  conf.setAutoIndent(true);\n                })\n                .module(TextTemplateModule.class, conf ->\n                    conf.setStaticallyCompile(true)\n                )\n            )\n          )\n          .handlers(c -> {\n\n            int longCache = 60 * 60 * 24 * 365; // one year\n            int shortCache = 60 * 10; // ten mins\n\n            c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));\n          });\n      }\n    );",
    "info" : "ExpressionStatement[1456-7543]:ExpressionStatement[1462-7549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1481-7536]:Block[1487-7542]"
  }, {
    "left" : "RxRatpack.initialize();",
    "right" : "RxRatpack.initialize();",
    "info" : "ExpressionStatement[1491-1514]:ExpressionStatement[1497-1520]"
  }, {
    "left" : "ServerConfig serverConfig = ServerConfig.findBaseDir()\n          .env()\n          .require(\"/github\", SiteModule.GitHubConfig.class)\n          .build();",
    "right" : "ServerConfig serverConfig = ServerConfig.findBaseDir()\n          .env()\n          .require(\"/github\", SiteModule.GitHubConfig.class)\n          .build();",
    "info" : "VariableDeclarationStatement[1523-1675]:VariableDeclarationStatement[1529-1681]"
  }, {
    "left" : "b\n          .serverConfig(serverConfig)\n          .registry(\n            Guice.registry(s -> s\n                .module(JacksonModule.class)\n                .module(NewRelicModule.class)\n                .module(new AssetPipelineModule())\n                .module(new CodaHaleMetricsModule(), c ->\n                    c.csv(csv -> csv.enable(false))\n                )\n                .module(SiteModule.class)\n                .module(MarkupTemplateModule.class, conf -> {\n                  conf.setAutoNewLine(true);\n                  conf.setUseDoubleQuotes(true);\n                  conf.setAutoIndent(true);\n                })\n                .module(TextTemplateModule.class, conf ->\n                    conf.setStaticallyCompile(true)\n                )\n            )\n          )\n          .handlers(c -> {\n\n            int longCache = 60 * 60 * 24 * 365; // one year\n            int shortCache = 60 * 10; // ten mins\n\n            c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));\n          });",
    "right" : "b\n          .serverConfig(serverConfig)\n          .registry(\n            Guice.registry(s -> s\n                .module(JacksonModule.class)\n                .module(NewRelicModule.class)\n                .module(new AssetPipelineModule())\n                .module(new CodaHaleMetricsModule(), c ->\n                    c.csv(csv -> csv.enable(false))\n                )\n                .module(SiteModule.class)\n                .module(MarkupTemplateModule.class, conf -> {\n                  conf.setAutoNewLine(true);\n                  conf.setUseDoubleQuotes(true);\n                  conf.setAutoIndent(true);\n                })\n                .module(TextTemplateModule.class, conf ->\n                    conf.setStaticallyCompile(true)\n                )\n            )\n          )\n          .handlers(c -> {\n\n            int longCache = 60 * 60 * 24 * 365; // one year\n            int shortCache = 60 * 10; // ten mins\n\n            c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));\n          });",
    "info" : "ExpressionStatement[1685-7528]:ExpressionStatement[1691-7534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2152-2309]:Block[2158-2315]"
  }, {
    "left" : "conf.setAutoNewLine(true);",
    "right" : "conf.setAutoNewLine(true);",
    "info" : "ExpressionStatement[2172-2198]:ExpressionStatement[2178-2204]"
  }, {
    "left" : "conf.setUseDoubleQuotes(true);",
    "right" : "conf.setUseDoubleQuotes(true);",
    "info" : "ExpressionStatement[2217-2247]:ExpressionStatement[2223-2253]"
  }, {
    "left" : "conf.setAutoIndent(true);",
    "right" : "conf.setAutoIndent(true);",
    "info" : "ExpressionStatement[2266-2291]:ExpressionStatement[2272-2297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2490-7526]:Block[2496-7532]"
  }, {
    "left" : "int longCache = 60 * 60 * 24 * 365;",
    "right" : "int longCache = 60 * 60 * 24 * 365;",
    "info" : "VariableDeclarationStatement[2505-2540]:VariableDeclarationStatement[2511-2546]"
  }, {
    "left" : "int shortCache = 60 * 10;",
    "right" : "int shortCache = 60 * 10;",
    "info" : "VariableDeclarationStatement[2565-2590]:VariableDeclarationStatement[2571-2596]"
  }, {
    "left" : "c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));",
    "right" : "c\n              .all(ctx -> {\n                //noinspection ConstantConditions\n                String host = ctx.getRequest().getHeaders().get(\"host\");\n                if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\"))) {\n                  ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());\n                  return;\n                }\n\n                if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\")) {\n                  ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");\n                }\n\n                ctx.next();\n              })\n\n              .prefix(\"assets\", assets -> assets\n                  .all(ctx -> {\n                    int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;\n                    ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");\n                    ctx.next();\n                  })\n                  .files(f -> f.dir(\"assets\").indexFiles(\"index.html\"))\n              )\n\n              .get(\"index.html\", ctx -> {\n                ctx.redirect(301, \"/\");\n              })\n\n              .get(ctx -> ctx.render(groovyMarkupTemplate(\"index.gtpl\")))\n\n              .path(\"reset\", ctx -> {\n                GitHubApi gitHubApi = ctx.get(GitHubApi.class);\n                ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });\n              })\n\n              .prefix(\"versions\", v -> v\n                  .get(ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> groovyMarkupTemplate(\"versions.gtpl\", m -> m.put(\"versions\", all)))\n                      )\n                  )\n                  .get(\":version\", ctx ->\n                      ctx.render(\n                        ctx.get(RatpackVersions.class).getAll()\n                          .map(all -> all.version(ctx.getAllPathTokens().get(\"version\")))\n                          .onNull(() -> ctx.clientError(404))\n                          .flatMap(version -> ctx.get(GitHubData.class).closed(version).map(i -> Pair.of(version, i)))\n                          .map(p -> groovyMarkupTemplate(\"version.gtpl\", m -> m.put(\"version\", p.left).put(\"issues\", p.right)))\n                      )\n                  )\n              )\n\n              .prefix(\"manual\", c1 -> c1\n                  .fileSystem(\"manual\", c2 -> c2\n                      .get(ctx -> ctx.redirect(301, \"manual/current\"))\n                      .prefix(\":label\", c3 -> c3\n                          .all(ctx -> {\n                            String label = ctx.getPathTokens().get(\"label\");\n\n                            ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });\n                          })\n                          .files(f -> f.indexFiles(\"index.html\"))\n                      )\n                  )\n\n              )\n\n              .get(\"favicon.ico\", ctx -> {\n                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                ctx.next();\n              })\n              .files(f -> f.dir(\"public\").indexFiles(\"index.html\"));",
    "info" : "ExpressionStatement[2616-7514]:ExpressionStatement[2622-7520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2644-3282]:Block[2650-3288]"
  }, {
    "left" : "String host = ctx.getRequest().getHeaders().get(\"host\");",
    "right" : "String host = ctx.getRequest().getHeaders().get(\"host\");",
    "info" : "VariableDeclarationStatement[2712-2768]:VariableDeclarationStatement[2718-2774]"
  }, {
    "left" : "if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\")))",
    "right" : "if (host != null && (host.endsWith(\"ratpack-framework.org\") || host.equals(\"www.ratpack.io\")))",
    "info" : "IfStatement[2785-3014]:IfStatement[2791-3020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2880-3014]:Block[2886-3020]"
  }, {
    "left" : "ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());",
    "right" : "ctx.redirect(301, \"http://ratpack.io\" + ctx.getRequest().getRawUri());",
    "info" : "ExpressionStatement[2900-2970]:ExpressionStatement[2906-2976]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[2989-2996]:ReturnStatement[2995-3002]"
  }, {
    "left" : "if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\"))",
    "right" : "if (ctx.getRequest().getPath().isEmpty() || ctx.getRequest().getPath().equals(\"index.html\"))",
    "info" : "IfStatement[3032-3237]:IfStatement[3038-3243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3125-3237]:Block[3131-3243]"
  }, {
    "left" : "ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");",
    "right" : "ctx.getResponse().getHeaders().set(\"X-UA-Compatible\", \"IE=edge,chrome=1\");",
    "info" : "ExpressionStatement[3145-3219]:ExpressionStatement[3151-3225]"
  }, {
    "left" : "ctx.next();",
    "right" : "ctx.next();",
    "info" : "ExpressionStatement[3255-3266]:ExpressionStatement[3261-3272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3364-3625]:Block[3370-3631]"
  }, {
    "left" : "int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;",
    "right" : "int cacheFor = ctx.getRequest().getQuery().isEmpty() ? shortCache : longCache;",
    "info" : "VariableDeclarationStatement[3386-3464]:VariableDeclarationStatement[3392-3470]"
  }, {
    "left" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");",
    "right" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + cacheFor + \", public\");",
    "info" : "ExpressionStatement[3485-3573]:ExpressionStatement[3491-3579]"
  }, {
    "left" : "ctx.next();",
    "right" : "ctx.next();",
    "info" : "ExpressionStatement[3594-3605]:ExpressionStatement[3600-3611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3756-3813]:Block[3762-3819]"
  }, {
    "left" : "ctx.redirect(301, \"/\");",
    "right" : "ctx.redirect(301, \"/\");",
    "info" : "ExpressionStatement[3774-3797]:ExpressionStatement[3780-3803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3927-4377]:Block[3933-4383]"
  }, {
    "left" : "GitHubApi gitHubApi = ctx.get(GitHubApi.class);",
    "right" : "GitHubApi gitHubApi = ctx.get(GitHubApi.class);",
    "info" : "VariableDeclarationStatement[3945-3992]:VariableDeclarationStatement[3951-3998]"
  }, {
    "left" : "ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });",
    "right" : "ctx.byMethod(methods -> {\n                  Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };\n                  if (ctx.getServerConfig().isDevelopment()) {\n                    methods.get(impl);\n                  }\n                  methods.post(impl);\n                });",
    "info" : "ExpressionStatement[4009-4361]:ExpressionStatement[4015-4367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4033-4359]:Block[4039-4365]"
  }, {
    "left" : "Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };",
    "right" : "Block impl = () -> {\n                    gitHubApi.invalidateCache();\n                    ctx.render(\"ok\");\n                  };",
    "info" : "VariableDeclarationStatement[4053-4181]:VariableDeclarationStatement[4059-4187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4072-4180]:Block[4078-4186]"
  }, {
    "left" : "gitHubApi.invalidateCache();",
    "right" : "gitHubApi.invalidateCache();",
    "info" : "ExpressionStatement[4094-4122]:ExpressionStatement[4100-4128]"
  }, {
    "left" : "ctx.render(\"ok\");",
    "right" : "ctx.render(\"ok\");",
    "info" : "ExpressionStatement[4143-4160]:ExpressionStatement[4149-4166]"
  }, {
    "left" : "if (ctx.getServerConfig().isDevelopment())",
    "right" : "if (ctx.getServerConfig().isDevelopment())",
    "info" : "IfStatement[4200-4303]:IfStatement[4206-4309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4243-4303]:Block[4249-4309]"
  }, {
    "left" : "methods.get(impl);",
    "right" : "methods.get(impl);",
    "info" : "ExpressionStatement[4265-4283]:ExpressionStatement[4271-4289]"
  }, {
    "left" : "methods.post(impl);",
    "right" : "methods.post(impl);",
    "info" : "ExpressionStatement[4322-4341]:ExpressionStatement[4328-4347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5547-7122]:Block[5553-7128]"
  }, {
    "left" : "String label = ctx.getPathTokens().get(\"label\");",
    "right" : "String label = ctx.getPathTokens().get(\"label\");",
    "info" : "VariableDeclarationStatement[5577-5625]:VariableDeclarationStatement[5583-5631]"
  }, {
    "left" : "ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });",
    "right" : "ctx.get(RatpackVersions.class).getAll().then(all -> {\n                              if (label.equals(\"current\") || all.isReleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");\n                              } else if (label.equals(\"snapshot\") || all.isUnreleased(label)) {\n                                ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");\n                              }\n\n                              RatpackVersion version;\n                              switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }\n\n                              ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));\n                            });",
    "info" : "ExpressionStatement[5655-7094]:ExpressionStatement[5661-7100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5707-7092]:Block[5713-7098]"
  }, {
    "left" : "if (label.equals(\"current\") || all.isReleased(label))",
    "right" : "if (label.equals(\"current\") || all.isReleased(label))",
    "info" : "IfStatement[5739-6167]:IfStatement[5745-6173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5793-5948]:Block[5799-5954]"
  }, {
    "left" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");",
    "right" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");",
    "info" : "ExpressionStatement[5827-5916]:ExpressionStatement[5833-5922]"
  }, {
    "left" : "if (label.equals(\"snapshot\") || all.isUnreleased(label))",
    "right" : "if (label.equals(\"snapshot\") || all.isUnreleased(label))",
    "info" : "IfStatement[5954-6167]:IfStatement[5960-6173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6011-6167]:Block[6017-6173]"
  }, {
    "left" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");",
    "right" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + shortCache + \", public\");",
    "info" : "ExpressionStatement[6045-6135]:ExpressionStatement[6051-6141]"
  }, {
    "left" : "RatpackVersion version;",
    "right" : "RatpackVersion version;",
    "info" : "VariableDeclarationStatement[6199-6222]:VariableDeclarationStatement[6205-6228]"
  }, {
    "left" : "switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }",
    "right" : "switch (label) {\n                                case \"current\":\n                                  version = all.getCurrent();\n                                  break;\n                                case \"snapshot\":\n                                  version = all.getSnapshot();\n                                  break;\n                                default:\n                                  version = all.version(label);\n                                  if (version == null) {\n                                    ctx.clientError(404);\n                                    return;\n                                  }\n                                  break;\n                              }",
    "info" : "SwitchStatement[6253-6946]:SwitchStatement[6259-6952]"
  }, {
    "left" : "case \"current\":",
    "right" : "case \"current\":",
    "info" : "SwitchCase[6302-6317]:SwitchCase[6308-6323]"
  }, {
    "left" : "version = all.getCurrent();",
    "right" : "version = all.getCurrent();",
    "info" : "ExpressionStatement[6352-6379]:ExpressionStatement[6358-6385]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6414-6420]:BreakStatement[6420-6426]"
  }, {
    "left" : "case \"snapshot\":",
    "right" : "case \"snapshot\":",
    "info" : "SwitchCase[6453-6469]:SwitchCase[6459-6475]"
  }, {
    "left" : "version = all.getSnapshot();",
    "right" : "version = all.getSnapshot();",
    "info" : "ExpressionStatement[6504-6532]:ExpressionStatement[6510-6538]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6567-6573]:BreakStatement[6573-6579]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[6606-6614]:SwitchCase[6612-6620]"
  }, {
    "left" : "version = all.version(label);",
    "right" : "version = all.version(label);",
    "info" : "ExpressionStatement[6649-6678]:ExpressionStatement[6655-6684]"
  }, {
    "left" : "if (version == null)",
    "right" : "if (version == null)",
    "info" : "IfStatement[6713-6873]:IfStatement[6719-6879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6734-6873]:Block[6740-6879]"
  }, {
    "left" : "ctx.clientError(404);",
    "right" : "ctx.clientError(404);",
    "info" : "ExpressionStatement[6772-6793]:ExpressionStatement[6778-6799]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6830-6837]:ReturnStatement[6836-6843]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6908-6914]:BreakStatement[6914-6920]"
  }, {
    "left" : "ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));",
    "right" : "ctx.next(Registry.single(ctx.getFileSystemBinding().binding(version.getVersion())));",
    "info" : "ExpressionStatement[6978-7062]:ExpressionStatement[6984-7068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7293-7444]:Block[7299-7450]"
  }, {
    "left" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");",
    "right" : "ctx.getResponse().getHeaders().add(\"Cache-Control\", \"max-age=\" + longCache + \", public\");",
    "info" : "ExpressionStatement[7311-7400]:ExpressionStatement[7317-7406]"
  }, {
    "left" : "ctx.next();",
    "right" : "ctx.next();",
    "info" : "ExpressionStatement[7417-7428]:ExpressionStatement[7423-7434]"
  } ]
}