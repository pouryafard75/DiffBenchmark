{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "TypeDeclaration[113-10959]:TypeDeclaration[113-10984]"
    }, {
      "left" : "static final char EOF = (char) -1;",
      "right" : "static final char EOF = (char) -1;",
      "info" : "FieldDeclaration[233-267]:FieldDeclaration[233-267]"
    }, {
      "left" : "private static final int maxCacheLen = 12;",
      "right" : "private static final int maxCacheLen = 12;",
      "info" : "FieldDeclaration[272-314]:FieldDeclaration[272-314]"
    }, {
      "left" : "private final char[] input;",
      "right" : "private final char[] input;",
      "info" : "FieldDeclaration[320-347]:FieldDeclaration[320-347]"
    }, {
      "left" : "private final int length;",
      "right" : "private final int length;",
      "info" : "FieldDeclaration[352-377]:FieldDeclaration[352-377]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[382-402]:FieldDeclaration[382-402]"
    }, {
      "left" : "private int mark = 0;",
      "right" : "private int mark = 0;",
      "info" : "FieldDeclaration[407-428]:FieldDeclaration[407-428]"
    }, {
      "left" : "private final String[] stringCache = new String[512];",
      "right" : "private final String[] stringCache = new String[512];",
      "info" : "FieldDeclaration[433-486]:FieldDeclaration[433-486]"
    }, {
      "left" : "CharacterReader(String input)",
      "right" : "CharacterReader(String input)",
      "info" : "MethodDeclaration[547-700]:MethodDeclaration[547-700]"
    }, {
      "left" : "int pos()",
      "right" : "int pos()",
      "info" : "MethodDeclaration[706-743]:MethodDeclaration[706-743]"
    }, {
      "left" : "boolean isEmpty()",
      "right" : "boolean isEmpty()",
      "info" : "MethodDeclaration[749-804]:MethodDeclaration[749-804]"
    }, {
      "left" : "char current()",
      "right" : "char current()",
      "info" : "MethodDeclaration[810-881]:MethodDeclaration[810-881]"
    }, {
      "left" : "char consume()",
      "right" : "char consume()",
      "info" : "MethodDeclaration[887-997]:MethodDeclaration[887-997]"
    }, {
      "left" : "void unconsume()",
      "right" : "void unconsume()",
      "info" : "MethodDeclaration[1003-1042]:MethodDeclaration[1003-1042]"
    }, {
      "left" : "void advance()",
      "right" : "void advance()",
      "info" : "MethodDeclaration[1048-1085]:MethodDeclaration[1048-1085]"
    }, {
      "left" : "void mark()",
      "right" : "void mark()",
      "info" : "MethodDeclaration[1091-1130]:MethodDeclaration[1091-1130]"
    }, {
      "left" : "void rewindToMark()",
      "right" : "void rewindToMark()",
      "info" : "MethodDeclaration[1136-1183]:MethodDeclaration[1136-1183]"
    }, {
      "left" : "String consumeAsString()",
      "right" : "String consumeAsString()",
      "info" : "MethodDeclaration[1189-1265]:MethodDeclaration[1189-1265]"
    }, {
      "left" : "int nextIndexOf(char c)",
      "right" : "int nextIndexOf(char c)",
      "info" : "MethodDeclaration[1271-1735]:MethodDeclaration[1271-1735]"
    }, {
      "left" : "int nextIndexOf(CharSequence seq)",
      "right" : "int nextIndexOf(CharSequence seq)",
      "info" : "MethodDeclaration[1741-2737]:MethodDeclaration[1741-2737]"
    }, {
      "left" : "String consumeTo(char c)",
      "right" : "String consumeTo(char c)",
      "info" : "MethodDeclaration[2743-3014]:MethodDeclaration[2743-3014]"
    }, {
      "left" : "String consumeTo(String seq)",
      "right" : "String consumeTo(String seq)",
      "info" : "MethodDeclaration[3020-3297]:MethodDeclaration[3020-3297]"
    }, {
      "left" : "String consumeToAny(final char... chars)",
      "right" : "String consumeToAny(final char... chars)",
      "info" : "MethodDeclaration[3303-3708]:MethodDeclaration[3303-3708]"
    }, {
      "left" : "String consumeToAnySorted(final char... chars)",
      "right" : "String consumeToAnySorted(final char... chars)",
      "info" : "MethodDeclaration[3714-4083]:MethodDeclaration[3714-4083]"
    }, {
      "left" : "String consumeData()",
      "right" : "String consumeData()",
      "info" : "MethodDeclaration[4089-4503]:MethodDeclaration[4089-4503]"
    }, {
      "left" : "String consumeTagName()",
      "right" : "String consumeTagName()",
      "info" : "MethodDeclaration[4509-5026]:MethodDeclaration[4509-5026]"
    }, {
      "left" : "String consumeToEnd()",
      "right" : "String consumeToEnd()",
      "info" : "MethodDeclaration[5032-5156]:MethodDeclaration[5032-5156]"
    }, {
      "left" : "String consumeLetterSequence()",
      "right" : "String consumeLetterSequence()",
      "info" : "MethodDeclaration[5162-5477]:MethodDeclaration[5162-5477]"
    }, {
      "left" : "String consumeLetterThenDigitSequence()",
      "right" : "String consumeLetterThenDigitSequence()",
      "info" : "MethodDeclaration[5483-5980]:MethodDeclaration[5483-5980]"
    }, {
      "left" : "String consumeHexSequence()",
      "right" : "String consumeHexSequence()",
      "info" : "MethodDeclaration[5986-6323]:MethodDeclaration[5986-6323]"
    }, {
      "left" : "String consumeDigitSequence()",
      "right" : "String consumeDigitSequence()",
      "info" : "MethodDeclaration[6329-6614]:MethodDeclaration[6329-6614]"
    }, {
      "left" : "boolean matches(char c)",
      "right" : "boolean matches(char c)",
      "info" : "MethodDeclaration[6620-6698]:MethodDeclaration[6620-6698]"
    }, {
      "left" : "boolean matches(String seq)",
      "right" : "boolean matches(String seq)",
      "info" : "MethodDeclaration[6704-7012]:MethodDeclaration[6704-7012]"
    }, {
      "left" : "boolean matchesIgnoreCase(String seq)",
      "right" : "boolean matchesIgnoreCase(String seq)",
      "info" : "MethodDeclaration[7018-7468]:MethodDeclaration[7018-7468]"
    }, {
      "left" : "boolean matchesAny(char... seq)",
      "right" : "boolean matchesAny(char... seq)",
      "info" : "MethodDeclaration[7474-7712]:MethodDeclaration[7474-7712]"
    }, {
      "left" : "boolean matchesAnySorted(char[] seq)",
      "right" : "boolean matchesAnySorted(char[] seq)",
      "info" : "MethodDeclaration[7718-7834]:MethodDeclaration[7718-7834]"
    }, {
      "left" : "boolean matchesLetter()",
      "right" : "boolean matchesLetter()",
      "info" : "MethodDeclaration[7840-8014]:MethodDeclaration[7840-8039]"
    }, {
      "left" : "boolean matchesDigit()",
      "right" : "boolean matchesDigit()",
      "info" : "MethodDeclaration[8020-8167]:MethodDeclaration[8045-8192]"
    }, {
      "left" : "boolean matchConsume(String seq)",
      "right" : "boolean matchConsume(String seq)",
      "info" : "MethodDeclaration[8173-8352]:MethodDeclaration[8198-8377]"
    }, {
      "left" : "boolean matchConsumeIgnoreCase(String seq)",
      "right" : "boolean matchConsumeIgnoreCase(String seq)",
      "info" : "MethodDeclaration[8358-8557]:MethodDeclaration[8383-8582]"
    }, {
      "left" : "boolean containsIgnoreCase(String seq)",
      "right" : "boolean containsIgnoreCase(String seq)",
      "info" : "MethodDeclaration[8563-8881]:MethodDeclaration[8588-8906]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[8887-8986]:MethodDeclaration[8912-9011]"
    }, {
      "left" : "private String cacheString(final int start, final int count)",
      "right" : "private String cacheString(final int start, final int count)",
      "info" : "MethodDeclaration[8992-10478]:MethodDeclaration[9017-10503]"
    }, {
      "left" : "boolean rangeEquals(final int start, int count, final String cached)",
      "right" : "boolean rangeEquals(final int start, int count, final String cached)",
      "info" : "MethodDeclaration[10484-10957]:MethodDeclaration[10509-10982]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[199-204]:Modifier[199-204]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[205-210]:TYPE_DECLARATION_KIND[205-210]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[211-226]:SimpleName[211-226]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[547-562]:SimpleName[547-562]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[563-575]:SingleVariableDeclaration[563-575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[577-700]:Block[577-700]"
    }, {
      "left" : "Validate.notNull(input);",
      "right" : "Validate.notNull(input);",
      "info" : "ExpressionStatement[587-611]:ExpressionStatement[587-611]"
    }, {
      "left" : "this.input = input.toCharArray();",
      "right" : "this.input = input.toCharArray();",
      "info" : "ExpressionStatement[620-653]:ExpressionStatement[620-653]"
    }, {
      "left" : "this.length = this.input.length;",
      "right" : "this.length = this.input.length;",
      "info" : "ExpressionStatement[662-694]:ExpressionStatement[662-694]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[706-709]:PrimitiveType[706-709]"
    }, {
      "left" : "pos",
      "right" : "pos",
      "info" : "SimpleName[710-713]:SimpleName[710-713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[716-743]:Block[716-743]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[726-737]:ReturnStatement[726-737]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[749-756]:PrimitiveType[749-756]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[757-764]:SimpleName[757-764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[767-804]:Block[767-804]"
    }, {
      "left" : "return pos >= length;",
      "right" : "return pos >= length;",
      "info" : "ReturnStatement[777-798]:ReturnStatement[777-798]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[810-814]:PrimitiveType[810-814]"
    }, {
      "left" : "current",
      "right" : "current",
      "info" : "SimpleName[815-822]:SimpleName[815-822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[825-881]:Block[825-881]"
    }, {
      "left" : "return pos >= length ? EOF : input[pos];",
      "right" : "return pos >= length ? EOF : input[pos];",
      "info" : "ReturnStatement[835-875]:ReturnStatement[835-875]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[887-891]:PrimitiveType[887-891]"
    }, {
      "left" : "consume",
      "right" : "consume",
      "info" : "SimpleName[892-899]:SimpleName[892-899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[902-997]:Block[902-997]"
    }, {
      "left" : "char val = pos >= length ? EOF : input[pos];",
      "right" : "char val = pos >= length ? EOF : input[pos];",
      "info" : "VariableDeclarationStatement[912-956]:VariableDeclarationStatement[912-956]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[965-971]:ExpressionStatement[965-971]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[980-991]:ReturnStatement[980-991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1003-1007]:PrimitiveType[1003-1007]"
    }, {
      "left" : "unconsume",
      "right" : "unconsume",
      "info" : "SimpleName[1008-1017]:SimpleName[1008-1017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1020-1042]:Block[1020-1042]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[1030-1036]:ExpressionStatement[1030-1036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1048-1052]:PrimitiveType[1048-1052]"
    }, {
      "left" : "advance",
      "right" : "advance",
      "info" : "SimpleName[1053-1060]:SimpleName[1053-1060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1063-1085]:Block[1063-1085]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[1073-1079]:ExpressionStatement[1073-1079]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1091-1095]:PrimitiveType[1091-1095]"
    }, {
      "left" : "mark",
      "right" : "mark",
      "info" : "SimpleName[1096-1100]:SimpleName[1096-1100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1103-1130]:Block[1103-1130]"
    }, {
      "left" : "mark = pos;",
      "right" : "mark = pos;",
      "info" : "ExpressionStatement[1113-1124]:ExpressionStatement[1113-1124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1136-1140]:PrimitiveType[1136-1140]"
    }, {
      "left" : "rewindToMark",
      "right" : "rewindToMark",
      "info" : "SimpleName[1141-1153]:SimpleName[1141-1153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1156-1183]:Block[1156-1183]"
    }, {
      "left" : "pos = mark;",
      "right" : "pos = mark;",
      "info" : "ExpressionStatement[1166-1177]:ExpressionStatement[1166-1177]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1189-1195]:SimpleType[1189-1195]"
    }, {
      "left" : "consumeAsString",
      "right" : "consumeAsString",
      "info" : "SimpleName[1196-1211]:SimpleName[1196-1211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1214-1265]:Block[1214-1265]"
    }, {
      "left" : "return new String(input, pos++, 1);",
      "right" : "return new String(input, pos++, 1);",
      "info" : "ReturnStatement[1224-1259]:ReturnStatement[1224-1259]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1517-1520]:PrimitiveType[1517-1520]"
    }, {
      "left" : "nextIndexOf",
      "right" : "nextIndexOf",
      "info" : "SimpleName[1521-1532]:SimpleName[1521-1532]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[1533-1539]:SingleVariableDeclaration[1533-1539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1541-1735]:Block[1541-1735]"
    }, {
      "left" : "for (int i = pos; i < length; i++)",
      "right" : "for (int i = pos; i < length; i++)",
      "info" : "ForStatement[1601-1710]:ForStatement[1601-1710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1636-1710]:Block[1636-1710]"
    }, {
      "left" : "if (c == input[i])",
      "right" : "if (c == input[i])",
      "info" : "IfStatement[1650-1700]:IfStatement[1650-1700]"
    }, {
      "left" : "return i - pos;",
      "right" : "return i - pos;",
      "info" : "ReturnStatement[1685-1700]:ReturnStatement[1685-1700]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[1719-1729]:ReturnStatement[1719-1729]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2000-2003]:PrimitiveType[2000-2003]"
    }, {
      "left" : "nextIndexOf",
      "right" : "nextIndexOf",
      "info" : "SimpleName[2004-2015]:SimpleName[2004-2015]"
    }, {
      "left" : "CharSequence seq",
      "right" : "CharSequence seq",
      "info" : "SingleVariableDeclaration[2016-2032]:SingleVariableDeclaration[2016-2032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2034-2737]:Block[2034-2737]"
    }, {
      "left" : "char startChar = seq.charAt(0);",
      "right" : "char startChar = seq.charAt(0);",
      "info" : "VariableDeclarationStatement[2094-2125]:VariableDeclarationStatement[2094-2125]"
    }, {
      "left" : "for (int offset = pos; offset < length; offset++)",
      "right" : "for (int offset = pos; offset < length; offset++)",
      "info" : "ForStatement[2134-2712]:ForStatement[2134-2712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2184-2712]:Block[2184-2712]"
    }, {
      "left" : "if (startChar != input[offset])",
      "right" : "if (startChar != input[offset])",
      "info" : "IfStatement[2250-2368]:IfStatement[2250-2368]"
    }, {
      "left" : "while(++offset < length && startChar != input[offset])",
      "right" : "while(++offset < length && startChar != input[offset])",
      "info" : "WhileStatement[2298-2368]:WhileStatement[2298-2368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2353-2368]:Block[2353-2368]"
    }, {
      "left" : "int i = offset + 1;",
      "right" : "int i = offset + 1;",
      "info" : "VariableDeclarationStatement[2381-2400]:VariableDeclarationStatement[2381-2400]"
    }, {
      "left" : "int last = i + seq.length()-1;",
      "right" : "int last = i + seq.length()-1;",
      "info" : "VariableDeclarationStatement[2413-2443]:VariableDeclarationStatement[2413-2443]"
    }, {
      "left" : "if (offset < length && last <= length)",
      "right" : "if (offset < length && last <= length)",
      "info" : "IfStatement[2456-2702]:IfStatement[2456-2702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2495-2702]:Block[2495-2702]"
    }, {
      "left" : "for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++)",
      "right" : "for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++)",
      "info" : "ForStatement[2513-2593]:ForStatement[2513-2593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2578-2593]:Block[2578-2593]"
    }, {
      "left" : "if (i == last)",
      "right" : "if (i == last)",
      "info" : "IfStatement[2610-2688]:IfStatement[2610-2688]"
    }, {
      "left" : "return offset - pos;",
      "right" : "return offset - pos;",
      "info" : "ReturnStatement[2668-2688]:ReturnStatement[2668-2688]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[2721-2731]:ReturnStatement[2721-2731]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2743-2749]:SimpleType[2743-2749]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[2750-2759]:SimpleName[2750-2759]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[2760-2766]:SingleVariableDeclaration[2760-2766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2768-3014]:Block[2768-3014]"
    }, {
      "left" : "int offset = nextIndexOf(c);",
      "right" : "int offset = nextIndexOf(c);",
      "info" : "VariableDeclarationStatement[2778-2806]:VariableDeclarationStatement[2778-2806]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[2815-3008]:IfStatement[2815-3008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2833-2956]:Block[2833-2956]"
    }, {
      "left" : "String consumed = cacheString(pos, offset);",
      "right" : "String consumed = cacheString(pos, offset);",
      "info" : "VariableDeclarationStatement[2847-2890]:VariableDeclarationStatement[2847-2890]"
    }, {
      "left" : "pos += offset;",
      "right" : "pos += offset;",
      "info" : "ExpressionStatement[2903-2917]:ExpressionStatement[2903-2917]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[2930-2946]:ReturnStatement[2930-2946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2962-3008]:Block[2962-3008]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[2976-2998]:ReturnStatement[2976-2998]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3020-3026]:SimpleType[3020-3026]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[3027-3036]:SimpleName[3027-3036]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[3037-3047]:SingleVariableDeclaration[3037-3047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3049-3297]:Block[3049-3297]"
    }, {
      "left" : "int offset = nextIndexOf(seq);",
      "right" : "int offset = nextIndexOf(seq);",
      "info" : "VariableDeclarationStatement[3059-3089]:VariableDeclarationStatement[3059-3089]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[3098-3291]:IfStatement[3098-3291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3116-3239]:Block[3116-3239]"
    }, {
      "left" : "String consumed = cacheString(pos, offset);",
      "right" : "String consumed = cacheString(pos, offset);",
      "info" : "VariableDeclarationStatement[3130-3173]:VariableDeclarationStatement[3130-3173]"
    }, {
      "left" : "pos += offset;",
      "right" : "pos += offset;",
      "info" : "ExpressionStatement[3186-3200]:ExpressionStatement[3186-3200]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[3213-3229]:ReturnStatement[3213-3229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3245-3291]:Block[3245-3291]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[3259-3281]:ReturnStatement[3259-3281]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3303-3309]:SimpleType[3303-3309]"
    }, {
      "left" : "consumeToAny",
      "right" : "consumeToAny",
      "info" : "SimpleName[3310-3322]:SimpleName[3310-3322]"
    }, {
      "left" : "final char... chars",
      "right" : "final char... chars",
      "info" : "SingleVariableDeclaration[3323-3342]:SingleVariableDeclaration[3323-3342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3344-3708]:Block[3344-3708]"
    }, {
      "left" : "final int start = pos;",
      "right" : "final int start = pos;",
      "info" : "VariableDeclarationStatement[3354-3376]:VariableDeclarationStatement[3354-3376]"
    }, {
      "left" : "final int remaining = length;",
      "right" : "final int remaining = length;",
      "info" : "VariableDeclarationStatement[3385-3414]:VariableDeclarationStatement[3385-3414]"
    }, {
      "left" : "final char[] val = input;",
      "right" : "final char[] val = input;",
      "info" : "VariableDeclarationStatement[3423-3448]:VariableDeclarationStatement[3423-3448]"
    }, {
      "left" : "OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "right" : "OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "info" : "LabeledStatement[3458-3636]:LabeledStatement[3458-3636]"
    }, {
      "left" : "while (pos < remaining)",
      "right" : "while (pos < remaining)",
      "info" : "WhileStatement[3465-3636]:WhileStatement[3465-3636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3489-3636]:Block[3489-3636]"
    }, {
      "left" : "for (char c : chars)",
      "right" : "for (char c : chars)",
      "info" : "EnhancedForStatement[3503-3607]:EnhancedForStatement[3503-3607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3524-3607]:Block[3524-3607]"
    }, {
      "left" : "if (val[pos] == c)",
      "right" : "if (val[pos] == c)",
      "info" : "IfStatement[3542-3593]:IfStatement[3542-3593]"
    }, {
      "left" : "break OUTER;",
      "right" : "break OUTER;",
      "info" : "BreakStatement[3581-3593]:BreakStatement[3581-3593]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3620-3626]:ExpressionStatement[3620-3626]"
    }, {
      "left" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "right" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "info" : "ReturnStatement[3646-3702]:ReturnStatement[3646-3702]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3714-3720]:SimpleType[3714-3720]"
    }, {
      "left" : "consumeToAnySorted",
      "right" : "consumeToAnySorted",
      "info" : "SimpleName[3721-3739]:SimpleName[3721-3739]"
    }, {
      "left" : "final char... chars",
      "right" : "final char... chars",
      "info" : "SingleVariableDeclaration[3740-3759]:SingleVariableDeclaration[3740-3759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3761-4083]:Block[3761-4083]"
    }, {
      "left" : "final int start = pos;",
      "right" : "final int start = pos;",
      "info" : "VariableDeclarationStatement[3771-3793]:VariableDeclarationStatement[3771-3793]"
    }, {
      "left" : "final int remaining = length;",
      "right" : "final int remaining = length;",
      "info" : "VariableDeclarationStatement[3802-3831]:VariableDeclarationStatement[3802-3831]"
    }, {
      "left" : "final char[] val = input;",
      "right" : "final char[] val = input;",
      "info" : "VariableDeclarationStatement[3840-3865]:VariableDeclarationStatement[3840-3865]"
    }, {
      "left" : "while (pos < remaining)",
      "right" : "while (pos < remaining)",
      "info" : "WhileStatement[3875-4011]:WhileStatement[3875-4011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3899-4011]:Block[3899-4011]"
    }, {
      "left" : "if (Arrays.binarySearch(chars, val[pos]) >= 0)",
      "right" : "if (Arrays.binarySearch(chars, val[pos]) >= 0)",
      "info" : "IfStatement[3913-3982]:IfStatement[3913-3982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3976-3982]:BreakStatement[3976-3982]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3995-4001]:ExpressionStatement[3995-4001]"
    }, {
      "left" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "right" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "info" : "ReturnStatement[4021-4077]:ReturnStatement[4021-4077]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4089-4095]:SimpleType[4089-4095]"
    }, {
      "left" : "consumeData",
      "right" : "consumeData",
      "info" : "SimpleName[4096-4107]:SimpleName[4096-4107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4110-4503]:Block[4110-4503]"
    }, {
      "left" : "final int start = pos;",
      "right" : "final int start = pos;",
      "info" : "VariableDeclarationStatement[4142-4164]:VariableDeclarationStatement[4142-4164]"
    }, {
      "left" : "final int remaining = length;",
      "right" : "final int remaining = length;",
      "info" : "VariableDeclarationStatement[4173-4202]:VariableDeclarationStatement[4173-4202]"
    }, {
      "left" : "final char[] val = input;",
      "right" : "final char[] val = input;",
      "info" : "VariableDeclarationStatement[4211-4236]:VariableDeclarationStatement[4211-4236]"
    }, {
      "left" : "while (pos < remaining)",
      "right" : "while (pos < remaining)",
      "info" : "WhileStatement[4246-4431]:WhileStatement[4246-4431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4270-4431]:Block[4270-4431]"
    }, {
      "left" : "final char c = val[pos];",
      "right" : "final char c = val[pos];",
      "info" : "VariableDeclarationStatement[4284-4308]:VariableDeclarationStatement[4284-4308]"
    }, {
      "left" : "if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
      "right" : "if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
      "info" : "IfStatement[4321-4402]:IfStatement[4321-4402]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4396-4402]:BreakStatement[4396-4402]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4415-4421]:ExpressionStatement[4415-4421]"
    }, {
      "left" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "right" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "info" : "ReturnStatement[4441-4497]:ReturnStatement[4441-4497]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4509-4515]:SimpleType[4509-4515]"
    }, {
      "left" : "consumeTagName",
      "right" : "consumeTagName",
      "info" : "SimpleName[4516-4530]:SimpleName[4516-4530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4533-5026]:Block[4533-5026]"
    }, {
      "left" : "final int start = pos;",
      "right" : "final int start = pos;",
      "info" : "VariableDeclarationStatement[4602-4624]:VariableDeclarationStatement[4602-4624]"
    }, {
      "left" : "final int remaining = length;",
      "right" : "final int remaining = length;",
      "info" : "VariableDeclarationStatement[4633-4662]:VariableDeclarationStatement[4633-4662]"
    }, {
      "left" : "final char[] val = input;",
      "right" : "final char[] val = input;",
      "info" : "VariableDeclarationStatement[4671-4696]:VariableDeclarationStatement[4671-4696]"
    }, {
      "left" : "while (pos < remaining)",
      "right" : "while (pos < remaining)",
      "info" : "WhileStatement[4706-4954]:WhileStatement[4706-4954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4730-4954]:Block[4730-4954]"
    }, {
      "left" : "final char c = val[pos];",
      "right" : "final char c = val[pos];",
      "info" : "VariableDeclarationStatement[4744-4768]:VariableDeclarationStatement[4744-4768]"
    }, {
      "left" : "if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)",
      "right" : "if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)",
      "info" : "IfStatement[4781-4925]:IfStatement[4781-4925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4919-4925]:BreakStatement[4919-4925]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4938-4944]:ExpressionStatement[4938-4944]"
    }, {
      "left" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "right" : "return pos > start ? cacheString(start, pos-start) : \"\";",
      "info" : "ReturnStatement[4964-5020]:ReturnStatement[4964-5020]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5032-5038]:SimpleType[5032-5038]"
    }, {
      "left" : "consumeToEnd",
      "right" : "consumeToEnd",
      "info" : "SimpleName[5039-5051]:SimpleName[5039-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5054-5156]:Block[5054-5156]"
    }, {
      "left" : "String data = cacheString(pos, length-pos);",
      "right" : "String data = cacheString(pos, length-pos);",
      "info" : "VariableDeclarationStatement[5064-5107]:VariableDeclarationStatement[5064-5107]"
    }, {
      "left" : "pos = length;",
      "right" : "pos = length;",
      "info" : "ExpressionStatement[5116-5129]:ExpressionStatement[5116-5129]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[5138-5150]:ReturnStatement[5138-5150]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5162-5168]:SimpleType[5162-5168]"
    }, {
      "left" : "consumeLetterSequence",
      "right" : "consumeLetterSequence",
      "info" : "SimpleName[5169-5190]:SimpleName[5169-5190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5193-5477]:Block[5193-5477]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[5203-5219]:VariableDeclarationStatement[5203-5219]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[5228-5422]:WhileStatement[5228-5422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5249-5422]:Block[5249-5422]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[5263-5283]:VariableDeclarationStatement[5263-5283]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[5296-5412]:IfStatement[5296-5412]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[5366-5372]:ExpressionStatement[5366-5372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5406-5412]:BreakStatement[5406-5412]"
    }, {
      "left" : "return cacheString(start, pos - start);",
      "right" : "return cacheString(start, pos - start);",
      "info" : "ReturnStatement[5432-5471]:ReturnStatement[5432-5471]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5483-5489]:SimpleType[5483-5489]"
    }, {
      "left" : "consumeLetterThenDigitSequence",
      "right" : "consumeLetterThenDigitSequence",
      "info" : "SimpleName[5490-5520]:SimpleName[5490-5520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5523-5980]:Block[5523-5980]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[5533-5549]:VariableDeclarationStatement[5533-5549]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[5558-5752]:WhileStatement[5558-5752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-5752]:Block[5579-5752]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[5593-5613]:VariableDeclarationStatement[5593-5613]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[5626-5742]:IfStatement[5626-5742]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[5696-5702]:ExpressionStatement[5696-5702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5736-5742]:BreakStatement[5736-5742]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[5761-5925]:WhileStatement[5761-5925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5780-5925]:Block[5780-5925]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[5794-5814]:VariableDeclarationStatement[5794-5814]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[5827-5915]:IfStatement[5827-5915]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[5869-5875]:ExpressionStatement[5869-5875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5909-5915]:BreakStatement[5909-5915]"
    }, {
      "left" : "return cacheString(start, pos - start);",
      "right" : "return cacheString(start, pos - start);",
      "info" : "ReturnStatement[5935-5974]:ReturnStatement[5935-5974]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5986-5992]:SimpleType[5986-5992]"
    }, {
      "left" : "consumeHexSequence",
      "right" : "consumeHexSequence",
      "info" : "SimpleName[5993-6011]:SimpleName[5993-6011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6014-6323]:Block[6014-6323]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[6024-6040]:VariableDeclarationStatement[6024-6040]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[6049-6269]:WhileStatement[6049-6269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6070-6269]:Block[6070-6269]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[6084-6104]:VariableDeclarationStatement[6084-6104]"
    }, {
      "left" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "right" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "info" : "IfStatement[6117-6259]:IfStatement[6117-6259]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[6213-6219]:ExpressionStatement[6213-6219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6253-6259]:BreakStatement[6253-6259]"
    }, {
      "left" : "return cacheString(start, pos - start);",
      "right" : "return cacheString(start, pos - start);",
      "info" : "ReturnStatement[6278-6317]:ReturnStatement[6278-6317]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6329-6335]:SimpleType[6329-6335]"
    }, {
      "left" : "consumeDigitSequence",
      "right" : "consumeDigitSequence",
      "info" : "SimpleName[6336-6356]:SimpleName[6336-6356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6359-6614]:Block[6359-6614]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[6369-6385]:VariableDeclarationStatement[6369-6385]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[6394-6560]:WhileStatement[6394-6560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6415-6560]:Block[6415-6560]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[6429-6449]:VariableDeclarationStatement[6429-6449]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[6462-6550]:IfStatement[6462-6550]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[6504-6510]:ExpressionStatement[6504-6510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6544-6550]:BreakStatement[6544-6550]"
    }, {
      "left" : "return cacheString(start, pos - start);",
      "right" : "return cacheString(start, pos - start);",
      "info" : "ReturnStatement[6569-6608]:ReturnStatement[6569-6608]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6620-6627]:PrimitiveType[6620-6627]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[6628-6635]:SimpleName[6628-6635]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[6636-6642]:SingleVariableDeclaration[6636-6642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6644-6698]:Block[6644-6698]"
    }, {
      "left" : "return !isEmpty() && input[pos] == c;",
      "right" : "return !isEmpty() && input[pos] == c;",
      "info" : "ReturnStatement[6654-6691]:ReturnStatement[6654-6691]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6704-6711]:PrimitiveType[6704-6711]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[6712-6719]:SimpleName[6712-6719]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[6720-6730]:SingleVariableDeclaration[6720-6730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6732-7012]:Block[6732-7012]"
    }, {
      "left" : "int scanLength = seq.length();",
      "right" : "int scanLength = seq.length();",
      "info" : "VariableDeclarationStatement[6742-6772]:VariableDeclarationStatement[6742-6772]"
    }, {
      "left" : "if (scanLength > length - pos)",
      "right" : "if (scanLength > length - pos)",
      "info" : "IfStatement[6781-6837]:IfStatement[6781-6837]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6824-6837]:ReturnStatement[6824-6837]"
    }, {
      "left" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;",
      "right" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;",
      "info" : "ForStatement[6847-6985]:ForStatement[6847-6985]"
    }, {
      "left" : "if (seq.charAt(offset) != input[pos+offset])",
      "right" : "if (seq.charAt(offset) != input[pos+offset])",
      "info" : "IfStatement[6911-6985]:IfStatement[6911-6985]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6972-6985]:ReturnStatement[6972-6985]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6994-7006]:ReturnStatement[6994-7006]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7018-7025]:PrimitiveType[7018-7025]"
    }, {
      "left" : "matchesIgnoreCase",
      "right" : "matchesIgnoreCase",
      "info" : "SimpleName[7026-7043]:SimpleName[7026-7043]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[7044-7054]:SingleVariableDeclaration[7044-7054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-7468]:Block[7056-7468]"
    }, {
      "left" : "int scanLength = seq.length();",
      "right" : "int scanLength = seq.length();",
      "info" : "VariableDeclarationStatement[7066-7096]:VariableDeclarationStatement[7066-7096]"
    }, {
      "left" : "if (scanLength > length - pos)",
      "right" : "if (scanLength > length - pos)",
      "info" : "IfStatement[7105-7161]:IfStatement[7105-7161]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7148-7161]:ReturnStatement[7148-7161]"
    }, {
      "left" : "for (int offset = 0; offset < scanLength; offset++)",
      "right" : "for (int offset = 0; offset < scanLength; offset++)",
      "info" : "ForStatement[7171-7441]:ForStatement[7171-7441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7223-7441]:Block[7223-7441]"
    }, {
      "left" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
      "right" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
      "info" : "VariableDeclarationStatement[7237-7293]:VariableDeclarationStatement[7237-7293]"
    }, {
      "left" : "char upTarget = Character.toUpperCase(input[pos + offset]);",
      "right" : "char upTarget = Character.toUpperCase(input[pos + offset]);",
      "info" : "VariableDeclarationStatement[7306-7365]:VariableDeclarationStatement[7306-7365]"
    }, {
      "left" : "if (upScan != upTarget)",
      "right" : "if (upScan != upTarget)",
      "info" : "IfStatement[7378-7431]:IfStatement[7378-7431]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7418-7431]:ReturnStatement[7418-7431]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7450-7462]:ReturnStatement[7450-7462]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7474-7481]:PrimitiveType[7474-7481]"
    }, {
      "left" : "matchesAny",
      "right" : "matchesAny",
      "info" : "SimpleName[7482-7492]:SimpleName[7482-7492]"
    }, {
      "left" : "char... seq",
      "right" : "char... seq",
      "info" : "SingleVariableDeclaration[7493-7504]:SingleVariableDeclaration[7493-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7506-7712]:Block[7506-7712]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[7516-7556]:IfStatement[7516-7556]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7543-7556]:ReturnStatement[7543-7556]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[7566-7586]:VariableDeclarationStatement[7566-7586]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[7595-7684]:EnhancedForStatement[7595-7684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7617-7684]:Block[7617-7684]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[7631-7674]:IfStatement[7631-7674]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7662-7674]:ReturnStatement[7662-7674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7693-7706]:ReturnStatement[7693-7706]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7718-7725]:PrimitiveType[7718-7725]"
    }, {
      "left" : "matchesAnySorted",
      "right" : "matchesAnySorted",
      "info" : "SimpleName[7726-7742]:SimpleName[7726-7742]"
    }, {
      "left" : "char[] seq",
      "right" : "char[] seq",
      "info" : "SingleVariableDeclaration[7743-7753]:SingleVariableDeclaration[7743-7753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7755-7834]:Block[7755-7834]"
    }, {
      "left" : "return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;",
      "right" : "return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;",
      "info" : "ReturnStatement[7765-7828]:ReturnStatement[7765-7828]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7840-7847]:PrimitiveType[7840-7847]"
    }, {
      "left" : "matchesLetter",
      "right" : "matchesLetter",
      "info" : "SimpleName[7848-7861]:SimpleName[7848-7861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7864-8014]:Block[7864-8039]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[7874-7914]:IfStatement[7874-7914]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7901-7914]:ReturnStatement[7901-7914]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[7923-7943]:VariableDeclarationStatement[7923-7943]"
    }, {
      "left" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "right" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);",
      "info" : "ReturnStatement[7952-8008]:ReturnStatement[7952-8033]"
    }, {
      "left" : "(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')",
      "right" : "(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ",
      "info" : "InfixExpression[7959-8007]:InfixExpression[7959-8008]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8020-8027]:PrimitiveType[8045-8052]"
    }, {
      "left" : "matchesDigit",
      "right" : "matchesDigit",
      "info" : "SimpleName[8028-8040]:SimpleName[8053-8065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8043-8167]:Block[8068-8192]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[8053-8093]:IfStatement[8078-8118]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8080-8093]:ReturnStatement[8105-8118]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[8102-8122]:VariableDeclarationStatement[8127-8147]"
    }, {
      "left" : "return (c >= '0' && c <= '9');",
      "right" : "return (c >= '0' && c <= '9');",
      "info" : "ReturnStatement[8131-8161]:ReturnStatement[8156-8186]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8173-8180]:PrimitiveType[8198-8205]"
    }, {
      "left" : "matchConsume",
      "right" : "matchConsume",
      "info" : "SimpleName[8181-8193]:SimpleName[8206-8218]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[8194-8204]:SingleVariableDeclaration[8219-8229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8206-8352]:Block[8231-8377]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[8216-8346]:IfStatement[8241-8371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8234-8303]:Block[8259-8328]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[8248-8268]:ExpressionStatement[8273-8293]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8281-8293]:ReturnStatement[8306-8318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8309-8346]:Block[8334-8371]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8323-8336]:ReturnStatement[8348-8361]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8358-8365]:PrimitiveType[8383-8390]"
    }, {
      "left" : "matchConsumeIgnoreCase",
      "right" : "matchConsumeIgnoreCase",
      "info" : "SimpleName[8366-8388]:SimpleName[8391-8413]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[8389-8399]:SingleVariableDeclaration[8414-8424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8401-8557]:Block[8426-8582]"
    }, {
      "left" : "if (matchesIgnoreCase(seq))",
      "right" : "if (matchesIgnoreCase(seq))",
      "info" : "IfStatement[8411-8551]:IfStatement[8436-8576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8439-8508]:Block[8464-8533]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[8453-8473]:ExpressionStatement[8478-8498]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8486-8498]:ReturnStatement[8511-8523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8514-8551]:Block[8539-8576]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8528-8541]:ReturnStatement[8553-8566]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8563-8570]:PrimitiveType[8588-8595]"
    }, {
      "left" : "containsIgnoreCase",
      "right" : "containsIgnoreCase",
      "info" : "SimpleName[8571-8589]:SimpleName[8596-8614]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[8590-8600]:SingleVariableDeclaration[8615-8625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8602-8881]:Block[8627-8906]"
    }, {
      "left" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
      "right" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
      "info" : "VariableDeclarationStatement[8697-8745]:VariableDeclarationStatement[8722-8770]"
    }, {
      "left" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
      "right" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
      "info" : "VariableDeclarationStatement[8754-8802]:VariableDeclarationStatement[8779-8827]"
    }, {
      "left" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
      "right" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
      "info" : "ReturnStatement[8811-8875]:ReturnStatement[8836-8900]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8887-8896]:MarkerAnnotation[8912-8921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8901-8907]:Modifier[8926-8932]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8908-8914]:SimpleType[8933-8939]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[8915-8923]:SimpleName[8940-8948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8926-8986]:Block[8951-9011]"
    }, {
      "left" : "return new String(input, pos, length - pos);",
      "right" : "return new String(input, pos, length - pos);",
      "info" : "ReturnStatement[8936-8980]:ReturnStatement[8961-9005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9393-9400]:Modifier[9418-9425]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9401-9407]:SimpleType[9426-9432]"
    }, {
      "left" : "cacheString",
      "right" : "cacheString",
      "info" : "SimpleName[9408-9419]:SimpleName[9433-9444]"
    }, {
      "left" : "final int start",
      "right" : "final int start",
      "info" : "SingleVariableDeclaration[9420-9435]:SingleVariableDeclaration[9445-9460]"
    }, {
      "left" : "final int count",
      "right" : "final int count",
      "info" : "SingleVariableDeclaration[9437-9452]:SingleVariableDeclaration[9462-9477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9454-10478]:Block[9479-10503]"
    }, {
      "left" : "final char[] val = input;",
      "right" : "final char[] val = input;",
      "info" : "VariableDeclarationStatement[9464-9489]:VariableDeclarationStatement[9489-9514]"
    }, {
      "left" : "final String[] cache = stringCache;",
      "right" : "final String[] cache = stringCache;",
      "info" : "VariableDeclarationStatement[9498-9533]:VariableDeclarationStatement[9523-9558]"
    }, {
      "left" : "if (count > maxCacheLen)",
      "right" : "if (count > maxCacheLen)",
      "info" : "IfStatement[9572-9646]:IfStatement[9597-9671]"
    }, {
      "left" : "return new String(val, start, count);",
      "right" : "return new String(val, start, count);",
      "info" : "ReturnStatement[9609-9646]:ReturnStatement[9634-9671]"
    }, {
      "left" : "int hash = 0;",
      "right" : "int hash = 0;",
      "info" : "VariableDeclarationStatement[9683-9696]:VariableDeclarationStatement[9708-9721]"
    }, {
      "left" : "int offset = start;",
      "right" : "int offset = start;",
      "info" : "VariableDeclarationStatement[9705-9724]:VariableDeclarationStatement[9730-9749]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[9733-9822]:ForStatement[9758-9847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9765-9822]:Block[9790-9847]"
    }, {
      "left" : "hash = 31 * hash + val[offset++];",
      "right" : "hash = 31 * hash + val[offset++];",
      "info" : "ExpressionStatement[9779-9812]:ExpressionStatement[9804-9837]"
    }, {
      "left" : "final int index = hash & cache.length - 1;",
      "right" : "final int index = hash & cache.length - 1;",
      "info" : "VariableDeclarationStatement[9858-9900]:VariableDeclarationStatement[9883-9925]"
    }, {
      "left" : "String cached = cache[index];",
      "right" : "String cached = cache[index];",
      "info" : "VariableDeclarationStatement[9909-9938]:VariableDeclarationStatement[9934-9963]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[9948-10449]:IfStatement[9973-10474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9968-10079]:Block[9993-10104]"
    }, {
      "left" : "cached = new String(val, start, count);",
      "right" : "cached = new String(val, start, count);",
      "info" : "ExpressionStatement[9995-10034]:ExpressionStatement[10020-10059]"
    }, {
      "left" : "cache[index] = cached;",
      "right" : "cache[index] = cached;",
      "info" : "ExpressionStatement[10047-10069]:ExpressionStatement[10072-10094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10085-10449]:Block[10110-10474]"
    }, {
      "left" : "if (rangeEquals(start, count, cached))",
      "right" : "if (rangeEquals(start, count, cached))",
      "info" : "IfStatement[10131-10439]:IfStatement[10156-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10170-10223]:Block[10195-10248]"
    }, {
      "left" : "return cached;",
      "right" : "return cached;",
      "info" : "ReturnStatement[10195-10209]:ReturnStatement[10220-10234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10229-10439]:Block[10254-10464]"
    }, {
      "left" : "cached = new String(val, start, count);",
      "right" : "cached = new String(val, start, count);",
      "info" : "ExpressionStatement[10268-10307]:ExpressionStatement[10293-10332]"
    }, {
      "left" : "cache[index] = cached;",
      "right" : "cache[index] = cached;",
      "info" : "ExpressionStatement[10324-10346]:ExpressionStatement[10349-10371]"
    }, {
      "left" : "return cached;",
      "right" : "return cached;",
      "info" : "ReturnStatement[10458-10472]:ReturnStatement[10483-10497]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10567-10574]:PrimitiveType[10592-10599]"
    }, {
      "left" : "rangeEquals",
      "right" : "rangeEquals",
      "info" : "SimpleName[10575-10586]:SimpleName[10600-10611]"
    }, {
      "left" : "final int start",
      "right" : "final int start",
      "info" : "SingleVariableDeclaration[10587-10602]:SingleVariableDeclaration[10612-10627]"
    }, {
      "left" : "int count",
      "right" : "int count",
      "info" : "SingleVariableDeclaration[10604-10613]:SingleVariableDeclaration[10629-10638]"
    }, {
      "left" : "final String cached",
      "right" : "final String cached",
      "info" : "SingleVariableDeclaration[10615-10634]:SingleVariableDeclaration[10640-10659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10636-10957]:Block[10661-10982]"
    }, {
      "left" : "if (count == cached.length())",
      "right" : "if (count == cached.length())",
      "info" : "IfStatement[10646-10929]:IfStatement[10671-10954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10676-10929]:Block[10701-10954]"
    }, {
      "left" : "char one[] = input;",
      "right" : "char one[] = input;",
      "info" : "VariableDeclarationStatement[10690-10709]:VariableDeclarationStatement[10715-10734]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[10722-10736]:VariableDeclarationStatement[10747-10761]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[10749-10759]:VariableDeclarationStatement[10774-10784]"
    }, {
      "left" : "while (count-- != 0)",
      "right" : "while (count-- != 0)",
      "info" : "WhileStatement[10772-10894]:WhileStatement[10797-10919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10793-10894]:Block[10818-10919]"
    }, {
      "left" : "if (one[i++] != cached.charAt(j++))",
      "right" : "if (one[i++] != cached.charAt(j++))",
      "info" : "IfStatement[10811-10880]:IfStatement[10836-10905]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10867-10880]:ReturnStatement[10892-10905]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10907-10919]:ReturnStatement[10932-10944]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10938-10951]:ReturnStatement[10963-10976]"
    } ]
  },
  "interFileMappings" : { }
}