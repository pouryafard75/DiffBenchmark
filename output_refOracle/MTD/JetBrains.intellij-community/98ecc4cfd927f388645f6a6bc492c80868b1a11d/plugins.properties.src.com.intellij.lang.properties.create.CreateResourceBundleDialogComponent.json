{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1886-16570]:TypeDeclaration[1968-17282]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1975-2071]:FieldDeclaration[2057-2153]"
  }, {
    "left" : "private static final Comparator<Locale> LOCALE_COMPARATOR = new Comparator<Locale>() {\n    @Override\n    public int compare(Locale l1, Locale l2) {\n      if (l1 == PropertiesUtil.DEFAULT_LOCALE) {\n        return -1;\n      }\n      if (l2 == PropertiesUtil.DEFAULT_LOCALE) {\n        return 1;\n      }\n      return l1.toString().compareTo(l2.toString());\n    }\n  };",
    "right" : "private static final Comparator<Locale> LOCALE_COMPARATOR = new Comparator<Locale>() {\n    @Override\n    public int compare(Locale l1, Locale l2) {\n      if (l1 == PropertiesUtil.DEFAULT_LOCALE) {\n        return -1;\n      }\n      if (l2 == PropertiesUtil.DEFAULT_LOCALE) {\n        return 1;\n      }\n      return l1.toString().compareTo(l2.toString());\n    }\n  };",
    "info" : "FieldDeclaration[2075-2437]:FieldDeclaration[2157-2519]"
  }, {
    "left" : "public l1 Locale, l2 Locale) : int",
    "right" : "public l1 Locale, l2 Locale) : int",
    "info" : "MethodDeclaration[2166-2432]:MethodDeclaration[2248-2514]"
  }, {
    "left" : "private final Project myProject;",
    "right" : "private final Project myProject;",
    "info" : "FieldDeclaration[2440-2472]:FieldDeclaration[2522-2554]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2475-2514]:FieldDeclaration[2557-2596]"
  }, {
    "left" : "private final ResourceBundle myResourceBundle;",
    "right" : "private final ResourceBundle myResourceBundle;",
    "info" : "FieldDeclaration[2517-2563]:FieldDeclaration[2599-2645]"
  }, {
    "left" : "private JPanel myPanel;",
    "right" : "private JPanel myPanel;",
    "info" : "FieldDeclaration[2566-2589]:FieldDeclaration[2648-2671]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2592-2645]:FieldDeclaration[2674-2727]"
  }, {
    "left" : "private JButton myAddLocaleFromExistButton;",
    "right" : "private JButton myAddLocaleFromExistButton;",
    "info" : "FieldDeclaration[2648-2691]:FieldDeclaration[2730-2773]"
  }, {
    "left" : "private JPanel myNewBundleLocalesPanel;",
    "right" : "private JPanel myNewBundleLocalesPanel;",
    "info" : "FieldDeclaration[2694-2733]:FieldDeclaration[2776-2815]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2736-2778]:FieldDeclaration[2818-2860]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2781-2812]:FieldDeclaration[2863-2894]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2815-2856]:FieldDeclaration[2897-2938]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2859-2910]:FieldDeclaration[2941-2992]"
  }, {
    "left" : "public project Project, directory PsiDirectory, resourceBundle ResourceBundle)",
    "right" : "public project Project, directory PsiDirectory, resourceBundle ResourceBundle)",
    "info" : "MethodDeclaration[2914-3218]:MethodDeclaration[2996-3300]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[3222-4886]:TypeDeclaration[3304-5500]"
  }, {
    "left" : "@Nullable private final Project myProject;",
    "right" : "@Nullable private final Project myProject;",
    "info" : "FieldDeclaration[3277-3319]:FieldDeclaration[3359-3401]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3324-3372]:FieldDeclaration[3406-3454]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3377-3433]:FieldDeclaration[3459-3515]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3438-3474]:FieldDeclaration[3520-3556]"
  }, {
    "left" : "protected Dialog(@Nullable Project project, @Nullable PsiDirectory directory, @Nullable ResourceBundle resourceBundle) {\n      super(project);\n      if (directory == null) {\n        LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);\n      }\n      myProject = project;\n      myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;\n      myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);\n      init();\n      initValidation();\n      setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));\n    }",
    "right" : "protected Dialog(@Nullable Project project, @Nullable PsiDirectory directory, @Nullable ResourceBundle resourceBundle) {\n      super(project);\n      if (directory == null) {\n        LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);\n      }\n      myProject = project;\n      myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;\n      myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);\n      init();\n      initValidation();\n      setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));\n    }",
    "info" : "MethodDeclaration[3480-4238]:MethodDeclaration[3562-4320]"
  }, {
    "left" : "@Override\n    protected void doOKAction() {\n      final String errorString = myComponent.canCreateAllFilesForAllLocales();\n      if (errorString != null) {\n        Messages.showErrorDialog(getContentPanel(), errorString);\n      } else {\n        final List<PsiFile> createFiles = myComponent.createPropertiesFiles();\n        myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);\n        super.doOKAction();\n      }\n    }",
    "right" : "@Override\n    protected void doOKAction() {\n      final String errorString = myComponent.canCreateAllFilesForAllLocales();\n      if (errorString != null) {\n        Messages.showErrorDialog(getContentPanel(), errorString);\n      } else {\n        final List<PsiFile> createFiles = myComponent.createPropertiesFiles();\n        myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);\n        super.doOKAction();\n      }\n    }",
    "info" : "MethodDeclaration[4244-4683]:MethodDeclaration[4326-4765]"
  }, {
    "left" : "protected ) : JComponent",
    "right" : "protected ) : JComponent",
    "info" : "MethodDeclaration[4689-4802]:MethodDeclaration[5303-5416]"
  }, {
    "left" : "public ) : ",
    "right" : "public ) : ",
    "info" : "MethodDeclaration[4808-4882]:MethodDeclaration[5422-5496]"
  }, {
    "left" : "private ) : List<PsiFile>",
    "right" : "private ) : Set<String>",
    "info" : "MethodDeclaration[4890-5779]:MethodDeclaration[6095-6491]"
  }, {
    "left" : "public locale Locale) : String",
    "right" : "public locale Locale) : String",
    "info" : "MethodDeclaration[5099-5289]:MethodDeclaration[6289-6479]"
  }, {
    "left" : "public ) : List<PsiFile>",
    "right" : "public ) : List<PsiFile>",
    "info" : "MethodDeclaration[5428-5693]:MethodDeclaration[5740-6005]"
  }, {
    "left" : "public n String) : PsiFile",
    "right" : "public n String) : PsiFile",
    "info" : "MethodDeclaration[5565-5673]:MethodDeclaration[5877-5985]"
  }, {
    "left" : "private files Collection<PsiFile>) : void",
    "right" : "private files Collection<PsiFile>) : void",
    "info" : "MethodDeclaration[5783-7264]:MethodDeclaration[6495-7976]"
  }, {
    "left" : "public dom PsiFile) : PropertiesFile",
    "right" : "public dom PsiFile) : PropertiesFile",
    "info" : "MethodDeclaration[5981-6198]:MethodDeclaration[6693-6910]"
  }, {
    "left" : "private ) : String",
    "right" : "private ) : String",
    "info" : "MethodDeclaration[7268-7418]:MethodDeclaration[7980-8130]"
  }, {
    "left" : "private ) : String",
    "right" : "private ) : String",
    "info" : "MethodDeclaration[7422-8344]:MethodDeclaration[8134-9056]"
  }, {
    "left" : "public locale Locale) : String",
    "right" : "public locale Locale) : String",
    "info" : "MethodDeclaration[7699-7820]:MethodDeclaration[8411-8532]"
  }, {
    "left" : "public ) : JPanel",
    "right" : "public ) : JPanel",
    "info" : "MethodDeclaration[8348-8398]:MethodDeclaration[9060-9110]"
  }, {
    "left" : "private rawLocales String...) : List<Locale>",
    "right" : "private rawLocales String...) : List<Locale>",
    "info" : "MethodDeclaration[8402-9037]:MethodDeclaration[9114-9749]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n  private void createUIComponents() {\n    final JBList projectExistLocalesList = new JBList();\n    final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();\n    projectExistLocalesList.setModel(existLocalesListModel);\n    projectExistLocalesList.setCellRenderer(getLocaleRenderer());\n    myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();\n    myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));\n\n    final JBList localesToAddList = new JBList();\n\n    final List<Locale> locales;\n    final List<Locale> restrictedLocales;\n    if (myResourceBundle == null) {\n      locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);\n      restrictedLocales = Collections.emptyList();\n    } else {\n      locales = Collections.emptyList();\n      restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });\n    }\n    myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };\n    localesToAddList.setModel(myLocalesModel);\n    localesToAddList.setCellRenderer(getLocaleRenderer());\n    localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });\n    projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });\n\n    myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();\n    myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));\n\n    myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);\n    new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);\n\n    projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });\n    myAddLocaleFromExistButton.setEnabled(false);\n\n    myAddAllButton = new JButton(\"Add All\");\n    new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);\n  }",
    "right" : "@SuppressWarnings(\"unchecked\")\n  private void createUIComponents() {\n    final JBList projectExistLocalesList = new JBList();\n    final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();\n    projectExistLocalesList.setModel(existLocalesListModel);\n    projectExistLocalesList.setCellRenderer(getLocaleRenderer());\n    myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();\n    myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));\n\n    final JBList localesToAddList = new JBList();\n\n    final List<Locale> locales;\n    final List<Locale> restrictedLocales;\n    if (myResourceBundle == null) {\n      locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);\n      restrictedLocales = Collections.emptyList();\n    } else {\n      locales = Collections.emptyList();\n      restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });\n    }\n    myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };\n    localesToAddList.setModel(myLocalesModel);\n    localesToAddList.setCellRenderer(getLocaleRenderer());\n    localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });\n    projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });\n\n    myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();\n    myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));\n\n    myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);\n    new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);\n\n    projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });\n    myAddLocaleFromExistButton.setEnabled(false);\n\n    myAddAllButton = new JButton(\"Add All\");\n    new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);\n  }",
    "info" : "MethodDeclaration[9041-14346]:MethodDeclaration[9753-15058]"
  }, {
    "left" : "public propertiesFile PropertiesFile) : Locale",
    "right" : "public propertiesFile PropertiesFile) : Locale",
    "info" : "MethodDeclaration[10133-10256]:MethodDeclaration[10845-10968]"
  }, {
    "left" : "public elements List<null>) : void",
    "right" : "public elements List<null>) : void",
    "info" : "MethodDeclaration[10343-10767]:MethodDeclaration[11055-11479]"
  }, {
    "left" : "public locale Locale) : boolean",
    "right" : "public locale Locale) : boolean",
    "info" : "MethodDeclaration[10559-10718]:MethodDeclaration[11271-11430]"
  }, {
    "left" : "public e FocusEvent) : void",
    "right" : "public e FocusEvent) : void",
    "info" : "MethodDeclaration[10946-11059]:MethodDeclaration[11658-11771]"
  }, {
    "left" : "public e FocusEvent) : void",
    "right" : "public e FocusEvent) : void",
    "info" : "MethodDeclaration[11140-11246]:MethodDeclaration[11852-11958]"
  }, {
    "left" : "public button AnActionButton) : void",
    "right" : "public button AnActionButton) : void",
    "info" : "MethodDeclaration[11387-12614]:MethodDeclaration[12099-13326]"
  }, {
    "left" : "public inputString String) : String",
    "right" : "public inputString String) : String",
    "info" : "MethodDeclaration[11894-12073]:MethodDeclaration[12606-12785]"
  }, {
    "left" : "public inputString String) : boolean",
    "right" : "public inputString String) : boolean",
    "info" : "MethodDeclaration[12087-12238]:MethodDeclaration[12799-12950]"
  }, {
    "left" : "public inputString String) : boolean",
    "right" : "public inputString String) : boolean",
    "info" : "MethodDeclaration[12252-12379]:MethodDeclaration[12964-13091]"
  }, {
    "left" : "public event MouseEvent, clickCount int) : boolean",
    "right" : "public event MouseEvent, clickCount int) : boolean",
    "info" : "MethodDeclaration[12914-13341]:MethodDeclaration[13626-14053]"
  }, {
    "left" : "public o Object) : Locale",
    "right" : "public o Object) : Locale",
    "info" : "MethodDeclaration[13166-13263]:MethodDeclaration[13878-13975]"
  }, {
    "left" : "public e ListSelectionEvent) : void",
    "right" : "public e ListSelectionEvent) : void",
    "info" : "MethodDeclaration[13477-13952]:MethodDeclaration[14189-14664]"
  }, {
    "left" : "public event MouseEvent, clickCount int) : boolean",
    "right" : "public event MouseEvent, clickCount int) : boolean",
    "info" : "MethodDeclaration[14089-14309]:MethodDeclaration[14801-15021]"
  }, {
    "left" : "@NotNull\n  private static ColoredListCellRenderer<Locale> getLocaleRenderer() {\n    return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };\n  }",
    "right" : "@NotNull\n  private static ColoredListCellRenderer<Locale> getLocaleRenderer() {\n    return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };\n  }",
    "info" : "MethodDeclaration[14350-14890]:MethodDeclaration[15062-15602]"
  }, {
    "left" : "protected list JList, locale Locale, index int, selected boolean, hasFocus boolean) : void",
    "right" : "protected list JList, locale Locale, index int, selected boolean, hasFocus boolean) : void",
    "info" : "MethodDeclaration[14487-14879]:MethodDeclaration[15199-15591]"
  }, {
    "left" : "private class MyExistLocalesListModel extends AbstractListModel {\n    private final List<Locale> myLocales;\n\n    private MyExistLocalesListModel() {\n      myLocales = new ArrayList<Locale>();\n      myLocales.add(PropertiesUtil.DEFAULT_LOCALE);\n      PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);\n      Collections.sort(myLocales, LOCALE_COMPARATOR);\n    }\n\n    @Override\n    public int getSize() {\n      return myLocales.size();\n    }\n\n    @Override\n    public Locale getElementAt(int index) {\n      return myLocales.get(index);\n    }\n\n    public List<Locale> getLocales() {\n      return myLocales;\n    }\n  }",
    "right" : "private class MyExistLocalesListModel extends AbstractListModel {\n    private final List<Locale> myLocales;\n\n    private MyExistLocalesListModel() {\n      myLocales = new ArrayList<Locale>();\n      myLocales.add(PropertiesUtil.DEFAULT_LOCALE);\n      PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);\n      Collections.sort(myLocales, LOCALE_COMPARATOR);\n    }\n\n    @Override\n    public int getSize() {\n      return myLocales.size();\n    }\n\n    @Override\n    public Locale getElementAt(int index) {\n      return myLocales.get(index);\n    }\n\n    public List<Locale> getLocales() {\n      return myLocales;\n    }\n  }",
    "info" : "TypeDeclaration[14894-15970]:TypeDeclaration[15606-16682]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[14964-15001]:FieldDeclaration[15676-15713]"
  }, {
    "left" : "private )",
    "right" : "private )",
    "info" : "MethodDeclaration[15007-15717]:MethodDeclaration[15719-16429]"
  }, {
    "left" : "public baseName String, propertiesFile PropertiesFile) : boolean",
    "right" : "public baseName String, propertiesFile PropertiesFile) : boolean",
    "info" : "MethodDeclaration[15300-15618]:MethodDeclaration[16012-16330]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[15723-15796]:MethodDeclaration[16435-16508]"
  }, {
    "left" : "@Override\n    public Locale getElementAt(int index) {\n      return myLocales.get(index);\n    }",
    "right" : "@Override\n    public Locale getElementAt(int index) {\n      return myLocales.get(index);\n    }",
    "info" : "MethodDeclaration[15802-15896]:MethodDeclaration[16514-16608]"
  }, {
    "left" : "public ) : List<Locale>",
    "right" : "public ) : List<Locale>",
    "info" : "MethodDeclaration[15902-15966]:MethodDeclaration[16614-16678]"
  }, {
    "left" : "package resourceBundle ResourceBundle) : PsiDirectory",
    "right" : "package resourceBundle ResourceBundle) : PsiDirectory",
    "info" : "MethodDeclaration[15974-16568]:MethodDeclaration[16686-17280]"
  } ],
  "mappings" : [
 {
    "left" : "import com.intellij.util.containers.ContainerUtil;",
    "right" : "import com.intellij.psi.PsiDirectory;",
    "info" : "ImportDeclaration[1509-1559]:ImportDeclaration[1254-1291]"
  }, {
    "left" : "import org.jetbrains.annotations.Nullable;",
    "right" : "import com.intellij.psi.PsiElement;",
    "info" : "ImportDeclaration[1602-1644]:ImportDeclaration[1292-1327]"
  }, {
    "left" : "import javax.swing.event.ListSelectionEvent;",
    "right" : "import com.intellij.psi.PsiFile;",
    "info" : "ImportDeclaration[1668-1712]:ImportDeclaration[1328-1360]"
  }, {
    "left" : "import java.awt.event.FocusAdapter;",
    "right" : "import com.intellij.psi.search.GlobalSearchScope;",
    "info" : "ImportDeclaration[1761-1796]:ImportDeclaration[1361-1410]"
  }, {
    "left" : "import java.awt.event.FocusEvent;",
    "right" : "import com.intellij.util.PathUtil;",
    "info" : "ImportDeclaration[1797-1830]:ImportDeclaration[1556-1590]"
  }, {
    "left" : "import java.util.*;",
    "right" : "import org.jetbrains.annotations.NotNull;",
    "info" : "ImportDeclaration[1865-1884]:ImportDeclaration[1642-1683]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1922-1928]:Modifier[2004-2010]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2166-2175]:MarkerAnnotation[2248-2257]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2180-2186]:Modifier[2262-2268]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2187-2190]:PrimitiveType[2269-2272]"
  }, {
    "left" : "Locale l1",
    "right" : "Locale l1",
    "info" : "SingleVariableDeclaration[2199-2208]:SingleVariableDeclaration[2281-2290]"
  }, {
    "left" : "Locale l2",
    "right" : "Locale l2",
    "info" : "SingleVariableDeclaration[2210-2219]:SingleVariableDeclaration[2292-2301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2221-2432]:Block[2303-2514]"
  }, {
    "left" : "if (l1 == PropertiesUtil.DEFAULT_LOCALE)",
    "right" : "if (l1 == PropertiesUtil.DEFAULT_LOCALE)",
    "info" : "IfStatement[2229-2298]:IfStatement[2311-2380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2270-2298]:Block[2352-2380]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[2280-2290]:ReturnStatement[2362-2372]"
  }, {
    "left" : "if (l2 == PropertiesUtil.DEFAULT_LOCALE)",
    "right" : "if (l2 == PropertiesUtil.DEFAULT_LOCALE)",
    "info" : "IfStatement[2305-2373]:IfStatement[2387-2455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2346-2373]:Block[2428-2455]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[2356-2365]:ReturnStatement[2438-2447]"
  }, {
    "left" : "return l1.toString().compareTo(l2.toString());",
    "right" : "return l1.toString().compareTo(l2.toString());",
    "info" : "ReturnStatement[2380-2426]:ReturnStatement[2462-2508]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2914-2920]:Modifier[2996-3002]"
  }, {
    "left" : "Project project",
    "right" : "Project project",
    "info" : "SingleVariableDeclaration[2957-2972]:SingleVariableDeclaration[3039-3054]"
  }, {
    "left" : "PsiDirectory directory",
    "right" : "PsiDirectory directory",
    "info" : "SingleVariableDeclaration[2974-2996]:SingleVariableDeclaration[3056-3078]"
  }, {
    "left" : "ResourceBundle resourceBundle",
    "right" : "ResourceBundle resourceBundle",
    "info" : "SingleVariableDeclaration[2998-3027]:SingleVariableDeclaration[3080-3109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3029-3218]:Block[3111-3300]"
  }, {
    "left" : "myProject = project;",
    "right" : "myProject = project;",
    "info" : "ExpressionStatement[3035-3055]:ExpressionStatement[3117-3137]"
  }, {
    "left" : "myDirectory = directory;",
    "right" : "myDirectory = directory;",
    "info" : "ExpressionStatement[3060-3084]:ExpressionStatement[3142-3166]"
  }, {
    "left" : "myResourceBundle = resourceBundle;",
    "right" : "myResourceBundle = resourceBundle;",
    "info" : "ExpressionStatement[3089-3123]:ExpressionStatement[3171-3205]"
  }, {
    "left" : "if (resourceBundle != null)",
    "right" : "if (resourceBundle != null)",
    "info" : "IfStatement[3128-3214]:IfStatement[3210-3296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3156-3214]:Block[3238-3296]"
  }, {
    "left" : "myResourceBundleNamePanel.setVisible(false);",
    "right" : "myResourceBundleNamePanel.setVisible(false);",
    "info" : "ExpressionStatement[3164-3208]:ExpressionStatement[3246-3290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3222-3228]:Modifier[3304-3310]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3229-3235]:Modifier[3311-3317]"
  }, {
    "left" : "DialogWrapper",
    "right" : "DialogWrapper",
    "info" : "SimpleType[3257-3270]:SimpleType[3339-3352]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[3480-3489]:Modifier[3562-3571]"
  }, {
    "left" : "@Nullable Project project",
    "right" : "@Nullable Project project",
    "info" : "SingleVariableDeclaration[3497-3522]:SingleVariableDeclaration[3579-3604]"
  }, {
    "left" : "@Nullable PsiDirectory directory",
    "right" : "@Nullable PsiDirectory directory",
    "info" : "SingleVariableDeclaration[3524-3556]:SingleVariableDeclaration[3606-3638]"
  }, {
    "left" : "@Nullable ResourceBundle resourceBundle",
    "right" : "@Nullable ResourceBundle resourceBundle",
    "info" : "SingleVariableDeclaration[3558-3597]:SingleVariableDeclaration[3640-3679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3599-4238]:Block[3681-4320]"
  }, {
    "left" : "super(project);",
    "right" : "super(project);",
    "info" : "SuperConstructorInvocation[3607-3622]:SuperConstructorInvocation[3689-3704]"
  }, {
    "left" : "if (directory == null)",
    "right" : "if (directory == null)",
    "info" : "IfStatement[3629-3772]:IfStatement[3711-3854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3652-3772]:Block[3734-3854]"
  }, {
    "left" : "LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);",
    "right" : "LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);",
    "info" : "ExpressionStatement[3662-3764]:ExpressionStatement[3744-3846]"
  }, {
    "left" : "myProject = project;",
    "right" : "myProject = project;",
    "info" : "ExpressionStatement[3779-3799]:ExpressionStatement[3861-3881]"
  }, {
    "left" : "myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;",
    "right" : "myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;",
    "info" : "ExpressionStatement[3806-3939]:ExpressionStatement[3888-4021]"
  }, {
    "left" : "myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);",
    "right" : "myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);",
    "info" : "ExpressionStatement[3946-4040]:ExpressionStatement[4028-4122]"
  }, {
    "left" : "init();",
    "right" : "init();",
    "info" : "ExpressionStatement[4047-4054]:ExpressionStatement[4129-4136]"
  }, {
    "left" : "initValidation();",
    "right" : "initValidation();",
    "info" : "ExpressionStatement[4061-4078]:ExpressionStatement[4143-4160]"
  }, {
    "left" : "setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));",
    "right" : "setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));",
    "info" : "ExpressionStatement[4085-4232]:ExpressionStatement[4167-4314]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4244-4253]:MarkerAnnotation[4326-4335]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4258-4267]:Modifier[4340-4349]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4268-4272]:PrimitiveType[4350-4354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4286-4683]:Block[4368-4765]"
  }, {
    "left" : "final String errorString = myComponent.canCreateAllFilesForAllLocales();",
    "right" : "final String errorString = myComponent.canCreateAllFilesForAllLocales();",
    "info" : "VariableDeclarationStatement[4294-4366]:VariableDeclarationStatement[4376-4448]"
  }, {
    "left" : "if (errorString != null)",
    "right" : "if (errorString != null)",
    "info" : "IfStatement[4373-4677]:IfStatement[4455-4759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4398-4473]:Block[4480-4555]"
  }, {
    "left" : "Messages.showErrorDialog(getContentPanel(), errorString);",
    "right" : "Messages.showErrorDialog(getContentPanel(), errorString);",
    "info" : "ExpressionStatement[4408-4465]:ExpressionStatement[4490-4547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4479-4677]:Block[4561-4759]"
  }, {
    "left" : "final List<PsiFile> createFiles = myComponent.createPropertiesFiles();",
    "right" : "final List<PsiFile> createFiles = myComponent.createPropertiesFiles();",
    "info" : "VariableDeclarationStatement[4489-4559]:VariableDeclarationStatement[4571-4641]"
  }, {
    "left" : "myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);",
    "right" : "myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);",
    "info" : "ExpressionStatement[4568-4641]:ExpressionStatement[4650-4723]"
  }, {
    "left" : "super.doOKAction();",
    "right" : "super.doOKAction();",
    "info" : "ExpressionStatement[4650-4669]:ExpressionStatement[4732-4751]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[4689-4698]:MarkerAnnotation[5303-5312]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4703-4712]:MarkerAnnotation[5317-5326]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4717-4726]:Modifier[5331-5340]"
  }, {
    "left" : "JComponent",
    "right" : "JComponent",
    "info" : "SimpleType[4727-4737]:SimpleType[5341-5351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4758-4802]:Block[5372-5416]"
  }, {
    "left" : "return myComponent.getPanel();",
    "right" : "return myComponent.getPanel();",
    "info" : "ReturnStatement[4766-4796]:ReturnStatement[5380-5410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4808-4814]:Modifier[5422-5428]"
  }, {
    "left" : "PsiElement[]",
    "right" : "PsiElement[]",
    "info" : "ArrayType[4815-4827]:ArrayType[5429-5441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4846-4882]:Block[5460-5496]"
  }, {
    "left" : "return myCreatedFiles;",
    "right" : "return myCreatedFiles;",
    "info" : "ReturnStatement[4854-4876]:ReturnStatement[5468-5490]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4890-4897]:Modifier[5504-5511]"
  }, {
    "left" : "List<PsiFile>",
    "right" : "List<PsiFile>",
    "info" : "ParameterizedType[4898-4911]:ParameterizedType[5512-5525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4936-5779]:Block[5550-6091]"
  }, {
    "left" : "final String name = getBaseName();",
    "right" : "final Set<String> fileNames = getFileNamesToCreate();",
    "info" : "VariableDeclarationStatement[4942-4976]:VariableDeclarationStatement[5556-5609]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[4948-4954]:SimpleType[4850-4856]"
  }, {
    "left" : "name = getBaseName()",
    "right" : "fileNames = getFileNamesToCreate()",
    "info" : "VariableDeclarationFragment[4955-4975]:VariableDeclarationFragment[5574-5608]"
  }, {
    "left" : "getBaseName()",
    "right" : "getFileNamesToCreate()",
    "info" : "MethodInvocation[4962-4975]:MethodInvocation[5586-5608]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4981-4986]:Modifier[6155-6160]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[4987-4998]:ParameterizedType[5562-5573]"
  }, {
    "left" : "ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");\n      }\n    })",
    "right" : "ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");\n      }\n    })",
    "info" : "MethodInvocation[5011-5296]:MethodInvocation[6201-6486]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5099-5108]:MarkerAnnotation[6289-6298]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5115-5121]:Modifier[6305-6311]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5122-5128]:SimpleType[6312-6318]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[5133-5146]:SingleVariableDeclaration[6323-6336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5148-5289]:Block[6338-6479]"
  }, {
    "left" : "return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");",
    "right" : "return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");",
    "info" : "ReturnStatement[5158-5281]:ReturnStatement[6348-6471]"
  }, {
    "left" : "final List<PsiFile> createdFiles = ApplicationManager.getApplication().runWriteAction(new Computable<List<PsiFile>>() {\n      @Override\n      public List<PsiFile> compute() {\n        return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });\n      }\n    });",
    "right" : "final List<PsiFile> createdFiles = ApplicationManager.getApplication().runWriteAction(new Computable<List<PsiFile>>() {\n      @Override\n      public List<PsiFile> compute() {\n        return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });\n      }\n    });",
    "info" : "VariableDeclarationStatement[5302-5701]:VariableDeclarationStatement[5614-6013]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5428-5437]:MarkerAnnotation[5740-5749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5444-5450]:Modifier[5756-5762]"
  }, {
    "left" : "List<PsiFile>",
    "right" : "List<PsiFile>",
    "info" : "ParameterizedType[5451-5464]:ParameterizedType[5763-5776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5475-5693]:Block[5787-6005]"
  }, {
    "left" : "return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });",
    "right" : "return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });",
    "info" : "ReturnStatement[5485-5685]:ReturnStatement[5797-5997]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5565-5574]:MarkerAnnotation[5877-5886]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5585-5591]:Modifier[5897-5903]"
  }, {
    "left" : "PsiFile",
    "right" : "PsiFile",
    "info" : "SimpleType[5592-5599]:SimpleType[5904-5911]"
  }, {
    "left" : "String n",
    "right" : "String n",
    "info" : "SingleVariableDeclaration[5604-5612]:SingleVariableDeclaration[5916-5924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5614-5673]:Block[5926-5985]"
  }, {
    "left" : "return myDirectory.createFile(n);",
    "right" : "return myDirectory.createFile(n);",
    "info" : "ReturnStatement[5628-5661]:ReturnStatement[5940-5973]"
  }, {
    "left" : "combineToResourceBundleIfNeed(createdFiles);",
    "right" : "combineToResourceBundleIfNeed(createdFiles);",
    "info" : "ExpressionStatement[5706-5750]:ExpressionStatement[6018-6062]"
  }, {
    "left" : "return createdFiles;",
    "right" : "return createdFiles;",
    "info" : "ReturnStatement[5755-5775]:ReturnStatement[6067-6087]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5783-5790]:Modifier[6495-6502]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5791-5795]:PrimitiveType[6503-6507]"
  }, {
    "left" : "Collection<PsiFile> files",
    "right" : "Collection<PsiFile> files",
    "info" : "SingleVariableDeclaration[5826-5851]:SingleVariableDeclaration[6538-6563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5853-7264]:Block[6565-7976]"
  }, {
    "left" : "Collection<PropertiesFile> createdFiles = ContainerUtil.map(files, new NotNullFunction<PsiFile, PropertiesFile>() {\n      @NotNull\n      @Override\n      public PropertiesFile fun(PsiFile dom) {\n        final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);\n        LOG.assertTrue(file != null);\n        return file;\n      }\n    });",
    "right" : "Collection<PropertiesFile> createdFiles = ContainerUtil.map(files, new NotNullFunction<PsiFile, PropertiesFile>() {\n      @NotNull\n      @Override\n      public PropertiesFile fun(PsiFile dom) {\n        final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);\n        LOG.assertTrue(file != null);\n        return file;\n      }\n    });",
    "info" : "VariableDeclarationStatement[5859-6206]:VariableDeclarationStatement[6571-6918]"
  }, {
    "left" : "@NotNull",
    "right" : "@NotNull",
    "info" : "MarkerAnnotation[5981-5989]:MarkerAnnotation[6693-6701]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5996-6005]:MarkerAnnotation[6708-6717]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6012-6018]:Modifier[6724-6730]"
  }, {
    "left" : "PropertiesFile",
    "right" : "PropertiesFile",
    "info" : "SimpleType[6019-6033]:SimpleType[6731-6745]"
  }, {
    "left" : "PsiFile dom",
    "right" : "PsiFile dom",
    "info" : "SingleVariableDeclaration[6038-6049]:SingleVariableDeclaration[6750-6761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6051-6198]:Block[6763-6910]"
  }, {
    "left" : "final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);",
    "right" : "final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);",
    "info" : "VariableDeclarationStatement[6061-6131]:VariableDeclarationStatement[6773-6843]"
  }, {
    "left" : "LOG.assertTrue(file != null);",
    "right" : "LOG.assertTrue(file != null);",
    "info" : "ExpressionStatement[6140-6169]:ExpressionStatement[6852-6881]"
  }, {
    "left" : "return file;",
    "right" : "return file;",
    "info" : "ReturnStatement[6178-6190]:ReturnStatement[6890-6902]"
  }, {
    "left" : "ResourceBundle mainBundle = myResourceBundle;",
    "right" : "ResourceBundle mainBundle = myResourceBundle;",
    "info" : "VariableDeclarationStatement[6212-6257]:VariableDeclarationStatement[6924-6969]"
  }, {
    "left" : "final Set<ResourceBundle> allBundles = new HashSet<ResourceBundle>();",
    "right" : "final Set<ResourceBundle> allBundles = new HashSet<ResourceBundle>();",
    "info" : "VariableDeclarationStatement[6262-6331]:VariableDeclarationStatement[6974-7043]"
  }, {
    "left" : "if (mainBundle != null)",
    "right" : "if (mainBundle != null)",
    "info" : "IfStatement[6336-6401]:IfStatement[7048-7113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6360-6401]:Block[7072-7113]"
  }, {
    "left" : "allBundles.add(mainBundle);",
    "right" : "allBundles.add(mainBundle);",
    "info" : "ExpressionStatement[6368-6395]:ExpressionStatement[7080-7107]"
  }, {
    "left" : "boolean needCombining = false;",
    "right" : "boolean needCombining = false;",
    "info" : "VariableDeclarationStatement[6406-6436]:VariableDeclarationStatement[7118-7148]"
  }, {
    "left" : "for (PropertiesFile file : createdFiles)",
    "right" : "for (PropertiesFile file : createdFiles)",
    "info" : "EnhancedForStatement[6441-6717]:EnhancedForStatement[7153-7429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6482-6717]:Block[7194-7429]"
  }, {
    "left" : "final ResourceBundle rb = file.getResourceBundle();",
    "right" : "final ResourceBundle rb = file.getResourceBundle();",
    "info" : "VariableDeclarationStatement[6490-6541]:VariableDeclarationStatement[7202-7253]"
  }, {
    "left" : "if (mainBundle == null)",
    "right" : "if (mainBundle == null)",
    "info" : "IfStatement[6548-6685]:IfStatement[7260-7397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6572-6606]:Block[7284-7318]"
  }, {
    "left" : "mainBundle = rb;",
    "right" : "mainBundle = rb;",
    "info" : "ExpressionStatement[6582-6598]:ExpressionStatement[7294-7310]"
  }, {
    "left" : "if (!mainBundle.equals(rb))",
    "right" : "if (!mainBundle.equals(rb))",
    "info" : "IfStatement[6618-6685]:IfStatement[7330-7397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6646-6685]:Block[7358-7397]"
  }, {
    "left" : "needCombining = true;",
    "right" : "needCombining = true;",
    "info" : "ExpressionStatement[6656-6677]:ExpressionStatement[7368-7389]"
  }, {
    "left" : "allBundles.add(rb);",
    "right" : "allBundles.add(rb);",
    "info" : "ExpressionStatement[6692-6711]:ExpressionStatement[7404-7423]"
  }, {
    "left" : "if (needCombining)",
    "right" : "if (needCombining)",
    "info" : "IfStatement[6723-7260]:IfStatement[7435-7972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6742-7260]:Block[7454-7972]"
  }, {
    "left" : "final List<PropertiesFile> toCombine = new ArrayList<PropertiesFile>(createdFiles);",
    "right" : "final List<PropertiesFile> toCombine = new ArrayList<PropertiesFile>(createdFiles);",
    "info" : "VariableDeclarationStatement[6750-6833]:VariableDeclarationStatement[7462-7545]"
  }, {
    "left" : "final String baseName = getBaseName();",
    "right" : "final String baseName = getBaseName();",
    "info" : "VariableDeclarationStatement[6840-6878]:VariableDeclarationStatement[7552-7590]"
  }, {
    "left" : "if (myResourceBundle != null)",
    "right" : "if (myResourceBundle != null)",
    "info" : "IfStatement[6885-6989]:IfStatement[7597-7701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6915-6989]:Block[7627-7701]"
  }, {
    "left" : "toCombine.addAll(myResourceBundle.getPropertiesFiles());",
    "right" : "toCombine.addAll(myResourceBundle.getPropertiesFiles());",
    "info" : "ExpressionStatement[6925-6981]:ExpressionStatement[7637-7693]"
  }, {
    "left" : "ResourceBundleManager manager = ResourceBundleManager.getInstance(mainBundle.getProject());",
    "right" : "ResourceBundleManager manager = ResourceBundleManager.getInstance(mainBundle.getProject());",
    "info" : "VariableDeclarationStatement[6996-7087]:VariableDeclarationStatement[7708-7799]"
  }, {
    "left" : "for (ResourceBundle bundle : allBundles)",
    "right" : "for (ResourceBundle bundle : allBundles)",
    "info" : "EnhancedForStatement[7094-7194]:EnhancedForStatement[7806-7906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7135-7194]:Block[7847-7906]"
  }, {
    "left" : "manager.dissociateResourceBundle(bundle);",
    "right" : "manager.dissociateResourceBundle(bundle);",
    "info" : "ExpressionStatement[7145-7186]:ExpressionStatement[7857-7898]"
  }, {
    "left" : "manager.combineToResourceBundle(toCombine, baseName);",
    "right" : "manager.combineToResourceBundle(toCombine, baseName);",
    "info" : "ExpressionStatement[7201-7254]:ExpressionStatement[7913-7966]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7268-7275]:Modifier[7980-7987]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7276-7282]:SimpleType[7988-7994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7297-7418]:Block[8009-8130]"
  }, {
    "left" : "return myResourceBundle == null ? myResourceBundleBaseNameTextField.getText() : myResourceBundle.getBaseName();",
    "right" : "return myResourceBundle == null ? myResourceBundleBaseNameTextField.getText() : myResourceBundle.getBaseName();",
    "info" : "ReturnStatement[7303-7414]:ReturnStatement[8015-8126]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7422-7429]:Modifier[8134-8141]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7430-7436]:SimpleType[8142-8148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7470-8344]:Block[8182-9056]"
  }, {
    "left" : "final String name = getBaseName();",
    "right" : "final String name = getBaseName();",
    "info" : "VariableDeclarationStatement[7476-7510]:VariableDeclarationStatement[8188-8222]"
  }, {
    "left" : "if (name.isEmpty())",
    "right" : "if (name.isEmpty())",
    "info" : "IfStatement[7515-7577]:IfStatement[8227-8289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7535-7577]:Block[8247-8289]"
  }, {
    "left" : "return \"Base name is empty\";",
    "right" : "return \"Base name is empty\";",
    "info" : "ReturnStatement[7543-7571]:ReturnStatement[8255-8283]"
  }, {
    "left" : "final Set<String> suffixes = ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return name + \"_\" + locale.toString() + \".properties\";\n      }\n    });",
    "right" : "final Set<String> suffixes = ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return name + \"_\" + locale.toString() + \".properties\";\n      }\n    });",
    "info" : "VariableDeclarationStatement[7582-7828]:VariableDeclarationStatement[8294-8540]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7699-7708]:MarkerAnnotation[8411-8420]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7715-7721]:Modifier[8427-8433]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7722-7728]:SimpleType[8434-8440]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[7733-7746]:SingleVariableDeclaration[8445-8458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7748-7820]:Block[8460-8532]"
  }, {
    "left" : "return name + \"_\" + locale.toString() + \".properties\";",
    "right" : "return name + \"_\" + locale.toString() + \".properties\";",
    "info" : "ReturnStatement[7758-7812]:ReturnStatement[8470-8524]"
  }, {
    "left" : "if (suffixes.isEmpty())",
    "right" : "if (suffixes.isEmpty())",
    "info" : "IfStatement[7833-7897]:IfStatement[8545-8609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7857-7897]:Block[8569-8609]"
  }, {
    "left" : "return \"No locales added\";",
    "right" : "return \"No locales added\";",
    "info" : "ReturnStatement[7865-7891]:ReturnStatement[8577-8603]"
  }, {
    "left" : "for (PsiElement element : myDirectory.getChildren())",
    "right" : "for (PsiElement element : myDirectory.getChildren())",
    "info" : "EnhancedForStatement[7902-8323]:EnhancedForStatement[8614-9035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7955-8323]:Block[8667-9035]"
  }, {
    "left" : "if (element instanceof PsiFile)",
    "right" : "if (element instanceof PsiFile)",
    "info" : "IfStatement[7963-8317]:IfStatement[8675-9029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7995-8317]:Block[8707-9029]"
  }, {
    "left" : "if (element instanceof PropertiesFile)",
    "right" : "if (element instanceof PropertiesFile)",
    "info" : "IfStatement[8005-8309]:IfStatement[8717-9021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8044-8309]:Block[8756-9021]"
  }, {
    "left" : "PropertiesFile propertiesFile = (PropertiesFile)element;",
    "right" : "PropertiesFile propertiesFile = (PropertiesFile)element;",
    "info" : "VariableDeclarationStatement[8056-8112]:VariableDeclarationStatement[8768-8824]"
  }, {
    "left" : "final String propertiesFileName = propertiesFile.getName();",
    "right" : "final String propertiesFileName = propertiesFile.getName();",
    "info" : "VariableDeclarationStatement[8123-8182]:VariableDeclarationStatement[8835-8894]"
  }, {
    "left" : "if (suffixes.contains(propertiesFileName))",
    "right" : "if (suffixes.contains(propertiesFileName))",
    "info" : "IfStatement[8193-8299]:IfStatement[8905-9011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8236-8299]:Block[8948-9011]"
  }, {
    "left" : "return \"Some of files already exist\";",
    "right" : "return \"Some of files already exist\";",
    "info" : "ReturnStatement[8250-8287]:ReturnStatement[8962-8999]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8328-8340]:ReturnStatement[9040-9052]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8348-8354]:Modifier[9060-9066]"
  }, {
    "left" : "JPanel",
    "right" : "JPanel",
    "info" : "SimpleType[8355-8361]:SimpleType[9067-9073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8373-8398]:Block[9085-9110]"
  }, {
    "left" : "return myPanel;",
    "right" : "return myPanel;",
    "info" : "ReturnStatement[8379-8394]:ReturnStatement[9091-9106]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[8402-8411]:MarkerAnnotation[9114-9123]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8414-8421]:Modifier[9126-9133]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8422-8428]:Modifier[9134-9140]"
  }, {
    "left" : "List<Locale>",
    "right" : "List<Locale>",
    "info" : "ParameterizedType[8429-8441]:ParameterizedType[9141-9153]"
  }, {
    "left" : "final String rawLocales",
    "right" : "final String rawLocales",
    "info" : "SingleVariableDeclaration[8467-8490]:SingleVariableDeclaration[9179-9202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8492-9037]:Block[9204-9749]"
  }, {
    "left" : "if (rawLocales.isEmpty())",
    "right" : "if (rawLocales.isEmpty())",
    "info" : "IfStatement[8498-8569]:IfStatement[9210-9281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8524-8569]:Block[9236-9281]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[8532-8563]:ReturnStatement[9244-9275]"
  }, {
    "left" : "final String[] splitRawLocales = rawLocales.split(\",\");",
    "right" : "final String[] splitRawLocales = rawLocales.split(\",\");",
    "info" : "VariableDeclarationStatement[8574-8629]:VariableDeclarationStatement[9286-9341]"
  }, {
    "left" : "final List<Locale> locales = new ArrayList<Locale>(splitRawLocales.length);",
    "right" : "final List<Locale> locales = new ArrayList<Locale>(splitRawLocales.length);",
    "info" : "VariableDeclarationStatement[8634-8709]:VariableDeclarationStatement[9346-9421]"
  }, {
    "left" : "for (String rawLocale : splitRawLocales)",
    "right" : "for (String rawLocale : splitRawLocales)",
    "info" : "EnhancedForStatement[8715-9013]:EnhancedForStatement[9427-9725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8756-9013]:Block[9468-9725]"
  }, {
    "left" : "final Locale locale = PropertiesUtil.getLocale(\"_\" + rawLocale + \".properties\");",
    "right" : "final Locale locale = PropertiesUtil.getLocale(\"_\" + rawLocale + \".properties\");",
    "info" : "VariableDeclarationStatement[8764-8844]:VariableDeclarationStatement[9476-9556]"
  }, {
    "left" : "if (locale == PropertiesUtil.DEFAULT_LOCALE)",
    "right" : "if (locale == PropertiesUtil.DEFAULT_LOCALE)",
    "info" : "IfStatement[8851-9007]:IfStatement[9563-9719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8896-8926]:Block[9608-9638]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8906-8918]:ReturnStatement[9618-9630]"
  }, {
    "left" : "if (!locales.contains(locale))",
    "right" : "if (!locales.contains(locale))",
    "info" : "IfStatement[8938-9007]:IfStatement[9650-9719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8969-9007]:Block[9681-9719]"
  }, {
    "left" : "locales.add(locale);",
    "right" : "locales.add(locale);",
    "info" : "ExpressionStatement[8979-8999]:ExpressionStatement[9691-9711]"
  }, {
    "left" : "return locales;",
    "right" : "return locales;",
    "info" : "ReturnStatement[9018-9033]:ReturnStatement[9730-9745]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[9041-9071]:SingleMemberAnnotation[9753-9783]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9074-9081]:Modifier[9786-9793]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9082-9086]:PrimitiveType[9794-9798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9108-14346]:Block[9820-15058]"
  }, {
    "left" : "final JBList projectExistLocalesList = new JBList();",
    "right" : "final JBList projectExistLocalesList = new JBList();",
    "info" : "VariableDeclarationStatement[9114-9166]:VariableDeclarationStatement[9826-9878]"
  }, {
    "left" : "final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();",
    "right" : "final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();",
    "info" : "VariableDeclarationStatement[9171-9255]:VariableDeclarationStatement[9883-9967]"
  }, {
    "left" : "projectExistLocalesList.setModel(existLocalesListModel);",
    "right" : "projectExistLocalesList.setModel(existLocalesListModel);",
    "info" : "ExpressionStatement[9260-9316]:ExpressionStatement[9972-10028]"
  }, {
    "left" : "projectExistLocalesList.setCellRenderer(getLocaleRenderer());",
    "right" : "projectExistLocalesList.setCellRenderer(getLocaleRenderer());",
    "info" : "ExpressionStatement[9321-9382]:ExpressionStatement[10033-10094]"
  }, {
    "left" : "myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();",
    "right" : "myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();",
    "info" : "ExpressionStatement[9387-9554]:ExpressionStatement[10099-10266]"
  }, {
    "left" : "myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));",
    "right" : "myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));",
    "info" : "ExpressionStatement[9559-9659]:ExpressionStatement[10271-10371]"
  }, {
    "left" : "final JBList localesToAddList = new JBList();",
    "right" : "final JBList localesToAddList = new JBList();",
    "info" : "VariableDeclarationStatement[9665-9710]:VariableDeclarationStatement[10377-10422]"
  }, {
    "left" : "final List<Locale> locales;",
    "right" : "final List<Locale> locales;",
    "info" : "VariableDeclarationStatement[9716-9743]:VariableDeclarationStatement[10428-10455]"
  }, {
    "left" : "final List<Locale> restrictedLocales;",
    "right" : "final List<Locale> restrictedLocales;",
    "info" : "VariableDeclarationStatement[9748-9785]:VariableDeclarationStatement[10460-10497]"
  }, {
    "left" : "if (myResourceBundle == null)",
    "right" : "if (myResourceBundle == null)",
    "info" : "IfStatement[9790-10272]:IfStatement[10502-10984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9820-9952]:Block[10532-10664]"
  }, {
    "left" : "locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);",
    "right" : "locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[9828-9895]:ExpressionStatement[10540-10607]"
  }, {
    "left" : "restrictedLocales = Collections.emptyList();",
    "right" : "restrictedLocales = Collections.emptyList();",
    "info" : "ExpressionStatement[9902-9946]:ExpressionStatement[10614-10658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9958-10272]:Block[10670-10984]"
  }, {
    "left" : "locales = Collections.emptyList();",
    "right" : "locales = Collections.emptyList();",
    "info" : "ExpressionStatement[9966-10000]:ExpressionStatement[10678-10712]"
  }, {
    "left" : "restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });",
    "right" : "restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });",
    "info" : "ExpressionStatement[10007-10266]:ExpressionStatement[10719-10978]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10133-10142]:MarkerAnnotation[10845-10854]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10151-10157]:Modifier[10863-10869]"
  }, {
    "left" : "Locale",
    "right" : "Locale",
    "info" : "SimpleType[10158-10164]:SimpleType[10870-10876]"
  }, {
    "left" : "PropertiesFile propertiesFile",
    "right" : "PropertiesFile propertiesFile",
    "info" : "SingleVariableDeclaration[10169-10198]:SingleVariableDeclaration[10881-10910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10200-10256]:Block[10912-10968]"
  }, {
    "left" : "return propertiesFile.getLocale();",
    "right" : "return propertiesFile.getLocale();",
    "info" : "ReturnStatement[10212-10246]:ReturnStatement[10924-10958]"
  }, {
    "left" : "myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };",
    "right" : "myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };",
    "info" : "ExpressionStatement[10277-10774]:ExpressionStatement[10989-11486]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10343-10352]:MarkerAnnotation[11055-11064]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10359-10365]:Modifier[11071-11077]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10366-10370]:PrimitiveType[11078-11082]"
  }, {
    "left" : "@NotNull List<? extends Locale> elements",
    "right" : "@NotNull List<? extends Locale> elements",
    "info" : "SingleVariableDeclaration[10375-10415]:SingleVariableDeclaration[11087-11127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10417-10767]:Block[11129-11479]"
  }, {
    "left" : "final List<Locale> currentItems = getItems();",
    "right" : "final List<Locale> currentItems = getItems();",
    "info" : "VariableDeclarationStatement[10427-10472]:VariableDeclarationStatement[11139-11184]"
  }, {
    "left" : "elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });",
    "right" : "elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });",
    "info" : "ExpressionStatement[10481-10730]:ExpressionStatement[11193-11442]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10559-10568]:MarkerAnnotation[11271-11280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10579-10585]:Modifier[11291-11297]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10586-10593]:PrimitiveType[11298-11305]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[10600-10613]:SingleVariableDeclaration[11312-11325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10615-10718]:Block[11327-11430]"
  }, {
    "left" : "return !restrictedLocales.contains(locale) && !currentItems.contains(locale);",
    "right" : "return !restrictedLocales.contains(locale) && !currentItems.contains(locale);",
    "info" : "ReturnStatement[10629-10706]:ReturnStatement[11341-11418]"
  }, {
    "left" : "super.add(elements);",
    "right" : "super.add(elements);",
    "info" : "ExpressionStatement[10739-10759]:ExpressionStatement[11451-11471]"
  }, {
    "left" : "localesToAddList.setModel(myLocalesModel);",
    "right" : "localesToAddList.setModel(myLocalesModel);",
    "info" : "ExpressionStatement[10779-10821]:ExpressionStatement[11491-11533]"
  }, {
    "left" : "localesToAddList.setCellRenderer(getLocaleRenderer());",
    "right" : "localesToAddList.setCellRenderer(getLocaleRenderer());",
    "info" : "ExpressionStatement[10826-10880]:ExpressionStatement[11538-11592]"
  }, {
    "left" : "localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });",
    "right" : "localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });",
    "info" : "ExpressionStatement[10885-11067]:ExpressionStatement[11597-11779]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10946-10955]:MarkerAnnotation[11658-11667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10962-10968]:Modifier[11674-11680]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10969-10973]:PrimitiveType[11681-11685]"
  }, {
    "left" : "FocusEvent e",
    "right" : "FocusEvent e",
    "info" : "SingleVariableDeclaration[10986-10998]:SingleVariableDeclaration[11698-11710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11000-11059]:Block[11712-11771]"
  }, {
    "left" : "projectExistLocalesList.clearSelection();",
    "right" : "projectExistLocalesList.clearSelection();",
    "info" : "ExpressionStatement[11010-11051]:ExpressionStatement[11722-11763]"
  }, {
    "left" : "projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });",
    "right" : "projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });",
    "info" : "ExpressionStatement[11072-11254]:ExpressionStatement[11784-11966]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11140-11149]:MarkerAnnotation[11852-11861]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11156-11162]:Modifier[11868-11874]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11163-11167]:PrimitiveType[11875-11879]"
  }, {
    "left" : "FocusEvent e",
    "right" : "FocusEvent e",
    "info" : "SingleVariableDeclaration[11180-11192]:SingleVariableDeclaration[11892-11904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11194-11246]:Block[11906-11958]"
  }, {
    "left" : "localesToAddList.clearSelection();",
    "right" : "localesToAddList.clearSelection();",
    "info" : "ExpressionStatement[11204-11238]:ExpressionStatement[11916-11950]"
  }, {
    "left" : "myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();",
    "right" : "myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();",
    "info" : "ExpressionStatement[11260-12708]:ExpressionStatement[11972-13420]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11387-11396]:MarkerAnnotation[12099-12108]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11403-11409]:Modifier[12115-12121]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11410-11414]:PrimitiveType[12122-12126]"
  }, {
    "left" : "AnActionButton button",
    "right" : "AnActionButton button",
    "info" : "SingleVariableDeclaration[11419-11440]:SingleVariableDeclaration[12131-12152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11442-12614]:Block[12154-13326]"
  }, {
    "left" : "final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });",
    "right" : "final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });",
    "info" : "VariableDeclarationStatement[11452-12393]:VariableDeclarationStatement[12164-13105]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[11894-11903]:MarkerAnnotation[12606-12615]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11916-11925]:MarkerAnnotation[12628-12637]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11938-11944]:Modifier[12650-12656]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[11945-11951]:SimpleType[12657-12663]"
  }, {
    "left" : "String inputString",
    "right" : "String inputString",
    "info" : "SingleVariableDeclaration[11965-11983]:SingleVariableDeclaration[12677-12695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11985-12073]:Block[12697-12785]"
  }, {
    "left" : "return checkInput(inputString) ? null : \"Invalid locales\";",
    "right" : "return checkInput(inputString) ? null : \"Invalid locales\";",
    "info" : "ReturnStatement[12001-12059]:ReturnStatement[12713-12771]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12087-12096]:MarkerAnnotation[12799-12808]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12109-12115]:Modifier[12821-12827]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12116-12123]:PrimitiveType[12828-12835]"
  }, {
    "left" : "String inputString",
    "right" : "String inputString",
    "info" : "SingleVariableDeclaration[12135-12153]:SingleVariableDeclaration[12847-12865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12155-12238]:Block[12867-12950]"
  }, {
    "left" : "return extractLocalesFromString(inputString) != null;",
    "right" : "return extractLocalesFromString(inputString) != null;",
    "info" : "ReturnStatement[12171-12224]:ReturnStatement[12883-12936]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12252-12261]:MarkerAnnotation[12964-12973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12274-12280]:Modifier[12986-12992]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12281-12288]:PrimitiveType[12993-13000]"
  }, {
    "left" : "String inputString",
    "right" : "String inputString",
    "info" : "SingleVariableDeclaration[12298-12316]:SingleVariableDeclaration[13010-13028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12318-12379]:Block[13030-13091]"
  }, {
    "left" : "return checkInput(inputString);",
    "right" : "return checkInput(inputString);",
    "info" : "ReturnStatement[12334-12365]:ReturnStatement[13046-13077]"
  }, {
    "left" : "if (rawAddedLocales != null)",
    "right" : "if (rawAddedLocales != null)",
    "info" : "IfStatement[12402-12606]:IfStatement[13114-13318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12431-12606]:Block[13143-13318]"
  }, {
    "left" : "final List<Locale> locales = extractLocalesFromString(rawAddedLocales);",
    "right" : "final List<Locale> locales = extractLocalesFromString(rawAddedLocales);",
    "info" : "VariableDeclarationStatement[12443-12514]:VariableDeclarationStatement[13155-13226]"
  }, {
    "left" : "LOG.assertTrue(locales != null);",
    "right" : "LOG.assertTrue(locales != null);",
    "info" : "ExpressionStatement[12525-12557]:ExpressionStatement[13237-13269]"
  }, {
    "left" : "myLocalesModel.add(locales);",
    "right" : "myLocalesModel.add(locales);",
    "info" : "ExpressionStatement[12568-12596]:ExpressionStatement[13280-13308]"
  }, {
    "left" : "myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));",
    "right" : "myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));",
    "info" : "ExpressionStatement[12713-12809]:ExpressionStatement[13425-13521]"
  }, {
    "left" : "myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);",
    "right" : "myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);",
    "info" : "ExpressionStatement[12815-12882]:ExpressionStatement[13527-13594]"
  }, {
    "left" : "new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);",
    "right" : "new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);",
    "info" : "ExpressionStatement[12887-13386]:ExpressionStatement[13599-14098]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12914-12923]:MarkerAnnotation[13626-13635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12930-12936]:Modifier[13642-13648]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12937-12944]:PrimitiveType[13649-13656]"
  }, {
    "left" : "@NotNull MouseEvent event",
    "right" : "@NotNull MouseEvent event",
    "info" : "SingleVariableDeclaration[12953-12978]:SingleVariableDeclaration[13665-13690]"
  }, {
    "left" : "int clickCount",
    "right" : "int clickCount",
    "info" : "SingleVariableDeclaration[12980-12994]:SingleVariableDeclaration[13692-13706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12996-13341]:Block[13708-14053]"
  }, {
    "left" : "if (clickCount == 1)",
    "right" : "if (clickCount == 1)",
    "info" : "IfStatement[13006-13311]:IfStatement[13718-14023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13027-13311]:Block[13739-14023]"
  }, {
    "left" : "myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));",
    "right" : "myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));",
    "info" : "ExpressionStatement[13039-13278]:ExpressionStatement[13751-13990]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13166-13175]:MarkerAnnotation[13878-13887]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13188-13194]:Modifier[13900-13906]"
  }, {
    "left" : "Locale",
    "right" : "Locale",
    "info" : "SimpleType[13195-13201]:SimpleType[13907-13913]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[13206-13214]:SingleVariableDeclaration[13918-13926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13216-13263]:Block[13928-13975]"
  }, {
    "left" : "return (Locale)o;",
    "right" : "return (Locale)o;",
    "info" : "ReturnStatement[13232-13249]:ReturnStatement[13944-13961]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13289-13301]:ReturnStatement[14001-14013]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13320-13333]:ReturnStatement[14032-14045]"
  }, {
    "left" : "projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });",
    "right" : "projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });",
    "info" : "ExpressionStatement[13392-13960]:ExpressionStatement[14104-14672]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13477-13486]:MarkerAnnotation[14189-14198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13493-13499]:Modifier[14205-14211]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13500-13504]:PrimitiveType[14212-14216]"
  }, {
    "left" : "ListSelectionEvent e",
    "right" : "ListSelectionEvent e",
    "info" : "SingleVariableDeclaration[13518-13538]:SingleVariableDeclaration[14230-14250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13540-13952]:Block[14252-14664]"
  }, {
    "left" : "final List<Locale> currentItems = myLocalesModel.getItems();",
    "right" : "final List<Locale> currentItems = myLocalesModel.getItems();",
    "info" : "VariableDeclarationStatement[13550-13610]:VariableDeclarationStatement[14262-14322]"
  }, {
    "left" : "for (Object o : projectExistLocalesList.getSelectedValues())",
    "right" : "for (Object o : projectExistLocalesList.getSelectedValues())",
    "info" : "EnhancedForStatement[13619-13890]:EnhancedForStatement[14331-14602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13680-13890]:Block[14392-14602]"
  }, {
    "left" : "Locale l = (Locale) o;",
    "right" : "Locale l = (Locale) o;",
    "info" : "VariableDeclarationStatement[13692-13714]:VariableDeclarationStatement[14404-14426]"
  }, {
    "left" : "if (!restrictedLocales.contains(l) && !currentItems.contains(l))",
    "right" : "if (!restrictedLocales.contains(l) && !currentItems.contains(l))",
    "info" : "IfStatement[13725-13880]:IfStatement[14437-14592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13790-13880]:Block[14502-14592]"
  }, {
    "left" : "myAddLocaleFromExistButton.setEnabled(true);",
    "right" : "myAddLocaleFromExistButton.setEnabled(true);",
    "info" : "ExpressionStatement[13804-13848]:ExpressionStatement[14516-14560]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[13861-13868]:ReturnStatement[14573-14580]"
  }, {
    "left" : "myAddLocaleFromExistButton.setEnabled(false);",
    "right" : "myAddLocaleFromExistButton.setEnabled(false);",
    "info" : "ExpressionStatement[13899-13944]:ExpressionStatement[14611-14656]"
  }, {
    "left" : "myAddLocaleFromExistButton.setEnabled(false);",
    "right" : "myAddLocaleFromExistButton.setEnabled(false);",
    "info" : "ExpressionStatement[13965-14010]:ExpressionStatement[14677-14722]"
  }, {
    "left" : "myAddAllButton = new JButton(\"Add All\");",
    "right" : "myAddAllButton = new JButton(\"Add All\");",
    "info" : "ExpressionStatement[14016-14056]:ExpressionStatement[14728-14768]"
  }, {
    "left" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);",
    "right" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);",
    "info" : "ExpressionStatement[14061-14342]:ExpressionStatement[14773-15054]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14089-14098]:MarkerAnnotation[14801-14810]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14105-14111]:Modifier[14817-14823]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14112-14119]:PrimitiveType[14824-14831]"
  }, {
    "left" : "@NotNull MouseEvent event",
    "right" : "@NotNull MouseEvent event",
    "info" : "SingleVariableDeclaration[14128-14153]:SingleVariableDeclaration[14840-14865]"
  }, {
    "left" : "int clickCount",
    "right" : "int clickCount",
    "info" : "SingleVariableDeclaration[14155-14169]:SingleVariableDeclaration[14867-14881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14171-14309]:Block[14883-15021]"
  }, {
    "left" : "if (clickCount == 1)",
    "right" : "if (clickCount == 1)",
    "info" : "IfStatement[14181-14279]:IfStatement[14893-14991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14202-14279]:Block[14914-14991]"
  }, {
    "left" : "myLocalesModel.add(existLocalesListModel.getLocales());",
    "right" : "myLocalesModel.add(existLocalesListModel.getLocales());",
    "info" : "ExpressionStatement[14214-14269]:ExpressionStatement[14926-14981]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14288-14301]:ReturnStatement[15000-15013]"
  }, {
    "left" : "@NotNull",
    "right" : "@NotNull",
    "info" : "MarkerAnnotation[14350-14358]:MarkerAnnotation[15062-15070]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14361-14368]:Modifier[15073-15080]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14369-14375]:Modifier[15081-15087]"
  }, {
    "left" : "ColoredListCellRenderer<Locale>",
    "right" : "ColoredListCellRenderer<Locale>",
    "info" : "ParameterizedType[14376-14407]:ParameterizedType[15088-15119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14428-14890]:Block[15140-15602]"
  }, {
    "left" : "return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };",
    "right" : "return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };",
    "info" : "ReturnStatement[14434-14886]:ReturnStatement[15146-15598]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14487-14496]:MarkerAnnotation[15199-15208]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[14503-14512]:Modifier[15215-15224]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14513-14517]:PrimitiveType[15225-15229]"
  }, {
    "left" : "JList list",
    "right" : "JList list",
    "info" : "SingleVariableDeclaration[14540-14550]:SingleVariableDeclaration[15252-15262]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[14552-14565]:SingleVariableDeclaration[15264-15277]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[14567-14576]:SingleVariableDeclaration[15279-15288]"
  }, {
    "left" : "boolean selected",
    "right" : "boolean selected",
    "info" : "SingleVariableDeclaration[14578-14594]:SingleVariableDeclaration[15290-15306]"
  }, {
    "left" : "boolean hasFocus",
    "right" : "boolean hasFocus",
    "info" : "SingleVariableDeclaration[14596-14612]:SingleVariableDeclaration[15308-15324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14614-14879]:Block[15326-15591]"
  }, {
    "left" : "if (PropertiesUtil.DEFAULT_LOCALE == locale)",
    "right" : "if (PropertiesUtil.DEFAULT_LOCALE == locale)",
    "info" : "IfStatement[14624-14871]:IfStatement[15336-15583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14669-14716]:Block[15381-15428]"
  }, {
    "left" : "append(\"Default locale\");",
    "right" : "append(\"Default locale\");",
    "info" : "ExpressionStatement[14681-14706]:ExpressionStatement[15393-15418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14722-14871]:Block[15434-15583]"
  }, {
    "left" : "append(locale.toString());",
    "right" : "append(locale.toString());",
    "info" : "ExpressionStatement[14734-14760]:ExpressionStatement[15446-15472]"
  }, {
    "left" : "append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);",
    "right" : "append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);",
    "info" : "ExpressionStatement[14771-14861]:ExpressionStatement[15483-15573]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14894-14901]:Modifier[15606-15613]"
  }, {
    "left" : "AbstractListModel",
    "right" : "AbstractListModel",
    "info" : "SimpleType[14940-14957]:SimpleType[15652-15669]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15007-15014]:Modifier[15719-15726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15041-15717]:Block[15753-16429]"
  }, {
    "left" : "myLocales = new ArrayList<Locale>();",
    "right" : "myLocales = new ArrayList<Locale>();",
    "info" : "ExpressionStatement[15049-15085]:ExpressionStatement[15761-15797]"
  }, {
    "left" : "myLocales.add(PropertiesUtil.DEFAULT_LOCALE);",
    "right" : "myLocales.add(PropertiesUtil.DEFAULT_LOCALE);",
    "info" : "ExpressionStatement[15092-15137]:ExpressionStatement[15804-15849]"
  }, {
    "left" : "PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);",
    "right" : "PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);",
    "info" : "ExpressionStatement[15144-15657]:ExpressionStatement[15856-16369]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15300-15309]:MarkerAnnotation[16012-16021]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15318-15324]:Modifier[16030-16036]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15325-15332]:PrimitiveType[16037-16044]"
  }, {
    "left" : "String baseName",
    "right" : "String baseName",
    "info" : "SingleVariableDeclaration[15341-15356]:SingleVariableDeclaration[16053-16068]"
  }, {
    "left" : "PropertiesFile propertiesFile",
    "right" : "PropertiesFile propertiesFile",
    "info" : "SingleVariableDeclaration[15358-15387]:SingleVariableDeclaration[16070-16099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15389-15618]:Block[16101-16330]"
  }, {
    "left" : "final Locale locale = propertiesFile.getLocale();",
    "right" : "final Locale locale = propertiesFile.getLocale();",
    "info" : "VariableDeclarationStatement[15401-15450]:VariableDeclarationStatement[16113-16162]"
  }, {
    "left" : "if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale))",
    "right" : "if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale))",
    "info" : "IfStatement[15461-15585]:IfStatement[16173-16297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15537-15585]:Block[16249-16297]"
  }, {
    "left" : "myLocales.add(locale);",
    "right" : "myLocales.add(locale);",
    "info" : "ExpressionStatement[15551-15573]:ExpressionStatement[16263-16285]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15596-15608]:ReturnStatement[16308-16320]"
  }, {
    "left" : "Collections.sort(myLocales, LOCALE_COMPARATOR);",
    "right" : "Collections.sort(myLocales, LOCALE_COMPARATOR);",
    "info" : "ExpressionStatement[15664-15711]:ExpressionStatement[16376-16423]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15723-15732]:MarkerAnnotation[16435-16444]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15737-15743]:Modifier[16449-16455]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15744-15747]:PrimitiveType[16456-16459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15758-15796]:Block[16470-16508]"
  }, {
    "left" : "return myLocales.size();",
    "right" : "return myLocales.size();",
    "info" : "ReturnStatement[15766-15790]:ReturnStatement[16478-16502]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15802-15811]:MarkerAnnotation[16514-16523]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15816-15822]:Modifier[16528-16534]"
  }, {
    "left" : "Locale",
    "right" : "Locale",
    "info" : "SimpleType[15823-15829]:SimpleType[16535-16541]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[15843-15852]:SingleVariableDeclaration[16555-16564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15854-15896]:Block[16566-16608]"
  }, {
    "left" : "return myLocales.get(index);",
    "right" : "return myLocales.get(index);",
    "info" : "ReturnStatement[15862-15890]:ReturnStatement[16574-16602]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15902-15908]:Modifier[16614-16620]"
  }, {
    "left" : "List<Locale>",
    "right" : "List<Locale>",
    "info" : "ParameterizedType[15909-15921]:ParameterizedType[16621-16633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15935-15966]:Block[16647-16678]"
  }, {
    "left" : "return myLocales;",
    "right" : "return myLocales;",
    "info" : "ReturnStatement[15943-15960]:ReturnStatement[16655-16672]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[15974-15983]:MarkerAnnotation[16686-16695]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15986-15992]:Modifier[16698-16704]"
  }, {
    "left" : "PsiDirectory",
    "right" : "PsiDirectory",
    "info" : "SimpleType[15993-16005]:SimpleType[16705-16717]"
  }, {
    "left" : "ResourceBundle resourceBundle",
    "right" : "ResourceBundle resourceBundle",
    "info" : "SingleVariableDeclaration[16042-16071]:SingleVariableDeclaration[16754-16783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16073-16568]:Block[16785-17280]"
  }, {
    "left" : "PsiDirectory containingDirectory = null;",
    "right" : "PsiDirectory containingDirectory = null;",
    "info" : "VariableDeclarationStatement[16079-16119]:VariableDeclarationStatement[16791-16831]"
  }, {
    "left" : "for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles())",
    "right" : "for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles())",
    "info" : "EnhancedForStatement[16124-16483]:EnhancedForStatement[16836-17195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16198-16483]:Block[16910-17195]"
  }, {
    "left" : "if (containingDirectory == null)",
    "right" : "if (containingDirectory == null)",
    "info" : "IfStatement[16206-16477]:IfStatement[16918-17189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16239-16339]:Block[16951-17051]"
  }, {
    "left" : "containingDirectory = propertiesFile.getContainingFile().getContainingDirectory();",
    "right" : "containingDirectory = propertiesFile.getContainingFile().getContainingDirectory();",
    "info" : "ExpressionStatement[16249-16331]:ExpressionStatement[16961-17043]"
  }, {
    "left" : "if (!containingDirectory.isEquivalentTo(propertiesFile.getContainingFile().getContainingDirectory()))",
    "right" : "if (!containingDirectory.isEquivalentTo(propertiesFile.getContainingFile().getContainingDirectory()))",
    "info" : "IfStatement[16345-16477]:IfStatement[17057-17189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16447-16477]:Block[17159-17189]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[16457-16469]:ReturnStatement[17169-17181]"
  }, {
    "left" : "LOG.assertTrue(containingDirectory != null);",
    "right" : "LOG.assertTrue(containingDirectory != null);",
    "info" : "ExpressionStatement[16488-16532]:ExpressionStatement[17200-17244]"
  }, {
    "left" : "return containingDirectory;",
    "right" : "return containingDirectory;",
    "info" : "ReturnStatement[16537-16564]:ReturnStatement[17249-17276]"
  } ]
}