{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FastDateParser",
      "right" : "FastDateParser",
      "info" : "TypeDeclaration[1473-29984]:TypeDeclaration[1473-29709]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2608-2755]:FieldDeclaration[2608-2755]"
    }, {
      "left" : "private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=\n        new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);",
      "right" : "private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=\n        new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);",
      "info" : "FieldDeclaration[2761-2889]:FieldDeclaration[2761-2889]"
    }, {
      "left" : "static final Locale JAPANESE_IMPERIAL = new Locale(\"ja\",\"JP\",\"JP\");",
      "right" : "static final Locale JAPANESE_IMPERIAL = new Locale(\"ja\",\"JP\",\"JP\");",
      "info" : "FieldDeclaration[2895-2962]:FieldDeclaration[2895-2962]"
    }, {
      "left" : "private final String pattern;",
      "right" : "private final String pattern;",
      "info" : "FieldDeclaration[2991-3020]:FieldDeclaration[2991-3020]"
    }, {
      "left" : "private final TimeZone timeZone;",
      "right" : "private final TimeZone timeZone;",
      "info" : "FieldDeclaration[3025-3057]:FieldDeclaration[3025-3057]"
    }, {
      "left" : "private final Locale locale;",
      "right" : "private final Locale locale;",
      "info" : "FieldDeclaration[3062-3090]:FieldDeclaration[3062-3090]"
    }, {
      "left" : "private transient Pattern parsePattern;",
      "right" : "private transient Pattern parsePattern;",
      "info" : "FieldDeclaration[3118-3157]:FieldDeclaration[3118-3157]"
    }, {
      "left" : "private transient Strategy[] strategies;",
      "right" : "private transient Strategy[] strategies;",
      "info" : "FieldDeclaration[3162-3202]:FieldDeclaration[3162-3202]"
    }, {
      "left" : "private transient int thisYear;",
      "right" : "private transient int thisYear;",
      "info" : "FieldDeclaration[3207-3238]:FieldDeclaration[3207-3238]"
    }, {
      "left" : "private transient ConcurrentMap<Integer, KeyValue[]> nameValues;",
      "right" : "private transient ConcurrentMap<Integer, KeyValue[]> nameValues;",
      "info" : "FieldDeclaration[3243-3307]:FieldDeclaration[3243-3307]"
    }, {
      "left" : "private transient String currentFormatField;",
      "right" : "private transient String currentFormatField;",
      "info" : "FieldDeclaration[3364-3408]:FieldDeclaration[3364-3408]"
    }, {
      "left" : "private transient Strategy nextStrategy;",
      "right" : "private transient Strategy nextStrategy;",
      "info" : "FieldDeclaration[3413-3453]:FieldDeclaration[3413-3453]"
    }, {
      "left" : "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[3459-3902]:MethodDeclaration[3459-3902]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[3908-5473]:MethodDeclaration[3908-5473]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[5669-5741]:MethodDeclaration[5669-5741]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[5843-5919]:MethodDeclaration[5843-5919]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[6019-6089]:MethodDeclaration[6019-6089]"
    }, {
      "left" : "Pattern getParsePattern()",
      "right" : "Pattern getParsePattern()",
      "info" : "MethodDeclaration[6149-6211]:MethodDeclaration[6149-6211]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[6309-6832]:MethodDeclaration[6309-6832]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[6838-7098]:MethodDeclaration[6838-7098]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[7104-7351]:MethodDeclaration[7104-7351]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[7454-7932]:MethodDeclaration[7454-7932]"
    }, {
      "left" : "public Object parseObject(String source) throws ParseException",
      "right" : "public Object parseObject(String source) throws ParseException",
      "info" : "MethodDeclaration[8050-8164]:MethodDeclaration[8050-8164]"
    }, {
      "left" : "public Date parse(String source) throws ParseException",
      "right" : "public Date parse(String source) throws ParseException",
      "info" : "MethodDeclaration[8276-8944]:MethodDeclaration[8276-8944]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[9087-9203]:MethodDeclaration[9087-9203]"
    }, {
      "left" : "public Date parse(String source, ParsePosition pos)",
      "right" : "public Date parse(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[9340-9997]:MethodDeclaration[9340-9997]"
    }, {
      "left" : "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote)",
      "right" : "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote)",
      "info" : "MethodDeclaration[10112-11535]:MethodDeclaration[10112-11260]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "TypeDeclaration[11541-11935]:TypeDeclaration[11266-11660]"
    }, {
      "left" : "public String key;",
      "right" : "public String key;",
      "info" : "FieldDeclaration[11639-11657]:FieldDeclaration[11364-11382]"
    }, {
      "left" : "public int value;",
      "right" : "public int value;",
      "info" : "FieldDeclaration[11666-11683]:FieldDeclaration[11391-11408]"
    }, {
      "left" : "public KeyValue(String key, int value)",
      "right" : "public KeyValue(String key, int value)",
      "info" : "MethodDeclaration[11693-11929]:MethodDeclaration[11418-11654]"
    }, {
      "left" : "private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {\n        @Override\n        public int compare(KeyValue left, KeyValue right) {\n            return left.key.compareToIgnoreCase(right.key);\n        }\n    };",
      "right" : "private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {\n        @Override\n        public int compare(KeyValue left, KeyValue right) {\n            return left.key.compareToIgnoreCase(right.key);\n        }\n    };",
      "info" : "FieldDeclaration[11941-12246]:FieldDeclaration[11666-11971]"
    }, {
      "left" : "public int compare(KeyValue left, KeyValue right)",
      "right" : "public int compare(KeyValue left, KeyValue right)",
      "info" : "MethodDeclaration[12100-12239]:MethodDeclaration[11825-11964]"
    }, {
      "left" : "KeyValue[] getDisplayNames(int field)",
      "right" : "KeyValue[] getDisplayNames(int field)",
      "info" : "MethodDeclaration[12252-14228]:MethodDeclaration[11977-13953]"
    }, {
      "left" : "private String[] toArray(Map<String, Integer> era)",
      "right" : "private String[] toArray(Map<String, Integer> era)",
      "info" : "MethodDeclaration[14234-14687]:MethodDeclaration[13959-14412]"
    }, {
      "left" : "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues)",
      "right" : "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues)",
      "info" : "MethodDeclaration[14693-15296]:MethodDeclaration[14418-15021]"
    }, {
      "left" : "private static int count(String[] values)",
      "right" : "private static int count(String[] values)",
      "info" : "MethodDeclaration[15302-15784]:MethodDeclaration[15027-15509]"
    }, {
      "left" : "private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values)",
      "right" : "private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values)",
      "info" : "MethodDeclaration[15790-16489]:MethodDeclaration[15515-16214]"
    }, {
      "left" : "int adjustYear(int twoDigitYear)",
      "right" : "int adjustYear(int twoDigitYear)",
      "info" : "MethodDeclaration[16495-16918]:MethodDeclaration[16220-16643]"
    }, {
      "left" : "boolean isNextNumber()",
      "right" : "boolean isNextNumber()",
      "info" : "MethodDeclaration[16924-17119]:MethodDeclaration[16649-16844]"
    }, {
      "left" : "int getFieldWidth()",
      "right" : "int getFieldWidth()",
      "info" : "MethodDeclaration[17125-17327]:MethodDeclaration[16850-17052]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "TypeDeclaration[17333-18386]:TypeDeclaration[17058-18111]"
    }, {
      "left" : "boolean isNumber();",
      "right" : "boolean isNumber();",
      "info" : "MethodDeclaration[17453-17577]:MethodDeclaration[17178-17302]"
    }, {
      "left" : "void setCalendar(FastDateParser parser, Calendar cal, String value);",
      "right" : "void setCalendar(FastDateParser parser, Calendar cal, String value);",
      "info" : "MethodDeclaration[17586-17910]:MethodDeclaration[17311-17635]"
    }, {
      "left" : "boolean addRegex(FastDateParser parser, StringBuilder regex);",
      "right" : "boolean addRegex(FastDateParser parser, StringBuilder regex);",
      "info" : "MethodDeclaration[17919-18380]:MethodDeclaration[17644-18105]"
    }, {
      "left" : "private static final Pattern formatPattern= Pattern.compile(\n            \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");",
      "right" : "private static final Pattern formatPattern= Pattern.compile(\n            \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");",
      "info" : "FieldDeclaration[18392-18660]:FieldDeclaration[18117-18385]"
    }, {
      "left" : "private Strategy getStrategy(String formatField)",
      "right" : "private Strategy getStrategy(String formatField)",
      "info" : "MethodDeclaration[18666-20723]:MethodDeclaration[18391-20448]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "TypeDeclaration[20729-21871]:TypeDeclaration[20454-21596]"
    }, {
      "left" : "private final String formatField;",
      "right" : "private final String formatField;",
      "info" : "FieldDeclaration[20895-20928]:FieldDeclaration[20620-20653]"
    }, {
      "left" : "CopyQuotedStrategy(String formatField)",
      "right" : "CopyQuotedStrategy(String formatField)",
      "info" : "MethodDeclaration[20938-21189]:MethodDeclaration[20663-20914]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[21199-21469]:MethodDeclaration[20924-21194]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[21479-21702]:MethodDeclaration[21204-21427]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[21712-21865]:MethodDeclaration[21437-21590]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "TypeDeclaration[21877-23605]:TypeDeclaration[21602-23330]"
    }, {
      "left" : "private final int field;",
      "right" : "private final int field;",
      "info" : "FieldDeclaration[22024-22048]:FieldDeclaration[21749-21773]"
    }, {
      "left" : "TextStrategy(int field)",
      "right" : "TextStrategy(int field)",
      "info" : "MethodDeclaration[22058-22248]:MethodDeclaration[21783-21973]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[22258-22388]:MethodDeclaration[21983-22113]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[22398-22812]:MethodDeclaration[22123-22537]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[22822-23599]:MethodDeclaration[22547-23324]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "TypeDeclaration[23611-25003]:TypeDeclaration[23336-24728]"
    }, {
      "left" : "protected final int field;",
      "right" : "protected final int field;",
      "info" : "FieldDeclaration[23762-23788]:FieldDeclaration[23487-23513]"
    }, {
      "left" : "NumberStrategy(int field)",
      "right" : "NumberStrategy(int field)",
      "info" : "MethodDeclaration[23798-23993]:MethodDeclaration[23523-23718]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[24003-24132]:MethodDeclaration[23728-23857]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[24142-24537]:MethodDeclaration[23867-24262]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[24547-24761]:MethodDeclaration[24272-24486]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[24771-24997]:MethodDeclaration[24496-24722]"
    }, {
      "left" : "private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {\n        \n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int iValue= Integer.parseInt(value);\n            if(iValue<100) {\n                iValue= parser.adjustYear(iValue);\n            }\n            cal.set(Calendar.YEAR, iValue);\n        }\n    };",
      "right" : "private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {\n        \n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int iValue= Integer.parseInt(value);\n            if(iValue<100) {\n                iValue= parser.adjustYear(iValue);\n            }\n            cal.set(Calendar.YEAR, iValue);\n        }\n    };",
      "info" : "FieldDeclaration[25009-25458]:FieldDeclaration[24734-25183]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[25111-25451]:MethodDeclaration[24836-25176]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "TypeDeclaration[25464-27942]:TypeDeclaration[25189-27667]"
    }, {
      "left" : "final String validTimeZoneChars;",
      "right" : "final String validTimeZoneChars;",
      "info" : "FieldDeclaration[25620-25652]:FieldDeclaration[25345-25377]"
    }, {
      "left" : "final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "right" : "final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "info" : "FieldDeclaration[25661-25765]:FieldDeclaration[25386-25490]"
    }, {
      "left" : "TimeZoneStrategy(Locale locale)",
      "right" : "TimeZoneStrategy(Locale locale)",
      "info" : "MethodDeclaration[25775-26883]:MethodDeclaration[25500-26608]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[26893-27023]:MethodDeclaration[26618-26748]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[27033-27250]:MethodDeclaration[26758-26975]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[27260-27936]:MethodDeclaration[26985-27661]"
    }, {
      "left" : "private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);",
      "right" : "private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);",
      "info" : "FieldDeclaration[27949-28025]:FieldDeclaration[27674-27750]"
    }, {
      "left" : "private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);",
      "right" : "private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);",
      "info" : "FieldDeclaration[28030-28122]:FieldDeclaration[27755-27847]"
    }, {
      "left" : "private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);",
      "right" : "private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);",
      "info" : "FieldDeclaration[28127-28207]:FieldDeclaration[27852-27932]"
    }, {
      "left" : "private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);",
      "right" : "private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);",
      "info" : "FieldDeclaration[28212-28297]:FieldDeclaration[27937-28022]"
    }, {
      "left" : "private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n        @Override\n        public int modify(int iValue) {\n            return iValue-1;\n        }\n    };",
      "right" : "private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n        @Override\n        public int modify(int iValue) {\n            return iValue-1;\n        }\n    };",
      "info" : "FieldDeclaration[28303-28497]:FieldDeclaration[28028-28222]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[28402-28490]:MethodDeclaration[28127-28215]"
    }, {
      "left" : "private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);",
      "right" : "private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);",
      "info" : "FieldDeclaration[28502-28590]:FieldDeclaration[28227-28315]"
    }, {
      "left" : "private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);",
      "right" : "private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);",
      "info" : "FieldDeclaration[28595-28691]:FieldDeclaration[28320-28416]"
    }, {
      "left" : "private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);",
      "right" : "private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);",
      "info" : "FieldDeclaration[28696-28794]:FieldDeclaration[28421-28519]"
    }, {
      "left" : "private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);",
      "right" : "private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);",
      "info" : "FieldDeclaration[28799-28893]:FieldDeclaration[28524-28618]"
    }, {
      "left" : "private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);",
      "right" : "private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);",
      "info" : "FieldDeclaration[28898-28994]:FieldDeclaration[28623-28719]"
    }, {
      "left" : "private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);",
      "right" : "private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);",
      "info" : "FieldDeclaration[28999-29111]:FieldDeclaration[28724-28836]"
    }, {
      "left" : "private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);",
      "right" : "private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);",
      "info" : "FieldDeclaration[29116-29210]:FieldDeclaration[28841-28935]"
    }, {
      "left" : "private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%24;\n        }\n    };",
      "right" : "private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%24;\n        }\n    };",
      "info" : "FieldDeclaration[29215-29422]:FieldDeclaration[28940-29147]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[29326-29415]:MethodDeclaration[29051-29140]"
    }, {
      "left" : "private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%12;\n        }\n    };",
      "right" : "private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%12;\n        }\n    };",
      "info" : "FieldDeclaration[29427-29620]:FieldDeclaration[29152-29345]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[29524-29613]:MethodDeclaration[29249-29338]"
    }, {
      "left" : "private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);",
      "right" : "private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);",
      "info" : "FieldDeclaration[29625-29705]:FieldDeclaration[29350-29430]"
    }, {
      "left" : "private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);",
      "right" : "private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);",
      "info" : "FieldDeclaration[29710-29794]:FieldDeclaration[29435-29519]"
    }, {
      "left" : "private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);",
      "right" : "private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);",
      "info" : "FieldDeclaration[29799-29883]:FieldDeclaration[29524-29608]"
    }, {
      "left" : "private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);",
      "right" : "private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);",
      "info" : "FieldDeclaration[29888-29982]:FieldDeclaration[29613-29707]"
    } ],
    "mappings" : [
 {
      "left" : "DateParser",
      "right" : "DateParser",
      "info" : "SimpleType[2577-2587]:SimpleType[2577-2587]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[2589-2601]:SimpleType[2589-2601]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3708-3717]:Modifier[3708-3717]"
    }, {
      "left" : "FastDateParser",
      "right" : "FastDateParser",
      "info" : "SimpleName[3718-3732]:SimpleName[3718-3732]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[3733-3747]:SingleVariableDeclaration[3733-3747]"
    }, {
      "left" : "TimeZone timeZone",
      "right" : "TimeZone timeZone",
      "info" : "SingleVariableDeclaration[3749-3766]:SingleVariableDeclaration[3749-3766]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[3768-3781]:SingleVariableDeclaration[3768-3781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3783-3902]:Block[3783-3902]"
    }, {
      "left" : "this.pattern = pattern;",
      "right" : "this.pattern = pattern;",
      "info" : "ExpressionStatement[3793-3816]:ExpressionStatement[3793-3816]"
    }, {
      "left" : "this.timeZone = timeZone;",
      "right" : "this.timeZone = timeZone;",
      "info" : "ExpressionStatement[3825-3850]:ExpressionStatement[3825-3850]"
    }, {
      "left" : "this.locale = locale;",
      "right" : "this.locale = locale;",
      "info" : "ExpressionStatement[3859-3880]:ExpressionStatement[3859-3880]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[3889-3896]:ExpressionStatement[3889-3896]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4057-4064]:Modifier[4057-4064]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4065-4069]:PrimitiveType[4065-4069]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[4070-4074]:SimpleName[4070-4074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4077-5473]:Block[4077-5473]"
    }, {
      "left" : "thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);",
      "right" : "thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);",
      "info" : "ExpressionStatement[4087-4155]:ExpressionStatement[4087-4155]"
    }, {
      "left" : "nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();",
      "right" : "nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();",
      "info" : "ExpressionStatement[4165-4222]:ExpressionStatement[4165-4222]"
    }, {
      "left" : "StringBuilder regex= new StringBuilder();",
      "right" : "StringBuilder regex= new StringBuilder();",
      "info" : "VariableDeclarationStatement[4232-4273]:VariableDeclarationStatement[4232-4273]"
    }, {
      "left" : "List<Strategy> collector = new ArrayList<Strategy>();",
      "right" : "List<Strategy> collector = new ArrayList<Strategy>();",
      "info" : "VariableDeclarationStatement[4282-4335]:VariableDeclarationStatement[4282-4335]"
    }, {
      "left" : "Matcher patternMatcher= formatPattern.matcher(pattern);",
      "right" : "Matcher patternMatcher= formatPattern.matcher(pattern);",
      "info" : "VariableDeclarationStatement[4345-4400]:VariableDeclarationStatement[4345-4400]"
    }, {
      "left" : "if(!patternMatcher.lookingAt())",
      "right" : "if(!patternMatcher.lookingAt())",
      "info" : "IfStatement[4409-4519]:IfStatement[4409-4519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4441-4519]:Block[4441-4519]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid pattern\");",
      "right" : "throw new IllegalArgumentException(\"Invalid pattern\");",
      "info" : "ThrowStatement[4455-4509]:ThrowStatement[4455-4509]"
    }, {
      "left" : "currentFormatField= patternMatcher.group();",
      "right" : "currentFormatField= patternMatcher.group();",
      "info" : "ExpressionStatement[4529-4572]:ExpressionStatement[4529-4572]"
    }, {
      "left" : "Strategy currentStrategy= getStrategy(currentFormatField);",
      "right" : "Strategy currentStrategy= getStrategy(currentFormatField);",
      "info" : "VariableDeclarationStatement[4581-4639]:VariableDeclarationStatement[4581-4639]"
    }, {
      "left" : "for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        })",
      "right" : "for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        })",
      "info" : "ForStatement[4648-5199]:ForStatement[4648-5199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4656-5199]:Block[4656-5199]"
    }, {
      "left" : "patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());",
      "right" : "patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());",
      "info" : "ExpressionStatement[4670-4742]:ExpressionStatement[4670-4742]"
    }, {
      "left" : "if(!patternMatcher.lookingAt())",
      "right" : "if(!patternMatcher.lookingAt())",
      "info" : "IfStatement[4755-4862]:IfStatement[4755-4862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4787-4862]:Block[4787-4862]"
    }, {
      "left" : "nextStrategy = null;",
      "right" : "nextStrategy = null;",
      "info" : "ExpressionStatement[4805-4825]:ExpressionStatement[4805-4825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4842-4848]:BreakStatement[4842-4848]"
    }, {
      "left" : "String nextFormatField= patternMatcher.group();",
      "right" : "String nextFormatField= patternMatcher.group();",
      "info" : "VariableDeclarationStatement[4875-4922]:VariableDeclarationStatement[4875-4922]"
    }, {
      "left" : "nextStrategy = getStrategy(nextFormatField);",
      "right" : "nextStrategy = getStrategy(nextFormatField);",
      "info" : "ExpressionStatement[4935-4979]:ExpressionStatement[4935-4979]"
    }, {
      "left" : "if(currentStrategy.addRegex(this, regex))",
      "right" : "if(currentStrategy.addRegex(this, regex))",
      "info" : "IfStatement[4992-5097]:IfStatement[4992-5097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5034-5097]:Block[5034-5097]"
    }, {
      "left" : "collector.add(currentStrategy);",
      "right" : "collector.add(currentStrategy);",
      "info" : "ExpressionStatement[5052-5083]:ExpressionStatement[5052-5083]"
    }, {
      "left" : "currentFormatField= nextFormatField;",
      "right" : "currentFormatField= nextFormatField;",
      "info" : "ExpressionStatement[5110-5146]:ExpressionStatement[5110-5146]"
    }, {
      "left" : "currentStrategy= nextStrategy;",
      "right" : "currentStrategy= nextStrategy;",
      "info" : "ExpressionStatement[5159-5189]:ExpressionStatement[5159-5189]"
    }, {
      "left" : "if(currentStrategy.addRegex(this, regex))",
      "right" : "if(currentStrategy.addRegex(this, regex))",
      "info" : "IfStatement[5208-5305]:IfStatement[5208-5305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5250-5305]:Block[5250-5305]"
    }, {
      "left" : "collector.add(currentStrategy);",
      "right" : "collector.add(currentStrategy);",
      "info" : "ExpressionStatement[5264-5295]:ExpressionStatement[5264-5295]"
    }, {
      "left" : "currentFormatField= null;",
      "right" : "currentFormatField= null;",
      "info" : "ExpressionStatement[5314-5339]:ExpressionStatement[5314-5339]"
    }, {
      "left" : "strategies= collector.toArray(new Strategy[collector.size()]);",
      "right" : "strategies= collector.toArray(new Strategy[collector.size()]);",
      "info" : "ExpressionStatement[5348-5410]:ExpressionStatement[5348-5410]"
    }, {
      "left" : "parsePattern= Pattern.compile(regex.toString());",
      "right" : "parsePattern= Pattern.compile(regex.toString());",
      "info" : "ExpressionStatement[5419-5467]:ExpressionStatement[5419-5467]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5669-5678]:MarkerAnnotation[5669-5678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5683-5689]:Modifier[5683-5689]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5690-5696]:SimpleType[5690-5696]"
    }, {
      "left" : "getPattern",
      "right" : "getPattern",
      "info" : "SimpleName[5697-5707]:SimpleName[5697-5707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5710-5741]:Block[5710-5741]"
    }, {
      "left" : "return pattern;",
      "right" : "return pattern;",
      "info" : "ReturnStatement[5720-5735]:ReturnStatement[5720-5735]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5843-5852]:MarkerAnnotation[5843-5852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5857-5863]:Modifier[5857-5863]"
    }, {
      "left" : "TimeZone",
      "right" : "TimeZone",
      "info" : "SimpleType[5864-5872]:SimpleType[5864-5872]"
    }, {
      "left" : "getTimeZone",
      "right" : "getTimeZone",
      "info" : "SimpleName[5873-5884]:SimpleName[5873-5884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5887-5919]:Block[5887-5919]"
    }, {
      "left" : "return timeZone;",
      "right" : "return timeZone;",
      "info" : "ReturnStatement[5897-5913]:ReturnStatement[5897-5913]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6019-6028]:MarkerAnnotation[6019-6028]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6033-6039]:Modifier[6033-6039]"
    }, {
      "left" : "Locale",
      "right" : "Locale",
      "info" : "SimpleType[6040-6046]:SimpleType[6040-6046]"
    }, {
      "left" : "getLocale",
      "right" : "getLocale",
      "info" : "SimpleName[6047-6056]:SimpleName[6047-6056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6059-6089]:Block[6059-6089]"
    }, {
      "left" : "return locale;",
      "right" : "return locale;",
      "info" : "ReturnStatement[6069-6083]:ReturnStatement[6069-6083]"
    }, {
      "left" : "Pattern",
      "right" : "Pattern",
      "info" : "SimpleType[6149-6156]:SimpleType[6149-6156]"
    }, {
      "left" : "getParsePattern",
      "right" : "getParsePattern",
      "info" : "SimpleName[6157-6172]:SimpleName[6157-6172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6175-6211]:Block[6175-6211]"
    }, {
      "left" : "return parsePattern;",
      "right" : "return parsePattern;",
      "info" : "ReturnStatement[6185-6205]:ReturnStatement[6185-6205]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6502-6511]:MarkerAnnotation[6502-6511]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6516-6522]:Modifier[6516-6522]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6523-6530]:PrimitiveType[6523-6530]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[6531-6537]:SimpleName[6531-6537]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[6538-6548]:SingleVariableDeclaration[6538-6548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6550-6832]:Block[6550-6832]"
    }, {
      "left" : "if (! (obj instanceof FastDateParser))",
      "right" : "if (! (obj instanceof FastDateParser))",
      "info" : "IfStatement[6560-6637]:IfStatement[6560-6637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6600-6637]:Block[6600-6637]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6614-6627]:ReturnStatement[6614-6627]"
    }, {
      "left" : "FastDateParser other = (FastDateParser) obj;",
      "right" : "FastDateParser other = (FastDateParser) obj;",
      "info" : "VariableDeclarationStatement[6646-6690]:VariableDeclarationStatement[6646-6690]"
    }, {
      "left" : "return pattern.equals(other.pattern)\n            && timeZone.equals(other.timeZone)\n            && locale.equals(other.locale);",
      "right" : "return pattern.equals(other.pattern)\n            && timeZone.equals(other.timeZone)\n            && locale.equals(other.locale);",
      "info" : "ReturnStatement[6699-6826]:ReturnStatement[6699-6826]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6966-6975]:MarkerAnnotation[6966-6975]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6980-6986]:Modifier[6980-6986]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6987-6990]:PrimitiveType[6987-6990]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[6991-6999]:SimpleName[6991-6999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7002-7098]:Block[7002-7098]"
    }, {
      "left" : "return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());",
      "right" : "return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());",
      "info" : "ReturnStatement[7012-7092]:ReturnStatement[7012-7092]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7215-7224]:MarkerAnnotation[7215-7224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7229-7235]:Modifier[7229-7235]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7236-7242]:SimpleType[7236-7242]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[7243-7251]:SimpleName[7243-7251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7254-7351]:Block[7254-7351]"
    }, {
      "left" : "return \"FastDateParser[\" + pattern + \",\" + locale + \",\" + timeZone.getID() + \"]\";",
      "right" : "return \"FastDateParser[\" + pattern + \",\" + locale + \",\" + timeZone.getID() + \"]\";",
      "info" : "ReturnStatement[7264-7345]:ReturnStatement[7264-7345]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7788-7795]:Modifier[7788-7795]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7796-7800]:PrimitiveType[7796-7800]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[7801-7811]:SimpleName[7801-7811]"
    }, {
      "left" : "ObjectInputStream in",
      "right" : "ObjectInputStream in",
      "info" : "SingleVariableDeclaration[7812-7832]:SingleVariableDeclaration[7812-7832]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7841-7852]:SimpleType[7841-7852]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[7854-7876]:SimpleType[7854-7876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-7932]:Block[7877-7932]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[7887-7910]:ExpressionStatement[7887-7910]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[7919-7926]:ExpressionStatement[7919-7926]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8050-8059]:MarkerAnnotation[8050-8059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8064-8070]:Modifier[8064-8070]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[8071-8077]:SimpleType[8071-8077]"
    }, {
      "left" : "parseObject",
      "right" : "parseObject",
      "info" : "SimpleName[8078-8089]:SimpleName[8078-8089]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[8090-8103]:SingleVariableDeclaration[8090-8103]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[8112-8126]:SimpleType[8112-8126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8127-8164]:Block[8127-8164]"
    }, {
      "left" : "return parse(source);",
      "right" : "return parse(source);",
      "info" : "ReturnStatement[8137-8158]:ReturnStatement[8137-8158]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8276-8285]:MarkerAnnotation[8276-8285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8290-8296]:Modifier[8290-8296]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[8297-8301]:SimpleType[8297-8301]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[8302-8307]:SimpleName[8302-8307]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[8308-8321]:SingleVariableDeclaration[8308-8321]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[8330-8344]:SimpleType[8330-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8345-8944]:Block[8345-8944]"
    }, {
      "left" : "Date date= parse(source, new ParsePosition(0));",
      "right" : "Date date= parse(source, new ParsePosition(0));",
      "info" : "VariableDeclarationStatement[8355-8402]:VariableDeclarationStatement[8355-8402]"
    }, {
      "left" : "if(date==null)",
      "right" : "if(date==null)",
      "info" : "IfStatement[8411-8917]:IfStatement[8411-8917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-8917]:Block[8426-8917]"
    }, {
      "left" : "if (locale.equals(JAPANESE_IMPERIAL))",
      "right" : "if (locale.equals(JAPANESE_IMPERIAL))",
      "info" : "IfStatement[8490-8791]:IfStatement[8490-8791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8528-8791]:Block[8528-8791]"
    }, {
      "left" : "throw new ParseException(\n                        \"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n                                \"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "right" : "throw new ParseException(\n                        \"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n                                \"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "info" : "ThrowStatement[8546-8777]:ThrowStatement[8546-8777]"
    }, {
      "left" : "throw new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "right" : "throw new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "info" : "ThrowStatement[8804-8907]:ThrowStatement[8804-8907]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[8926-8938]:ReturnStatement[8926-8938]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9087-9096]:MarkerAnnotation[9087-9096]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9101-9107]:Modifier[9101-9107]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[9108-9114]:SimpleType[9108-9114]"
    }, {
      "left" : "parseObject",
      "right" : "parseObject",
      "info" : "SimpleName[9115-9126]:SimpleName[9115-9126]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[9127-9140]:SingleVariableDeclaration[9127-9140]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[9142-9159]:SingleVariableDeclaration[9142-9159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9161-9203]:Block[9161-9203]"
    }, {
      "left" : "return parse(source, pos);",
      "right" : "return parse(source, pos);",
      "info" : "ReturnStatement[9171-9197]:ReturnStatement[9171-9197]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9340-9349]:MarkerAnnotation[9340-9349]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9354-9360]:Modifier[9354-9360]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[9361-9365]:SimpleType[9361-9365]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[9366-9371]:SimpleName[9366-9371]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[9372-9385]:SingleVariableDeclaration[9372-9385]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[9387-9404]:SingleVariableDeclaration[9387-9404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9406-9997]:Block[9406-9997]"
    }, {
      "left" : "int offset= pos.getIndex();",
      "right" : "int offset= pos.getIndex();",
      "info" : "VariableDeclarationStatement[9416-9443]:VariableDeclarationStatement[9416-9443]"
    }, {
      "left" : "Matcher matcher= parsePattern.matcher(source.substring(offset));",
      "right" : "Matcher matcher= parsePattern.matcher(source.substring(offset));",
      "info" : "VariableDeclarationStatement[9452-9516]:VariableDeclarationStatement[9452-9516]"
    }, {
      "left" : "if(!matcher.lookingAt())",
      "right" : "if(!matcher.lookingAt())",
      "info" : "IfStatement[9525-9586]:IfStatement[9525-9586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9550-9586]:Block[9550-9586]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9564-9576]:ReturnStatement[9564-9576]"
    }, {
      "left" : "Calendar cal= Calendar.getInstance(timeZone, locale);",
      "right" : "Calendar cal= Calendar.getInstance(timeZone, locale);",
      "info" : "VariableDeclarationStatement[9676-9729]:VariableDeclarationStatement[9676-9729]"
    }, {
      "left" : "cal.clear();",
      "right" : "cal.clear();",
      "info" : "ExpressionStatement[9738-9750]:ExpressionStatement[9738-9750]"
    }, {
      "left" : "for(int i=0; i<strategies.length)",
      "right" : "for(int i=0; i<strategies.length)",
      "info" : "ForStatement[9760-9917]:ForStatement[9760-9917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9795-9917]:Block[9795-9917]"
    }, {
      "left" : "Strategy strategy= strategies[i++];",
      "right" : "Strategy strategy= strategies[i++];",
      "info" : "VariableDeclarationStatement[9809-9844]:VariableDeclarationStatement[9809-9844]"
    }, {
      "left" : "strategy.setCalendar(this, cal, matcher.group(i));",
      "right" : "strategy.setCalendar(this, cal, matcher.group(i));",
      "info" : "ExpressionStatement[9857-9907]:ExpressionStatement[9857-9907]"
    }, {
      "left" : "pos.setIndex(offset+matcher.end());",
      "right" : "pos.setIndex(offset+matcher.end());",
      "info" : "ExpressionStatement[9926-9961]:ExpressionStatement[9926-9961]"
    }, {
      "left" : "return cal.getTime();",
      "right" : "return cal.getTime();",
      "info" : "ReturnStatement[9970-9991]:ReturnStatement[9970-9991]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10392-10399]:Modifier[10392-10399]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10400-10406]:Modifier[10400-10406]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[10407-10420]:SimpleType[10407-10420]"
    }, {
      "left" : "escapeRegex",
      "right" : "escapeRegex",
      "info" : "SimpleName[10421-10432]:SimpleName[10421-10432]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[10433-10452]:SingleVariableDeclaration[10433-10452]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[10454-10466]:SingleVariableDeclaration[10454-10466]"
    }, {
      "left" : "boolean unquote",
      "right" : "boolean unquote",
      "info" : "SingleVariableDeclaration[10468-10483]:SingleVariableDeclaration[10468-10483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10485-11535]:Block[10485-11260]"
    }, {
      "left" : "for(int i= 0; i<value.length(); ++i)",
      "right" : "for(int i= 0; i<value.length(); ++i)",
      "info" : "ForStatement[10528-11507]:ForStatement[10495-11232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10565-11507]:Block[10532-11232]"
    }, {
      "left" : "char c= value.charAt(i);",
      "right" : "char c= value.charAt(i);",
      "info" : "VariableDeclarationStatement[10579-10603]:VariableDeclarationStatement[10546-10570]"
    }, {
      "left" : "switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }",
      "right" : "switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }",
      "info" : "SwitchStatement[10858-11468]:SwitchStatement[10583-11193]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[10882-10892]:SwitchCase[10607-10617]"
    }, {
      "left" : "if(unquote)",
      "right" : "if(unquote)",
      "info" : "IfStatement[10909-11086]:IfStatement[10634-10811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10921-11086]:Block[10646-10811]"
    }, {
      "left" : "if(++i==value.length())",
      "right" : "if(++i==value.length())",
      "info" : "IfStatement[10943-11028]:IfStatement[10668-10753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10967-11028]:Block[10692-10753]"
    }, {
      "left" : "return regex;",
      "right" : "return regex;",
      "info" : "ReturnStatement[10993-11006]:ReturnStatement[10718-10731]"
    }, {
      "left" : "c= value.charAt(i);",
      "right" : "c= value.charAt(i);",
      "info" : "ExpressionStatement[11049-11068]:ExpressionStatement[10774-10793]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11103-11109]:BreakStatement[10828-10834]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[11122-11131]:SwitchCase[10847-10856]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[11144-11153]:SwitchCase[10869-10878]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[11166-11175]:SwitchCase[10891-10900]"
    }, {
      "left" : "case '(':",
      "right" : "case '(':",
      "info" : "SwitchCase[11188-11197]:SwitchCase[10913-10922]"
    }, {
      "left" : "case ')':",
      "right" : "case ')':",
      "info" : "SwitchCase[11210-11219]:SwitchCase[10935-10944]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[11232-11241]:SwitchCase[10957-10966]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[11254-11263]:SwitchCase[10979-10988]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[11276-11286]:SwitchCase[11001-11011]"
    }, {
      "left" : "case '|':",
      "right" : "case '|':",
      "info" : "SwitchCase[11299-11308]:SwitchCase[11024-11033]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[11321-11330]:SwitchCase[11046-11055]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[11343-11352]:SwitchCase[11068-11077]"
    }, {
      "left" : "case '^':",
      "right" : "case '^':",
      "info" : "SwitchCase[11365-11374]:SwitchCase[11090-11099]"
    }, {
      "left" : "case '$':",
      "right" : "case '$':",
      "info" : "SwitchCase[11387-11396]:SwitchCase[11112-11121]"
    }, {
      "left" : "case '.':",
      "right" : "case '.':",
      "info" : "SwitchCase[11409-11418]:SwitchCase[11134-11143]"
    }, {
      "left" : "regex.append('\\\\');",
      "right" : "regex.append('\\\\');",
      "info" : "ExpressionStatement[11435-11454]:ExpressionStatement[11160-11179]"
    }, {
      "left" : "regex.append(c);",
      "right" : "regex.append(c);",
      "info" : "ExpressionStatement[11481-11497]:ExpressionStatement[11206-11222]"
    }, {
      "left" : "return regex;",
      "right" : "return regex;",
      "info" : "ReturnStatement[11516-11529]:ReturnStatement[11241-11254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11599-11606]:Modifier[11324-11331]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11607-11613]:Modifier[11332-11338]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11614-11619]:TYPE_DECLARATION_KIND[11339-11344]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "SimpleName[11620-11628]:SimpleName[11345-11353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11821-11827]:Modifier[11546-11552]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "SimpleName[11828-11836]:SimpleName[11553-11561]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11837-11847]:SingleVariableDeclaration[11562-11572]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[11849-11858]:SingleVariableDeclaration[11574-11583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11860-11929]:Block[11585-11654]"
    }, {
      "left" : "this.key= key;",
      "right" : "this.key= key;",
      "info" : "ExpressionStatement[11874-11888]:ExpressionStatement[11599-11613]"
    }, {
      "left" : "this.value= value;",
      "right" : "this.value= value;",
      "info" : "ExpressionStatement[11901-11919]:ExpressionStatement[11626-11644]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12100-12109]:MarkerAnnotation[11825-11834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12118-12124]:Modifier[11843-11849]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12125-12128]:PrimitiveType[11850-11853]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[12129-12136]:SimpleName[11854-11861]"
    }, {
      "left" : "KeyValue left",
      "right" : "KeyValue left",
      "info" : "SingleVariableDeclaration[12137-12150]:SingleVariableDeclaration[11862-11875]"
    }, {
      "left" : "KeyValue right",
      "right" : "KeyValue right",
      "info" : "SingleVariableDeclaration[12152-12166]:SingleVariableDeclaration[11877-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12168-12239]:Block[11893-11964]"
    }, {
      "left" : "return left.key.compareToIgnoreCase(right.key);",
      "right" : "return left.key.compareToIgnoreCase(right.key);",
      "info" : "ReturnStatement[12182-12229]:ReturnStatement[11907-11954]"
    }, {
      "left" : "KeyValue[]",
      "right" : "KeyValue[]",
      "info" : "ArrayType[12430-12440]:ArrayType[12155-12165]"
    }, {
      "left" : "getDisplayNames",
      "right" : "getDisplayNames",
      "info" : "SimpleName[12441-12456]:SimpleName[12166-12181]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[12457-12466]:SingleVariableDeclaration[12182-12191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12468-14228]:Block[12193-13953]"
    }, {
      "left" : "Integer fieldInt = Integer.valueOf(field);",
      "right" : "Integer fieldInt = Integer.valueOf(field);",
      "info" : "VariableDeclarationStatement[12478-12520]:VariableDeclarationStatement[12203-12245]"
    }, {
      "left" : "KeyValue[] fieldKeyValues= nameValues.get(fieldInt);",
      "right" : "KeyValue[] fieldKeyValues= nameValues.get(fieldInt);",
      "info" : "VariableDeclarationStatement[12529-12581]:VariableDeclarationStatement[12254-12306]"
    }, {
      "left" : "if(fieldKeyValues==null)",
      "right" : "if(fieldKeyValues==null)",
      "info" : "IfStatement[12590-14191]:IfStatement[12315-13916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12615-14191]:Block[12340-13916]"
    }, {
      "left" : "DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);",
      "right" : "DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);",
      "info" : "VariableDeclarationStatement[12629-12694]:VariableDeclarationStatement[12354-12419]"
    }, {
      "left" : "switch(field) {\n            case Calendar.ERA:\n                // DateFormatSymbols#getEras() only returns AD/BC or translations\n                // It does not work for the Thai Buddhist or Japanese Imperial calendars.\n                // see: https://issues.apache.org/jira/browse/TRINIDAD-2126\n                Calendar c = Calendar.getInstance(locale);\n                // N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\n                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\n                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\n                fieldKeyValues= createKeyValues(longEras, shortEras);\n                break;\n            case Calendar.DAY_OF_WEEK:\n                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\n                break;\n            case Calendar.AM_PM:\n                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\n                break;\n            case Calendar.MONTH:\n                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid field value \"+field);\n            }",
      "right" : "switch(field) {\n            case Calendar.ERA:\n                // DateFormatSymbols#getEras() only returns AD/BC or translations\n                // It does not work for the Thai Buddhist or Japanese Imperial calendars.\n                // see: https://issues.apache.org/jira/browse/TRINIDAD-2126\n                Calendar c = Calendar.getInstance(locale);\n                // N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\n                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\n                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\n                fieldKeyValues= createKeyValues(longEras, shortEras);\n                break;\n            case Calendar.DAY_OF_WEEK:\n                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\n                break;\n            case Calendar.AM_PM:\n                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\n                break;\n            case Calendar.MONTH:\n                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid field value \"+field);\n            }",
      "info" : "SwitchStatement[12707-14017]:SwitchStatement[12432-13742]"
    }, {
      "left" : "case Calendar.ERA:",
      "right" : "case Calendar.ERA:",
      "info" : "SwitchCase[12735-12753]:SwitchCase[12460-12478]"
    }, {
      "left" : "Calendar c = Calendar.getInstance(locale);",
      "right" : "Calendar c = Calendar.getInstance(locale);",
      "info" : "VariableDeclarationStatement[13018-13060]:VariableDeclarationStatement[12743-12785]"
    }, {
      "left" : "String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));",
      "right" : "String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));",
      "info" : "VariableDeclarationStatement[13169-13255]:VariableDeclarationStatement[12894-12980]"
    }, {
      "left" : "String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));",
      "right" : "String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));",
      "info" : "VariableDeclarationStatement[13272-13356]:VariableDeclarationStatement[12997-13081]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(longEras, shortEras);",
      "right" : "fieldKeyValues= createKeyValues(longEras, shortEras);",
      "info" : "ExpressionStatement[13373-13426]:ExpressionStatement[13098-13151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13443-13449]:BreakStatement[13168-13174]"
    }, {
      "left" : "case Calendar.DAY_OF_WEEK:",
      "right" : "case Calendar.DAY_OF_WEEK:",
      "info" : "SwitchCase[13462-13488]:SwitchCase[13187-13213]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());",
      "right" : "fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());",
      "info" : "ExpressionStatement[13505-13588]:ExpressionStatement[13230-13313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13605-13611]:BreakStatement[13330-13336]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[13624-13644]:SwitchCase[13349-13369]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);",
      "right" : "fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);",
      "info" : "ExpressionStatement[13661-13725]:ExpressionStatement[13386-13450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13742-13748]:BreakStatement[13467-13473]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[13761-13781]:SwitchCase[13486-13506]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());",
      "right" : "fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());",
      "info" : "ExpressionStatement[13798-13877]:ExpressionStatement[13523-13602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13894-13900]:BreakStatement[13619-13625]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13913-13921]:SwitchCase[13638-13646]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid field value \"+field);",
      "right" : "throw new IllegalArgumentException(\"Invalid field value \"+field);",
      "info" : "ThrowStatement[13938-14003]:ThrowStatement[13663-13728]"
    }, {
      "left" : "KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);",
      "right" : "KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);",
      "info" : "VariableDeclarationStatement[14030-14098]:VariableDeclarationStatement[13755-13823]"
    }, {
      "left" : "if(prior!=null)",
      "right" : "if(prior!=null)",
      "info" : "IfStatement[14111-14181]:IfStatement[13836-13906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14127-14181]:Block[13852-13906]"
    }, {
      "left" : "fieldKeyValues= prior;",
      "right" : "fieldKeyValues= prior;",
      "info" : "ExpressionStatement[14145-14167]:ExpressionStatement[13870-13892]"
    }, {
      "left" : "return fieldKeyValues;",
      "right" : "return fieldKeyValues;",
      "info" : "ReturnStatement[14200-14222]:ReturnStatement[13925-13947]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14234-14241]:Modifier[13959-13966]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[14242-14250]:ArrayType[13967-13975]"
    }, {
      "left" : "toArray",
      "right" : "toArray",
      "info" : "SimpleName[14251-14258]:SimpleName[13976-13983]"
    }, {
      "left" : "Map<String, Integer> era",
      "right" : "Map<String, Integer> era",
      "info" : "SingleVariableDeclaration[14259-14283]:SingleVariableDeclaration[13984-14008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14285-14687]:Block[14010-14412]"
    }, {
      "left" : "String[] eras = new String[era.size()];",
      "right" : "String[] eras = new String[era.size()];",
      "info" : "VariableDeclarationStatement[14295-14334]:VariableDeclarationStatement[14020-14059]"
    }, {
      "left" : "for(Map.Entry<String, Integer> me : era.entrySet())",
      "right" : "for(Map.Entry<String, Integer> me : era.entrySet())",
      "info" : "EnhancedForStatement[14377-14660]:EnhancedForStatement[14102-14385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14429-14660]:Block[14154-14385]"
    }, {
      "left" : "int idx = me.getValue().intValue();",
      "right" : "int idx = me.getValue().intValue();",
      "info" : "VariableDeclarationStatement[14443-14478]:VariableDeclarationStatement[14168-14203]"
    }, {
      "left" : "final String key = me.getKey();",
      "right" : "final String key = me.getKey();",
      "info" : "VariableDeclarationStatement[14491-14522]:VariableDeclarationStatement[14216-14247]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[14535-14621]:IfStatement[14260-14346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14552-14621]:Block[14277-14346]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[14570-14607]:ThrowStatement[14295-14332]"
    }, {
      "left" : "eras[idx] = key;",
      "right" : "eras[idx] = key;",
      "info" : "ExpressionStatement[14634-14650]:ExpressionStatement[14359-14375]"
    }, {
      "left" : "return eras;",
      "right" : "return eras;",
      "info" : "ReturnStatement[14669-14681]:ReturnStatement[14394-14406]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14945-14952]:Modifier[14670-14677]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14953-14959]:Modifier[14678-14684]"
    }, {
      "left" : "KeyValue[]",
      "right" : "KeyValue[]",
      "info" : "ArrayType[14960-14970]:ArrayType[14685-14695]"
    }, {
      "left" : "createKeyValues",
      "right" : "createKeyValues",
      "info" : "SimpleName[14971-14986]:SimpleName[14696-14711]"
    }, {
      "left" : "String[] longValues",
      "right" : "String[] longValues",
      "info" : "SingleVariableDeclaration[14987-15006]:SingleVariableDeclaration[14712-14731]"
    }, {
      "left" : "String[] shortValues",
      "right" : "String[] shortValues",
      "info" : "SingleVariableDeclaration[15008-15028]:SingleVariableDeclaration[14733-14753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15030-15296]:Block[14755-15021]"
    }, {
      "left" : "KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];",
      "right" : "KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];",
      "info" : "VariableDeclarationStatement[15040-15118]:VariableDeclarationStatement[14765-14843]"
    }, {
      "left" : "copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);",
      "right" : "copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);",
      "info" : "ExpressionStatement[15127-15198]:ExpressionStatement[14852-14923]"
    }, {
      "left" : "Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);",
      "right" : "Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);",
      "info" : "ExpressionStatement[15207-15259]:ExpressionStatement[14932-14984]"
    }, {
      "left" : "return fieldKeyValues;",
      "right" : "return fieldKeyValues;",
      "info" : "ReturnStatement[15268-15290]:ReturnStatement[14993-15015]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15513-15520]:Modifier[15238-15245]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15521-15527]:Modifier[15246-15252]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15528-15531]:PrimitiveType[15253-15256]"
    }, {
      "left" : "count",
      "right" : "count",
      "info" : "SimpleName[15532-15537]:SimpleName[15257-15262]"
    }, {
      "left" : "String[] values",
      "right" : "String[] values",
      "info" : "SingleVariableDeclaration[15538-15553]:SingleVariableDeclaration[15263-15278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15555-15784]:Block[15280-15509]"
    }, {
      "left" : "int count= 0;",
      "right" : "int count= 0;",
      "info" : "VariableDeclarationStatement[15565-15578]:VariableDeclarationStatement[15290-15303]"
    }, {
      "left" : "if(values!=null)",
      "right" : "if(values!=null)",
      "info" : "IfStatement[15587-15756]:IfStatement[15312-15481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15604-15756]:Block[15329-15481]"
    }, {
      "left" : "for(String value : values)",
      "right" : "for(String value : values)",
      "info" : "EnhancedForStatement[15618-15746]:EnhancedForStatement[15343-15471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15645-15746]:Block[15370-15471]"
    }, {
      "left" : "if(value.length()>0)",
      "right" : "if(value.length()>0)",
      "info" : "IfStatement[15663-15732]:IfStatement[15388-15457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15684-15732]:Block[15409-15457]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[15706-15714]:ExpressionStatement[15431-15439]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[15765-15778]:ReturnStatement[15490-15503]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16110-16117]:Modifier[15835-15842]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16118-16124]:Modifier[15843-15849]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16125-16128]:PrimitiveType[15850-15853]"
    }, {
      "left" : "copy",
      "right" : "copy",
      "info" : "SimpleName[16129-16133]:SimpleName[15854-15858]"
    }, {
      "left" : "KeyValue[] fieldKeyValues",
      "right" : "KeyValue[] fieldKeyValues",
      "info" : "SingleVariableDeclaration[16134-16159]:SingleVariableDeclaration[15859-15884]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[16161-16171]:SingleVariableDeclaration[15886-15896]"
    }, {
      "left" : "String[] values",
      "right" : "String[] values",
      "info" : "SingleVariableDeclaration[16173-16188]:SingleVariableDeclaration[15898-15913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16190-16489]:Block[15915-16214]"
    }, {
      "left" : "if(values!=null)",
      "right" : "if(values!=null)",
      "info" : "IfStatement[16200-16460]:IfStatement[15925-16185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16217-16460]:Block[15942-16185]"
    }, {
      "left" : "for(int i= 0; i<values.length; ++i)",
      "right" : "for(int i= 0; i<values.length; ++i)",
      "info" : "ForStatement[16231-16450]:ForStatement[15956-16175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16267-16450]:Block[15992-16175]"
    }, {
      "left" : "String value= values[i];",
      "right" : "String value= values[i];",
      "info" : "VariableDeclarationStatement[16285-16309]:VariableDeclarationStatement[16010-16034]"
    }, {
      "left" : "if(value.length()>0)",
      "right" : "if(value.length()>0)",
      "info" : "IfStatement[16326-16436]:IfStatement[16051-16161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16347-16436]:Block[16072-16161]"
    }, {
      "left" : "fieldKeyValues[offset++]= new KeyValue(value, i);",
      "right" : "fieldKeyValues[offset++]= new KeyValue(value, i);",
      "info" : "ExpressionStatement[16369-16418]:ExpressionStatement[16094-16143]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[16469-16483]:ReturnStatement[16194-16208]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16723-16726]:PrimitiveType[16448-16451]"
    }, {
      "left" : "adjustYear",
      "right" : "adjustYear",
      "info" : "SimpleName[16727-16737]:SimpleName[16452-16462]"
    }, {
      "left" : "int twoDigitYear",
      "right" : "int twoDigitYear",
      "info" : "SingleVariableDeclaration[16738-16754]:SingleVariableDeclaration[16463-16479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16756-16918]:Block[16481-16643]"
    }, {
      "left" : "int trial= twoDigitYear + thisYear - thisYear%100;",
      "right" : "int trial= twoDigitYear + thisYear - thisYear%100;",
      "info" : "VariableDeclarationStatement[16766-16816]:VariableDeclarationStatement[16491-16541]"
    }, {
      "left" : "if(trial < thisYear+20)",
      "right" : "if(trial < thisYear+20)",
      "info" : "IfStatement[16825-16886]:IfStatement[16550-16611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16849-16886]:Block[16574-16611]"
    }, {
      "left" : "return trial;",
      "right" : "return trial;",
      "info" : "ReturnStatement[16863-16876]:ReturnStatement[16588-16601]"
    }, {
      "left" : "return trial-100;",
      "right" : "return trial-100;",
      "info" : "ReturnStatement[16895-16912]:ReturnStatement[16620-16637]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17027-17034]:PrimitiveType[16752-16759]"
    }, {
      "left" : "isNextNumber",
      "right" : "isNextNumber",
      "info" : "SimpleName[17035-17047]:SimpleName[16760-16772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17050-17119]:Block[16775-16844]"
    }, {
      "left" : "return nextStrategy!=null && nextStrategy.isNumber();",
      "right" : "return nextStrategy!=null && nextStrategy.isNumber();",
      "info" : "ReturnStatement[17060-17113]:ReturnStatement[16785-16838]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17256-17259]:PrimitiveType[16981-16984]"
    }, {
      "left" : "getFieldWidth",
      "right" : "getFieldWidth",
      "info" : "SimpleName[17260-17273]:SimpleName[16985-16998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17276-17327]:Block[17001-17052]"
    }, {
      "left" : "return currentFormatField.length();",
      "right" : "return currentFormatField.length();",
      "info" : "ReturnStatement[17286-17321]:ReturnStatement[17011-17046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17416-17423]:Modifier[17141-17148]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[17424-17433]:TYPE_DECLARATION_KIND[17149-17158]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleName[17434-17442]:SimpleName[17159-17167]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17558-17565]:PrimitiveType[17283-17290]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[17566-17574]:SimpleName[17291-17299]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17842-17846]:PrimitiveType[17567-17571]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[17847-17858]:SimpleName[17572-17583]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[17859-17880]:SingleVariableDeclaration[17584-17605]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[17882-17894]:SingleVariableDeclaration[17607-17619]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[17896-17908]:SingleVariableDeclaration[17621-17633]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18319-18326]:PrimitiveType[18044-18051]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[18327-18335]:SimpleName[18052-18060]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[18336-18357]:SingleVariableDeclaration[18061-18082]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[18359-18378]:SingleVariableDeclaration[18084-18103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18893-18900]:Modifier[18618-18625]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[18901-18909]:SimpleType[18626-18634]"
    }, {
      "left" : "getStrategy",
      "right" : "getStrategy",
      "info" : "SimpleName[18910-18921]:SimpleName[18635-18646]"
    }, {
      "left" : "String formatField",
      "right" : "String formatField",
      "info" : "SingleVariableDeclaration[18922-18940]:SingleVariableDeclaration[18647-18665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18942-20723]:Block[18667-20448]"
    }, {
      "left" : "switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return DAY_OF_WEEK_STRATEGY;\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return ERA_STRATEGY;\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'Z':\n            break;\n        case 'a':\n            return AM_PM_STRATEGY;\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'z':\n            break;\n        }",
      "right" : "switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return DAY_OF_WEEK_STRATEGY;\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return ERA_STRATEGY;\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'Z':\n            break;\n        case 'a':\n            return AM_PM_STRATEGY;\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'z':\n            break;\n        }",
      "info" : "SwitchStatement[18952-20413]:SwitchStatement[18677-20138]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[18992-19002]:SwitchCase[18717-18727]"
    }, {
      "left" : "if(formatField.length()>2)",
      "right" : "if(formatField.length()>2)",
      "info" : "IfStatement[19015-19136]:IfStatement[18740-18861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19042-19136]:Block[18767-18861]"
    }, {
      "left" : "formatField= formatField.substring(1, formatField.length()-1);",
      "right" : "formatField= formatField.substring(1, formatField.length()-1);",
      "info" : "ExpressionStatement[19060-19122]:ExpressionStatement[18785-18847]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19174-19182]:SwitchCase[18899-18907]"
    }, {
      "left" : "return new CopyQuotedStrategy(formatField);",
      "right" : "return new CopyQuotedStrategy(formatField);",
      "info" : "ReturnStatement[19195-19238]:ReturnStatement[18920-18963]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[19247-19256]:SwitchCase[18972-18981]"
    }, {
      "left" : "return DAY_OF_YEAR_STRATEGY;",
      "right" : "return DAY_OF_YEAR_STRATEGY;",
      "info" : "ReturnStatement[19269-19297]:ReturnStatement[18994-19022]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[19306-19315]:SwitchCase[19031-19040]"
    }, {
      "left" : "return DAY_OF_WEEK_STRATEGY;",
      "right" : "return DAY_OF_WEEK_STRATEGY;",
      "info" : "ReturnStatement[19328-19356]:ReturnStatement[19053-19081]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[19365-19374]:SwitchCase[19090-19099]"
    }, {
      "left" : "return DAY_OF_WEEK_IN_MONTH_STRATEGY;",
      "right" : "return DAY_OF_WEEK_IN_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19387-19424]:ReturnStatement[19112-19149]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[19433-19442]:SwitchCase[19158-19167]"
    }, {
      "left" : "return ERA_STRATEGY;",
      "right" : "return ERA_STRATEGY;",
      "info" : "ReturnStatement[19455-19475]:ReturnStatement[19180-19200]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[19484-19493]:SwitchCase[19209-19218]"
    }, {
      "left" : "return MODULO_HOUR_OF_DAY_STRATEGY;",
      "right" : "return MODULO_HOUR_OF_DAY_STRATEGY;",
      "info" : "ReturnStatement[19506-19541]:ReturnStatement[19231-19266]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[19550-19559]:SwitchCase[19275-19284]"
    }, {
      "left" : "return HOUR_STRATEGY;",
      "right" : "return HOUR_STRATEGY;",
      "info" : "ReturnStatement[19572-19593]:ReturnStatement[19297-19318]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[19602-19611]:SwitchCase[19327-19336]"
    }, {
      "left" : "return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;",
      "right" : "return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19624-19699]:ReturnStatement[19349-19424]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[19708-19717]:SwitchCase[19433-19442]"
    }, {
      "left" : "return MILLISECOND_STRATEGY;",
      "right" : "return MILLISECOND_STRATEGY;",
      "info" : "ReturnStatement[19730-19758]:ReturnStatement[19455-19483]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[19767-19776]:SwitchCase[19492-19501]"
    }, {
      "left" : "return WEEK_OF_MONTH_STRATEGY;",
      "right" : "return WEEK_OF_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19789-19819]:ReturnStatement[19514-19544]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[19828-19837]:SwitchCase[19553-19562]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19850-19856]:BreakStatement[19575-19581]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[19865-19874]:SwitchCase[19590-19599]"
    }, {
      "left" : "return AM_PM_STRATEGY;",
      "right" : "return AM_PM_STRATEGY;",
      "info" : "ReturnStatement[19887-19909]:ReturnStatement[19612-19634]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[19918-19927]:SwitchCase[19643-19652]"
    }, {
      "left" : "return DAY_OF_MONTH_STRATEGY;",
      "right" : "return DAY_OF_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19940-19969]:ReturnStatement[19665-19694]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[19978-19987]:SwitchCase[19703-19712]"
    }, {
      "left" : "return MODULO_HOUR_STRATEGY;",
      "right" : "return MODULO_HOUR_STRATEGY;",
      "info" : "ReturnStatement[20000-20028]:ReturnStatement[19725-19753]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[20037-20046]:SwitchCase[19762-19771]"
    }, {
      "left" : "return HOUR_OF_DAY_STRATEGY;",
      "right" : "return HOUR_OF_DAY_STRATEGY;",
      "info" : "ReturnStatement[20059-20087]:ReturnStatement[19784-19812]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[20096-20105]:SwitchCase[19821-19830]"
    }, {
      "left" : "return MINUTE_STRATEGY;",
      "right" : "return MINUTE_STRATEGY;",
      "info" : "ReturnStatement[20118-20141]:ReturnStatement[19843-19866]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[20150-20159]:SwitchCase[19875-19884]"
    }, {
      "left" : "return SECOND_STRATEGY;",
      "right" : "return SECOND_STRATEGY;",
      "info" : "ReturnStatement[20172-20195]:ReturnStatement[19897-19920]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[20204-20213]:SwitchCase[19929-19938]"
    }, {
      "left" : "return WEEK_OF_YEAR_STRATEGY;",
      "right" : "return WEEK_OF_YEAR_STRATEGY;",
      "info" : "ReturnStatement[20226-20255]:ReturnStatement[19951-19980]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[20264-20273]:SwitchCase[19989-19998]"
    }, {
      "left" : "return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;",
      "right" : "return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;",
      "info" : "ReturnStatement[20286-20366]:ReturnStatement[20011-20091]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[20375-20384]:SwitchCase[20100-20109]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20397-20403]:BreakStatement[20122-20128]"
    }, {
      "left" : "TimeZoneStrategy tzs= tzsCache.get(locale);",
      "right" : "TimeZoneStrategy tzs= tzsCache.get(locale);",
      "info" : "VariableDeclarationStatement[20422-20465]:VariableDeclarationStatement[20147-20190]"
    }, {
      "left" : "if(tzs==null)",
      "right" : "if(tzs==null)",
      "info" : "IfStatement[20474-20697]:IfStatement[20199-20422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20488-20697]:Block[20213-20422]"
    }, {
      "left" : "tzs= new TimeZoneStrategy(locale);",
      "right" : "tzs= new TimeZoneStrategy(locale);",
      "info" : "ExpressionStatement[20502-20536]:ExpressionStatement[20227-20261]"
    }, {
      "left" : "TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);",
      "right" : "TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);",
      "info" : "VariableDeclarationStatement[20549-20609]:VariableDeclarationStatement[20274-20334]"
    }, {
      "left" : "if(inCache!=null)",
      "right" : "if(inCache!=null)",
      "info" : "IfStatement[20622-20687]:IfStatement[20347-20412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20640-20687]:Block[20365-20412]"
    }, {
      "left" : "return inCache;",
      "right" : "return inCache;",
      "info" : "ReturnStatement[20658-20673]:ReturnStatement[20383-20398]"
    }, {
      "left" : "return tzs;",
      "right" : "return tzs;",
      "info" : "ReturnStatement[20706-20717]:ReturnStatement[20431-20442]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20825-20832]:Modifier[20550-20557]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20833-20839]:Modifier[20558-20564]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20840-20845]:TYPE_DECLARATION_KIND[20565-20570]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "SimpleName[20846-20864]:SimpleName[20571-20589]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[20876-20884]:SimpleType[20601-20609]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "SimpleName[21096-21114]:SimpleName[20821-20839]"
    }, {
      "left" : "String formatField",
      "right" : "String formatField",
      "info" : "SingleVariableDeclaration[21115-21133]:SingleVariableDeclaration[20840-20858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21135-21189]:Block[20860-20914]"
    }, {
      "left" : "this.formatField= formatField;",
      "right" : "this.formatField= formatField;",
      "info" : "ExpressionStatement[21149-21179]:ExpressionStatement[20874-20904]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21248-21257]:MarkerAnnotation[20973-20982]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21266-21272]:Modifier[20991-20997]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21273-21280]:PrimitiveType[20998-21005]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[21281-21289]:SimpleName[21006-21014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21292-21469]:Block[21017-21194]"
    }, {
      "left" : "char c= formatField.charAt(0);",
      "right" : "char c= formatField.charAt(0);",
      "info" : "VariableDeclarationStatement[21306-21336]:VariableDeclarationStatement[21031-21061]"
    }, {
      "left" : "if(c=='\\'')",
      "right" : "if(c=='\\'')",
      "info" : "IfStatement[21349-21418]:IfStatement[21074-21143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21361-21418]:Block[21086-21143]"
    }, {
      "left" : "c= formatField.charAt(1);",
      "right" : "c= formatField.charAt(1);",
      "info" : "ExpressionStatement[21379-21404]:ExpressionStatement[21104-21129]"
    }, {
      "left" : "return Character.isDigit(c);",
      "right" : "return Character.isDigit(c);",
      "info" : "ReturnStatement[21431-21459]:ReturnStatement[21156-21184]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21528-21537]:MarkerAnnotation[21253-21262]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21546-21552]:Modifier[21271-21277]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21553-21560]:PrimitiveType[21278-21285]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[21561-21569]:SimpleName[21286-21294]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[21570-21591]:SingleVariableDeclaration[21295-21316]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[21593-21612]:SingleVariableDeclaration[21318-21337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21614-21702]:Block[21339-21427]"
    }, {
      "left" : "escapeRegex(regex, formatField, true);",
      "right" : "escapeRegex(regex, formatField, true);",
      "info" : "ExpressionStatement[21628-21666]:ExpressionStatement[21353-21391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21679-21692]:ReturnStatement[21404-21417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21761-21770]:MarkerAnnotation[21486-21495]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21779-21785]:Modifier[21504-21510]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21786-21790]:PrimitiveType[21511-21515]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[21791-21802]:SimpleName[21516-21527]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[21803-21824]:SingleVariableDeclaration[21528-21549]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[21826-21838]:SingleVariableDeclaration[21551-21563]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[21840-21852]:SingleVariableDeclaration[21565-21577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21854-21865]:Block[21579-21590]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21960-21967]:Modifier[21685-21692]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21968-21974]:Modifier[21693-21699]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[21975-21980]:TYPE_DECLARATION_KIND[21700-21705]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "SimpleName[21981-21993]:SimpleName[21706-21718]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[22005-22013]:SimpleType[21730-21738]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "SimpleName[22182-22194]:SimpleName[21907-21919]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[22195-22204]:SingleVariableDeclaration[21920-21929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22206-22248]:Block[21931-21973]"
    }, {
      "left" : "this.field= field;",
      "right" : "this.field= field;",
      "info" : "ExpressionStatement[22220-22238]:ExpressionStatement[21945-21963]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22307-22316]:MarkerAnnotation[22032-22041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22325-22331]:Modifier[22050-22056]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22332-22339]:PrimitiveType[22057-22064]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[22340-22348]:SimpleName[22065-22073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22351-22388]:Block[22076-22113]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22365-22378]:ReturnStatement[22090-22103]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22447-22456]:MarkerAnnotation[22172-22181]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22465-22471]:Modifier[22190-22196]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22472-22479]:PrimitiveType[22197-22204]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[22480-22488]:SimpleName[22205-22213]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[22489-22510]:SingleVariableDeclaration[22214-22235]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[22512-22531]:SingleVariableDeclaration[22237-22256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22533-22812]:Block[22258-22537]"
    }, {
      "left" : "regex.append('(');",
      "right" : "regex.append('(');",
      "info" : "ExpressionStatement[22547-22565]:ExpressionStatement[22272-22290]"
    }, {
      "left" : "for(KeyValue textKeyValue : parser.getDisplayNames(field))",
      "right" : "for(KeyValue textKeyValue : parser.getDisplayNames(field))",
      "info" : "EnhancedForStatement[22578-22725]:EnhancedForStatement[22303-22450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22637-22725]:Block[22362-22450]"
    }, {
      "left" : "escapeRegex(regex, textKeyValue.key, false).append('|');",
      "right" : "escapeRegex(regex, textKeyValue.key, false).append('|');",
      "info" : "ExpressionStatement[22655-22711]:ExpressionStatement[22380-22436]"
    }, {
      "left" : "regex.setCharAt(regex.length()-1, ')');",
      "right" : "regex.setCharAt(regex.length()-1, ')');",
      "info" : "ExpressionStatement[22738-22777]:ExpressionStatement[22463-22502]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22790-22802]:ReturnStatement[22515-22527]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22871-22880]:MarkerAnnotation[22596-22605]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22889-22895]:Modifier[22614-22620]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22896-22900]:PrimitiveType[22621-22625]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[22901-22912]:SimpleName[22626-22637]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[22913-22934]:SingleVariableDeclaration[22638-22659]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[22936-22948]:SingleVariableDeclaration[22661-22673]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[22950-22962]:SingleVariableDeclaration[22675-22687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22964-23599]:Block[22689-23324]"
    }, {
      "left" : "KeyValue[] textKeyValues= parser.getDisplayNames(field);",
      "right" : "KeyValue[] textKeyValues= parser.getDisplayNames(field);",
      "info" : "VariableDeclarationStatement[22978-23034]:VariableDeclarationStatement[22703-22759]"
    }, {
      "left" : "int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);",
      "right" : "int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);",
      "info" : "VariableDeclarationStatement[23047-23140]:VariableDeclarationStatement[22772-22865]"
    }, {
      "left" : "if(idx<0)",
      "right" : "if(idx<0)",
      "info" : "IfStatement[23153-23535]:IfStatement[22878-23260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23163-23535]:Block[22888-23260]"
    }, {
      "left" : "StringBuilder sb= new StringBuilder(value);",
      "right" : "StringBuilder sb= new StringBuilder(value);",
      "info" : "VariableDeclarationStatement[23181-23224]:VariableDeclarationStatement[22906-22949]"
    }, {
      "left" : "sb.append(\" not in (\");",
      "right" : "sb.append(\" not in (\");",
      "info" : "ExpressionStatement[23241-23264]:ExpressionStatement[22966-22989]"
    }, {
      "left" : "for(KeyValue textKeyValue : textKeyValues)",
      "right" : "for(KeyValue textKeyValue : textKeyValues)",
      "info" : "EnhancedForStatement[23281-23404]:EnhancedForStatement[23006-23129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23324-23404]:Block[23049-23129]"
    }, {
      "left" : "sb.append(textKeyValue.key).append(' ');",
      "right" : "sb.append(textKeyValue.key).append(' ');",
      "info" : "ExpressionStatement[23346-23386]:ExpressionStatement[23071-23111]"
    }, {
      "left" : "sb.setCharAt(sb.length()-1, ')');",
      "right" : "sb.setCharAt(sb.length()-1, ')');",
      "info" : "ExpressionStatement[23421-23454]:ExpressionStatement[23146-23179]"
    }, {
      "left" : "throw new IllegalArgumentException(sb.toString());",
      "right" : "throw new IllegalArgumentException(sb.toString());",
      "info" : "ThrowStatement[23471-23521]:ThrowStatement[23196-23246]"
    }, {
      "left" : "cal.set(field, textKeyValues[idx].value);",
      "right" : "cal.set(field, textKeyValues[idx].value);",
      "info" : "ExpressionStatement[23548-23589]:ExpressionStatement[23273-23314]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23696-23703]:Modifier[23421-23428]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23704-23710]:Modifier[23429-23435]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[23711-23716]:TYPE_DECLARATION_KIND[23436-23441]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "SimpleName[23717-23731]:SimpleName[23442-23456]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[23743-23751]:SimpleType[23468-23476]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "SimpleName[23924-23938]:SimpleName[23649-23663]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[23939-23948]:SingleVariableDeclaration[23664-23673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23950-23993]:Block[23675-23718]"
    }, {
      "left" : "this.field= field;",
      "right" : "this.field= field;",
      "info" : "ExpressionStatement[23965-23983]:ExpressionStatement[23690-23708]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24052-24061]:MarkerAnnotation[23777-23786]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24070-24076]:Modifier[23795-23801]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24077-24084]:PrimitiveType[23802-23809]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[24085-24093]:SimpleName[23810-23818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24096-24132]:Block[23821-23857]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24110-24122]:ReturnStatement[23835-23847]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24191-24200]:MarkerAnnotation[23916-23925]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24209-24215]:Modifier[23934-23940]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24216-24223]:PrimitiveType[23941-23948]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[24224-24232]:SimpleName[23949-23957]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[24233-24254]:SingleVariableDeclaration[23958-23979]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[24256-24275]:SingleVariableDeclaration[23981-24000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24277-24537]:Block[24002-24262]"
    }, {
      "left" : "if(parser.isNextNumber())",
      "right" : "if(parser.isNextNumber())",
      "info" : "IfStatement[24291-24502]:IfStatement[24016-24227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24317-24422]:Block[24042-24147]"
    }, {
      "left" : "regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");",
      "right" : "regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");",
      "info" : "ExpressionStatement[24335-24408]:ExpressionStatement[24060-24133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24440-24502]:Block[24165-24227]"
    }, {
      "left" : "regex.append(\"(\\\\p{IsNd}++)\");",
      "right" : "regex.append(\"(\\\\p{IsNd}++)\");",
      "info" : "ExpressionStatement[24458-24488]:ExpressionStatement[24183-24213]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24515-24527]:ReturnStatement[24240-24252]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24596-24605]:MarkerAnnotation[24321-24330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24614-24620]:Modifier[24339-24345]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24621-24625]:PrimitiveType[24346-24350]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[24626-24637]:SimpleName[24351-24362]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[24638-24659]:SingleVariableDeclaration[24363-24384]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[24661-24673]:SingleVariableDeclaration[24386-24398]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[24675-24687]:SingleVariableDeclaration[24400-24412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24689-24761]:Block[24414-24486]"
    }, {
      "left" : "cal.set(field, modify(Integer.parseInt(value)));",
      "right" : "cal.set(field, modify(Integer.parseInt(value)));",
      "info" : "ExpressionStatement[24703-24751]:ExpressionStatement[24428-24476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24929-24935]:Modifier[24654-24660]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24936-24939]:PrimitiveType[24661-24664]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[24940-24946]:SimpleName[24665-24671]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[24947-24957]:SingleVariableDeclaration[24672-24682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24959-24997]:Block[24684-24722]"
    }, {
      "left" : "return iValue;",
      "right" : "return iValue;",
      "info" : "ReturnStatement[24973-24987]:ReturnStatement[24698-24712]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25160-25169]:MarkerAnnotation[24885-24894]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25178-25184]:Modifier[24903-24909]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25185-25189]:PrimitiveType[24910-24914]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[25190-25201]:SimpleName[24915-24926]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[25202-25223]:SingleVariableDeclaration[24927-24948]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[25225-25237]:SingleVariableDeclaration[24950-24962]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[25239-25251]:SingleVariableDeclaration[24964-24976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25253-25451]:Block[24978-25176]"
    }, {
      "left" : "int iValue= Integer.parseInt(value);",
      "right" : "int iValue= Integer.parseInt(value);",
      "info" : "VariableDeclarationStatement[25267-25303]:VariableDeclarationStatement[24992-25028]"
    }, {
      "left" : "if(iValue<100)",
      "right" : "if(iValue<100)",
      "info" : "IfStatement[25316-25397]:IfStatement[25041-25122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25331-25397]:Block[25056-25122]"
    }, {
      "left" : "iValue= parser.adjustYear(iValue);",
      "right" : "iValue= parser.adjustYear(iValue);",
      "info" : "ExpressionStatement[25349-25383]:ExpressionStatement[25074-25108]"
    }, {
      "left" : "cal.set(Calendar.YEAR, iValue);",
      "right" : "cal.set(Calendar.YEAR, iValue);",
      "info" : "ExpressionStatement[25410-25441]:ExpressionStatement[25135-25166]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25551-25558]:Modifier[25276-25283]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25559-25565]:Modifier[25284-25290]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[25566-25571]:TYPE_DECLARATION_KIND[25291-25296]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "SimpleName[25572-25588]:SimpleName[25297-25313]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[25600-25608]:SimpleType[25325-25333]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "SimpleName[25890-25906]:SimpleName[25615-25631]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[25907-25920]:SingleVariableDeclaration[25632-25645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25922-26883]:Block[25647-26608]"
    }, {
      "left" : "for(String id : TimeZone.getAvailableIDs())",
      "right" : "for(String id : TimeZone.getAvailableIDs())",
      "info" : "EnhancedForStatement[25936-26538]:EnhancedForStatement[25661-26263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25980-26538]:Block[25705-26263]"
    }, {
      "left" : "if(id.startsWith(\"GMT\"))",
      "right" : "if(id.startsWith(\"GMT\"))",
      "info" : "IfStatement[25998-26072]:IfStatement[25723-25797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26023-26072]:Block[25748-25797]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26045-26054]:ContinueStatement[25770-25779]"
    }, {
      "left" : "TimeZone tz= TimeZone.getTimeZone(id);",
      "right" : "TimeZone tz= TimeZone.getTimeZone(id);",
      "info" : "VariableDeclarationStatement[26089-26127]:VariableDeclarationStatement[25814-25852]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);",
      "info" : "ExpressionStatement[26144-26210]:ExpressionStatement[25869-25935]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);",
      "info" : "ExpressionStatement[26227-26292]:ExpressionStatement[25952-26017]"
    }, {
      "left" : "if(tz.useDaylightTime())",
      "right" : "if(tz.useDaylightTime())",
      "info" : "IfStatement[26309-26524]:IfStatement[26034-26249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26334-26524]:Block[26059-26249]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);",
      "info" : "ExpressionStatement[26356-26421]:ExpressionStatement[26081-26146]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);",
      "info" : "ExpressionStatement[26442-26506]:ExpressionStatement[26167-26231]"
    }, {
      "left" : "StringBuilder sb= new StringBuilder();",
      "right" : "StringBuilder sb= new StringBuilder();",
      "info" : "VariableDeclarationStatement[26551-26589]:VariableDeclarationStatement[26276-26314]"
    }, {
      "left" : "sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");",
      "right" : "sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");",
      "info" : "ExpressionStatement[26602-26662]:ExpressionStatement[26327-26387]"
    }, {
      "left" : "for(String id : tzNames.keySet())",
      "right" : "for(String id : tzNames.keySet())",
      "info" : "EnhancedForStatement[26675-26780]:EnhancedForStatement[26400-26505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26709-26780]:Block[26434-26505]"
    }, {
      "left" : "escapeRegex(sb, id, false).append('|');",
      "right" : "escapeRegex(sb, id, false).append('|');",
      "info" : "ExpressionStatement[26727-26766]:ExpressionStatement[26452-26491]"
    }, {
      "left" : "sb.setCharAt(sb.length()-1, ')');",
      "right" : "sb.setCharAt(sb.length()-1, ')');",
      "info" : "ExpressionStatement[26793-26826]:ExpressionStatement[26518-26551]"
    }, {
      "left" : "validTimeZoneChars= sb.toString();",
      "right" : "validTimeZoneChars= sb.toString();",
      "info" : "ExpressionStatement[26839-26873]:ExpressionStatement[26564-26598]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26942-26951]:MarkerAnnotation[26667-26676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26960-26966]:Modifier[26685-26691]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26967-26974]:PrimitiveType[26692-26699]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[26975-26983]:SimpleName[26700-26708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26986-27023]:Block[26711-26748]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27000-27013]:ReturnStatement[26725-26738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27082-27091]:MarkerAnnotation[26807-26816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27100-27106]:Modifier[26825-26831]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27107-27114]:PrimitiveType[26832-26839]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[27115-27123]:SimpleName[26840-26848]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[27124-27145]:SingleVariableDeclaration[26849-26870]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[27147-27166]:SingleVariableDeclaration[26872-26891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27168-27250]:Block[26893-26975]"
    }, {
      "left" : "regex.append(validTimeZoneChars);",
      "right" : "regex.append(validTimeZoneChars);",
      "info" : "ExpressionStatement[27182-27215]:ExpressionStatement[26907-26940]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27228-27240]:ReturnStatement[26953-26965]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27309-27318]:MarkerAnnotation[27034-27043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27327-27333]:Modifier[27052-27058]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27334-27338]:PrimitiveType[27059-27063]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[27339-27350]:SimpleName[27064-27075]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[27351-27372]:SingleVariableDeclaration[27076-27097]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[27374-27386]:SingleVariableDeclaration[27099-27111]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[27388-27400]:SingleVariableDeclaration[27113-27125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27402-27936]:Block[27127-27661]"
    }, {
      "left" : "TimeZone tz;",
      "right" : "TimeZone tz;",
      "info" : "VariableDeclarationStatement[27416-27428]:VariableDeclarationStatement[27141-27153]"
    }, {
      "left" : "if(value.charAt(0)=='+' || value.charAt(0)=='-')",
      "right" : "if(value.charAt(0)=='+' || value.charAt(0)=='-')",
      "info" : "IfStatement[27441-27893]:IfStatement[27166-27618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27490-27560]:Block[27215-27285]"
    }, {
      "left" : "tz= TimeZone.getTimeZone(\"GMT\"+value);",
      "right" : "tz= TimeZone.getTimeZone(\"GMT\"+value);",
      "info" : "ExpressionStatement[27508-27546]:ExpressionStatement[27233-27271]"
    }, {
      "left" : "if(value.startsWith(\"GMT\"))",
      "right" : "if(value.startsWith(\"GMT\"))",
      "info" : "IfStatement[27578-27893]:IfStatement[27303-27618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27606-27670]:Block[27331-27395]"
    }, {
      "left" : "tz= TimeZone.getTimeZone(value);",
      "right" : "tz= TimeZone.getTimeZone(value);",
      "info" : "ExpressionStatement[27624-27656]:ExpressionStatement[27349-27381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27688-27893]:Block[27413-27618]"
    }, {
      "left" : "tz= tzNames.get(value);",
      "right" : "tz= tzNames.get(value);",
      "info" : "ExpressionStatement[27706-27729]:ExpressionStatement[27431-27454]"
    }, {
      "left" : "if(tz==null)",
      "right" : "if(tz==null)",
      "info" : "IfStatement[27746-27879]:IfStatement[27471-27604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27759-27879]:Block[27484-27604]"
    }, {
      "left" : "throw new IllegalArgumentException(value + \" is not a supported timezone name\");",
      "right" : "throw new IllegalArgumentException(value + \" is not a supported timezone name\");",
      "info" : "ThrowStatement[27781-27861]:ThrowStatement[27506-27586]"
    }, {
      "left" : "cal.setTimeZone(tz);",
      "right" : "cal.setTimeZone(tz);",
      "info" : "ExpressionStatement[27906-27926]:ExpressionStatement[27631-27651]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28402-28411]:MarkerAnnotation[28127-28136]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28420-28426]:Modifier[28145-28151]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28427-28430]:PrimitiveType[28152-28155]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[28431-28437]:SimpleName[28156-28162]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[28438-28448]:SingleVariableDeclaration[28163-28173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28450-28490]:Block[28175-28215]"
    }, {
      "left" : "return iValue-1;",
      "right" : "return iValue-1;",
      "info" : "ReturnStatement[28464-28480]:ReturnStatement[28189-28205]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29326-29335]:MarkerAnnotation[29051-29060]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29344-29350]:Modifier[29069-29075]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29351-29354]:PrimitiveType[29076-29079]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[29355-29361]:SimpleName[29080-29086]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[29362-29372]:SingleVariableDeclaration[29087-29097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29374-29415]:Block[29099-29140]"
    }, {
      "left" : "return iValue%24;",
      "right" : "return iValue%24;",
      "info" : "ReturnStatement[29388-29405]:ReturnStatement[29113-29130]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29524-29533]:MarkerAnnotation[29249-29258]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29542-29548]:Modifier[29267-29273]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29549-29552]:PrimitiveType[29274-29277]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[29553-29559]:SimpleName[29278-29284]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[29560-29570]:SingleVariableDeclaration[29285-29295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29572-29613]:Block[29297-29338]"
    }, {
      "left" : "return iValue%12;",
      "right" : "return iValue%12;",
      "info" : "ReturnStatement[29586-29603]:ReturnStatement[29311-29328]"
    } ]
  },
  "interFileMappings" : { }
}