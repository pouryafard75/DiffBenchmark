{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "TypeDeclaration[1161-33312]:TypeDeclaration[1161-33368]"
    }, {
      "left" : "private int last;",
      "right" : "private int last;",
      "info" : "FieldDeclaration[1459-1567]:FieldDeclaration[1459-1567]"
    }, {
      "left" : "private int origPtr;",
      "right" : "private int origPtr;",
      "info" : "FieldDeclaration[1573-1666]:FieldDeclaration[1573-1666]"
    }, {
      "left" : "private int blockSize100k;",
      "right" : "private int blockSize100k;",
      "info" : "FieldDeclaration[1672-1805]:FieldDeclaration[1672-1805]"
    }, {
      "left" : "private boolean blockRandomised;",
      "right" : "private boolean blockRandomised;",
      "info" : "FieldDeclaration[1811-1843]:FieldDeclaration[1811-1843]"
    }, {
      "left" : "private int bsBuff;",
      "right" : "private int bsBuff;",
      "info" : "FieldDeclaration[1849-1868]:FieldDeclaration[1849-1868]"
    }, {
      "left" : "private int bsLive;",
      "right" : "private int bsLive;",
      "info" : "FieldDeclaration[1873-1892]:FieldDeclaration[1873-1892]"
    }, {
      "left" : "private final CRC crc = new CRC();",
      "right" : "private final CRC crc = new CRC();",
      "info" : "FieldDeclaration[1897-1931]:FieldDeclaration[1897-1931]"
    }, {
      "left" : "private int nInUse;",
      "right" : "private int nInUse;",
      "info" : "FieldDeclaration[1937-1956]:FieldDeclaration[1937-1956]"
    }, {
      "left" : "private InputStream in;",
      "right" : "private InputStream in;",
      "info" : "FieldDeclaration[1962-1985]:FieldDeclaration[1962-1985]"
    }, {
      "left" : "private final boolean decompressConcatenated;",
      "right" : "private final boolean decompressConcatenated;",
      "info" : "FieldDeclaration[1990-2035]:FieldDeclaration[1990-2035]"
    }, {
      "left" : "private static final int EOF = 0;",
      "right" : "private static final int EOF = 0;",
      "info" : "FieldDeclaration[2041-2074]:FieldDeclaration[2041-2074]"
    }, {
      "left" : "private static final int START_BLOCK_STATE = 1;",
      "right" : "private static final int START_BLOCK_STATE = 1;",
      "info" : "FieldDeclaration[2079-2126]:FieldDeclaration[2079-2126]"
    }, {
      "left" : "private static final int RAND_PART_A_STATE = 2;",
      "right" : "private static final int RAND_PART_A_STATE = 2;",
      "info" : "FieldDeclaration[2131-2178]:FieldDeclaration[2131-2178]"
    }, {
      "left" : "private static final int RAND_PART_B_STATE = 3;",
      "right" : "private static final int RAND_PART_B_STATE = 3;",
      "info" : "FieldDeclaration[2183-2230]:FieldDeclaration[2183-2230]"
    }, {
      "left" : "private static final int RAND_PART_C_STATE = 4;",
      "right" : "private static final int RAND_PART_C_STATE = 4;",
      "info" : "FieldDeclaration[2235-2282]:FieldDeclaration[2235-2282]"
    }, {
      "left" : "private static final int NO_RAND_PART_A_STATE = 5;",
      "right" : "private static final int NO_RAND_PART_A_STATE = 5;",
      "info" : "FieldDeclaration[2287-2337]:FieldDeclaration[2287-2337]"
    }, {
      "left" : "private static final int NO_RAND_PART_B_STATE = 6;",
      "right" : "private static final int NO_RAND_PART_B_STATE = 6;",
      "info" : "FieldDeclaration[2342-2392]:FieldDeclaration[2342-2392]"
    }, {
      "left" : "private static final int NO_RAND_PART_C_STATE = 7;",
      "right" : "private static final int NO_RAND_PART_C_STATE = 7;",
      "info" : "FieldDeclaration[2397-2447]:FieldDeclaration[2397-2447]"
    }, {
      "left" : "private int currentState = START_BLOCK_STATE;",
      "right" : "private int currentState = START_BLOCK_STATE;",
      "info" : "FieldDeclaration[2453-2498]:FieldDeclaration[2453-2498]"
    }, {
      "left" : "private int storedBlockCRC, storedCombinedCRC;",
      "right" : "private int storedBlockCRC, storedCombinedCRC;",
      "info" : "FieldDeclaration[2504-2550]:FieldDeclaration[2504-2550]"
    }, {
      "left" : "private int computedBlockCRC, computedCombinedCRC;",
      "right" : "private int computedBlockCRC, computedCombinedCRC;",
      "info" : "FieldDeclaration[2555-2605]:FieldDeclaration[2555-2605]"
    }, {
      "left" : "private int su_count;",
      "right" : "private int su_count;",
      "info" : "FieldDeclaration[2664-2685]:FieldDeclaration[2664-2685]"
    }, {
      "left" : "private int su_ch2;",
      "right" : "private int su_ch2;",
      "info" : "FieldDeclaration[2690-2709]:FieldDeclaration[2690-2709]"
    }, {
      "left" : "private int su_chPrev;",
      "right" : "private int su_chPrev;",
      "info" : "FieldDeclaration[2714-2736]:FieldDeclaration[2714-2736]"
    }, {
      "left" : "private int su_i2;",
      "right" : "private int su_i2;",
      "info" : "FieldDeclaration[2741-2759]:FieldDeclaration[2741-2759]"
    }, {
      "left" : "private int su_j2;",
      "right" : "private int su_j2;",
      "info" : "FieldDeclaration[2764-2782]:FieldDeclaration[2764-2782]"
    }, {
      "left" : "private int su_rNToGo;",
      "right" : "private int su_rNToGo;",
      "info" : "FieldDeclaration[2787-2809]:FieldDeclaration[2787-2809]"
    }, {
      "left" : "private int su_rTPos;",
      "right" : "private int su_rTPos;",
      "info" : "FieldDeclaration[2814-2835]:FieldDeclaration[2814-2835]"
    }, {
      "left" : "private int su_tPos;",
      "right" : "private int su_tPos;",
      "info" : "FieldDeclaration[2840-2860]:FieldDeclaration[2840-2860]"
    }, {
      "left" : "private char su_z;",
      "right" : "private char su_z;",
      "info" : "FieldDeclaration[2865-2883]:FieldDeclaration[2865-2883]"
    }, {
      "left" : "private BZip2CompressorInputStream.Data data;",
      "right" : "private BZip2CompressorInputStream.Data data;",
      "info" : "FieldDeclaration[2889-3027]:FieldDeclaration[2889-3027]"
    }, {
      "left" : "public BZip2CompressorInputStream(final InputStream in) throws IOException",
      "right" : "public BZip2CompressorInputStream(final InputStream in) throws IOException",
      "info" : "MethodDeclaration[3033-3528]:MethodDeclaration[3033-3528]"
    }, {
      "left" : "public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException",
      "right" : "public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException",
      "info" : "MethodDeclaration[3534-4494]:MethodDeclaration[3534-4494]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[4500-4754]:MethodDeclaration[4500-4754]"
    }, {
      "left" : "public int read(final byte[] dest, final int offs, final int len)\n        throws IOException",
      "right" : "public int read(final byte[] dest, final int offs, final int len)\n        throws IOException",
      "info" : "MethodDeclaration[4859-5796]:MethodDeclaration[4859-5852]"
    }, {
      "left" : "private void makeMaps()",
      "right" : "private void makeMaps()",
      "info" : "MethodDeclaration[5802-6154]:MethodDeclaration[5858-6210]"
    }, {
      "left" : "private int read0() throws IOException",
      "right" : "private int read0() throws IOException",
      "info" : "MethodDeclaration[6160-6873]:MethodDeclaration[6216-6929]"
    }, {
      "left" : "private boolean init(boolean isFirstStream) throws IOException",
      "right" : "private boolean init(boolean isFirstStream) throws IOException",
      "info" : "MethodDeclaration[6879-7777]:MethodDeclaration[6935-7833]"
    }, {
      "left" : "private void initBlock() throws IOException",
      "right" : "private void initBlock() throws IOException",
      "info" : "MethodDeclaration[7783-9607]:MethodDeclaration[7839-9663]"
    }, {
      "left" : "private void endBlock() throws IOException",
      "right" : "private void endBlock() throws IOException",
      "info" : "MethodDeclaration[9613-10371]:MethodDeclaration[9669-10427]"
    }, {
      "left" : "private boolean complete() throws IOException",
      "right" : "private boolean complete() throws IOException",
      "info" : "MethodDeclaration[10377-10811]:MethodDeclaration[10433-10867]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[10817-11182]:MethodDeclaration[10873-11238]"
    }, {
      "left" : "private int bsR(final int n) throws IOException",
      "right" : "private int bsR(final int n) throws IOException",
      "info" : "MethodDeclaration[11188-11889]:MethodDeclaration[11244-11945]"
    }, {
      "left" : "private boolean bsGetBit() throws IOException",
      "right" : "private boolean bsGetBit() throws IOException",
      "info" : "MethodDeclaration[11895-12455]:MethodDeclaration[11951-12511]"
    }, {
      "left" : "private char bsGetUByte() throws IOException",
      "right" : "private char bsGetUByte() throws IOException",
      "info" : "MethodDeclaration[12461-12543]:MethodDeclaration[12517-12599]"
    }, {
      "left" : "private int bsGetInt() throws IOException",
      "right" : "private int bsGetInt() throws IOException",
      "info" : "MethodDeclaration[12549-12673]:MethodDeclaration[12605-12729]"
    }, {
      "left" : "private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize)",
      "right" : "private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize)",
      "info" : "MethodDeclaration[12679-13921]:MethodDeclaration[12735-13977]"
    }, {
      "left" : "private void recvDecodingTables() throws IOException",
      "right" : "private void recvDecodingTables() throws IOException",
      "info" : "MethodDeclaration[13927-16250]:MethodDeclaration[13983-16306]"
    }, {
      "left" : "private void createHuffmanDecodingTables(final int alphaSize,\n                                             final int nGroups)",
      "right" : "private void createHuffmanDecodingTables(final int alphaSize,\n                                             final int nGroups)",
      "info" : "MethodDeclaration[16256-17350]:MethodDeclaration[16312-17406]"
    }, {
      "left" : "private void getAndMoveToFrontDecode() throws IOException",
      "right" : "private void getAndMoveToFrontDecode() throws IOException",
      "info" : "MethodDeclaration[17356-24379]:MethodDeclaration[17412-24435]"
    }, {
      "left" : "private int getAndMoveToFrontDecode0(final int groupNo) throws IOException",
      "right" : "private int getAndMoveToFrontDecode0(final int groupNo) throws IOException",
      "info" : "MethodDeclaration[24385-25512]:MethodDeclaration[24441-25568]"
    }, {
      "left" : "private int setupBlock() throws IOException",
      "right" : "private int setupBlock() throws IOException",
      "info" : "MethodDeclaration[25518-26597]:MethodDeclaration[25574-26653]"
    }, {
      "left" : "private int setupRandPartA() throws IOException",
      "right" : "private int setupRandPartA() throws IOException",
      "info" : "MethodDeclaration[26603-27474]:MethodDeclaration[26659-27530]"
    }, {
      "left" : "private int setupNoRandPartA() throws IOException",
      "right" : "private int setupNoRandPartA() throws IOException",
      "info" : "MethodDeclaration[27480-28102]:MethodDeclaration[27536-28158]"
    }, {
      "left" : "private int setupRandPartB() throws IOException",
      "right" : "private int setupRandPartB() throws IOException",
      "info" : "MethodDeclaration[28108-29085]:MethodDeclaration[28164-29141]"
    }, {
      "left" : "private int setupRandPartC() throws IOException",
      "right" : "private int setupRandPartC() throws IOException",
      "info" : "MethodDeclaration[29091-29459]:MethodDeclaration[29147-29515]"
    }, {
      "left" : "private int setupNoRandPartB() throws IOException",
      "right" : "private int setupNoRandPartB() throws IOException",
      "info" : "MethodDeclaration[29465-29937]:MethodDeclaration[29521-29993]"
    }, {
      "left" : "private int setupNoRandPartC() throws IOException",
      "right" : "private int setupNoRandPartC() throws IOException",
      "info" : "MethodDeclaration[29943-30364]:MethodDeclaration[29999-30420]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "TypeDeclaration[30370-32601]:TypeDeclaration[30426-32657]"
    }, {
      "left" : "final boolean[] inUse = new boolean[256];",
      "right" : "final boolean[] inUse = new boolean[256];",
      "info" : "FieldDeclaration[30446-30487]:FieldDeclaration[30502-30543]"
    }, {
      "left" : "final byte[] seqToUnseq = new byte[256];",
      "right" : "final byte[] seqToUnseq = new byte[256];",
      "info" : "FieldDeclaration[30509-30549]:FieldDeclaration[30565-30605]"
    }, {
      "left" : "final byte[] selector = new byte[MAX_SELECTORS];",
      "right" : "final byte[] selector = new byte[MAX_SELECTORS];",
      "info" : "FieldDeclaration[30570-30618]:FieldDeclaration[30626-30674]"
    }, {
      "left" : "final byte[] selectorMtf = new byte[MAX_SELECTORS];",
      "right" : "final byte[] selectorMtf = new byte[MAX_SELECTORS];",
      "info" : "FieldDeclaration[30641-30692]:FieldDeclaration[30697-30748]"
    }, {
      "left" : "final int[] unzftab = new int[256];",
      "right" : "final int[] unzftab = new int[256];",
      "info" : "FieldDeclaration[30716-30869]:FieldDeclaration[30772-30925]"
    }, {
      "left" : "final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[30892-30948]:FieldDeclaration[30948-31004]"
    }, {
      "left" : "final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[30970-31025]:FieldDeclaration[31026-31081]"
    }, {
      "left" : "final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31047-31102]:FieldDeclaration[31103-31158]"
    }, {
      "left" : "final int[] minLens = new int[N_GROUPS];",
      "right" : "final int[] minLens = new int[N_GROUPS];",
      "info" : "FieldDeclaration[31124-31164]:FieldDeclaration[31180-31220]"
    }, {
      "left" : "final int[] cftab = new int[257];",
      "right" : "final int[] cftab = new int[257];",
      "info" : "FieldDeclaration[31185-31218]:FieldDeclaration[31241-31274]"
    }, {
      "left" : "final char[] getAndMoveToFrontDecode_yy = new char[256];",
      "right" : "final char[] getAndMoveToFrontDecode_yy = new char[256];",
      "info" : "FieldDeclaration[31240-31296]:FieldDeclaration[31296-31352]"
    }, {
      "left" : "final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31317-31386]:FieldDeclaration[31373-31442]"
    }, {
      "left" : "final byte[] recvDecodingTables_pos = new byte[N_GROUPS];",
      "right" : "final byte[] recvDecodingTables_pos = new byte[N_GROUPS];",
      "info" : "FieldDeclaration[31419-31476]:FieldDeclaration[31475-31532]"
    }, {
      "left" : "int[] tt;",
      "right" : "int[] tt;",
      "info" : "FieldDeclaration[31545-31554]:FieldDeclaration[31601-31610]"
    }, {
      "left" : "byte[] ll8;",
      "right" : "byte[] ll8;",
      "info" : "FieldDeclaration[31579-31590]:FieldDeclaration[31635-31646]"
    }, {
      "left" : "Data(int blockSize100k)",
      "right" : "Data(int blockSize100k)",
      "info" : "MethodDeclaration[31694-31808]:MethodDeclaration[31750-31864]"
    }, {
      "left" : "int[] initTT(int length)",
      "right" : "int[] initTT(int length)",
      "info" : "MethodDeclaration[31818-32594]:MethodDeclaration[31874-32650]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[32607-33310]:MethodDeclaration[32663-33366]"
    } ],
    "mappings" : [
 {
      "left" : "CompressorInputStream",
      "right" : "CompressorInputStream",
      "info" : "SimpleType[1330-1351]:SimpleType[1330-1351]"
    }, {
      "left" : "BZip2Constants",
      "right" : "BZip2Constants",
      "info" : "SimpleType[1437-1451]:SimpleType[1437-1451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3421-3427]:Modifier[3421-3427]"
    }, {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "SimpleName[3428-3454]:SimpleName[3428-3454]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3455-3475]:SingleVariableDeclaration[3455-3475]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3484-3495]:SimpleType[3484-3495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3496-3528]:Block[3496-3528]"
    }, {
      "left" : "this(in, false);",
      "right" : "this(in, false);",
      "info" : "ConstructorInvocation[3506-3522]:ConstructorInvocation[3506-3522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4248-4254]:Modifier[4248-4254]"
    }, {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "SimpleName[4255-4281]:SimpleName[4255-4281]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4282-4302]:SingleVariableDeclaration[4282-4302]"
    }, {
      "left" : "final boolean decompressConcatenated",
      "right" : "final boolean decompressConcatenated",
      "info" : "SingleVariableDeclaration[4304-4340]:SingleVariableDeclaration[4304-4340]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4349-4360]:SimpleType[4349-4360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4361-4494]:Block[4361-4494]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[4371-4384]:ExpressionStatement[4371-4384]"
    }, {
      "left" : "this.decompressConcatenated = decompressConcatenated;",
      "right" : "this.decompressConcatenated = decompressConcatenated;",
      "info" : "ExpressionStatement[4393-4446]:ExpressionStatement[4393-4446]"
    }, {
      "left" : "init(true);",
      "right" : "init(true);",
      "info" : "ExpressionStatement[4456-4467]:ExpressionStatement[4456-4467]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[4476-4488]:ExpressionStatement[4476-4488]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4500-4509]:MarkerAnnotation[4500-4509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4514-4520]:Modifier[4514-4520]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4521-4524]:PrimitiveType[4521-4524]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4525-4529]:SimpleName[4525-4529]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4539-4550]:SimpleType[4539-4550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4551-4754]:Block[4551-4754]"
    }, {
      "left" : "if (this.in != null)",
      "right" : "if (this.in != null)",
      "info" : "IfStatement[4561-4748]:IfStatement[4561-4748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4582-4679]:Block[4582-4679]"
    }, {
      "left" : "int r = read0();",
      "right" : "int r = read0();",
      "info" : "VariableDeclarationStatement[4596-4612]:VariableDeclarationStatement[4596-4612]"
    }, {
      "left" : "count(r < 0 ? -1 : 1);",
      "right" : "count(r < 0 ? -1 : 1);",
      "info" : "ExpressionStatement[4625-4647]:ExpressionStatement[4625-4647]"
    }, {
      "left" : "return r;",
      "right" : "return r;",
      "info" : "ReturnStatement[4660-4669]:ReturnStatement[4660-4669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4685-4748]:Block[4685-4748]"
    }, {
      "left" : "throw new IOException(\"stream closed\");",
      "right" : "throw new IOException(\"stream closed\");",
      "info" : "ThrowStatement[4699-4738]:ThrowStatement[4699-4738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4859-4868]:MarkerAnnotation[4859-4868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4873-4879]:Modifier[4873-4879]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4880-4883]:PrimitiveType[4880-4883]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4884-4888]:SimpleName[4884-4888]"
    }, {
      "left" : "final byte[] dest",
      "right" : "final byte[] dest",
      "info" : "SingleVariableDeclaration[4889-4906]:SingleVariableDeclaration[4889-4906]"
    }, {
      "left" : "final int offs",
      "right" : "final int offs",
      "info" : "SingleVariableDeclaration[4908-4922]:SingleVariableDeclaration[4908-4922]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[4924-4937]:SingleVariableDeclaration[4924-4937]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4954-4965]:SimpleType[4954-4965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4966-5796]:Block[4966-5852]"
    }, {
      "left" : "if (offs < 0)",
      "right" : "if (offs < 0)",
      "info" : "IfStatement[4976-5077]:IfStatement[4976-5077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4990-5077]:Block[4990-5077]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");",
      "right" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");",
      "info" : "ThrowStatement[5004-5067]:ThrowStatement[5004-5067]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[5086-5184]:IfStatement[5086-5184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5099-5184]:Block[5099-5184]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");",
      "right" : "throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");",
      "info" : "ThrowStatement[5113-5174]:ThrowStatement[5113-5174]"
    }, {
      "left" : "if (offs + len > dest.length)",
      "right" : "if (offs + len > dest.length)",
      "info" : "IfStatement[5193-5408]:IfStatement[5193-5408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5223-5408]:Block[5223-5408]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");",
      "right" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");",
      "info" : "ThrowStatement[5237-5398]:ThrowStatement[5237-5398]"
    }, {
      "left" : "if (this.in == null)",
      "right" : "if (this.in == null)",
      "info" : "IfStatement[5417-5501]:IfStatement[5417-5501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5438-5501]:Block[5438-5501]"
    }, {
      "left" : "throw new IOException(\"stream closed\");",
      "right" : "throw new IOException(\"stream closed\");",
      "info" : "ThrowStatement[5452-5491]:ThrowStatement[5452-5491]"
    }, {
      "left" : "final int hi = offs + len;",
      "right" : "final int hi = offs + len;",
      "info" : "VariableDeclarationStatement[5511-5537]:VariableDeclarationStatement[5567-5593]"
    }, {
      "left" : "int destOffs = offs;",
      "right" : "int destOffs = offs;",
      "info" : "VariableDeclarationStatement[5546-5566]:VariableDeclarationStatement[5602-5622]"
    }, {
      "left" : "int b;",
      "right" : "int b;",
      "info" : "VariableDeclarationStatement[5575-5581]:VariableDeclarationStatement[5631-5637]"
    }, {
      "left" : "while (destOffs < hi && ((b = read0()) >= 0))",
      "right" : "while (destOffs < hi && ((b = read0()) >= 0))",
      "info" : "WhileStatement[5590-5710]:WhileStatement[5646-5766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5636-5710]:Block[5692-5766]"
    }, {
      "left" : "dest[destOffs++] = (byte) b;",
      "right" : "dest[destOffs++] = (byte) b;",
      "info" : "ExpressionStatement[5650-5678]:ExpressionStatement[5706-5734]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[5691-5700]:ExpressionStatement[5747-5756]"
    }, {
      "left" : "int c = (destOffs == offs) ? -1 : (destOffs - offs);",
      "right" : "int c = (destOffs == offs) ? -1 : (destOffs - offs);",
      "info" : "VariableDeclarationStatement[5720-5772]:VariableDeclarationStatement[5776-5828]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[5781-5790]:ReturnStatement[5837-5846]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5802-5809]:Modifier[5858-5865]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5810-5814]:PrimitiveType[5866-5870]"
    }, {
      "left" : "makeMaps",
      "right" : "makeMaps",
      "info" : "SimpleName[5815-5823]:SimpleName[5871-5879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5826-6154]:Block[5882-6210]"
    }, {
      "left" : "final boolean[] inUse = this.data.inUse;",
      "right" : "final boolean[] inUse = this.data.inUse;",
      "info" : "VariableDeclarationStatement[5836-5876]:VariableDeclarationStatement[5892-5932]"
    }, {
      "left" : "final byte[] seqToUnseq = this.data.seqToUnseq;",
      "right" : "final byte[] seqToUnseq = this.data.seqToUnseq;",
      "info" : "VariableDeclarationStatement[5885-5932]:VariableDeclarationStatement[5941-5988]"
    }, {
      "left" : "int nInUseShadow = 0;",
      "right" : "int nInUseShadow = 0;",
      "info" : "VariableDeclarationStatement[5942-5963]:VariableDeclarationStatement[5998-6019]"
    }, {
      "left" : "for (int i = 0; i < 256; i++)",
      "right" : "for (int i = 0; i < 256; i++)",
      "info" : "ForStatement[5973-6111]:ForStatement[6029-6167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6003-6111]:Block[6059-6167]"
    }, {
      "left" : "if (inUse[i])",
      "right" : "if (inUse[i])",
      "info" : "IfStatement[6017-6101]:IfStatement[6073-6157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6031-6101]:Block[6087-6157]"
    }, {
      "left" : "seqToUnseq[nInUseShadow++] = (byte) i;",
      "right" : "seqToUnseq[nInUseShadow++] = (byte) i;",
      "info" : "ExpressionStatement[6049-6087]:ExpressionStatement[6105-6143]"
    }, {
      "left" : "this.nInUse = nInUseShadow;",
      "right" : "this.nInUse = nInUseShadow;",
      "info" : "ExpressionStatement[6121-6148]:ExpressionStatement[6177-6204]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6160-6167]:Modifier[6216-6223]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6168-6171]:PrimitiveType[6224-6227]"
    }, {
      "left" : "read0",
      "right" : "read0",
      "info" : "SimpleName[6172-6177]:SimpleName[6228-6233]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6187-6198]:SimpleType[6243-6254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6199-6873]:Block[6255-6929]"
    }, {
      "left" : "switch (currentState) {\n        case EOF:\n            return -1;\n\n        case START_BLOCK_STATE:\n            return setupBlock();\n\n        case RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case RAND_PART_B_STATE:\n            return setupRandPartB();\n\n        case RAND_PART_C_STATE:\n            return setupRandPartC();\n\n        case NO_RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case NO_RAND_PART_B_STATE:\n            return setupNoRandPartB();\n\n        case NO_RAND_PART_C_STATE:\n            return setupNoRandPartC();\n\n        default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (currentState) {\n        case EOF:\n            return -1;\n\n        case START_BLOCK_STATE:\n            return setupBlock();\n\n        case RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case RAND_PART_B_STATE:\n            return setupRandPartB();\n\n        case RAND_PART_C_STATE:\n            return setupRandPartC();\n\n        case NO_RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case NO_RAND_PART_B_STATE:\n            return setupNoRandPartB();\n\n        case NO_RAND_PART_C_STATE:\n            return setupNoRandPartC();\n\n        default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[6209-6867]:SwitchStatement[6265-6923]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[6241-6250]:SwitchCase[6297-6306]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[6263-6273]:ReturnStatement[6319-6329]"
    }, {
      "left" : "case START_BLOCK_STATE:",
      "right" : "case START_BLOCK_STATE:",
      "info" : "SwitchCase[6283-6306]:SwitchCase[6339-6362]"
    }, {
      "left" : "return setupBlock();",
      "right" : "return setupBlock();",
      "info" : "ReturnStatement[6319-6339]:ReturnStatement[6375-6395]"
    }, {
      "left" : "case RAND_PART_A_STATE:",
      "right" : "case RAND_PART_A_STATE:",
      "info" : "SwitchCase[6349-6372]:SwitchCase[6405-6428]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6385-6419]:ThrowStatement[6441-6475]"
    }, {
      "left" : "case RAND_PART_B_STATE:",
      "right" : "case RAND_PART_B_STATE:",
      "info" : "SwitchCase[6429-6452]:SwitchCase[6485-6508]"
    }, {
      "left" : "return setupRandPartB();",
      "right" : "return setupRandPartB();",
      "info" : "ReturnStatement[6465-6489]:ReturnStatement[6521-6545]"
    }, {
      "left" : "case RAND_PART_C_STATE:",
      "right" : "case RAND_PART_C_STATE:",
      "info" : "SwitchCase[6499-6522]:SwitchCase[6555-6578]"
    }, {
      "left" : "return setupRandPartC();",
      "right" : "return setupRandPartC();",
      "info" : "ReturnStatement[6535-6559]:ReturnStatement[6591-6615]"
    }, {
      "left" : "case NO_RAND_PART_A_STATE:",
      "right" : "case NO_RAND_PART_A_STATE:",
      "info" : "SwitchCase[6569-6595]:SwitchCase[6625-6651]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6608-6642]:ThrowStatement[6664-6698]"
    }, {
      "left" : "case NO_RAND_PART_B_STATE:",
      "right" : "case NO_RAND_PART_B_STATE:",
      "info" : "SwitchCase[6652-6678]:SwitchCase[6708-6734]"
    }, {
      "left" : "return setupNoRandPartB();",
      "right" : "return setupNoRandPartB();",
      "info" : "ReturnStatement[6691-6717]:ReturnStatement[6747-6773]"
    }, {
      "left" : "case NO_RAND_PART_C_STATE:",
      "right" : "case NO_RAND_PART_C_STATE:",
      "info" : "SwitchCase[6727-6753]:SwitchCase[6783-6809]"
    }, {
      "left" : "return setupNoRandPartC();",
      "right" : "return setupNoRandPartC();",
      "info" : "ReturnStatement[6766-6792]:ReturnStatement[6822-6848]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6802-6810]:SwitchCase[6858-6866]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6823-6857]:ThrowStatement[6879-6913]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6879-6886]:Modifier[6935-6942]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6887-6894]:PrimitiveType[6943-6950]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[6895-6899]:SimpleName[6951-6955]"
    }, {
      "left" : "boolean isFirstStream",
      "right" : "boolean isFirstStream",
      "info" : "SingleVariableDeclaration[6900-6921]:SingleVariableDeclaration[6956-6977]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6930-6941]:SimpleType[6986-6997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-7777]:Block[6998-7833]"
    }, {
      "left" : "if (null == in)",
      "right" : "if (null == in)",
      "info" : "IfStatement[6952-7032]:IfStatement[7008-7088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6968-7032]:Block[7024-7088]"
    }, {
      "left" : "throw new IOException(\"No InputStream\");",
      "right" : "throw new IOException(\"No InputStream\");",
      "info" : "ThrowStatement[6982-7022]:ThrowStatement[7038-7078]"
    }, {
      "left" : "int magic0 = this.in.read();",
      "right" : "int magic0 = this.in.read();",
      "info" : "VariableDeclarationStatement[7042-7070]:VariableDeclarationStatement[7098-7126]"
    }, {
      "left" : "if (magic0 == -1 && !isFirstStream)",
      "right" : "if (magic0 == -1 && !isFirstStream)",
      "info" : "IfStatement[7079-7152]:IfStatement[7135-7208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7115-7152]:Block[7171-7208]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7129-7142]:ReturnStatement[7185-7198]"
    }, {
      "left" : "int magic1 = this.in.read();",
      "right" : "int magic1 = this.in.read();",
      "info" : "VariableDeclarationStatement[7161-7189]:VariableDeclarationStatement[7217-7245]"
    }, {
      "left" : "int magic2 = this.in.read();",
      "right" : "int magic2 = this.in.read();",
      "info" : "VariableDeclarationStatement[7198-7226]:VariableDeclarationStatement[7254-7282]"
    }, {
      "left" : "if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')",
      "right" : "if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')",
      "info" : "IfStatement[7236-7467]:IfStatement[7292-7523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7289-7467]:Block[7345-7523]"
    }, {
      "left" : "throw new IOException(isFirstStream\n                    ? \"Stream is not in the BZip2 format\"\n                    : \"Garbage after a valid BZip2 stream\");",
      "right" : "throw new IOException(isFirstStream\n                    ? \"Stream is not in the BZip2 format\"\n                    : \"Garbage after a valid BZip2 stream\");",
      "info" : "ThrowStatement[7303-7457]:ThrowStatement[7359-7513]"
    }, {
      "left" : "int blockSize = this.in.read();",
      "right" : "int blockSize = this.in.read();",
      "info" : "VariableDeclarationStatement[7477-7508]:VariableDeclarationStatement[7533-7564]"
    }, {
      "left" : "if ((blockSize < '1') || (blockSize > '9'))",
      "right" : "if ((blockSize < '1') || (blockSize > '9'))",
      "info" : "IfStatement[7517-7638]:IfStatement[7573-7694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7638]:Block[7617-7694]"
    }, {
      "left" : "throw new IOException(\"BZip2 block size is invalid\");",
      "right" : "throw new IOException(\"BZip2 block size is invalid\");",
      "info" : "ThrowStatement[7575-7628]:ThrowStatement[7631-7684]"
    }, {
      "left" : "this.blockSize100k = blockSize - '0';",
      "right" : "this.blockSize100k = blockSize - '0';",
      "info" : "ExpressionStatement[7648-7685]:ExpressionStatement[7704-7741]"
    }, {
      "left" : "this.bsLive = 0;",
      "right" : "this.bsLive = 0;",
      "info" : "ExpressionStatement[7695-7711]:ExpressionStatement[7751-7767]"
    }, {
      "left" : "this.computedCombinedCRC = 0;",
      "right" : "this.computedCombinedCRC = 0;",
      "info" : "ExpressionStatement[7720-7749]:ExpressionStatement[7776-7805]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7759-7771]:ReturnStatement[7815-7827]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7783-7790]:Modifier[7839-7846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7791-7795]:PrimitiveType[7847-7851]"
    }, {
      "left" : "initBlock",
      "right" : "initBlock",
      "info" : "SimpleName[7796-7805]:SimpleName[7852-7861]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7815-7826]:SimpleType[7871-7882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7827-9607]:Block[7883-9663]"
    }, {
      "left" : "char magic0;",
      "right" : "char magic0;",
      "info" : "VariableDeclarationStatement[7837-7849]:VariableDeclarationStatement[7893-7905]"
    }, {
      "left" : "char magic1;",
      "right" : "char magic1;",
      "info" : "VariableDeclarationStatement[7858-7870]:VariableDeclarationStatement[7914-7926]"
    }, {
      "left" : "char magic2;",
      "right" : "char magic2;",
      "info" : "VariableDeclarationStatement[7879-7891]:VariableDeclarationStatement[7935-7947]"
    }, {
      "left" : "char magic3;",
      "right" : "char magic3;",
      "info" : "VariableDeclarationStatement[7900-7912]:VariableDeclarationStatement[7956-7968]"
    }, {
      "left" : "char magic4;",
      "right" : "char magic4;",
      "info" : "VariableDeclarationStatement[7921-7933]:VariableDeclarationStatement[7977-7989]"
    }, {
      "left" : "char magic5;",
      "right" : "char magic5;",
      "info" : "VariableDeclarationStatement[7942-7954]:VariableDeclarationStatement[7998-8010]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7964-8724]:WhileStatement[8020-8780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7977-8724]:Block[8033-8780]"
    }, {
      "left" : "magic0 = bsGetUByte();",
      "right" : "magic0 = bsGetUByte();",
      "info" : "ExpressionStatement[8033-8055]:ExpressionStatement[8089-8111]"
    }, {
      "left" : "magic1 = bsGetUByte();",
      "right" : "magic1 = bsGetUByte();",
      "info" : "ExpressionStatement[8068-8090]:ExpressionStatement[8124-8146]"
    }, {
      "left" : "magic2 = bsGetUByte();",
      "right" : "magic2 = bsGetUByte();",
      "info" : "ExpressionStatement[8103-8125]:ExpressionStatement[8159-8181]"
    }, {
      "left" : "magic3 = bsGetUByte();",
      "right" : "magic3 = bsGetUByte();",
      "info" : "ExpressionStatement[8138-8160]:ExpressionStatement[8194-8216]"
    }, {
      "left" : "magic4 = bsGetUByte();",
      "right" : "magic4 = bsGetUByte();",
      "info" : "ExpressionStatement[8173-8195]:ExpressionStatement[8229-8251]"
    }, {
      "left" : "magic5 = bsGetUByte();",
      "right" : "magic5 = bsGetUByte();",
      "info" : "ExpressionStatement[8208-8230]:ExpressionStatement[8264-8286]"
    }, {
      "left" : "if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)",
      "right" : "if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)",
      "info" : "IfStatement[8312-8480]:IfStatement[8368-8536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8442-8480]:Block[8498-8536]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8460-8466]:BreakStatement[8516-8522]"
    }, {
      "left" : "if (complete())",
      "right" : "if (complete())",
      "info" : "IfStatement[8659-8714]:IfStatement[8715-8770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8675-8714]:Block[8731-8770]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8693-8700]:ReturnStatement[8749-8756]"
    }, {
      "left" : "if (magic0 != 0x31 || // '1'\n            magic1 != 0x41 || // ')'\n            magic2 != 0x59 || // 'Y'\n            magic3 != 0x26 || // '&'\n            magic4 != 0x53 || // 'S'\n            magic5 != 0x59)",
      "right" : "if (magic0 != 0x31 || // '1'\n            magic1 != 0x41 || // ')'\n            magic2 != 0x59 || // 'Y'\n            magic3 != 0x26 || // '&'\n            magic4 != 0x53 || // 'S'\n            magic5 != 0x59)",
      "info" : "IfStatement[8734-9601]:IfStatement[8790-9657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8959-9062]:Block[9015-9118]"
    }, {
      "left" : "this.currentState = EOF;",
      "right" : "this.currentState = EOF;",
      "info" : "ExpressionStatement[8973-8997]:ExpressionStatement[9029-9053]"
    }, {
      "left" : "throw new IOException(\"bad block header\");",
      "right" : "throw new IOException(\"bad block header\");",
      "info" : "ThrowStatement[9010-9052]:ThrowStatement[9066-9108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9068-9601]:Block[9124-9657]"
    }, {
      "left" : "this.storedBlockCRC = bsGetInt();",
      "right" : "this.storedBlockCRC = bsGetInt();",
      "info" : "ExpressionStatement[9082-9115]:ExpressionStatement[9138-9171]"
    }, {
      "left" : "this.blockRandomised = bsR(1) == 1;",
      "right" : "this.blockRandomised = bsR(1) == 1;",
      "info" : "ExpressionStatement[9128-9163]:ExpressionStatement[9184-9219]"
    }, {
      "left" : "if (this.data == null)",
      "right" : "if (this.data == null)",
      "info" : "IfStatement[9335-9431]:IfStatement[9391-9487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9431]:Block[9414-9487]"
    }, {
      "left" : "this.data = new Data(this.blockSize100k);",
      "right" : "this.data = new Data(this.blockSize100k);",
      "info" : "ExpressionStatement[9376-9417]:ExpressionStatement[9432-9473]"
    }, {
      "left" : "getAndMoveToFrontDecode();",
      "right" : "getAndMoveToFrontDecode();",
      "info" : "ExpressionStatement[9475-9501]:ExpressionStatement[9531-9557]"
    }, {
      "left" : "this.crc.initialiseCRC();",
      "right" : "this.crc.initialiseCRC();",
      "info" : "ExpressionStatement[9515-9540]:ExpressionStatement[9571-9596]"
    }, {
      "left" : "this.currentState = START_BLOCK_STATE;",
      "right" : "this.currentState = START_BLOCK_STATE;",
      "info" : "ExpressionStatement[9553-9591]:ExpressionStatement[9609-9647]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9613-9620]:Modifier[9669-9676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9621-9625]:PrimitiveType[9677-9681]"
    }, {
      "left" : "endBlock",
      "right" : "endBlock",
      "info" : "SimpleName[9626-9634]:SimpleName[9682-9690]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9644-9655]:SimpleType[9700-9711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9656-10371]:Block[9712-10427]"
    }, {
      "left" : "this.computedBlockCRC = this.crc.getFinalCRC();",
      "right" : "this.computedBlockCRC = this.crc.getFinalCRC();",
      "info" : "ExpressionStatement[9666-9713]:ExpressionStatement[9722-9769]"
    }, {
      "left" : "if (this.storedBlockCRC != this.computedBlockCRC)",
      "right" : "if (this.storedBlockCRC != this.computedBlockCRC)",
      "info" : "IfStatement[9773-10189]:IfStatement[9829-10245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9823-10189]:Block[9879-10245]"
    }, {
      "left" : "this.computedCombinedCRC = (this.storedCombinedCRC << 1)\n                | (this.storedCombinedCRC >>> 31);",
      "right" : "this.computedCombinedCRC = (this.storedCombinedCRC << 1)\n                | (this.storedCombinedCRC >>> 31);",
      "info" : "ExpressionStatement[9956-10063]:ExpressionStatement[10012-10119]"
    }, {
      "left" : "this.computedCombinedCRC ^= this.storedBlockCRC;",
      "right" : "this.computedCombinedCRC ^= this.storedBlockCRC;",
      "info" : "ExpressionStatement[10076-10124]:ExpressionStatement[10132-10180]"
    }, {
      "left" : "throw new IOException(\"BZip2 CRC error\");",
      "right" : "throw new IOException(\"BZip2 CRC error\");",
      "info" : "ThrowStatement[10138-10179]:ThrowStatement[10194-10235]"
    }, {
      "left" : "this.computedCombinedCRC = (this.computedCombinedCRC << 1)\n            | (this.computedCombinedCRC >>> 31);",
      "right" : "this.computedCombinedCRC = (this.computedCombinedCRC << 1)\n            | (this.computedCombinedCRC >>> 31);",
      "info" : "ExpressionStatement[10199-10306]:ExpressionStatement[10255-10362]"
    }, {
      "left" : "this.computedCombinedCRC ^= this.computedBlockCRC;",
      "right" : "this.computedCombinedCRC ^= this.computedBlockCRC;",
      "info" : "ExpressionStatement[10315-10365]:ExpressionStatement[10371-10421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10377-10384]:Modifier[10433-10440]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10385-10392]:PrimitiveType[10441-10448]"
    }, {
      "left" : "complete",
      "right" : "complete",
      "info" : "SimpleName[10393-10401]:SimpleName[10449-10457]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10411-10422]:SimpleType[10467-10478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10423-10811]:Block[10479-10867]"
    }, {
      "left" : "this.storedCombinedCRC = bsGetInt();",
      "right" : "this.storedCombinedCRC = bsGetInt();",
      "info" : "ExpressionStatement[10433-10469]:ExpressionStatement[10489-10525]"
    }, {
      "left" : "this.currentState = EOF;",
      "right" : "this.currentState = EOF;",
      "info" : "ExpressionStatement[10478-10502]:ExpressionStatement[10534-10558]"
    }, {
      "left" : "this.data = null;",
      "right" : "this.data = null;",
      "info" : "ExpressionStatement[10511-10528]:ExpressionStatement[10567-10584]"
    }, {
      "left" : "if (this.storedCombinedCRC != this.computedCombinedCRC)",
      "right" : "if (this.storedCombinedCRC != this.computedCombinedCRC)",
      "info" : "IfStatement[10538-10659]:IfStatement[10594-10715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10594-10659]:Block[10650-10715]"
    }, {
      "left" : "throw new IOException(\"BZip2 CRC error\");",
      "right" : "throw new IOException(\"BZip2 CRC error\");",
      "info" : "ThrowStatement[10608-10649]:ThrowStatement[10664-10705]"
    }, {
      "left" : "return !decompressConcatenated || !init(false);",
      "right" : "return !decompressConcatenated || !init(false);",
      "info" : "ReturnStatement[10758-10805]:ReturnStatement[10814-10861]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10817-10826]:MarkerAnnotation[10873-10882]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10831-10837]:Modifier[10887-10893]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10838-10842]:PrimitiveType[10894-10898]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[10843-10848]:SimpleName[10899-10904]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10858-10869]:SimpleType[10914-10925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10870-11182]:Block[10926-11238]"
    }, {
      "left" : "InputStream inShadow = this.in;",
      "right" : "InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[10880-10911]:VariableDeclarationStatement[10936-10967]"
    }, {
      "left" : "if (inShadow != null)",
      "right" : "if (inShadow != null)",
      "info" : "IfStatement[10920-11176]:IfStatement[10976-11232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10942-11176]:Block[10998-11232]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10956-11166]:TryStatement[11012-11222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10960-11076]:Block[11016-11132]"
    }, {
      "left" : "if (inShadow != System.in)",
      "right" : "if (inShadow != System.in)",
      "info" : "IfStatement[10978-11062]:IfStatement[11034-11118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11005-11062]:Block[11061-11118]"
    }, {
      "left" : "inShadow.close();",
      "right" : "inShadow.close();",
      "info" : "ExpressionStatement[11027-11044]:ExpressionStatement[11083-11100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11085-11166]:Block[11141-11222]"
    }, {
      "left" : "this.data = null;",
      "right" : "this.data = null;",
      "info" : "ExpressionStatement[11103-11120]:ExpressionStatement[11159-11176]"
    }, {
      "left" : "this.in = null;",
      "right" : "this.in = null;",
      "info" : "ExpressionStatement[11137-11152]:ExpressionStatement[11193-11208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11188-11195]:Modifier[11244-11251]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11196-11199]:PrimitiveType[11252-11255]"
    }, {
      "left" : "bsR",
      "right" : "bsR",
      "info" : "SimpleName[11200-11203]:SimpleName[11256-11259]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[11204-11215]:SingleVariableDeclaration[11260-11271]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11224-11235]:SimpleType[11280-11291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11236-11889]:Block[11292-11945]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[11246-11277]:VariableDeclarationStatement[11302-11333]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[11286-11317]:VariableDeclarationStatement[11342-11373]"
    }, {
      "left" : "if (bsLiveShadow < n)",
      "right" : "if (bsLiveShadow < n)",
      "info" : "IfStatement[11327-11772]:IfStatement[11383-11828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11349-11772]:Block[11405-11828]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[11363-11400]:VariableDeclarationStatement[11419-11456]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[11413-11721]:DoStatement[11469-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11416-11695]:Block[11472-11751]"
    }, {
      "left" : "int thech = inShadow.read();",
      "right" : "int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[11434-11462]:VariableDeclarationStatement[11490-11518]"
    }, {
      "left" : "if (thech < 0)",
      "right" : "if (thech < 0)",
      "info" : "IfStatement[11480-11585]:IfStatement[11536-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11495-11585]:Block[11551-11641]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[11517-11567]:ThrowStatement[11573-11623]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[11603-11646]:ExpressionStatement[11659-11702]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[11663-11681]:ExpressionStatement[11719-11737]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[11735-11762]:ExpressionStatement[11791-11818]"
    }, {
      "left" : "this.bsLive = bsLiveShadow - n;",
      "right" : "this.bsLive = bsLiveShadow - n;",
      "info" : "ExpressionStatement[11782-11813]:ExpressionStatement[11838-11869]"
    }, {
      "left" : "return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);",
      "right" : "return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);",
      "info" : "ReturnStatement[11822-11883]:ReturnStatement[11878-11939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11895-11902]:Modifier[11951-11958]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11903-11910]:PrimitiveType[11959-11966]"
    }, {
      "left" : "bsGetBit",
      "right" : "bsGetBit",
      "info" : "SimpleName[11911-11919]:SimpleName[11967-11975]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11929-11940]:SimpleType[11985-11996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11941-12455]:Block[11997-12511]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[11951-11982]:VariableDeclarationStatement[12007-12038]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[11991-12022]:VariableDeclarationStatement[12047-12078]"
    }, {
      "left" : "if (bsLiveShadow < 1)",
      "right" : "if (bsLiveShadow < 1)",
      "info" : "IfStatement[12032-12344]:IfStatement[12088-12400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12054-12344]:Block[12110-12400]"
    }, {
      "left" : "int thech = this.in.read();",
      "right" : "int thech = this.in.read();",
      "info" : "VariableDeclarationStatement[12068-12095]:VariableDeclarationStatement[12124-12151]"
    }, {
      "left" : "if (thech < 0)",
      "right" : "if (thech < 0)",
      "info" : "IfStatement[12109-12206]:IfStatement[12165-12262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12124-12206]:Block[12180-12262]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[12142-12192]:ThrowStatement[12198-12248]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[12220-12263]:ExpressionStatement[12276-12319]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[12276-12294]:ExpressionStatement[12332-12350]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[12307-12334]:ExpressionStatement[12363-12390]"
    }, {
      "left" : "this.bsLive = bsLiveShadow - 1;",
      "right" : "this.bsLive = bsLiveShadow - 1;",
      "info" : "ExpressionStatement[12354-12385]:ExpressionStatement[12410-12441]"
    }, {
      "left" : "return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;",
      "right" : "return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;",
      "info" : "ReturnStatement[12394-12449]:ReturnStatement[12450-12505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12461-12468]:Modifier[12517-12524]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[12469-12473]:PrimitiveType[12525-12529]"
    }, {
      "left" : "bsGetUByte",
      "right" : "bsGetUByte",
      "info" : "SimpleName[12474-12484]:SimpleName[12530-12540]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12494-12505]:SimpleType[12550-12561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12506-12543]:Block[12562-12599]"
    }, {
      "left" : "return (char) bsR(8);",
      "right" : "return (char) bsR(8);",
      "info" : "ReturnStatement[12516-12537]:ReturnStatement[12572-12593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12549-12556]:Modifier[12605-12612]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12557-12560]:PrimitiveType[12613-12616]"
    }, {
      "left" : "bsGetInt",
      "right" : "bsGetInt",
      "info" : "SimpleName[12561-12569]:SimpleName[12617-12625]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12579-12590]:SimpleType[12635-12646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12591-12673]:Block[12647-12729]"
    }, {
      "left" : "return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);",
      "right" : "return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);",
      "info" : "ReturnStatement[12601-12667]:ReturnStatement[12657-12723]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12755-12762]:Modifier[12811-12818]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12763-12769]:Modifier[12819-12825]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12770-12774]:PrimitiveType[12826-12830]"
    }, {
      "left" : "hbCreateDecodeTables",
      "right" : "hbCreateDecodeTables",
      "info" : "SimpleName[12775-12795]:SimpleName[12831-12851]"
    }, {
      "left" : "final int[] limit",
      "right" : "final int[] limit",
      "info" : "SingleVariableDeclaration[12796-12813]:SingleVariableDeclaration[12852-12869]"
    }, {
      "left" : "final int[] base",
      "right" : "final int[] base",
      "info" : "SingleVariableDeclaration[12860-12876]:SingleVariableDeclaration[12916-12932]"
    }, {
      "left" : "final int[] perm",
      "right" : "final int[] perm",
      "info" : "SingleVariableDeclaration[12878-12894]:SingleVariableDeclaration[12934-12950]"
    }, {
      "left" : "final char[] length",
      "right" : "final char[] length",
      "info" : "SingleVariableDeclaration[12896-12915]:SingleVariableDeclaration[12952-12971]"
    }, {
      "left" : "final int minLen",
      "right" : "final int minLen",
      "info" : "SingleVariableDeclaration[12962-12978]:SingleVariableDeclaration[13018-13034]"
    }, {
      "left" : "final int maxLen",
      "right" : "final int maxLen",
      "info" : "SingleVariableDeclaration[12980-12996]:SingleVariableDeclaration[13036-13052]"
    }, {
      "left" : "final int alphaSize",
      "right" : "final int alphaSize",
      "info" : "SingleVariableDeclaration[12998-13017]:SingleVariableDeclaration[13054-13073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13019-13921]:Block[13075-13977]"
    }, {
      "left" : "for (int i = minLen, pp = 0; i <= maxLen; i++)",
      "right" : "for (int i = minLen, pp = 0; i <= maxLen; i++)",
      "info" : "ForStatement[13029-13243]:ForStatement[13085-13299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13076-13243]:Block[13132-13299]"
    }, {
      "left" : "for (int j = 0; j < alphaSize; j++)",
      "right" : "for (int j = 0; j < alphaSize; j++)",
      "info" : "ForStatement[13090-13233]:ForStatement[13146-13289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13126-13233]:Block[13182-13289]"
    }, {
      "left" : "if (length[j] == i)",
      "right" : "if (length[j] == i)",
      "info" : "IfStatement[13144-13219]:IfStatement[13200-13275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13164-13219]:Block[13220-13275]"
    }, {
      "left" : "perm[pp++] = j;",
      "right" : "perm[pp++] = j;",
      "info" : "ExpressionStatement[13186-13201]:ExpressionStatement[13242-13257]"
    }, {
      "left" : "for (int i = MAX_CODE_LEN; --i > 0)",
      "right" : "for (int i = MAX_CODE_LEN; --i > 0)",
      "info" : "ForStatement[13253-13352]:ForStatement[13309-13408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13290-13352]:Block[13346-13408]"
    }, {
      "left" : "base[i] = 0;",
      "right" : "base[i] = 0;",
      "info" : "ExpressionStatement[13304-13316]:ExpressionStatement[13360-13372]"
    }, {
      "left" : "limit[i] = 0;",
      "right" : "limit[i] = 0;",
      "info" : "ExpressionStatement[13329-13342]:ExpressionStatement[13385-13398]"
    }, {
      "left" : "for (int i = 0; i < alphaSize; i++)",
      "right" : "for (int i = 0; i < alphaSize; i++)",
      "info" : "ForStatement[13362-13444]:ForStatement[13418-13500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13398-13444]:Block[13454-13500]"
    }, {
      "left" : "base[length[i] + 1]++;",
      "right" : "base[length[i] + 1]++;",
      "info" : "ExpressionStatement[13412-13434]:ExpressionStatement[13468-13490]"
    }, {
      "left" : "for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++)",
      "right" : "for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++)",
      "info" : "ForStatement[13454-13568]:ForStatement[13510-13624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13568]:Block[13562-13624]"
    }, {
      "left" : "b += base[i];",
      "right" : "b += base[i];",
      "info" : "ExpressionStatement[13520-13533]:ExpressionStatement[13576-13589]"
    }, {
      "left" : "base[i] = b;",
      "right" : "base[i] = b;",
      "info" : "ExpressionStatement[13546-13558]:ExpressionStatement[13602-13614]"
    }, {
      "left" : "for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++)",
      "right" : "for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++)",
      "info" : "ForStatement[13578-13792]:ForStatement[13634-13848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13639-13792]:Block[13695-13848]"
    }, {
      "left" : "final int nb = base[i + 1];",
      "right" : "final int nb = base[i + 1];",
      "info" : "VariableDeclarationStatement[13653-13680]:VariableDeclarationStatement[13709-13736]"
    }, {
      "left" : "vec += nb - b;",
      "right" : "vec += nb - b;",
      "info" : "ExpressionStatement[13693-13707]:ExpressionStatement[13749-13763]"
    }, {
      "left" : "b = nb;",
      "right" : "b = nb;",
      "info" : "ExpressionStatement[13720-13727]:ExpressionStatement[13776-13783]"
    }, {
      "left" : "limit[i] = vec - 1;",
      "right" : "limit[i] = vec - 1;",
      "info" : "ExpressionStatement[13740-13759]:ExpressionStatement[13796-13815]"
    }, {
      "left" : "vec <<= 1;",
      "right" : "vec <<= 1;",
      "info" : "ExpressionStatement[13772-13782]:ExpressionStatement[13828-13838]"
    }, {
      "left" : "for (int i = minLen + 1; i <= maxLen; i++)",
      "right" : "for (int i = minLen + 1; i <= maxLen; i++)",
      "info" : "ForStatement[13802-13915]:ForStatement[13858-13971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13845-13915]:Block[13901-13971]"
    }, {
      "left" : "base[i] = ((limit[i - 1] + 1) << 1) - base[i];",
      "right" : "base[i] = ((limit[i - 1] + 1) << 1) - base[i];",
      "info" : "ExpressionStatement[13859-13905]:ExpressionStatement[13915-13961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13927-13934]:Modifier[13983-13990]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13935-13939]:PrimitiveType[13991-13995]"
    }, {
      "left" : "recvDecodingTables",
      "right" : "recvDecodingTables",
      "info" : "SimpleName[13940-13958]:SimpleName[13996-14014]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13968-13979]:SimpleType[14024-14035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13980-16250]:Block[14036-16306]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[13990-14024]:VariableDeclarationStatement[14046-14080]"
    }, {
      "left" : "final boolean[] inUse = dataShadow.inUse;",
      "right" : "final boolean[] inUse = dataShadow.inUse;",
      "info" : "VariableDeclarationStatement[14033-14074]:VariableDeclarationStatement[14089-14130]"
    }, {
      "left" : "final byte[] pos = dataShadow.recvDecodingTables_pos;",
      "right" : "final byte[] pos = dataShadow.recvDecodingTables_pos;",
      "info" : "VariableDeclarationStatement[14083-14136]:VariableDeclarationStatement[14139-14192]"
    }, {
      "left" : "final byte[] selector = dataShadow.selector;",
      "right" : "final byte[] selector = dataShadow.selector;",
      "info" : "VariableDeclarationStatement[14145-14189]:VariableDeclarationStatement[14201-14245]"
    }, {
      "left" : "final byte[] selectorMtf = dataShadow.selectorMtf;",
      "right" : "final byte[] selectorMtf = dataShadow.selectorMtf;",
      "info" : "VariableDeclarationStatement[14198-14248]:VariableDeclarationStatement[14254-14304]"
    }, {
      "left" : "int inUse16 = 0;",
      "right" : "int inUse16 = 0;",
      "info" : "VariableDeclarationStatement[14258-14274]:VariableDeclarationStatement[14314-14330]"
    }, {
      "left" : "for (int i = 0; i < 16; i++)",
      "right" : "for (int i = 0; i < 16; i++)",
      "info" : "ForStatement[14324-14443]:ForStatement[14380-14499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14353-14443]:Block[14409-14499]"
    }, {
      "left" : "if (bsGetBit())",
      "right" : "if (bsGetBit())",
      "info" : "IfStatement[14367-14433]:IfStatement[14423-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14383-14433]:Block[14439-14489]"
    }, {
      "left" : "inUse16 |= 1 << i;",
      "right" : "inUse16 |= 1 << i;",
      "info" : "ExpressionStatement[14401-14419]:ExpressionStatement[14457-14475]"
    }, {
      "left" : "for (int i = 256; --i >= 0)",
      "right" : "for (int i = 256; --i >= 0)",
      "info" : "ForStatement[14453-14523]:ForStatement[14509-14579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14482-14523]:Block[14538-14579]"
    }, {
      "left" : "inUse[i] = false;",
      "right" : "inUse[i] = false;",
      "info" : "ExpressionStatement[14496-14513]:ExpressionStatement[14552-14569]"
    }, {
      "left" : "for (int i = 0; i < 16; i++)",
      "right" : "for (int i = 0; i < 16; i++)",
      "info" : "ForStatement[14533-14844]:ForStatement[14589-14900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14562-14844]:Block[14618-14900]"
    }, {
      "left" : "if ((inUse16 & (1 << i)) != 0)",
      "right" : "if ((inUse16 & (1 << i)) != 0)",
      "info" : "IfStatement[14576-14834]:IfStatement[14632-14890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14607-14834]:Block[14663-14890]"
    }, {
      "left" : "final int i16 = i << 4;",
      "right" : "final int i16 = i << 4;",
      "info" : "VariableDeclarationStatement[14625-14648]:VariableDeclarationStatement[14681-14704]"
    }, {
      "left" : "for (int j = 0; j < 16; j++)",
      "right" : "for (int j = 0; j < 16; j++)",
      "info" : "ForStatement[14665-14820]:ForStatement[14721-14876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-14820]:Block[14750-14876]"
    }, {
      "left" : "if (bsGetBit())",
      "right" : "if (bsGetBit())",
      "info" : "IfStatement[14716-14802]:IfStatement[14772-14858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14732-14802]:Block[14788-14858]"
    }, {
      "left" : "inUse[i16 + j] = true;",
      "right" : "inUse[i16 + j] = true;",
      "info" : "ExpressionStatement[14758-14780]:ExpressionStatement[14814-14836]"
    }, {
      "left" : "makeMaps();",
      "right" : "makeMaps();",
      "info" : "ExpressionStatement[14854-14865]:ExpressionStatement[14910-14921]"
    }, {
      "left" : "final int alphaSize = this.nInUse + 2;",
      "right" : "final int alphaSize = this.nInUse + 2;",
      "info" : "VariableDeclarationStatement[14874-14912]:VariableDeclarationStatement[14930-14968]"
    }, {
      "left" : "final int nGroups = bsR(3);",
      "right" : "final int nGroups = bsR(3);",
      "info" : "VariableDeclarationStatement[14954-14981]:VariableDeclarationStatement[15010-15037]"
    }, {
      "left" : "final int nSelectors = bsR(15);",
      "right" : "final int nSelectors = bsR(15);",
      "info" : "VariableDeclarationStatement[14990-15021]:VariableDeclarationStatement[15046-15077]"
    }, {
      "left" : "for (int i = 0; i < nSelectors; i++)",
      "right" : "for (int i = 0; i < nSelectors; i++)",
      "info" : "ForStatement[15031-15209]:ForStatement[15087-15265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15068-15209]:Block[15124-15265]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[15082-15092]:VariableDeclarationStatement[15138-15148]"
    }, {
      "left" : "while (bsGetBit())",
      "right" : "while (bsGetBit())",
      "info" : "WhileStatement[15105-15160]:WhileStatement[15161-15216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15124-15160]:Block[15180-15216]"
    }, {
      "left" : "j++;",
      "right" : "j++;",
      "info" : "ExpressionStatement[15142-15146]:ExpressionStatement[15198-15202]"
    }, {
      "left" : "selectorMtf[i] = (byte) j;",
      "right" : "selectorMtf[i] = (byte) j;",
      "info" : "ExpressionStatement[15173-15199]:ExpressionStatement[15229-15255]"
    }, {
      "left" : "for (int v = nGroups; --v >= 0)",
      "right" : "for (int v = nGroups; --v >= 0)",
      "info" : "ForStatement[15272-15347]:ForStatement[15328-15403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15305-15347]:Block[15361-15403]"
    }, {
      "left" : "pos[v] = (byte) v;",
      "right" : "pos[v] = (byte) v;",
      "info" : "ExpressionStatement[15319-15337]:ExpressionStatement[15375-15393]"
    }, {
      "left" : "for (int i = 0; i < nSelectors; i++)",
      "right" : "for (int i = 0; i < nSelectors; i++)",
      "info" : "ForStatement[15357-15711]:ForStatement[15413-15767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15394-15711]:Block[15450-15767]"
    }, {
      "left" : "int v = selectorMtf[i] & 0xff;",
      "right" : "int v = selectorMtf[i] & 0xff;",
      "info" : "VariableDeclarationStatement[15408-15438]:VariableDeclarationStatement[15464-15494]"
    }, {
      "left" : "final byte tmp = pos[v];",
      "right" : "final byte tmp = pos[v];",
      "info" : "VariableDeclarationStatement[15451-15475]:VariableDeclarationStatement[15507-15531]"
    }, {
      "left" : "while (v > 0)",
      "right" : "while (v > 0)",
      "info" : "WhileStatement[15488-15644]:WhileStatement[15544-15700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15502-15644]:Block[15558-15700]"
    }, {
      "left" : "pos[v] = pos[v - 1];",
      "right" : "pos[v] = pos[v - 1];",
      "info" : "ExpressionStatement[15589-15609]:ExpressionStatement[15645-15665]"
    }, {
      "left" : "v--;",
      "right" : "v--;",
      "info" : "ExpressionStatement[15626-15630]:ExpressionStatement[15682-15686]"
    }, {
      "left" : "pos[0] = tmp;",
      "right" : "pos[0] = tmp;",
      "info" : "ExpressionStatement[15657-15670]:ExpressionStatement[15713-15726]"
    }, {
      "left" : "selector[i] = tmp;",
      "right" : "selector[i] = tmp;",
      "info" : "ExpressionStatement[15683-15701]:ExpressionStatement[15739-15757]"
    }, {
      "left" : "final char[][] len = dataShadow.temp_charArray2d;",
      "right" : "final char[][] len = dataShadow.temp_charArray2d;",
      "info" : "VariableDeclarationStatement[15721-15770]:VariableDeclarationStatement[15777-15826]"
    }, {
      "left" : "for (int t = 0; t < nGroups; t++)",
      "right" : "for (int t = 0; t < nGroups; t++)",
      "info" : "ForStatement[15816-16141]:ForStatement[15872-16197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-16141]:Block[15906-16197]"
    }, {
      "left" : "int curr = bsR(5);",
      "right" : "int curr = bsR(5);",
      "info" : "VariableDeclarationStatement[15864-15882]:VariableDeclarationStatement[15920-15938]"
    }, {
      "left" : "final char[] len_t = len[t];",
      "right" : "final char[] len_t = len[t];",
      "info" : "VariableDeclarationStatement[15895-15923]:VariableDeclarationStatement[15951-15979]"
    }, {
      "left" : "for (int i = 0; i < alphaSize; i++)",
      "right" : "for (int i = 0; i < alphaSize; i++)",
      "info" : "ForStatement[15936-16131]:ForStatement[15992-16187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15972-16131]:Block[16028-16187]"
    }, {
      "left" : "while (bsGetBit())",
      "right" : "while (bsGetBit())",
      "info" : "WhileStatement[15990-16077]:WhileStatement[16046-16133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16009-16077]:Block[16065-16133]"
    }, {
      "left" : "curr += bsGetBit() ? -1 : 1;",
      "right" : "curr += bsGetBit() ? -1 : 1;",
      "info" : "ExpressionStatement[16031-16059]:ExpressionStatement[16087-16115]"
    }, {
      "left" : "len_t[i] = (char) curr;",
      "right" : "len_t[i] = (char) curr;",
      "info" : "ExpressionStatement[16094-16117]:ExpressionStatement[16150-16173]"
    }, {
      "left" : "createHuffmanDecodingTables(alphaSize, nGroups);",
      "right" : "createHuffmanDecodingTables(alphaSize, nGroups);",
      "info" : "ExpressionStatement[16196-16244]:ExpressionStatement[16252-16300]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16323-16330]:Modifier[16379-16386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16331-16335]:PrimitiveType[16387-16391]"
    }, {
      "left" : "createHuffmanDecodingTables",
      "right" : "createHuffmanDecodingTables",
      "info" : "SimpleName[16336-16363]:SimpleName[16392-16419]"
    }, {
      "left" : "final int alphaSize",
      "right" : "final int alphaSize",
      "info" : "SingleVariableDeclaration[16364-16383]:SingleVariableDeclaration[16420-16439]"
    }, {
      "left" : "final int nGroups",
      "right" : "final int nGroups",
      "info" : "SingleVariableDeclaration[16430-16447]:SingleVariableDeclaration[16486-16503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16449-17350]:Block[16505-17406]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[16459-16493]:VariableDeclarationStatement[16515-16549]"
    }, {
      "left" : "final char[][] len = dataShadow.temp_charArray2d;",
      "right" : "final char[][] len = dataShadow.temp_charArray2d;",
      "info" : "VariableDeclarationStatement[16502-16551]:VariableDeclarationStatement[16558-16607]"
    }, {
      "left" : "final int[] minLens = dataShadow.minLens;",
      "right" : "final int[] minLens = dataShadow.minLens;",
      "info" : "VariableDeclarationStatement[16560-16601]:VariableDeclarationStatement[16616-16657]"
    }, {
      "left" : "final int[][] limit = dataShadow.limit;",
      "right" : "final int[][] limit = dataShadow.limit;",
      "info" : "VariableDeclarationStatement[16610-16649]:VariableDeclarationStatement[16666-16705]"
    }, {
      "left" : "final int[][] base = dataShadow.base;",
      "right" : "final int[][] base = dataShadow.base;",
      "info" : "VariableDeclarationStatement[16658-16695]:VariableDeclarationStatement[16714-16751]"
    }, {
      "left" : "final int[][] perm = dataShadow.perm;",
      "right" : "final int[][] perm = dataShadow.perm;",
      "info" : "VariableDeclarationStatement[16704-16741]:VariableDeclarationStatement[16760-16797]"
    }, {
      "left" : "for (int t = 0; t < nGroups; t++)",
      "right" : "for (int t = 0; t < nGroups; t++)",
      "info" : "ForStatement[16751-17344]:ForStatement[16807-17400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16785-17344]:Block[16841-17400]"
    }, {
      "left" : "int minLen = 32;",
      "right" : "int minLen = 32;",
      "info" : "VariableDeclarationStatement[16799-16815]:VariableDeclarationStatement[16855-16871]"
    }, {
      "left" : "int maxLen = 0;",
      "right" : "int maxLen = 0;",
      "info" : "VariableDeclarationStatement[16828-16843]:VariableDeclarationStatement[16884-16899]"
    }, {
      "left" : "final char[] len_t = len[t];",
      "right" : "final char[] len_t = len[t];",
      "info" : "VariableDeclarationStatement[16856-16884]:VariableDeclarationStatement[16912-16940]"
    }, {
      "left" : "for (int i = alphaSize; --i >= 0)",
      "right" : "for (int i = alphaSize; --i >= 0)",
      "info" : "ForStatement[16897-17171]:ForStatement[16953-17227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16932-17171]:Block[16988-17227]"
    }, {
      "left" : "final char lent = len_t[i];",
      "right" : "final char lent = len_t[i];",
      "info" : "VariableDeclarationStatement[16950-16977]:VariableDeclarationStatement[17006-17033]"
    }, {
      "left" : "if (lent > maxLen)",
      "right" : "if (lent > maxLen)",
      "info" : "IfStatement[16994-17067]:IfStatement[17050-17123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17013-17067]:Block[17069-17123]"
    }, {
      "left" : "maxLen = lent;",
      "right" : "maxLen = lent;",
      "info" : "ExpressionStatement[17035-17049]:ExpressionStatement[17091-17105]"
    }, {
      "left" : "if (lent < minLen)",
      "right" : "if (lent < minLen)",
      "info" : "IfStatement[17084-17157]:IfStatement[17140-17213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17103-17157]:Block[17159-17213]"
    }, {
      "left" : "minLen = lent;",
      "right" : "minLen = lent;",
      "info" : "ExpressionStatement[17125-17139]:ExpressionStatement[17181-17195]"
    }, {
      "left" : "hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,\n                                 maxLen, alphaSize);",
      "right" : "hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,\n                                 maxLen, alphaSize);",
      "info" : "ExpressionStatement[17184-17301]:ExpressionStatement[17240-17357]"
    }, {
      "left" : "minLens[t] = minLen;",
      "right" : "minLens[t] = minLen;",
      "info" : "ExpressionStatement[17314-17334]:ExpressionStatement[17370-17390]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17356-17363]:Modifier[17412-17419]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17364-17368]:PrimitiveType[17420-17424]"
    }, {
      "left" : "getAndMoveToFrontDecode",
      "right" : "getAndMoveToFrontDecode",
      "info" : "SimpleName[17369-17392]:SimpleName[17425-17448]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17402-17413]:SimpleType[17458-17469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17414-24379]:Block[17470-24435]"
    }, {
      "left" : "this.origPtr = bsR(24);",
      "right" : "this.origPtr = bsR(24);",
      "info" : "ExpressionStatement[17424-17447]:ExpressionStatement[17480-17503]"
    }, {
      "left" : "recvDecodingTables();",
      "right" : "recvDecodingTables();",
      "info" : "ExpressionStatement[17456-17477]:ExpressionStatement[17512-17533]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[17487-17524]:VariableDeclarationStatement[17543-17580]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[17533-17567]:VariableDeclarationStatement[17589-17623]"
    }, {
      "left" : "final byte[] ll8 = dataShadow.ll8;",
      "right" : "final byte[] ll8 = dataShadow.ll8;",
      "info" : "VariableDeclarationStatement[17576-17610]:VariableDeclarationStatement[17632-17666]"
    }, {
      "left" : "final int[] unzftab = dataShadow.unzftab;",
      "right" : "final int[] unzftab = dataShadow.unzftab;",
      "info" : "VariableDeclarationStatement[17619-17660]:VariableDeclarationStatement[17675-17716]"
    }, {
      "left" : "final byte[] selector = dataShadow.selector;",
      "right" : "final byte[] selector = dataShadow.selector;",
      "info" : "VariableDeclarationStatement[17669-17713]:VariableDeclarationStatement[17725-17769]"
    }, {
      "left" : "final byte[] seqToUnseq = dataShadow.seqToUnseq;",
      "right" : "final byte[] seqToUnseq = dataShadow.seqToUnseq;",
      "info" : "VariableDeclarationStatement[17722-17770]:VariableDeclarationStatement[17778-17826]"
    }, {
      "left" : "final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;",
      "right" : "final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;",
      "info" : "VariableDeclarationStatement[17779-17835]:VariableDeclarationStatement[17835-17891]"
    }, {
      "left" : "final int[] minLens = dataShadow.minLens;",
      "right" : "final int[] minLens = dataShadow.minLens;",
      "info" : "VariableDeclarationStatement[17844-17885]:VariableDeclarationStatement[17900-17941]"
    }, {
      "left" : "final int[][] limit = dataShadow.limit;",
      "right" : "final int[][] limit = dataShadow.limit;",
      "info" : "VariableDeclarationStatement[17894-17933]:VariableDeclarationStatement[17950-17989]"
    }, {
      "left" : "final int[][] base = dataShadow.base;",
      "right" : "final int[][] base = dataShadow.base;",
      "info" : "VariableDeclarationStatement[17942-17979]:VariableDeclarationStatement[17998-18035]"
    }, {
      "left" : "final int[][] perm = dataShadow.perm;",
      "right" : "final int[][] perm = dataShadow.perm;",
      "info" : "VariableDeclarationStatement[17988-18025]:VariableDeclarationStatement[18044-18081]"
    }, {
      "left" : "final int limitLast = this.blockSize100k * 100000;",
      "right" : "final int limitLast = this.blockSize100k * 100000;",
      "info" : "VariableDeclarationStatement[18034-18084]:VariableDeclarationStatement[18090-18140]"
    }, {
      "left" : "for (int i = 256; --i >= 0)",
      "right" : "for (int i = 256; --i >= 0)",
      "info" : "ForStatement[18318-18416]:ForStatement[18374-18472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18347-18416]:Block[18403-18472]"
    }, {
      "left" : "yy[i] = (char) i;",
      "right" : "yy[i] = (char) i;",
      "info" : "ExpressionStatement[18361-18378]:ExpressionStatement[18417-18434]"
    }, {
      "left" : "unzftab[i] = 0;",
      "right" : "unzftab[i] = 0;",
      "info" : "ExpressionStatement[18391-18406]:ExpressionStatement[18447-18462]"
    }, {
      "left" : "int groupNo = 0;",
      "right" : "int groupNo = 0;",
      "info" : "VariableDeclarationStatement[18426-18442]:VariableDeclarationStatement[18482-18498]"
    }, {
      "left" : "int groupPos = G_SIZE - 1;",
      "right" : "int groupPos = G_SIZE - 1;",
      "info" : "VariableDeclarationStatement[18451-18477]:VariableDeclarationStatement[18507-18533]"
    }, {
      "left" : "final int eob = this.nInUse + 1;",
      "right" : "final int eob = this.nInUse + 1;",
      "info" : "VariableDeclarationStatement[18486-18518]:VariableDeclarationStatement[18542-18574]"
    }, {
      "left" : "int nextSym = getAndMoveToFrontDecode0(0);",
      "right" : "int nextSym = getAndMoveToFrontDecode0(0);",
      "info" : "VariableDeclarationStatement[18527-18569]:VariableDeclarationStatement[18583-18625]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[18578-18609]:VariableDeclarationStatement[18634-18665]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[18618-18649]:VariableDeclarationStatement[18674-18705]"
    }, {
      "left" : "int lastShadow = -1;",
      "right" : "int lastShadow = -1;",
      "info" : "VariableDeclarationStatement[18658-18678]:VariableDeclarationStatement[18714-18734]"
    }, {
      "left" : "int zt = selector[groupNo] & 0xff;",
      "right" : "int zt = selector[groupNo] & 0xff;",
      "info" : "VariableDeclarationStatement[18687-18721]:VariableDeclarationStatement[18743-18777]"
    }, {
      "left" : "int[] base_zt = base[zt];",
      "right" : "int[] base_zt = base[zt];",
      "info" : "VariableDeclarationStatement[18730-18755]:VariableDeclarationStatement[18786-18811]"
    }, {
      "left" : "int[] limit_zt = limit[zt];",
      "right" : "int[] limit_zt = limit[zt];",
      "info" : "VariableDeclarationStatement[18764-18791]:VariableDeclarationStatement[18820-18847]"
    }, {
      "left" : "int[] perm_zt = perm[zt];",
      "right" : "int[] perm_zt = perm[zt];",
      "info" : "VariableDeclarationStatement[18800-18825]:VariableDeclarationStatement[18856-18881]"
    }, {
      "left" : "int minLens_zt = minLens[zt];",
      "right" : "int minLens_zt = minLens[zt];",
      "info" : "VariableDeclarationStatement[18834-18863]:VariableDeclarationStatement[18890-18919]"
    }, {
      "left" : "while (nextSym != eob)",
      "right" : "while (nextSym != eob)",
      "info" : "WhileStatement[18873-24268]:WhileStatement[18929-24324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18896-24268]:Block[18952-24324]"
    }, {
      "left" : "if ((nextSym == RUNA) || (nextSym == RUNB))",
      "right" : "if ((nextSym == RUNA) || (nextSym == RUNB))",
      "info" : "IfStatement[18910-24258]:IfStatement[18966-24314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18954-21656]:Block[19010-21712]"
    }, {
      "left" : "int s = -1;",
      "right" : "int s = -1;",
      "info" : "VariableDeclarationStatement[18972-18983]:VariableDeclarationStatement[19028-19039]"
    }, {
      "left" : "for (int n = 1; true; n <<= 1)",
      "right" : "for (int n = 1; true; n <<= 1)",
      "info" : "ForStatement[19001-21321]:ForStatement[19057-21377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19032-21321]:Block[19088-21377]"
    }, {
      "left" : "if (nextSym == RUNA)",
      "right" : "if (nextSym == RUNA)",
      "info" : "IfStatement[19054-19277]:IfStatement[19110-19333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19075-19130]:Block[19131-19186]"
    }, {
      "left" : "s += n;",
      "right" : "s += n;",
      "info" : "ExpressionStatement[19101-19108]:ExpressionStatement[19157-19164]"
    }, {
      "left" : "if (nextSym == RUNB)",
      "right" : "if (nextSym == RUNB)",
      "info" : "IfStatement[19136-19277]:IfStatement[19192-19333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19157-19217]:Block[19213-19273]"
    }, {
      "left" : "s += n << 1;",
      "right" : "s += n << 1;",
      "info" : "ExpressionStatement[19183-19195]:ExpressionStatement[19239-19251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19223-19277]:Block[19279-19333]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19249-19255]:BreakStatement[19305-19311]"
    }, {
      "left" : "if (groupPos == 0)",
      "right" : "if (groupPos == 0)",
      "info" : "IfStatement[19299-19694]:IfStatement[19355-19750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19318-19629]:Block[19374-19685]"
    }, {
      "left" : "groupPos = G_SIZE - 1;",
      "right" : "groupPos = G_SIZE - 1;",
      "info" : "ExpressionStatement[19344-19366]:ExpressionStatement[19400-19422]"
    }, {
      "left" : "zt = selector[++groupNo] & 0xff;",
      "right" : "zt = selector[++groupNo] & 0xff;",
      "info" : "ExpressionStatement[19391-19423]:ExpressionStatement[19447-19479]"
    }, {
      "left" : "base_zt = base[zt];",
      "right" : "base_zt = base[zt];",
      "info" : "ExpressionStatement[19448-19467]:ExpressionStatement[19504-19523]"
    }, {
      "left" : "limit_zt = limit[zt];",
      "right" : "limit_zt = limit[zt];",
      "info" : "ExpressionStatement[19492-19513]:ExpressionStatement[19548-19569]"
    }, {
      "left" : "perm_zt = perm[zt];",
      "right" : "perm_zt = perm[zt];",
      "info" : "ExpressionStatement[19538-19557]:ExpressionStatement[19594-19613]"
    }, {
      "left" : "minLens_zt = minLens[zt];",
      "right" : "minLens_zt = minLens[zt];",
      "info" : "ExpressionStatement[19582-19607]:ExpressionStatement[19638-19663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19635-19694]:Block[19691-19750]"
    }, {
      "left" : "groupPos--;",
      "right" : "groupPos--;",
      "info" : "ExpressionStatement[19661-19672]:ExpressionStatement[19717-19728]"
    }, {
      "left" : "int zn = minLens_zt;",
      "right" : "int zn = minLens_zt;",
      "info" : "VariableDeclarationStatement[19716-19736]:VariableDeclarationStatement[19772-19792]"
    }, {
      "left" : "while (bsLiveShadow < zn)",
      "right" : "while (bsLiveShadow < zn)",
      "info" : "WhileStatement[19833-20278]:WhileStatement[19889-20334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19859-20278]:Block[19915-20334]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[19885-19919]:VariableDeclarationStatement[19941-19975]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[19944-20256]:IfStatement[20000-20312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19960-20144]:Block[20016-20200]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[19990-20033]:ExpressionStatement[20046-20089]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[20062-20080]:ExpressionStatement[20118-20136]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20109-20118]:ContinueStatement[20165-20174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20150-20256]:Block[20206-20312]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[20180-20230]:ThrowStatement[20236-20286]"
    }, {
      "left" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                        & ((1 << zn) - 1);",
      "right" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                        & ((1 << zn) - 1);",
      "info" : "VariableDeclarationStatement[20299-20390]:VariableDeclarationStatement[20355-20446]"
    }, {
      "left" : "bsLiveShadow -= zn;",
      "right" : "bsLiveShadow -= zn;",
      "info" : "ExpressionStatement[20411-20430]:ExpressionStatement[20467-20486]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[20452-21244]:WhileStatement[20508-21300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20480-21244]:Block[20536-21300]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[20506-20511]:ExpressionStatement[20562-20567]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[20536-21071]:WhileStatement[20592-21127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20561-21071]:Block[20617-21127]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[20591-20625]:VariableDeclarationStatement[20647-20681]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[20654-21045]:IfStatement[20710-21101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20670-20870]:Block[20726-20926]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[20704-20747]:ExpressionStatement[20760-20803]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[20780-20798]:ExpressionStatement[20836-20854]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20831-20840]:ContinueStatement[20887-20896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20876-21045]:Block[20932-21101]"
    }, {
      "left" : "throw new IOException(\n                                                      \"unexpected end of stream\");",
      "right" : "throw new IOException(\n                                                      \"unexpected end of stream\");",
      "info" : "ThrowStatement[20910-21015]:ThrowStatement[20966-21071]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[21096-21111]:ExpressionStatement[21152-21167]"
    }, {
      "left" : "zvec = (zvec << 1)\n                            | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1)\n                            | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[21136-21222]:ExpressionStatement[21192-21278]"
    }, {
      "left" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "right" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "info" : "ExpressionStatement[21265-21303]:ExpressionStatement[21321-21359]"
    }, {
      "left" : "final byte ch = seqToUnseq[yy[0]];",
      "right" : "final byte ch = seqToUnseq[yy[0]];",
      "info" : "VariableDeclarationStatement[21339-21373]:VariableDeclarationStatement[21395-21429]"
    }, {
      "left" : "unzftab[ch & 0xff] += s + 1;",
      "right" : "unzftab[ch & 0xff] += s + 1;",
      "info" : "ExpressionStatement[21390-21418]:ExpressionStatement[21446-21474]"
    }, {
      "left" : "while (s-- >= 0)",
      "right" : "while (s-- >= 0)",
      "info" : "WhileStatement[21436-21516]:WhileStatement[21492-21572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21453-21516]:Block[21509-21572]"
    }, {
      "left" : "ll8[++lastShadow] = ch;",
      "right" : "ll8[++lastShadow] = ch;",
      "info" : "ExpressionStatement[21475-21498]:ExpressionStatement[21531-21554]"
    }, {
      "left" : "if (lastShadow >= limitLast)",
      "right" : "if (lastShadow >= limitLast)",
      "info" : "IfStatement[21534-21642]:IfStatement[21590-21698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21563-21642]:Block[21619-21698]"
    }, {
      "left" : "throw new IOException(\"block overrun\");",
      "right" : "throw new IOException(\"block overrun\");",
      "info" : "ThrowStatement[21585-21624]:ThrowStatement[21641-21680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21662-24258]:Block[21718-24314]"
    }, {
      "left" : "if (++lastShadow >= limitLast)",
      "right" : "if (++lastShadow >= limitLast)",
      "info" : "IfStatement[21680-21790]:IfStatement[21736-21846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21711-21790]:Block[21767-21846]"
    }, {
      "left" : "throw new IOException(\"block overrun\");",
      "right" : "throw new IOException(\"block overrun\");",
      "info" : "ThrowStatement[21733-21772]:ThrowStatement[21789-21828]"
    }, {
      "left" : "final char tmp = yy[nextSym - 1];",
      "right" : "final char tmp = yy[nextSym - 1];",
      "info" : "VariableDeclarationStatement[21808-21841]:VariableDeclarationStatement[21864-21897]"
    }, {
      "left" : "unzftab[seqToUnseq[tmp] & 0xff]++;",
      "right" : "unzftab[seqToUnseq[tmp] & 0xff]++;",
      "info" : "ExpressionStatement[21858-21892]:ExpressionStatement[21914-21948]"
    }, {
      "left" : "ll8[lastShadow] = seqToUnseq[tmp];",
      "right" : "ll8[lastShadow] = seqToUnseq[tmp];",
      "info" : "ExpressionStatement[21909-21943]:ExpressionStatement[21965-21999]"
    }, {
      "left" : "if (nextSym <= 16)",
      "right" : "if (nextSym <= 16)",
      "info" : "IfStatement[22192-22439]:IfStatement[22248-22495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22211-22349]:Block[22267-22405]"
    }, {
      "left" : "for (int j = nextSym - 1; j > 0)",
      "right" : "for (int j = nextSym - 1; j > 0)",
      "info" : "ForStatement[22233-22331]:ForStatement[22289-22387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22267-22331]:Block[22323-22387]"
    }, {
      "left" : "yy[j] = yy[--j];",
      "right" : "yy[j] = yy[--j];",
      "info" : "ExpressionStatement[22293-22309]:ExpressionStatement[22349-22365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22355-22439]:Block[22411-22495]"
    }, {
      "left" : "System.arraycopy(yy, 0, yy, 1, nextSym - 1);",
      "right" : "System.arraycopy(yy, 0, yy, 1, nextSym - 1);",
      "info" : "ExpressionStatement[22377-22421]:ExpressionStatement[22433-22477]"
    }, {
      "left" : "yy[0] = tmp;",
      "right" : "yy[0] = tmp;",
      "info" : "ExpressionStatement[22457-22469]:ExpressionStatement[22513-22525]"
    }, {
      "left" : "if (groupPos == 0)",
      "right" : "if (groupPos == 0)",
      "info" : "IfStatement[22487-22846]:IfStatement[22543-22902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22506-22789]:Block[22562-22845]"
    }, {
      "left" : "groupPos = G_SIZE - 1;",
      "right" : "groupPos = G_SIZE - 1;",
      "info" : "ExpressionStatement[22528-22550]:ExpressionStatement[22584-22606]"
    }, {
      "left" : "zt = selector[++groupNo] & 0xff;",
      "right" : "zt = selector[++groupNo] & 0xff;",
      "info" : "ExpressionStatement[22571-22603]:ExpressionStatement[22627-22659]"
    }, {
      "left" : "base_zt = base[zt];",
      "right" : "base_zt = base[zt];",
      "info" : "ExpressionStatement[22624-22643]:ExpressionStatement[22680-22699]"
    }, {
      "left" : "limit_zt = limit[zt];",
      "right" : "limit_zt = limit[zt];",
      "info" : "ExpressionStatement[22664-22685]:ExpressionStatement[22720-22741]"
    }, {
      "left" : "perm_zt = perm[zt];",
      "right" : "perm_zt = perm[zt];",
      "info" : "ExpressionStatement[22706-22725]:ExpressionStatement[22762-22781]"
    }, {
      "left" : "minLens_zt = minLens[zt];",
      "right" : "minLens_zt = minLens[zt];",
      "info" : "ExpressionStatement[22746-22771]:ExpressionStatement[22802-22827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22795-22846]:Block[22851-22902]"
    }, {
      "left" : "groupPos--;",
      "right" : "groupPos--;",
      "info" : "ExpressionStatement[22817-22828]:ExpressionStatement[22873-22884]"
    }, {
      "left" : "int zn = minLens_zt;",
      "right" : "int zn = minLens_zt;",
      "info" : "VariableDeclarationStatement[22864-22884]:VariableDeclarationStatement[22920-22940]"
    }, {
      "left" : "while (bsLiveShadow < zn)",
      "right" : "while (bsLiveShadow < zn)",
      "info" : "WhileStatement[22969-23378]:WhileStatement[23025-23434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22995-23378]:Block[23051-23434]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[23017-23051]:VariableDeclarationStatement[23073-23107]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[23072-23360]:IfStatement[23128-23416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23088-23256]:Block[23144-23312]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[23114-23157]:ExpressionStatement[23170-23213]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[23182-23200]:ExpressionStatement[23238-23256]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23225-23234]:ContinueStatement[23281-23290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23262-23360]:Block[23318-23416]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[23288-23338]:ThrowStatement[23344-23394]"
    }, {
      "left" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                    & ((1 << zn) - 1);",
      "right" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                    & ((1 << zn) - 1);",
      "info" : "VariableDeclarationStatement[23395-23482]:VariableDeclarationStatement[23451-23538]"
    }, {
      "left" : "bsLiveShadow -= zn;",
      "right" : "bsLiveShadow -= zn;",
      "info" : "ExpressionStatement[23499-23518]:ExpressionStatement[23555-23574]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[23536-24189]:WhileStatement[23592-24245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23564-24189]:Block[23620-24245]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[23586-23591]:ExpressionStatement[23642-23647]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[23612-24056]:WhileStatement[23668-24112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23637-24056]:Block[23693-24112]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[23663-23697]:VariableDeclarationStatement[23719-23753]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[23722-24034]:IfStatement[23778-24090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23738-23922]:Block[23794-23978]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[23768-23811]:ExpressionStatement[23824-23867]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[23840-23858]:ExpressionStatement[23896-23914]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23887-23896]:ContinueStatement[23943-23952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23928-24034]:Block[23984-24090]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[23958-24008]:ThrowStatement[24014-24064]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[24077-24092]:ExpressionStatement[24133-24148]"
    }, {
      "left" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[24113-24171]:ExpressionStatement[24169-24227]"
    }, {
      "left" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "right" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "info" : "ExpressionStatement[24206-24244]:ExpressionStatement[24262-24300]"
    }, {
      "left" : "this.last = lastShadow;",
      "right" : "this.last = lastShadow;",
      "info" : "ExpressionStatement[24278-24301]:ExpressionStatement[24334-24357]"
    }, {
      "left" : "this.bsLive = bsLiveShadow;",
      "right" : "this.bsLive = bsLiveShadow;",
      "info" : "ExpressionStatement[24310-24337]:ExpressionStatement[24366-24393]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[24346-24373]:ExpressionStatement[24402-24429]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24385-24392]:Modifier[24441-24448]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24393-24396]:PrimitiveType[24449-24452]"
    }, {
      "left" : "getAndMoveToFrontDecode0",
      "right" : "getAndMoveToFrontDecode0",
      "info" : "SimpleName[24397-24421]:SimpleName[24453-24477]"
    }, {
      "left" : "final int groupNo",
      "right" : "final int groupNo",
      "info" : "SingleVariableDeclaration[24422-24439]:SingleVariableDeclaration[24478-24495]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24448-24459]:SimpleType[24504-24515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24460-25512]:Block[24516-25568]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[24470-24507]:VariableDeclarationStatement[24526-24563]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[24516-24550]:VariableDeclarationStatement[24572-24606]"
    }, {
      "left" : "final int zt = dataShadow.selector[groupNo] & 0xff;",
      "right" : "final int zt = dataShadow.selector[groupNo] & 0xff;",
      "info" : "VariableDeclarationStatement[24559-24610]:VariableDeclarationStatement[24615-24666]"
    }, {
      "left" : "final int[] limit_zt = dataShadow.limit[zt];",
      "right" : "final int[] limit_zt = dataShadow.limit[zt];",
      "info" : "VariableDeclarationStatement[24619-24663]:VariableDeclarationStatement[24675-24719]"
    }, {
      "left" : "int zn = dataShadow.minLens[zt];",
      "right" : "int zn = dataShadow.minLens[zt];",
      "info" : "VariableDeclarationStatement[24672-24704]:VariableDeclarationStatement[24728-24760]"
    }, {
      "left" : "int zvec = bsR(zn);",
      "right" : "int zvec = bsR(zn);",
      "info" : "VariableDeclarationStatement[24713-24732]:VariableDeclarationStatement[24769-24788]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[24741-24772]:VariableDeclarationStatement[24797-24828]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[24781-24812]:VariableDeclarationStatement[24837-24868]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[24822-25364]:WhileStatement[24878-25420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24850-25364]:Block[24906-25420]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[24864-24869]:ExpressionStatement[24920-24925]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[24882-25255]:WhileStatement[24938-25311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24907-25255]:Block[24963-25311]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[24925-24959]:VariableDeclarationStatement[24981-25015]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[24977-25241]:IfStatement[25033-25297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24993-25145]:Block[25049-25201]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[25015-25058]:ExpressionStatement[25071-25114]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[25079-25097]:ExpressionStatement[25135-25153]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25118-25127]:ContinueStatement[25174-25183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25151-25241]:Block[25207-25297]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[25173-25223]:ThrowStatement[25229-25279]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[25268-25283]:ExpressionStatement[25324-25339]"
    }, {
      "left" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[25296-25354]:ExpressionStatement[25352-25410]"
    }, {
      "left" : "this.bsLive = bsLiveShadow;",
      "right" : "this.bsLive = bsLiveShadow;",
      "info" : "ExpressionStatement[25374-25401]:ExpressionStatement[25430-25457]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[25410-25437]:ExpressionStatement[25466-25493]"
    }, {
      "left" : "return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];",
      "right" : "return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];",
      "info" : "ReturnStatement[25447-25506]:ReturnStatement[25503-25562]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25518-25525]:Modifier[25574-25581]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25526-25529]:PrimitiveType[25582-25585]"
    }, {
      "left" : "setupBlock",
      "right" : "setupBlock",
      "info" : "SimpleName[25530-25540]:SimpleName[25586-25596]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25550-25561]:SimpleType[25606-25617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25562-26597]:Block[25618-26653]"
    }, {
      "left" : "if (currentState == EOF || this.data == null)",
      "right" : "if (currentState == EOF || this.data == null)",
      "info" : "IfStatement[25572-25652]:IfStatement[25628-25708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25618-25652]:Block[25674-25708]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[25632-25642]:ReturnStatement[25688-25698]"
    }, {
      "left" : "final int[] cftab = this.data.cftab;",
      "right" : "final int[] cftab = this.data.cftab;",
      "info" : "VariableDeclarationStatement[25662-25698]:VariableDeclarationStatement[25718-25754]"
    }, {
      "left" : "final int[] tt = this.data.initTT(this.last + 1);",
      "right" : "final int[] tt = this.data.initTT(this.last + 1);",
      "info" : "VariableDeclarationStatement[25707-25756]:VariableDeclarationStatement[25763-25812]"
    }, {
      "left" : "final byte[] ll8 = this.data.ll8;",
      "right" : "final byte[] ll8 = this.data.ll8;",
      "info" : "VariableDeclarationStatement[25765-25798]:VariableDeclarationStatement[25821-25854]"
    }, {
      "left" : "cftab[0] = 0;",
      "right" : "cftab[0] = 0;",
      "info" : "ExpressionStatement[25807-25820]:ExpressionStatement[25863-25876]"
    }, {
      "left" : "System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);",
      "right" : "System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);",
      "info" : "ExpressionStatement[25829-25883]:ExpressionStatement[25885-25939]"
    }, {
      "left" : "for (int i = 1, c = cftab[0]; i <= 256; i++)",
      "right" : "for (int i = 1, c = cftab[0]; i <= 256; i++)",
      "info" : "ForStatement[25893-26002]:ForStatement[25949-26058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25938-26002]:Block[25994-26058]"
    }, {
      "left" : "c += cftab[i];",
      "right" : "c += cftab[i];",
      "info" : "ExpressionStatement[25952-25966]:ExpressionStatement[26008-26022]"
    }, {
      "left" : "cftab[i] = c;",
      "right" : "cftab[i] = c;",
      "info" : "ExpressionStatement[25979-25992]:ExpressionStatement[26035-26048]"
    }, {
      "left" : "for (int i = 0, lastShadow = this.last; i <= lastShadow; i++)",
      "right" : "for (int i = 0, lastShadow = this.last; i <= lastShadow; i++)",
      "info" : "ForStatement[26012-26129]:ForStatement[26068-26185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26074-26129]:Block[26130-26185]"
    }, {
      "left" : "tt[cftab[ll8[i] & 0xff]++] = i;",
      "right" : "tt[cftab[ll8[i] & 0xff]++] = i;",
      "info" : "ExpressionStatement[26088-26119]:ExpressionStatement[26144-26175]"
    }, {
      "left" : "if ((this.origPtr < 0) || (this.origPtr >= tt.length))",
      "right" : "if ((this.origPtr < 0) || (this.origPtr >= tt.length))",
      "info" : "IfStatement[26139-26260]:IfStatement[26195-26316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26194-26260]:Block[26250-26316]"
    }, {
      "left" : "throw new IOException(\"stream corrupted\");",
      "right" : "throw new IOException(\"stream corrupted\");",
      "info" : "ThrowStatement[26208-26250]:ThrowStatement[26264-26306]"
    }, {
      "left" : "this.su_tPos = tt[this.origPtr];",
      "right" : "this.su_tPos = tt[this.origPtr];",
      "info" : "ExpressionStatement[26270-26302]:ExpressionStatement[26326-26358]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[26311-26329]:ExpressionStatement[26367-26385]"
    }, {
      "left" : "this.su_i2 = 0;",
      "right" : "this.su_i2 = 0;",
      "info" : "ExpressionStatement[26338-26353]:ExpressionStatement[26394-26409]"
    }, {
      "left" : "this.su_ch2 = 256;",
      "right" : "this.su_ch2 = 256;",
      "info" : "ExpressionStatement[26362-26380]:ExpressionStatement[26418-26436]"
    }, {
      "left" : "if (this.blockRandomised)",
      "right" : "if (this.blockRandomised)",
      "info" : "IfStatement[26419-26556]:IfStatement[26475-26612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26445-26556]:Block[26501-26612]"
    }, {
      "left" : "this.su_rNToGo = 0;",
      "right" : "this.su_rNToGo = 0;",
      "info" : "ExpressionStatement[26459-26478]:ExpressionStatement[26515-26534]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[26491-26509]:ExpressionStatement[26547-26565]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[26522-26546]:ReturnStatement[26578-26602]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[26565-26591]:ReturnStatement[26621-26647]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26603-26610]:Modifier[26659-26666]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[26611-26614]:PrimitiveType[26667-26670]"
    }, {
      "left" : "setupRandPartA",
      "right" : "setupRandPartA",
      "info" : "SimpleName[26615-26629]:SimpleName[26671-26685]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26639-26650]:SimpleType[26695-26706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26651-27474]:Block[26707-27530]"
    }, {
      "left" : "if (this.su_i2 <= this.last)",
      "right" : "if (this.su_i2 <= this.last)",
      "info" : "IfStatement[26661-27468]:IfStatement[26717-27524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26690-27369]:Block[26746-27425]"
    }, {
      "left" : "this.su_chPrev = this.su_ch2;",
      "right" : "this.su_chPrev = this.su_ch2;",
      "info" : "ExpressionStatement[26704-26733]:ExpressionStatement[26760-26789]"
    }, {
      "left" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "right" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "info" : "VariableDeclarationStatement[26746-26800]:VariableDeclarationStatement[26802-26856]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[26813-26855]:ExpressionStatement[26869-26911]"
    }, {
      "left" : "if (this.su_rNToGo == 0)",
      "right" : "if (this.su_rNToGo == 0)",
      "info" : "IfStatement[26868-27130]:IfStatement[26924-27186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26893-27075]:Block[26949-27131]"
    }, {
      "left" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "right" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "info" : "ExpressionStatement[26911-26958]:ExpressionStatement[26967-27014]"
    }, {
      "left" : "if (++this.su_rTPos == 512)",
      "right" : "if (++this.su_rTPos == 512)",
      "info" : "IfStatement[26975-27061]:IfStatement[27031-27117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27003-27061]:Block[27059-27117]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[27025-27043]:ExpressionStatement[27081-27099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27081-27130]:Block[27137-27186]"
    }, {
      "left" : "this.su_rNToGo--;",
      "right" : "this.su_rNToGo--;",
      "info" : "ExpressionStatement[27099-27116]:ExpressionStatement[27155-27172]"
    }, {
      "left" : "this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;",
      "right" : "this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;",
      "info" : "ExpressionStatement[27143-27203]:ExpressionStatement[27199-27259]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[27216-27229]:ExpressionStatement[27272-27285]"
    }, {
      "left" : "this.currentState = RAND_PART_B_STATE;",
      "right" : "this.currentState = RAND_PART_B_STATE;",
      "info" : "ExpressionStatement[27242-27280]:ExpressionStatement[27298-27336]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[27293-27326]:ExpressionStatement[27349-27382]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[27339-27359]:ReturnStatement[27395-27415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27375-27468]:Block[27431-27524]"
    }, {
      "left" : "endBlock();",
      "right" : "endBlock();",
      "info" : "ExpressionStatement[27389-27400]:ExpressionStatement[27445-27456]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[27413-27425]:ExpressionStatement[27469-27481]"
    }, {
      "left" : "return setupBlock();",
      "right" : "return setupBlock();",
      "info" : "ReturnStatement[27438-27458]:ReturnStatement[27494-27514]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27480-27487]:Modifier[27536-27543]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27488-27491]:PrimitiveType[27544-27547]"
    }, {
      "left" : "setupNoRandPartA",
      "right" : "setupNoRandPartA",
      "info" : "SimpleName[27492-27508]:SimpleName[27548-27564]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27518-27529]:SimpleType[27574-27585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27530-28102]:Block[27586-28158]"
    }, {
      "left" : "if (this.su_i2 <= this.last)",
      "right" : "if (this.su_i2 <= this.last)",
      "info" : "IfStatement[27540-28096]:IfStatement[27596-28152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27569-27943]:Block[27625-27999]"
    }, {
      "left" : "this.su_chPrev = this.su_ch2;",
      "right" : "this.su_chPrev = this.su_ch2;",
      "info" : "ExpressionStatement[27583-27612]:ExpressionStatement[27639-27668]"
    }, {
      "left" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "right" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "info" : "VariableDeclarationStatement[27625-27679]:VariableDeclarationStatement[27681-27735]"
    }, {
      "left" : "this.su_ch2 = su_ch2Shadow;",
      "right" : "this.su_ch2 = su_ch2Shadow;",
      "info" : "ExpressionStatement[27692-27719]:ExpressionStatement[27748-27775]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[27732-27774]:ExpressionStatement[27788-27830]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[27787-27800]:ExpressionStatement[27843-27856]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_B_STATE;",
      "right" : "this.currentState = NO_RAND_PART_B_STATE;",
      "info" : "ExpressionStatement[27813-27854]:ExpressionStatement[27869-27910]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[27867-27900]:ExpressionStatement[27923-27956]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[27913-27933]:ReturnStatement[27969-27989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27949-28096]:Block[28005-28152]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_A_STATE;",
      "right" : "this.currentState = NO_RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[27963-28004]:ExpressionStatement[28019-28060]"
    }, {
      "left" : "endBlock();",
      "right" : "endBlock();",
      "info" : "ExpressionStatement[28017-28028]:ExpressionStatement[28073-28084]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[28041-28053]:ExpressionStatement[28097-28109]"
    }, {
      "left" : "return setupBlock();",
      "right" : "return setupBlock();",
      "info" : "ReturnStatement[28066-28086]:ReturnStatement[28122-28142]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28108-28115]:Modifier[28164-28171]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28116-28119]:PrimitiveType[28172-28175]"
    }, {
      "left" : "setupRandPartB",
      "right" : "setupRandPartB",
      "info" : "SimpleName[28120-28134]:SimpleName[28176-28190]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28144-28155]:SimpleType[28200-28211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28156-29085]:Block[28212-29141]"
    }, {
      "left" : "if (this.su_ch2 != this.su_chPrev)",
      "right" : "if (this.su_ch2 != this.su_chPrev)",
      "info" : "IfStatement[28166-29079]:IfStatement[28222-29135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28201-28331]:Block[28257-28387]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[28215-28253]:ExpressionStatement[28271-28309]"
    }, {
      "left" : "this.su_count = 1;",
      "right" : "this.su_count = 1;",
      "info" : "ExpressionStatement[28266-28284]:ExpressionStatement[28322-28340]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[28297-28321]:ReturnStatement[28353-28377]"
    }, {
      "left" : "if (++this.su_count >= 4)",
      "right" : "if (++this.su_count >= 4)",
      "info" : "IfStatement[28337-29079]:IfStatement[28393-29135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28363-28974]:Block[28419-29030]"
    }, {
      "left" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "right" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "info" : "ExpressionStatement[28377-28433]:ExpressionStatement[28433-28489]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[28446-28488]:ExpressionStatement[28502-28544]"
    }, {
      "left" : "if (this.su_rNToGo == 0)",
      "right" : "if (this.su_rNToGo == 0)",
      "info" : "IfStatement[28501-28763]:IfStatement[28557-28819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28526-28708]:Block[28582-28764]"
    }, {
      "left" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "right" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "info" : "ExpressionStatement[28544-28591]:ExpressionStatement[28600-28647]"
    }, {
      "left" : "if (++this.su_rTPos == 512)",
      "right" : "if (++this.su_rTPos == 512)",
      "info" : "IfStatement[28608-28694]:IfStatement[28664-28750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28636-28694]:Block[28692-28750]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[28658-28676]:ExpressionStatement[28714-28732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28714-28763]:Block[28770-28819]"
    }, {
      "left" : "this.su_rNToGo--;",
      "right" : "this.su_rNToGo--;",
      "info" : "ExpressionStatement[28732-28749]:ExpressionStatement[28788-28805]"
    }, {
      "left" : "this.su_j2 = 0;",
      "right" : "this.su_j2 = 0;",
      "info" : "ExpressionStatement[28776-28791]:ExpressionStatement[28832-28847]"
    }, {
      "left" : "this.currentState = RAND_PART_C_STATE;",
      "right" : "this.currentState = RAND_PART_C_STATE;",
      "info" : "ExpressionStatement[28804-28842]:ExpressionStatement[28860-28898]"
    }, {
      "left" : "if (this.su_rNToGo == 1)",
      "right" : "if (this.su_rNToGo == 1)",
      "info" : "IfStatement[28855-28927]:IfStatement[28911-28983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28880-28927]:Block[28936-28983]"
    }, {
      "left" : "this.su_z ^= 1;",
      "right" : "this.su_z ^= 1;",
      "info" : "ExpressionStatement[28898-28913]:ExpressionStatement[28954-28969]"
    }, {
      "left" : "return setupRandPartC();",
      "right" : "return setupRandPartC();",
      "info" : "ReturnStatement[28940-28964]:ReturnStatement[28996-29020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28980-29079]:Block[29036-29135]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[28994-29032]:ExpressionStatement[29050-29088]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[29045-29069]:ReturnStatement[29101-29125]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29091-29098]:Modifier[29147-29154]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29099-29102]:PrimitiveType[29155-29158]"
    }, {
      "left" : "setupRandPartC",
      "right" : "setupRandPartC",
      "info" : "SimpleName[29103-29117]:SimpleName[29159-29173]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29127-29138]:SimpleType[29183-29194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29139-29459]:Block[29195-29515]"
    }, {
      "left" : "if (this.su_j2 < this.su_z)",
      "right" : "if (this.su_j2 < this.su_z)",
      "info" : "IfStatement[29149-29453]:IfStatement[29205-29509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29177-29291]:Block[29233-29347]"
    }, {
      "left" : "this.crc.updateCRC(this.su_ch2);",
      "right" : "this.crc.updateCRC(this.su_ch2);",
      "info" : "ExpressionStatement[29191-29223]:ExpressionStatement[29247-29279]"
    }, {
      "left" : "this.su_j2++;",
      "right" : "this.su_j2++;",
      "info" : "ExpressionStatement[29236-29249]:ExpressionStatement[29292-29305]"
    }, {
      "left" : "return this.su_ch2;",
      "right" : "return this.su_ch2;",
      "info" : "ReturnStatement[29262-29281]:ReturnStatement[29318-29337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29297-29453]:Block[29353-29509]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[29311-29349]:ExpressionStatement[29367-29405]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[29362-29375]:ExpressionStatement[29418-29431]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[29388-29406]:ExpressionStatement[29444-29462]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[29419-29443]:ReturnStatement[29475-29499]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29465-29472]:Modifier[29521-29528]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29473-29476]:PrimitiveType[29529-29532]"
    }, {
      "left" : "setupNoRandPartB",
      "right" : "setupNoRandPartB",
      "info" : "SimpleName[29477-29493]:SimpleName[29533-29549]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29503-29514]:SimpleType[29559-29570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29515-29937]:Block[29571-29993]"
    }, {
      "left" : "if (this.su_ch2 != this.su_chPrev)",
      "right" : "if (this.su_ch2 != this.su_chPrev)",
      "info" : "IfStatement[29525-29931]:IfStatement[29581-29987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29560-29641]:Block[29616-29697]"
    }, {
      "left" : "this.su_count = 1;",
      "right" : "this.su_count = 1;",
      "info" : "ExpressionStatement[29574-29592]:ExpressionStatement[29630-29648]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[29605-29631]:ReturnStatement[29661-29687]"
    }, {
      "left" : "if (++this.su_count >= 4)",
      "right" : "if (++this.su_count >= 4)",
      "info" : "IfStatement[29647-29931]:IfStatement[29703-29987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29673-29875]:Block[29729-29931]"
    }, {
      "left" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "right" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "info" : "ExpressionStatement[29687-29743]:ExpressionStatement[29743-29799]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[29756-29798]:ExpressionStatement[29812-29854]"
    }, {
      "left" : "this.su_j2 = 0;",
      "right" : "this.su_j2 = 0;",
      "info" : "ExpressionStatement[29811-29826]:ExpressionStatement[29867-29882]"
    }, {
      "left" : "return setupNoRandPartC();",
      "right" : "return setupNoRandPartC();",
      "info" : "ReturnStatement[29839-29865]:ReturnStatement[29895-29921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29881-29931]:Block[29937-29987]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[29895-29921]:ReturnStatement[29951-29977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29943-29950]:Modifier[29999-30006]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29951-29954]:PrimitiveType[30007-30010]"
    }, {
      "left" : "setupNoRandPartC",
      "right" : "setupNoRandPartC",
      "info" : "SimpleName[29955-29971]:SimpleName[30011-30027]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29981-29992]:SimpleType[30037-30048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29993-30364]:Block[30049-30420]"
    }, {
      "left" : "if (this.su_j2 < this.su_z)",
      "right" : "if (this.su_j2 < this.su_z)",
      "info" : "IfStatement[30003-30358]:IfStatement[30059-30414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30031-30245]:Block[30087-30301]"
    }, {
      "left" : "int su_ch2Shadow = this.su_ch2;",
      "right" : "int su_ch2Shadow = this.su_ch2;",
      "info" : "VariableDeclarationStatement[30045-30076]:VariableDeclarationStatement[30101-30132]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[30089-30122]:ExpressionStatement[30145-30178]"
    }, {
      "left" : "this.su_j2++;",
      "right" : "this.su_j2++;",
      "info" : "ExpressionStatement[30135-30148]:ExpressionStatement[30191-30204]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_C_STATE;",
      "right" : "this.currentState = NO_RAND_PART_C_STATE;",
      "info" : "ExpressionStatement[30161-30202]:ExpressionStatement[30217-30258]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[30215-30235]:ReturnStatement[30271-30291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30251-30358]:Block[30307-30414]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[30265-30278]:ExpressionStatement[30321-30334]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[30291-30309]:ExpressionStatement[30347-30365]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[30322-30348]:ReturnStatement[30378-30404]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30370-30377]:Modifier[30426-30433]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30378-30384]:Modifier[30434-30440]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30385-30390]:Modifier[30441-30446]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30391-30396]:TYPE_DECLARATION_KIND[30447-30452]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "SimpleName[30397-30401]:SimpleName[30453-30457]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "SimpleName[31694-31698]:SimpleName[31750-31754]"
    }, {
      "left" : "int blockSize100k",
      "right" : "int blockSize100k",
      "info" : "SingleVariableDeclaration[31699-31716]:SingleVariableDeclaration[31755-31772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31718-31808]:Block[31774-31864]"
    }, {
      "left" : "this.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];",
      "right" : "this.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];",
      "info" : "ExpressionStatement[31732-31798]:ExpressionStatement[31788-31854]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[32116-32121]:ArrayType[32172-32177]"
    }, {
      "left" : "initTT",
      "right" : "initTT",
      "info" : "SimpleName[32122-32128]:SimpleName[32178-32184]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[32129-32139]:SingleVariableDeclaration[32185-32195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32141-32594]:Block[32197-32650]"
    }, {
      "left" : "int[] ttShadow = this.tt;",
      "right" : "int[] ttShadow = this.tt;",
      "info" : "VariableDeclarationStatement[32155-32180]:VariableDeclarationStatement[32211-32236]"
    }, {
      "left" : "if ((ttShadow == null) || (ttShadow.length < length))",
      "right" : "if ((ttShadow == null) || (ttShadow.length < length))",
      "info" : "IfStatement[32431-32554]:IfStatement[32487-32610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-32554]:Block[32541-32610]"
    }, {
      "left" : "this.tt = ttShadow = new int[length];",
      "right" : "this.tt = ttShadow = new int[length];",
      "info" : "ExpressionStatement[32503-32540]:ExpressionStatement[32559-32596]"
    }, {
      "left" : "return ttShadow;",
      "right" : "return ttShadow;",
      "info" : "ReturnStatement[32568-32584]:ReturnStatement[32624-32640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32942-32948]:Modifier[32998-33004]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32949-32955]:Modifier[33005-33011]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32956-32963]:PrimitiveType[33012-33019]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[32964-32971]:SimpleName[33020-33027]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[32972-32988]:SingleVariableDeclaration[33028-33044]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[32990-33000]:SingleVariableDeclaration[33046-33056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33002-33310]:Block[33058-33366]"
    }, {
      "left" : "if (length < 3)",
      "right" : "if (length < 3)",
      "info" : "IfStatement[33013-33066]:IfStatement[33069-33122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33029-33066]:Block[33085-33122]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33043-33056]:ReturnStatement[33099-33112]"
    }, {
      "left" : "if (signature[0] != 'B')",
      "right" : "if (signature[0] != 'B')",
      "info" : "IfStatement[33076-33138]:IfStatement[33132-33194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33101-33138]:Block[33157-33194]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33115-33128]:ReturnStatement[33171-33184]"
    }, {
      "left" : "if (signature[1] != 'Z')",
      "right" : "if (signature[1] != 'Z')",
      "info" : "IfStatement[33148-33210]:IfStatement[33204-33266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33173-33210]:Block[33229-33266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33187-33200]:ReturnStatement[33243-33256]"
    }, {
      "left" : "if (signature[2] != 'h')",
      "right" : "if (signature[2] != 'h')",
      "info" : "IfStatement[33220-33282]:IfStatement[33276-33338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33245-33282]:Block[33301-33338]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33259-33272]:ReturnStatement[33315-33328]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33292-33304]:ReturnStatement[33348-33360]"
    } ]
  },
  "interFileMappings" : { }
}