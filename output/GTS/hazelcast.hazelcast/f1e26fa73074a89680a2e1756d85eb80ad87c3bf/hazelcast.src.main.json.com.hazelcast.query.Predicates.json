{
  "matchedElements" : [ {
    "left" : "private Predicates()",
    "right" : "private Predicates()",
    "info" : "MethodDeclaration[1624-1652]:MethodDeclaration[1546-1574]"
  }, {
    "left" : "public instanceOf(klass ) : ",
    "right" : "public instanceOf(klass ) : ",
    "info" : "MethodDeclaration[1658-1766]:MethodDeclaration[1580-1688]"
  }, {
    "left" : "public and() : ",
    "right" : "public and() : ",
    "info" : "MethodDeclaration[2087-2192]:MethodDeclaration[1694-1799]"
  }, {
    "left" : "public not(predicate ) : ",
    "right" : "public not(predicate ) : ",
    "info" : "MethodDeclaration[2198-2298]:MethodDeclaration[1805-1905]"
  }, {
    "left" : "public or() : ",
    "right" : "public or() : ",
    "info" : "MethodDeclaration[2304-2490]:MethodDeclaration[1911-2097]"
  }, {
    "left" : "public notEqual(attribute , y ) : ",
    "right" : "public notEqual(attribute , y ) : ",
    "info" : "MethodDeclaration[2496-2620]:MethodDeclaration[2103-2227]"
  }, {
    "left" : "public equal(attribute , y ) : ",
    "right" : "public equal(attribute , y ) : ",
    "info" : "MethodDeclaration[2626-2744]:MethodDeclaration[2233-2351]"
  }, {
    "left" : "public like(attribute , pattern ) : ",
    "right" : "public like(attribute , pattern ) : ",
    "info" : "MethodDeclaration[2750-2874]:MethodDeclaration[2357-2481]"
  }, {
    "left" : "public ilike(attribute , pattern ) : ",
    "right" : "public ilike(attribute , pattern ) : ",
    "info" : "MethodDeclaration[2880-3006]:MethodDeclaration[2487-2613]"
  }, {
    "left" : "public regex(attribute , pattern ) : ",
    "right" : "public regex(attribute , pattern ) : ",
    "info" : "MethodDeclaration[3012-3138]:MethodDeclaration[2619-2745]"
  }, {
    "left" : "public greaterThan(x , y ) : ",
    "right" : "public greaterThan(x , y ) : ",
    "info" : "MethodDeclaration[3144-3272]:MethodDeclaration[2751-2879]"
  }, {
    "left" : "public greaterEqual(x , y ) : ",
    "right" : "public greaterEqual(x , y ) : ",
    "info" : "MethodDeclaration[3278-3406]:MethodDeclaration[2885-3013]"
  }, {
    "left" : "public lessThan(x , y ) : ",
    "right" : "public lessThan(x , y ) : ",
    "info" : "MethodDeclaration[3412-3536]:MethodDeclaration[3019-3143]"
  }, {
    "left" : "public lessEqual(x , y ) : ",
    "right" : "public lessEqual(x , y ) : ",
    "info" : "MethodDeclaration[3542-3666]:MethodDeclaration[3149-3273]"
  }, {
    "left" : "public between(attribute , from , to ) : ",
    "right" : "public between(attribute , from , to ) : ",
    "info" : "MethodDeclaration[3672-3819]:MethodDeclaration[3279-3426]"
  }, {
    "left" : "public in(attribute , ) : ",
    "right" : "public in(attribute , ) : ",
    "info" : "MethodDeclaration[3825-3950]:MethodDeclaration[3432-3557]"
  } ],
  "mappings" : [ {
    "left" : "com.hazelcast.nio.ObjectDataInput",
    "right" : "com.hazelcast.query.impl.predicates.AndPredicate",
    "info" : "QualifiedName[664-697]:QualifiedName[664-712]"
  }, {
    "left" : "com.hazelcast.nio.ObjectDataOutput",
    "right" : "com.hazelcast.query.impl.predicates.BetweenPredicate",
    "info" : "QualifiedName[706-740]:QualifiedName[721-773]"
  }, {
    "left" : "com.hazelcast.nio.serialization.DataSerializable",
    "right" : "com.hazelcast.query.impl.predicates.EqualPredicate",
    "info" : "QualifiedName[749-797]:QualifiedName[782-832]"
  }, {
    "left" : "com.hazelcast.nio.serialization.HazelcastSerializationException",
    "right" : "com.hazelcast.query.impl.predicates.GreaterLessPredicate",
    "info" : "QualifiedName[806-869]:QualifiedName[841-897]"
  }, {
    "left" : "com.hazelcast.query.impl.AndResultSet",
    "right" : "com.hazelcast.query.impl.predicates.ILikePredicate",
    "info" : "QualifiedName[878-915]:QualifiedName[906-956]"
  }, {
    "left" : "com.hazelcast.query.impl.AttributeType",
    "right" : "com.hazelcast.query.impl.predicates.InPredicate",
    "info" : "QualifiedName[924-962]:QualifiedName[965-1012]"
  }, {
    "left" : "com.hazelcast.query.impl.ComparisonType",
    "right" : "com.hazelcast.query.impl.predicates.InstanceOfPredicate",
    "info" : "QualifiedName[971-1010]:QualifiedName[1021-1076]"
  }, {
    "left" : "com.hazelcast.query.impl.Index",
    "right" : "com.hazelcast.query.impl.predicates.LikePredicate",
    "info" : "QualifiedName[1019-1049]:QualifiedName[1085-1134]"
  }, {
    "left" : "com.hazelcast.query.impl.IndexImpl",
    "right" : "com.hazelcast.query.impl.predicates.NotEqualPredicate",
    "info" : "QualifiedName[1058-1092]:QualifiedName[1143-1196]"
  }, {
    "left" : "com.hazelcast.query.impl.OrResultSet",
    "right" : "com.hazelcast.query.impl.predicates.NotPredicate",
    "info" : "QualifiedName[1101-1137]:QualifiedName[1205-1253]"
  }, {
    "left" : "com.hazelcast.query.impl.QueryContext",
    "right" : "com.hazelcast.query.impl.predicates.OrPredicate",
    "info" : "QualifiedName[1146-1183]:QualifiedName[1262-1309]"
  }, {
    "left" : "com.hazelcast.query.impl.QueryableEntry",
    "right" : "com.hazelcast.query.impl.predicates.RegexPredicate",
    "info" : "QualifiedName[1192-1231]:QualifiedName[1318-1368]"
  }, {
    "left" : "/**\n * A utility class to create {@link com.hazelcast.query.Predicate} instances.\n */",
    "right" : "/**\n * A utility class to create {@link com.hazelcast.query.Predicate} instances.\n */",
    "info" : "Javadoc[1449-1534]:Javadoc[1371-1456]"
  }, {
    "left" : "private Predicates() {\n    }",
    "right" : "private Predicates() {\n    }",
    "info" : "MethodDeclaration[1624-1652]:MethodDeclaration[1546-1574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1645-1652]:Block[1567-1574]"
  }, {
    "left" : "public static Predicate instanceOf(final Class klass) {\n        return new InstanceOfPredicate(klass);\n    }",
    "right" : "public static Predicate instanceOf(final Class klass) {\n        return new InstanceOfPredicate(klass);\n    }",
    "info" : "MethodDeclaration[1658-1766]:MethodDeclaration[1580-1688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1712-1766]:Block[1634-1688]"
  }, {
    "left" : "return new InstanceOfPredicate(klass);",
    "right" : "return new InstanceOfPredicate(klass);",
    "info" : "ReturnStatement[1722-1760]:ReturnStatement[1644-1682]"
  }, {
    "left" : "public static Predicate and(Predicate... predicates) {\n        return new AndPredicate(predicates);\n    }",
    "right" : "public static Predicate and(Predicate... predicates) {\n        return new AndPredicate(predicates);\n    }",
    "info" : "MethodDeclaration[2087-2192]:MethodDeclaration[1694-1799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2140-2192]:Block[1747-1799]"
  }, {
    "left" : "return new AndPredicate(predicates);",
    "right" : "return new AndPredicate(predicates);",
    "info" : "ReturnStatement[2150-2186]:ReturnStatement[1757-1793]"
  }, {
    "left" : "public static Predicate not(Predicate predicate) {\n        return new NotPredicate(predicate);\n    }",
    "right" : "public static Predicate not(Predicate predicate) {\n        return new NotPredicate(predicate);\n    }",
    "info" : "MethodDeclaration[2198-2298]:MethodDeclaration[1805-1905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2247-2298]:Block[1854-1905]"
  }, {
    "left" : "return new NotPredicate(predicate);",
    "right" : "return new NotPredicate(predicate);",
    "info" : "ReturnStatement[2257-2292]:ReturnStatement[1864-1899]"
  }, {
    "left" : "/**\n     * Or predicate\n     *\n     * @param predicates\n     * @return\n     */\n    public static Predicate or(Predicate... predicates) {\n        return new OrPredicate(predicates);\n    }",
    "right" : "/**\n     * Or predicate\n     *\n     * @param predicates\n     * @return\n     */\n    public static Predicate or(Predicate... predicates) {\n        return new OrPredicate(predicates);\n    }",
    "info" : "MethodDeclaration[2304-2490]:MethodDeclaration[1911-2097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2439-2490]:Block[2046-2097]"
  }, {
    "left" : "return new OrPredicate(predicates);",
    "right" : "return new OrPredicate(predicates);",
    "info" : "ReturnStatement[2449-2484]:ReturnStatement[2056-2091]"
  }, {
    "left" : "public static Predicate notEqual(String attribute, Comparable y) {\n        return new NotEqualPredicate(attribute, y);\n    }",
    "right" : "public static Predicate notEqual(String attribute, Comparable y) {\n        return new NotEqualPredicate(attribute, y);\n    }",
    "info" : "MethodDeclaration[2496-2620]:MethodDeclaration[2103-2227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2561-2620]:Block[2168-2227]"
  }, {
    "left" : "return new NotEqualPredicate(attribute, y);",
    "right" : "return new NotEqualPredicate(attribute, y);",
    "info" : "ReturnStatement[2571-2614]:ReturnStatement[2178-2221]"
  }, {
    "left" : "public static Predicate equal(String attribute, Comparable y) {\n        return new EqualPredicate(attribute, y);\n    }",
    "right" : "public static Predicate equal(String attribute, Comparable y) {\n        return new EqualPredicate(attribute, y);\n    }",
    "info" : "MethodDeclaration[2626-2744]:MethodDeclaration[2233-2351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2688-2744]:Block[2295-2351]"
  }, {
    "left" : "return new EqualPredicate(attribute, y);",
    "right" : "return new EqualPredicate(attribute, y);",
    "info" : "ReturnStatement[2698-2738]:ReturnStatement[2305-2345]"
  }, {
    "left" : "public static Predicate like(String attribute, String pattern) {\n        return new LikePredicate(attribute, pattern);\n    }",
    "right" : "public static Predicate like(String attribute, String pattern) {\n        return new LikePredicate(attribute, pattern);\n    }",
    "info" : "MethodDeclaration[2750-2874]:MethodDeclaration[2357-2481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2813-2874]:Block[2420-2481]"
  }, {
    "left" : "return new LikePredicate(attribute, pattern);",
    "right" : "return new LikePredicate(attribute, pattern);",
    "info" : "ReturnStatement[2823-2868]:ReturnStatement[2430-2475]"
  }, {
    "left" : "public static Predicate ilike(String attribute, String pattern) {\n        return new ILikePredicate(attribute, pattern);\n    }",
    "right" : "public static Predicate ilike(String attribute, String pattern) {\n        return new ILikePredicate(attribute, pattern);\n    }",
    "info" : "MethodDeclaration[2880-3006]:MethodDeclaration[2487-2613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2944-3006]:Block[2551-2613]"
  }, {
    "left" : "return new ILikePredicate(attribute, pattern);",
    "right" : "return new ILikePredicate(attribute, pattern);",
    "info" : "ReturnStatement[2954-3000]:ReturnStatement[2561-2607]"
  }, {
    "left" : "public static Predicate regex(String attribute, String pattern) {\n        return new RegexPredicate(attribute, pattern);\n    }",
    "right" : "public static Predicate regex(String attribute, String pattern) {\n        return new RegexPredicate(attribute, pattern);\n    }",
    "info" : "MethodDeclaration[3012-3138]:MethodDeclaration[2619-2745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3076-3138]:Block[2683-2745]"
  }, {
    "left" : "return new RegexPredicate(attribute, pattern);",
    "right" : "return new RegexPredicate(attribute, pattern);",
    "info" : "ReturnStatement[3086-3132]:ReturnStatement[2693-2739]"
  }, {
    "left" : "public static Predicate greaterThan(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, false, false);\n    }",
    "right" : "public static Predicate greaterThan(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, false, false);\n    }",
    "info" : "MethodDeclaration[3144-3272]:MethodDeclaration[2751-2879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3204-3272]:Block[2811-2879]"
  }, {
    "left" : "return new GreaterLessPredicate(x, y, false, false);",
    "right" : "return new GreaterLessPredicate(x, y, false, false);",
    "info" : "ReturnStatement[3214-3266]:ReturnStatement[2821-2873]"
  }, {
    "left" : "public static Predicate greaterEqual(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, true, false);\n    }",
    "right" : "public static Predicate greaterEqual(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, true, false);\n    }",
    "info" : "MethodDeclaration[3278-3406]:MethodDeclaration[2885-3013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3339-3406]:Block[2946-3013]"
  }, {
    "left" : "return new GreaterLessPredicate(x, y, true, false);",
    "right" : "return new GreaterLessPredicate(x, y, true, false);",
    "info" : "ReturnStatement[3349-3400]:ReturnStatement[2956-3007]"
  }, {
    "left" : "public static Predicate lessThan(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, false, true);\n    }",
    "right" : "public static Predicate lessThan(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, false, true);\n    }",
    "info" : "MethodDeclaration[3412-3536]:MethodDeclaration[3019-3143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3469-3536]:Block[3076-3143]"
  }, {
    "left" : "return new GreaterLessPredicate(x, y, false, true);",
    "right" : "return new GreaterLessPredicate(x, y, false, true);",
    "info" : "ReturnStatement[3479-3530]:ReturnStatement[3086-3137]"
  }, {
    "left" : "public static Predicate lessEqual(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, true, true);\n    }",
    "right" : "public static Predicate lessEqual(String x, Comparable y) {\n        return new GreaterLessPredicate(x, y, true, true);\n    }",
    "info" : "MethodDeclaration[3542-3666]:MethodDeclaration[3149-3273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3600-3666]:Block[3207-3273]"
  }, {
    "left" : "return new GreaterLessPredicate(x, y, true, true);",
    "right" : "return new GreaterLessPredicate(x, y, true, true);",
    "info" : "ReturnStatement[3610-3660]:ReturnStatement[3217-3267]"
  }, {
    "left" : "public static Predicate between(String attribute, Comparable from, Comparable to) {\n        return new BetweenPredicate(attribute, from, to);\n    }",
    "right" : "public static Predicate between(String attribute, Comparable from, Comparable to) {\n        return new BetweenPredicate(attribute, from, to);\n    }",
    "info" : "MethodDeclaration[3672-3819]:MethodDeclaration[3279-3426]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3754-3819]:Block[3361-3426]"
  }, {
    "left" : "return new BetweenPredicate(attribute, from, to);",
    "right" : "return new BetweenPredicate(attribute, from, to);",
    "info" : "ReturnStatement[3764-3813]:ReturnStatement[3371-3420]"
  }, {
    "left" : "public static Predicate in(String attribute, Comparable... values) {\n        return new InPredicate(attribute, values);\n    }",
    "right" : "public static Predicate in(String attribute, Comparable... values) {\n        return new InPredicate(attribute, values);\n    }",
    "info" : "MethodDeclaration[3825-3950]:MethodDeclaration[3432-3557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3892-3950]:Block[3499-3557]"
  }, {
    "left" : "return new InPredicate(attribute, values);",
    "right" : "return new InPredicate(attribute, values);",
    "info" : "ReturnStatement[3902-3944]:ReturnStatement[3509-3551]"
  } ]
}