{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SingularValueDecompositionImpl",
      "right" : "SingularValueDecompositionImpl",
      "info" : "TypeDeclaration[946-15840]:TypeDeclaration[946-15950]"
    }, {
      "left" : "private int m;",
      "right" : "private int m;",
      "info" : "FieldDeclaration[2096-2159]:FieldDeclaration[2096-2159]"
    }, {
      "left" : "private int n;",
      "right" : "private int n;",
      "info" : "FieldDeclaration[2165-2231]:FieldDeclaration[2165-2231]"
    }, {
      "left" : "private BiDiagonalTransformer transformer;",
      "right" : "private BiDiagonalTransformer transformer;",
      "info" : "FieldDeclaration[2237-2317]:FieldDeclaration[2237-2317]"
    }, {
      "left" : "private double[] mainBidiagonal;",
      "right" : "private double[] mainBidiagonal;",
      "info" : "FieldDeclaration[2323-2406]:FieldDeclaration[2323-2406]"
    }, {
      "left" : "private double[] secondaryBidiagonal;",
      "right" : "private double[] secondaryBidiagonal;",
      "info" : "FieldDeclaration[2412-2505]:FieldDeclaration[2412-2505]"
    }, {
      "left" : "private double[] mainTridiagonal;",
      "right" : "private double[] mainTridiagonal;",
      "info" : "FieldDeclaration[2511-2596]:FieldDeclaration[2511-2596]"
    }, {
      "left" : "private double[] secondaryTridiagonal;",
      "right" : "private double[] secondaryTridiagonal;",
      "info" : "FieldDeclaration[2602-2697]:FieldDeclaration[2602-2697]"
    }, {
      "left" : "private EigenDecomposition eigenDecomposition;",
      "right" : "private EigenDecomposition eigenDecomposition;",
      "info" : "FieldDeclaration[2703-2807]:FieldDeclaration[2703-2807]"
    }, {
      "left" : "private double[] singularValues;",
      "right" : "private double[] singularValues;",
      "info" : "FieldDeclaration[2813-2873]:FieldDeclaration[2813-2873]"
    }, {
      "left" : "private RealMatrix cachedU;",
      "right" : "private RealMatrix cachedU;",
      "info" : "FieldDeclaration[2879-2936]:FieldDeclaration[2879-2936]"
    }, {
      "left" : "private RealMatrix cachedUt;",
      "right" : "private RealMatrix cachedUt;",
      "info" : "FieldDeclaration[2942-3012]:FieldDeclaration[2942-3012]"
    }, {
      "left" : "private RealMatrix cachedS;",
      "right" : "private RealMatrix cachedS;",
      "info" : "FieldDeclaration[3018-3075]:FieldDeclaration[3018-3075]"
    }, {
      "left" : "private RealMatrix cachedV;",
      "right" : "private RealMatrix cachedV;",
      "info" : "FieldDeclaration[3081-3138]:FieldDeclaration[3081-3138]"
    }, {
      "left" : "private RealMatrix cachedVt;",
      "right" : "private RealMatrix cachedVt;",
      "info" : "FieldDeclaration[3144-3214]:FieldDeclaration[3144-3214]"
    }, {
      "left" : "public SingularValueDecompositionImpl(final RealMatrix matrix)\n        throws InvalidMatrixException",
      "right" : "public SingularValueDecompositionImpl(final RealMatrix matrix)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[3220-3701]:MethodDeclaration[3220-3701]"
    }, {
      "left" : "public SingularValueDecompositionImpl(final RealMatrix matrix, final int max)\n        throws InvalidMatrixException",
      "right" : "public SingularValueDecompositionImpl(final RealMatrix matrix, final int max)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[3707-5700]:MethodDeclaration[3707-5700]"
    }, {
      "left" : "public RealMatrix getU()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getU()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[5706-7600]:MethodDeclaration[5706-7655]"
    }, {
      "left" : "public RealMatrix getUT()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getUT()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[7606-7851]:MethodDeclaration[7661-7906]"
    }, {
      "left" : "public RealMatrix getS()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getS()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[7857-8149]:MethodDeclaration[7912-8204]"
    }, {
      "left" : "public double[] getSingularValues()\n        throws InvalidMatrixException",
      "right" : "public double[] getSingularValues()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[8155-8300]:MethodDeclaration[8210-8355]"
    }, {
      "left" : "public RealMatrix getV()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getV()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[8306-10196]:MethodDeclaration[8361-10306]"
    }, {
      "left" : "public RealMatrix getVT()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getVT()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[10202-10447]:MethodDeclaration[10312-10557]"
    }, {
      "left" : "public RealMatrix getCovariance(final double minSingularValue)",
      "right" : "public RealMatrix getCovariance(final double minSingularValue)",
      "info" : "MethodDeclaration[10453-11546]:MethodDeclaration[10563-11656]"
    }, {
      "left" : "public void visit(final int row, final int column, final double value)",
      "right" : "public void visit(final int row, final int column, final double value)",
      "info" : "MethodDeclaration[11185-11391]:MethodDeclaration[11295-11501]"
    }, {
      "left" : "public double getNorm()\n        throws InvalidMatrixException",
      "right" : "public double getNorm()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[11552-11680]:MethodDeclaration[11662-11790]"
    }, {
      "left" : "public double getConditionNumber()\n        throws InvalidMatrixException",
      "right" : "public double getConditionNumber()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[11686-11869]:MethodDeclaration[11796-11979]"
    }, {
      "left" : "public int getRank()\n        throws IllegalStateException",
      "right" : "public int getRank()\n        throws IllegalStateException",
      "info" : "MethodDeclaration[11875-12227]:MethodDeclaration[11985-12337]"
    }, {
      "left" : "public DecompositionSolver getSolver()",
      "right" : "public DecompositionSolver getSolver()",
      "info" : "MethodDeclaration[12233-12419]:MethodDeclaration[12343-12529]"
    }, {
      "left" : "Solver",
      "right" : "Solver",
      "info" : "TypeDeclaration[12425-15837]:TypeDeclaration[12535-15947]"
    }, {
      "left" : "private final RealMatrix pseudoInverse;",
      "right" : "private final RealMatrix pseudoInverse;",
      "info" : "FieldDeclaration[12526-12618]:FieldDeclaration[12636-12728]"
    }, {
      "left" : "private boolean nonSingular;",
      "right" : "private boolean nonSingular;",
      "info" : "FieldDeclaration[12628-12694]:FieldDeclaration[12738-12804]"
    }, {
      "left" : "private Solver(final double[] singularValues, final RealMatrix uT, final RealMatrix v,\n                       final boolean nonSingular)",
      "right" : "private Solver(final double[] singularValues, final RealMatrix uT, final RealMatrix v,\n                       final boolean nonSingular)",
      "info" : "MethodDeclaration[12704-13605]:MethodDeclaration[12814-13715]"
    }, {
      "left" : "public double[] solve(final double[] b)\n            throws IllegalArgumentException",
      "right" : "public double[] solve(final double[] b)\n            throws IllegalArgumentException",
      "info" : "MethodDeclaration[13615-14202]:MethodDeclaration[13725-14312]"
    }, {
      "left" : "public RealVector solve(final RealVector b)\n            throws IllegalArgumentException",
      "right" : "public RealVector solve(final RealVector b)\n            throws IllegalArgumentException",
      "info" : "MethodDeclaration[14212-14803]:MethodDeclaration[14322-14913]"
    }, {
      "left" : "public RealMatrix solve(final RealMatrix b)\n            throws IllegalArgumentException",
      "right" : "public RealMatrix solve(final RealMatrix b)\n            throws IllegalArgumentException",
      "info" : "MethodDeclaration[14813-15405]:MethodDeclaration[14923-15515]"
    }, {
      "left" : "public boolean isNonSingular()",
      "right" : "public boolean isNonSingular()",
      "info" : "MethodDeclaration[15415-15637]:MethodDeclaration[15525-15747]"
    }, {
      "left" : "public RealMatrix getInverse()",
      "right" : "public RealMatrix getInverse()",
      "info" : "MethodDeclaration[15647-15830]:MethodDeclaration[15757-15940]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3607-3701]:Block[3607-3701]"
    }, {
      "left" : "this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",
      "right" : "this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",
      "info" : "ConstructorInvocation[3617-3695]:ConstructorInvocation[3617-3695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4164-5700]:Block[4164-5700]"
    }, {
      "left" : "m = matrix.getRowDimension();",
      "right" : "m = matrix.getRowDimension();",
      "info" : "ExpressionStatement[4175-4204]:ExpressionStatement[4175-4204]"
    }, {
      "left" : "n = matrix.getColumnDimension();",
      "right" : "n = matrix.getColumnDimension();",
      "info" : "ExpressionStatement[4213-4245]:ExpressionStatement[4213-4245]"
    }, {
      "left" : "cachedU  = null;",
      "right" : "cachedU  = null;",
      "info" : "ExpressionStatement[4255-4271]:ExpressionStatement[4255-4271]"
    }, {
      "left" : "cachedS  = null;",
      "right" : "cachedS  = null;",
      "info" : "ExpressionStatement[4280-4296]:ExpressionStatement[4280-4296]"
    }, {
      "left" : "cachedV  = null;",
      "right" : "cachedV  = null;",
      "info" : "ExpressionStatement[4305-4321]:ExpressionStatement[4305-4321]"
    }, {
      "left" : "cachedVt = null;",
      "right" : "cachedVt = null;",
      "info" : "ExpressionStatement[4330-4346]:ExpressionStatement[4330-4346]"
    }, {
      "left" : "transformer         = new BiDiagonalTransformer(matrix);",
      "right" : "transformer         = new BiDiagonalTransformer(matrix);",
      "info" : "ExpressionStatement[4402-4458]:ExpressionStatement[4402-4458]"
    }, {
      "left" : "mainBidiagonal      = transformer.getMainDiagonalRef();",
      "right" : "mainBidiagonal      = transformer.getMainDiagonalRef();",
      "info" : "ExpressionStatement[4467-4522]:ExpressionStatement[4467-4522]"
    }, {
      "left" : "secondaryBidiagonal = transformer.getSecondaryDiagonalRef();",
      "right" : "secondaryBidiagonal = transformer.getSecondaryDiagonalRef();",
      "info" : "ExpressionStatement[4531-4591]:ExpressionStatement[4531-4591]"
    }, {
      "left" : "mainTridiagonal      = new double[mainBidiagonal.length];",
      "right" : "mainTridiagonal      = new double[mainBidiagonal.length];",
      "info" : "ExpressionStatement[4673-4730]:ExpressionStatement[4673-4730]"
    }, {
      "left" : "secondaryTridiagonal = new double[mainBidiagonal.length - 1];",
      "right" : "secondaryTridiagonal = new double[mainBidiagonal.length - 1];",
      "info" : "ExpressionStatement[4739-4800]:ExpressionStatement[4739-4800]"
    }, {
      "left" : "double a = mainBidiagonal[0];",
      "right" : "double a = mainBidiagonal[0];",
      "info" : "VariableDeclarationStatement[4809-4838]:VariableDeclarationStatement[4809-4838]"
    }, {
      "left" : "mainTridiagonal[0] = a * a;",
      "right" : "mainTridiagonal[0] = a * a;",
      "info" : "ExpressionStatement[4847-4874]:ExpressionStatement[4847-4874]"
    }, {
      "left" : "for (int i = 1; i < mainBidiagonal.length; ++i)",
      "right" : "for (int i = 1; i < mainBidiagonal.length; ++i)",
      "info" : "ForStatement[4883-5132]:ForStatement[4883-5132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4931-5132]:Block[4931-5132]"
    }, {
      "left" : "final double b  = secondaryBidiagonal[i - 1];",
      "right" : "final double b  = secondaryBidiagonal[i - 1];",
      "info" : "VariableDeclarationStatement[4945-4990]:VariableDeclarationStatement[4945-4990]"
    }, {
      "left" : "secondaryTridiagonal[i - 1] = a * b;",
      "right" : "secondaryTridiagonal[i - 1] = a * b;",
      "info" : "ExpressionStatement[5003-5039]:ExpressionStatement[5003-5039]"
    }, {
      "left" : "a = mainBidiagonal[i];",
      "right" : "a = mainBidiagonal[i];",
      "info" : "ExpressionStatement[5052-5074]:ExpressionStatement[5052-5074]"
    }, {
      "left" : "mainTridiagonal[i] = a * a + b * b;",
      "right" : "mainTridiagonal[i] = a * a + b * b;",
      "info" : "ExpressionStatement[5087-5122]:ExpressionStatement[5087-5122]"
    }, {
      "left" : "eigenDecomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal,\n                                       MathUtils.SAFE_MIN);",
      "right" : "eigenDecomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal,\n                                       MathUtils.SAFE_MIN);",
      "info" : "ExpressionStatement[5177-5335]:ExpressionStatement[5177-5335]"
    }, {
      "left" : "final double[] eigenValues = eigenDecomposition.getRealEigenvalues();",
      "right" : "final double[] eigenValues = eigenDecomposition.getRealEigenvalues();",
      "info" : "VariableDeclarationStatement[5344-5413]:VariableDeclarationStatement[5344-5413]"
    }, {
      "left" : "int p = Math.min(max, eigenValues.length);",
      "right" : "int p = Math.min(max, eigenValues.length);",
      "info" : "VariableDeclarationStatement[5422-5464]:VariableDeclarationStatement[5422-5464]"
    }, {
      "left" : "while ((p > 0) && (eigenValues[p - 1] <= 0))",
      "right" : "while ((p > 0) && (eigenValues[p - 1] <= 0))",
      "info" : "WhileStatement[5473-5546]:WhileStatement[5473-5546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5518-5546]:Block[5518-5546]"
    }, {
      "left" : "--p;",
      "right" : "--p;",
      "info" : "ExpressionStatement[5532-5536]:ExpressionStatement[5532-5536]"
    }, {
      "left" : "singularValues = new double[p];",
      "right" : "singularValues = new double[p];",
      "info" : "ExpressionStatement[5555-5586]:ExpressionStatement[5555-5586]"
    }, {
      "left" : "for (int i = 0; i < p; ++i)",
      "right" : "for (int i = 0; i < p; ++i)",
      "info" : "ForStatement[5595-5693]:ForStatement[5595-5693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5623-5693]:Block[5623-5693]"
    }, {
      "left" : "singularValues[i] = Math.sqrt(eigenValues[i]);",
      "right" : "singularValues[i] = Math.sqrt(eigenValues[i]);",
      "info" : "ExpressionStatement[5637-5683]:ExpressionStatement[5637-5683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5794-7600]:Block[5794-7655]"
    }, {
      "left" : "if (cachedU == null)",
      "right" : "if (cachedU == null)",
      "info" : "IfStatement[5805-7532]:IfStatement[5805-7587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5826-7532]:Block[5826-7587]"
    }, {
      "left" : "final int p = singularValues.length;",
      "right" : "final int p = singularValues.length;",
      "info" : "VariableDeclarationStatement[5841-5877]:VariableDeclarationStatement[5841-5877]"
    }, {
      "left" : "if (m >= n)",
      "right" : "if (m >= n)",
      "info" : "IfStatement[5890-7521]:IfStatement[5890-7576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5902-7246]:Block[5902-7301]"
    }, {
      "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
      "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
      "info" : "VariableDeclarationStatement[5999-6099]:VariableDeclarationStatement[5999-6099]"
    }, {
      "left" : "final double[][] eData = e.getData();",
      "right" : "final double[][] eData = e.getData();",
      "info" : "VariableDeclarationStatement[6116-6153]:VariableDeclarationStatement[6116-6153]"
    }, {
      "left" : "final double[][] wData = new double[m][p];",
      "right" : "final double[][] wData = new double[m][p];",
      "info" : "VariableDeclarationStatement[6170-6212]:VariableDeclarationStatement[6170-6212]"
    }, {
      "left" : "double[] ei1 = eData[0];",
      "right" : "double[] ei1 = eData[0];",
      "info" : "VariableDeclarationStatement[6229-6253]:VariableDeclarationStatement[6229-6253]"
    }, {
      "left" : "for (int i = 0; i < p - 1; ++i)",
      "right" : "for (int i = 0; i < p; ++i)",
      "info" : "ForStatement[6270-6831]:ForStatement[6270-7064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6302-6831]:Block[6298-7064]"
    }, {
      "left" : "final double mi = mainBidiagonal[i];",
      "right" : "final double mi = mainBidiagonal[i];",
      "info" : "VariableDeclarationStatement[6405-6441]:VariableDeclarationStatement[6401-6437]"
    }, {
      "left" : "final double[] ei0 = ei1;",
      "right" : "final double[] ei0 = ei1;",
      "info" : "VariableDeclarationStatement[6462-6487]:VariableDeclarationStatement[6458-6483]"
    }, {
      "left" : "final double[] wi  = wData[i];",
      "right" : "final double[] wi  = wData[i];",
      "info" : "VariableDeclarationStatement[6508-6538]:VariableDeclarationStatement[6504-6534]"
    }, {
      "left" : "ei1 = eData[i + 1];",
      "right" : "ei1 = eData[i + 1];",
      "info" : "ExpressionStatement[6563-6582]:ExpressionStatement[6596-6615]"
    }, {
      "left" : "final double si = secondaryBidiagonal[i];",
      "right" : "final double si = secondaryBidiagonal[i];",
      "info" : "VariableDeclarationStatement[6607-6648]:VariableDeclarationStatement[6640-6681]"
    }, {
      "left" : "for (int j = 0; j < p; ++j)",
      "right" : "for (int j = 0; j < p; ++j)",
      "info" : "ForStatement[6673-6813]:ForStatement[6706-6846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6701-6813]:Block[6734-6846]"
    }, {
      "left" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
      "right" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
      "info" : "ExpressionStatement[6731-6787]:ExpressionStatement[6764-6820]"
    }, {
      "left" : "for (int i = p; i < m; ++i)",
      "right" : "for (int i = p; i < m; ++i)",
      "info" : "ForStatement[7027-7120]:ForStatement[7082-7175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7055-7120]:Block[7110-7175]"
    }, {
      "left" : "wData[i] = new double[p];",
      "right" : "wData[i] = new double[p];",
      "info" : "ExpressionStatement[7077-7102]:ExpressionStatement[7132-7157]"
    }, {
      "left" : "cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));",
      "right" : "cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));",
      "info" : "ExpressionStatement[7137-7232]:ExpressionStatement[7192-7287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7252-7521]:Block[7307-7576]"
    }, {
      "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
      "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
      "info" : "VariableDeclarationStatement[7349-7449]:VariableDeclarationStatement[7404-7504]"
    }, {
      "left" : "cachedU = transformer.getU().multiply(e);",
      "right" : "cachedU = transformer.getU().multiply(e);",
      "info" : "ExpressionStatement[7466-7507]:ExpressionStatement[7521-7562]"
    }, {
      "left" : "return cachedU;",
      "right" : "return cachedU;",
      "info" : "ReturnStatement[7578-7593]:ReturnStatement[7633-7648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7695-7851]:Block[7750-7906]"
    }, {
      "left" : "if (cachedUt == null)",
      "right" : "if (cachedUt == null)",
      "info" : "IfStatement[7706-7782]:IfStatement[7761-7837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7728-7782]:Block[7783-7837]"
    }, {
      "left" : "cachedUt = getU().transpose();",
      "right" : "cachedUt = getU().transpose();",
      "info" : "ExpressionStatement[7742-7772]:ExpressionStatement[7797-7827]"
    }, {
      "left" : "return cachedUt;",
      "right" : "return cachedUt;",
      "info" : "ReturnStatement[7828-7844]:ReturnStatement[7883-7899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8149]:Block[8000-8204]"
    }, {
      "left" : "if (cachedS == null)",
      "right" : "if (cachedS == null)",
      "info" : "IfStatement[7956-8119]:IfStatement[8011-8174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7977-8119]:Block[8032-8174]"
    }, {
      "left" : "cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);",
      "right" : "cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);",
      "info" : "ExpressionStatement[8045-8108]:ExpressionStatement[8100-8163]"
    }, {
      "left" : "return cachedS;",
      "right" : "return cachedS;",
      "info" : "ReturnStatement[8128-8143]:ReturnStatement[8183-8198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8254-8300]:Block[8309-8355]"
    }, {
      "left" : "return singularValues.clone();",
      "right" : "return singularValues.clone();",
      "info" : "ReturnStatement[8264-8294]:ReturnStatement[8319-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8394-10196]:Block[8449-10306]"
    }, {
      "left" : "if (cachedV == null)",
      "right" : "if (cachedV == null)",
      "info" : "IfStatement[8405-10128]:IfStatement[8460-10238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-10128]:Block[8481-10238]"
    }, {
      "left" : "final int p = singularValues.length;",
      "right" : "final int p = singularValues.length;",
      "info" : "VariableDeclarationStatement[8441-8477]:VariableDeclarationStatement[8496-8532]"
    }, {
      "left" : "if (m >= n)",
      "right" : "if (m >= n)",
      "info" : "IfStatement[8490-10117]:IfStatement[8545-10227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8502-8771]:Block[8557-8826]"
    }, {
      "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
      "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
      "info" : "VariableDeclarationStatement[8599-8699]:VariableDeclarationStatement[8654-8754]"
    }, {
      "left" : "cachedV = transformer.getV().multiply(e);",
      "right" : "cachedV = transformer.getV().multiply(e);",
      "info" : "ExpressionStatement[8716-8757]:ExpressionStatement[8771-8812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8777-10117]:Block[8832-10227]"
    }, {
      "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
      "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
      "info" : "VariableDeclarationStatement[8952-9052]:VariableDeclarationStatement[9007-9107]"
    }, {
      "left" : "final double[][] eData = e.getData();",
      "right" : "final double[][] eData = e.getData();",
      "info" : "VariableDeclarationStatement[9069-9106]:VariableDeclarationStatement[9124-9161]"
    }, {
      "left" : "final double[][] wData = new double[n][p];",
      "right" : "final double[][] wData = new double[n][p];",
      "info" : "VariableDeclarationStatement[9123-9165]:VariableDeclarationStatement[9178-9220]"
    }, {
      "left" : "double[] ei1 = eData[0];",
      "right" : "double[] ei1 = eData[0];",
      "info" : "VariableDeclarationStatement[9182-9206]:VariableDeclarationStatement[9237-9261]"
    }, {
      "left" : "for (int i = 0; i < p - 1; ++i)",
      "right" : "for (int i = 0; i < p; ++i)",
      "info" : "ForStatement[9223-9703]:ForStatement[9278-9991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9255-9703]:Block[9306-9991]"
    }, {
      "left" : "final double mi = mainBidiagonal[i];",
      "right" : "final double mi = mainBidiagonal[i];",
      "info" : "VariableDeclarationStatement[9277-9313]:VariableDeclarationStatement[9328-9364]"
    }, {
      "left" : "final double[] ei0 = ei1;",
      "right" : "final double[] ei0 = ei1;",
      "info" : "VariableDeclarationStatement[9334-9359]:VariableDeclarationStatement[9385-9410]"
    }, {
      "left" : "final double[] wi  = wData[i];",
      "right" : "final double[] wi  = wData[i];",
      "info" : "VariableDeclarationStatement[9380-9410]:VariableDeclarationStatement[9431-9461]"
    }, {
      "left" : "ei1 = eData[i + 1];",
      "right" : "ei1 = eData[i + 1];",
      "info" : "ExpressionStatement[9435-9454]:ExpressionStatement[9523-9542]"
    }, {
      "left" : "final double si = secondaryBidiagonal[i];",
      "right" : "final double si = secondaryBidiagonal[i];",
      "info" : "VariableDeclarationStatement[9479-9520]:VariableDeclarationStatement[9567-9608]"
    }, {
      "left" : "for (int j = 0; j < p; ++j)",
      "right" : "for (int j = 0; j < p; ++j)",
      "info" : "ForStatement[9545-9685]:ForStatement[9633-9773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9573-9685]:Block[9661-9773]"
    }, {
      "left" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
      "right" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
      "info" : "ExpressionStatement[9603-9659]:ExpressionStatement[9691-9747]"
    }, {
      "left" : "for (int i = p; i < n; ++i)",
      "right" : "for (int i = p; i < n; ++i)",
      "info" : "ForStatement[9898-9991]:ForStatement[10008-10101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9926-9991]:Block[10036-10101]"
    }, {
      "left" : "wData[i] = new double[p];",
      "right" : "wData[i] = new double[p];",
      "info" : "ExpressionStatement[9948-9973]:ExpressionStatement[10058-10083]"
    }, {
      "left" : "cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));",
      "right" : "cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));",
      "info" : "ExpressionStatement[10008-10103]:ExpressionStatement[10118-10213]"
    }, {
      "left" : "return cachedV;",
      "right" : "return cachedV;",
      "info" : "ReturnStatement[10174-10189]:ReturnStatement[10284-10299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10291-10447]:Block[10401-10557]"
    }, {
      "left" : "if (cachedVt == null)",
      "right" : "if (cachedVt == null)",
      "info" : "IfStatement[10302-10378]:IfStatement[10412-10488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10324-10378]:Block[10434-10488]"
    }, {
      "left" : "cachedVt = getV().transpose();",
      "right" : "cachedVt = getV().transpose();",
      "info" : "ExpressionStatement[10338-10368]:ExpressionStatement[10448-10478]"
    }, {
      "left" : "return cachedVt;",
      "right" : "return cachedVt;",
      "info" : "ReturnStatement[10424-10440]:ReturnStatement[10534-10550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10541-11546]:Block[10651-11656]"
    }, {
      "left" : "final int p = singularValues.length;",
      "right" : "final int p = singularValues.length;",
      "info" : "VariableDeclarationStatement[10609-10645]:VariableDeclarationStatement[10719-10755]"
    }, {
      "left" : "int dimension = 0;",
      "right" : "int dimension = 0;",
      "info" : "VariableDeclarationStatement[10654-10672]:VariableDeclarationStatement[10764-10782]"
    }, {
      "left" : "while ((dimension < p) && (singularValues[dimension] >= minSingularValue))",
      "right" : "while ((dimension < p) && (singularValues[dimension] >= minSingularValue))",
      "info" : "WhileStatement[10681-10792]:WhileStatement[10791-10902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10756-10792]:Block[10866-10902]"
    }, {
      "left" : "++dimension;",
      "right" : "++dimension;",
      "info" : "ExpressionStatement[10770-10782]:ExpressionStatement[10880-10892]"
    }, {
      "left" : "if (dimension == 0)",
      "right" : "if (dimension == 0)",
      "info" : "IfStatement[10802-11033]:IfStatement[10912-11143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10822-11033]:Block[10932-11143]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"cutoff singular value is {0}, should be at most {1}\",\n                  minSingularValue, singularValues[0]);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"cutoff singular value is {0}, should be at most {1}\",\n                  minSingularValue, singularValues[0]);",
      "info" : "ThrowStatement[10836-11023]:ThrowStatement[10946-11133]"
    }, {
      "left" : "final double[][] data = new double[dimension][p];",
      "right" : "final double[][] data = new double[dimension][p];",
      "info" : "VariableDeclarationStatement[11043-11092]:VariableDeclarationStatement[11153-11202]"
    }, {
      "left" : "getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n            /** {@inheritDoc} */\n            @Override\n            public void visit(final int row, final int column, final double value) {\n                data[row][column] = value / singularValues[row];\n            }\n        }, 0, dimension - 1, 0, p - 1);",
      "right" : "getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n            /** {@inheritDoc} */\n            @Override\n            public void visit(final int row, final int column, final double value) {\n                data[row][column] = value / singularValues[row];\n            }\n        }, 0, dimension - 1, 0, p - 1);",
      "info" : "ExpressionStatement[11101-11431]:ExpressionStatement[11211-11541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11311-11391]:Block[11421-11501]"
    }, {
      "left" : "data[row][column] = value / singularValues[row];",
      "right" : "data[row][column] = value / singularValues[row];",
      "info" : "ExpressionStatement[11329-11377]:ExpressionStatement[11439-11487]"
    }, {
      "left" : "RealMatrix jv = new Array2DRowRealMatrix(data, false);",
      "right" : "RealMatrix jv = new Array2DRowRealMatrix(data, false);",
      "info" : "VariableDeclarationStatement[11441-11495]:VariableDeclarationStatement[11551-11605]"
    }, {
      "left" : "return jv.transpose().multiply(jv);",
      "right" : "return jv.transpose().multiply(jv);",
      "info" : "ReturnStatement[11504-11539]:ReturnStatement[11614-11649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11639-11680]:Block[11749-11790]"
    }, {
      "left" : "return singularValues[0];",
      "right" : "return singularValues[0];",
      "info" : "ReturnStatement[11649-11674]:ReturnStatement[11759-11784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11784-11869]:Block[11894-11979]"
    }, {
      "left" : "return singularValues[0] / singularValues[singularValues.length - 1];",
      "right" : "return singularValues[0] / singularValues[singularValues.length - 1];",
      "info" : "ReturnStatement[11794-11863]:ReturnStatement[11904-11973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11958-12227]:Block[12068-12337]"
    }, {
      "left" : "final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);",
      "right" : "final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);",
      "info" : "VariableDeclarationStatement[11969-12039]:VariableDeclarationStatement[12079-12149]"
    }, {
      "left" : "for (int i = singularValues.length - 1; i >= 0; --i)",
      "right" : "for (int i = singularValues.length - 1; i >= 0; --i)",
      "info" : "ForStatement[12049-12202]:ForStatement[12159-12312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12102-12202]:Block[12212-12312]"
    }, {
      "left" : "if (singularValues[i] > threshold)",
      "right" : "if (singularValues[i] > threshold)",
      "info" : "IfStatement[12115-12192]:IfStatement[12225-12302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12150-12192]:Block[12260-12302]"
    }, {
      "left" : "return i + 1;",
      "right" : "return i + 1;",
      "info" : "ReturnStatement[12166-12179]:ReturnStatement[12276-12289]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12211-12220]:ReturnStatement[12321-12330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12297-12419]:Block[12407-12529]"
    }, {
      "left" : "return new Solver(singularValues, getUT(), getV(),\n                          getRank() == Math.max(m, n));",
      "right" : "return new Solver(singularValues, getUT(), getV(),\n                          getRank() == Math.max(m, n));",
      "info" : "ReturnStatement[12307-12413]:ReturnStatement[12417-12523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13128-13605]:Block[13238-13715]"
    }, {
      "left" : "double[][] suT      = uT.getData();",
      "right" : "double[][] suT      = uT.getData();",
      "info" : "VariableDeclarationStatement[13142-13177]:VariableDeclarationStatement[13252-13287]"
    }, {
      "left" : "for (int i = 0; i < singularValues.length; ++i)",
      "right" : "for (int i = 0; i < singularValues.length; ++i)",
      "info" : "ForStatement[13190-13470]:ForStatement[13300-13580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13238-13470]:Block[13348-13580]"
    }, {
      "left" : "final double a      = 1.0 / singularValues[i];",
      "right" : "final double a      = 1.0 / singularValues[i];",
      "info" : "VariableDeclarationStatement[13256-13302]:VariableDeclarationStatement[13366-13412]"
    }, {
      "left" : "final double[] suTi = suT[i];",
      "right" : "final double[] suTi = suT[i];",
      "info" : "VariableDeclarationStatement[13319-13348]:VariableDeclarationStatement[13429-13458]"
    }, {
      "left" : "for (int j = 0; j < suTi.length; ++j)",
      "right" : "for (int j = 0; j < suTi.length; ++j)",
      "info" : "ForStatement[13365-13456]:ForStatement[13475-13566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13403-13456]:Block[13513-13566]"
    }, {
      "left" : "suTi[j] *= a;",
      "right" : "suTi[j] *= a;",
      "info" : "ExpressionStatement[13425-13438]:ExpressionStatement[13535-13548]"
    }, {
      "left" : "pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));",
      "right" : "pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));",
      "info" : "ExpressionStatement[13483-13551]:ExpressionStatement[13593-13661]"
    }, {
      "left" : "this.nonSingular = nonSingular;",
      "right" : "this.nonSingular = nonSingular;",
      "info" : "ExpressionStatement[13564-13595]:ExpressionStatement[13674-13705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14146-14202]:Block[14256-14312]"
    }, {
      "left" : "return pseudoInverse.operate(b);",
      "right" : "return pseudoInverse.operate(b);",
      "info" : "ReturnStatement[14160-14192]:ReturnStatement[14270-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14747-14803]:Block[14857-14913]"
    }, {
      "left" : "return pseudoInverse.operate(b);",
      "right" : "return pseudoInverse.operate(b);",
      "info" : "ReturnStatement[14761-14793]:ReturnStatement[14871-14903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15348-15405]:Block[15458-15515]"
    }, {
      "left" : "return pseudoInverse.multiply(b);",
      "right" : "return pseudoInverse.multiply(b);",
      "info" : "ReturnStatement[15362-15395]:ReturnStatement[15472-15505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15594-15637]:Block[15704-15747]"
    }, {
      "left" : "return nonSingular;",
      "right" : "return nonSingular;",
      "info" : "ReturnStatement[15608-15627]:ReturnStatement[15718-15737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15785-15830]:Block[15895-15940]"
    }, {
      "left" : "return pseudoInverse;",
      "right" : "return pseudoInverse;",
      "info" : "ReturnStatement[15799-15820]:ReturnStatement[15909-15930]"
    } ]
  },
  "interFileMappings" : { }
}