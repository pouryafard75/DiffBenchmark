{
  "matchedElements" : [
 {
    "left" : "class : SimplexOptimizer",
    "right" : "class : SimplexOptimizer",
    "info" : "TypeDeclaration[1538-8603]:TypeDeclaration[1538-8632]"
  }, {
    "left" : "simplex",
    "right" : "simplex",
    "info" : "FieldDeclaration[4211-4275]:FieldDeclaration[4211-4275]"
  }, {
    "left" : "public SimplexOptimizer(checker )",
    "right" : "public SimplexOptimizer(checker )",
    "info" : "MethodDeclaration[4281-4439]:MethodDeclaration[4281-4439]"
  }, {
    "left" : "public SimplexOptimizer(rel double, abs double...)",
    "right" : "public SimplexOptimizer(rel double, abs double...)",
    "info" : "MethodDeclaration[4445-4640]:MethodDeclaration[4445-4640]"
  }, {
    "left" : "public optimize() : ",
    "right" : "public optimize() : ",
    "info" : "MethodDeclaration[4646-5191]:MethodDeclaration[4646-5191]"
  }, {
    "left" : "protected doOptimize() : ",
    "right" : "protected doOptimize() : ",
    "info" : "MethodDeclaration[5197-7093]:MethodDeclaration[5197-7122]"
  }, {
    "left" : "public value(point ) : double",
    "right" : "public value(point ) : double",
    "info" : "MethodDeclaration[5514-5626]:MethodDeclaration[5514-5626]"
  }, {
    "left" : "public compare(o1 , o2 ) : int",
    "right" : "public compare(o1 , o2 ) : int",
    "info" : "MethodDeclaration[5824-6119]:MethodDeclaration[5824-6119]"
  }, {
    "left" : "protected parseOptimizationData() : void",
    "right" : "protected parseOptimizationData() : void",
    "info" : "MethodDeclaration[7099-8000]:MethodDeclaration[7128-8029]"
  }, {
    "left" : "private checkParameters() : void",
    "right" : "private checkParameters() : void",
    "info" : "MethodDeclaration[8006-8601]:MethodDeclaration[8035-8630]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4145-4151]:Modifier[4145-4151]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4152-4157]:TYPE_DECLARATION_KIND[4152-4157]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4340-4346]:Modifier[4340-4346]"
  }, {
    "left" : "SimplexOptimizer",
    "right" : "SimplexOptimizer",
    "info" : "SimpleName[4347-4363]:SimpleName[4347-4363]"
  }, {
    "left" : "ConvergenceChecker<PointValuePair> checker",
    "right" : "ConvergenceChecker<PointValuePair> checker",
    "info" : "SingleVariableDeclaration[4364-4406]:SingleVariableDeclaration[4364-4406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4408-4439]:Block[4408-4439]"
  }, {
    "left" : "super(checker);",
    "right" : "super(checker);",
    "info" : "SuperConstructorInvocation[4418-4433]:SuperConstructorInvocation[4418-4433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4537-4543]:Modifier[4537-4543]"
  }, {
    "left" : "SimplexOptimizer",
    "right" : "SimplexOptimizer",
    "info" : "SimpleName[4544-4560]:SimpleName[4544-4560]"
  }, {
    "left" : "double rel",
    "right" : "double rel",
    "info" : "SingleVariableDeclaration[4561-4571]:SingleVariableDeclaration[4561-4571]"
  }, {
    "left" : "double abs",
    "right" : "double abs",
    "info" : "SingleVariableDeclaration[4573-4583]:SingleVariableDeclaration[4573-4583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4585-4640]:Block[4585-4640]"
  }, {
    "left" : "this(new SimpleValueChecker(rel, abs));",
    "right" : "this(new SimpleValueChecker(rel, abs));",
    "info" : "ConstructorInvocation[4595-4634]:ConstructorInvocation[4595-4634]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5016-5025]:MarkerAnnotation[5016-5025]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5030-5036]:Modifier[5030-5036]"
  }, {
    "left" : "PointValuePair",
    "right" : "PointValuePair",
    "info" : "SimpleType[5037-5051]:SimpleType[5037-5051]"
  }, {
    "left" : "optimize",
    "right" : "optimize",
    "info" : "SimpleName[5052-5060]:SimpleName[5052-5060]"
  }, {
    "left" : "OptimizationData... optData",
    "right" : "OptimizationData... optData",
    "info" : "SingleVariableDeclaration[5061-5088]:SingleVariableDeclaration[5061-5088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5090-5191]:Block[5090-5191]"
  }, {
    "left" : "return super.optimize(optData);",
    "right" : "return super.optimize(optData);",
    "info" : "ReturnStatement[5154-5185]:ReturnStatement[5154-5185]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5222-5231]:MarkerAnnotation[5222-5231]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5236-5245]:Modifier[5236-5245]"
  }, {
    "left" : "PointValuePair",
    "right" : "PointValuePair",
    "info" : "SimpleType[5246-5260]:SimpleType[5246-5260]"
  }, {
    "left" : "doOptimize",
    "right" : "doOptimize",
    "info" : "SimpleName[5261-5271]:SimpleName[5261-5271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5274-7093]:Block[5274-7122]"
  }, {
    "left" : "checkParameters();",
    "right" : "checkParameters();",
    "info" : "ExpressionStatement[5284-5302]:ExpressionStatement[5284-5302]"
  }, {
    "left" : "final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };",
    "right" : "final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };",
    "info" : "VariableDeclarationStatement[5419-5641]:VariableDeclarationStatement[5419-5641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5514-5520]:Modifier[5514-5520]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[5521-5527]:PrimitiveType[5521-5527]"
  }, {
    "left" : "value",
    "right" : "value",
    "info" : "SimpleName[5528-5533]:SimpleName[5528-5533]"
  }, {
    "left" : "double[] point",
    "right" : "double[] point",
    "info" : "SingleVariableDeclaration[5534-5548]:SingleVariableDeclaration[5534-5548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5550-5626]:Block[5550-5626]"
  }, {
    "left" : "return computeObjectiveValue(point);",
    "right" : "return computeObjectiveValue(point);",
    "info" : "ReturnStatement[5572-5608]:ReturnStatement[5572-5608]"
  }, {
    "left" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
    "right" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
    "info" : "VariableDeclarationStatement[5651-5710]:VariableDeclarationStatement[5651-5710]"
  }, {
    "left" : "final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };",
    "right" : "final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };",
    "info" : "VariableDeclarationStatement[5719-6130]:VariableDeclarationStatement[5719-6130]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5824-5830]:Modifier[5824-5830]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[5831-5834]:PrimitiveType[5831-5834]"
  }, {
    "left" : "compare",
    "right" : "compare",
    "info" : "SimpleName[5835-5842]:SimpleName[5835-5842]"
  }, {
    "left" : "final PointValuePair o1",
    "right" : "final PointValuePair o1",
    "info" : "SingleVariableDeclaration[5843-5866]:SingleVariableDeclaration[5843-5866]"
  }, {
    "left" : "final PointValuePair o2",
    "right" : "final PointValuePair o2",
    "info" : "SingleVariableDeclaration[5899-5922]:SingleVariableDeclaration[5899-5922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5924-6119]:Block[5924-6119]"
  }, {
    "left" : "final double v1 = o1.getValue();",
    "right" : "final double v1 = o1.getValue();",
    "info" : "VariableDeclarationStatement[5942-5974]:VariableDeclarationStatement[5942-5974]"
  }, {
    "left" : "final double v2 = o2.getValue();",
    "right" : "final double v2 = o2.getValue();",
    "info" : "VariableDeclarationStatement[5991-6023]:VariableDeclarationStatement[5991-6023]"
  }, {
    "left" : "return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);",
    "right" : "return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);",
    "info" : "ReturnStatement[6040-6105]:ReturnStatement[6040-6105]"
  }, {
    "left" : "simplex.build(getStartPoint());",
    "right" : "simplex.build(getStartPoint());",
    "info" : "ExpressionStatement[6170-6201]:ExpressionStatement[6170-6201]"
  }, {
    "left" : "simplex.evaluate(evalFunc, comparator);",
    "right" : "simplex.evaluate(evalFunc, comparator);",
    "info" : "ExpressionStatement[6210-6249]:ExpressionStatement[6210-6249]"
  }, {
    "left" : "PointValuePair[] previous = null;",
    "right" : "PointValuePair[] previous = null;",
    "info" : "VariableDeclarationStatement[6259-6292]:VariableDeclarationStatement[6259-6292]"
  }, {
    "left" : "int iteration = 0;",
    "right" : "int iteration = 0;",
    "info" : "VariableDeclarationStatement[6301-6319]:VariableDeclarationStatement[6301-6319]"
  }, {
    "left" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
    "right" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
    "info" : "VariableDeclarationStatement[6328-6403]:VariableDeclarationStatement[6328-6403]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[6412-7087]:WhileStatement[6412-7116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6425-7087]:Block[6425-7116]"
  }, {
    "left" : "if (iteration > 0)",
    "right" : "if (getIterations() > 0)",
    "info" : "IfStatement[6439-6924]:IfStatement[6439-6930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6458-6924]:Block[6464-6930]"
  }, {
    "left" : "boolean converged = true;",
    "right" : "boolean converged = true;",
    "info" : "VariableDeclarationStatement[6476-6501]:VariableDeclarationStatement[6482-6507]"
  }, {
    "left" : "for (int i = 0; i < simplex.getSize(); i++)",
    "right" : "for (int i = 0; i < simplex.getSize(); i++)",
    "info" : "ForStatement[6518-6762]:ForStatement[6524-6768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6562-6762]:Block[6568-6768]"
  }, {
    "left" : "PointValuePair prev = previous[i];",
    "right" : "PointValuePair prev = previous[i];",
    "info" : "VariableDeclarationStatement[6584-6618]:VariableDeclarationStatement[6590-6624]"
  }, {
    "left" : "converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));",
    "right" : "converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));",
    "info" : "ExpressionStatement[6639-6744]:ExpressionStatement[6645-6750]"
  }, {
    "left" : "if (converged)",
    "right" : "if (converged)",
    "info" : "IfStatement[6779-6910]:IfStatement[6785-6916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6794-6910]:Block[6800-6916]"
  }, {
    "left" : "return simplex.getPoint(0);",
    "right" : "return simplex.getPoint(0);",
    "info" : "ReturnStatement[6865-6892]:ReturnStatement[6871-6898]"
  }, {
    "left" : "previous = simplex.getPoints();",
    "right" : "previous = simplex.getPoints();",
    "info" : "ExpressionStatement[6978-7009]:ExpressionStatement[6984-7015]"
  }, {
    "left" : "simplex.iterate(evalFunc, comparator);",
    "right" : "simplex.iterate(evalFunc, comparator);",
    "info" : "ExpressionStatement[7022-7060]:ExpressionStatement[7028-7066]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7380-7389]:MarkerAnnotation[7409-7418]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7394-7403]:Modifier[7423-7432]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7404-7408]:PrimitiveType[7433-7437]"
  }, {
    "left" : "parseOptimizationData",
    "right" : "parseOptimizationData",
    "info" : "SimpleName[7409-7430]:SimpleName[7438-7459]"
  }, {
    "left" : "OptimizationData... optData",
    "right" : "OptimizationData... optData",
    "info" : "SingleVariableDeclaration[7431-7458]:SingleVariableDeclaration[7460-7487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7460-8000]:Block[7489-8029]"
  }, {
    "left" : "super.parseOptimizationData(optData);",
    "right" : "super.parseOptimizationData(optData);",
    "info" : "ExpressionStatement[7524-7561]:ExpressionStatement[7553-7590]"
  }, {
    "left" : "for (OptimizationData data : optData)",
    "right" : "for (OptimizationData data : optData)",
    "info" : "EnhancedForStatement[7692-7994]:EnhancedForStatement[7721-8023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7730-7994]:Block[7759-8023]"
  }, {
    "left" : "if (data instanceof AbstractSimplex)",
    "right" : "if (data instanceof AbstractSimplex)",
    "info" : "IfStatement[7744-7984]:IfStatement[7773-8013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7781-7984]:Block[7810-8013]"
  }, {
    "left" : "simplex = (AbstractSimplex) data;",
    "right" : "simplex = (AbstractSimplex) data;",
    "info" : "ExpressionStatement[7799-7832]:ExpressionStatement[7828-7861]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7964-7970]:BreakStatement[7993-7999]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8301-8308]:Modifier[8330-8337]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8309-8313]:PrimitiveType[8338-8342]"
  }, {
    "left" : "checkParameters",
    "right" : "checkParameters",
    "info" : "SimpleName[8314-8329]:SimpleName[8343-8358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8332-8601]:Block[8361-8630]"
  }, {
    "left" : "if (simplex == null)",
    "right" : "if (simplex == null)",
    "info" : "IfStatement[8342-8421]:IfStatement[8371-8450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8363-8421]:Block[8392-8450]"
  }, {
    "left" : "throw new NullArgumentException();",
    "right" : "throw new NullArgumentException();",
    "info" : "ThrowStatement[8377-8411]:ThrowStatement[8406-8440]"
  }, {
    "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
    "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
    "info" : "IfStatement[8430-8595]:IfStatement[8459-8624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8498-8595]:Block[8527-8624]"
  }, {
    "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
    "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
    "info" : "ThrowStatement[8512-8585]:ThrowStatement[8541-8614]"
  } ]
}