{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "right" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "info" : "FieldDeclaration[394-464]:FieldDeclaration[394-464]"
    }, {
      "left" : "private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};",
      "right" : "private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};",
      "info" : "FieldDeclaration[469-564]:FieldDeclaration[469-564]"
    }, {
      "left" : "private TokenQueue tq;",
      "right" : "private TokenQueue tq;",
      "info" : "FieldDeclaration[570-592]:FieldDeclaration[570-592]"
    }, {
      "left" : "private String query;",
      "right" : "private String query;",
      "info" : "FieldDeclaration[597-618]:FieldDeclaration[597-618]"
    }, {
      "left" : "private List<Evaluator> evals = new ArrayList<>();",
      "right" : "private List<Evaluator> evals = new ArrayList<>();",
      "info" : "FieldDeclaration[623-673]:FieldDeclaration[623-673]"
    }, {
      "left" : "private QueryParser(String query)",
      "right" : "private QueryParser(String query)",
      "info" : "MethodDeclaration[679-868]:MethodDeclaration[679-868]"
    }, {
      "left" : "public static Evaluator parse(String query)",
      "right" : "public static Evaluator parse(String query)",
      "info" : "MethodDeclaration[874-1264]:MethodDeclaration[874-1264]"
    }, {
      "left" : "Evaluator parse()",
      "right" : "Evaluator parse()",
      "info" : "MethodDeclaration[1270-2180]:MethodDeclaration[1270-2180]"
    }, {
      "left" : "private void combinator(char combinator)",
      "right" : "private void combinator(char combinator)",
      "info" : "MethodDeclaration[2186-4574]:MethodDeclaration[2186-4574]"
    }, {
      "left" : "private String consumeSubQuery()",
      "right" : "private String consumeSubQuery()",
      "info" : "MethodDeclaration[4580-5099]:MethodDeclaration[4580-5099]"
    }, {
      "left" : "private void byId()",
      "right" : "private void byId()",
      "info" : "MethodDeclaration[7396-7542]:MethodDeclaration[7492-7638]"
    }, {
      "left" : "private void byClass()",
      "right" : "private void byClass()",
      "info" : "MethodDeclaration[7548-7728]:MethodDeclaration[7644-7824]"
    }, {
      "left" : "private void byTag()",
      "right" : "private void byTag()",
      "info" : "MethodDeclaration[7734-8400]:MethodDeclaration[7830-8496]"
    }, {
      "left" : "private void byAttribute()",
      "right" : "private void byAttribute()",
      "info" : "MethodDeclaration[8406-9897]:MethodDeclaration[8502-9993]"
    }, {
      "left" : "private void allElements()",
      "right" : "private void allElements()",
      "info" : "MethodDeclaration[9903-9985]:MethodDeclaration[9999-10081]"
    }, {
      "left" : "private void indexLessThan()",
      "right" : "private void indexLessThan()",
      "info" : "MethodDeclaration[10029-10129]:MethodDeclaration[10125-10225]"
    }, {
      "left" : "private void indexGreaterThan()",
      "right" : "private void indexGreaterThan()",
      "info" : "MethodDeclaration[10135-10241]:MethodDeclaration[10231-10337]"
    }, {
      "left" : "private void indexEquals()",
      "right" : "private void indexEquals()",
      "info" : "MethodDeclaration[10247-10343]:MethodDeclaration[10343-10439]"
    }, {
      "left" : "private static final Pattern NTH_AB = Pattern.compile(\"(([+-])?(\\\\d+)?)n(\\\\s*([+-])?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);",
      "right" : "private static final Pattern NTH_AB = Pattern.compile(\"(([+-])?(\\\\d+)?)n(\\\\s*([+-])?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);",
      "info" : "FieldDeclaration[10419-10542]:FieldDeclaration[10515-10638]"
    }, {
      "left" : "private static final Pattern NTH_B  = Pattern.compile(\"([+-])?(\\\\d+)\");",
      "right" : "private static final Pattern NTH_B  = Pattern.compile(\"([+-])?(\\\\d+)\");",
      "info" : "FieldDeclaration[10547-10618]:FieldDeclaration[10643-10714]"
    }, {
      "left" : "private void cssNthChild(boolean backwards, boolean ofType)",
      "right" : "private void cssNthChild(boolean backwards, boolean ofType)",
      "info" : "MethodDeclaration[10621-11635]:MethodDeclaration[10717-11731]"
    }, {
      "left" : "private int consumeIndex()",
      "right" : "private int consumeIndex()",
      "info" : "MethodDeclaration[11641-11844]:MethodDeclaration[11737-11940]"
    }, {
      "left" : "private void has()",
      "right" : "private void has()",
      "info" : "MethodDeclaration[11882-12132]:MethodDeclaration[11978-12228]"
    }, {
      "left" : "private void contains(boolean own)",
      "right" : "private void contains(boolean own)",
      "info" : "MethodDeclaration[12196-12612]:MethodDeclaration[12292-12708]"
    }, {
      "left" : "private void containsData()",
      "right" : "private void containsData()",
      "info" : "MethodDeclaration[12661-12955]:MethodDeclaration[12757-13051]"
    }, {
      "left" : "private void matches(boolean own)",
      "right" : "private void matches(boolean own)",
      "info" : "MethodDeclaration[13003-13449]:MethodDeclaration[13099-13545]"
    }, {
      "left" : "private void not()",
      "right" : "private void not()",
      "info" : "MethodDeclaration[13477-13734]:MethodDeclaration[13573-13830]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[758-765]:Modifier[758-765]"
    }, {
      "left" : "QueryParser",
      "right" : "QueryParser",
      "info" : "SimpleName[766-777]:SimpleName[766-777]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[778-790]:SingleVariableDeclaration[778-790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[792-868]:Block[792-868]"
    }, {
      "left" : "this.query = query;",
      "right" : "this.query = query;",
      "info" : "ExpressionStatement[802-821]:ExpressionStatement[802-821]"
    }, {
      "left" : "this.tq = new TokenQueue(query);",
      "right" : "this.tq = new TokenQueue(query);",
      "info" : "ExpressionStatement[830-862]:ExpressionStatement[830-862]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[989-995]:Modifier[989-995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[996-1002]:Modifier[996-1002]"
    }, {
      "left" : "Evaluator",
      "right" : "Evaluator",
      "info" : "SimpleType[1003-1012]:SimpleType[1003-1012]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1013-1018]:SimpleName[1013-1018]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[1019-1031]:SingleVariableDeclaration[1019-1031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1033-1264]:Block[1033-1264]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1043-1258]:TryStatement[1043-1258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1047-1140]:Block[1047-1140]"
    }, {
      "left" : "QueryParser p = new QueryParser(query);",
      "right" : "QueryParser p = new QueryParser(query);",
      "info" : "VariableDeclarationStatement[1061-1100]:VariableDeclarationStatement[1061-1100]"
    }, {
      "left" : "return p.parse();",
      "right" : "return p.parse();",
      "info" : "ReturnStatement[1113-1130]:ReturnStatement[1113-1130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1176-1258]:Block[1176-1258]"
    }, {
      "left" : "throw new Selector.SelectorParseException(e.getMessage());",
      "right" : "throw new Selector.SelectorParseException(e.getMessage());",
      "info" : "ThrowStatement[1190-1248]:ThrowStatement[1190-1248]"
    }, {
      "left" : "Evaluator",
      "right" : "Evaluator",
      "info" : "SimpleType[1334-1343]:SimpleType[1334-1343]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1344-1349]:SimpleName[1344-1349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1352-2180]:Block[1352-2180]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[1362-1385]:ExpressionStatement[1362-1385]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[1395-1629]:IfStatement[1395-1629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1427-1584]:Block[1427-1584]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Root());",
      "right" : "evals.add(new StructuralEvaluator.Root());",
      "info" : "ExpressionStatement[1494-1536]:ExpressionStatement[1494-1536]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[1549-1574]:ExpressionStatement[1549-1574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1590-1629]:Block[1590-1629]"
    }, {
      "left" : "findElements();",
      "right" : "findElements();",
      "info" : "ExpressionStatement[1604-1619]:ExpressionStatement[1604-1619]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[1639-2058]:WhileStatement[1639-2058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1661-2058]:Block[1661-2058]"
    }, {
      "left" : "boolean seenWhite = tq.consumeWhitespace();",
      "right" : "boolean seenWhite = tq.consumeWhitespace();",
      "info" : "VariableDeclarationStatement[1711-1754]:VariableDeclarationStatement[1711-1754]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[1768-2048]:IfStatement[1768-2048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1800-1857]:Block[1800-1857]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[1818-1843]:ExpressionStatement[1818-1843]"
    }, {
      "left" : "if (seenWhite)",
      "right" : "if (seenWhite)",
      "info" : "IfStatement[1863-2048]:IfStatement[1863-2048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1878-1926]:Block[1878-1926]"
    }, {
      "left" : "combinator(' ');",
      "right" : "combinator(' ');",
      "info" : "ExpressionStatement[1896-1912]:ExpressionStatement[1896-1912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1932-2048]:Block[1932-2048]"
    }, {
      "left" : "findElements();",
      "right" : "findElements();",
      "info" : "ExpressionStatement[1985-2000]:ExpressionStatement[1985-2000]"
    }, {
      "left" : "if (evals.size() == 1)",
      "right" : "if (evals.size() == 1)",
      "info" : "IfStatement[2068-2123]:IfStatement[2068-2123]"
    }, {
      "left" : "return evals.get(0);",
      "right" : "return evals.get(0);",
      "info" : "ReturnStatement[2103-2123]:ReturnStatement[2103-2123]"
    }, {
      "left" : "return new CombiningEvaluator.And(evals);",
      "right" : "return new CombiningEvaluator.And(evals);",
      "info" : "ReturnStatement[2133-2174]:ReturnStatement[2133-2174]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2186-2193]:Modifier[2186-2193]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2194-2198]:PrimitiveType[2194-2198]"
    }, {
      "left" : "combinator",
      "right" : "combinator",
      "info" : "SimpleName[2199-2209]:SimpleName[2199-2209]"
    }, {
      "left" : "char combinator",
      "right" : "char combinator",
      "info" : "SingleVariableDeclaration[2210-2225]:SingleVariableDeclaration[2210-2225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2227-4574]:Block[2227-4574]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[2237-2260]:ExpressionStatement[2237-2260]"
    }, {
      "left" : "String subQuery = consumeSubQuery();",
      "right" : "String subQuery = consumeSubQuery();",
      "info" : "VariableDeclarationStatement[2269-2305]:VariableDeclarationStatement[2269-2305]"
    }, {
      "left" : "Evaluator rootEval;",
      "right" : "Evaluator rootEval;",
      "info" : "VariableDeclarationStatement[2341-2360]:VariableDeclarationStatement[2341-2360]"
    }, {
      "left" : "Evaluator currentEval;",
      "right" : "Evaluator currentEval;",
      "info" : "VariableDeclarationStatement[2398-2420]:VariableDeclarationStatement[2398-2420]"
    }, {
      "left" : "Evaluator newEval = parse(subQuery);",
      "right" : "Evaluator newEval = parse(subQuery);",
      "info" : "VariableDeclarationStatement[2512-2548]:VariableDeclarationStatement[2512-2548]"
    }, {
      "left" : "boolean replaceRightMost = false;",
      "right" : "boolean replaceRightMost = false;",
      "info" : "VariableDeclarationStatement[2603-2636]:VariableDeclarationStatement[2603-2636]"
    }, {
      "left" : "if (evals.size() == 1)",
      "right" : "if (evals.size() == 1)",
      "info" : "IfStatement[2646-3103]:IfStatement[2646-3103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2669-3006]:Block[2669-3006]"
    }, {
      "left" : "rootEval = currentEval = evals.get(0);",
      "right" : "rootEval = currentEval = evals.get(0);",
      "info" : "ExpressionStatement[2683-2721]:ExpressionStatement[2683-2721]"
    }, {
      "left" : "if (rootEval instanceof CombiningEvaluator.Or && combinator != ',')",
      "right" : "if (rootEval instanceof CombiningEvaluator.Or && combinator != ',')",
      "info" : "IfStatement[2782-2996]:IfStatement[2782-2996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2850-2996]:Block[2850-2996]"
    }, {
      "left" : "currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();",
      "right" : "currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();",
      "info" : "ExpressionStatement[2868-2941]:ExpressionStatement[2868-2941]"
    }, {
      "left" : "replaceRightMost = true;",
      "right" : "replaceRightMost = true;",
      "info" : "ExpressionStatement[2958-2982]:ExpressionStatement[2958-2982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3020-3103]:Block[3020-3103]"
    }, {
      "left" : "rootEval = currentEval = new CombiningEvaluator.And(evals);",
      "right" : "rootEval = currentEval = new CombiningEvaluator.And(evals);",
      "info" : "ExpressionStatement[3034-3093]:ExpressionStatement[3034-3093]"
    }, {
      "left" : "evals.clear();",
      "right" : "evals.clear();",
      "info" : "ExpressionStatement[3112-3126]:ExpressionStatement[3112-3126]"
    }, {
      "left" : "if (combinator == '>')",
      "right" : "if (combinator == '>')",
      "info" : "IfStatement[3242-4384]:IfStatement[3242-4384]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));",
      "info" : "ExpressionStatement[3277-3381]:ExpressionStatement[3277-3381]"
    }, {
      "left" : "if (combinator == ' ')",
      "right" : "if (combinator == ' ')",
      "info" : "IfStatement[3395-4384]:IfStatement[3395-4384]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));",
      "info" : "ExpressionStatement[3430-3525]:ExpressionStatement[3430-3525]"
    }, {
      "left" : "if (combinator == '+')",
      "right" : "if (combinator == '+')",
      "info" : "IfStatement[3539-4384]:IfStatement[3539-4384]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));",
      "info" : "ExpressionStatement[3574-3687]:ExpressionStatement[3574-3687]"
    }, {
      "left" : "if (combinator == '~')",
      "right" : "if (combinator == '~')",
      "info" : "IfStatement[3701-4384]:IfStatement[3701-4384]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));",
      "info" : "ExpressionStatement[3736-3840]:ExpressionStatement[3736-3840]"
    }, {
      "left" : "if (combinator == ',')",
      "right" : "if (combinator == ',')",
      "info" : "IfStatement[3854-4384]:IfStatement[3854-4384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3877-4279]:Block[3877-4279]"
    }, {
      "left" : "CombiningEvaluator.Or or;",
      "right" : "CombiningEvaluator.Or or;",
      "info" : "VariableDeclarationStatement[3904-3929]:VariableDeclarationStatement[3904-3929]"
    }, {
      "left" : "if (currentEval instanceof CombiningEvaluator.Or)",
      "right" : "if (currentEval instanceof CombiningEvaluator.Or)",
      "info" : "IfStatement[3942-4239]:IfStatement[3942-4239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3992-4098]:Block[3992-4098]"
    }, {
      "left" : "or = (CombiningEvaluator.Or) currentEval;",
      "right" : "or = (CombiningEvaluator.Or) currentEval;",
      "info" : "ExpressionStatement[4010-4051]:ExpressionStatement[4010-4051]"
    }, {
      "left" : "or.add(newEval);",
      "right" : "or.add(newEval);",
      "info" : "ExpressionStatement[4068-4084]:ExpressionStatement[4068-4084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4104-4239]:Block[4104-4239]"
    }, {
      "left" : "or = new CombiningEvaluator.Or();",
      "right" : "or = new CombiningEvaluator.Or();",
      "info" : "ExpressionStatement[4122-4155]:ExpressionStatement[4122-4155]"
    }, {
      "left" : "or.add(currentEval);",
      "right" : "or.add(currentEval);",
      "info" : "ExpressionStatement[4172-4192]:ExpressionStatement[4172-4192]"
    }, {
      "left" : "or.add(newEval);",
      "right" : "or.add(newEval);",
      "info" : "ExpressionStatement[4209-4225]:ExpressionStatement[4209-4225]"
    }, {
      "left" : "currentEval = or;",
      "right" : "currentEval = or;",
      "info" : "ExpressionStatement[4252-4269]:ExpressionStatement[4252-4269]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);",
      "right" : "throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);",
      "info" : "ThrowStatement[4305-4384]:ThrowStatement[4305-4384]"
    }, {
      "left" : "if (replaceRightMost)",
      "right" : "if (replaceRightMost)",
      "info" : "IfStatement[4394-4539]:IfStatement[4394-4539]"
    }, {
      "left" : "((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);",
      "right" : "((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);",
      "info" : "ExpressionStatement[4428-4502]:ExpressionStatement[4428-4502]"
    }, {
      "left" : "rootEval = currentEval;",
      "right" : "rootEval = currentEval;",
      "info" : "ExpressionStatement[4516-4539]:ExpressionStatement[4516-4539]"
    }, {
      "left" : "evals.add(rootEval);",
      "right" : "evals.add(rootEval);",
      "info" : "ExpressionStatement[4548-4568]:ExpressionStatement[4548-4568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4580-4587]:Modifier[4580-4587]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4588-4594]:SimpleType[4588-4594]"
    }, {
      "left" : "consumeSubQuery",
      "right" : "consumeSubQuery",
      "info" : "SimpleName[4595-4610]:SimpleName[4595-4610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4613-5099]:Block[4613-5099]"
    }, {
      "left" : "StringBuilder sq = new StringBuilder();",
      "right" : "StringBuilder sq = new StringBuilder();",
      "info" : "VariableDeclarationStatement[4623-4662]:VariableDeclarationStatement[4623-4662]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[4671-5063]:WhileStatement[4671-5063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4693-5063]:Block[4693-5063]"
    }, {
      "left" : "if (tq.matches(\"(\"))",
      "right" : "if (tq.matches(\"(\"))",
      "info" : "IfStatement[4707-5053]:IfStatement[4707-5053]"
    }, {
      "left" : "sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");",
      "right" : "sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");",
      "info" : "ExpressionStatement[4744-4806]:ExpressionStatement[4744-4806]"
    }, {
      "left" : "if (tq.matches(\"[\"))",
      "right" : "if (tq.matches(\"[\"))",
      "info" : "IfStatement[4824-5053]:IfStatement[4824-5053]"
    }, {
      "left" : "sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");",
      "right" : "sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");",
      "info" : "ExpressionStatement[4861-4923]:ExpressionStatement[4861-4923]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[4941-5053]:IfStatement[4941-5053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4989-4995]:BreakStatement[4989-4995]"
    }, {
      "left" : "sq.append(tq.consume());",
      "right" : "sq.append(tq.consume());",
      "info" : "ExpressionStatement[5029-5053]:ExpressionStatement[5029-5053]"
    }, {
      "left" : "return sq.toString();",
      "right" : "return sq.toString();",
      "info" : "ReturnStatement[5072-5093]:ReturnStatement[5072-5093]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7396-7403]:Modifier[7492-7499]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7404-7408]:PrimitiveType[7500-7504]"
    }, {
      "left" : "byId",
      "right" : "byId",
      "info" : "SimpleName[7409-7413]:SimpleName[7505-7509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7416-7542]:Block[7512-7638]"
    }, {
      "left" : "String id = tq.consumeCssIdentifier();",
      "right" : "String id = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[7426-7464]:VariableDeclarationStatement[7522-7560]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[7473-7495]:ExpressionStatement[7569-7591]"
    }, {
      "left" : "evals.add(new Evaluator.Id(id));",
      "right" : "evals.add(new Evaluator.Id(id));",
      "info" : "ExpressionStatement[7504-7536]:ExpressionStatement[7600-7632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7548-7555]:Modifier[7644-7651]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7556-7560]:PrimitiveType[7652-7656]"
    }, {
      "left" : "byClass",
      "right" : "byClass",
      "info" : "SimpleName[7561-7568]:SimpleName[7657-7664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7571-7728]:Block[7667-7824]"
    }, {
      "left" : "String className = tq.consumeCssIdentifier();",
      "right" : "String className = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[7581-7626]:VariableDeclarationStatement[7677-7722]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[7635-7664]:ExpressionStatement[7731-7760]"
    }, {
      "left" : "evals.add(new Evaluator.Class(className.trim()));",
      "right" : "evals.add(new Evaluator.Class(className.trim()));",
      "info" : "ExpressionStatement[7673-7722]:ExpressionStatement[7769-7818]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7734-7741]:Modifier[7830-7837]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7742-7746]:PrimitiveType[7838-7842]"
    }, {
      "left" : "byTag",
      "right" : "byTag",
      "info" : "SimpleName[7747-7752]:SimpleName[7843-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7755-8400]:Block[7851-8496]"
    }, {
      "left" : "String tagName = tq.consumeElementSelector();",
      "right" : "String tagName = tq.consumeElementSelector();",
      "info" : "VariableDeclarationStatement[7765-7810]:VariableDeclarationStatement[7861-7906]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[7820-7847]:ExpressionStatement[7916-7943]"
    }, {
      "left" : "if (tagName.startsWith(\"*|\"))",
      "right" : "if (tagName.startsWith(\"*|\"))",
      "info" : "IfStatement[7936-8394]:IfStatement[8032-8490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7966-8132]:Block[8062-8228]"
    }, {
      "left" : "evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(normalize(tagName)), new Evaluator.TagEndsWith(normalize(tagName.replace(\"*|\", \":\")))));",
      "right" : "evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(normalize(tagName)), new Evaluator.TagEndsWith(normalize(tagName.replace(\"*|\", \":\")))));",
      "info" : "ExpressionStatement[7980-8122]:ExpressionStatement[8076-8218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8138-8394]:Block[8234-8490]"
    }, {
      "left" : "if (tagName.contains(\"|\"))",
      "right" : "if (tagName.contains(\"|\"))",
      "info" : "IfStatement[8246-8325]:IfStatement[8342-8421]"
    }, {
      "left" : "tagName = tagName.replace(\"|\", \":\");",
      "right" : "tagName = tagName.replace(\"|\", \":\");",
      "info" : "ExpressionStatement[8289-8325]:ExpressionStatement[8385-8421]"
    }, {
      "left" : "evals.add(new Evaluator.Tag(tagName.trim()));",
      "right" : "evals.add(new Evaluator.Tag(tagName.trim()));",
      "info" : "ExpressionStatement[8339-8384]:ExpressionStatement[8435-8480]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8406-8413]:Modifier[8502-8509]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8414-8418]:PrimitiveType[8510-8514]"
    }, {
      "left" : "byAttribute",
      "right" : "byAttribute",
      "info" : "SimpleName[8419-8430]:SimpleName[8515-8526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8433-9897]:Block[8529-9993]"
    }, {
      "left" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "right" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "info" : "VariableDeclarationStatement[8443-8502]:VariableDeclarationStatement[8539-8598]"
    }, {
      "left" : "String key = cq.consumeToAny(AttributeEvals);",
      "right" : "String key = cq.consumeToAny(AttributeEvals);",
      "info" : "VariableDeclarationStatement[8528-8573]:VariableDeclarationStatement[8624-8669]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[8631-8654]:ExpressionStatement[8727-8750]"
    }, {
      "left" : "cq.consumeWhitespace();",
      "right" : "cq.consumeWhitespace();",
      "info" : "ExpressionStatement[8663-8686]:ExpressionStatement[8759-8782]"
    }, {
      "left" : "if (cq.isEmpty())",
      "right" : "if (cq.isEmpty())",
      "info" : "IfStatement[8696-9891]:IfStatement[8792-9987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8714-8914]:Block[8810-9010]"
    }, {
      "left" : "if (key.startsWith(\"^\"))",
      "right" : "if (key.startsWith(\"^\"))",
      "info" : "IfStatement[8728-8904]:IfStatement[8824-9000]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeStarting(key.substring(1)));",
      "right" : "evals.add(new Evaluator.AttributeStarting(key.substring(1)));",
      "info" : "ExpressionStatement[8769-8830]:ExpressionStatement[8865-8926]"
    }, {
      "left" : "evals.add(new Evaluator.Attribute(key));",
      "right" : "evals.add(new Evaluator.Attribute(key));",
      "info" : "ExpressionStatement[8864-8904]:ExpressionStatement[8960-9000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8920-9891]:Block[9016-9987]"
    }, {
      "left" : "if (cq.matchChomp(\"=\"))",
      "right" : "if (cq.matchChomp(\"=\"))",
      "info" : "IfStatement[8934-9881]:IfStatement[9030-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));",
      "info" : "ExpressionStatement[8974-9039]:ExpressionStatement[9070-9135]"
    }, {
      "left" : "if (cq.matchChomp(\"!=\"))",
      "right" : "if (cq.matchChomp(\"!=\"))",
      "info" : "IfStatement[9058-9881]:IfStatement[9154-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));",
      "info" : "ExpressionStatement[9099-9167]:ExpressionStatement[9195-9263]"
    }, {
      "left" : "if (cq.matchChomp(\"^=\"))",
      "right" : "if (cq.matchChomp(\"^=\"))",
      "info" : "IfStatement[9186-9881]:IfStatement[9282-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));",
      "info" : "ExpressionStatement[9227-9300]:ExpressionStatement[9323-9396]"
    }, {
      "left" : "if (cq.matchChomp(\"$=\"))",
      "right" : "if (cq.matchChomp(\"$=\"))",
      "info" : "IfStatement[9319-9881]:IfStatement[9415-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));",
      "info" : "ExpressionStatement[9360-9431]:ExpressionStatement[9456-9527]"
    }, {
      "left" : "if (cq.matchChomp(\"*=\"))",
      "right" : "if (cq.matchChomp(\"*=\"))",
      "info" : "IfStatement[9450-9881]:IfStatement[9546-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));",
      "info" : "ExpressionStatement[9491-9566]:ExpressionStatement[9587-9662]"
    }, {
      "left" : "if (cq.matchChomp(\"~=\"))",
      "right" : "if (cq.matchChomp(\"~=\"))",
      "info" : "IfStatement[9585-9881]:IfStatement[9681-9977]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));",
      "right" : "evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));",
      "info" : "ExpressionStatement[9626-9716]:ExpressionStatement[9722-9812]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "right" : "throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "info" : "ThrowStatement[9750-9881]:ThrowStatement[9846-9977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9903-9910]:Modifier[9999-10006]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9911-9915]:PrimitiveType[10007-10011]"
    }, {
      "left" : "allElements",
      "right" : "allElements",
      "info" : "SimpleName[9916-9927]:SimpleName[10012-10023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9930-9985]:Block[10026-10081]"
    }, {
      "left" : "evals.add(new Evaluator.AllElements());",
      "right" : "evals.add(new Evaluator.AllElements());",
      "info" : "ExpressionStatement[9940-9979]:ExpressionStatement[10036-10075]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10029-10036]:Modifier[10125-10132]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10037-10041]:PrimitiveType[10133-10137]"
    }, {
      "left" : "indexLessThan",
      "right" : "indexLessThan",
      "info" : "SimpleName[10042-10055]:SimpleName[10138-10151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10058-10129]:Block[10154-10225]"
    }, {
      "left" : "evals.add(new Evaluator.IndexLessThan(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexLessThan(consumeIndex()));",
      "info" : "ExpressionStatement[10068-10123]:ExpressionStatement[10164-10219]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10135-10142]:Modifier[10231-10238]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10143-10147]:PrimitiveType[10239-10243]"
    }, {
      "left" : "indexGreaterThan",
      "right" : "indexGreaterThan",
      "info" : "SimpleName[10148-10164]:SimpleName[10244-10260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10167-10241]:Block[10263-10337]"
    }, {
      "left" : "evals.add(new Evaluator.IndexGreaterThan(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexGreaterThan(consumeIndex()));",
      "info" : "ExpressionStatement[10177-10235]:ExpressionStatement[10273-10331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10247-10254]:Modifier[10343-10350]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10255-10259]:PrimitiveType[10351-10355]"
    }, {
      "left" : "indexEquals",
      "right" : "indexEquals",
      "info" : "SimpleName[10260-10271]:SimpleName[10356-10367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10274-10343]:Block[10370-10439]"
    }, {
      "left" : "evals.add(new Evaluator.IndexEquals(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexEquals(consumeIndex()));",
      "info" : "ExpressionStatement[10284-10337]:ExpressionStatement[10380-10433]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10621-10628]:Modifier[10717-10724]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10629-10633]:PrimitiveType[10725-10729]"
    }, {
      "left" : "cssNthChild",
      "right" : "cssNthChild",
      "info" : "SimpleName[10634-10645]:SimpleName[10730-10741]"
    }, {
      "left" : "boolean backwards",
      "right" : "boolean backwards",
      "info" : "SingleVariableDeclaration[10646-10663]:SingleVariableDeclaration[10742-10759]"
    }, {
      "left" : "boolean ofType",
      "right" : "boolean ofType",
      "info" : "SingleVariableDeclaration[10665-10679]:SingleVariableDeclaration[10761-10775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10681-11635]:Block[10777-11731]"
    }, {
      "left" : "String argS = normalize(tq.chompTo(\")\"));",
      "right" : "String argS = normalize(tq.chompTo(\")\"));",
      "info" : "VariableDeclarationStatement[10685-10726]:VariableDeclarationStatement[10781-10822]"
    }, {
      "left" : "Matcher mAB = NTH_AB.matcher(argS);",
      "right" : "Matcher mAB = NTH_AB.matcher(argS);",
      "info" : "VariableDeclarationStatement[10729-10764]:VariableDeclarationStatement[10825-10860]"
    }, {
      "left" : "Matcher mB = NTH_B.matcher(argS);",
      "right" : "Matcher mB = NTH_B.matcher(argS);",
      "info" : "VariableDeclarationStatement[10767-10800]:VariableDeclarationStatement[10863-10896]"
    }, {
      "left" : "final int a, b;",
      "right" : "final int a, b;",
      "info" : "VariableDeclarationStatement[10803-10818]:VariableDeclarationStatement[10899-10914]"
    }, {
      "left" : "if (\"odd\".equals(argS))",
      "right" : "if (\"odd\".equals(argS))",
      "info" : "IfStatement[10821-11355]:IfStatement[10917-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10845-10870]:Block[10941-10966]"
    }, {
      "left" : "a = 2;",
      "right" : "a = 2;",
      "info" : "ExpressionStatement[10850-10856]:ExpressionStatement[10946-10952]"
    }, {
      "left" : "b = 1;",
      "right" : "b = 1;",
      "info" : "ExpressionStatement[10860-10866]:ExpressionStatement[10956-10962]"
    }, {
      "left" : "if (\"even\".equals(argS))",
      "right" : "if (\"even\".equals(argS))",
      "info" : "IfStatement[10876-11355]:IfStatement[10972-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10901-10926]:Block[10997-11022]"
    }, {
      "left" : "a = 2;",
      "right" : "a = 2;",
      "info" : "ExpressionStatement[10906-10912]:ExpressionStatement[11002-11008]"
    }, {
      "left" : "b = 0;",
      "right" : "b = 0;",
      "info" : "ExpressionStatement[10916-10922]:ExpressionStatement[11012-11018]"
    }, {
      "left" : "if (mAB.matches())",
      "right" : "if (mAB.matches())",
      "info" : "IfStatement[10932-11355]:IfStatement[11028-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10951-11138]:Block[11047-11234]"
    }, {
      "left" : "a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1;",
      "right" : "a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1;",
      "info" : "ExpressionStatement[10956-11043]:ExpressionStatement[11052-11139]"
    }, {
      "left" : "b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0;",
      "right" : "b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0;",
      "info" : "ExpressionStatement[11047-11134]:ExpressionStatement[11143-11230]"
    }, {
      "left" : "if (mB.matches())",
      "right" : "if (mB.matches())",
      "info" : "IfStatement[11144-11355]:IfStatement[11240-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11162-11239]:Block[11258-11335]"
    }, {
      "left" : "a = 0;",
      "right" : "a = 0;",
      "info" : "ExpressionStatement[11167-11173]:ExpressionStatement[11263-11269]"
    }, {
      "left" : "b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\"));",
      "right" : "b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\"));",
      "info" : "ExpressionStatement[11177-11235]:ExpressionStatement[11273-11331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11245-11355]:Block[11341-11451]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS);",
      "right" : "throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS);",
      "info" : "ThrowStatement[11250-11351]:ThrowStatement[11346-11447]"
    }, {
      "left" : "if (ofType)",
      "right" : "if (ofType)",
      "info" : "IfStatement[11358-11632]:IfStatement[11454-11728]"
    }, {
      "left" : "if (backwards)",
      "right" : "if (backwards)",
      "info" : "IfStatement[11373-11495]:IfStatement[11469-11591]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthLastOfType(a, b));",
      "right" : "evals.add(new Evaluator.IsNthLastOfType(a, b));",
      "info" : "ExpressionStatement[11392-11439]:ExpressionStatement[11488-11535]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthOfType(a, b));",
      "right" : "evals.add(new Evaluator.IsNthOfType(a, b));",
      "info" : "ExpressionStatement[11452-11495]:ExpressionStatement[11548-11591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11503-11632]:Block[11599-11728]"
    }, {
      "left" : "if (backwards)",
      "right" : "if (backwards)",
      "info" : "IfStatement[11508-11628]:IfStatement[11604-11724]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthLastChild(a, b));",
      "right" : "evals.add(new Evaluator.IsNthLastChild(a, b));",
      "info" : "ExpressionStatement[11527-11573]:ExpressionStatement[11623-11669]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthChild(a, b));",
      "right" : "evals.add(new Evaluator.IsNthChild(a, b));",
      "info" : "ExpressionStatement[11586-11628]:ExpressionStatement[11682-11724]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11641-11648]:Modifier[11737-11744]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11649-11652]:PrimitiveType[11745-11748]"
    }, {
      "left" : "consumeIndex",
      "right" : "consumeIndex",
      "info" : "SimpleName[11653-11665]:SimpleName[11749-11761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11668-11844]:Block[11764-11940]"
    }, {
      "left" : "String indexS = tq.chompTo(\")\").trim();",
      "right" : "String indexS = tq.chompTo(\")\").trim();",
      "info" : "VariableDeclarationStatement[11678-11717]:VariableDeclarationStatement[11774-11813]"
    }, {
      "left" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "right" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "info" : "ExpressionStatement[11726-11797]:ExpressionStatement[11822-11893]"
    }, {
      "left" : "return Integer.parseInt(indexS);",
      "right" : "return Integer.parseInt(indexS);",
      "info" : "ReturnStatement[11806-11838]:ReturnStatement[11902-11934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11882-11889]:Modifier[11978-11985]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11890-11894]:PrimitiveType[11986-11990]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[11895-11898]:SimpleName[11991-11994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11901-12132]:Block[11997-12228]"
    }, {
      "left" : "tq.consume(\":has\");",
      "right" : "tq.consume(\":has\");",
      "info" : "ExpressionStatement[11911-11930]:ExpressionStatement[12007-12026]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(', ')');",
      "right" : "String subQuery = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[11939-11984]:VariableDeclarationStatement[12035-12080]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "info" : "ExpressionStatement[11993-12061]:ExpressionStatement[12089-12157]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Has(parse(subQuery)));",
      "right" : "evals.add(new StructuralEvaluator.Has(parse(subQuery)));",
      "info" : "ExpressionStatement[12070-12126]:ExpressionStatement[12166-12222]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12196-12203]:Modifier[12292-12299]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12204-12208]:PrimitiveType[12300-12304]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[12209-12217]:SimpleName[12305-12313]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[12218-12229]:SingleVariableDeclaration[12314-12325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12231-12612]:Block[12327-12708]"
    }, {
      "left" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "right" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "info" : "ExpressionStatement[12241-12288]:ExpressionStatement[12337-12384]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "info" : "VariableDeclarationStatement[12297-12365]:VariableDeclarationStatement[12393-12461]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "info" : "ExpressionStatement[12374-12447]:ExpressionStatement[12470-12543]"
    }, {
      "left" : "if (own)",
      "right" : "if (own)",
      "info" : "IfStatement[12456-12606]:IfStatement[12552-12702]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsOwnText(searchText));",
      "right" : "evals.add(new Evaluator.ContainsOwnText(searchText));",
      "info" : "ExpressionStatement[12477-12530]:ExpressionStatement[12573-12626]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsText(searchText));",
      "right" : "evals.add(new Evaluator.ContainsText(searchText));",
      "info" : "ExpressionStatement[12556-12606]:ExpressionStatement[12652-12702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12661-12668]:Modifier[12757-12764]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12669-12673]:PrimitiveType[12765-12769]"
    }, {
      "left" : "containsData",
      "right" : "containsData",
      "info" : "SimpleName[12674-12686]:SimpleName[12770-12782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12689-12955]:Block[12785-13051]"
    }, {
      "left" : "tq.consume(\":containsData\");",
      "right" : "tq.consume(\":containsData\");",
      "info" : "ExpressionStatement[12699-12727]:ExpressionStatement[12795-12823]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "info" : "VariableDeclarationStatement[12736-12804]:VariableDeclarationStatement[12832-12900]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":containsData(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":containsData(text) query must not be empty\");",
      "info" : "ExpressionStatement[12813-12890]:ExpressionStatement[12909-12986]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsData(searchText));",
      "right" : "evals.add(new Evaluator.ContainsData(searchText));",
      "info" : "ExpressionStatement[12899-12949]:ExpressionStatement[12995-13045]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13003-13010]:Modifier[13099-13106]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13011-13015]:PrimitiveType[13107-13111]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[13016-13023]:SimpleName[13112-13119]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[13024-13035]:SingleVariableDeclaration[13120-13131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13037-13449]:Block[13133-13545]"
    }, {
      "left" : "tq.consume(own ? \":matchesOwn\" : \":matches\");",
      "right" : "tq.consume(own ? \":matchesOwn\" : \":matches\");",
      "info" : "ExpressionStatement[13047-13092]:ExpressionStatement[13143-13188]"
    }, {
      "left" : "String regex = tq.chompBalanced('(', ')');",
      "right" : "String regex = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[13101-13143]:VariableDeclarationStatement[13197-13239]"
    }, {
      "left" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "right" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "info" : "ExpressionStatement[13201-13269]:ExpressionStatement[13297-13365]"
    }, {
      "left" : "if (own)",
      "right" : "if (own)",
      "info" : "IfStatement[13279-13443]:IfStatement[13375-13539]"
    }, {
      "left" : "evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex)));",
      "right" : "evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex)));",
      "info" : "ExpressionStatement[13300-13360]:ExpressionStatement[13396-13456]"
    }, {
      "left" : "evals.add(new Evaluator.Matches(Pattern.compile(regex)));",
      "right" : "evals.add(new Evaluator.Matches(Pattern.compile(regex)));",
      "info" : "ExpressionStatement[13386-13443]:ExpressionStatement[13482-13539]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13477-13484]:Modifier[13573-13580]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13485-13489]:PrimitiveType[13581-13585]"
    }, {
      "left" : "not",
      "right" : "not",
      "info" : "SimpleName[13490-13493]:SimpleName[13586-13589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13496-13734]:Block[13592-13830]"
    }, {
      "left" : "tq.consume(\":not\");",
      "right" : "tq.consume(\":not\");",
      "info" : "ExpressionStatement[13506-13525]:ExpressionStatement[13602-13621]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(', ')');",
      "right" : "String subQuery = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[13534-13579]:VariableDeclarationStatement[13630-13675]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "info" : "ExpressionStatement[13588-13662]:ExpressionStatement[13684-13758]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Not(parse(subQuery)));",
      "right" : "evals.add(new StructuralEvaluator.Not(parse(subQuery)));",
      "info" : "ExpressionStatement[13672-13728]:ExpressionStatement[13768-13824]"
    } ]
  },
  "interFileMappings" : { }
}