{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private ArchiveUtils(",
      "right" : "private ArchiveUtils(",
      "info" : "MethodDeclaration[1051-1159]:MethodDeclaration[1113-1221]"
    }, {
      "left" : "public static String toString(final ArchiveEntry entry",
      "right" : "public static String toString(final ArchiveEntry entry",
      "info" : "MethodDeclaration[1165-1974]:MethodDeclaration[1227-2036]"
    }, {
      "left" : "public static boolean matchAsciiBuffer(\n            final String expected, final byte[] buffer, final int offset, final int length",
      "right" : "public static boolean matchAsciiBuffer(\n            final String expected, final byte[] buffer, final int offset, final int length",
      "info" : "MethodDeclaration[1980-2739]:MethodDeclaration[2042-2801]"
    }, {
      "left" : "public static boolean matchAsciiBuffer(final String expected, final byte[] buffer",
      "right" : "public static boolean matchAsciiBuffer(final String expected, final byte[] buffer",
      "info" : "MethodDeclaration[2745-3128]:MethodDeclaration[2807-3190]"
    }, {
      "left" : "public static byte[] toAsciiBytes(final String inputString",
      "right" : "public static byte[] toAsciiBytes(final String inputString",
      "info" : "MethodDeclaration[3134-3637]:MethodDeclaration[3196-3699]"
    }, {
      "left" : "public static String toAsciiString(final byte[] inputBytes",
      "right" : "public static String toAsciiString(final byte[] inputBytes",
      "info" : "MethodDeclaration[3643-4123]:MethodDeclaration[3705-4185]"
    }, {
      "left" : "public static String toAsciiString(final byte[] inputBytes, final int offset, final int length",
      "right" : "public static String toAsciiString(final byte[] inputBytes, final int offset, final int length",
      "info" : "MethodDeclaration[4129-4739]:MethodDeclaration[4191-4801]"
    }, {
      "left" : "public static boolean isEqual(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2,\n            final boolean ignoreTrailingNulls",
      "right" : "public static boolean isEqual(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2,\n            final boolean ignoreTrailingNulls",
      "info" : "MethodDeclaration[4745-6259]:MethodDeclaration[4807-6321]"
    }, {
      "left" : "public static boolean isEqual(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2",
      "right" : "public static boolean isEqual(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2",
      "info" : "MethodDeclaration[6265-6890]:MethodDeclaration[6327-6952]"
    }, {
      "left" : "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2",
      "right" : "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2",
      "info" : "MethodDeclaration[6896-7265]:MethodDeclaration[6958-7327]"
    }, {
      "left" : "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls",
      "right" : "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls",
      "info" : "MethodDeclaration[7271-7792]:MethodDeclaration[7333-7854]"
    }, {
      "left" : "public static boolean isEqualWithNull(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2",
      "right" : "public static boolean isEqualWithNull(\n            final byte[] buffer1, final int offset1, final int length1,\n            final byte[] buffer2, final int offset2, final int length2",
      "info" : "MethodDeclaration[7798-8488]:MethodDeclaration[7860-8550]"
    }, {
      "left" : "public static boolean isArrayZero(final byte[] a, final int size)",
      "right" : "public static boolean isArrayZero(final byte[] a, final int size)",
      "info" : "MethodDeclaration[8498-9008]:MethodDeclaration[8560-9070]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1152-1159]:Block[1214-1221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1519-1974]:Block[1581-2036]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[1529-1574]:VariableDeclarationStatement[1591-1636]"
    }, {
      "left" : "sb.append(entry.isDirectory()? 'd' : '-');",
      "right" : "sb.append(entry.isDirectory()? 'd' : '-');",
      "info" : "ExpressionStatement[1583-1625]:ExpressionStatement[1645-1687]"
    }, {
      "left" : "final String size = Long.toString(entry.getSize());",
      "right" : "final String size = Long.toString(entry.getSize());",
      "info" : "VariableDeclarationStatement[1656-1707]:VariableDeclarationStatement[1718-1769]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[1716-1731]:ExpressionStatement[1778-1793]"
    }, {
      "left" : "for(int i=7; i > size.length(); i--)",
      "right" : "for(int i=7; i > size.length(); i--)",
      "info" : "ForStatement[1790-1865]:ForStatement[1852-1927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1826-1865]:Block[1888-1927]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[1840-1855]:ExpressionStatement[1902-1917]"
    }, {
      "left" : "sb.append(size);",
      "right" : "sb.append(size);",
      "info" : "ExpressionStatement[1874-1890]:ExpressionStatement[1936-1952]"
    }, {
      "left" : "sb.append(' ').append(entry.getName());",
      "right" : "sb.append(' ').append(entry.getName());",
      "info" : "ExpressionStatement[1899-1938]:ExpressionStatement[1961-2000]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[1947-1968]:ReturnStatement[2009-2030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2416-2739]:Block[2478-2801]"
    }, {
      "left" : "byte[] buffer1;",
      "right" : "byte[] buffer1;",
      "info" : "VariableDeclarationStatement[2426-2441]:VariableDeclarationStatement[2488-2503]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2450-2650]:TryStatement[2512-2712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2454-2529]:Block[2516-2591]"
    }, {
      "left" : "buffer1 = expected.getBytes(CharsetNames.US_ASCII);",
      "right" : "buffer1 = expected.getBytes(CharsetNames.US_ASCII);",
      "info" : "ExpressionStatement[2468-2519]:ExpressionStatement[2530-2581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2575-2650]:Block[2637-2712]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[2589-2619]:ThrowStatement[2651-2681]"
    }, {
      "left" : "return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);",
      "right" : "return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);",
      "info" : "ReturnStatement[2659-2733]:ReturnStatement[2721-2795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3052-3128]:Block[3114-3190]"
    }, {
      "left" : "return matchAsciiBuffer(expected, buffer, 0, buffer.length);",
      "right" : "return matchAsciiBuffer(expected, buffer, 0, buffer.length);",
      "info" : "ReturnStatement[3062-3122]:ReturnStatement[3124-3184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3420-3637]:Block[3482-3699]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3430-3631]:TryStatement[3492-3693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3434-3509]:Block[3496-3571]"
    }, {
      "left" : "return inputString.getBytes(CharsetNames.US_ASCII);",
      "right" : "return inputString.getBytes(CharsetNames.US_ASCII);",
      "info" : "ReturnStatement[3448-3499]:ReturnStatement[3510-3561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3555-3631]:Block[3617-3693]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[3568-3598]:ThrowStatement[3630-3660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3903-4123]:Block[3965-4185]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3913-4117]:TryStatement[3975-4179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3917-3994]:Block[3979-4056]"
    }, {
      "left" : "return new String(inputBytes, CharsetNames.US_ASCII);",
      "right" : "return new String(inputBytes, CharsetNames.US_ASCII);",
      "info" : "ReturnStatement[3931-3984]:ReturnStatement[3993-4046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4040-4117]:Block[4102-4179]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[4054-4084]:ThrowStatement[4116-4146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4503-4739]:Block[4565-4801]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4513-4733]:TryStatement[4575-4795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4517-4610]:Block[4579-4672]"
    }, {
      "left" : "return new String(inputBytes, offset, length, CharsetNames.US_ASCII);",
      "right" : "return new String(inputBytes, offset, length, CharsetNames.US_ASCII);",
      "info" : "ReturnStatement[4531-4600]:ReturnStatement[4593-4662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4656-4733]:Block[4718-4795]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[4670-4700]:ThrowStatement[4732-4762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5437-6259]:Block[5499-6321]"
    }, {
      "left" : "final int minLen=length1 < length2 ? length1 : length2;",
      "right" : "final int minLen=length1 < length2 ? length1 : length2;",
      "info" : "VariableDeclarationStatement[5447-5502]:VariableDeclarationStatement[5509-5564]"
    }, {
      "left" : "for (int i=0; i < minLen; i++)",
      "right" : "for (int i=0; i < minLen; i++)",
      "info" : "ForStatement[5511-5655]:ForStatement[5573-5717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5541-5655]:Block[5603-5717]"
    }, {
      "left" : "if (buffer1[offset1+i] != buffer2[offset2+i])",
      "right" : "if (buffer1[offset1+i] != buffer2[offset2+i])",
      "info" : "IfStatement[5555-5645]:IfStatement[5617-5707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5600-5645]:Block[5662-5707]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5618-5631]:ReturnStatement[5680-5693]"
    }, {
      "left" : "if (length1 == length2)",
      "right" : "if (length1 == length2)",
      "info" : "IfStatement[5664-5723]:IfStatement[5726-5785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5687-5723]:Block[5749-5785]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5701-5713]:ReturnStatement[5763-5775]"
    }, {
      "left" : "if (ignoreTrailingNulls)",
      "right" : "if (ignoreTrailingNulls)",
      "info" : "IfStatement[5732-6231]:IfStatement[5794-6293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5756-6231]:Block[5818-6293]"
    }, {
      "left" : "if (length1 > length2)",
      "right" : "if (length1 > length2)",
      "info" : "IfStatement[5770-6196]:IfStatement[5832-6258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5792-5991]:Block[5854-6053]"
    }, {
      "left" : "for(int i = length2; i < length1; i++)",
      "right" : "for(int i = length2; i < length1; i++)",
      "info" : "ForStatement[5810-5977]:ForStatement[5872-6039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5848-5977]:Block[5910-6039]"
    }, {
      "left" : "if (buffer1[offset1+i] != 0)",
      "right" : "if (buffer1[offset1+i] != 0)",
      "info" : "IfStatement[5870-5959]:IfStatement[5932-6021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5898-5959]:Block[5960-6021]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5924-5937]:ReturnStatement[5986-5999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5997-6196]:Block[6059-6258]"
    }, {
      "left" : "for(int i = length1; i < length2; i++)",
      "right" : "for(int i = length1; i < length2; i++)",
      "info" : "ForStatement[6015-6182]:ForStatement[6077-6244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6053-6182]:Block[6115-6244]"
    }, {
      "left" : "if (buffer2[offset2+i] != 0)",
      "right" : "if (buffer2[offset2+i] != 0)",
      "info" : "IfStatement[6075-6164]:IfStatement[6137-6226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6103-6164]:Block[6165-6226]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6129-6142]:ReturnStatement[6191-6204]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6209-6221]:ReturnStatement[6271-6283]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6240-6253]:ReturnStatement[6302-6315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6798-6890]:Block[6860-6952]"
    }, {
      "left" : "return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false);",
      "right" : "return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false);",
      "info" : "ReturnStatement[6808-6884]:ReturnStatement[6870-6946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7171-7265]:Block[7233-7327]"
    }, {
      "left" : "return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);",
      "right" : "return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);",
      "info" : "ReturnStatement[7181-7259]:ReturnStatement[7243-7321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7684-7792]:Block[7746-7854]"
    }, {
      "left" : "return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);",
      "right" : "return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);",
      "info" : "ReturnStatement[7694-7786]:ReturnStatement[7756-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8397-8488]:Block[8459-8550]"
    }, {
      "left" : "return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);",
      "right" : "return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);",
      "info" : "ReturnStatement[8407-8482]:ReturnStatement[8469-8544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8856-9008]:Block[8918-9070]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[8866-8981]:ForStatement[8928-9043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8897-8981]:Block[8959-9043]"
    }, {
      "left" : "if (a[i] != 0)",
      "right" : "if (a[i] != 0)",
      "info" : "IfStatement[8911-8971]:IfStatement[8973-9033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8926-8971]:Block[8988-9033]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8944-8957]:ReturnStatement[9006-9019]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8990-9002]:ReturnStatement[9052-9064]"
    } ]
  },
  "interFileMappings" : { }
}