{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ArrowType",
      "right" : "ArrowType",
      "info" : "TypeDeclaration[1797-8870]:TypeDeclaration[1797-9472]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2131-2179]:FieldDeclaration[2131-2179]"
    }, {
      "left" : "final Node parameters;",
      "right" : "final Node parameters;",
      "info" : "FieldDeclaration[2183-2205]:FieldDeclaration[2183-2205]"
    }, {
      "left" : "JSType returnType;",
      "right" : "JSType returnType;",
      "info" : "FieldDeclaration[2208-2226]:FieldDeclaration[2208-2226]"
    }, {
      "left" : "final boolean returnTypeInferred;",
      "right" : "final boolean returnTypeInferred;",
      "info" : "FieldDeclaration[2272-2305]:FieldDeclaration[2272-2305]"
    }, {
      "left" : "ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType)",
      "right" : "ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType)",
      "info" : "MethodDeclaration[2309-2442]:MethodDeclaration[2309-2442]"
    }, {
      "left" : "ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred)",
      "right" : "ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred)",
      "info" : "MethodDeclaration[2446-2860]:MethodDeclaration[2446-2860]"
    }, {
      "left" : "public boolean isSubtype(JSType other)",
      "right" : "public boolean isSubtype(JSType other)",
      "info" : "MethodDeclaration[2864-5536]:MethodDeclaration[2864-6138]"
    }, {
      "left" : "boolean hasEqualParameters(ArrowType that)",
      "right" : "boolean hasEqualParameters(ArrowType that)",
      "info" : "MethodDeclaration[5540-6544]:MethodDeclaration[6142-7146]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType object)",
      "right" : "public boolean isEquivalentTo(JSType object)",
      "info" : "MethodDeclaration[6548-6910]:MethodDeclaration[7150-7512]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[6914-7417]:MethodDeclaration[7516-8019]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[7421-7530]:MethodDeclaration[8023-8132]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[7534-7644]:MethodDeclaration[8136-8246]"
    }, {
      "left" : "public TernaryValue testForEquality(JSType that)",
      "right" : "public TernaryValue testForEquality(JSType that)",
      "info" : "MethodDeclaration[7648-7761]:MethodDeclaration[8250-8363]"
    }, {
      "left" : "public <T> T visit(Visitor<T> visitor)",
      "right" : "public <T> T visit(Visitor<T> visitor)",
      "info" : "MethodDeclaration[7765-7868]:MethodDeclaration[8367-8470]"
    }, {
      "left" : "public BooleanLiteralSet getPossibleToBooleanOutcomes()",
      "right" : "public BooleanLiteralSet getPossibleToBooleanOutcomes()",
      "info" : "MethodDeclaration[7872-7980]:MethodDeclaration[8474-8582]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[7984-8372]:MethodDeclaration[8586-8974]"
    }, {
      "left" : "boolean hasUnknownParamsOrReturn()",
      "right" : "boolean hasUnknownParamsOrReturn()",
      "info" : "MethodDeclaration[8376-8772]:MethodDeclaration[8978-9374]"
    }, {
      "left" : "String toStringHelper(boolean forAnnotations)",
      "right" : "String toStringHelper(boolean forAnnotations)",
      "info" : "MethodDeclaration[8776-8868]:MethodDeclaration[9378-9470]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2096-2101]:TYPE_DECLARATION_KIND[2096-2101]"
    }, {
      "left" : "ArrowType",
      "right" : "ArrowType",
      "info" : "SimpleName[2102-2111]:SimpleName[2102-2111]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[2120-2126]:SimpleType[2120-2126]"
    }, {
      "left" : "ArrowType",
      "right" : "ArrowType",
      "info" : "SimpleName[2309-2318]:SimpleName[2309-2318]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[2319-2342]:SingleVariableDeclaration[2319-2342]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[2344-2359]:SingleVariableDeclaration[2344-2359]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[2367-2384]:SingleVariableDeclaration[2367-2384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2386-2442]:Block[2386-2442]"
    }, {
      "left" : "this(registry, parameters, returnType, false);",
      "right" : "this(registry, parameters, returnType, false);",
      "info" : "ConstructorInvocation[2392-2438]:ConstructorInvocation[2392-2438]"
    }, {
      "left" : "ArrowType",
      "right" : "ArrowType",
      "info" : "SimpleName[2446-2455]:SimpleName[2446-2455]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[2456-2479]:SingleVariableDeclaration[2456-2479]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[2481-2496]:SingleVariableDeclaration[2481-2496]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[2504-2521]:SingleVariableDeclaration[2504-2521]"
    }, {
      "left" : "boolean returnTypeInferred",
      "right" : "boolean returnTypeInferred",
      "info" : "SingleVariableDeclaration[2523-2549]:SingleVariableDeclaration[2523-2549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2551-2860]:Block[2551-2860]"
    }, {
      "left" : "super(registry);",
      "right" : "super(registry);",
      "info" : "SuperConstructorInvocation[2557-2573]:SuperConstructorInvocation[2557-2573]"
    }, {
      "left" : "this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;",
      "right" : "this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;",
      "info" : "ExpressionStatement[2579-2713]:ExpressionStatement[2579-2713]"
    }, {
      "left" : "this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;",
      "right" : "this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;",
      "info" : "ExpressionStatement[2718-2806]:ExpressionStatement[2718-2806]"
    }, {
      "left" : "this.returnTypeInferred = returnTypeInferred;",
      "right" : "this.returnTypeInferred = returnTypeInferred;",
      "info" : "ExpressionStatement[2811-2856]:ExpressionStatement[2811-2856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2876-2882]:Modifier[2876-2882]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2883-2890]:PrimitiveType[2883-2890]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[2891-2900]:SimpleName[2891-2900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2915-5536]:Block[2915-6138]"
    }, {
      "left" : "if (!(other instanceof ArrowType))",
      "right" : "if (!(other instanceof ArrowType))",
      "info" : "IfStatement[2921-2983]:IfStatement[2921-2983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2956-2983]:Block[2956-2983]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2964-2977]:ReturnStatement[2964-2977]"
    }, {
      "left" : "ArrowType that = (ArrowType) other;",
      "right" : "ArrowType that = (ArrowType) other;",
      "info" : "VariableDeclarationStatement[2989-3024]:VariableDeclarationStatement[2989-3024]"
    }, {
      "left" : "if (!this.returnType.isSubtype(that.returnType))",
      "right" : "if (!this.returnType.isSubtype(that.returnType))",
      "info" : "IfStatement[3186-3262]:IfStatement[3186-3262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3235-3262]:Block[3235-3262]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3243-3256]:ReturnStatement[3243-3256]"
    }, {
      "left" : "Node thisParam = parameters.getFirstChild();",
      "right" : "Node thisParam = parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[4100-4144]:VariableDeclarationStatement[4100-4144]"
    }, {
      "left" : "Node thatParam = that.parameters.getFirstChild();",
      "right" : "Node thatParam = that.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[4149-4198]:VariableDeclarationStatement[4149-4198]"
    }, {
      "left" : "while (thisParam != null && thatParam != null)",
      "right" : "while (thisParam != null && thatParam != null)",
      "info" : "WhileStatement[4203-5434]:WhileStatement[4203-5888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4250-5434]:Block[4250-5888]"
    }, {
      "left" : "JSType thisParamType = thisParam.getJSType();",
      "right" : "JSType thisParamType = thisParam.getJSType();",
      "info" : "VariableDeclarationStatement[4258-4303]:VariableDeclarationStatement[4258-4303]"
    }, {
      "left" : "JSType thatParamType = thatParam.getJSType();",
      "right" : "JSType thatParamType = thatParam.getJSType();",
      "info" : "VariableDeclarationStatement[4310-4355]:VariableDeclarationStatement[4310-4355]"
    }, {
      "left" : "if (thisParamType != null)",
      "right" : "if (thisParamType != null)",
      "info" : "IfStatement[4362-4524]:IfStatement[4362-4524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4389-4524]:Block[4389-4524]"
    }, {
      "left" : "if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType))",
      "right" : "if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType))",
      "info" : "IfStatement[4399-4516]:IfStatement[4399-4516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4481-4516]:Block[4481-4516]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4493-4506]:ReturnStatement[4493-4506]"
    }, {
      "left" : "boolean thisIsVarArgs = thisParam.isVarArgs();",
      "right" : "boolean thisIsVarArgs = thisParam.isVarArgs();",
      "info" : "VariableDeclarationStatement[4532-4578]:VariableDeclarationStatement[4532-4578]"
    }, {
      "left" : "boolean thatIsVarArgs = thatParam.isVarArgs();",
      "right" : "boolean thatIsVarArgs = thatParam.isVarArgs();",
      "info" : "VariableDeclarationStatement[4585-4631]:VariableDeclarationStatement[4585-4631]"
    }, {
      "left" : "if (!thisIsVarArgs)",
      "right" : "if (!thisIsVarArgs)",
      "info" : "IfStatement[5135-5205]:IfStatement[5589-5659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5155-5205]:Block[5609-5659]"
    }, {
      "left" : "thisParam = thisParam.getNext();",
      "right" : "thisParam = thisParam.getNext();",
      "info" : "ExpressionStatement[5165-5197]:ExpressionStatement[5619-5651]"
    }, {
      "left" : "if (!thatIsVarArgs)",
      "right" : "if (!thatIsVarArgs)",
      "info" : "IfStatement[5212-5282]:IfStatement[5666-5736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5232-5282]:Block[5686-5736]"
    }, {
      "left" : "thatParam = thatParam.getNext();",
      "right" : "thatParam = thatParam.getNext();",
      "info" : "ExpressionStatement[5242-5274]:ExpressionStatement[5696-5728]"
    }, {
      "left" : "if (thisIsVarArgs && thatIsVarArgs)",
      "right" : "if (thisIsVarArgs && thatIsVarArgs)",
      "info" : "IfStatement[5331-5428]:IfStatement[5785-5882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5367-5428]:Block[5821-5882]"
    }, {
      "left" : "thisParam = null;",
      "right" : "thisParam = null;",
      "info" : "ExpressionStatement[5377-5394]:ExpressionStatement[5831-5848]"
    }, {
      "left" : "thatParam = null;",
      "right" : "thatParam = null;",
      "info" : "ExpressionStatement[5403-5420]:ExpressionStatement[5857-5874]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5520-5532]:ReturnStatement[6122-6134]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5644-5651]:PrimitiveType[6246-6253]"
    }, {
      "left" : "hasEqualParameters",
      "right" : "hasEqualParameters",
      "info" : "SimpleName[5652-5670]:SimpleName[6254-6272]"
    }, {
      "left" : "ArrowType that",
      "right" : "ArrowType that",
      "info" : "SingleVariableDeclaration[5671-5685]:SingleVariableDeclaration[6273-6287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5687-6544]:Block[6289-7146]"
    }, {
      "left" : "Node thisParam = parameters.getFirstChild();",
      "right" : "Node thisParam = parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[5693-5737]:VariableDeclarationStatement[6295-6339]"
    }, {
      "left" : "Node otherParam = that.parameters.getFirstChild();",
      "right" : "Node otherParam = that.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[5742-5792]:VariableDeclarationStatement[6344-6394]"
    }, {
      "left" : "while (thisParam != null && otherParam != null)",
      "right" : "while (thisParam != null && otherParam != null)",
      "info" : "WhileStatement[5797-6380]:WhileStatement[6399-6982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-6380]:Block[6447-6982]"
    }, {
      "left" : "JSType thisParamType = thisParam.getJSType();",
      "right" : "JSType thisParamType = thisParam.getJSType();",
      "info" : "VariableDeclarationStatement[5853-5898]:VariableDeclarationStatement[6455-6500]"
    }, {
      "left" : "JSType otherParamType = otherParam.getJSType();",
      "right" : "JSType otherParamType = otherParam.getJSType();",
      "info" : "VariableDeclarationStatement[5905-5952]:VariableDeclarationStatement[6507-6554]"
    }, {
      "left" : "if (thisParamType != null)",
      "right" : "if (thisParamType != null)",
      "info" : "IfStatement[5959-6294]:IfStatement[6561-6896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5986-6207]:Block[6588-6809]"
    }, {
      "left" : "if (otherParamType != null &&\n            !thisParamType.isEquivalentTo(otherParamType))",
      "right" : "if (otherParamType != null &&\n            !thisParamType.isEquivalentTo(otherParamType))",
      "info" : "IfStatement[6075-6199]:IfStatement[6677-6801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6164-6199]:Block[6766-6801]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6176-6189]:ReturnStatement[6778-6791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6213-6294]:Block[6815-6896]"
    }, {
      "left" : "if (otherParamType != null)",
      "right" : "if (otherParamType != null)",
      "info" : "IfStatement[6223-6286]:IfStatement[6825-6888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6251-6286]:Block[6853-6888]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6263-6276]:ReturnStatement[6865-6878]"
    }, {
      "left" : "thisParam = thisParam.getNext();",
      "right" : "thisParam = thisParam.getNext();",
      "info" : "ExpressionStatement[6301-6333]:ExpressionStatement[6903-6935]"
    }, {
      "left" : "otherParam = otherParam.getNext();",
      "right" : "otherParam = otherParam.getNext();",
      "info" : "ExpressionStatement[6340-6374]:ExpressionStatement[6942-6976]"
    }, {
      "left" : "return thisParam == otherParam;",
      "right" : "return thisParam == otherParam;",
      "info" : "ReturnStatement[6509-6540]:ReturnStatement[7111-7142]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6548-6557]:MarkerAnnotation[7150-7159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6560-6566]:Modifier[7162-7168]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6567-6574]:PrimitiveType[7169-7176]"
    }, {
      "left" : "isEquivalentTo",
      "right" : "isEquivalentTo",
      "info" : "SimpleName[6575-6589]:SimpleName[7177-7191]"
    }, {
      "left" : "JSType object",
      "right" : "JSType object",
      "info" : "SingleVariableDeclaration[6590-6603]:SingleVariableDeclaration[7192-7205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6605-6910]:Block[7207-7512]"
    }, {
      "left" : "if (!(object instanceof ArrowType))",
      "right" : "if (!(object instanceof ArrowType))",
      "info" : "IfStatement[6684-6747]:IfStatement[7286-7349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6720-6747]:Block[7322-7349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6728-6741]:ReturnStatement[7330-7343]"
    }, {
      "left" : "ArrowType that = (ArrowType) object;",
      "right" : "ArrowType that = (ArrowType) object;",
      "info" : "VariableDeclarationStatement[6752-6788]:VariableDeclarationStatement[7354-7390]"
    }, {
      "left" : "if (!returnType.isEquivalentTo(that.returnType))",
      "right" : "if (!returnType.isEquivalentTo(that.returnType))",
      "info" : "IfStatement[6793-6869]:IfStatement[7395-7471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6842-6869]:Block[7444-7471]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6850-6863]:ReturnStatement[7452-7465]"
    }, {
      "left" : "return hasEqualParameters(that);",
      "right" : "return hasEqualParameters(that);",
      "info" : "ReturnStatement[6874-6906]:ReturnStatement[7476-7508]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6914-6923]:MarkerAnnotation[7516-7525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6926-6932]:Modifier[7528-7534]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6933-6936]:PrimitiveType[7535-7538]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[6937-6945]:SimpleName[7539-7547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6948-7417]:Block[7550-8019]"
    }, {
      "left" : "int hashCode = 0;",
      "right" : "int hashCode = 0;",
      "info" : "VariableDeclarationStatement[6954-6971]:VariableDeclarationStatement[7556-7573]"
    }, {
      "left" : "if (returnType != null)",
      "right" : "if (returnType != null)",
      "info" : "IfStatement[6976-7048]:IfStatement[7578-7650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7000-7048]:Block[7602-7650]"
    }, {
      "left" : "hashCode += returnType.hashCode();",
      "right" : "hashCode += returnType.hashCode();",
      "info" : "ExpressionStatement[7008-7042]:ExpressionStatement[7610-7644]"
    }, {
      "left" : "if (returnTypeInferred)",
      "right" : "if (returnTypeInferred)",
      "info" : "IfStatement[7053-7105]:IfStatement[7655-7707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7105]:Block[7679-7707]"
    }, {
      "left" : "hashCode += 1;",
      "right" : "hashCode += 1;",
      "info" : "ExpressionStatement[7085-7099]:ExpressionStatement[7687-7701]"
    }, {
      "left" : "if (parameters != null)",
      "right" : "if (parameters != null)",
      "info" : "IfStatement[7110-7392]:IfStatement[7712-7994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7134-7392]:Block[7736-7994]"
    }, {
      "left" : "Node param = parameters.getFirstChild();",
      "right" : "Node param = parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[7142-7182]:VariableDeclarationStatement[7744-7784]"
    }, {
      "left" : "while (param != null)",
      "right" : "while (param != null)",
      "info" : "WhileStatement[7189-7386]:WhileStatement[7791-7988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7211-7386]:Block[7813-7988]"
    }, {
      "left" : "JSType paramType = param.getJSType();",
      "right" : "JSType paramType = param.getJSType();",
      "info" : "VariableDeclarationStatement[7221-7258]:VariableDeclarationStatement[7823-7860]"
    }, {
      "left" : "if (paramType != null)",
      "right" : "if (paramType != null)",
      "info" : "IfStatement[7267-7345]:IfStatement[7869-7947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7290-7345]:Block[7892-7947]"
    }, {
      "left" : "hashCode += paramType.hashCode();",
      "right" : "hashCode += paramType.hashCode();",
      "info" : "ExpressionStatement[7302-7335]:ExpressionStatement[7904-7937]"
    }, {
      "left" : "param = param.getNext();",
      "right" : "param = param.getNext();",
      "info" : "ExpressionStatement[7354-7378]:ExpressionStatement[7956-7980]"
    }, {
      "left" : "return hashCode;",
      "right" : "return hashCode;",
      "info" : "ReturnStatement[7397-7413]:ReturnStatement[7999-8015]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7421-7430]:MarkerAnnotation[8023-8032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7433-7439]:Modifier[8035-8041]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[7440-7446]:SimpleType[8042-8048]"
    }, {
      "left" : "getLeastSupertype",
      "right" : "getLeastSupertype",
      "info" : "SimpleName[7447-7464]:SimpleName[8049-8066]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[7465-7476]:SingleVariableDeclaration[8067-8078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7478-7530]:Block[8080-8132]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7484-7526]:ThrowStatement[8086-8128]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7534-7543]:MarkerAnnotation[8136-8145]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7546-7552]:Modifier[8148-8154]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[7553-7559]:SimpleType[8155-8161]"
    }, {
      "left" : "getGreatestSubtype",
      "right" : "getGreatestSubtype",
      "info" : "SimpleName[7560-7578]:SimpleName[8162-8180]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[7579-7590]:SingleVariableDeclaration[8181-8192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7592-7644]:Block[8194-8246]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7598-7640]:ThrowStatement[8200-8242]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7648-7657]:MarkerAnnotation[8250-8259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7660-7666]:Modifier[8262-8268]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[7667-7679]:SimpleType[8269-8281]"
    }, {
      "left" : "testForEquality",
      "right" : "testForEquality",
      "info" : "SimpleName[7680-7695]:SimpleName[8282-8297]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[7696-7707]:SingleVariableDeclaration[8298-8309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7709-7761]:Block[8311-8363]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7715-7757]:ThrowStatement[8317-8359]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7765-7774]:MarkerAnnotation[8367-8376]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7777-7783]:Modifier[8379-8385]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[7785-7786]:TypeParameter[8387-8388]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[7788-7789]:SimpleType[8390-8391]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[7790-7795]:SimpleName[8392-8397]"
    }, {
      "left" : "Visitor<T> visitor",
      "right" : "Visitor<T> visitor",
      "info" : "SingleVariableDeclaration[7796-7814]:SingleVariableDeclaration[8398-8416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7816-7868]:Block[8418-8470]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7822-7864]:ThrowStatement[8424-8466]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7872-7881]:MarkerAnnotation[8474-8483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7884-7890]:Modifier[8486-8492]"
    }, {
      "left" : "BooleanLiteralSet",
      "right" : "BooleanLiteralSet",
      "info" : "SimpleType[7891-7908]:SimpleType[8493-8510]"
    }, {
      "left" : "getPossibleToBooleanOutcomes",
      "right" : "getPossibleToBooleanOutcomes",
      "info" : "SimpleName[7909-7937]:SimpleName[8511-8539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7940-7980]:Block[8542-8582]"
    }, {
      "left" : "return BooleanLiteralSet.TRUE;",
      "right" : "return BooleanLiteralSet.TRUE;",
      "info" : "ReturnStatement[7946-7976]:ReturnStatement[8548-8578]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7984-7993]:MarkerAnnotation[8586-8595]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[7996-8002]:SimpleType[8598-8604]"
    }, {
      "left" : "resolveInternal",
      "right" : "resolveInternal",
      "info" : "SimpleName[8003-8018]:SimpleName[8605-8620]"
    }, {
      "left" : "ErrorReporter t",
      "right" : "ErrorReporter t",
      "info" : "SingleVariableDeclaration[8019-8034]:SingleVariableDeclaration[8621-8636]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[8036-8061]:SingleVariableDeclaration[8638-8663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8063-8372]:Block[8665-8974]"
    }, {
      "left" : "returnType = safeResolve(returnType, t, scope);",
      "right" : "returnType = safeResolve(returnType, t, scope);",
      "info" : "ExpressionStatement[8069-8116]:ExpressionStatement[8671-8718]"
    }, {
      "left" : "if (parameters != null)",
      "right" : "if (parameters != null)",
      "info" : "IfStatement[8121-8351]:IfStatement[8723-8953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8145-8351]:Block[8747-8953]"
    }, {
      "left" : "for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext())",
      "right" : "for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext())",
      "info" : "ForStatement[8153-8345]:ForStatement[8755-8947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8266-8345]:Block[8868-8947]"
    }, {
      "left" : "paramNode.setJSType(paramNode.getJSType().resolve(t, scope));",
      "right" : "paramNode.setJSType(paramNode.getJSType().resolve(t, scope));",
      "info" : "ExpressionStatement[8276-8337]:ExpressionStatement[8878-8939]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8356-8368]:ReturnStatement[8958-8970]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8376-8383]:PrimitiveType[8978-8985]"
    }, {
      "left" : "hasUnknownParamsOrReturn",
      "right" : "hasUnknownParamsOrReturn",
      "info" : "SimpleName[8384-8408]:SimpleName[8986-9010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8411-8772]:Block[9013-9374]"
    }, {
      "left" : "if (parameters != null)",
      "right" : "if (parameters != null)",
      "info" : "IfStatement[8417-8707]:IfStatement[9019-9309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8441-8707]:Block[9043-9309]"
    }, {
      "left" : "for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext())",
      "right" : "for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext())",
      "info" : "ForStatement[8449-8701]:ForStatement[9051-9303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8562-8701]:Block[9164-9303]"
    }, {
      "left" : "JSType type = paramNode.getJSType();",
      "right" : "JSType type = paramNode.getJSType();",
      "info" : "VariableDeclarationStatement[8572-8608]:VariableDeclarationStatement[9174-9210]"
    }, {
      "left" : "if (type == null || type.isUnknownType())",
      "right" : "if (type == null || type.isUnknownType())",
      "info" : "IfStatement[8617-8693]:IfStatement[9219-9295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8659-8693]:Block[9261-9295]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8671-8683]:ReturnStatement[9273-9285]"
    }, {
      "left" : "return returnType == null || returnType.isUnknownType();",
      "right" : "return returnType == null || returnType.isUnknownType();",
      "info" : "ReturnStatement[8712-8768]:ReturnStatement[9314-9370]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8776-8785]:MarkerAnnotation[9378-9387]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8788-8794]:SimpleType[9390-9396]"
    }, {
      "left" : "toStringHelper",
      "right" : "toStringHelper",
      "info" : "SimpleName[8795-8809]:SimpleName[9397-9411]"
    }, {
      "left" : "boolean forAnnotations",
      "right" : "boolean forAnnotations",
      "info" : "SingleVariableDeclaration[8810-8832]:SingleVariableDeclaration[9412-9434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8834-8868]:Block[9436-9470]"
    }, {
      "left" : "return super.toString();",
      "right" : "return super.toString();",
      "info" : "ReturnStatement[8840-8864]:ReturnStatement[9442-9466]"
    } ]
  },
  "interFileMappings" : { }
}