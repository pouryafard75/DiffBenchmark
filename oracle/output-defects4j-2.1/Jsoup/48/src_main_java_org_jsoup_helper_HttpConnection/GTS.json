{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HttpConnection",
      "right" : "HttpConnection",
      "info" : "TypeDeclaration[748-35217]:TypeDeclaration[748-35706]"
    }, {
      "left" : "public static final String  CONTENT_ENCODING = \"Content-Encoding\";",
      "right" : "public static final String  CONTENT_ENCODING = \"Content-Encoding\";",
      "info" : "FieldDeclaration[893-959]:FieldDeclaration[893-959]"
    }, {
      "left" : "private static final String CONTENT_TYPE = \"Content-Type\";",
      "right" : "private static final String CONTENT_TYPE = \"Content-Type\";",
      "info" : "FieldDeclaration[964-1022]:FieldDeclaration[964-1022]"
    }, {
      "left" : "private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";",
      "right" : "private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";",
      "info" : "FieldDeclaration[1027-1099]:FieldDeclaration[1027-1099]"
    }, {
      "left" : "private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";",
      "right" : "private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";",
      "info" : "FieldDeclaration[1104-1187]:FieldDeclaration[1104-1187]"
    }, {
      "left" : "public static Connection connect(String url)",
      "right" : "public static Connection connect(String url)",
      "info" : "MethodDeclaration[1193-1334]:MethodDeclaration[1193-1334]"
    }, {
      "left" : "public static Connection connect(URL url)",
      "right" : "public static Connection connect(URL url)",
      "info" : "MethodDeclaration[1340-1478]:MethodDeclaration[1340-1478]"
    }, {
      "left" : "private static String encodeUrl(String url)",
      "right" : "private static String encodeUrl(String url)",
      "info" : "MethodDeclaration[1481-1603]:MethodDeclaration[1481-1603]"
    }, {
      "left" : "private static String encodeMimeName(String val)",
      "right" : "private static String encodeMimeName(String val)",
      "info" : "MethodDeclaration[1609-1759]:MethodDeclaration[1609-1759]"
    }, {
      "left" : "private Connection.Request req;",
      "right" : "private Connection.Request req;",
      "info" : "FieldDeclaration[1765-1796]:FieldDeclaration[1765-1796]"
    }, {
      "left" : "private Connection.Response res;",
      "right" : "private Connection.Response res;",
      "info" : "FieldDeclaration[1801-1833]:FieldDeclaration[1801-1833]"
    }, {
      "left" : "private HttpConnection()",
      "right" : "private HttpConnection()",
      "info" : "MethodDeclaration[1836-1927]:MethodDeclaration[1836-1927]"
    }, {
      "left" : "public Connection url(URL url)",
      "right" : "public Connection url(URL url)",
      "info" : "MethodDeclaration[1933-2014]:MethodDeclaration[1933-2014]"
    }, {
      "left" : "public Connection url(String url)",
      "right" : "public Connection url(String url)",
      "info" : "MethodDeclaration[2020-2331]:MethodDeclaration[2020-2331]"
    }, {
      "left" : "public Connection userAgent(String userAgent)",
      "right" : "public Connection userAgent(String userAgent)",
      "info" : "MethodDeclaration[2337-2524]:MethodDeclaration[2337-2524]"
    }, {
      "left" : "public Connection timeout(int millis)",
      "right" : "public Connection timeout(int millis)",
      "info" : "MethodDeclaration[2530-2625]:MethodDeclaration[2530-2625]"
    }, {
      "left" : "public Connection maxBodySize(int bytes)",
      "right" : "public Connection maxBodySize(int bytes)",
      "info" : "MethodDeclaration[2631-2732]:MethodDeclaration[2631-2732]"
    }, {
      "left" : "public Connection followRedirects(boolean followRedirects)",
      "right" : "public Connection followRedirects(boolean followRedirects)",
      "info" : "MethodDeclaration[2738-2871]:MethodDeclaration[2738-2871]"
    }, {
      "left" : "public Connection referrer(String referrer)",
      "right" : "public Connection referrer(String referrer)",
      "info" : "MethodDeclaration[2877-3055]:MethodDeclaration[2877-3055]"
    }, {
      "left" : "public Connection method(Method method)",
      "right" : "public Connection method(Method method)",
      "info" : "MethodDeclaration[3061-3157]:MethodDeclaration[3061-3157]"
    }, {
      "left" : "public Connection ignoreHttpErrors(boolean ignoreHttpErrors)",
      "right" : "public Connection ignoreHttpErrors(boolean ignoreHttpErrors)",
      "info" : "MethodDeclaration[3163-3285]:MethodDeclaration[3163-3285]"
    }, {
      "left" : "public Connection ignoreContentType(boolean ignoreContentType)",
      "right" : "public Connection ignoreContentType(boolean ignoreContentType)",
      "info" : "MethodDeclaration[3291-3432]:MethodDeclaration[3291-3432]"
    }, {
      "left" : "public Connection validateTLSCertificates(boolean value)",
      "right" : "public Connection validateTLSCertificates(boolean value)",
      "info" : "MethodDeclaration[3438-3567]:MethodDeclaration[3438-3567]"
    }, {
      "left" : "public Connection data(String key, String value)",
      "right" : "public Connection data(String key, String value)",
      "info" : "MethodDeclaration[3573-3695]:MethodDeclaration[3573-3695]"
    }, {
      "left" : "public Connection data(String key, String filename, InputStream inputStream)",
      "right" : "public Connection data(String key, String filename, InputStream inputStream)",
      "info" : "MethodDeclaration[3701-3867]:MethodDeclaration[3701-3867]"
    }, {
      "left" : "public Connection data(Map<String, String> data)",
      "right" : "public Connection data(Map<String, String> data)",
      "info" : "MethodDeclaration[3873-4158]:MethodDeclaration[3873-4158]"
    }, {
      "left" : "public Connection data(String... keyvals)",
      "right" : "public Connection data(String... keyvals)",
      "info" : "MethodDeclaration[4164-4733]:MethodDeclaration[4164-4733]"
    }, {
      "left" : "public Connection data(Collection<Connection.KeyVal> data)",
      "right" : "public Connection data(Collection<Connection.KeyVal> data)",
      "info" : "MethodDeclaration[4739-4979]:MethodDeclaration[4739-4979]"
    }, {
      "left" : "public Connection header(String name, String value)",
      "right" : "public Connection header(String name, String value)",
      "info" : "MethodDeclaration[4985-5098]:MethodDeclaration[4985-5098]"
    }, {
      "left" : "public Connection cookie(String name, String value)",
      "right" : "public Connection cookie(String name, String value)",
      "info" : "MethodDeclaration[5104-5217]:MethodDeclaration[5104-5217]"
    }, {
      "left" : "public Connection cookies(Map<String, String> cookies)",
      "right" : "public Connection cookies(Map<String, String> cookies)",
      "info" : "MethodDeclaration[5223-5509]:MethodDeclaration[5223-5509]"
    }, {
      "left" : "public Connection parser(Parser parser)",
      "right" : "public Connection parser(Parser parser)",
      "info" : "MethodDeclaration[5515-5611]:MethodDeclaration[5515-5611]"
    }, {
      "left" : "public Document get() throws IOException",
      "right" : "public Document get() throws IOException",
      "info" : "MethodDeclaration[5617-5744]:MethodDeclaration[5617-5744]"
    }, {
      "left" : "public Document post() throws IOException",
      "right" : "public Document post() throws IOException",
      "info" : "MethodDeclaration[5750-5879]:MethodDeclaration[5750-5879]"
    }, {
      "left" : "public Connection.Response execute() throws IOException",
      "right" : "public Connection.Response execute() throws IOException",
      "info" : "MethodDeclaration[5885-6005]:MethodDeclaration[5885-6005]"
    }, {
      "left" : "public Connection.Request request()",
      "right" : "public Connection.Request request()",
      "info" : "MethodDeclaration[6011-6074]:MethodDeclaration[6011-6074]"
    }, {
      "left" : "public Connection request(Connection.Request request)",
      "right" : "public Connection request(Connection.Request request)",
      "info" : "MethodDeclaration[6080-6185]:MethodDeclaration[6080-6185]"
    }, {
      "left" : "public Connection.Response response()",
      "right" : "public Connection.Response response()",
      "info" : "MethodDeclaration[6191-6256]:MethodDeclaration[6191-6256]"
    }, {
      "left" : "public Connection response(Connection.Response response)",
      "right" : "public Connection response(Connection.Response response)",
      "info" : "MethodDeclaration[6262-6371]:MethodDeclaration[6262-6371]"
    }, {
      "left" : "public Connection postDataCharset(String charset)",
      "right" : "public Connection postDataCharset(String charset)",
      "info" : "MethodDeclaration[6377-6493]:MethodDeclaration[6377-6493]"
    }, {
      "left" : "Base",
      "right" : "Base",
      "info" : "TypeDeclaration[6499-10618]:TypeDeclaration[6499-10618]"
    }, {
      "left" : "URL url;",
      "right" : "URL url;",
      "info" : "FieldDeclaration[6638-6646]:FieldDeclaration[6638-6646]"
    }, {
      "left" : "Method method;",
      "right" : "Method method;",
      "info" : "FieldDeclaration[6655-6669]:FieldDeclaration[6655-6669]"
    }, {
      "left" : "Map<String, String> headers;",
      "right" : "Map<String, String> headers;",
      "info" : "FieldDeclaration[6678-6706]:FieldDeclaration[6678-6706]"
    }, {
      "left" : "Map<String, String> cookies;",
      "right" : "Map<String, String> cookies;",
      "info" : "FieldDeclaration[6715-6743]:FieldDeclaration[6715-6743]"
    }, {
      "left" : "private Base()",
      "right" : "private Base()",
      "info" : "MethodDeclaration[6753-6897]:MethodDeclaration[6753-6897]"
    }, {
      "left" : "public URL url()",
      "right" : "public URL url()",
      "info" : "MethodDeclaration[6907-6959]:MethodDeclaration[6907-6959]"
    }, {
      "left" : "public T url(URL url)",
      "right" : "public T url(URL url)",
      "info" : "MethodDeclaration[6969-7118]:MethodDeclaration[6969-7118]"
    }, {
      "left" : "public Method method()",
      "right" : "public Method method()",
      "info" : "MethodDeclaration[7128-7189]:MethodDeclaration[7128-7189]"
    }, {
      "left" : "public T method(Method method)",
      "right" : "public T method(Method method)",
      "info" : "MethodDeclaration[7199-7369]:MethodDeclaration[7199-7369]"
    }, {
      "left" : "public String header(String name)",
      "right" : "public String header(String name)",
      "info" : "MethodDeclaration[7379-7543]:MethodDeclaration[7379-7543]"
    }, {
      "left" : "public T header(String name, String value)",
      "right" : "public T header(String name, String value)",
      "info" : "MethodDeclaration[7553-7915]:MethodDeclaration[7553-7915]"
    }, {
      "left" : "public boolean hasHeader(String name)",
      "right" : "public boolean hasHeader(String name)",
      "info" : "MethodDeclaration[7925-8103]:MethodDeclaration[7925-8103]"
    }, {
      "left" : "public boolean hasHeaderWithValue(String name, String value)",
      "right" : "public boolean hasHeaderWithValue(String name, String value)",
      "info" : "MethodDeclaration[8113-8365]:MethodDeclaration[8113-8365]"
    }, {
      "left" : "public T removeHeader(String name)",
      "right" : "public T removeHeader(String name)",
      "info" : "MethodDeclaration[8375-8722]:MethodDeclaration[8375-8722]"
    }, {
      "left" : "public Map<String, String> headers()",
      "right" : "public Map<String, String> headers()",
      "info" : "MethodDeclaration[8732-8808]:MethodDeclaration[8732-8808]"
    }, {
      "left" : "private String getHeaderCaseInsensitive(String name)",
      "right" : "private String getHeaderCaseInsensitive(String name)",
      "info" : "MethodDeclaration[8818-9397]:MethodDeclaration[8818-9397]"
    }, {
      "left" : "private Map.Entry<String, String> scanHeaders(String name)",
      "right" : "private Map.Entry<String, String> scanHeaders(String name)",
      "info" : "MethodDeclaration[9407-9728]:MethodDeclaration[9407-9728]"
    }, {
      "left" : "public String cookie(String name)",
      "right" : "public String cookie(String name)",
      "info" : "MethodDeclaration[9738-9891]:MethodDeclaration[9738-9891]"
    }, {
      "left" : "public T cookie(String name, String value)",
      "right" : "public T cookie(String name, String value)",
      "info" : "MethodDeclaration[9901-10162]:MethodDeclaration[9901-10162]"
    }, {
      "left" : "public boolean hasCookie(String name)",
      "right" : "public boolean hasCookie(String name)",
      "info" : "MethodDeclaration[10172-10337]:MethodDeclaration[10172-10337]"
    }, {
      "left" : "public T removeCookie(String name)",
      "right" : "public T removeCookie(String name)",
      "info" : "MethodDeclaration[10347-10526]:MethodDeclaration[10347-10526]"
    }, {
      "left" : "public Map<String, String> cookies()",
      "right" : "public Map<String, String> cookies()",
      "info" : "MethodDeclaration[10536-10612]:MethodDeclaration[10536-10612]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "TypeDeclaration[10624-14111]:TypeDeclaration[10624-14111]"
    }, {
      "left" : "private int timeoutMilliseconds;",
      "right" : "private int timeoutMilliseconds;",
      "info" : "FieldDeclaration[10740-10772]:FieldDeclaration[10740-10772]"
    }, {
      "left" : "private int maxBodySizeBytes;",
      "right" : "private int maxBodySizeBytes;",
      "info" : "FieldDeclaration[10781-10810]:FieldDeclaration[10781-10810]"
    }, {
      "left" : "private boolean followRedirects;",
      "right" : "private boolean followRedirects;",
      "info" : "FieldDeclaration[10819-10851]:FieldDeclaration[10819-10851]"
    }, {
      "left" : "private Collection<Connection.KeyVal> data;",
      "right" : "private Collection<Connection.KeyVal> data;",
      "info" : "FieldDeclaration[10860-10903]:FieldDeclaration[10860-10903]"
    }, {
      "left" : "private boolean ignoreHttpErrors = false;",
      "right" : "private boolean ignoreHttpErrors = false;",
      "info" : "FieldDeclaration[10912-10953]:FieldDeclaration[10912-10953]"
    }, {
      "left" : "private boolean ignoreContentType = false;",
      "right" : "private boolean ignoreContentType = false;",
      "info" : "FieldDeclaration[10962-11004]:FieldDeclaration[10962-11004]"
    }, {
      "left" : "private Parser parser;",
      "right" : "private Parser parser;",
      "info" : "FieldDeclaration[11013-11035]:FieldDeclaration[11013-11035]"
    }, {
      "left" : "private boolean parserDefined = false;",
      "right" : "private boolean parserDefined = false;",
      "info" : "FieldDeclaration[11044-11082]:FieldDeclaration[11044-11082]"
    }, {
      "left" : "private boolean validateTSLCertificates = true;",
      "right" : "private boolean validateTSLCertificates = true;",
      "info" : "FieldDeclaration[11136-11183]:FieldDeclaration[11136-11183]"
    }, {
      "left" : "private String postDataCharset = DataUtil.defaultCharset;",
      "right" : "private String postDataCharset = DataUtil.defaultCharset;",
      "info" : "FieldDeclaration[11192-11249]:FieldDeclaration[11192-11249]"
    }, {
      "left" : "private Request()",
      "right" : "private Request()",
      "info" : "MethodDeclaration[11259-11597]:MethodDeclaration[11259-11597]"
    }, {
      "left" : "public int timeout()",
      "right" : "public int timeout()",
      "info" : "MethodDeclaration[11607-11679]:MethodDeclaration[11607-11679]"
    }, {
      "left" : "public Request timeout(int millis)",
      "right" : "public Request timeout(int millis)",
      "info" : "MethodDeclaration[11689-11900]:MethodDeclaration[11689-11900]"
    }, {
      "left" : "public int maxBodySize()",
      "right" : "public int maxBodySize()",
      "info" : "MethodDeclaration[11910-11983]:MethodDeclaration[11910-11983]"
    }, {
      "left" : "public Connection.Request maxBodySize(int bytes)",
      "right" : "public Connection.Request maxBodySize(int bytes)",
      "info" : "MethodDeclaration[11993-12200]:MethodDeclaration[11993-12200]"
    }, {
      "left" : "public boolean followRedirects()",
      "right" : "public boolean followRedirects()",
      "info" : "MethodDeclaration[12210-12290]:MethodDeclaration[12210-12290]"
    }, {
      "left" : "public Connection.Request followRedirects(boolean followRedirects)",
      "right" : "public Connection.Request followRedirects(boolean followRedirects)",
      "info" : "MethodDeclaration[12300-12455]:MethodDeclaration[12300-12455]"
    }, {
      "left" : "public boolean ignoreHttpErrors()",
      "right" : "public boolean ignoreHttpErrors()",
      "info" : "MethodDeclaration[12465-12547]:MethodDeclaration[12465-12547]"
    }, {
      "left" : "public boolean validateTLSCertificates()",
      "right" : "public boolean validateTLSCertificates()",
      "info" : "MethodDeclaration[12557-12653]:MethodDeclaration[12557-12653]"
    }, {
      "left" : "public void validateTLSCertificates(boolean value)",
      "right" : "public void validateTLSCertificates(boolean value)",
      "info" : "MethodDeclaration[12663-12770]:MethodDeclaration[12663-12770]"
    }, {
      "left" : "public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors)",
      "right" : "public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors)",
      "info" : "MethodDeclaration[12780-12939]:MethodDeclaration[12780-12939]"
    }, {
      "left" : "public boolean ignoreContentType()",
      "right" : "public boolean ignoreContentType()",
      "info" : "MethodDeclaration[12949-13033]:MethodDeclaration[12949-13033]"
    }, {
      "left" : "public Connection.Request ignoreContentType(boolean ignoreContentType)",
      "right" : "public Connection.Request ignoreContentType(boolean ignoreContentType)",
      "info" : "MethodDeclaration[13043-13206]:MethodDeclaration[13043-13206]"
    }, {
      "left" : "public Request data(Connection.KeyVal keyval)",
      "right" : "public Request data(Connection.KeyVal keyval)",
      "info" : "MethodDeclaration[13216-13394]:MethodDeclaration[13216-13394]"
    }, {
      "left" : "public Collection<Connection.KeyVal> data()",
      "right" : "public Collection<Connection.KeyVal> data()",
      "info" : "MethodDeclaration[13404-13484]:MethodDeclaration[13404-13484]"
    }, {
      "left" : "public Request parser(Parser parser)",
      "right" : "public Request parser(Parser parser)",
      "info" : "MethodDeclaration[13494-13635]:MethodDeclaration[13494-13635]"
    }, {
      "left" : "public Parser parser()",
      "right" : "public Parser parser()",
      "info" : "MethodDeclaration[13645-13706]:MethodDeclaration[13645-13706]"
    }, {
      "left" : "public Connection.Request postDataCharset(String charset)",
      "right" : "public Connection.Request postDataCharset(String charset)",
      "info" : "MethodDeclaration[13716-14016]:MethodDeclaration[13716-14016]"
    }, {
      "left" : "public String postDataCharset()",
      "right" : "public String postDataCharset()",
      "info" : "MethodDeclaration[14026-14105]:MethodDeclaration[14026-14105]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "TypeDeclaration[14117-33751]:TypeDeclaration[14117-34240]"
    }, {
      "left" : "private static final int MAX_REDIRECTS = 20;",
      "right" : "private static final int MAX_REDIRECTS = 20;",
      "info" : "FieldDeclaration[14236-14280]:FieldDeclaration[14236-14280]"
    }, {
      "left" : "private static SSLSocketFactory sslSocketFactory;",
      "right" : "private static SSLSocketFactory sslSocketFactory;",
      "info" : "FieldDeclaration[14289-14338]:FieldDeclaration[14289-14338]"
    }, {
      "left" : "private static final String LOCATION = \"Location\";",
      "right" : "private static final String LOCATION = \"Location\";",
      "info" : "FieldDeclaration[14347-14397]:FieldDeclaration[14347-14397]"
    }, {
      "left" : "private int statusCode;",
      "right" : "private int statusCode;",
      "info" : "FieldDeclaration[14406-14429]:FieldDeclaration[14406-14429]"
    }, {
      "left" : "private String statusMessage;",
      "right" : "private String statusMessage;",
      "info" : "FieldDeclaration[14438-14467]:FieldDeclaration[14438-14467]"
    }, {
      "left" : "private ByteBuffer byteData;",
      "right" : "private ByteBuffer byteData;",
      "info" : "FieldDeclaration[14476-14504]:FieldDeclaration[14476-14504]"
    }, {
      "left" : "private String charset;",
      "right" : "private String charset;",
      "info" : "FieldDeclaration[14513-14536]:FieldDeclaration[14513-14536]"
    }, {
      "left" : "private String contentType;",
      "right" : "private String contentType;",
      "info" : "FieldDeclaration[14545-14572]:FieldDeclaration[14545-14572]"
    }, {
      "left" : "private boolean executed = false;",
      "right" : "private boolean executed = false;",
      "info" : "FieldDeclaration[14581-14614]:FieldDeclaration[14581-14614]"
    }, {
      "left" : "private int numRedirects = 0;",
      "right" : "private int numRedirects = 0;",
      "info" : "FieldDeclaration[14623-14652]:FieldDeclaration[14623-14652]"
    }, {
      "left" : "private Connection.Request req;",
      "right" : "private Connection.Request req;",
      "info" : "FieldDeclaration[14661-14692]:FieldDeclaration[14661-14692]"
    }, {
      "left" : "private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");",
      "right" : "private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");",
      "info" : "FieldDeclaration[14819-14920]:FieldDeclaration[14819-14920]"
    }, {
      "left" : "Response()",
      "right" : "Response()",
      "info" : "MethodDeclaration[14930-14973]:MethodDeclaration[14930-14973]"
    }, {
      "left" : "private Response(Response previousResponse) throws IOException",
      "right" : "private Response(Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[14983-15388]:MethodDeclaration[14983-15388]"
    }, {
      "left" : "static Response execute(Connection.Request req) throws IOException",
      "right" : "static Response execute(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[15398-15515]:MethodDeclaration[15398-15515]"
    }, {
      "left" : "static Response execute(Connection.Request req, Response previousResponse) throws IOException",
      "right" : "static Response execute(Connection.Request req, Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[15525-20542]:MethodDeclaration[15525-20542]"
    }, {
      "left" : "public int statusCode()",
      "right" : "public int statusCode()",
      "info" : "MethodDeclaration[20552-20618]:MethodDeclaration[20552-20618]"
    }, {
      "left" : "public String statusMessage()",
      "right" : "public String statusMessage()",
      "info" : "MethodDeclaration[20628-20703]:MethodDeclaration[20628-20703]"
    }, {
      "left" : "public String charset()",
      "right" : "public String charset()",
      "info" : "MethodDeclaration[20713-20776]:MethodDeclaration[20713-20776]"
    }, {
      "left" : "public String contentType()",
      "right" : "public String contentType()",
      "info" : "MethodDeclaration[20786-20857]:MethodDeclaration[20786-20857]"
    }, {
      "left" : "public Document parse() throws IOException",
      "right" : "public Document parse() throws IOException",
      "info" : "MethodDeclaration[20867-21315]:MethodDeclaration[20867-21315]"
    }, {
      "left" : "public String body()",
      "right" : "public String body()",
      "info" : "MethodDeclaration[21325-21909]:MethodDeclaration[21325-21909]"
    }, {
      "left" : "public byte[] bodyAsBytes()",
      "right" : "public byte[] bodyAsBytes()",
      "info" : "MethodDeclaration[21919-22128]:MethodDeclaration[21919-22128]"
    }, {
      "left" : "private static HttpURLConnection createConnection(Connection.Request req) throws IOException",
      "right" : "private static HttpURLConnection createConnection(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[22202-23399]:MethodDeclaration[22202-23399]"
    }, {
      "left" : "private static HostnameVerifier getInsecureVerifier()",
      "right" : "private static HostnameVerifier getInsecureVerifier()",
      "info" : "MethodDeclaration[23409-23934]:MethodDeclaration[23409-23934]"
    }, {
      "left" : "public boolean verify(String urlHostName, SSLSession session)",
      "right" : "public boolean verify(String urlHostName, SSLSession session)",
      "info" : "MethodDeclaration[23795-23909]:MethodDeclaration[23795-23909]"
    }, {
      "left" : "private static synchronized void initUnSecureTSL() throws IOException",
      "right" : "private static synchronized void initUnSecureTSL() throws IOException",
      "info" : "MethodDeclaration[23944-25722]:MethodDeclaration[23944-25722]"
    }, {
      "left" : "public void checkClientTrusted(final X509Certificate[] chain, final String authType)",
      "right" : "public void checkClientTrusted(final X509Certificate[] chain, final String authType)",
      "info" : "MethodDeclaration[24587-24695]:MethodDeclaration[24587-24695]"
    }, {
      "left" : "public void checkServerTrusted(final X509Certificate[] chain, final String authType)",
      "right" : "public void checkServerTrusted(final X509Certificate[] chain, final String authType)",
      "info" : "MethodDeclaration[24717-24825]:MethodDeclaration[24717-24825]"
    }, {
      "left" : "public X509Certificate[] getAcceptedIssuers()",
      "right" : "public X509Certificate[] getAcceptedIssuers()",
      "info" : "MethodDeclaration[24847-24953]:MethodDeclaration[24847-24953]"
    }, {
      "left" : "private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException",
      "right" : "private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[25779-26670]:MethodDeclaration[25779-26670]"
    }, {
      "left" : "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn)",
      "right" : "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn)",
      "info" : "MethodDeclaration[26680-27684]:MethodDeclaration[26680-27684]"
    }, {
      "left" : "void processResponseHeaders(Map<String, List<String>> resHeaders)",
      "right" : "void processResponseHeaders(Map<String, List<String>> resHeaders)",
      "info" : "MethodDeclaration[27694-28967]:MethodDeclaration[27694-29456]"
    }, {
      "left" : "private static String setOutputContentType(final Connection.Request req)",
      "right" : "private static String setOutputContentType(final Connection.Request req)",
      "info" : "MethodDeclaration[28977-29792]:MethodDeclaration[29466-30281]"
    }, {
      "left" : "private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException",
      "right" : "private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException",
      "info" : "MethodDeclaration[29802-31890]:MethodDeclaration[30291-32379]"
    }, {
      "left" : "private static String getRequestCookieString(Connection.Request req)",
      "right" : "private static String getRequestCookieString(Connection.Request req)",
      "info" : "MethodDeclaration[31900-32517]:MethodDeclaration[32389-33006]"
    }, {
      "left" : "private static void serialiseRequestUrl(Connection.Request req) throws IOException",
      "right" : "private static void serialiseRequestUrl(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[32592-33745]:MethodDeclaration[33081-34234]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "TypeDeclaration[33757-35215]:TypeDeclaration[34246-35704]"
    }, {
      "left" : "private String key;",
      "right" : "private String key;",
      "info" : "FieldDeclaration[33823-33842]:FieldDeclaration[34312-34331]"
    }, {
      "left" : "private String value;",
      "right" : "private String value;",
      "info" : "FieldDeclaration[33851-33872]:FieldDeclaration[34340-34361]"
    }, {
      "left" : "private InputStream stream;",
      "right" : "private InputStream stream;",
      "info" : "FieldDeclaration[33881-33908]:FieldDeclaration[34370-34397]"
    }, {
      "left" : "public static KeyVal create(String key, String value)",
      "right" : "public static KeyVal create(String key, String value)",
      "info" : "MethodDeclaration[33918-34038]:MethodDeclaration[34407-34527]"
    }, {
      "left" : "public static KeyVal create(String key, String filename, InputStream stream)",
      "right" : "public static KeyVal create(String key, String filename, InputStream stream)",
      "info" : "MethodDeclaration[34048-34214]:MethodDeclaration[34537-34703]"
    }, {
      "left" : "private KeyVal()",
      "right" : "private KeyVal()",
      "info" : "MethodDeclaration[34224-34243]:MethodDeclaration[34713-34732]"
    }, {
      "left" : "public KeyVal key(String key)",
      "right" : "public KeyVal key(String key)",
      "info" : "MethodDeclaration[34253-34413]:MethodDeclaration[34742-34902]"
    }, {
      "left" : "public String key()",
      "right" : "public String key()",
      "info" : "MethodDeclaration[34423-34478]:MethodDeclaration[34912-34967]"
    }, {
      "left" : "public KeyVal value(String value)",
      "right" : "public KeyVal value(String value)",
      "info" : "MethodDeclaration[34488-34658]:MethodDeclaration[34977-35147]"
    }, {
      "left" : "public String value()",
      "right" : "public String value()",
      "info" : "MethodDeclaration[34668-34727]:MethodDeclaration[35157-35216]"
    }, {
      "left" : "public KeyVal inputStream(InputStream inputStream)",
      "right" : "public KeyVal inputStream(InputStream inputStream)",
      "info" : "MethodDeclaration[34737-34938]:MethodDeclaration[35226-35427]"
    }, {
      "left" : "public InputStream inputStream()",
      "right" : "public InputStream inputStream()",
      "info" : "MethodDeclaration[34948-35019]:MethodDeclaration[35437-35508]"
    }, {
      "left" : "public boolean hasInputStream()",
      "right" : "public boolean hasInputStream()",
      "info" : "MethodDeclaration[35029-35107]:MethodDeclaration[35518-35596]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35117-35209]:MethodDeclaration[35606-35698]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1238-1334]:Block[1238-1334]"
    }, {
      "left" : "Connection con = new HttpConnection();",
      "right" : "Connection con = new HttpConnection();",
      "info" : "VariableDeclarationStatement[1248-1286]:VariableDeclarationStatement[1248-1286]"
    }, {
      "left" : "con.url(url);",
      "right" : "con.url(url);",
      "info" : "ExpressionStatement[1295-1308]:ExpressionStatement[1295-1308]"
    }, {
      "left" : "return con;",
      "right" : "return con;",
      "info" : "ReturnStatement[1317-1328]:ReturnStatement[1317-1328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1382-1478]:Block[1382-1478]"
    }, {
      "left" : "Connection con = new HttpConnection();",
      "right" : "Connection con = new HttpConnection();",
      "info" : "VariableDeclarationStatement[1392-1430]:VariableDeclarationStatement[1392-1430]"
    }, {
      "left" : "con.url(url);",
      "right" : "con.url(url);",
      "info" : "ExpressionStatement[1439-1452]:ExpressionStatement[1439-1452]"
    }, {
      "left" : "return con;",
      "right" : "return con;",
      "info" : "ReturnStatement[1461-1472]:ReturnStatement[1461-1472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1525-1603]:Block[1525-1603]"
    }, {
      "left" : "if(url == null)",
      "right" : "if(url == null)",
      "info" : "IfStatement[1529-1560]:IfStatement[1529-1560]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[1548-1560]:ReturnStatement[1548-1560]"
    }, {
      "left" : "return url.replaceAll(\" \", \"%20\");",
      "right" : "return url.replaceAll(\" \", \"%20\");",
      "info" : "ReturnStatement[1566-1600]:ReturnStatement[1566-1600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1658-1759]:Block[1658-1759]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[1668-1709]:IfStatement[1668-1709]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[1697-1709]:ReturnStatement[1697-1709]"
    }, {
      "left" : "return val.replaceAll(\"\\\"\", \"%22\");",
      "right" : "return val.replaceAll(\"\\\"\", \"%22\");",
      "info" : "ReturnStatement[1718-1753]:ReturnStatement[1718-1753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1861-1927]:Block[1861-1927]"
    }, {
      "left" : "req = new Request();",
      "right" : "req = new Request();",
      "info" : "ExpressionStatement[1871-1891]:ExpressionStatement[1871-1891]"
    }, {
      "left" : "res = new Response();",
      "right" : "res = new Response();",
      "info" : "ExpressionStatement[1900-1921]:ExpressionStatement[1900-1921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1964-2014]:Block[1964-2014]"
    }, {
      "left" : "req.url(url);",
      "right" : "req.url(url);",
      "info" : "ExpressionStatement[1974-1987]:ExpressionStatement[1974-1987]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[1996-2008]:ReturnStatement[1996-2008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2054-2331]:Block[2054-2331]"
    }, {
      "left" : "Validate.notEmpty(url, \"Must supply a valid URL\");",
      "right" : "Validate.notEmpty(url, \"Must supply a valid URL\");",
      "info" : "ExpressionStatement[2064-2114]:ExpressionStatement[2064-2114]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2123-2304]:TryStatement[2123-2304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2127-2184]:Block[2127-2184]"
    }, {
      "left" : "req.url(new URL(encodeUrl(url)));",
      "right" : "req.url(new URL(encodeUrl(url)));",
      "info" : "ExpressionStatement[2141-2174]:ExpressionStatement[2141-2174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2217-2304]:Block[2217-2304]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Malformed URL: \" + url, e);",
      "right" : "throw new IllegalArgumentException(\"Malformed URL: \" + url, e);",
      "info" : "ThrowStatement[2231-2294]:ThrowStatement[2231-2294]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2313-2325]:ReturnStatement[2313-2325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2383-2524]:Block[2383-2524]"
    }, {
      "left" : "Validate.notNull(userAgent, \"User agent must not be null\");",
      "right" : "Validate.notNull(userAgent, \"User agent must not be null\");",
      "info" : "ExpressionStatement[2393-2452]:ExpressionStatement[2393-2452]"
    }, {
      "left" : "req.header(\"User-Agent\", userAgent);",
      "right" : "req.header(\"User-Agent\", userAgent);",
      "info" : "ExpressionStatement[2461-2497]:ExpressionStatement[2461-2497]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2506-2518]:ReturnStatement[2506-2518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2568-2625]:Block[2568-2625]"
    }, {
      "left" : "req.timeout(millis);",
      "right" : "req.timeout(millis);",
      "info" : "ExpressionStatement[2578-2598]:ExpressionStatement[2578-2598]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2607-2619]:ReturnStatement[2607-2619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2672-2732]:Block[2672-2732]"
    }, {
      "left" : "req.maxBodySize(bytes);",
      "right" : "req.maxBodySize(bytes);",
      "info" : "ExpressionStatement[2682-2705]:ExpressionStatement[2682-2705]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2714-2726]:ReturnStatement[2714-2726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2797-2871]:Block[2797-2871]"
    }, {
      "left" : "req.followRedirects(followRedirects);",
      "right" : "req.followRedirects(followRedirects);",
      "info" : "ExpressionStatement[2807-2844]:ExpressionStatement[2807-2844]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2853-2865]:ReturnStatement[2853-2865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2921-3055]:Block[2921-3055]"
    }, {
      "left" : "Validate.notNull(referrer, \"Referrer must not be null\");",
      "right" : "Validate.notNull(referrer, \"Referrer must not be null\");",
      "info" : "ExpressionStatement[2931-2987]:ExpressionStatement[2931-2987]"
    }, {
      "left" : "req.header(\"Referer\", referrer);",
      "right" : "req.header(\"Referer\", referrer);",
      "info" : "ExpressionStatement[2996-3028]:ExpressionStatement[2996-3028]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3037-3049]:ReturnStatement[3037-3049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3101-3157]:Block[3101-3157]"
    }, {
      "left" : "req.method(method);",
      "right" : "req.method(method);",
      "info" : "ExpressionStatement[3111-3130]:ExpressionStatement[3111-3130]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3139-3151]:ReturnStatement[3139-3151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3224-3285]:Block[3224-3285]"
    }, {
      "left" : "req.ignoreHttpErrors(ignoreHttpErrors);",
      "right" : "req.ignoreHttpErrors(ignoreHttpErrors);",
      "info" : "ExpressionStatement[3228-3267]:ExpressionStatement[3228-3267]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3270-3282]:ReturnStatement[3270-3282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3354-3432]:Block[3354-3432]"
    }, {
      "left" : "req.ignoreContentType(ignoreContentType);",
      "right" : "req.ignoreContentType(ignoreContentType);",
      "info" : "ExpressionStatement[3364-3405]:ExpressionStatement[3364-3405]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3414-3426]:ReturnStatement[3414-3426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3495-3567]:Block[3495-3567]"
    }, {
      "left" : "req.validateTLSCertificates(value);",
      "right" : "req.validateTLSCertificates(value);",
      "info" : "ExpressionStatement[3505-3540]:ExpressionStatement[3505-3540]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3549-3561]:ReturnStatement[3549-3561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3622-3695]:Block[3622-3695]"
    }, {
      "left" : "req.data(KeyVal.create(key, value));",
      "right" : "req.data(KeyVal.create(key, value));",
      "info" : "ExpressionStatement[3632-3668]:ExpressionStatement[3632-3668]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3677-3689]:ReturnStatement[3677-3689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3778-3867]:Block[3778-3867]"
    }, {
      "left" : "req.data(KeyVal.create(key, filename, inputStream));",
      "right" : "req.data(KeyVal.create(key, filename, inputStream));",
      "info" : "ExpressionStatement[3788-3840]:ExpressionStatement[3788-3840]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3849-3861]:ReturnStatement[3849-3861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3922-4158]:Block[3922-4158]"
    }, {
      "left" : "Validate.notNull(data, \"Data map must not be null\");",
      "right" : "Validate.notNull(data, \"Data map must not be null\");",
      "info" : "ExpressionStatement[3932-3984]:ExpressionStatement[3932-3984]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : data.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : data.entrySet())",
      "info" : "EnhancedForStatement[3993-4131]:EnhancedForStatement[3993-4131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4049-4131]:Block[4049-4131]"
    }, {
      "left" : "req.data(KeyVal.create(entry.getKey(), entry.getValue()));",
      "right" : "req.data(KeyVal.create(entry.getKey(), entry.getValue()));",
      "info" : "ExpressionStatement[4063-4121]:ExpressionStatement[4063-4121]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4140-4152]:ReturnStatement[4140-4152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4206-4733]:Block[4206-4733]"
    }, {
      "left" : "Validate.notNull(keyvals, \"Data key value pairs must not be null\");",
      "right" : "Validate.notNull(keyvals, \"Data key value pairs must not be null\");",
      "info" : "ExpressionStatement[4216-4283]:ExpressionStatement[4216-4283]"
    }, {
      "left" : "Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");",
      "right" : "Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");",
      "info" : "ExpressionStatement[4292-4381]:ExpressionStatement[4292-4381]"
    }, {
      "left" : "for (int i = 0; i < keyvals.length; i += 2)",
      "right" : "for (int i = 0; i < keyvals.length; i += 2)",
      "info" : "ForStatement[4390-4706]:ForStatement[4390-4706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4434-4706]:Block[4434-4706]"
    }, {
      "left" : "String key = keyvals[i];",
      "right" : "String key = keyvals[i];",
      "info" : "VariableDeclarationStatement[4448-4472]:VariableDeclarationStatement[4448-4472]"
    }, {
      "left" : "String value = keyvals[i+1];",
      "right" : "String value = keyvals[i+1];",
      "info" : "VariableDeclarationStatement[4485-4513]:VariableDeclarationStatement[4485-4513]"
    }, {
      "left" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "right" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "info" : "ExpressionStatement[4526-4579]:ExpressionStatement[4526-4579]"
    }, {
      "left" : "Validate.notNull(value, \"Data value must not be null\");",
      "right" : "Validate.notNull(value, \"Data value must not be null\");",
      "info" : "ExpressionStatement[4592-4647]:ExpressionStatement[4592-4647]"
    }, {
      "left" : "req.data(KeyVal.create(key, value));",
      "right" : "req.data(KeyVal.create(key, value));",
      "info" : "ExpressionStatement[4660-4696]:ExpressionStatement[4660-4696]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4715-4727]:ReturnStatement[4715-4727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4798-4979]:Block[4798-4979]"
    }, {
      "left" : "Validate.notNull(data, \"Data collection must not be null\");",
      "right" : "Validate.notNull(data, \"Data collection must not be null\");",
      "info" : "ExpressionStatement[4808-4867]:ExpressionStatement[4808-4867]"
    }, {
      "left" : "for (Connection.KeyVal entry: data)",
      "right" : "for (Connection.KeyVal entry: data)",
      "info" : "EnhancedForStatement[4876-4952]:EnhancedForStatement[4876-4952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4912-4952]:Block[4912-4952]"
    }, {
      "left" : "req.data(entry);",
      "right" : "req.data(entry);",
      "info" : "ExpressionStatement[4926-4942]:ExpressionStatement[4926-4942]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4961-4973]:ReturnStatement[4961-4973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5037-5098]:Block[5037-5098]"
    }, {
      "left" : "req.header(name, value);",
      "right" : "req.header(name, value);",
      "info" : "ExpressionStatement[5047-5071]:ExpressionStatement[5047-5071]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5080-5092]:ReturnStatement[5080-5092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5156-5217]:Block[5156-5217]"
    }, {
      "left" : "req.cookie(name, value);",
      "right" : "req.cookie(name, value);",
      "info" : "ExpressionStatement[5166-5190]:ExpressionStatement[5166-5190]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5199-5211]:ReturnStatement[5199-5211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5278-5509]:Block[5278-5509]"
    }, {
      "left" : "Validate.notNull(cookies, \"Cookie map must not be null\");",
      "right" : "Validate.notNull(cookies, \"Cookie map must not be null\");",
      "info" : "ExpressionStatement[5288-5345]:ExpressionStatement[5288-5345]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : cookies.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : cookies.entrySet())",
      "info" : "EnhancedForStatement[5354-5482]:EnhancedForStatement[5354-5482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5413-5482]:Block[5413-5482]"
    }, {
      "left" : "req.cookie(entry.getKey(), entry.getValue());",
      "right" : "req.cookie(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[5427-5472]:ExpressionStatement[5427-5472]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5491-5503]:ReturnStatement[5491-5503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5555-5611]:Block[5555-5611]"
    }, {
      "left" : "req.parser(parser);",
      "right" : "req.parser(parser);",
      "info" : "ExpressionStatement[5565-5584]:ExpressionStatement[5565-5584]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5593-5605]:ReturnStatement[5593-5605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5658-5744]:Block[5658-5744]"
    }, {
      "left" : "req.method(Method.GET);",
      "right" : "req.method(Method.GET);",
      "info" : "ExpressionStatement[5668-5691]:ExpressionStatement[5668-5691]"
    }, {
      "left" : "execute();",
      "right" : "execute();",
      "info" : "ExpressionStatement[5700-5710]:ExpressionStatement[5700-5710]"
    }, {
      "left" : "return res.parse();",
      "right" : "return res.parse();",
      "info" : "ReturnStatement[5719-5738]:ReturnStatement[5719-5738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5792-5879]:Block[5792-5879]"
    }, {
      "left" : "req.method(Method.POST);",
      "right" : "req.method(Method.POST);",
      "info" : "ExpressionStatement[5802-5826]:ExpressionStatement[5802-5826]"
    }, {
      "left" : "execute();",
      "right" : "execute();",
      "info" : "ExpressionStatement[5835-5845]:ExpressionStatement[5835-5845]"
    }, {
      "left" : "return res.parse();",
      "right" : "return res.parse();",
      "info" : "ReturnStatement[5854-5873]:ReturnStatement[5854-5873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5941-6005]:Block[5941-6005]"
    }, {
      "left" : "res = Response.execute(req);",
      "right" : "res = Response.execute(req);",
      "info" : "ExpressionStatement[5951-5979]:ExpressionStatement[5951-5979]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[5988-5999]:ReturnStatement[5988-5999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6047-6074]:Block[6047-6074]"
    }, {
      "left" : "return req;",
      "right" : "return req;",
      "info" : "ReturnStatement[6057-6068]:ReturnStatement[6057-6068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6134-6185]:Block[6134-6185]"
    }, {
      "left" : "req = request;",
      "right" : "req = request;",
      "info" : "ExpressionStatement[6144-6158]:ExpressionStatement[6144-6158]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6167-6179]:ReturnStatement[6167-6179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6229-6256]:Block[6229-6256]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[6239-6250]:ReturnStatement[6239-6250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6319-6371]:Block[6319-6371]"
    }, {
      "left" : "res = response;",
      "right" : "res = response;",
      "info" : "ExpressionStatement[6329-6344]:ExpressionStatement[6329-6344]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6353-6365]:ReturnStatement[6353-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6427-6493]:Block[6427-6493]"
    }, {
      "left" : "req.postDataCharset(charset);",
      "right" : "req.postDataCharset(charset);",
      "info" : "ExpressionStatement[6437-6466]:ExpressionStatement[6437-6466]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6475-6487]:ReturnStatement[6475-6487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6768-6897]:Block[6768-6897]"
    }, {
      "left" : "headers = new LinkedHashMap<String, String>();",
      "right" : "headers = new LinkedHashMap<String, String>();",
      "info" : "ExpressionStatement[6782-6828]:ExpressionStatement[6782-6828]"
    }, {
      "left" : "cookies = new LinkedHashMap<String, String>();",
      "right" : "cookies = new LinkedHashMap<String, String>();",
      "info" : "ExpressionStatement[6841-6887]:ExpressionStatement[6841-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6924-6959]:Block[6924-6959]"
    }, {
      "left" : "return url;",
      "right" : "return url;",
      "info" : "ReturnStatement[6938-6949]:ReturnStatement[6938-6949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6991-7118]:Block[6991-7118]"
    }, {
      "left" : "Validate.notNull(url, \"URL must not be null\");",
      "right" : "Validate.notNull(url, \"URL must not be null\");",
      "info" : "ExpressionStatement[7005-7051]:ExpressionStatement[7005-7051]"
    }, {
      "left" : "this.url = url;",
      "right" : "this.url = url;",
      "info" : "ExpressionStatement[7064-7079]:ExpressionStatement[7064-7079]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[7092-7108]:ReturnStatement[7092-7108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7151-7189]:Block[7151-7189]"
    }, {
      "left" : "return method;",
      "right" : "return method;",
      "info" : "ReturnStatement[7165-7179]:ReturnStatement[7165-7179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7230-7369]:Block[7230-7369]"
    }, {
      "left" : "Validate.notNull(method, \"Method must not be null\");",
      "right" : "Validate.notNull(method, \"Method must not be null\");",
      "info" : "ExpressionStatement[7244-7296]:ExpressionStatement[7244-7296]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[7309-7330]:ExpressionStatement[7309-7330]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[7343-7359]:ReturnStatement[7343-7359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7413-7543]:Block[7413-7543]"
    }, {
      "left" : "Validate.notNull(name, \"Header name must not be null\");",
      "right" : "Validate.notNull(name, \"Header name must not be null\");",
      "info" : "ExpressionStatement[7427-7482]:ExpressionStatement[7427-7482]"
    }, {
      "left" : "return getHeaderCaseInsensitive(name);",
      "right" : "return getHeaderCaseInsensitive(name);",
      "info" : "ReturnStatement[7495-7533]:ReturnStatement[7495-7533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7596-7915]:Block[7596-7915]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[7610-7667]:ExpressionStatement[7610-7667]"
    }, {
      "left" : "Validate.notNull(value, \"Header value must not be null\");",
      "right" : "Validate.notNull(value, \"Header value must not be null\");",
      "info" : "ExpressionStatement[7680-7737]:ExpressionStatement[7680-7737]"
    }, {
      "left" : "removeHeader(name);",
      "right" : "removeHeader(name);",
      "info" : "ExpressionStatement[7750-7769]:ExpressionStatement[7750-7769]"
    }, {
      "left" : "headers.put(name, value);",
      "right" : "headers.put(name, value);",
      "info" : "ExpressionStatement[7851-7876]:ExpressionStatement[7851-7876]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[7889-7905]:ReturnStatement[7889-7905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7963-8103]:Block[7963-8103]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[7977-8034]:ExpressionStatement[7977-8034]"
    }, {
      "left" : "return getHeaderCaseInsensitive(name) != null;",
      "right" : "return getHeaderCaseInsensitive(name) != null;",
      "info" : "ReturnStatement[8047-8093]:ReturnStatement[8047-8093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8278-8365]:Block[8278-8365]"
    }, {
      "left" : "return hasHeader(name) && header(name).equalsIgnoreCase(value);",
      "right" : "return hasHeader(name) && header(name).equalsIgnoreCase(value);",
      "info" : "ReturnStatement[8292-8355]:ReturnStatement[8292-8355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8410-8722]:Block[8410-8722]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[8424-8481]:ExpressionStatement[8424-8481]"
    }, {
      "left" : "Map.Entry<String, String> entry = scanHeaders(name);",
      "right" : "Map.Entry<String, String> entry = scanHeaders(name);",
      "info" : "VariableDeclarationStatement[8494-8546]:VariableDeclarationStatement[8494-8546]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[8593-8659]:IfStatement[8593-8659]"
    }, {
      "left" : "headers.remove(entry.getKey());",
      "right" : "headers.remove(entry.getKey());",
      "info" : "ExpressionStatement[8628-8659]:ExpressionStatement[8628-8659]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[8696-8712]:ReturnStatement[8696-8712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8769-8808]:Block[8769-8808]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[8783-8798]:ReturnStatement[8783-8798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8871-9397]:Block[8871-9397]"
    }, {
      "left" : "Validate.notNull(name, \"Header name must not be null\");",
      "right" : "Validate.notNull(name, \"Header name must not be null\");",
      "info" : "ExpressionStatement[8885-8940]:ExpressionStatement[8885-8940]"
    }, {
      "left" : "String value = headers.get(name);",
      "right" : "String value = headers.get(name);",
      "info" : "VariableDeclarationStatement[9043-9076]:VariableDeclarationStatement[9043-9076]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[9089-9164]:IfStatement[9089-9164]"
    }, {
      "left" : "value = headers.get(name.toLowerCase());",
      "right" : "value = headers.get(name.toLowerCase());",
      "info" : "ExpressionStatement[9124-9164]:ExpressionStatement[9124-9164]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[9177-9361]:IfStatement[9177-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9196-9361]:Block[9196-9361]"
    }, {
      "left" : "Map.Entry<String, String> entry = scanHeaders(name);",
      "right" : "Map.Entry<String, String> entry = scanHeaders(name);",
      "info" : "VariableDeclarationStatement[9214-9266]:VariableDeclarationStatement[9214-9266]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[9283-9347]:IfStatement[9283-9347]"
    }, {
      "left" : "value = entry.getValue();",
      "right" : "value = entry.getValue();",
      "info" : "ExpressionStatement[9322-9347]:ExpressionStatement[9322-9347]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[9374-9387]:ReturnStatement[9374-9387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9466-9728]:Block[9466-9728]"
    }, {
      "left" : "String lc = name.toLowerCase();",
      "right" : "String lc = name.toLowerCase();",
      "info" : "VariableDeclarationStatement[9480-9511]:VariableDeclarationStatement[9480-9511]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : headers.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : headers.entrySet())",
      "info" : "EnhancedForStatement[9524-9693]:EnhancedForStatement[9524-9693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9583-9693]:Block[9583-9693]"
    }, {
      "left" : "if (entry.getKey().toLowerCase().equals(lc))",
      "right" : "if (entry.getKey().toLowerCase().equals(lc))",
      "info" : "IfStatement[9601-9679]:IfStatement[9601-9679]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[9666-9679]:ReturnStatement[9666-9679]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9706-9718]:ReturnStatement[9706-9718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9772-9891]:Block[9772-9891]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[9786-9843]:ExpressionStatement[9786-9843]"
    }, {
      "left" : "return cookies.get(name);",
      "right" : "return cookies.get(name);",
      "info" : "ReturnStatement[9856-9881]:ReturnStatement[9856-9881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9944-10162]:Block[9944-10162]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[9958-10015]:ExpressionStatement[9958-10015]"
    }, {
      "left" : "Validate.notNull(value, \"Cookie value must not be null\");",
      "right" : "Validate.notNull(value, \"Cookie value must not be null\");",
      "info" : "ExpressionStatement[10028-10085]:ExpressionStatement[10028-10085]"
    }, {
      "left" : "cookies.put(name, value);",
      "right" : "cookies.put(name, value);",
      "info" : "ExpressionStatement[10098-10123]:ExpressionStatement[10098-10123]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[10136-10152]:ReturnStatement[10136-10152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10210-10337]:Block[10210-10337]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[10224-10281]:ExpressionStatement[10224-10281]"
    }, {
      "left" : "return cookies.containsKey(name);",
      "right" : "return cookies.containsKey(name);",
      "info" : "ReturnStatement[10294-10327]:ReturnStatement[10294-10327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10382-10526]:Block[10382-10526]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[10396-10453]:ExpressionStatement[10396-10453]"
    }, {
      "left" : "cookies.remove(name);",
      "right" : "cookies.remove(name);",
      "info" : "ExpressionStatement[10466-10487]:ExpressionStatement[10466-10487]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[10500-10516]:ReturnStatement[10500-10516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10573-10612]:Block[10573-10612]"
    }, {
      "left" : "return cookies;",
      "right" : "return cookies;",
      "info" : "ReturnStatement[10587-10602]:ReturnStatement[10587-10602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11277-11597]:Block[11277-11597]"
    }, {
      "left" : "timeoutMilliseconds = 3000;",
      "right" : "timeoutMilliseconds = 3000;",
      "info" : "ExpressionStatement[11291-11318]:ExpressionStatement[11291-11318]"
    }, {
      "left" : "maxBodySizeBytes = 1024 * 1024;",
      "right" : "maxBodySizeBytes = 1024 * 1024;",
      "info" : "ExpressionStatement[11331-11362]:ExpressionStatement[11331-11362]"
    }, {
      "left" : "followRedirects = true;",
      "right" : "followRedirects = true;",
      "info" : "ExpressionStatement[11382-11405]:ExpressionStatement[11382-11405]"
    }, {
      "left" : "data = new ArrayList<Connection.KeyVal>();",
      "right" : "data = new ArrayList<Connection.KeyVal>();",
      "info" : "ExpressionStatement[11418-11460]:ExpressionStatement[11418-11460]"
    }, {
      "left" : "method = Method.GET;",
      "right" : "method = Method.GET;",
      "info" : "ExpressionStatement[11473-11493]:ExpressionStatement[11473-11493]"
    }, {
      "left" : "headers.put(\"Accept-Encoding\", \"gzip\");",
      "right" : "headers.put(\"Accept-Encoding\", \"gzip\");",
      "info" : "ExpressionStatement[11506-11545]:ExpressionStatement[11506-11545]"
    }, {
      "left" : "parser = Parser.htmlParser();",
      "right" : "parser = Parser.htmlParser();",
      "info" : "ExpressionStatement[11558-11587]:ExpressionStatement[11558-11587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11628-11679]:Block[11628-11679]"
    }, {
      "left" : "return timeoutMilliseconds;",
      "right" : "return timeoutMilliseconds;",
      "info" : "ReturnStatement[11642-11669]:ReturnStatement[11642-11669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11724-11900]:Block[11724-11900]"
    }, {
      "left" : "Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");",
      "right" : "Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");",
      "info" : "ExpressionStatement[11738-11823]:ExpressionStatement[11738-11823]"
    }, {
      "left" : "timeoutMilliseconds = millis;",
      "right" : "timeoutMilliseconds = millis;",
      "info" : "ExpressionStatement[11836-11865]:ExpressionStatement[11836-11865]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11878-11890]:ReturnStatement[11878-11890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11935-11983]:Block[11935-11983]"
    }, {
      "left" : "return maxBodySizeBytes;",
      "right" : "return maxBodySizeBytes;",
      "info" : "ReturnStatement[11949-11973]:ReturnStatement[11949-11973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12042-12200]:Block[12042-12200]"
    }, {
      "left" : "Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[12056-12127]:ExpressionStatement[12056-12127]"
    }, {
      "left" : "maxBodySizeBytes = bytes;",
      "right" : "maxBodySizeBytes = bytes;",
      "info" : "ExpressionStatement[12140-12165]:ExpressionStatement[12140-12165]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12178-12190]:ReturnStatement[12178-12190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12243-12290]:Block[12243-12290]"
    }, {
      "left" : "return followRedirects;",
      "right" : "return followRedirects;",
      "info" : "ReturnStatement[12257-12280]:ReturnStatement[12257-12280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12367-12455]:Block[12367-12455]"
    }, {
      "left" : "this.followRedirects = followRedirects;",
      "right" : "this.followRedirects = followRedirects;",
      "info" : "ExpressionStatement[12381-12420]:ExpressionStatement[12381-12420]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12433-12445]:ReturnStatement[12433-12445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12499-12547]:Block[12499-12547]"
    }, {
      "left" : "return ignoreHttpErrors;",
      "right" : "return ignoreHttpErrors;",
      "info" : "ReturnStatement[12513-12537]:ReturnStatement[12513-12537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12598-12653]:Block[12598-12653]"
    }, {
      "left" : "return validateTSLCertificates;",
      "right" : "return validateTSLCertificates;",
      "info" : "ReturnStatement[12612-12643]:ReturnStatement[12612-12643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12714-12770]:Block[12714-12770]"
    }, {
      "left" : "validateTSLCertificates = value;",
      "right" : "validateTSLCertificates = value;",
      "info" : "ExpressionStatement[12728-12760]:ExpressionStatement[12728-12760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12849-12939]:Block[12849-12939]"
    }, {
      "left" : "this.ignoreHttpErrors = ignoreHttpErrors;",
      "right" : "this.ignoreHttpErrors = ignoreHttpErrors;",
      "info" : "ExpressionStatement[12863-12904]:ExpressionStatement[12863-12904]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12917-12929]:ReturnStatement[12917-12929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12984-13033]:Block[12984-13033]"
    }, {
      "left" : "return ignoreContentType;",
      "right" : "return ignoreContentType;",
      "info" : "ReturnStatement[12998-13023]:ReturnStatement[12998-13023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13206]:Block[13114-13206]"
    }, {
      "left" : "this.ignoreContentType = ignoreContentType;",
      "right" : "this.ignoreContentType = ignoreContentType;",
      "info" : "ExpressionStatement[13128-13171]:ExpressionStatement[13128-13171]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13184-13196]:ReturnStatement[13184-13196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13262-13394]:Block[13262-13394]"
    }, {
      "left" : "Validate.notNull(keyval, \"Key val must not be null\");",
      "right" : "Validate.notNull(keyval, \"Key val must not be null\");",
      "info" : "ExpressionStatement[13276-13329]:ExpressionStatement[13276-13329]"
    }, {
      "left" : "data.add(keyval);",
      "right" : "data.add(keyval);",
      "info" : "ExpressionStatement[13342-13359]:ExpressionStatement[13342-13359]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13372-13384]:ReturnStatement[13372-13384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13448-13484]:Block[13448-13484]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[13462-13474]:ReturnStatement[13462-13474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13531-13635]:Block[13531-13635]"
    }, {
      "left" : "this.parser = parser;",
      "right" : "this.parser = parser;",
      "info" : "ExpressionStatement[13545-13566]:ExpressionStatement[13545-13566]"
    }, {
      "left" : "parserDefined = true;",
      "right" : "parserDefined = true;",
      "info" : "ExpressionStatement[13579-13600]:ExpressionStatement[13579-13600]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13613-13625]:ReturnStatement[13613-13625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13668-13706]:Block[13668-13706]"
    }, {
      "left" : "return parser;",
      "right" : "return parser;",
      "info" : "ReturnStatement[13682-13696]:ReturnStatement[13682-13696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13774-14016]:Block[13774-14016]"
    }, {
      "left" : "Validate.notNull(charset, \"Charset must not be null\");",
      "right" : "Validate.notNull(charset, \"Charset must not be null\");",
      "info" : "ExpressionStatement[13788-13842]:ExpressionStatement[13788-13842]"
    }, {
      "left" : "if (!Charset.isSupported(charset))",
      "right" : "if (!Charset.isSupported(charset))",
      "info" : "IfStatement[13855-13937]:IfStatement[13855-13937]"
    }, {
      "left" : "throw new IllegalCharsetNameException(charset);",
      "right" : "throw new IllegalCharsetNameException(charset);",
      "info" : "ThrowStatement[13890-13937]:ThrowStatement[13890-13937]"
    }, {
      "left" : "this.postDataCharset = charset;",
      "right" : "this.postDataCharset = charset;",
      "info" : "ExpressionStatement[13950-13981]:ExpressionStatement[13950-13981]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13994-14006]:ReturnStatement[13994-14006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14058-14105]:Block[14058-14105]"
    }, {
      "left" : "return postDataCharset;",
      "right" : "return postDataCharset;",
      "info" : "ReturnStatement[14072-14095]:ReturnStatement[14072-14095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14941-14973]:Block[14941-14973]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[14955-14963]:SuperConstructorInvocation[14955-14963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15046-15388]:Block[15046-15388]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[15060-15068]:SuperConstructorInvocation[15060-15068]"
    }, {
      "left" : "if (previousResponse != null)",
      "right" : "if (previousResponse != null)",
      "info" : "IfStatement[15081-15378]:IfStatement[15081-15378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15111-15378]:Block[15111-15378]"
    }, {
      "left" : "numRedirects = previousResponse.numRedirects + 1;",
      "right" : "numRedirects = previousResponse.numRedirects + 1;",
      "info" : "ExpressionStatement[15129-15178]:ExpressionStatement[15129-15178]"
    }, {
      "left" : "if (numRedirects >= MAX_REDIRECTS)",
      "right" : "if (numRedirects >= MAX_REDIRECTS)",
      "info" : "IfStatement[15195-15364]:IfStatement[15195-15364]"
    }, {
      "left" : "throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));",
      "right" : "throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));",
      "info" : "ThrowStatement[15250-15364]:ThrowStatement[15250-15364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15465-15515]:Block[15465-15515]"
    }, {
      "left" : "return execute(req, null);",
      "right" : "return execute(req, null);",
      "info" : "ReturnStatement[15479-15505]:ReturnStatement[15479-15505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15619-20542]:Block[15619-20542]"
    }, {
      "left" : "Validate.notNull(req, \"Request must not be null\");",
      "right" : "Validate.notNull(req, \"Request must not be null\");",
      "info" : "ExpressionStatement[15633-15683]:ExpressionStatement[15633-15683]"
    }, {
      "left" : "String protocol = req.url().getProtocol();",
      "right" : "String protocol = req.url().getProtocol();",
      "info" : "VariableDeclarationStatement[15696-15738]:VariableDeclarationStatement[15696-15738]"
    }, {
      "left" : "if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))",
      "right" : "if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))",
      "info" : "IfStatement[15751-15899]:IfStatement[15751-15899]"
    }, {
      "left" : "throw new MalformedURLException(\"Only http & https protocols supported\");",
      "right" : "throw new MalformedURLException(\"Only http & https protocols supported\");",
      "info" : "ThrowStatement[15826-15899]:ThrowStatement[15826-15899]"
    }, {
      "left" : "String mimeBoundary = null;",
      "right" : "String mimeBoundary = null;",
      "info" : "VariableDeclarationStatement[15961-15988]:VariableDeclarationStatement[15961-15988]"
    }, {
      "left" : "if (!req.method().hasBody() && req.data().size() > 0)",
      "right" : "if (!req.method().hasBody() && req.data().size() > 0)",
      "info" : "IfStatement[16001-16243]:IfStatement[16001-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16055-16136]:Block[16055-16136]"
    }, {
      "left" : "serialiseRequestUrl(req);",
      "right" : "serialiseRequestUrl(req);",
      "info" : "ExpressionStatement[16073-16098]:ExpressionStatement[16073-16098]"
    }, {
      "left" : "if (req.method().hasBody())",
      "right" : "if (req.method().hasBody())",
      "info" : "IfStatement[16142-16243]:IfStatement[16142-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16170-16243]:Block[16170-16243]"
    }, {
      "left" : "mimeBoundary = setOutputContentType(req);",
      "right" : "mimeBoundary = setOutputContentType(req);",
      "info" : "ExpressionStatement[16188-16229]:ExpressionStatement[16188-16229]"
    }, {
      "left" : "HttpURLConnection conn = createConnection(req);",
      "right" : "HttpURLConnection conn = createConnection(req);",
      "info" : "VariableDeclarationStatement[16256-16303]:VariableDeclarationStatement[16256-16303]"
    }, {
      "left" : "Response res;",
      "right" : "Response res;",
      "info" : "VariableDeclarationStatement[16316-16329]:VariableDeclarationStatement[16316-16329]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16342-20474]:TryStatement[16342-20474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16346-20184]:Block[16346-20184]"
    }, {
      "left" : "conn.connect();",
      "right" : "conn.connect();",
      "info" : "ExpressionStatement[16364-16379]:ExpressionStatement[16364-16379]"
    }, {
      "left" : "if (conn.getDoOutput())",
      "right" : "if (conn.getDoOutput())",
      "info" : "IfStatement[16396-16493]:IfStatement[16396-16493]"
    }, {
      "left" : "writePost(req, conn.getOutputStream(), mimeBoundary);",
      "right" : "writePost(req, conn.getOutputStream(), mimeBoundary);",
      "info" : "ExpressionStatement[16440-16493]:ExpressionStatement[16440-16493]"
    }, {
      "left" : "int status = conn.getResponseCode();",
      "right" : "int status = conn.getResponseCode();",
      "info" : "VariableDeclarationStatement[16511-16547]:VariableDeclarationStatement[16511-16547]"
    }, {
      "left" : "res = new Response(previousResponse);",
      "right" : "res = new Response(previousResponse);",
      "info" : "ExpressionStatement[16564-16601]:ExpressionStatement[16564-16601]"
    }, {
      "left" : "res.setupFromConnection(conn, previousResponse);",
      "right" : "res.setupFromConnection(conn, previousResponse);",
      "info" : "ExpressionStatement[16618-16666]:ExpressionStatement[16618-16666]"
    }, {
      "left" : "res.req = req;",
      "right" : "res.req = req;",
      "info" : "ExpressionStatement[16683-16697]:ExpressionStatement[16683-16697]"
    }, {
      "left" : "if (res.hasHeader(LOCATION) && req.followRedirects())",
      "right" : "if (res.hasHeader(LOCATION) && req.followRedirects())",
      "info" : "IfStatement[16795-17674]:IfStatement[16795-17674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16849-17674]:Block[16849-17674]"
    }, {
      "left" : "req.method(Method.GET);",
      "right" : "req.method(Method.GET);",
      "info" : "ExpressionStatement[16871-16894]:ExpressionStatement[16871-16894]"
    }, {
      "left" : "req.data().clear();",
      "right" : "req.data().clear();",
      "info" : "ExpressionStatement[16992-17011]:ExpressionStatement[16992-17011]"
    }, {
      "left" : "String location = res.header(LOCATION);",
      "right" : "String location = res.header(LOCATION);",
      "info" : "VariableDeclarationStatement[17033-17072]:VariableDeclarationStatement[17033-17072]"
    }, {
      "left" : "if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/')",
      "right" : "if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/')",
      "info" : "IfStatement[17093-17290]:IfStatement[17093-17290]"
    }, {
      "left" : "location = location.substring(6);",
      "right" : "location = location.substring(6);",
      "info" : "ExpressionStatement[17257-17290]:ExpressionStatement[17257-17290]"
    }, {
      "left" : "req.url(StringUtil.resolve(req.url(), encodeUrl(location)));",
      "right" : "req.url(StringUtil.resolve(req.url(), encodeUrl(location)));",
      "info" : "ExpressionStatement[17311-17371]:ExpressionStatement[17311-17371]"
    }, {
      "left" : "for (Map.Entry<String, String> cookie : res.cookies.entrySet())",
      "right" : "for (Map.Entry<String, String> cookie : res.cookies.entrySet())",
      "info" : "EnhancedForStatement[17393-17610]:EnhancedForStatement[17393-17610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17457-17610]:Block[17457-17610]"
    }, {
      "left" : "req.cookie(cookie.getKey(), cookie.getValue());",
      "right" : "req.cookie(cookie.getKey(), cookie.getValue());",
      "info" : "ExpressionStatement[17541-17588]:ExpressionStatement[17541-17588]"
    }, {
      "left" : "return execute(req, res);",
      "right" : "return execute(req, res);",
      "info" : "ReturnStatement[17631-17656]:ReturnStatement[17631-17656]"
    }, {
      "left" : "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())",
      "right" : "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())",
      "info" : "IfStatement[17691-17866]:IfStatement[17691-17866]"
    }, {
      "left" : "throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());",
      "right" : "throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());",
      "info" : "ThrowStatement[17779-17866]:ThrowStatement[17779-17866]"
    }, {
      "left" : "String contentType = res.contentType();",
      "right" : "String contentType = res.contentType();",
      "info" : "VariableDeclarationStatement[17988-18027]:VariableDeclarationStatement[17988-18027]"
    }, {
      "left" : "if (contentType != null\n                        && !req.ignoreContentType()\n                        && !contentType.startsWith(\"text/\")\n                        && !xmlContentTypeRxp.matcher(contentType).matches())",
      "right" : "if (contentType != null\n                        && !req.ignoreContentType()\n                        && !contentType.startsWith(\"text/\")\n                        && !xmlContentTypeRxp.matcher(contentType).matches())",
      "info" : "IfStatement[18044-18490]:IfStatement[18044-18490]"
    }, {
      "left" : "throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                            contentType, req.url().toString());",
      "right" : "throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                            contentType, req.url().toString());",
      "info" : "ThrowStatement[18303-18490]:ThrowStatement[18303-18490]"
    }, {
      "left" : "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches())",
      "right" : "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches())",
      "info" : "IfStatement[18609-18988]:IfStatement[18609-18988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18686-18988]:Block[18686-18988]"
    }, {
      "left" : "if (req instanceof HttpConnection.Request && !((Request) req).parserDefined)",
      "right" : "if (req instanceof HttpConnection.Request && !((Request) req).parserDefined)",
      "info" : "IfStatement[18814-18970]:IfStatement[18814-18970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18891-18970]:Block[18891-18970]"
    }, {
      "left" : "req.parser(Parser.xmlParser());",
      "right" : "req.parser(Parser.xmlParser());",
      "info" : "ExpressionStatement[18917-18948]:ExpressionStatement[18917-18948]"
    }, {
      "left" : "res.charset = DataUtil.getCharsetFromContentType(res.contentType);",
      "right" : "res.charset = DataUtil.getCharsetFromContentType(res.contentType);",
      "info" : "ExpressionStatement[19006-19072]:ExpressionStatement[19006-19072]"
    }, {
      "left" : "if (conn.getContentLength() != 0)",
      "right" : "if (conn.getContentLength() != 0)",
      "info" : "IfStatement[19135-20170]:IfStatement[19135-20170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19169-20082]:Block[19169-20082]"
    }, {
      "left" : "InputStream bodyStream = null;",
      "right" : "InputStream bodyStream = null;",
      "info" : "VariableDeclarationStatement[19305-19335]:VariableDeclarationStatement[19305-19335]"
    }, {
      "left" : "InputStream dataStream = null;",
      "right" : "InputStream dataStream = null;",
      "info" : "VariableDeclarationStatement[19356-19386]:VariableDeclarationStatement[19356-19386]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19407-20064]:TryStatement[19407-20064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19411-19896]:Block[19411-19896]"
    }, {
      "left" : "dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();",
      "right" : "dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();",
      "info" : "ExpressionStatement[19437-19528]:ExpressionStatement[19437-19528]"
    }, {
      "left" : "bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ?\n                                new BufferedInputStream(new GZIPInputStream(dataStream)) :\n                                new BufferedInputStream(dataStream);",
      "right" : "bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ?\n                                new BufferedInputStream(new GZIPInputStream(dataStream)) :\n                                new BufferedInputStream(dataStream);",
      "info" : "ExpressionStatement[19553-19776]:ExpressionStatement[19553-19776]"
    }, {
      "left" : "res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());",
      "right" : "res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());",
      "info" : "ExpressionStatement[19802-19874]:ExpressionStatement[19802-19874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19905-20064]:Block[19905-20064]"
    }, {
      "left" : "if (bodyStream != null)",
      "right" : "if (bodyStream != null)",
      "info" : "IfStatement[19931-19974]:IfStatement[19931-19974]"
    }, {
      "left" : "bodyStream.close();",
      "right" : "bodyStream.close();",
      "info" : "ExpressionStatement[19955-19974]:ExpressionStatement[19955-19974]"
    }, {
      "left" : "if (dataStream != null)",
      "right" : "if (dataStream != null)",
      "info" : "IfStatement[19999-20042]:IfStatement[19999-20042]"
    }, {
      "left" : "dataStream.close();",
      "right" : "dataStream.close();",
      "info" : "ExpressionStatement[20023-20042]:ExpressionStatement[20023-20042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20088-20170]:Block[20088-20170]"
    }, {
      "left" : "res.byteData = DataUtil.emptyByteBuffer();",
      "right" : "res.byteData = DataUtil.emptyByteBuffer();",
      "info" : "ExpressionStatement[20110-20152]:ExpressionStatement[20110-20152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20193-20474]:Block[20193-20474]"
    }, {
      "left" : "conn.disconnect();",
      "right" : "conn.disconnect();",
      "info" : "ExpressionStatement[20442-20460]:ExpressionStatement[20442-20460]"
    }, {
      "left" : "res.executed = true;",
      "right" : "res.executed = true;",
      "info" : "ExpressionStatement[20488-20508]:ExpressionStatement[20488-20508]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[20521-20532]:ReturnStatement[20521-20532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20576-20618]:Block[20576-20618]"
    }, {
      "left" : "return statusCode;",
      "right" : "return statusCode;",
      "info" : "ReturnStatement[20590-20608]:ReturnStatement[20590-20608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20658-20703]:Block[20658-20703]"
    }, {
      "left" : "return statusMessage;",
      "right" : "return statusMessage;",
      "info" : "ReturnStatement[20672-20693]:ReturnStatement[20672-20693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20737-20776]:Block[20737-20776]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[20751-20766]:ReturnStatement[20751-20766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20814-20857]:Block[20814-20857]"
    }, {
      "left" : "return contentType;",
      "right" : "return contentType;",
      "info" : "ReturnStatement[20828-20847]:ReturnStatement[20828-20847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20910-21315]:Block[20910-21315]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");",
      "info" : "ExpressionStatement[20924-21039]:ExpressionStatement[20924-21039]"
    }, {
      "left" : "Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm(), req.parser());",
      "right" : "Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm(), req.parser());",
      "info" : "VariableDeclarationStatement[21052-21145]:VariableDeclarationStatement[21052-21145]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[21158-21176]:ExpressionStatement[21158-21176]"
    }, {
      "left" : "charset = doc.outputSettings().charset().name();",
      "right" : "charset = doc.outputSettings().charset().name();",
      "info" : "ExpressionStatement[21189-21237]:ExpressionStatement[21189-21237]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[21294-21305]:ReturnStatement[21294-21305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21346-21909]:Block[21346-21909]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "info" : "ExpressionStatement[21360-21480]:ExpressionStatement[21360-21480]"
    }, {
      "left" : "String body;",
      "right" : "String body;",
      "info" : "VariableDeclarationStatement[21611-21623]:VariableDeclarationStatement[21611-21623]"
    }, {
      "left" : "if (charset == null)",
      "right" : "if (charset == null)",
      "info" : "IfStatement[21636-21843]:IfStatement[21636-21843]"
    }, {
      "left" : "body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();",
      "right" : "body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[21673-21749]:ExpressionStatement[21673-21749]"
    }, {
      "left" : "body = Charset.forName(charset).decode(byteData).toString();",
      "right" : "body = Charset.forName(charset).decode(byteData).toString();",
      "info" : "ExpressionStatement[21783-21843]:ExpressionStatement[21783-21843]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[21856-21874]:ExpressionStatement[21856-21874]"
    }, {
      "left" : "return body;",
      "right" : "return body;",
      "info" : "ReturnStatement[21887-21899]:ReturnStatement[21887-21899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21947-22128]:Block[21947-22128]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "info" : "ExpressionStatement[21961-22081]:ExpressionStatement[21961-22081]"
    }, {
      "left" : "return byteData.array();",
      "right" : "return byteData.array();",
      "info" : "ReturnStatement[22094-22118]:ReturnStatement[22094-22118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22295-23399]:Block[22295-23399]"
    }, {
      "left" : "HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();",
      "right" : "HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();",
      "info" : "VariableDeclarationStatement[22309-22381]:VariableDeclarationStatement[22309-22381]"
    }, {
      "left" : "conn.setRequestMethod(req.method().name());",
      "right" : "conn.setRequestMethod(req.method().name());",
      "info" : "ExpressionStatement[22395-22438]:ExpressionStatement[22395-22438]"
    }, {
      "left" : "conn.setInstanceFollowRedirects(false);",
      "right" : "conn.setInstanceFollowRedirects(false);",
      "info" : "ExpressionStatement[22451-22490]:ExpressionStatement[22451-22490]"
    }, {
      "left" : "conn.setConnectTimeout(req.timeout());",
      "right" : "conn.setConnectTimeout(req.timeout());",
      "info" : "ExpressionStatement[22547-22585]:ExpressionStatement[22547-22585]"
    }, {
      "left" : "conn.setReadTimeout(req.timeout());",
      "right" : "conn.setReadTimeout(req.timeout());",
      "info" : "ExpressionStatement[22598-22633]:ExpressionStatement[22598-22633]"
    }, {
      "left" : "if (conn instanceof HttpsURLConnection)",
      "right" : "if (conn instanceof HttpsURLConnection)",
      "info" : "IfStatement[22647-22990]:IfStatement[22647-22990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22687-22990]:Block[22687-22990]"
    }, {
      "left" : "if (!req.validateTLSCertificates())",
      "right" : "if (!req.validateTLSCertificates())",
      "info" : "IfStatement[22705-22976]:IfStatement[22705-22976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22741-22976]:Block[22741-22976]"
    }, {
      "left" : "initUnSecureTSL();",
      "right" : "initUnSecureTSL();",
      "info" : "ExpressionStatement[22763-22781]:ExpressionStatement[22763-22781]"
    }, {
      "left" : "((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);",
      "right" : "((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);",
      "info" : "ExpressionStatement[22802-22867]:ExpressionStatement[22802-22867]"
    }, {
      "left" : "((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());",
      "right" : "((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());",
      "info" : "ExpressionStatement[22888-22958]:ExpressionStatement[22888-22958]"
    }, {
      "left" : "if (req.method().hasBody())",
      "right" : "if (req.method().hasBody())",
      "info" : "IfStatement[23004-23071]:IfStatement[23004-23071]"
    }, {
      "left" : "conn.setDoOutput(true);",
      "right" : "conn.setDoOutput(true);",
      "info" : "ExpressionStatement[23048-23071]:ExpressionStatement[23048-23071]"
    }, {
      "left" : "if (req.cookies().size() > 0)",
      "right" : "if (req.cookies().size() > 0)",
      "info" : "IfStatement[23084-23193]:IfStatement[23084-23193]"
    }, {
      "left" : "conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));",
      "right" : "conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));",
      "info" : "ExpressionStatement[23130-23193]:ExpressionStatement[23130-23193]"
    }, {
      "left" : "for (Map.Entry<String, String> header : req.headers().entrySet())",
      "right" : "for (Map.Entry<String, String> header : req.headers().entrySet())",
      "info" : "EnhancedForStatement[23206-23364]:EnhancedForStatement[23206-23364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23272-23364]:Block[23272-23364]"
    }, {
      "left" : "conn.addRequestProperty(header.getKey(), header.getValue());",
      "right" : "conn.addRequestProperty(header.getKey(), header.getValue());",
      "info" : "ExpressionStatement[23290-23350]:ExpressionStatement[23290-23350]"
    }, {
      "left" : "return conn;",
      "right" : "return conn;",
      "info" : "ReturnStatement[23377-23389]:ReturnStatement[23377-23389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23733-23934]:Block[23733-23934]"
    }, {
      "left" : "return new HostnameVerifier() {\n                public boolean verify(String urlHostName, SSLSession session) {\n                    return true;\n                }\n            };",
      "right" : "return new HostnameVerifier() {\n                public boolean verify(String urlHostName, SSLSession session) {\n                    return true;\n                }\n            };",
      "info" : "ReturnStatement[23747-23924]:ReturnStatement[23747-23924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23857-23909]:Block[23857-23909]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23879-23891]:ReturnStatement[23879-23891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24339-25722]:Block[24339-25722]"
    }, {
      "left" : "if (sslSocketFactory == null)",
      "right" : "if (sslSocketFactory == null)",
      "info" : "IfStatement[24353-25711]:IfStatement[24353-25711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24383-25711]:Block[24383-25711]"
    }, {
      "left" : "final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n\n                    public void checkClientTrusted(final X509Certificate[] chain, final String authType) {\n                    }\n\n                    public void checkServerTrusted(final X509Certificate[] chain, final String authType) {\n                    }\n\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n                }};",
      "right" : "final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n\n                    public void checkClientTrusted(final X509Certificate[] chain, final String authType) {\n                    }\n\n                    public void checkServerTrusted(final X509Certificate[] chain, final String authType) {\n                    }\n\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n                }};",
      "info" : "VariableDeclarationStatement[24485-24973]:VariableDeclarationStatement[24485-24973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24672-24695]:Block[24672-24695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24802-24825]:Block[24802-24825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24893-24953]:Block[24893-24953]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24919-24931]:ReturnStatement[24919-24931]"
    }, {
      "left" : "final SSLContext sslContext;",
      "right" : "final SSLContext sslContext;",
      "info" : "VariableDeclarationStatement[25049-25077]:VariableDeclarationStatement[25049-25077]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25094-25697]:TryStatement[25094-25697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25098-25425]:Block[25098-25425]"
    }, {
      "left" : "sslContext = SSLContext.getInstance(\"SSL\");",
      "right" : "sslContext = SSLContext.getInstance(\"SSL\");",
      "info" : "ExpressionStatement[25120-25163]:ExpressionStatement[25120-25163]"
    }, {
      "left" : "sslContext.init(null, trustAllCerts, new java.security.SecureRandom());",
      "right" : "sslContext.init(null, trustAllCerts, new java.security.SecureRandom());",
      "info" : "ExpressionStatement[25184-25255]:ExpressionStatement[25184-25255]"
    }, {
      "left" : "sslSocketFactory = sslContext.getSocketFactory();",
      "right" : "sslSocketFactory = sslContext.getSocketFactory();",
      "info" : "ExpressionStatement[25358-25407]:ExpressionStatement[25358-25407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25461-25562]:Block[25461-25562]"
    }, {
      "left" : "throw new IOException(\"Can't create unsecure trust manager\");",
      "right" : "throw new IOException(\"Can't create unsecure trust manager\");",
      "info" : "ThrowStatement[25483-25544]:ThrowStatement[25483-25544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25596-25697]:Block[25596-25697]"
    }, {
      "left" : "throw new IOException(\"Can't create unsecure trust manager\");",
      "right" : "throw new IOException(\"Can't create unsecure trust manager\");",
      "info" : "ThrowStatement[25618-25679]:ThrowStatement[25618-25679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25893-26670]:Block[25893-26670]"
    }, {
      "left" : "method = Method.valueOf(conn.getRequestMethod());",
      "right" : "method = Method.valueOf(conn.getRequestMethod());",
      "info" : "ExpressionStatement[25907-25956]:ExpressionStatement[25907-25956]"
    }, {
      "left" : "url = conn.getURL();",
      "right" : "url = conn.getURL();",
      "info" : "ExpressionStatement[25969-25989]:ExpressionStatement[25969-25989]"
    }, {
      "left" : "statusCode = conn.getResponseCode();",
      "right" : "statusCode = conn.getResponseCode();",
      "info" : "ExpressionStatement[26002-26038]:ExpressionStatement[26002-26038]"
    }, {
      "left" : "statusMessage = conn.getResponseMessage();",
      "right" : "statusMessage = conn.getResponseMessage();",
      "info" : "ExpressionStatement[26051-26093]:ExpressionStatement[26051-26093]"
    }, {
      "left" : "contentType = conn.getContentType();",
      "right" : "contentType = conn.getContentType();",
      "info" : "ExpressionStatement[26106-26142]:ExpressionStatement[26106-26142]"
    }, {
      "left" : "Map<String, List<String>> resHeaders = createHeaderMap(conn);",
      "right" : "Map<String, List<String>> resHeaders = createHeaderMap(conn);",
      "info" : "VariableDeclarationStatement[26156-26217]:VariableDeclarationStatement[26156-26217]"
    }, {
      "left" : "processResponseHeaders(resHeaders);",
      "right" : "processResponseHeaders(resHeaders);",
      "info" : "ExpressionStatement[26230-26265]:ExpressionStatement[26230-26265]"
    }, {
      "left" : "if (previousResponse != null)",
      "right" : "if (previousResponse != null)",
      "info" : "IfStatement[26363-26660]:IfStatement[26363-26660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26393-26660]:Block[26393-26660]"
    }, {
      "left" : "for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet())",
      "right" : "for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet())",
      "info" : "EnhancedForStatement[26411-26646]:EnhancedForStatement[26411-26646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26494-26646]:Block[26494-26646]"
    }, {
      "left" : "if (!hasCookie(prevCookie.getKey()))",
      "right" : "if (!hasCookie(prevCookie.getKey()))",
      "info" : "IfStatement[26516-26628]:IfStatement[26516-26628]"
    }, {
      "left" : "cookie(prevCookie.getKey(), prevCookie.getValue());",
      "right" : "cookie(prevCookie.getKey(), prevCookie.getValue());",
      "info" : "ExpressionStatement[26577-26628]:ExpressionStatement[26577-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26771-27684]:Block[26771-27684]"
    }, {
      "left" : "final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<String, List<String>>();",
      "right" : "final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<String, List<String>>();",
      "info" : "VariableDeclarationStatement[26882-26976]:VariableDeclarationStatement[26882-26976]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[26989-26999]:VariableDeclarationStatement[26989-26999]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[27012-27646]:WhileStatement[27012-27646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27025-27646]:Block[27025-27646]"
    }, {
      "left" : "final String key = conn.getHeaderFieldKey(i);",
      "right" : "final String key = conn.getHeaderFieldKey(i);",
      "info" : "VariableDeclarationStatement[27043-27088]:VariableDeclarationStatement[27043-27088]"
    }, {
      "left" : "final String val = conn.getHeaderField(i);",
      "right" : "final String val = conn.getHeaderField(i);",
      "info" : "VariableDeclarationStatement[27105-27147]:VariableDeclarationStatement[27105-27147]"
    }, {
      "left" : "if (key == null && val == null)",
      "right" : "if (key == null && val == null)",
      "info" : "IfStatement[27164-27222]:IfStatement[27164-27222]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27216-27222]:BreakStatement[27216-27222]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27239-27243]:ExpressionStatement[27239-27243]"
    }, {
      "left" : "if (key == null || val == null)",
      "right" : "if (key == null || val == null)",
      "info" : "IfStatement[27260-27321]:IfStatement[27260-27321]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27312-27321]:ContinueStatement[27312-27321]"
    }, {
      "left" : "if (headers.containsKey(key))",
      "right" : "if (headers.containsKey(key))",
      "info" : "IfStatement[27360-27632]:IfStatement[27360-27632]"
    }, {
      "left" : "headers.get(key).add(val);",
      "right" : "headers.get(key).add(val);",
      "info" : "ExpressionStatement[27410-27436]:ExpressionStatement[27410-27436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27458-27632]:Block[27458-27632]"
    }, {
      "left" : "final ArrayList<String> vals = new ArrayList<String>();",
      "right" : "final ArrayList<String> vals = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[27480-27535]:VariableDeclarationStatement[27480-27535]"
    }, {
      "left" : "vals.add(val);",
      "right" : "vals.add(val);",
      "info" : "ExpressionStatement[27556-27570]:ExpressionStatement[27556-27570]"
    }, {
      "left" : "headers.put(key, vals);",
      "right" : "headers.put(key, vals);",
      "info" : "ExpressionStatement[27591-27614]:ExpressionStatement[27591-27614]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[27659-27674]:ReturnStatement[27659-27674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27760-28967]:Block[27760-29456]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> entry : resHeaders.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> entry : resHeaders.entrySet())",
      "info" : "EnhancedForStatement[27774-28957]:EnhancedForStatement[27774-29446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27842-28957]:Block[27842-29446]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[27860-27889]:VariableDeclarationStatement[27860-27889]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[27906-27953]:IfStatement[27906-27953]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27944-27953]:ContinueStatement[27944-27953]"
    }, {
      "left" : "List<String> values = entry.getValue();",
      "right" : "List<String> values = entry.getValue();",
      "info" : "VariableDeclarationStatement[27988-28027]:VariableDeclarationStatement[27988-28027]"
    }, {
      "left" : "if (name.equalsIgnoreCase(\"Set-Cookie\"))",
      "right" : "if (name.equalsIgnoreCase(\"Set-Cookie\"))",
      "info" : "IfStatement[28044-28943]:IfStatement[28044-29432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28085-28720]:Block[28085-28720]"
    }, {
      "left" : "for (String value : values)",
      "right" : "for (String value : values)",
      "info" : "EnhancedForStatement[28107-28702]:EnhancedForStatement[28107-28702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28135-28702]:Block[28135-28702]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[28161-28217]:IfStatement[28161-28217]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28208-28217]:ContinueStatement[28208-28217]"
    }, {
      "left" : "TokenQueue cd = new TokenQueue(value);",
      "right" : "TokenQueue cd = new TokenQueue(value);",
      "info" : "VariableDeclarationStatement[28242-28280]:VariableDeclarationStatement[28242-28280]"
    }, {
      "left" : "String cookieName = cd.chompTo(\"=\").trim();",
      "right" : "String cookieName = cd.chompTo(\"=\").trim();",
      "info" : "VariableDeclarationStatement[28305-28348]:VariableDeclarationStatement[28305-28348]"
    }, {
      "left" : "String cookieVal = cd.consumeTo(\";\").trim();",
      "right" : "String cookieVal = cd.consumeTo(\";\").trim();",
      "info" : "VariableDeclarationStatement[28373-28417]:VariableDeclarationStatement[28373-28417]"
    }, {
      "left" : "if (cookieName.length() > 0)",
      "right" : "if (cookieName.length() > 0)",
      "info" : "IfStatement[28593-28680]:IfStatement[28593-28680]"
    }, {
      "left" : "cookie(cookieName, cookieVal);",
      "right" : "cookie(cookieName, cookieVal);",
      "info" : "ExpressionStatement[28650-28680]:ExpressionStatement[28650-28680]"
    }, {
      "left" : "header(name, values.get(0));",
      "right" : "header(name, values.get(0));",
      "info" : "ExpressionStatement[28897-28925]:ExpressionStatement[28898-28926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29050-29792]:Block[29539-30281]"
    }, {
      "left" : "boolean needsMulti = false;",
      "right" : "boolean needsMulti = false;",
      "info" : "VariableDeclarationStatement[29193-29220]:VariableDeclarationStatement[29682-29709]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : req.data())",
      "right" : "for (Connection.KeyVal keyVal : req.data())",
      "info" : "EnhancedForStatement[29233-29423]:EnhancedForStatement[29722-29912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29277-29423]:Block[29766-29912]"
    }, {
      "left" : "if (keyVal.hasInputStream())",
      "right" : "if (keyVal.hasInputStream())",
      "info" : "IfStatement[29295-29409]:IfStatement[29784-29898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29324-29409]:Block[29813-29898]"
    }, {
      "left" : "needsMulti = true;",
      "right" : "needsMulti = true;",
      "info" : "ExpressionStatement[29346-29364]:ExpressionStatement[29835-29853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29385-29391]:BreakStatement[29874-29880]"
    }, {
      "left" : "String bound = null;",
      "right" : "String bound = null;",
      "info" : "VariableDeclarationStatement[29436-29456]:VariableDeclarationStatement[29925-29945]"
    }, {
      "left" : "if (needsMulti)",
      "right" : "if (needsMulti)",
      "info" : "IfStatement[29469-29756]:IfStatement[29958-30245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29485-29636]:Block[29974-30125]"
    }, {
      "left" : "bound = DataUtil.mimeBoundary();",
      "right" : "bound = DataUtil.mimeBoundary();",
      "info" : "ExpressionStatement[29503-29535]:ExpressionStatement[29992-30024]"
    }, {
      "left" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "right" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "info" : "ExpressionStatement[29552-29622]:ExpressionStatement[30041-30111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29642-29756]:Block[30131-30245]"
    }, {
      "left" : "req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset());",
      "right" : "req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset());",
      "info" : "ExpressionStatement[29660-29742]:ExpressionStatement[30149-30231]"
    }, {
      "left" : "return bound;",
      "right" : "return bound;",
      "info" : "ReturnStatement[29769-29782]:ReturnStatement[30258-30271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29934-31890]:Block[30423-32379]"
    }, {
      "left" : "final Collection<Connection.KeyVal> data = req.data();",
      "right" : "final Collection<Connection.KeyVal> data = req.data();",
      "info" : "VariableDeclarationStatement[29948-30002]:VariableDeclarationStatement[30437-30491]"
    }, {
      "left" : "final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, DataUtil.defaultCharset));",
      "right" : "final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, DataUtil.defaultCharset));",
      "info" : "VariableDeclarationStatement[30015-30122]:VariableDeclarationStatement[30504-30611]"
    }, {
      "left" : "if (bound != null)",
      "right" : "if (bound != null)",
      "info" : "IfStatement[30136-31857]:IfStatement[30625-32346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30155-31309]:Block[30644-31798]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : data)",
      "right" : "for (Connection.KeyVal keyVal : data)",
      "info" : "EnhancedForStatement[30240-31201]:EnhancedForStatement[30729-31690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30278-31201]:Block[30767-31690]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[30300-30314]:ExpressionStatement[30789-30803]"
    }, {
      "left" : "w.write(bound);",
      "right" : "w.write(bound);",
      "info" : "ExpressionStatement[30335-30350]:ExpressionStatement[30824-30839]"
    }, {
      "left" : "w.write(\"\\r\\n\");",
      "right" : "w.write(\"\\r\\n\");",
      "info" : "ExpressionStatement[30371-30387]:ExpressionStatement[30860-30876]"
    }, {
      "left" : "w.write(\"Content-Disposition: form-data; name=\\\"\");",
      "right" : "w.write(\"Content-Disposition: form-data; name=\\\"\");",
      "info" : "ExpressionStatement[30408-30459]:ExpressionStatement[30897-30948]"
    }, {
      "left" : "w.write(encodeMimeName(keyVal.key()));",
      "right" : "w.write(encodeMimeName(keyVal.key()));",
      "info" : "ExpressionStatement[30480-30518]:ExpressionStatement[30969-31007]"
    }, {
      "left" : "w.write(\"\\\"\");",
      "right" : "w.write(\"\\\"\");",
      "info" : "ExpressionStatement[30559-30573]:ExpressionStatement[31048-31062]"
    }, {
      "left" : "if (keyVal.hasInputStream())",
      "right" : "if (keyVal.hasInputStream())",
      "info" : "IfStatement[30594-31146]:IfStatement[31083-31635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30623-31023]:Block[31112-31512]"
    }, {
      "left" : "w.write(\"; filename=\\\"\");",
      "right" : "w.write(\"; filename=\\\"\");",
      "info" : "ExpressionStatement[30649-30674]:ExpressionStatement[31138-31163]"
    }, {
      "left" : "w.write(encodeMimeName(keyVal.value()));",
      "right" : "w.write(encodeMimeName(keyVal.value()));",
      "info" : "ExpressionStatement[30699-30739]:ExpressionStatement[31188-31228]"
    }, {
      "left" : "w.write(\"\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\");",
      "right" : "w.write(\"\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\");",
      "info" : "ExpressionStatement[30764-30828]:ExpressionStatement[31253-31317]"
    }, {
      "left" : "w.flush();",
      "right" : "w.flush();",
      "info" : "ExpressionStatement[30853-30863]:ExpressionStatement[31342-31352]"
    }, {
      "left" : "DataUtil.crossStreams(keyVal.inputStream(), outputStream);",
      "right" : "DataUtil.crossStreams(keyVal.inputStream(), outputStream);",
      "info" : "ExpressionStatement[30897-30955]:ExpressionStatement[31386-31444]"
    }, {
      "left" : "outputStream.flush();",
      "right" : "outputStream.flush();",
      "info" : "ExpressionStatement[30980-31001]:ExpressionStatement[31469-31490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31029-31146]:Block[31518-31635]"
    }, {
      "left" : "w.write(\"\\r\\n\\r\\n\");",
      "right" : "w.write(\"\\r\\n\\r\\n\");",
      "info" : "ExpressionStatement[31055-31075]:ExpressionStatement[31544-31564]"
    }, {
      "left" : "w.write(keyVal.value());",
      "right" : "w.write(keyVal.value());",
      "info" : "ExpressionStatement[31100-31124]:ExpressionStatement[31589-31613]"
    }, {
      "left" : "w.write(\"\\r\\n\");",
      "right" : "w.write(\"\\r\\n\");",
      "info" : "ExpressionStatement[31167-31183]:ExpressionStatement[31656-31672]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[31218-31232]:ExpressionStatement[31707-31721]"
    }, {
      "left" : "w.write(bound);",
      "right" : "w.write(bound);",
      "info" : "ExpressionStatement[31249-31264]:ExpressionStatement[31738-31753]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[31281-31295]:ExpressionStatement[31770-31784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31315-31857]:Block[31804-32346]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[31406-31427]:VariableDeclarationStatement[31895-31916]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : data)",
      "right" : "for (Connection.KeyVal keyVal : data)",
      "info" : "EnhancedForStatement[31444-31843]:EnhancedForStatement[31933-32332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31482-31843]:Block[31971-32332]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[31504-31618]:IfStatement[31993-32107]"
    }, {
      "left" : "w.append('&');",
      "right" : "w.append('&');",
      "info" : "ExpressionStatement[31540-31554]:ExpressionStatement[32029-32043]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[31604-31618]:ExpressionStatement[32093-32107]"
    }, {
      "left" : "w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));",
      "right" : "w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));",
      "info" : "ExpressionStatement[31640-31704]:ExpressionStatement[32129-32193]"
    }, {
      "left" : "w.write('=');",
      "right" : "w.write('=');",
      "info" : "ExpressionStatement[31725-31738]:ExpressionStatement[32214-32227]"
    }, {
      "left" : "w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset()));",
      "right" : "w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset()));",
      "info" : "ExpressionStatement[31759-31825]:ExpressionStatement[32248-32314]"
    }, {
      "left" : "w.close();",
      "right" : "w.close();",
      "info" : "ExpressionStatement[31870-31880]:ExpressionStatement[32359-32369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31969-32517]:Block[32458-33006]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31983-32022]:VariableDeclarationStatement[32472-32511]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[32035-32056]:VariableDeclarationStatement[32524-32545]"
    }, {
      "left" : "for (Map.Entry<String, String> cookie : req.cookies().entrySet())",
      "right" : "for (Map.Entry<String, String> cookie : req.cookies().entrySet())",
      "info" : "EnhancedForStatement[32069-32473]:EnhancedForStatement[32558-32962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32135-32473]:Block[32624-32962]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[32153-32257]:IfStatement[32642-32746]"
    }, {
      "left" : "sb.append(\"; \");",
      "right" : "sb.append(\"; \");",
      "info" : "ExpressionStatement[32185-32201]:ExpressionStatement[32674-32690]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[32243-32257]:ExpressionStatement[32732-32746]"
    }, {
      "left" : "sb.append(cookie.getKey()).append('=').append(cookie.getValue());",
      "right" : "sb.append(cookie.getKey()).append('=').append(cookie.getValue());",
      "info" : "ExpressionStatement[32274-32339]:ExpressionStatement[32763-32828]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[32486-32507]:ReturnStatement[32975-32996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32675-33745]:Block[33164-34234]"
    }, {
      "left" : "URL in = req.url();",
      "right" : "URL in = req.url();",
      "info" : "VariableDeclarationStatement[32689-32708]:VariableDeclarationStatement[33178-33197]"
    }, {
      "left" : "StringBuilder url = new StringBuilder();",
      "right" : "StringBuilder url = new StringBuilder();",
      "info" : "VariableDeclarationStatement[32721-32761]:VariableDeclarationStatement[33210-33250]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[32774-32795]:VariableDeclarationStatement[33263-33284]"
    }, {
      "left" : "url\n                .append(in.getProtocol())\n                .append(\"://\")\n                .append(in.getAuthority()) // includes host, port\n                .append(in.getPath())\n                .append(\"?\");",
      "right" : "url\n                .append(in.getProtocol())\n                .append(\"://\")\n                .append(in.getAuthority()) // includes host, port\n                .append(in.getPath())\n                .append(\"?\");",
      "info" : "ExpressionStatement[32865-33075]:ExpressionStatement[33354-33564]"
    }, {
      "left" : "if (in.getQuery() != null)",
      "right" : "if (in.getQuery() != null)",
      "info" : "IfStatement[33088-33204]:IfStatement[33577-33693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33115-33204]:Block[33604-33693]"
    }, {
      "left" : "url.append(in.getQuery());",
      "right" : "url.append(in.getQuery());",
      "info" : "ExpressionStatement[33133-33159]:ExpressionStatement[33622-33648]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[33176-33190]:ExpressionStatement[33665-33679]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : req.data())",
      "right" : "for (Connection.KeyVal keyVal : req.data())",
      "info" : "EnhancedForStatement[33217-33625]:EnhancedForStatement[33706-34114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33261-33625]:Block[33750-34114]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[33279-33383]:IfStatement[33768-33872]"
    }, {
      "left" : "url.append('&');",
      "right" : "url.append('&');",
      "info" : "ExpressionStatement[33311-33327]:ExpressionStatement[33800-33816]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[33369-33383]:ExpressionStatement[33858-33872]"
    }, {
      "left" : "url\n                    .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset))\n                    .append('=')\n                    .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));",
      "right" : "url\n                    .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset))\n                    .append('=')\n                    .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));",
      "info" : "ExpressionStatement[33400-33611]:ExpressionStatement[33889-34100]"
    }, {
      "left" : "req.url(new URL(url.toString()));",
      "right" : "req.url(new URL(url.toString()));",
      "info" : "ExpressionStatement[33638-33671]:ExpressionStatement[34127-34160]"
    }, {
      "left" : "req.data().clear();",
      "right" : "req.data().clear();",
      "info" : "ExpressionStatement[33684-33703]:ExpressionStatement[34173-34192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33972-34038]:Block[34461-34527]"
    }, {
      "left" : "return new KeyVal().key(key).value(value);",
      "right" : "return new KeyVal().key(key).value(value);",
      "info" : "ReturnStatement[33986-34028]:ReturnStatement[34475-34517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34125-34214]:Block[34614-34703]"
    }, {
      "left" : "return new KeyVal().key(key).value(filename).inputStream(stream);",
      "right" : "return new KeyVal().key(key).value(filename).inputStream(stream);",
      "info" : "ReturnStatement[34139-34204]:ReturnStatement[34628-34693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34241-34243]:Block[34730-34732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34283-34413]:Block[34772-34902]"
    }, {
      "left" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "right" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "info" : "ExpressionStatement[34297-34350]:ExpressionStatement[34786-34839]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[34363-34378]:ExpressionStatement[34852-34867]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34391-34403]:ReturnStatement[34880-34892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34443-34478]:Block[34932-34967]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[34457-34468]:ReturnStatement[34946-34957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34522-34658]:Block[35011-35147]"
    }, {
      "left" : "Validate.notNull(value, \"Data value must not be null\");",
      "right" : "Validate.notNull(value, \"Data value must not be null\");",
      "info" : "ExpressionStatement[34536-34591]:ExpressionStatement[35025-35080]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[34604-34623]:ExpressionStatement[35093-35112]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34636-34648]:ReturnStatement[35125-35137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34690-34727]:Block[35179-35216]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[34704-34717]:ReturnStatement[35193-35206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34788-34938]:Block[35277-35427]"
    }, {
      "left" : "Validate.notNull(value, \"Data input stream must not be null\");",
      "right" : "Validate.notNull(value, \"Data input stream must not be null\");",
      "info" : "ExpressionStatement[34802-34864]:ExpressionStatement[35291-35353]"
    }, {
      "left" : "this.stream = inputStream;",
      "right" : "this.stream = inputStream;",
      "info" : "ExpressionStatement[34877-34903]:ExpressionStatement[35366-35392]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34916-34928]:ReturnStatement[35405-35417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34981-35019]:Block[35470-35508]"
    }, {
      "left" : "return stream;",
      "right" : "return stream;",
      "info" : "ReturnStatement[34995-35009]:ReturnStatement[35484-35498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35061-35107]:Block[35550-35596]"
    }, {
      "left" : "return stream != null;",
      "right" : "return stream != null;",
      "info" : "ReturnStatement[35075-35097]:ReturnStatement[35564-35586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35160-35209]:Block[35649-35698]"
    }, {
      "left" : "return key + \"=\" + value;",
      "right" : "return key + \"=\" + value;",
      "info" : "ReturnStatement[35174-35199]:ReturnStatement[35663-35688]"
    } ]
  },
  "interFileMappings" : { }
}