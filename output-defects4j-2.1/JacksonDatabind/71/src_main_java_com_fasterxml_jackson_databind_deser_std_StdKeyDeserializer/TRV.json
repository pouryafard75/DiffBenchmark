{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1166-1214]:FieldDeclaration[1166-1214]"
    }, {
      "left" : "public final static int TYPE_BOOLEAN = 1;",
      "right" : "public final static int TYPE_BOOLEAN = 1;",
      "info" : "FieldDeclaration[1220-1261]:FieldDeclaration[1220-1261]"
    }, {
      "left" : "public final static int TYPE_BYTE = 2;",
      "right" : "public final static int TYPE_BYTE = 2;",
      "info" : "FieldDeclaration[1266-1304]:FieldDeclaration[1266-1304]"
    }, {
      "left" : "public final static int TYPE_SHORT = 3;",
      "right" : "public final static int TYPE_SHORT = 3;",
      "info" : "FieldDeclaration[1309-1348]:FieldDeclaration[1309-1348]"
    }, {
      "left" : "public final static int TYPE_CHAR = 4;",
      "right" : "public final static int TYPE_CHAR = 4;",
      "info" : "FieldDeclaration[1353-1391]:FieldDeclaration[1353-1391]"
    }, {
      "left" : "public final static int TYPE_INT = 5;",
      "right" : "public final static int TYPE_INT = 5;",
      "info" : "FieldDeclaration[1396-1433]:FieldDeclaration[1396-1433]"
    }, {
      "left" : "public final static int TYPE_LONG = 6;",
      "right" : "public final static int TYPE_LONG = 6;",
      "info" : "FieldDeclaration[1438-1476]:FieldDeclaration[1438-1476]"
    }, {
      "left" : "public final static int TYPE_FLOAT = 7;",
      "right" : "public final static int TYPE_FLOAT = 7;",
      "info" : "FieldDeclaration[1481-1520]:FieldDeclaration[1481-1520]"
    }, {
      "left" : "public final static int TYPE_DOUBLE = 8;",
      "right" : "public final static int TYPE_DOUBLE = 8;",
      "info" : "FieldDeclaration[1525-1565]:FieldDeclaration[1525-1565]"
    }, {
      "left" : "public final static int TYPE_LOCALE = 9;",
      "right" : "public final static int TYPE_LOCALE = 9;",
      "info" : "FieldDeclaration[1570-1610]:FieldDeclaration[1570-1610]"
    }, {
      "left" : "public final static int TYPE_DATE = 10;",
      "right" : "public final static int TYPE_DATE = 10;",
      "info" : "FieldDeclaration[1615-1654]:FieldDeclaration[1615-1654]"
    }, {
      "left" : "public final static int TYPE_CALENDAR = 11;",
      "right" : "public final static int TYPE_CALENDAR = 11;",
      "info" : "FieldDeclaration[1659-1702]:FieldDeclaration[1659-1702]"
    }, {
      "left" : "public final static int TYPE_UUID = 12;",
      "right" : "public final static int TYPE_UUID = 12;",
      "info" : "FieldDeclaration[1707-1746]:FieldDeclaration[1707-1746]"
    }, {
      "left" : "public final static int TYPE_URI = 13;",
      "right" : "public final static int TYPE_URI = 13;",
      "info" : "FieldDeclaration[1751-1789]:FieldDeclaration[1751-1789]"
    }, {
      "left" : "public final static int TYPE_URL = 14;",
      "right" : "public final static int TYPE_URL = 14;",
      "info" : "FieldDeclaration[1794-1832]:FieldDeclaration[1794-1832]"
    }, {
      "left" : "public final static int TYPE_CLASS = 15;",
      "right" : "public final static int TYPE_CLASS = 15;",
      "info" : "FieldDeclaration[1837-1877]:FieldDeclaration[1837-1877]"
    }, {
      "left" : "public final static int TYPE_CURRENCY = 16;",
      "right" : "public final static int TYPE_CURRENCY = 16;",
      "info" : "FieldDeclaration[1882-1925]:FieldDeclaration[1882-1925]"
    }, {
      "left" : "final protected int _kind;",
      "right" : "final protected int _kind;",
      "info" : "FieldDeclaration[1931-1957]:FieldDeclaration[1931-1957]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[1962-1997]:FieldDeclaration[1962-1997]"
    }, {
      "left" : "protected final FromStringDeserializer<?> _deser;",
      "right" : "protected final FromStringDeserializer<?> _deser;",
      "info" : "FieldDeclaration[2003-2137]:FieldDeclaration[2003-2137]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "info" : "MethodDeclaration[2147-2238]:MethodDeclaration[2147-2238]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "info" : "MethodDeclaration[2244-2408]:MethodDeclaration[2244-2408]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[4213-4954]:MethodDeclaration[4242-4983]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[4960-5011]:MethodDeclaration[4989-5040]"
    }, {
      "left" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[5017-7971]:MethodDeclaration[5046-8000]"
    }, {
      "left" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "right" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8159-8272]:MethodDeclaration[8188-8301]"
    }, {
      "left" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "right" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8278-8391]:MethodDeclaration[8307-8420]"
    }, {
      "left" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "right" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8397-8523]:MethodDeclaration[8426-8552]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "TypeDeclaration[8732-9602]:TypeDeclaration[8761-9631]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[8821-8869]:FieldDeclaration[8850-8898]"
    }, {
      "left" : "private final static StringKD sString = new StringKD(String.class);",
      "right" : "private final static StringKD sString = new StringKD(String.class);",
      "info" : "FieldDeclaration[8878-8945]:FieldDeclaration[8907-8974]"
    }, {
      "left" : "private final static StringKD sObject = new StringKD(Object.class);",
      "right" : "private final static StringKD sObject = new StringKD(Object.class);",
      "info" : "FieldDeclaration[8954-9021]:FieldDeclaration[8983-9050]"
    }, {
      "left" : "private StringKD(Class<?> nominalType)",
      "right" : "private StringKD(Class<?> nominalType)",
      "info" : "MethodDeclaration[9039-9105]:MethodDeclaration[9068-9134]"
    }, {
      "left" : "public static StringKD forType(Class<?> nominalType)",
      "right" : "public static StringKD forType(Class<?> nominalType)",
      "info" : "MethodDeclaration[9115-9419]:MethodDeclaration[9144-9448]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[9429-9596]:MethodDeclaration[9458-9625]"
    }, {
      "left" : "DelegatingKD",
      "right" : "DelegatingKD",
      "info" : "TypeDeclaration[9803-11314]:TypeDeclaration[9832-11343]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[10131-10179]:FieldDeclaration[10160-10208]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[10189-10224]:FieldDeclaration[10218-10253]"
    }, {
      "left" : "protected final JsonDeserializer<?> _delegate;",
      "right" : "protected final JsonDeserializer<?> _delegate;",
      "info" : "FieldDeclaration[10234-10280]:FieldDeclaration[10263-10309]"
    }, {
      "left" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "right" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "info" : "MethodDeclaration[10298-10433]:MethodDeclaration[10327-10462]"
    }, {
      "left" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException",
      "right" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[10443-11247]:MethodDeclaration[10472-11276]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[11257-11308]:MethodDeclaration[11286-11337]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "TypeDeclaration[11325-13227]:TypeDeclaration[11354-13256]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[11412-11460]:FieldDeclaration[11441-11489]"
    }, {
      "left" : "protected final EnumResolver _byNameResolver;",
      "right" : "protected final EnumResolver _byNameResolver;",
      "info" : "FieldDeclaration[11470-11515]:FieldDeclaration[11499-11544]"
    }, {
      "left" : "protected final AnnotatedMethod _factory;",
      "right" : "protected final AnnotatedMethod _factory;",
      "info" : "FieldDeclaration[11525-11566]:FieldDeclaration[11554-11595]"
    }, {
      "left" : "protected EnumResolver _byToStringResolver;",
      "right" : "protected EnumResolver _byToStringResolver;",
      "info" : "FieldDeclaration[11576-11795]:FieldDeclaration[11605-11824]"
    }, {
      "left" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "right" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "info" : "MethodDeclaration[11813-11991]:MethodDeclaration[11842-12020]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws JsonMappingException",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws JsonMappingException",
      "info" : "MethodDeclaration[12001-12870]:MethodDeclaration[12030-12899]"
    }, {
      "left" : "private EnumResolver _getToStringResolver()",
      "right" : "private EnumResolver _getToStringResolver()",
      "info" : "MethodDeclaration[12880-13221]:MethodDeclaration[12909-13250]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "TypeDeclaration[13237-13866]:TypeDeclaration[13266-13895]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[13446-13494]:FieldDeclaration[13475-13523]"
    }, {
      "left" : "protected final Constructor<?> _ctor;",
      "right" : "protected final Constructor<?> _ctor;",
      "info" : "FieldDeclaration[13504-13541]:FieldDeclaration[13533-13570]"
    }, {
      "left" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "right" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "info" : "MethodDeclaration[13551-13691]:MethodDeclaration[13580-13720]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[13701-13860]:MethodDeclaration[13730-13889]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "TypeDeclaration[13872-14503]:TypeDeclaration[13901-14532]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[14084-14132]:FieldDeclaration[14113-14161]"
    }, {
      "left" : "final Method _factoryMethod;",
      "right" : "final Method _factoryMethod;",
      "info" : "FieldDeclaration[14142-14170]:FieldDeclaration[14171-14199]"
    }, {
      "left" : "public StringFactoryKeyDeserializer(Method fm)",
      "right" : "public StringFactoryKeyDeserializer(Method fm)",
      "info" : "MethodDeclaration[14180-14318]:MethodDeclaration[14209-14347]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[14328-14497]:MethodDeclaration[14357-14526]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2200-2238]:Block[2200-2238]"
    }, {
      "left" : "this(kind, cls, null);",
      "right" : "this(kind, cls, null);",
      "info" : "ConstructorInvocation[2210-2232]:ConstructorInvocation[2210-2232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2330-2408]:Block[2330-2408]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[2340-2353]:ExpressionStatement[2340-2353]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[2362-2378]:ExpressionStatement[2362-2378]"
    }, {
      "left" : "_deser = deser;",
      "right" : "_deser = deser;",
      "info" : "ExpressionStatement[2387-2402]:ExpressionStatement[2387-2402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4328-4954]:Block[4357-4983]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[4338-4419]:IfStatement[4367-4448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4355-4419]:Block[4384-4448]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4397-4409]:ReturnStatement[4426-4438]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4428-4708]:TryStatement[4457-4737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4569]:Block[4461-4598]"
    }, {
      "left" : "Object result = _parse(key, ctxt);",
      "right" : "Object result = _parse(key, ctxt);",
      "info" : "VariableDeclarationStatement[4446-4480]:VariableDeclarationStatement[4475-4509]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[4493-4559]:IfStatement[4522-4588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4513-4559]:Block[4542-4588]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4531-4545]:ReturnStatement[4560-4574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4591-4708]:Block[4620-4737]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());",
      "info" : "ThrowStatement[4605-4698]:ThrowStatement[4634-4727]"
    }, {
      "left" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[4717-4864]:IfStatement[4746-4893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4828-4864]:Block[4857-4893]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4842-4854]:ReturnStatement[4871-4883]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");",
      "info" : "ThrowStatement[4873-4948]:ThrowStatement[4902-4977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4990-5011]:Block[5019-5040]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[4992-5009]:ReturnStatement[5021-5038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5103-7971]:Block[5132-8000]"
    }, {
      "left" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // as per [JACKSON-804], allow range up to 255, inclusive\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            return UUID.fromString(key);\n        case TYPE_URI:\n            return URI.create(key);\n        case TYPE_URL:\n            return new URL(key);\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");\n            }\n        }",
      "right" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // as per [JACKSON-804], allow range up to 255, inclusive\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            return UUID.fromString(key);\n        case TYPE_URI:\n            return URI.create(key);\n        case TYPE_URL:\n            return new URL(key);\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");\n            }\n        }",
      "info" : "SwitchStatement[5113-7944]:SwitchStatement[5142-7973]"
    }, {
      "left" : "case TYPE_BOOLEAN:",
      "right" : "case TYPE_BOOLEAN:",
      "info" : "SwitchCase[5138-5156]:SwitchCase[5167-5185]"
    }, {
      "left" : "if (\"true\".equals(key))",
      "right" : "if (\"true\".equals(key))",
      "info" : "IfStatement[5169-5245]:IfStatement[5198-5274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5193-5245]:Block[5222-5274]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[5211-5231]:ReturnStatement[5240-5260]"
    }, {
      "left" : "if (\"false\".equals(key))",
      "right" : "if (\"false\".equals(key))",
      "info" : "IfStatement[5258-5336]:IfStatement[5287-5365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5283-5336]:Block[5312-5365]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[5301-5322]:ReturnStatement[5330-5351]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"value not 'true' or 'false'\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"value not 'true' or 'false'\");",
      "info" : "ThrowStatement[5349-5425]:ThrowStatement[5378-5454]"
    }, {
      "left" : "case TYPE_BYTE:",
      "right" : "case TYPE_BYTE:",
      "info" : "SwitchCase[5434-5449]:SwitchCase[5463-5478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5462-5848]:Block[5491-5877]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5480-5507]:VariableDeclarationStatement[5509-5536]"
    }, {
      "left" : "if (value < Byte.MIN_VALUE || value > 255)",
      "right" : "if (value < Byte.MIN_VALUE || value > 255)",
      "info" : "IfStatement[5598-5783]:IfStatement[5627-5812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5641-5783]:Block[5670-5812]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "info" : "ThrowStatement[5663-5765]:ThrowStatement[5692-5794]"
    }, {
      "left" : "return Byte.valueOf((byte) value);",
      "right" : "return Byte.valueOf((byte) value);",
      "info" : "ReturnStatement[5800-5834]:ReturnStatement[5829-5863]"
    }, {
      "left" : "case TYPE_SHORT:",
      "right" : "case TYPE_SHORT:",
      "info" : "SwitchCase[5857-5873]:SwitchCase[5886-5902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5886-6214]:Block[5915-6243]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5904-5931]:VariableDeclarationStatement[5933-5960]"
    }, {
      "left" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "right" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "info" : "IfStatement[5948-6147]:IfStatement[5977-6176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6004-6147]:Block[6033-6176]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "info" : "ThrowStatement[6026-6129]:ThrowStatement[6055-6158]"
    }, {
      "left" : "return Short.valueOf((short) value);",
      "right" : "return Short.valueOf((short) value);",
      "info" : "ReturnStatement[6164-6200]:ReturnStatement[6193-6229]"
    }, {
      "left" : "case TYPE_CHAR:",
      "right" : "case TYPE_CHAR:",
      "info" : "SwitchCase[6223-6238]:SwitchCase[6252-6267]"
    }, {
      "left" : "if (key.length() == 1)",
      "right" : "if (key.length() == 1)",
      "info" : "IfStatement[6251-6346]:IfStatement[6280-6375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6274-6346]:Block[6303-6375]"
    }, {
      "left" : "return Character.valueOf(key.charAt(0));",
      "right" : "return Character.valueOf(key.charAt(0));",
      "info" : "ReturnStatement[6292-6332]:ReturnStatement[6321-6361]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"can only convert 1-character Strings\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"can only convert 1-character Strings\");",
      "info" : "ThrowStatement[6359-6444]:ThrowStatement[6388-6473]"
    }, {
      "left" : "case TYPE_INT:",
      "right" : "case TYPE_INT:",
      "info" : "SwitchCase[6453-6467]:SwitchCase[6482-6496]"
    }, {
      "left" : "return _parseInt(key);",
      "right" : "return _parseInt(key);",
      "info" : "ReturnStatement[6480-6502]:ReturnStatement[6509-6531]"
    }, {
      "left" : "case TYPE_LONG:",
      "right" : "case TYPE_LONG:",
      "info" : "SwitchCase[6512-6527]:SwitchCase[6541-6556]"
    }, {
      "left" : "return _parseLong(key);",
      "right" : "return _parseLong(key);",
      "info" : "ReturnStatement[6540-6563]:ReturnStatement[6569-6592]"
    }, {
      "left" : "case TYPE_FLOAT:",
      "right" : "case TYPE_FLOAT:",
      "info" : "SwitchCase[6573-6589]:SwitchCase[6602-6618]"
    }, {
      "left" : "return Float.valueOf((float) _parseDouble(key));",
      "right" : "return Float.valueOf((float) _parseDouble(key));",
      "info" : "ReturnStatement[6694-6742]:ReturnStatement[6723-6771]"
    }, {
      "left" : "case TYPE_DOUBLE:",
      "right" : "case TYPE_DOUBLE:",
      "info" : "SwitchCase[6751-6768]:SwitchCase[6780-6797]"
    }, {
      "left" : "return _parseDouble(key);",
      "right" : "return _parseDouble(key);",
      "info" : "ReturnStatement[6781-6806]:ReturnStatement[6810-6835]"
    }, {
      "left" : "case TYPE_LOCALE:",
      "right" : "case TYPE_LOCALE:",
      "info" : "SwitchCase[6815-6832]:SwitchCase[6844-6861]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6845-7052]:TryStatement[6874-7081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6849-6919]:Block[6878-6948]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[6867-6905]:ReturnStatement[6896-6934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-7052]:Block[6971-7081]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");",
      "info" : "ThrowStatement[6960-7038]:ThrowStatement[6989-7067]"
    }, {
      "left" : "case TYPE_CURRENCY:",
      "right" : "case TYPE_CURRENCY:",
      "info" : "SwitchCase[7061-7080]:SwitchCase[7090-7109]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7093-7302]:TryStatement[7122-7331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7097-7167]:Block[7126-7196]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[7115-7153]:ReturnStatement[7144-7182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7190-7302]:Block[7219-7331]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");",
      "info" : "ThrowStatement[7208-7288]:ThrowStatement[7237-7317]"
    }, {
      "left" : "case TYPE_DATE:",
      "right" : "case TYPE_DATE:",
      "info" : "SwitchCase[7311-7326]:SwitchCase[7340-7355]"
    }, {
      "left" : "return ctxt.parseDate(key);",
      "right" : "return ctxt.parseDate(key);",
      "info" : "ReturnStatement[7339-7366]:ReturnStatement[7368-7395]"
    }, {
      "left" : "case TYPE_CALENDAR:",
      "right" : "case TYPE_CALENDAR:",
      "info" : "SwitchCase[7375-7394]:SwitchCase[7404-7423]"
    }, {
      "left" : "java.util.Date date = ctxt.parseDate(key);",
      "right" : "java.util.Date date = ctxt.parseDate(key);",
      "info" : "VariableDeclarationStatement[7407-7449]:VariableDeclarationStatement[7436-7478]"
    }, {
      "left" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "right" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "info" : "ReturnStatement[7462-7523]:ReturnStatement[7491-7552]"
    }, {
      "left" : "case TYPE_UUID:",
      "right" : "case TYPE_UUID:",
      "info" : "SwitchCase[7532-7547]:SwitchCase[7561-7576]"
    }, {
      "left" : "return UUID.fromString(key);",
      "right" : "return UUID.fromString(key);",
      "info" : "ReturnStatement[7560-7588]:ReturnStatement[7589-7617]"
    }, {
      "left" : "case TYPE_URI:",
      "right" : "case TYPE_URI:",
      "info" : "SwitchCase[7597-7611]:SwitchCase[7626-7640]"
    }, {
      "left" : "return URI.create(key);",
      "right" : "return URI.create(key);",
      "info" : "ReturnStatement[7624-7647]:ReturnStatement[7653-7676]"
    }, {
      "left" : "case TYPE_URL:",
      "right" : "case TYPE_URL:",
      "info" : "SwitchCase[7656-7670]:SwitchCase[7685-7699]"
    }, {
      "left" : "return new URL(key);",
      "right" : "return new URL(key);",
      "info" : "ReturnStatement[7683-7703]:ReturnStatement[7712-7732]"
    }, {
      "left" : "case TYPE_CLASS:",
      "right" : "case TYPE_CLASS:",
      "info" : "SwitchCase[7712-7728]:SwitchCase[7741-7757]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7741-7934]:TryStatement[7770-7963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7745-7804]:Block[7774-7833]"
    }, {
      "left" : "return ctxt.findClass(key);",
      "right" : "return ctxt.findClass(key);",
      "info" : "ReturnStatement[7763-7790]:ReturnStatement[7792-7819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7825-7934]:Block[7854-7963]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");",
      "info" : "ThrowStatement[7843-7920]:ThrowStatement[7872-7949]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7953-7965]:ReturnStatement[7982-7994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8227-8272]:Block[8256-8301]"
    }, {
      "left" : "return Integer.parseInt(key);",
      "right" : "return Integer.parseInt(key);",
      "info" : "ReturnStatement[8237-8266]:ReturnStatement[8266-8295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8348-8391]:Block[8377-8420]"
    }, {
      "left" : "return Long.parseLong(key);",
      "right" : "return Long.parseLong(key);",
      "info" : "ReturnStatement[8358-8385]:ReturnStatement[8387-8414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8471-8523]:Block[8500-8552]"
    }, {
      "left" : "return NumberInput.parseDouble(key);",
      "right" : "return NumberInput.parseDouble(key);",
      "info" : "ReturnStatement[8481-8517]:ReturnStatement[8510-8546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9078-9105]:Block[9107-9134]"
    }, {
      "left" : "super(-1, nominalType);",
      "right" : "super(-1, nominalType);",
      "info" : "SuperConstructorInvocation[9080-9103]:SuperConstructorInvocation[9109-9132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9176-9419]:Block[9205-9448]"
    }, {
      "left" : "if (nominalType == String.class)",
      "right" : "if (nominalType == String.class)",
      "info" : "IfStatement[9190-9270]:IfStatement[9219-9299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9223-9270]:Block[9252-9299]"
    }, {
      "left" : "return sString;",
      "right" : "return sString;",
      "info" : "ReturnStatement[9241-9256]:ReturnStatement[9270-9285]"
    }, {
      "left" : "if (nominalType == Object.class)",
      "right" : "if (nominalType == Object.class)",
      "info" : "IfStatement[9283-9363]:IfStatement[9312-9392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9316-9363]:Block[9345-9392]"
    }, {
      "left" : "return sObject;",
      "right" : "return sObject;",
      "info" : "ReturnStatement[9334-9349]:ReturnStatement[9363-9378]"
    }, {
      "left" : "return new StringKD(nominalType);",
      "right" : "return new StringKD(nominalType);",
      "info" : "ReturnStatement[9376-9409]:ReturnStatement[9405-9438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9561-9596]:Block[9590-9625]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[9575-9586]:ReturnStatement[9604-9615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10362-10433]:Block[10391-10462]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[10376-10392]:ExpressionStatement[10405-10421]"
    }, {
      "left" : "_delegate = deser;",
      "right" : "_delegate = deser;",
      "info" : "ExpressionStatement[10405-10423]:ExpressionStatement[10434-10452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10601-11247]:Block[10630-11276]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[10615-10704]:IfStatement[10644-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10632-10704]:Block[10661-10733]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10678-10690]:ReturnStatement[10707-10719]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10717-11149]:TryStatement[10746-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10721-11002]:Block[10750-11031]"
    }, {
      "left" : "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
      "right" : "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
      "info" : "VariableDeclarationStatement[10835-10897]:VariableDeclarationStatement[10864-10926]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[10914-10988]:IfStatement[10943-11017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10934-10988]:Block[10963-11017]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10956-10970]:ReturnStatement[10985-10999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11024-11149]:Block[11053-11178]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());",
      "info" : "ThrowStatement[11042-11135]:ThrowStatement[11071-11164]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");",
      "info" : "ThrowStatement[11162-11237]:ThrowStatement[11191-11266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11287-11308]:Block[11316-11337]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[11289-11306]:ReturnStatement[11318-11335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11872-11991]:Block[11901-12020]"
    }, {
      "left" : "super(-1, er.getEnumClass());",
      "right" : "super(-1, er.getEnumClass());",
      "info" : "SuperConstructorInvocation[11886-11915]:SuperConstructorInvocation[11915-11944]"
    }, {
      "left" : "_byNameResolver = er;",
      "right" : "_byNameResolver = er;",
      "info" : "ExpressionStatement[11928-11949]:ExpressionStatement[11957-11978]"
    }, {
      "left" : "_factory = factory;",
      "right" : "_factory = factory;",
      "info" : "ExpressionStatement[11962-11981]:ExpressionStatement[11991-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12117-12870]:Block[12146-12899]"
    }, {
      "left" : "if (_factory != null)",
      "right" : "if (_factory != null)",
      "info" : "IfStatement[12131-12350]:IfStatement[12160-12379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12153-12350]:Block[12182-12379]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12171-12336]:TryStatement[12200-12365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12175-12242]:Block[12204-12271]"
    }, {
      "left" : "return _factory.call1(key);",
      "right" : "return _factory.call1(key);",
      "info" : "ReturnStatement[12197-12224]:ReturnStatement[12226-12253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12263-12336]:Block[12292-12365]"
    }, {
      "left" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "right" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "info" : "ExpressionStatement[12285-12318]:ExpressionStatement[12314-12347]"
    }, {
      "left" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver() : _byNameResolver;",
      "right" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver() : _byNameResolver;",
      "info" : "VariableDeclarationStatement[12363-12511]:VariableDeclarationStatement[12392-12540]"
    }, {
      "left" : "Enum<?> e = res.findEnum(key);",
      "right" : "Enum<?> e = res.findEnum(key);",
      "info" : "VariableDeclarationStatement[12524-12554]:VariableDeclarationStatement[12553-12583]"
    }, {
      "left" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[12567-12838]:IfStatement[12596-12867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12672-12838]:Block[12701-12867]"
    }, {
      "left" : "throw ctxt.weirdKeyException(_keyClass, key, \"not one of values excepted for Enum class: \"\n                        +res.getEnumIds());",
      "right" : "throw ctxt.weirdKeyException(_keyClass, key, \"not one of values excepted for Enum class: \"\n                        +res.getEnumIds());",
      "info" : "ThrowStatement[12690-12824]:ThrowStatement[12719-12853]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[12851-12860]:ReturnStatement[12880-12889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12932-13221]:Block[12961-13250]"
    }, {
      "left" : "EnumResolver res = _byToStringResolver;",
      "right" : "EnumResolver res = _byToStringResolver;",
      "info" : "VariableDeclarationStatement[12946-12985]:VariableDeclarationStatement[12975-13014]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[12998-13187]:IfStatement[13027-13216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13015-13187]:Block[13044-13216]"
    }, {
      "left" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());\n                }",
      "right" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());\n                }",
      "info" : "SynchronizedStatement[13033-13173]:SynchronizedStatement[13062-13202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13053-13173]:Block[13082-13202]"
    }, {
      "left" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());",
      "right" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());",
      "info" : "ExpressionStatement[13075-13155]:ExpressionStatement[13104-13184]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[13200-13211]:ReturnStatement[13229-13240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13605-13691]:Block[13634-13720]"
    }, {
      "left" : "super(-1, ctor.getDeclaringClass());",
      "right" : "super(-1, ctor.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[13619-13655]:SuperConstructorInvocation[13648-13684]"
    }, {
      "left" : "_ctor = ctor;",
      "right" : "_ctor = ctor;",
      "info" : "ExpressionStatement[13668-13681]:ExpressionStatement[13697-13710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13806-13860]:Block[13835-13889]"
    }, {
      "left" : "return _ctor.newInstance(key);",
      "right" : "return _ctor.newInstance(key);",
      "info" : "ReturnStatement[13820-13850]:ReturnStatement[13849-13879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14227-14318]:Block[14256-14347]"
    }, {
      "left" : "super(-1, fm.getDeclaringClass());",
      "right" : "super(-1, fm.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[14241-14275]:SuperConstructorInvocation[14270-14304]"
    }, {
      "left" : "_factoryMethod = fm;",
      "right" : "_factoryMethod = fm;",
      "info" : "ExpressionStatement[14288-14308]:ExpressionStatement[14317-14337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14433-14497]:Block[14462-14526]"
    }, {
      "left" : "return _factoryMethod.invoke(null, key);",
      "right" : "return _factoryMethod.invoke(null, key);",
      "info" : "ReturnStatement[14447-14487]:ReturnStatement[14476-14516]"
    } ]
  },
  "interFileMappings" : { }
}