{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String VOWELS = \"AEIOU\" ;",
      "right" : "private static final String VOWELS = \"AEIOU\" ;",
      "info" : "FieldDeclaration[1739-1845]:FieldDeclaration[1739-1845]"
    }, {
      "left" : "private static final String FRONTV = \"EIY\"   ;",
      "right" : "private static final String FRONTV = \"EIY\"   ;",
      "info" : "FieldDeclaration[1851-1957]:FieldDeclaration[1851-1957]"
    }, {
      "left" : "private static final String VARSON = \"CSPTG\" ;",
      "right" : "private static final String VARSON = \"CSPTG\" ;",
      "info" : "FieldDeclaration[1963-2069]:FieldDeclaration[1963-2069]"
    }, {
      "left" : "private int maxCodeLen = 4 ;",
      "right" : "private int maxCodeLen = 4 ;",
      "info" : "FieldDeclaration[2075-2165]:FieldDeclaration[2075-2165]"
    }, {
      "left" : "public Metaphone()",
      "right" : "public Metaphone()",
      "info" : "MethodDeclaration[2171-2282]:MethodDeclaration[2171-2282]"
    }, {
      "left" : "private boolean isVowel(StringBuffer string, int index)",
      "right" : "private boolean isVowel(StringBuffer string, int index)",
      "info" : "MethodDeclaration[11540-11652]:MethodDeclaration[11564-11676]"
    }, {
      "left" : "private boolean isPreviousChar(StringBuffer string, int index, char c)",
      "right" : "private boolean isPreviousChar(StringBuffer string, int index, char c)",
      "info" : "MethodDeclaration[11655-11876]:MethodDeclaration[11679-11900]"
    }, {
      "left" : "private boolean isNextChar(StringBuffer string, int index, char c)",
      "right" : "private boolean isNextChar(StringBuffer string, int index, char c)",
      "info" : "MethodDeclaration[11879-12101]:MethodDeclaration[11903-12125]"
    }, {
      "left" : "private boolean regionMatch(StringBuffer string, int index, String test)",
      "right" : "private boolean regionMatch(StringBuffer string, int index, String test)",
      "info" : "MethodDeclaration[12104-12416]:MethodDeclaration[12128-12440]"
    }, {
      "left" : "private boolean isLastChar(int wdsz, int n)",
      "right" : "private boolean isLastChar(int wdsz, int n)",
      "info" : "MethodDeclaration[12419-12491]:MethodDeclaration[12443-12515]"
    }, {
      "left" : "public Object encode(Object pObject) throws EncoderException",
      "right" : "public Object encode(Object pObject) throws EncoderException",
      "info" : "MethodDeclaration[12507-13378]:MethodDeclaration[12531-13402]"
    }, {
      "left" : "public String encode(String pString)",
      "right" : "public String encode(String pString)",
      "info" : "MethodDeclaration[13384-13662]:MethodDeclaration[13408-13686]"
    }, {
      "left" : "public boolean isMetaphoneEqual(String str1, String str2)",
      "right" : "public boolean isMetaphoneEqual(String str1, String str2)",
      "info" : "MethodDeclaration[13668-14104]:MethodDeclaration[13692-14128]"
    }, {
      "left" : "public int getMaxCodeLen()",
      "right" : "public int getMaxCodeLen()",
      "info" : "MethodDeclaration[14110-14230]:MethodDeclaration[14134-14254]"
    }, {
      "left" : "public void setMaxCodeLen(int maxCodeLen)",
      "right" : "public void setMaxCodeLen(int maxCodeLen)",
      "info" : "MethodDeclaration[14236-14402]:MethodDeclaration[14260-14426]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2258-2282]:Block[2258-2282]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2268-2276]:SuperConstructorInvocation[2268-2276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11596-11652]:Block[11620-11676]"
    }, {
      "left" : "return VOWELS.indexOf(string.charAt(index)) >= 0;",
      "right" : "return VOWELS.indexOf(string.charAt(index)) >= 0;",
      "info" : "ReturnStatement[11600-11649]:ReturnStatement[11624-11673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11726-11876]:Block[11750-11900]"
    }, {
      "left" : "boolean matches = false;",
      "right" : "boolean matches = false;",
      "info" : "VariableDeclarationStatement[11730-11754]:VariableDeclarationStatement[11754-11778]"
    }, {
      "left" : "if( index > 0 &&\n\t\t    index < string.length())",
      "right" : "if( index > 0 &&\n\t\t    index < string.length())",
      "info" : "IfStatement[11757-11855]:IfStatement[11781-11879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11806-11855]:Block[11830-11879]"
    }, {
      "left" : "matches = string.charAt(index - 1) == c;",
      "right" : "matches = string.charAt(index - 1) == c;",
      "info" : "ExpressionStatement[11811-11851]:ExpressionStatement[11835-11875]"
    }, {
      "left" : "return matches;",
      "right" : "return matches;",
      "info" : "ReturnStatement[11858-11873]:ReturnStatement[11882-11897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11946-12101]:Block[11970-12125]"
    }, {
      "left" : "boolean matches = false;",
      "right" : "boolean matches = false;",
      "info" : "VariableDeclarationStatement[11950-11974]:VariableDeclarationStatement[11974-11998]"
    }, {
      "left" : "if( index >= 0 &&\n\t\t    index < string.length() - 1)",
      "right" : "if( index >= 0 &&\n\t\t    index < string.length() - 1)",
      "info" : "IfStatement[11977-12080]:IfStatement[12001-12104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12031-12080]:Block[12055-12104]"
    }, {
      "left" : "matches = string.charAt(index + 1) == c;",
      "right" : "matches = string.charAt(index + 1) == c;",
      "info" : "ExpressionStatement[12036-12076]:ExpressionStatement[12060-12100]"
    }, {
      "left" : "return matches;",
      "right" : "return matches;",
      "info" : "ReturnStatement[12083-12098]:ReturnStatement[12107-12122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12177-12416]:Block[12201-12440]"
    }, {
      "left" : "boolean matches = false;",
      "right" : "boolean matches = false;",
      "info" : "VariableDeclarationStatement[12181-12205]:VariableDeclarationStatement[12205-12229]"
    }, {
      "left" : "if( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length())",
      "right" : "if( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length())",
      "info" : "IfStatement[12208-12395]:IfStatement[12232-12419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12280-12395]:Block[12304-12419]"
    }, {
      "left" : "String substring = string.substring( index, index + test.length());",
      "right" : "String substring = string.substring( index, index + test.length());",
      "info" : "VariableDeclarationStatement[12285-12352]:VariableDeclarationStatement[12309-12376]"
    }, {
      "left" : "matches = substring.equals( test );",
      "right" : "matches = substring.equals( test );",
      "info" : "ExpressionStatement[12356-12391]:ExpressionStatement[12380-12415]"
    }, {
      "left" : "return matches;",
      "right" : "return matches;",
      "info" : "ReturnStatement[12398-12413]:ReturnStatement[12422-12437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12463-12491]:Block[12487-12515]"
    }, {
      "left" : "return n + 1 == wdsz;",
      "right" : "return n + 1 == wdsz;",
      "info" : "ReturnStatement[12467-12488]:ReturnStatement[12491-12512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13378]:Block[13172-13402]"
    }, {
      "left" : "if (!(pObject instanceof java.lang.String))",
      "right" : "if (!(pObject instanceof java.lang.String))",
      "info" : "IfStatement[13158-13328]:IfStatement[13182-13352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13202-13328]:Block[13226-13352]"
    }, {
      "left" : "throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");",
      "right" : "throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");",
      "info" : "ThrowStatement[13216-13317]:ThrowStatement[13240-13341]"
    }, {
      "left" : "return metaphone((String) pObject);",
      "right" : "return metaphone((String) pObject);",
      "info" : "ReturnStatement[13337-13372]:ReturnStatement[13361-13396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13617-13662]:Block[13641-13686]"
    }, {
      "left" : "return metaphone(pString);",
      "right" : "return metaphone(pString);",
      "info" : "ReturnStatement[13627-13653]:ReturnStatement[13651-13677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14041-14104]:Block[14065-14128]"
    }, {
      "left" : "return metaphone(str1).equals(metaphone(str2));",
      "right" : "return metaphone(str1).equals(metaphone(str2));",
      "info" : "ReturnStatement[14051-14098]:ReturnStatement[14075-14122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14203-14230]:Block[14227-14254]"
    }, {
      "left" : "return this.maxCodeLen;",
      "right" : "return this.maxCodeLen;",
      "info" : "ReturnStatement[14205-14228]:ReturnStatement[14229-14252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14369-14402]:Block[14393-14426]"
    }, {
      "left" : "this.maxCodeLen = maxCodeLen;",
      "right" : "this.maxCodeLen = maxCodeLen;",
      "info" : "ExpressionStatement[14371-14400]:ExpressionStatement[14395-14424]"
    } ]
  },
  "interFileMappings" : { }
}