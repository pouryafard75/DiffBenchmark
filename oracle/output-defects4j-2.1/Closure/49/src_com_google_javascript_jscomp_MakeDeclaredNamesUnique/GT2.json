{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MakeDeclaredNamesUnique",
      "right" : "MakeDeclaredNamesUnique",
      "info" : "TypeDeclaration[1385-17675]:TypeDeclaration[1385-17778]"
    }, {
      "left" : "public static final String ARGUMENTS = \"arguments\";",
      "right" : "public static final String ARGUMENTS = \"arguments\";",
      "info" : "FieldDeclaration[1813-1864]:FieldDeclaration[1813-1864]"
    }, {
      "left" : "private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
      "right" : "private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
      "info" : "FieldDeclaration[2292-2353]:FieldDeclaration[2292-2353]"
    }, {
      "left" : "private final Renamer rootRenamer;",
      "right" : "private final Renamer rootRenamer;",
      "info" : "FieldDeclaration[2356-2390]:FieldDeclaration[2356-2390]"
    }, {
      "left" : "MakeDeclaredNamesUnique()",
      "right" : "MakeDeclaredNamesUnique()",
      "info" : "MethodDeclaration[2394-2460]:MethodDeclaration[2394-2460]"
    }, {
      "left" : "MakeDeclaredNamesUnique(Renamer renamer)",
      "right" : "MakeDeclaredNamesUnique(Renamer renamer)",
      "info" : "MethodDeclaration[2464-2542]:MethodDeclaration[2464-2542]"
    }, {
      "left" : "static CompilerPass getContextualRenameInverter(AbstractCompiler compiler)",
      "right" : "static CompilerPass getContextualRenameInverter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[2546-2677]:MethodDeclaration[2546-2677]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[2681-3788]:MethodDeclaration[2681-3415]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[3792-3907]:MethodDeclaration[3419-3534]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3911-4974]:MethodDeclaration[3538-5016]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4978-6044]:MethodDeclaration[5020-6147]"
    }, {
      "left" : "private String getReplacementName(String oldName)",
      "right" : "private String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[6048-6388]:MethodDeclaration[6151-6491]"
    }, {
      "left" : "private void findDeclaredNames(Node n, Node parent, Renamer renamer)",
      "right" : "private void findDeclaredNames(Node n, Node parent, Renamer renamer)",
      "info" : "MethodDeclaration[6392-7217]:MethodDeclaration[6495-7320]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "TypeDeclaration[7221-7838]:TypeDeclaration[7324-7941]"
    }, {
      "left" : "void addDeclaredName(String name);",
      "right" : "void addDeclaredName(String name);",
      "info" : "MethodDeclaration[7305-7427]:MethodDeclaration[7408-7530]"
    }, {
      "left" : "String getReplacementName(String oldName);",
      "right" : "String getReplacementName(String oldName);",
      "info" : "MethodDeclaration[7433-7587]:MethodDeclaration[7536-7690]"
    }, {
      "left" : "boolean stripConstIfReplaced();",
      "right" : "boolean stripConstIfReplaced();",
      "info" : "MethodDeclaration[7593-7710]:MethodDeclaration[7696-7813]"
    }, {
      "left" : "Renamer forChildScope();",
      "right" : "Renamer forChildScope();",
      "info" : "MethodDeclaration[7716-7834]:MethodDeclaration[7819-7937]"
    }, {
      "left" : "ContextualRenameInverter",
      "right" : "ContextualRenameInverter",
      "info" : "TypeDeclaration[7842-12727]:TypeDeclaration[7945-12830]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[8021-8061]:FieldDeclaration[8124-8164]"
    }, {
      "left" : "private Set<String> referencedNames = ImmutableSet.of();",
      "right" : "private Set<String> referencedNames = ImmutableSet.of();",
      "info" : "FieldDeclaration[8124-8180]:FieldDeclaration[8227-8283]"
    }, {
      "left" : "private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
      "right" : "private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
      "info" : "FieldDeclaration[8215-8289]:FieldDeclaration[8318-8392]"
    }, {
      "left" : "private Map<String, List<Node>> nameMap = Maps.newHashMap();",
      "right" : "private Map<String, List<Node>> nameMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[8372-8432]:FieldDeclaration[8475-8535]"
    }, {
      "left" : "private ContextualRenameInverter(AbstractCompiler compiler)",
      "right" : "private ContextualRenameInverter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[8438-8537]:MethodDeclaration[8541-8640]"
    }, {
      "left" : "public void process(Node externs, Node js)",
      "right" : "public void process(Node externs, Node js)",
      "info" : "MethodDeclaration[8543-8657]:MethodDeclaration[8646-8760]"
    }, {
      "left" : "public static String getOrginalName(String name)",
      "right" : "public static String getOrginalName(String name)",
      "info" : "MethodDeclaration[8663-8823]:MethodDeclaration[8766-8926]"
    }, {
      "left" : "private static int indexOfSeparator(String name)",
      "right" : "private static int indexOfSeparator(String name)",
      "info" : "MethodDeclaration[8829-8955]:MethodDeclaration[8932-9058]"
    }, {
      "left" : "private boolean containsSeparator(String name)",
      "right" : "private boolean containsSeparator(String name)",
      "info" : "MethodDeclaration[8961-9087]:MethodDeclaration[9064-9190]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[9093-9353]:MethodDeclaration[9196-9456]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[9359-10191]:MethodDeclaration[9462-10294]"
    }, {
      "left" : "void handleScopeVar(Var v)",
      "right" : "void handleScopeVar(Var v)",
      "info" : "MethodDeclaration[10197-11124]:MethodDeclaration[10300-11227]"
    }, {
      "left" : "private String findReplacementName(String name)",
      "right" : "private String findReplacementName(String name)",
      "info" : "MethodDeclaration[11130-11513]:MethodDeclaration[11233-11616]"
    }, {
      "left" : "private boolean isValidName(String name)",
      "right" : "private boolean isValidName(String name)",
      "info" : "MethodDeclaration[11519-11828]:MethodDeclaration[11622-11931]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[11834-11942]:MethodDeclaration[11937-12045]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[11948-12478]:MethodDeclaration[12051-12581]"
    }, {
      "left" : "private void addCandidateNameReference(String name, Node n)",
      "right" : "private void addCandidateNameReference(String name, Node n)",
      "info" : "MethodDeclaration[12484-12723]:MethodDeclaration[12587-12826]"
    }, {
      "left" : "ContextualRenamer",
      "right" : "ContextualRenamer",
      "info" : "TypeDeclaration[12731-15041]:TypeDeclaration[12834-15144]"
    }, {
      "left" : "private final Multiset<String> nameUsage;",
      "right" : "private final Multiset<String> nameUsage;",
      "info" : "FieldDeclaration[13201-13242]:FieldDeclaration[13304-13345]"
    }, {
      "left" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "right" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "info" : "FieldDeclaration[13247-13314]:FieldDeclaration[13350-13417]"
    }, {
      "left" : "private final boolean global;",
      "right" : "private final boolean global;",
      "info" : "FieldDeclaration[13319-13348]:FieldDeclaration[13422-13451]"
    }, {
      "left" : "final static String UNIQUE_ID_SEPARATOR = \"$$\";",
      "right" : "final static String UNIQUE_ID_SEPARATOR = \"$$\";",
      "info" : "FieldDeclaration[13354-13401]:FieldDeclaration[13457-13504]"
    }, {
      "left" : "ContextualRenamer()",
      "right" : "ContextualRenamer()",
      "info" : "MethodDeclaration[13407-13501]:MethodDeclaration[13510-13604]"
    }, {
      "left" : "private ContextualRenamer(Multiset<String> nameUsage)",
      "right" : "private ContextualRenamer(Multiset<String> nameUsage)",
      "info" : "MethodDeclaration[13507-13682]:MethodDeclaration[13610-13785]"
    }, {
      "left" : "public Renamer forChildScope()",
      "right" : "public Renamer forChildScope()",
      "info" : "MethodDeclaration[13688-13837]:MethodDeclaration[13791-13940]"
    }, {
      "left" : "public void addDeclaredName(String name)",
      "right" : "public void addDeclaredName(String name)",
      "info" : "MethodDeclaration[13843-14459]:MethodDeclaration[13946-14562]"
    }, {
      "left" : "public String getReplacementName(String oldName)",
      "right" : "public String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[14465-14575]:MethodDeclaration[14568-14678]"
    }, {
      "left" : "private String getUniqueName(String name, int id)",
      "right" : "private String getUniqueName(String name, int id)",
      "info" : "MethodDeclaration[14581-14769]:MethodDeclaration[14684-14872]"
    }, {
      "left" : "private void reserveName(String name)",
      "right" : "private void reserveName(String name)",
      "info" : "MethodDeclaration[14775-14858]:MethodDeclaration[14878-14961]"
    }, {
      "left" : "private int incrementNameCount(String name)",
      "right" : "private int incrementNameCount(String name)",
      "info" : "MethodDeclaration[14864-14952]:MethodDeclaration[14967-15055]"
    }, {
      "left" : "public boolean stripConstIfReplaced()",
      "right" : "public boolean stripConstIfReplaced()",
      "info" : "MethodDeclaration[14958-15037]:MethodDeclaration[15061-15140]"
    }, {
      "left" : "InlineRenamer",
      "right" : "InlineRenamer",
      "info" : "TypeDeclaration[15046-17082]:TypeDeclaration[15149-17185]"
    }, {
      "left" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "right" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "info" : "FieldDeclaration[15339-15406]:FieldDeclaration[15442-15509]"
    }, {
      "left" : "private final Supplier<String> uniqueIdSupplier;",
      "right" : "private final Supplier<String> uniqueIdSupplier;",
      "info" : "FieldDeclaration[15411-15459]:FieldDeclaration[15514-15562]"
    }, {
      "left" : "private final String idPrefix;",
      "right" : "private final String idPrefix;",
      "info" : "FieldDeclaration[15464-15494]:FieldDeclaration[15567-15597]"
    }, {
      "left" : "private final boolean removeConstness;",
      "right" : "private final boolean removeConstness;",
      "info" : "FieldDeclaration[15499-15537]:FieldDeclaration[15602-15640]"
    }, {
      "left" : "InlineRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix,\n        boolean removeConstness)",
      "right" : "InlineRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix,\n        boolean removeConstness)",
      "info" : "MethodDeclaration[15543-15968]:MethodDeclaration[15646-16071]"
    }, {
      "left" : "public void addDeclaredName(String name)",
      "right" : "public void addDeclaredName(String name)",
      "info" : "MethodDeclaration[15974-16199]:MethodDeclaration[16077-16302]"
    }, {
      "left" : "private String getUniqueName(String name)",
      "right" : "private String getUniqueName(String name)",
      "info" : "MethodDeclaration[16205-16732]:MethodDeclaration[16308-16835]"
    }, {
      "left" : "public String getReplacementName(String oldName)",
      "right" : "public String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[16738-16848]:MethodDeclaration[16841-16951]"
    }, {
      "left" : "public Renamer forChildScope()",
      "right" : "public Renamer forChildScope()",
      "info" : "MethodDeclaration[16854-16983]:MethodDeclaration[16957-17086]"
    }, {
      "left" : "public boolean stripConstIfReplaced()",
      "right" : "public boolean stripConstIfReplaced()",
      "info" : "MethodDeclaration[16989-17078]:MethodDeclaration[17092-17181]"
    }, {
      "left" : "BoilerplateRenamer",
      "right" : "BoilerplateRenamer",
      "info" : "TypeDeclaration[17086-17672]:TypeDeclaration[17189-17775]"
    }, {
      "left" : "private final Supplier<String> uniqueIdSupplier;",
      "right" : "private final Supplier<String> uniqueIdSupplier;",
      "info" : "FieldDeclaration[17279-17327]:FieldDeclaration[17382-17430]"
    }, {
      "left" : "private final String idPrefix;",
      "right" : "private final String idPrefix;",
      "info" : "FieldDeclaration[17332-17362]:FieldDeclaration[17435-17465]"
    }, {
      "left" : "BoilerplateRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix)",
      "right" : "BoilerplateRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix)",
      "info" : "MethodDeclaration[17368-17543]:MethodDeclaration[17471-17646]"
    }, {
      "left" : "public Renamer forChildScope()",
      "right" : "public Renamer forChildScope()",
      "info" : "MethodDeclaration[17549-17668]:MethodDeclaration[17652-17771]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2420-2460]:Block[2420-2460]"
    }, {
      "left" : "this(new ContextualRenamer());",
      "right" : "this(new ContextualRenamer());",
      "info" : "ConstructorInvocation[2426-2456]:ConstructorInvocation[2426-2456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2505-2542]:Block[2505-2542]"
    }, {
      "left" : "this.rootRenamer = renamer;",
      "right" : "this.rootRenamer = renamer;",
      "info" : "ExpressionStatement[2511-2538]:ExpressionStatement[2511-2538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2621-2677]:Block[2621-2677]"
    }, {
      "left" : "return new ContextualRenameInverter(compiler);",
      "right" : "return new ContextualRenameInverter(compiler);",
      "info" : "ReturnStatement[2627-2673]:ReturnStatement[2627-2673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2733-3788]:Block[2733-3415]"
    }, {
      "left" : "Node declarationRoot = t.getScopeRoot();",
      "right" : "Node declarationRoot = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[2739-2779]:VariableDeclarationStatement[2739-2779]"
    }, {
      "left" : "Renamer renamer;",
      "right" : "Renamer renamer;",
      "info" : "VariableDeclarationStatement[2784-2800]:VariableDeclarationStatement[2784-2800]"
    }, {
      "left" : "if (nameStack.isEmpty())",
      "right" : "if (nameStack.isEmpty())",
      "info" : "IfStatement[2805-3227]:IfStatement[2805-3227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2830-3164]:Block[2830-3164]"
    }, {
      "left" : "Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));",
      "right" : "Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));",
      "info" : "ExpressionStatement[2940-3078]:ExpressionStatement[2940-3078]"
    }, {
      "left" : "Preconditions.checkState(t.inGlobalScope());",
      "right" : "Preconditions.checkState(t.inGlobalScope());",
      "info" : "ExpressionStatement[3085-3129]:ExpressionStatement[3085-3129]"
    }, {
      "left" : "renamer = rootRenamer;",
      "right" : "renamer = rootRenamer;",
      "info" : "ExpressionStatement[3136-3158]:ExpressionStatement[3136-3158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3170-3227]:Block[3170-3227]"
    }, {
      "left" : "renamer = nameStack.peek().forChildScope();",
      "right" : "renamer = nameStack.peek().forChildScope();",
      "info" : "ExpressionStatement[3178-3221]:ExpressionStatement[3178-3221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3282-3594]:Block[4248-4718]"
    }, {
      "left" : "for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[3290-3476]:ForStatement[4364-4522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3391-3476]:Block[4425-4522]"
    }, {
      "left" : "String name = c.getString();",
      "right" : "String name = c.getString();",
      "info" : "VariableDeclarationStatement[3401-3429]:VariableDeclarationStatement[4439-4467]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[3438-3468]:ExpressionStatement[4480-4510]"
    }, {
      "left" : "Node functionBody = declarationRoot.getLastChild();",
      "right" : "Node functionBody = n.getNext();",
      "info" : "VariableDeclarationStatement[3483-3534]:VariableDeclarationStatement[4582-4614]"
    }, {
      "left" : "findDeclaredNames(functionBody, null, renamer);",
      "right" : "findDeclaredNames(functionBody, null, renamer);",
      "info" : "ExpressionStatement[3541-3588]:ExpressionStatement[4625-4672]"
    }, {
      "left" : "if (declarationRoot.getType() != Token.FUNCTION)",
      "right" : "if (declarationRoot.getType() != Token.FUNCTION)",
      "info" : "IfStatement[3606-3755]:IfStatement[3233-3382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3655-3755]:Block[3282-3382]"
    }, {
      "left" : "findDeclaredNames(declarationRoot, null, renamer);",
      "right" : "findDeclaredNames(declarationRoot, null, renamer);",
      "info" : "ExpressionStatement[3699-3749]:ExpressionStatement[3326-3376]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[3760-3784]:ExpressionStatement[3387-3411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3843-3907]:Block[3470-3534]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[3849-3903]:IfStatement[3476-3530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3873-3903]:Block[3500-3530]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[3881-3897]:ExpressionStatement[3508-3524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3991-4974]:Block[3618-5016]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.LP: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }",
      "info" : "SwitchStatement[3998-4952]:SwitchStatement[3625-4994]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[4027-4047]:SwitchCase[3654-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4056-4676]:Block[3683-4210]"
    }, {
      "left" : "Renamer renamer = nameStack.peek().forChildScope();",
      "right" : "Renamer renamer = nameStack.peek().forChildScope();",
      "info" : "VariableDeclarationStatement[4199-4250]:VariableDeclarationStatement[3826-3877]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4319-4363]:VariableDeclarationStatement[3946-3990]"
    }, {
      "left" : "if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[4374-4537]:IfStatement[4001-4164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4481-4537]:Block[4108-4164]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[4495-4525]:ExpressionStatement[4122-4152]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[4642-4666]:ExpressionStatement[4176-4200]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4685-4691]:BreakStatement[4219-4225]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4699-4716]:SwitchCase[4741-4758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4725-4931]:Block[4767-4973]"
    }, {
      "left" : "Renamer renamer = nameStack.peek().forChildScope();",
      "right" : "Renamer renamer = nameStack.peek().forChildScope();",
      "info" : "VariableDeclarationStatement[4737-4788]:VariableDeclarationStatement[4779-4830]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4800-4844]:VariableDeclarationStatement[4842-4886]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[4855-4885]:ExpressionStatement[4897-4927]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[4897-4921]:ExpressionStatement[4939-4963]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4940-4946]:BreakStatement[4982-4988]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4958-4970]:ReturnStatement[5000-5012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5046-6044]:Block[5088-6147]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.LP:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }",
      "info" : "SwitchStatement[5052-6040]:SwitchStatement[5094-6143]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5081-5097]:SwitchCase[5123-5139]"
    }, {
      "left" : "String newName = getReplacementName(n.getString());",
      "right" : "String newName = getReplacementName(n.getString());",
      "info" : "VariableDeclarationStatement[5106-5157]:VariableDeclarationStatement[5148-5199]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[5166-5507]:IfStatement[5208-5549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5187-5507]:Block[5229-5549]"
    }, {
      "left" : "Renamer renamer = nameStack.peek();",
      "right" : "Renamer renamer = nameStack.peek();",
      "info" : "VariableDeclarationStatement[5199-5234]:VariableDeclarationStatement[5241-5276]"
    }, {
      "left" : "if (renamer.stripConstIfReplaced())",
      "right" : "if (renamer.stripConstIfReplaced())",
      "info" : "IfStatement[5245-5419]:IfStatement[5287-5461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5419]:Block[5323-5461]"
    }, {
      "left" : "n.removeProp(Node.IS_CONSTANT_NAME);",
      "right" : "n.removeProp(Node.IS_CONSTANT_NAME);",
      "info" : "ExpressionStatement[5371-5407]:ExpressionStatement[5413-5449]"
    }, {
      "left" : "n.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[5430-5451]:ExpressionStatement[5472-5493]"
    }, {
      "left" : "t.getCompiler().reportCodeChange();",
      "right" : "t.getCompiler().reportCodeChange();",
      "info" : "ExpressionStatement[5462-5497]:ExpressionStatement[5504-5539]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5516-5522]:BreakStatement[5558-5564]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[5530-5550]:SwitchCase[5572-5592]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[5653-5669]:ExpressionStatement[5643-5659]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5678-5684]:BreakStatement[5745-5751]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[5916-5933]:SwitchCase[6019-6036]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[6003-6019]:ExpressionStatement[5720-5736]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6028-6034]:BreakStatement[6131-6137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6203-6388]:Block[6306-6491]"
    }, {
      "left" : "for (Renamer names : nameStack)",
      "right" : "for (Renamer names : nameStack)",
      "info" : "EnhancedForStatement[6209-6367]:EnhancedForStatement[6312-6470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6241-6367]:Block[6344-6470]"
    }, {
      "left" : "String newName = names.getReplacementName(oldName);",
      "right" : "String newName = names.getReplacementName(oldName);",
      "info" : "VariableDeclarationStatement[6249-6300]:VariableDeclarationStatement[6352-6403]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[6307-6361]:IfStatement[6410-6464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6328-6361]:Block[6431-6464]"
    }, {
      "left" : "return newName;",
      "right" : "return newName;",
      "info" : "ReturnStatement[6338-6353]:ReturnStatement[6441-6456]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6372-6384]:ReturnStatement[6475-6487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6597-7217]:Block[6700-7320]"
    }, {
      "left" : "if (parent == null\n        || parent.getType() != Token.FUNCTION\n        || n == parent.getFirstChild())",
      "right" : "if (parent == null\n        || parent.getType() != Token.FUNCTION\n        || n == parent.getFirstChild())",
      "info" : "IfStatement[6731-7213]:IfStatement[6834-7316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6836-7213]:Block[6939-7316]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[6844-7087]:IfStatement[6947-7190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6878-6935]:Block[6981-7038]"
    }, {
      "left" : "renamer.addDeclaredName(n.getString());",
      "right" : "renamer.addDeclaredName(n.getString());",
      "info" : "ExpressionStatement[6888-6927]:ExpressionStatement[6991-7030]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[6941-7087]:IfStatement[7044-7190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6980-7087]:Block[7083-7190]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6990-7024]:VariableDeclarationStatement[7093-7127]"
    }, {
      "left" : "renamer.addDeclaredName(nameNode.getString());",
      "right" : "renamer.addDeclaredName(nameNode.getString());",
      "info" : "ExpressionStatement[7033-7079]:ExpressionStatement[7136-7182]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[7095-7207]:ForStatement[7198-7310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7207]:Block[7259-7310]"
    }, {
      "left" : "findDeclaredNames(c, n, renamer);",
      "right" : "findDeclaredNames(c, n, renamer);",
      "info" : "ExpressionStatement[7166-7199]:ExpressionStatement[7269-7302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8498-8537]:Block[8601-8640]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8506-8531]:ExpressionStatement[8609-8634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8600-8657]:Block[8703-8760]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, js, this);",
      "right" : "NodeTraversal.traverse(compiler, js, this);",
      "info" : "ExpressionStatement[8608-8651]:ExpressionStatement[8711-8754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8712-8823]:Block[8815-8926]"
    }, {
      "left" : "int index = indexOfSeparator(name);",
      "right" : "int index = indexOfSeparator(name);",
      "info" : "VariableDeclarationStatement[8720-8755]:VariableDeclarationStatement[8823-8858]"
    }, {
      "left" : "return (index == -1) ? name : name.substring(0, index);",
      "right" : "return (index == -1) ? name : name.substring(0, index);",
      "info" : "ReturnStatement[8762-8817]:ReturnStatement[8865-8920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8878-8955]:Block[8981-9058]"
    }, {
      "left" : "return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);",
      "right" : "return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);",
      "info" : "ReturnStatement[8886-8949]:ReturnStatement[8989-9052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9008-9087]:Block[9111-9190]"
    }, {
      "left" : "return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;",
      "right" : "return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;",
      "info" : "ReturnStatement[9016-9081]:ReturnStatement[9119-9184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9203-9353]:Block[9306-9456]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[9211-9259]:IfStatement[9314-9362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9234-9259]:Block[9337-9362]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9244-9251]:ReturnStatement[9347-9354]"
    }, {
      "left" : "referenceStack.push(referencedNames);",
      "right" : "referenceStack.push(referencedNames);",
      "info" : "ExpressionStatement[9267-9304]:ExpressionStatement[9370-9407]"
    }, {
      "left" : "referencedNames = Sets.newHashSet();",
      "right" : "referencedNames = Sets.newHashSet();",
      "info" : "ExpressionStatement[9311-9347]:ExpressionStatement[9414-9450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9545-10191]:Block[9648-10294]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[9553-9601]:IfStatement[9656-9704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9576-9601]:Block[9679-9704]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9586-9593]:ReturnStatement[9689-9696]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[9609-9735]:ForStatement[9712-9838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-9735]:Block[9775-9838]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[9682-9700]:VariableDeclarationStatement[9785-9803]"
    }, {
      "left" : "handleScopeVar(v);",
      "right" : "handleScopeVar(v);",
      "info" : "ExpressionStatement[9709-9727]:ExpressionStatement[9812-9830]"
    }, {
      "left" : "Set<String> current = referencedNames;",
      "right" : "Set<String> current = referencedNames;",
      "info" : "VariableDeclarationStatement[9837-9875]:VariableDeclarationStatement[9940-9978]"
    }, {
      "left" : "referencedNames = referenceStack.pop();",
      "right" : "referencedNames = referenceStack.pop();",
      "info" : "ExpressionStatement[9882-9921]:ExpressionStatement[9985-10024]"
    }, {
      "left" : "if (!referenceStack.isEmpty())",
      "right" : "if (!referenceStack.isEmpty())",
      "info" : "IfStatement[10104-10185]:IfStatement[10207-10288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10135-10185]:Block[10238-10288]"
    }, {
      "left" : "referencedNames.addAll(current);",
      "right" : "referencedNames.addAll(current);",
      "info" : "ExpressionStatement[10145-10177]:ExpressionStatement[10248-10280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10409-11124]:Block[10512-11227]"
    }, {
      "left" : "String name  = v.getName();",
      "right" : "String name  = v.getName();",
      "info" : "VariableDeclarationStatement[10417-10444]:VariableDeclarationStatement[10520-10547]"
    }, {
      "left" : "if (containsSeparator(name) && !getOrginalName(name).isEmpty())",
      "right" : "if (containsSeparator(name) && !getOrginalName(name).isEmpty())",
      "info" : "IfStatement[10451-11118]:IfStatement[10554-11221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10515-11118]:Block[10618-11221]"
    }, {
      "left" : "String newName = findReplacementName(name);",
      "right" : "String newName = findReplacementName(name);",
      "info" : "VariableDeclarationStatement[10525-10568]:VariableDeclarationStatement[10628-10671]"
    }, {
      "left" : "referencedNames.remove(name);",
      "right" : "referencedNames.remove(name);",
      "info" : "ExpressionStatement[10577-10606]:ExpressionStatement[10680-10709]"
    }, {
      "left" : "referencedNames.add(newName);",
      "right" : "referencedNames.add(newName);",
      "info" : "ExpressionStatement[10768-10797]:ExpressionStatement[10871-10900]"
    }, {
      "left" : "List<Node> references = nameMap.get(name);",
      "right" : "List<Node> references = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[10806-10848]:VariableDeclarationStatement[10909-10951]"
    }, {
      "left" : "Preconditions.checkState(references != null);",
      "right" : "Preconditions.checkState(references != null);",
      "info" : "ExpressionStatement[10857-10902]:ExpressionStatement[10960-11005]"
    }, {
      "left" : "for (Node n : references)",
      "right" : "for (Node n : references)",
      "info" : "EnhancedForStatement[10911-11043]:EnhancedForStatement[11014-11146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10937-11043]:Block[11040-11146]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[10949-11001]:ExpressionStatement[11052-11104]"
    }, {
      "left" : "n.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[11012-11033]:ExpressionStatement[11115-11136]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[11052-11080]:ExpressionStatement[11155-11183]"
    }, {
      "left" : "nameMap.remove(name);",
      "right" : "nameMap.remove(name);",
      "info" : "ExpressionStatement[11089-11110]:ExpressionStatement[11192-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11240-11513]:Block[11343-11616]"
    }, {
      "left" : "String original = getOrginalName(name);",
      "right" : "String original = getOrginalName(name);",
      "info" : "VariableDeclarationStatement[11248-11287]:VariableDeclarationStatement[11351-11390]"
    }, {
      "left" : "String newName = original;",
      "right" : "String newName = original;",
      "info" : "VariableDeclarationStatement[11294-11320]:VariableDeclarationStatement[11397-11423]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[11327-11337]:VariableDeclarationStatement[11430-11440]"
    }, {
      "left" : "while (!isValidName(newName))",
      "right" : "while (!isValidName(newName))",
      "info" : "WhileStatement[11344-11485]:WhileStatement[11447-11588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11374-11485]:Block[11477-11588]"
    }, {
      "left" : "newName = original +\n            ContextualRenamer.UNIQUE_ID_SEPARATOR + String.valueOf(i++);",
      "right" : "newName = original +\n            ContextualRenamer.UNIQUE_ID_SEPARATOR + String.valueOf(i++);",
      "info" : "ExpressionStatement[11384-11477]:ExpressionStatement[11487-11580]"
    }, {
      "left" : "return newName;",
      "right" : "return newName;",
      "info" : "ReturnStatement[11492-11507]:ReturnStatement[11595-11610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11644-11828]:Block[11747-11931]"
    }, {
      "left" : "if (TokenStream.isJSIdentifier(name) &&\n          !referencedNames.contains(name) &&\n          !name.equals(ARGUMENTS))",
      "right" : "if (TokenStream.isJSIdentifier(name) &&\n          !referencedNames.contains(name) &&\n          !name.equals(ARGUMENTS))",
      "info" : "IfStatement[11652-11802]:IfStatement[11755-11905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11772-11802]:Block[11875-11905]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11782-11794]:ReturnStatement[11885-11897]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11809-11822]:ReturnStatement[11912-11925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11916-11942]:Block[12019-12045]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11924-11936]:ReturnStatement[12027-12039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12021-12478]:Block[12124-12581]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[12029-12077]:IfStatement[12132-12180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12052-12077]:Block[12155-12180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12062-12069]:ReturnStatement[12165-12172]"
    }, {
      "left" : "if (NodeUtil.isReferenceName(node))",
      "right" : "if (NodeUtil.isReferenceName(node))",
      "info" : "IfStatement[12085-12472]:IfStatement[12188-12575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12121-12472]:Block[12224-12575]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[12131-12162]:VariableDeclarationStatement[12234-12265]"
    }, {
      "left" : "referencedNames.add(name);",
      "right" : "referencedNames.add(name);",
      "info" : "ExpressionStatement[12271-12297]:ExpressionStatement[12374-12400]"
    }, {
      "left" : "if (containsSeparator(name))",
      "right" : "if (containsSeparator(name))",
      "info" : "IfStatement[12375-12464]:IfStatement[12478-12567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12404-12464]:Block[12507-12567]"
    }, {
      "left" : "addCandidateNameReference(name, node);",
      "right" : "addCandidateNameReference(name, node);",
      "info" : "ExpressionStatement[12416-12454]:ExpressionStatement[12519-12557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12544-12723]:Block[12647-12826]"
    }, {
      "left" : "List<Node> nodes = nameMap.get(name);",
      "right" : "List<Node> nodes = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[12552-12589]:VariableDeclarationStatement[12655-12692]"
    }, {
      "left" : "if (null == nodes)",
      "right" : "if (null == nodes)",
      "info" : "IfStatement[12596-12697]:IfStatement[12699-12800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12615-12697]:Block[12718-12800]"
    }, {
      "left" : "nodes = Lists.newLinkedList();",
      "right" : "nodes = Lists.newLinkedList();",
      "info" : "ExpressionStatement[12625-12655]:ExpressionStatement[12728-12758]"
    }, {
      "left" : "nameMap.put(name, nodes);",
      "right" : "nameMap.put(name, nodes);",
      "info" : "ExpressionStatement[12664-12689]:ExpressionStatement[12767-12792]"
    }, {
      "left" : "nodes.add(n);",
      "right" : "nodes.add(n);",
      "info" : "ExpressionStatement[12704-12717]:ExpressionStatement[12807-12820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13427-13501]:Block[13530-13604]"
    }, {
      "left" : "this.global = true;",
      "right" : "this.global = true;",
      "info" : "ExpressionStatement[13435-13454]:ExpressionStatement[13538-13557]"
    }, {
      "left" : "nameUsage = HashMultiset.create();",
      "right" : "nameUsage = HashMultiset.create();",
      "info" : "ExpressionStatement[13461-13495]:ExpressionStatement[13564-13598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13614-13682]:Block[13717-13785]"
    }, {
      "left" : "this.global = false;",
      "right" : "this.global = false;",
      "info" : "ExpressionStatement[13622-13642]:ExpressionStatement[13725-13745]"
    }, {
      "left" : "this.nameUsage = nameUsage;",
      "right" : "this.nameUsage = nameUsage;",
      "info" : "ExpressionStatement[13649-13676]:ExpressionStatement[13752-13779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13783-13837]:Block[13886-13940]"
    }, {
      "left" : "return new ContextualRenamer(nameUsage);",
      "right" : "return new ContextualRenamer(nameUsage);",
      "info" : "ReturnStatement[13791-13831]:ReturnStatement[13894-13934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13977-14459]:Block[14080-14562]"
    }, {
      "left" : "if (!name.equals(ARGUMENTS))",
      "right" : "if (!name.equals(ARGUMENTS))",
      "info" : "IfStatement[13985-14453]:IfStatement[14088-14556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14014-14453]:Block[14117-14556]"
    }, {
      "left" : "if (global)",
      "right" : "if (global)",
      "info" : "IfStatement[14024-14445]:IfStatement[14127-14548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14036-14076]:Block[14139-14179]"
    }, {
      "left" : "reserveName(name);",
      "right" : "reserveName(name);",
      "info" : "ExpressionStatement[14048-14066]:ExpressionStatement[14151-14169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14082-14445]:Block[14185-14548]"
    }, {
      "left" : "if (!declarations.containsKey(name))",
      "right" : "if (!declarations.containsKey(name))",
      "info" : "IfStatement[14168-14435]:IfStatement[14271-14538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14205-14435]:Block[14308-14538]"
    }, {
      "left" : "int id = incrementNameCount(name);",
      "right" : "int id = incrementNameCount(name);",
      "info" : "VariableDeclarationStatement[14219-14253]:VariableDeclarationStatement[14322-14356]"
    }, {
      "left" : "String newName = null;",
      "right" : "String newName = null;",
      "info" : "VariableDeclarationStatement[14266-14288]:VariableDeclarationStatement[14369-14391]"
    }, {
      "left" : "if (id != 0)",
      "right" : "if (id != 0)",
      "info" : "IfStatement[14301-14378]:IfStatement[14404-14481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14314-14378]:Block[14417-14481]"
    }, {
      "left" : "newName = getUniqueName(name, id);",
      "right" : "newName = getUniqueName(name, id);",
      "info" : "ExpressionStatement[14330-14364]:ExpressionStatement[14433-14467]"
    }, {
      "left" : "declarations.put(name, newName);",
      "right" : "declarations.put(name, newName);",
      "info" : "ExpressionStatement[14391-14423]:ExpressionStatement[14494-14526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14528-14575]:Block[14631-14678]"
    }, {
      "left" : "return declarations.get(oldName);",
      "right" : "return declarations.get(oldName);",
      "info" : "ReturnStatement[14536-14569]:ReturnStatement[14639-14672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14716-14769]:Block[14819-14872]"
    }, {
      "left" : "return name + UNIQUE_ID_SEPARATOR + id;",
      "right" : "return name + UNIQUE_ID_SEPARATOR + id;",
      "info" : "ReturnStatement[14724-14763]:ReturnStatement[14827-14866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14813-14858]:Block[14916-14961]"
    }, {
      "left" : "nameUsage.setCount(name, 0, 1);",
      "right" : "nameUsage.setCount(name, 0, 1);",
      "info" : "ExpressionStatement[14821-14852]:ExpressionStatement[14924-14955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14908-14952]:Block[15011-15055]"
    }, {
      "left" : "return nameUsage.add(name, 1);",
      "right" : "return nameUsage.add(name, 1);",
      "info" : "ReturnStatement[14916-14946]:ReturnStatement[15019-15049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15010-15037]:Block[15113-15140]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15018-15031]:ReturnStatement[15121-15134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15659-15968]:Block[15762-16071]"
    }, {
      "left" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "right" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "info" : "ExpressionStatement[15667-15708]:ExpressionStatement[15770-15811]"
    }, {
      "left" : "Preconditions.checkArgument(!idPrefix.isEmpty());",
      "right" : "Preconditions.checkArgument(!idPrefix.isEmpty());",
      "info" : "ExpressionStatement[15835-15884]:ExpressionStatement[15938-15987]"
    }, {
      "left" : "this.idPrefix = idPrefix;",
      "right" : "this.idPrefix = idPrefix;",
      "info" : "ExpressionStatement[15891-15916]:ExpressionStatement[15994-16019]"
    }, {
      "left" : "this.removeConstness = removeConstness;",
      "right" : "this.removeConstness = removeConstness;",
      "info" : "ExpressionStatement[15923-15962]:ExpressionStatement[16026-16065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16029-16199]:Block[16132-16302]"
    }, {
      "left" : "Preconditions.checkState(!name.equals(ARGUMENTS));",
      "right" : "Preconditions.checkState(!name.equals(ARGUMENTS));",
      "info" : "ExpressionStatement[16037-16087]:ExpressionStatement[16140-16190]"
    }, {
      "left" : "if (!declarations.containsKey(name))",
      "right" : "if (!declarations.containsKey(name))",
      "info" : "IfStatement[16094-16193]:IfStatement[16197-16296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16131-16193]:Block[16234-16296]"
    }, {
      "left" : "declarations.put(name, getUniqueName(name));",
      "right" : "declarations.put(name, getUniqueName(name));",
      "info" : "ExpressionStatement[16141-16185]:ExpressionStatement[16244-16288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16247-16732]:Block[16350-16835]"
    }, {
      "left" : "if (name.isEmpty())",
      "right" : "if (name.isEmpty())",
      "info" : "IfStatement[16255-16305]:IfStatement[16358-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16275-16305]:Block[16378-16408]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[16285-16297]:ReturnStatement[16388-16400]"
    }, {
      "left" : "if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1)",
      "right" : "if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1)",
      "info" : "IfStatement[16313-16493]:IfStatement[16416-16596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16376-16493]:Block[16479-16596]"
    }, {
      "left" : "name = name.substring(\n              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));",
      "right" : "name = name.substring(\n              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));",
      "info" : "ExpressionStatement[16388-16485]:ExpressionStatement[16491-16588]"
    }, {
      "left" : "return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n          + idPrefix + uniqueIdSupplier.get();",
      "right" : "return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n          + idPrefix + uniqueIdSupplier.get();",
      "info" : "ReturnStatement[16628-16726]:ReturnStatement[16731-16829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16801-16848]:Block[16904-16951]"
    }, {
      "left" : "return declarations.get(oldName);",
      "right" : "return declarations.get(oldName);",
      "info" : "ReturnStatement[16809-16842]:ReturnStatement[16912-16945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16899-16983]:Block[17002-17086]"
    }, {
      "left" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);",
      "right" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);",
      "info" : "ReturnStatement[16907-16977]:ReturnStatement[17010-17080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17041-17078]:Block[17144-17181]"
    }, {
      "left" : "return removeConstness;",
      "right" : "return removeConstness;",
      "info" : "ReturnStatement[17049-17072]:ReturnStatement[17152-17175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17456-17543]:Block[17559-17646]"
    }, {
      "left" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "right" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "info" : "ExpressionStatement[17464-17505]:ExpressionStatement[17567-17608]"
    }, {
      "left" : "this.idPrefix = idPrefix;",
      "right" : "this.idPrefix = idPrefix;",
      "info" : "ExpressionStatement[17512-17537]:ExpressionStatement[17615-17640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17594-17668]:Block[17697-17771]"
    }, {
      "left" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, false);",
      "right" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, false);",
      "info" : "ReturnStatement[17602-17662]:ReturnStatement[17705-17765]"
    } ]
  },
  "interFileMappings" : { }
}