{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HashCodeBuilder",
      "right" : "HashCodeBuilder",
      "info" : "TypeDeclaration[1082-32887]:TypeDeclaration[1082-33210]"
    }, {
      "left" : "private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {\n        @Override\n        protected Set<IDKey> initialValue() {\n            return new HashSet<IDKey>();\n        }\n    };",
      "right" : "private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();",
      "info" : "FieldDeclaration[3151-3544]:FieldDeclaration[3151-3421]"
    }, {
      "left" : "static Set<IDKey> getRegistry()",
      "right" : "static Set<IDKey> getRegistry()",
      "info" : "MethodDeclaration[4358-4656]:MethodDeclaration[4235-4533]"
    }, {
      "left" : "static boolean isRegistered(Object value)",
      "right" : "static boolean isRegistered(Object value)",
      "info" : "MethodDeclaration[4662-5132]:MethodDeclaration[4539-5069]"
    }, {
      "left" : "private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients,\n            String[] excludeFields)",
      "right" : "private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients,\n            String[] excludeFields)",
      "info" : "MethodDeclaration[5138-6975]:MethodDeclaration[5075-6912]"
    }, {
      "left" : "public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object)",
      "right" : "public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object)",
      "info" : "MethodDeclaration[6981-8679]:MethodDeclaration[6918-8616]"
    }, {
      "left" : "public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n            boolean testTransients)",
      "right" : "public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n            boolean testTransients)",
      "info" : "MethodDeclaration[8685-10611]:MethodDeclaration[8622-10548]"
    }, {
      "left" : "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n            boolean testTransients, Class<? super T> reflectUpToClass)",
      "right" : "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n            boolean testTransients, Class<? super T> reflectUpToClass)",
      "info" : "MethodDeclaration[10617-11649]:MethodDeclaration[10554-11586]"
    }, {
      "left" : "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n            boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields)",
      "right" : "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n            boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields)",
      "info" : "MethodDeclaration[11655-14485]:MethodDeclaration[11592-14422]"
    }, {
      "left" : "public static int reflectionHashCode(Object object)",
      "right" : "public static int reflectionHashCode(Object object)",
      "info" : "MethodDeclaration[14491-15670]:MethodDeclaration[14428-15607]"
    }, {
      "left" : "public static int reflectionHashCode(Object object, boolean testTransients)",
      "right" : "public static int reflectionHashCode(Object object, boolean testTransients)",
      "info" : "MethodDeclaration[15676-17055]:MethodDeclaration[15613-16992]"
    }, {
      "left" : "public static int reflectionHashCode(Object object, Collection<String> excludeFields)",
      "right" : "public static int reflectionHashCode(Object object, Collection<String> excludeFields)",
      "info" : "MethodDeclaration[17061-18436]:MethodDeclaration[16998-18373]"
    }, {
      "left" : "public static int reflectionHashCode(Object object, String[] excludeFields)",
      "right" : "public static int reflectionHashCode(Object object, String[] excludeFields)",
      "info" : "MethodDeclaration[18524-19851]:MethodDeclaration[18461-19788]"
    }, {
      "left" : "static void register(Object value)",
      "right" : "static void register(Object value)",
      "info" : "MethodDeclaration[19857-20144]:MethodDeclaration[19794-20245]"
    }, {
      "left" : "static void unregister(Object value)",
      "right" : "static void unregister(Object value)",
      "info" : "MethodDeclaration[20150-20490]:MethodDeclaration[20251-20813]"
    }, {
      "left" : "private final int iConstant;",
      "right" : "private final int iConstant;",
      "info" : "FieldDeclaration[20496-20589]:FieldDeclaration[20819-20912]"
    }, {
      "left" : "private int iTotal = 0;",
      "right" : "private int iTotal = 0;",
      "info" : "FieldDeclaration[20595-20672]:FieldDeclaration[20918-20995]"
    }, {
      "left" : "public HashCodeBuilder()",
      "right" : "public HashCodeBuilder()",
      "info" : "MethodDeclaration[20678-20888]:MethodDeclaration[21001-21211]"
    }, {
      "left" : "public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber)",
      "right" : "public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber)",
      "info" : "MethodDeclaration[20894-22292]:MethodDeclaration[21217-22615]"
    }, {
      "left" : "public HashCodeBuilder append(boolean value)",
      "right" : "public HashCodeBuilder append(boolean value)",
      "info" : "MethodDeclaration[22298-22903]:MethodDeclaration[22621-23226]"
    }, {
      "left" : "public HashCodeBuilder append(boolean[] array)",
      "right" : "public HashCodeBuilder append(boolean[] array)",
      "info" : "MethodDeclaration[22909-23405]:MethodDeclaration[23232-23728]"
    }, {
      "left" : "public HashCodeBuilder append(byte value)",
      "right" : "public HashCodeBuilder append(byte value)",
      "info" : "MethodDeclaration[23493-23821]:MethodDeclaration[23816-24144]"
    }, {
      "left" : "public HashCodeBuilder append(byte[] array)",
      "right" : "public HashCodeBuilder append(byte[] array)",
      "info" : "MethodDeclaration[23909-24399]:MethodDeclaration[24232-24722]"
    }, {
      "left" : "public HashCodeBuilder append(char value)",
      "right" : "public HashCodeBuilder append(char value)",
      "info" : "MethodDeclaration[24405-24733]:MethodDeclaration[24728-25056]"
    }, {
      "left" : "public HashCodeBuilder append(char[] array)",
      "right" : "public HashCodeBuilder append(char[] array)",
      "info" : "MethodDeclaration[24739-25229]:MethodDeclaration[25062-25552]"
    }, {
      "left" : "public HashCodeBuilder append(double value)",
      "right" : "public HashCodeBuilder append(double value)",
      "info" : "MethodDeclaration[25235-25558]:MethodDeclaration[25558-25881]"
    }, {
      "left" : "public HashCodeBuilder append(double[] array)",
      "right" : "public HashCodeBuilder append(double[] array)",
      "info" : "MethodDeclaration[25564-26058]:MethodDeclaration[25887-26381]"
    }, {
      "left" : "public HashCodeBuilder append(float value)",
      "right" : "public HashCodeBuilder append(float value)",
      "info" : "MethodDeclaration[26064-26417]:MethodDeclaration[26387-26740]"
    }, {
      "left" : "public HashCodeBuilder append(float[] array)",
      "right" : "public HashCodeBuilder append(float[] array)",
      "info" : "MethodDeclaration[26423-26915]:MethodDeclaration[26746-27238]"
    }, {
      "left" : "public HashCodeBuilder append(int value)",
      "right" : "public HashCodeBuilder append(int value)",
      "info" : "MethodDeclaration[26921-27247]:MethodDeclaration[27244-27570]"
    }, {
      "left" : "public HashCodeBuilder append(int[] array)",
      "right" : "public HashCodeBuilder append(int[] array)",
      "info" : "MethodDeclaration[27253-27742]:MethodDeclaration[27576-28065]"
    }, {
      "left" : "// NOTE: This method uses >> and not >>> as Effective Java and \n    //       Long.hashCode do. Ideally we should switch to >>> at \n    //       some stage. There are backwards compat issues, so \n    //       that will have to wait for the time being. cf LANG-342.\n    public HashCodeBuilder append(long value)",
      "right" : "// NOTE: This method uses >> and not >>> as Effective Java and \n    //       Long.hashCode do. Ideally we should switch to >>> at \n    //       some stage. There are backwards compat issues, so \n    //       that will have to wait for the time being. cf LANG-342.\n    public HashCodeBuilder append(long value)",
      "info" : "MethodDeclaration[27748-28370]:MethodDeclaration[28071-28693]"
    }, {
      "left" : "public HashCodeBuilder append(long[] array)",
      "right" : "public HashCodeBuilder append(long[] array)",
      "info" : "MethodDeclaration[28376-28866]:MethodDeclaration[28699-29189]"
    }, {
      "left" : "public HashCodeBuilder append(Object object)",
      "right" : "public HashCodeBuilder append(Object object)",
      "info" : "MethodDeclaration[28872-30492]:MethodDeclaration[29195-30815]"
    }, {
      "left" : "public HashCodeBuilder append(Object[] array)",
      "right" : "public HashCodeBuilder append(Object[] array)",
      "info" : "MethodDeclaration[30498-30993]:MethodDeclaration[30821-31316]"
    }, {
      "left" : "public HashCodeBuilder append(short value)",
      "right" : "public HashCodeBuilder append(short value)",
      "info" : "MethodDeclaration[30999-31330]:MethodDeclaration[31322-31653]"
    }, {
      "left" : "public HashCodeBuilder append(short[] array)",
      "right" : "public HashCodeBuilder append(short[] array)",
      "info" : "MethodDeclaration[31336-31828]:MethodDeclaration[31659-32151]"
    }, {
      "left" : "public HashCodeBuilder appendSuper(int superHashCode)",
      "right" : "public HashCodeBuilder appendSuper(int superHashCode)",
      "info" : "MethodDeclaration[31834-32250]:MethodDeclaration[32157-32573]"
    }, {
      "left" : "public int toHashCode()",
      "right" : "public int toHashCode()",
      "info" : "MethodDeclaration[32256-32473]:MethodDeclaration[32579-32796]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[32479-32884]:MethodDeclaration[32802-33207]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4618-4656]:Block[4495-4533]"
    }, {
      "left" : "return REGISTRY.get();",
      "right" : "return REGISTRY.get();",
      "info" : "ReturnStatement[4628-4650]:ReturnStatement[4505-4527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5068-5132]:Block[4945-5069]"
    }, {
      "left" : "return getRegistry().contains(new IDKey(value));",
      "right" : "return registry != null && registry.contains(new IDKey(value));",
      "info" : "ReturnStatement[5078-5126]:ReturnStatement[5000-5063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-6975]:Block[5782-6912]"
    }, {
      "left" : "if (isRegistered(object))",
      "right" : "if (isRegistered(object))",
      "info" : "IfStatement[5855-5912]:IfStatement[5792-5849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5881-5912]:Block[5818-5849]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5895-5902]:ReturnStatement[5832-5839]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5921-6969]:TryStatement[5858-6906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5925-6917]:Block[5862-6854]"
    }, {
      "left" : "register(object);",
      "right" : "register(object);",
      "info" : "ExpressionStatement[5939-5956]:ExpressionStatement[5876-5893]"
    }, {
      "left" : "Field[] fields = clazz.getDeclaredFields();",
      "right" : "Field[] fields = clazz.getDeclaredFields();",
      "info" : "VariableDeclarationStatement[5969-6012]:VariableDeclarationStatement[5906-5949]"
    }, {
      "left" : "AccessibleObject.setAccessible(fields, true);",
      "right" : "AccessibleObject.setAccessible(fields, true);",
      "info" : "ExpressionStatement[6025-6070]:ExpressionStatement[5962-6007]"
    }, {
      "left" : "for (Field field : fields)",
      "right" : "for (Field field : fields)",
      "info" : "EnhancedForStatement[6083-6907]:EnhancedForStatement[6020-6844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6110-6907]:Block[6047-6844]"
    }, {
      "left" : "if (!ArrayUtils.contains(excludeFields, field.getName())\n                    && (field.getName().indexOf('$') == -1)\n                    && (useTransients || !Modifier.isTransient(field.getModifiers()))\n                    && (!Modifier.isStatic(field.getModifiers())))",
      "right" : "if (!ArrayUtils.contains(excludeFields, field.getName())\n                    && (field.getName().indexOf('$') == -1)\n                    && (useTransients || !Modifier.isTransient(field.getModifiers()))\n                    && (!Modifier.isStatic(field.getModifiers())))",
      "info" : "IfStatement[6128-6893]:IfStatement[6065-6830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6398-6893]:Block[6335-6830]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6420-6875]:TryStatement[6357-6812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6424-6562]:Block[6361-6499]"
    }, {
      "left" : "Object fieldValue = field.get(object);",
      "right" : "Object fieldValue = field.get(object);",
      "info" : "VariableDeclarationStatement[6450-6488]:VariableDeclarationStatement[6387-6425]"
    }, {
      "left" : "builder.append(fieldValue);",
      "right" : "builder.append(fieldValue);",
      "info" : "ExpressionStatement[6513-6540]:ExpressionStatement[6450-6477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6596-6875]:Block[6533-6812]"
    }, {
      "left" : "throw new InternalError(\"Unexpected IllegalAccessException\");",
      "right" : "throw new InternalError(\"Unexpected IllegalAccessException\");",
      "info" : "ThrowStatement[6792-6853]:ThrowStatement[6729-6790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6926-6969]:Block[6863-6906]"
    }, {
      "left" : "unregister(object);",
      "right" : "unregister(object);",
      "info" : "ExpressionStatement[6940-6959]:ExpressionStatement[6877-6896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8557-8679]:Block[8494-8616]"
    }, {
      "left" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);",
      "right" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);",
      "info" : "ReturnStatement[8567-8673]:ReturnStatement[8504-8610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10464-10611]:Block[10401-10548]"
    }, {
      "left" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null,\n                null);",
      "right" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null,\n                null);",
      "info" : "ReturnStatement[10474-10605]:ReturnStatement[10411-10542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11490-11649]:Block[11427-11586]"
    }, {
      "left" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients,\n                reflectUpToClass, null);",
      "right" : "return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients,\n                reflectUpToClass, null);",
      "info" : "ReturnStatement[11500-11643]:ReturnStatement[11437-11580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13848-14485]:Block[13785-14422]"
    }, {
      "left" : "if (object == null)",
      "right" : "if (object == null)",
      "info" : "IfStatement[13859-13994]:IfStatement[13796-13931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13879-13994]:Block[13816-13931]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");",
      "info" : "ThrowStatement[13893-13984]:ThrowStatement[13830-13921]"
    }, {
      "left" : "HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);",
      "right" : "HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);",
      "info" : "VariableDeclarationStatement[14003-14102]:VariableDeclarationStatement[13940-14039]"
    }, {
      "left" : "Class<?> clazz = object.getClass();",
      "right" : "Class<?> clazz = object.getClass();",
      "info" : "VariableDeclarationStatement[14111-14146]:VariableDeclarationStatement[14048-14083]"
    }, {
      "left" : "reflectionAppend(object, clazz, builder, testTransients, excludeFields);",
      "right" : "reflectionAppend(object, clazz, builder, testTransients, excludeFields);",
      "info" : "ExpressionStatement[14155-14227]:ExpressionStatement[14092-14164]"
    }, {
      "left" : "while (clazz.getSuperclass() != null && clazz != reflectUpToClass)",
      "right" : "while (clazz.getSuperclass() != null && clazz != reflectUpToClass)",
      "info" : "WhileStatement[14236-14442]:WhileStatement[14173-14379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14303-14442]:Block[14240-14379]"
    }, {
      "left" : "clazz = clazz.getSuperclass();",
      "right" : "clazz = clazz.getSuperclass();",
      "info" : "ExpressionStatement[14317-14347]:ExpressionStatement[14254-14284]"
    }, {
      "left" : "reflectionAppend(object, clazz, builder, testTransients, excludeFields);",
      "right" : "reflectionAppend(object, clazz, builder, testTransients, excludeFields);",
      "info" : "ExpressionStatement[14360-14432]:ExpressionStatement[14297-14369]"
    }, {
      "left" : "return builder.toHashCode();",
      "right" : "return builder.toHashCode();",
      "info" : "ReturnStatement[14451-14479]:ReturnStatement[14388-14416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15593-15670]:Block[15530-15607]"
    }, {
      "left" : "return reflectionHashCode(17, 37, object, false, null, null);",
      "right" : "return reflectionHashCode(17, 37, object, false, null, null);",
      "info" : "ReturnStatement[15603-15664]:ReturnStatement[15540-15601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16969-17055]:Block[16906-16992]"
    }, {
      "left" : "return reflectionHashCode(17, 37, object, testTransients, null, null);",
      "right" : "return reflectionHashCode(17, 37, object, testTransients, null, null);",
      "info" : "ReturnStatement[16979-17049]:ReturnStatement[16916-16986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18324-18436]:Block[18261-18373]"
    }, {
      "left" : "return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));",
      "right" : "return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));",
      "info" : "ReturnStatement[18334-18430]:ReturnStatement[18271-18367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19765-19851]:Block[19702-19788]"
    }, {
      "left" : "return reflectionHashCode(17, 37, object, false, null, excludeFields);",
      "right" : "return reflectionHashCode(17, 37, object, false, null, excludeFields);",
      "info" : "ReturnStatement[19775-19845]:ReturnStatement[19712-19782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20092-20144]:Block[20029-20245]"
    }, {
      "left" : "getRegistry().add(new IDKey(value));",
      "right" : "getRegistry().add(new IDKey(value));",
      "info" : "ExpressionStatement[20102-20138]:ExpressionStatement[20203-20239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20435-20490]:Block[20536-20813]"
    }, {
      "left" : "getRegistry().remove(new IDKey(value));",
      "right" : "REGISTRY.remove();",
      "info" : "ExpressionStatement[20445-20484]:ExpressionStatement[20747-20765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20836-20888]:Block[21159-21211]"
    }, {
      "left" : "iConstant = 37;",
      "right" : "iConstant = 37;",
      "info" : "ExpressionStatement[20846-20861]:ExpressionStatement[21169-21184]"
    }, {
      "left" : "iTotal = 17;",
      "right" : "iTotal = 17;",
      "info" : "ExpressionStatement[20870-20882]:ExpressionStatement[21193-21205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21575-22292]:Block[21898-22615]"
    }, {
      "left" : "if (initialNonZeroOddNumber == 0)",
      "right" : "if (initialNonZeroOddNumber == 0)",
      "info" : "IfStatement[21585-21731]:IfStatement[21908-22054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21619-21731]:Block[21942-22054]"
    }, {
      "left" : "throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");",
      "right" : "throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");",
      "info" : "ThrowStatement[21633-21721]:ThrowStatement[21956-22044]"
    }, {
      "left" : "if (initialNonZeroOddNumber % 2 == 0)",
      "right" : "if (initialNonZeroOddNumber % 2 == 0)",
      "info" : "IfStatement[21740-21886]:IfStatement[22063-22209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21778-21886]:Block[22101-22209]"
    }, {
      "left" : "throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");",
      "right" : "throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");",
      "info" : "ThrowStatement[21792-21876]:ThrowStatement[22115-22199]"
    }, {
      "left" : "if (multiplierNonZeroOddNumber == 0)",
      "right" : "if (multiplierNonZeroOddNumber == 0)",
      "info" : "IfStatement[21895-22041]:IfStatement[22218-22364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21932-22041]:Block[22255-22364]"
    }, {
      "left" : "throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");",
      "right" : "throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");",
      "info" : "ThrowStatement[21946-22031]:ThrowStatement[22269-22354]"
    }, {
      "left" : "if (multiplierNonZeroOddNumber % 2 == 0)",
      "right" : "if (multiplierNonZeroOddNumber % 2 == 0)",
      "info" : "IfStatement[22050-22196]:IfStatement[22373-22519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22091-22196]:Block[22414-22519]"
    }, {
      "left" : "throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");",
      "right" : "throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");",
      "info" : "ThrowStatement[22105-22186]:ThrowStatement[22428-22509]"
    }, {
      "left" : "iConstant = multiplierNonZeroOddNumber;",
      "right" : "iConstant = multiplierNonZeroOddNumber;",
      "info" : "ExpressionStatement[22205-22244]:ExpressionStatement[22528-22567]"
    }, {
      "left" : "iTotal = initialNonZeroOddNumber;",
      "right" : "iTotal = initialNonZeroOddNumber;",
      "info" : "ExpressionStatement[22253-22286]:ExpressionStatement[22576-22609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22820-22903]:Block[23143-23226]"
    }, {
      "left" : "iTotal = iTotal * iConstant + (value ? 0 : 1);",
      "right" : "iTotal = iTotal * iConstant + (value ? 0 : 1);",
      "info" : "ExpressionStatement[22830-22876]:ExpressionStatement[23153-23199]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[22885-22897]:ReturnStatement[23208-23220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23179-23405]:Block[23502-23728]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[23189-23378]:IfStatement[23512-23701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23208-23260]:Block[23531-23583]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[23222-23250]:ExpressionStatement[23545-23573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23266-23378]:Block[23589-23701]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[23280-23368]:ForStatement[23603-23691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23319-23368]:Block[23642-23691]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[23337-23354]:ExpressionStatement[23660-23677]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23387-23399]:ReturnStatement[23710-23722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23748-23821]:Block[24071-24144]"
    }, {
      "left" : "iTotal = iTotal * iConstant + value;",
      "right" : "iTotal = iTotal * iConstant + value;",
      "info" : "ExpressionStatement[23758-23794]:ExpressionStatement[24081-24117]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23803-23815]:ReturnStatement[24126-24138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24173-24399]:Block[24496-24722]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[24183-24372]:IfStatement[24506-24695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24202-24254]:Block[24525-24577]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[24216-24244]:ExpressionStatement[24539-24567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24260-24372]:Block[24583-24695]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[24274-24362]:ForStatement[24597-24685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24313-24362]:Block[24636-24685]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[24331-24348]:ExpressionStatement[24654-24671]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[24381-24393]:ReturnStatement[24704-24716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24660-24733]:Block[24983-25056]"
    }, {
      "left" : "iTotal = iTotal * iConstant + value;",
      "right" : "iTotal = iTotal * iConstant + value;",
      "info" : "ExpressionStatement[24670-24706]:ExpressionStatement[24993-25029]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[24715-24727]:ReturnStatement[25038-25050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25003-25229]:Block[25326-25552]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[25013-25202]:IfStatement[25336-25525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25032-25084]:Block[25355-25407]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[25046-25074]:ExpressionStatement[25369-25397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25090-25202]:Block[25413-25525]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[25104-25192]:ForStatement[25427-25515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25143-25192]:Block[25466-25515]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[25161-25178]:ExpressionStatement[25484-25501]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[25211-25223]:ReturnStatement[25534-25546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25496-25558]:Block[25819-25881]"
    }, {
      "left" : "return append(Double.doubleToLongBits(value));",
      "right" : "return append(Double.doubleToLongBits(value));",
      "info" : "ReturnStatement[25506-25552]:ReturnStatement[25829-25875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25832-26058]:Block[26155-26381]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[25842-26031]:IfStatement[26165-26354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25861-25913]:Block[26184-26236]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[25875-25903]:ExpressionStatement[26198-26226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25919-26031]:Block[26242-26354]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[25933-26021]:ForStatement[26256-26344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25972-26021]:Block[26295-26344]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[25990-26007]:ExpressionStatement[26313-26330]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[26040-26052]:ReturnStatement[26363-26375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26322-26417]:Block[26645-26740]"
    }, {
      "left" : "iTotal = iTotal * iConstant + Float.floatToIntBits(value);",
      "right" : "iTotal = iTotal * iConstant + Float.floatToIntBits(value);",
      "info" : "ExpressionStatement[26332-26390]:ExpressionStatement[26655-26713]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[26399-26411]:ReturnStatement[26722-26734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26689-26915]:Block[27012-27238]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[26699-26888]:IfStatement[27022-27211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26718-26770]:Block[27041-27093]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[26732-26760]:ExpressionStatement[27055-27083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26776-26888]:Block[27099-27211]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[26790-26878]:ForStatement[27113-27201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26829-26878]:Block[27152-27201]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[26847-26864]:ExpressionStatement[27170-27187]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[26897-26909]:ReturnStatement[27220-27232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27174-27247]:Block[27497-27570]"
    }, {
      "left" : "iTotal = iTotal * iConstant + value;",
      "right" : "iTotal = iTotal * iConstant + value;",
      "info" : "ExpressionStatement[27184-27220]:ExpressionStatement[27507-27543]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[27229-27241]:ReturnStatement[27552-27564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27516-27742]:Block[27839-28065]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[27526-27715]:IfStatement[27849-28038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27545-27597]:Block[27868-27920]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[27559-27587]:ExpressionStatement[27882-27910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27603-27715]:Block[27926-28038]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[27617-27705]:ForStatement[27940-28028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27656-27705]:Block[27979-28028]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[27674-27691]:ExpressionStatement[27997-28014]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[27724-27736]:ReturnStatement[28047-28059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28271-28370]:Block[28594-28693]"
    }, {
      "left" : "iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));",
      "right" : "iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));",
      "info" : "ExpressionStatement[28281-28343]:ExpressionStatement[28604-28666]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28352-28364]:ReturnStatement[28675-28687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28640-28866]:Block[28963-29189]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[28650-28839]:IfStatement[28973-29162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28669-28721]:Block[28992-29044]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[28683-28711]:ExpressionStatement[29006-29034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28727-28839]:Block[29050-29162]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[28741-28829]:ForStatement[29064-29152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28780-28829]:Block[29103-29152]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[28798-28815]:ExpressionStatement[29121-29138]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28848-28860]:ReturnStatement[29171-29183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29136-30492]:Block[29459-30815]"
    }, {
      "left" : "if (object == null)",
      "right" : "if (object == null)",
      "info" : "IfStatement[29146-30465]:IfStatement[29469-30788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29166-29219]:Block[29489-29542]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[29180-29208]:ExpressionStatement[29503-29531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29225-30465]:Block[29548-30788]"
    }, {
      "left" : "if(object.getClass().isArray())",
      "right" : "if(object.getClass().isArray())",
      "info" : "IfStatement[29239-30455]:IfStatement[29562-30778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29271-30369]:Block[29594-30692]"
    }, {
      "left" : "if (object instanceof long[])",
      "right" : "if (object instanceof long[])",
      "info" : "IfStatement[29427-30355]:IfStatement[29750-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29457-29521]:Block[29780-29844]"
    }, {
      "left" : "append((long[]) object);",
      "right" : "append((long[]) object);",
      "info" : "ExpressionStatement[29479-29503]:ExpressionStatement[29802-29826]"
    }, {
      "left" : "if (object instanceof int[])",
      "right" : "if (object instanceof int[])",
      "info" : "IfStatement[29527-30355]:IfStatement[29850-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29556-29619]:Block[29879-29942]"
    }, {
      "left" : "append((int[]) object);",
      "right" : "append((int[]) object);",
      "info" : "ExpressionStatement[29578-29601]:ExpressionStatement[29901-29924]"
    }, {
      "left" : "if (object instanceof short[])",
      "right" : "if (object instanceof short[])",
      "info" : "IfStatement[29625-30355]:IfStatement[29948-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29656-29721]:Block[29979-30044]"
    }, {
      "left" : "append((short[]) object);",
      "right" : "append((short[]) object);",
      "info" : "ExpressionStatement[29678-29703]:ExpressionStatement[30001-30026]"
    }, {
      "left" : "if (object instanceof char[])",
      "right" : "if (object instanceof char[])",
      "info" : "IfStatement[29727-30355]:IfStatement[30050-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29757-29821]:Block[30080-30144]"
    }, {
      "left" : "append((char[]) object);",
      "right" : "append((char[]) object);",
      "info" : "ExpressionStatement[29779-29803]:ExpressionStatement[30102-30126]"
    }, {
      "left" : "if (object instanceof byte[])",
      "right" : "if (object instanceof byte[])",
      "info" : "IfStatement[29827-30355]:IfStatement[30150-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29857-29921]:Block[30180-30244]"
    }, {
      "left" : "append((byte[]) object);",
      "right" : "append((byte[]) object);",
      "info" : "ExpressionStatement[29879-29903]:ExpressionStatement[30202-30226]"
    }, {
      "left" : "if (object instanceof double[])",
      "right" : "if (object instanceof double[])",
      "info" : "IfStatement[29927-30355]:IfStatement[30250-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29959-30025]:Block[30282-30348]"
    }, {
      "left" : "append((double[]) object);",
      "right" : "append((double[]) object);",
      "info" : "ExpressionStatement[29981-30007]:ExpressionStatement[30304-30330]"
    }, {
      "left" : "if (object instanceof float[])",
      "right" : "if (object instanceof float[])",
      "info" : "IfStatement[30031-30355]:IfStatement[30354-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30062-30127]:Block[30385-30450]"
    }, {
      "left" : "append((float[]) object);",
      "right" : "append((float[]) object);",
      "info" : "ExpressionStatement[30084-30109]:ExpressionStatement[30407-30432]"
    }, {
      "left" : "if (object instanceof boolean[])",
      "right" : "if (object instanceof boolean[])",
      "info" : "IfStatement[30133-30355]:IfStatement[30456-30678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30166-30233]:Block[30489-30556]"
    }, {
      "left" : "append((boolean[]) object);",
      "right" : "append((boolean[]) object);",
      "info" : "ExpressionStatement[30188-30215]:ExpressionStatement[30511-30538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30239-30355]:Block[30562-30678]"
    }, {
      "left" : "append((Object[]) object);",
      "right" : "append((Object[]) object);",
      "info" : "ExpressionStatement[30311-30337]:ExpressionStatement[30634-30660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30375-30455]:Block[30698-30778]"
    }, {
      "left" : "iTotal = iTotal * iConstant + object.hashCode();",
      "right" : "iTotal = iTotal * iConstant + object.hashCode();",
      "info" : "ExpressionStatement[30393-30441]:ExpressionStatement[30716-30764]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30474-30486]:ReturnStatement[30797-30809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30767-30993]:Block[31090-31316]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[30777-30966]:IfStatement[31100-31289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30796-30848]:Block[31119-31171]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[30810-30838]:ExpressionStatement[31133-31161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30854-30966]:Block[31177-31289]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[30868-30956]:ForStatement[31191-31279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30907-30956]:Block[31230-31279]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[30925-30942]:ExpressionStatement[31248-31265]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30975-30987]:ReturnStatement[31298-31310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31257-31330]:Block[31580-31653]"
    }, {
      "left" : "iTotal = iTotal * iConstant + value;",
      "right" : "iTotal = iTotal * iConstant + value;",
      "info" : "ExpressionStatement[31267-31303]:ExpressionStatement[31590-31626]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31312-31324]:ReturnStatement[31635-31647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31602-31828]:Block[31925-32151]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[31612-31801]:IfStatement[31935-32124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31631-31683]:Block[31954-32006]"
    }, {
      "left" : "iTotal = iTotal * iConstant;",
      "right" : "iTotal = iTotal * iConstant;",
      "info" : "ExpressionStatement[31645-31673]:ExpressionStatement[31968-31996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31689-31801]:Block[32012-32124]"
    }, {
      "left" : "for (int i = 0; i < array.length; i++)",
      "right" : "for (int i = 0; i < array.length; i++)",
      "info" : "ForStatement[31703-31791]:ForStatement[32026-32114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31742-31791]:Block[32065-32114]"
    }, {
      "left" : "append(array[i]);",
      "right" : "append(array[i]);",
      "info" : "ExpressionStatement[31760-31777]:ExpressionStatement[32083-32100]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31810-31822]:ReturnStatement[32133-32145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32169-32250]:Block[32492-32573]"
    }, {
      "left" : "iTotal = iTotal * iConstant + superHashCode;",
      "right" : "iTotal = iTotal * iConstant + superHashCode;",
      "info" : "ExpressionStatement[32179-32223]:ExpressionStatement[32502-32546]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[32232-32244]:ReturnStatement[32555-32567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32443-32473]:Block[32766-32796]"
    }, {
      "left" : "return iTotal;",
      "right" : "return iTotal;",
      "info" : "ReturnStatement[32453-32467]:ReturnStatement[32776-32790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32848-32884]:Block[33171-33207]"
    }, {
      "left" : "return toHashCode();",
      "right" : "return toHashCode();",
      "info" : "ReturnStatement[32858-32878]:ReturnStatement[33181-33201]"
    } ]
  },
  "interFileMappings" : { }
}