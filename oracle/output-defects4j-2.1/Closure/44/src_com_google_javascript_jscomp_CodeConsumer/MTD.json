{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeConsumer",
      "right" : "CodeConsumer",
      "info" : "TypeDeclaration[696-6947]:TypeDeclaration[696-7017]"
    }, {
      "left" : "boolean statementNeedsEnded = false;",
      "right" : "boolean statementNeedsEnded = false;",
      "info" : "FieldDeclaration[861-897]:FieldDeclaration[861-897]"
    }, {
      "left" : "boolean statementStarted = false;",
      "right" : "boolean statementStarted = false;",
      "info" : "FieldDeclaration[900-933]:FieldDeclaration[900-933]"
    }, {
      "left" : "boolean sawFunction = false;",
      "right" : "boolean sawFunction = false;",
      "info" : "FieldDeclaration[936-964]:FieldDeclaration[936-964]"
    }, {
      "left" : "void startSourceMapping(Node node)",
      "right" : "void startSourceMapping(Node node)",
      "info" : "MethodDeclaration[968-1100]:MethodDeclaration[968-1100]"
    }, {
      "left" : "void endSourceMapping(Node node)",
      "right" : "void endSourceMapping(Node node)",
      "info" : "MethodDeclaration[1104-1236]:MethodDeclaration[1104-1236]"
    }, {
      "left" : "boolean continueProcessing()",
      "right" : "boolean continueProcessing()",
      "info" : "MethodDeclaration[1240-1429]:MethodDeclaration[1240-1429]"
    }, {
      "left" : "abstract char getLastChar();",
      "right" : "abstract char getLastChar();",
      "info" : "MethodDeclaration[1433-1541]:MethodDeclaration[1433-1541]"
    }, {
      "left" : "void addIdentifier(String identifier)",
      "right" : "void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[1545-1609]:MethodDeclaration[1545-1609]"
    }, {
      "left" : "abstract void append(String str);",
      "right" : "abstract void append(String str);",
      "info" : "MethodDeclaration[1613-1975]:MethodDeclaration[1613-1975]"
    }, {
      "left" : "void appendBlockStart()",
      "right" : "void appendBlockStart()",
      "info" : "MethodDeclaration[1979-2025]:MethodDeclaration[1979-2025]"
    }, {
      "left" : "void appendBlockEnd()",
      "right" : "void appendBlockEnd()",
      "info" : "MethodDeclaration[2029-2073]:MethodDeclaration[2029-2073]"
    }, {
      "left" : "void startNewLine()",
      "right" : "void startNewLine()",
      "info" : "MethodDeclaration[2077-2102]:MethodDeclaration[2077-2102]"
    }, {
      "left" : "void maybeLineBreak()",
      "right" : "void maybeLineBreak()",
      "info" : "MethodDeclaration[2106-2153]:MethodDeclaration[2106-2153]"
    }, {
      "left" : "void maybeCutLine()",
      "right" : "void maybeCutLine()",
      "info" : "MethodDeclaration[2157-2182]:MethodDeclaration[2157-2182]"
    }, {
      "left" : "void endLine()",
      "right" : "void endLine()",
      "info" : "MethodDeclaration[2186-2206]:MethodDeclaration[2186-2206]"
    }, {
      "left" : "void notePreferredLineBreak()",
      "right" : "void notePreferredLineBreak()",
      "info" : "MethodDeclaration[2210-2245]:MethodDeclaration[2210-2245]"
    }, {
      "left" : "void beginBlock()",
      "right" : "void beginBlock()",
      "info" : "MethodDeclaration[2249-2425]:MethodDeclaration[2249-2425]"
    }, {
      "left" : "void endBlock()",
      "right" : "void endBlock()",
      "info" : "MethodDeclaration[2429-2471]:MethodDeclaration[2429-2471]"
    }, {
      "left" : "void endBlock(boolean shouldEndLine)",
      "right" : "void endBlock(boolean shouldEndLine)",
      "info" : "MethodDeclaration[2475-2620]:MethodDeclaration[2475-2620]"
    }, {
      "left" : "void listSeparator()",
      "right" : "void listSeparator()",
      "info" : "MethodDeclaration[2624-2686]:MethodDeclaration[2624-2686]"
    }, {
      "left" : "void endStatement()",
      "right" : "void endStatement()",
      "info" : "MethodDeclaration[2690-2968]:MethodDeclaration[2690-2968]"
    }, {
      "left" : "void endStatement(boolean needSemiColon)",
      "right" : "void endStatement(boolean needSemiColon)",
      "info" : "MethodDeclaration[2972-3196]:MethodDeclaration[2972-3196]"
    }, {
      "left" : "void maybeEndStatement()",
      "right" : "void maybeEndStatement()",
      "info" : "MethodDeclaration[3200-3545]:MethodDeclaration[3200-3545]"
    }, {
      "left" : "void endFunction()",
      "right" : "void endFunction()",
      "info" : "MethodDeclaration[3549-3597]:MethodDeclaration[3549-3597]"
    }, {
      "left" : "void endFunction(boolean statementContext)",
      "right" : "void endFunction(boolean statementContext)",
      "info" : "MethodDeclaration[3601-3724]:MethodDeclaration[3601-3724]"
    }, {
      "left" : "void beginCaseBody()",
      "right" : "void beginCaseBody()",
      "info" : "MethodDeclaration[3728-3771]:MethodDeclaration[3728-3771]"
    }, {
      "left" : "void endCaseBody()",
      "right" : "void endCaseBody()",
      "info" : "MethodDeclaration[3775-3799]:MethodDeclaration[3775-3799]"
    }, {
      "left" : "void add(String newcode)",
      "right" : "void add(String newcode)",
      "info" : "MethodDeclaration[3803-4335]:MethodDeclaration[3803-4405]"
    }, {
      "left" : "void appendOp(String op, boolean binOp)",
      "right" : "void appendOp(String op, boolean binOp)",
      "info" : "MethodDeclaration[4339-4400]:MethodDeclaration[4409-4470]"
    }, {
      "left" : "void addOp(String op, boolean binOp)",
      "right" : "void addOp(String op, boolean binOp)",
      "info" : "MethodDeclaration[4404-5312]:MethodDeclaration[4474-5382]"
    }, {
      "left" : "void addNumber(double x)",
      "right" : "void addNumber(double x)",
      "info" : "MethodDeclaration[5316-6027]:MethodDeclaration[5386-6097]"
    }, {
      "left" : "static boolean isNegativeZero(double x)",
      "right" : "static boolean isNegativeZero(double x)",
      "info" : "MethodDeclaration[6031-6128]:MethodDeclaration[6101-6198]"
    }, {
      "left" : "static boolean isWordChar(char ch)",
      "right" : "static boolean isWordChar(char ch)",
      "info" : "MethodDeclaration[6132-6266]:MethodDeclaration[6202-6336]"
    }, {
      "left" : "boolean shouldPreserveExtraBlocks()",
      "right" : "boolean shouldPreserveExtraBlocks()",
      "info" : "MethodDeclaration[6270-6686]:MethodDeclaration[6340-6756]"
    }, {
      "left" : "boolean breakAfterBlockFor(Node n, boolean statementContext)",
      "right" : "boolean breakAfterBlockFor(Node n, boolean statementContext)",
      "info" : "MethodDeclaration[6690-6875]:MethodDeclaration[6760-6945]"
    }, {
      "left" : "void endFile()",
      "right" : "void endFile()",
      "info" : "MethodDeclaration[6879-6945]:MethodDeclaration[6949-7015]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1095-1100]:Block[1095-1100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1231-1236]:Block[1231-1236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1407-1429]:Block[1407-1429]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1413-1425]:ReturnStatement[1413-1425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1583-1609]:Block[1583-1609]"
    }, {
      "left" : "add(identifier);",
      "right" : "add(identifier);",
      "info" : "ExpressionStatement[1589-1605]:ExpressionStatement[1589-1605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2003-2025]:Block[2003-2025]"
    }, {
      "left" : "append(\"{\");",
      "right" : "append(\"{\");",
      "info" : "ExpressionStatement[2009-2021]:ExpressionStatement[2009-2021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2051-2073]:Block[2051-2073]"
    }, {
      "left" : "append(\"}\");",
      "right" : "append(\"}\");",
      "info" : "ExpressionStatement[2057-2069]:ExpressionStatement[2057-2069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2097-2102]:Block[2097-2102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2128-2153]:Block[2128-2153]"
    }, {
      "left" : "maybeCutLine();",
      "right" : "maybeCutLine();",
      "info" : "ExpressionStatement[2134-2149]:ExpressionStatement[2134-2149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2177-2182]:Block[2177-2182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2201-2206]:Block[2201-2206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2240-2245]:Block[2240-2245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2267-2425]:Block[2267-2425]"
    }, {
      "left" : "if (statementNeedsEnded)",
      "right" : "if (statementNeedsEnded)",
      "info" : "IfStatement[2273-2348]:IfStatement[2273-2348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2298-2348]:Block[2298-2348]"
    }, {
      "left" : "append(\";\");",
      "right" : "append(\";\");",
      "info" : "ExpressionStatement[2306-2318]:ExpressionStatement[2306-2318]"
    }, {
      "left" : "maybeLineBreak();",
      "right" : "maybeLineBreak();",
      "info" : "ExpressionStatement[2325-2342]:ExpressionStatement[2325-2342]"
    }, {
      "left" : "appendBlockStart();",
      "right" : "appendBlockStart();",
      "info" : "ExpressionStatement[2353-2372]:ExpressionStatement[2353-2372]"
    }, {
      "left" : "endLine();",
      "right" : "endLine();",
      "info" : "ExpressionStatement[2378-2388]:ExpressionStatement[2378-2388]"
    }, {
      "left" : "statementNeedsEnded = false;",
      "right" : "statementNeedsEnded = false;",
      "info" : "ExpressionStatement[2393-2421]:ExpressionStatement[2393-2421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2445-2471]:Block[2445-2471]"
    }, {
      "left" : "endBlock(false);",
      "right" : "endBlock(false);",
      "info" : "ExpressionStatement[2451-2467]:ExpressionStatement[2451-2467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2512-2620]:Block[2512-2620]"
    }, {
      "left" : "appendBlockEnd();",
      "right" : "appendBlockEnd();",
      "info" : "ExpressionStatement[2518-2535]:ExpressionStatement[2518-2535]"
    }, {
      "left" : "if (shouldEndLine)",
      "right" : "if (shouldEndLine)",
      "info" : "IfStatement[2540-2583]:IfStatement[2540-2583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2559-2583]:Block[2559-2583]"
    }, {
      "left" : "endLine();",
      "right" : "endLine();",
      "info" : "ExpressionStatement[2567-2577]:ExpressionStatement[2567-2577]"
    }, {
      "left" : "statementNeedsEnded = false;",
      "right" : "statementNeedsEnded = false;",
      "info" : "ExpressionStatement[2588-2616]:ExpressionStatement[2588-2616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2645-2686]:Block[2645-2686]"
    }, {
      "left" : "add(\",\");",
      "right" : "add(\",\");",
      "info" : "ExpressionStatement[2651-2660]:ExpressionStatement[2651-2660]"
    }, {
      "left" : "maybeLineBreak();",
      "right" : "maybeLineBreak();",
      "info" : "ExpressionStatement[2665-2682]:ExpressionStatement[2665-2682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2938-2968]:Block[2938-2968]"
    }, {
      "left" : "endStatement(false);",
      "right" : "endStatement(false);",
      "info" : "ExpressionStatement[2944-2964]:ExpressionStatement[2944-2964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3013-3196]:Block[3013-3196]"
    }, {
      "left" : "if (needSemiColon)",
      "right" : "if (needSemiColon)",
      "info" : "IfStatement[3019-3192]:IfStatement[3019-3192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3038-3123]:Block[3038-3123]"
    }, {
      "left" : "append(\";\");",
      "right" : "append(\";\");",
      "info" : "ExpressionStatement[3046-3058]:ExpressionStatement[3046-3058]"
    }, {
      "left" : "maybeLineBreak();",
      "right" : "maybeLineBreak();",
      "info" : "ExpressionStatement[3065-3082]:ExpressionStatement[3065-3082]"
    }, {
      "left" : "statementNeedsEnded = false;",
      "right" : "statementNeedsEnded = false;",
      "info" : "ExpressionStatement[3089-3117]:ExpressionStatement[3089-3117]"
    }, {
      "left" : "if (statementStarted)",
      "right" : "if (statementStarted)",
      "info" : "IfStatement[3129-3192]:IfStatement[3129-3192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3151-3192]:Block[3151-3192]"
    }, {
      "left" : "statementNeedsEnded = true;",
      "right" : "statementNeedsEnded = true;",
      "info" : "ExpressionStatement[3159-3186]:ExpressionStatement[3159-3186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3347-3545]:Block[3347-3545]"
    }, {
      "left" : "if (statementNeedsEnded)",
      "right" : "if (statementNeedsEnded)",
      "info" : "IfStatement[3385-3512]:IfStatement[3385-3512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3410-3512]:Block[3410-3512]"
    }, {
      "left" : "append(\";\");",
      "right" : "append(\";\");",
      "info" : "ExpressionStatement[3418-3430]:ExpressionStatement[3418-3430]"
    }, {
      "left" : "maybeLineBreak();",
      "right" : "maybeLineBreak();",
      "info" : "ExpressionStatement[3437-3454]:ExpressionStatement[3437-3454]"
    }, {
      "left" : "endLine();",
      "right" : "endLine();",
      "info" : "ExpressionStatement[3461-3471]:ExpressionStatement[3461-3471]"
    }, {
      "left" : "statementNeedsEnded = false;",
      "right" : "statementNeedsEnded = false;",
      "info" : "ExpressionStatement[3478-3506]:ExpressionStatement[3478-3506]"
    }, {
      "left" : "statementStarted = true;",
      "right" : "statementStarted = true;",
      "info" : "ExpressionStatement[3517-3541]:ExpressionStatement[3517-3541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3568-3597]:Block[3568-3597]"
    }, {
      "left" : "endFunction(false);",
      "right" : "endFunction(false);",
      "info" : "ExpressionStatement[3574-3593]:ExpressionStatement[3574-3593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3644-3724]:Block[3644-3724]"
    }, {
      "left" : "sawFunction = true;",
      "right" : "sawFunction = true;",
      "info" : "ExpressionStatement[3650-3669]:ExpressionStatement[3650-3669]"
    }, {
      "left" : "if (statementContext)",
      "right" : "if (statementContext)",
      "info" : "IfStatement[3674-3720]:IfStatement[3674-3720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3696-3720]:Block[3696-3720]"
    }, {
      "left" : "endLine();",
      "right" : "endLine();",
      "info" : "ExpressionStatement[3704-3714]:ExpressionStatement[3704-3714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3749-3771]:Block[3749-3771]"
    }, {
      "left" : "append(\":\");",
      "right" : "append(\":\");",
      "info" : "ExpressionStatement[3755-3767]:ExpressionStatement[3755-3767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3794-3799]:Block[3794-3799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3828-4335]:Block[3828-4405]"
    }, {
      "left" : "maybeEndStatement();",
      "right" : "maybeEndStatement();",
      "info" : "ExpressionStatement[3834-3854]:ExpressionStatement[3834-3854]"
    }, {
      "left" : "if (newcode.length() == 0)",
      "right" : "if (newcode.length() == 0)",
      "info" : "IfStatement[3860-3908]:IfStatement[3860-3908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3887-3908]:Block[3887-3908]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3895-3902]:ReturnStatement[3895-3902]"
    }, {
      "left" : "char c = newcode.charAt(0);",
      "right" : "char c = newcode.charAt(0);",
      "info" : "VariableDeclarationStatement[3914-3941]:VariableDeclarationStatement[3914-3941]"
    }, {
      "left" : "if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar()))",
      "right" : "if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar()))",
      "info" : "IfStatement[3946-4309]:IfStatement[3946-4379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4017-4309]:Block[4185-4379]"
    }, {
      "left" : "append(\" \");",
      "right" : "append(\" \");",
      "info" : "ExpressionStatement[4123-4135]:ExpressionStatement[4123-4135]"
    }, {
      "left" : "append(newcode);",
      "right" : "append(newcode);",
      "info" : "ExpressionStatement[4315-4331]:ExpressionStatement[4385-4401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4379-4400]:Block[4449-4470]"
    }, {
      "left" : "append(op);",
      "right" : "append(op);",
      "info" : "ExpressionStatement[4385-4396]:ExpressionStatement[4455-4466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4441-5312]:Block[4511-5382]"
    }, {
      "left" : "maybeEndStatement();",
      "right" : "maybeEndStatement();",
      "info" : "ExpressionStatement[4447-4467]:ExpressionStatement[4517-4537]"
    }, {
      "left" : "char first = op.charAt(0);",
      "right" : "char first = op.charAt(0);",
      "info" : "VariableDeclarationStatement[4473-4499]:VariableDeclarationStatement[4543-4569]"
    }, {
      "left" : "char prev = getLastChar();",
      "right" : "char prev = getLastChar();",
      "info" : "VariableDeclarationStatement[4504-4530]:VariableDeclarationStatement[4574-4600]"
    }, {
      "left" : "if ((first == '+' || first == '-') && prev == first)",
      "right" : "if ((first == '+' || first == '-') && prev == first)",
      "info" : "IfStatement[4536-5004]:IfStatement[4606-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4589-4732]:Block[4659-4802]"
    }, {
      "left" : "append(\" \");",
      "right" : "append(\" \");",
      "info" : "ExpressionStatement[4714-4726]:ExpressionStatement[4784-4796]"
    }, {
      "left" : "if (Character.isLetter(first) &&\n               isWordChar(prev))",
      "right" : "if (Character.isLetter(first) &&\n               isWordChar(prev))",
      "info" : "IfStatement[4738-5004]:IfStatement[4808-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4804-4897]:Block[4874-4967]"
    }, {
      "left" : "append(\" \");",
      "right" : "append(\" \");",
      "info" : "ExpressionStatement[4879-4891]:ExpressionStatement[4949-4961]"
    }, {
      "left" : "if (prev == '-' && first == '>')",
      "right" : "if (prev == '-' && first == '>')",
      "info" : "IfStatement[4903-5004]:IfStatement[4973-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4936-5004]:Block[5006-5074]"
    }, {
      "left" : "append(\" \");",
      "right" : "append(\" \");",
      "info" : "ExpressionStatement[4986-4998]:ExpressionStatement[5056-5068]"
    }, {
      "left" : "appendOp(op, binOp);",
      "right" : "appendOp(op, binOp);",
      "info" : "ExpressionStatement[5054-5074]:ExpressionStatement[5124-5144]"
    }, {
      "left" : "if (binOp)",
      "right" : "if (binOp)",
      "info" : "IfStatement[5268-5308]:IfStatement[5338-5378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5279-5308]:Block[5349-5378]"
    }, {
      "left" : "maybeCutLine();",
      "right" : "maybeCutLine();",
      "info" : "ExpressionStatement[5287-5302]:ExpressionStatement[5357-5372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5341-6027]:Block[5411-6097]"
    }, {
      "left" : "char prev = getLastChar();",
      "right" : "char prev = getLastChar();",
      "info" : "VariableDeclarationStatement[5464-5490]:VariableDeclarationStatement[5534-5560]"
    }, {
      "left" : "if (x < 0 && prev == '-')",
      "right" : "if (x < 0 && prev == '-')",
      "info" : "IfStatement[5495-5544]:IfStatement[5565-5614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5521-5544]:Block[5591-5614]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[5529-5538]:ExpressionStatement[5599-5608]"
    }, {
      "left" : "if ((long) x == x && !isNegativeZero(x))",
      "right" : "if ((long) x == x && !isNegativeZero(x))",
      "info" : "IfStatement[5550-6023]:IfStatement[5620-6093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5591-5980]:Block[5661-6050]"
    }, {
      "left" : "long value = (long) x;",
      "right" : "long value = (long) x;",
      "info" : "VariableDeclarationStatement[5599-5621]:VariableDeclarationStatement[5669-5691]"
    }, {
      "left" : "long mantissa = value;",
      "right" : "long mantissa = value;",
      "info" : "VariableDeclarationStatement[5628-5650]:VariableDeclarationStatement[5698-5720]"
    }, {
      "left" : "int exp = 0;",
      "right" : "int exp = 0;",
      "info" : "VariableDeclarationStatement[5657-5669]:VariableDeclarationStatement[5727-5739]"
    }, {
      "left" : "if (Math.abs(x) >= 100)",
      "right" : "if (Math.abs(x) >= 100)",
      "info" : "IfStatement[5676-5827]:IfStatement[5746-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5700-5827]:Block[5770-5897]"
    }, {
      "left" : "while (mantissa / 10 * Math.pow(10, exp + 1) == value)",
      "right" : "while (mantissa / 10 * Math.pow(10, exp + 1) == value)",
      "info" : "WhileStatement[5710-5819]:WhileStatement[5780-5889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5765-5819]:Block[5835-5889]"
    }, {
      "left" : "mantissa /= 10;",
      "right" : "mantissa /= 10;",
      "info" : "ExpressionStatement[5777-5792]:ExpressionStatement[5847-5862]"
    }, {
      "left" : "exp++;",
      "right" : "exp++;",
      "info" : "ExpressionStatement[5803-5809]:ExpressionStatement[5873-5879]"
    }, {
      "left" : "if (exp > 2)",
      "right" : "if (exp > 2)",
      "info" : "IfStatement[5834-5974]:IfStatement[5904-6044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5847-5924]:Block[5917-5994]"
    }, {
      "left" : "add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));",
      "right" : "add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));",
      "info" : "ExpressionStatement[5857-5916]:ExpressionStatement[5927-5986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5930-5974]:Block[6000-6044]"
    }, {
      "left" : "add(Long.toString(value));",
      "right" : "add(Long.toString(value));",
      "info" : "ExpressionStatement[5940-5966]:ExpressionStatement[6010-6036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5986-6023]:Block[6056-6093]"
    }, {
      "left" : "add(String.valueOf(x));",
      "right" : "add(String.valueOf(x));",
      "info" : "ExpressionStatement[5994-6017]:ExpressionStatement[6064-6087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6071-6128]:Block[6141-6198]"
    }, {
      "left" : "return x == 0.0 && Math.copySign(1, x) == -1.0;",
      "right" : "return x == 0.0 && Math.copySign(1, x) == -1.0;",
      "info" : "ReturnStatement[6077-6124]:ReturnStatement[6147-6194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6167-6266]:Block[6237-6336]"
    }, {
      "left" : "return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));",
      "right" : "return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));",
      "info" : "ReturnStatement[6173-6262]:ReturnStatement[6243-6332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6663-6686]:Block[6733-6756]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6669-6682]:ReturnStatement[6739-6752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6841-6875]:Block[6911-6945]"
    }, {
      "left" : "return statementContext;",
      "right" : "return statementContext;",
      "info" : "ReturnStatement[6847-6871]:ReturnStatement[6917-6941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6943-6945]:Block[7013-7015]"
    } ]
  },
  "interFileMappings" : { }
}