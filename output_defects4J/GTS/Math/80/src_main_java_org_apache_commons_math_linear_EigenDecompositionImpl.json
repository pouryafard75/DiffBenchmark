{
  "matchedElements" : [
 {
    "left" : "class : EigenDecompositionImpl",
    "right" : "class : EigenDecompositionImpl",
    "info" : "TypeDeclaration[1086-67166]:TypeDeclaration[1086-67168]"
  }, {
    "left" : "TOLERANCE",
    "right" : "TOLERANCE",
    "info" : "FieldDeclaration[3150-3236]:FieldDeclaration[3150-3236]"
  }, {
    "left" : "TOLERANCE_2",
    "right" : "TOLERANCE_2",
    "info" : "FieldDeclaration[3242-3336]:FieldDeclaration[3242-3336]"
  }, {
    "left" : "splitTolerance",
    "right" : "splitTolerance",
    "info" : "FieldDeclaration[3342-3400]:FieldDeclaration[3342-3400]"
  }, {
    "left" : "main",
    "right" : "main",
    "info" : "FieldDeclaration[3406-3480]:FieldDeclaration[3406-3480]"
  }, {
    "left" : "secondary",
    "right" : "secondary",
    "info" : "FieldDeclaration[3486-3570]:FieldDeclaration[3486-3570]"
  }, {
    "left" : "squaredSecondary",
    "right" : "squaredSecondary",
    "info" : "FieldDeclaration[3576-3675]:FieldDeclaration[3576-3675]"
  }, {
    "left" : "transformer",
    "right" : "transformer",
    "info" : "FieldDeclaration[3681-3810]:FieldDeclaration[3681-3810]"
  }, {
    "left" : "lowerSpectra",
    "right" : "lowerSpectra",
    "info" : "FieldDeclaration[3816-3879]:FieldDeclaration[3816-3879]"
  }, {
    "left" : "upperSpectra",
    "right" : "upperSpectra",
    "info" : "FieldDeclaration[3885-3948]:FieldDeclaration[3885-3948]"
  }, {
    "left" : "minPivot",
    "right" : "minPivot",
    "info" : "FieldDeclaration[3954-4026]:FieldDeclaration[3954-4026]"
  }, {
    "left" : "sigma",
    "right" : "sigma",
    "info" : "FieldDeclaration[4032-4079]:FieldDeclaration[4032-4079]"
  }, {
    "left" : "sigmaLow",
    "right" : "sigmaLow",
    "info" : "FieldDeclaration[4085-4151]:FieldDeclaration[4085-4151]"
  }, {
    "left" : "tau",
    "right" : "tau",
    "info" : "FieldDeclaration[4157-4213]:FieldDeclaration[4157-4213]"
  }, {
    "left" : "work",
    "right" : "work",
    "info" : "FieldDeclaration[4219-4297]:FieldDeclaration[4219-4297]"
  }, {
    "left" : "pingPong",
    "right" : "pingPong",
    "info" : "FieldDeclaration[4303-4387]:FieldDeclaration[4303-4387]"
  }, {
    "left" : "qMax",
    "right" : "qMax",
    "info" : "FieldDeclaration[4393-4475]:FieldDeclaration[4393-4475]"
  }, {
    "left" : "eMin",
    "right" : "eMin",
    "info" : "FieldDeclaration[4481-4567]:FieldDeclaration[4481-4567]"
  }, {
    "left" : "tType",
    "right" : "tType",
    "info" : "FieldDeclaration[4573-4634]:FieldDeclaration[4573-4634]"
  }, {
    "left" : "dMin",
    "right" : "dMin",
    "info" : "FieldDeclaration[4640-4719]:FieldDeclaration[4640-4719]"
  }, {
    "left" : "dMin1",
    "right" : "dMin1",
    "info" : "FieldDeclaration[4725-4829]:FieldDeclaration[4725-4829]"
  }, {
    "left" : "dMin2",
    "right" : "dMin2",
    "info" : "FieldDeclaration[4835-4944]:FieldDeclaration[4835-4944]"
  }, {
    "left" : "dN",
    "right" : "dN",
    "info" : "FieldDeclaration[4950-5024]:FieldDeclaration[4950-5024]"
  }, {
    "left" : "dN1",
    "right" : "dN1",
    "info" : "FieldDeclaration[5030-5113]:FieldDeclaration[5030-5113]"
  }, {
    "left" : "dN2",
    "right" : "dN2",
    "info" : "FieldDeclaration[5119-5196]:FieldDeclaration[5119-5196]"
  }, {
    "left" : "g",
    "right" : "g",
    "info" : "FieldDeclaration[5202-5285]:FieldDeclaration[5202-5285]"
  }, {
    "left" : "realEigenvalues",
    "right" : "realEigenvalues",
    "info" : "FieldDeclaration[5291-5369]:FieldDeclaration[5291-5369]"
  }, {
    "left" : "imagEigenvalues",
    "right" : "imagEigenvalues",
    "info" : "FieldDeclaration[5375-5458]:FieldDeclaration[5375-5458]"
  }, {
    "left" : "eigenvectors",
    "right" : "eigenvectors",
    "info" : "FieldDeclaration[5464-5528]:FieldDeclaration[5464-5528]"
  }, {
    "left" : "cachedV",
    "right" : "cachedV",
    "info" : "FieldDeclaration[5534-5591]:FieldDeclaration[5534-5591]"
  }, {
    "left" : "cachedD",
    "right" : "cachedD",
    "info" : "FieldDeclaration[5597-5654]:FieldDeclaration[5597-5654]"
  }, {
    "left" : "cachedVt",
    "right" : "cachedVt",
    "info" : "FieldDeclaration[5660-5719]:FieldDeclaration[5660-5719]"
  }, {
    "left" : "public EigenDecompositionImpl(matrix , splitTolerance double) : ",
    "right" : "public EigenDecompositionImpl(matrix , splitTolerance double) : ",
    "info" : "MethodDeclaration[5725-6846]:MethodDeclaration[5725-6846]"
  }, {
    "left" : "public EigenDecompositionImpl(main , secondary , splitTolerance double) : ",
    "right" : "public EigenDecompositionImpl(main , secondary , splitTolerance double) : ",
    "info" : "MethodDeclaration[6852-8028]:MethodDeclaration[6852-8028]"
  }, {
    "left" : "private isSymmetric(matrix ) : boolean",
    "right" : "private isSymmetric(matrix ) : boolean",
    "info" : "MethodDeclaration[8034-8807]:MethodDeclaration[8034-8807]"
  }, {
    "left" : "private decompose() : void",
    "right" : "private decompose() : void",
    "info" : "MethodDeclaration[8813-9416]:MethodDeclaration[8813-9416]"
  }, {
    "left" : "public getV() : ",
    "right" : "public getV() : ",
    "info" : "MethodDeclaration[9422-9936]:MethodDeclaration[9422-9936]"
  }, {
    "left" : "public getD() : ",
    "right" : "public getD() : ",
    "info" : "MethodDeclaration[9942-10232]:MethodDeclaration[9942-10232]"
  }, {
    "left" : "public getVT() : ",
    "right" : "public getVT() : ",
    "info" : "MethodDeclaration[10238-10754]:MethodDeclaration[10238-10754]"
  }, {
    "left" : "public getRealEigenvalues() : ",
    "right" : "public getRealEigenvalues() : ",
    "info" : "MethodDeclaration[10760-10907]:MethodDeclaration[10760-10907]"
  }, {
    "left" : "public getRealEigenvalue(i int) : double",
    "right" : "public getRealEigenvalue(i int) : double",
    "info" : "MethodDeclaration[10913-11095]:MethodDeclaration[10913-11095]"
  }, {
    "left" : "public getImagEigenvalues() : ",
    "right" : "public getImagEigenvalues() : ",
    "info" : "MethodDeclaration[11101-11248]:MethodDeclaration[11101-11248]"
  }, {
    "left" : "public getImagEigenvalue(i int) : double",
    "right" : "public getImagEigenvalue(i int) : double",
    "info" : "MethodDeclaration[11254-11436]:MethodDeclaration[11254-11436]"
  }, {
    "left" : "public getEigenvector(i int) : ",
    "right" : "public getEigenvector(i int) : ",
    "info" : "MethodDeclaration[11442-11707]:MethodDeclaration[11442-11707]"
  }, {
    "left" : "public getDeterminant() : double",
    "right" : "public getDeterminant() : double",
    "info" : "MethodDeclaration[11713-12005]:MethodDeclaration[11713-12005]"
  }, {
    "left" : "public getSolver() : ",
    "right" : "public getSolver() : ",
    "info" : "MethodDeclaration[12011-12235]:MethodDeclaration[12011-12235]"
  }, {
    "left" : "class : Solver",
    "right" : "class : Solver",
    "info" : "TypeDeclaration[12241-19461]:TypeDeclaration[12241-19461]"
  }, {
    "left" : "realEigenvalues",
    "right" : "realEigenvalues",
    "info" : "FieldDeclaration[12342-12424]:FieldDeclaration[12342-12424]"
  }, {
    "left" : "imagEigenvalues",
    "right" : "imagEigenvalues",
    "info" : "FieldDeclaration[12434-12521]:FieldDeclaration[12434-12521]"
  }, {
    "left" : "eigenvectors",
    "right" : "eigenvectors",
    "info" : "FieldDeclaration[12531-12605]:FieldDeclaration[12531-12605]"
  }, {
    "left" : "private Solver(realEigenvalues , imagEigenvalues , eigenvectors ...)",
    "right" : "private Solver(realEigenvalues , imagEigenvalues , eigenvectors ...)",
    "info" : "MethodDeclaration[12615-13170]:MethodDeclaration[12615-13170]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[13180-14642]:MethodDeclaration[13180-14642]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[14652-16162]:MethodDeclaration[14652-16162]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[16172-18021]:MethodDeclaration[16172-18021]"
  }, {
    "left" : "public isNonSingular() : boolean",
    "right" : "public isNonSingular() : boolean",
    "info" : "MethodDeclaration[18031-18453]:MethodDeclaration[18031-18453]"
  }, {
    "left" : "public getInverse() : ",
    "right" : "public getInverse() : ",
    "info" : "MethodDeclaration[18463-19454]:MethodDeclaration[18463-19454]"
  }, {
    "left" : "private transformToTridiagonal(matrix ) : void",
    "right" : "private transformToTridiagonal(matrix ) : void",
    "info" : "MethodDeclaration[19467-20101]:MethodDeclaration[19467-20101]"
  }, {
    "left" : "private computeGershgorinCircles() : void",
    "right" : "private computeGershgorinCircles() : void",
    "info" : "MethodDeclaration[20107-21498]:MethodDeclaration[20107-21498]"
  }, {
    "left" : "private findEigenvalues() : void",
    "right" : "private findEigenvalues() : void",
    "info" : "MethodDeclaration[21504-24281]:MethodDeclaration[21504-24281]"
  }, {
    "left" : "private computeSplits() : ",
    "right" : "private computeSplits() : ",
    "info" : "MethodDeclaration[24287-25085]:MethodDeclaration[24287-25085]"
  }, {
    "left" : "private process1RowBlock(index int) : void",
    "right" : "private process1RowBlock(index int) : void",
    "info" : "MethodDeclaration[25091-25389]:MethodDeclaration[25091-25389]"
  }, {
    "left" : "private process2RowsBlock(index int) : void",
    "right" : "private process2RowsBlock(index int) : void",
    "info" : "MethodDeclaration[25395-26425]:MethodDeclaration[25395-26425]"
  }, {
    "left" : "private process3RowsBlock(index int) : void",
    "right" : "private process3RowsBlock(index int) : void",
    "info" : "MethodDeclaration[26431-28927]:MethodDeclaration[26431-28927]"
  }, {
    "left" : "private processGeneralBlock(n int) : void",
    "right" : "private processGeneralBlock(n int) : void",
    "info" : "MethodDeclaration[28933-33413]:MethodDeclaration[28933-33413]"
  }, {
    "left" : "private initialSplits(n int) : void",
    "right" : "private initialSplits(n int) : void",
    "info" : "MethodDeclaration[33419-35094]:MethodDeclaration[33419-35094]"
  }, {
    "left" : "private goodStep(start int, end int) : int",
    "right" : "private goodStep(start int, end int) : int",
    "info" : "MethodDeclaration[35100-40761]:MethodDeclaration[35100-40761]"
  }, {
    "left" : "private flipIfWarranted(n int, step int) : boolean",
    "right" : "private flipIfWarranted(n int, step int) : boolean",
    "info" : "MethodDeclaration[40767-41560]:MethodDeclaration[40767-41562]"
  }, {
    "left" : "private eigenvaluesRange(index int, n int) : ",
    "right" : "private eigenvaluesRange(index int, n int) : ",
    "info" : "MethodDeclaration[41566-44236]:MethodDeclaration[41568-44238]"
  }, {
    "left" : "private countEigenValues(t double, index int, n int) : int",
    "right" : "private countEigenValues(t double, index int, n int) : int",
    "info" : "MethodDeclaration[44242-44935]:MethodDeclaration[44244-44937]"
  }, {
    "left" : "private ldlTDecomposition(lambda double, index int, n int) : void",
    "right" : "private ldlTDecomposition(lambda double, index int, n int) : void",
    "info" : "MethodDeclaration[44941-46034]:MethodDeclaration[44943-46036]"
  }, {
    "left" : "private dqds(start int, end int) : void",
    "right" : "private dqds(start int, end int) : void",
    "info" : "MethodDeclaration[46040-47999]:MethodDeclaration[46042-48001]"
  }, {
    "left" : "private dqd(start int, end int) : void",
    "right" : "private dqd(start int, end int) : void",
    "info" : "MethodDeclaration[48006-51832]:MethodDeclaration[48008-51834]"
  }, {
    "left" : "private computeShiftIncrement(start int, end int, deflated int) : void",
    "right" : "private computeShiftIncrement(start int, end int, deflated int) : void",
    "info" : "MethodDeclaration[51838-61186]:MethodDeclaration[51840-61188]"
  }, {
    "left" : "private updateSigma(shift double) : void",
    "right" : "private updateSigma(shift double) : void",
    "info" : "MethodDeclaration[61192-61843]:MethodDeclaration[61194-61845]"
  }, {
    "left" : "private findEigenVectors() : void",
    "right" : "private findEigenVectors() : void",
    "info" : "MethodDeclaration[61849-62784]:MethodDeclaration[61851-62786]"
  }, {
    "left" : "private findEigenvector(eigenvalue double, d , l ) : ",
    "right" : "private findEigenvector(eigenvalue double, d , l ) : ",
    "info" : "MethodDeclaration[62790-65029]:MethodDeclaration[62792-65031]"
  }, {
    "left" : "private stationaryQuotientDifferenceWithShift(d , l , lambda double) : void",
    "right" : "private stationaryQuotientDifferenceWithShift(d , l , lambda double) : void",
    "info" : "MethodDeclaration[65035-66099]:MethodDeclaration[65037-66101]"
  }, {
    "left" : "private progressiveQuotientDifferenceWithShift(d , l , lambda double) : void",
    "right" : "private progressiveQuotientDifferenceWithShift(d , l , lambda double) : void",
    "info" : "MethodDeclaration[66105-67163]:MethodDeclaration[66107-67165]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3077-3083]:Modifier[3077-3083]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[3084-3089]:TYPE_DECLARATION_KIND[3084-3089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6226-6232]:Modifier[6226-6232]"
  }, {
    "left" : "EigenDecompositionImpl",
    "right" : "EigenDecompositionImpl",
    "info" : "SimpleName[6233-6255]:SimpleName[6233-6255]"
  }, {
    "left" : "final RealMatrix matrix",
    "right" : "final RealMatrix matrix",
    "info" : "SingleVariableDeclaration[6256-6279]:SingleVariableDeclaration[6256-6279]"
  }, {
    "left" : "final double splitTolerance",
    "right" : "final double splitTolerance",
    "info" : "SingleVariableDeclaration[6315-6342]:SingleVariableDeclaration[6315-6342]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[6359-6381]:SimpleType[6359-6381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6382-6846]:Block[6382-6846]"
  }, {
    "left" : "if (isSymmetric(matrix))",
    "right" : "if (isSymmetric(matrix))",
    "info" : "IfStatement[6392-6840]:IfStatement[6392-6840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6417-6547]:Block[6417-6547]"
  }, {
    "left" : "this.splitTolerance = splitTolerance;",
    "right" : "this.splitTolerance = splitTolerance;",
    "info" : "ExpressionStatement[6431-6468]:ExpressionStatement[6431-6468]"
  }, {
    "left" : "transformToTridiagonal(matrix);",
    "right" : "transformToTridiagonal(matrix);",
    "info" : "ExpressionStatement[6481-6512]:ExpressionStatement[6481-6512]"
  }, {
    "left" : "decompose();",
    "right" : "decompose();",
    "info" : "ExpressionStatement[6525-6537]:ExpressionStatement[6525-6537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6553-6840]:Block[6553-6840]"
  }, {
    "left" : "throw new InvalidMatrixException(\"eigen decomposition of assymetric matrices not supported yet\");",
    "right" : "throw new InvalidMatrixException(\"eigen decomposition of assymetric matrices not supported yet\");",
    "info" : "ThrowStatement[6733-6830]:ThrowStatement[6733-6830]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7438-7444]:Modifier[7438-7444]"
  }, {
    "left" : "EigenDecompositionImpl",
    "right" : "EigenDecompositionImpl",
    "info" : "SimpleName[7445-7467]:SimpleName[7445-7467]"
  }, {
    "left" : "final double[] main",
    "right" : "final double[] main",
    "info" : "SingleVariableDeclaration[7468-7487]:SingleVariableDeclaration[7468-7487]"
  }, {
    "left" : "double[] secondary",
    "right" : "double[] secondary",
    "info" : "SingleVariableDeclaration[7489-7507]:SingleVariableDeclaration[7489-7507]"
  }, {
    "left" : "final double splitTolerance",
    "right" : "final double splitTolerance",
    "info" : "SingleVariableDeclaration[7521-7548]:SingleVariableDeclaration[7521-7548]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[7565-7587]:SimpleType[7565-7587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7588-8028]:Block[7588-8028]"
  }, {
    "left" : "this.main      = main.clone();",
    "right" : "this.main      = main.clone();",
    "info" : "ExpressionStatement[7599-7629]:ExpressionStatement[7599-7629]"
  }, {
    "left" : "this.secondary = secondary.clone();",
    "right" : "this.secondary = secondary.clone();",
    "info" : "ExpressionStatement[7638-7673]:ExpressionStatement[7638-7673]"
  }, {
    "left" : "transformer    = null;",
    "right" : "transformer    = null;",
    "info" : "ExpressionStatement[7682-7704]:ExpressionStatement[7682-7704]"
  }, {
    "left" : "squaredSecondary = new double[secondary.length];",
    "right" : "squaredSecondary = new double[secondary.length];",
    "info" : "ExpressionStatement[7751-7799]:ExpressionStatement[7751-7799]"
  }, {
    "left" : "for (int i = 0; i < squaredSecondary.length; ++i)",
    "right" : "for (int i = 0; i < squaredSecondary.length; ++i)",
    "info" : "ForStatement[7808-7953]:ForStatement[7808-7953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7858-7953]:Block[7858-7953]"
  }, {
    "left" : "final double s = secondary[i];",
    "right" : "final double s = secondary[i];",
    "info" : "VariableDeclarationStatement[7872-7902]:VariableDeclarationStatement[7872-7902]"
  }, {
    "left" : "squaredSecondary[i] = s * s;",
    "right" : "squaredSecondary[i] = s * s;",
    "info" : "ExpressionStatement[7915-7943]:ExpressionStatement[7915-7943]"
  }, {
    "left" : "this.splitTolerance = splitTolerance;",
    "right" : "this.splitTolerance = splitTolerance;",
    "info" : "ExpressionStatement[7963-8000]:ExpressionStatement[7963-8000]"
  }, {
    "left" : "decompose();",
    "right" : "decompose();",
    "info" : "ExpressionStatement[8009-8021]:ExpressionStatement[8009-8021]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8169-8176]:Modifier[8169-8176]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8177-8184]:PrimitiveType[8177-8184]"
  }, {
    "left" : "isSymmetric",
    "right" : "isSymmetric",
    "info" : "SimpleName[8185-8196]:SimpleName[8185-8196]"
  }, {
    "left" : "final RealMatrix matrix",
    "right" : "final RealMatrix matrix",
    "info" : "SingleVariableDeclaration[8197-8220]:SingleVariableDeclaration[8197-8220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8222-8807]:Block[8222-8807]"
  }, {
    "left" : "final int rows    = matrix.getRowDimension();",
    "right" : "final int rows    = matrix.getRowDimension();",
    "info" : "VariableDeclarationStatement[8232-8277]:VariableDeclarationStatement[8232-8277]"
  }, {
    "left" : "final int columns = matrix.getColumnDimension();",
    "right" : "final int columns = matrix.getColumnDimension();",
    "info" : "VariableDeclarationStatement[8286-8334]:VariableDeclarationStatement[8286-8334]"
  }, {
    "left" : "final double eps  = 10 * rows * columns * MathUtils.EPSILON;",
    "right" : "final double eps  = 10 * rows * columns * MathUtils.EPSILON;",
    "info" : "VariableDeclarationStatement[8343-8403]:VariableDeclarationStatement[8343-8403]"
  }, {
    "left" : "for (int i = 0; i < rows; ++i)",
    "right" : "for (int i = 0; i < rows; ++i)",
    "info" : "ForStatement[8412-8780]:ForStatement[8412-8780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8443-8780]:Block[8443-8780]"
  }, {
    "left" : "for (int j = i + 1; j < columns; ++j)",
    "right" : "for (int j = i + 1; j < columns; ++j)",
    "info" : "ForStatement[8457-8770]:ForStatement[8457-8770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8495-8770]:Block[8495-8770]"
  }, {
    "left" : "final double mij = matrix.getEntry(i, j);",
    "right" : "final double mij = matrix.getEntry(i, j);",
    "info" : "VariableDeclarationStatement[8513-8554]:VariableDeclarationStatement[8513-8554]"
  }, {
    "left" : "final double mji = matrix.getEntry(j, i);",
    "right" : "final double mji = matrix.getEntry(j, i);",
    "info" : "VariableDeclarationStatement[8571-8612]:VariableDeclarationStatement[8571-8612]"
  }, {
    "left" : "if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps))",
    "right" : "if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps))",
    "info" : "IfStatement[8629-8756]:IfStatement[8629-8756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8703-8756]:Block[8703-8756]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8725-8738]:ReturnStatement[8725-8738]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8789-8801]:ReturnStatement[8789-8801]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9022-9029]:Modifier[9022-9029]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9030-9034]:PrimitiveType[9030-9034]"
  }, {
    "left" : "decompose",
    "right" : "decompose",
    "info" : "SimpleName[9035-9044]:SimpleName[9035-9044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9047-9416]:Block[9047-9416]"
  }, {
    "left" : "cachedV  = null;",
    "right" : "cachedV  = null;",
    "info" : "ExpressionStatement[9058-9074]:ExpressionStatement[9058-9074]"
  }, {
    "left" : "cachedD  = null;",
    "right" : "cachedD  = null;",
    "info" : "ExpressionStatement[9083-9099]:ExpressionStatement[9083-9099]"
  }, {
    "left" : "cachedVt = null;",
    "right" : "cachedVt = null;",
    "info" : "ExpressionStatement[9108-9124]:ExpressionStatement[9108-9124]"
  }, {
    "left" : "work     = new double[6 * main.length];",
    "right" : "work     = new double[6 * main.length];",
    "info" : "ExpressionStatement[9133-9172]:ExpressionStatement[9133-9172]"
  }, {
    "left" : "computeGershgorinCircles();",
    "right" : "computeGershgorinCircles();",
    "info" : "ExpressionStatement[9224-9251]:ExpressionStatement[9224-9251]"
  }, {
    "left" : "findEigenvalues();",
    "right" : "findEigenvalues();",
    "info" : "ExpressionStatement[9301-9319]:ExpressionStatement[9301-9319]"
  }, {
    "left" : "eigenvectors = null;",
    "right" : "eigenvectors = null;",
    "info" : "ExpressionStatement[9389-9409]:ExpressionStatement[9389-9409]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9447-9453]:Modifier[9447-9453]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[9454-9464]:SimpleType[9454-9464]"
  }, {
    "left" : "getV",
    "right" : "getV",
    "info" : "SimpleName[9465-9469]:SimpleName[9465-9469]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[9487-9509]:SimpleType[9487-9509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9510-9936]:Block[9510-9936]"
  }, {
    "left" : "if (cachedV == null)",
    "right" : "if (cachedV == null)",
    "info" : "IfStatement[9521-9868]:IfStatement[9521-9868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9542-9868]:Block[9542-9868]"
  }, {
    "left" : "if (eigenvectors == null)",
    "right" : "if (eigenvectors == null)",
    "info" : "IfStatement[9557-9634]:IfStatement[9557-9634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9583-9634]:Block[9583-9634]"
  }, {
    "left" : "findEigenVectors();",
    "right" : "findEigenVectors();",
    "info" : "ExpressionStatement[9601-9620]:ExpressionStatement[9601-9620]"
  }, {
    "left" : "final int m = eigenvectors.length;",
    "right" : "final int m = eigenvectors.length;",
    "info" : "VariableDeclarationStatement[9648-9682]:VariableDeclarationStatement[9648-9682]"
  }, {
    "left" : "cachedV = MatrixUtils.createRealMatrix(m, m);",
    "right" : "cachedV = MatrixUtils.createRealMatrix(m, m);",
    "info" : "ExpressionStatement[9695-9740]:ExpressionStatement[9695-9740]"
  }, {
    "left" : "for (int k = 0; k < m; ++k)",
    "right" : "for (int k = 0; k < m; ++k)",
    "info" : "ForStatement[9753-9857]:ForStatement[9753-9857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9781-9857]:Block[9781-9857]"
  }, {
    "left" : "cachedV.setColumnVector(k, eigenvectors[k]);",
    "right" : "cachedV.setColumnVector(k, eigenvectors[k]);",
    "info" : "ExpressionStatement[9799-9843]:ExpressionStatement[9799-9843]"
  }, {
    "left" : "return cachedV;",
    "right" : "return cachedV;",
    "info" : "ReturnStatement[9914-9929]:ReturnStatement[9914-9929]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9967-9973]:Modifier[9967-9973]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[9974-9984]:SimpleType[9974-9984]"
  }, {
    "left" : "getD",
    "right" : "getD",
    "info" : "SimpleName[9985-9989]:SimpleName[9985-9989]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[10007-10029]:SimpleType[10007-10029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10030-10232]:Block[10030-10232]"
  }, {
    "left" : "if (cachedD == null)",
    "right" : "if (cachedD == null)",
    "info" : "IfStatement[10040-10202]:IfStatement[10040-10202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10061-10202]:Block[10061-10202]"
  }, {
    "left" : "cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);",
    "right" : "cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);",
    "info" : "ExpressionStatement[10128-10192]:ExpressionStatement[10128-10192]"
  }, {
    "left" : "return cachedD;",
    "right" : "return cachedD;",
    "info" : "ReturnStatement[10211-10226]:ReturnStatement[10211-10226]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10263-10269]:Modifier[10263-10269]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[10270-10280]:SimpleType[10270-10280]"
  }, {
    "left" : "getVT",
    "right" : "getVT",
    "info" : "SimpleName[10281-10286]:SimpleName[10281-10286]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[10304-10326]:SimpleType[10304-10326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10327-10754]:Block[10327-10754]"
  }, {
    "left" : "if (cachedVt == null)",
    "right" : "if (cachedVt == null)",
    "info" : "IfStatement[10338-10685]:IfStatement[10338-10685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10360-10685]:Block[10360-10685]"
  }, {
    "left" : "if (eigenvectors == null)",
    "right" : "if (eigenvectors == null)",
    "info" : "IfStatement[10375-10452]:IfStatement[10375-10452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10401-10452]:Block[10401-10452]"
  }, {
    "left" : "findEigenVectors();",
    "right" : "findEigenVectors();",
    "info" : "ExpressionStatement[10419-10438]:ExpressionStatement[10419-10438]"
  }, {
    "left" : "final int m = eigenvectors.length;",
    "right" : "final int m = eigenvectors.length;",
    "info" : "VariableDeclarationStatement[10466-10500]:VariableDeclarationStatement[10466-10500]"
  }, {
    "left" : "cachedVt = MatrixUtils.createRealMatrix(m, m);",
    "right" : "cachedVt = MatrixUtils.createRealMatrix(m, m);",
    "info" : "ExpressionStatement[10513-10559]:ExpressionStatement[10513-10559]"
  }, {
    "left" : "for (int k = 0; k < m; ++k)",
    "right" : "for (int k = 0; k < m; ++k)",
    "info" : "ForStatement[10572-10674]:ForStatement[10572-10674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10600-10674]:Block[10600-10674]"
  }, {
    "left" : "cachedVt.setRowVector(k, eigenvectors[k]);",
    "right" : "cachedVt.setRowVector(k, eigenvectors[k]);",
    "info" : "ExpressionStatement[10618-10660]:ExpressionStatement[10618-10660]"
  }, {
    "left" : "return cachedVt;",
    "right" : "return cachedVt;",
    "info" : "ReturnStatement[10731-10747]:ReturnStatement[10731-10747]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10785-10791]:Modifier[10785-10791]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[10792-10800]:ArrayType[10792-10800]"
  }, {
    "left" : "getRealEigenvalues",
    "right" : "getRealEigenvalues",
    "info" : "SimpleName[10801-10819]:SimpleName[10801-10819]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[10837-10859]:SimpleType[10837-10859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10860-10907]:Block[10860-10907]"
  }, {
    "left" : "return realEigenvalues.clone();",
    "right" : "return realEigenvalues.clone();",
    "info" : "ReturnStatement[10870-10901]:ReturnStatement[10870-10901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10938-10944]:Modifier[10938-10944]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[10945-10951]:PrimitiveType[10945-10951]"
  }, {
    "left" : "getRealEigenvalue",
    "right" : "getRealEigenvalue",
    "info" : "SimpleName[10952-10969]:SimpleName[10952-10969]"
  }, {
    "left" : "final int i",
    "right" : "final int i",
    "info" : "SingleVariableDeclaration[10970-10981]:SingleVariableDeclaration[10970-10981]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[10998-11020]:SimpleType[10998-11020]"
  }, {
    "left" : "ArrayIndexOutOfBoundsException",
    "right" : "ArrayIndexOutOfBoundsException",
    "info" : "SimpleType[11022-11052]:SimpleType[11022-11052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11053-11095]:Block[11053-11095]"
  }, {
    "left" : "return realEigenvalues[i];",
    "right" : "return realEigenvalues[i];",
    "info" : "ReturnStatement[11063-11089]:ReturnStatement[11063-11089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11126-11132]:Modifier[11126-11132]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[11133-11141]:ArrayType[11133-11141]"
  }, {
    "left" : "getImagEigenvalues",
    "right" : "getImagEigenvalues",
    "info" : "SimpleName[11142-11160]:SimpleName[11142-11160]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[11178-11200]:SimpleType[11178-11200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11201-11248]:Block[11201-11248]"
  }, {
    "left" : "return imagEigenvalues.clone();",
    "right" : "return imagEigenvalues.clone();",
    "info" : "ReturnStatement[11211-11242]:ReturnStatement[11211-11242]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11279-11285]:Modifier[11279-11285]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[11286-11292]:PrimitiveType[11286-11292]"
  }, {
    "left" : "getImagEigenvalue",
    "right" : "getImagEigenvalue",
    "info" : "SimpleName[11293-11310]:SimpleName[11293-11310]"
  }, {
    "left" : "final int i",
    "right" : "final int i",
    "info" : "SingleVariableDeclaration[11311-11322]:SingleVariableDeclaration[11311-11322]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[11339-11361]:SimpleType[11339-11361]"
  }, {
    "left" : "ArrayIndexOutOfBoundsException",
    "right" : "ArrayIndexOutOfBoundsException",
    "info" : "SimpleType[11363-11393]:SimpleType[11363-11393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11394-11436]:Block[11394-11436]"
  }, {
    "left" : "return imagEigenvalues[i];",
    "right" : "return imagEigenvalues[i];",
    "info" : "ReturnStatement[11404-11430]:ReturnStatement[11404-11430]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11467-11473]:Modifier[11467-11473]"
  }, {
    "left" : "RealVector",
    "right" : "RealVector",
    "info" : "SimpleType[11474-11484]:SimpleType[11474-11484]"
  }, {
    "left" : "getEigenvector",
    "right" : "getEigenvector",
    "info" : "SimpleName[11485-11499]:SimpleName[11485-11499]"
  }, {
    "left" : "final int i",
    "right" : "final int i",
    "info" : "SingleVariableDeclaration[11500-11511]:SingleVariableDeclaration[11500-11511]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[11528-11550]:SimpleType[11528-11550]"
  }, {
    "left" : "ArrayIndexOutOfBoundsException",
    "right" : "ArrayIndexOutOfBoundsException",
    "info" : "SimpleType[11552-11582]:SimpleType[11552-11582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11583-11707]:Block[11583-11707]"
  }, {
    "left" : "if (eigenvectors == null)",
    "right" : "if (eigenvectors == null)",
    "info" : "IfStatement[11593-11662]:IfStatement[11593-11662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11619-11662]:Block[11619-11662]"
  }, {
    "left" : "findEigenVectors();",
    "right" : "findEigenVectors();",
    "info" : "ExpressionStatement[11633-11652]:ExpressionStatement[11633-11652]"
  }, {
    "left" : "return eigenvectors[i].copy();",
    "right" : "return eigenvectors[i].copy();",
    "info" : "ReturnStatement[11671-11701]:ReturnStatement[11671-11701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11814-11820]:Modifier[11814-11820]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[11821-11827]:PrimitiveType[11821-11827]"
  }, {
    "left" : "getDeterminant",
    "right" : "getDeterminant",
    "info" : "SimpleName[11828-11842]:SimpleName[11828-11842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11845-12005]:Block[11845-12005]"
  }, {
    "left" : "double determinant = 1;",
    "right" : "double determinant = 1;",
    "info" : "VariableDeclarationStatement[11855-11878]:VariableDeclarationStatement[11855-11878]"
  }, {
    "left" : "for (double lambda : realEigenvalues)",
    "right" : "for (double lambda : realEigenvalues)",
    "info" : "EnhancedForStatement[11887-11971]:EnhancedForStatement[11887-11971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11925-11971]:Block[11925-11971]"
  }, {
    "left" : "determinant *= lambda;",
    "right" : "determinant *= lambda;",
    "info" : "ExpressionStatement[11939-11961]:ExpressionStatement[11939-11961]"
  }, {
    "left" : "return determinant;",
    "right" : "return determinant;",
    "info" : "ReturnStatement[11980-11999]:ReturnStatement[11980-11999]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12036-12042]:Modifier[12036-12042]"
  }, {
    "left" : "DecompositionSolver",
    "right" : "DecompositionSolver",
    "info" : "SimpleType[12043-12062]:SimpleType[12043-12062]"
  }, {
    "left" : "getSolver",
    "right" : "getSolver",
    "info" : "SimpleName[12063-12072]:SimpleName[12063-12072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12075-12235]:Block[12075-12235]"
  }, {
    "left" : "if (eigenvectors == null)",
    "right" : "if (eigenvectors == null)",
    "info" : "IfStatement[12085-12154]:IfStatement[12085-12154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12111-12154]:Block[12111-12154]"
  }, {
    "left" : "findEigenVectors();",
    "right" : "findEigenVectors();",
    "info" : "ExpressionStatement[12125-12144]:ExpressionStatement[12125-12144]"
  }, {
    "left" : "return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",
    "right" : "return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",
    "info" : "ReturnStatement[12163-12229]:ReturnStatement[12163-12229]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12272-12279]:Modifier[12272-12279]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12280-12286]:Modifier[12280-12286]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12287-12292]:TYPE_DECLARATION_KIND[12287-12292]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12866-12873]:Modifier[12866-12873]"
  }, {
    "left" : "Solver",
    "right" : "Solver",
    "info" : "SimpleName[12874-12880]:SimpleName[12874-12880]"
  }, {
    "left" : "final double[] realEigenvalues",
    "right" : "final double[] realEigenvalues",
    "info" : "SingleVariableDeclaration[12881-12911]:SingleVariableDeclaration[12881-12911]"
  }, {
    "left" : "final double[] imagEigenvalues",
    "right" : "final double[] imagEigenvalues",
    "info" : "SingleVariableDeclaration[12913-12943]:SingleVariableDeclaration[12913-12943]"
  }, {
    "left" : "final ArrayRealVector[] eigenvectors",
    "right" : "final ArrayRealVector[] eigenvectors",
    "info" : "SingleVariableDeclaration[12968-13004]:SingleVariableDeclaration[12968-13004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13006-13170]:Block[13006-13170]"
  }, {
    "left" : "this.realEigenvalues = realEigenvalues;",
    "right" : "this.realEigenvalues = realEigenvalues;",
    "info" : "ExpressionStatement[13020-13059]:ExpressionStatement[13020-13059]"
  }, {
    "left" : "this.imagEigenvalues = imagEigenvalues;",
    "right" : "this.imagEigenvalues = imagEigenvalues;",
    "info" : "ExpressionStatement[13072-13111]:ExpressionStatement[13072-13111]"
  }, {
    "left" : "this.eigenvectors    = eigenvectors;",
    "right" : "this.eigenvectors    = eigenvectors;",
    "info" : "ExpressionStatement[13124-13160]:ExpressionStatement[13124-13160]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13711-13717]:Modifier[13711-13717]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[13718-13726]:ArrayType[13718-13726]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[13727-13732]:SimpleName[13727-13732]"
  }, {
    "left" : "final double[] b",
    "right" : "final double[] b",
    "info" : "SingleVariableDeclaration[13733-13749]:SingleVariableDeclaration[13733-13749]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[13770-13794]:SimpleType[13770-13794]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[13796-13818]:SimpleType[13796-13818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13819-14642]:Block[13819-14642]"
  }, {
    "left" : "if (!isNonSingular())",
    "right" : "if (!isNonSingular())",
    "info" : "IfStatement[13834-13924]:IfStatement[13834-13924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13856-13924]:Block[13856-13924]"
  }, {
    "left" : "throw new SingularMatrixException();",
    "right" : "throw new SingularMatrixException();",
    "info" : "ThrowStatement[13874-13910]:ThrowStatement[13874-13910]"
  }, {
    "left" : "final int m = realEigenvalues.length;",
    "right" : "final int m = realEigenvalues.length;",
    "info" : "VariableDeclarationStatement[13938-13975]:VariableDeclarationStatement[13938-13975]"
  }, {
    "left" : "if (b.length != m)",
    "right" : "if (b.length != m)",
    "info" : "IfStatement[13988-14211]:IfStatement[13988-14211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14007-14211]:Block[14007-14211]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
    "info" : "ThrowStatement[14025-14197]:ThrowStatement[14025-14197]"
  }, {
    "left" : "final double[] bp = new double[m];",
    "right" : "final double[] bp = new double[m];",
    "info" : "VariableDeclarationStatement[14225-14259]:VariableDeclarationStatement[14225-14259]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[14272-14607]:ForStatement[14272-14607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14300-14607]:Block[14300-14607]"
  }, {
    "left" : "final ArrayRealVector v = eigenvectors[i];",
    "right" : "final ArrayRealVector v = eigenvectors[i];",
    "info" : "VariableDeclarationStatement[14318-14360]:VariableDeclarationStatement[14318-14360]"
  }, {
    "left" : "final double[] vData = v.getDataRef();",
    "right" : "final double[] vData = v.getDataRef();",
    "info" : "VariableDeclarationStatement[14377-14415]:VariableDeclarationStatement[14377-14415]"
  }, {
    "left" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
    "right" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
    "info" : "VariableDeclarationStatement[14432-14486]:VariableDeclarationStatement[14432-14486]"
  }, {
    "left" : "for (int j = 0; j < m; ++j)",
    "right" : "for (int j = 0; j < m; ++j)",
    "info" : "ForStatement[14503-14593]:ForStatement[14503-14593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14531-14593]:Block[14531-14593]"
  }, {
    "left" : "bp[j] += s * vData[j];",
    "right" : "bp[j] += s * vData[j];",
    "info" : "ExpressionStatement[14553-14575]:ExpressionStatement[14553-14575]"
  }, {
    "left" : "return bp;",
    "right" : "return bp;",
    "info" : "ReturnStatement[14621-14631]:ReturnStatement[14621-14631]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15183-15189]:Modifier[15183-15189]"
  }, {
    "left" : "RealVector",
    "right" : "RealVector",
    "info" : "SimpleType[15190-15200]:SimpleType[15190-15200]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[15201-15206]:SimpleName[15201-15206]"
  }, {
    "left" : "final RealVector b",
    "right" : "final RealVector b",
    "info" : "SingleVariableDeclaration[15207-15225]:SingleVariableDeclaration[15207-15225]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[15246-15270]:SimpleType[15246-15270]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[15272-15294]:SimpleType[15272-15294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15295-16162]:Block[15295-16162]"
  }, {
    "left" : "if (!isNonSingular())",
    "right" : "if (!isNonSingular())",
    "info" : "IfStatement[15310-15400]:IfStatement[15310-15400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15332-15400]:Block[15332-15400]"
  }, {
    "left" : "throw new SingularMatrixException();",
    "right" : "throw new SingularMatrixException();",
    "info" : "ThrowStatement[15350-15386]:ThrowStatement[15350-15386]"
  }, {
    "left" : "final int m = realEigenvalues.length;",
    "right" : "final int m = realEigenvalues.length;",
    "info" : "VariableDeclarationStatement[15414-15451]:VariableDeclarationStatement[15414-15451]"
  }, {
    "left" : "if (b.getDimension() != m)",
    "right" : "if (b.getDimension() != m)",
    "info" : "IfStatement[15464-15703]:IfStatement[15464-15703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15491-15703]:Block[15491-15703]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.getDimension(), m);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.getDimension(), m);",
    "info" : "ThrowStatement[15509-15689]:ThrowStatement[15509-15689]"
  }, {
    "left" : "final double[] bp = new double[m];",
    "right" : "final double[] bp = new double[m];",
    "info" : "VariableDeclarationStatement[15717-15751]:VariableDeclarationStatement[15717-15751]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[15764-16099]:ForStatement[15764-16099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15792-16099]:Block[15792-16099]"
  }, {
    "left" : "final ArrayRealVector v = eigenvectors[i];",
    "right" : "final ArrayRealVector v = eigenvectors[i];",
    "info" : "VariableDeclarationStatement[15810-15852]:VariableDeclarationStatement[15810-15852]"
  }, {
    "left" : "final double[] vData = v.getDataRef();",
    "right" : "final double[] vData = v.getDataRef();",
    "info" : "VariableDeclarationStatement[15869-15907]:VariableDeclarationStatement[15869-15907]"
  }, {
    "left" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
    "right" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
    "info" : "VariableDeclarationStatement[15924-15978]:VariableDeclarationStatement[15924-15978]"
  }, {
    "left" : "for (int j = 0; j < m; ++j)",
    "right" : "for (int j = 0; j < m; ++j)",
    "info" : "ForStatement[15995-16085]:ForStatement[15995-16085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16023-16085]:Block[16023-16085]"
  }, {
    "left" : "bp[j] += s * vData[j];",
    "right" : "bp[j] += s * vData[j];",
    "info" : "ExpressionStatement[16045-16067]:ExpressionStatement[16045-16067]"
  }, {
    "left" : "return new ArrayRealVector(bp, false);",
    "right" : "return new ArrayRealVector(bp, false);",
    "info" : "ReturnStatement[16113-16151]:ReturnStatement[16113-16151]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16703-16709]:Modifier[16703-16709]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[16710-16720]:SimpleType[16710-16720]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[16721-16726]:SimpleName[16721-16726]"
  }, {
    "left" : "final RealMatrix b",
    "right" : "final RealMatrix b",
    "info" : "SingleVariableDeclaration[16727-16745]:SingleVariableDeclaration[16727-16745]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[16766-16790]:SimpleType[16766-16790]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[16792-16814]:SimpleType[16792-16814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16815-18021]:Block[16815-18021]"
  }, {
    "left" : "if (!isNonSingular())",
    "right" : "if (!isNonSingular())",
    "info" : "IfStatement[16830-16920]:IfStatement[16830-16920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16852-16920]:Block[16852-16920]"
  }, {
    "left" : "throw new SingularMatrixException();",
    "right" : "throw new SingularMatrixException();",
    "info" : "ThrowStatement[16870-16906]:ThrowStatement[16870-16906]"
  }, {
    "left" : "final int m = realEigenvalues.length;",
    "right" : "final int m = realEigenvalues.length;",
    "info" : "VariableDeclarationStatement[16934-16971]:VariableDeclarationStatement[16934-16971]"
  }, {
    "left" : "if (b.getRowDimension() != m)",
    "right" : "if (b.getRowDimension() != m)",
    "info" : "IfStatement[16984-17263]:IfStatement[16984-17263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17014-17263]:Block[17014-17263]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
    "info" : "ThrowStatement[17032-17249]:ThrowStatement[17032-17249]"
  }, {
    "left" : "final int nColB = b.getColumnDimension();",
    "right" : "final int nColB = b.getColumnDimension();",
    "info" : "VariableDeclarationStatement[17277-17318]:VariableDeclarationStatement[17277-17318]"
  }, {
    "left" : "final double[][] bp = new double[m][nColB];",
    "right" : "final double[][] bp = new double[m][nColB];",
    "info" : "VariableDeclarationStatement[17331-17374]:VariableDeclarationStatement[17331-17374]"
  }, {
    "left" : "for (int k = 0; k < nColB; ++k)",
    "right" : "for (int k = 0; k < nColB; ++k)",
    "info" : "ForStatement[17387-17956]:ForStatement[17387-17956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17419-17956]:Block[17419-17956]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[17437-17942]:ForStatement[17437-17942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17465-17942]:Block[17465-17942]"
  }, {
    "left" : "final ArrayRealVector v = eigenvectors[i];",
    "right" : "final ArrayRealVector v = eigenvectors[i];",
    "info" : "VariableDeclarationStatement[17487-17529]:VariableDeclarationStatement[17487-17529]"
  }, {
    "left" : "final double[] vData = v.getDataRef();",
    "right" : "final double[] vData = v.getDataRef();",
    "info" : "VariableDeclarationStatement[17550-17588]:VariableDeclarationStatement[17550-17588]"
  }, {
    "left" : "double s = 0;",
    "right" : "double s = 0;",
    "info" : "VariableDeclarationStatement[17609-17622]:VariableDeclarationStatement[17609-17622]"
  }, {
    "left" : "for (int j = 0; j < m; ++j)",
    "right" : "for (int j = 0; j < m; ++j)",
    "info" : "ForStatement[17643-17757]:ForStatement[17643-17757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17671-17757]:Block[17671-17757]"
  }, {
    "left" : "s += v.getEntry(j) * b.getEntry(j, k);",
    "right" : "s += v.getEntry(j) * b.getEntry(j, k);",
    "info" : "ExpressionStatement[17697-17735]:ExpressionStatement[17697-17735]"
  }, {
    "left" : "s /= realEigenvalues[i];",
    "right" : "s /= realEigenvalues[i];",
    "info" : "ExpressionStatement[17778-17802]:ExpressionStatement[17778-17802]"
  }, {
    "left" : "for (int j = 0; j < m; ++j)",
    "right" : "for (int j = 0; j < m; ++j)",
    "info" : "ForStatement[17823-17924]:ForStatement[17823-17924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17851-17924]:Block[17851-17924]"
  }, {
    "left" : "bp[j][k] += s * vData[j];",
    "right" : "bp[j][k] += s * vData[j];",
    "info" : "ExpressionStatement[17877-17902]:ExpressionStatement[17877-17902]"
  }, {
    "left" : "return MatrixUtils.createRealMatrix(bp);",
    "right" : "return MatrixUtils.createRealMatrix(bp);",
    "info" : "ReturnStatement[17970-18010]:ReturnStatement[17970-18010]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18179-18185]:Modifier[18179-18185]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18186-18193]:PrimitiveType[18186-18193]"
  }, {
    "left" : "isNonSingular",
    "right" : "isNonSingular",
    "info" : "SimpleName[18194-18207]:SimpleName[18194-18207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18210-18453]:Block[18210-18453]"
  }, {
    "left" : "for (int i = 0; i < realEigenvalues.length; ++i)",
    "right" : "for (int i = 0; i < realEigenvalues.length; ++i)",
    "info" : "ForStatement[18224-18418]:ForStatement[18224-18418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18273-18418]:Block[18273-18418]"
  }, {
    "left" : "if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0))",
    "right" : "if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0))",
    "info" : "IfStatement[18291-18404]:IfStatement[18291-18404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18351-18404]:Block[18351-18404]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18373-18386]:ReturnStatement[18373-18386]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18431-18443]:ReturnStatement[18431-18443]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18638-18644]:Modifier[18638-18644]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[18645-18655]:SimpleType[18645-18655]"
  }, {
    "left" : "getInverse",
    "right" : "getInverse",
    "info" : "SimpleName[18656-18666]:SimpleName[18656-18666]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[18688-18710]:SimpleType[18688-18710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18711-19454]:Block[18711-19454]"
  }, {
    "left" : "if (!isNonSingular())",
    "right" : "if (!isNonSingular())",
    "info" : "IfStatement[18726-18816]:IfStatement[18726-18816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18748-18816]:Block[18748-18816]"
  }, {
    "left" : "throw new SingularMatrixException();",
    "right" : "throw new SingularMatrixException();",
    "info" : "ThrowStatement[18766-18802]:ThrowStatement[18766-18802]"
  }, {
    "left" : "final int m = realEigenvalues.length;",
    "right" : "final int m = realEigenvalues.length;",
    "info" : "VariableDeclarationStatement[18830-18867]:VariableDeclarationStatement[18830-18867]"
  }, {
    "left" : "final double[][] invData = new double[m][m];",
    "right" : "final double[][] invData = new double[m][m];",
    "info" : "VariableDeclarationStatement[18880-18924]:VariableDeclarationStatement[18880-18924]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[18938-19385]:ForStatement[18938-19385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18966-19385]:Block[18966-19385]"
  }, {
    "left" : "final double[] invI = invData[i];",
    "right" : "final double[] invI = invData[i];",
    "info" : "VariableDeclarationStatement[18984-19017]:VariableDeclarationStatement[18984-19017]"
  }, {
    "left" : "for (int j = 0; j < m; ++j)",
    "right" : "for (int j = 0; j < m; ++j)",
    "info" : "ForStatement[19034-19371]:ForStatement[19034-19371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19062-19371]:Block[19062-19371]"
  }, {
    "left" : "double invIJ = 0;",
    "right" : "double invIJ = 0;",
    "info" : "VariableDeclarationStatement[19084-19101]:VariableDeclarationStatement[19084-19101]"
  }, {
    "left" : "for (int k = 0; k < m; ++k)",
    "right" : "for (int k = 0; k < m; ++k)",
    "info" : "ForStatement[19122-19316]:ForStatement[19122-19316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19150-19316]:Block[19150-19316]"
  }, {
    "left" : "final double[] vK = eigenvectors[k].getDataRef();",
    "right" : "final double[] vK = eigenvectors[k].getDataRef();",
    "info" : "VariableDeclarationStatement[19176-19225]:VariableDeclarationStatement[19176-19225]"
  }, {
    "left" : "invIJ += vK[i] * vK[j] / realEigenvalues[k];",
    "right" : "invIJ += vK[i] * vK[j] / realEigenvalues[k];",
    "info" : "ExpressionStatement[19250-19294]:ExpressionStatement[19250-19294]"
  }, {
    "left" : "invI[j] = invIJ;",
    "right" : "invI[j] = invIJ;",
    "info" : "ExpressionStatement[19337-19353]:ExpressionStatement[19337-19353]"
  }, {
    "left" : "return MatrixUtils.createRealMatrix(invData);",
    "right" : "return MatrixUtils.createRealMatrix(invData);",
    "info" : "ReturnStatement[19398-19443]:ReturnStatement[19398-19443]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19564-19571]:Modifier[19564-19571]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19572-19576]:PrimitiveType[19572-19576]"
  }, {
    "left" : "transformToTridiagonal",
    "right" : "transformToTridiagonal",
    "info" : "SimpleName[19577-19599]:SimpleName[19577-19599]"
  }, {
    "left" : "final RealMatrix matrix",
    "right" : "final RealMatrix matrix",
    "info" : "SingleVariableDeclaration[19600-19623]:SingleVariableDeclaration[19600-19623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19625-20101]:Block[19625-20101]"
  }, {
    "left" : "transformer = new TriDiagonalTransformer(matrix);",
    "right" : "transformer = new TriDiagonalTransformer(matrix);",
    "info" : "ExpressionStatement[19683-19732]:ExpressionStatement[19683-19732]"
  }, {
    "left" : "main      = transformer.getMainDiagonalRef();",
    "right" : "main      = transformer.getMainDiagonalRef();",
    "info" : "ExpressionStatement[19741-19786]:ExpressionStatement[19741-19786]"
  }, {
    "left" : "secondary = transformer.getSecondaryDiagonalRef();",
    "right" : "secondary = transformer.getSecondaryDiagonalRef();",
    "info" : "ExpressionStatement[19795-19845]:ExpressionStatement[19795-19845]"
  }, {
    "left" : "squaredSecondary = new double[secondary.length];",
    "right" : "squaredSecondary = new double[secondary.length];",
    "info" : "ExpressionStatement[19892-19940]:ExpressionStatement[19892-19940]"
  }, {
    "left" : "for (int i = 0; i < squaredSecondary.length; ++i)",
    "right" : "for (int i = 0; i < squaredSecondary.length; ++i)",
    "info" : "ForStatement[19949-20094]:ForStatement[19949-20094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19999-20094]:Block[19999-20094]"
  }, {
    "left" : "final double s = secondary[i];",
    "right" : "final double s = secondary[i];",
    "info" : "VariableDeclarationStatement[20013-20043]:VariableDeclarationStatement[20013-20043]"
  }, {
    "left" : "squaredSecondary[i] = s * s;",
    "right" : "squaredSecondary[i] = s * s;",
    "info" : "ExpressionStatement[20056-20084]:ExpressionStatement[20056-20084]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20175-20182]:Modifier[20175-20182]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20183-20187]:PrimitiveType[20183-20187]"
  }, {
    "left" : "computeGershgorinCircles",
    "right" : "computeGershgorinCircles",
    "info" : "SimpleName[20188-20212]:SimpleName[20188-20212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20215-21498]:Block[20215-21498]"
  }, {
    "left" : "final int m     = main.length;",
    "right" : "final int m     = main.length;",
    "info" : "VariableDeclarationStatement[20226-20256]:VariableDeclarationStatement[20226-20256]"
  }, {
    "left" : "final int lowerStart = 4 * m;",
    "right" : "final int lowerStart = 4 * m;",
    "info" : "VariableDeclarationStatement[20265-20294]:VariableDeclarationStatement[20265-20294]"
  }, {
    "left" : "final int upperStart = 5 * m;",
    "right" : "final int upperStart = 5 * m;",
    "info" : "VariableDeclarationStatement[20303-20332]:VariableDeclarationStatement[20303-20332]"
  }, {
    "left" : "lowerSpectra = Double.POSITIVE_INFINITY;",
    "right" : "lowerSpectra = Double.POSITIVE_INFINITY;",
    "info" : "ExpressionStatement[20341-20381]:ExpressionStatement[20341-20381]"
  }, {
    "left" : "upperSpectra = Double.NEGATIVE_INFINITY;",
    "right" : "upperSpectra = Double.NEGATIVE_INFINITY;",
    "info" : "ExpressionStatement[20390-20430]:ExpressionStatement[20390-20430]"
  }, {
    "left" : "double eMax = 0;",
    "right" : "double eMax = 0;",
    "info" : "VariableDeclarationStatement[20439-20455]:VariableDeclarationStatement[20439-20455]"
  }, {
    "left" : "double eCurrent = 0;",
    "right" : "double eCurrent = 0;",
    "info" : "VariableDeclarationStatement[20465-20485]:VariableDeclarationStatement[20465-20485]"
  }, {
    "left" : "for (int i = 0; i < m - 1; ++i)",
    "right" : "for (int i = 0; i < m - 1; ++i)",
    "info" : "ForStatement[20494-21085]:ForStatement[20494-21085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20526-21085]:Block[20526-21085]"
  }, {
    "left" : "final double dCurrent = main[i];",
    "right" : "final double dCurrent = main[i];",
    "info" : "VariableDeclarationStatement[20541-20573]:VariableDeclarationStatement[20541-20573]"
  }, {
    "left" : "final double ePrevious = eCurrent;",
    "right" : "final double ePrevious = eCurrent;",
    "info" : "VariableDeclarationStatement[20586-20620]:VariableDeclarationStatement[20586-20620]"
  }, {
    "left" : "eCurrent = Math.abs(secondary[i]);",
    "right" : "eCurrent = Math.abs(secondary[i]);",
    "info" : "ExpressionStatement[20633-20667]:ExpressionStatement[20633-20667]"
  }, {
    "left" : "eMax = Math.max(eMax, eCurrent);",
    "right" : "eMax = Math.max(eMax, eCurrent);",
    "info" : "ExpressionStatement[20680-20712]:ExpressionStatement[20680-20712]"
  }, {
    "left" : "final double radius = ePrevious + eCurrent;",
    "right" : "final double radius = ePrevious + eCurrent;",
    "info" : "VariableDeclarationStatement[20725-20768]:VariableDeclarationStatement[20725-20768]"
  }, {
    "left" : "final double lower = dCurrent - radius;",
    "right" : "final double lower = dCurrent - radius;",
    "info" : "VariableDeclarationStatement[20782-20821]:VariableDeclarationStatement[20782-20821]"
  }, {
    "left" : "work[lowerStart + i] = lower;",
    "right" : "work[lowerStart + i] = lower;",
    "info" : "ExpressionStatement[20834-20863]:ExpressionStatement[20834-20863]"
  }, {
    "left" : "lowerSpectra = Math.min(lowerSpectra, lower);",
    "right" : "lowerSpectra = Math.min(lowerSpectra, lower);",
    "info" : "ExpressionStatement[20876-20921]:ExpressionStatement[20876-20921]"
  }, {
    "left" : "final double upper = dCurrent + radius;",
    "right" : "final double upper = dCurrent + radius;",
    "info" : "VariableDeclarationStatement[20935-20974]:VariableDeclarationStatement[20935-20974]"
  }, {
    "left" : "work[upperStart + i] = upper;",
    "right" : "work[upperStart + i] = upper;",
    "info" : "ExpressionStatement[20987-21016]:ExpressionStatement[20987-21016]"
  }, {
    "left" : "upperSpectra = Math.max(upperSpectra, upper);",
    "right" : "upperSpectra = Math.max(upperSpectra, upper);",
    "info" : "ExpressionStatement[21029-21074]:ExpressionStatement[21029-21074]"
  }, {
    "left" : "final double dCurrent = main[m - 1];",
    "right" : "final double dCurrent = main[m - 1];",
    "info" : "VariableDeclarationStatement[21095-21131]:VariableDeclarationStatement[21095-21131]"
  }, {
    "left" : "final double lower = dCurrent - eCurrent;",
    "right" : "final double lower = dCurrent - eCurrent;",
    "info" : "VariableDeclarationStatement[21140-21181]:VariableDeclarationStatement[21140-21181]"
  }, {
    "left" : "work[lowerStart + m - 1] = lower;",
    "right" : "work[lowerStart + m - 1] = lower;",
    "info" : "ExpressionStatement[21190-21223]:ExpressionStatement[21190-21223]"
  }, {
    "left" : "lowerSpectra = Math.min(lowerSpectra, lower);",
    "right" : "lowerSpectra = Math.min(lowerSpectra, lower);",
    "info" : "ExpressionStatement[21232-21277]:ExpressionStatement[21232-21277]"
  }, {
    "left" : "final double upper = dCurrent + eCurrent;",
    "right" : "final double upper = dCurrent + eCurrent;",
    "info" : "VariableDeclarationStatement[21286-21327]:VariableDeclarationStatement[21286-21327]"
  }, {
    "left" : "work[upperStart + m - 1] = upper;",
    "right" : "work[upperStart + m - 1] = upper;",
    "info" : "ExpressionStatement[21336-21369]:ExpressionStatement[21336-21369]"
  }, {
    "left" : "upperSpectra = Math.max(upperSpectra, upper);",
    "right" : "upperSpectra = Math.max(upperSpectra, upper);",
    "info" : "ExpressionStatement[21378-21423]:ExpressionStatement[21378-21423]"
  }, {
    "left" : "minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",
    "right" : "minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",
    "info" : "ExpressionStatement[21432-21491]:ExpressionStatement[21432-21491]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21628-21635]:Modifier[21628-21635]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21636-21640]:PrimitiveType[21636-21640]"
  }, {
    "left" : "findEigenvalues",
    "right" : "findEigenvalues",
    "info" : "SimpleName[21641-21656]:SimpleName[21641-21656]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[21674-21696]:SimpleType[21674-21696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21697-24281]:Block[21697-24281]"
  }, {
    "left" : "List<Integer> splitIndices = computeSplits();",
    "right" : "List<Integer> splitIndices = computeSplits();",
    "info" : "VariableDeclarationStatement[21744-21789]:VariableDeclarationStatement[21744-21789]"
  }, {
    "left" : "realEigenvalues = new double[main.length];",
    "right" : "realEigenvalues = new double[main.length];",
    "info" : "ExpressionStatement[21845-21887]:ExpressionStatement[21845-21887]"
  }, {
    "left" : "imagEigenvalues = new double[main.length];",
    "right" : "imagEigenvalues = new double[main.length];",
    "info" : "ExpressionStatement[21896-21938]:ExpressionStatement[21896-21938]"
  }, {
    "left" : "int begin = 0;",
    "right" : "int begin = 0;",
    "info" : "VariableDeclarationStatement[21947-21961]:VariableDeclarationStatement[21947-21961]"
  }, {
    "left" : "for (final int end : splitIndices)",
    "right" : "for (final int end : splitIndices)",
    "info" : "EnhancedForStatement[21970-23928]:EnhancedForStatement[21970-23928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22005-23928]:Block[22005-23928]"
  }, {
    "left" : "final int n = end - begin;",
    "right" : "final int n = end - begin;",
    "info" : "VariableDeclarationStatement[22019-22045]:VariableDeclarationStatement[22019-22045]"
  }, {
    "left" : "switch (n) {\n\n            case 1:\n                // apply dedicated method for dimension 1\n                process1RowBlock(begin);\n                break;\n\n            case 2:\n                // apply dedicated method for dimension 2\n                process2RowsBlock(begin);\n                break;\n\n            case 3:\n                // apply dedicated method for dimension 3\n                process3RowsBlock(begin);\n                break;\n\n            default:\n\n                // choose an initial shift for LDL<sup>T</sup> decomposition\n                final double[] range       = eigenvaluesRange(begin, n);\n                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);\n                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);\n                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);\n                final int threeFourthCount = countEigenValues(threeFourth, begin, n);\n                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);\n                final double lambda        = chooseLeft ? range[0] : range[1];\n\n                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n\n                // decompose T-&lambda;I as LDL<sup>T</sup>\n                ldlTDecomposition(lambda, begin, n);\n\n                // apply general dqd/dqds method\n                processGeneralBlock(n);\n\n                // extract realEigenvalues\n                if (chooseLeft) {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda + work[4 * i];\n                    }\n                } else {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda - work[4 * i];\n                    }\n                }\n\n            }",
    "right" : "switch (n) {\n\n            case 1:\n                // apply dedicated method for dimension 1\n                process1RowBlock(begin);\n                break;\n\n            case 2:\n                // apply dedicated method for dimension 2\n                process2RowsBlock(begin);\n                break;\n\n            case 3:\n                // apply dedicated method for dimension 3\n                process3RowsBlock(begin);\n                break;\n\n            default:\n\n                // choose an initial shift for LDL<sup>T</sup> decomposition\n                final double[] range       = eigenvaluesRange(begin, n);\n                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);\n                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);\n                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);\n                final int threeFourthCount = countEigenValues(threeFourth, begin, n);\n                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);\n                final double lambda        = chooseLeft ? range[0] : range[1];\n\n                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n\n                // decompose T-&lambda;I as LDL<sup>T</sup>\n                ldlTDecomposition(lambda, begin, n);\n\n                // apply general dqd/dqds method\n                processGeneralBlock(n);\n\n                // extract realEigenvalues\n                if (chooseLeft) {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda + work[4 * i];\n                    }\n                } else {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda - work[4 * i];\n                    }\n                }\n\n            }",
    "info" : "SwitchStatement[22058-23893]:SwitchStatement[22058-23893]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[22084-22091]:SwitchCase[22084-22091]"
  }, {
    "left" : "process1RowBlock(begin);",
    "right" : "process1RowBlock(begin);",
    "info" : "ExpressionStatement[22166-22190]:ExpressionStatement[22166-22190]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22207-22213]:BreakStatement[22207-22213]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[22227-22234]:SwitchCase[22227-22234]"
  }, {
    "left" : "process2RowsBlock(begin);",
    "right" : "process2RowsBlock(begin);",
    "info" : "ExpressionStatement[22309-22334]:ExpressionStatement[22309-22334]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22351-22357]:BreakStatement[22351-22357]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[22371-22378]:SwitchCase[22371-22378]"
  }, {
    "left" : "process3RowsBlock(begin);",
    "right" : "process3RowsBlock(begin);",
    "info" : "ExpressionStatement[22453-22478]:ExpressionStatement[22453-22478]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22495-22501]:BreakStatement[22495-22501]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[22515-22523]:SwitchCase[22515-22523]"
  }, {
    "left" : "final double[] range       = eigenvaluesRange(begin, n);",
    "right" : "final double[] range       = eigenvaluesRange(begin, n);",
    "info" : "VariableDeclarationStatement[22618-22674]:VariableDeclarationStatement[22618-22674]"
  }, {
    "left" : "final double oneFourth     = 0.25 * (3 * range[0] + range[1]);",
    "right" : "final double oneFourth     = 0.25 * (3 * range[0] + range[1]);",
    "info" : "VariableDeclarationStatement[22691-22753]:VariableDeclarationStatement[22691-22753]"
  }, {
    "left" : "final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",
    "right" : "final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",
    "info" : "VariableDeclarationStatement[22770-22837]:VariableDeclarationStatement[22770-22837]"
  }, {
    "left" : "final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);",
    "right" : "final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);",
    "info" : "VariableDeclarationStatement[22854-22916]:VariableDeclarationStatement[22854-22916]"
  }, {
    "left" : "final int threeFourthCount = countEigenValues(threeFourth, begin, n);",
    "right" : "final int threeFourthCount = countEigenValues(threeFourth, begin, n);",
    "info" : "VariableDeclarationStatement[22933-23002]:VariableDeclarationStatement[22933-23002]"
  }, {
    "left" : "final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);",
    "right" : "final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);",
    "info" : "VariableDeclarationStatement[23019-23095]:VariableDeclarationStatement[23019-23095]"
  }, {
    "left" : "final double lambda        = chooseLeft ? range[0] : range[1];",
    "right" : "final double lambda        = chooseLeft ? range[0] : range[1];",
    "info" : "VariableDeclarationStatement[23112-23174]:VariableDeclarationStatement[23112-23174]"
  }, {
    "left" : "tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;",
    "right" : "tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;",
    "info" : "ExpressionStatement[23192-23259]:ExpressionStatement[23192-23259]"
  }, {
    "left" : "ldlTDecomposition(lambda, begin, n);",
    "right" : "ldlTDecomposition(lambda, begin, n);",
    "info" : "ExpressionStatement[23337-23373]:ExpressionStatement[23337-23373]"
  }, {
    "left" : "processGeneralBlock(n);",
    "right" : "processGeneralBlock(n);",
    "info" : "ExpressionStatement[23440-23463]:ExpressionStatement[23440-23463]"
  }, {
    "left" : "if (chooseLeft)",
    "right" : "if (chooseLeft)",
    "info" : "IfStatement[23524-23878]:IfStatement[23524-23878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23540-23706]:Block[23540-23706]"
  }, {
    "left" : "for (int i = 0; i < n; ++i)",
    "right" : "for (int i = 0; i < n; ++i)",
    "info" : "ForStatement[23562-23688]:ForStatement[23562-23688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23590-23688]:Block[23590-23688]"
  }, {
    "left" : "realEigenvalues[begin + i] = lambda + work[4 * i];",
    "right" : "realEigenvalues[begin + i] = lambda + work[4 * i];",
    "info" : "ExpressionStatement[23616-23666]:ExpressionStatement[23616-23666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23712-23878]:Block[23712-23878]"
  }, {
    "left" : "for (int i = 0; i < n; ++i)",
    "right" : "for (int i = 0; i < n; ++i)",
    "info" : "ForStatement[23734-23860]:ForStatement[23734-23860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23762-23860]:Block[23762-23860]"
  }, {
    "left" : "realEigenvalues[begin + i] = lambda - work[4 * i];",
    "right" : "realEigenvalues[begin + i] = lambda - work[4 * i];",
    "info" : "ExpressionStatement[23788-23838]:ExpressionStatement[23788-23838]"
  }, {
    "left" : "begin = end;",
    "right" : "begin = end;",
    "info" : "ExpressionStatement[23906-23918]:ExpressionStatement[23906-23918]"
  }, {
    "left" : "Arrays.sort(realEigenvalues);",
    "right" : "Arrays.sort(realEigenvalues);",
    "info" : "ExpressionStatement[23994-24023]:ExpressionStatement[23994-24023]"
  }, {
    "left" : "int j = realEigenvalues.length - 1;",
    "right" : "int j = realEigenvalues.length - 1;",
    "info" : "VariableDeclarationStatement[24032-24067]:VariableDeclarationStatement[24032-24067]"
  }, {
    "left" : "for (int i = 0; i < j; ++i)",
    "right" : "for (int i = 0; i < j; ++i)",
    "info" : "ForStatement[24076-24274]:ForStatement[24076-24274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24104-24274]:Block[24104-24274]"
  }, {
    "left" : "final double tmp = realEigenvalues[i];",
    "right" : "final double tmp = realEigenvalues[i];",
    "info" : "VariableDeclarationStatement[24118-24156]:VariableDeclarationStatement[24118-24156]"
  }, {
    "left" : "realEigenvalues[i] = realEigenvalues[j];",
    "right" : "realEigenvalues[i] = realEigenvalues[j];",
    "info" : "ExpressionStatement[24169-24209]:ExpressionStatement[24169-24209]"
  }, {
    "left" : "realEigenvalues[j] = tmp;",
    "right" : "realEigenvalues[j] = tmp;",
    "info" : "ExpressionStatement[24222-24247]:ExpressionStatement[24222-24247]"
  }, {
    "left" : "--j;",
    "right" : "--j;",
    "info" : "ExpressionStatement[24260-24264]:ExpressionStatement[24260-24264]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24393-24400]:Modifier[24393-24400]"
  }, {
    "left" : "List<Integer>",
    "right" : "List<Integer>",
    "info" : "ParameterizedType[24401-24414]:ParameterizedType[24401-24414]"
  }, {
    "left" : "computeSplits",
    "right" : "computeSplits",
    "info" : "SimpleName[24415-24428]:SimpleName[24415-24428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24431-25085]:Block[24431-25085]"
  }, {
    "left" : "final List<Integer> list = new ArrayList<Integer>();",
    "right" : "final List<Integer> list = new ArrayList<Integer>();",
    "info" : "VariableDeclarationStatement[24442-24494]:VariableDeclarationStatement[24442-24494]"
  }, {
    "left" : "double absDCurrent = Math.abs(main[0]);",
    "right" : "double absDCurrent = Math.abs(main[0]);",
    "info" : "VariableDeclarationStatement[24554-24593]:VariableDeclarationStatement[24554-24593]"
  }, {
    "left" : "for (int i = 0; i < secondary.length; ++i)",
    "right" : "for (int i = 0; i < secondary.length; ++i)",
    "info" : "ForStatement[24602-25016]:ForStatement[24602-25016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24645-25016]:Block[24645-25016]"
  }, {
    "left" : "final double absDPrevious = absDCurrent;",
    "right" : "final double absDPrevious = absDCurrent;",
    "info" : "VariableDeclarationStatement[24659-24699]:VariableDeclarationStatement[24659-24699]"
  }, {
    "left" : "absDCurrent = Math.abs(main[i + 1]);",
    "right" : "absDCurrent = Math.abs(main[i + 1]);",
    "info" : "ExpressionStatement[24712-24748]:ExpressionStatement[24712-24748]"
  }, {
    "left" : "final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);",
    "right" : "final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);",
    "info" : "VariableDeclarationStatement[24761-24835]:VariableDeclarationStatement[24761-24835]"
  }, {
    "left" : "if (Math.abs(secondary[i]) <= max)",
    "right" : "if (Math.abs(secondary[i]) <= max)",
    "info" : "IfStatement[24848-25006]:IfStatement[24848-25006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24883-25006]:Block[24883-25006]"
  }, {
    "left" : "list.add(i + 1);",
    "right" : "list.add(i + 1);",
    "info" : "ExpressionStatement[24901-24917]:ExpressionStatement[24901-24917]"
  }, {
    "left" : "secondary[i] = 0;",
    "right" : "secondary[i] = 0;",
    "info" : "ExpressionStatement[24934-24951]:ExpressionStatement[24934-24951]"
  }, {
    "left" : "squaredSecondary[i] = 0;",
    "right" : "squaredSecondary[i] = 0;",
    "info" : "ExpressionStatement[24968-24992]:ExpressionStatement[24968-24992]"
  }, {
    "left" : "list.add(secondary.length + 1);",
    "right" : "list.add(secondary.length + 1);",
    "info" : "ExpressionStatement[25026-25057]:ExpressionStatement[25026-25057]"
  }, {
    "left" : "return list;",
    "right" : "return list;",
    "info" : "ReturnStatement[25066-25078]:ReturnStatement[25066-25078]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25289-25296]:Modifier[25289-25296]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25297-25301]:PrimitiveType[25297-25301]"
  }, {
    "left" : "process1RowBlock",
    "right" : "process1RowBlock",
    "info" : "SimpleName[25302-25318]:SimpleName[25302-25318]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[25319-25334]:SingleVariableDeclaration[25319-25334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25336-25389]:Block[25336-25389]"
  }, {
    "left" : "realEigenvalues[index] = main[index];",
    "right" : "realEigenvalues[index] = main[index];",
    "info" : "ExpressionStatement[25346-25383]:ExpressionStatement[25346-25383]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25686-25693]:Modifier[25686-25693]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25694-25698]:PrimitiveType[25694-25698]"
  }, {
    "left" : "process2RowsBlock",
    "right" : "process2RowsBlock",
    "info" : "SimpleName[25699-25716]:SimpleName[25699-25716]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[25717-25732]:SingleVariableDeclaration[25717-25732]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[25749-25771]:SimpleType[25749-25771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25772-26425]:Block[25772-26425]"
  }, {
    "left" : "final double q0   = main[index];",
    "right" : "final double q0   = main[index];",
    "info" : "VariableDeclarationStatement[25871-25903]:VariableDeclarationStatement[25871-25903]"
  }, {
    "left" : "final double q1   = main[index + 1];",
    "right" : "final double q1   = main[index + 1];",
    "info" : "VariableDeclarationStatement[25912-25948]:VariableDeclarationStatement[25912-25948]"
  }, {
    "left" : "final double e12  = squaredSecondary[index];",
    "right" : "final double e12  = squaredSecondary[index];",
    "info" : "VariableDeclarationStatement[25957-26001]:VariableDeclarationStatement[25957-26001]"
  }, {
    "left" : "final double s     = q0 + q1;",
    "right" : "final double s     = q0 + q1;",
    "info" : "VariableDeclarationStatement[26011-26040]:VariableDeclarationStatement[26011-26040]"
  }, {
    "left" : "final double p     = q0 * q1 - e12;",
    "right" : "final double p     = q0 * q1 - e12;",
    "info" : "VariableDeclarationStatement[26049-26084]:VariableDeclarationStatement[26049-26084]"
  }, {
    "left" : "final double delta = s * s - 4 * p;",
    "right" : "final double delta = s * s - 4 * p;",
    "info" : "VariableDeclarationStatement[26093-26128]:VariableDeclarationStatement[26093-26128]"
  }, {
    "left" : "if (delta < 0)",
    "right" : "if (delta < 0)",
    "info" : "IfStatement[26137-26248]:IfStatement[26137-26248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26152-26248]:Block[26152-26248]"
  }, {
    "left" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 2);",
    "right" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 2);",
    "info" : "ThrowStatement[26166-26238]:ThrowStatement[26166-26238]"
  }, {
    "left" : "final double largestRoot = 0.5 * (s + Math.sqrt(delta));",
    "right" : "final double largestRoot = 0.5 * (s + Math.sqrt(delta));",
    "info" : "VariableDeclarationStatement[26258-26314]:VariableDeclarationStatement[26258-26314]"
  }, {
    "left" : "realEigenvalues[index]     = largestRoot;",
    "right" : "realEigenvalues[index]     = largestRoot;",
    "info" : "ExpressionStatement[26323-26364]:ExpressionStatement[26323-26364]"
  }, {
    "left" : "realEigenvalues[index + 1] = p / largestRoot;",
    "right" : "realEigenvalues[index + 1] = p / largestRoot;",
    "info" : "ExpressionStatement[26373-26418]:ExpressionStatement[26373-26418]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26714-26721]:Modifier[26714-26721]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26722-26726]:PrimitiveType[26722-26726]"
  }, {
    "left" : "process3RowsBlock",
    "right" : "process3RowsBlock",
    "info" : "SimpleName[26727-26744]:SimpleName[26727-26744]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[26745-26760]:SingleVariableDeclaration[26745-26760]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[26777-26799]:SimpleType[26777-26799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26800-28927]:Block[26800-28927]"
  }, {
    "left" : "final double q0       = main[index];",
    "right" : "final double q0       = main[index];",
    "info" : "VariableDeclarationStatement[26964-27000]:VariableDeclarationStatement[26964-27000]"
  }, {
    "left" : "final double q1       = main[index + 1];",
    "right" : "final double q1       = main[index + 1];",
    "info" : "VariableDeclarationStatement[27009-27049]:VariableDeclarationStatement[27009-27049]"
  }, {
    "left" : "final double q2       = main[index + 2];",
    "right" : "final double q2       = main[index + 2];",
    "info" : "VariableDeclarationStatement[27058-27098]:VariableDeclarationStatement[27058-27098]"
  }, {
    "left" : "final double e12      = squaredSecondary[index];",
    "right" : "final double e12      = squaredSecondary[index];",
    "info" : "VariableDeclarationStatement[27107-27155]:VariableDeclarationStatement[27107-27155]"
  }, {
    "left" : "final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];",
    "right" : "final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];",
    "info" : "VariableDeclarationStatement[27164-27226]:VariableDeclarationStatement[27164-27226]"
  }, {
    "left" : "final double b        = -(q0 + q1 + q2);",
    "right" : "final double b        = -(q0 + q1 + q2);",
    "info" : "VariableDeclarationStatement[27320-27360]:VariableDeclarationStatement[27320-27360]"
  }, {
    "left" : "final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;",
    "right" : "final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;",
    "info" : "VariableDeclarationStatement[27369-27428]:VariableDeclarationStatement[27369-27428]"
  }, {
    "left" : "final double d        = q2 * e12 - q0 * q1q2Me22;",
    "right" : "final double d        = q2 * e12 - q0 * q1q2Me22;",
    "info" : "VariableDeclarationStatement[27437-27486]:VariableDeclarationStatement[27437-27486]"
  }, {
    "left" : "final double b2       = b * b;",
    "right" : "final double b2       = b * b;",
    "info" : "VariableDeclarationStatement[27528-27558]:VariableDeclarationStatement[27528-27558]"
  }, {
    "left" : "final double q        = (3 * c - b2) / 9;",
    "right" : "final double q        = (3 * c - b2) / 9;",
    "info" : "VariableDeclarationStatement[27567-27608]:VariableDeclarationStatement[27567-27608]"
  }, {
    "left" : "final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;",
    "right" : "final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;",
    "info" : "VariableDeclarationStatement[27617-27678]:VariableDeclarationStatement[27617-27678]"
  }, {
    "left" : "final double delta    = q * q * q + r * r;",
    "right" : "final double delta    = q * q * q + r * r;",
    "info" : "VariableDeclarationStatement[27687-27729]:VariableDeclarationStatement[27687-27729]"
  }, {
    "left" : "if (delta >= 0)",
    "right" : "if (delta >= 0)",
    "info" : "IfStatement[27738-28091]:IfStatement[27738-28091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27754-28091]:Block[27754-28091]"
  }, {
    "left" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 3);",
    "right" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 3);",
    "info" : "ThrowStatement[28009-28081]:ThrowStatement[28009-28081]"
  }, {
    "left" : "final double sqrtMq = Math.sqrt(-q);",
    "right" : "final double sqrtMq = Math.sqrt(-q);",
    "info" : "VariableDeclarationStatement[28100-28136]:VariableDeclarationStatement[28100-28136]"
  }, {
    "left" : "final double theta  = Math.acos(r / (-q * sqrtMq));",
    "right" : "final double theta  = Math.acos(r / (-q * sqrtMq));",
    "info" : "VariableDeclarationStatement[28145-28196]:VariableDeclarationStatement[28145-28196]"
  }, {
    "left" : "final double alpha  = 2 * sqrtMq;",
    "right" : "final double alpha  = 2 * sqrtMq;",
    "info" : "VariableDeclarationStatement[28205-28238]:VariableDeclarationStatement[28205-28238]"
  }, {
    "left" : "final double beta   = b / 3;",
    "right" : "final double beta   = b / 3;",
    "info" : "VariableDeclarationStatement[28247-28275]:VariableDeclarationStatement[28247-28275]"
  }, {
    "left" : "double z0 = alpha * Math.cos(theta / 3) - beta;",
    "right" : "double z0 = alpha * Math.cos(theta / 3) - beta;",
    "info" : "VariableDeclarationStatement[28285-28332]:VariableDeclarationStatement[28285-28332]"
  }, {
    "left" : "double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;",
    "right" : "double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;",
    "info" : "VariableDeclarationStatement[28341-28404]:VariableDeclarationStatement[28341-28404]"
  }, {
    "left" : "double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;",
    "right" : "double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;",
    "info" : "VariableDeclarationStatement[28413-28476]:VariableDeclarationStatement[28413-28476]"
  }, {
    "left" : "if (z0 < z1)",
    "right" : "if (z0 < z1)",
    "info" : "IfStatement[28485-28583]:IfStatement[28485-28583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28498-28583]:Block[28498-28583]"
  }, {
    "left" : "final double t = z0;",
    "right" : "final double t = z0;",
    "info" : "VariableDeclarationStatement[28512-28532]:VariableDeclarationStatement[28512-28532]"
  }, {
    "left" : "z0 = z1;",
    "right" : "z0 = z1;",
    "info" : "ExpressionStatement[28545-28553]:ExpressionStatement[28545-28553]"
  }, {
    "left" : "z1 = t;",
    "right" : "z1 = t;",
    "info" : "ExpressionStatement[28566-28573]:ExpressionStatement[28566-28573]"
  }, {
    "left" : "if (z1 < z2)",
    "right" : "if (z1 < z2)",
    "info" : "IfStatement[28592-28690]:IfStatement[28592-28690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28605-28690]:Block[28605-28690]"
  }, {
    "left" : "final double t = z1;",
    "right" : "final double t = z1;",
    "info" : "VariableDeclarationStatement[28619-28639]:VariableDeclarationStatement[28619-28639]"
  }, {
    "left" : "z1 = z2;",
    "right" : "z1 = z2;",
    "info" : "ExpressionStatement[28652-28660]:ExpressionStatement[28652-28660]"
  }, {
    "left" : "z2 = t;",
    "right" : "z2 = t;",
    "info" : "ExpressionStatement[28673-28680]:ExpressionStatement[28673-28680]"
  }, {
    "left" : "if (z0 < z1)",
    "right" : "if (z0 < z1)",
    "info" : "IfStatement[28699-28797]:IfStatement[28699-28797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28712-28797]:Block[28712-28797]"
  }, {
    "left" : "final double t = z0;",
    "right" : "final double t = z0;",
    "info" : "VariableDeclarationStatement[28726-28746]:VariableDeclarationStatement[28726-28746]"
  }, {
    "left" : "z0 = z1;",
    "right" : "z0 = z1;",
    "info" : "ExpressionStatement[28759-28767]:ExpressionStatement[28759-28767]"
  }, {
    "left" : "z1 = t;",
    "right" : "z1 = t;",
    "info" : "ExpressionStatement[28780-28787]:ExpressionStatement[28780-28787]"
  }, {
    "left" : "realEigenvalues[index]     = z0;",
    "right" : "realEigenvalues[index]     = z0;",
    "info" : "ExpressionStatement[28806-28838]:ExpressionStatement[28806-28838]"
  }, {
    "left" : "realEigenvalues[index + 1] = z1;",
    "right" : "realEigenvalues[index + 1] = z1;",
    "info" : "ExpressionStatement[28847-28879]:ExpressionStatement[28847-28879]"
  }, {
    "left" : "realEigenvalues[index + 2] = z2;",
    "right" : "realEigenvalues[index + 2] = z2;",
    "info" : "ExpressionStatement[28888-28920]:ExpressionStatement[28888-28920]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29441-29448]:Modifier[29441-29448]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29449-29453]:PrimitiveType[29449-29453]"
  }, {
    "left" : "processGeneralBlock",
    "right" : "processGeneralBlock",
    "info" : "SimpleName[29454-29473]:SimpleName[29454-29473]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[29474-29485]:SingleVariableDeclaration[29474-29485]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[29502-29524]:SimpleType[29502-29524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29525-33413]:Block[29525-33413]"
  }, {
    "left" : "double sumOffDiag = 0;",
    "right" : "double sumOffDiag = 0;",
    "info" : "VariableDeclarationStatement[29582-29604]:VariableDeclarationStatement[29582-29604]"
  }, {
    "left" : "for (int i = 0; i < n - 1; ++i)",
    "right" : "for (int i = 0; i < n - 1; ++i)",
    "info" : "ForStatement[29613-29770]:ForStatement[29613-29770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29645-29770]:Block[29645-29770]"
  }, {
    "left" : "final int fourI = 4 * i;",
    "right" : "final int fourI = 4 * i;",
    "info" : "VariableDeclarationStatement[29659-29683]:VariableDeclarationStatement[29659-29683]"
  }, {
    "left" : "final double ei = work[fourI + 2];",
    "right" : "final double ei = work[fourI + 2];",
    "info" : "VariableDeclarationStatement[29696-29730]:VariableDeclarationStatement[29696-29730]"
  }, {
    "left" : "sumOffDiag += ei;",
    "right" : "sumOffDiag += ei;",
    "info" : "ExpressionStatement[29743-29760]:ExpressionStatement[29743-29760]"
  }, {
    "left" : "if (sumOffDiag == 0)",
    "right" : "if (sumOffDiag == 0)",
    "info" : "IfStatement[29780-29874]:IfStatement[29780-29874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29801-29874]:Block[29801-29874]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29857-29864]:ReturnStatement[29857-29864]"
  }, {
    "left" : "flipIfWarranted(n, 2);",
    "right" : "flipIfWarranted(n, 2);",
    "info" : "ExpressionStatement[29957-29979]:ExpressionStatement[29957-29979]"
  }, {
    "left" : "initialSplits(n);",
    "right" : "initialSplits(n);",
    "info" : "ExpressionStatement[30049-30066]:ExpressionStatement[30049-30066]"
  }, {
    "left" : "tType = 0;",
    "right" : "tType = 0;",
    "info" : "ExpressionStatement[30126-30136]:ExpressionStatement[30126-30136]"
  }, {
    "left" : "dMin1 = 0;",
    "right" : "dMin1 = 0;",
    "info" : "ExpressionStatement[30145-30155]:ExpressionStatement[30145-30155]"
  }, {
    "left" : "dMin2 = 0;",
    "right" : "dMin2 = 0;",
    "info" : "ExpressionStatement[30164-30174]:ExpressionStatement[30164-30174]"
  }, {
    "left" : "dN    = 0;",
    "right" : "dN    = 0;",
    "info" : "ExpressionStatement[30183-30193]:ExpressionStatement[30183-30193]"
  }, {
    "left" : "dN1   = 0;",
    "right" : "dN1   = 0;",
    "info" : "ExpressionStatement[30202-30212]:ExpressionStatement[30202-30212]"
  }, {
    "left" : "dN2   = 0;",
    "right" : "dN2   = 0;",
    "info" : "ExpressionStatement[30221-30231]:ExpressionStatement[30221-30231]"
  }, {
    "left" : "tau   = 0;",
    "right" : "tau   = 0;",
    "info" : "ExpressionStatement[30240-30250]:ExpressionStatement[30240-30250]"
  }, {
    "left" : "int i0 = 0;",
    "right" : "int i0 = 0;",
    "info" : "VariableDeclarationStatement[30294-30305]:VariableDeclarationStatement[30294-30305]"
  }, {
    "left" : "int n0 = n;",
    "right" : "int n0 = n;",
    "info" : "VariableDeclarationStatement[30314-30325]:VariableDeclarationStatement[30314-30325]"
  }, {
    "left" : "while (n0 > 0)",
    "right" : "while (n0 > 0)",
    "info" : "WhileStatement[30334-33406]:WhileStatement[30334-33406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30349-33406]:Block[30349-33406]"
  }, {
    "left" : "sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];",
    "right" : "sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];",
    "info" : "ExpressionStatement[30457-30502]:ExpressionStatement[30457-30502]"
  }, {
    "left" : "sigmaLow = 0;",
    "right" : "sigmaLow = 0;",
    "info" : "ExpressionStatement[30515-30528]:ExpressionStatement[30515-30528]"
  }, {
    "left" : "double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];",
    "right" : "double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];",
    "info" : "VariableDeclarationStatement[30602-30656]:VariableDeclarationStatement[30602-30656]"
  }, {
    "left" : "double offDiagMax = 0;",
    "right" : "double offDiagMax = 0;",
    "info" : "VariableDeclarationStatement[30669-30691]:VariableDeclarationStatement[30669-30691]"
  }, {
    "left" : "double diagMax    = work[4 * n0 - 4];",
    "right" : "double diagMax    = work[4 * n0 - 4];",
    "info" : "VariableDeclarationStatement[30704-30741]:VariableDeclarationStatement[30704-30741]"
  }, {
    "left" : "double diagMin    = diagMax;",
    "right" : "double diagMin    = diagMax;",
    "info" : "VariableDeclarationStatement[30754-30782]:VariableDeclarationStatement[30754-30782]"
  }, {
    "left" : "i0 = 0;",
    "right" : "i0 = 0;",
    "info" : "ExpressionStatement[30795-30802]:ExpressionStatement[30795-30802]"
  }, {
    "left" : "for (int i = 4 * (n0 - 2); i >= 0; i -= 4)",
    "right" : "for (int i = 4 * (n0 - 2); i >= 0; i -= 4)",
    "info" : "ForStatement[30815-31329]:ForStatement[30815-31329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30858-31329]:Block[30858-31329]"
  }, {
    "left" : "if (work[i + 2] <= 0)",
    "right" : "if (work[i + 2] <= 0)",
    "info" : "IfStatement[30876-30980]:IfStatement[30876-30980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30898-30980]:Block[30898-30980]"
  }, {
    "left" : "i0 = 1 + i / 4;",
    "right" : "i0 = 1 + i / 4;",
    "info" : "ExpressionStatement[30920-30935]:ExpressionStatement[30920-30935]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30956-30962]:BreakStatement[30956-30962]"
  }, {
    "left" : "if (diagMin >= 4 * offDiagMax)",
    "right" : "if (diagMin >= 4 * offDiagMax)",
    "info" : "IfStatement[30997-31180]:IfStatement[30997-31180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31028-31180]:Block[31028-31180]"
  }, {
    "left" : "diagMin    = Math.min(diagMin, work[i + 4]);",
    "right" : "diagMin    = Math.min(diagMin, work[i + 4]);",
    "info" : "ExpressionStatement[31050-31094]:ExpressionStatement[31050-31094]"
  }, {
    "left" : "offDiagMax = Math.max(offDiagMax, work[i + 2]);",
    "right" : "offDiagMax = Math.max(offDiagMax, work[i + 2]);",
    "info" : "ExpressionStatement[31115-31162]:ExpressionStatement[31115-31162]"
  }, {
    "left" : "diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",
    "right" : "diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",
    "info" : "ExpressionStatement[31197-31251]:ExpressionStatement[31197-31251]"
  }, {
    "left" : "offDiagMin = Math.min(offDiagMin, work[i + 2]);",
    "right" : "offDiagMin = Math.min(offDiagMin, work[i + 2]);",
    "info" : "ExpressionStatement[31268-31315]:ExpressionStatement[31268-31315]"
  }, {
    "left" : "work[4 * n0 - 2] = offDiagMin;",
    "right" : "work[4 * n0 - 2] = offDiagMin;",
    "info" : "ExpressionStatement[31342-31372]:ExpressionStatement[31342-31372]"
  }, {
    "left" : "dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",
    "right" : "dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",
    "info" : "ExpressionStatement[31432-31499]:ExpressionStatement[31432-31499]"
  }, {
    "left" : "pingPong = 0;",
    "right" : "pingPong = 0;",
    "info" : "ExpressionStatement[31513-31526]:ExpressionStatement[31513-31526]"
  }, {
    "left" : "int maxIter = 30 * (n0 - i0);",
    "right" : "int maxIter = 30 * (n0 - i0);",
    "info" : "VariableDeclarationStatement[31539-31568]:VariableDeclarationStatement[31539-31568]"
  }, {
    "left" : "for (int k = 0; i0 < n0; ++k)",
    "right" : "for (int k = 0; i0 < n0; ++k)",
    "info" : "ForStatement[31581-33395]:ForStatement[31581-33395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31611-33395]:Block[31611-33395]"
  }, {
    "left" : "if (k >= maxIter)",
    "right" : "if (k >= maxIter)",
    "info" : "IfStatement[31629-31765]:IfStatement[31629-31765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31647-31765]:Block[31647-31765]"
  }, {
    "left" : "throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));",
    "right" : "throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));",
    "info" : "ThrowStatement[31669-31747]:ThrowStatement[31669-31747]"
  }, {
    "left" : "n0 = goodStep(i0, n0);",
    "right" : "n0 = goodStep(i0, n0);",
    "info" : "ExpressionStatement[31819-31841]:ExpressionStatement[31819-31841]"
  }, {
    "left" : "pingPong = 1 - pingPong;",
    "right" : "pingPong = 1 - pingPong;",
    "info" : "ExpressionStatement[31858-31882]:ExpressionStatement[31858-31882]"
  }, {
    "left" : "if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma))",
    "right" : "if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma))",
    "info" : "IfStatement[32028-33381]:IfStatement[32028-33381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32198-33381]:Block[32198-33381]"
  }, {
    "left" : "int split  = i0 - 1;",
    "right" : "int split  = i0 - 1;",
    "info" : "VariableDeclarationStatement[32220-32240]:VariableDeclarationStatement[32220-32240]"
  }, {
    "left" : "diagMax    = work[4 * i0];",
    "right" : "diagMax    = work[4 * i0];",
    "info" : "ExpressionStatement[32261-32287]:ExpressionStatement[32261-32287]"
  }, {
    "left" : "offDiagMin = work[4 * i0 + 2];",
    "right" : "offDiagMin = work[4 * i0 + 2];",
    "info" : "ExpressionStatement[32308-32338]:ExpressionStatement[32308-32338]"
  }, {
    "left" : "double previousEMin = work[4 * i0 + 3];",
    "right" : "double previousEMin = work[4 * i0 + 3];",
    "info" : "VariableDeclarationStatement[32359-32398]:VariableDeclarationStatement[32359-32398]"
  }, {
    "left" : "for (int i = 4 * i0; i < 4 * n0 - 16; i += 4)",
    "right" : "for (int i = 4 * i0; i < 4 * n0 - 16; i += 4)",
    "info" : "ForStatement[32419-33223]:ForStatement[32419-33223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32465-33223]:Block[32465-33223]"
  }, {
    "left" : "if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                            (work[i + 2] <= TOLERANCE_2 * sigma))",
    "right" : "if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                            (work[i + 2] <= TOLERANCE_2 * sigma))",
    "info" : "IfStatement[32491-33201]:IfStatement[32491-33201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32603-32935]:Block[32603-32935]"
  }, {
    "left" : "work[i + 2]  = -sigma;",
    "right" : "work[i + 2]  = -sigma;",
    "info" : "ExpressionStatement[32679-32701]:ExpressionStatement[32679-32701]"
  }, {
    "left" : "split        = i / 4;",
    "right" : "split        = i / 4;",
    "info" : "ExpressionStatement[32730-32751]:ExpressionStatement[32730-32751]"
  }, {
    "left" : "diagMax      = 0;",
    "right" : "diagMax      = 0;",
    "info" : "ExpressionStatement[32780-32797]:ExpressionStatement[32780-32797]"
  }, {
    "left" : "offDiagMin   = work[i + 6];",
    "right" : "offDiagMin   = work[i + 6];",
    "info" : "ExpressionStatement[32826-32853]:ExpressionStatement[32826-32853]"
  }, {
    "left" : "previousEMin = work[i + 7];",
    "right" : "previousEMin = work[i + 7];",
    "info" : "ExpressionStatement[32882-32909]:ExpressionStatement[32882-32909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32941-33201]:Block[32941-33201]"
  }, {
    "left" : "diagMax      = Math.max(diagMax, work[i + 4]);",
    "right" : "diagMax      = Math.max(diagMax, work[i + 4]);",
    "info" : "ExpressionStatement[32971-33017]:ExpressionStatement[32971-33017]"
  }, {
    "left" : "offDiagMin   = Math.min(offDiagMin, work[i + 2]);",
    "right" : "offDiagMin   = Math.min(offDiagMin, work[i + 2]);",
    "info" : "ExpressionStatement[33046-33095]:ExpressionStatement[33046-33095]"
  }, {
    "left" : "previousEMin = Math.min(previousEMin, work[i + 3]);",
    "right" : "previousEMin = Math.min(previousEMin, work[i + 3]);",
    "info" : "ExpressionStatement[33124-33175]:ExpressionStatement[33124-33175]"
  }, {
    "left" : "work[4 * n0 - 2] = offDiagMin;",
    "right" : "work[4 * n0 - 2] = offDiagMin;",
    "info" : "ExpressionStatement[33244-33274]:ExpressionStatement[33244-33274]"
  }, {
    "left" : "work[4 * n0 - 1] = previousEMin;",
    "right" : "work[4 * n0 - 1] = previousEMin;",
    "info" : "ExpressionStatement[33295-33327]:ExpressionStatement[33295-33327]"
  }, {
    "left" : "i0 = split + 1;",
    "right" : "i0 = split + 1;",
    "info" : "ExpressionStatement[33348-33363]:ExpressionStatement[33348-33363]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33557-33564]:Modifier[33557-33564]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33565-33569]:PrimitiveType[33565-33569]"
  }, {
    "left" : "initialSplits",
    "right" : "initialSplits",
    "info" : "SimpleName[33570-33583]:SimpleName[33570-33583]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[33584-33595]:SingleVariableDeclaration[33584-33595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33597-35094]:Block[33597-35094]"
  }, {
    "left" : "pingPong = 0;",
    "right" : "pingPong = 0;",
    "info" : "ExpressionStatement[33608-33621]:ExpressionStatement[33608-33621]"
  }, {
    "left" : "for (int k = 0; k < 2; ++k)",
    "right" : "for (int k = 0; k < 2; ++k)",
    "info" : "ForStatement[33630-35087]:ForStatement[33630-35087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33658-35087]:Block[33658-35087]"
  }, {
    "left" : "double d = work[4 * (n - 1) + pingPong];",
    "right" : "double d = work[4 * (n - 1) + pingPong];",
    "info" : "VariableDeclarationStatement[33712-33752]:VariableDeclarationStatement[33712-33752]"
  }, {
    "left" : "for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4)",
    "right" : "for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4)",
    "info" : "ForStatement[33765-34057]:ForStatement[33765-34057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33818-34057]:Block[33818-34057]"
  }, {
    "left" : "if (work[i + 2] <= TOLERANCE_2 * d)",
    "right" : "if (work[i + 2] <= TOLERANCE_2 * d)",
    "info" : "IfStatement[33836-34043]:IfStatement[33836-34043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33872-33964]:Block[33872-33964]"
  }, {
    "left" : "work[i + 2] = -0.0;",
    "right" : "work[i + 2] = -0.0;",
    "info" : "ExpressionStatement[33894-33913]:ExpressionStatement[33894-33913]"
  }, {
    "left" : "d = work[i];",
    "right" : "d = work[i];",
    "info" : "ExpressionStatement[33934-33946]:ExpressionStatement[33934-33946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33970-34043]:Block[33970-34043]"
  }, {
    "left" : "d *= work[i] / (d + work[i + 2]);",
    "right" : "d *= work[i] / (d + work[i + 2]);",
    "info" : "ExpressionStatement[33992-34025]:ExpressionStatement[33992-34025]"
  }, {
    "left" : "d = work[pingPong];",
    "right" : "d = work[pingPong];",
    "info" : "ExpressionStatement[34120-34139]:ExpressionStatement[34120-34139]"
  }, {
    "left" : "for (int i = 2 + pingPong; i < 4 * n - 2; i += 4)",
    "right" : "for (int i = 2 + pingPong; i < 4 * n - 2; i += 4)",
    "info" : "ForStatement[34152-34961]:ForStatement[34152-34961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34202-34961]:Block[34202-34961]"
  }, {
    "left" : "final int j = i - 2 * pingPong - 1;",
    "right" : "final int j = i - 2 * pingPong - 1;",
    "info" : "VariableDeclarationStatement[34220-34255]:VariableDeclarationStatement[34220-34255]"
  }, {
    "left" : "work[j] = d + work[i];",
    "right" : "work[j] = d + work[i];",
    "info" : "ExpressionStatement[34272-34294]:ExpressionStatement[34272-34294]"
  }, {
    "left" : "if (work[i] <= TOLERANCE_2 * d)",
    "right" : "if (work[i] <= TOLERANCE_2 * d)",
    "info" : "IfStatement[34311-34947]:IfStatement[34311-34947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34343-34515]:Block[34343-34515]"
  }, {
    "left" : "work[i]     = -0.0;",
    "right" : "work[i]     = -0.0;",
    "info" : "ExpressionStatement[34365-34384]:ExpressionStatement[34365-34384]"
  }, {
    "left" : "work[j]     = d;",
    "right" : "work[j]     = d;",
    "info" : "ExpressionStatement[34405-34421]:ExpressionStatement[34405-34421]"
  }, {
    "left" : "work[j + 2] = 0.0;",
    "right" : "work[j + 2] = 0.0;",
    "info" : "ExpressionStatement[34442-34460]:ExpressionStatement[34442-34460]"
  }, {
    "left" : "d = work[i + 2];",
    "right" : "d = work[i + 2];",
    "info" : "ExpressionStatement[34481-34497]:ExpressionStatement[34481-34497]"
  }, {
    "left" : "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                           (MathUtils.SAFE_MIN * work[j] < work[i + 2]))",
    "right" : "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                           (MathUtils.SAFE_MIN * work[j] < work[i + 2]))",
    "info" : "IfStatement[34521-34947]:IfStatement[34521-34947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34646-34806]:Block[34646-34806]"
  }, {
    "left" : "final double tmp = work[i + 2] / work[j];",
    "right" : "final double tmp = work[i + 2] / work[j];",
    "info" : "VariableDeclarationStatement[34668-34709]:VariableDeclarationStatement[34668-34709]"
  }, {
    "left" : "work[j + 2] = work[i] * tmp;",
    "right" : "work[j + 2] = work[i] * tmp;",
    "info" : "ExpressionStatement[34730-34758]:ExpressionStatement[34730-34758]"
  }, {
    "left" : "d *= tmp;",
    "right" : "d *= tmp;",
    "info" : "ExpressionStatement[34779-34788]:ExpressionStatement[34779-34788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34812-34947]:Block[34812-34947]"
  }, {
    "left" : "work[j + 2] = work[i + 2] * (work[i] / work[j]);",
    "right" : "work[j + 2] = work[i + 2] * (work[i] / work[j]);",
    "info" : "ExpressionStatement[34834-34882]:ExpressionStatement[34834-34882]"
  }, {
    "left" : "d *= work[i + 2] / work[j];",
    "right" : "d *= work[i + 2] / work[j];",
    "info" : "ExpressionStatement[34903-34930]:ExpressionStatement[34903-34930]"
  }, {
    "left" : "work[4 * n - 3 - pingPong] = d;",
    "right" : "work[4 * n - 3 - pingPong] = d;",
    "info" : "ExpressionStatement[34974-35005]:ExpressionStatement[34974-35005]"
  }, {
    "left" : "pingPong = 1 - pingPong;",
    "right" : "pingPong = 1 - pingPong;",
    "info" : "ExpressionStatement[35052-35076]:ExpressionStatement[35052-35076]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35546-35553]:Modifier[35546-35553]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35554-35557]:PrimitiveType[35554-35557]"
  }, {
    "left" : "goodStep",
    "right" : "goodStep",
    "info" : "SimpleName[35558-35566]:SimpleName[35558-35566]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[35567-35582]:SingleVariableDeclaration[35567-35582]"
  }, {
    "left" : "final int end",
    "right" : "final int end",
    "info" : "SingleVariableDeclaration[35584-35597]:SingleVariableDeclaration[35584-35597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35599-40761]:Block[35599-40761]"
  }, {
    "left" : "g = 0.0;",
    "right" : "g = 0.0;",
    "info" : "ExpressionStatement[35610-35618]:ExpressionStatement[35610-35618]"
  }, {
    "left" : "int deflatedEnd = end;",
    "right" : "int deflatedEnd = end;",
    "info" : "VariableDeclarationStatement[35673-35695]:VariableDeclarationStatement[35673-35695]"
  }, {
    "left" : "for (boolean deflating = true; deflating)",
    "right" : "for (boolean deflating = true; deflating)",
    "info" : "ForStatement[35704-37791]:ForStatement[35704-37791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35747-37791]:Block[35747-37791]"
  }, {
    "left" : "if (start >= deflatedEnd)",
    "right" : "if (start >= deflatedEnd)",
    "info" : "IfStatement[35762-35897]:IfStatement[35762-35897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35788-35897]:Block[35788-35897]"
  }, {
    "left" : "return deflatedEnd;",
    "right" : "return deflatedEnd;",
    "info" : "ReturnStatement[35864-35883]:ReturnStatement[35864-35883]"
  }, {
    "left" : "final int k = 4 * deflatedEnd + pingPong - 1;",
    "right" : "final int k = 4 * deflatedEnd + pingPong - 1;",
    "info" : "VariableDeclarationStatement[35911-35956]:VariableDeclarationStatement[35911-35956]"
  }, {
    "left" : "if ((start == deflatedEnd - 1) ||\n                ((start != deflatedEnd - 2) &&\n                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||\n                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7]))))",
    "right" : "if ((start == deflatedEnd - 1) ||\n                ((start != deflatedEnd - 2) &&\n                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||\n                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7]))))",
    "info" : "IfStatement[35970-37780]:IfStatement[35970-37780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36204-36400]:Block[36204-36400]"
  }, {
    "left" : "work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];",
    "right" : "work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];",
    "info" : "ExpressionStatement[36278-36351]:ExpressionStatement[36278-36351]"
  }, {
    "left" : "deflatedEnd -= 1;",
    "right" : "deflatedEnd -= 1;",
    "info" : "ExpressionStatement[36368-36385]:ExpressionStatement[36368-36385]"
  }, {
    "left" : "if ((start == deflatedEnd - 2) ||\n                (work[k - 9] <= TOLERANCE_2 * sigma) ||\n                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11]))",
    "right" : "if ((start == deflatedEnd - 2) ||\n                (work[k - 9] <= TOLERANCE_2 * sigma) ||\n                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11]))",
    "info" : "IfStatement[36406-37780]:IfStatement[36406-37780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36572-37653]:Block[36572-37653]"
  }, {
    "left" : "if (work[k - 3] > work[k - 7])",
    "right" : "if (work[k - 3] > work[k - 7])",
    "info" : "IfStatement[36651-36839]:IfStatement[36651-36839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36682-36839]:Block[36682-36839]"
  }, {
    "left" : "final double tmp = work[k - 3];",
    "right" : "final double tmp = work[k - 3];",
    "info" : "VariableDeclarationStatement[36704-36735]:VariableDeclarationStatement[36704-36735]"
  }, {
    "left" : "work[k - 3] = work[k - 7];",
    "right" : "work[k - 3] = work[k - 7];",
    "info" : "ExpressionStatement[36756-36782]:ExpressionStatement[36756-36782]"
  }, {
    "left" : "work[k - 7] = tmp;",
    "right" : "work[k - 7] = tmp;",
    "info" : "ExpressionStatement[36803-36821]:ExpressionStatement[36803-36821]"
  }, {
    "left" : "if (work[k - 5] > TOLERANCE_2 * work[k - 3])",
    "right" : "if (work[k - 5] > TOLERANCE_2 * work[k - 3])",
    "info" : "IfStatement[36857-37475]:IfStatement[36857-37475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36902-37475]:Block[36902-37475]"
  }, {
    "left" : "double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);",
    "right" : "double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);",
    "info" : "VariableDeclarationStatement[36924-36985]:VariableDeclarationStatement[36924-36985]"
  }, {
    "left" : "double s = work[k - 3] * (work[k - 5] / t);",
    "right" : "double s = work[k - 3] * (work[k - 5] / t);",
    "info" : "VariableDeclarationStatement[37006-37049]:VariableDeclarationStatement[37006-37049]"
  }, {
    "left" : "if (s <= t)",
    "right" : "if (s <= t)",
    "info" : "IfStatement[37070-37310]:IfStatement[37070-37310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37082-37195]:Block[37082-37195]"
  }, {
    "left" : "s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));",
    "right" : "s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));",
    "info" : "ExpressionStatement[37108-37173]:ExpressionStatement[37108-37173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37201-37310]:Block[37201-37310]"
  }, {
    "left" : "s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));",
    "right" : "s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));",
    "info" : "ExpressionStatement[37227-37288]:ExpressionStatement[37227-37288]"
  }, {
    "left" : "t = work[k - 7] + (s + work[k - 5]);",
    "right" : "t = work[k - 7] + (s + work[k - 5]);",
    "info" : "ExpressionStatement[37331-37367]:ExpressionStatement[37331-37367]"
  }, {
    "left" : "work[k - 3] *= work[k - 7] / t;",
    "right" : "work[k - 3] *= work[k - 7] / t;",
    "info" : "ExpressionStatement[37388-37419]:ExpressionStatement[37388-37419]"
  }, {
    "left" : "work[k - 7]  = t;",
    "right" : "work[k - 7]  = t;",
    "info" : "ExpressionStatement[37440-37457]:ExpressionStatement[37440-37457]"
  }, {
    "left" : "work[4 * deflatedEnd - 8] = sigma + work[k - 7];",
    "right" : "work[4 * deflatedEnd - 8] = sigma + work[k - 7];",
    "info" : "ExpressionStatement[37492-37540]:ExpressionStatement[37492-37540]"
  }, {
    "left" : "work[4 * deflatedEnd - 4] = sigma + work[k - 3];",
    "right" : "work[4 * deflatedEnd - 4] = sigma + work[k - 3];",
    "info" : "ExpressionStatement[37557-37605]:ExpressionStatement[37557-37605]"
  }, {
    "left" : "deflatedEnd -= 2;",
    "right" : "deflatedEnd -= 2;",
    "info" : "ExpressionStatement[37622-37639]:ExpressionStatement[37622-37639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37659-37780]:Block[37659-37780]"
  }, {
    "left" : "deflating = false;",
    "right" : "deflating = false;",
    "info" : "ExpressionStatement[37747-37765]:ExpressionStatement[37747-37765]"
  }, {
    "left" : "final int l = 4 * deflatedEnd + pingPong - 1;",
    "right" : "final int l = 4 * deflatedEnd + pingPong - 1;",
    "info" : "VariableDeclarationStatement[37801-37846]:VariableDeclarationStatement[37801-37846]"
  }, {
    "left" : "if ((dMin <= 0) || (deflatedEnd < end))",
    "right" : "if ((dMin <= 0) || (deflatedEnd < end))",
    "info" : "IfStatement[37896-38512]:IfStatement[37896-38512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37936-38512]:Block[37936-38512]"
  }, {
    "left" : "if (flipIfWarranted(deflatedEnd, 1))",
    "right" : "if (flipIfWarranted(deflatedEnd, 1))",
    "info" : "IfStatement[37950-38502]:IfStatement[37950-38502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37987-38502]:Block[37987-38502]"
  }, {
    "left" : "dMin2 = Math.min(dMin2, work[l - 1]);",
    "right" : "dMin2 = Math.min(dMin2, work[l - 1]);",
    "info" : "ExpressionStatement[38005-38042]:ExpressionStatement[38005-38042]"
  }, {
    "left" : "work[l - 1] =\n                    Math.min(work[l - 1],\n                             Math.min(work[3 + pingPong], work[7 + pingPong]));",
    "right" : "work[l - 1] =\n                    Math.min(work[l - 1],\n                             Math.min(work[3 + pingPong], work[7 + pingPong]));",
    "info" : "ExpressionStatement[38059-38194]:ExpressionStatement[38059-38194]"
  }, {
    "left" : "work[l - 2 * pingPong] =\n                    Math.min(work[l - 2 * pingPong],\n                             Math.min(work[6 + pingPong], work[6 + pingPong]));",
    "right" : "work[l - 2 * pingPong] =\n                    Math.min(work[l - 2 * pingPong],\n                             Math.min(work[6 + pingPong], work[6 + pingPong]));",
    "info" : "ExpressionStatement[38211-38368]:ExpressionStatement[38211-38368]"
  }, {
    "left" : "qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",
    "right" : "qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",
    "info" : "ExpressionStatement[38385-38458]:ExpressionStatement[38385-38458]"
  }, {
    "left" : "dMin  = -0.0;",
    "right" : "dMin  = -0.0;",
    "info" : "ExpressionStatement[38475-38488]:ExpressionStatement[38475-38488]"
  }, {
    "left" : "if ((dMin < 0) ||\n            (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1],\n                                                  Math.min(work[l - 9],\n                                                           dMin2 + work[l - 2 * pingPong]))))",
    "right" : "if ((dMin < 0) ||\n            (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1],\n                                                  Math.min(work[l - 9],\n                                                           dMin2 + work[l - 2 * pingPong]))))",
    "info" : "IfStatement[38522-40645]:IfStatement[38522-40645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38769-40645]:Block[38769-40645]"
  }, {
    "left" : "computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",
    "right" : "computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",
    "info" : "ExpressionStatement[38821-38882]:ExpressionStatement[38821-38882]"
  }, {
    "left" : "for (boolean loop = true; loop)",
    "right" : "for (boolean loop = true; loop)",
    "info" : "ForStatement[38925-40634]:ForStatement[38925-40634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38958-40634]:Block[38958-40634]"
  }, {
    "left" : "dqds(start, deflatedEnd);",
    "right" : "dqds(start, deflatedEnd);",
    "info" : "ExpressionStatement[39040-39065]:ExpressionStatement[39040-39065]"
  }, {
    "left" : "if ((dMin >= 0) && (dMin1 > 0))",
    "right" : "if ((dMin >= 0) && (dMin1 > 0))",
    "info" : "IfStatement[39132-40620]:IfStatement[39132-40620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39164-39303]:Block[39164-39303]"
  }, {
    "left" : "updateSigma(tau);",
    "right" : "updateSigma(tau);",
    "info" : "ExpressionStatement[39228-39245]:ExpressionStatement[39228-39245]"
  }, {
    "left" : "return deflatedEnd;",
    "right" : "return deflatedEnd;",
    "info" : "ReturnStatement[39266-39285]:ReturnStatement[39266-39285]"
  }, {
    "left" : "if ((dMin < 0.0) &&\n                           (dMin1 > 0.0) &&\n                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                           (Math.abs(dN) < TOLERANCE * sigma))",
    "right" : "if ((dMin < 0.0) &&\n                           (dMin1 > 0.0) &&\n                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                           (Math.abs(dN) < TOLERANCE * sigma))",
    "info" : "IfStatement[39309-40620]:IfStatement[39309-40620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39533-39783]:Block[39533-39783]"
  }, {
    "left" : "work[4 * deflatedEnd - 3 - pingPong] = 0.0;",
    "right" : "work[4 * deflatedEnd - 3 - pingPong] = 0.0;",
    "info" : "ExpressionStatement[39612-39655]:ExpressionStatement[39612-39655]"
  }, {
    "left" : "dMin = 0.0;",
    "right" : "dMin = 0.0;",
    "info" : "ExpressionStatement[39676-39687]:ExpressionStatement[39676-39687]"
  }, {
    "left" : "updateSigma(tau);",
    "right" : "updateSigma(tau);",
    "info" : "ExpressionStatement[39708-39725]:ExpressionStatement[39708-39725]"
  }, {
    "left" : "return deflatedEnd;",
    "right" : "return deflatedEnd;",
    "info" : "ReturnStatement[39746-39765]:ReturnStatement[39746-39765]"
  }, {
    "left" : "if (dMin < 0.0)",
    "right" : "if (dMin < 0.0)",
    "info" : "IfStatement[39789-40620]:IfStatement[39789-40620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39805-40424]:Block[39805-40424]"
  }, {
    "left" : "if (tType < -22)",
    "right" : "if (tType < -22)",
    "info" : "IfStatement[39893-40406]:IfStatement[39893-40406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39910-40023]:Block[39910-40023]"
  }, {
    "left" : "tau = 0.0;",
    "right" : "tau = 0.0;",
    "info" : "ExpressionStatement[39991-40001]:ExpressionStatement[39991-40001]"
  }, {
    "left" : "if (dMin1 > 0.0)",
    "right" : "if (dMin1 > 0.0)",
    "info" : "IfStatement[40029-40406]:IfStatement[40029-40406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40046-40248]:Block[40046-40248]"
  }, {
    "left" : "tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);",
    "right" : "tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);",
    "info" : "ExpressionStatement[40136-40189]:ExpressionStatement[40136-40189]"
  }, {
    "left" : "tType -= 11;",
    "right" : "tType -= 11;",
    "info" : "ExpressionStatement[40214-40226]:ExpressionStatement[40214-40226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40254-40406]:Block[40254-40406]"
  }, {
    "left" : "tau *= 0.25;",
    "right" : "tau *= 0.25;",
    "info" : "ExpressionStatement[40335-40347]:ExpressionStatement[40335-40347]"
  }, {
    "left" : "tType -= 12;",
    "right" : "tType -= 12;",
    "info" : "ExpressionStatement[40372-40384]:ExpressionStatement[40372-40384]"
  }, {
    "left" : "if (Double.isNaN(dMin))",
    "right" : "if (Double.isNaN(dMin))",
    "info" : "IfStatement[40430-40620]:IfStatement[40430-40620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40454-40504]:Block[40454-40504]"
  }, {
    "left" : "tau = 0.0;",
    "right" : "tau = 0.0;",
    "info" : "ExpressionStatement[40476-40486]:ExpressionStatement[40476-40486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40510-40620]:Block[40510-40620]"
  }, {
    "left" : "loop = false;",
    "right" : "loop = false;",
    "info" : "ExpressionStatement[40589-40602]:ExpressionStatement[40589-40602]"
  }, {
    "left" : "dqd(start, deflatedEnd);",
    "right" : "dqd(start, deflatedEnd);",
    "info" : "ExpressionStatement[40701-40725]:ExpressionStatement[40701-40725]"
  }, {
    "left" : "return deflatedEnd;",
    "right" : "return deflatedEnd;",
    "info" : "ReturnStatement[40735-40754]:ReturnStatement[40735-40754]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41020-41027]:Modifier[41020-41027]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41028-41035]:PrimitiveType[41028-41035]"
  }, {
    "left" : "flipIfWarranted",
    "right" : "flipIfWarranted",
    "info" : "SimpleName[41036-41051]:SimpleName[41036-41051]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[41052-41063]:SingleVariableDeclaration[41052-41063]"
  }, {
    "left" : "final int step",
    "right" : "final int step",
    "info" : "SingleVariableDeclaration[41065-41079]:SingleVariableDeclaration[41065-41079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41081-41560]:Block[41081-41562]"
  }, {
    "left" : "if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong])",
    "right" : "if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong])",
    "info" : "IfStatement[41091-41532]:IfStatement[41091-41534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41148-41532]:Block[41148-41534]"
  }, {
    "left" : "int j = 4 * n - 1;",
    "right" : "int j = 4 * (n - 1);",
    "info" : "VariableDeclarationStatement[41188-41206]:VariableDeclarationStatement[41188-41208]"
  }, {
    "left" : "-",
    "right" : "*",
    "info" : "INFIX_EXPRESSION_OPERATOR[41202-41203]:INFIX_EXPRESSION_OPERATOR[41198-41199]"
  }, {
    "left" : "1",
    "right" : "4",
    "info" : "NumberLiteral[41204-41205]:NumberLiteral[41196-41197]"
  }, {
    "left" : "for (int i = 0; i < j; i += 4)",
    "right" : "for (int i = 0; i < j; i += 4)",
    "info" : "ForStatement[41219-41497]:ForStatement[41221-41499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41250-41497]:Block[41252-41499]"
  }, {
    "left" : "for (int k = 0; k < 4; k += step)",
    "right" : "for (int k = 0; k < 4; k += step)",
    "info" : "ForStatement[41268-41459]:ForStatement[41270-41461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41302-41459]:Block[41304-41461]"
  }, {
    "left" : "final double tmp = work[i + k];",
    "right" : "final double tmp = work[i + k];",
    "info" : "VariableDeclarationStatement[41324-41355]:VariableDeclarationStatement[41326-41357]"
  }, {
    "left" : "work[i + k] = work[j - k];",
    "right" : "work[i + k] = work[j - k];",
    "info" : "ExpressionStatement[41376-41402]:ExpressionStatement[41378-41404]"
  }, {
    "left" : "work[j - k] = tmp;",
    "right" : "work[j - k] = tmp;",
    "info" : "ExpressionStatement[41423-41441]:ExpressionStatement[41425-41443]"
  }, {
    "left" : "j -= 4;",
    "right" : "j -= 4;",
    "info" : "ExpressionStatement[41476-41483]:ExpressionStatement[41478-41485]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[41510-41522]:ReturnStatement[41512-41524]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[41541-41554]:ReturnStatement[41543-41556]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41810-41817]:Modifier[41812-41819]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[41818-41826]:ArrayType[41820-41828]"
  }, {
    "left" : "eigenvaluesRange",
    "right" : "eigenvaluesRange",
    "info" : "SimpleName[41827-41843]:SimpleName[41829-41845]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[41844-41859]:SingleVariableDeclaration[41846-41861]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[41861-41872]:SingleVariableDeclaration[41863-41874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41874-44236]:Block[41876-44238]"
  }, {
    "left" : "final int lowerStart = 4 * main.length;",
    "right" : "final int lowerStart = 4 * main.length;",
    "info" : "VariableDeclarationStatement[41946-41985]:VariableDeclarationStatement[41948-41987]"
  }, {
    "left" : "final int upperStart = 5 * main.length;",
    "right" : "final int upperStart = 5 * main.length;",
    "info" : "VariableDeclarationStatement[41994-42033]:VariableDeclarationStatement[41996-42035]"
  }, {
    "left" : "double lower = Double.POSITIVE_INFINITY;",
    "right" : "double lower = Double.POSITIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[42042-42082]:VariableDeclarationStatement[42044-42084]"
  }, {
    "left" : "double upper = Double.NEGATIVE_INFINITY;",
    "right" : "double upper = Double.NEGATIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[42091-42131]:VariableDeclarationStatement[42093-42133]"
  }, {
    "left" : "for (int i = 0; i < n; ++i)",
    "right" : "for (int i = 0; i < n; ++i)",
    "info" : "ForStatement[42140-42311]:ForStatement[42142-42313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42168-42311]:Block[42170-42313]"
  }, {
    "left" : "lower = Math.min(lower, work[lowerStart + index +i]);",
    "right" : "lower = Math.min(lower, work[lowerStart + index +i]);",
    "info" : "ExpressionStatement[42182-42235]:ExpressionStatement[42184-42237]"
  }, {
    "left" : "upper = Math.max(upper, work[upperStart + index +i]);",
    "right" : "upper = Math.max(upper, work[upperStart + index +i]);",
    "info" : "ExpressionStatement[42248-42301]:ExpressionStatement[42250-42303]"
  }, {
    "left" : "final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",
    "right" : "final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",
    "info" : "VariableDeclarationStatement[42347-42411]:VariableDeclarationStatement[42349-42413]"
  }, {
    "left" : "final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);",
    "right" : "final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);",
    "info" : "VariableDeclarationStatement[42420-42482]:VariableDeclarationStatement[42422-42484]"
  }, {
    "left" : "final double absoluteTolerance = 4 * minPivot;",
    "right" : "final double absoluteTolerance = 4 * minPivot;",
    "info" : "VariableDeclarationStatement[42491-42537]:VariableDeclarationStatement[42493-42539]"
  }, {
    "left" : "final int maxIter =\n            2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));",
    "right" : "final int maxIter =\n            2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));",
    "info" : "VariableDeclarationStatement[42546-42656]:VariableDeclarationStatement[42548-42658]"
  }, {
    "left" : "final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);",
    "right" : "final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);",
    "info" : "VariableDeclarationStatement[42665-42738]:VariableDeclarationStatement[42667-42740]"
  }, {
    "left" : "double left  = lower - margin;",
    "right" : "double left  = lower - margin;",
    "info" : "VariableDeclarationStatement[42783-42813]:VariableDeclarationStatement[42785-42815]"
  }, {
    "left" : "double right = upper + margin;",
    "right" : "double right = upper + margin;",
    "info" : "VariableDeclarationStatement[42822-42852]:VariableDeclarationStatement[42824-42854]"
  }, {
    "left" : "for (int i = 0; i < maxIter; ++i)",
    "right" : "for (int i = 0; i < maxIter; ++i)",
    "info" : "ForStatement[42861-43384]:ForStatement[42863-43386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42895-43384]:Block[42897-43386]"
  }, {
    "left" : "final double range = right - left;",
    "right" : "final double range = right - left;",
    "info" : "VariableDeclarationStatement[42910-42944]:VariableDeclarationStatement[42912-42946]"
  }, {
    "left" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
    "right" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
    "info" : "IfStatement[42957-43159]:IfStatement[42959-43161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43081-43159]:Block[43083-43161]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43139-43145]:BreakStatement[43141-43147]"
  }, {
    "left" : "final double middle = 0.5 * (left + right);",
    "right" : "final double middle = 0.5 * (left + right);",
    "info" : "VariableDeclarationStatement[43173-43216]:VariableDeclarationStatement[43175-43218]"
  }, {
    "left" : "if (countEigenValues(middle, index, n) >= 1)",
    "right" : "if (countEigenValues(middle, index, n) >= 1)",
    "info" : "IfStatement[43229-43373]:IfStatement[43231-43375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43274-43321]:Block[43276-43323]"
  }, {
    "left" : "right = middle;",
    "right" : "right = middle;",
    "info" : "ExpressionStatement[43292-43307]:ExpressionStatement[43294-43309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43327-43373]:Block[43329-43375]"
  }, {
    "left" : "left = middle;",
    "right" : "left = middle;",
    "info" : "ExpressionStatement[43345-43359]:ExpressionStatement[43347-43361]"
  }, {
    "left" : "lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",
    "right" : "lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",
    "info" : "ExpressionStatement[43393-43466]:ExpressionStatement[43395-43468]"
  }, {
    "left" : "left  = lower - margin;",
    "right" : "left  = lower - margin;",
    "info" : "ExpressionStatement[43511-43534]:ExpressionStatement[43513-43536]"
  }, {
    "left" : "right = upper + margin;",
    "right" : "right = upper + margin;",
    "info" : "ExpressionStatement[43543-43566]:ExpressionStatement[43545-43568]"
  }, {
    "left" : "for (int i = 0; i < maxIter; ++i)",
    "right" : "for (int i = 0; i < maxIter; ++i)",
    "info" : "ForStatement[43575-44098]:ForStatement[43577-44100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43609-44098]:Block[43611-44100]"
  }, {
    "left" : "final double range = right - left;",
    "right" : "final double range = right - left;",
    "info" : "VariableDeclarationStatement[43624-43658]:VariableDeclarationStatement[43626-43660]"
  }, {
    "left" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
    "right" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
    "info" : "IfStatement[43671-43873]:IfStatement[43673-43875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43795-43873]:Block[43797-43875]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43853-43859]:BreakStatement[43855-43861]"
  }, {
    "left" : "final double middle = 0.5 * (left + right);",
    "right" : "final double middle = 0.5 * (left + right);",
    "info" : "VariableDeclarationStatement[43887-43930]:VariableDeclarationStatement[43889-43932]"
  }, {
    "left" : "if (countEigenValues(middle, index, n) >= n)",
    "right" : "if (countEigenValues(middle, index, n) >= n)",
    "info" : "IfStatement[43943-44087]:IfStatement[43945-44089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43988-44035]:Block[43990-44037]"
  }, {
    "left" : "right = middle;",
    "right" : "right = middle;",
    "info" : "ExpressionStatement[44006-44021]:ExpressionStatement[44008-44023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44041-44087]:Block[44043-44089]"
  }, {
    "left" : "left = middle;",
    "right" : "left = middle;",
    "info" : "ExpressionStatement[44059-44073]:ExpressionStatement[44061-44075]"
  }, {
    "left" : "upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",
    "right" : "upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",
    "info" : "ExpressionStatement[44107-44182]:ExpressionStatement[44109-44184]"
  }, {
    "left" : "return new double[] { lower, upper };",
    "right" : "return new double[] { lower, upper };",
    "info" : "ReturnStatement[44192-44229]:ReturnStatement[44194-44231]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44550-44557]:Modifier[44552-44559]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[44558-44561]:PrimitiveType[44560-44563]"
  }, {
    "left" : "countEigenValues",
    "right" : "countEigenValues",
    "info" : "SimpleName[44562-44578]:SimpleName[44564-44580]"
  }, {
    "left" : "final double t",
    "right" : "final double t",
    "info" : "SingleVariableDeclaration[44579-44593]:SingleVariableDeclaration[44581-44595]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[44595-44610]:SingleVariableDeclaration[44597-44612]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[44612-44623]:SingleVariableDeclaration[44614-44625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44625-44935]:Block[44627-44937]"
  }, {
    "left" : "double ratio = main[index] - t;",
    "right" : "double ratio = main[index] - t;",
    "info" : "VariableDeclarationStatement[44635-44666]:VariableDeclarationStatement[44637-44668]"
  }, {
    "left" : "int count = (ratio > 0) ? 0 : 1;",
    "right" : "int count = (ratio > 0) ? 0 : 1;",
    "info" : "VariableDeclarationStatement[44675-44707]:VariableDeclarationStatement[44677-44709]"
  }, {
    "left" : "for (int i = 1; i < n; ++i)",
    "right" : "for (int i = 1; i < n; ++i)",
    "info" : "ForStatement[44716-44907]:ForStatement[44718-44909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44744-44907]:Block[44746-44909]"
  }, {
    "left" : "ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;",
    "right" : "ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;",
    "info" : "ExpressionStatement[44758-44828]:ExpressionStatement[44760-44830]"
  }, {
    "left" : "if (ratio <= 0)",
    "right" : "if (ratio <= 0)",
    "info" : "IfStatement[44841-44897]:IfStatement[44843-44899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44857-44897]:Block[44859-44899]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[44875-44883]:ExpressionStatement[44877-44885]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[44916-44929]:ReturnStatement[44918-44931]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45520-45527]:Modifier[45522-45529]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45528-45532]:PrimitiveType[45530-45534]"
  }, {
    "left" : "ldlTDecomposition",
    "right" : "ldlTDecomposition",
    "info" : "SimpleName[45533-45550]:SimpleName[45535-45552]"
  }, {
    "left" : "final double lambda",
    "right" : "final double lambda",
    "info" : "SingleVariableDeclaration[45551-45570]:SingleVariableDeclaration[45553-45572]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[45572-45587]:SingleVariableDeclaration[45574-45589]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[45589-45600]:SingleVariableDeclaration[45591-45602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45602-46034]:Block[45604-46036]"
  }, {
    "left" : "double di = main[index] - lambda;",
    "right" : "double di = main[index] - lambda;",
    "info" : "VariableDeclarationStatement[45612-45645]:VariableDeclarationStatement[45614-45647]"
  }, {
    "left" : "work[0] = Math.abs(di);",
    "right" : "work[0] = Math.abs(di);",
    "info" : "ExpressionStatement[45654-45677]:ExpressionStatement[45656-45679]"
  }, {
    "left" : "for (int i = 1; i < n; ++i)",
    "right" : "for (int i = 1; i < n; ++i)",
    "info" : "ForStatement[45686-46028]:ForStatement[45688-46030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45714-46028]:Block[45716-46030]"
  }, {
    "left" : "final int    fourI = 4 * i;",
    "right" : "final int    fourI = 4 * i;",
    "info" : "VariableDeclarationStatement[45728-45755]:VariableDeclarationStatement[45730-45757]"
  }, {
    "left" : "final double eiM1  = secondary[index + i - 1];",
    "right" : "final double eiM1  = secondary[index + i - 1];",
    "info" : "VariableDeclarationStatement[45768-45814]:VariableDeclarationStatement[45770-45816]"
  }, {
    "left" : "final double ratio = eiM1 / di;",
    "right" : "final double ratio = eiM1 / di;",
    "info" : "VariableDeclarationStatement[45827-45858]:VariableDeclarationStatement[45829-45860]"
  }, {
    "left" : "work[fourI - 2] = ratio * ratio * Math.abs(di);",
    "right" : "work[fourI - 2] = ratio * ratio * Math.abs(di);",
    "info" : "ExpressionStatement[45871-45918]:ExpressionStatement[45873-45920]"
  }, {
    "left" : "di = (main[index + i] - lambda) - eiM1 * ratio;",
    "right" : "di = (main[index + i] - lambda) - eiM1 * ratio;",
    "info" : "ExpressionStatement[45931-45978]:ExpressionStatement[45933-45980]"
  }, {
    "left" : "work[fourI] = Math.abs(di);",
    "right" : "work[fourI] = Math.abs(di);",
    "info" : "ExpressionStatement[45991-46018]:ExpressionStatement[45993-46020]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46256-46263]:Modifier[46258-46265]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46264-46268]:PrimitiveType[46266-46270]"
  }, {
    "left" : "dqds",
    "right" : "dqds",
    "info" : "SimpleName[46269-46273]:SimpleName[46271-46275]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[46274-46289]:SingleVariableDeclaration[46276-46291]"
  }, {
    "left" : "final int end",
    "right" : "final int end",
    "info" : "SingleVariableDeclaration[46291-46304]:SingleVariableDeclaration[46293-46306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46306-47999]:Block[46308-48001]"
  }, {
    "left" : "eMin = work[4 * start + pingPong + 4];",
    "right" : "eMin = work[4 * start + pingPong + 4];",
    "info" : "ExpressionStatement[46317-46355]:ExpressionStatement[46319-46357]"
  }, {
    "left" : "double d = work[4 * start + pingPong] - tau;",
    "right" : "double d = work[4 * start + pingPong] - tau;",
    "info" : "VariableDeclarationStatement[46364-46408]:VariableDeclarationStatement[46366-46410]"
  }, {
    "left" : "dMin = d;",
    "right" : "dMin = d;",
    "info" : "ExpressionStatement[46417-46426]:ExpressionStatement[46419-46428]"
  }, {
    "left" : "dMin1 = -work[4 * start + pingPong];",
    "right" : "dMin1 = -work[4 * start + pingPong];",
    "info" : "ExpressionStatement[46435-46471]:ExpressionStatement[46437-46473]"
  }, {
    "left" : "if (pingPong == 0)",
    "right" : "if (pingPong == 0)",
    "info" : "IfStatement[46481-47274]:IfStatement[46483-47276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46500-46884]:Block[46502-46886]"
  }, {
    "left" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
    "right" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
    "info" : "ForStatement[46514-46874]:ForStatement[46516-46876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46573-46874]:Block[46575-46876]"
  }, {
    "left" : "work[j4 - 2] = d + work[j4 - 1];",
    "right" : "work[j4 - 2] = d + work[j4 - 1];",
    "info" : "ExpressionStatement[46591-46623]:ExpressionStatement[46593-46625]"
  }, {
    "left" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
    "right" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
    "info" : "VariableDeclarationStatement[46640-46687]:VariableDeclarationStatement[46642-46689]"
  }, {
    "left" : "d = d * tmp - tau;",
    "right" : "d = d * tmp - tau;",
    "info" : "ExpressionStatement[46704-46722]:ExpressionStatement[46706-46724]"
  }, {
    "left" : "dMin = Math.min(dMin, d);",
    "right" : "dMin = Math.min(dMin, d);",
    "info" : "ExpressionStatement[46739-46764]:ExpressionStatement[46741-46766]"
  }, {
    "left" : "work[j4] = work[j4 - 1] * tmp;",
    "right" : "work[j4] = work[j4 - 1] * tmp;",
    "info" : "ExpressionStatement[46781-46811]:ExpressionStatement[46783-46813]"
  }, {
    "left" : "eMin = Math.min(work[j4], eMin);",
    "right" : "eMin = Math.min(work[j4], eMin);",
    "info" : "ExpressionStatement[46828-46860]:ExpressionStatement[46830-46862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46890-47274]:Block[46892-47276]"
  }, {
    "left" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
    "right" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
    "info" : "ForStatement[46904-47264]:ForStatement[46906-47266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46963-47264]:Block[46965-47266]"
  }, {
    "left" : "work[j4 - 3] = d + work[j4];",
    "right" : "work[j4 - 3] = d + work[j4];",
    "info" : "ExpressionStatement[46981-47009]:ExpressionStatement[46983-47011]"
  }, {
    "left" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
    "right" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
    "info" : "VariableDeclarationStatement[47026-47073]:VariableDeclarationStatement[47028-47075]"
  }, {
    "left" : "d = d * tmp - tau;",
    "right" : "d = d * tmp - tau;",
    "info" : "ExpressionStatement[47090-47108]:ExpressionStatement[47092-47110]"
  }, {
    "left" : "dMin = Math.min(dMin, d);",
    "right" : "dMin = Math.min(dMin, d);",
    "info" : "ExpressionStatement[47125-47150]:ExpressionStatement[47127-47152]"
  }, {
    "left" : "work[j4 - 1] = work[j4] * tmp;",
    "right" : "work[j4 - 1] = work[j4] * tmp;",
    "info" : "ExpressionStatement[47167-47197]:ExpressionStatement[47169-47199]"
  }, {
    "left" : "eMin = Math.min(work[j4 - 1], eMin);",
    "right" : "eMin = Math.min(work[j4 - 1], eMin);",
    "info" : "ExpressionStatement[47214-47250]:ExpressionStatement[47216-47252]"
  }, {
    "left" : "dN2 = d;",
    "right" : "dN2 = d;",
    "info" : "ExpressionStatement[47318-47326]:ExpressionStatement[47320-47328]"
  }, {
    "left" : "dMin2 = dMin;",
    "right" : "dMin2 = dMin;",
    "info" : "ExpressionStatement[47335-47348]:ExpressionStatement[47337-47350]"
  }, {
    "left" : "int j4 = 4 * (end - 2) - pingPong - 1;",
    "right" : "int j4 = 4 * (end - 2) - pingPong - 1;",
    "info" : "VariableDeclarationStatement[47357-47395]:VariableDeclarationStatement[47359-47397]"
  }, {
    "left" : "int j4p2 = j4 + 2 * pingPong - 1;",
    "right" : "int j4p2 = j4 + 2 * pingPong - 1;",
    "info" : "VariableDeclarationStatement[47404-47437]:VariableDeclarationStatement[47406-47439]"
  }, {
    "left" : "work[j4 - 2] = dN2 + work[j4p2];",
    "right" : "work[j4 - 2] = dN2 + work[j4p2];",
    "info" : "ExpressionStatement[47446-47478]:ExpressionStatement[47448-47480]"
  }, {
    "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "info" : "ExpressionStatement[47487-47543]:ExpressionStatement[47489-47545]"
  }, {
    "left" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;",
    "right" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;",
    "info" : "ExpressionStatement[47552-47602]:ExpressionStatement[47554-47604]"
  }, {
    "left" : "dMin = Math.min(dMin, dN1);",
    "right" : "dMin = Math.min(dMin, dN1);",
    "info" : "ExpressionStatement[47611-47638]:ExpressionStatement[47613-47640]"
  }, {
    "left" : "dMin1 = dMin;",
    "right" : "dMin1 = dMin;",
    "info" : "ExpressionStatement[47648-47661]:ExpressionStatement[47650-47663]"
  }, {
    "left" : "j4 = j4 + 4;",
    "right" : "j4 = j4 + 4;",
    "info" : "ExpressionStatement[47670-47682]:ExpressionStatement[47672-47684]"
  }, {
    "left" : "j4p2 = j4 + 2 * pingPong - 1;",
    "right" : "j4p2 = j4 + 2 * pingPong - 1;",
    "info" : "ExpressionStatement[47691-47720]:ExpressionStatement[47693-47722]"
  }, {
    "left" : "work[j4 - 2] = dN1 + work[j4p2];",
    "right" : "work[j4 - 2] = dN1 + work[j4p2];",
    "info" : "ExpressionStatement[47729-47761]:ExpressionStatement[47731-47763]"
  }, {
    "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "info" : "ExpressionStatement[47770-47826]:ExpressionStatement[47772-47828]"
  }, {
    "left" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;",
    "right" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;",
    "info" : "ExpressionStatement[47835-47884]:ExpressionStatement[47837-47886]"
  }, {
    "left" : "dMin = Math.min(dMin, dN);",
    "right" : "dMin = Math.min(dMin, dN);",
    "info" : "ExpressionStatement[47893-47919]:ExpressionStatement[47895-47921]"
  }, {
    "left" : "work[j4 + 2] = dN;",
    "right" : "work[j4 + 2] = dN;",
    "info" : "ExpressionStatement[47929-47947]:ExpressionStatement[47931-47949]"
  }, {
    "left" : "work[4 * end - pingPong - 1] = eMin;",
    "right" : "work[4 * end - pingPong - 1] = eMin;",
    "info" : "ExpressionStatement[47956-47992]:ExpressionStatement[47958-47994]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48190-48197]:Modifier[48192-48199]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48198-48202]:PrimitiveType[48200-48204]"
  }, {
    "left" : "dqd",
    "right" : "dqd",
    "info" : "SimpleName[48203-48206]:SimpleName[48205-48208]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[48207-48222]:SingleVariableDeclaration[48209-48224]"
  }, {
    "left" : "final int end",
    "right" : "final int end",
    "info" : "SingleVariableDeclaration[48224-48237]:SingleVariableDeclaration[48226-48239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48239-51832]:Block[48241-51834]"
  }, {
    "left" : "eMin = work[4 * start + pingPong + 4];",
    "right" : "eMin = work[4 * start + pingPong + 4];",
    "info" : "ExpressionStatement[48250-48288]:ExpressionStatement[48252-48290]"
  }, {
    "left" : "double d = work[4 * start + pingPong];",
    "right" : "double d = work[4 * start + pingPong];",
    "info" : "VariableDeclarationStatement[48297-48335]:VariableDeclarationStatement[48299-48337]"
  }, {
    "left" : "dMin = d;",
    "right" : "dMin = d;",
    "info" : "ExpressionStatement[48344-48353]:ExpressionStatement[48346-48355]"
  }, {
    "left" : "if (pingPong == 0)",
    "right" : "if (pingPong == 0)",
    "info" : "IfStatement[48363-50194]:IfStatement[48365-50196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48382-49283]:Block[48384-49285]"
  }, {
    "left" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
    "right" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
    "info" : "ForStatement[48396-49273]:ForStatement[48398-49275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48454-49273]:Block[48456-49275]"
  }, {
    "left" : "work[j4 - 2] = d + work[j4 - 1];",
    "right" : "work[j4 - 2] = d + work[j4 - 1];",
    "info" : "ExpressionStatement[48472-48504]:ExpressionStatement[48474-48506]"
  }, {
    "left" : "if (work[j4 - 2] == 0.0)",
    "right" : "if (work[j4 - 2] == 0.0)",
    "info" : "IfStatement[48521-49168]:IfStatement[48523-49170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48546-48701]:Block[48548-48703]"
  }, {
    "left" : "work[j4] = 0.0;",
    "right" : "work[j4] = 0.0;",
    "info" : "ExpressionStatement[48568-48583]:ExpressionStatement[48570-48585]"
  }, {
    "left" : "d = work[j4 + 1];",
    "right" : "d = work[j4 + 1];",
    "info" : "ExpressionStatement[48604-48621]:ExpressionStatement[48606-48623]"
  }, {
    "left" : "dMin = d;",
    "right" : "dMin = d;",
    "info" : "ExpressionStatement[48642-48651]:ExpressionStatement[48644-48653]"
  }, {
    "left" : "eMin = 0.0;",
    "right" : "eMin = 0.0;",
    "info" : "ExpressionStatement[48672-48683]:ExpressionStatement[48674-48685]"
  }, {
    "left" : "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1]))",
    "right" : "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1]))",
    "info" : "IfStatement[48707-49168]:IfStatement[48709-49170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48844-49012]:Block[48846-49014]"
  }, {
    "left" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
    "right" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
    "info" : "VariableDeclarationStatement[48866-48913]:VariableDeclarationStatement[48868-48915]"
  }, {
    "left" : "work[j4] = work[j4 - 1] * tmp;",
    "right" : "work[j4] = work[j4 - 1] * tmp;",
    "info" : "ExpressionStatement[48934-48964]:ExpressionStatement[48936-48966]"
  }, {
    "left" : "d *= tmp;",
    "right" : "d *= tmp;",
    "info" : "ExpressionStatement[48985-48994]:ExpressionStatement[48987-48996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49018-49168]:Block[49020-49170]"
  }, {
    "left" : "work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);",
    "right" : "work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);",
    "info" : "ExpressionStatement[49040-49096]:ExpressionStatement[49042-49098]"
  }, {
    "left" : "d *= work[j4 + 1] / work[j4 - 2];",
    "right" : "d *= work[j4 + 1] / work[j4 - 2];",
    "info" : "ExpressionStatement[49117-49150]:ExpressionStatement[49119-49152]"
  }, {
    "left" : "dMin = Math.min(dMin, d);",
    "right" : "dMin = Math.min(dMin, d);",
    "info" : "ExpressionStatement[49185-49210]:ExpressionStatement[49187-49212]"
  }, {
    "left" : "eMin = Math.min(eMin, work[j4]);",
    "right" : "eMin = Math.min(eMin, work[j4]);",
    "info" : "ExpressionStatement[49227-49259]:ExpressionStatement[49229-49261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49289-50194]:Block[49291-50196]"
  }, {
    "left" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
    "right" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
    "info" : "ForStatement[49303-50184]:ForStatement[49305-50186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49361-50184]:Block[49363-50186]"
  }, {
    "left" : "work[j4 - 3] = d + work[j4];",
    "right" : "work[j4 - 3] = d + work[j4];",
    "info" : "ExpressionStatement[49379-49407]:ExpressionStatement[49381-49409]"
  }, {
    "left" : "if (work[j4 - 3] == 0.0)",
    "right" : "if (work[j4 - 3] == 0.0)",
    "info" : "IfStatement[49424-50075]:IfStatement[49426-50077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49449-49608]:Block[49451-49610]"
  }, {
    "left" : "work[j4 - 1] = 0.0;",
    "right" : "work[j4 - 1] = 0.0;",
    "info" : "ExpressionStatement[49471-49490]:ExpressionStatement[49473-49492]"
  }, {
    "left" : "d = work[j4 + 2];",
    "right" : "d = work[j4 + 2];",
    "info" : "ExpressionStatement[49511-49528]:ExpressionStatement[49513-49530]"
  }, {
    "left" : "dMin = d;",
    "right" : "dMin = d;",
    "info" : "ExpressionStatement[49549-49558]:ExpressionStatement[49551-49560]"
  }, {
    "left" : "eMin = 0.0;",
    "right" : "eMin = 0.0;",
    "info" : "ExpressionStatement[49579-49590]:ExpressionStatement[49581-49592]"
  }, {
    "left" : "if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2]))",
    "right" : "if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2]))",
    "info" : "IfStatement[49614-50075]:IfStatement[49616-50077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49751-49919]:Block[49753-49921]"
  }, {
    "left" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
    "right" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
    "info" : "VariableDeclarationStatement[49773-49820]:VariableDeclarationStatement[49775-49822]"
  }, {
    "left" : "work[j4 - 1] = work[j4] * tmp;",
    "right" : "work[j4 - 1] = work[j4] * tmp;",
    "info" : "ExpressionStatement[49841-49871]:ExpressionStatement[49843-49873]"
  }, {
    "left" : "d *= tmp;",
    "right" : "d *= tmp;",
    "info" : "ExpressionStatement[49892-49901]:ExpressionStatement[49894-49903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49925-50075]:Block[49927-50077]"
  }, {
    "left" : "work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);",
    "right" : "work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);",
    "info" : "ExpressionStatement[49947-50003]:ExpressionStatement[49949-50005]"
  }, {
    "left" : "d *= work[j4 + 2] / work[j4 - 3];",
    "right" : "d *= work[j4 + 2] / work[j4 - 3];",
    "info" : "ExpressionStatement[50024-50057]:ExpressionStatement[50026-50059]"
  }, {
    "left" : "dMin = Math.min(dMin, d);",
    "right" : "dMin = Math.min(dMin, d);",
    "info" : "ExpressionStatement[50092-50117]:ExpressionStatement[50094-50119]"
  }, {
    "left" : "eMin = Math.min(eMin, work[j4 - 1]);",
    "right" : "eMin = Math.min(eMin, work[j4 - 1]);",
    "info" : "ExpressionStatement[50134-50170]:ExpressionStatement[50136-50172]"
  }, {
    "left" : "dN2   = d;",
    "right" : "dN2   = d;",
    "info" : "ExpressionStatement[50237-50247]:ExpressionStatement[50239-50249]"
  }, {
    "left" : "dMin2 = dMin;",
    "right" : "dMin2 = dMin;",
    "info" : "ExpressionStatement[50256-50269]:ExpressionStatement[50258-50271]"
  }, {
    "left" : "int j4 = 4 * (end - 2) - pingPong - 1;",
    "right" : "int j4 = 4 * (end - 2) - pingPong - 1;",
    "info" : "VariableDeclarationStatement[50278-50316]:VariableDeclarationStatement[50280-50318]"
  }, {
    "left" : "int j4p2 = j4 + 2 * pingPong - 1;",
    "right" : "int j4p2 = j4 + 2 * pingPong - 1;",
    "info" : "VariableDeclarationStatement[50325-50358]:VariableDeclarationStatement[50327-50360]"
  }, {
    "left" : "work[j4 - 2] = dN2 + work[j4p2];",
    "right" : "work[j4 - 2] = dN2 + work[j4p2];",
    "info" : "ExpressionStatement[50367-50399]:ExpressionStatement[50369-50401]"
  }, {
    "left" : "if (work[j4 - 2] == 0.0)",
    "right" : "if (work[j4 - 2] == 0.0)",
    "info" : "IfStatement[50408-50980]:IfStatement[50410-50982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50433-50555]:Block[50435-50557]"
  }, {
    "left" : "work[j4] = 0.0;",
    "right" : "work[j4] = 0.0;",
    "info" : "ExpressionStatement[50447-50462]:ExpressionStatement[50449-50464]"
  }, {
    "left" : "dN1  = work[j4p2 + 2];",
    "right" : "dN1  = work[j4p2 + 2];",
    "info" : "ExpressionStatement[50475-50497]:ExpressionStatement[50477-50499]"
  }, {
    "left" : "dMin = dN1;",
    "right" : "dMin = dN1;",
    "info" : "ExpressionStatement[50510-50521]:ExpressionStatement[50512-50523]"
  }, {
    "left" : "eMin = 0.0;",
    "right" : "eMin = 0.0;",
    "info" : "ExpressionStatement[50534-50545]:ExpressionStatement[50536-50547]"
  }, {
    "left" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
    "right" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
    "info" : "IfStatement[50561-50980]:IfStatement[50563-50982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50694-50837]:Block[50696-50839]"
  }, {
    "left" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
    "right" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
    "info" : "VariableDeclarationStatement[50708-50757]:VariableDeclarationStatement[50710-50759]"
  }, {
    "left" : "work[j4] = work[j4p2] * tmp;",
    "right" : "work[j4] = work[j4p2] * tmp;",
    "info" : "ExpressionStatement[50770-50798]:ExpressionStatement[50772-50800]"
  }, {
    "left" : "dN1 = dN2 * tmp;",
    "right" : "dN1 = dN2 * tmp;",
    "info" : "ExpressionStatement[50811-50827]:ExpressionStatement[50813-50829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50843-50980]:Block[50845-50982]"
  }, {
    "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "info" : "ExpressionStatement[50857-50913]:ExpressionStatement[50859-50915]"
  }, {
    "left" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);",
    "right" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);",
    "info" : "ExpressionStatement[50926-50970]:ExpressionStatement[50928-50972]"
  }, {
    "left" : "dMin = Math.min(dMin, dN1);",
    "right" : "dMin = Math.min(dMin, dN1);",
    "info" : "ExpressionStatement[50989-51016]:ExpressionStatement[50991-51018]"
  }, {
    "left" : "dMin1 = dMin;",
    "right" : "dMin1 = dMin;",
    "info" : "ExpressionStatement[51026-51039]:ExpressionStatement[51028-51041]"
  }, {
    "left" : "j4 = j4 + 4;",
    "right" : "j4 = j4 + 4;",
    "info" : "ExpressionStatement[51048-51060]:ExpressionStatement[51050-51062]"
  }, {
    "left" : "j4p2 = j4 + 2 * pingPong - 1;",
    "right" : "j4p2 = j4 + 2 * pingPong - 1;",
    "info" : "ExpressionStatement[51069-51098]:ExpressionStatement[51071-51100]"
  }, {
    "left" : "work[j4 - 2] = dN1 + work[j4p2];",
    "right" : "work[j4 - 2] = dN1 + work[j4p2];",
    "info" : "ExpressionStatement[51107-51139]:ExpressionStatement[51109-51141]"
  }, {
    "left" : "if (work[j4 - 2] == 0.0)",
    "right" : "if (work[j4 - 2] == 0.0)",
    "info" : "IfStatement[51148-51717]:IfStatement[51150-51719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51173-51294]:Block[51175-51296]"
  }, {
    "left" : "work[j4] = 0.0;",
    "right" : "work[j4] = 0.0;",
    "info" : "ExpressionStatement[51187-51202]:ExpressionStatement[51189-51204]"
  }, {
    "left" : "dN   = work[j4p2 + 2];",
    "right" : "dN   = work[j4p2 + 2];",
    "info" : "ExpressionStatement[51215-51237]:ExpressionStatement[51217-51239]"
  }, {
    "left" : "dMin = dN;",
    "right" : "dMin = dN;",
    "info" : "ExpressionStatement[51250-51260]:ExpressionStatement[51252-51262]"
  }, {
    "left" : "eMin = 0.0;",
    "right" : "eMin = 0.0;",
    "info" : "ExpressionStatement[51273-51284]:ExpressionStatement[51275-51286]"
  }, {
    "left" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
    "right" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
    "info" : "IfStatement[51300-51717]:IfStatement[51302-51719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51433-51575]:Block[51435-51577]"
  }, {
    "left" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
    "right" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
    "info" : "VariableDeclarationStatement[51447-51496]:VariableDeclarationStatement[51449-51498]"
  }, {
    "left" : "work[j4] = work[j4p2] * tmp;",
    "right" : "work[j4] = work[j4p2] * tmp;",
    "info" : "ExpressionStatement[51509-51537]:ExpressionStatement[51511-51539]"
  }, {
    "left" : "dN = dN1 * tmp;",
    "right" : "dN = dN1 * tmp;",
    "info" : "ExpressionStatement[51550-51565]:ExpressionStatement[51552-51567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51581-51717]:Block[51583-51719]"
  }, {
    "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
    "info" : "ExpressionStatement[51595-51651]:ExpressionStatement[51597-51653]"
  }, {
    "left" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);",
    "right" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);",
    "info" : "ExpressionStatement[51664-51707]:ExpressionStatement[51666-51709]"
  }, {
    "left" : "dMin = Math.min(dMin, dN);",
    "right" : "dMin = Math.min(dMin, dN);",
    "info" : "ExpressionStatement[51726-51752]:ExpressionStatement[51728-51754]"
  }, {
    "left" : "work[j4 + 2] = dN;",
    "right" : "work[j4 + 2] = dN;",
    "info" : "ExpressionStatement[51762-51780]:ExpressionStatement[51764-51782]"
  }, {
    "left" : "work[4 * end - pingPong - 1] = eMin;",
    "right" : "work[4 * end - pingPong - 1] = eMin;",
    "info" : "ExpressionStatement[51789-51825]:ExpressionStatement[51791-51827]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52136-52143]:Modifier[52138-52145]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52144-52148]:PrimitiveType[52146-52150]"
  }, {
    "left" : "computeShiftIncrement",
    "right" : "computeShiftIncrement",
    "info" : "SimpleName[52149-52170]:SimpleName[52151-52172]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[52171-52186]:SingleVariableDeclaration[52173-52188]"
  }, {
    "left" : "final int end",
    "right" : "final int end",
    "info" : "SingleVariableDeclaration[52188-52201]:SingleVariableDeclaration[52190-52203]"
  }, {
    "left" : "final int deflated",
    "right" : "final int deflated",
    "info" : "SingleVariableDeclaration[52203-52221]:SingleVariableDeclaration[52205-52223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52223-61186]:Block[52225-61188]"
  }, {
    "left" : "final double cnst1 = 0.563;",
    "right" : "final double cnst1 = 0.563;",
    "info" : "VariableDeclarationStatement[52234-52261]:VariableDeclarationStatement[52236-52263]"
  }, {
    "left" : "final double cnst2 = 1.010;",
    "right" : "final double cnst2 = 1.010;",
    "info" : "VariableDeclarationStatement[52270-52297]:VariableDeclarationStatement[52272-52299]"
  }, {
    "left" : "final double cnst3 = 1.05;",
    "right" : "final double cnst3 = 1.05;",
    "info" : "VariableDeclarationStatement[52306-52332]:VariableDeclarationStatement[52308-52334]"
  }, {
    "left" : "if (dMin <= 0.0)",
    "right" : "if (dMin <= 0.0)",
    "info" : "IfStatement[52458-52555]:IfStatement[52460-52557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52475-52555]:Block[52477-52557]"
  }, {
    "left" : "tau = -dMin;",
    "right" : "tau = -dMin;",
    "info" : "ExpressionStatement[52489-52501]:ExpressionStatement[52491-52503]"
  }, {
    "left" : "tType = -1;",
    "right" : "tType = -1;",
    "info" : "ExpressionStatement[52514-52525]:ExpressionStatement[52516-52527]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[52538-52545]:ReturnStatement[52540-52547]"
  }, {
    "left" : "int nn = 4 * end + pingPong - 1;",
    "right" : "int nn = 4 * end + pingPong - 1;",
    "info" : "VariableDeclarationStatement[52565-52597]:VariableDeclarationStatement[52567-52599]"
  }, {
    "left" : "switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 3) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }",
    "right" : "switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 3) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }",
    "info" : "SwitchStatement[52606-61179]:SwitchStatement[52608-61181]"
  }, {
    "left" : "case 0 :",
    "right" : "case 0 :",
    "info" : "SwitchCase[52635-52643]:SwitchCase[52637-52645]"
  }, {
    "left" : "if (dMin == dN || dMin == dN1)",
    "right" : "if (dMin == dN || dMin == dN1)",
    "info" : "IfStatement[52688-57834]:IfStatement[52690-57836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52719-55872]:Block[52721-55874]"
  }, {
    "left" : "double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);",
    "right" : "double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);",
    "info" : "VariableDeclarationStatement[52738-52800]:VariableDeclarationStatement[52740-52802]"
  }, {
    "left" : "double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);",
    "right" : "double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);",
    "info" : "VariableDeclarationStatement[52817-52879]:VariableDeclarationStatement[52819-52881]"
  }, {
    "left" : "double a2 = work[nn - 7] + work[nn - 5];",
    "right" : "double a2 = work[nn - 7] + work[nn - 5];",
    "info" : "VariableDeclarationStatement[52896-52936]:VariableDeclarationStatement[52898-52938]"
  }, {
    "left" : "if (dMin == dN && dMin1 == dN1)",
    "right" : "if (dMin == dN && dMin1 == dN1)",
    "info" : "IfStatement[52954-55858]:IfStatement[52956-55860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52986-53809]:Block[52988-53811]"
  }, {
    "left" : "final double gap2 = dMin2 - a2 - dMin2 * 0.25;",
    "right" : "final double gap2 = dMin2 - a2 - dMin2 * 0.25;",
    "info" : "VariableDeclarationStatement[53046-53092]:VariableDeclarationStatement[53048-53094]"
  }, {
    "left" : "final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));",
    "right" : "final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));",
    "info" : "VariableDeclarationStatement[53113-53202]:VariableDeclarationStatement[53115-53204]"
  }, {
    "left" : "if (gap1 > 0.0 && gap1 > b1)",
    "right" : "if (gap1 > 0.0 && gap1 > b1)",
    "info" : "IfStatement[53223-53791]:IfStatement[53225-53793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53252-53388]:Block[53254-53390]"
  }, {
    "left" : "tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",
    "right" : "tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",
    "info" : "ExpressionStatement[53278-53330]:ExpressionStatement[53280-53332]"
  }, {
    "left" : "tType = -2;",
    "right" : "tType = -2;",
    "info" : "ExpressionStatement[53355-53366]:ExpressionStatement[53357-53368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53394-53791]:Block[53396-53793]"
  }, {
    "left" : "double s = 0.0;",
    "right" : "double s = 0.0;",
    "info" : "VariableDeclarationStatement[53420-53435]:VariableDeclarationStatement[53422-53437]"
  }, {
    "left" : "if (dN > b1)",
    "right" : "if (dN > b1)",
    "info" : "IfStatement[53460-53541]:IfStatement[53462-53543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53473-53541]:Block[53475-53543]"
  }, {
    "left" : "s = dN - b1;",
    "right" : "s = dN - b1;",
    "info" : "ExpressionStatement[53503-53515]:ExpressionStatement[53505-53517]"
  }, {
    "left" : "if (a2 > (b1 + b2))",
    "right" : "if (a2 > (b1 + b2))",
    "info" : "IfStatement[53566-53674]:IfStatement[53568-53676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53586-53674]:Block[53588-53676]"
  }, {
    "left" : "s = Math.min(s, a2 - (b1 + b2));",
    "right" : "s = Math.min(s, a2 - (b1 + b2));",
    "info" : "ExpressionStatement[53616-53648]:ExpressionStatement[53618-53650]"
  }, {
    "left" : "tau   = Math.max(s, 0.333 * dMin);",
    "right" : "tau   = Math.max(s, 0.333 * dMin);",
    "info" : "ExpressionStatement[53699-53733]:ExpressionStatement[53701-53735]"
  }, {
    "left" : "tType = -3;",
    "right" : "tType = -3;",
    "info" : "ExpressionStatement[53758-53769]:ExpressionStatement[53760-53771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53815-55858]:Block[53817-55860]"
  }, {
    "left" : "tType = -4;",
    "right" : "tType = -4;",
    "info" : "ExpressionStatement[53868-53879]:ExpressionStatement[53870-53881]"
  }, {
    "left" : "double s = 0.25 * dMin;",
    "right" : "double s = 0.25 * dMin;",
    "info" : "VariableDeclarationStatement[53900-53923]:VariableDeclarationStatement[53902-53925]"
  }, {
    "left" : "double gam;",
    "right" : "double gam;",
    "info" : "VariableDeclarationStatement[53944-53955]:VariableDeclarationStatement[53946-53957]"
  }, {
    "left" : "int np;",
    "right" : "int np;",
    "info" : "VariableDeclarationStatement[53976-53983]:VariableDeclarationStatement[53978-53985]"
  }, {
    "left" : "if (dMin == dN)",
    "right" : "if (dMin == dN)",
    "info" : "IfStatement[54004-54886]:IfStatement[54006-54888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54020-54329]:Block[54022-54331]"
  }, {
    "left" : "gam = dN;",
    "right" : "gam = dN;",
    "info" : "ExpressionStatement[54046-54055]:ExpressionStatement[54048-54057]"
  }, {
    "left" : "a2 = 0.0;",
    "right" : "a2 = 0.0;",
    "info" : "ExpressionStatement[54080-54089]:ExpressionStatement[54082-54091]"
  }, {
    "left" : "if (work[nn - 5]  >  work[nn - 7])",
    "right" : "if (work[nn - 5]  >  work[nn - 7])",
    "info" : "IfStatement[54114-54212]:IfStatement[54116-54214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54149-54212]:Block[54151-54214]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54179-54186]:ReturnStatement[54181-54188]"
  }, {
    "left" : "b2 = work[nn - 5] / work[nn - 7];",
    "right" : "b2 = work[nn - 5] / work[nn - 7];",
    "info" : "ExpressionStatement[54237-54270]:ExpressionStatement[54239-54272]"
  }, {
    "left" : "np = nn - 9;",
    "right" : "np = nn - 9;",
    "info" : "ExpressionStatement[54295-54307]:ExpressionStatement[54297-54309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54335-54886]:Block[54337-54888]"
  }, {
    "left" : "np = nn - 2 * pingPong;",
    "right" : "np = nn - 2 * pingPong;",
    "info" : "ExpressionStatement[54361-54384]:ExpressionStatement[54363-54386]"
  }, {
    "left" : "b2 = work[np - 2];",
    "right" : "b2 = work[np - 2];",
    "info" : "ExpressionStatement[54409-54427]:ExpressionStatement[54411-54429]"
  }, {
    "left" : "gam = dN1;",
    "right" : "gam = dN1;",
    "info" : "ExpressionStatement[54452-54462]:ExpressionStatement[54454-54464]"
  }, {
    "left" : "if (work[np - 4]  >  work[np - 2])",
    "right" : "if (work[np - 4]  >  work[np - 2])",
    "info" : "IfStatement[54487-54585]:IfStatement[54489-54587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54522-54585]:Block[54524-54587]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54552-54559]:ReturnStatement[54554-54561]"
  }, {
    "left" : "a2 = work[np - 4] / work[np - 2];",
    "right" : "a2 = work[np - 4] / work[np - 2];",
    "info" : "ExpressionStatement[54610-54643]:ExpressionStatement[54612-54645]"
  }, {
    "left" : "if (work[nn - 9]  >  work[nn - 11])",
    "right" : "if (work[nn - 9]  >  work[nn - 11])",
    "info" : "IfStatement[54668-54767]:IfStatement[54670-54769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54704-54767]:Block[54706-54769]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54734-54741]:ReturnStatement[54736-54743]"
  }, {
    "left" : "b2 = work[nn - 9] / work[nn - 11];",
    "right" : "b2 = work[nn - 9] / work[nn - 11];",
    "info" : "ExpressionStatement[54792-54826]:ExpressionStatement[54794-54828]"
  }, {
    "left" : "np = nn - 13;",
    "right" : "np = nn - 13;",
    "info" : "ExpressionStatement[54851-54864]:ExpressionStatement[54853-54866]"
  }, {
    "left" : "a2 = a2 + b2;",
    "right" : "a2 = a2 + b2;",
    "info" : "ExpressionStatement[54987-55000]:ExpressionStatement[54989-55002]"
  }, {
    "left" : "for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "right" : "for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "info" : "ForStatement[55021-55589]:ForStatement[55023-55591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55080-55589]:Block[55082-55591]"
  }, {
    "left" : "if(b2 == 0.0)",
    "right" : "if(b2 == 0.0)",
    "info" : "IfStatement[55106-55182]:IfStatement[55108-55184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55120-55182]:Block[55122-55184]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55150-55156]:BreakStatement[55152-55158]"
  }, {
    "left" : "b1 = b2;",
    "right" : "b1 = b2;",
    "info" : "ExpressionStatement[55207-55215]:ExpressionStatement[55209-55217]"
  }, {
    "left" : "if (work[i4]  >  work[i4 - 2])",
    "right" : "if (work[i4]  >  work[i4 - 2])",
    "info" : "IfStatement[55240-55334]:IfStatement[55242-55336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55271-55334]:Block[55273-55336]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[55301-55308]:ReturnStatement[55303-55310]"
  }, {
    "left" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
    "right" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
    "info" : "ExpressionStatement[55359-55395]:ExpressionStatement[55361-55397]"
  }, {
    "left" : "a2 = a2 + b2;",
    "right" : "a2 = a2 + b2;",
    "info" : "ExpressionStatement[55420-55433]:ExpressionStatement[55422-55435]"
  }, {
    "left" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
    "right" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
    "info" : "IfStatement[55458-55567]:IfStatement[55460-55569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55505-55567]:Block[55507-55569]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55535-55541]:BreakStatement[55537-55543]"
  }, {
    "left" : "a2 = cnst3 * a2;",
    "right" : "a2 = cnst3 * a2;",
    "info" : "ExpressionStatement[55610-55626]:ExpressionStatement[55612-55628]"
  }, {
    "left" : "if (a2 < cnst1)",
    "right" : "if (a2 < cnst1)",
    "info" : "IfStatement[55705-55810]:IfStatement[55707-55812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55721-55810]:Block[55723-55812]"
  }, {
    "left" : "s = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
    "right" : "s = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
    "info" : "ExpressionStatement[55747-55788]:ExpressionStatement[55749-55790]"
  }, {
    "left" : "tau = s;",
    "right" : "tau = s;",
    "info" : "ExpressionStatement[55831-55839]:ExpressionStatement[55833-55841]"
  }, {
    "left" : "if (dMin == dN2)",
    "right" : "if (dMin == dN2)",
    "info" : "IfStatement[55878-57834]:IfStatement[55880-57836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55895-57463]:Block[55897-57465]"
  }, {
    "left" : "tType = -5;",
    "right" : "tType = -5;",
    "info" : "ExpressionStatement[55941-55952]:ExpressionStatement[55943-55954]"
  }, {
    "left" : "double s = 0.25 * dMin;",
    "right" : "double s = 0.25 * dMin;",
    "info" : "VariableDeclarationStatement[55969-55992]:VariableDeclarationStatement[55971-55994]"
  }, {
    "left" : "final int np = nn - 2 * pingPong;",
    "right" : "final int np = nn - 2 * pingPong;",
    "info" : "VariableDeclarationStatement[56081-56114]:VariableDeclarationStatement[56083-56116]"
  }, {
    "left" : "double b1 = work[np - 2];",
    "right" : "double b1 = work[np - 2];",
    "info" : "VariableDeclarationStatement[56131-56156]:VariableDeclarationStatement[56133-56158]"
  }, {
    "left" : "double b2 = work[np - 6];",
    "right" : "double b2 = work[np - 6];",
    "info" : "VariableDeclarationStatement[56173-56198]:VariableDeclarationStatement[56175-56200]"
  }, {
    "left" : "final double gam = dN2;",
    "right" : "final double gam = dN2;",
    "info" : "VariableDeclarationStatement[56215-56238]:VariableDeclarationStatement[56217-56240]"
  }, {
    "left" : "if (work[np - 8] > b2 || work[np - 4] > b1)",
    "right" : "if (work[np - 8] > b2 || work[np - 4] > b1)",
    "info" : "IfStatement[56255-56346]:IfStatement[56257-56348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56299-56346]:Block[56301-56348]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56321-56328]:ReturnStatement[56323-56330]"
  }, {
    "left" : "double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);",
    "right" : "double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);",
    "info" : "VariableDeclarationStatement[56363-56421]:VariableDeclarationStatement[56365-56423]"
  }, {
    "left" : "if (end - start > 3)",
    "right" : "if (end - start > 3)",
    "info" : "IfStatement[56514-57277]:IfStatement[56516-57279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56535-57277]:Block[56537-57279]"
  }, {
    "left" : "b2 = work[nn - 13] / work[nn - 15];",
    "right" : "b2 = work[nn - 13] / work[nn - 15];",
    "info" : "ExpressionStatement[56557-56592]:ExpressionStatement[56559-56594]"
  }, {
    "left" : "a2 = a2 + b2;",
    "right" : "a2 = a2 + b2;",
    "info" : "ExpressionStatement[56613-56626]:ExpressionStatement[56615-56628]"
  }, {
    "left" : "for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "right" : "for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "info" : "ForStatement[56647-57222]:ForStatement[56649-57224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56711-57222]:Block[56713-57224]"
  }, {
    "left" : "if (b2 == 0.0)",
    "right" : "if (b2 == 0.0)",
    "info" : "IfStatement[56737-56814]:IfStatement[56739-56816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56752-56814]:Block[56754-56816]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[56782-56788]:BreakStatement[56784-56790]"
  }, {
    "left" : "b1 = b2;",
    "right" : "b1 = b2;",
    "info" : "ExpressionStatement[56839-56847]:ExpressionStatement[56841-56849]"
  }, {
    "left" : "if (work[i4]  >  work[i4 - 2])",
    "right" : "if (work[i4]  >  work[i4 - 2])",
    "info" : "IfStatement[56872-56966]:IfStatement[56874-56968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56903-56966]:Block[56905-56968]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56933-56940]:ReturnStatement[56935-56942]"
  }, {
    "left" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
    "right" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
    "info" : "ExpressionStatement[56991-57027]:ExpressionStatement[56993-57029]"
  }, {
    "left" : "a2 = a2 + b2;",
    "right" : "a2 = a2 + b2;",
    "info" : "ExpressionStatement[57052-57065]:ExpressionStatement[57054-57067]"
  }, {
    "left" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
    "right" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
    "info" : "IfStatement[57090-57200]:IfStatement[57092-57202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57138-57200]:Block[57140-57202]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57168-57174]:BreakStatement[57170-57176]"
  }, {
    "left" : "a2 = cnst3 * a2;",
    "right" : "a2 = cnst3 * a2;",
    "info" : "ExpressionStatement[57243-57259]:ExpressionStatement[57245-57261]"
  }, {
    "left" : "if (a2 < cnst1)",
    "right" : "if (a2 < cnst1)",
    "info" : "IfStatement[57295-57448]:IfStatement[57297-57450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57311-57394]:Block[57313-57396]"
  }, {
    "left" : "tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
    "right" : "tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
    "info" : "ExpressionStatement[57333-57376]:ExpressionStatement[57335-57378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57400-57448]:Block[57402-57450]"
  }, {
    "left" : "tau = s;",
    "right" : "tau = s;",
    "info" : "ExpressionStatement[57422-57430]:ExpressionStatement[57424-57432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57469-57834]:Block[57471-57836]"
  }, {
    "left" : "if (tType == -6)",
    "right" : "if (tType == -6)",
    "info" : "IfStatement[57543-57757]:IfStatement[57545-57759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57560-57621]:Block[57562-57623]"
  }, {
    "left" : "g += 0.333 * (1 - g);",
    "right" : "g += 0.333 * (1 - g);",
    "info" : "ExpressionStatement[57582-57603]:ExpressionStatement[57584-57605]"
  }, {
    "left" : "if (tType == -18)",
    "right" : "if (tType == -18)",
    "info" : "IfStatement[57627-57757]:IfStatement[57629-57759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57645-57702]:Block[57647-57704]"
  }, {
    "left" : "g = 0.25 * 0.333;",
    "right" : "g = 0.25 * 0.333;",
    "info" : "ExpressionStatement[57667-57684]:ExpressionStatement[57669-57686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57708-57757]:Block[57710-57759]"
  }, {
    "left" : "g = 0.25;",
    "right" : "g = 0.25;",
    "info" : "ExpressionStatement[57730-57739]:ExpressionStatement[57732-57741]"
  }, {
    "left" : "tau   = g * dMin;",
    "right" : "tau   = g * dMin;",
    "info" : "ExpressionStatement[57774-57791]:ExpressionStatement[57776-57793]"
  }, {
    "left" : "tType = -6;",
    "right" : "tType = -6;",
    "info" : "ExpressionStatement[57808-57819]:ExpressionStatement[57810-57821]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57847-57853]:BreakStatement[57849-57855]"
  }, {
    "left" : "case 1 :",
    "right" : "case 1 :",
    "info" : "SwitchCase[57863-57871]:SwitchCase[57865-57873]"
  }, {
    "left" : "if (dMin1 == dN1 && dMin2 == dN2)",
    "right" : "if (dMin1 == dN1 && dMin2 == dN2)",
    "info" : "IfStatement[57949-59483]:IfStatement[57951-59485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57983-59277]:Block[57985-59279]"
  }, {
    "left" : "tType = -7;",
    "right" : "tType = -7;",
    "info" : "ExpressionStatement[58036-58047]:ExpressionStatement[58038-58049]"
  }, {
    "left" : "double s = 0.333 * dMin1;",
    "right" : "double s = 0.333 * dMin1;",
    "info" : "VariableDeclarationStatement[58064-58089]:VariableDeclarationStatement[58066-58091]"
  }, {
    "left" : "if (work[nn - 5] > work[nn - 7])",
    "right" : "if (work[nn - 5] > work[nn - 7])",
    "info" : "IfStatement[58106-58186]:IfStatement[58108-58188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58139-58186]:Block[58141-58188]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[58161-58168]:ReturnStatement[58163-58170]"
  }, {
    "left" : "double b1 = work[nn - 5] / work[nn - 7];",
    "right" : "double b1 = work[nn - 5] / work[nn - 7];",
    "info" : "VariableDeclarationStatement[58203-58243]:VariableDeclarationStatement[58205-58245]"
  }, {
    "left" : "double b2 = b1;",
    "right" : "double b2 = b1;",
    "info" : "VariableDeclarationStatement[58260-58275]:VariableDeclarationStatement[58262-58277]"
  }, {
    "left" : "if (b2 != 0.0)",
    "right" : "if (b2 != 0.0)",
    "info" : "IfStatement[58292-58838]:IfStatement[58294-58840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58307-58838]:Block[58309-58840]"
  }, {
    "left" : "for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "right" : "for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "info" : "ForStatement[58329-58820]:ForStatement[58331-58822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58409-58820]:Block[58411-58822]"
  }, {
    "left" : "final double oldB1 = b1;",
    "right" : "final double oldB1 = b1;",
    "info" : "VariableDeclarationStatement[58435-58459]:VariableDeclarationStatement[58437-58461]"
  }, {
    "left" : "if (work[i4] > work[i4 - 2])",
    "right" : "if (work[i4] > work[i4 - 2])",
    "info" : "IfStatement[58484-58576]:IfStatement[58486-58578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58513-58576]:Block[58515-58578]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[58543-58550]:ReturnStatement[58545-58552]"
  }, {
    "left" : "b1 = b1 * (work[i4] / work[i4 - 2]);",
    "right" : "b1 = b1 * (work[i4] / work[i4 - 2]);",
    "info" : "ExpressionStatement[58601-58637]:ExpressionStatement[58603-58639]"
  }, {
    "left" : "b2 = b2 + b1;",
    "right" : "b2 = b2 + b1;",
    "info" : "ExpressionStatement[58662-58675]:ExpressionStatement[58664-58677]"
  }, {
    "left" : "if (100 * Math.max(b1, oldB1) < b2)",
    "right" : "if (100 * Math.max(b1, oldB1) < b2)",
    "info" : "IfStatement[58700-58798]:IfStatement[58702-58800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58736-58798]:Block[58738-58800]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[58766-58772]:BreakStatement[58768-58774]"
  }, {
    "left" : "b2 = Math.sqrt(cnst3 * b2);",
    "right" : "b2 = Math.sqrt(cnst3 * b2);",
    "info" : "ExpressionStatement[58855-58882]:ExpressionStatement[58857-58884]"
  }, {
    "left" : "final double a2 = dMin1 / (1 + b2 * b2);",
    "right" : "final double a2 = dMin1 / (1 + b2 * b2);",
    "info" : "VariableDeclarationStatement[58899-58939]:VariableDeclarationStatement[58901-58941]"
  }, {
    "left" : "final double gap2 = 0.5 * dMin2 - a2;",
    "right" : "final double gap2 = 0.5 * dMin2 - a2;",
    "info" : "VariableDeclarationStatement[58956-58993]:VariableDeclarationStatement[58958-58995]"
  }, {
    "left" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
    "right" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
    "info" : "IfStatement[59010-59263]:IfStatement[59012-59265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59044-59144]:Block[59046-59146]"
  }, {
    "left" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
    "right" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
    "info" : "ExpressionStatement[59066-59126]:ExpressionStatement[59068-59128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59150-59263]:Block[59152-59265]"
  }, {
    "left" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
    "right" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
    "info" : "ExpressionStatement[59172-59213]:ExpressionStatement[59174-59215]"
  }, {
    "left" : "tType = -8;",
    "right" : "tType = -8;",
    "info" : "ExpressionStatement[59234-59245]:ExpressionStatement[59236-59247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59283-59483]:Block[59285-59485]"
  }, {
    "left" : "tau = 0.25 * dMin1;",
    "right" : "tau = 0.25 * dMin1;",
    "info" : "ExpressionStatement[59329-59348]:ExpressionStatement[59331-59350]"
  }, {
    "left" : "if (dMin1 == dN1)",
    "right" : "if (dMin1 == dN1)",
    "info" : "IfStatement[59365-59441]:IfStatement[59367-59443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59383-59441]:Block[59385-59443]"
  }, {
    "left" : "tau = 0.5 * dMin1;",
    "right" : "tau = 0.5 * dMin1;",
    "info" : "ExpressionStatement[59405-59423]:ExpressionStatement[59407-59425]"
  }, {
    "left" : "tType = -9;",
    "right" : "tType = -9;",
    "info" : "ExpressionStatement[59458-59469]:ExpressionStatement[59460-59471]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59496-59502]:BreakStatement[59498-59504]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[59512-59520]:SwitchCase[59514-59522]"
  }, {
    "left" : "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7])",
    "right" : "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7])",
    "info" : "IfStatement[59631-61013]:IfStatement[59633-61015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59684-60925]:Block[59686-60927]"
  }, {
    "left" : "tType = -10;",
    "right" : "tType = -10;",
    "info" : "ExpressionStatement[59702-59714]:ExpressionStatement[59704-59716]"
  }, {
    "left" : "final double s = 0.333 * dMin2;",
    "right" : "final double s = 0.333 * dMin2;",
    "info" : "VariableDeclarationStatement[59731-59762]:VariableDeclarationStatement[59733-59764]"
  }, {
    "left" : "if (work[nn - 5] > work[nn - 7])",
    "right" : "if (work[nn - 5] > work[nn - 7])",
    "info" : "IfStatement[59779-59859]:IfStatement[59781-59861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59812-59859]:Block[59814-59861]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[59834-59841]:ReturnStatement[59836-59843]"
  }, {
    "left" : "double b1 = work[nn - 5] / work[nn - 7];",
    "right" : "double b1 = work[nn - 5] / work[nn - 7];",
    "info" : "VariableDeclarationStatement[59876-59916]:VariableDeclarationStatement[59878-59918]"
  }, {
    "left" : "double b2 = b1;",
    "right" : "double b2 = b1;",
    "info" : "VariableDeclarationStatement[59933-59948]:VariableDeclarationStatement[59935-59950]"
  }, {
    "left" : "if (b2 != 0.0)",
    "right" : "if (b2 != 0.0)",
    "info" : "IfStatement[59965-60433]:IfStatement[59967-60435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59979-60433]:Block[59981-60435]"
  }, {
    "left" : "for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "right" : "for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
    "info" : "ForStatement[60001-60415]:ForStatement[60003-60417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60080-60415]:Block[60082-60417]"
  }, {
    "left" : "if (work[i4] > work[i4 - 2])",
    "right" : "if (work[i4] > work[i4 - 2])",
    "info" : "IfStatement[60106-60198]:IfStatement[60108-60200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60135-60198]:Block[60137-60200]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[60165-60172]:ReturnStatement[60167-60174]"
  }, {
    "left" : "b1 *= work[i4] / work[i4 - 2];",
    "right" : "b1 *= work[i4] / work[i4 - 2];",
    "info" : "ExpressionStatement[60223-60253]:ExpressionStatement[60225-60255]"
  }, {
    "left" : "b2 += b1;",
    "right" : "b2 += b1;",
    "info" : "ExpressionStatement[60278-60287]:ExpressionStatement[60280-60289]"
  }, {
    "left" : "if (100 * b1 < b2)",
    "right" : "if (100 * b1 < b2)",
    "info" : "IfStatement[60312-60393]:IfStatement[60314-60395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60331-60393]:Block[60333-60395]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60361-60367]:BreakStatement[60363-60369]"
  }, {
    "left" : "b2 = Math.sqrt(cnst3 * b2);",
    "right" : "b2 = Math.sqrt(cnst3 * b2);",
    "info" : "ExpressionStatement[60450-60477]:ExpressionStatement[60452-60479]"
  }, {
    "left" : "final double a2 = dMin2 / (1 + b2 * b2);",
    "right" : "final double a2 = dMin2 / (1 + b2 * b2);",
    "info" : "VariableDeclarationStatement[60494-60534]:VariableDeclarationStatement[60496-60536]"
  }, {
    "left" : "final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;",
    "right" : "final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;",
    "info" : "VariableDeclarationStatement[60551-60673]:VariableDeclarationStatement[60553-60675]"
  }, {
    "left" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
    "right" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
    "info" : "IfStatement[60690-60911]:IfStatement[60692-60913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60724-60824]:Block[60726-60826]"
  }, {
    "left" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
    "right" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
    "info" : "ExpressionStatement[60746-60806]:ExpressionStatement[60748-60808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60830-60911]:Block[60832-60913]"
  }, {
    "left" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
    "right" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
    "info" : "ExpressionStatement[60852-60893]:ExpressionStatement[60854-60895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60931-61013]:Block[60933-61015]"
  }, {
    "left" : "tau   = 0.25 * dMin2;",
    "right" : "tau   = 0.25 * dMin2;",
    "info" : "ExpressionStatement[60949-60970]:ExpressionStatement[60951-60972]"
  }, {
    "left" : "tType = -11;",
    "right" : "tType = -11;",
    "info" : "ExpressionStatement[60987-60999]:ExpressionStatement[60989-61001]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61026-61032]:BreakStatement[61028-61034]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[61042-61051]:SwitchCase[61044-61053]"
  }, {
    "left" : "tau   = 0.0;",
    "right" : "tau   = 0.0;",
    "info" : "ExpressionStatement[61132-61144]:ExpressionStatement[61134-61146]"
  }, {
    "left" : "tType = -12;",
    "right" : "tType = -12;",
    "info" : "ExpressionStatement[61157-61169]:ExpressionStatement[61159-61171]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61273-61280]:Modifier[61275-61282]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61281-61285]:PrimitiveType[61283-61287]"
  }, {
    "left" : "updateSigma",
    "right" : "updateSigma",
    "info" : "SimpleName[61286-61297]:SimpleName[61288-61299]"
  }, {
    "left" : "final double shift",
    "right" : "final double shift",
    "info" : "SingleVariableDeclaration[61298-61316]:SingleVariableDeclaration[61300-61318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61318-61843]:Block[61320-61845]"
  }, {
    "left" : "if (shift < sigma)",
    "right" : "if (shift < sigma)",
    "info" : "IfStatement[61542-61837]:IfStatement[61544-61839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61561-61708]:Block[61563-61710]"
  }, {
    "left" : "sigmaLow += shift;",
    "right" : "sigmaLow += shift;",
    "info" : "ExpressionStatement[61575-61593]:ExpressionStatement[61577-61595]"
  }, {
    "left" : "final double t = sigma + sigmaLow;",
    "right" : "final double t = sigma + sigmaLow;",
    "info" : "VariableDeclarationStatement[61606-61640]:VariableDeclarationStatement[61608-61642]"
  }, {
    "left" : "sigmaLow -= t - sigma;",
    "right" : "sigmaLow -= t - sigma;",
    "info" : "ExpressionStatement[61653-61675]:ExpressionStatement[61655-61677]"
  }, {
    "left" : "sigma = t;",
    "right" : "sigma = t;",
    "info" : "ExpressionStatement[61688-61698]:ExpressionStatement[61690-61700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61714-61837]:Block[61716-61839]"
  }, {
    "left" : "final double t = sigma + shift;",
    "right" : "final double t = sigma + shift;",
    "info" : "VariableDeclarationStatement[61728-61759]:VariableDeclarationStatement[61730-61761]"
  }, {
    "left" : "sigmaLow += sigma - (t - shift);",
    "right" : "sigmaLow += sigma - (t - shift);",
    "info" : "ExpressionStatement[61772-61804]:ExpressionStatement[61774-61806]"
  }, {
    "left" : "sigma = t;",
    "right" : "sigma = t;",
    "info" : "ExpressionStatement[61817-61827]:ExpressionStatement[61819-61829]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61891-61898]:Modifier[61893-61900]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61899-61903]:PrimitiveType[61901-61905]"
  }, {
    "left" : "findEigenVectors",
    "right" : "findEigenVectors",
    "info" : "SimpleName[61904-61920]:SimpleName[61906-61922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61923-62784]:Block[61925-62786]"
  }, {
    "left" : "final int m = main.length;",
    "right" : "final int m = main.length;",
    "info" : "VariableDeclarationStatement[61934-61960]:VariableDeclarationStatement[61936-61962]"
  }, {
    "left" : "eigenvectors = new ArrayRealVector[m];",
    "right" : "eigenvectors = new ArrayRealVector[m];",
    "info" : "ExpressionStatement[61969-62007]:ExpressionStatement[61971-62009]"
  }, {
    "left" : "final double[] d = new double[m];",
    "right" : "final double[] d = new double[m];",
    "info" : "VariableDeclarationStatement[62078-62111]:VariableDeclarationStatement[62080-62113]"
  }, {
    "left" : "final double[] l = new double[m - 1];",
    "right" : "final double[] l = new double[m - 1];",
    "info" : "VariableDeclarationStatement[62120-62157]:VariableDeclarationStatement[62122-62159]"
  }, {
    "left" : "final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;",
    "right" : "final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;",
    "info" : "VariableDeclarationStatement[62216-62317]:VariableDeclarationStatement[62218-62319]"
  }, {
    "left" : "double di = main[0]+mu;",
    "right" : "double di = main[0]+mu;",
    "info" : "VariableDeclarationStatement[62326-62349]:VariableDeclarationStatement[62328-62351]"
  }, {
    "left" : "d[0] = di;",
    "right" : "d[0] = di;",
    "info" : "ExpressionStatement[62358-62368]:ExpressionStatement[62360-62370]"
  }, {
    "left" : "for (int i = 1; i < m; ++i)",
    "right" : "for (int i = 1; i < m; ++i)",
    "info" : "ForStatement[62377-62620]:ForStatement[62379-62622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62405-62620]:Block[62407-62622]"
  }, {
    "left" : "final double eiM1  = secondary[i - 1];",
    "right" : "final double eiM1  = secondary[i - 1];",
    "info" : "VariableDeclarationStatement[62419-62457]:VariableDeclarationStatement[62421-62459]"
  }, {
    "left" : "final double ratio = eiM1 / di;",
    "right" : "final double ratio = eiM1 / di;",
    "info" : "VariableDeclarationStatement[62470-62501]:VariableDeclarationStatement[62472-62503]"
  }, {
    "left" : "di       = main[i] - eiM1 * ratio + mu;",
    "right" : "di       = main[i] - eiM1 * ratio + mu;",
    "info" : "ExpressionStatement[62514-62553]:ExpressionStatement[62516-62555]"
  }, {
    "left" : "l[i - 1] = ratio;",
    "right" : "l[i - 1] = ratio;",
    "info" : "ExpressionStatement[62566-62583]:ExpressionStatement[62568-62585]"
  }, {
    "left" : "d[i]     = di;",
    "right" : "d[i]     = di;",
    "info" : "ExpressionStatement[62596-62610]:ExpressionStatement[62598-62612]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[62662-62777]:ForStatement[62664-62779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62690-62777]:Block[62692-62779]"
  }, {
    "left" : "eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",
    "right" : "eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",
    "info" : "ExpressionStatement[62704-62767]:ExpressionStatement[62706-62769]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63210-63217]:Modifier[63212-63219]"
  }, {
    "left" : "ArrayRealVector",
    "right" : "ArrayRealVector",
    "info" : "SimpleType[63218-63233]:SimpleType[63220-63235]"
  }, {
    "left" : "findEigenvector",
    "right" : "findEigenvector",
    "info" : "SimpleName[63234-63249]:SimpleName[63236-63251]"
  }, {
    "left" : "final double eigenvalue",
    "right" : "final double eigenvalue",
    "info" : "SingleVariableDeclaration[63250-63273]:SingleVariableDeclaration[63252-63275]"
  }, {
    "left" : "final double[] d",
    "right" : "final double[] d",
    "info" : "SingleVariableDeclaration[63318-63334]:SingleVariableDeclaration[63320-63336]"
  }, {
    "left" : "final double[] l",
    "right" : "final double[] l",
    "info" : "SingleVariableDeclaration[63336-63352]:SingleVariableDeclaration[63338-63354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63354-65029]:Block[63356-65031]"
  }, {
    "left" : "final int m = main.length;",
    "right" : "final int m = main.length;",
    "info" : "VariableDeclarationStatement[63472-63498]:VariableDeclarationStatement[63474-63500]"
  }, {
    "left" : "stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",
    "right" : "stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",
    "info" : "ExpressionStatement[63507-63563]:ExpressionStatement[63509-63565]"
  }, {
    "left" : "progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",
    "right" : "progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",
    "info" : "ExpressionStatement[63572-63629]:ExpressionStatement[63574-63631]"
  }, {
    "left" : "int r = m - 1;",
    "right" : "int r = m - 1;",
    "info" : "VariableDeclarationStatement[63751-63765]:VariableDeclarationStatement[63753-63767]"
  }, {
    "left" : "double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);",
    "right" : "double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);",
    "info" : "VariableDeclarationStatement[63774-63841]:VariableDeclarationStatement[63776-63843]"
  }, {
    "left" : "int sixI = 0;",
    "right" : "int sixI = 0;",
    "info" : "VariableDeclarationStatement[63850-63863]:VariableDeclarationStatement[63852-63865]"
  }, {
    "left" : "for (int i = 0; i < m - 1; ++i)",
    "right" : "for (int i = 0; i < m - 1; ++i)",
    "info" : "ForStatement[63872-64131]:ForStatement[63874-64133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63904-64131]:Block[63906-64133]"
  }, {
    "left" : "final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);",
    "right" : "final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);",
    "info" : "VariableDeclarationStatement[63918-64001]:VariableDeclarationStatement[63920-64003]"
  }, {
    "left" : "if (absG < minG)",
    "right" : "if (absG < minG)",
    "info" : "IfStatement[64014-64098]:IfStatement[64016-64100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64031-64098]:Block[64033-64100]"
  }, {
    "left" : "r = i;",
    "right" : "r = i;",
    "info" : "ExpressionStatement[64049-64055]:ExpressionStatement[64051-64057]"
  }, {
    "left" : "minG = absG;",
    "right" : "minG = absG;",
    "info" : "ExpressionStatement[64072-64084]:ExpressionStatement[64074-64086]"
  }, {
    "left" : "sixI += 6;",
    "right" : "sixI += 6;",
    "info" : "ExpressionStatement[64111-64121]:ExpressionStatement[64113-64123]"
  }, {
    "left" : "double[] eigenvector = new double[m];",
    "right" : "double[] eigenvector = new double[m];",
    "info" : "VariableDeclarationStatement[64267-64304]:VariableDeclarationStatement[64269-64306]"
  }, {
    "left" : "double n2 = 1;",
    "right" : "double n2 = 1;",
    "info" : "VariableDeclarationStatement[64313-64327]:VariableDeclarationStatement[64315-64329]"
  }, {
    "left" : "eigenvector[r] = 1;",
    "right" : "eigenvector[r] = 1;",
    "info" : "ExpressionStatement[64336-64355]:ExpressionStatement[64338-64357]"
  }, {
    "left" : "double z = 1;",
    "right" : "double z = 1;",
    "info" : "VariableDeclarationStatement[64364-64377]:VariableDeclarationStatement[64366-64379]"
  }, {
    "left" : "for (int i = r - 1; i >= 0; --i)",
    "right" : "for (int i = r - 1; i >= 0; --i)",
    "info" : "ForStatement[64386-64522]:ForStatement[64388-64524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64419-64522]:Block[64421-64524]"
  }, {
    "left" : "z *= -work[6 * i + 2];",
    "right" : "z *= -work[6 * i + 2];",
    "info" : "ExpressionStatement[64433-64455]:ExpressionStatement[64435-64457]"
  }, {
    "left" : "eigenvector[i] = z;",
    "right" : "eigenvector[i] = z;",
    "info" : "ExpressionStatement[64468-64487]:ExpressionStatement[64470-64489]"
  }, {
    "left" : "n2 += z * z;",
    "right" : "n2 += z * z;",
    "info" : "ExpressionStatement[64500-64512]:ExpressionStatement[64502-64514]"
  }, {
    "left" : "z = 1;",
    "right" : "z = 1;",
    "info" : "ExpressionStatement[64531-64537]:ExpressionStatement[64533-64539]"
  }, {
    "left" : "for (int i = r + 1; i < m; ++i)",
    "right" : "for (int i = r + 1; i < m; ++i)",
    "info" : "ForStatement[64546-64681]:ForStatement[64548-64683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64578-64681]:Block[64580-64683]"
  }, {
    "left" : "z *= -work[6 * i - 1];",
    "right" : "z *= -work[6 * i - 1];",
    "info" : "ExpressionStatement[64592-64614]:ExpressionStatement[64594-64616]"
  }, {
    "left" : "eigenvector[i] = z;",
    "right" : "eigenvector[i] = z;",
    "info" : "ExpressionStatement[64627-64646]:ExpressionStatement[64629-64648]"
  }, {
    "left" : "n2 += z * z;",
    "right" : "n2 += z * z;",
    "info" : "ExpressionStatement[64659-64671]:ExpressionStatement[64661-64673]"
  }, {
    "left" : "final double inv = 1.0 / Math.sqrt(n2);",
    "right" : "final double inv = 1.0 / Math.sqrt(n2);",
    "info" : "VariableDeclarationStatement[64719-64758]:VariableDeclarationStatement[64721-64760]"
  }, {
    "left" : "for (int i = 0; i < m; ++i)",
    "right" : "for (int i = 0; i < m; ++i)",
    "info" : "ForStatement[64767-64841]:ForStatement[64769-64843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64795-64841]:Block[64797-64843]"
  }, {
    "left" : "eigenvector[i] *= inv;",
    "right" : "eigenvector[i] *= inv;",
    "info" : "ExpressionStatement[64809-64831]:ExpressionStatement[64811-64833]"
  }, {
    "left" : "return (transformer == null) ?\n               new ArrayRealVector(eigenvector, false) :\n               new ArrayRealVector(transformer.getQ().operate(eigenvector), false);",
    "right" : "return (transformer == null) ?\n               new ArrayRealVector(eigenvector, false) :\n               new ArrayRealVector(transformer.getQ().operate(eigenvector), false);",
    "info" : "ReturnStatement[64851-65022]:ReturnStatement[64853-65024]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[65375-65382]:Modifier[65377-65384]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[65383-65387]:PrimitiveType[65385-65389]"
  }, {
    "left" : "stationaryQuotientDifferenceWithShift",
    "right" : "stationaryQuotientDifferenceWithShift",
    "info" : "SimpleName[65388-65425]:SimpleName[65390-65427]"
  }, {
    "left" : "final double[] d",
    "right" : "final double[] d",
    "info" : "SingleVariableDeclaration[65426-65442]:SingleVariableDeclaration[65428-65444]"
  }, {
    "left" : "final double[] l",
    "right" : "final double[] l",
    "info" : "SingleVariableDeclaration[65444-65460]:SingleVariableDeclaration[65446-65462]"
  }, {
    "left" : "final double lambda",
    "right" : "final double lambda",
    "info" : "SingleVariableDeclaration[65517-65536]:SingleVariableDeclaration[65519-65538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65538-66099]:Block[65540-66101]"
  }, {
    "left" : "final int nM1 = d.length - 1;",
    "right" : "final int nM1 = d.length - 1;",
    "info" : "VariableDeclarationStatement[65548-65577]:VariableDeclarationStatement[65550-65579]"
  }, {
    "left" : "double si = -lambda;",
    "right" : "double si = -lambda;",
    "info" : "VariableDeclarationStatement[65586-65606]:VariableDeclarationStatement[65588-65608]"
  }, {
    "left" : "int sixI = 0;",
    "right" : "int sixI = 0;",
    "info" : "VariableDeclarationStatement[65615-65628]:VariableDeclarationStatement[65617-65630]"
  }, {
    "left" : "for (int i = 0; i < nM1; ++i)",
    "right" : "for (int i = 0; i < nM1; ++i)",
    "info" : "ForStatement[65637-66020]:ForStatement[65639-66022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65667-66020]:Block[65669-66022]"
  }, {
    "left" : "final double di   = d[i];",
    "right" : "final double di   = d[i];",
    "info" : "VariableDeclarationStatement[65681-65706]:VariableDeclarationStatement[65683-65708]"
  }, {
    "left" : "final double li   = l[i];",
    "right" : "final double li   = l[i];",
    "info" : "VariableDeclarationStatement[65719-65744]:VariableDeclarationStatement[65721-65746]"
  }, {
    "left" : "final double diP1 = di + si;",
    "right" : "final double diP1 = di + si;",
    "info" : "VariableDeclarationStatement[65757-65785]:VariableDeclarationStatement[65759-65787]"
  }, {
    "left" : "final double liP1 = li * di / diP1;",
    "right" : "final double liP1 = li * di / diP1;",
    "info" : "VariableDeclarationStatement[65798-65833]:VariableDeclarationStatement[65800-65835]"
  }, {
    "left" : "work[sixI]        = si;",
    "right" : "work[sixI]        = si;",
    "info" : "ExpressionStatement[65846-65869]:ExpressionStatement[65848-65871]"
  }, {
    "left" : "work[sixI + 1]    = diP1;",
    "right" : "work[sixI + 1]    = diP1;",
    "info" : "ExpressionStatement[65882-65907]:ExpressionStatement[65884-65909]"
  }, {
    "left" : "work[sixI + 2]    = liP1;",
    "right" : "work[sixI + 2]    = liP1;",
    "info" : "ExpressionStatement[65920-65945]:ExpressionStatement[65922-65947]"
  }, {
    "left" : "si = li * liP1 * si - lambda;",
    "right" : "si = li * liP1 * si - lambda;",
    "info" : "ExpressionStatement[65958-65987]:ExpressionStatement[65960-65989]"
  }, {
    "left" : "sixI += 6;",
    "right" : "sixI += 6;",
    "info" : "ExpressionStatement[66000-66010]:ExpressionStatement[66002-66012]"
  }, {
    "left" : "work[6 * nM1 + 1] = d[nM1] + si;",
    "right" : "work[6 * nM1 + 1] = d[nM1] + si;",
    "info" : "ExpressionStatement[66029-66061]:ExpressionStatement[66031-66063]"
  }, {
    "left" : "work[6 * nM1]     = si;",
    "right" : "work[6 * nM1]     = si;",
    "info" : "ExpressionStatement[66070-66093]:ExpressionStatement[66072-66095]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[66442-66449]:Modifier[66444-66451]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66450-66454]:PrimitiveType[66452-66456]"
  }, {
    "left" : "progressiveQuotientDifferenceWithShift",
    "right" : "progressiveQuotientDifferenceWithShift",
    "info" : "SimpleName[66455-66493]:SimpleName[66457-66495]"
  }, {
    "left" : "final double[] d",
    "right" : "final double[] d",
    "info" : "SingleVariableDeclaration[66494-66510]:SingleVariableDeclaration[66496-66512]"
  }, {
    "left" : "final double[] l",
    "right" : "final double[] l",
    "info" : "SingleVariableDeclaration[66512-66528]:SingleVariableDeclaration[66514-66530]"
  }, {
    "left" : "final double lambda",
    "right" : "final double lambda",
    "info" : "SingleVariableDeclaration[66586-66605]:SingleVariableDeclaration[66588-66607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66607-67163]:Block[66609-67165]"
  }, {
    "left" : "final int nM1 = d.length - 1;",
    "right" : "final int nM1 = d.length - 1;",
    "info" : "VariableDeclarationStatement[66617-66646]:VariableDeclarationStatement[66619-66648]"
  }, {
    "left" : "double pi = d[nM1] - lambda;",
    "right" : "double pi = d[nM1] - lambda;",
    "info" : "VariableDeclarationStatement[66655-66683]:VariableDeclarationStatement[66657-66685]"
  }, {
    "left" : "int sixI = 6 * (nM1 - 1);",
    "right" : "int sixI = 6 * (nM1 - 1);",
    "info" : "VariableDeclarationStatement[66692-66717]:VariableDeclarationStatement[66694-66719]"
  }, {
    "left" : "for (int i = nM1 - 1; i >= 0; --i)",
    "right" : "for (int i = nM1 - 1; i >= 0; --i)",
    "info" : "ForStatement[66726-67113]:ForStatement[66728-67115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66761-67113]:Block[66763-67115]"
  }, {
    "left" : "final double di   = d[i];",
    "right" : "final double di   = d[i];",
    "info" : "VariableDeclarationStatement[66775-66800]:VariableDeclarationStatement[66777-66802]"
  }, {
    "left" : "final double li   = l[i];",
    "right" : "final double li   = l[i];",
    "info" : "VariableDeclarationStatement[66813-66838]:VariableDeclarationStatement[66815-66840]"
  }, {
    "left" : "final double diP1 = di * li * li + pi;",
    "right" : "final double diP1 = di * li * li + pi;",
    "info" : "VariableDeclarationStatement[66851-66889]:VariableDeclarationStatement[66853-66891]"
  }, {
    "left" : "final double t    = di / diP1;",
    "right" : "final double t    = di / diP1;",
    "info" : "VariableDeclarationStatement[66902-66932]:VariableDeclarationStatement[66904-66934]"
  }, {
    "left" : "work[sixI +  9]   = pi;",
    "right" : "work[sixI +  9]   = pi;",
    "info" : "ExpressionStatement[66945-66968]:ExpressionStatement[66947-66970]"
  }, {
    "left" : "work[sixI + 10]   = diP1;",
    "right" : "work[sixI + 10]   = diP1;",
    "info" : "ExpressionStatement[66981-67006]:ExpressionStatement[66983-67008]"
  }, {
    "left" : "work[sixI +  5]   = li * t;",
    "right" : "work[sixI +  5]   = li * t;",
    "info" : "ExpressionStatement[67019-67046]:ExpressionStatement[67021-67048]"
  }, {
    "left" : "pi = pi * t - lambda;",
    "right" : "pi = pi * t - lambda;",
    "info" : "ExpressionStatement[67059-67080]:ExpressionStatement[67061-67082]"
  }, {
    "left" : "sixI -= 6;",
    "right" : "sixI -= 6;",
    "info" : "ExpressionStatement[67093-67103]:ExpressionStatement[67095-67105]"
  }, {
    "left" : "work[3] = pi;",
    "right" : "work[3] = pi;",
    "info" : "ExpressionStatement[67122-67135]:ExpressionStatement[67124-67137]"
  }, {
    "left" : "work[4] = pi;",
    "right" : "work[4] = pi;",
    "info" : "ExpressionStatement[67144-67157]:ExpressionStatement[67146-67159]"
  } ]
}