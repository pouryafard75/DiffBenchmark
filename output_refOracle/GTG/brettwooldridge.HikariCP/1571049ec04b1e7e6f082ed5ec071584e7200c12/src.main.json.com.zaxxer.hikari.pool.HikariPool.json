{
  "matchedElements" : [
 {
    "left" : "class : HikariPool",
    "right" : "class : HikariPool",
    "info" : "TypeDeclaration[2504-25410]:TypeDeclaration[2560-25466]"
  }, {
    "left" : "LOGGER",
    "right" : "LOGGER",
    "info" : "FieldDeclaration[2721-2787]:FieldDeclaration[2777-2843]"
  }, {
    "left" : "clockSource",
    "right" : "clockSource",
    "info" : "FieldDeclaration[2792-2860]:FieldDeclaration[2848-2916]"
  }, {
    "left" : "ALIVE_BYPASS_WINDOW_MS",
    "right" : "ALIVE_BYPASS_WINDOW_MS",
    "info" : "FieldDeclaration[2865-2991]:FieldDeclaration[2921-3047]"
  }, {
    "left" : "HOUSEKEEPING_PERIOD_MS",
    "right" : "HOUSEKEEPING_PERIOD_MS",
    "info" : "FieldDeclaration[2995-3126]:FieldDeclaration[3051-3182]"
  }, {
    "left" : "POOL_NORMAL",
    "right" : "POOL_NORMAL",
    "info" : "FieldDeclaration[3131-3172]:FieldDeclaration[3187-3228]"
  }, {
    "left" : "POOL_SUSPENDED",
    "right" : "POOL_SUSPENDED",
    "info" : "FieldDeclaration[3176-3220]:FieldDeclaration[3232-3276]"
  }, {
    "left" : "POOL_SHUTDOWN",
    "right" : "POOL_SHUTDOWN",
    "info" : "FieldDeclaration[3224-3267]:FieldDeclaration[3280-3323]"
  }, {
    "left" : "transactionIsolation",
    "right" : "transactionIsolation",
    "info" : "FieldDeclaration[3272-3304]:FieldDeclaration[3328-3360]"
  }, {
    "left" : "catalog",
    "right" : "catalog",
    "info" : "FieldDeclaration[3308-3336]:FieldDeclaration[3364-3392]"
  }, {
    "left" : "isReadOnly",
    "right" : "isReadOnly",
    "info" : "FieldDeclaration[3340-3372]:FieldDeclaration[3396-3428]"
  }, {
    "left" : "isAutoCommit",
    "right" : "isAutoCommit",
    "info" : "FieldDeclaration[3376-3410]:FieldDeclaration[3432-3466]"
  }, {
    "left" : "poolUtils",
    "right" : "poolUtils",
    "info" : "FieldDeclaration[3414-3445]:FieldDeclaration[3470-3501]"
  }, {
    "left" : "config",
    "right" : "config",
    "info" : "FieldDeclaration[3450-3476]:FieldDeclaration[3506-3532]"
  }, {
    "left" : "connectionBag",
    "right" : "connectionBag",
    "info" : "FieldDeclaration[3480-3528]:FieldDeclaration[3536-3584]"
  }, {
    "left" : "houseKeepingExecutorService",
    "right" : "houseKeepingExecutorService",
    "info" : "FieldDeclaration[3532-3594]:FieldDeclaration[3588-3650]"
  }, {
    "left" : "totalConnections",
    "right" : "totalConnections",
    "info" : "FieldDeclaration[3599-3644]:FieldDeclaration[3655-3700]"
  }, {
    "left" : "addConnectionExecutor",
    "right" : "addConnectionExecutor",
    "info" : "FieldDeclaration[3648-3703]:FieldDeclaration[3704-3759]"
  }, {
    "left" : "closeConnectionExecutor",
    "right" : "closeConnectionExecutor",
    "info" : "FieldDeclaration[3707-3764]:FieldDeclaration[3763-3820]"
  }, {
    "left" : "isUseJdbc4Validation",
    "right" : "isUseJdbc4Validation",
    "info" : "FieldDeclaration[3769-3812]:FieldDeclaration[3825-3868]"
  }, {
    "left" : "isIsolateInternalQueries",
    "right" : "isIsolateInternalQueries",
    "info" : "FieldDeclaration[3816-3863]:FieldDeclaration[3872-3919]"
  }, {
    "left" : "poolState",
    "right" : "poolState",
    "info" : "FieldDeclaration[3868-3899]:FieldDeclaration[3924-3955]"
  }, {
    "left" : "connectionTimeout",
    "right" : "connectionTimeout",
    "info" : "FieldDeclaration[3903-3934]:FieldDeclaration[3959-3990]"
  }, {
    "left" : "leakTask",
    "right" : "leakTask",
    "info" : "FieldDeclaration[3942-3974]:FieldDeclaration[3998-4030]"
  }, {
    "left" : "dataSource",
    "right" : "dataSource",
    "info" : "FieldDeclaration[3978-4014]:FieldDeclaration[4034-4070]"
  }, {
    "left" : "suspendResumeLock",
    "right" : "suspendResumeLock",
    "info" : "FieldDeclaration[4018-4068]:FieldDeclaration[4074-4124]"
  }, {
    "left" : "lastConnectionFailure",
    "right" : "lastConnectionFailure",
    "info" : "FieldDeclaration[4072-4135]:FieldDeclaration[4128-4191]"
  }, {
    "left" : "metricsTracker",
    "right" : "metricsTracker",
    "info" : "FieldDeclaration[4140-4187]:FieldDeclaration[4196-4243]"
  }, {
    "left" : "isRecordMetrics",
    "right" : "isRecordMetrics",
    "info" : "FieldDeclaration[4191-4223]:FieldDeclaration[4247-4279]"
  }, {
    "left" : "public HikariPool(config )",
    "right" : "public HikariPool(config )",
    "info" : "MethodDeclaration[4228-6926]:MethodDeclaration[4284-6982]"
  }, {
    "left" : "public getConnection() : ",
    "right" : "public getConnection() : ",
    "info" : "MethodDeclaration[6931-7283]:MethodDeclaration[6987-7339]"
  }, {
    "left" : "public getConnection(hardTimeout long) : ",
    "right" : "public getConnection(hardTimeout long) : ",
    "info" : "MethodDeclaration[7288-9339]:MethodDeclaration[7344-9395]"
  }, {
    "left" : "public releaseConnection(bagEntry ) : void",
    "right" : "public releaseConnection(bagEntry ) : void",
    "info" : "MethodDeclaration[9344-9817]:MethodDeclaration[9400-9873]"
  }, {
    "left" : "public shutdown() : void",
    "right" : "public shutdown() : void",
    "info" : "MethodDeclaration[9822-11596]:MethodDeclaration[9878-11652]"
  }, {
    "left" : "public evictConnection(proxyConnection ) : void",
    "right" : "public evictConnection(proxyConnection ) : void",
    "info" : "MethodDeclaration[11601-11887]:MethodDeclaration[11657-11943]"
  }, {
    "left" : "public getDataSource() : ",
    "right" : "public getDataSource() : ",
    "info" : "MethodDeclaration[11892-12057]:MethodDeclaration[11948-12113]"
  }, {
    "left" : "public setMetricRegistry(metricRegistry ) : void",
    "right" : "public setMetricRegistry(metricRegistry ) : void",
    "info" : "MethodDeclaration[12062-12418]:MethodDeclaration[12118-12474]"
  }, {
    "left" : "public setHealthCheckRegistry(healthCheckRegistry ) : void",
    "right" : "public setHealthCheckRegistry(healthCheckRegistry ) : void",
    "info" : "MethodDeclaration[12423-12654]:MethodDeclaration[12479-12710]"
  }, {
    "left" : "public logPoolState() : void",
    "right" : "public logPoolState() : void",
    "info" : "MethodDeclaration[12659-13188]:MethodDeclaration[12715-13244]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[13193-13299]:MethodDeclaration[13249-13355]"
  }, {
    "left" : "public addBagItem() : ",
    "right" : "public addBagItem() : ",
    "info" : "MethodDeclaration[13517-14376]:MethodDeclaration[13573-14432]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[13673-14288]:MethodDeclaration[13729-14344]"
  }, {
    "left" : "public getActiveConnections() : int",
    "right" : "public getActiveConnections() : int",
    "info" : "MethodDeclaration[14591-14728]:MethodDeclaration[14647-14784]"
  }, {
    "left" : "public getIdleConnections() : int",
    "right" : "public getIdleConnections() : int",
    "info" : "MethodDeclaration[14733-14872]:MethodDeclaration[14789-14928]"
  }, {
    "left" : "public getTotalConnections() : int",
    "right" : "public getTotalConnections() : int",
    "info" : "MethodDeclaration[14877-15037]:MethodDeclaration[14933-15093]"
  }, {
    "left" : "public getThreadsAwaitingConnection() : int",
    "right" : "public getThreadsAwaitingConnection() : int",
    "info" : "MethodDeclaration[15042-15182]:MethodDeclaration[15098-15238]"
  }, {
    "left" : "public softEvictConnections() : void",
    "right" : "public softEvictConnections() : void",
    "info" : "MethodDeclaration[15187-15587]:MethodDeclaration[15243-15643]"
  }, {
    "left" : "public suspendPool() : void",
    "right" : "public suspendPool() : void",
    "info" : "MethodDeclaration[15592-15980]:MethodDeclaration[15648-16036]"
  }, {
    "left" : "public resumePool() : void",
    "right" : "public resumePool() : void",
    "info" : "MethodDeclaration[15985-16216]:MethodDeclaration[16041-16272]"
  }, {
    "left" : "package closeConnection(bagEntry , closureReason ) : void",
    "right" : "package closeConnection(bagEntry , closureReason ) : void",
    "info" : "MethodDeclaration[16426-17275]:MethodDeclaration[16482-17331]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[17118-17249]:MethodDeclaration[17174-17305]"
  }, {
    "left" : "private addConnection() : boolean",
    "right" : "private addConnection() : boolean",
    "info" : "MethodDeclaration[17485-19709]:MethodDeclaration[17541-19765]"
  }, {
    "left" : "private fillPool() : void",
    "right" : "private fillPool() : void",
    "info" : "MethodDeclaration[19714-20368]:MethodDeclaration[19770-20424]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[20243-20342]:MethodDeclaration[20299-20398]"
  }, {
    "left" : "private isConnectionAlive(connection ) : boolean",
    "right" : "private isConnectionAlive(connection ) : boolean",
    "info" : "MethodDeclaration[20373-21623]:MethodDeclaration[20429-21679]"
  }, {
    "left" : "private abortActiveConnections(assassinExecutor ) : void",
    "right" : "private abortActiveConnections(assassinExecutor ) : void",
    "info" : "MethodDeclaration[21628-22343]:MethodDeclaration[21684-22399]"
  }, {
    "left" : "private initializeConnections() : void",
    "right" : "private initializeConnections() : void",
    "info" : "MethodDeclaration[22351-23098]:MethodDeclaration[22407-23154]"
  }, {
    "left" : "private getPoolStats() : ",
    "right" : "private getPoolStats() : ",
    "info" : "MethodDeclaration[23103-23585]:MethodDeclaration[23159-23641]"
  }, {
    "left" : "protected update() : void",
    "right" : "protected update() : void",
    "info" : "MethodDeclaration[23209-23571]:MethodDeclaration[23265-23627]"
  }, {
    "left" : "class : HouseKeeper",
    "right" : "class : HouseKeeper",
    "info" : "TypeDeclaration[23802-25408]:TypeDeclaration[23858-25464]"
  }, {
    "left" : "previous",
    "right" : "previous",
    "info" : "FieldDeclaration[23930-23989]:FieldDeclaration[23986-24045]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[23997-25403]:MethodDeclaration[24053-25459]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2646-2652]:Modifier[2702-2708]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2653-2658]:TYPE_DECLARATION_KIND[2709-2714]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4355-4361]:Modifier[4411-4417]"
  }, {
    "left" : "HikariPool",
    "right" : "HikariPool",
    "info" : "SimpleName[4362-4372]:SimpleName[4418-4428]"
  }, {
    "left" : "HikariConfig config",
    "right" : "HikariConfig config",
    "info" : "SingleVariableDeclaration[4373-4392]:SingleVariableDeclaration[4429-4448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4398-6926]:Block[4454-6982]"
  }, {
    "left" : "this.config = config;",
    "right" : "this.config = config;",
    "info" : "ExpressionStatement[4406-4427]:ExpressionStatement[4462-4483]"
  }, {
    "left" : "this.poolUtils = new PoolElf(config);",
    "right" : "this.poolUtils = new PoolElf(config);",
    "info" : "ExpressionStatement[4435-4472]:ExpressionStatement[4491-4528]"
  }, {
    "left" : "this.dataSource = poolUtils.initializeDataSource();",
    "right" : "this.dataSource = poolUtils.initializeDataSource();",
    "info" : "ExpressionStatement[4479-4530]:ExpressionStatement[4535-4586]"
  }, {
    "left" : "this.connectionBag = new ConcurrentBag<>(this);",
    "right" : "this.connectionBag = new ConcurrentBag<>(this);",
    "info" : "ExpressionStatement[4538-4585]:ExpressionStatement[4594-4641]"
  }, {
    "left" : "this.totalConnections = new AtomicInteger();",
    "right" : "this.totalConnections = new AtomicInteger();",
    "info" : "ExpressionStatement[4592-4636]:ExpressionStatement[4648-4692]"
  }, {
    "left" : "this.connectionTimeout = config.getConnectionTimeout();",
    "right" : "this.connectionTimeout = config.getConnectionTimeout();",
    "info" : "ExpressionStatement[4643-4698]:ExpressionStatement[4699-4754]"
  }, {
    "left" : "this.lastConnectionFailure = new AtomicReference<>();",
    "right" : "this.lastConnectionFailure = new AtomicReference<>();",
    "info" : "ExpressionStatement[4705-4758]:ExpressionStatement[4761-4814]"
  }, {
    "left" : "this.catalog = config.getCatalog();",
    "right" : "this.catalog = config.getCatalog();",
    "info" : "ExpressionStatement[4766-4801]:ExpressionStatement[4822-4857]"
  }, {
    "left" : "this.isReadOnly = config.isReadOnly();",
    "right" : "this.isReadOnly = config.isReadOnly();",
    "info" : "ExpressionStatement[4808-4846]:ExpressionStatement[4864-4902]"
  }, {
    "left" : "this.isAutoCommit = config.isAutoCommit();",
    "right" : "this.isAutoCommit = config.isAutoCommit();",
    "info" : "ExpressionStatement[4853-4895]:ExpressionStatement[4909-4951]"
  }, {
    "left" : "this.isUseJdbc4Validation = config.getConnectionTestQuery() == null;",
    "right" : "this.isUseJdbc4Validation = config.getConnectionTestQuery() == null;",
    "info" : "ExpressionStatement[4902-4970]:ExpressionStatement[4958-5026]"
  }, {
    "left" : "this.isIsolateInternalQueries = config.isIsolateInternalQueries();",
    "right" : "this.isIsolateInternalQueries = config.isIsolateInternalQueries();",
    "info" : "ExpressionStatement[4977-5043]:ExpressionStatement[5033-5099]"
  }, {
    "left" : "this.transactionIsolation = getTransactionIsolation(config.getTransactionIsolation());",
    "right" : "this.transactionIsolation = getTransactionIsolation(config.getTransactionIsolation());",
    "info" : "ExpressionStatement[5050-5136]:ExpressionStatement[5106-5192]"
  }, {
    "left" : "this.suspendResumeLock = config.isAllowPoolSuspension() ? new SuspendResumeLock(true) : SuspendResumeLock.FAUX_LOCK;",
    "right" : "this.suspendResumeLock = config.isAllowPoolSuspension() ? new SuspendResumeLock(true) : SuspendResumeLock.FAUX_LOCK;",
    "info" : "ExpressionStatement[5144-5260]:ExpressionStatement[5200-5316]"
  }, {
    "left" : "setMetricRegistry(config.getMetricRegistry());",
    "right" : "setMetricRegistry(config.getMetricRegistry());",
    "info" : "ExpressionStatement[5268-5314]:ExpressionStatement[5324-5370]"
  }, {
    "left" : "setHealthCheckRegistry(config.getHealthCheckRegistry());",
    "right" : "setHealthCheckRegistry(config.getHealthCheckRegistry());",
    "info" : "ExpressionStatement[5321-5377]:ExpressionStatement[5377-5433]"
  }, {
    "left" : "this.addConnectionExecutor = createThreadPoolExecutor(config.getMaximumPoolSize(), \"Hikari connection filler (pool \" + config.getPoolName() + \")\", config.getThreadFactory(), new ThreadPoolExecutor.DiscardPolicy());",
    "right" : "this.addConnectionExecutor = createThreadPoolExecutor(config.getMaximumPoolSize(), \"Hikari connection filler (pool \" + config.getPoolName() + \")\", config.getThreadFactory(), new ThreadPoolExecutor.DiscardPolicy());",
    "info" : "ExpressionStatement[5385-5599]:ExpressionStatement[5441-5655]"
  }, {
    "left" : "this.closeConnectionExecutor = createThreadPoolExecutor(4, \"Hikari connection closer (pool \" + config.getPoolName() + \")\", config.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy());",
    "right" : "this.closeConnectionExecutor = createThreadPoolExecutor(4, \"Hikari connection closer (pool \" + config.getPoolName() + \")\", config.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy());",
    "info" : "ExpressionStatement[5606-5799]:ExpressionStatement[5662-5855]"
  }, {
    "left" : "if (config.getScheduledExecutorService() == null)",
    "right" : "if (config.getScheduledExecutorService() == null)",
    "info" : "IfStatement[5807-6623]:IfStatement[5863-6679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5857-6520]:Block[5913-6576]"
  }, {
    "left" : "ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(\"Hikari housekeeper (pool \" + config.getPoolName() + \")\", true);",
    "right" : "ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(\"Hikari housekeeper (pool \" + config.getPoolName() + \")\", true);",
    "info" : "VariableDeclarationStatement[5868-6051]:VariableDeclarationStatement[5924-6107]"
  }, {
    "left" : "this.houseKeepingExecutorService = new ScheduledThreadPoolExecutor(1, threadFactory, new ThreadPoolExecutor.DiscardPolicy());",
    "right" : "this.houseKeepingExecutorService = new ScheduledThreadPoolExecutor(1, threadFactory, new ThreadPoolExecutor.DiscardPolicy());",
    "info" : "ExpressionStatement[6061-6186]:ExpressionStatement[6117-6242]"
  }, {
    "left" : "this.houseKeepingExecutorService.scheduleAtFixedRate(new HouseKeeper(), HOUSEKEEPING_PERIOD_MS, HOUSEKEEPING_PERIOD_MS, TimeUnit.MILLISECONDS);",
    "right" : "this.houseKeepingExecutorService.scheduleAtFixedRate(new HouseKeeper(), HOUSEKEEPING_PERIOD_MS, HOUSEKEEPING_PERIOD_MS, TimeUnit.MILLISECONDS);",
    "info" : "ExpressionStatement[6196-6339]:ExpressionStatement[6252-6395]"
  }, {
    "left" : "this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);",
    "right" : "this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);",
    "info" : "ExpressionStatement[6349-6439]:ExpressionStatement[6405-6495]"
  }, {
    "left" : "this.houseKeepingExecutorService.setRemoveOnCancelPolicy(true);",
    "right" : "this.houseKeepingExecutorService.setRemoveOnCancelPolicy(true);",
    "info" : "ExpressionStatement[6449-6512]:ExpressionStatement[6505-6568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6532-6623]:Block[6588-6679]"
  }, {
    "left" : "this.houseKeepingExecutorService = config.getScheduledExecutorService();",
    "right" : "this.houseKeepingExecutorService = config.getScheduledExecutorService();",
    "info" : "ExpressionStatement[6543-6615]:ExpressionStatement[6599-6671]"
  }, {
    "left" : "this.leakTask = (config.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(config.getLeakDetectionThreshold(), houseKeepingExecutorService);",
    "right" : "this.leakTask = (config.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(config.getLeakDetectionThreshold(), houseKeepingExecutorService);",
    "info" : "ExpressionStatement[6630-6787]:ExpressionStatement[6686-6843]"
  }, {
    "left" : "poolUtils.registerMBeans(this);",
    "right" : "poolUtils.registerMBeans(this);",
    "info" : "ExpressionStatement[6795-6826]:ExpressionStatement[6851-6882]"
  }, {
    "left" : "PropertyElf.flushCaches();",
    "right" : "PropertyElf.flushCaches();",
    "info" : "ExpressionStatement[6834-6860]:ExpressionStatement[6890-6916]"
  }, {
    "left" : "initializeConnections();",
    "right" : "initializeConnections();",
    "info" : "ExpressionStatement[6897-6921]:ExpressionStatement[6953-6977]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7167-7173]:Modifier[7223-7229]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[7174-7179]:Modifier[7230-7235]"
  }, {
    "left" : "Connection",
    "right" : "Connection",
    "info" : "SimpleType[7180-7190]:SimpleType[7236-7246]"
  }, {
    "left" : "getConnection",
    "right" : "getConnection",
    "info" : "SimpleName[7191-7204]:SimpleName[7247-7260]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[7214-7226]:SimpleType[7270-7282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7230-7283]:Block[7286-7339]"
  }, {
    "left" : "return getConnection(connectionTimeout);",
    "right" : "return getConnection(connectionTimeout);",
    "info" : "ReturnStatement[7238-7278]:ReturnStatement[7294-7334]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7611-7617]:Modifier[7667-7673]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[7618-7623]:Modifier[7674-7679]"
  }, {
    "left" : "Connection",
    "right" : "Connection",
    "info" : "SimpleType[7624-7634]:SimpleType[7680-7690]"
  }, {
    "left" : "getConnection",
    "right" : "getConnection",
    "info" : "SimpleName[7635-7648]:SimpleName[7691-7704]"
  }, {
    "left" : "final long hardTimeout",
    "right" : "final long hardTimeout",
    "info" : "SingleVariableDeclaration[7649-7671]:SingleVariableDeclaration[7705-7727]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[7680-7692]:SimpleType[7736-7748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7696-9339]:Block[7752-9395]"
  }, {
    "left" : "suspendResumeLock.acquire();",
    "right" : "suspendResumeLock.acquire();",
    "info" : "ExpressionStatement[7704-7732]:ExpressionStatement[7760-7788]"
  }, {
    "left" : "final long startTime = clockSource.currentTime();",
    "right" : "final long startTime = clockSource.currentTime();",
    "info" : "VariableDeclarationStatement[7739-7788]:VariableDeclarationStatement[7795-7844]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7796-9113]:TryStatement[7852-9169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7800-8923]:Block[7856-8979]"
  }, {
    "left" : "long timeout = hardTimeout;",
    "right" : "long timeout = hardTimeout;",
    "info" : "VariableDeclarationStatement[7811-7838]:VariableDeclarationStatement[7867-7894]"
  }, {
    "left" : "final MetricsContext metricsContext = (isRecordMetrics ? metricsTracker.recordConnectionRequest() : MetricsTracker.NO_CONTEXT);",
    "right" : "final MetricsContext metricsContext = (isRecordMetrics ? metricsTracker.recordConnectionRequest() : MetricsTracker.NO_CONTEXT);",
    "info" : "VariableDeclarationStatement[7848-7975]:VariableDeclarationStatement[7904-8031]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[7985-8915]:DoStatement[8041-8971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7988-8884]:Block[8044-8940]"
  }, {
    "left" : "final PoolBagEntry bagEntry = connectionBag.borrow(timeout, TimeUnit.MILLISECONDS);",
    "right" : "final PoolBagEntry bagEntry = connectionBag.borrow(timeout, TimeUnit.MILLISECONDS);",
    "info" : "VariableDeclarationStatement[8002-8085]:VariableDeclarationStatement[8058-8141]"
  }, {
    "left" : "if (bagEntry == null)",
    "right" : "if (bagEntry == null)",
    "info" : "IfStatement[8098-8202]:IfStatement[8154-8258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8120-8202]:Block[8176-8258]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8137-8143]:BreakStatement[8193-8199]"
  }, {
    "left" : "final long now = clockSource.currentTime();",
    "right" : "final long now = clockSource.currentTime();",
    "info" : "VariableDeclarationStatement[8216-8259]:VariableDeclarationStatement[8272-8315]"
  }, {
    "left" : "if (bagEntry.evicted || (clockSource.elapsedMillis(bagEntry.lastAccess, now) > ALIVE_BYPASS_WINDOW_MS && !isConnectionAlive(bagEntry.connection)))",
    "right" : "if (bagEntry.evicted || (clockSource.elapsedMillis(bagEntry.lastAccess, now) > ALIVE_BYPASS_WINDOW_MS && !isConnectionAlive(bagEntry.connection)))",
    "info" : "IfStatement[8272-8873]:IfStatement[8328-8929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8419-8638]:Block[8475-8694]"
  }, {
    "left" : "closeConnection(bagEntry, \"(connection evicted or dead)\");",
    "right" : "closeConnection(bagEntry, \"(connection evicted or dead)\");",
    "info" : "ExpressionStatement[8436-8494]:ExpressionStatement[8492-8550]"
  }, {
    "left" : "timeout = hardTimeout - clockSource.elapsedMillis(startTime, now);",
    "right" : "timeout = hardTimeout - clockSource.elapsedMillis(startTime, now);",
    "info" : "ExpressionStatement[8558-8624]:ExpressionStatement[8614-8680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8656-8873]:Block[8712-8929]"
  }, {
    "left" : "metricsContext.setConnectionLastOpen(bagEntry, now);",
    "right" : "metricsContext.setConnectionLastOpen(bagEntry, now);",
    "info" : "ExpressionStatement[8673-8725]:ExpressionStatement[8729-8781]"
  }, {
    "left" : "metricsContext.stop();",
    "right" : "metricsContext.stop();",
    "info" : "ExpressionStatement[8741-8763]:ExpressionStatement[8797-8819]"
  }, {
    "left" : "return ProxyFactory.getProxyConnection(bagEntry, leakTask.start(bagEntry), now);",
    "right" : "return ProxyFactory.getProxyConnection(bagEntry, leakTask.start(bagEntry), now);",
    "info" : "ReturnStatement[8779-8859]:ReturnStatement[8835-8915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8961-9051]:Block[9017-9107]"
  }, {
    "left" : "throw new SQLException(\"Interrupted during connection acquisition\", e);",
    "right" : "throw new SQLException(\"Interrupted during connection acquisition\", e);",
    "info" : "ThrowStatement[8972-9043]:ThrowStatement[9028-9099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9066-9113]:Block[9122-9169]"
  }, {
    "left" : "suspendResumeLock.release();",
    "right" : "suspendResumeLock.release();",
    "info" : "ExpressionStatement[9077-9105]:ExpressionStatement[9133-9161]"
  }, {
    "left" : "logPoolState(\"Timeout failure \");",
    "right" : "logPoolState(\"Timeout failure \");",
    "info" : "ExpressionStatement[9121-9154]:ExpressionStatement[9177-9210]"
  }, {
    "left" : "throw new SQLTimeoutException(String.format(\"Timeout after %dms of waiting for a connection.\", clockSource.elapsedMillis(startTime), lastConnectionFailure.getAndSet(null)));",
    "right" : "throw new SQLTimeoutException(String.format(\"Timeout after %dms of waiting for a connection.\", clockSource.elapsedMillis(startTime), lastConnectionFailure.getAndSet(null)));",
    "info" : "ThrowStatement[9161-9334]:ThrowStatement[9217-9390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9517-9523]:Modifier[9573-9579]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[9524-9529]:Modifier[9580-9585]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9530-9534]:PrimitiveType[9586-9590]"
  }, {
    "left" : "releaseConnection",
    "right" : "releaseConnection",
    "info" : "SimpleName[9535-9552]:SimpleName[9591-9608]"
  }, {
    "left" : "final PoolBagEntry bagEntry",
    "right" : "final PoolBagEntry bagEntry",
    "info" : "SingleVariableDeclaration[9553-9580]:SingleVariableDeclaration[9609-9636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9585-9817]:Block[9641-9873]"
  }, {
    "left" : "metricsTracker.recordConnectionUsage(bagEntry);",
    "right" : "metricsTracker.recordConnectionUsage(bagEntry);",
    "info" : "ExpressionStatement[9593-9640]:ExpressionStatement[9649-9696]"
  }, {
    "left" : "if (bagEntry.evicted)",
    "right" : "if (bagEntry.evicted)",
    "info" : "IfStatement[9648-9812]:IfStatement[9704-9868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9670-9749]:Block[9726-9805]"
  }, {
    "left" : "closeConnection(bagEntry, \"(connection broken or evicted)\");",
    "right" : "closeConnection(bagEntry, \"(connection broken or evicted)\");",
    "info" : "ExpressionStatement[9681-9741]:ExpressionStatement[9737-9797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9761-9812]:Block[9817-9868]"
  }, {
    "left" : "connectionBag.requite(bagEntry);",
    "right" : "connectionBag.requite(bagEntry);",
    "info" : "ExpressionStatement[9772-9804]:ExpressionStatement[9828-9860]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10033-10039]:Modifier[10089-10095]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[10040-10045]:Modifier[10096-10101]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[10046-10058]:Modifier[10102-10114]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10059-10063]:PrimitiveType[10115-10119]"
  }, {
    "left" : "shutdown",
    "right" : "shutdown",
    "info" : "SimpleName[10064-10072]:SimpleName[10120-10128]"
  }, {
    "left" : "InterruptedException",
    "right" : "InterruptedException",
    "info" : "SimpleType[10082-10102]:SimpleType[10138-10158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10106-11596]:Block[10162-11652]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10114-11591]:TryStatement[10170-11647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10118-11452]:Block[10174-11508]"
  }, {
    "left" : "poolState = POOL_SHUTDOWN;",
    "right" : "poolState = POOL_SHUTDOWN;",
    "info" : "ExpressionStatement[10129-10155]:ExpressionStatement[10185-10211]"
  }, {
    "left" : "LOGGER.info(\"Hikari pool {} is shutting down.\", config.getPoolName());",
    "right" : "LOGGER.info(\"Hikari pool {} is shutting down.\", config.getPoolName());",
    "info" : "ExpressionStatement[10166-10236]:ExpressionStatement[10222-10292]"
  }, {
    "left" : "logPoolState(\"Before shutdown \");",
    "right" : "logPoolState(\"Before shutdown \");",
    "info" : "ExpressionStatement[10247-10280]:ExpressionStatement[10303-10336]"
  }, {
    "left" : "connectionBag.close();",
    "right" : "connectionBag.close();",
    "info" : "ExpressionStatement[10290-10312]:ExpressionStatement[10346-10368]"
  }, {
    "left" : "softEvictConnections();",
    "right" : "softEvictConnections();",
    "info" : "ExpressionStatement[10322-10345]:ExpressionStatement[10378-10401]"
  }, {
    "left" : "houseKeepingExecutorService.shutdown();",
    "right" : "houseKeepingExecutorService.shutdown();",
    "info" : "ExpressionStatement[10355-10394]:ExpressionStatement[10411-10450]"
  }, {
    "left" : "addConnectionExecutor.shutdownNow();",
    "right" : "addConnectionExecutor.shutdownNow();",
    "info" : "ExpressionStatement[10404-10440]:ExpressionStatement[10460-10496]"
  }, {
    "left" : "houseKeepingExecutorService.awaitTermination(5L, TimeUnit.SECONDS);",
    "right" : "houseKeepingExecutorService.awaitTermination(5L, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[10450-10517]:ExpressionStatement[10506-10573]"
  }, {
    "left" : "addConnectionExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "right" : "addConnectionExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[10527-10588]:ExpressionStatement[10583-10644]"
  }, {
    "left" : "final ExecutorService assassinExecutor = createThreadPoolExecutor(config.getMaximumPoolSize(), \"Hikari connection assassin\",\n                                                                           config.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy());",
    "right" : "final ExecutorService assassinExecutor = createThreadPoolExecutor(config.getMaximumPoolSize(), \"Hikari connection assassin\",\n                                                                           config.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy());",
    "info" : "VariableDeclarationStatement[10599-10869]:VariableDeclarationStatement[10655-10925]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10879-11325]:TryStatement[10935-11381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10883-11194]:Block[10939-11250]"
  }, {
    "left" : "final long start = clockSource.currentTime();",
    "right" : "final long start = clockSource.currentTime();",
    "info" : "VariableDeclarationStatement[10897-10942]:VariableDeclarationStatement[10953-10998]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[10955-11183]:DoStatement[11011-11239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10958-11069]:Block[11014-11125]"
  }, {
    "left" : "softEvictConnections();",
    "right" : "softEvictConnections();",
    "info" : "ExpressionStatement[10975-10998]:ExpressionStatement[11031-11054]"
  }, {
    "left" : "abortActiveConnections(assassinExecutor);",
    "right" : "abortActiveConnections(assassinExecutor);",
    "info" : "ExpressionStatement[11014-11055]:ExpressionStatement[11070-11111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11203-11325]:Block[11259-11381]"
  }, {
    "left" : "assassinExecutor.shutdown();",
    "right" : "assassinExecutor.shutdown();",
    "info" : "ExpressionStatement[11217-11245]:ExpressionStatement[11273-11301]"
  }, {
    "left" : "assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "right" : "assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[11258-11314]:ExpressionStatement[11314-11370]"
  }, {
    "left" : "closeConnectionExecutor.shutdown();",
    "right" : "closeConnectionExecutor.shutdown();",
    "info" : "ExpressionStatement[11336-11371]:ExpressionStatement[11392-11427]"
  }, {
    "left" : "closeConnectionExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "right" : "closeConnectionExecutor.awaitTermination(5L, TimeUnit.SECONDS);",
    "info" : "ExpressionStatement[11381-11444]:ExpressionStatement[11437-11500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11467-11591]:Block[11523-11647]"
  }, {
    "left" : "logPoolState(\"After shutdown \");",
    "right" : "logPoolState(\"After shutdown \");",
    "info" : "ExpressionStatement[11478-11510]:ExpressionStatement[11534-11566]"
  }, {
    "left" : "poolUtils.unregisterMBeans();",
    "right" : "poolUtils.unregisterMBeans();",
    "info" : "ExpressionStatement[11521-11550]:ExpressionStatement[11577-11606]"
  }, {
    "left" : "metricsTracker.close();",
    "right" : "metricsTracker.close();",
    "info" : "ExpressionStatement[11560-11583]:ExpressionStatement[11616-11639]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11714-11720]:Modifier[11770-11776]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11721-11726]:Modifier[11777-11782]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11727-11731]:PrimitiveType[11783-11787]"
  }, {
    "left" : "evictConnection",
    "right" : "evictConnection",
    "info" : "SimpleName[11732-11747]:SimpleName[11788-11803]"
  }, {
    "left" : "IHikariConnectionProxy proxyConnection",
    "right" : "IHikariConnectionProxy proxyConnection",
    "info" : "SingleVariableDeclaration[11748-11786]:SingleVariableDeclaration[11804-11842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11791-11887]:Block[11847-11943]"
  }, {
    "left" : "closeConnection(proxyConnection.getPoolBagEntry(), \"(connection evicted by user)\");",
    "right" : "closeConnection(proxyConnection.getPoolBagEntry(), \"(connection evicted by user)\");",
    "info" : "ExpressionStatement[11799-11882]:ExpressionStatement[11855-11938]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11983-11989]:Modifier[12039-12045]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11990-11995]:Modifier[12046-12051]"
  }, {
    "left" : "DataSource",
    "right" : "DataSource",
    "info" : "SimpleType[11996-12006]:SimpleType[12052-12062]"
  }, {
    "left" : "getDataSource",
    "right" : "getDataSource",
    "info" : "SimpleName[12007-12020]:SimpleName[12063-12076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12026-12057]:Block[12082-12113]"
  }, {
    "left" : "return dataSource;",
    "right" : "return dataSource;",
    "info" : "ReturnStatement[12034-12052]:ReturnStatement[12090-12108]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12062-12068]:Modifier[12118-12124]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12069-12073]:PrimitiveType[12125-12129]"
  }, {
    "left" : "setMetricRegistry",
    "right" : "setMetricRegistry",
    "info" : "SimpleName[12074-12091]:SimpleName[12130-12147]"
  }, {
    "left" : "Object metricRegistry",
    "right" : "Object metricRegistry",
    "info" : "SingleVariableDeclaration[12092-12113]:SingleVariableDeclaration[12148-12169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12118-12418]:Block[12174-12474]"
  }, {
    "left" : "this.isRecordMetrics = metricRegistry != null;",
    "right" : "this.isRecordMetrics = metricRegistry != null;",
    "info" : "ExpressionStatement[12126-12172]:ExpressionStatement[12182-12228]"
  }, {
    "left" : "if (isRecordMetrics)",
    "right" : "if (isRecordMetrics)",
    "info" : "IfStatement[12179-12413]:IfStatement[12235-12469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12200-12339]:Block[12256-12395]"
  }, {
    "left" : "this.metricsTracker = new CodaHaleMetricsTracker(config.getPoolName(), getPoolStats(), (MetricRegistry) metricRegistry);",
    "right" : "this.metricsTracker = new CodaHaleMetricsTracker(config.getPoolName(), getPoolStats(), (MetricRegistry) metricRegistry);",
    "info" : "ExpressionStatement[12211-12331]:ExpressionStatement[12267-12387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12351-12413]:Block[12407-12469]"
  }, {
    "left" : "this.metricsTracker = new MetricsTracker();",
    "right" : "this.metricsTracker = new MetricsTracker();",
    "info" : "ExpressionStatement[12362-12405]:ExpressionStatement[12418-12461]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12423-12429]:Modifier[12479-12485]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12430-12434]:PrimitiveType[12486-12490]"
  }, {
    "left" : "setHealthCheckRegistry",
    "right" : "setHealthCheckRegistry",
    "info" : "SimpleName[12435-12457]:SimpleName[12491-12513]"
  }, {
    "left" : "Object healthCheckRegistry",
    "right" : "Object healthCheckRegistry",
    "info" : "SingleVariableDeclaration[12458-12484]:SingleVariableDeclaration[12514-12540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12489-12654]:Block[12545-12710]"
  }, {
    "left" : "if (healthCheckRegistry != null)",
    "right" : "if (healthCheckRegistry != null)",
    "info" : "IfStatement[12497-12649]:IfStatement[12553-12705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12530-12649]:Block[12586-12705]"
  }, {
    "left" : "CodahaleHealthChecker.registerHealthChecks(this, config, (HealthCheckRegistry) healthCheckRegistry);",
    "right" : "CodahaleHealthChecker.registerHealthChecks(this, config, (HealthCheckRegistry) healthCheckRegistry);",
    "info" : "ExpressionStatement[12541-12641]:ExpressionStatement[12597-12697]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12795-12801]:Modifier[12851-12857]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12802-12807]:Modifier[12858-12863]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12808-12812]:PrimitiveType[12864-12868]"
  }, {
    "left" : "logPoolState",
    "right" : "logPoolState",
    "info" : "SimpleName[12813-12825]:SimpleName[12869-12881]"
  }, {
    "left" : "String... prefix",
    "right" : "String... prefix",
    "info" : "SingleVariableDeclaration[12826-12842]:SingleVariableDeclaration[12882-12898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12847-13188]:Block[12903-13244]"
  }, {
    "left" : "if (LOGGER.isDebugEnabled())",
    "right" : "if (LOGGER.isDebugEnabled())",
    "info" : "IfStatement[12855-13183]:IfStatement[12911-13239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12884-13183]:Block[12940-13239]"
  }, {
    "left" : "LOGGER.debug(\"{}pool {} stats (total={}, active={}, idle={}, waiting={})\",\n                      (prefix.length > 0 ? prefix[0] : \"\"), config.getPoolName(),\n                      getTotalConnections(), getActiveConnections(), getIdleConnections(), getThreadsAwaitingConnection());",
    "right" : "LOGGER.debug(\"{}pool {} stats (total={}, active={}, idle={}, waiting={})\",\n                      (prefix.length > 0 ? prefix[0] : \"\"), config.getPoolName(),\n                      getTotalConnections(), getActiveConnections(), getIdleConnections(), getThreadsAwaitingConnection());",
    "info" : "ExpressionStatement[12895-13175]:ExpressionStatement[12951-13231]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13217-13226]:MarkerAnnotation[13273-13282]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13230-13236]:Modifier[13286-13292]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13237-13243]:SimpleType[13293-13299]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[13244-13252]:SimpleName[13300-13308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13258-13299]:Block[13314-13355]"
  }, {
    "left" : "return config.getPoolName();",
    "right" : "return config.getPoolName();",
    "info" : "ReturnStatement[13266-13294]:ReturnStatement[13322-13350]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13541-13550]:MarkerAnnotation[13597-13606]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13554-13560]:Modifier[13610-13616]"
  }, {
    "left" : "Future<Boolean>",
    "right" : "Future<Boolean>",
    "info" : "ParameterizedType[13561-13576]:ParameterizedType[13617-13632]"
  }, {
    "left" : "addBagItem",
    "right" : "addBagItem",
    "info" : "SimpleName[13577-13587]:SimpleName[13633-13643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13593-14376]:Block[13649-14432]"
  }, {
    "left" : "FutureTask<Boolean> future = new FutureTask<>(new Runnable() {\n         @Override\n         public void run()\n         {\n            long sleepBackoff = 200L;\n            final int minimumIdle = config.getMinimumIdle();\n            final int maxPoolSize = config.getMaximumPoolSize();\n            while (poolState == POOL_NORMAL && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {\n               // If we got into the loop, addConnection() failed, so we sleep and retry\n               quietlySleep(sleepBackoff);\n               sleepBackoff = Math.min(connectionTimeout / 2, (long) ((double) sleepBackoff * 1.5));\n            }\n         }\n      }, true);",
    "right" : "FutureTask<Boolean> future = new FutureTask<>(new Runnable() {\n         @Override\n         public void run()\n         {\n            long sleepBackoff = 200L;\n            final int minimumIdle = config.getMinimumIdle();\n            final int maxPoolSize = config.getMaximumPoolSize();\n            while (poolState == POOL_NORMAL && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {\n               // If we got into the loop, addConnection() failed, so we sleep and retry\n               quietlySleep(sleepBackoff);\n               sleepBackoff = Math.min(connectionTimeout / 2, (long) ((double) sleepBackoff * 1.5));\n            }\n         }\n      }, true);",
    "info" : "VariableDeclarationStatement[13601-14304]:VariableDeclarationStatement[13657-14360]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13673-13682]:MarkerAnnotation[13729-13738]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13692-13698]:Modifier[13748-13754]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13699-13703]:PrimitiveType[13755-13759]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[13704-13707]:SimpleName[13760-13763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13719-14288]:Block[13775-14344]"
  }, {
    "left" : "long sleepBackoff = 200L;",
    "right" : "long sleepBackoff = 200L;",
    "info" : "VariableDeclarationStatement[13733-13758]:VariableDeclarationStatement[13789-13814]"
  }, {
    "left" : "final int minimumIdle = config.getMinimumIdle();",
    "right" : "final int minimumIdle = config.getMinimumIdle();",
    "info" : "VariableDeclarationStatement[13771-13819]:VariableDeclarationStatement[13827-13875]"
  }, {
    "left" : "final int maxPoolSize = config.getMaximumPoolSize();",
    "right" : "final int maxPoolSize = config.getMaximumPoolSize();",
    "info" : "VariableDeclarationStatement[13832-13884]:VariableDeclarationStatement[13888-13940]"
  }, {
    "left" : "while (poolState == POOL_NORMAL && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection())",
    "right" : "while (poolState == POOL_NORMAL && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection())",
    "info" : "WhileStatement[13897-14277]:WhileStatement[13953-14333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14029-14277]:Block[14085-14333]"
  }, {
    "left" : "quietlySleep(sleepBackoff);",
    "right" : "quietlySleep(sleepBackoff);",
    "info" : "ExpressionStatement[14135-14162]:ExpressionStatement[14191-14218]"
  }, {
    "left" : "sleepBackoff = Math.min(connectionTimeout / 2, (long) ((double) sleepBackoff * 1.5));",
    "right" : "sleepBackoff = Math.min(connectionTimeout / 2, (long) ((double) sleepBackoff * 1.5));",
    "info" : "ExpressionStatement[14178-14263]:ExpressionStatement[14234-14319]"
  }, {
    "left" : "addConnectionExecutor.execute(future);",
    "right" : "addConnectionExecutor.execute(future);",
    "info" : "ExpressionStatement[14312-14350]:ExpressionStatement[14368-14406]"
  }, {
    "left" : "return future;",
    "right" : "return future;",
    "info" : "ReturnStatement[14357-14371]:ReturnStatement[14413-14427]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14615-14624]:MarkerAnnotation[14671-14680]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14628-14634]:Modifier[14684-14690]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[14635-14640]:Modifier[14691-14696]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14641-14644]:PrimitiveType[14697-14700]"
  }, {
    "left" : "getActiveConnections",
    "right" : "getActiveConnections",
    "info" : "SimpleName[14645-14665]:SimpleName[14701-14721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14671-14728]:Block[14727-14784]"
  }, {
    "left" : "return connectionBag.getCount(STATE_IN_USE);",
    "right" : "return connectionBag.getCount(STATE_IN_USE);",
    "info" : "ReturnStatement[14679-14723]:ReturnStatement[14735-14779]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14757-14766]:MarkerAnnotation[14813-14822]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14770-14776]:Modifier[14826-14832]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[14777-14782]:Modifier[14833-14838]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14783-14786]:PrimitiveType[14839-14842]"
  }, {
    "left" : "getIdleConnections",
    "right" : "getIdleConnections",
    "info" : "SimpleName[14787-14805]:SimpleName[14843-14861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14811-14872]:Block[14867-14928]"
  }, {
    "left" : "return connectionBag.getCount(STATE_NOT_IN_USE);",
    "right" : "return connectionBag.getCount(STATE_NOT_IN_USE);",
    "info" : "ReturnStatement[14819-14867]:ReturnStatement[14875-14923]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14901-14910]:MarkerAnnotation[14957-14966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14914-14920]:Modifier[14970-14976]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[14921-14926]:Modifier[14977-14982]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14927-14930]:PrimitiveType[14983-14986]"
  }, {
    "left" : "getTotalConnections",
    "right" : "getTotalConnections",
    "info" : "SimpleName[14931-14950]:SimpleName[14987-15006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14956-15037]:Block[15012-15093]"
  }, {
    "left" : "return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);",
    "right" : "return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);",
    "info" : "ReturnStatement[14964-15032]:ReturnStatement[15020-15088]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15066-15075]:MarkerAnnotation[15122-15131]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15079-15085]:Modifier[15135-15141]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[15086-15091]:Modifier[15142-15147]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15092-15095]:PrimitiveType[15148-15151]"
  }, {
    "left" : "getThreadsAwaitingConnection",
    "right" : "getThreadsAwaitingConnection",
    "info" : "SimpleName[15096-15124]:SimpleName[15152-15180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15130-15182]:Block[15186-15238]"
  }, {
    "left" : "return connectionBag.getPendingQueue();",
    "right" : "return connectionBag.getPendingQueue();",
    "info" : "ReturnStatement[15138-15177]:ReturnStatement[15194-15233]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15211-15220]:MarkerAnnotation[15267-15276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15224-15230]:Modifier[15280-15286]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15231-15235]:PrimitiveType[15287-15291]"
  }, {
    "left" : "softEvictConnections",
    "right" : "softEvictConnections",
    "info" : "SimpleName[15236-15256]:SimpleName[15292-15312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15262-15587]:Block[15318-15643]"
  }, {
    "left" : "for (PoolBagEntry bagEntry : connectionBag.values())",
    "right" : "for (PoolBagEntry bagEntry : connectionBag.values())",
    "info" : "EnhancedForStatement[15270-15366]:EnhancedForStatement[15326-15422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15323-15366]:Block[15379-15422]"
  }, {
    "left" : "bagEntry.evicted = true;",
    "right" : "bagEntry.evicted = true;",
    "info" : "ExpressionStatement[15334-15358]:ExpressionStatement[15390-15414]"
  }, {
    "left" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_NOT_IN_USE))",
    "right" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_NOT_IN_USE))",
    "info" : "EnhancedForStatement[15374-15582]:EnhancedForStatement[15430-15638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15443-15582]:Block[15499-15638]"
  }, {
    "left" : "if (connectionBag.reserve(bagEntry))",
    "right" : "if (connectionBag.reserve(bagEntry))",
    "info" : "IfStatement[15454-15574]:IfStatement[15510-15630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15491-15574]:Block[15547-15630]"
  }, {
    "left" : "closeConnection(bagEntry, \"(connection evicted by user)\");",
    "right" : "closeConnection(bagEntry, \"(connection evicted by user)\");",
    "info" : "ExpressionStatement[15505-15563]:ExpressionStatement[15561-15619]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15616-15625]:MarkerAnnotation[15672-15681]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15629-15635]:Modifier[15685-15691]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[15636-15641]:Modifier[15692-15697]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[15642-15654]:Modifier[15698-15710]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15655-15659]:PrimitiveType[15711-15715]"
  }, {
    "left" : "suspendPool",
    "right" : "suspendPool",
    "info" : "SimpleName[15660-15671]:SimpleName[15716-15727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15677-15980]:Block[15733-16036]"
  }, {
    "left" : "if (suspendResumeLock == SuspendResumeLock.FAUX_LOCK)",
    "right" : "if (suspendResumeLock == SuspendResumeLock.FAUX_LOCK)",
    "info" : "IfStatement[15685-15975]:IfStatement[15741-16031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15739-15846]:Block[15795-15902]"
  }, {
    "left" : "throw new IllegalStateException(\"Pool \" + config.getPoolName() + \" is not suspendable\");",
    "right" : "throw new IllegalStateException(\"Pool \" + config.getPoolName() + \" is not suspendable\");",
    "info" : "ThrowStatement[15750-15838]:ThrowStatement[15806-15894]"
  }, {
    "left" : "if (poolState != POOL_SUSPENDED)",
    "right" : "if (poolState != POOL_SUSPENDED)",
    "info" : "IfStatement[15858-15975]:IfStatement[15914-16031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15891-15975]:Block[15947-16031]"
  }, {
    "left" : "suspendResumeLock.suspend();",
    "right" : "suspendResumeLock.suspend();",
    "info" : "ExpressionStatement[15902-15930]:ExpressionStatement[15958-15986]"
  }, {
    "left" : "poolState = POOL_SUSPENDED;",
    "right" : "poolState = POOL_SUSPENDED;",
    "info" : "ExpressionStatement[15940-15967]:ExpressionStatement[15996-16023]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16009-16018]:MarkerAnnotation[16065-16074]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16022-16028]:Modifier[16078-16084]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[16029-16034]:Modifier[16085-16090]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[16035-16047]:Modifier[16091-16103]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16048-16052]:PrimitiveType[16104-16108]"
  }, {
    "left" : "resumePool",
    "right" : "resumePool",
    "info" : "SimpleName[16053-16063]:SimpleName[16109-16119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16069-16216]:Block[16125-16272]"
  }, {
    "left" : "if (poolState == POOL_SUSPENDED)",
    "right" : "if (poolState == POOL_SUSPENDED)",
    "info" : "IfStatement[16077-16211]:IfStatement[16133-16267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16110-16211]:Block[16166-16267]"
  }, {
    "left" : "poolState = POOL_NORMAL;",
    "right" : "poolState = POOL_NORMAL;",
    "info" : "ExpressionStatement[16121-16145]:ExpressionStatement[16177-16201]"
  }, {
    "left" : "fillPool();",
    "right" : "fillPool();",
    "info" : "ExpressionStatement[16155-16166]:ExpressionStatement[16211-16222]"
  }, {
    "left" : "suspendResumeLock.resume();",
    "right" : "suspendResumeLock.resume();",
    "info" : "ExpressionStatement[16176-16203]:ExpressionStatement[16232-16259]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16579-16583]:PrimitiveType[16635-16639]"
  }, {
    "left" : "closeConnection",
    "right" : "closeConnection",
    "info" : "SimpleName[16584-16599]:SimpleName[16640-16655]"
  }, {
    "left" : "final PoolBagEntry bagEntry",
    "right" : "final PoolBagEntry bagEntry",
    "info" : "SingleVariableDeclaration[16600-16627]:SingleVariableDeclaration[16656-16683]"
  }, {
    "left" : "final String closureReason",
    "right" : "final String closureReason",
    "info" : "SingleVariableDeclaration[16629-16655]:SingleVariableDeclaration[16685-16711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16660-17275]:Block[16716-17331]"
  }, {
    "left" : "final Connection connection = bagEntry.connection;",
    "right" : "final Connection connection = bagEntry.connection;",
    "info" : "VariableDeclarationStatement[16668-16718]:VariableDeclarationStatement[16724-16774]"
  }, {
    "left" : "bagEntry.connection = null;",
    "right" : "bagEntry.connection = null;",
    "info" : "ExpressionStatement[16725-16752]:ExpressionStatement[16781-16808]"
  }, {
    "left" : "bagEntry.cancelMaxLifeTermination();",
    "right" : "bagEntry.cancelMaxLifeTermination();",
    "info" : "ExpressionStatement[16759-16795]:ExpressionStatement[16815-16851]"
  }, {
    "left" : "if (connectionBag.remove(bagEntry))",
    "right" : "if (connectionBag.remove(bagEntry))",
    "info" : "IfStatement[16802-17270]:IfStatement[16858-17326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16838-17270]:Block[16894-17326]"
  }, {
    "left" : "final int tc = totalConnections.decrementAndGet();",
    "right" : "final int tc = totalConnections.decrementAndGet();",
    "info" : "VariableDeclarationStatement[16849-16899]:VariableDeclarationStatement[16905-16955]"
  }, {
    "left" : "if (tc < 0)",
    "right" : "if (tc < 0)",
    "info" : "IfStatement[16909-17037]:IfStatement[16965-17093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16921-17037]:Block[16977-17093]"
  }, {
    "left" : "LOGGER.warn(\"Internal accounting inconsistency, totalConnections={}\", tc, new Exception());",
    "right" : "LOGGER.warn(\"Internal accounting inconsistency, totalConnections={}\", tc, new Exception());",
    "info" : "ExpressionStatement[16935-17026]:ExpressionStatement[16991-17082]"
  }, {
    "left" : "closeConnectionExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n               poolUtils.quietlyCloseConnection(connection, closureReason);\n            }\n         });",
    "right" : "closeConnectionExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n               poolUtils.quietlyCloseConnection(connection, closureReason);\n            }\n         });",
    "info" : "ExpressionStatement[17057-17262]:ExpressionStatement[17113-17318]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17118-17127]:MarkerAnnotation[17174-17183]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17140-17146]:Modifier[17196-17202]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17147-17151]:PrimitiveType[17203-17207]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[17152-17155]:SimpleName[17208-17211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17158-17249]:Block[17214-17305]"
  }, {
    "left" : "poolUtils.quietlyCloseConnection(connection, closureReason);",
    "right" : "poolUtils.quietlyCloseConnection(connection, closureReason);",
    "info" : "ExpressionStatement[17175-17235]:ExpressionStatement[17231-17291]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17553-17560]:Modifier[17609-17616]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17561-17568]:PrimitiveType[17617-17624]"
  }, {
    "left" : "addConnection",
    "right" : "addConnection",
    "info" : "SimpleName[17569-17582]:SimpleName[17625-17638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17588-19709]:Block[17644-19765]"
  }, {
    "left" : "if (totalConnections.incrementAndGet() > config.getMaximumPoolSize())",
    "right" : "if (totalConnections.incrementAndGet() > config.getMaximumPoolSize())",
    "info" : "IfStatement[17675-18013]:IfStatement[17731-18069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17745-18013]:Block[17801-18069]"
  }, {
    "left" : "totalConnections.decrementAndGet();",
    "right" : "totalConnections.decrementAndGet();",
    "info" : "ExpressionStatement[17756-17791]:ExpressionStatement[17812-17847]"
  }, {
    "left" : "lastConnectionFailure.set(new SQLException(\"Hikari pool \" + config.getPoolName() +\" is at maximum capacity\"));",
    "right" : "lastConnectionFailure.set(new SQLException(\"Hikari pool \" + config.getPoolName() +\" is at maximum capacity\"));",
    "info" : "ExpressionStatement[17873-17983]:ExpressionStatement[17929-18039]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17993-18005]:ReturnStatement[18049-18061]"
  }, {
    "left" : "Connection connection = null;",
    "right" : "Connection connection = null;",
    "info" : "VariableDeclarationStatement[18021-18050]:VariableDeclarationStatement[18077-18106]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[18057-19704]:TryStatement[18113-19760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18061-19225]:Block[18117-19281]"
  }, {
    "left" : "String username = config.getUsername();",
    "right" : "String username = config.getUsername();",
    "info" : "VariableDeclarationStatement[18072-18111]:VariableDeclarationStatement[18128-18167]"
  }, {
    "left" : "String password = config.getPassword();",
    "right" : "String password = config.getPassword();",
    "info" : "VariableDeclarationStatement[18121-18160]:VariableDeclarationStatement[18177-18216]"
  }, {
    "left" : "connection = (username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username, password);",
    "right" : "connection = (username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username, password);",
    "info" : "ExpressionStatement[18171-18299]:ExpressionStatement[18227-18355]"
  }, {
    "left" : "if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection))",
    "right" : "if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection))",
    "info" : "IfStatement[18319-18539]:IfStatement[18375-18595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18398-18539]:Block[18454-18595]"
  }, {
    "left" : "throw new SQLException(\"JDBC4 Connection.isValid() method not supported, connection test query must be configured\");",
    "right" : "throw new SQLException(\"JDBC4 Connection.isValid() method not supported, connection test query must be configured\");",
    "info" : "ThrowStatement[18412-18528]:ThrowStatement[18468-18584]"
  }, {
    "left" : "final int originalTimeout = poolUtils.getAndSetNetworkTimeout(connection, connectionTimeout);",
    "right" : "final int originalTimeout = poolUtils.getAndSetNetworkTimeout(connection, connectionTimeout);",
    "info" : "VariableDeclarationStatement[18550-18643]:VariableDeclarationStatement[18606-18699]"
  }, {
    "left" : "transactionIsolation = (transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);",
    "right" : "transactionIsolation = (transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);",
    "info" : "ExpressionStatement[18654-18766]:ExpressionStatement[18710-18822]"
  }, {
    "left" : "poolUtils.setupConnection(connection, config.getConnectionInitSql(), isAutoCommit, isReadOnly, transactionIsolation, catalog);",
    "right" : "poolUtils.setupConnection(connection, config.getConnectionInitSql(), isAutoCommit, isReadOnly, transactionIsolation, catalog);",
    "info" : "ExpressionStatement[18776-18902]:ExpressionStatement[18832-18958]"
  }, {
    "left" : "poolUtils.setNetworkTimeout(connection, originalTimeout);",
    "right" : "poolUtils.setNetworkTimeout(connection, originalTimeout);",
    "info" : "ExpressionStatement[18913-18970]:ExpressionStatement[18969-19026]"
  }, {
    "left" : "connectionBag.add(new PoolBagEntry(connection, originalTimeout, this));",
    "right" : "connectionBag.add(new PoolBagEntry(connection, originalTimeout, this));",
    "info" : "ExpressionStatement[18990-19061]:ExpressionStatement[19046-19117]"
  }, {
    "left" : "lastConnectionFailure.set(null);",
    "right" : "lastConnectionFailure.set(null);",
    "info" : "ExpressionStatement[19071-19103]:ExpressionStatement[19127-19159]"
  }, {
    "left" : "LOGGER.debug(\"Connection {} added to pool {} \", connection, config.getPoolName());",
    "right" : "LOGGER.debug(\"Connection {} added to pool {} \", connection, config.getPoolName());",
    "info" : "ExpressionStatement[19113-19195]:ExpressionStatement[19169-19251]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19205-19217]:ReturnStatement[19261-19273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19252-19704]:Block[19308-19760]"
  }, {
    "left" : "totalConnections.decrementAndGet();",
    "right" : "totalConnections.decrementAndGet();",
    "info" : "ExpressionStatement[19263-19298]:ExpressionStatement[19319-19354]"
  }, {
    "left" : "lastConnectionFailure.set(e);",
    "right" : "lastConnectionFailure.set(e);",
    "info" : "ExpressionStatement[19372-19401]:ExpressionStatement[19428-19457]"
  }, {
    "left" : "if (poolState == POOL_NORMAL)",
    "right" : "if (poolState == POOL_NORMAL)",
    "info" : "IfStatement[19411-19576]:IfStatement[19467-19632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19441-19576]:Block[19497-19632]"
  }, {
    "left" : "LOGGER.debug(\"Connection attempt to database in pool {} failed: {}\", config.getPoolName(), e.getMessage(), e);",
    "right" : "LOGGER.debug(\"Connection attempt to database in pool {} failed: {}\", config.getPoolName(), e.getMessage(), e);",
    "info" : "ExpressionStatement[19455-19565]:ExpressionStatement[19511-19621]"
  }, {
    "left" : "poolUtils.quietlyCloseConnection(connection, \"(exception during connection creation)\");",
    "right" : "poolUtils.quietlyCloseConnection(connection, \"(exception during connection creation)\");",
    "info" : "ExpressionStatement[19586-19673]:ExpressionStatement[19642-19729]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19683-19696]:ReturnStatement[19739-19752]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19855-19862]:Modifier[19911-19918]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19863-19867]:PrimitiveType[19919-19923]"
  }, {
    "left" : "fillPool",
    "right" : "fillPool",
    "info" : "SimpleName[19868-19876]:SimpleName[19924-19932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19882-20368]:Block[19938-20424]"
  }, {
    "left" : "final int connectionsToAdd = Math.min(config.getMaximumPoolSize() - totalConnections.get(), config.getMinimumIdle() - getIdleConnections());",
    "right" : "final int connectionsToAdd = Math.min(config.getMaximumPoolSize() - totalConnections.get(), config.getMinimumIdle() - getIdleConnections());",
    "info" : "VariableDeclarationStatement[19890-20030]:VariableDeclarationStatement[19946-20086]"
  }, {
    "left" : "for (int i = 0; i < connectionsToAdd; i++)",
    "right" : "for (int i = 0; i < connectionsToAdd; i++)",
    "info" : "ForStatement[20037-20112]:ForStatement[20093-20168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20080-20112]:Block[20136-20168]"
  }, {
    "left" : "addBagItem();",
    "right" : "addBagItem();",
    "info" : "ExpressionStatement[20091-20104]:ExpressionStatement[20147-20160]"
  }, {
    "left" : "if (connectionsToAdd > 0 && LOGGER.isDebugEnabled())",
    "right" : "if (connectionsToAdd > 0 && LOGGER.isDebugEnabled())",
    "info" : "IfStatement[20120-20363]:IfStatement[20176-20419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20173-20363]:Block[20229-20419]"
  }, {
    "left" : "addConnectionExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n               logPoolState(\"After fill \");\n            }\n         });",
    "right" : "addConnectionExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n               logPoolState(\"After fill \");\n            }\n         });",
    "info" : "ExpressionStatement[20184-20355]:ExpressionStatement[20240-20411]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20243-20252]:MarkerAnnotation[20299-20308]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20265-20271]:Modifier[20321-20327]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20272-20276]:PrimitiveType[20328-20332]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[20277-20280]:SimpleName[20333-20336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20283-20342]:Block[20339-20398]"
  }, {
    "left" : "logPoolState(\"After fill \");",
    "right" : "logPoolState(\"After fill \");",
    "info" : "ExpressionStatement[20300-20328]:ExpressionStatement[20356-20384]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20580-20587]:Modifier[20636-20643]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20588-20595]:PrimitiveType[20644-20651]"
  }, {
    "left" : "isConnectionAlive",
    "right" : "isConnectionAlive",
    "info" : "SimpleName[20596-20613]:SimpleName[20652-20669]"
  }, {
    "left" : "final Connection connection",
    "right" : "final Connection connection",
    "info" : "SingleVariableDeclaration[20614-20641]:SingleVariableDeclaration[20670-20697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20646-21623]:Block[20702-21679]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[20654-21618]:TryStatement[20710-21674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20658-21455]:Block[20714-21511]"
  }, {
    "left" : "int timeoutSec = (int) TimeUnit.MILLISECONDS.toSeconds(config.getValidationTimeout());",
    "right" : "int timeoutSec = (int) TimeUnit.MILLISECONDS.toSeconds(config.getValidationTimeout());",
    "info" : "VariableDeclarationStatement[20669-20755]:VariableDeclarationStatement[20725-20811]"
  }, {
    "left" : "if (isUseJdbc4Validation)",
    "right" : "if (isUseJdbc4Validation)",
    "info" : "IfStatement[20766-20855]:IfStatement[20822-20911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20792-20855]:Block[20848-20911]"
  }, {
    "left" : "return connection.isValid(timeoutSec);",
    "right" : "return connection.isValid(timeoutSec);",
    "info" : "ReturnStatement[20806-20844]:ReturnStatement[20862-20900]"
  }, {
    "left" : "final int originalTimeout = poolUtils.getAndSetNetworkTimeout(connection, config.getValidationTimeout());",
    "right" : "final int originalTimeout = poolUtils.getAndSetNetworkTimeout(connection, config.getValidationTimeout());",
    "info" : "VariableDeclarationStatement[20866-20971]:VariableDeclarationStatement[20922-21027]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[20982-21251]:TryStatement[21038-21307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21039-21251]:Block[21095-21307]"
  }, {
    "left" : "poolUtils.setQueryTimeout(statement, timeoutSec);",
    "right" : "poolUtils.setQueryTimeout(statement, timeoutSec);",
    "info" : "ExpressionStatement[21053-21102]:ExpressionStatement[21109-21158]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[21115-21240]:TryStatement[21171-21296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21192-21240]:Block[21248-21296]"
  }, {
    "left" : "if (isIsolateInternalQueries && !isAutoCommit)",
    "right" : "if (isIsolateInternalQueries && !isAutoCommit)",
    "info" : "IfStatement[21262-21356]:IfStatement[21318-21412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21309-21356]:Block[21365-21412]"
  }, {
    "left" : "connection.rollback();",
    "right" : "connection.rollback();",
    "info" : "ExpressionStatement[21323-21345]:ExpressionStatement[21379-21401]"
  }, {
    "left" : "poolUtils.setNetworkTimeout(connection, originalTimeout);",
    "right" : "poolUtils.setNetworkTimeout(connection, originalTimeout);",
    "info" : "ExpressionStatement[21367-21424]:ExpressionStatement[21423-21480]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[21435-21447]:ReturnStatement[21491-21503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21485-21618]:Block[21541-21674]"
  }, {
    "left" : "LOGGER.warn(\"Exception during alive check, Connection ({}) declared dead.\", connection, e);",
    "right" : "LOGGER.warn(\"Exception during alive check, Connection ({}) declared dead.\", connection, e);",
    "info" : "ExpressionStatement[21496-21587]:ExpressionStatement[21552-21643]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21597-21610]:ReturnStatement[21653-21666]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21704-21711]:Modifier[21760-21767]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21712-21716]:PrimitiveType[21768-21772]"
  }, {
    "left" : "abortActiveConnections",
    "right" : "abortActiveConnections",
    "info" : "SimpleName[21717-21739]:SimpleName[21773-21795]"
  }, {
    "left" : "final ExecutorService assassinExecutor",
    "right" : "final ExecutorService assassinExecutor",
    "info" : "SingleVariableDeclaration[21740-21778]:SingleVariableDeclaration[21796-21834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21783-22343]:Block[21839-22399]"
  }, {
    "left" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_IN_USE))",
    "right" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_IN_USE))",
    "info" : "EnhancedForStatement[21791-22338]:EnhancedForStatement[21847-22394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21856-22338]:Block[21912-22394]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[21867-22330]:TryStatement[21923-22386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21871-21996]:Block[21927-22052]"
  }, {
    "left" : "bagEntry.aborted = bagEntry.evicted = true;",
    "right" : "bagEntry.aborted = bagEntry.evicted = true;",
    "info" : "ExpressionStatement[21885-21928]:ExpressionStatement[21941-21984]"
  }, {
    "left" : "bagEntry.connection.abort(assassinExecutor);",
    "right" : "bagEntry.connection.abort(assassinExecutor);",
    "info" : "ExpressionStatement[21941-21985]:ExpressionStatement[21997-22041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22026-22145]:Block[22082-22201]"
  }, {
    "left" : "poolUtils.quietlyCloseConnection(bagEntry.connection, \"(connection aborted during shutdown)\");",
    "right" : "poolUtils.quietlyCloseConnection(bagEntry.connection, \"(connection aborted during shutdown)\");",
    "info" : "ExpressionStatement[22040-22134]:ExpressionStatement[22096-22190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22163-22330]:Block[22219-22386]"
  }, {
    "left" : "bagEntry.connection = null;",
    "right" : "bagEntry.connection = null;",
    "info" : "ExpressionStatement[22177-22204]:ExpressionStatement[22233-22260]"
  }, {
    "left" : "if (connectionBag.remove(bagEntry))",
    "right" : "if (connectionBag.remove(bagEntry))",
    "info" : "IfStatement[22217-22319]:IfStatement[22273-22375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22253-22319]:Block[22309-22375]"
  }, {
    "left" : "totalConnections.decrementAndGet();",
    "right" : "totalConnections.decrementAndGet();",
    "info" : "ExpressionStatement[22270-22305]:ExpressionStatement[22326-22361]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22409-22416]:Modifier[22465-22472]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22417-22421]:PrimitiveType[22473-22477]"
  }, {
    "left" : "initializeConnections",
    "right" : "initializeConnections",
    "info" : "SimpleName[22422-22443]:SimpleName[22478-22499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22449-23098]:Block[22505-23154]"
  }, {
    "left" : "if (config.isInitializationFailFast())",
    "right" : "if (config.isInitializationFailFast())",
    "info" : "IfStatement[22457-23074]:IfStatement[22513-23130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22496-23074]:Block[22552-23130]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[22507-23066]:TryStatement[22563-23122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22511-22825]:Block[22567-22881]"
  }, {
    "left" : "if (!addConnection())",
    "right" : "if (!addConnection())",
    "info" : "IfStatement[22525-22622]:IfStatement[22581-22678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22547-22622]:Block[22603-22678]"
  }, {
    "left" : "throw lastConnectionFailure.getAndSet(null);",
    "right" : "throw lastConnectionFailure.getAndSet(null);",
    "info" : "ThrowStatement[22564-22608]:ThrowStatement[22620-22664]"
  }, {
    "left" : "ConnectionProxy connection = (ConnectionProxy) getConnection();",
    "right" : "ConnectionProxy connection = (ConnectionProxy) getConnection();",
    "info" : "VariableDeclarationStatement[22636-22699]:VariableDeclarationStatement[22692-22755]"
  }, {
    "left" : "connection.getPoolBagEntry().evicted = (config.getMinimumIdle() == 0);",
    "right" : "connection.getPoolBagEntry().evicted = (config.getMinimumIdle() == 0);",
    "info" : "ExpressionStatement[22712-22782]:ExpressionStatement[22768-22838]"
  }, {
    "left" : "connection.close();",
    "right" : "connection.close();",
    "info" : "ExpressionStatement[22795-22814]:ExpressionStatement[22851-22870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22855-23066]:Block[22911-23122]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[22869-23000]:TryStatement[22925-23056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22873-22915]:Block[22929-22971]"
  }, {
    "left" : "shutdown();",
    "right" : "shutdown();",
    "info" : "ExpressionStatement[22890-22901]:ExpressionStatement[22946-22957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22949-23000]:Block[23005-23056]"
  }, {
    "left" : "e.addSuppressed(ex);",
    "right" : "e.addSuppressed(ex);",
    "info" : "ExpressionStatement[22966-22986]:ExpressionStatement[23022-23042]"
  }, {
    "left" : "throw new PoolInitializationException(e);",
    "right" : "throw new PoolInitializationException(e);",
    "info" : "ThrowStatement[23014-23055]:ThrowStatement[23070-23111]"
  }, {
    "left" : "fillPool();",
    "right" : "fillPool();",
    "info" : "ExpressionStatement[23082-23093]:ExpressionStatement[23138-23149]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23103-23110]:Modifier[23159-23166]"
  }, {
    "left" : "PoolStats",
    "right" : "PoolStats",
    "info" : "SimpleType[23111-23120]:SimpleType[23167-23176]"
  }, {
    "left" : "getPoolStats",
    "right" : "getPoolStats",
    "info" : "SimpleName[23121-23133]:SimpleName[23177-23189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23139-23585]:Block[23195-23641]"
  }, {
    "left" : "return new PoolStats(TimeUnit.SECONDS.toMillis(1)) {\n         @Override\n         protected void update() {\n            this.pendingThreads = HikariPool.this.getThreadsAwaitingConnection();\n            this.idleConnections = HikariPool.this.getIdleConnections();\n            this.totalConnections = HikariPool.this.getTotalConnections();\n            this.activeConnections = HikariPool.this.getActiveConnections();\n         }\n      };",
    "right" : "return new PoolStats(TimeUnit.SECONDS.toMillis(1)) {\n         @Override\n         protected void update() {\n            this.pendingThreads = HikariPool.this.getThreadsAwaitingConnection();\n            this.idleConnections = HikariPool.this.getIdleConnections();\n            this.totalConnections = HikariPool.this.getTotalConnections();\n            this.activeConnections = HikariPool.this.getActiveConnections();\n         }\n      };",
    "info" : "ReturnStatement[23147-23580]:ReturnStatement[23203-23636]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23209-23218]:MarkerAnnotation[23265-23274]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[23228-23237]:Modifier[23284-23293]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23238-23242]:PrimitiveType[23294-23298]"
  }, {
    "left" : "update",
    "right" : "update",
    "info" : "SimpleName[23243-23249]:SimpleName[23299-23305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23252-23571]:Block[23308-23627]"
  }, {
    "left" : "this.pendingThreads = HikariPool.this.getThreadsAwaitingConnection();",
    "right" : "this.pendingThreads = HikariPool.this.getThreadsAwaitingConnection();",
    "info" : "ExpressionStatement[23266-23335]:ExpressionStatement[23322-23391]"
  }, {
    "left" : "this.idleConnections = HikariPool.this.getIdleConnections();",
    "right" : "this.idleConnections = HikariPool.this.getIdleConnections();",
    "info" : "ExpressionStatement[23348-23408]:ExpressionStatement[23404-23464]"
  }, {
    "left" : "this.totalConnections = HikariPool.this.getTotalConnections();",
    "right" : "this.totalConnections = HikariPool.this.getTotalConnections();",
    "info" : "ExpressionStatement[23421-23483]:ExpressionStatement[23477-23539]"
  }, {
    "left" : "this.activeConnections = HikariPool.this.getActiveConnections();",
    "right" : "this.activeConnections = HikariPool.this.getActiveConnections();",
    "info" : "ExpressionStatement[23496-23560]:ExpressionStatement[23552-23616]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23873-23880]:Modifier[23929-23936]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[23881-23886]:TYPE_DECLARATION_KIND[23937-23942]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23997-24006]:MarkerAnnotation[24053-24062]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24013-24019]:Modifier[24069-24075]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24020-24024]:PrimitiveType[24076-24080]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[24025-24028]:SimpleName[24081-24084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24037-25403]:Block[24093-25459]"
  }, {
    "left" : "connectionTimeout = config.getConnectionTimeout();",
    "right" : "connectionTimeout = config.getConnectionTimeout();",
    "info" : "ExpressionStatement[24048-24098]:ExpressionStatement[24104-24154]"
  }, {
    "left" : "final long now = clockSource.currentTime();",
    "right" : "final long now = clockSource.currentTime();",
    "info" : "VariableDeclarationStatement[24146-24189]:VariableDeclarationStatement[24202-24245]"
  }, {
    "left" : "final long idleTimeout = config.getIdleTimeout();",
    "right" : "final long idleTimeout = config.getIdleTimeout();",
    "info" : "VariableDeclarationStatement[24199-24248]:VariableDeclarationStatement[24255-24304]"
  }, {
    "left" : "if (now < previous || now > clockSource.plusMillis(previous, (2 * HOUSEKEEPING_PERIOD_MS)))",
    "right" : "if (now < previous || now > clockSource.plusMillis(previous, (2 * HOUSEKEEPING_PERIOD_MS)))",
    "info" : "IfStatement[24344-24631]:IfStatement[24400-24687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24436-24631]:Block[24492-24687]"
  }, {
    "left" : "LOGGER.warn(\"Unusual system clock change detected, soft-evicting connections from pool.\");",
    "right" : "LOGGER.warn(\"Unusual system clock change detected, soft-evicting connections from pool.\");",
    "info" : "ExpressionStatement[24450-24540]:ExpressionStatement[24506-24596]"
  }, {
    "left" : "softEvictConnections();",
    "right" : "softEvictConnections();",
    "info" : "ExpressionStatement[24553-24576]:ExpressionStatement[24609-24632]"
  }, {
    "left" : "fillPool();",
    "right" : "fillPool();",
    "info" : "ExpressionStatement[24589-24600]:ExpressionStatement[24645-24656]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24613-24620]:ReturnStatement[24669-24676]"
  }, {
    "left" : "previous = now;",
    "right" : "previous = now;",
    "info" : "ExpressionStatement[24642-24657]:ExpressionStatement[24698-24713]"
  }, {
    "left" : "logPoolState(\"Before cleanup \");",
    "right" : "logPoolState(\"Before cleanup \");",
    "info" : "ExpressionStatement[24668-24700]:ExpressionStatement[24724-24756]"
  }, {
    "left" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_NOT_IN_USE))",
    "right" : "for (PoolBagEntry bagEntry : connectionBag.values(STATE_NOT_IN_USE))",
    "info" : "EnhancedForStatement[24710-25283]:EnhancedForStatement[24766-25339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24779-25283]:Block[24835-25339]"
  }, {
    "left" : "if (connectionBag.reserve(bagEntry))",
    "right" : "if (connectionBag.reserve(bagEntry))",
    "info" : "IfStatement[24793-25272]:IfStatement[24849-25328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24830-25272]:Block[24886-25328]"
  }, {
    "left" : "if (bagEntry.evicted)",
    "right" : "if (bagEntry.evicted)",
    "info" : "IfStatement[24847-25258]:IfStatement[24903-25314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24869-24956]:Block[24925-25012]"
  }, {
    "left" : "closeConnection(bagEntry, \"(connection evicted)\");",
    "right" : "closeConnection(bagEntry, \"(connection evicted)\");",
    "info" : "ExpressionStatement[24889-24939]:ExpressionStatement[24945-24995]"
  }, {
    "left" : "if (idleTimeout > 0L && clockSource.elapsedMillis(bagEntry.lastAccess, now) > idleTimeout)",
    "right" : "if (idleTimeout > 0L && clockSource.elapsedMillis(bagEntry.lastAccess, now) > idleTimeout)",
    "info" : "IfStatement[24977-25258]:IfStatement[25033-25314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25068-25166]:Block[25124-25222]"
  }, {
    "left" : "closeConnection(bagEntry, \"(connection passed idleTimeout)\");",
    "right" : "closeConnection(bagEntry, \"(connection passed idleTimeout)\");",
    "info" : "ExpressionStatement[25088-25149]:ExpressionStatement[25144-25205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25187-25258]:Block[25243-25314]"
  }, {
    "left" : "connectionBag.unreserve(bagEntry);",
    "right" : "connectionBag.unreserve(bagEntry);",
    "info" : "ExpressionStatement[25207-25241]:ExpressionStatement[25263-25297]"
  }, {
    "left" : "logPoolState(\"After cleanup \");",
    "right" : "logPoolState(\"After cleanup \");",
    "info" : "ExpressionStatement[25303-25334]:ExpressionStatement[25359-25390]"
  }, {
    "left" : "fillPool();",
    "right" : "fillPool();",
    "info" : "ExpressionStatement[25345-25356]:ExpressionStatement[25401-25412]"
  } ]
}