{
  "matchedElements" : [
 {
    "left" : "class : CodePrinter",
    "right" : "class : CodePrinter",
    "info" : "TypeDeclaration[972-22123]:TypeDeclaration[972-22146]"
  }, {
    "left" : "DEFAULT_LINE_LENGTH_THRESHOLD",
    "right" : "DEFAULT_LINE_LENGTH_THRESHOLD",
    "info" : "FieldDeclaration[1181-1234]:FieldDeclaration[1181-1234]"
  }, {
    "left" : "class : MappedCodePrinter",
    "right" : "class : MappedCodePrinter",
    "info" : "TypeDeclaration[1494-7581]:TypeDeclaration[1494-7581]"
  }, {
    "left" : "mappings",
    "right" : "mappings",
    "info" : "FieldDeclaration[1569-1607]:FieldDeclaration[1569-1607]"
  }, {
    "left" : "allMappings",
    "right" : "allMappings",
    "info" : "FieldDeclaration[1612-1652]:FieldDeclaration[1612-1652]"
  }, {
    "left" : "createSrcMap",
    "right" : "createSrcMap",
    "info" : "FieldDeclaration[1657-1692]:FieldDeclaration[1657-1692]"
  }, {
    "left" : "sourceMapDetailLevel",
    "right" : "sourceMapDetailLevel",
    "info" : "FieldDeclaration[1697-1754]:FieldDeclaration[1697-1754]"
  }, {
    "left" : "code",
    "right" : "code",
    "info" : "FieldDeclaration[1759-1820]:FieldDeclaration[1759-1820]"
  }, {
    "left" : "lineLengthThreshold",
    "right" : "lineLengthThreshold",
    "info" : "FieldDeclaration[1825-1865]:FieldDeclaration[1825-1865]"
  }, {
    "left" : "lineLength",
    "right" : "lineLength",
    "info" : "FieldDeclaration[1870-1899]:FieldDeclaration[1870-1899]"
  }, {
    "left" : "lineIndex",
    "right" : "lineIndex",
    "info" : "FieldDeclaration[1904-1932]:FieldDeclaration[1904-1932]"
  }, {
    "left" : "package MappedCodePrinter(lineLengthThreshold int, createSrcMap boolean, sourceMapDetailLevel )",
    "right" : "package MappedCodePrinter(lineLengthThreshold int, createSrcMap boolean, sourceMapDetailLevel )",
    "info" : "MethodDeclaration[1938-2490]:MethodDeclaration[1938-2490]"
  }, {
    "left" : "class : Mapping",
    "right" : "class : Mapping",
    "info" : "TypeDeclaration[2496-2912]:TypeDeclaration[2496-2912]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[2846-2856]:FieldDeclaration[2846-2856]"
  }, {
    "left" : "start",
    "right" : "start",
    "info" : "FieldDeclaration[2863-2882]:FieldDeclaration[2863-2882]"
  }, {
    "left" : "end",
    "right" : "end",
    "info" : "FieldDeclaration[2889-2906]:FieldDeclaration[2889-2906]"
  }, {
    "left" : "package startSourceMapping(node ) : void",
    "right" : "package startSourceMapping(node ) : void",
    "info" : "MethodDeclaration[2918-3663]:MethodDeclaration[2918-3663]"
  }, {
    "left" : "package endSourceMapping(node ) : void",
    "right" : "package endSourceMapping(node ) : void",
    "info" : "MethodDeclaration[3669-4139]:MethodDeclaration[3669-4139]"
  }, {
    "left" : "package generateSourceMap(map ) : void",
    "right" : "package generateSourceMap(map ) : void",
    "info" : "MethodDeclaration[4145-4505]:MethodDeclaration[4145-4505]"
  }, {
    "left" : "package reportLineCut(lineIndex int, charIndex int, insertion boolean) : void",
    "right" : "package reportLineCut(lineIndex int, charIndex int, insertion boolean) : void",
    "info" : "MethodDeclaration[4511-5270]:MethodDeclaration[4511-5270]"
  }, {
    "left" : "private convertPosition(position , lineIndex int, characterPosition int, insertion boolean) : ",
    "right" : "private convertPosition(position , lineIndex int, characterPosition int, insertion boolean) : ",
    "info" : "MethodDeclaration[5276-7231]:MethodDeclaration[5276-7231]"
  }, {
    "left" : "public getCode() : ",
    "right" : "public getCode() : ",
    "info" : "MethodDeclaration[7237-7298]:MethodDeclaration[7237-7298]"
  }, {
    "left" : "package getLastChar() : char",
    "right" : "package getLastChar() : char",
    "info" : "MethodDeclaration[7304-7418]:MethodDeclaration[7304-7418]"
  }, {
    "left" : "protected getCurrentCharIndex() : int",
    "right" : "protected getCurrentCharIndex() : int",
    "info" : "MethodDeclaration[7424-7498]:MethodDeclaration[7424-7498]"
  }, {
    "left" : "protected getCurrentLineIndex() : int",
    "right" : "protected getCurrentLineIndex() : int",
    "info" : "MethodDeclaration[7504-7577]:MethodDeclaration[7504-7577]"
  }, {
    "left" : "class : PrettyCodePrinter",
    "right" : "class : PrettyCodePrinter",
    "info" : "TypeDeclaration[7585-12040]:TypeDeclaration[7585-12063]"
  }, {
    "left" : "INDENT",
    "right" : "INDENT",
    "info" : "FieldDeclaration[7733-7767]:FieldDeclaration[7733-7767]"
  }, {
    "left" : "indent",
    "right" : "indent",
    "info" : "FieldDeclaration[7773-7796]:FieldDeclaration[7773-7796]"
  }, {
    "left" : "private PrettyCodePrinter(lineLengthThreshold int, createSourceMap boolean, sourceMapDetailLevel )",
    "right" : "private PrettyCodePrinter(lineLengthThreshold int, createSourceMap boolean, sourceMapDetailLevel )",
    "info" : "MethodDeclaration[7802-8355]:MethodDeclaration[7802-8355]"
  }, {
    "left" : "package append(str ) : void",
    "right" : "package append(str ) : void",
    "info" : "MethodDeclaration[8361-8787]:MethodDeclaration[8361-8787]"
  }, {
    "left" : "package startNewLine() : void",
    "right" : "package startNewLine() : void",
    "info" : "MethodDeclaration[8793-9070]:MethodDeclaration[8793-9070]"
  }, {
    "left" : "package maybeLineBreak() : void",
    "right" : "package maybeLineBreak() : void",
    "info" : "MethodDeclaration[9076-9141]:MethodDeclaration[9076-9141]"
  }, {
    "left" : "package maybeCutLine() : void",
    "right" : "package maybeCutLine() : void",
    "info" : "MethodDeclaration[9147-9384]:MethodDeclaration[9147-9384]"
  }, {
    "left" : "package endLine() : void",
    "right" : "package endLine() : void",
    "info" : "MethodDeclaration[9390-9448]:MethodDeclaration[9390-9448]"
  }, {
    "left" : "package appendBlockStart() : void",
    "right" : "package appendBlockStart() : void",
    "info" : "MethodDeclaration[9454-9535]:MethodDeclaration[9454-9535]"
  }, {
    "left" : "package appendBlockEnd() : void",
    "right" : "package appendBlockEnd() : void",
    "info" : "MethodDeclaration[9541-9636]:MethodDeclaration[9541-9636]"
  }, {
    "left" : "package listSeparator() : void",
    "right" : "package listSeparator() : void",
    "info" : "MethodDeclaration[9642-9725]:MethodDeclaration[9642-9725]"
  }, {
    "left" : "package endFunction(statementContext boolean) : void",
    "right" : "package endFunction(statementContext boolean) : void",
    "info" : "MethodDeclaration[9731-9900]:MethodDeclaration[9731-9900]"
  }, {
    "left" : "package beginCaseBody() : void",
    "right" : "package beginCaseBody() : void",
    "info" : "MethodDeclaration[9906-10010]:MethodDeclaration[9906-10010]"
  }, {
    "left" : "package endCaseBody() : void",
    "right" : "package endCaseBody() : void",
    "info" : "MethodDeclaration[10016-10121]:MethodDeclaration[10016-10121]"
  }, {
    "left" : "package appendOp(op , binOp boolean) : void",
    "right" : "package appendOp(op , binOp boolean) : void",
    "info" : "MethodDeclaration[10127-10360]:MethodDeclaration[10127-10383]"
  }, {
    "left" : "package shouldPreserveExtraBlocks() : boolean",
    "right" : "package shouldPreserveExtraBlocks() : boolean",
    "info" : "MethodDeclaration[10366-10800]:MethodDeclaration[10389-10823]"
  }, {
    "left" : "private getTryForCatch(n ) : ",
    "right" : "private getTryForCatch(n ) : ",
    "info" : "MethodDeclaration[10806-10963]:MethodDeclaration[10829-10986]"
  }, {
    "left" : "package breakAfterBlockFor(n , isStatementContext boolean) : boolean",
    "right" : "package breakAfterBlockFor(n , isStatementContext boolean) : boolean",
    "info" : "MethodDeclaration[10969-11967]:MethodDeclaration[10992-11990]"
  }, {
    "left" : "package endFile() : void",
    "right" : "package endFile() : void",
    "info" : "MethodDeclaration[11973-12036]:MethodDeclaration[11996-12059]"
  }, {
    "left" : "class : CompactCodePrinter",
    "right" : "class : CompactCodePrinter",
    "info" : "TypeDeclaration[12045-16928]:TypeDeclaration[12068-16951]"
  }, {
    "left" : "lineBreak",
    "right" : "lineBreak",
    "info" : "FieldDeclaration[12719-12751]:FieldDeclaration[12742-12774]"
  }, {
    "left" : "preferLineBreakAtEndOfFile",
    "right" : "preferLineBreakAtEndOfFile",
    "info" : "FieldDeclaration[12756-12805]:FieldDeclaration[12779-12828]"
  }, {
    "left" : "lineStartPosition",
    "right" : "lineStartPosition",
    "info" : "FieldDeclaration[12810-12844]:FieldDeclaration[12833-12867]"
  }, {
    "left" : "preferredBreakPosition",
    "right" : "preferredBreakPosition",
    "info" : "FieldDeclaration[12849-12888]:FieldDeclaration[12872-12911]"
  }, {
    "left" : "prevCutPosition",
    "right" : "prevCutPosition",
    "info" : "FieldDeclaration[12893-12925]:FieldDeclaration[12916-12948]"
  }, {
    "left" : "prevLineStartPosition",
    "right" : "prevLineStartPosition",
    "info" : "FieldDeclaration[12930-12968]:FieldDeclaration[12953-12991]"
  }, {
    "left" : "private CompactCodePrinter(lineBreak boolean, preferLineBreakAtEndOfFile boolean, lineLengthThreshold int, createSrcMap boolean, sourceMapDetailLevel )",
    "right" : "private CompactCodePrinter(lineBreak boolean, preferLineBreakAtEndOfFile boolean, lineLengthThreshold int, createSrcMap boolean, sourceMapDetailLevel )",
    "info" : "MethodDeclaration[12972-13779]:MethodDeclaration[12995-13802]"
  }, {
    "left" : "package append(str ) : void",
    "right" : "package append(str ) : void",
    "info" : "MethodDeclaration[13785-13983]:MethodDeclaration[13808-14006]"
  }, {
    "left" : "package startNewLine() : void",
    "right" : "package startNewLine() : void",
    "info" : "MethodDeclaration[13989-14351]:MethodDeclaration[14012-14374]"
  }, {
    "left" : "package maybeLineBreak() : void",
    "right" : "package maybeLineBreak() : void",
    "info" : "MethodDeclaration[14357-14918]:MethodDeclaration[14380-14941]"
  }, {
    "left" : "package maybeCutLine() : void",
    "right" : "package maybeCutLine() : void",
    "info" : "MethodDeclaration[14924-15711]:MethodDeclaration[14947-15734]"
  }, {
    "left" : "package notePreferredLineBreak() : void",
    "right" : "package notePreferredLineBreak() : void",
    "info" : "MethodDeclaration[15717-15814]:MethodDeclaration[15740-15837]"
  }, {
    "left" : "package endFile() : void",
    "right" : "package endFile() : void",
    "info" : "MethodDeclaration[15820-16923]:MethodDeclaration[15843-16946]"
  }, {
    "left" : "class : Builder",
    "right" : "class : Builder",
    "info" : "TypeDeclaration[16932-20751]:TypeDeclaration[16955-20774]"
  }, {
    "left" : "root",
    "right" : "root",
    "info" : "FieldDeclaration[16959-16983]:FieldDeclaration[16982-17006]"
  }, {
    "left" : "prettyPrint",
    "right" : "prettyPrint",
    "info" : "FieldDeclaration[16988-17024]:FieldDeclaration[17011-17047]"
  }, {
    "left" : "lineBreak",
    "right" : "lineBreak",
    "info" : "FieldDeclaration[17029-17063]:FieldDeclaration[17052-17086]"
  }, {
    "left" : "preferLineBreakAtEndOfFile",
    "right" : "preferLineBreakAtEndOfFile",
    "info" : "FieldDeclaration[17068-17119]:FieldDeclaration[17091-17142]"
  }, {
    "left" : "outputTypes",
    "right" : "outputTypes",
    "info" : "FieldDeclaration[17124-17160]:FieldDeclaration[17147-17183]"
  }, {
    "left" : "lineLengthThreshold",
    "right" : "lineLengthThreshold",
    "info" : "FieldDeclaration[17165-17229]:FieldDeclaration[17188-17252]"
  }, {
    "left" : "sourceMap",
    "right" : "sourceMap",
    "info" : "FieldDeclaration[17234-17269]:FieldDeclaration[17257-17292]"
  }, {
    "left" : "sourceMapDetailLevel",
    "right" : "sourceMapDetailLevel",
    "info" : "FieldDeclaration[17274-17361]:FieldDeclaration[17297-17384]"
  }, {
    "left" : "outputCharset",
    "right" : "outputCharset",
    "info" : "FieldDeclaration[17468-17505]:FieldDeclaration[17491-17528]"
  }, {
    "left" : "tagAsStrict",
    "right" : "tagAsStrict",
    "info" : "FieldDeclaration[17510-17538]:FieldDeclaration[17533-17561]"
  }, {
    "left" : "package Builder(node )",
    "right" : "package Builder(node )",
    "info" : "MethodDeclaration[17544-17705]:MethodDeclaration[17567-17728]"
  }, {
    "left" : "package setPrettyPrint(prettyPrint boolean) : ",
    "right" : "package setPrettyPrint(prettyPrint boolean) : ",
    "info" : "MethodDeclaration[17711-17952]:MethodDeclaration[17734-17975]"
  }, {
    "left" : "package setLineBreak(lineBreak boolean) : ",
    "right" : "package setLineBreak(lineBreak boolean) : ",
    "info" : "MethodDeclaration[17958-18208]:MethodDeclaration[17981-18231]"
  }, {
    "left" : "package setPreferLineBreakAtEndOfFile(lineBreakAtEnd boolean) : ",
    "right" : "package setPreferLineBreakAtEndOfFile(lineBreakAtEnd boolean) : ",
    "info" : "MethodDeclaration[18214-18649]:MethodDeclaration[18237-18672]"
  }, {
    "left" : "package setOutputTypes(outputTypes boolean) : ",
    "right" : "package setOutputTypes(outputTypes boolean) : ",
    "info" : "MethodDeclaration[18655-18916]:MethodDeclaration[18678-18939]"
  }, {
    "left" : "package setLineLengthThreshold(threshold int) : ",
    "right" : "package setLineLengthThreshold(threshold int) : ",
    "info" : "MethodDeclaration[18922-19233]:MethodDeclaration[18945-19256]"
  }, {
    "left" : "package setSourceMap(sourceMap ) : ",
    "right" : "package setSourceMap(sourceMap ) : ",
    "info" : "MethodDeclaration[19239-19502]:MethodDeclaration[19262-19525]"
  }, {
    "left" : "package setSourceMapDetailLevel(level ) : ",
    "right" : "package setSourceMapDetailLevel(level ) : ",
    "info" : "MethodDeclaration[19508-19744]:MethodDeclaration[19531-19767]"
  }, {
    "left" : "package setOutputCharset(outCharset ) : ",
    "right" : "package setOutputCharset(outCharset ) : ",
    "info" : "MethodDeclaration[19750-19980]:MethodDeclaration[19773-20003]"
  }, {
    "left" : "package setTagAsStrict(tagAsStrict boolean) : ",
    "right" : "package setTagAsStrict(tagAsStrict boolean) : ",
    "info" : "MethodDeclaration[19986-20179]:MethodDeclaration[20009-20202]"
  }, {
    "left" : "package build() : ",
    "right" : "package build() : ",
    "info" : "MethodDeclaration[20185-20747]:MethodDeclaration[20208-20770]"
  }, {
    "left" : "private toSource(root , outputFormat , lineBreak boolean, preferEndOfFileBreak boolean, lineLengthThreshold int, sourceMap , sourceMapDetailLevel , outputCharset , tagAsStrict boolean) : ",
    "right" : "private toSource(root , outputFormat , lineBreak boolean, preferEndOfFileBreak boolean, lineLengthThreshold int, sourceMap , sourceMapDetailLevel , outputCharset , tagAsStrict boolean) : ",
    "info" : "MethodDeclaration[20811-22121]:MethodDeclaration[20834-22144]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[1494-1501]:Modifier[1494-1501]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[1502-1510]:Modifier[1502-1510]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1511-1517]:Modifier[1511-1517]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1518-1523]:TYPE_DECLARATION_KIND[1518-1523]"
  }, {
    "left" : "MappedCodePrinter",
    "right" : "MappedCodePrinter",
    "info" : "SimpleName[1938-1955]:SimpleName[1938-1955]"
  }, {
    "left" : "int lineLengthThreshold",
    "right" : "int lineLengthThreshold",
    "info" : "SingleVariableDeclaration[1965-1988]:SingleVariableDeclaration[1965-1988]"
  }, {
    "left" : "boolean createSrcMap",
    "right" : "boolean createSrcMap",
    "info" : "SingleVariableDeclaration[1998-2018]:SingleVariableDeclaration[1998-2018]"
  }, {
    "left" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "right" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "info" : "SingleVariableDeclaration[2028-2070]:SingleVariableDeclaration[2028-2070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2072-2490]:Block[2072-2490]"
  }, {
    "left" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "right" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "info" : "ExpressionStatement[2080-2135]:ExpressionStatement[2080-2135]"
  }, {
    "left" : "this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;",
    "right" : "this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;",
    "info" : "ExpressionStatement[2142-2244]:ExpressionStatement[2142-2244]"
  }, {
    "left" : "this.createSrcMap = createSrcMap;",
    "right" : "this.createSrcMap = createSrcMap;",
    "info" : "ExpressionStatement[2251-2284]:ExpressionStatement[2251-2284]"
  }, {
    "left" : "this.sourceMapDetailLevel = sourceMapDetailLevel;",
    "right" : "this.sourceMapDetailLevel = sourceMapDetailLevel;",
    "info" : "ExpressionStatement[2291-2340]:ExpressionStatement[2291-2340]"
  }, {
    "left" : "this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;",
    "right" : "this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;",
    "info" : "ExpressionStatement[2347-2411]:ExpressionStatement[2347-2411]"
  }, {
    "left" : "this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;",
    "right" : "this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;",
    "info" : "ExpressionStatement[2418-2484]:ExpressionStatement[2418-2484]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2809-2816]:Modifier[2809-2816]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2817-2823]:Modifier[2817-2823]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2824-2829]:TYPE_DECLARATION_KIND[2824-2829]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3018-3027]:MarkerAnnotation[3018-3027]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3032-3036]:PrimitiveType[3032-3036]"
  }, {
    "left" : "startSourceMapping",
    "right" : "startSourceMapping",
    "info" : "SimpleName[3037-3055]:SimpleName[3037-3055]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[3056-3065]:SingleVariableDeclaration[3056-3065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3067-3663]:Block[3067-3663]"
  }, {
    "left" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "right" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "info" : "ExpressionStatement[3075-3130]:ExpressionStatement[3075-3130]"
  }, {
    "left" : "Preconditions.checkState(node != null);",
    "right" : "Preconditions.checkState(node != null);",
    "info" : "ExpressionStatement[3137-3176]:ExpressionStatement[3137-3176]"
  }, {
    "left" : "if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node))",
    "right" : "if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node))",
    "info" : "IfStatement[3183-3657]:IfStatement[3183-3657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3327-3657]:Block[3327-3657]"
  }, {
    "left" : "int line = getCurrentLineIndex();",
    "right" : "int line = getCurrentLineIndex();",
    "info" : "VariableDeclarationStatement[3337-3370]:VariableDeclarationStatement[3337-3370]"
  }, {
    "left" : "int index = getCurrentCharIndex();",
    "right" : "int index = getCurrentCharIndex();",
    "info" : "VariableDeclarationStatement[3379-3413]:VariableDeclarationStatement[3379-3413]"
  }, {
    "left" : "Preconditions.checkState(line >= 0);",
    "right" : "Preconditions.checkState(line >= 0);",
    "info" : "ExpressionStatement[3422-3458]:ExpressionStatement[3422-3458]"
  }, {
    "left" : "Mapping mapping = new Mapping();",
    "right" : "Mapping mapping = new Mapping();",
    "info" : "VariableDeclarationStatement[3467-3499]:VariableDeclarationStatement[3467-3499]"
  }, {
    "left" : "mapping.node = node;",
    "right" : "mapping.node = node;",
    "info" : "ExpressionStatement[3508-3528]:ExpressionStatement[3508-3528]"
  }, {
    "left" : "mapping.start = new FilePosition(line, index);",
    "right" : "mapping.start = new FilePosition(line, index);",
    "info" : "ExpressionStatement[3537-3583]:ExpressionStatement[3537-3583]"
  }, {
    "left" : "mappings.push(mapping);",
    "right" : "mappings.push(mapping);",
    "info" : "ExpressionStatement[3592-3615]:ExpressionStatement[3592-3615]"
  }, {
    "left" : "allMappings.add(mapping);",
    "right" : "allMappings.add(mapping);",
    "info" : "ExpressionStatement[3624-3649]:ExpressionStatement[3624-3649]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3771-3780]:MarkerAnnotation[3771-3780]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3785-3789]:PrimitiveType[3785-3789]"
  }, {
    "left" : "endSourceMapping",
    "right" : "endSourceMapping",
    "info" : "SimpleName[3790-3806]:SimpleName[3790-3806]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[3807-3816]:SingleVariableDeclaration[3807-3816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3818-4139]:Block[3818-4139]"
  }, {
    "left" : "if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node)",
    "right" : "if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node)",
    "info" : "IfStatement[3826-4133]:IfStatement[3826-4133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3899-4133]:Block[3899-4133]"
  }, {
    "left" : "Mapping mapping = mappings.pop();",
    "right" : "Mapping mapping = mappings.pop();",
    "info" : "VariableDeclarationStatement[3909-3942]:VariableDeclarationStatement[3909-3942]"
  }, {
    "left" : "int line = getCurrentLineIndex();",
    "right" : "int line = getCurrentLineIndex();",
    "info" : "VariableDeclarationStatement[3951-3984]:VariableDeclarationStatement[3951-3984]"
  }, {
    "left" : "int index = getCurrentCharIndex();",
    "right" : "int index = getCurrentCharIndex();",
    "info" : "VariableDeclarationStatement[3993-4027]:VariableDeclarationStatement[3993-4027]"
  }, {
    "left" : "Preconditions.checkState(line >= 0);",
    "right" : "Preconditions.checkState(line >= 0);",
    "info" : "ExpressionStatement[4036-4072]:ExpressionStatement[4036-4072]"
  }, {
    "left" : "mapping.end = new FilePosition(line, index);",
    "right" : "mapping.end = new FilePosition(line, index);",
    "info" : "ExpressionStatement[4081-4125]:ExpressionStatement[4081-4125]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4303-4307]:PrimitiveType[4303-4307]"
  }, {
    "left" : "generateSourceMap",
    "right" : "generateSourceMap",
    "info" : "SimpleName[4308-4325]:SimpleName[4308-4325]"
  }, {
    "left" : "SourceMap map",
    "right" : "SourceMap map",
    "info" : "SingleVariableDeclaration[4326-4339]:SingleVariableDeclaration[4326-4339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4340-4505]:Block[4340-4505]"
  }, {
    "left" : "if (createSrcMap)",
    "right" : "if (createSrcMap)",
    "info" : "IfStatement[4348-4499]:IfStatement[4348-4499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4366-4499]:Block[4366-4499]"
  }, {
    "left" : "for (Mapping mapping : allMappings)",
    "right" : "for (Mapping mapping : allMappings)",
    "info" : "EnhancedForStatement[4376-4491]:EnhancedForStatement[4376-4491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4412-4491]:Block[4412-4491]"
  }, {
    "left" : "map.addMapping(mapping.node, mapping.start, mapping.end);",
    "right" : "map.addMapping(mapping.node, mapping.start, mapping.end);",
    "info" : "ExpressionStatement[4424-4481]:ExpressionStatement[4424-4481]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4845-4849]:PrimitiveType[4845-4849]"
  }, {
    "left" : "reportLineCut",
    "right" : "reportLineCut",
    "info" : "SimpleName[4850-4863]:SimpleName[4850-4863]"
  }, {
    "left" : "int lineIndex",
    "right" : "int lineIndex",
    "info" : "SingleVariableDeclaration[4864-4877]:SingleVariableDeclaration[4864-4877]"
  }, {
    "left" : "int charIndex",
    "right" : "int charIndex",
    "info" : "SingleVariableDeclaration[4879-4892]:SingleVariableDeclaration[4879-4892]"
  }, {
    "left" : "boolean insertion",
    "right" : "boolean insertion",
    "info" : "SingleVariableDeclaration[4894-4911]:SingleVariableDeclaration[4894-4911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4913-5270]:Block[4913-5270]"
  }, {
    "left" : "if (createSrcMap)",
    "right" : "if (createSrcMap)",
    "info" : "IfStatement[4921-5264]:IfStatement[4921-5264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4939-5264]:Block[4939-5264]"
  }, {
    "left" : "for (Mapping mapping : allMappings)",
    "right" : "for (Mapping mapping : allMappings)",
    "info" : "EnhancedForStatement[4949-5256]:EnhancedForStatement[4949-5256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4985-5256]:Block[4985-5256]"
  }, {
    "left" : "mapping.start = convertPosition(mapping.start, lineIndex, charIndex,\n              insertion);",
    "right" : "mapping.start = convertPosition(mapping.start, lineIndex, charIndex,\n              insertion);",
    "info" : "ExpressionStatement[4997-5091]:ExpressionStatement[4997-5091]"
  }, {
    "left" : "if (mapping.end != null)",
    "right" : "if (mapping.end != null)",
    "info" : "IfStatement[5103-5246]:IfStatement[5103-5246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5128-5246]:Block[5128-5246]"
  }, {
    "left" : "mapping.end = convertPosition(mapping.end, lineIndex, charIndex,\n                insertion);",
    "right" : "mapping.end = convertPosition(mapping.end, lineIndex, charIndex,\n                insertion);",
    "info" : "ExpressionStatement[5142-5234]:ExpressionStatement[5142-5234]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5996-6003]:Modifier[5996-6003]"
  }, {
    "left" : "FilePosition",
    "right" : "FilePosition",
    "info" : "SimpleType[6004-6016]:SimpleType[6004-6016]"
  }, {
    "left" : "convertPosition",
    "right" : "convertPosition",
    "info" : "SimpleName[6017-6032]:SimpleName[6017-6032]"
  }, {
    "left" : "FilePosition position",
    "right" : "FilePosition position",
    "info" : "SingleVariableDeclaration[6033-6054]:SingleVariableDeclaration[6033-6054]"
  }, {
    "left" : "int lineIndex",
    "right" : "int lineIndex",
    "info" : "SingleVariableDeclaration[6056-6069]:SingleVariableDeclaration[6056-6069]"
  }, {
    "left" : "int characterPosition",
    "right" : "int characterPosition",
    "info" : "SingleVariableDeclaration[6108-6129]:SingleVariableDeclaration[6108-6129]"
  }, {
    "left" : "boolean insertion",
    "right" : "boolean insertion",
    "info" : "SingleVariableDeclaration[6131-6148]:SingleVariableDeclaration[6131-6148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6150-7231]:Block[6150-7231]"
  }, {
    "left" : "int originalLine = position.getLine();",
    "right" : "int originalLine = position.getLine();",
    "info" : "VariableDeclarationStatement[6158-6196]:VariableDeclarationStatement[6158-6196]"
  }, {
    "left" : "int originalChar = position.getColumn();",
    "right" : "int originalChar = position.getColumn();",
    "info" : "VariableDeclarationStatement[6203-6243]:VariableDeclarationStatement[6203-6243]"
  }, {
    "left" : "if (insertion)",
    "right" : "if (insertion)",
    "info" : "IfStatement[6250-7225]:IfStatement[6250-7225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6265-6654]:Block[6265-6654]"
  }, {
    "left" : "if (originalLine == lineIndex && originalChar >= characterPosition)",
    "right" : "if (originalLine == lineIndex && originalChar >= characterPosition)",
    "info" : "IfStatement[6275-6646]:IfStatement[6275-6646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6343-6602]:Block[6343-6602]"
  }, {
    "left" : "return new FilePosition(\n              originalLine + 1, originalChar - characterPosition);",
    "right" : "return new FilePosition(\n              originalLine + 1, originalChar - characterPosition);",
    "info" : "ReturnStatement[6501-6592]:ReturnStatement[6501-6592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6608-6646]:Block[6608-6646]"
  }, {
    "left" : "return position;",
    "right" : "return position;",
    "info" : "ReturnStatement[6620-6636]:ReturnStatement[6620-6636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6660-7225]:Block[6660-7225]"
  }, {
    "left" : "if (originalLine == lineIndex)",
    "right" : "if (originalLine == lineIndex)",
    "info" : "IfStatement[6670-7217]:IfStatement[6670-7217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6701-6814]:Block[6701-6814]"
  }, {
    "left" : "return new FilePosition(\n              originalLine - 1, originalChar + characterPosition);",
    "right" : "return new FilePosition(\n              originalLine - 1, originalChar + characterPosition);",
    "info" : "ReturnStatement[6713-6804]:ReturnStatement[6713-6804]"
  }, {
    "left" : "if (originalLine > lineIndex)",
    "right" : "if (originalLine > lineIndex)",
    "info" : "IfStatement[6820-7217]:IfStatement[6820-7217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6850-7173]:Block[6850-7173]"
  }, {
    "left" : "throw new IllegalStateException(\n                \"Cannot undo line cut on a previous line.\");",
    "right" : "throw new IllegalStateException(\n                \"Cannot undo line cut on a previous line.\");",
    "info" : "ThrowStatement[7070-7163]:ThrowStatement[7070-7163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7179-7217]:Block[7179-7217]"
  }, {
    "left" : "return position;",
    "right" : "return position;",
    "info" : "ReturnStatement[7191-7207]:ReturnStatement[7191-7207]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7237-7243]:Modifier[7237-7243]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7244-7250]:SimpleType[7244-7250]"
  }, {
    "left" : "getCode",
    "right" : "getCode",
    "info" : "SimpleName[7251-7258]:SimpleName[7251-7258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7261-7298]:Block[7261-7298]"
  }, {
    "left" : "return code.toString();",
    "right" : "return code.toString();",
    "info" : "ReturnStatement[7269-7292]:ReturnStatement[7269-7292]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7304-7313]:MarkerAnnotation[7304-7313]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[7318-7322]:PrimitiveType[7318-7322]"
  }, {
    "left" : "getLastChar",
    "right" : "getLastChar",
    "info" : "SimpleName[7323-7334]:SimpleName[7323-7334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7337-7418]:Block[7337-7418]"
  }, {
    "left" : "return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';",
    "right" : "return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';",
    "info" : "ReturnStatement[7345-7412]:ReturnStatement[7345-7412]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7424-7433]:Modifier[7424-7433]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[7434-7439]:Modifier[7434-7439]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[7440-7443]:PrimitiveType[7440-7443]"
  }, {
    "left" : "getCurrentCharIndex",
    "right" : "getCurrentCharIndex",
    "info" : "SimpleName[7444-7463]:SimpleName[7444-7463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7466-7498]:Block[7466-7498]"
  }, {
    "left" : "return lineLength;",
    "right" : "return lineLength;",
    "info" : "ReturnStatement[7474-7492]:ReturnStatement[7474-7492]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7504-7513]:Modifier[7504-7513]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[7514-7519]:Modifier[7514-7519]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[7520-7523]:PrimitiveType[7520-7523]"
  }, {
    "left" : "getCurrentLineIndex",
    "right" : "getCurrentLineIndex",
    "info" : "SimpleName[7524-7543]:SimpleName[7524-7543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7546-7577]:Block[7546-7577]"
  }, {
    "left" : "return lineIndex;",
    "right" : "return lineIndex;",
    "info" : "ReturnStatement[7554-7571]:ReturnStatement[7554-7571]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7585-7591]:Modifier[7585-7591]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7592-7597]:TYPE_DECLARATION_KIND[7592-7597]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8130-8137]:Modifier[8130-8137]"
  }, {
    "left" : "PrettyCodePrinter",
    "right" : "PrettyCodePrinter",
    "info" : "SimpleName[8138-8155]:SimpleName[8138-8155]"
  }, {
    "left" : "int lineLengthThreshold",
    "right" : "int lineLengthThreshold",
    "info" : "SingleVariableDeclaration[8165-8188]:SingleVariableDeclaration[8165-8188]"
  }, {
    "left" : "boolean createSourceMap",
    "right" : "boolean createSourceMap",
    "info" : "SingleVariableDeclaration[8198-8221]:SingleVariableDeclaration[8198-8221]"
  }, {
    "left" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "right" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "info" : "SingleVariableDeclaration[8231-8273]:SingleVariableDeclaration[8231-8273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8275-8355]:Block[8275-8355]"
  }, {
    "left" : "super(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);",
    "right" : "super(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);",
    "info" : "SuperConstructorInvocation[8283-8349]:SuperConstructorInvocation[8283-8349]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8456-8465]:MarkerAnnotation[8456-8465]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8470-8474]:PrimitiveType[8470-8474]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[8475-8481]:SimpleName[8475-8481]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[8482-8492]:SingleVariableDeclaration[8482-8492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8494-8787]:Block[8494-8787]"
  }, {
    "left" : "if (lineLength == 0)",
    "right" : "if (lineLength == 0)",
    "info" : "IfStatement[8568-8723]:IfStatement[8568-8723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8589-8723]:Block[8589-8723]"
  }, {
    "left" : "for (int i = 0; i < indent; i++)",
    "right" : "for (int i = 0; i < indent; i++)",
    "info" : "ForStatement[8599-8715]:ForStatement[8599-8715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8632-8715]:Block[8632-8715]"
  }, {
    "left" : "code.append(INDENT);",
    "right" : "code.append(INDENT);",
    "info" : "ExpressionStatement[8644-8664]:ExpressionStatement[8644-8664]"
  }, {
    "left" : "lineLength += INDENT.length();",
    "right" : "lineLength += INDENT.length();",
    "info" : "ExpressionStatement[8675-8705]:ExpressionStatement[8675-8705]"
  }, {
    "left" : "code.append(str);",
    "right" : "code.append(str);",
    "info" : "ExpressionStatement[8730-8747]:ExpressionStatement[8730-8747]"
  }, {
    "left" : "lineLength += str.length();",
    "right" : "lineLength += str.length();",
    "info" : "ExpressionStatement[8754-8781]:ExpressionStatement[8754-8781]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8921-8930]:MarkerAnnotation[8921-8930]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8935-8939]:PrimitiveType[8935-8939]"
  }, {
    "left" : "startNewLine",
    "right" : "startNewLine",
    "info" : "SimpleName[8940-8952]:SimpleName[8940-8952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8955-9070]:Block[8955-9070]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[8963-9064]:IfStatement[8963-9064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8983-9064]:Block[8983-9064]"
  }, {
    "left" : "code.append('\\n');",
    "right" : "code.append('\\n');",
    "info" : "ExpressionStatement[8993-9011]:ExpressionStatement[8993-9011]"
  }, {
    "left" : "lineIndex++;",
    "right" : "lineIndex++;",
    "info" : "ExpressionStatement[9020-9032]:ExpressionStatement[9020-9032]"
  }, {
    "left" : "lineLength = 0;",
    "right" : "lineLength = 0;",
    "info" : "ExpressionStatement[9041-9056]:ExpressionStatement[9041-9056]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9076-9085]:MarkerAnnotation[9076-9085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9090-9094]:PrimitiveType[9090-9094]"
  }, {
    "left" : "maybeLineBreak",
    "right" : "maybeLineBreak",
    "info" : "SimpleName[9095-9109]:SimpleName[9095-9109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9112-9141]:Block[9112-9141]"
  }, {
    "left" : "maybeCutLine();",
    "right" : "maybeCutLine();",
    "info" : "ExpressionStatement[9120-9135]:ExpressionStatement[9120-9135]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9265-9274]:MarkerAnnotation[9265-9274]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9279-9283]:PrimitiveType[9279-9283]"
  }, {
    "left" : "maybeCutLine",
    "right" : "maybeCutLine",
    "info" : "SimpleName[9284-9296]:SimpleName[9284-9296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9299-9384]:Block[9299-9384]"
  }, {
    "left" : "if (lineLength > lineLengthThreshold)",
    "right" : "if (lineLength > lineLengthThreshold)",
    "info" : "IfStatement[9307-9378]:IfStatement[9307-9378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9345-9378]:Block[9345-9378]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[9355-9370]:ExpressionStatement[9355-9370]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9390-9399]:MarkerAnnotation[9390-9399]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9404-9408]:PrimitiveType[9404-9408]"
  }, {
    "left" : "endLine",
    "right" : "endLine",
    "info" : "SimpleName[9409-9416]:SimpleName[9409-9416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9419-9448]:Block[9419-9448]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[9427-9442]:ExpressionStatement[9427-9442]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9454-9463]:MarkerAnnotation[9454-9463]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9468-9472]:PrimitiveType[9468-9472]"
  }, {
    "left" : "appendBlockStart",
    "right" : "appendBlockStart",
    "info" : "SimpleName[9473-9489]:SimpleName[9473-9489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9492-9535]:Block[9492-9535]"
  }, {
    "left" : "append(\" {\");",
    "right" : "append(\" {\");",
    "info" : "ExpressionStatement[9500-9513]:ExpressionStatement[9500-9513]"
  }, {
    "left" : "indent++;",
    "right" : "indent++;",
    "info" : "ExpressionStatement[9520-9529]:ExpressionStatement[9520-9529]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9541-9550]:MarkerAnnotation[9541-9550]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9555-9559]:PrimitiveType[9555-9559]"
  }, {
    "left" : "appendBlockEnd",
    "right" : "appendBlockEnd",
    "info" : "SimpleName[9560-9574]:SimpleName[9560-9574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9577-9636]:Block[9577-9636]"
  }, {
    "left" : "endLine();",
    "right" : "endLine();",
    "info" : "ExpressionStatement[9585-9595]:ExpressionStatement[9585-9595]"
  }, {
    "left" : "indent--;",
    "right" : "indent--;",
    "info" : "ExpressionStatement[9602-9611]:ExpressionStatement[9602-9611]"
  }, {
    "left" : "append(\"}\");",
    "right" : "append(\"}\");",
    "info" : "ExpressionStatement[9618-9630]:ExpressionStatement[9618-9630]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9642-9651]:MarkerAnnotation[9642-9651]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9656-9660]:PrimitiveType[9656-9660]"
  }, {
    "left" : "listSeparator",
    "right" : "listSeparator",
    "info" : "SimpleName[9661-9674]:SimpleName[9661-9674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9677-9725]:Block[9677-9725]"
  }, {
    "left" : "add(\", \");",
    "right" : "add(\", \");",
    "info" : "ExpressionStatement[9685-9695]:ExpressionStatement[9685-9695]"
  }, {
    "left" : "maybeLineBreak();",
    "right" : "maybeLineBreak();",
    "info" : "ExpressionStatement[9702-9719]:ExpressionStatement[9702-9719]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9731-9740]:MarkerAnnotation[9731-9740]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9745-9749]:PrimitiveType[9745-9749]"
  }, {
    "left" : "endFunction",
    "right" : "endFunction",
    "info" : "SimpleName[9750-9761]:SimpleName[9750-9761]"
  }, {
    "left" : "boolean statementContext",
    "right" : "boolean statementContext",
    "info" : "SingleVariableDeclaration[9762-9786]:SingleVariableDeclaration[9762-9786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9788-9900]:Block[9788-9900]"
  }, {
    "left" : "super.endFunction(statementContext);",
    "right" : "super.endFunction(statementContext);",
    "info" : "ExpressionStatement[9796-9832]:ExpressionStatement[9796-9832]"
  }, {
    "left" : "if (statementContext)",
    "right" : "if (statementContext)",
    "info" : "IfStatement[9839-9894]:IfStatement[9839-9894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9861-9894]:Block[9861-9894]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[9871-9886]:ExpressionStatement[9871-9886]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9906-9915]:MarkerAnnotation[9906-9915]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9920-9924]:PrimitiveType[9920-9924]"
  }, {
    "left" : "beginCaseBody",
    "right" : "beginCaseBody",
    "info" : "SimpleName[9925-9938]:SimpleName[9925-9938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9941-10010]:Block[9941-10010]"
  }, {
    "left" : "super.beginCaseBody();",
    "right" : "super.beginCaseBody();",
    "info" : "ExpressionStatement[9949-9971]:ExpressionStatement[9949-9971]"
  }, {
    "left" : "indent++;",
    "right" : "indent++;",
    "info" : "ExpressionStatement[9978-9987]:ExpressionStatement[9978-9987]"
  }, {
    "left" : "endLine();",
    "right" : "endLine();",
    "info" : "ExpressionStatement[9994-10004]:ExpressionStatement[9994-10004]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10016-10025]:MarkerAnnotation[10016-10025]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10030-10034]:PrimitiveType[10030-10034]"
  }, {
    "left" : "endCaseBody",
    "right" : "endCaseBody",
    "info" : "SimpleName[10035-10046]:SimpleName[10035-10046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10049-10121]:Block[10049-10121]"
  }, {
    "left" : "super.endCaseBody();",
    "right" : "super.endCaseBody();",
    "info" : "ExpressionStatement[10057-10077]:ExpressionStatement[10057-10077]"
  }, {
    "left" : "indent--;",
    "right" : "indent--;",
    "info" : "ExpressionStatement[10084-10093]:ExpressionStatement[10084-10093]"
  }, {
    "left" : "endStatement();",
    "right" : "endStatement();",
    "info" : "ExpressionStatement[10100-10115]:ExpressionStatement[10100-10115]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10127-10136]:MarkerAnnotation[10127-10136]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10141-10145]:PrimitiveType[10141-10145]"
  }, {
    "left" : "appendOp",
    "right" : "appendOp",
    "info" : "SimpleName[10146-10154]:SimpleName[10146-10154]"
  }, {
    "left" : "String op",
    "right" : "String op",
    "info" : "SingleVariableDeclaration[10155-10164]:SingleVariableDeclaration[10155-10164]"
  }, {
    "left" : "boolean binOp",
    "right" : "boolean binOp",
    "info" : "SingleVariableDeclaration[10166-10179]:SingleVariableDeclaration[10166-10179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10181-10360]:Block[10181-10383]"
  }, {
    "left" : "if (binOp)",
    "right" : "if (binOp)",
    "info" : "IfStatement[10189-10354]:IfStatement[10189-10377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10200-10319]:Block[10200-10342]"
  }, {
    "left" : "if (getLastChar() != ' ')",
    "right" : "if (getLastChar() != ' ' && op.charAt(0) != ',')",
    "info" : "IfStatement[10210-10270]:IfStatement[10210-10293]"
  }, {
    "left" : "getLastChar() != ' '",
    "right" : "getLastChar() != ' '",
    "info" : "InfixExpression[10214-10234]:InfixExpression[10214-10234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10236-10270]:Block[10259-10293]"
  }, {
    "left" : "append(\" \");",
    "right" : "append(\" \");",
    "info" : "ExpressionStatement[10248-10260]:ExpressionStatement[10271-10283]"
  }, {
    "left" : "append(op);",
    "right" : "append(op);",
    "info" : "ExpressionStatement[10279-10290]:ExpressionStatement[10302-10313]"
  }, {
    "left" : "append(\" \");",
    "right" : "append(\" \");",
    "info" : "ExpressionStatement[10299-10311]:ExpressionStatement[10322-10334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10325-10354]:Block[10348-10377]"
  }, {
    "left" : "append(op);",
    "right" : "append(op);",
    "info" : "ExpressionStatement[10335-10346]:ExpressionStatement[10358-10369]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10538-10547]:MarkerAnnotation[10561-10570]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10552-10559]:PrimitiveType[10575-10582]"
  }, {
    "left" : "shouldPreserveExtraBlocks",
    "right" : "shouldPreserveExtraBlocks",
    "info" : "SimpleName[10560-10585]:SimpleName[10583-10608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10588-10800]:Block[10611-10823]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10782-10794]:ReturnStatement[10805-10817]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10880-10887]:Modifier[10903-10910]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[10888-10892]:SimpleType[10911-10915]"
  }, {
    "left" : "getTryForCatch",
    "right" : "getTryForCatch",
    "info" : "SimpleName[10893-10907]:SimpleName[10916-10930]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[10908-10914]:SingleVariableDeclaration[10931-10937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10916-10963]:Block[10939-10986]"
  }, {
    "left" : "return n.getParent().getParent();",
    "right" : "return n.getParent().getParent();",
    "info" : "ReturnStatement[10924-10957]:ReturnStatement[10947-10980]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11075-11084]:MarkerAnnotation[11098-11107]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11089-11096]:PrimitiveType[11112-11119]"
  }, {
    "left" : "breakAfterBlockFor",
    "right" : "breakAfterBlockFor",
    "info" : "SimpleName[11097-11115]:SimpleName[11120-11138]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11116-11122]:SingleVariableDeclaration[11139-11145]"
  }, {
    "left" : "boolean isStatementContext",
    "right" : "boolean isStatementContext",
    "info" : "SingleVariableDeclaration[11125-11151]:SingleVariableDeclaration[11148-11174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11153-11967]:Block[11176-11990]"
  }, {
    "left" : "Preconditions.checkState(n.isBlock());",
    "right" : "Preconditions.checkState(n.isBlock());",
    "info" : "ExpressionStatement[11161-11199]:ExpressionStatement[11184-11222]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[11206-11234]:VariableDeclarationStatement[11229-11257]"
  }, {
    "left" : "if (parent != null)",
    "right" : "if (parent != null)",
    "info" : "IfStatement[11241-11942]:IfStatement[11264-11965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11261-11942]:Block[11284-11965]"
  }, {
    "left" : "int type = parent.getType();",
    "right" : "int type = parent.getType();",
    "info" : "VariableDeclarationStatement[11271-11299]:VariableDeclarationStatement[11294-11322]"
  }, {
    "left" : "switch (type) {\n          case Token.DO:\n            // Don't break before 'while' in DO-WHILE statements.\n            return false;\n          case Token.FUNCTION:\n            // FUNCTIONs are handled separately, don't break here.\n            return false;\n          case Token.TRY:\n            // Don't break before catch\n            return n != parent.getFirstChild();\n          case Token.CATCH:\n            // Don't break before finally\n            return !NodeUtil.hasFinally(getTryForCatch(parent));\n          case Token.IF:\n            // Don't break before else\n            return n == parent.getLastChild();\n        }",
    "right" : "switch (type) {\n          case Token.DO:\n            // Don't break before 'while' in DO-WHILE statements.\n            return false;\n          case Token.FUNCTION:\n            // FUNCTIONs are handled separately, don't break here.\n            return false;\n          case Token.TRY:\n            // Don't break before catch\n            return n != parent.getFirstChild();\n          case Token.CATCH:\n            // Don't break before finally\n            return !NodeUtil.hasFinally(getTryForCatch(parent));\n          case Token.IF:\n            // Don't break before else\n            return n == parent.getLastChild();\n        }",
    "info" : "SwitchStatement[11308-11934]:SwitchStatement[11331-11957]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[11334-11348]:SwitchCase[11357-11371]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11427-11440]:ReturnStatement[11450-11463]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[11451-11471]:SwitchCase[11474-11494]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11551-11564]:ReturnStatement[11574-11587]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[11575-11590]:SwitchCase[11598-11613]"
  }, {
    "left" : "return n != parent.getFirstChild();",
    "right" : "return n != parent.getFirstChild();",
    "info" : "ReturnStatement[11643-11678]:ReturnStatement[11666-11701]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[11689-11706]:SwitchCase[11712-11729]"
  }, {
    "left" : "return !NodeUtil.hasFinally(getTryForCatch(parent));",
    "right" : "return !NodeUtil.hasFinally(getTryForCatch(parent));",
    "info" : "ReturnStatement[11761-11813]:ReturnStatement[11784-11836]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[11824-11838]:SwitchCase[11847-11861]"
  }, {
    "left" : "return n == parent.getLastChild();",
    "right" : "return n == parent.getLastChild();",
    "info" : "ReturnStatement[11890-11924]:ReturnStatement[11913-11947]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11949-11961]:ReturnStatement[11972-11984]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11973-11982]:MarkerAnnotation[11996-12005]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11987-11991]:PrimitiveType[12010-12014]"
  }, {
    "left" : "endFile",
    "right" : "endFile",
    "info" : "SimpleName[11992-11999]:SimpleName[12015-12022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12002-12036]:Block[12025-12059]"
  }, {
    "left" : "maybeEndStatement();",
    "right" : "maybeEndStatement();",
    "info" : "ExpressionStatement[12010-12030]:ExpressionStatement[12033-12053]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12045-12051]:Modifier[12068-12074]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12052-12057]:TYPE_DECLARATION_KIND[12075-12080]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13411-13418]:Modifier[13434-13441]"
  }, {
    "left" : "CompactCodePrinter",
    "right" : "CompactCodePrinter",
    "info" : "SimpleName[13419-13437]:SimpleName[13442-13460]"
  }, {
    "left" : "boolean lineBreak",
    "right" : "boolean lineBreak",
    "info" : "SingleVariableDeclaration[13438-13455]:SingleVariableDeclaration[13461-13478]"
  }, {
    "left" : "boolean preferLineBreakAtEndOfFile",
    "right" : "boolean preferLineBreakAtEndOfFile",
    "info" : "SingleVariableDeclaration[13465-13499]:SingleVariableDeclaration[13488-13522]"
  }, {
    "left" : "int lineLengthThreshold",
    "right" : "int lineLengthThreshold",
    "info" : "SingleVariableDeclaration[13501-13524]:SingleVariableDeclaration[13524-13547]"
  }, {
    "left" : "boolean createSrcMap",
    "right" : "boolean createSrcMap",
    "info" : "SingleVariableDeclaration[13534-13554]:SingleVariableDeclaration[13557-13577]"
  }, {
    "left" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "right" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "info" : "SingleVariableDeclaration[13556-13598]:SingleVariableDeclaration[13579-13621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13600-13779]:Block[13623-13802]"
  }, {
    "left" : "super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);",
    "right" : "super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);",
    "info" : "SuperConstructorInvocation[13608-13671]:SuperConstructorInvocation[13631-13694]"
  }, {
    "left" : "this.lineBreak = lineBreak;",
    "right" : "this.lineBreak = lineBreak;",
    "info" : "ExpressionStatement[13678-13705]:ExpressionStatement[13701-13728]"
  }, {
    "left" : "this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;",
    "right" : "this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;",
    "info" : "ExpressionStatement[13712-13773]:ExpressionStatement[13735-13796]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13880-13889]:MarkerAnnotation[13903-13912]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13894-13898]:PrimitiveType[13917-13921]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[13899-13905]:SimpleName[13922-13928]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[13906-13916]:SingleVariableDeclaration[13929-13939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13918-13983]:Block[13941-14006]"
  }, {
    "left" : "code.append(str);",
    "right" : "code.append(str);",
    "info" : "ExpressionStatement[13926-13943]:ExpressionStatement[13949-13966]"
  }, {
    "left" : "lineLength += str.length();",
    "right" : "lineLength += str.length();",
    "info" : "ExpressionStatement[13950-13977]:ExpressionStatement[13973-14000]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14067-14076]:MarkerAnnotation[14090-14099]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14081-14085]:PrimitiveType[14104-14108]"
  }, {
    "left" : "startNewLine",
    "right" : "startNewLine",
    "info" : "SimpleName[14086-14098]:SimpleName[14109-14121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14101-14351]:Block[14124-14374]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[14109-14345]:IfStatement[14132-14368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14129-14345]:Block[14152-14368]"
  }, {
    "left" : "prevCutPosition = code.length();",
    "right" : "prevCutPosition = code.length();",
    "info" : "ExpressionStatement[14139-14171]:ExpressionStatement[14162-14194]"
  }, {
    "left" : "prevLineStartPosition = lineStartPosition;",
    "right" : "prevLineStartPosition = lineStartPosition;",
    "info" : "ExpressionStatement[14180-14222]:ExpressionStatement[14203-14245]"
  }, {
    "left" : "code.append('\\n');",
    "right" : "code.append('\\n');",
    "info" : "ExpressionStatement[14231-14249]:ExpressionStatement[14254-14272]"
  }, {
    "left" : "lineLength = 0;",
    "right" : "lineLength = 0;",
    "info" : "ExpressionStatement[14258-14273]:ExpressionStatement[14281-14296]"
  }, {
    "left" : "lineIndex++;",
    "right" : "lineIndex++;",
    "info" : "ExpressionStatement[14282-14294]:ExpressionStatement[14305-14317]"
  }, {
    "left" : "lineStartPosition = code.length();",
    "right" : "lineStartPosition = code.length();",
    "info" : "ExpressionStatement[14303-14337]:ExpressionStatement[14326-14360]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14357-14366]:MarkerAnnotation[14380-14389]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14371-14375]:PrimitiveType[14394-14398]"
  }, {
    "left" : "maybeLineBreak",
    "right" : "maybeLineBreak",
    "info" : "SimpleName[14376-14390]:SimpleName[14399-14413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14393-14918]:Block[14416-14941]"
  }, {
    "left" : "if (lineBreak)",
    "right" : "if (lineBreak)",
    "info" : "IfStatement[14401-14519]:IfStatement[14424-14542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14416-14519]:Block[14439-14542]"
  }, {
    "left" : "if (sawFunction)",
    "right" : "if (sawFunction)",
    "info" : "IfStatement[14426-14511]:IfStatement[14449-14534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14443-14511]:Block[14466-14534]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[14455-14470]:ExpressionStatement[14478-14493]"
  }, {
    "left" : "sawFunction = false;",
    "right" : "sawFunction = false;",
    "info" : "ExpressionStatement[14481-14501]:ExpressionStatement[14504-14524]"
  }, {
    "left" : "int len = code.length();",
    "right" : "int len = code.length();",
    "info" : "VariableDeclarationStatement[14696-14720]:VariableDeclarationStatement[14719-14743]"
  }, {
    "left" : "if (preferredBreakPosition == len - 1)",
    "right" : "if (preferredBreakPosition == len - 1)",
    "info" : "IfStatement[14727-14890]:IfStatement[14750-14913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14766-14890]:Block[14789-14913]"
  }, {
    "left" : "char ch = code.charAt(len - 1);",
    "right" : "char ch = code.charAt(len - 1);",
    "info" : "VariableDeclarationStatement[14776-14807]:VariableDeclarationStatement[14799-14830]"
  }, {
    "left" : "if (ch == ';')",
    "right" : "if (ch == ';')",
    "info" : "IfStatement[14816-14882]:IfStatement[14839-14905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14831-14882]:Block[14854-14905]"
  }, {
    "left" : "preferredBreakPosition = len;",
    "right" : "preferredBreakPosition = len;",
    "info" : "ExpressionStatement[14843-14872]:ExpressionStatement[14866-14895]"
  }, {
    "left" : "maybeCutLine();",
    "right" : "maybeCutLine();",
    "info" : "ExpressionStatement[14897-14912]:ExpressionStatement[14920-14935]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15042-15051]:MarkerAnnotation[15065-15074]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15056-15060]:PrimitiveType[15079-15083]"
  }, {
    "left" : "maybeCutLine",
    "right" : "maybeCutLine",
    "info" : "SimpleName[15061-15073]:SimpleName[15084-15096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15076-15711]:Block[15099-15734]"
  }, {
    "left" : "if (lineLength > lineLengthThreshold)",
    "right" : "if (lineLength > lineLengthThreshold)",
    "info" : "IfStatement[15084-15705]:IfStatement[15107-15728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15122-15705]:Block[15145-15728]"
  }, {
    "left" : "if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength)",
    "right" : "if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength)",
    "info" : "IfStatement[15203-15697]:IfStatement[15226-15720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15322-15654]:Block[15345-15677]"
  }, {
    "left" : "int position = preferredBreakPosition;",
    "right" : "int position = preferredBreakPosition;",
    "info" : "VariableDeclarationStatement[15334-15372]:VariableDeclarationStatement[15357-15395]"
  }, {
    "left" : "code.insert(position, '\\n');",
    "right" : "code.insert(position, '\\n');",
    "info" : "ExpressionStatement[15383-15411]:ExpressionStatement[15406-15434]"
  }, {
    "left" : "prevCutPosition = position;",
    "right" : "prevCutPosition = position;",
    "info" : "ExpressionStatement[15422-15449]:ExpressionStatement[15445-15472]"
  }, {
    "left" : "reportLineCut(lineIndex, position - lineStartPosition, true);",
    "right" : "reportLineCut(lineIndex, position - lineStartPosition, true);",
    "info" : "ExpressionStatement[15460-15521]:ExpressionStatement[15483-15544]"
  }, {
    "left" : "lineIndex++;",
    "right" : "lineIndex++;",
    "info" : "ExpressionStatement[15532-15544]:ExpressionStatement[15555-15567]"
  }, {
    "left" : "lineLength -= (position - lineStartPosition);",
    "right" : "lineLength -= (position - lineStartPosition);",
    "info" : "ExpressionStatement[15555-15600]:ExpressionStatement[15578-15623]"
  }, {
    "left" : "lineStartPosition = position + 1;",
    "right" : "lineStartPosition = position + 1;",
    "info" : "ExpressionStatement[15611-15644]:ExpressionStatement[15634-15667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15660-15697]:Block[15683-15720]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[15672-15687]:ExpressionStatement[15695-15710]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15717-15726]:MarkerAnnotation[15740-15749]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15731-15735]:PrimitiveType[15754-15758]"
  }, {
    "left" : "notePreferredLineBreak",
    "right" : "notePreferredLineBreak",
    "info" : "SimpleName[15736-15758]:SimpleName[15759-15781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15761-15814]:Block[15784-15837]"
  }, {
    "left" : "preferredBreakPosition = code.length();",
    "right" : "preferredBreakPosition = code.length();",
    "info" : "ExpressionStatement[15769-15808]:ExpressionStatement[15792-15831]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15820-15829]:MarkerAnnotation[15843-15852]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15834-15838]:PrimitiveType[15857-15861]"
  }, {
    "left" : "endFile",
    "right" : "endFile",
    "info" : "SimpleName[15839-15846]:SimpleName[15862-15869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15849-16923]:Block[15872-16946]"
  }, {
    "left" : "super.endFile();",
    "right" : "super.endFile();",
    "info" : "ExpressionStatement[15857-15873]:ExpressionStatement[15880-15896]"
  }, {
    "left" : "if (!preferLineBreakAtEndOfFile)",
    "right" : "if (!preferLineBreakAtEndOfFile)",
    "info" : "IfStatement[15880-15938]:IfStatement[15903-15961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15913-15938]:Block[15936-15961]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[15923-15930]:ReturnStatement[15946-15953]"
  }, {
    "left" : "if (lineLength > lineLengthThreshold / 2)",
    "right" : "if (lineLength > lineLengthThreshold / 2)",
    "info" : "IfStatement[15945-16917]:IfStatement[15968-16940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15987-16087]:Block[16010-16110]"
  }, {
    "left" : "append(\";\");",
    "right" : "append(\";\");",
    "info" : "ExpressionStatement[16043-16055]:ExpressionStatement[16066-16078]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[16064-16079]:ExpressionStatement[16087-16102]"
  }, {
    "left" : "if (prevCutPosition > 0)",
    "right" : "if (prevCutPosition > 0)",
    "info" : "IfStatement[16093-16917]:IfStatement[16116-16940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16118-16701]:Block[16141-16724]"
  }, {
    "left" : "code.setCharAt(prevCutPosition, ' ');",
    "right" : "code.setCharAt(prevCutPosition, ' ');",
    "info" : "ExpressionStatement[16357-16394]:ExpressionStatement[16380-16417]"
  }, {
    "left" : "lineStartPosition = prevLineStartPosition;",
    "right" : "lineStartPosition = prevLineStartPosition;",
    "info" : "ExpressionStatement[16403-16445]:ExpressionStatement[16426-16468]"
  }, {
    "left" : "lineLength = code.length() - lineStartPosition;",
    "right" : "lineLength = code.length() - lineStartPosition;",
    "info" : "ExpressionStatement[16454-16501]:ExpressionStatement[16477-16524]"
  }, {
    "left" : "reportLineCut(lineIndex, prevCutPosition + 1, false);",
    "right" : "reportLineCut(lineIndex, prevCutPosition + 1, false);",
    "info" : "ExpressionStatement[16510-16563]:ExpressionStatement[16533-16586]"
  }, {
    "left" : "lineIndex--;",
    "right" : "lineIndex--;",
    "info" : "ExpressionStatement[16572-16584]:ExpressionStatement[16595-16607]"
  }, {
    "left" : "prevCutPosition = 0;",
    "right" : "prevCutPosition = 0;",
    "info" : "ExpressionStatement[16593-16613]:ExpressionStatement[16616-16636]"
  }, {
    "left" : "prevLineStartPosition = 0;",
    "right" : "prevLineStartPosition = 0;",
    "info" : "ExpressionStatement[16622-16648]:ExpressionStatement[16645-16671]"
  }, {
    "left" : "append(\";\");",
    "right" : "append(\";\");",
    "info" : "ExpressionStatement[16657-16669]:ExpressionStatement[16680-16692]"
  }, {
    "left" : "startNewLine();",
    "right" : "startNewLine();",
    "info" : "ExpressionStatement[16678-16693]:ExpressionStatement[16701-16716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16707-16917]:Block[16730-16940]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16932-16938]:Modifier[16955-16961]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[16939-16944]:TYPE_DECLARATION_KIND[16962-16967]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleName[17660-17667]:SimpleName[17683-17690]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[17668-17677]:SingleVariableDeclaration[17691-17700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17679-17705]:Block[17702-17728]"
  }, {
    "left" : "root = node;",
    "right" : "root = node;",
    "info" : "ExpressionStatement[17687-17699]:ExpressionStatement[17710-17722]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[17844-17851]:SimpleType[17867-17874]"
  }, {
    "left" : "setPrettyPrint",
    "right" : "setPrettyPrint",
    "info" : "SimpleName[17852-17866]:SimpleName[17875-17889]"
  }, {
    "left" : "boolean prettyPrint",
    "right" : "boolean prettyPrint",
    "info" : "SingleVariableDeclaration[17867-17886]:SingleVariableDeclaration[17890-17909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17888-17952]:Block[17911-17975]"
  }, {
    "left" : "this.prettyPrint = prettyPrint;",
    "right" : "this.prettyPrint = prettyPrint;",
    "info" : "ExpressionStatement[17896-17927]:ExpressionStatement[17919-17950]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[17934-17946]:ReturnStatement[17957-17969]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[18108-18115]:SimpleType[18131-18138]"
  }, {
    "left" : "setLineBreak",
    "right" : "setLineBreak",
    "info" : "SimpleName[18116-18128]:SimpleName[18139-18151]"
  }, {
    "left" : "boolean lineBreak",
    "right" : "boolean lineBreak",
    "info" : "SingleVariableDeclaration[18129-18146]:SingleVariableDeclaration[18152-18169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18148-18208]:Block[18171-18231]"
  }, {
    "left" : "this.lineBreak = lineBreak;",
    "right" : "this.lineBreak = lineBreak;",
    "info" : "ExpressionStatement[18156-18183]:ExpressionStatement[18179-18206]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[18190-18202]:ReturnStatement[18213-18225]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[18505-18512]:SimpleType[18528-18535]"
  }, {
    "left" : "setPreferLineBreakAtEndOfFile",
    "right" : "setPreferLineBreakAtEndOfFile",
    "info" : "SimpleName[18513-18542]:SimpleName[18536-18565]"
  }, {
    "left" : "boolean lineBreakAtEnd",
    "right" : "boolean lineBreakAtEnd",
    "info" : "SingleVariableDeclaration[18543-18565]:SingleVariableDeclaration[18566-18588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18567-18649]:Block[18590-18672]"
  }, {
    "left" : "this.preferLineBreakAtEndOfFile = lineBreakAtEnd;",
    "right" : "this.preferLineBreakAtEndOfFile = lineBreakAtEnd;",
    "info" : "ExpressionStatement[18575-18624]:ExpressionStatement[18598-18647]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[18631-18643]:ReturnStatement[18654-18666]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[18808-18815]:SimpleType[18831-18838]"
  }, {
    "left" : "setOutputTypes",
    "right" : "setOutputTypes",
    "info" : "SimpleName[18816-18830]:SimpleName[18839-18853]"
  }, {
    "left" : "boolean outputTypes",
    "right" : "boolean outputTypes",
    "info" : "SingleVariableDeclaration[18831-18850]:SingleVariableDeclaration[18854-18873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18852-18916]:Block[18875-18939]"
  }, {
    "left" : "this.outputTypes = outputTypes;",
    "right" : "this.outputTypes = outputTypes;",
    "info" : "ExpressionStatement[18860-18891]:ExpressionStatement[18883-18914]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[18898-18910]:ReturnStatement[18921-18933]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[19117-19124]:SimpleType[19140-19147]"
  }, {
    "left" : "setLineLengthThreshold",
    "right" : "setLineLengthThreshold",
    "info" : "SimpleName[19125-19147]:SimpleName[19148-19170]"
  }, {
    "left" : "int threshold",
    "right" : "int threshold",
    "info" : "SingleVariableDeclaration[19148-19161]:SingleVariableDeclaration[19171-19184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19163-19233]:Block[19186-19256]"
  }, {
    "left" : "this.lineLengthThreshold = threshold;",
    "right" : "this.lineLengthThreshold = threshold;",
    "info" : "ExpressionStatement[19171-19208]:ExpressionStatement[19194-19231]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19215-19227]:ReturnStatement[19238-19250]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[19400-19407]:SimpleType[19423-19430]"
  }, {
    "left" : "setSourceMap",
    "right" : "setSourceMap",
    "info" : "SimpleName[19408-19420]:SimpleName[19431-19443]"
  }, {
    "left" : "SourceMap sourceMap",
    "right" : "SourceMap sourceMap",
    "info" : "SingleVariableDeclaration[19421-19440]:SingleVariableDeclaration[19444-19463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19442-19502]:Block[19465-19525]"
  }, {
    "left" : "this.sourceMap = sourceMap;",
    "right" : "this.sourceMap = sourceMap;",
    "info" : "ExpressionStatement[19450-19477]:ExpressionStatement[19473-19500]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19484-19496]:ReturnStatement[19507-19519]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[19569-19576]:SimpleType[19592-19599]"
  }, {
    "left" : "setSourceMapDetailLevel",
    "right" : "setSourceMapDetailLevel",
    "info" : "SimpleName[19577-19600]:SimpleName[19600-19623]"
  }, {
    "left" : "SourceMap.DetailLevel level",
    "right" : "SourceMap.DetailLevel level",
    "info" : "SingleVariableDeclaration[19601-19628]:SingleVariableDeclaration[19624-19651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19630-19744]:Block[19653-19767]"
  }, {
    "left" : "Preconditions.checkState(level != null);",
    "right" : "Preconditions.checkState(level != null);",
    "info" : "ExpressionStatement[19638-19678]:ExpressionStatement[19661-19701]"
  }, {
    "left" : "this.sourceMapDetailLevel = level;",
    "right" : "this.sourceMapDetailLevel = level;",
    "info" : "ExpressionStatement[19685-19719]:ExpressionStatement[19708-19742]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19726-19738]:ReturnStatement[19749-19761]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[19870-19877]:SimpleType[19893-19900]"
  }, {
    "left" : "setOutputCharset",
    "right" : "setOutputCharset",
    "info" : "SimpleName[19878-19894]:SimpleName[19901-19917]"
  }, {
    "left" : "Charset outCharset",
    "right" : "Charset outCharset",
    "info" : "SingleVariableDeclaration[19895-19913]:SingleVariableDeclaration[19918-19936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19915-19980]:Block[19938-20003]"
  }, {
    "left" : "this.outputCharset = outCharset;",
    "right" : "this.outputCharset = outCharset;",
    "info" : "ExpressionStatement[19923-19955]:ExpressionStatement[19946-19978]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19962-19974]:ReturnStatement[19985-19997]"
  }, {
    "left" : "Builder",
    "right" : "Builder",
    "info" : "SimpleType[20071-20078]:SimpleType[20094-20101]"
  }, {
    "left" : "setTagAsStrict",
    "right" : "setTagAsStrict",
    "info" : "SimpleName[20079-20093]:SimpleName[20102-20116]"
  }, {
    "left" : "boolean tagAsStrict",
    "right" : "boolean tagAsStrict",
    "info" : "SingleVariableDeclaration[20094-20113]:SingleVariableDeclaration[20117-20136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20115-20179]:Block[20138-20202]"
  }, {
    "left" : "this.tagAsStrict = tagAsStrict;",
    "right" : "this.tagAsStrict = tagAsStrict;",
    "info" : "ExpressionStatement[20123-20154]:ExpressionStatement[20146-20177]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[20161-20173]:ReturnStatement[20184-20196]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[20250-20256]:SimpleType[20273-20279]"
  }, {
    "left" : "build",
    "right" : "build",
    "info" : "SimpleName[20257-20262]:SimpleName[20280-20285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20265-20747]:Block[20288-20770]"
  }, {
    "left" : "if (root == null)",
    "right" : "if (root == null)",
    "info" : "IfStatement[20273-20404]:IfStatement[20296-20427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20291-20404]:Block[20314-20427]"
  }, {
    "left" : "throw new IllegalStateException(\n            \"Cannot build without root node being specified\");",
    "right" : "throw new IllegalStateException(\n            \"Cannot build without root node being specified\");",
    "info" : "ThrowStatement[20301-20396]:ThrowStatement[20324-20419]"
  }, {
    "left" : "Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;",
    "right" : "Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;",
    "info" : "VariableDeclarationStatement[20412-20556]:VariableDeclarationStatement[20435-20579]"
  }, {
    "left" : "return toSource(root, outputFormat, lineBreak, preferLineBreakAtEndOfFile,\n          lineLengthThreshold, sourceMap, sourceMapDetailLevel, outputCharset,\n          tagAsStrict);",
    "right" : "return toSource(root, outputFormat, lineBreak, preferLineBreakAtEndOfFile,\n          lineLengthThreshold, sourceMap, sourceMapDetailLevel, outputCharset,\n          tagAsStrict);",
    "info" : "ReturnStatement[20564-20741]:ReturnStatement[20587-20764]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20855-20862]:Modifier[20878-20885]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20863-20869]:Modifier[20886-20892]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[20870-20876]:SimpleType[20893-20899]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[20877-20885]:SimpleName[20900-20908]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[20886-20895]:SingleVariableDeclaration[20909-20918]"
  }, {
    "left" : "Format outputFormat",
    "right" : "Format outputFormat",
    "info" : "SingleVariableDeclaration[20897-20916]:SingleVariableDeclaration[20920-20939]"
  }, {
    "left" : "boolean lineBreak",
    "right" : "boolean lineBreak",
    "info" : "SingleVariableDeclaration[20951-20968]:SingleVariableDeclaration[20974-20991]"
  }, {
    "left" : "boolean preferEndOfFileBreak",
    "right" : "boolean preferEndOfFileBreak",
    "info" : "SingleVariableDeclaration[20971-20999]:SingleVariableDeclaration[20994-21022]"
  }, {
    "left" : "int lineLengthThreshold",
    "right" : "int lineLengthThreshold",
    "info" : "SingleVariableDeclaration[21034-21057]:SingleVariableDeclaration[21057-21080]"
  }, {
    "left" : "SourceMap sourceMap",
    "right" : "SourceMap sourceMap",
    "info" : "SingleVariableDeclaration[21092-21111]:SingleVariableDeclaration[21115-21134]"
  }, {
    "left" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "right" : "SourceMap.DetailLevel sourceMapDetailLevel",
    "info" : "SingleVariableDeclaration[21146-21188]:SingleVariableDeclaration[21169-21211]"
  }, {
    "left" : "Charset outputCharset",
    "right" : "Charset outputCharset",
    "info" : "SingleVariableDeclaration[21223-21244]:SingleVariableDeclaration[21246-21267]"
  }, {
    "left" : "boolean tagAsStrict",
    "right" : "boolean tagAsStrict",
    "info" : "SingleVariableDeclaration[21279-21298]:SingleVariableDeclaration[21302-21321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21300-22121]:Block[21323-22144]"
  }, {
    "left" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "right" : "Preconditions.checkState(sourceMapDetailLevel != null);",
    "info" : "ExpressionStatement[21306-21361]:ExpressionStatement[21329-21384]"
  }, {
    "left" : "boolean createSourceMap = (sourceMap != null);",
    "right" : "boolean createSourceMap = (sourceMap != null);",
    "info" : "VariableDeclarationStatement[21367-21413]:VariableDeclarationStatement[21390-21436]"
  }, {
    "left" : "MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);",
    "right" : "MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);",
    "info" : "VariableDeclarationStatement[21418-21737]:VariableDeclarationStatement[21441-21760]"
  }, {
    "left" : "CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);",
    "right" : "CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);",
    "info" : "VariableDeclarationStatement[21742-21899]:VariableDeclarationStatement[21765-21922]"
  }, {
    "left" : "if (tagAsStrict)",
    "right" : "if (tagAsStrict)",
    "info" : "IfStatement[21905-21953]:IfStatement[21928-21976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21922-21953]:Block[21945-21976]"
  }, {
    "left" : "cg.tagAsStrict();",
    "right" : "cg.tagAsStrict();",
    "info" : "ExpressionStatement[21930-21947]:ExpressionStatement[21953-21970]"
  }, {
    "left" : "cg.add(root);",
    "right" : "cg.add(root);",
    "info" : "ExpressionStatement[21959-21972]:ExpressionStatement[21982-21995]"
  }, {
    "left" : "mcp.endFile();",
    "right" : "mcp.endFile();",
    "info" : "ExpressionStatement[21977-21991]:ExpressionStatement[22000-22014]"
  }, {
    "left" : "String code = mcp.getCode();",
    "right" : "String code = mcp.getCode();",
    "info" : "VariableDeclarationStatement[21997-22025]:VariableDeclarationStatement[22020-22048]"
  }, {
    "left" : "if (createSourceMap)",
    "right" : "if (createSourceMap)",
    "info" : "IfStatement[22031-22099]:IfStatement[22054-22122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22052-22099]:Block[22075-22122]"
  }, {
    "left" : "mcp.generateSourceMap(sourceMap);",
    "right" : "mcp.generateSourceMap(sourceMap);",
    "info" : "ExpressionStatement[22060-22093]:ExpressionStatement[22083-22116]"
  }, {
    "left" : "return code;",
    "right" : "return code;",
    "info" : "ReturnStatement[22105-22117]:ReturnStatement[22128-22140]"
  } ]
}