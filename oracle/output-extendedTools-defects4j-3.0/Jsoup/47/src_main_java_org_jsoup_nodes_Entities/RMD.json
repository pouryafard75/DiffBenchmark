{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Entities",
      "right" : "Entities",
      "info" : "TypeDeclaration[212-10073]:TypeDeclaration[212-10107]"
    }, {
      "left" : "enum : EscapeMode",
      "right" : "enum : EscapeMode",
      "info" : "EnumDeclaration[438-940]:EnumDeclaration[438-940]"
    }, {
      "left" : "private Map<Character, String> map;",
      "right" : "private Map<Character, String> map;",
      "info" : "FieldDeclaration[727-762]:FieldDeclaration[727-762]"
    }, {
      "left" : "EscapeMode(Map<Character, String> map)",
      "right" : "EscapeMode(Map<Character, String> map)",
      "info" : "MethodDeclaration[772-850]:MethodDeclaration[772-850]"
    }, {
      "left" : "public Map<Character, String> getMap()",
      "right" : "public Map<Character, String> getMap()",
      "info" : "MethodDeclaration[860-934]:MethodDeclaration[860-934]"
    }, {
      "left" : "private static final Map<String, Character> full;",
      "right" : "private static final Map<String, Character> full;",
      "info" : "FieldDeclaration[946-995]:FieldDeclaration[946-995]"
    }, {
      "left" : "private static final Map<Character, String> xhtmlByVal;",
      "right" : "private static final Map<Character, String> xhtmlByVal;",
      "info" : "FieldDeclaration[1000-1055]:FieldDeclaration[1000-1055]"
    }, {
      "left" : "private static final Map<String, Character> base;",
      "right" : "private static final Map<String, Character> base;",
      "info" : "FieldDeclaration[1060-1109]:FieldDeclaration[1060-1109]"
    }, {
      "left" : "private static final Map<Character, String> baseByVal;",
      "right" : "private static final Map<Character, String> baseByVal;",
      "info" : "FieldDeclaration[1114-1168]:FieldDeclaration[1114-1168]"
    }, {
      "left" : "private static final Map<Character, String> fullByVal;",
      "right" : "private static final Map<Character, String> fullByVal;",
      "info" : "FieldDeclaration[1173-1227]:FieldDeclaration[1173-1227]"
    }, {
      "left" : "private Entities()",
      "right" : "private Entities()",
      "info" : "MethodDeclaration[1233-1254]:MethodDeclaration[1233-1254]"
    }, {
      "left" : "public static boolean isNamedEntity(String name)",
      "right" : "public static boolean isNamedEntity(String name)",
      "info" : "MethodDeclaration[1260-1530]:MethodDeclaration[1260-1530]"
    }, {
      "left" : "public static boolean isBaseNamedEntity(String name)",
      "right" : "public static boolean isBaseNamedEntity(String name)",
      "info" : "MethodDeclaration[1536-1885]:MethodDeclaration[1536-1885]"
    }, {
      "left" : "public static Character getCharacterByName(String name)",
      "right" : "public static Character getCharacterByName(String name)",
      "info" : "MethodDeclaration[1891-2200]:MethodDeclaration[1891-2200]"
    }, {
      "left" : "static String escape(String string, Document.OutputSettings out)",
      "right" : "static String escape(String string, Document.OutputSettings out)",
      "info" : "MethodDeclaration[2210-2442]:MethodDeclaration[2210-2442]"
    }, {
      "left" : "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite)",
      "right" : "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite)",
      "info" : "MethodDeclaration[2558-6016]:MethodDeclaration[2558-6050]"
    }, {
      "left" : "static String unescape(String string)",
      "right" : "static String unescape(String string)",
      "info" : "MethodDeclaration[6022-6107]:MethodDeclaration[6056-6141]"
    }, {
      "left" : "static String unescape(String string, boolean strict)",
      "right" : "static String unescape(String string, boolean strict)",
      "info" : "MethodDeclaration[6113-6449]:MethodDeclaration[6147-6483]"
    }, {
      "left" : "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback)",
      "right" : "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback)",
      "info" : "MethodDeclaration[7032-7543]:MethodDeclaration[7066-7577]"
    }, {
      "left" : "enum : CoreCharset",
      "right" : "enum : CoreCharset",
      "info" : "EnumDeclaration[7549-7879]:EnumDeclaration[7583-7913]"
    }, {
      "left" : "private static CoreCharset byName(String name)",
      "right" : "private static CoreCharset byName(String name)",
      "info" : "MethodDeclaration[7615-7873]:MethodDeclaration[7649-7907]"
    }, {
      "left" : "private static final Object[][] xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    };",
      "right" : "private static final Object[][] xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    };",
      "info" : "FieldDeclaration[7923-8094]:FieldDeclaration[7957-8128]"
    }, {
      "left" : "private static Map<String, Character> loadEntities(String filename)",
      "right" : "private static Map<String, Character> loadEntities(String filename)",
      "info" : "MethodDeclaration[8621-9418]:MethodDeclaration[8655-9452]"
    }, {
      "left" : "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap)",
      "right" : "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap)",
      "info" : "MethodDeclaration[9424-10071]:MethodDeclaration[9458-10105]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[410-416]:Modifier[410-416]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[417-422]:TYPE_DECLARATION_KIND[417-422]"
    }, {
      "left" : "Entities",
      "right" : "Entities",
      "info" : "SimpleName[423-431]:SimpleName[423-431]"
    }, {
      "left" : "EscapeMode",
      "right" : "EscapeMode",
      "info" : "SimpleName[772-782]:SimpleName[772-782]"
    }, {
      "left" : "Map<Character, String> map",
      "right" : "Map<Character, String> map",
      "info" : "SingleVariableDeclaration[783-809]:SingleVariableDeclaration[783-809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[811-850]:Block[811-850]"
    }, {
      "left" : "this.map = map;",
      "right" : "this.map = map;",
      "info" : "ExpressionStatement[825-840]:ExpressionStatement[825-840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[860-866]:Modifier[860-866]"
    }, {
      "left" : "Map<Character, String>",
      "right" : "Map<Character, String>",
      "info" : "ParameterizedType[867-889]:ParameterizedType[867-889]"
    }, {
      "left" : "getMap",
      "right" : "getMap",
      "info" : "SimpleName[890-896]:SimpleName[890-896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[899-934]:Block[899-934]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[913-924]:ReturnStatement[913-924]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1233-1240]:Modifier[1233-1240]"
    }, {
      "left" : "Entities",
      "right" : "Entities",
      "info" : "SimpleName[1241-1249]:SimpleName[1241-1249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1252-1254]:Block[1252-1254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1435-1441]:Modifier[1435-1441]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1442-1448]:Modifier[1442-1448]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1449-1456]:PrimitiveType[1449-1456]"
    }, {
      "left" : "isNamedEntity",
      "right" : "isNamedEntity",
      "info" : "SimpleName[1457-1470]:SimpleName[1457-1470]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[1471-1482]:SingleVariableDeclaration[1471-1482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1484-1530]:Block[1484-1530]"
    }, {
      "left" : "return full.containsKey(name);",
      "right" : "return full.containsKey(name);",
      "info" : "ReturnStatement[1494-1524]:ReturnStatement[1494-1524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1786-1792]:Modifier[1786-1792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1793-1799]:Modifier[1793-1799]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1800-1807]:PrimitiveType[1800-1807]"
    }, {
      "left" : "isBaseNamedEntity",
      "right" : "isBaseNamedEntity",
      "info" : "SimpleName[1808-1825]:SimpleName[1808-1825]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[1826-1837]:SingleVariableDeclaration[1826-1837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1839-1885]:Block[1839-1885]"
    }, {
      "left" : "return base.containsKey(name);",
      "right" : "return base.containsKey(name);",
      "info" : "ReturnStatement[1849-1879]:ReturnStatement[1849-1879]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2106-2112]:Modifier[2106-2112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2113-2119]:Modifier[2113-2119]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[2120-2129]:SimpleType[2120-2129]"
    }, {
      "left" : "getCharacterByName",
      "right" : "getCharacterByName",
      "info" : "SimpleName[2130-2148]:SimpleName[2130-2148]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[2149-2160]:SingleVariableDeclaration[2149-2160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2162-2200]:Block[2162-2200]"
    }, {
      "left" : "return full.get(name);",
      "right" : "return full.get(name);",
      "info" : "ReturnStatement[2172-2194]:ReturnStatement[2172-2194]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2210-2216]:Modifier[2210-2216]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2217-2223]:SimpleType[2217-2223]"
    }, {
      "left" : "escape",
      "right" : "escape",
      "info" : "SimpleName[2224-2230]:SimpleName[2224-2230]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[2231-2244]:SingleVariableDeclaration[2231-2244]"
    }, {
      "left" : "Document.OutputSettings out",
      "right" : "Document.OutputSettings out",
      "info" : "SingleVariableDeclaration[2246-2273]:SingleVariableDeclaration[2246-2273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2275-2442]:Block[2275-2442]"
    }, {
      "left" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
      "right" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
      "info" : "VariableDeclarationStatement[2285-2346]:VariableDeclarationStatement[2285-2346]"
    }, {
      "left" : "escape(accum, string, out, false, false, false);",
      "right" : "escape(accum, string, out, false, false, false);",
      "info" : "ExpressionStatement[2355-2403]:ExpressionStatement[2355-2403]"
    }, {
      "left" : "return accum.toString();",
      "right" : "return accum.toString();",
      "info" : "ReturnStatement[2412-2436]:ReturnStatement[2412-2436]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2558-2564]:Modifier[2558-2564]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2565-2569]:PrimitiveType[2565-2569]"
    }, {
      "left" : "escape",
      "right" : "escape",
      "info" : "SimpleName[2570-2576]:SimpleName[2570-2576]"
    }, {
      "left" : "StringBuilder accum",
      "right" : "StringBuilder accum",
      "info" : "SingleVariableDeclaration[2577-2596]:SingleVariableDeclaration[2577-2596]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[2598-2611]:SingleVariableDeclaration[2598-2611]"
    }, {
      "left" : "Document.OutputSettings out",
      "right" : "Document.OutputSettings out",
      "info" : "SingleVariableDeclaration[2613-2640]:SingleVariableDeclaration[2613-2640]"
    }, {
      "left" : "boolean inAttribute",
      "right" : "boolean inAttribute",
      "info" : "SingleVariableDeclaration[2665-2684]:SingleVariableDeclaration[2665-2684]"
    }, {
      "left" : "boolean normaliseWhite",
      "right" : "boolean normaliseWhite",
      "info" : "SingleVariableDeclaration[2686-2708]:SingleVariableDeclaration[2686-2708]"
    }, {
      "left" : "boolean stripLeadingWhite",
      "right" : "boolean stripLeadingWhite",
      "info" : "SingleVariableDeclaration[2710-2735]:SingleVariableDeclaration[2710-2735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2737-6016]:Block[2737-6050]"
    }, {
      "left" : "boolean lastWasWhite = false;",
      "right" : "boolean lastWasWhite = false;",
      "info" : "VariableDeclarationStatement[2748-2777]:VariableDeclarationStatement[2748-2777]"
    }, {
      "left" : "boolean reachedNonWhite = false;",
      "right" : "boolean reachedNonWhite = false;",
      "info" : "VariableDeclarationStatement[2786-2818]:VariableDeclarationStatement[2786-2818]"
    }, {
      "left" : "final EscapeMode escapeMode = out.escapeMode();",
      "right" : "final EscapeMode escapeMode = out.escapeMode();",
      "info" : "VariableDeclarationStatement[2827-2874]:VariableDeclarationStatement[2827-2874]"
    }, {
      "left" : "final CharsetEncoder encoder = out.encoder();",
      "right" : "final CharsetEncoder encoder = out.encoder();",
      "info" : "VariableDeclarationStatement[2883-2928]:VariableDeclarationStatement[2883-2928]"
    }, {
      "left" : "final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());",
      "right" : "final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());",
      "info" : "VariableDeclarationStatement[2937-3014]:VariableDeclarationStatement[2937-3014]"
    }, {
      "left" : "final Map<Character, String> map = escapeMode.getMap();",
      "right" : "final Map<Character, String> map = escapeMode.getMap();",
      "info" : "VariableDeclarationStatement[3023-3078]:VariableDeclarationStatement[3023-3078]"
    }, {
      "left" : "final int length = string.length();",
      "right" : "final int length = string.length();",
      "info" : "VariableDeclarationStatement[3087-3122]:VariableDeclarationStatement[3087-3122]"
    }, {
      "left" : "int codePoint;",
      "right" : "int codePoint;",
      "info" : "VariableDeclarationStatement[3132-3146]:VariableDeclarationStatement[3132-3146]"
    }, {
      "left" : "for (int offset = 0; offset < length; offset += Character.charCount(codePoint))",
      "right" : "for (int offset = 0; offset < length; offset += Character.charCount(codePoint))",
      "info" : "ForStatement[3155-6010]:ForStatement[3155-6044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3235-6010]:Block[3235-6044]"
    }, {
      "left" : "codePoint = string.codePointAt(offset);",
      "right" : "codePoint = string.codePointAt(offset);",
      "info" : "ExpressionStatement[3249-3288]:ExpressionStatement[3249-3288]"
    }, {
      "left" : "if (normaliseWhite)",
      "right" : "if (normaliseWhite)",
      "info" : "IfStatement[3302-3749]:IfStatement[3302-3749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3322-3749]:Block[3322-3749]"
    }, {
      "left" : "if (StringUtil.isWhitespace(codePoint))",
      "right" : "if (StringUtil.isWhitespace(codePoint))",
      "info" : "IfStatement[3340-3735]:IfStatement[3340-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3380-3624]:Block[3380-3624]"
    }, {
      "left" : "if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)",
      "right" : "if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)",
      "info" : "IfStatement[3402-3496]:IfStatement[3402-3496]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3487-3496]:ContinueStatement[3487-3496]"
    }, {
      "left" : "accum.append(' ');",
      "right" : "accum.append(' ');",
      "info" : "ExpressionStatement[3517-3535]:ExpressionStatement[3517-3535]"
    }, {
      "left" : "lastWasWhite = true;",
      "right" : "lastWasWhite = true;",
      "info" : "ExpressionStatement[3556-3576]:ExpressionStatement[3556-3576]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3597-3606]:ContinueStatement[3597-3606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3630-3735]:Block[3630-3735]"
    }, {
      "left" : "lastWasWhite = false;",
      "right" : "lastWasWhite = false;",
      "info" : "ExpressionStatement[3652-3673]:ExpressionStatement[3652-3673]"
    }, {
      "left" : "reachedNonWhite = true;",
      "right" : "reachedNonWhite = true;",
      "info" : "ExpressionStatement[3694-3717]:ExpressionStatement[3694-3717]"
    }, {
      "left" : "if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT)",
      "right" : "if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT)",
      "info" : "IfStatement[3891-6000]:IfStatement[3891-6034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3947-5672]:Block[3947-5706]"
    }, {
      "left" : "final char c = (char) codePoint;",
      "right" : "final char c = (char) codePoint;",
      "info" : "VariableDeclarationStatement[3965-3997]:VariableDeclarationStatement[3965-3997]"
    }, {
      "left" : "switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(\"&#xa0;\");\n                        break;\n                    case '<':\n                        // escape when in character data or when in a xml attribue val; not needed in html attr val\n                        if (!inAttribute)\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }",
      "right" : "switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(\"&#xa0;\");\n                        break;\n                    case '<':\n                        // escape when in character data or when in a xml attribue val; not needed in html attr val\n                        if (!inAttribute || escapeMode == EscapeMode.xhtml)\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }",
      "info" : "SwitchStatement[4069-5658]:SwitchStatement[4069-5692]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[4102-4111]:SwitchCase[4102-4111]"
    }, {
      "left" : "accum.append(\"&amp;\");",
      "right" : "accum.append(\"&amp;\");",
      "info" : "ExpressionStatement[4136-4158]:ExpressionStatement[4136-4158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4183-4189]:BreakStatement[4183-4189]"
    }, {
      "left" : "case 0xA0:",
      "right" : "case 0xA0:",
      "info" : "SwitchCase[4210-4220]:SwitchCase[4210-4220]"
    }, {
      "left" : "if (escapeMode != EscapeMode.xhtml)",
      "right" : "if (escapeMode != EscapeMode.xhtml)",
      "info" : "IfStatement[4245-4413]:IfStatement[4245-4413]"
    }, {
      "left" : "accum.append(\"&nbsp;\");",
      "right" : "accum.append(\"&nbsp;\");",
      "info" : "ExpressionStatement[4309-4332]:ExpressionStatement[4309-4332]"
    }, {
      "left" : "accum.append(\"&#xa0;\");",
      "right" : "accum.append(\"&#xa0;\");",
      "info" : "ExpressionStatement[4390-4413]:ExpressionStatement[4390-4413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4438-4444]:BreakStatement[4438-4444]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[4465-4474]:SwitchCase[4465-4474]"
    }, {
      "left" : "if (!inAttribute)",
      "right" : "if (!inAttribute || escapeMode == EscapeMode.xhtml)",
      "info" : "IfStatement[4615-4756]:IfStatement[4615-4790]"
    }, {
      "left" : "!inAttribute",
      "right" : "!inAttribute",
      "info" : "PrefixExpression[4619-4631]:PrefixExpression[4619-4631]"
    }, {
      "left" : "accum.append(\"&lt;\");",
      "right" : "accum.append(\"&lt;\");",
      "info" : "ExpressionStatement[4661-4682]:ExpressionStatement[4695-4716]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[4740-4756]:ExpressionStatement[5001-5017]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4781-4787]:BreakStatement[4815-4821]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[4808-4817]:SwitchCase[4842-4851]"
    }, {
      "left" : "if (!inAttribute)",
      "right" : "if (!inAttribute)",
      "info" : "IfStatement[4842-4983]:IfStatement[4876-5017]"
    }, {
      "left" : "accum.append(\"&gt;\");",
      "right" : "accum.append(\"&gt;\");",
      "info" : "ExpressionStatement[4888-4909]:ExpressionStatement[4922-4943]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[4967-4983]:ExpressionStatement[5229-5245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5008-5014]:BreakStatement[5042-5048]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[5035-5044]:SwitchCase[5069-5078]"
    }, {
      "left" : "if (inAttribute)",
      "right" : "if (inAttribute)",
      "info" : "IfStatement[5069-5211]:IfStatement[5103-5245]"
    }, {
      "left" : "accum.append(\"&quot;\");",
      "right" : "accum.append(\"&quot;\");",
      "info" : "ExpressionStatement[5114-5137]:ExpressionStatement[5148-5171]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[5195-5211]:ExpressionStatement[4774-4790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5236-5242]:BreakStatement[5270-5276]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5263-5271]:SwitchCase[5297-5305]"
    }, {
      "left" : "if (canEncode(coreCharset, c, encoder))",
      "right" : "if (canEncode(coreCharset, c, encoder))",
      "info" : "IfStatement[5296-5640]:IfStatement[5330-5674]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[5364-5380]:ExpressionStatement[5398-5414]"
    }, {
      "left" : "if (map.containsKey(c))",
      "right" : "if (map.containsKey(c))",
      "info" : "IfStatement[5410-5640]:IfStatement[5444-5674]"
    }, {
      "left" : "accum.append('&').append(map.get(c)).append(';');",
      "right" : "accum.append('&').append(map.get(c)).append(';');",
      "info" : "ExpressionStatement[5462-5511]:ExpressionStatement[5496-5545]"
    }, {
      "left" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "right" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "info" : "ExpressionStatement[5569-5640]:ExpressionStatement[5603-5674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5678-6000]:Block[5712-6034]"
    }, {
      "left" : "final String c = new String(Character.toChars(codePoint));",
      "right" : "final String c = new String(Character.toChars(codePoint));",
      "info" : "VariableDeclarationStatement[5696-5754]:VariableDeclarationStatement[5730-5788]"
    }, {
      "left" : "if (encoder.canEncode(c))",
      "right" : "if (encoder.canEncode(c))",
      "info" : "IfStatement[5771-5986]:IfStatement[5805-6020]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[5857-5873]:ExpressionStatement[5891-5907]"
    }, {
      "left" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "right" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "info" : "ExpressionStatement[5915-5986]:ExpressionStatement[5949-6020]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6022-6028]:Modifier[6056-6062]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6029-6035]:SimpleType[6063-6069]"
    }, {
      "left" : "unescape",
      "right" : "unescape",
      "info" : "SimpleName[6036-6044]:SimpleName[6070-6078]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[6045-6058]:SingleVariableDeclaration[6079-6092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6060-6107]:Block[6094-6141]"
    }, {
      "left" : "return unescape(string, false);",
      "right" : "return unescape(string, false);",
      "info" : "ReturnStatement[6070-6101]:ReturnStatement[6104-6135]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6332-6338]:Modifier[6366-6372]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6339-6345]:SimpleType[6373-6379]"
    }, {
      "left" : "unescape",
      "right" : "unescape",
      "info" : "SimpleName[6346-6354]:SimpleName[6380-6388]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[6355-6368]:SingleVariableDeclaration[6389-6402]"
    }, {
      "left" : "boolean strict",
      "right" : "boolean strict",
      "info" : "SingleVariableDeclaration[6370-6384]:SingleVariableDeclaration[6404-6418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6386-6449]:Block[6420-6483]"
    }, {
      "left" : "return Parser.unescapeEntities(string, strict);",
      "right" : "return Parser.unescapeEntities(string, strict);",
      "info" : "ReturnStatement[6396-6443]:ReturnStatement[6430-6477]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7032-7039]:Modifier[7066-7073]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7040-7046]:Modifier[7074-7080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7047-7054]:PrimitiveType[7081-7088]"
    }, {
      "left" : "canEncode",
      "right" : "canEncode",
      "info" : "SimpleName[7055-7064]:SimpleName[7089-7098]"
    }, {
      "left" : "final CoreCharset charset",
      "right" : "final CoreCharset charset",
      "info" : "SingleVariableDeclaration[7065-7090]:SingleVariableDeclaration[7099-7124]"
    }, {
      "left" : "final char c",
      "right" : "final char c",
      "info" : "SingleVariableDeclaration[7092-7104]:SingleVariableDeclaration[7126-7138]"
    }, {
      "left" : "final CharsetEncoder fallback",
      "right" : "final CharsetEncoder fallback",
      "info" : "SingleVariableDeclaration[7106-7135]:SingleVariableDeclaration[7140-7169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7137-7543]:Block[7171-7577]"
    }, {
      "left" : "switch (charset) {\n            case ascii:\n                return c < 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }",
      "right" : "switch (charset) {\n            case ascii:\n                return c < 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }",
      "info" : "SwitchStatement[7233-7537]:SwitchStatement[7267-7571]"
    }, {
      "left" : "case ascii:",
      "right" : "case ascii:",
      "info" : "SwitchCase[7264-7275]:SwitchCase[7298-7309]"
    }, {
      "left" : "return c < 0x80;",
      "right" : "return c < 0x80;",
      "info" : "ReturnStatement[7292-7308]:ReturnStatement[7326-7342]"
    }, {
      "left" : "case utf:",
      "right" : "case utf:",
      "info" : "SwitchCase[7321-7330]:SwitchCase[7355-7364]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7347-7359]:ReturnStatement[7381-7393]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7473-7481]:SwitchCase[7507-7515]"
    }, {
      "left" : "return fallback.canEncode(c);",
      "right" : "return fallback.canEncode(c);",
      "info" : "ReturnStatement[7498-7527]:ReturnStatement[7532-7561]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7615-7622]:Modifier[7649-7656]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7623-7629]:Modifier[7657-7663]"
    }, {
      "left" : "CoreCharset",
      "right" : "CoreCharset",
      "info" : "SimpleType[7630-7641]:SimpleType[7664-7675]"
    }, {
      "left" : "byName",
      "right" : "byName",
      "info" : "SimpleName[7642-7648]:SimpleName[7676-7682]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7649-7660]:SingleVariableDeclaration[7683-7694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7662-7873]:Block[7696-7907]"
    }, {
      "left" : "if (name.equals(\"US-ASCII\"))",
      "right" : "if (name.equals(\"US-ASCII\"))",
      "info" : "IfStatement[7676-7734]:IfStatement[7710-7768]"
    }, {
      "left" : "return ascii;",
      "right" : "return ascii;",
      "info" : "ReturnStatement[7721-7734]:ReturnStatement[7755-7768]"
    }, {
      "left" : "if (name.startsWith(\"UTF-\"))",
      "right" : "if (name.startsWith(\"UTF-\"))",
      "info" : "IfStatement[7747-7834]:IfStatement[7781-7868]"
    }, {
      "left" : "return utf;",
      "right" : "return utf;",
      "info" : "ReturnStatement[7823-7834]:ReturnStatement[7857-7868]"
    }, {
      "left" : "return fallback;",
      "right" : "return fallback;",
      "info" : "ReturnStatement[7847-7863]:ReturnStatement[7881-7897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8107-8615]:Block[8141-8649]"
    }, {
      "left" : "xhtmlByVal = new HashMap<Character, String>();",
      "right" : "xhtmlByVal = new HashMap<Character, String>();",
      "info" : "ExpressionStatement[8117-8163]:ExpressionStatement[8151-8197]"
    }, {
      "left" : "base = loadEntities(\"entities-base.properties\");",
      "right" : "base = loadEntities(\"entities-base.properties\");",
      "info" : "ExpressionStatement[8172-8220]:ExpressionStatement[8206-8254]"
    }, {
      "left" : "baseByVal = toCharacterKey(base);",
      "right" : "baseByVal = toCharacterKey(base);",
      "info" : "ExpressionStatement[8255-8288]:ExpressionStatement[8289-8322]"
    }, {
      "left" : "full = loadEntities(\"entities-full.properties\");",
      "right" : "full = loadEntities(\"entities-full.properties\");",
      "info" : "ExpressionStatement[8297-8345]:ExpressionStatement[8331-8379]"
    }, {
      "left" : "fullByVal = toCharacterKey(full);",
      "right" : "fullByVal = toCharacterKey(full);",
      "info" : "ExpressionStatement[8381-8414]:ExpressionStatement[8415-8448]"
    }, {
      "left" : "for (Object[] entity : xhtmlArray)",
      "right" : "for (Object[] entity : xhtmlArray)",
      "info" : "EnhancedForStatement[8424-8609]:EnhancedForStatement[8458-8643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8459-8609]:Block[8493-8643]"
    }, {
      "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
      "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
      "info" : "VariableDeclarationStatement[8473-8546]:VariableDeclarationStatement[8507-8580]"
    }, {
      "left" : "xhtmlByVal.put(c, ((String) entity[0]));",
      "right" : "xhtmlByVal.put(c, ((String) entity[0]));",
      "info" : "ExpressionStatement[8559-8599]:ExpressionStatement[8593-8633]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8621-8628]:Modifier[8655-8662]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8629-8635]:Modifier[8663-8669]"
    }, {
      "left" : "Map<String, Character>",
      "right" : "Map<String, Character>",
      "info" : "ParameterizedType[8636-8658]:ParameterizedType[8670-8692]"
    }, {
      "left" : "loadEntities",
      "right" : "loadEntities",
      "info" : "SimpleName[8659-8671]:SimpleName[8693-8705]"
    }, {
      "left" : "String filename",
      "right" : "String filename",
      "info" : "SingleVariableDeclaration[8672-8687]:SingleVariableDeclaration[8706-8721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8689-9418]:Block[8723-9452]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[8699-8740]:VariableDeclarationStatement[8733-8774]"
    }, {
      "left" : "Map<String, Character> entities = new HashMap<String, Character>();",
      "right" : "Map<String, Character> entities = new HashMap<String, Character>();",
      "info" : "VariableDeclarationStatement[8749-8816]:VariableDeclarationStatement[8783-8850]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8825-9130]:TryStatement[8859-9164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8829-8972]:Block[8863-9006]"
    }, {
      "left" : "InputStream in = Entities.class.getResourceAsStream(filename);",
      "right" : "InputStream in = Entities.class.getResourceAsStream(filename);",
      "info" : "VariableDeclarationStatement[8843-8905]:VariableDeclarationStatement[8877-8939]"
    }, {
      "left" : "properties.load(in);",
      "right" : "properties.load(in);",
      "info" : "ExpressionStatement[8918-8938]:ExpressionStatement[8952-8972]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[8951-8962]:ExpressionStatement[8985-8996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8995-9130]:Block[9029-9164]"
    }, {
      "left" : "throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);",
      "right" : "throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);",
      "info" : "ThrowStatement[9009-9120]:ThrowStatement[9043-9154]"
    }, {
      "left" : "for (Map.Entry entry: properties.entrySet())",
      "right" : "for (Map.Entry entry: properties.entrySet())",
      "info" : "EnhancedForStatement[9140-9387]:EnhancedForStatement[9174-9421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-9387]:Block[9219-9421]"
    }, {
      "left" : "Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));",
      "right" : "Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));",
      "info" : "VariableDeclarationStatement[9199-9289]:VariableDeclarationStatement[9233-9323]"
    }, {
      "left" : "String name = (String) entry.getKey();",
      "right" : "String name = (String) entry.getKey();",
      "info" : "VariableDeclarationStatement[9302-9340]:VariableDeclarationStatement[9336-9374]"
    }, {
      "left" : "entities.put(name, val);",
      "right" : "entities.put(name, val);",
      "info" : "ExpressionStatement[9353-9377]:ExpressionStatement[9387-9411]"
    }, {
      "left" : "return entities;",
      "right" : "return entities;",
      "info" : "ReturnStatement[9396-9412]:ReturnStatement[9430-9446]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9424-9431]:Modifier[9458-9465]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9432-9438]:Modifier[9466-9472]"
    }, {
      "left" : "Map<Character, String>",
      "right" : "Map<Character, String>",
      "info" : "ParameterizedType[9439-9461]:ParameterizedType[9473-9495]"
    }, {
      "left" : "toCharacterKey",
      "right" : "toCharacterKey",
      "info" : "SimpleName[9462-9476]:SimpleName[9496-9510]"
    }, {
      "left" : "Map<String, Character> inMap",
      "right" : "Map<String, Character> inMap",
      "info" : "SingleVariableDeclaration[9477-9505]:SingleVariableDeclaration[9511-9539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9507-10071]:Block[9541-10105]"
    }, {
      "left" : "Map<Character, String> outMap = new HashMap<Character, String>();",
      "right" : "Map<Character, String> outMap = new HashMap<Character, String>();",
      "info" : "VariableDeclarationStatement[9517-9582]:VariableDeclarationStatement[9551-9616]"
    }, {
      "left" : "for (Map.Entry<String, Character> entry: inMap.entrySet())",
      "right" : "for (Map.Entry<String, Character> entry: inMap.entrySet())",
      "info" : "EnhancedForStatement[9591-10042]:EnhancedForStatement[9625-10076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9650-10042]:Block[9684-10076]"
    }, {
      "left" : "Character character = entry.getValue();",
      "right" : "Character character = entry.getValue();",
      "info" : "VariableDeclarationStatement[9664-9703]:VariableDeclarationStatement[9698-9737]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[9716-9745]:VariableDeclarationStatement[9750-9779]"
    }, {
      "left" : "if (outMap.containsKey(character))",
      "right" : "if (outMap.containsKey(character))",
      "info" : "IfStatement[9759-10032]:IfStatement[9793-10066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9794-9966]:Block[9828-10000]"
    }, {
      "left" : "if (name.toLowerCase().equals(name))",
      "right" : "if (name.toLowerCase().equals(name))",
      "info" : "IfStatement[9867-9952]:IfStatement[9901-9986]"
    }, {
      "left" : "outMap.put(character, name);",
      "right" : "outMap.put(character, name);",
      "info" : "ExpressionStatement[9924-9952]:ExpressionStatement[9958-9986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9972-10032]:Block[10006-10066]"
    }, {
      "left" : "outMap.put(character, name);",
      "right" : "outMap.put(character, name);",
      "info" : "ExpressionStatement[9990-10018]:ExpressionStatement[10024-10052]"
    }, {
      "left" : "return outMap;",
      "right" : "return outMap;",
      "info" : "ReturnStatement[10051-10065]:ReturnStatement[10085-10099]"
    } ]
  },
  "interFileMappings" : { }
}