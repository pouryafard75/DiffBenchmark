{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Rotation",
      "right" : "Rotation",
      "info" : "TypeDeclaration[1058-41774]:TypeDeclaration[1058-41908]"
    }, {
      "left" : "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",
      "right" : "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",
      "info" : "FieldDeclaration[5234-5342]:FieldDeclaration[5234-5342]"
    }, {
      "left" : "private static final long serialVersionUID = -2153622329907944313L;",
      "right" : "private static final long serialVersionUID = -2153622329907944313L;",
      "info" : "FieldDeclaration[5346-5454]:FieldDeclaration[5346-5454]"
    }, {
      "left" : "private final double q0;",
      "right" : "private final double q0;",
      "info" : "FieldDeclaration[5458-5528]:FieldDeclaration[5458-5528]"
    }, {
      "left" : "private final double q1;",
      "right" : "private final double q1;",
      "info" : "FieldDeclaration[5532-5623]:FieldDeclaration[5532-5623]"
    }, {
      "left" : "private final double q2;",
      "right" : "private final double q2;",
      "info" : "FieldDeclaration[5627-5719]:FieldDeclaration[5627-5719]"
    }, {
      "left" : "private final double q3;",
      "right" : "private final double q3;",
      "info" : "FieldDeclaration[5723-5814]:FieldDeclaration[5723-5814]"
    }, {
      "left" : "public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization)",
      "right" : "public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization)",
      "info" : "MethodDeclaration[5818-7309]:MethodDeclaration[5818-7309]"
    }, {
      "left" : "public Rotation(Vector3D axis, double angle)",
      "right" : "public Rotation(Vector3D axis, double angle)",
      "info" : "MethodDeclaration[7313-8986]:MethodDeclaration[7313-8986]"
    }, {
      "left" : "public Rotation(double[][] m, double threshold)\n    throws NotARotationMatrixException",
      "right" : "public Rotation(double[][] m, double threshold)\n    throws NotARotationMatrixException",
      "info" : "MethodDeclaration[8990-13490]:MethodDeclaration[8990-13490]"
    }, {
      "left" : "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2)",
      "right" : "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[13494-16839]:MethodDeclaration[13494-16973]"
    }, {
      "left" : "public Rotation(Vector3D u, Vector3D v)",
      "right" : "public Rotation(Vector3D u, Vector3D v)",
      "info" : "MethodDeclaration[16843-18429]:MethodDeclaration[16977-18563]"
    }, {
      "left" : "public Rotation(RotationOrder order,\n                  double alpha1, double alpha2, double alpha3)",
      "right" : "public Rotation(RotationOrder order,\n                  double alpha1, double alpha2, double alpha3)",
      "info" : "MethodDeclaration[18433-19880]:MethodDeclaration[18567-20014]"
    }, {
      "left" : "public Rotation revert()",
      "right" : "public Rotation revert()",
      "info" : "MethodDeclaration[19884-20243]:MethodDeclaration[20018-20377]"
    }, {
      "left" : "public double getQ0()",
      "right" : "public double getQ0()",
      "info" : "MethodDeclaration[20247-20395]:MethodDeclaration[20381-20529]"
    }, {
      "left" : "public double getQ1()",
      "right" : "public double getQ1()",
      "info" : "MethodDeclaration[20399-20589]:MethodDeclaration[20533-20723]"
    }, {
      "left" : "public double getQ2()",
      "right" : "public double getQ2()",
      "info" : "MethodDeclaration[20593-20785]:MethodDeclaration[20727-20919]"
    }, {
      "left" : "public double getQ3()",
      "right" : "public double getQ3()",
      "info" : "MethodDeclaration[20789-20979]:MethodDeclaration[20923-21113]"
    }, {
      "left" : "public Vector3D getAxis()",
      "right" : "public Vector3D getAxis()",
      "info" : "MethodDeclaration[20983-21544]:MethodDeclaration[21117-21678]"
    }, {
      "left" : "public double getAngle()",
      "right" : "public double getAngle()",
      "info" : "MethodDeclaration[21548-21930]:MethodDeclaration[21682-22064]"
    }, {
      "left" : "public double[] getAngles(RotationOrder order)\n    throws CardanEulerSingularityException",
      "right" : "public double[] getAngles(RotationOrder order)\n    throws CardanEulerSingularityException",
      "info" : "MethodDeclaration[21934-32835]:MethodDeclaration[22068-32969]"
    }, {
      "left" : "public double[][] getMatrix()",
      "right" : "public double[][] getMatrix()",
      "info" : "MethodDeclaration[32839-33787]:MethodDeclaration[32973-33921]"
    }, {
      "left" : "public Vector3D applyTo(Vector3D u)",
      "right" : "public Vector3D applyTo(Vector3D u)",
      "info" : "MethodDeclaration[33791-34343]:MethodDeclaration[33925-34477]"
    }, {
      "left" : "public Vector3D applyInverseTo(Vector3D u)",
      "right" : "public Vector3D applyInverseTo(Vector3D u)",
      "info" : "MethodDeclaration[34347-34964]:MethodDeclaration[34481-35098]"
    }, {
      "left" : "public Rotation applyTo(Rotation r)",
      "right" : "public Rotation applyTo(Rotation r)",
      "info" : "MethodDeclaration[34968-35825]:MethodDeclaration[35102-35959]"
    }, {
      "left" : "public Rotation applyInverseTo(Rotation r)",
      "right" : "public Rotation applyInverseTo(Rotation r)",
      "info" : "MethodDeclaration[35829-36774]:MethodDeclaration[35963-36908]"
    }, {
      "left" : "private double[][] orthogonalizeMatrix(double[][] m, double threshold)\n    throws NotARotationMatrixException",
      "right" : "private double[][] orthogonalizeMatrix(double[][] m, double threshold)\n    throws NotARotationMatrixException",
      "info" : "MethodDeclaration[36778-40311]:MethodDeclaration[36912-40445]"
    }, {
      "left" : "public static double distance(Rotation r1, Rotation r2)",
      "right" : "public static double distance(Rotation r1, Rotation r2)",
      "info" : "MethodDeclaration[40315-41771]:MethodDeclaration[40449-41905]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7009-7309]:Block[7009-7309]"
    }, {
      "left" : "if (needsNormalization)",
      "right" : "if (needsNormalization)",
      "info" : "IfStatement[7016-7231]:IfStatement[7016-7231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7040-7231]:Block[7040-7231]"
    }, {
      "left" : "double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);",
      "right" : "double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);",
      "info" : "VariableDeclarationStatement[7085-7157]:VariableDeclarationStatement[7085-7157]"
    }, {
      "left" : "q0 *= inv;",
      "right" : "q0 *= inv;",
      "info" : "ExpressionStatement[7164-7174]:ExpressionStatement[7164-7174]"
    }, {
      "left" : "q1 *= inv;",
      "right" : "q1 *= inv;",
      "info" : "ExpressionStatement[7181-7191]:ExpressionStatement[7181-7191]"
    }, {
      "left" : "q2 *= inv;",
      "right" : "q2 *= inv;",
      "info" : "ExpressionStatement[7198-7208]:ExpressionStatement[7198-7208]"
    }, {
      "left" : "q3 *= inv;",
      "right" : "q3 *= inv;",
      "info" : "ExpressionStatement[7215-7225]:ExpressionStatement[7215-7225]"
    }, {
      "left" : "this.q0 = q0;",
      "right" : "this.q0 = q0;",
      "info" : "ExpressionStatement[7237-7250]:ExpressionStatement[7237-7250]"
    }, {
      "left" : "this.q1 = q1;",
      "right" : "this.q1 = q1;",
      "info" : "ExpressionStatement[7255-7268]:ExpressionStatement[7255-7268]"
    }, {
      "left" : "this.q2 = q2;",
      "right" : "this.q2 = q2;",
      "info" : "ExpressionStatement[7273-7286]:ExpressionStatement[7273-7286]"
    }, {
      "left" : "this.q3 = q3;",
      "right" : "this.q3 = q3;",
      "info" : "ExpressionStatement[7291-7304]:ExpressionStatement[7291-7304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8597-8986]:Block[8597-8986]"
    }, {
      "left" : "double norm = axis.getNorm();",
      "right" : "double norm = axis.getNorm();",
      "info" : "VariableDeclarationStatement[8604-8633]:VariableDeclarationStatement[8604-8633]"
    }, {
      "left" : "if (norm == 0)",
      "right" : "if (norm == 0)",
      "info" : "IfStatement[8638-8766]:IfStatement[8638-8766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8653-8766]:Block[8653-8766]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);",
      "right" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);",
      "info" : "ThrowStatement[8661-8760]:ThrowStatement[8661-8760]"
    }, {
      "left" : "double halfAngle = -0.5 * angle;",
      "right" : "double halfAngle = -0.5 * angle;",
      "info" : "VariableDeclarationStatement[8772-8804]:VariableDeclarationStatement[8772-8804]"
    }, {
      "left" : "double coeff = FastMath.sin(halfAngle) / norm;",
      "right" : "double coeff = FastMath.sin(halfAngle) / norm;",
      "info" : "VariableDeclarationStatement[8809-8855]:VariableDeclarationStatement[8809-8855]"
    }, {
      "left" : "q0 = FastMath.cos (halfAngle);",
      "right" : "q0 = FastMath.cos (halfAngle);",
      "info" : "ExpressionStatement[8861-8891]:ExpressionStatement[8861-8891]"
    }, {
      "left" : "q1 = coeff * axis.getX();",
      "right" : "q1 = coeff * axis.getX();",
      "info" : "ExpressionStatement[8896-8921]:ExpressionStatement[8896-8921]"
    }, {
      "left" : "q2 = coeff * axis.getY();",
      "right" : "q2 = coeff * axis.getY();",
      "info" : "ExpressionStatement[8926-8951]:ExpressionStatement[8926-8951]"
    }, {
      "left" : "q3 = coeff * axis.getZ();",
      "right" : "q3 = coeff * axis.getZ();",
      "info" : "ExpressionStatement[8956-8981]:ExpressionStatement[8956-8981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10567-13490]:Block[10567-13490]"
    }, {
      "left" : "if ((m.length != 3) || (m[0].length != 3) ||\n        (m[1].length != 3) || (m[2].length != 3))",
      "right" : "if ((m.length != 3) || (m[0].length != 3) ||\n        (m[1].length != 3) || (m[2].length != 3))",
      "info" : "IfStatement[10597-10841]:IfStatement[10597-10841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10841]:Block[10692-10841]"
    }, {
      "left" : "throw new NotARotationMatrixException(\n              LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,\n              m.length, m[0].length);",
      "right" : "throw new NotARotationMatrixException(\n              LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,\n              m.length, m[0].length);",
      "info" : "ThrowStatement[10700-10835]:ThrowStatement[10700-10835]"
    }, {
      "left" : "double[][] ort = orthogonalizeMatrix(m, threshold);",
      "right" : "double[][] ort = orthogonalizeMatrix(m, threshold);",
      "info" : "VariableDeclarationStatement[10890-10941]:VariableDeclarationStatement[10890-10941]"
    }, {
      "left" : "double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -\n                 ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +\n                 ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);",
      "right" : "double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -\n                 ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +\n                 ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);",
      "info" : "VariableDeclarationStatement[10988-11219]:VariableDeclarationStatement[10988-11219]"
    }, {
      "left" : "if (det < 0.0)",
      "right" : "if (det < 0.0)",
      "info" : "IfStatement[11224-11394]:IfStatement[11224-11394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11239-11394]:Block[11239-11394]"
    }, {
      "left" : "throw new NotARotationMatrixException(\n              LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,\n              det);",
      "right" : "throw new NotARotationMatrixException(\n              LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,\n              det);",
      "info" : "ThrowStatement[11247-11388]:ThrowStatement[11247-11388]"
    }, {
      "left" : "double s = ort[0][0] + ort[1][1] + ort[2][2];",
      "right" : "double s = ort[0][0] + ort[1][1] + ort[2][2];",
      "info" : "VariableDeclarationStatement[12133-12178]:VariableDeclarationStatement[12133-12178]"
    }, {
      "left" : "if (s > -0.19)",
      "right" : "if (s > -0.19)",
      "info" : "IfStatement[12183-13485]:IfStatement[12183-13485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12198-12447]:Block[12198-12447]"
    }, {
      "left" : "q0 = 0.5 * FastMath.sqrt(s + 1.0);",
      "right" : "q0 = 0.5 * FastMath.sqrt(s + 1.0);",
      "info" : "ExpressionStatement[12251-12285]:ExpressionStatement[12251-12285]"
    }, {
      "left" : "double inv = 0.25 / q0;",
      "right" : "double inv = 0.25 / q0;",
      "info" : "VariableDeclarationStatement[12292-12315]:VariableDeclarationStatement[12292-12315]"
    }, {
      "left" : "q1 = inv * (ort[1][2] - ort[2][1]);",
      "right" : "q1 = inv * (ort[1][2] - ort[2][1]);",
      "info" : "ExpressionStatement[12322-12357]:ExpressionStatement[12322-12357]"
    }, {
      "left" : "q2 = inv * (ort[2][0] - ort[0][2]);",
      "right" : "q2 = inv * (ort[2][0] - ort[0][2]);",
      "info" : "ExpressionStatement[12364-12399]:ExpressionStatement[12364-12399]"
    }, {
      "left" : "q3 = inv * (ort[0][1] - ort[1][0]);",
      "right" : "q3 = inv * (ort[0][1] - ort[1][0]);",
      "info" : "ExpressionStatement[12406-12441]:ExpressionStatement[12406-12441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12453-13485]:Block[12453-13485]"
    }, {
      "left" : "s = ort[0][0] - ort[1][1] - ort[2][2];",
      "right" : "s = ort[0][0] - ort[1][1] - ort[2][2];",
      "info" : "ExpressionStatement[12461-12499]:ExpressionStatement[12461-12499]"
    }, {
      "left" : "if (s > -0.19)",
      "right" : "if (s > -0.19)",
      "info" : "IfStatement[12506-13479]:IfStatement[12506-13479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12521-12784]:Block[12521-12784]"
    }, {
      "left" : "q1 = 0.5 * FastMath.sqrt(s + 1.0);",
      "right" : "q1 = 0.5 * FastMath.sqrt(s + 1.0);",
      "info" : "ExpressionStatement[12578-12612]:ExpressionStatement[12578-12612]"
    }, {
      "left" : "double inv = 0.25 / q1;",
      "right" : "double inv = 0.25 / q1;",
      "info" : "VariableDeclarationStatement[12621-12644]:VariableDeclarationStatement[12621-12644]"
    }, {
      "left" : "q0 = inv * (ort[1][2] - ort[2][1]);",
      "right" : "q0 = inv * (ort[1][2] - ort[2][1]);",
      "info" : "ExpressionStatement[12653-12688]:ExpressionStatement[12653-12688]"
    }, {
      "left" : "q2 = inv * (ort[0][1] + ort[1][0]);",
      "right" : "q2 = inv * (ort[0][1] + ort[1][0]);",
      "info" : "ExpressionStatement[12697-12732]:ExpressionStatement[12697-12732]"
    }, {
      "left" : "q3 = inv * (ort[0][2] + ort[2][0]);",
      "right" : "q3 = inv * (ort[0][2] + ort[2][0]);",
      "info" : "ExpressionStatement[12741-12776]:ExpressionStatement[12741-12776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12790-13479]:Block[12790-13479]"
    }, {
      "left" : "s = ort[1][1] - ort[0][0] - ort[2][2];",
      "right" : "s = ort[1][1] - ort[0][0] - ort[2][2];",
      "info" : "ExpressionStatement[12800-12838]:ExpressionStatement[12800-12838]"
    }, {
      "left" : "if (s > -0.19)",
      "right" : "if (s > -0.19)",
      "info" : "IfStatement[12847-13471]:IfStatement[12847-13471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12862-13139]:Block[12862-13139]"
    }, {
      "left" : "q2 = 0.5 * FastMath.sqrt(s + 1.0);",
      "right" : "q2 = 0.5 * FastMath.sqrt(s + 1.0);",
      "info" : "ExpressionStatement[12923-12957]:ExpressionStatement[12923-12957]"
    }, {
      "left" : "double inv = 0.25 / q2;",
      "right" : "double inv = 0.25 / q2;",
      "info" : "VariableDeclarationStatement[12968-12991]:VariableDeclarationStatement[12968-12991]"
    }, {
      "left" : "q0 = inv * (ort[2][0] - ort[0][2]);",
      "right" : "q0 = inv * (ort[2][0] - ort[0][2]);",
      "info" : "ExpressionStatement[13002-13037]:ExpressionStatement[13002-13037]"
    }, {
      "left" : "q1 = inv * (ort[0][1] + ort[1][0]);",
      "right" : "q1 = inv * (ort[0][1] + ort[1][0]);",
      "info" : "ExpressionStatement[13048-13083]:ExpressionStatement[13048-13083]"
    }, {
      "left" : "q3 = inv * (ort[2][1] + ort[1][2]);",
      "right" : "q3 = inv * (ort[2][1] + ort[1][2]);",
      "info" : "ExpressionStatement[13094-13129]:ExpressionStatement[13094-13129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13145-13471]:Block[13145-13471]"
    }, {
      "left" : "s = ort[2][2] - ort[0][0] - ort[1][1];",
      "right" : "s = ort[2][2] - ort[0][0] - ort[1][1];",
      "info" : "ExpressionStatement[13206-13244]:ExpressionStatement[13206-13244]"
    }, {
      "left" : "q3 = 0.5 * FastMath.sqrt(s + 1.0);",
      "right" : "q3 = 0.5 * FastMath.sqrt(s + 1.0);",
      "info" : "ExpressionStatement[13255-13289]:ExpressionStatement[13255-13289]"
    }, {
      "left" : "double inv = 0.25 / q3;",
      "right" : "double inv = 0.25 / q3;",
      "info" : "VariableDeclarationStatement[13300-13323]:VariableDeclarationStatement[13300-13323]"
    }, {
      "left" : "q0 = inv * (ort[0][1] - ort[1][0]);",
      "right" : "q0 = inv * (ort[0][1] - ort[1][0]);",
      "info" : "ExpressionStatement[13334-13369]:ExpressionStatement[13334-13369]"
    }, {
      "left" : "q1 = inv * (ort[0][2] + ort[2][0]);",
      "right" : "q1 = inv * (ort[0][2] + ort[2][0]);",
      "info" : "ExpressionStatement[13380-13415]:ExpressionStatement[13380-13415]"
    }, {
      "left" : "q2 = inv * (ort[2][1] + ort[1][2]);",
      "right" : "q2 = inv * (ort[2][1] + ort[1][2]);",
      "info" : "ExpressionStatement[13426-13461]:ExpressionStatement[13426-13461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14441-16839]:Block[14441-16973]"
    }, {
      "left" : "double u1u1 = u1.getNormSq();",
      "right" : "double u1u1 = u1.getNormSq();",
      "info" : "VariableDeclarationStatement[14469-14498]:VariableDeclarationStatement[14469-14498]"
    }, {
      "left" : "double u2u2 = u2.getNormSq();",
      "right" : "double u2u2 = u2.getNormSq();",
      "info" : "VariableDeclarationStatement[14501-14530]:VariableDeclarationStatement[14501-14530]"
    }, {
      "left" : "double v1v1 = v1.getNormSq();",
      "right" : "double v1v1 = v1.getNormSq();",
      "info" : "VariableDeclarationStatement[14533-14562]:VariableDeclarationStatement[14533-14562]"
    }, {
      "left" : "double v2v2 = v2.getNormSq();",
      "right" : "double v2v2 = v2.getNormSq();",
      "info" : "VariableDeclarationStatement[14565-14594]:VariableDeclarationStatement[14565-14594]"
    }, {
      "left" : "if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0))",
      "right" : "if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0))",
      "info" : "IfStatement[14597-14784]:IfStatement[14597-14784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14659-14784]:Block[14659-14784]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);",
      "info" : "ThrowStatement[14665-14780]:ThrowStatement[14665-14780]"
    }, {
      "left" : "v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",
      "right" : "v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",
      "info" : "ExpressionStatement[14843-14893]:ExpressionStatement[14843-14893]"
    }, {
      "left" : "double u1u2   = u1.dotProduct(u2);",
      "right" : "double u1u2   = u1.dotProduct(u2);",
      "info" : "VariableDeclarationStatement[14973-15007]:VariableDeclarationStatement[14973-15007]"
    }, {
      "left" : "double v1v2   = v1.dotProduct(v2);",
      "right" : "double v1v2   = v1.dotProduct(v2);",
      "info" : "VariableDeclarationStatement[15010-15044]:VariableDeclarationStatement[15010-15044]"
    }, {
      "left" : "double coeffU = u1u2 / u1u1;",
      "right" : "double coeffU = u1u2 / u1u1;",
      "info" : "VariableDeclarationStatement[15047-15075]:VariableDeclarationStatement[15047-15075]"
    }, {
      "left" : "double coeffV = v1v2 / u1u1;",
      "right" : "double coeffV = v1v2 / u1u1;",
      "info" : "VariableDeclarationStatement[15078-15106]:VariableDeclarationStatement[15078-15106]"
    }, {
      "left" : "double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));",
      "right" : "double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));",
      "info" : "VariableDeclarationStatement[15109-15188]:VariableDeclarationStatement[15109-15188]"
    }, {
      "left" : "double alpha  = coeffU - beta * coeffV;",
      "right" : "double alpha  = coeffU - beta * coeffV;",
      "info" : "VariableDeclarationStatement[15191-15230]:VariableDeclarationStatement[15191-15230]"
    }, {
      "left" : "v2 = new Vector3D(alpha, v1, beta, v2);",
      "right" : "v2 = new Vector3D(alpha, v1, beta, v2);",
      "info" : "ExpressionStatement[15233-15272]:ExpressionStatement[15233-15272]"
    }, {
      "left" : "Vector3D uRef  = u1;",
      "right" : "Vector3D uRef  = u1;",
      "info" : "VariableDeclarationStatement[15305-15325]:VariableDeclarationStatement[15305-15325]"
    }, {
      "left" : "Vector3D vRef  = v1;",
      "right" : "Vector3D vRef  = v1;",
      "info" : "VariableDeclarationStatement[15328-15348]:VariableDeclarationStatement[15328-15348]"
    }, {
      "left" : "Vector3D v1Su1 = v1.subtract(u1);",
      "right" : "Vector3D v1Su1 = v1.subtract(u1);",
      "info" : "VariableDeclarationStatement[15351-15384]:VariableDeclarationStatement[15351-15384]"
    }, {
      "left" : "Vector3D v2Su2 = v2.subtract(u2);",
      "right" : "Vector3D v2Su2 = v2.subtract(u2);",
      "info" : "VariableDeclarationStatement[15387-15420]:VariableDeclarationStatement[15387-15420]"
    }, {
      "left" : "Vector3D k     = v1Su1.crossProduct(v2Su2);",
      "right" : "Vector3D k     = v1Su1.crossProduct(v2Su2);",
      "info" : "VariableDeclarationStatement[15423-15466]:VariableDeclarationStatement[15423-15466]"
    }, {
      "left" : "Vector3D u3    = u1.crossProduct(u2);",
      "right" : "Vector3D u3    = u1.crossProduct(u2);",
      "info" : "VariableDeclarationStatement[15469-15506]:VariableDeclarationStatement[15469-15506]"
    }, {
      "left" : "double c       = k.dotProduct(u3);",
      "right" : "double c       = k.dotProduct(u3);",
      "info" : "VariableDeclarationStatement[15509-15543]:VariableDeclarationStatement[15509-15543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15558-16427]:Block[15643-16561]"
    }, {
      "left" : "Vector3D v3 = Vector3D.crossProduct(v1, v2);",
      "right" : "Vector3D v3 = Vector3D.crossProduct(v1, v2);",
      "info" : "VariableDeclarationStatement[15654-15698]:VariableDeclarationStatement[15739-15783]"
    }, {
      "left" : "Vector3D v3Su3 = v3.subtract(u3);",
      "right" : "Vector3D v3Su3 = v3.subtract(u3);",
      "info" : "VariableDeclarationStatement[15703-15736]:VariableDeclarationStatement[15788-15821]"
    }, {
      "left" : "k = v1Su1.crossProduct(v3Su3);",
      "right" : "k = v1Su1.crossProduct(v3Su3);",
      "info" : "ExpressionStatement[15741-15771]:ExpressionStatement[15826-15856]"
    }, {
      "left" : "Vector3D u2Prime = u1.crossProduct(u3);",
      "right" : "Vector3D u2Prime = u1.crossProduct(u3);",
      "info" : "VariableDeclarationStatement[15776-15815]:VariableDeclarationStatement[15861-15900]"
    }, {
      "left" : "c = k.dotProduct(u2Prime);",
      "right" : "c = k.dotProduct(u2Prime);",
      "info" : "ExpressionStatement[15820-15846]:ExpressionStatement[15905-15931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15864-16422]:Block[15998-16556]"
    }, {
      "left" : "k = v2Su2.crossProduct(v3Su3);",
      "right" : "k = v2Su2.crossProduct(v3Su3);",
      "info" : "ExpressionStatement[16010-16040]:ExpressionStatement[16144-16174]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[16040-16041]:EmptyStatement[16174-16175]"
    }, {
      "left" : "c = k.dotProduct(u2.crossProduct(u3));",
      "right" : "c = k.dotProduct(u2.crossProduct(u3));",
      "info" : "ExpressionStatement[16048-16086]:ExpressionStatement[16182-16220]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[16086-16087]:EmptyStatement[16220-16221]"
    }, {
      "left" : "if (c == 0)",
      "right" : "if (c <= 0)",
      "info" : "IfStatement[16095-16314]:IfStatement[16229-16448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16107-16314]:Block[16241-16448]"
    }, {
      "left" : "q0 = 1.0;",
      "right" : "q0 = 1.0;",
      "info" : "ExpressionStatement[16227-16236]:ExpressionStatement[16361-16370]"
    }, {
      "left" : "q1 = 0.0;",
      "right" : "q1 = 0.0;",
      "info" : "ExpressionStatement[16245-16254]:ExpressionStatement[16379-16388]"
    }, {
      "left" : "q2 = 0.0;",
      "right" : "q2 = 0.0;",
      "info" : "ExpressionStatement[16263-16272]:ExpressionStatement[16397-16406]"
    }, {
      "left" : "q3 = 0.0;",
      "right" : "q3 = 0.0;",
      "info" : "ExpressionStatement[16281-16290]:ExpressionStatement[16415-16424]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16299-16306]:ReturnStatement[16433-16440]"
    }, {
      "left" : "uRef = u2;",
      "right" : "uRef = u2;",
      "info" : "ExpressionStatement[16388-16398]:ExpressionStatement[16522-16532]"
    }, {
      "left" : "vRef = v2;",
      "right" : "vRef = v2;",
      "info" : "ExpressionStatement[16405-16415]:ExpressionStatement[16539-16549]"
    }, {
      "left" : "c = FastMath.sqrt(c);",
      "right" : "c = FastMath.sqrt(c);",
      "info" : "ExpressionStatement[16463-16484]:ExpressionStatement[16597-16618]"
    }, {
      "left" : "double inv = 1.0 / (c + c);",
      "right" : "double inv = 1.0 / (c + c);",
      "info" : "VariableDeclarationStatement[16487-16514]:VariableDeclarationStatement[16621-16648]"
    }, {
      "left" : "q1 = inv * k.getX();",
      "right" : "q1 = inv * k.getX();",
      "info" : "ExpressionStatement[16517-16537]:ExpressionStatement[16651-16671]"
    }, {
      "left" : "q2 = inv * k.getY();",
      "right" : "q2 = inv * k.getY();",
      "info" : "ExpressionStatement[16540-16560]:ExpressionStatement[16674-16694]"
    }, {
      "left" : "q3 = inv * k.getZ();",
      "right" : "q3 = inv * k.getZ();",
      "info" : "ExpressionStatement[16563-16583]:ExpressionStatement[16697-16717]"
    }, {
      "left" : "k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);",
      "right" : "k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);",
      "info" : "ExpressionStatement[16617-16785]:ExpressionStatement[16751-16919]"
    }, {
      "left" : "q0 = vRef.dotProduct(k) / (2 * k.getNormSq());",
      "right" : "q0 = vRef.dotProduct(k) / (2 * k.getNormSq());",
      "info" : "ExpressionStatement[16788-16834]:ExpressionStatement[16922-16968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17514-18429]:Block[17648-18563]"
    }, {
      "left" : "double normProduct = u.getNorm() * v.getNorm();",
      "right" : "double normProduct = u.getNorm() * v.getNorm();",
      "info" : "VariableDeclarationStatement[17521-17568]:VariableDeclarationStatement[17655-17702]"
    }, {
      "left" : "if (normProduct == 0)",
      "right" : "if (normProduct == 0)",
      "info" : "IfStatement[17573-17726]:IfStatement[17707-17860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17595-17726]:Block[17729-17860]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);",
      "info" : "ThrowStatement[17605-17720]:ThrowStatement[17739-17854]"
    }, {
      "left" : "double dot = u.dotProduct(v);",
      "right" : "double dot = u.dotProduct(v);",
      "info" : "VariableDeclarationStatement[17732-17761]:VariableDeclarationStatement[17866-17895]"
    }, {
      "left" : "if (dot < ((2.0e-15 - 1.0) * normProduct))",
      "right" : "if (dot < ((2.0e-15 - 1.0) * normProduct))",
      "info" : "IfStatement[17767-18424]:IfStatement[17901-18558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17810-18046]:Block[17944-18180]"
    }, {
      "left" : "Vector3D w = u.orthogonal();",
      "right" : "Vector3D w = u.orthogonal();",
      "info" : "VariableDeclarationStatement[17930-17958]:VariableDeclarationStatement[18064-18092]"
    }, {
      "left" : "q0 = 0.0;",
      "right" : "q0 = 0.0;",
      "info" : "ExpressionStatement[17965-17974]:ExpressionStatement[18099-18108]"
    }, {
      "left" : "q1 = -w.getX();",
      "right" : "q1 = -w.getX();",
      "info" : "ExpressionStatement[17981-17996]:ExpressionStatement[18115-18130]"
    }, {
      "left" : "q2 = -w.getY();",
      "right" : "q2 = -w.getY();",
      "info" : "ExpressionStatement[18003-18018]:ExpressionStatement[18137-18152]"
    }, {
      "left" : "q3 = -w.getZ();",
      "right" : "q3 = -w.getZ();",
      "info" : "ExpressionStatement[18025-18040]:ExpressionStatement[18159-18174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18052-18424]:Block[18186-18558]"
    }, {
      "left" : "q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));",
      "right" : "q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));",
      "info" : "ExpressionStatement[18188-18240]:ExpressionStatement[18322-18374]"
    }, {
      "left" : "double coeff = 1.0 / (2.0 * q0 * normProduct);",
      "right" : "double coeff = 1.0 / (2.0 * q0 * normProduct);",
      "info" : "VariableDeclarationStatement[18247-18293]:VariableDeclarationStatement[18381-18427]"
    }, {
      "left" : "Vector3D q = v.crossProduct(u);",
      "right" : "Vector3D q = v.crossProduct(u);",
      "info" : "VariableDeclarationStatement[18300-18331]:VariableDeclarationStatement[18434-18465]"
    }, {
      "left" : "q1 = coeff * q.getX();",
      "right" : "q1 = coeff * q.getX();",
      "info" : "ExpressionStatement[18338-18360]:ExpressionStatement[18472-18494]"
    }, {
      "left" : "q2 = coeff * q.getY();",
      "right" : "q2 = coeff * q.getY();",
      "info" : "ExpressionStatement[18367-18389]:ExpressionStatement[18501-18523]"
    }, {
      "left" : "q3 = coeff * q.getZ();",
      "right" : "q3 = coeff * q.getZ();",
      "info" : "ExpressionStatement[18396-18418]:ExpressionStatement[18530-18552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19570-19880]:Block[19704-20014]"
    }, {
      "left" : "Rotation r1 = new Rotation(order.getA1(), alpha1);",
      "right" : "Rotation r1 = new Rotation(order.getA1(), alpha1);",
      "info" : "VariableDeclarationStatement[19576-19626]:VariableDeclarationStatement[19710-19760]"
    }, {
      "left" : "Rotation r2 = new Rotation(order.getA2(), alpha2);",
      "right" : "Rotation r2 = new Rotation(order.getA2(), alpha2);",
      "info" : "VariableDeclarationStatement[19631-19681]:VariableDeclarationStatement[19765-19815]"
    }, {
      "left" : "Rotation r3 = new Rotation(order.getA3(), alpha3);",
      "right" : "Rotation r3 = new Rotation(order.getA3(), alpha3);",
      "info" : "VariableDeclarationStatement[19686-19736]:VariableDeclarationStatement[19820-19870]"
    }, {
      "left" : "Rotation composed = r1.applyTo(r2.applyTo(r3));",
      "right" : "Rotation composed = r1.applyTo(r2.applyTo(r3));",
      "info" : "VariableDeclarationStatement[19741-19788]:VariableDeclarationStatement[19875-19922]"
    }, {
      "left" : "q0 = composed.q0;",
      "right" : "q0 = composed.q0;",
      "info" : "ExpressionStatement[19793-19810]:ExpressionStatement[19927-19944]"
    }, {
      "left" : "q1 = composed.q1;",
      "right" : "q1 = composed.q1;",
      "info" : "ExpressionStatement[19815-19832]:ExpressionStatement[19949-19966]"
    }, {
      "left" : "q2 = composed.q2;",
      "right" : "q2 = composed.q2;",
      "info" : "ExpressionStatement[19837-19854]:ExpressionStatement[19971-19988]"
    }, {
      "left" : "q3 = composed.q3;",
      "right" : "q3 = composed.q3;",
      "info" : "ExpressionStatement[19859-19876]:ExpressionStatement[19993-20010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20189-20243]:Block[20323-20377]"
    }, {
      "left" : "return new Rotation(-q0, q1, q2, q3, false);",
      "right" : "return new Rotation(-q0, q1, q2, q3, false);",
      "info" : "ReturnStatement[20195-20239]:ReturnStatement[20329-20373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20375-20395]:Block[20509-20529]"
    }, {
      "left" : "return q0;",
      "right" : "return q0;",
      "info" : "ReturnStatement[20381-20391]:ReturnStatement[20515-20525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20569-20589]:Block[20703-20723]"
    }, {
      "left" : "return q1;",
      "right" : "return q1;",
      "info" : "ReturnStatement[20575-20585]:ReturnStatement[20709-20719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20765-20785]:Block[20899-20919]"
    }, {
      "left" : "return q2;",
      "right" : "return q2;",
      "info" : "ReturnStatement[20771-20781]:ReturnStatement[20905-20915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20959-20979]:Block[21093-21113]"
    }, {
      "left" : "return q3;",
      "right" : "return q3;",
      "info" : "ReturnStatement[20965-20975]:ReturnStatement[21099-21109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21145-21544]:Block[21279-21678]"
    }, {
      "left" : "double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;",
      "right" : "double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;",
      "info" : "VariableDeclarationStatement[21151-21200]:VariableDeclarationStatement[21285-21334]"
    }, {
      "left" : "if (squaredSine == 0)",
      "right" : "if (squaredSine == 0)",
      "info" : "IfStatement[21205-21419]:IfStatement[21339-21553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21227-21270]:Block[21361-21404]"
    }, {
      "left" : "return new Vector3D(1, 0, 0);",
      "right" : "return new Vector3D(1, 0, 0);",
      "info" : "ReturnStatement[21235-21264]:ReturnStatement[21369-21398]"
    }, {
      "left" : "if (q0 < 0)",
      "right" : "if (q0 < 0)",
      "info" : "IfStatement[21276-21419]:IfStatement[21410-21553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21288-21419]:Block[21422-21553]"
    }, {
      "left" : "double inverse = 1 / FastMath.sqrt(squaredSine);",
      "right" : "double inverse = 1 / FastMath.sqrt(squaredSine);",
      "info" : "VariableDeclarationStatement[21296-21344]:VariableDeclarationStatement[21430-21478]"
    }, {
      "left" : "return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);",
      "right" : "return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);",
      "info" : "ReturnStatement[21351-21413]:ReturnStatement[21485-21547]"
    }, {
      "left" : "double inverse = -1 / FastMath.sqrt(squaredSine);",
      "right" : "double inverse = -1 / FastMath.sqrt(squaredSine);",
      "info" : "VariableDeclarationStatement[21424-21473]:VariableDeclarationStatement[21558-21607]"
    }, {
      "left" : "return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);",
      "right" : "return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);",
      "info" : "ReturnStatement[21478-21540]:ReturnStatement[21612-21674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21710-21930]:Block[21844-22064]"
    }, {
      "left" : "if ((q0 < -0.1) || (q0 > 0.1))",
      "right" : "if ((q0 < -0.1) || (q0 > 0.1))",
      "info" : "IfStatement[21716-21892]:IfStatement[21850-22026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21747-21830]:Block[21881-21964]"
    }, {
      "left" : "return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 * q2 + q3 * q3));",
      "right" : "return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 * q2 + q3 * q3));",
      "info" : "ReturnStatement[21755-21824]:ReturnStatement[21889-21958]"
    }, {
      "left" : "if (q0 < 0)",
      "right" : "if (q0 < 0)",
      "info" : "IfStatement[21836-21892]:IfStatement[21970-22026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21848-21892]:Block[21982-22026]"
    }, {
      "left" : "return 2 * FastMath.acos(-q0);",
      "right" : "return 2 * FastMath.acos(-q0);",
      "info" : "ReturnStatement[21856-21886]:ReturnStatement[21990-22020]"
    }, {
      "left" : "return 2 * FastMath.acos(q0);",
      "right" : "return 2 * FastMath.acos(q0);",
      "info" : "ReturnStatement[21897-21926]:ReturnStatement[22031-22060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23922-32835]:Block[24056-32969]"
    }, {
      "left" : "if (order == RotationOrder.XYZ)",
      "right" : "if (order == RotationOrder.XYZ)",
      "info" : "IfStatement[23929-32830]:IfStatement[24063-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23961-24679]:Block[24095-24813]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[24275-24314]:VariableDeclarationStatement[24409-24448]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[24321-24367]:VariableDeclarationStatement[24455-24501]"
    }, {
      "left" : "if  ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "right" : "if  ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "info" : "IfStatement[24374-24504]:IfStatement[24508-24638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24438-24504]:Block[24572-24638]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[24448-24496]:ThrowStatement[24582-24630]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(-(v1.getY()), v1.getZ()),\n        FastMath.asin(v2.getZ()),\n        FastMath.atan2(-(v2.getY()), v2.getX())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(-(v1.getY()), v1.getZ()),\n        FastMath.asin(v2.getZ()),\n        FastMath.atan2(-(v2.getY()), v2.getX())\n      };",
      "info" : "ReturnStatement[24511-24672]:ReturnStatement[24645-24806]"
    }, {
      "left" : "if (order == RotationOrder.XZY)",
      "right" : "if (order == RotationOrder.XZY)",
      "info" : "IfStatement[24685-32830]:IfStatement[24819-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24717-25417]:Block[24851-25551]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[25020-25059]:VariableDeclarationStatement[25154-25193]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[25066-25112]:VariableDeclarationStatement[25200-25246]"
    }, {
      "left" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "right" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "info" : "IfStatement[25119-25248]:IfStatement[25253-25382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25182-25248]:Block[25316-25382]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[25192-25240]:ThrowStatement[25326-25374]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getZ(), v1.getY()),\n       -FastMath.asin(v2.getY()),\n        FastMath.atan2(v2.getZ(), v2.getX())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getZ(), v1.getY()),\n       -FastMath.asin(v2.getY()),\n        FastMath.atan2(v2.getZ(), v2.getX())\n      };",
      "info" : "ReturnStatement[25255-25410]:ReturnStatement[25389-25544]"
    }, {
      "left" : "if (order == RotationOrder.YXZ)",
      "right" : "if (order == RotationOrder.YXZ)",
      "info" : "IfStatement[25423-32830]:IfStatement[25557-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25455-26156]:Block[25589-26290]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[25759-25798]:VariableDeclarationStatement[25893-25932]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[25805-25851]:VariableDeclarationStatement[25939-25985]"
    }, {
      "left" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "right" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "info" : "IfStatement[25858-25987]:IfStatement[25992-26121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25921-25987]:Block[26055-26121]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[25931-25979]:ThrowStatement[26065-26113]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getX(), v1.getZ()),\n       -FastMath.asin(v2.getZ()),\n        FastMath.atan2(v2.getX(), v2.getY())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getX(), v1.getZ()),\n       -FastMath.asin(v2.getZ()),\n        FastMath.atan2(v2.getX(), v2.getY())\n      };",
      "info" : "ReturnStatement[25994-26149]:ReturnStatement[26128-26283]"
    }, {
      "left" : "if (order == RotationOrder.YZX)",
      "right" : "if (order == RotationOrder.YZX)",
      "info" : "IfStatement[26162-32830]:IfStatement[26296-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26194-26900]:Block[26328-27034]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[26497-26536]:VariableDeclarationStatement[26631-26670]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[26543-26589]:VariableDeclarationStatement[26677-26723]"
    }, {
      "left" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "right" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "info" : "IfStatement[26596-26725]:IfStatement[26730-26859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26659-26725]:Block[26793-26859]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[26669-26717]:ThrowStatement[26803-26851]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(-(v1.getZ()), v1.getX()),\n        FastMath.asin(v2.getX()),\n        FastMath.atan2(-(v2.getZ()), v2.getY())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(-(v1.getZ()), v1.getX()),\n        FastMath.asin(v2.getX()),\n        FastMath.atan2(-(v2.getZ()), v2.getY())\n      };",
      "info" : "ReturnStatement[26732-26893]:ReturnStatement[26866-27027]"
    }, {
      "left" : "if (order == RotationOrder.ZXY)",
      "right" : "if (order == RotationOrder.ZXY)",
      "info" : "IfStatement[26906-32830]:IfStatement[27040-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26938-27644]:Block[27072-27778]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[27241-27280]:VariableDeclarationStatement[27375-27414]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[27287-27333]:VariableDeclarationStatement[27421-27467]"
    }, {
      "left" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "right" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "info" : "IfStatement[27340-27469]:IfStatement[27474-27603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27403-27469]:Block[27537-27603]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[27413-27461]:ThrowStatement[27547-27595]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(-(v1.getX()), v1.getY()),\n        FastMath.asin(v2.getY()),\n        FastMath.atan2(-(v2.getX()), v2.getZ())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(-(v1.getX()), v1.getY()),\n        FastMath.asin(v2.getY()),\n        FastMath.atan2(-(v2.getX()), v2.getZ())\n      };",
      "info" : "ReturnStatement[27476-27637]:ReturnStatement[27610-27771]"
    }, {
      "left" : "if (order == RotationOrder.ZYX)",
      "right" : "if (order == RotationOrder.ZYX)",
      "info" : "IfStatement[27650-32830]:IfStatement[27784-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27682-28393]:Block[27816-28527]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[27996-28035]:VariableDeclarationStatement[28130-28169]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[28042-28088]:VariableDeclarationStatement[28176-28222]"
    }, {
      "left" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "right" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "info" : "IfStatement[28095-28224]:IfStatement[28229-28358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28158-28224]:Block[28292-28358]"
    }, {
      "left" : "throw new CardanEulerSingularityException(true);",
      "right" : "throw new CardanEulerSingularityException(true);",
      "info" : "ThrowStatement[28168-28216]:ThrowStatement[28302-28350]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getY(), v1.getX()),\n       -FastMath.asin(v2.getX()),\n        FastMath.atan2(v2.getY(), v2.getZ())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getY(), v1.getX()),\n       -FastMath.asin(v2.getX()),\n        FastMath.atan2(v2.getY(), v2.getZ())\n      };",
      "info" : "ReturnStatement[28231-28386]:ReturnStatement[28365-28520]"
    }, {
      "left" : "if (order == RotationOrder.XYX)",
      "right" : "if (order == RotationOrder.XYX)",
      "info" : "IfStatement[28399-32830]:IfStatement[28533-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28431-29140]:Block[28565-29274]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[28741-28780]:VariableDeclarationStatement[28875-28914]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[28787-28833]:VariableDeclarationStatement[28921-28967]"
    }, {
      "left" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "right" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "info" : "IfStatement[28840-28970]:IfStatement[28974-29104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28903-28970]:Block[29037-29104]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[28913-28962]:ThrowStatement[29047-29096]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getY(), -v1.getZ()),\n        FastMath.acos(v2.getX()),\n        FastMath.atan2(v2.getY(), v2.getZ())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getY(), -v1.getZ()),\n        FastMath.acos(v2.getX()),\n        FastMath.atan2(v2.getY(), v2.getZ())\n      };",
      "info" : "ReturnStatement[28977-29133]:ReturnStatement[29111-29267]"
    }, {
      "left" : "if (order == RotationOrder.XZX)",
      "right" : "if (order == RotationOrder.XZX)",
      "info" : "IfStatement[29146-32830]:IfStatement[29280-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29178-29873]:Block[29312-30007]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[29474-29513]:VariableDeclarationStatement[29608-29647]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);",
      "info" : "VariableDeclarationStatement[29520-29566]:VariableDeclarationStatement[29654-29700]"
    }, {
      "left" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "right" : "if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999))",
      "info" : "IfStatement[29573-29703]:IfStatement[29707-29837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29636-29703]:Block[29770-29837]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[29646-29695]:ThrowStatement[29780-29829]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getZ(), v1.getY()),\n        FastMath.acos(v2.getX()),\n        FastMath.atan2(v2.getZ(), -v2.getY())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getZ(), v1.getY()),\n        FastMath.acos(v2.getX()),\n        FastMath.atan2(v2.getZ(), -v2.getY())\n      };",
      "info" : "ReturnStatement[29710-29866]:ReturnStatement[29844-30000]"
    }, {
      "left" : "if (order == RotationOrder.YXY)",
      "right" : "if (order == RotationOrder.YXY)",
      "info" : "IfStatement[29879-32830]:IfStatement[30013-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29911-30614]:Block[30045-30748]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[30215-30254]:VariableDeclarationStatement[30349-30388]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[30261-30307]:VariableDeclarationStatement[30395-30441]"
    }, {
      "left" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "right" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "info" : "IfStatement[30314-30444]:IfStatement[30448-30578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30377-30444]:Block[30511-30578]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[30387-30436]:ThrowStatement[30521-30570]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getX(), v1.getZ()),\n        FastMath.acos(v2.getY()),\n        FastMath.atan2(v2.getX(), -v2.getZ())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getX(), v1.getZ()),\n        FastMath.acos(v2.getY()),\n        FastMath.atan2(v2.getX(), -v2.getZ())\n      };",
      "info" : "ReturnStatement[30451-30607]:ReturnStatement[30585-30741]"
    }, {
      "left" : "if (order == RotationOrder.YZY)",
      "right" : "if (order == RotationOrder.YZY)",
      "info" : "IfStatement[30620-32830]:IfStatement[30754-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30652-31355]:Block[30786-31489]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[30956-30995]:VariableDeclarationStatement[31090-31129]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);",
      "info" : "VariableDeclarationStatement[31002-31048]:VariableDeclarationStatement[31136-31182]"
    }, {
      "left" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "right" : "if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999))",
      "info" : "IfStatement[31055-31185]:IfStatement[31189-31319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31118-31185]:Block[31252-31319]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[31128-31177]:ThrowStatement[31262-31311]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getZ(), -v1.getX()),\n        FastMath.acos(v2.getY()),\n        FastMath.atan2(v2.getZ(), v2.getX())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getZ(), -v1.getX()),\n        FastMath.acos(v2.getY()),\n        FastMath.atan2(v2.getZ(), v2.getX())\n      };",
      "info" : "ReturnStatement[31192-31348]:ReturnStatement[31326-31482]"
    }, {
      "left" : "if (order == RotationOrder.ZXZ)",
      "right" : "if (order == RotationOrder.ZXZ)",
      "info" : "IfStatement[31361-32830]:IfStatement[31495-32964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31393-32088]:Block[31527-32222]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[31689-31728]:VariableDeclarationStatement[31823-31862]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[31735-31781]:VariableDeclarationStatement[31869-31915]"
    }, {
      "left" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "right" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "info" : "IfStatement[31788-31918]:IfStatement[31922-32052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31851-31918]:Block[31985-32052]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[31861-31910]:ThrowStatement[31995-32044]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getX(), -v1.getY()),\n        FastMath.acos(v2.getZ()),\n        FastMath.atan2(v2.getX(), v2.getY())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getX(), -v1.getY()),\n        FastMath.acos(v2.getZ()),\n        FastMath.atan2(v2.getX(), v2.getY())\n      };",
      "info" : "ReturnStatement[31925-32081]:ReturnStatement[32059-32215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32094-32830]:Block[32228-32964]"
    }, {
      "left" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v1 = applyTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[32431-32470]:VariableDeclarationStatement[32565-32604]"
    }, {
      "left" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "right" : "Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);",
      "info" : "VariableDeclarationStatement[32477-32523]:VariableDeclarationStatement[32611-32657]"
    }, {
      "left" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "right" : "if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999))",
      "info" : "IfStatement[32530-32660]:IfStatement[32664-32794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32593-32660]:Block[32727-32794]"
    }, {
      "left" : "throw new CardanEulerSingularityException(false);",
      "right" : "throw new CardanEulerSingularityException(false);",
      "info" : "ThrowStatement[32603-32652]:ThrowStatement[32737-32786]"
    }, {
      "left" : "return new double[] {\n        FastMath.atan2(v1.getY(), v1.getX()),\n        FastMath.acos(v2.getZ()),\n        FastMath.atan2(v2.getY(), -v2.getX())\n      };",
      "right" : "return new double[] {\n        FastMath.atan2(v1.getY(), v1.getX()),\n        FastMath.acos(v2.getZ()),\n        FastMath.atan2(v2.getY(), -v2.getX())\n      };",
      "info" : "ReturnStatement[32667-32823]:ReturnStatement[32801-32957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32984-33787]:Block[33118-33921]"
    }, {
      "left" : "double q0q0  = q0 * q0;",
      "right" : "double q0q0  = q0 * q0;",
      "info" : "VariableDeclarationStatement[33007-33030]:VariableDeclarationStatement[33141-33164]"
    }, {
      "left" : "double q0q1  = q0 * q1;",
      "right" : "double q0q1  = q0 * q1;",
      "info" : "VariableDeclarationStatement[33035-33058]:VariableDeclarationStatement[33169-33192]"
    }, {
      "left" : "double q0q2  = q0 * q2;",
      "right" : "double q0q2  = q0 * q2;",
      "info" : "VariableDeclarationStatement[33063-33086]:VariableDeclarationStatement[33197-33220]"
    }, {
      "left" : "double q0q3  = q0 * q3;",
      "right" : "double q0q3  = q0 * q3;",
      "info" : "VariableDeclarationStatement[33091-33114]:VariableDeclarationStatement[33225-33248]"
    }, {
      "left" : "double q1q1  = q1 * q1;",
      "right" : "double q1q1  = q1 * q1;",
      "info" : "VariableDeclarationStatement[33119-33142]:VariableDeclarationStatement[33253-33276]"
    }, {
      "left" : "double q1q2  = q1 * q2;",
      "right" : "double q1q2  = q1 * q2;",
      "info" : "VariableDeclarationStatement[33147-33170]:VariableDeclarationStatement[33281-33304]"
    }, {
      "left" : "double q1q3  = q1 * q3;",
      "right" : "double q1q3  = q1 * q3;",
      "info" : "VariableDeclarationStatement[33175-33198]:VariableDeclarationStatement[33309-33332]"
    }, {
      "left" : "double q2q2  = q2 * q2;",
      "right" : "double q2q2  = q2 * q2;",
      "info" : "VariableDeclarationStatement[33203-33226]:VariableDeclarationStatement[33337-33360]"
    }, {
      "left" : "double q2q3  = q2 * q3;",
      "right" : "double q2q3  = q2 * q3;",
      "info" : "VariableDeclarationStatement[33231-33254]:VariableDeclarationStatement[33365-33388]"
    }, {
      "left" : "double q3q3  = q3 * q3;",
      "right" : "double q3q3  = q3 * q3;",
      "info" : "VariableDeclarationStatement[33259-33282]:VariableDeclarationStatement[33393-33416]"
    }, {
      "left" : "double[][] m = new double[3][];",
      "right" : "double[][] m = new double[3][];",
      "info" : "VariableDeclarationStatement[33313-33344]:VariableDeclarationStatement[33447-33478]"
    }, {
      "left" : "m[0] = new double[3];",
      "right" : "m[0] = new double[3];",
      "info" : "ExpressionStatement[33349-33370]:ExpressionStatement[33483-33504]"
    }, {
      "left" : "m[1] = new double[3];",
      "right" : "m[1] = new double[3];",
      "info" : "ExpressionStatement[33375-33396]:ExpressionStatement[33509-33530]"
    }, {
      "left" : "m[2] = new double[3];",
      "right" : "m[2] = new double[3];",
      "info" : "ExpressionStatement[33401-33422]:ExpressionStatement[33535-33556]"
    }, {
      "left" : "m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;",
      "right" : "m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;",
      "info" : "ExpressionStatement[33428-33465]:ExpressionStatement[33562-33599]"
    }, {
      "left" : "m [1][0] = 2.0 * (q1q2 - q0q3);",
      "right" : "m [1][0] = 2.0 * (q1q2 - q0q3);",
      "info" : "ExpressionStatement[33470-33501]:ExpressionStatement[33604-33635]"
    }, {
      "left" : "m [2][0] = 2.0 * (q1q3 + q0q2);",
      "right" : "m [2][0] = 2.0 * (q1q3 + q0q2);",
      "info" : "ExpressionStatement[33506-33537]:ExpressionStatement[33640-33671]"
    }, {
      "left" : "m [0][1] = 2.0 * (q1q2 + q0q3);",
      "right" : "m [0][1] = 2.0 * (q1q2 + q0q3);",
      "info" : "ExpressionStatement[33543-33574]:ExpressionStatement[33677-33708]"
    }, {
      "left" : "m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;",
      "right" : "m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;",
      "info" : "ExpressionStatement[33579-33616]:ExpressionStatement[33713-33750]"
    }, {
      "left" : "m [2][1] = 2.0 * (q2q3 - q0q1);",
      "right" : "m [2][1] = 2.0 * (q2q3 - q0q1);",
      "info" : "ExpressionStatement[33621-33652]:ExpressionStatement[33755-33786]"
    }, {
      "left" : "m [0][2] = 2.0 * (q1q3 - q0q2);",
      "right" : "m [0][2] = 2.0 * (q1q3 - q0q2);",
      "info" : "ExpressionStatement[33658-33689]:ExpressionStatement[33792-33823]"
    }, {
      "left" : "m [1][2] = 2.0 * (q2q3 + q0q1);",
      "right" : "m [1][2] = 2.0 * (q2q3 + q0q1);",
      "info" : "ExpressionStatement[33694-33725]:ExpressionStatement[33828-33859]"
    }, {
      "left" : "m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;",
      "right" : "m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;",
      "info" : "ExpressionStatement[33730-33767]:ExpressionStatement[33864-33901]"
    }, {
      "left" : "return m;",
      "right" : "return m;",
      "info" : "ReturnStatement[33773-33782]:ReturnStatement[33907-33916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33983-34343]:Block[34117-34477]"
    }, {
      "left" : "double x = u.getX();",
      "right" : "double x = u.getX();",
      "info" : "VariableDeclarationStatement[33990-34010]:VariableDeclarationStatement[34124-34144]"
    }, {
      "left" : "double y = u.getY();",
      "right" : "double y = u.getY();",
      "info" : "VariableDeclarationStatement[34015-34035]:VariableDeclarationStatement[34149-34169]"
    }, {
      "left" : "double z = u.getZ();",
      "right" : "double z = u.getZ();",
      "info" : "VariableDeclarationStatement[34040-34060]:VariableDeclarationStatement[34174-34194]"
    }, {
      "left" : "double s = q1 * x + q2 * y + q3 * z;",
      "right" : "double s = q1 * x + q2 * y + q3 * z;",
      "info" : "VariableDeclarationStatement[34066-34102]:VariableDeclarationStatement[34200-34236]"
    }, {
      "left" : "return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,\n                        2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,\n                        2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);",
      "right" : "return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,\n                        2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,\n                        2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);",
      "info" : "ReturnStatement[34108-34338]:ReturnStatement[34242-34472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34583-34964]:Block[34717-35098]"
    }, {
      "left" : "double x = u.getX();",
      "right" : "double x = u.getX();",
      "info" : "VariableDeclarationStatement[34590-34610]:VariableDeclarationStatement[34724-34744]"
    }, {
      "left" : "double y = u.getY();",
      "right" : "double y = u.getY();",
      "info" : "VariableDeclarationStatement[34615-34635]:VariableDeclarationStatement[34749-34769]"
    }, {
      "left" : "double z = u.getZ();",
      "right" : "double z = u.getZ();",
      "info" : "VariableDeclarationStatement[34640-34660]:VariableDeclarationStatement[34774-34794]"
    }, {
      "left" : "double s = q1 * x + q2 * y + q3 * z;",
      "right" : "double s = q1 * x + q2 * y + q3 * z;",
      "info" : "VariableDeclarationStatement[34666-34702]:VariableDeclarationStatement[34800-34836]"
    }, {
      "left" : "double m0 = -q0;",
      "right" : "double m0 = -q0;",
      "info" : "VariableDeclarationStatement[34707-34723]:VariableDeclarationStatement[34841-34857]"
    }, {
      "left" : "return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,\n                        2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,\n                        2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);",
      "right" : "return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,\n                        2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,\n                        2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);",
      "info" : "ReturnStatement[34729-34959]:ReturnStatement[34863-35093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35496-35825]:Block[35630-35959]"
    }, {
      "left" : "return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);",
      "right" : "return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);",
      "info" : "ReturnStatement[35502-35821]:ReturnStatement[35636-35955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36441-36774]:Block[36575-36908]"
    }, {
      "left" : "return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        -r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);",
      "right" : "return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        -r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);",
      "info" : "ReturnStatement[36447-36770]:ReturnStatement[36581-36904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37400-40311]:Block[37534-40445]"
    }, {
      "left" : "double[] m0 = m[0];",
      "right" : "double[] m0 = m[0];",
      "info" : "VariableDeclarationStatement[37406-37425]:VariableDeclarationStatement[37540-37559]"
    }, {
      "left" : "double[] m1 = m[1];",
      "right" : "double[] m1 = m[1];",
      "info" : "VariableDeclarationStatement[37430-37449]:VariableDeclarationStatement[37564-37583]"
    }, {
      "left" : "double[] m2 = m[2];",
      "right" : "double[] m2 = m[2];",
      "info" : "VariableDeclarationStatement[37454-37473]:VariableDeclarationStatement[37588-37607]"
    }, {
      "left" : "double x00 = m0[0];",
      "right" : "double x00 = m0[0];",
      "info" : "VariableDeclarationStatement[37478-37497]:VariableDeclarationStatement[37612-37631]"
    }, {
      "left" : "double x01 = m0[1];",
      "right" : "double x01 = m0[1];",
      "info" : "VariableDeclarationStatement[37502-37521]:VariableDeclarationStatement[37636-37655]"
    }, {
      "left" : "double x02 = m0[2];",
      "right" : "double x02 = m0[2];",
      "info" : "VariableDeclarationStatement[37526-37545]:VariableDeclarationStatement[37660-37679]"
    }, {
      "left" : "double x10 = m1[0];",
      "right" : "double x10 = m1[0];",
      "info" : "VariableDeclarationStatement[37550-37569]:VariableDeclarationStatement[37684-37703]"
    }, {
      "left" : "double x11 = m1[1];",
      "right" : "double x11 = m1[1];",
      "info" : "VariableDeclarationStatement[37574-37593]:VariableDeclarationStatement[37708-37727]"
    }, {
      "left" : "double x12 = m1[2];",
      "right" : "double x12 = m1[2];",
      "info" : "VariableDeclarationStatement[37598-37617]:VariableDeclarationStatement[37732-37751]"
    }, {
      "left" : "double x20 = m2[0];",
      "right" : "double x20 = m2[0];",
      "info" : "VariableDeclarationStatement[37622-37641]:VariableDeclarationStatement[37756-37775]"
    }, {
      "left" : "double x21 = m2[1];",
      "right" : "double x21 = m2[1];",
      "info" : "VariableDeclarationStatement[37646-37665]:VariableDeclarationStatement[37780-37799]"
    }, {
      "left" : "double x22 = m2[2];",
      "right" : "double x22 = m2[2];",
      "info" : "VariableDeclarationStatement[37670-37689]:VariableDeclarationStatement[37804-37823]"
    }, {
      "left" : "double fn = 0;",
      "right" : "double fn = 0;",
      "info" : "VariableDeclarationStatement[37694-37708]:VariableDeclarationStatement[37828-37842]"
    }, {
      "left" : "double fn1;",
      "right" : "double fn1;",
      "info" : "VariableDeclarationStatement[37713-37724]:VariableDeclarationStatement[37847-37858]"
    }, {
      "left" : "double[][] o = new double[3][3];",
      "right" : "double[][] o = new double[3][3];",
      "info" : "VariableDeclarationStatement[37730-37762]:VariableDeclarationStatement[37864-37896]"
    }, {
      "left" : "double[] o0 = o[0];",
      "right" : "double[] o0 = o[0];",
      "info" : "VariableDeclarationStatement[37767-37786]:VariableDeclarationStatement[37901-37920]"
    }, {
      "left" : "double[] o1 = o[1];",
      "right" : "double[] o1 = o[1];",
      "info" : "VariableDeclarationStatement[37791-37810]:VariableDeclarationStatement[37925-37944]"
    }, {
      "left" : "double[] o2 = o[2];",
      "right" : "double[] o2 = o[2];",
      "info" : "VariableDeclarationStatement[37815-37834]:VariableDeclarationStatement[37949-37968]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[37902-37912]:VariableDeclarationStatement[38036-38046]"
    }, {
      "left" : "while (++i < 11)",
      "right" : "while (++i < 11)",
      "info" : "WhileStatement[37917-40124]:WhileStatement[38051-40258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37934-40124]:Block[38068-40258]"
    }, {
      "left" : "double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;",
      "right" : "double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;",
      "info" : "VariableDeclarationStatement[37958-38012]:VariableDeclarationStatement[38092-38146]"
    }, {
      "left" : "double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;",
      "right" : "double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;",
      "info" : "VariableDeclarationStatement[38019-38073]:VariableDeclarationStatement[38153-38207]"
    }, {
      "left" : "double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;",
      "right" : "double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;",
      "info" : "VariableDeclarationStatement[38080-38134]:VariableDeclarationStatement[38214-38268]"
    }, {
      "left" : "double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;",
      "right" : "double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;",
      "info" : "VariableDeclarationStatement[38141-38195]:VariableDeclarationStatement[38275-38329]"
    }, {
      "left" : "double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;",
      "right" : "double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;",
      "info" : "VariableDeclarationStatement[38202-38256]:VariableDeclarationStatement[38336-38390]"
    }, {
      "left" : "double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;",
      "right" : "double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;",
      "info" : "VariableDeclarationStatement[38263-38317]:VariableDeclarationStatement[38397-38451]"
    }, {
      "left" : "double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;",
      "right" : "double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;",
      "info" : "VariableDeclarationStatement[38324-38378]:VariableDeclarationStatement[38458-38512]"
    }, {
      "left" : "double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;",
      "right" : "double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;",
      "info" : "VariableDeclarationStatement[38385-38439]:VariableDeclarationStatement[38519-38573]"
    }, {
      "left" : "double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;",
      "right" : "double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;",
      "info" : "VariableDeclarationStatement[38446-38500]:VariableDeclarationStatement[38580-38634]"
    }, {
      "left" : "o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);",
      "right" : "o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);",
      "info" : "ExpressionStatement[38522-38589]:ExpressionStatement[38656-38723]"
    }, {
      "left" : "o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);",
      "right" : "o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);",
      "info" : "ExpressionStatement[38596-38663]:ExpressionStatement[38730-38797]"
    }, {
      "left" : "o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);",
      "right" : "o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);",
      "info" : "ExpressionStatement[38670-38737]:ExpressionStatement[38804-38871]"
    }, {
      "left" : "o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);",
      "right" : "o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);",
      "info" : "ExpressionStatement[38744-38811]:ExpressionStatement[38878-38945]"
    }, {
      "left" : "o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);",
      "right" : "o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);",
      "info" : "ExpressionStatement[38818-38885]:ExpressionStatement[38952-39019]"
    }, {
      "left" : "o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);",
      "right" : "o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);",
      "info" : "ExpressionStatement[38892-38959]:ExpressionStatement[39026-39093]"
    }, {
      "left" : "o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);",
      "right" : "o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);",
      "info" : "ExpressionStatement[38966-39033]:ExpressionStatement[39100-39167]"
    }, {
      "left" : "o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);",
      "right" : "o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);",
      "info" : "ExpressionStatement[39040-39107]:ExpressionStatement[39174-39241]"
    }, {
      "left" : "o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);",
      "right" : "o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);",
      "info" : "ExpressionStatement[39114-39181]:ExpressionStatement[39248-39315]"
    }, {
      "left" : "double corr00 = o0[0] - m0[0];",
      "right" : "double corr00 = o0[0] - m0[0];",
      "info" : "VariableDeclarationStatement[39226-39256]:VariableDeclarationStatement[39360-39390]"
    }, {
      "left" : "double corr01 = o0[1] - m0[1];",
      "right" : "double corr01 = o0[1] - m0[1];",
      "info" : "VariableDeclarationStatement[39263-39293]:VariableDeclarationStatement[39397-39427]"
    }, {
      "left" : "double corr02 = o0[2] - m0[2];",
      "right" : "double corr02 = o0[2] - m0[2];",
      "info" : "VariableDeclarationStatement[39300-39330]:VariableDeclarationStatement[39434-39464]"
    }, {
      "left" : "double corr10 = o1[0] - m1[0];",
      "right" : "double corr10 = o1[0] - m1[0];",
      "info" : "VariableDeclarationStatement[39337-39367]:VariableDeclarationStatement[39471-39501]"
    }, {
      "left" : "double corr11 = o1[1] - m1[1];",
      "right" : "double corr11 = o1[1] - m1[1];",
      "info" : "VariableDeclarationStatement[39374-39404]:VariableDeclarationStatement[39508-39538]"
    }, {
      "left" : "double corr12 = o1[2] - m1[2];",
      "right" : "double corr12 = o1[2] - m1[2];",
      "info" : "VariableDeclarationStatement[39411-39441]:VariableDeclarationStatement[39545-39575]"
    }, {
      "left" : "double corr20 = o2[0] - m2[0];",
      "right" : "double corr20 = o2[0] - m2[0];",
      "info" : "VariableDeclarationStatement[39448-39478]:VariableDeclarationStatement[39582-39612]"
    }, {
      "left" : "double corr21 = o2[1] - m2[1];",
      "right" : "double corr21 = o2[1] - m2[1];",
      "info" : "VariableDeclarationStatement[39485-39515]:VariableDeclarationStatement[39619-39649]"
    }, {
      "left" : "double corr22 = o2[2] - m2[2];",
      "right" : "double corr22 = o2[2] - m2[2];",
      "info" : "VariableDeclarationStatement[39522-39552]:VariableDeclarationStatement[39656-39686]"
    }, {
      "left" : "fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +\n            corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +\n            corr20 * corr20 + corr21 * corr21 + corr22 * corr22;",
      "right" : "fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +\n            corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +\n            corr20 * corr20 + corr21 * corr21 + corr22 * corr22;",
      "info" : "ExpressionStatement[39602-39792]:ExpressionStatement[39736-39926]"
    }, {
      "left" : "if (FastMath.abs(fn1 - fn) <= threshold)",
      "right" : "if (FastMath.abs(fn1 - fn) <= threshold)",
      "info" : "IfStatement[39826-39896]:IfStatement[39960-40030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39867-39896]:Block[40001-40030]"
    }, {
      "left" : "return o;",
      "right" : "return o;",
      "info" : "ReturnStatement[39879-39888]:ReturnStatement[40013-40022]"
    }, {
      "left" : "x00 = o0[0];",
      "right" : "x00 = o0[0];",
      "info" : "ExpressionStatement[39936-39948]:ExpressionStatement[40070-40082]"
    }, {
      "left" : "x01 = o0[1];",
      "right" : "x01 = o0[1];",
      "info" : "ExpressionStatement[39955-39967]:ExpressionStatement[40089-40101]"
    }, {
      "left" : "x02 = o0[2];",
      "right" : "x02 = o0[2];",
      "info" : "ExpressionStatement[39974-39986]:ExpressionStatement[40108-40120]"
    }, {
      "left" : "x10 = o1[0];",
      "right" : "x10 = o1[0];",
      "info" : "ExpressionStatement[39993-40005]:ExpressionStatement[40127-40139]"
    }, {
      "left" : "x11 = o1[1];",
      "right" : "x11 = o1[1];",
      "info" : "ExpressionStatement[40012-40024]:ExpressionStatement[40146-40158]"
    }, {
      "left" : "x12 = o1[2];",
      "right" : "x12 = o1[2];",
      "info" : "ExpressionStatement[40031-40043]:ExpressionStatement[40165-40177]"
    }, {
      "left" : "x20 = o2[0];",
      "right" : "x20 = o2[0];",
      "info" : "ExpressionStatement[40050-40062]:ExpressionStatement[40184-40196]"
    }, {
      "left" : "x21 = o2[1];",
      "right" : "x21 = o2[1];",
      "info" : "ExpressionStatement[40069-40081]:ExpressionStatement[40203-40215]"
    }, {
      "left" : "x22 = o2[2];",
      "right" : "x22 = o2[2];",
      "info" : "ExpressionStatement[40088-40100]:ExpressionStatement[40222-40234]"
    }, {
      "left" : "fn  = fn1;",
      "right" : "fn  = fn1;",
      "info" : "ExpressionStatement[40107-40117]:ExpressionStatement[40241-40251]"
    }, {
      "left" : "throw new NotARotationMatrixException(\n            LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,\n            i - 1);",
      "right" : "throw new NotARotationMatrixException(\n            LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,\n            i - 1);",
      "info" : "ThrowStatement[40188-40307]:ThrowStatement[40322-40441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41719-41771]:Block[41853-41905]"
    }, {
      "left" : "return r1.applyInverseTo(r2).getAngle();",
      "right" : "return r1.applyInverseTo(r2).getAngle();",
      "info" : "ReturnStatement[41727-41767]:ReturnStatement[41861-41901]"
    } ]
  },
  "interFileMappings" : { }
}