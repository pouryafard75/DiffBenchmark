{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "TypeDeclaration[1031-13556]:TypeDeclaration[1031-13851]"
    }, {
      "left" : "protected CommandLine cmd;",
      "right" : "protected CommandLine cmd;",
      "info" : "FieldDeclaration[1348-1406]:FieldDeclaration[1348-1406]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1412-1463]:FieldDeclaration[1412-1463]"
    }, {
      "left" : "private List requiredOptions;",
      "right" : "private List requiredOptions;",
      "info" : "FieldDeclaration[1469-1542]:FieldDeclaration[1469-1542]"
    }, {
      "left" : "protected void setOptions(final Options options)",
      "right" : "protected void setOptions(final Options options)",
      "info" : "MethodDeclaration[1548-1716]:MethodDeclaration[1548-1716]"
    }, {
      "left" : "protected Options getOptions()",
      "right" : "protected Options getOptions()",
      "info" : "MethodDeclaration[1722-1788]:MethodDeclaration[1722-1788]"
    }, {
      "left" : "protected List getRequiredOptions()",
      "right" : "protected List getRequiredOptions()",
      "info" : "MethodDeclaration[1794-1873]:MethodDeclaration[1794-1873]"
    }, {
      "left" : "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;",
      "right" : "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;",
      "info" : "MethodDeclaration[1879-2444]:MethodDeclaration[1879-2444]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "info" : "MethodDeclaration[2450-2946]:MethodDeclaration[2450-2946]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "info" : "MethodDeclaration[2952-3613]:MethodDeclaration[2952-3613]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "info" : "MethodDeclaration[3619-4428]:MethodDeclaration[3619-4428]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException",
      "info" : "MethodDeclaration[4434-7946]:MethodDeclaration[4434-7946]"
    }, {
      "left" : "protected void processProperties(Properties properties) throws ParseException",
      "right" : "protected void processProperties(Properties properties) throws ParseException",
      "info" : "MethodDeclaration[7952-9797]:MethodDeclaration[7952-10092]"
    }, {
      "left" : "protected void checkRequiredOptions() throws MissingOptionException",
      "right" : "protected void checkRequiredOptions() throws MissingOptionException",
      "info" : "MethodDeclaration[9803-10304]:MethodDeclaration[10098-10599]"
    }, {
      "left" : "public void processArgs(Option opt, ListIterator iter) throws ParseException",
      "right" : "public void processArgs(Option opt, ListIterator iter) throws ParseException",
      "info" : "MethodDeclaration[10310-11572]:MethodDeclaration[10605-11867]"
    }, {
      "left" : "protected void processOption(String arg, ListIterator iter) throws ParseException",
      "right" : "protected void processOption(String arg, ListIterator iter) throws ParseException",
      "info" : "MethodDeclaration[11578-12739]:MethodDeclaration[11873-13034]"
    }, {
      "left" : "private void updateRequiredOptions(Option opt) throws ParseException",
      "right" : "private void updateRequiredOptions(Option opt) throws ParseException",
      "info" : "MethodDeclaration[12745-13554]:MethodDeclaration[13040-13849]"
    } ],
    "mappings" : [
 {
      "left" : "CommandLineParser",
      "right" : "CommandLineParser",
      "info" : "SimpleType[1324-1341]:SimpleType[1324-1341]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1548-1557]:Modifier[1548-1557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1558-1562]:PrimitiveType[1558-1562]"
    }, {
      "left" : "setOptions",
      "right" : "setOptions",
      "info" : "SimpleName[1563-1573]:SimpleName[1563-1573]"
    }, {
      "left" : "final Options options",
      "right" : "final Options options",
      "info" : "SingleVariableDeclaration[1574-1595]:SingleVariableDeclaration[1574-1595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1601-1716]:Block[1601-1716]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[1611-1634]:ExpressionStatement[1611-1634]"
    }, {
      "left" : "this.requiredOptions = new ArrayList(options.getRequiredOptions());",
      "right" : "this.requiredOptions = new ArrayList(options.getRequiredOptions());",
      "info" : "ExpressionStatement[1643-1710]:ExpressionStatement[1643-1710]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1722-1731]:Modifier[1722-1731]"
    }, {
      "left" : "Options",
      "right" : "Options",
      "info" : "SimpleType[1732-1739]:SimpleType[1732-1739]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[1740-1750]:SimpleName[1740-1750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1757-1788]:Block[1757-1788]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[1767-1782]:ReturnStatement[1767-1782]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1794-1803]:Modifier[1794-1803]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[1804-1808]:SimpleType[1804-1808]"
    }, {
      "left" : "getRequiredOptions",
      "right" : "getRequiredOptions",
      "info" : "SimpleName[1809-1827]:SimpleName[1809-1827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1834-1873]:Block[1834-1873]"
    }, {
      "left" : "return requiredOptions;",
      "right" : "return requiredOptions;",
      "info" : "ReturnStatement[1844-1867]:ReturnStatement[1844-1867]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2327-2336]:Modifier[2327-2336]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2337-2345]:Modifier[2337-2345]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[2346-2354]:ArrayType[2346-2354]"
    }, {
      "left" : "flatten",
      "right" : "flatten",
      "info" : "SimpleName[2355-2362]:SimpleName[2355-2362]"
    }, {
      "left" : "Options opts",
      "right" : "Options opts",
      "info" : "SingleVariableDeclaration[2363-2375]:SingleVariableDeclaration[2363-2375]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2377-2395]:SingleVariableDeclaration[2377-2395]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[2397-2420]:SingleVariableDeclaration[2397-2420]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[2429-2443]:SimpleType[2429-2443]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2796-2802]:Modifier[2796-2802]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[2803-2814]:SimpleType[2803-2814]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2815-2820]:SimpleName[2815-2820]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[2821-2836]:SingleVariableDeclaration[2821-2836]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2838-2856]:SingleVariableDeclaration[2838-2856]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[2865-2879]:SimpleType[2865-2879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2884-2946]:Block[2884-2946]"
    }, {
      "left" : "return parse(options, arguments, null, false);",
      "right" : "return parse(options, arguments, null, false);",
      "info" : "ReturnStatement[2894-2940]:ReturnStatement[2894-2940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3434-3440]:Modifier[3434-3440]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[3441-3452]:SimpleType[3441-3452]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[3453-3458]:SimpleName[3453-3458]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[3459-3474]:SingleVariableDeclaration[3459-3474]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[3476-3494]:SingleVariableDeclaration[3476-3494]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[3496-3517]:SingleVariableDeclaration[3496-3517]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[3526-3540]:SimpleType[3526-3540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3545-3613]:Block[3545-3613]"
    }, {
      "left" : "return parse(options, arguments, properties, false);",
      "right" : "return parse(options, arguments, properties, false);",
      "info" : "ReturnStatement[3555-3607]:ReturnStatement[3555-3607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4243-4249]:Modifier[4243-4249]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[4250-4261]:SimpleType[4250-4261]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4262-4267]:SimpleName[4262-4267]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[4268-4283]:SingleVariableDeclaration[4268-4283]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[4285-4303]:SingleVariableDeclaration[4285-4303]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[4305-4328]:SingleVariableDeclaration[4305-4328]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[4337-4351]:SimpleType[4337-4351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4356-4428]:Block[4356-4428]"
    }, {
      "left" : "return parse(options, arguments, null, stopAtNonOption);",
      "right" : "return parse(options, arguments, null, stopAtNonOption);",
      "info" : "ReturnStatement[4366-4422]:ReturnStatement[4366-4422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5181-5187]:Modifier[5181-5187]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[5188-5199]:SimpleType[5188-5199]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[5200-5205]:SimpleName[5200-5205]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[5206-5221]:SingleVariableDeclaration[5206-5221]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[5223-5241]:SingleVariableDeclaration[5223-5241]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[5243-5264]:SingleVariableDeclaration[5243-5264]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[5266-5289]:SingleVariableDeclaration[5266-5289]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[5310-5324]:SimpleType[5310-5324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5329-7946]:Block[5329-7946]"
    }, {
      "left" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
      "right" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
      "info" : "ForStatement[5419-5582]:ForStatement[5419-5582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5495-5582]:Block[5495-5582]"
    }, {
      "left" : "Option opt = (Option) it.next();",
      "right" : "Option opt = (Option) it.next();",
      "info" : "VariableDeclarationStatement[5509-5541]:VariableDeclarationStatement[5509-5541]"
    }, {
      "left" : "opt.clearValues();",
      "right" : "opt.clearValues();",
      "info" : "ExpressionStatement[5554-5572]:ExpressionStatement[5554-5572]"
    }, {
      "left" : "for (Iterator it = options.getOptionGroups().iterator(); it.hasNext())",
      "right" : "for (Iterator it = options.getOptionGroups().iterator(); it.hasNext())",
      "info" : "ForStatement[5642-5827]:ForStatement[5642-5827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5722-5827]:Block[5722-5827]"
    }, {
      "left" : "OptionGroup group = (OptionGroup) it.next();",
      "right" : "OptionGroup group = (OptionGroup) it.next();",
      "info" : "VariableDeclarationStatement[5736-5780]:VariableDeclarationStatement[5736-5780]"
    }, {
      "left" : "group.setSelected(null);",
      "right" : "group.setSelected(null);",
      "info" : "ExpressionStatement[5793-5817]:ExpressionStatement[5793-5817]"
    }, {
      "left" : "setOptions(options);",
      "right" : "setOptions(options);",
      "info" : "ExpressionStatement[5875-5895]:ExpressionStatement[5875-5895]"
    }, {
      "left" : "cmd = new CommandLine();",
      "right" : "cmd = new CommandLine();",
      "info" : "ExpressionStatement[5905-5929]:ExpressionStatement[5905-5929]"
    }, {
      "left" : "boolean eatTheRest = false;",
      "right" : "boolean eatTheRest = false;",
      "info" : "VariableDeclarationStatement[5939-5966]:VariableDeclarationStatement[5939-5966]"
    }, {
      "left" : "if (arguments == null)",
      "right" : "if (arguments == null)",
      "info" : "IfStatement[5976-6057]:IfStatement[5976-6057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6007-6057]:Block[6007-6057]"
    }, {
      "left" : "arguments = new String[0];",
      "right" : "arguments = new String[0];",
      "info" : "ExpressionStatement[6021-6047]:ExpressionStatement[6021-6047]"
    }, {
      "left" : "List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));",
      "right" : "List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));",
      "info" : "VariableDeclarationStatement[6067-6149]:VariableDeclarationStatement[6067-6149]"
    }, {
      "left" : "ListIterator iterator = tokenList.listIterator();",
      "right" : "ListIterator iterator = tokenList.listIterator();",
      "info" : "VariableDeclarationStatement[6159-6208]:VariableDeclarationStatement[6159-6208]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[6258-7847]:WhileStatement[6258-7847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6293-7847]:Block[6293-7847]"
    }, {
      "left" : "String t = (String) iterator.next();",
      "right" : "String t = (String) iterator.next();",
      "info" : "VariableDeclarationStatement[6307-6343]:VariableDeclarationStatement[6307-6343]"
    }, {
      "left" : "if (\"--\".equals(t))",
      "right" : "if (\"--\".equals(t))",
      "info" : "IfStatement[6401-7413]:IfStatement[6401-7413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6433-6483]:Block[6433-6483]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6451-6469]:ExpressionStatement[6451-6469]"
    }, {
      "left" : "if (\"-\".equals(t))",
      "right" : "if (\"-\".equals(t))",
      "info" : "IfStatement[6544-7413]:IfStatement[6544-7413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6575-6794]:Block[6575-6794]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[6593-6780]:IfStatement[6593-6780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6630-6688]:Block[6630-6688]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6652-6670]:ExpressionStatement[6652-6670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6726-6780]:Block[6726-6780]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[6748-6762]:ExpressionStatement[6748-6762]"
    }, {
      "left" : "if (t.startsWith(\"-\"))",
      "right" : "if (t.startsWith(\"-\"))",
      "info" : "IfStatement[6851-7413]:IfStatement[6851-7413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6886-7183]:Block[6886-7183]"
    }, {
      "left" : "if (stopAtNonOption && !getOptions().hasOption(t))",
      "right" : "if (stopAtNonOption && !getOptions().hasOption(t))",
      "info" : "IfStatement[6904-7169]:IfStatement[6904-7169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6971-7064]:Block[6971-7064]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6993-7011]:ExpressionStatement[6993-7011]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[7032-7046]:ExpressionStatement[7032-7046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7169]:Block[7102-7169]"
    }, {
      "left" : "processOption(t, iterator);",
      "right" : "processOption(t, iterator);",
      "info" : "ExpressionStatement[7124-7151]:ExpressionStatement[7124-7151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7254-7413]:Block[7254-7413]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[7272-7286]:ExpressionStatement[7272-7286]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[7304-7399]:IfStatement[7304-7399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7341-7399]:Block[7341-7399]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7363-7381]:ExpressionStatement[7363-7381]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[7467-7837]:IfStatement[7467-7837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7495-7837]:Block[7495-7837]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[7513-7823]:WhileStatement[7513-7823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7556-7823]:Block[7556-7823]"
    }, {
      "left" : "String str = (String) iterator.next();",
      "right" : "String str = (String) iterator.next();",
      "info" : "VariableDeclarationStatement[7578-7616]:VariableDeclarationStatement[7578-7616]"
    }, {
      "left" : "if (!\"--\".equals(str))",
      "right" : "if (!\"--\".equals(str))",
      "info" : "IfStatement[7698-7805]:IfStatement[7698-7805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7741-7805]:Block[7741-7805]"
    }, {
      "left" : "cmd.addArg(str);",
      "right" : "cmd.addArg(str);",
      "info" : "ExpressionStatement[7767-7783]:ExpressionStatement[7767-7783]"
    }, {
      "left" : "processProperties(properties);",
      "right" : "processProperties(properties);",
      "info" : "ExpressionStatement[7857-7887]:ExpressionStatement[7857-7887]"
    }, {
      "left" : "checkRequiredOptions();",
      "right" : "checkRequiredOptions();",
      "info" : "ExpressionStatement[7896-7919]:ExpressionStatement[7896-7919]"
    }, {
      "left" : "return cmd;",
      "right" : "return cmd;",
      "info" : "ReturnStatement[7929-7940]:ReturnStatement[7929-7940]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8117-8126]:Modifier[8117-8126]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8127-8131]:PrimitiveType[8127-8131]"
    }, {
      "left" : "processProperties",
      "right" : "processProperties",
      "info" : "SimpleName[8132-8149]:SimpleName[8132-8149]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[8150-8171]:SingleVariableDeclaration[8150-8171]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[8180-8194]:SimpleType[8180-8194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8199-9797]:Block[8199-10092]"
    }, {
      "left" : "if (properties == null)",
      "right" : "if (properties == null)",
      "info" : "IfStatement[8209-8272]:IfStatement[8209-8272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8241-8272]:Block[8241-8272]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8255-8262]:ReturnStatement[8255-8262]"
    }, {
      "left" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "right" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "info" : "ForStatement[8282-9791]:ForStatement[8282-10086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8361-9791]:Block[8361-10086]"
    }, {
      "left" : "String option = e.nextElement().toString();",
      "right" : "String option = e.nextElement().toString();",
      "info" : "VariableDeclarationStatement[8375-8418]:VariableDeclarationStatement[8375-8418]"
    }, {
      "left" : "if (!cmd.hasOption(option))",
      "right" : "if (!cmd.hasOption(option) && !selected)",
      "info" : "IfStatement[8444-9781]:IfStatement[8917-10076]"
    }, {
      "left" : "!cmd.hasOption(option)",
      "right" : "!cmd.hasOption(option)",
      "info" : "PrefixExpression[8448-8470]:PrefixExpression[8921-8943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8484-9781]:Block[8970-10076]"
    }, {
      "left" : "Option",
      "right" : "Option",
      "info" : "SimpleType[8502-8508]:SimpleType[8444-8450]"
    }, {
      "left" : "Option opt = getOptions().getOption(option);",
      "right" : "OptionGroup group = options.getOptionGroup(opt);",
      "info" : "VariableDeclarationStatement[8502-8546]:VariableDeclarationStatement[8766-8814]"
    }, {
      "left" : "opt",
      "right" : "group",
      "info" : "SimpleName[8509-8512]:SimpleName[8778-8783]"
    }, {
      "left" : "getOption",
      "right" : "getOptionGroup",
      "info" : "SimpleName[8528-8537]:SimpleName[8794-8808]"
    }, {
      "left" : "option",
      "right" : "option",
      "info" : "METHOD_INVOCATION_ARGUMENTS[8538-8544]:METHOD_INVOCATION_ARGUMENTS[8475-8481]"
    }, {
      "left" : "String value = properties.getProperty(option);",
      "right" : "String value = properties.getProperty(option);",
      "info" : "VariableDeclarationStatement[8755-8801]:VariableDeclarationStatement[9050-9096]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[8819-9686]:IfStatement[9114-9981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8853-9322]:Block[9148-9617]"
    }, {
      "left" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "right" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "info" : "IfStatement[8875-9304]:IfStatement[9170-9599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8955-9304]:Block[9250-9599]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8981-9282]:TryStatement[9276-9577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9098]:Block[9304-9393]"
    }, {
      "left" : "opt.addValueForProcessing(value);",
      "right" : "opt.addValueForProcessing(value);",
      "info" : "ExpressionStatement[9039-9072]:ExpressionStatement[9334-9367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9176-9282]:Block[9471-9577]"
    }, {
      "left" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "right" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "info" : "IfStatement[9344-9686]:IfStatement[9639-9981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9511-9686]:Block[9806-9981]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9659-9668]:ContinueStatement[9954-9963]"
    }, {
      "left" : "cmd.addOption(opt);",
      "right" : "cmd.addOption(opt);",
      "info" : "ExpressionStatement[9704-9723]:ExpressionStatement[9999-10018]"
    }, {
      "left" : "updateRequiredOptions(opt);",
      "right" : "updateRequiredOptions(opt);",
      "info" : "ExpressionStatement[9740-9767]:ExpressionStatement[10035-10062]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10021-10030]:Modifier[10316-10325]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10031-10035]:PrimitiveType[10326-10330]"
    }, {
      "left" : "checkRequiredOptions",
      "right" : "checkRequiredOptions",
      "info" : "SimpleName[10036-10056]:SimpleName[10331-10351]"
    }, {
      "left" : "MissingOptionException",
      "right" : "MissingOptionException",
      "info" : "SimpleType[10066-10088]:SimpleType[10361-10383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10093-10304]:Block[10388-10599]"
    }, {
      "left" : "if (!getRequiredOptions().isEmpty())",
      "right" : "if (!getRequiredOptions().isEmpty())",
      "info" : "IfStatement[10174-10298]:IfStatement[10469-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10219-10298]:Block[10514-10593]"
    }, {
      "left" : "throw new MissingOptionException(getRequiredOptions());",
      "right" : "throw new MissingOptionException(getRequiredOptions());",
      "info" : "ThrowStatement[10233-10288]:ThrowStatement[10528-10583]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10725-10731]:Modifier[11020-11026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10732-10736]:PrimitiveType[11027-11031]"
    }, {
      "left" : "processArgs",
      "right" : "processArgs",
      "info" : "SimpleName[10737-10748]:SimpleName[11032-11043]"
    }, {
      "left" : "Option opt",
      "right" : "Option opt",
      "info" : "SingleVariableDeclaration[10749-10759]:SingleVariableDeclaration[11044-11054]"
    }, {
      "left" : "ListIterator iter",
      "right" : "ListIterator iter",
      "info" : "SingleVariableDeclaration[10761-10778]:SingleVariableDeclaration[11056-11073]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[10787-10801]:SimpleType[11082-11096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10806-11572]:Block[11101-11867]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[10857-11430]:WhileStatement[11152-11725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10888-11430]:Block[11183-11725]"
    }, {
      "left" : "String str = (String) iter.next();",
      "right" : "String str = (String) iter.next();",
      "info" : "VariableDeclarationStatement[10902-10936]:VariableDeclarationStatement[11197-11231]"
    }, {
      "left" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
      "right" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
      "info" : "IfStatement[10998-11137]:IfStatement[11293-11432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11066-11137]:Block[11361-11432]"
    }, {
      "left" : "iter.previous();",
      "right" : "iter.previous();",
      "info" : "ExpressionStatement[11084-11100]:ExpressionStatement[11379-11395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11117-11123]:BreakStatement[11412-11418]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11180-11420]:TryStatement[11475-11715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11196-11295]:Block[11491-11590]"
    }, {
      "left" : "opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));",
      "right" : "opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));",
      "info" : "ExpressionStatement[11214-11281]:ExpressionStatement[11509-11576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11349-11420]:Block[11644-11715]"
    }, {
      "left" : "iter.previous();",
      "right" : "iter.previous();",
      "info" : "ExpressionStatement[11367-11383]:ExpressionStatement[11662-11678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11400-11406]:BreakStatement[11695-11701]"
    }, {
      "left" : "if (opt.getValues() == null && !opt.hasOptionalArg())",
      "right" : "if (opt.getValues() == null && !opt.hasOptionalArg())",
      "info" : "IfStatement[11440-11566]:IfStatement[11735-11861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11566]:Block[11797-11861]"
    }, {
      "left" : "throw new MissingArgumentException(opt);",
      "right" : "throw new MissingArgumentException(opt);",
      "info" : "ThrowStatement[11516-11556]:ThrowStatement[11811-11851]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11956-11965]:Modifier[12251-12260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11966-11970]:PrimitiveType[12261-12265]"
    }, {
      "left" : "processOption",
      "right" : "processOption",
      "info" : "SimpleName[11971-11984]:SimpleName[12266-12279]"
    }, {
      "left" : "String arg",
      "right" : "String arg",
      "info" : "SingleVariableDeclaration[11985-11995]:SingleVariableDeclaration[12280-12290]"
    }, {
      "left" : "ListIterator iter",
      "right" : "ListIterator iter",
      "info" : "SingleVariableDeclaration[11997-12014]:SingleVariableDeclaration[12292-12309]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12023-12037]:SimpleType[12318-12332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12042-12739]:Block[12337-13034]"
    }, {
      "left" : "boolean hasOption = getOptions().hasOption(arg);",
      "right" : "boolean hasOption = getOptions().hasOption(arg);",
      "info" : "VariableDeclarationStatement[12052-12100]:VariableDeclarationStatement[12347-12395]"
    }, {
      "left" : "if (!hasOption)",
      "right" : "if (!hasOption)",
      "info" : "IfStatement[12180-12302]:IfStatement[12475-12597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12204-12302]:Block[12499-12597]"
    }, {
      "left" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);",
      "right" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);",
      "info" : "ThrowStatement[12218-12292]:ThrowStatement[12513-12587]"
    }, {
      "left" : "Option opt = (Option) getOptions().getOption(arg).clone();",
      "right" : "Option opt = (Option) getOptions().getOption(arg).clone();",
      "info" : "VariableDeclarationStatement[12357-12415]:VariableDeclarationStatement[12652-12710]"
    }, {
      "left" : "updateRequiredOptions(opt);",
      "right" : "updateRequiredOptions(opt);",
      "info" : "ExpressionStatement[12483-12510]:ExpressionStatement[12778-12805]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[12577-12650]:IfStatement[12872-12945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12603-12650]:Block[12898-12945]"
    }, {
      "left" : "processArgs(opt, iter);",
      "right" : "processArgs(opt, iter);",
      "info" : "ExpressionStatement[12617-12640]:ExpressionStatement[12912-12935]"
    }, {
      "left" : "cmd.addOption(opt);",
      "right" : "cmd.addOption(opt);",
      "info" : "ExpressionStatement[12714-12733]:ExpressionStatement[13009-13028]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12862-12869]:Modifier[13157-13164]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12870-12874]:PrimitiveType[13165-13169]"
    }, {
      "left" : "updateRequiredOptions",
      "right" : "updateRequiredOptions",
      "info" : "SimpleName[12875-12896]:SimpleName[13170-13191]"
    }, {
      "left" : "Option opt",
      "right" : "Option opt",
      "info" : "SingleVariableDeclaration[12897-12907]:SingleVariableDeclaration[13192-13202]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12916-12930]:SimpleType[13211-13225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12935-13554]:Block[13230-13849]"
    }, {
      "left" : "if (opt.isRequired())",
      "right" : "if (opt.isRequired())",
      "info" : "IfStatement[13050-13146]:IfStatement[13345-13441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13080-13146]:Block[13375-13441]"
    }, {
      "left" : "getRequiredOptions().remove(opt.getKey());",
      "right" : "getRequiredOptions().remove(opt.getKey());",
      "info" : "ExpressionStatement[13094-13136]:ExpressionStatement[13389-13431]"
    }, {
      "left" : "if (getOptions().getOptionGroup(opt) != null)",
      "right" : "if (getOptions().getOptionGroup(opt) != null)",
      "info" : "IfStatement[13263-13548]:IfStatement[13558-13843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13317-13548]:Block[13612-13843]"
    }, {
      "left" : "OptionGroup group = getOptions().getOptionGroup(opt);",
      "right" : "OptionGroup group = getOptions().getOptionGroup(opt);",
      "info" : "VariableDeclarationStatement[13331-13384]:VariableDeclarationStatement[13626-13679]"
    }, {
      "left" : "if (group.isRequired())",
      "right" : "if (group.isRequired())",
      "info" : "IfStatement[13398-13501]:IfStatement[13693-13796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13434-13501]:Block[13729-13796]"
    }, {
      "left" : "getRequiredOptions().remove(group);",
      "right" : "getRequiredOptions().remove(group);",
      "info" : "ExpressionStatement[13452-13487]:ExpressionStatement[13747-13782]"
    }, {
      "left" : "group.setSelected(opt);",
      "right" : "group.setSelected(opt);",
      "info" : "ExpressionStatement[13515-13538]:ExpressionStatement[13810-13833]"
    } ]
  },
  "interFileMappings" : { }
}