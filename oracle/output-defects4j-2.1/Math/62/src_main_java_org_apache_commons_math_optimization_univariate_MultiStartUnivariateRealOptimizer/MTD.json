{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultiStartUnivariateRealOptimizer",
      "right" : "MultiStartUnivariateRealOptimizer",
      "info" : "TypeDeclaration[1456-8414]:TypeDeclaration[1456-8292]"
    }, {
      "left" : "private final BaseUnivariateRealOptimizer<FUNC> optimizer;",
      "right" : "private final BaseUnivariateRealOptimizer<FUNC> optimizer;",
      "info" : "FieldDeclaration[2049-2150]:FieldDeclaration[2049-2150]"
    }, {
      "left" : "private int maxEvaluations;",
      "right" : "private int maxEvaluations;",
      "info" : "FieldDeclaration[2155-2232]:FieldDeclaration[2155-2232]"
    }, {
      "left" : "private int totalEvaluations;",
      "right" : "private int totalEvaluations;",
      "info" : "FieldDeclaration[2237-2333]:FieldDeclaration[2237-2333]"
    }, {
      "left" : "private int starts;",
      "right" : "private int starts;",
      "info" : "FieldDeclaration[2338-2392]:FieldDeclaration[2338-2392]"
    }, {
      "left" : "private RandomGenerator generator;",
      "right" : "private RandomGenerator generator;",
      "info" : "FieldDeclaration[2397-2476]:FieldDeclaration[2397-2476]"
    }, {
      "left" : "private UnivariateRealPointValuePair[] optima;",
      "right" : "private UnivariateRealPointValuePair[] optima;",
      "info" : "FieldDeclaration[2481-2552]:FieldDeclaration[2481-2552]"
    }, {
      "left" : "public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,\n                                             final int starts,\n                                             final RandomGenerator generator)",
      "right" : "public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,\n                                             final int starts,\n                                             final RandomGenerator generator)",
      "info" : "MethodDeclaration[2558-3261]:MethodDeclaration[2558-3261]"
    }, {
      "left" : "public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker)",
      "right" : "public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker)",
      "info" : "MethodDeclaration[3267-3453]:MethodDeclaration[3267-3453]"
    }, {
      "left" : "public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker()",
      "right" : "public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker()",
      "info" : "MethodDeclaration[3459-3633]:MethodDeclaration[3459-3633]"
    }, {
      "left" : "public int getMaxEvaluations()",
      "right" : "public int getMaxEvaluations()",
      "info" : "MethodDeclaration[3639-3733]:MethodDeclaration[3639-3733]"
    }, {
      "left" : "public int getEvaluations()",
      "right" : "public int getEvaluations()",
      "info" : "MethodDeclaration[3739-3832]:MethodDeclaration[3739-3832]"
    }, {
      "left" : "public void setMaxEvaluations(int maxEvaluations)",
      "right" : "public void setMaxEvaluations(int maxEvaluations)",
      "info" : "MethodDeclaration[3838-4019]:MethodDeclaration[3838-4019]"
    }, {
      "left" : "public UnivariateRealPointValuePair[] getOptima()",
      "right" : "public UnivariateRealPointValuePair[] getOptima()",
      "info" : "MethodDeclaration[4025-5659]:MethodDeclaration[4025-5659]"
    }, {
      "left" : "public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException",
      "right" : "public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException",
      "info" : "MethodDeclaration[5665-6001]:MethodDeclaration[5665-6023]"
    }, {
      "left" : "public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException",
      "right" : "public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException",
      "info" : "MethodDeclaration[6007-7534]:MethodDeclaration[6029-7412]"
    }, {
      "left" : "private void sortPairs(final GoalType goal)",
      "right" : "private void sortPairs(final GoalType goal)",
      "info" : "MethodDeclaration[7540-8412]:MethodDeclaration[7418-8290]"
    }, {
      "left" : "public int compare(final UnivariateRealPointValuePair o1,\n                                   final UnivariateRealPointValuePair o2)",
      "right" : "public int compare(final UnivariateRealPointValuePair o1,\n                                   final UnivariateRealPointValuePair o2)",
      "info" : "MethodDeclaration[7810-8390]:MethodDeclaration[7688-8268]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3152-3261]:Block[3152-3261]"
    }, {
      "left" : "this.optimizer = optimizer;",
      "right" : "this.optimizer = optimizer;",
      "info" : "ExpressionStatement[3162-3189]:ExpressionStatement[3162-3189]"
    }, {
      "left" : "this.starts = starts;",
      "right" : "this.starts = starts;",
      "info" : "ExpressionStatement[3198-3219]:ExpressionStatement[3198-3219]"
    }, {
      "left" : "this.generator = generator;",
      "right" : "this.generator = generator;",
      "info" : "ExpressionStatement[3228-3255]:ExpressionStatement[3228-3255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3396-3453]:Block[3396-3453]"
    }, {
      "left" : "optimizer.setConvergenceChecker(checker);",
      "right" : "optimizer.setConvergenceChecker(checker);",
      "info" : "ExpressionStatement[3406-3447]:ExpressionStatement[3406-3447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3576-3633]:Block[3576-3633]"
    }, {
      "left" : "return optimizer.getConvergenceChecker();",
      "right" : "return optimizer.getConvergenceChecker();",
      "info" : "ReturnStatement[3586-3627]:ReturnStatement[3586-3627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3695-3733]:Block[3695-3733]"
    }, {
      "left" : "return maxEvaluations;",
      "right" : "return maxEvaluations;",
      "info" : "ReturnStatement[3705-3727]:ReturnStatement[3705-3727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3792-3832]:Block[3792-3832]"
    }, {
      "left" : "return totalEvaluations;",
      "right" : "return totalEvaluations;",
      "info" : "ReturnStatement[3802-3826]:ReturnStatement[3802-3826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3913-4019]:Block[3913-4019]"
    }, {
      "left" : "this.maxEvaluations = maxEvaluations;",
      "right" : "this.maxEvaluations = maxEvaluations;",
      "info" : "ExpressionStatement[3923-3960]:ExpressionStatement[3923-3960]"
    }, {
      "left" : "optimizer.setMaxEvaluations(maxEvaluations);",
      "right" : "optimizer.setMaxEvaluations(maxEvaluations);",
      "info" : "ExpressionStatement[3969-4013]:ExpressionStatement[3969-4013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5490-5659]:Block[5490-5659]"
    }, {
      "left" : "if (optima == null)",
      "right" : "if (optima == null)",
      "info" : "IfStatement[5500-5622]:IfStatement[5500-5622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5520-5622]:Block[5520-5622]"
    }, {
      "left" : "throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "right" : "throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "info" : "ThrowStatement[5534-5612]:ThrowStatement[5534-5612]"
    }, {
      "left" : "return optima.clone();",
      "right" : "return optima.clone();",
      "info" : "ReturnStatement[5631-5653]:ReturnStatement[5631-5653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5947-6001]:Block[5947-6023]"
    }, {
      "left" : "return optimize(f, goal, min, max, 0);",
      "right" : "return optimize(f, goal, min, max, min + 0.5 * (max - min));",
      "info" : "ReturnStatement[5957-5995]:ReturnStatement[5957-6017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6314-7534]:Block[6336-7412]"
    }, {
      "left" : "optima = new UnivariateRealPointValuePair[starts];",
      "right" : "optima = new UnivariateRealPointValuePair[starts];",
      "info" : "ExpressionStatement[6324-6374]:ExpressionStatement[6346-6396]"
    }, {
      "left" : "totalEvaluations = 0;",
      "right" : "totalEvaluations = 0;",
      "info" : "ExpressionStatement[6383-6404]:ExpressionStatement[6405-6426]"
    }, {
      "left" : "for (int i = 0; i < starts; ++i)",
      "right" : "for (int i = 0; i < starts; ++i)",
      "info" : "ForStatement[6443-7214]:ForStatement[6465-7092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6476-7214]:Block[6498-7092]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6490-6996]:TryStatement[6512-6874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6494-6824]:Block[6516-6702]"
    }, {
      "left" : "final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);",
      "right" : "final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);",
      "info" : "VariableDeclarationStatement[6611-6693]:VariableDeclarationStatement[6534-6618]"
    }, {
      "left" : "optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",
      "right" : "optima[i] = optimizer.optimize(f, goal, min, max, s);",
      "info" : "ExpressionStatement[6710-6810]:ExpressionStatement[6635-6688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6865-6914]:Block[6743-6792]"
    }, {
      "left" : "optima[i] = null;",
      "right" : "optima[i] = null;",
      "info" : "ExpressionStatement[6883-6900]:ExpressionStatement[6761-6778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6947-6996]:Block[6825-6874]"
    }, {
      "left" : "optima[i] = null;",
      "right" : "optima[i] = null;",
      "info" : "ExpressionStatement[6965-6982]:ExpressionStatement[6843-6860]"
    }, {
      "left" : "final int usedEvaluations = optimizer.getEvaluations();",
      "right" : "final int usedEvaluations = optimizer.getEvaluations();",
      "info" : "VariableDeclarationStatement[7010-7065]:VariableDeclarationStatement[6888-6943]"
    }, {
      "left" : "optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);",
      "right" : "optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);",
      "info" : "ExpressionStatement[7078-7155]:ExpressionStatement[6956-7033]"
    }, {
      "left" : "totalEvaluations += usedEvaluations;",
      "right" : "totalEvaluations += usedEvaluations;",
      "info" : "ExpressionStatement[7168-7204]:ExpressionStatement[7046-7082]"
    }, {
      "left" : "sortPairs(goal);",
      "right" : "sortPairs(goal);",
      "info" : "ExpressionStatement[7224-7240]:ExpressionStatement[7102-7118]"
    }, {
      "left" : "if (optima[0] == null)",
      "right" : "if (optima[0] == null)",
      "info" : "IfStatement[7250-7433]:IfStatement[7128-7311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7273-7433]:Block[7151-7311]"
    }, {
      "left" : "throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                                           starts);",
      "right" : "throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                                           starts);",
      "info" : "ThrowStatement[7287-7423]:ThrowStatement[7165-7301]"
    }, {
      "left" : "return optima[0];",
      "right" : "return optima[0];",
      "info" : "ReturnStatement[7511-7528]:ReturnStatement[7389-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7715-8412]:Block[7593-8290]"
    }, {
      "left" : "Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\n                public int compare(final UnivariateRealPointValuePair o1,\n                                   final UnivariateRealPointValuePair o2) {\n                    if (o1 == null) {\n                        return (o2 == null) ? 0 : 1;\n                    } else if (o2 == null) {\n                        return -1;\n                    }\n                    final double v1 = o1.getValue();\n                    final double v2 = o2.getValue();\n                    return (goal == GoalType.MINIMIZE) ?\n                        Double.compare(v1, v2) : Double.compare(v2, v1);\n                }\n            });",
      "right" : "Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\n                public int compare(final UnivariateRealPointValuePair o1,\n                                   final UnivariateRealPointValuePair o2) {\n                    if (o1 == null) {\n                        return (o2 == null) ? 0 : 1;\n                    } else if (o2 == null) {\n                        return -1;\n                    }\n                    final double v1 = o1.getValue();\n                    final double v2 = o2.getValue();\n                    return (goal == GoalType.MINIMIZE) ?\n                        Double.compare(v1, v2) : Double.compare(v2, v1);\n                }\n            });",
      "info" : "ExpressionStatement[7725-8406]:ExpressionStatement[7603-8284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7942-8390]:Block[7820-8268]"
    }, {
      "left" : "if (o1 == null)",
      "right" : "if (o1 == null)",
      "info" : "IfStatement[7964-8136]:IfStatement[7842-8014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8056]:Block[7858-7934]"
    }, {
      "left" : "return (o2 == null) ? 0 : 1;",
      "right" : "return (o2 == null) ? 0 : 1;",
      "info" : "ReturnStatement[8006-8034]:ReturnStatement[7884-7912]"
    }, {
      "left" : "if (o2 == null)",
      "right" : "if (o2 == null)",
      "info" : "IfStatement[8062-8136]:IfStatement[7940-8014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8078-8136]:Block[7956-8014]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[8104-8114]:ReturnStatement[7982-7992]"
    }, {
      "left" : "final double v1 = o1.getValue();",
      "right" : "final double v1 = o1.getValue();",
      "info" : "VariableDeclarationStatement[8157-8189]:VariableDeclarationStatement[8035-8067]"
    }, {
      "left" : "final double v2 = o2.getValue();",
      "right" : "final double v2 = o2.getValue();",
      "info" : "VariableDeclarationStatement[8210-8242]:VariableDeclarationStatement[8088-8120]"
    }, {
      "left" : "return (goal == GoalType.MINIMIZE) ?\n                        Double.compare(v1, v2) : Double.compare(v2, v1);",
      "right" : "return (goal == GoalType.MINIMIZE) ?\n                        Double.compare(v1, v2) : Double.compare(v2, v1);",
      "info" : "ReturnStatement[8263-8372]:ReturnStatement[8141-8250]"
    } ]
  },
  "interFileMappings" : { }
}