{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TestInputOutputFormat",
      "right" : "TestInputOutputFormat",
      "info" : "TypeDeclaration[4722-67331]:TypeDeclaration[4878-72084]"
    }, {
      "left" : "Path workDir = new Path(System.getProperty(\"test.tmp.dir\",\"target/tmp\"));",
      "right" : "Path workDir = new Path(System.getProperty(\"test.tmp.dir\",\"target/tmp\"));",
      "info" : "FieldDeclaration[4762-4835]:FieldDeclaration[4918-4991]"
    }, {
      "left" : "static final int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;",
      "right" : "static final int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;",
      "info" : "FieldDeclaration[4838-4891]:FieldDeclaration[4994-5047]"
    }, {
      "left" : "private static final SimpleDateFormat DATE_FORMAT =\n      new SimpleDateFormat(\"yyyy/MM/dd\");",
      "right" : "private static final SimpleDateFormat DATE_FORMAT =\n      new SimpleDateFormat(\"yyyy/MM/dd\");",
      "info" : "FieldDeclaration[4894-4987]:FieldDeclaration[5050-5143]"
    }, {
      "left" : "private static final SimpleDateFormat TIME_FORMAT =\n      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");",
      "right" : "private static final SimpleDateFormat TIME_FORMAT =\n      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");",
      "info" : "FieldDeclaration[4990-5096]:FieldDeclaration[5146-5252]"
    }, {
      "left" : "private static final TimeZone LOCAL_TIMEZONE = TimeZone.getDefault();",
      "right" : "private static final TimeZone LOCAL_TIMEZONE = TimeZone.getDefault();",
      "info" : "FieldDeclaration[5099-5168]:FieldDeclaration[5255-5324]"
    }, {
      "left" : "BigRow",
      "right" : "BigRow",
      "info" : "TypeDeclaration[5306-7422]:TypeDeclaration[5462-7578]"
    }, {
      "left" : "boolean booleanValue;",
      "right" : "boolean booleanValue;",
      "info" : "FieldDeclaration[5359-5380]:FieldDeclaration[5515-5536]"
    }, {
      "left" : "byte byteValue;",
      "right" : "byte byteValue;",
      "info" : "FieldDeclaration[5385-5400]:FieldDeclaration[5541-5556]"
    }, {
      "left" : "short shortValue;",
      "right" : "short shortValue;",
      "info" : "FieldDeclaration[5405-5422]:FieldDeclaration[5561-5578]"
    }, {
      "left" : "int intValue;",
      "right" : "int intValue;",
      "info" : "FieldDeclaration[5427-5440]:FieldDeclaration[5583-5596]"
    }, {
      "left" : "long longValue;",
      "right" : "long longValue;",
      "info" : "FieldDeclaration[5445-5460]:FieldDeclaration[5601-5616]"
    }, {
      "left" : "float floatValue;",
      "right" : "float floatValue;",
      "info" : "FieldDeclaration[5465-5482]:FieldDeclaration[5621-5638]"
    }, {
      "left" : "double doubleValue;",
      "right" : "double doubleValue;",
      "info" : "FieldDeclaration[5487-5506]:FieldDeclaration[5643-5662]"
    }, {
      "left" : "String stringValue;",
      "right" : "String stringValue;",
      "info" : "FieldDeclaration[5511-5530]:FieldDeclaration[5667-5686]"
    }, {
      "left" : "HiveDecimal decimalValue;",
      "right" : "HiveDecimal decimalValue;",
      "info" : "FieldDeclaration[5535-5560]:FieldDeclaration[5691-5716]"
    }, {
      "left" : "Date dateValue;",
      "right" : "Date dateValue;",
      "info" : "FieldDeclaration[5565-5580]:FieldDeclaration[5721-5736]"
    }, {
      "left" : "Timestamp timestampValue;",
      "right" : "Timestamp timestampValue;",
      "info" : "FieldDeclaration[5585-5610]:FieldDeclaration[5741-5766]"
    }, {
      "left" : "BigRow(long x)",
      "right" : "BigRow(long x)",
      "info" : "MethodDeclaration[5616-6092]:MethodDeclaration[5772-6248]"
    }, {
      "left" : "public void write(DataOutput dataOutput) throws IOException",
      "right" : "public void write(DataOutput dataOutput) throws IOException",
      "info" : "MethodDeclaration[6098-6238]:MethodDeclaration[6254-6394]"
    }, {
      "left" : "public void readFields(DataInput dataInput) throws IOException",
      "right" : "public void readFields(DataInput dataInput) throws IOException",
      "info" : "MethodDeclaration[6244-6386]:MethodDeclaration[6400-6542]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[6392-7418]:MethodDeclaration[6548-7574]"
    }, {
      "left" : "BigRowField",
      "right" : "BigRowField",
      "info" : "TypeDeclaration[7426-8183]:TypeDeclaration[7582-8339]"
    }, {
      "left" : "private final int id;",
      "right" : "private final int id;",
      "info" : "FieldDeclaration[7487-7508]:FieldDeclaration[7643-7664]"
    }, {
      "left" : "private final String fieldName;",
      "right" : "private final String fieldName;",
      "info" : "FieldDeclaration[7513-7544]:FieldDeclaration[7669-7700]"
    }, {
      "left" : "private final ObjectInspector inspector;",
      "right" : "private final ObjectInspector inspector;",
      "info" : "FieldDeclaration[7549-7589]:FieldDeclaration[7705-7745]"
    }, {
      "left" : "BigRowField(int id, String fieldName, ObjectInspector inspector)",
      "right" : "BigRowField(int id, String fieldName, ObjectInspector inspector)",
      "info" : "MethodDeclaration[7595-7755]:MethodDeclaration[7751-7911]"
    }, {
      "left" : "public String getFieldName()",
      "right" : "public String getFieldName()",
      "info" : "MethodDeclaration[7761-7835]:MethodDeclaration[7917-7991]"
    }, {
      "left" : "public ObjectInspector getFieldObjectInspector()",
      "right" : "public ObjectInspector getFieldObjectInspector()",
      "info" : "MethodDeclaration[7841-7935]:MethodDeclaration[7997-8091]"
    }, {
      "left" : "public String getFieldComment()",
      "right" : "public String getFieldComment()",
      "info" : "MethodDeclaration[7941-8013]:MethodDeclaration[8097-8169]"
    }, {
      "left" : "public int getFieldID()",
      "right" : "public int getFieldID()",
      "info" : "MethodDeclaration[8019-8081]:MethodDeclaration[8175-8237]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[8087-8179]:MethodDeclaration[8243-8335]"
    }, {
      "left" : "BigRowInspector",
      "right" : "BigRowInspector",
      "info" : "TypeDeclaration[8187-11835]:TypeDeclaration[8343-11991]"
    }, {
      "left" : "static final List<BigRowField> FIELDS = new ArrayList<BigRowField>();",
      "right" : "static final List<BigRowField> FIELDS = new ArrayList<BigRowField>();",
      "info" : "FieldDeclaration[8259-8328]:FieldDeclaration[8415-8484]"
    }, {
      "left" : "public List<? extends StructField> getAllStructFieldRefs()",
      "right" : "public List<? extends StructField> getAllStructFieldRefs()",
      "info" : "MethodDeclaration[9689-9790]:MethodDeclaration[9845-9946]"
    }, {
      "left" : "public StructField getStructFieldRef(String fieldName)",
      "right" : "public StructField getStructFieldRef(String fieldName)",
      "info" : "MethodDeclaration[9796-10082]:MethodDeclaration[9952-10238]"
    }, {
      "left" : "public Object getStructFieldData(Object data, StructField fieldRef)",
      "right" : "public Object getStructFieldData(Object data, StructField fieldRef)",
      "info" : "MethodDeclaration[10088-10880]:MethodDeclaration[10244-11036]"
    }, {
      "left" : "public List<Object> getStructFieldsDataAsList(Object data)",
      "right" : "public List<Object> getStructFieldsDataAsList(Object data)",
      "info" : "MethodDeclaration[10886-11455]:MethodDeclaration[11042-11611]"
    }, {
      "left" : "public String getTypeName()",
      "right" : "public String getTypeName()",
      "info" : "MethodDeclaration[11461-11744]:MethodDeclaration[11617-11900]"
    }, {
      "left" : "public Category getCategory()",
      "right" : "public Category getCategory()",
      "info" : "MethodDeclaration[11750-11831]:MethodDeclaration[11906-11987]"
    }, {
      "left" : "MyRow",
      "right" : "MyRow",
      "info" : "TypeDeclaration[11839-12273]:TypeDeclaration[11995-12429]"
    }, {
      "left" : "int x;",
      "right" : "int x;",
      "info" : "FieldDeclaration[11891-11897]:FieldDeclaration[12047-12053]"
    }, {
      "left" : "int y;",
      "right" : "int y;",
      "info" : "FieldDeclaration[11902-11908]:FieldDeclaration[12058-12064]"
    }, {
      "left" : "MyRow(int x, int y)",
      "right" : "MyRow(int x, int y)",
      "info" : "MethodDeclaration[11913-11976]:MethodDeclaration[12069-12132]"
    }, {
      "left" : "public void write(DataOutput dataOutput) throws IOException",
      "right" : "public void write(DataOutput dataOutput) throws IOException",
      "info" : "MethodDeclaration[11982-12122]:MethodDeclaration[12138-12278]"
    }, {
      "left" : "public void readFields(DataInput dataInput) throws IOException",
      "right" : "public void readFields(DataInput dataInput) throws IOException",
      "info" : "MethodDeclaration[12128-12269]:MethodDeclaration[12284-12425]"
    }, {
      "left" : "@Rule\n  public TestName testCaseName = new TestName();",
      "right" : "@Rule\n  public TestName testCaseName = new TestName();",
      "info" : "FieldDeclaration[12277-12331]:FieldDeclaration[12433-12487]"
    }, {
      "left" : "JobConf conf;",
      "right" : "JobConf conf;",
      "info" : "FieldDeclaration[12334-12347]:FieldDeclaration[12490-12503]"
    }, {
      "left" : "FileSystem fs;",
      "right" : "FileSystem fs;",
      "info" : "FieldDeclaration[12350-12364]:FieldDeclaration[12506-12520]"
    }, {
      "left" : "Path testFilePath;",
      "right" : "Path testFilePath;",
      "info" : "FieldDeclaration[12367-12385]:FieldDeclaration[12523-12541]"
    }, {
      "left" : "public void openFileSystem () throws Exception",
      "right" : "public void openFileSystem () throws Exception",
      "info" : "MethodDeclaration[12389-12661]:MethodDeclaration[12545-12817]"
    }, {
      "left" : "public void testOverlap() throws Exception",
      "right" : "public void testOverlap() throws Exception",
      "info" : "MethodDeclaration[12665-13288]:MethodDeclaration[12821-13444]"
    }, {
      "left" : "public void testGetInputPaths() throws Exception",
      "right" : "public void testGetInputPaths() throws Exception",
      "info" : "MethodDeclaration[13292-13854]:MethodDeclaration[13448-14010]"
    }, {
      "left" : "public void testFileGenerator() throws Exception",
      "right" : "public void testFileGenerator() throws Exception",
      "info" : "MethodDeclaration[13858-15309]:MethodDeclaration[18611-20062]"
    }, {
      "left" : "MockBlock",
      "right" : "MockBlock",
      "info" : "TypeDeclaration[15313-15955]:TypeDeclaration[20066-20708]"
    }, {
      "left" : "int offset;",
      "right" : "int offset;",
      "info" : "FieldDeclaration[15349-15360]:FieldDeclaration[20102-20113]"
    }, {
      "left" : "int length;",
      "right" : "int length;",
      "info" : "FieldDeclaration[15365-15376]:FieldDeclaration[20118-20129]"
    }, {
      "left" : "final String[] hosts;",
      "right" : "final String[] hosts;",
      "info" : "FieldDeclaration[15381-15402]:FieldDeclaration[20134-20155]"
    }, {
      "left" : "public MockBlock(String... hosts)",
      "right" : "public MockBlock(String... hosts)",
      "info" : "MethodDeclaration[15408-15475]:MethodDeclaration[20161-20228]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[15481-15951]:MethodDeclaration[20234-20704]"
    }, {
      "left" : "MockFile",
      "right" : "MockFile",
      "info" : "TypeDeclaration[15959-17114]:TypeDeclaration[20712-21867]"
    }, {
      "left" : "final Path path;",
      "right" : "final Path path;",
      "info" : "FieldDeclaration[15994-16010]:FieldDeclaration[20747-20763]"
    }, {
      "left" : "int blockSize;",
      "right" : "int blockSize;",
      "info" : "FieldDeclaration[16015-16029]:FieldDeclaration[20768-20782]"
    }, {
      "left" : "int length;",
      "right" : "int length;",
      "info" : "FieldDeclaration[16034-16045]:FieldDeclaration[20787-20798]"
    }, {
      "left" : "MockBlock[] blocks;",
      "right" : "MockBlock[] blocks;",
      "info" : "FieldDeclaration[16050-16069]:FieldDeclaration[20803-20822]"
    }, {
      "left" : "byte[] content;",
      "right" : "byte[] content;",
      "info" : "FieldDeclaration[16074-16089]:FieldDeclaration[20827-20842]"
    }, {
      "left" : "public MockFile(String path, int blockSize, byte[] content,\n                    MockBlock... blocks)",
      "right" : "public MockFile(String path, int blockSize, byte[] content,\n                    MockBlock... blocks)",
      "info" : "MethodDeclaration[16095-16556]:MethodDeclaration[20848-21309]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[16562-17110]:MethodDeclaration[21315-21863]"
    }, {
      "left" : "MockInputStream",
      "right" : "MockInputStream",
      "info" : "TypeDeclaration[17118-17785]:TypeDeclaration[21871-22538]"
    }, {
      "left" : "final MockFile file;",
      "right" : "final MockFile file;",
      "info" : "FieldDeclaration[17175-17195]:FieldDeclaration[21928-21948]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "FieldDeclaration[17200-17215]:FieldDeclaration[21953-21968]"
    }, {
      "left" : "public MockInputStream(MockFile file) throws IOException",
      "right" : "public MockInputStream(MockFile file) throws IOException",
      "info" : "MethodDeclaration[17221-17309]:MethodDeclaration[21974-22062]"
    }, {
      "left" : "public void seek(long offset) throws IOException",
      "right" : "public void seek(long offset) throws IOException",
      "info" : "MethodDeclaration[17315-17419]:MethodDeclaration[22068-22172]"
    }, {
      "left" : "public long getPos() throws IOException",
      "right" : "public long getPos() throws IOException",
      "info" : "MethodDeclaration[17425-17507]:MethodDeclaration[22178-22260]"
    }, {
      "left" : "public boolean seekToNewSource(long l) throws IOException",
      "right" : "public boolean seekToNewSource(long l) throws IOException",
      "info" : "MethodDeclaration[17513-17612]:MethodDeclaration[22266-22365]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[17618-17781]:MethodDeclaration[22371-22534]"
    }, {
      "left" : "MockPath",
      "right" : "MockPath",
      "info" : "TypeDeclaration[17789-18059]:TypeDeclaration[22542-22812]"
    }, {
      "left" : "private final FileSystem fs;",
      "right" : "private final FileSystem fs;",
      "info" : "FieldDeclaration[17837-17865]:FieldDeclaration[22590-22618]"
    }, {
      "left" : "public MockPath(FileSystem fs, String path)",
      "right" : "public MockPath(FileSystem fs, String path)",
      "info" : "MethodDeclaration[17870-17960]:MethodDeclaration[22623-22713]"
    }, {
      "left" : "public FileSystem getFileSystem(Configuration conf)",
      "right" : "public FileSystem getFileSystem(Configuration conf)",
      "info" : "MethodDeclaration[17965-18055]:MethodDeclaration[22718-22808]"
    }, {
      "left" : "MockOutputStream",
      "right" : "MockOutputStream",
      "info" : "TypeDeclaration[18063-19265]:TypeDeclaration[22816-24018]"
    }, {
      "left" : "private final MockFile file;",
      "right" : "private final MockFile file;",
      "info" : "FieldDeclaration[18133-18161]:FieldDeclaration[22886-22914]"
    }, {
      "left" : "public MockOutputStream(MockFile file) throws IOException",
      "right" : "public MockOutputStream(MockFile file) throws IOException",
      "info" : "MethodDeclaration[18167-18299]:MethodDeclaration[22920-23052]"
    }, {
      "left" : "public void setBlocks(MockBlock... blocks)",
      "right" : "public void setBlocks(MockBlock... blocks)",
      "info" : "MethodDeclaration[18305-18852]:MethodDeclaration[23058-23605]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[18858-19160]:MethodDeclaration[23611-23913]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[19166-19261]:MethodDeclaration[23919-24014]"
    }, {
      "left" : "MockFileSystem",
      "right" : "MockFileSystem",
      "info" : "TypeDeclaration[19269-25215]:TypeDeclaration[24022-29968]"
    }, {
      "left" : "final List<MockFile> files = new ArrayList<MockFile>();",
      "right" : "final List<MockFile> files = new ArrayList<MockFile>();",
      "info" : "FieldDeclaration[19329-19384]:FieldDeclaration[24082-24137]"
    }, {
      "left" : "Path workingDir = new Path(\"/\");",
      "right" : "Path workingDir = new Path(\"/\");",
      "info" : "FieldDeclaration[19389-19421]:FieldDeclaration[24142-24174]"
    }, {
      "left" : "public MockFileSystem()",
      "right" : "public MockFileSystem()",
      "info" : "MethodDeclaration[19427-19505]:MethodDeclaration[24180-24258]"
    }, {
      "left" : "public void initialize(URI uri, Configuration conf)",
      "right" : "public void initialize(URI uri, Configuration conf)",
      "info" : "MethodDeclaration[19511-19605]:MethodDeclaration[24264-24358]"
    }, {
      "left" : "public MockFileSystem(Configuration conf, MockFile... files)",
      "right" : "public MockFileSystem(Configuration conf, MockFile... files)",
      "info" : "MethodDeclaration[19611-19747]:MethodDeclaration[24364-24500]"
    }, {
      "left" : "void clear()",
      "right" : "void clear()",
      "info" : "MethodDeclaration[19753-19794]:MethodDeclaration[24506-24547]"
    }, {
      "left" : "public URI getUri()",
      "right" : "public URI getUri()",
      "info" : "MethodDeclaration[19800-19995]:MethodDeclaration[24553-24748]"
    }, {
      "left" : "public FSDataInputStream open(Path path, int i) throws IOException",
      "right" : "public FSDataInputStream open(Path path, int i) throws IOException",
      "info" : "MethodDeclaration[20001-20302]:MethodDeclaration[24754-25055]"
    }, {
      "left" : "public FSDataOutputStream create(Path path, FsPermission fsPermission,\n                                     boolean overwrite, int bufferSize,\n                                     short replication, long blockSize,\n                                     Progressable progressable\n                                     ) throws IOException",
      "right" : "public FSDataOutputStream create(Path path, FsPermission fsPermission,\n                                     boolean overwrite, int bufferSize,\n                                     short replication, long blockSize,\n                                     Progressable progressable\n                                     ) throws IOException",
      "info" : "MethodDeclaration[20308-21020]:MethodDeclaration[25061-25773]"
    }, {
      "left" : "public FSDataOutputStream append(Path path, int bufferSize,\n                                     Progressable progressable\n                                     ) throws IOException",
      "right" : "public FSDataOutputStream append(Path path, int bufferSize,\n                                     Progressable progressable\n                                     ) throws IOException",
      "info" : "MethodDeclaration[21026-21347]:MethodDeclaration[25779-26100]"
    }, {
      "left" : "public boolean rename(Path path, Path path2) throws IOException",
      "right" : "public boolean rename(Path path, Path path2) throws IOException",
      "info" : "MethodDeclaration[21353-21458]:MethodDeclaration[26106-26211]"
    }, {
      "left" : "public boolean delete(Path path) throws IOException",
      "right" : "public boolean delete(Path path) throws IOException",
      "info" : "MethodDeclaration[21464-21557]:MethodDeclaration[26217-26310]"
    }, {
      "left" : "public boolean delete(Path path, boolean b) throws IOException",
      "right" : "public boolean delete(Path path, boolean b) throws IOException",
      "info" : "MethodDeclaration[21563-21667]:MethodDeclaration[26316-26420]"
    }, {
      "left" : "public FileStatus[] listStatus(Path path) throws IOException",
      "right" : "public FileStatus[] listStatus(Path path) throws IOException",
      "info" : "MethodDeclaration[21673-22729]:MethodDeclaration[26426-27482]"
    }, {
      "left" : "public void setWorkingDirectory(Path path)",
      "right" : "public void setWorkingDirectory(Path path)",
      "info" : "MethodDeclaration[22735-22824]:MethodDeclaration[27488-27577]"
    }, {
      "left" : "public Path getWorkingDirectory()",
      "right" : "public Path getWorkingDirectory()",
      "info" : "MethodDeclaration[22830-22910]:MethodDeclaration[27583-27663]"
    }, {
      "left" : "public boolean mkdirs(Path path, FsPermission fsPermission)",
      "right" : "public boolean mkdirs(Path path, FsPermission fsPermission)",
      "info" : "MethodDeclaration[22916-23017]:MethodDeclaration[27669-27770]"
    }, {
      "left" : "private FileStatus createStatus(MockFile file)",
      "right" : "private FileStatus createStatus(MockFile file)",
      "info" : "MethodDeclaration[23023-23242]:MethodDeclaration[27776-27995]"
    }, {
      "left" : "private FileStatus createDirectory(Path dir)",
      "right" : "private FileStatus createDirectory(Path dir)",
      "info" : "MethodDeclaration[23248-23425]:MethodDeclaration[28001-28178]"
    }, {
      "left" : "public FileStatus getFileStatus(Path path) throws IOException",
      "right" : "public FileStatus getFileStatus(Path path) throws IOException",
      "info" : "MethodDeclaration[23431-23916]:MethodDeclaration[28184-28669]"
    }, {
      "left" : "public BlockLocation[] getFileBlockLocations(FileStatus stat,\n                                                 long start, long len)",
      "right" : "public BlockLocation[] getFileBlockLocations(FileStatus stat,\n                                                 long start, long len)",
      "info" : "MethodDeclaration[23922-24859]:MethodDeclaration[28675-29612]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24865-25211]:MethodDeclaration[29618-29964]"
    }, {
      "left" : "static void fill(DataOutputBuffer out, long length) throws IOException",
      "right" : "static void fill(DataOutputBuffer out, long length) throws IOException",
      "info" : "MethodDeclaration[25219-25357]:MethodDeclaration[29972-30110]"
    }, {
      "left" : "static byte[] createMockOrcFile(long... stripeLengths) throws IOException",
      "right" : "static byte[] createMockOrcFile(long... stripeLengths) throws IOException",
      "info" : "MethodDeclaration[25361-27200]:MethodDeclaration[30114-31953]"
    }, {
      "left" : "public void testAddSplit() throws Exception",
      "right" : "public void testAddSplit() throws Exception",
      "info" : "MethodDeclaration[27204-28878]:MethodDeclaration[31957-33631]"
    }, {
      "left" : "public void testSplitGenerator() throws Exception",
      "right" : "public void testSplitGenerator() throws Exception",
      "info" : "MethodDeclaration[28882-31165]:MethodDeclaration[33635-35918]"
    }, {
      "left" : "public void testInOutFormat() throws Exception",
      "right" : "public void testInOutFormat() throws Exception",
      "info" : "MethodDeclaration[31169-35319]:MethodDeclaration[35922-40072]"
    }, {
      "left" : "SimpleRow",
      "right" : "SimpleRow",
      "info" : "TypeDeclaration[35323-35740]:TypeDeclaration[40076-40493]"
    }, {
      "left" : "Text z;",
      "right" : "Text z;",
      "info" : "FieldDeclaration[35372-35379]:FieldDeclaration[40125-40132]"
    }, {
      "left" : "public SimpleRow(Text t)",
      "right" : "public SimpleRow(Text t)",
      "info" : "MethodDeclaration[35385-35435]:MethodDeclaration[40138-40188]"
    }, {
      "left" : "public void write(DataOutput dataOutput) throws IOException",
      "right" : "public void write(DataOutput dataOutput) throws IOException",
      "info" : "MethodDeclaration[35441-35584]:MethodDeclaration[40194-40337]"
    }, {
      "left" : "public void readFields(DataInput dataInput) throws IOException",
      "right" : "public void readFields(DataInput dataInput) throws IOException",
      "info" : "MethodDeclaration[35590-35736]:MethodDeclaration[40343-40489]"
    }, {
      "left" : "NestedRow",
      "right" : "NestedRow",
      "info" : "TypeDeclaration[35744-36209]:TypeDeclaration[40497-40962]"
    }, {
      "left" : "int z;",
      "right" : "int z;",
      "info" : "FieldDeclaration[35793-35799]:FieldDeclaration[40546-40552]"
    }, {
      "left" : "MyRow r;",
      "right" : "MyRow r;",
      "info" : "FieldDeclaration[35804-35812]:FieldDeclaration[40557-40565]"
    }, {
      "left" : "NestedRow(int x, int y, int z)",
      "right" : "NestedRow(int x, int y, int z)",
      "info" : "MethodDeclaration[35817-35904]:MethodDeclaration[40570-40657]"
    }, {
      "left" : "public void write(DataOutput dataOutput) throws IOException",
      "right" : "public void write(DataOutput dataOutput) throws IOException",
      "info" : "MethodDeclaration[35910-36053]:MethodDeclaration[40663-40806]"
    }, {
      "left" : "public void readFields(DataInput dataInput) throws IOException",
      "right" : "public void readFields(DataInput dataInput) throws IOException",
      "info" : "MethodDeclaration[36059-36205]:MethodDeclaration[40812-40958]"
    }, {
      "left" : "public void testMROutput() throws Exception",
      "right" : "public void testMROutput() throws Exception",
      "info" : "MethodDeclaration[36213-38776]:MethodDeclaration[40966-43529]"
    }, {
      "left" : "public void testEmptyFile() throws Exception",
      "right" : "public void testEmptyFile() throws Exception",
      "info" : "MethodDeclaration[38780-39641]:MethodDeclaration[43533-44394]"
    }, {
      "left" : "StringRow",
      "right" : "StringRow",
      "info" : "TypeDeclaration[39645-40082]:TypeDeclaration[44398-44835]"
    }, {
      "left" : "String str;",
      "right" : "String str;",
      "info" : "FieldDeclaration[39694-39705]:FieldDeclaration[44447-44458]"
    }, {
      "left" : "String str2;",
      "right" : "String str2;",
      "info" : "FieldDeclaration[39710-39722]:FieldDeclaration[44463-44475]"
    }, {
      "left" : "StringRow(String s)",
      "right" : "StringRow(String s)",
      "info" : "MethodDeclaration[39727-39785]:MethodDeclaration[44480-44538]"
    }, {
      "left" : "public void write(DataOutput dataOutput) throws IOException",
      "right" : "public void write(DataOutput dataOutput) throws IOException",
      "info" : "MethodDeclaration[39790-39930]:MethodDeclaration[44543-44683]"
    }, {
      "left" : "public void readFields(DataInput dataInput) throws IOException",
      "right" : "public void readFields(DataInput dataInput) throws IOException",
      "info" : "MethodDeclaration[39936-40078]:MethodDeclaration[44689-44831]"
    }, {
      "left" : "public void testDefaultTypes() throws Exception",
      "right" : "public void testDefaultTypes() throws Exception",
      "info" : "MethodDeclaration[40086-43260]:MethodDeclaration[44839-48013]"
    }, {
      "left" : "JobConf createMockExecutionEnvironment(Path workDir,\n                                         Path warehouseDir,\n                                         String tableName,\n                                         ObjectInspector objectInspector,\n                                         boolean isVectorized,\n                                         int partitions\n                                         ) throws IOException",
      "right" : "JobConf createMockExecutionEnvironment(Path workDir,\n                                         Path warehouseDir,\n                                         String tableName,\n                                         ObjectInspector objectInspector,\n                                         boolean isVectorized,\n                                         int partitions\n                                         ) throws IOException",
      "info" : "MethodDeclaration[43264-47592]:MethodDeclaration[48017-52345]"
    }, {
      "left" : "public void testVectorization() throws Exception",
      "right" : "public void testVectorization() throws Exception",
      "info" : "MethodDeclaration[47596-49447]:MethodDeclaration[52349-54200]"
    }, {
      "left" : "public void testVectorizationWithBuckets() throws Exception",
      "right" : "public void testVectorizationWithBuckets() throws Exception",
      "info" : "MethodDeclaration[49451-51370]:MethodDeclaration[54204-56123]"
    }, {
      "left" : "public void testVectorizationWithAcid() throws Exception",
      "right" : "public void testVectorizationWithAcid() throws Exception",
      "info" : "MethodDeclaration[51420-54790]:MethodDeclaration[56173-59543]"
    }, {
      "left" : "public void testCombinationInputFormat() throws Exception",
      "right" : "public void testCombinationInputFormat() throws Exception",
      "info" : "MethodDeclaration[54838-57734]:MethodDeclaration[59591-62487]"
    }, {
      "left" : "public void testCombinationInputFormatWithAcid() throws Exception",
      "right" : "public void testCombinationInputFormatWithAcid() throws Exception",
      "info" : "MethodDeclaration[57778-61783]:MethodDeclaration[62531-66536]"
    }, {
      "left" : "public void testSetSearchArgument() throws Exception",
      "right" : "public void testSetSearchArgument() throws Exception",
      "info" : "MethodDeclaration[61787-63810]:MethodDeclaration[66540-68563]"
    }, {
      "left" : "public void testSplitElimination() throws Exception",
      "right" : "public void testSplitElimination() throws Exception",
      "info" : "MethodDeclaration[63814-65575]:MethodDeclaration[68567-70328]"
    }, {
      "left" : "public void testSplitEliminationNullStats() throws Exception",
      "right" : "public void testSplitEliminationNullStats() throws Exception",
      "info" : "MethodDeclaration[65579-67328]:MethodDeclaration[70332-72081]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4722-4728]:Modifier[4878-4884]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4729-4734]:TYPE_DECLARATION_KIND[4885-4890]"
    }, {
      "left" : "TestInputOutputFormat",
      "right" : "TestInputOutputFormat",
      "info" : "SimpleName[4735-4756]:SimpleName[4891-4912]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5306-5312]:Modifier[5462-5468]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5313-5319]:Modifier[5469-5475]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5320-5325]:TYPE_DECLARATION_KIND[5476-5481]"
    }, {
      "left" : "BigRow",
      "right" : "BigRow",
      "info" : "SimpleName[5326-5332]:SimpleName[5482-5488]"
    }, {
      "left" : "Writable",
      "right" : "Writable",
      "info" : "SimpleType[5344-5352]:SimpleType[5500-5508]"
    }, {
      "left" : "BigRow",
      "right" : "BigRow",
      "info" : "SimpleName[5616-5622]:SimpleName[5772-5778]"
    }, {
      "left" : "long x",
      "right" : "long x",
      "info" : "SingleVariableDeclaration[5623-5629]:SingleVariableDeclaration[5779-5785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5631-6092]:Block[5787-6248]"
    }, {
      "left" : "booleanValue = x % 2 == 0;",
      "right" : "booleanValue = x % 2 == 0;",
      "info" : "ExpressionStatement[5639-5665]:ExpressionStatement[5795-5821]"
    }, {
      "left" : "byteValue = (byte) x;",
      "right" : "byteValue = (byte) x;",
      "info" : "ExpressionStatement[5672-5693]:ExpressionStatement[5828-5849]"
    }, {
      "left" : "shortValue = (short) x;",
      "right" : "shortValue = (short) x;",
      "info" : "ExpressionStatement[5700-5723]:ExpressionStatement[5856-5879]"
    }, {
      "left" : "intValue = (int) x;",
      "right" : "intValue = (int) x;",
      "info" : "ExpressionStatement[5730-5749]:ExpressionStatement[5886-5905]"
    }, {
      "left" : "longValue = x;",
      "right" : "longValue = x;",
      "info" : "ExpressionStatement[5756-5770]:ExpressionStatement[5912-5926]"
    }, {
      "left" : "floatValue = x;",
      "right" : "floatValue = x;",
      "info" : "ExpressionStatement[5777-5792]:ExpressionStatement[5933-5948]"
    }, {
      "left" : "doubleValue = x;",
      "right" : "doubleValue = x;",
      "info" : "ExpressionStatement[5799-5815]:ExpressionStatement[5955-5971]"
    }, {
      "left" : "stringValue = Long.toHexString(x);",
      "right" : "stringValue = Long.toHexString(x);",
      "info" : "ExpressionStatement[5822-5856]:ExpressionStatement[5978-6012]"
    }, {
      "left" : "decimalValue = HiveDecimal.create(x);",
      "right" : "decimalValue = HiveDecimal.create(x);",
      "info" : "ExpressionStatement[5863-5900]:ExpressionStatement[6019-6056]"
    }, {
      "left" : "long millisUtc = x * MILLIS_IN_DAY;",
      "right" : "long millisUtc = x * MILLIS_IN_DAY;",
      "info" : "VariableDeclarationStatement[5907-5942]:VariableDeclarationStatement[6063-6098]"
    }, {
      "left" : "millisUtc -= LOCAL_TIMEZONE.getOffset(millisUtc);",
      "right" : "millisUtc -= LOCAL_TIMEZONE.getOffset(millisUtc);",
      "info" : "ExpressionStatement[5949-5998]:ExpressionStatement[6105-6154]"
    }, {
      "left" : "dateValue = new Date(millisUtc);",
      "right" : "dateValue = new Date(millisUtc);",
      "info" : "ExpressionStatement[6005-6037]:ExpressionStatement[6161-6193]"
    }, {
      "left" : "timestampValue = new Timestamp(millisUtc);",
      "right" : "timestampValue = new Timestamp(millisUtc);",
      "info" : "ExpressionStatement[6044-6086]:ExpressionStatement[6200-6242]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6098-6107]:MarkerAnnotation[6254-6263]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6112-6118]:Modifier[6268-6274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6119-6123]:PrimitiveType[6275-6279]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[6124-6129]:SimpleName[6280-6285]"
    }, {
      "left" : "DataOutput dataOutput",
      "right" : "DataOutput dataOutput",
      "info" : "SingleVariableDeclaration[6130-6151]:SingleVariableDeclaration[6286-6307]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6160-6171]:SimpleType[6316-6327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6172-6238]:Block[6328-6394]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no write\");",
      "right" : "throw new UnsupportedOperationException(\"no write\");",
      "info" : "ThrowStatement[6180-6232]:ThrowStatement[6336-6388]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6244-6253]:MarkerAnnotation[6400-6409]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6258-6264]:Modifier[6414-6420]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6265-6269]:PrimitiveType[6421-6425]"
    }, {
      "left" : "readFields",
      "right" : "readFields",
      "info" : "SimpleName[6270-6280]:SimpleName[6426-6436]"
    }, {
      "left" : "DataInput dataInput",
      "right" : "DataInput dataInput",
      "info" : "SingleVariableDeclaration[6281-6300]:SingleVariableDeclaration[6437-6456]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6309-6320]:SimpleType[6465-6476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6321-6386]:Block[6477-6542]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no read\");",
      "right" : "throw new UnsupportedOperationException(\"no read\");",
      "info" : "ThrowStatement[6329-6380]:ThrowStatement[6485-6536]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6392-6401]:MarkerAnnotation[6548-6557]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6406-6412]:Modifier[6562-6568]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6413-6419]:SimpleType[6569-6575]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[6420-6428]:SimpleName[6576-6584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6431-7418]:Block[6587-7574]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6439-6483]:VariableDeclarationStatement[6595-6639]"
    }, {
      "left" : "builder.append(\"bigrow{booleanValue: \");",
      "right" : "builder.append(\"bigrow{booleanValue: \");",
      "info" : "ExpressionStatement[6490-6530]:ExpressionStatement[6646-6686]"
    }, {
      "left" : "builder.append(booleanValue);",
      "right" : "builder.append(booleanValue);",
      "info" : "ExpressionStatement[6537-6566]:ExpressionStatement[6693-6722]"
    }, {
      "left" : "builder.append(\", byteValue: \");",
      "right" : "builder.append(\", byteValue: \");",
      "info" : "ExpressionStatement[6573-6605]:ExpressionStatement[6729-6761]"
    }, {
      "left" : "builder.append(byteValue);",
      "right" : "builder.append(byteValue);",
      "info" : "ExpressionStatement[6612-6638]:ExpressionStatement[6768-6794]"
    }, {
      "left" : "builder.append(\", shortValue: \");",
      "right" : "builder.append(\", shortValue: \");",
      "info" : "ExpressionStatement[6645-6678]:ExpressionStatement[6801-6834]"
    }, {
      "left" : "builder.append(shortValue);",
      "right" : "builder.append(shortValue);",
      "info" : "ExpressionStatement[6685-6712]:ExpressionStatement[6841-6868]"
    }, {
      "left" : "builder.append(\", intValue: \");",
      "right" : "builder.append(\", intValue: \");",
      "info" : "ExpressionStatement[6719-6750]:ExpressionStatement[6875-6906]"
    }, {
      "left" : "builder.append(intValue);",
      "right" : "builder.append(intValue);",
      "info" : "ExpressionStatement[6757-6782]:ExpressionStatement[6913-6938]"
    }, {
      "left" : "builder.append(\", longValue: \");",
      "right" : "builder.append(\", longValue: \");",
      "info" : "ExpressionStatement[6789-6821]:ExpressionStatement[6945-6977]"
    }, {
      "left" : "builder.append(longValue);",
      "right" : "builder.append(longValue);",
      "info" : "ExpressionStatement[6828-6854]:ExpressionStatement[6984-7010]"
    }, {
      "left" : "builder.append(\", floatValue: \");",
      "right" : "builder.append(\", floatValue: \");",
      "info" : "ExpressionStatement[6861-6894]:ExpressionStatement[7017-7050]"
    }, {
      "left" : "builder.append(floatValue);",
      "right" : "builder.append(floatValue);",
      "info" : "ExpressionStatement[6901-6928]:ExpressionStatement[7057-7084]"
    }, {
      "left" : "builder.append(\", doubleValue: \");",
      "right" : "builder.append(\", doubleValue: \");",
      "info" : "ExpressionStatement[6935-6969]:ExpressionStatement[7091-7125]"
    }, {
      "left" : "builder.append(doubleValue);",
      "right" : "builder.append(doubleValue);",
      "info" : "ExpressionStatement[6976-7004]:ExpressionStatement[7132-7160]"
    }, {
      "left" : "builder.append(\", stringValue: \");",
      "right" : "builder.append(\", stringValue: \");",
      "info" : "ExpressionStatement[7011-7045]:ExpressionStatement[7167-7201]"
    }, {
      "left" : "builder.append(stringValue);",
      "right" : "builder.append(stringValue);",
      "info" : "ExpressionStatement[7052-7080]:ExpressionStatement[7208-7236]"
    }, {
      "left" : "builder.append(\", decimalValue: \");",
      "right" : "builder.append(\", decimalValue: \");",
      "info" : "ExpressionStatement[7087-7122]:ExpressionStatement[7243-7278]"
    }, {
      "left" : "builder.append(decimalValue);",
      "right" : "builder.append(decimalValue);",
      "info" : "ExpressionStatement[7129-7158]:ExpressionStatement[7285-7314]"
    }, {
      "left" : "builder.append(\", dateValue: \");",
      "right" : "builder.append(\", dateValue: \");",
      "info" : "ExpressionStatement[7165-7197]:ExpressionStatement[7321-7353]"
    }, {
      "left" : "builder.append(DATE_FORMAT.format(dateValue));",
      "right" : "builder.append(DATE_FORMAT.format(dateValue));",
      "info" : "ExpressionStatement[7204-7250]:ExpressionStatement[7360-7406]"
    }, {
      "left" : "builder.append(\", timestampValue: \");",
      "right" : "builder.append(\", timestampValue: \");",
      "info" : "ExpressionStatement[7257-7294]:ExpressionStatement[7413-7450]"
    }, {
      "left" : "builder.append(TIME_FORMAT.format(timestampValue));",
      "right" : "builder.append(TIME_FORMAT.format(timestampValue));",
      "info" : "ExpressionStatement[7301-7352]:ExpressionStatement[7457-7508]"
    }, {
      "left" : "builder.append(\"}\");",
      "right" : "builder.append(\"}\");",
      "info" : "ExpressionStatement[7359-7379]:ExpressionStatement[7515-7535]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[7386-7412]:ReturnStatement[7542-7568]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7426-7432]:Modifier[7582-7588]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7433-7439]:Modifier[7589-7595]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7440-7445]:TYPE_DECLARATION_KIND[7596-7601]"
    }, {
      "left" : "BigRowField",
      "right" : "BigRowField",
      "info" : "SimpleName[7446-7457]:SimpleName[7602-7613]"
    }, {
      "left" : "StructField",
      "right" : "StructField",
      "info" : "SimpleType[7469-7480]:SimpleType[7625-7636]"
    }, {
      "left" : "BigRowField",
      "right" : "BigRowField",
      "info" : "SimpleName[7595-7606]:SimpleName[7751-7762]"
    }, {
      "left" : "int id",
      "right" : "int id",
      "info" : "SingleVariableDeclaration[7607-7613]:SingleVariableDeclaration[7763-7769]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[7615-7631]:SingleVariableDeclaration[7771-7787]"
    }, {
      "left" : "ObjectInspector inspector",
      "right" : "ObjectInspector inspector",
      "info" : "SingleVariableDeclaration[7633-7658]:SingleVariableDeclaration[7789-7814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7660-7755]:Block[7816-7911]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[7668-7681]:ExpressionStatement[7824-7837]"
    }, {
      "left" : "this.fieldName = fieldName;",
      "right" : "this.fieldName = fieldName;",
      "info" : "ExpressionStatement[7688-7715]:ExpressionStatement[7844-7871]"
    }, {
      "left" : "this.inspector = inspector;",
      "right" : "this.inspector = inspector;",
      "info" : "ExpressionStatement[7722-7749]:ExpressionStatement[7878-7905]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7761-7770]:MarkerAnnotation[7917-7926]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7775-7781]:Modifier[7931-7937]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7782-7788]:SimpleType[7938-7944]"
    }, {
      "left" : "getFieldName",
      "right" : "getFieldName",
      "info" : "SimpleName[7789-7801]:SimpleName[7945-7957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7804-7835]:Block[7960-7991]"
    }, {
      "left" : "return fieldName;",
      "right" : "return fieldName;",
      "info" : "ReturnStatement[7812-7829]:ReturnStatement[7968-7985]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7841-7850]:MarkerAnnotation[7997-8006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7855-7861]:Modifier[8011-8017]"
    }, {
      "left" : "ObjectInspector",
      "right" : "ObjectInspector",
      "info" : "SimpleType[7862-7877]:SimpleType[8018-8033]"
    }, {
      "left" : "getFieldObjectInspector",
      "right" : "getFieldObjectInspector",
      "info" : "SimpleName[7878-7901]:SimpleName[8034-8057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7904-7935]:Block[8060-8091]"
    }, {
      "left" : "return inspector;",
      "right" : "return inspector;",
      "info" : "ReturnStatement[7912-7929]:ReturnStatement[8068-8085]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7941-7950]:MarkerAnnotation[8097-8106]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7955-7961]:Modifier[8111-8117]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7962-7968]:SimpleType[8118-8124]"
    }, {
      "left" : "getFieldComment",
      "right" : "getFieldComment",
      "info" : "SimpleName[7969-7984]:SimpleName[8125-8140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7987-8013]:Block[8143-8169]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7995-8007]:ReturnStatement[8151-8163]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8019-8028]:MarkerAnnotation[8175-8184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8033-8039]:Modifier[8189-8195]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8040-8043]:PrimitiveType[8196-8199]"
    }, {
      "left" : "getFieldID",
      "right" : "getFieldID",
      "info" : "SimpleName[8044-8054]:SimpleName[8200-8210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8057-8081]:Block[8213-8237]"
    }, {
      "left" : "return id;",
      "right" : "return id;",
      "info" : "ReturnStatement[8065-8075]:ReturnStatement[8221-8231]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8087-8096]:MarkerAnnotation[8243-8252]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8101-8107]:Modifier[8257-8263]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8108-8114]:SimpleType[8264-8270]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[8115-8123]:SimpleName[8271-8279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8126-8179]:Block[8282-8335]"
    }, {
      "left" : "return \"field \" + id + \" \" + fieldName;",
      "right" : "return \"field \" + id + \" \" + fieldName;",
      "info" : "ReturnStatement[8134-8173]:ReturnStatement[8290-8329]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8187-8193]:Modifier[8343-8349]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8194-8200]:Modifier[8350-8356]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8201-8206]:TYPE_DECLARATION_KIND[8357-8362]"
    }, {
      "left" : "BigRowInspector",
      "right" : "BigRowInspector",
      "info" : "SimpleName[8207-8222]:SimpleName[8363-8378]"
    }, {
      "left" : "StructObjectInspector",
      "right" : "StructObjectInspector",
      "info" : "SimpleType[8231-8252]:SimpleType[8387-8408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8340-9682]:Block[8496-9838]"
    }, {
      "left" : "FIELDS.add(new BigRowField(0, \"booleanValue\",\n          PrimitiveObjectInspectorFactory.javaBooleanObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(0, \"booleanValue\",\n          PrimitiveObjectInspectorFactory.javaBooleanObjectInspector));",
      "info" : "ExpressionStatement[8348-8465]:ExpressionStatement[8504-8621]"
    }, {
      "left" : "FIELDS.add(new BigRowField(1, \"byteValue\",\n          PrimitiveObjectInspectorFactory.javaByteObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(1, \"byteValue\",\n          PrimitiveObjectInspectorFactory.javaByteObjectInspector));",
      "info" : "ExpressionStatement[8472-8583]:ExpressionStatement[8628-8739]"
    }, {
      "left" : "FIELDS.add(new BigRowField(2, \"shortValue\",\n          PrimitiveObjectInspectorFactory.javaShortObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(2, \"shortValue\",\n          PrimitiveObjectInspectorFactory.javaShortObjectInspector));",
      "info" : "ExpressionStatement[8590-8703]:ExpressionStatement[8746-8859]"
    }, {
      "left" : "FIELDS.add(new BigRowField(3, \"intValue\",\n          PrimitiveObjectInspectorFactory.javaIntObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(3, \"intValue\",\n          PrimitiveObjectInspectorFactory.javaIntObjectInspector));",
      "info" : "ExpressionStatement[8710-8819]:ExpressionStatement[8866-8975]"
    }, {
      "left" : "FIELDS.add(new BigRowField(4, \"longValue\",\n          PrimitiveObjectInspectorFactory.javaLongObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(4, \"longValue\",\n          PrimitiveObjectInspectorFactory.javaLongObjectInspector));",
      "info" : "ExpressionStatement[8826-8937]:ExpressionStatement[8982-9093]"
    }, {
      "left" : "FIELDS.add(new BigRowField(5, \"floatValue\",\n          PrimitiveObjectInspectorFactory.javaFloatObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(5, \"floatValue\",\n          PrimitiveObjectInspectorFactory.javaFloatObjectInspector));",
      "info" : "ExpressionStatement[8944-9057]:ExpressionStatement[9100-9213]"
    }, {
      "left" : "FIELDS.add(new BigRowField(6, \"doubleValue\",\n          PrimitiveObjectInspectorFactory.javaDoubleObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(6, \"doubleValue\",\n          PrimitiveObjectInspectorFactory.javaDoubleObjectInspector));",
      "info" : "ExpressionStatement[9064-9179]:ExpressionStatement[9220-9335]"
    }, {
      "left" : "FIELDS.add(new BigRowField(7, \"stringValue\",\n          PrimitiveObjectInspectorFactory.javaStringObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(7, \"stringValue\",\n          PrimitiveObjectInspectorFactory.javaStringObjectInspector));",
      "info" : "ExpressionStatement[9186-9301]:ExpressionStatement[9342-9457]"
    }, {
      "left" : "FIELDS.add(new BigRowField(8, \"decimalValue\",\n          PrimitiveObjectInspectorFactory.javaHiveDecimalObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(8, \"decimalValue\",\n          PrimitiveObjectInspectorFactory.javaHiveDecimalObjectInspector));",
      "info" : "ExpressionStatement[9308-9429]:ExpressionStatement[9464-9585]"
    }, {
      "left" : "FIELDS.add(new BigRowField(9, \"dateValue\",\n          PrimitiveObjectInspectorFactory.javaDateObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(9, \"dateValue\",\n          PrimitiveObjectInspectorFactory.javaDateObjectInspector));",
      "info" : "ExpressionStatement[9436-9547]:ExpressionStatement[9592-9703]"
    }, {
      "left" : "FIELDS.add(new BigRowField(10, \"timestampValue\",\n          PrimitiveObjectInspectorFactory.javaTimestampObjectInspector));",
      "right" : "FIELDS.add(new BigRowField(10, \"timestampValue\",\n          PrimitiveObjectInspectorFactory.javaTimestampObjectInspector));",
      "info" : "ExpressionStatement[9554-9676]:ExpressionStatement[9710-9832]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9689-9698]:MarkerAnnotation[9845-9854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9703-9709]:Modifier[9859-9865]"
    }, {
      "left" : "List<? extends StructField>",
      "right" : "List<? extends StructField>",
      "info" : "ParameterizedType[9710-9737]:ParameterizedType[9866-9893]"
    }, {
      "left" : "getAllStructFieldRefs",
      "right" : "getAllStructFieldRefs",
      "info" : "SimpleName[9738-9759]:SimpleName[9894-9915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9762-9790]:Block[9918-9946]"
    }, {
      "left" : "return FIELDS;",
      "right" : "return FIELDS;",
      "info" : "ReturnStatement[9770-9784]:ReturnStatement[9926-9940]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9796-9805]:MarkerAnnotation[9952-9961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9810-9816]:Modifier[9966-9972]"
    }, {
      "left" : "StructField",
      "right" : "StructField",
      "info" : "SimpleType[9817-9828]:SimpleType[9973-9984]"
    }, {
      "left" : "getStructFieldRef",
      "right" : "getStructFieldRef",
      "info" : "SimpleName[9829-9846]:SimpleName[9985-10002]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[9847-9863]:SingleVariableDeclaration[10003-10019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9865-10082]:Block[10021-10238]"
    }, {
      "left" : "for(StructField field: FIELDS)",
      "right" : "for(StructField field: FIELDS)",
      "info" : "EnhancedForStatement[9873-10001]:EnhancedForStatement[10029-10157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9904-10001]:Block[10060-10157]"
    }, {
      "left" : "if (field.getFieldName().equals(fieldName))",
      "right" : "if (field.getFieldName().equals(fieldName))",
      "info" : "IfStatement[9914-9993]:IfStatement[10070-10149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9958-9993]:Block[10114-10149]"
    }, {
      "left" : "return field;",
      "right" : "return field;",
      "info" : "ReturnStatement[9970-9983]:ReturnStatement[10126-10139]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can't find field \" + fieldName);",
      "right" : "throw new IllegalArgumentException(\"Can't find field \" + fieldName);",
      "info" : "ThrowStatement[10008-10076]:ThrowStatement[10164-10232]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10088-10097]:MarkerAnnotation[10244-10253]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10102-10108]:Modifier[10258-10264]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10109-10115]:SimpleType[10265-10271]"
    }, {
      "left" : "getStructFieldData",
      "right" : "getStructFieldData",
      "info" : "SimpleName[10116-10134]:SimpleName[10272-10290]"
    }, {
      "left" : "Object data",
      "right" : "Object data",
      "info" : "SingleVariableDeclaration[10135-10146]:SingleVariableDeclaration[10291-10302]"
    }, {
      "left" : "StructField fieldRef",
      "right" : "StructField fieldRef",
      "info" : "SingleVariableDeclaration[10148-10168]:SingleVariableDeclaration[10304-10324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10170-10880]:Block[10326-11036]"
    }, {
      "left" : "BigRow obj = (BigRow) data;",
      "right" : "BigRow obj = (BigRow) data;",
      "info" : "VariableDeclarationStatement[10178-10205]:VariableDeclarationStatement[10334-10361]"
    }, {
      "left" : "switch (((BigRowField) fieldRef).id) {\n        case 0:\n          return obj.booleanValue;\n        case 1:\n          return obj.byteValue;\n        case 2:\n          return obj.shortValue;\n        case 3:\n          return obj.intValue;\n        case 4:\n          return obj.longValue;\n        case 5:\n          return obj.floatValue;\n        case 6:\n          return obj.doubleValue;\n        case 7:\n          return obj.stringValue;\n        case 8:\n          return obj.decimalValue;\n        case 9:\n          return obj.dateValue;\n        case 10:\n          return obj.timestampValue;\n      }",
      "right" : "switch (((BigRowField) fieldRef).id) {\n        case 0:\n          return obj.booleanValue;\n        case 1:\n          return obj.byteValue;\n        case 2:\n          return obj.shortValue;\n        case 3:\n          return obj.intValue;\n        case 4:\n          return obj.longValue;\n        case 5:\n          return obj.floatValue;\n        case 6:\n          return obj.doubleValue;\n        case 7:\n          return obj.stringValue;\n        case 8:\n          return obj.decimalValue;\n        case 9:\n          return obj.dateValue;\n        case 10:\n          return obj.timestampValue;\n      }",
      "info" : "SwitchStatement[10212-10803]:SwitchStatement[10368-10959]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[10259-10266]:SwitchCase[10415-10422]"
    }, {
      "left" : "return obj.booleanValue;",
      "right" : "return obj.booleanValue;",
      "info" : "ReturnStatement[10277-10301]:ReturnStatement[10433-10457]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[10310-10317]:SwitchCase[10466-10473]"
    }, {
      "left" : "return obj.byteValue;",
      "right" : "return obj.byteValue;",
      "info" : "ReturnStatement[10328-10349]:ReturnStatement[10484-10505]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[10358-10365]:SwitchCase[10514-10521]"
    }, {
      "left" : "return obj.shortValue;",
      "right" : "return obj.shortValue;",
      "info" : "ReturnStatement[10376-10398]:ReturnStatement[10532-10554]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[10407-10414]:SwitchCase[10563-10570]"
    }, {
      "left" : "return obj.intValue;",
      "right" : "return obj.intValue;",
      "info" : "ReturnStatement[10425-10445]:ReturnStatement[10581-10601]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[10454-10461]:SwitchCase[10610-10617]"
    }, {
      "left" : "return obj.longValue;",
      "right" : "return obj.longValue;",
      "info" : "ReturnStatement[10472-10493]:ReturnStatement[10628-10649]"
    }, {
      "left" : "case 5:",
      "right" : "case 5:",
      "info" : "SwitchCase[10502-10509]:SwitchCase[10658-10665]"
    }, {
      "left" : "return obj.floatValue;",
      "right" : "return obj.floatValue;",
      "info" : "ReturnStatement[10520-10542]:ReturnStatement[10676-10698]"
    }, {
      "left" : "case 6:",
      "right" : "case 6:",
      "info" : "SwitchCase[10551-10558]:SwitchCase[10707-10714]"
    }, {
      "left" : "return obj.doubleValue;",
      "right" : "return obj.doubleValue;",
      "info" : "ReturnStatement[10569-10592]:ReturnStatement[10725-10748]"
    }, {
      "left" : "case 7:",
      "right" : "case 7:",
      "info" : "SwitchCase[10601-10608]:SwitchCase[10757-10764]"
    }, {
      "left" : "return obj.stringValue;",
      "right" : "return obj.stringValue;",
      "info" : "ReturnStatement[10619-10642]:ReturnStatement[10775-10798]"
    }, {
      "left" : "case 8:",
      "right" : "case 8:",
      "info" : "SwitchCase[10651-10658]:SwitchCase[10807-10814]"
    }, {
      "left" : "return obj.decimalValue;",
      "right" : "return obj.decimalValue;",
      "info" : "ReturnStatement[10669-10693]:ReturnStatement[10825-10849]"
    }, {
      "left" : "case 9:",
      "right" : "case 9:",
      "info" : "SwitchCase[10702-10709]:SwitchCase[10858-10865]"
    }, {
      "left" : "return obj.dateValue;",
      "right" : "return obj.dateValue;",
      "info" : "ReturnStatement[10720-10741]:ReturnStatement[10876-10897]"
    }, {
      "left" : "case 10:",
      "right" : "case 10:",
      "info" : "SwitchCase[10750-10758]:SwitchCase[10906-10914]"
    }, {
      "left" : "return obj.timestampValue;",
      "right" : "return obj.timestampValue;",
      "info" : "ReturnStatement[10769-10795]:ReturnStatement[10925-10951]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No such field \" + fieldRef);",
      "right" : "throw new IllegalArgumentException(\"No such field \" + fieldRef);",
      "info" : "ThrowStatement[10810-10874]:ThrowStatement[10966-11030]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10886-10895]:MarkerAnnotation[11042-11051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10900-10906]:Modifier[11056-11062]"
    }, {
      "left" : "List<Object>",
      "right" : "List<Object>",
      "info" : "ParameterizedType[10907-10919]:ParameterizedType[11063-11075]"
    }, {
      "left" : "getStructFieldsDataAsList",
      "right" : "getStructFieldsDataAsList",
      "info" : "SimpleName[10920-10945]:SimpleName[11076-11101]"
    }, {
      "left" : "Object data",
      "right" : "Object data",
      "info" : "SingleVariableDeclaration[10946-10957]:SingleVariableDeclaration[11102-11113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10959-11455]:Block[11115-11611]"
    }, {
      "left" : "BigRow obj = (BigRow) data;",
      "right" : "BigRow obj = (BigRow) data;",
      "info" : "VariableDeclarationStatement[10967-10994]:VariableDeclarationStatement[11123-11150]"
    }, {
      "left" : "List<Object> result = new ArrayList<Object>(11);",
      "right" : "List<Object> result = new ArrayList<Object>(11);",
      "info" : "VariableDeclarationStatement[11001-11049]:VariableDeclarationStatement[11157-11205]"
    }, {
      "left" : "result.add(obj.booleanValue);",
      "right" : "result.add(obj.booleanValue);",
      "info" : "ExpressionStatement[11056-11085]:ExpressionStatement[11212-11241]"
    }, {
      "left" : "result.add(obj.byteValue);",
      "right" : "result.add(obj.byteValue);",
      "info" : "ExpressionStatement[11092-11118]:ExpressionStatement[11248-11274]"
    }, {
      "left" : "result.add(obj.shortValue);",
      "right" : "result.add(obj.shortValue);",
      "info" : "ExpressionStatement[11125-11152]:ExpressionStatement[11281-11308]"
    }, {
      "left" : "result.add(obj.intValue);",
      "right" : "result.add(obj.intValue);",
      "info" : "ExpressionStatement[11159-11184]:ExpressionStatement[11315-11340]"
    }, {
      "left" : "result.add(obj.longValue);",
      "right" : "result.add(obj.longValue);",
      "info" : "ExpressionStatement[11191-11217]:ExpressionStatement[11347-11373]"
    }, {
      "left" : "result.add(obj.floatValue);",
      "right" : "result.add(obj.floatValue);",
      "info" : "ExpressionStatement[11224-11251]:ExpressionStatement[11380-11407]"
    }, {
      "left" : "result.add(obj.doubleValue);",
      "right" : "result.add(obj.doubleValue);",
      "info" : "ExpressionStatement[11258-11286]:ExpressionStatement[11414-11442]"
    }, {
      "left" : "result.add(obj.stringValue);",
      "right" : "result.add(obj.stringValue);",
      "info" : "ExpressionStatement[11293-11321]:ExpressionStatement[11449-11477]"
    }, {
      "left" : "result.add(obj.decimalValue);",
      "right" : "result.add(obj.decimalValue);",
      "info" : "ExpressionStatement[11328-11357]:ExpressionStatement[11484-11513]"
    }, {
      "left" : "result.add(obj.dateValue);",
      "right" : "result.add(obj.dateValue);",
      "info" : "ExpressionStatement[11364-11390]:ExpressionStatement[11520-11546]"
    }, {
      "left" : "result.add(obj.timestampValue);",
      "right" : "result.add(obj.timestampValue);",
      "info" : "ExpressionStatement[11397-11428]:ExpressionStatement[11553-11584]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11435-11449]:ReturnStatement[11591-11605]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11461-11470]:MarkerAnnotation[11617-11626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11475-11481]:Modifier[11631-11637]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11482-11488]:SimpleType[11638-11644]"
    }, {
      "left" : "getTypeName",
      "right" : "getTypeName",
      "info" : "SimpleName[11489-11500]:SimpleName[11645-11656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11503-11744]:Block[11659-11900]"
    }, {
      "left" : "return \"struct<booleanValue:boolean,byteValue:tinyint,\" +\n          \"shortValue:smallint,intValue:int,longValue:bigint,\" +\n          \"floatValue:float,doubleValue:double,stringValue:string,\" +\n          \"decimalValue:decimal>\";",
      "right" : "return \"struct<booleanValue:boolean,byteValue:tinyint,\" +\n          \"shortValue:smallint,intValue:int,longValue:bigint,\" +\n          \"floatValue:float,doubleValue:double,stringValue:string,\" +\n          \"decimalValue:decimal>\";",
      "info" : "ReturnStatement[11511-11738]:ReturnStatement[11667-11894]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11750-11759]:MarkerAnnotation[11906-11915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11764-11770]:Modifier[11920-11926]"
    }, {
      "left" : "Category",
      "right" : "Category",
      "info" : "SimpleType[11771-11779]:SimpleType[11927-11935]"
    }, {
      "left" : "getCategory",
      "right" : "getCategory",
      "info" : "SimpleName[11780-11791]:SimpleName[11936-11947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11794-11831]:Block[11950-11987]"
    }, {
      "left" : "return Category.STRUCT;",
      "right" : "return Category.STRUCT;",
      "info" : "ReturnStatement[11802-11825]:ReturnStatement[11958-11981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11839-11845]:Modifier[11995-12001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11846-11852]:Modifier[12002-12008]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11853-11858]:TYPE_DECLARATION_KIND[12009-12014]"
    }, {
      "left" : "MyRow",
      "right" : "MyRow",
      "info" : "SimpleName[11859-11864]:SimpleName[12015-12020]"
    }, {
      "left" : "Writable",
      "right" : "Writable",
      "info" : "SimpleType[11876-11884]:SimpleType[12032-12040]"
    }, {
      "left" : "MyRow",
      "right" : "MyRow",
      "info" : "SimpleName[11913-11918]:SimpleName[12069-12074]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[11919-11924]:SingleVariableDeclaration[12075-12080]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[11926-11931]:SingleVariableDeclaration[12082-12087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11933-11976]:Block[12089-12132]"
    }, {
      "left" : "this.x = x;",
      "right" : "this.x = x;",
      "info" : "ExpressionStatement[11941-11952]:ExpressionStatement[12097-12108]"
    }, {
      "left" : "this.y = y;",
      "right" : "this.y = y;",
      "info" : "ExpressionStatement[11959-11970]:ExpressionStatement[12115-12126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11982-11991]:MarkerAnnotation[12138-12147]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11996-12002]:Modifier[12152-12158]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12003-12007]:PrimitiveType[12159-12163]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[12008-12013]:SimpleName[12164-12169]"
    }, {
      "left" : "DataOutput dataOutput",
      "right" : "DataOutput dataOutput",
      "info" : "SingleVariableDeclaration[12014-12035]:SingleVariableDeclaration[12170-12191]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12044-12055]:SimpleType[12200-12211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12056-12122]:Block[12212-12278]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no write\");",
      "right" : "throw new UnsupportedOperationException(\"no write\");",
      "info" : "ThrowStatement[12064-12116]:ThrowStatement[12220-12272]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12128-12137]:MarkerAnnotation[12284-12293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12142-12148]:Modifier[12298-12304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12149-12153]:PrimitiveType[12305-12309]"
    }, {
      "left" : "readFields",
      "right" : "readFields",
      "info" : "SimpleName[12154-12164]:SimpleName[12310-12320]"
    }, {
      "left" : "DataInput dataInput",
      "right" : "DataInput dataInput",
      "info" : "SingleVariableDeclaration[12165-12184]:SingleVariableDeclaration[12321-12340]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12193-12204]:SimpleType[12349-12360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12205-12269]:Block[12361-12425]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no read\");",
      "right" : "throw new UnsupportedOperationException(\"no read\");",
      "info" : "ThrowStatement[12212-12263]:ThrowStatement[12368-12419]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[12389-12396]:MarkerAnnotation[12545-12552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12399-12405]:Modifier[12555-12561]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12406-12410]:PrimitiveType[12562-12566]"
    }, {
      "left" : "openFileSystem",
      "right" : "openFileSystem",
      "info" : "SimpleName[12411-12425]:SimpleName[12567-12581]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12436-12445]:SimpleType[12592-12601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12446-12661]:Block[12602-12817]"
    }, {
      "left" : "conf = new JobConf();",
      "right" : "conf = new JobConf();",
      "info" : "ExpressionStatement[12452-12473]:ExpressionStatement[12608-12629]"
    }, {
      "left" : "fs = FileSystem.getLocal(conf);",
      "right" : "fs = FileSystem.getLocal(conf);",
      "info" : "ExpressionStatement[12478-12509]:ExpressionStatement[12634-12665]"
    }, {
      "left" : "testFilePath = new Path(workDir, \"TestInputOutputFormat.\" +\n        testCaseName.getMethodName() + \".orc\");",
      "right" : "testFilePath = new Path(workDir, \"TestInputOutputFormat.\" +\n        testCaseName.getMethodName() + \".orc\");",
      "info" : "ExpressionStatement[12514-12621]:ExpressionStatement[12670-12777]"
    }, {
      "left" : "fs.delete(testFilePath, false);",
      "right" : "fs.delete(testFilePath, false);",
      "info" : "ExpressionStatement[12626-12657]:ExpressionStatement[12782-12813]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12665-12670]:MarkerAnnotation[12821-12826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12673-12679]:Modifier[12829-12835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12680-12684]:PrimitiveType[12836-12840]"
    }, {
      "left" : "testOverlap",
      "right" : "testOverlap",
      "info" : "SimpleName[12685-12696]:SimpleName[12841-12852]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12706-12715]:SimpleType[12862-12871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12716-13288]:Block[12872-13444]"
    }, {
      "left" : "assertEquals(0, OrcInputFormat.SplitGenerator.getOverlap(100, 100,\n        200, 100));",
      "right" : "assertEquals(0, OrcInputFormat.SplitGenerator.getOverlap(100, 100,\n        200, 100));",
      "info" : "ExpressionStatement[12722-12808]:ExpressionStatement[12878-12964]"
    }, {
      "left" : "assertEquals(0, OrcInputFormat.SplitGenerator.getOverlap(0, 1000,\n        2000, 100));",
      "right" : "assertEquals(0, OrcInputFormat.SplitGenerator.getOverlap(0, 1000,\n        2000, 100));",
      "info" : "ExpressionStatement[12813-12899]:ExpressionStatement[12969-13055]"
    }, {
      "left" : "assertEquals(100, OrcInputFormat.SplitGenerator.getOverlap(1000, 1000,\n        1500, 100));",
      "right" : "assertEquals(100, OrcInputFormat.SplitGenerator.getOverlap(1000, 1000,\n        1500, 100));",
      "info" : "ExpressionStatement[12904-12995]:ExpressionStatement[13060-13151]"
    }, {
      "left" : "assertEquals(250, OrcInputFormat.SplitGenerator.getOverlap(1000, 250,\n        500, 2000));",
      "right" : "assertEquals(250, OrcInputFormat.SplitGenerator.getOverlap(1000, 250,\n        500, 2000));",
      "info" : "ExpressionStatement[13000-13090]:ExpressionStatement[13156-13246]"
    }, {
      "left" : "assertEquals(100, OrcInputFormat.SplitGenerator.getOverlap(1000, 1000,\n        1900, 1000));",
      "right" : "assertEquals(100, OrcInputFormat.SplitGenerator.getOverlap(1000, 1000,\n        1900, 1000));",
      "info" : "ExpressionStatement[13095-13187]:ExpressionStatement[13251-13343]"
    }, {
      "left" : "assertEquals(500, OrcInputFormat.SplitGenerator.getOverlap(2000, 1000,\n        2500, 2000));",
      "right" : "assertEquals(500, OrcInputFormat.SplitGenerator.getOverlap(2000, 1000,\n        2500, 2000));",
      "info" : "ExpressionStatement[13192-13284]:ExpressionStatement[13348-13440]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13292-13297]:MarkerAnnotation[13448-13453]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13300-13306]:Modifier[13456-13462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13307-13311]:PrimitiveType[13463-13467]"
    }, {
      "left" : "testGetInputPaths",
      "right" : "testGetInputPaths",
      "info" : "SimpleName[13312-13329]:SimpleName[13468-13485]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[13339-13348]:SimpleType[13495-13504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13349-13854]:Block[13505-14010]"
    }, {
      "left" : "conf.set(\"mapred.input.dir\", \"a,b,c\");",
      "right" : "conf.set(\"mapred.input.dir\", \"a,b,c\");",
      "info" : "ExpressionStatement[13355-13393]:ExpressionStatement[13511-13549]"
    }, {
      "left" : "assertArrayEquals(new Path[]{new Path(\"a\"), new Path(\"b\"), new Path(\"c\")},\n        OrcInputFormat.getInputPaths(conf));",
      "right" : "assertArrayEquals(new Path[]{new Path(\"a\"), new Path(\"b\"), new Path(\"c\")},\n        OrcInputFormat.getInputPaths(conf));",
      "info" : "ExpressionStatement[13398-13517]:ExpressionStatement[13554-13673]"
    }, {
      "left" : "conf.set(\"mapred.input.dir\", \"/a/b/c/d/e\");",
      "right" : "conf.set(\"mapred.input.dir\", \"/a/b/c/d/e\");",
      "info" : "ExpressionStatement[13522-13565]:ExpressionStatement[13678-13721]"
    }, {
      "left" : "assertArrayEquals(new Path[]{new Path(\"/a/b/c/d/e\")},\n        OrcInputFormat.getInputPaths(conf));",
      "right" : "assertArrayEquals(new Path[]{new Path(\"/a/b/c/d/e\")},\n        OrcInputFormat.getInputPaths(conf));",
      "info" : "ExpressionStatement[13570-13668]:ExpressionStatement[13726-13824]"
    }, {
      "left" : "conf.set(\"mapred.input.dir\", \"/a/b/c\\\\,d,/e/f\\\\,g/h\");",
      "right" : "conf.set(\"mapred.input.dir\", \"/a/b/c\\\\,d,/e/f\\\\,g/h\");",
      "info" : "ExpressionStatement[13673-13727]:ExpressionStatement[13829-13883]"
    }, {
      "left" : "assertArrayEquals(new Path[]{new Path(\"/a/b/c,d\"), new Path(\"/e/f,g/h\")},\n        OrcInputFormat.getInputPaths(conf));",
      "right" : "assertArrayEquals(new Path[]{new Path(\"/a/b/c,d\"), new Path(\"/e/f,g/h\")},\n        OrcInputFormat.getInputPaths(conf));",
      "info" : "ExpressionStatement[13732-13850]:ExpressionStatement[13888-14006]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13858-13863]:MarkerAnnotation[18611-18616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13866-13872]:Modifier[18619-18625]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13873-13877]:PrimitiveType[18626-18630]"
    }, {
      "left" : "testFileGenerator",
      "right" : "testFileGenerator",
      "info" : "SimpleName[13878-13895]:SimpleName[18631-18648]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[13905-13914]:SimpleType[18658-18667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13915-15309]:Block[18668-20062]"
    }, {
      "left" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "right" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "info" : "VariableDeclarationStatement[13921-13987]:VariableDeclarationStatement[18674-18740]"
    }, {
      "left" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/b/part-00\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/part-01\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/_part-02\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/.part-03\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/part-04\", 1000, new byte[0]));",
      "right" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/b/part-00\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/part-01\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/_part-02\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/.part-03\", 1000, new byte[0]),\n        new MockFile(\"mock:/a/b/part-04\", 1000, new byte[0]));",
      "info" : "VariableDeclarationStatement[13992-14349]:VariableDeclarationStatement[18745-19102]"
    }, {
      "left" : "OrcInputFormat.FileGenerator gen =\n      new OrcInputFormat.FileGenerator(context, fs,\n          new MockPath(fs, \"mock:/a/b\"));",
      "right" : "OrcInputFormat.FileGenerator gen =\n      new OrcInputFormat.FileGenerator(context, fs,\n          new MockPath(fs, \"mock:/a/b\"));",
      "info" : "VariableDeclarationStatement[14354-14482]:VariableDeclarationStatement[19107-19235]"
    }, {
      "left" : "SplitStrategy splitStrategy = gen.call();",
      "right" : "SplitStrategy splitStrategy = gen.call();",
      "info" : "VariableDeclarationStatement[14487-14528]:VariableDeclarationStatement[19240-19281]"
    }, {
      "left" : "assertEquals(true, splitStrategy instanceof OrcInputFormat.BISplitStrategy);",
      "right" : "assertEquals(true, splitStrategy instanceof OrcInputFormat.BISplitStrategy);",
      "info" : "ExpressionStatement[14533-14609]:ExpressionStatement[19286-19362]"
    }, {
      "left" : "conf.set(\"mapreduce.input.fileinputformat.split.maxsize\", \"500\");",
      "right" : "conf.set(\"mapreduce.input.fileinputformat.split.maxsize\", \"500\");",
      "info" : "ExpressionStatement[14615-14680]:ExpressionStatement[19368-19433]"
    }, {
      "left" : "context = new OrcInputFormat.Context(conf);",
      "right" : "context = new OrcInputFormat.Context(conf);",
      "info" : "ExpressionStatement[14685-14728]:ExpressionStatement[19438-19481]"
    }, {
      "left" : "fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/b/part-00\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/part-01\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/_part-02\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/.part-03\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/part-04\", 1000, new byte[1000]));",
      "right" : "fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/b/part-00\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/part-01\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/_part-02\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/.part-03\", 1000, new byte[1000]),\n        new MockFile(\"mock:/a/b/part-04\", 1000, new byte[1000]));",
      "info" : "ExpressionStatement[14733-15090]:ExpressionStatement[19486-19843]"
    }, {
      "left" : "gen = new OrcInputFormat.FileGenerator(context, fs,\n            new MockPath(fs, \"mock:/a/b\"));",
      "right" : "gen = new OrcInputFormat.FileGenerator(context, fs,\n            new MockPath(fs, \"mock:/a/b\"));",
      "info" : "ExpressionStatement[15095-15190]:ExpressionStatement[19848-19943]"
    }, {
      "left" : "splitStrategy = gen.call();",
      "right" : "splitStrategy = gen.call();",
      "info" : "ExpressionStatement[15195-15222]:ExpressionStatement[19948-19975]"
    }, {
      "left" : "assertEquals(true, splitStrategy instanceof OrcInputFormat.ETLSplitStrategy);",
      "right" : "assertEquals(true, splitStrategy instanceof OrcInputFormat.ETLSplitStrategy);",
      "info" : "ExpressionStatement[15227-15304]:ExpressionStatement[19980-20057]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15313-15319]:Modifier[20066-20072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15320-15326]:Modifier[20073-20079]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15327-15332]:TYPE_DECLARATION_KIND[20080-20085]"
    }, {
      "left" : "MockBlock",
      "right" : "MockBlock",
      "info" : "SimpleName[15333-15342]:SimpleName[20086-20095]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15408-15414]:Modifier[20161-20167]"
    }, {
      "left" : "MockBlock",
      "right" : "MockBlock",
      "info" : "SimpleName[15415-15424]:SimpleName[20168-20177]"
    }, {
      "left" : "String... hosts",
      "right" : "String... hosts",
      "info" : "SingleVariableDeclaration[15425-15440]:SingleVariableDeclaration[20178-20193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15442-15475]:Block[20195-20228]"
    }, {
      "left" : "this.hosts = hosts;",
      "right" : "this.hosts = hosts;",
      "info" : "ExpressionStatement[15450-15469]:ExpressionStatement[20203-20222]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15481-15490]:MarkerAnnotation[20234-20243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15495-15501]:Modifier[20248-20254]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15502-15508]:SimpleType[20255-20261]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[15509-15517]:SimpleName[20262-20270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15520-15951]:Block[20273-20704]"
    }, {
      "left" : "StringBuilder buffer = new StringBuilder();",
      "right" : "StringBuilder buffer = new StringBuilder();",
      "info" : "VariableDeclarationStatement[15528-15571]:VariableDeclarationStatement[20281-20324]"
    }, {
      "left" : "buffer.append(\"block{offset: \");",
      "right" : "buffer.append(\"block{offset: \");",
      "info" : "ExpressionStatement[15578-15610]:ExpressionStatement[20331-20363]"
    }, {
      "left" : "buffer.append(offset);",
      "right" : "buffer.append(offset);",
      "info" : "ExpressionStatement[15617-15639]:ExpressionStatement[20370-20392]"
    }, {
      "left" : "buffer.append(\", length: \");",
      "right" : "buffer.append(\", length: \");",
      "info" : "ExpressionStatement[15646-15674]:ExpressionStatement[20399-20427]"
    }, {
      "left" : "buffer.append(length);",
      "right" : "buffer.append(length);",
      "info" : "ExpressionStatement[15681-15703]:ExpressionStatement[20434-20456]"
    }, {
      "left" : "buffer.append(\", hosts: [
\");",
      "right" : "buffer.append(\", hosts: [
\");",
      "info" : "ExpressionStatement[15710-15738]:ExpressionStatement[20463-20491]"
    }, {
      "left" : "for(int i=0; i < hosts.length; i++)",
      "right" : "for(int i=0; i < hosts.length; i++)",
      "info" : "ForStatement[15745-15886]:ForStatement[20498-20639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15781-15886]:Block[20534-20639]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[15791-15845]:IfStatement[20544-20598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15803-15845]:Block[20556-20598]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[15815-15835]:ExpressionStatement[20568-20588]"
    }, {
      "left" : "buffer.append(hosts[i]);",
      "right" : "buffer.append(hosts[i]);",
      "info" : "ExpressionStatement[15854-15878]:ExpressionStatement[20607-20631]"
    }, {
      "left" : "buffer.append(\"]}\");",
      "right" : "buffer.append(\"]}\");",
      "info" : "ExpressionStatement[15893-15913]:ExpressionStatement[20646-20666]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[15920-15945]:ReturnStatement[20673-20698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15959-15965]:Modifier[20712-20718]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15966-15972]:Modifier[20719-20725]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15973-15978]:TYPE_DECLARATION_KIND[20726-20731]"
    }, {
      "left" : "MockFile",
      "right" : "MockFile",
      "info" : "SimpleName[15979-15987]:SimpleName[20732-20740]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16095-16101]:Modifier[20848-20854]"
    }, {
      "left" : "MockFile",
      "right" : "MockFile",
      "info" : "SimpleName[16102-16110]:SimpleName[20855-20863]"
    }, {
      "left" : "String path",
      "right" : "String path",
      "info" : "SingleVariableDeclaration[16111-16122]:SingleVariableDeclaration[20864-20875]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[16124-16137]:SingleVariableDeclaration[20877-20890]"
    }, {
      "left" : "byte[] content",
      "right" : "byte[] content",
      "info" : "SingleVariableDeclaration[16139-16153]:SingleVariableDeclaration[20892-20906]"
    }, {
      "left" : "MockBlock... blocks",
      "right" : "MockBlock... blocks",
      "info" : "SingleVariableDeclaration[16175-16194]:SingleVariableDeclaration[20928-20947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16196-16556]:Block[20949-21309]"
    }, {
      "left" : "this.path = new Path(path);",
      "right" : "this.path = new Path(path);",
      "info" : "ExpressionStatement[16204-16231]:ExpressionStatement[20957-20984]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[16238-16265]:ExpressionStatement[20991-21018]"
    }, {
      "left" : "this.blocks = blocks;",
      "right" : "this.blocks = blocks;",
      "info" : "ExpressionStatement[16272-16293]:ExpressionStatement[21025-21046]"
    }, {
      "left" : "this.content = content;",
      "right" : "this.content = content;",
      "info" : "ExpressionStatement[16300-16323]:ExpressionStatement[21053-21076]"
    }, {
      "left" : "this.length = content.length;",
      "right" : "this.length = content.length;",
      "info" : "ExpressionStatement[16330-16359]:ExpressionStatement[21083-21112]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[16366-16381]:VariableDeclarationStatement[21119-21134]"
    }, {
      "left" : "for(MockBlock block: blocks)",
      "right" : "for(MockBlock block: blocks)",
      "info" : "EnhancedForStatement[16388-16550]:EnhancedForStatement[21141-21303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16417-16550]:Block[21170-21303]"
    }, {
      "left" : "block.offset = offset;",
      "right" : "block.offset = offset;",
      "info" : "ExpressionStatement[16427-16449]:ExpressionStatement[21180-21202]"
    }, {
      "left" : "block.length = Math.min(length - offset, blockSize);",
      "right" : "block.length = Math.min(length - offset, blockSize);",
      "info" : "ExpressionStatement[16458-16510]:ExpressionStatement[21211-21263]"
    }, {
      "left" : "offset += block.length;",
      "right" : "offset += block.length;",
      "info" : "ExpressionStatement[16519-16542]:ExpressionStatement[21272-21295]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16562-16571]:MarkerAnnotation[21315-21324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16576-16582]:Modifier[21329-21335]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[16583-16589]:SimpleType[21336-21342]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[16590-16598]:SimpleName[21343-21351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16601-17110]:Block[21354-21863]"
    }, {
      "left" : "StringBuilder buffer = new StringBuilder();",
      "right" : "StringBuilder buffer = new StringBuilder();",
      "info" : "VariableDeclarationStatement[16609-16652]:VariableDeclarationStatement[21362-21405]"
    }, {
      "left" : "buffer.append(\"mockFile{path: \");",
      "right" : "buffer.append(\"mockFile{path: \");",
      "info" : "ExpressionStatement[16659-16692]:ExpressionStatement[21412-21445]"
    }, {
      "left" : "buffer.append(path.toString());",
      "right" : "buffer.append(path.toString());",
      "info" : "ExpressionStatement[16699-16730]:ExpressionStatement[21452-21483]"
    }, {
      "left" : "buffer.append(\", blkSize: \");",
      "right" : "buffer.append(\", blkSize: \");",
      "info" : "ExpressionStatement[16737-16766]:ExpressionStatement[21490-21519]"
    }, {
      "left" : "buffer.append(blockSize);",
      "right" : "buffer.append(blockSize);",
      "info" : "ExpressionStatement[16773-16798]:ExpressionStatement[21526-21551]"
    }, {
      "left" : "buffer.append(\", len: \");",
      "right" : "buffer.append(\", len: \");",
      "info" : "ExpressionStatement[16805-16830]:ExpressionStatement[21558-21583]"
    }, {
      "left" : "buffer.append(length);",
      "right" : "buffer.append(length);",
      "info" : "ExpressionStatement[16837-16859]:ExpressionStatement[21590-21612]"
    }, {
      "left" : "buffer.append(\", blocks: [
\");",
      "right" : "buffer.append(\", blocks: [
\");",
      "info" : "ExpressionStatement[16866-16895]:ExpressionStatement[21619-21648]"
    }, {
      "left" : "for(int i=0; i < blocks.length; i++)",
      "right" : "for(int i=0; i < blocks.length; i++)",
      "info" : "ForStatement[16902-17045]:ForStatement[21655-21798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16939-17045]:Block[21692-21798]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[16949-17003]:IfStatement[21702-21756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16961-17003]:Block[21714-21756]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[16973-16993]:ExpressionStatement[21726-21746]"
    }, {
      "left" : "buffer.append(blocks[i]);",
      "right" : "buffer.append(blocks[i]);",
      "info" : "ExpressionStatement[17012-17037]:ExpressionStatement[21765-21790]"
    }, {
      "left" : "buffer.append(\"]}\");",
      "right" : "buffer.append(\"]}\");",
      "info" : "ExpressionStatement[17052-17072]:ExpressionStatement[21805-21825]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[17079-17104]:ReturnStatement[21832-21857]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17118-17124]:Modifier[21871-21877]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[17125-17130]:TYPE_DECLARATION_KIND[21878-21883]"
    }, {
      "left" : "MockInputStream",
      "right" : "MockInputStream",
      "info" : "SimpleName[17131-17146]:SimpleName[21884-21899]"
    }, {
      "left" : "FSInputStream",
      "right" : "FSInputStream",
      "info" : "SimpleType[17155-17168]:SimpleType[21908-21921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17221-17227]:Modifier[21974-21980]"
    }, {
      "left" : "MockInputStream",
      "right" : "MockInputStream",
      "info" : "SimpleName[17228-17243]:SimpleName[21981-21996]"
    }, {
      "left" : "MockFile file",
      "right" : "MockFile file",
      "info" : "SingleVariableDeclaration[17244-17257]:SingleVariableDeclaration[21997-22010]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17266-17277]:SimpleType[22019-22030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17278-17309]:Block[22031-22062]"
    }, {
      "left" : "this.file = file;",
      "right" : "this.file = file;",
      "info" : "ExpressionStatement[17286-17303]:ExpressionStatement[22039-22056]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17315-17324]:MarkerAnnotation[22068-22077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17329-17335]:Modifier[22082-22088]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17336-17340]:PrimitiveType[22089-22093]"
    }, {
      "left" : "seek",
      "right" : "seek",
      "info" : "SimpleName[17341-17345]:SimpleName[22094-22098]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[17346-17357]:SingleVariableDeclaration[22099-22110]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17366-17377]:SimpleType[22119-22130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17378-17419]:Block[22131-22172]"
    }, {
      "left" : "this.offset = (int) offset;",
      "right" : "this.offset = (int) offset;",
      "info" : "ExpressionStatement[17386-17413]:ExpressionStatement[22139-22166]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17425-17434]:MarkerAnnotation[22178-22187]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17439-17445]:Modifier[22192-22198]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[17446-17450]:PrimitiveType[22199-22203]"
    }, {
      "left" : "getPos",
      "right" : "getPos",
      "info" : "SimpleName[17451-17457]:SimpleName[22204-22210]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17467-17478]:SimpleType[22220-22231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17479-17507]:Block[22232-22260]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[17487-17501]:ReturnStatement[22240-22254]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17513-17522]:MarkerAnnotation[22266-22275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17527-17533]:Modifier[22280-22286]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17534-17541]:PrimitiveType[22287-22294]"
    }, {
      "left" : "seekToNewSource",
      "right" : "seekToNewSource",
      "info" : "SimpleName[17542-17557]:SimpleName[22295-22310]"
    }, {
      "left" : "long l",
      "right" : "long l",
      "info" : "SingleVariableDeclaration[17558-17564]:SingleVariableDeclaration[22311-22317]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17573-17584]:SimpleType[22326-22337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17585-17612]:Block[22338-22365]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17593-17606]:ReturnStatement[22346-22359]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17618-17627]:MarkerAnnotation[22371-22380]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17632-17638]:Modifier[22385-22391]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17639-17642]:PrimitiveType[22392-22395]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17643-17647]:SimpleName[22396-22400]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17657-17668]:SimpleType[22410-22421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17669-17781]:Block[22422-22534]"
    }, {
      "left" : "if (offset < file.length)",
      "right" : "if (offset < file.length)",
      "info" : "IfStatement[17677-17758]:IfStatement[22430-22511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17703-17758]:Block[22456-22511]"
    }, {
      "left" : "return file.content[offset++] & 0xff;",
      "right" : "return file.content[offset++] & 0xff;",
      "info" : "ReturnStatement[17713-17750]:ReturnStatement[22466-22503]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[17765-17775]:ReturnStatement[22518-22528]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17789-17795]:Modifier[22542-22548]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17796-17802]:Modifier[22549-22555]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[17803-17808]:TYPE_DECLARATION_KIND[22556-22561]"
    }, {
      "left" : "MockPath",
      "right" : "MockPath",
      "info" : "SimpleName[17809-17817]:SimpleName[22562-22570]"
    }, {
      "left" : "Path",
      "right" : "Path",
      "info" : "SimpleType[17826-17830]:SimpleType[22579-22583]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17870-17876]:Modifier[22623-22629]"
    }, {
      "left" : "MockPath",
      "right" : "MockPath",
      "info" : "SimpleName[17877-17885]:SimpleName[22630-22638]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[17886-17899]:SingleVariableDeclaration[22639-22652]"
    }, {
      "left" : "String path",
      "right" : "String path",
      "info" : "SingleVariableDeclaration[17901-17912]:SingleVariableDeclaration[22654-22665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17914-17960]:Block[22667-22713]"
    }, {
      "left" : "super(path);",
      "right" : "super(path);",
      "info" : "SuperConstructorInvocation[17922-17934]:SuperConstructorInvocation[22675-22687]"
    }, {
      "left" : "this.fs = fs;",
      "right" : "this.fs = fs;",
      "info" : "ExpressionStatement[17941-17954]:ExpressionStatement[22694-22707]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17965-17974]:MarkerAnnotation[22718-22727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17979-17985]:Modifier[22732-22738]"
    }, {
      "left" : "FileSystem",
      "right" : "FileSystem",
      "info" : "SimpleType[17986-17996]:SimpleType[22739-22749]"
    }, {
      "left" : "getFileSystem",
      "right" : "getFileSystem",
      "info" : "SimpleName[17997-18010]:SimpleName[22750-22763]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[18011-18029]:SingleVariableDeclaration[22764-22782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18031-18055]:Block[22784-22808]"
    }, {
      "left" : "return fs;",
      "right" : "return fs;",
      "info" : "ReturnStatement[18039-18049]:ReturnStatement[22792-22802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18063-18069]:Modifier[22816-22822]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18070-18076]:Modifier[22823-22829]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18077-18082]:TYPE_DECLARATION_KIND[22830-22835]"
    }, {
      "left" : "MockOutputStream",
      "right" : "MockOutputStream",
      "info" : "SimpleName[18083-18099]:SimpleName[22836-22852]"
    }, {
      "left" : "FSDataOutputStream",
      "right" : "FSDataOutputStream",
      "info" : "SimpleType[18108-18126]:SimpleType[22861-22879]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18167-18173]:Modifier[22920-22926]"
    }, {
      "left" : "MockOutputStream",
      "right" : "MockOutputStream",
      "info" : "SimpleName[18174-18190]:SimpleName[22927-22943]"
    }, {
      "left" : "MockFile file",
      "right" : "MockFile file",
      "info" : "SingleVariableDeclaration[18191-18204]:SingleVariableDeclaration[22944-22957]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18213-18224]:SimpleType[22966-22977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18225-18299]:Block[22978-23052]"
    }, {
      "left" : "super(new DataOutputBuffer(), null);",
      "right" : "super(new DataOutputBuffer(), null);",
      "info" : "SuperConstructorInvocation[18233-18269]:SuperConstructorInvocation[22986-23022]"
    }, {
      "left" : "this.file = file;",
      "right" : "this.file = file;",
      "info" : "ExpressionStatement[18276-18293]:ExpressionStatement[23029-23046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18507-18513]:Modifier[23260-23266]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18514-18518]:PrimitiveType[23267-23271]"
    }, {
      "left" : "setBlocks",
      "right" : "setBlocks",
      "info" : "SimpleName[18519-18528]:SimpleName[23272-23281]"
    }, {
      "left" : "MockBlock... blocks",
      "right" : "MockBlock... blocks",
      "info" : "SingleVariableDeclaration[18529-18548]:SingleVariableDeclaration[23282-23301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18550-18852]:Block[23303-23605]"
    }, {
      "left" : "file.blocks = blocks;",
      "right" : "file.blocks = blocks;",
      "info" : "ExpressionStatement[18558-18579]:ExpressionStatement[23311-23332]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[18586-18601]:VariableDeclarationStatement[23339-23354]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[18608-18618]:VariableDeclarationStatement[23361-23371]"
    }, {
      "left" : "while (offset < file.length && i < blocks.length)",
      "right" : "while (offset < file.length && i < blocks.length)",
      "info" : "WhileStatement[18625-18846]:WhileStatement[23378-23599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18675-18846]:Block[23428-23599]"
    }, {
      "left" : "blocks[i].offset = offset;",
      "right" : "blocks[i].offset = offset;",
      "info" : "ExpressionStatement[18685-18711]:ExpressionStatement[23438-23464]"
    }, {
      "left" : "blocks[i].length = Math.min(file.length - offset, file.blockSize);",
      "right" : "blocks[i].length = Math.min(file.length - offset, file.blockSize);",
      "info" : "ExpressionStatement[18720-18786]:ExpressionStatement[23473-23539]"
    }, {
      "left" : "offset += blocks[i].length;",
      "right" : "offset += blocks[i].length;",
      "info" : "ExpressionStatement[18795-18822]:ExpressionStatement[23548-23575]"
    }, {
      "left" : "i += 1;",
      "right" : "i += 1;",
      "info" : "ExpressionStatement[18831-18838]:ExpressionStatement[23584-23591]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18858-18867]:MarkerAnnotation[23611-23620]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18872-18878]:Modifier[23625-23631]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18879-18883]:PrimitiveType[23632-23636]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[18884-18889]:SimpleName[23637-23642]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18899-18910]:SimpleType[23652-23663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18911-19160]:Block[23664-23913]"
    }, {
      "left" : "super.close();",
      "right" : "super.close();",
      "info" : "ExpressionStatement[18919-18933]:ExpressionStatement[23672-23686]"
    }, {
      "left" : "DataOutputBuffer buf = (DataOutputBuffer) getWrappedStream();",
      "right" : "DataOutputBuffer buf = (DataOutputBuffer) getWrappedStream();",
      "info" : "VariableDeclarationStatement[18940-19001]:VariableDeclarationStatement[23693-23754]"
    }, {
      "left" : "file.length = buf.getLength();",
      "right" : "file.length = buf.getLength();",
      "info" : "ExpressionStatement[19008-19038]:ExpressionStatement[23761-23791]"
    }, {
      "left" : "file.content = new byte[file.length];",
      "right" : "file.content = new byte[file.length];",
      "info" : "ExpressionStatement[19045-19082]:ExpressionStatement[23798-23835]"
    }, {
      "left" : "System.arraycopy(buf.getData(), 0, file.content, 0, file.length);",
      "right" : "System.arraycopy(buf.getData(), 0, file.content, 0, file.length);",
      "info" : "ExpressionStatement[19089-19154]:ExpressionStatement[23842-23907]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19166-19175]:MarkerAnnotation[23919-23928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19180-19186]:Modifier[23933-23939]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19187-19193]:SimpleType[23940-23946]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[19194-19202]:SimpleName[23947-23955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19205-19261]:Block[23958-24014]"
    }, {
      "left" : "return \"Out stream to \" + file.toString();",
      "right" : "return \"Out stream to \" + file.toString();",
      "info" : "ReturnStatement[19213-19255]:ReturnStatement[23966-24008]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19269-19275]:Modifier[24022-24028]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19276-19282]:Modifier[24029-24035]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[19283-19288]:TYPE_DECLARATION_KIND[24036-24041]"
    }, {
      "left" : "MockFileSystem",
      "right" : "MockFileSystem",
      "info" : "SimpleName[19289-19303]:SimpleName[24042-24056]"
    }, {
      "left" : "FileSystem",
      "right" : "FileSystem",
      "info" : "SimpleType[19312-19322]:SimpleType[24065-24075]"
    }, {
      "left" : "@SuppressWarnings(\"unused\")",
      "right" : "@SuppressWarnings(\"unused\")",
      "info" : "SingleMemberAnnotation[19427-19454]:SingleMemberAnnotation[24180-24207]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19459-19465]:Modifier[24212-24218]"
    }, {
      "left" : "MockFileSystem",
      "right" : "MockFileSystem",
      "info" : "SimpleName[19466-19480]:SimpleName[24219-24233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19483-19505]:Block[24236-24258]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19511-19520]:MarkerAnnotation[24264-24273]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19525-19531]:Modifier[24278-24284]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19532-19536]:PrimitiveType[24285-24289]"
    }, {
      "left" : "initialize",
      "right" : "initialize",
      "info" : "SimpleName[19537-19547]:SimpleName[24290-24300]"
    }, {
      "left" : "URI uri",
      "right" : "URI uri",
      "info" : "SingleVariableDeclaration[19548-19555]:SingleVariableDeclaration[24301-24308]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[19557-19575]:SingleVariableDeclaration[24310-24328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19577-19605]:Block[24330-24358]"
    }, {
      "left" : "setConf(conf);",
      "right" : "setConf(conf);",
      "info" : "ExpressionStatement[19585-19599]:ExpressionStatement[24338-24352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19611-19617]:Modifier[24364-24370]"
    }, {
      "left" : "MockFileSystem",
      "right" : "MockFileSystem",
      "info" : "SimpleName[19618-19632]:SimpleName[24371-24385]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[19633-19651]:SingleVariableDeclaration[24386-24404]"
    }, {
      "left" : "MockFile... files",
      "right" : "MockFile... files",
      "info" : "SingleVariableDeclaration[19653-19670]:SingleVariableDeclaration[24406-24423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19672-19747]:Block[24425-24500]"
    }, {
      "left" : "setConf(conf);",
      "right" : "setConf(conf);",
      "info" : "ExpressionStatement[19680-19694]:ExpressionStatement[24433-24447]"
    }, {
      "left" : "this.files.addAll(Arrays.asList(files));",
      "right" : "this.files.addAll(Arrays.asList(files));",
      "info" : "ExpressionStatement[19701-19741]:ExpressionStatement[24454-24494]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19753-19757]:PrimitiveType[24506-24510]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[19758-19763]:SimpleName[24511-24516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19766-19794]:Block[24519-24547]"
    }, {
      "left" : "files.clear();",
      "right" : "files.clear();",
      "info" : "ExpressionStatement[19774-19788]:ExpressionStatement[24527-24541]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19800-19809]:MarkerAnnotation[24553-24562]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19814-19820]:Modifier[24567-24573]"
    }, {
      "left" : "URI",
      "right" : "URI",
      "info" : "SimpleType[19821-19824]:SimpleType[24574-24577]"
    }, {
      "left" : "getUri",
      "right" : "getUri",
      "info" : "SimpleName[19825-19831]:SimpleName[24578-24584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19834-19995]:Block[24587-24748]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19842-19989]:TryStatement[24595-24742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19846-19891]:Block[24599-24644]"
    }, {
      "left" : "return new URI(\"mock:///\");",
      "right" : "return new URI(\"mock:///\");",
      "info" : "ReturnStatement[19856-19883]:ReturnStatement[24609-24636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19923-19989]:Block[24676-24742]"
    }, {
      "left" : "throw new IllegalArgumentException(\"huh?\", err);",
      "right" : "throw new IllegalArgumentException(\"huh?\", err);",
      "info" : "ThrowStatement[19933-19981]:ThrowStatement[24686-24734]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20001-20010]:MarkerAnnotation[24754-24763]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20015-20021]:Modifier[24768-24774]"
    }, {
      "left" : "FSDataInputStream",
      "right" : "FSDataInputStream",
      "info" : "SimpleType[20022-20039]:SimpleType[24775-24792]"
    }, {
      "left" : "open",
      "right" : "open",
      "info" : "SimpleName[20040-20044]:SimpleName[24793-24797]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[20045-20054]:SingleVariableDeclaration[24798-24807]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[20056-20061]:SingleVariableDeclaration[24809-24814]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20070-20081]:SimpleType[24823-24834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20082-20302]:Block[24835-25055]"
    }, {
      "left" : "for(MockFile file: files)",
      "right" : "for(MockFile file: files)",
      "info" : "EnhancedForStatement[20090-20240]:EnhancedForStatement[24843-24993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20116-20240]:Block[24869-24993]"
    }, {
      "left" : "if (file.path.equals(path))",
      "right" : "if (file.path.equals(path))",
      "info" : "IfStatement[20126-20232]:IfStatement[24879-24985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20154-20232]:Block[24907-24985]"
    }, {
      "left" : "return new FSDataInputStream(new MockInputStream(file));",
      "right" : "return new FSDataInputStream(new MockInputStream(file));",
      "info" : "ReturnStatement[20166-20222]:ReturnStatement[24919-24975]"
    }, {
      "left" : "throw new IOException(\"File not found: \" + path);",
      "right" : "throw new IOException(\"File not found: \" + path);",
      "info" : "ThrowStatement[20247-20296]:ThrowStatement[25000-25049]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20308-20317]:MarkerAnnotation[25061-25070]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20322-20328]:Modifier[25075-25081]"
    }, {
      "left" : "FSDataOutputStream",
      "right" : "FSDataOutputStream",
      "info" : "SimpleType[20329-20347]:SimpleType[25082-25100]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[20348-20354]:SimpleName[25101-25107]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[20355-20364]:SingleVariableDeclaration[25108-25117]"
    }, {
      "left" : "FsPermission fsPermission",
      "right" : "FsPermission fsPermission",
      "info" : "SingleVariableDeclaration[20366-20391]:SingleVariableDeclaration[25119-25144]"
    }, {
      "left" : "boolean overwrite",
      "right" : "boolean overwrite",
      "info" : "SingleVariableDeclaration[20430-20447]:SingleVariableDeclaration[25183-25200]"
    }, {
      "left" : "int bufferSize",
      "right" : "int bufferSize",
      "info" : "SingleVariableDeclaration[20449-20463]:SingleVariableDeclaration[25202-25216]"
    }, {
      "left" : "short replication",
      "right" : "short replication",
      "info" : "SingleVariableDeclaration[20502-20519]:SingleVariableDeclaration[25255-25272]"
    }, {
      "left" : "long blockSize",
      "right" : "long blockSize",
      "info" : "SingleVariableDeclaration[20521-20535]:SingleVariableDeclaration[25274-25288]"
    }, {
      "left" : "Progressable progressable",
      "right" : "Progressable progressable",
      "info" : "SingleVariableDeclaration[20574-20599]:SingleVariableDeclaration[25327-25352]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20646-20657]:SimpleType[25399-25410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20658-21020]:Block[25411-25773]"
    }, {
      "left" : "MockFile file = null;",
      "right" : "MockFile file = null;",
      "info" : "VariableDeclarationStatement[20666-20687]:VariableDeclarationStatement[25419-25440]"
    }, {
      "left" : "for(MockFile currentFile: files)",
      "right" : "for(MockFile currentFile: files)",
      "info" : "EnhancedForStatement[20694-20838]:EnhancedForStatement[25447-25591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20727-20838]:Block[25480-25591]"
    }, {
      "left" : "if (currentFile.path.equals(path))",
      "right" : "if (currentFile.path.equals(path))",
      "info" : "IfStatement[20737-20830]:IfStatement[25490-25583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20772-20830]:Block[25525-25583]"
    }, {
      "left" : "file = currentFile;",
      "right" : "file = currentFile;",
      "info" : "ExpressionStatement[20784-20803]:ExpressionStatement[25537-25556]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20814-20820]:BreakStatement[25567-25573]"
    }, {
      "left" : "if (file == null)",
      "right" : "if (file == null)",
      "info" : "IfStatement[20845-20973]:IfStatement[25598-25726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20863-20973]:Block[25616-25726]"
    }, {
      "left" : "file = new MockFile(path.toString(), (int) blockSize, new byte[0]);",
      "right" : "file = new MockFile(path.toString(), (int) blockSize, new byte[0]);",
      "info" : "ExpressionStatement[20873-20940]:ExpressionStatement[25626-25693]"
    }, {
      "left" : "files.add(file);",
      "right" : "files.add(file);",
      "info" : "ExpressionStatement[20949-20965]:ExpressionStatement[25702-25718]"
    }, {
      "left" : "return new MockOutputStream(file);",
      "right" : "return new MockOutputStream(file);",
      "info" : "ReturnStatement[20980-21014]:ReturnStatement[25733-25767]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21026-21035]:MarkerAnnotation[25779-25788]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21040-21046]:Modifier[25793-25799]"
    }, {
      "left" : "FSDataOutputStream",
      "right" : "FSDataOutputStream",
      "info" : "SimpleType[21047-21065]:SimpleType[25800-25818]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[21066-21072]:SimpleName[25819-25825]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[21073-21082]:SingleVariableDeclaration[25826-25835]"
    }, {
      "left" : "int bufferSize",
      "right" : "int bufferSize",
      "info" : "SingleVariableDeclaration[21084-21098]:SingleVariableDeclaration[25837-25851]"
    }, {
      "left" : "Progressable progressable",
      "right" : "Progressable progressable",
      "info" : "SingleVariableDeclaration[21137-21162]:SingleVariableDeclaration[25890-25915]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21209-21220]:SimpleType[25962-25973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21221-21347]:Block[25974-26100]"
    }, {
      "left" : "return create(path, FsPermission.getDefault(), true, bufferSize,\n          (short) 3, 256 * 1024, progressable);",
      "right" : "return create(path, FsPermission.getDefault(), true, bufferSize,\n          (short) 3, 256 * 1024, progressable);",
      "info" : "ReturnStatement[21229-21341]:ReturnStatement[25982-26094]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21353-21362]:MarkerAnnotation[26106-26115]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21367-21373]:Modifier[26120-26126]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21374-21381]:PrimitiveType[26127-26134]"
    }, {
      "left" : "rename",
      "right" : "rename",
      "info" : "SimpleName[21382-21388]:SimpleName[26135-26141]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[21389-21398]:SingleVariableDeclaration[26142-26151]"
    }, {
      "left" : "Path path2",
      "right" : "Path path2",
      "info" : "SingleVariableDeclaration[21400-21410]:SingleVariableDeclaration[26153-26163]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21419-21430]:SimpleType[26172-26183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21431-21458]:Block[26184-26211]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21439-21452]:ReturnStatement[26192-26205]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21464-21473]:MarkerAnnotation[26217-26226]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21478-21484]:Modifier[26231-26237]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21485-21492]:PrimitiveType[26238-26245]"
    }, {
      "left" : "delete",
      "right" : "delete",
      "info" : "SimpleName[21493-21499]:SimpleName[26246-26252]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[21500-21509]:SingleVariableDeclaration[26253-26262]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21518-21529]:SimpleType[26271-26282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21530-21557]:Block[26283-26310]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21538-21551]:ReturnStatement[26291-26304]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21563-21572]:MarkerAnnotation[26316-26325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21577-21583]:Modifier[26330-26336]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21584-21591]:PrimitiveType[26337-26344]"
    }, {
      "left" : "delete",
      "right" : "delete",
      "info" : "SimpleName[21592-21598]:SimpleName[26345-26351]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[21599-21608]:SingleVariableDeclaration[26352-26361]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[21610-21619]:SingleVariableDeclaration[26363-26372]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21628-21639]:SimpleType[26381-26392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21640-21667]:Block[26393-26420]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21648-21661]:ReturnStatement[26401-26414]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21673-21682]:MarkerAnnotation[26426-26435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21687-21693]:Modifier[26440-26446]"
    }, {
      "left" : "FileStatus[]",
      "right" : "FileStatus[]",
      "info" : "ArrayType[21694-21706]:ArrayType[26447-26459]"
    }, {
      "left" : "listStatus",
      "right" : "listStatus",
      "info" : "SimpleName[21707-21717]:SimpleName[26460-26470]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[21718-21727]:SingleVariableDeclaration[26471-26480]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21736-21747]:SimpleType[26489-26500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21748-22729]:Block[26501-27482]"
    }, {
      "left" : "path = path.makeQualified(this);",
      "right" : "path = path.makeQualified(this);",
      "info" : "ExpressionStatement[21756-21788]:ExpressionStatement[26509-26541]"
    }, {
      "left" : "List<FileStatus> result = new ArrayList<FileStatus>();",
      "right" : "List<FileStatus> result = new ArrayList<FileStatus>();",
      "info" : "VariableDeclarationStatement[21795-21849]:VariableDeclarationStatement[26548-26602]"
    }, {
      "left" : "String pathname = path.toString();",
      "right" : "String pathname = path.toString();",
      "info" : "VariableDeclarationStatement[21856-21890]:VariableDeclarationStatement[26609-26643]"
    }, {
      "left" : "String pathnameAsDir = pathname + \"/\";",
      "right" : "String pathnameAsDir = pathname + \"/\";",
      "info" : "VariableDeclarationStatement[21897-21935]:VariableDeclarationStatement[26650-26688]"
    }, {
      "left" : "Set<String> dirs = new TreeSet<String>();",
      "right" : "Set<String> dirs = new TreeSet<String>();",
      "info" : "VariableDeclarationStatement[21942-21983]:VariableDeclarationStatement[26695-26736]"
    }, {
      "left" : "for(MockFile file: files)",
      "right" : "for(MockFile file: files)",
      "info" : "EnhancedForStatement[21990-22507]:EnhancedForStatement[26743-27260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22016-22507]:Block[26769-27260]"
    }, {
      "left" : "String filename = file.path.toString();",
      "right" : "String filename = file.path.toString();",
      "info" : "VariableDeclarationStatement[22026-22065]:VariableDeclarationStatement[26779-26818]"
    }, {
      "left" : "if (pathname.equals(filename))",
      "right" : "if (pathname.equals(filename))",
      "info" : "IfStatement[22074-22499]:IfStatement[26827-27252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22105-22171]:Block[26858-26924]"
    }, {
      "left" : "return new FileStatus[]{createStatus(file)};",
      "right" : "return new FileStatus[]{createStatus(file)};",
      "info" : "ReturnStatement[22117-22161]:ReturnStatement[26870-26914]"
    }, {
      "left" : "if (filename.startsWith(pathnameAsDir))",
      "right" : "if (filename.startsWith(pathnameAsDir))",
      "info" : "IfStatement[22177-22499]:IfStatement[26930-27252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22217-22499]:Block[26970-27252]"
    }, {
      "left" : "String tail = filename.substring(pathnameAsDir.length());",
      "right" : "String tail = filename.substring(pathnameAsDir.length());",
      "info" : "VariableDeclarationStatement[22229-22286]:VariableDeclarationStatement[26982-27039]"
    }, {
      "left" : "int nextSlash = tail.indexOf('/');",
      "right" : "int nextSlash = tail.indexOf('/');",
      "info" : "VariableDeclarationStatement[22297-22331]:VariableDeclarationStatement[27050-27084]"
    }, {
      "left" : "if (nextSlash > 0)",
      "right" : "if (nextSlash > 0)",
      "info" : "IfStatement[22342-22489]:IfStatement[27095-27242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22361-22426]:Block[27114-27179]"
    }, {
      "left" : "dirs.add(tail.substring(0, nextSlash));",
      "right" : "dirs.add(tail.substring(0, nextSlash));",
      "info" : "ExpressionStatement[22375-22414]:ExpressionStatement[27128-27167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22432-22489]:Block[27185-27242]"
    }, {
      "left" : "result.add(createStatus(file));",
      "right" : "result.add(createStatus(file));",
      "info" : "ExpressionStatement[22446-22477]:ExpressionStatement[27199-27230]"
    }, {
      "left" : "for(String dir: dirs)",
      "right" : "for(String dir: dirs)",
      "info" : "EnhancedForStatement[22554-22663]:EnhancedForStatement[27307-27416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22576-22663]:Block[27329-27416]"
    }, {
      "left" : "result.add(createDirectory(new MockPath(this, pathnameAsDir + dir)));",
      "right" : "result.add(createDirectory(new MockPath(this, pathnameAsDir + dir)));",
      "info" : "ExpressionStatement[22586-22655]:ExpressionStatement[27339-27408]"
    }, {
      "left" : "return result.toArray(new FileStatus[result.size()]);",
      "right" : "return result.toArray(new FileStatus[result.size()]);",
      "info" : "ReturnStatement[22670-22723]:ReturnStatement[27423-27476]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22735-22744]:MarkerAnnotation[27488-27497]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22749-22755]:Modifier[27502-27508]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22756-22760]:PrimitiveType[27509-27513]"
    }, {
      "left" : "setWorkingDirectory",
      "right" : "setWorkingDirectory",
      "info" : "SimpleName[22761-22780]:SimpleName[27514-27533]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[22781-22790]:SingleVariableDeclaration[27534-27543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22792-22824]:Block[27545-27577]"
    }, {
      "left" : "workingDir = path;",
      "right" : "workingDir = path;",
      "info" : "ExpressionStatement[22800-22818]:ExpressionStatement[27553-27571]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22830-22839]:MarkerAnnotation[27583-27592]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22844-22850]:Modifier[27597-27603]"
    }, {
      "left" : "Path",
      "right" : "Path",
      "info" : "SimpleType[22851-22855]:SimpleType[27604-27608]"
    }, {
      "left" : "getWorkingDirectory",
      "right" : "getWorkingDirectory",
      "info" : "SimpleName[22856-22875]:SimpleName[27609-27628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22878-22910]:Block[27631-27663]"
    }, {
      "left" : "return workingDir;",
      "right" : "return workingDir;",
      "info" : "ReturnStatement[22886-22904]:ReturnStatement[27639-27657]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22916-22925]:MarkerAnnotation[27669-27678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22930-22936]:Modifier[27683-27689]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22937-22944]:PrimitiveType[27690-27697]"
    }, {
      "left" : "mkdirs",
      "right" : "mkdirs",
      "info" : "SimpleName[22945-22951]:SimpleName[27698-27704]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[22952-22961]:SingleVariableDeclaration[27705-27714]"
    }, {
      "left" : "FsPermission fsPermission",
      "right" : "FsPermission fsPermission",
      "info" : "SingleVariableDeclaration[22963-22988]:SingleVariableDeclaration[27716-27741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22990-23017]:Block[27743-27770]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22998-23011]:ReturnStatement[27751-27764]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23023-23030]:Modifier[27776-27783]"
    }, {
      "left" : "FileStatus",
      "right" : "FileStatus",
      "info" : "SimpleType[23031-23041]:SimpleType[27784-27794]"
    }, {
      "left" : "createStatus",
      "right" : "createStatus",
      "info" : "SimpleName[23042-23054]:SimpleName[27795-27807]"
    }, {
      "left" : "MockFile file",
      "right" : "MockFile file",
      "info" : "SingleVariableDeclaration[23055-23068]:SingleVariableDeclaration[27808-27821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23070-23242]:Block[27823-27995]"
    }, {
      "left" : "return new FileStatus(file.length, false, 1, file.blockSize, 0, 0,\n          FsPermission.createImmutable((short) 644), \"owen\", \"group\",\n          file.path);",
      "right" : "return new FileStatus(file.length, false, 1, file.blockSize, 0, 0,\n          FsPermission.createImmutable((short) 644), \"owen\", \"group\",\n          file.path);",
      "info" : "ReturnStatement[23078-23236]:ReturnStatement[27831-27989]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23248-23255]:Modifier[28001-28008]"
    }, {
      "left" : "FileStatus",
      "right" : "FileStatus",
      "info" : "SimpleType[23256-23266]:SimpleType[28009-28019]"
    }, {
      "left" : "createDirectory",
      "right" : "createDirectory",
      "info" : "SimpleName[23267-23282]:SimpleName[28020-28035]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[23283-23291]:SingleVariableDeclaration[28036-28044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23293-23425]:Block[28046-28178]"
    }, {
      "left" : "return new FileStatus(0, true, 0, 0, 0, 0,\n          FsPermission.createImmutable((short) 755), \"owen\", \"group\", dir);",
      "right" : "return new FileStatus(0, true, 0, 0, 0, 0,\n          FsPermission.createImmutable((short) 755), \"owen\", \"group\", dir);",
      "info" : "ReturnStatement[23301-23419]:ReturnStatement[28054-28172]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23431-23440]:MarkerAnnotation[28184-28193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23445-23451]:Modifier[28198-28204]"
    }, {
      "left" : "FileStatus",
      "right" : "FileStatus",
      "info" : "SimpleType[23452-23462]:SimpleType[28205-28215]"
    }, {
      "left" : "getFileStatus",
      "right" : "getFileStatus",
      "info" : "SimpleName[23463-23476]:SimpleName[28216-28229]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[23477-23486]:SingleVariableDeclaration[28230-28239]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23495-23506]:SimpleType[28248-28259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23507-23916]:Block[28260-28669]"
    }, {
      "left" : "path = path.makeQualified(this);",
      "right" : "path = path.makeQualified(this);",
      "info" : "ExpressionStatement[23515-23547]:ExpressionStatement[28268-28300]"
    }, {
      "left" : "String pathnameAsDir = path.toString() + \"/\";",
      "right" : "String pathnameAsDir = path.toString() + \"/\";",
      "info" : "VariableDeclarationStatement[23554-23599]:VariableDeclarationStatement[28307-28352]"
    }, {
      "left" : "for(MockFile file: files)",
      "right" : "for(MockFile file: files)",
      "info" : "EnhancedForStatement[23606-23835]:EnhancedForStatement[28359-28588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23632-23835]:Block[28385-28588]"
    }, {
      "left" : "if (file.path.equals(path))",
      "right" : "if (file.path.equals(path))",
      "info" : "IfStatement[23642-23827]:IfStatement[28395-28580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23670-23718]:Block[28423-28471]"
    }, {
      "left" : "return createStatus(file);",
      "right" : "return createStatus(file);",
      "info" : "ReturnStatement[23682-23708]:ReturnStatement[28435-28461]"
    }, {
      "left" : "if (file.path.toString().startsWith(pathnameAsDir))",
      "right" : "if (file.path.toString().startsWith(pathnameAsDir))",
      "info" : "IfStatement[23724-23827]:IfStatement[28477-28580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23776-23827]:Block[28529-28580]"
    }, {
      "left" : "return createDirectory(path);",
      "right" : "return createDirectory(path);",
      "info" : "ReturnStatement[23788-23817]:ReturnStatement[28541-28570]"
    }, {
      "left" : "throw new FileNotFoundException(\"File \" + path + \" does not exist\");",
      "right" : "throw new FileNotFoundException(\"File \" + path + \" does not exist\");",
      "info" : "ThrowStatement[23842-23910]:ThrowStatement[28595-28663]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23922-23931]:MarkerAnnotation[28675-28684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23936-23942]:Modifier[28689-28695]"
    }, {
      "left" : "BlockLocation[]",
      "right" : "BlockLocation[]",
      "info" : "ArrayType[23943-23958]:ArrayType[28696-28711]"
    }, {
      "left" : "getFileBlockLocations",
      "right" : "getFileBlockLocations",
      "info" : "SimpleName[23959-23980]:SimpleName[28712-28733]"
    }, {
      "left" : "FileStatus stat",
      "right" : "FileStatus stat",
      "info" : "SingleVariableDeclaration[23981-23996]:SingleVariableDeclaration[28734-28749]"
    }, {
      "left" : "long start",
      "right" : "long start",
      "info" : "SingleVariableDeclaration[24047-24057]:SingleVariableDeclaration[28800-28810]"
    }, {
      "left" : "long len",
      "right" : "long len",
      "info" : "SingleVariableDeclaration[24059-24067]:SingleVariableDeclaration[28812-28820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24069-24859]:Block[28822-29612]"
    }, {
      "left" : "List<BlockLocation> result = new ArrayList<BlockLocation>();",
      "right" : "List<BlockLocation> result = new ArrayList<BlockLocation>();",
      "info" : "VariableDeclarationStatement[24077-24137]:VariableDeclarationStatement[28830-28890]"
    }, {
      "left" : "for(MockFile file: files)",
      "right" : "for(MockFile file: files)",
      "info" : "EnhancedForStatement[24144-24818]:EnhancedForStatement[28897-29571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24170-24818]:Block[28923-29571]"
    }, {
      "left" : "if (file.path.equals(stat.getPath()))",
      "right" : "if (file.path.equals(stat.getPath()))",
      "info" : "IfStatement[24180-24810]:IfStatement[28933-29563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24218-24810]:Block[28971-29563]"
    }, {
      "left" : "for(MockBlock block: file.blocks)",
      "right" : "for(MockBlock block: file.blocks)",
      "info" : "EnhancedForStatement[24230-24733]:EnhancedForStatement[28983-29486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24264-24733]:Block[29017-29486]"
    }, {
      "left" : "if (OrcInputFormat.SplitGenerator.getOverlap(block.offset,\n                block.length, start, len) > 0)",
      "right" : "if (OrcInputFormat.SplitGenerator.getOverlap(block.offset,\n                block.length, start, len) > 0)",
      "info" : "IfStatement[24278-24721]:IfStatement[29031-29474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24384-24721]:Block[29137-29474]"
    }, {
      "left" : "String[] topology = new String[block.hosts.length];",
      "right" : "String[] topology = new String[block.hosts.length];",
      "info" : "VariableDeclarationStatement[24400-24451]:VariableDeclarationStatement[29153-29204]"
    }, {
      "left" : "for(int i=0; i < topology.length; ++i)",
      "right" : "for(int i=0; i < topology.length; ++i)",
      "info" : "ForStatement[24466-24580]:ForStatement[29219-29333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24505-24580]:Block[29258-29333]"
    }, {
      "left" : "topology[i] = \"/rack/ \" + block.hosts[i];",
      "right" : "topology[i] = \"/rack/ \" + block.hosts[i];",
      "info" : "ExpressionStatement[24523-24564]:ExpressionStatement[29276-29317]"
    }, {
      "left" : "result.add(new BlockLocation(block.hosts, block.hosts,\n                  topology, block.offset, block.length));",
      "right" : "result.add(new BlockLocation(block.hosts, block.hosts,\n                  topology, block.offset, block.length));",
      "info" : "ExpressionStatement[24595-24707]:ExpressionStatement[29348-29460]"
    }, {
      "left" : "return result.toArray(new BlockLocation[result.size()]);",
      "right" : "return result.toArray(new BlockLocation[result.size()]);",
      "info" : "ReturnStatement[24744-24800]:ReturnStatement[29497-29553]"
    }, {
      "left" : "return new BlockLocation[0];",
      "right" : "return new BlockLocation[0];",
      "info" : "ReturnStatement[24825-24853]:ReturnStatement[29578-29606]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24865-24874]:MarkerAnnotation[29618-29627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24879-24885]:Modifier[29632-29638]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24886-24892]:SimpleType[29639-29645]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[24893-24901]:SimpleName[29646-29654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24904-25211]:Block[29657-29964]"
    }, {
      "left" : "StringBuilder buffer = new StringBuilder();",
      "right" : "StringBuilder buffer = new StringBuilder();",
      "info" : "VariableDeclarationStatement[24912-24955]:VariableDeclarationStatement[29665-29708]"
    }, {
      "left" : "buffer.append(\"mockFs{files:[\");",
      "right" : "buffer.append(\"mockFs{files:[\");",
      "info" : "ExpressionStatement[24962-24994]:ExpressionStatement[29715-29747]"
    }, {
      "left" : "for(int i=0; i < files.size(); ++i)",
      "right" : "for(int i=0; i < files.size(); ++i)",
      "info" : "ForStatement[25001-25146]:ForStatement[29754-29899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25037-25146]:Block[29790-29899]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[25047-25101]:IfStatement[29800-29854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25059-25101]:Block[29812-29854]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[25071-25091]:ExpressionStatement[29824-29844]"
    }, {
      "left" : "buffer.append(files.get(i));",
      "right" : "buffer.append(files.get(i));",
      "info" : "ExpressionStatement[25110-25138]:ExpressionStatement[29863-29891]"
    }, {
      "left" : "buffer.append(\"]}\");",
      "right" : "buffer.append(\"]}\");",
      "info" : "ExpressionStatement[25153-25173]:ExpressionStatement[29906-29926]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[25180-25205]:ReturnStatement[29933-29958]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25219-25225]:Modifier[29972-29978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25226-25230]:PrimitiveType[29979-29983]"
    }, {
      "left" : "fill",
      "right" : "fill",
      "info" : "SimpleName[25231-25235]:SimpleName[29984-29988]"
    }, {
      "left" : "DataOutputBuffer out",
      "right" : "DataOutputBuffer out",
      "info" : "SingleVariableDeclaration[25236-25256]:SingleVariableDeclaration[29989-30009]"
    }, {
      "left" : "long length",
      "right" : "long length",
      "info" : "SingleVariableDeclaration[25258-25269]:SingleVariableDeclaration[30011-30022]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25278-25289]:SimpleType[30031-30042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25290-25357]:Block[30043-30110]"
    }, {
      "left" : "for(int i=0; i < length; ++i)",
      "right" : "for(int i=0; i < length; ++i)",
      "info" : "ForStatement[25296-25353]:ForStatement[30049-30106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25326-25353]:Block[30079-30106]"
    }, {
      "left" : "out.write(0);",
      "right" : "out.write(0);",
      "info" : "ExpressionStatement[25334-25347]:ExpressionStatement[30087-30100]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25598-25604]:Modifier[30351-30357]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[25605-25611]:ArrayType[30358-30364]"
    }, {
      "left" : "createMockOrcFile",
      "right" : "createMockOrcFile",
      "info" : "SimpleName[25612-25629]:SimpleName[30365-30382]"
    }, {
      "left" : "long... stripeLengths",
      "right" : "long... stripeLengths",
      "info" : "SingleVariableDeclaration[25630-25651]:SingleVariableDeclaration[30383-30404]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25660-25671]:SimpleType[30413-30424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25672-27200]:Block[30425-31953]"
    }, {
      "left" : "OrcProto.Footer.Builder footer = OrcProto.Footer.newBuilder();",
      "right" : "OrcProto.Footer.Builder footer = OrcProto.Footer.newBuilder();",
      "info" : "VariableDeclarationStatement[25678-25740]:VariableDeclarationStatement[30431-30493]"
    }, {
      "left" : "final long headerLen = 3;",
      "right" : "final long headerLen = 3;",
      "info" : "VariableDeclarationStatement[25745-25770]:VariableDeclarationStatement[30498-30523]"
    }, {
      "left" : "long offset = headerLen;",
      "right" : "long offset = headerLen;",
      "info" : "VariableDeclarationStatement[25775-25799]:VariableDeclarationStatement[30528-30552]"
    }, {
      "left" : "DataOutputBuffer buffer = new DataOutputBuffer();",
      "right" : "DataOutputBuffer buffer = new DataOutputBuffer();",
      "info" : "VariableDeclarationStatement[25804-25853]:VariableDeclarationStatement[30557-30606]"
    }, {
      "left" : "for(long stripeLength: stripeLengths)",
      "right" : "for(long stripeLength: stripeLengths)",
      "info" : "EnhancedForStatement[25858-26243]:EnhancedForStatement[30611-30996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25896-26243]:Block[30649-30996]"
    }, {
      "left" : "footer.addStripes(OrcProto.StripeInformation.newBuilder()\n                          .setOffset(offset)\n                          .setIndexLength(0)\n                          .setDataLength(stripeLength-10)\n                          .setFooterLength(10)\n                          .setNumberOfRows(1000));",
      "right" : "footer.addStripes(OrcProto.StripeInformation.newBuilder()\n                          .setOffset(offset)\n                          .setIndexLength(0)\n                          .setDataLength(stripeLength-10)\n                          .setFooterLength(10)\n                          .setNumberOfRows(1000));",
      "info" : "ExpressionStatement[25904-26207]:ExpressionStatement[30657-30960]"
    }, {
      "left" : "offset += stripeLength;",
      "right" : "offset += stripeLength;",
      "info" : "ExpressionStatement[26214-26237]:ExpressionStatement[30967-30990]"
    }, {
      "left" : "fill(buffer, offset);",
      "right" : "fill(buffer, offset);",
      "info" : "ExpressionStatement[26248-26269]:ExpressionStatement[31001-31022]"
    }, {
      "left" : "footer.addTypes(OrcProto.Type.newBuilder()\n                     .setKind(OrcProto.Type.Kind.STRUCT)\n                     .addFieldNames(\"col1\")\n                     .addSubtypes(1));",
      "right" : "footer.addTypes(OrcProto.Type.newBuilder()\n                     .setKind(OrcProto.Type.Kind.STRUCT)\n                     .addFieldNames(\"col1\")\n                     .addSubtypes(1));",
      "info" : "ExpressionStatement[26274-26456]:ExpressionStatement[31027-31209]"
    }, {
      "left" : "footer.addTypes(OrcProto.Type.newBuilder()\n        .setKind(OrcProto.Type.Kind.STRING));",
      "right" : "footer.addTypes(OrcProto.Type.newBuilder()\n        .setKind(OrcProto.Type.Kind.STRING));",
      "info" : "ExpressionStatement[26461-26549]:ExpressionStatement[31214-31302]"
    }, {
      "left" : "footer.setNumberOfRows(1000 * stripeLengths.length)\n          .setHeaderLength(headerLen)\n          .setContentLength(offset - headerLen);",
      "right" : "footer.setNumberOfRows(1000 * stripeLengths.length)\n          .setHeaderLength(headerLen)\n          .setContentLength(offset - headerLen);",
      "info" : "ExpressionStatement[26554-26692]:ExpressionStatement[31307-31445]"
    }, {
      "left" : "footer.build().writeTo(buffer);",
      "right" : "footer.build().writeTo(buffer);",
      "info" : "ExpressionStatement[26697-26728]:ExpressionStatement[31450-31481]"
    }, {
      "left" : "int footerEnd = buffer.getLength();",
      "right" : "int footerEnd = buffer.getLength();",
      "info" : "VariableDeclarationStatement[26733-26768]:VariableDeclarationStatement[31486-31521]"
    }, {
      "left" : "OrcProto.PostScript ps =\n      OrcProto.PostScript.newBuilder()\n        .setCompression(OrcProto.CompressionKind.NONE)\n        .setFooterLength(footerEnd - offset)\n        .setMagic(\"ORC\")\n        .build();",
      "right" : "OrcProto.PostScript ps =\n      OrcProto.PostScript.newBuilder()\n        .setCompression(OrcProto.CompressionKind.NONE)\n        .setFooterLength(footerEnd - offset)\n        .setMagic(\"ORC\")\n        .build();",
      "info" : "VariableDeclarationStatement[26773-26979]:VariableDeclarationStatement[31526-31732]"
    }, {
      "left" : "ps.writeTo(buffer);",
      "right" : "ps.writeTo(buffer);",
      "info" : "ExpressionStatement[26984-27003]:ExpressionStatement[31737-31756]"
    }, {
      "left" : "buffer.write(buffer.getLength() - footerEnd);",
      "right" : "buffer.write(buffer.getLength() - footerEnd);",
      "info" : "ExpressionStatement[27008-27053]:ExpressionStatement[31761-31806]"
    }, {
      "left" : "byte[] result = new byte[buffer.getLength()];",
      "right" : "byte[] result = new byte[buffer.getLength()];",
      "info" : "VariableDeclarationStatement[27058-27103]:VariableDeclarationStatement[31811-31856]"
    }, {
      "left" : "System.arraycopy(buffer.getData(), 0, result, 0, buffer.getLength());",
      "right" : "System.arraycopy(buffer.getData(), 0, result, 0, buffer.getLength());",
      "info" : "ExpressionStatement[27108-27177]:ExpressionStatement[31861-31930]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27182-27196]:ReturnStatement[31935-31949]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[27204-27209]:MarkerAnnotation[31957-31962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27212-27218]:Modifier[31965-31971]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27219-27223]:PrimitiveType[31972-31976]"
    }, {
      "left" : "testAddSplit",
      "right" : "testAddSplit",
      "info" : "SimpleName[27224-27236]:SimpleName[31977-31989]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[27246-27255]:SimpleType[31999-32008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27256-28878]:Block[32009-33631]"
    }, {
      "left" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/file\", 500,\n          createMockOrcFile(197, 300, 600, 200, 200, 100, 100, 100, 100, 100),\n          new MockBlock(\"host1-1\", \"host1-2\", \"host1-3\"),\n          new MockBlock(\"host2-1\", \"host0\", \"host2-3\"),\n          new MockBlock(\"host0\", \"host3-2\", \"host3-3\"),\n          new MockBlock(\"host4-1\", \"host4-2\", \"host4-3\"),\n          new MockBlock(\"host5-1\", \"host5-2\", \"host5-3\")));",
      "right" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/file\", 500,\n          createMockOrcFile(197, 300, 600, 200, 200, 100, 100, 100, 100, 100),\n          new MockBlock(\"host1-1\", \"host1-2\", \"host1-3\"),\n          new MockBlock(\"host2-1\", \"host0\", \"host2-3\"),\n          new MockBlock(\"host0\", \"host3-2\", \"host3-3\"),\n          new MockBlock(\"host4-1\", \"host4-2\", \"host4-3\"),\n          new MockBlock(\"host5-1\", \"host5-2\", \"host5-3\")));",
      "info" : "VariableDeclarationStatement[27323-27776]:VariableDeclarationStatement[32076-32529]"
    }, {
      "left" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "right" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "info" : "VariableDeclarationStatement[27781-27847]:VariableDeclarationStatement[32534-32600]"
    }, {
      "left" : "OrcInputFormat.SplitGenerator splitter =\n        new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n            fs.getFileStatus(new Path(\"/a/file\")), null, true,\n            new ArrayList<Long>(), true, null, null));",
      "right" : "OrcInputFormat.SplitGenerator splitter =\n        new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n            fs.getFileStatus(new Path(\"/a/file\")), null, true,\n            new ArrayList<Long>(), true, null, null));",
      "info" : "VariableDeclarationStatement[27852-28094]:VariableDeclarationStatement[32605-32847]"
    }, {
      "left" : "OrcSplit result = splitter.createSplit(0, 200, null);",
      "right" : "OrcSplit result = splitter.createSplit(0, 200, null);",
      "info" : "VariableDeclarationStatement[28099-28152]:VariableDeclarationStatement[32852-32905]"
    }, {
      "left" : "assertEquals(0, result.getStart());",
      "right" : "assertEquals(0, result.getStart());",
      "info" : "ExpressionStatement[28157-28192]:ExpressionStatement[32910-32945]"
    }, {
      "left" : "assertEquals(200, result.getLength());",
      "right" : "assertEquals(200, result.getLength());",
      "info" : "ExpressionStatement[28197-28235]:ExpressionStatement[32950-32988]"
    }, {
      "left" : "assertEquals(\"mock:/a/file\", result.getPath().toString());",
      "right" : "assertEquals(\"mock:/a/file\", result.getPath().toString());",
      "info" : "ExpressionStatement[28240-28298]:ExpressionStatement[32993-33051]"
    }, {
      "left" : "String[] locs = result.getLocations();",
      "right" : "String[] locs = result.getLocations();",
      "info" : "VariableDeclarationStatement[28303-28341]:VariableDeclarationStatement[33056-33094]"
    }, {
      "left" : "assertEquals(3, locs.length);",
      "right" : "assertEquals(3, locs.length);",
      "info" : "ExpressionStatement[28346-28375]:ExpressionStatement[33099-33128]"
    }, {
      "left" : "assertEquals(\"host1-1\", locs[0]);",
      "right" : "assertEquals(\"host1-1\", locs[0]);",
      "info" : "ExpressionStatement[28380-28413]:ExpressionStatement[33133-33166]"
    }, {
      "left" : "assertEquals(\"host1-2\", locs[1]);",
      "right" : "assertEquals(\"host1-2\", locs[1]);",
      "info" : "ExpressionStatement[28418-28451]:ExpressionStatement[33171-33204]"
    }, {
      "left" : "assertEquals(\"host1-3\", locs[2]);",
      "right" : "assertEquals(\"host1-3\", locs[2]);",
      "info" : "ExpressionStatement[28456-28489]:ExpressionStatement[33209-33242]"
    }, {
      "left" : "result = splitter.createSplit(500, 600, null);",
      "right" : "result = splitter.createSplit(500, 600, null);",
      "info" : "ExpressionStatement[28494-28540]:ExpressionStatement[33247-33293]"
    }, {
      "left" : "locs = result.getLocations();",
      "right" : "locs = result.getLocations();",
      "info" : "ExpressionStatement[28545-28574]:ExpressionStatement[33298-33327]"
    }, {
      "left" : "assertEquals(3, locs.length);",
      "right" : "assertEquals(3, locs.length);",
      "info" : "ExpressionStatement[28579-28608]:ExpressionStatement[33332-33361]"
    }, {
      "left" : "assertEquals(\"host2-1\", locs[0]);",
      "right" : "assertEquals(\"host2-1\", locs[0]);",
      "info" : "ExpressionStatement[28613-28646]:ExpressionStatement[33366-33399]"
    }, {
      "left" : "assertEquals(\"host0\", locs[1]);",
      "right" : "assertEquals(\"host0\", locs[1]);",
      "info" : "ExpressionStatement[28651-28682]:ExpressionStatement[33404-33435]"
    }, {
      "left" : "assertEquals(\"host2-3\", locs[2]);",
      "right" : "assertEquals(\"host2-3\", locs[2]);",
      "info" : "ExpressionStatement[28687-28720]:ExpressionStatement[33440-33473]"
    }, {
      "left" : "result = splitter.createSplit(0, 2500, null);",
      "right" : "result = splitter.createSplit(0, 2500, null);",
      "info" : "ExpressionStatement[28725-28770]:ExpressionStatement[33478-33523]"
    }, {
      "left" : "locs = result.getLocations();",
      "right" : "locs = result.getLocations();",
      "info" : "ExpressionStatement[28775-28804]:ExpressionStatement[33528-33557]"
    }, {
      "left" : "assertEquals(1, locs.length);",
      "right" : "assertEquals(1, locs.length);",
      "info" : "ExpressionStatement[28809-28838]:ExpressionStatement[33562-33591]"
    }, {
      "left" : "assertEquals(\"host0\", locs[0]);",
      "right" : "assertEquals(\"host0\", locs[0]);",
      "info" : "ExpressionStatement[28843-28874]:ExpressionStatement[33596-33627]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[28882-28887]:MarkerAnnotation[33635-33640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28890-28896]:Modifier[33643-33649]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28897-28901]:PrimitiveType[33650-33654]"
    }, {
      "left" : "testSplitGenerator",
      "right" : "testSplitGenerator",
      "info" : "SimpleName[28902-28920]:SimpleName[33655-33673]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[28930-28939]:SimpleType[33683-33692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28940-31165]:Block[33693-35918]"
    }, {
      "left" : "long[] stripeSizes =\n        new long[]{197, 300, 600, 200, 200, 100, 100, 100, 100, 100};",
      "right" : "long[] stripeSizes =\n        new long[]{197, 300, 600, 200, 200, 100, 100, 100, 100, 100};",
      "info" : "VariableDeclarationStatement[29007-29097]:VariableDeclarationStatement[33760-33850]"
    }, {
      "left" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/file\", 500,\n          createMockOrcFile(stripeSizes),\n          new MockBlock(\"host1-1\", \"host1-2\", \"host1-3\"),\n          new MockBlock(\"host2-1\", \"host0\", \"host2-3\"),\n          new MockBlock(\"host0\", \"host3-2\", \"host3-3\"),\n          new MockBlock(\"host4-1\", \"host4-2\", \"host4-3\"),\n          new MockBlock(\"host5-1\", \"host5-2\", \"host5-3\")));",
      "right" : "MockFileSystem fs = new MockFileSystem(conf,\n        new MockFile(\"mock:/a/file\", 500,\n          createMockOrcFile(stripeSizes),\n          new MockBlock(\"host1-1\", \"host1-2\", \"host1-3\"),\n          new MockBlock(\"host2-1\", \"host0\", \"host2-3\"),\n          new MockBlock(\"host0\", \"host3-2\", \"host3-3\"),\n          new MockBlock(\"host4-1\", \"host4-2\", \"host4-3\"),\n          new MockBlock(\"host5-1\", \"host5-2\", \"host5-3\")));",
      "info" : "VariableDeclarationStatement[29102-29518]:VariableDeclarationStatement[33855-34271]"
    }, {
      "left" : "conf.setInt(OrcInputFormat.MAX_SPLIT_SIZE, 300);",
      "right" : "conf.setInt(OrcInputFormat.MAX_SPLIT_SIZE, 300);",
      "info" : "ExpressionStatement[29523-29571]:ExpressionStatement[34276-34324]"
    }, {
      "left" : "conf.setInt(OrcInputFormat.MIN_SPLIT_SIZE, 200);",
      "right" : "conf.setInt(OrcInputFormat.MIN_SPLIT_SIZE, 200);",
      "info" : "ExpressionStatement[29576-29624]:ExpressionStatement[34329-34377]"
    }, {
      "left" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "right" : "OrcInputFormat.Context context = new OrcInputFormat.Context(conf);",
      "info" : "VariableDeclarationStatement[29629-29695]:VariableDeclarationStatement[34382-34448]"
    }, {
      "left" : "OrcInputFormat.SplitGenerator splitter =\n        new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n            fs.getFileStatus(new Path(\"/a/file\")), null, true,\n            new ArrayList<Long>(), true, null, null));",
      "right" : "OrcInputFormat.SplitGenerator splitter =\n        new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n            fs.getFileStatus(new Path(\"/a/file\")), null, true,\n            new ArrayList<Long>(), true, null, null));",
      "info" : "VariableDeclarationStatement[29700-29942]:VariableDeclarationStatement[34453-34695]"
    }, {
      "left" : "List<OrcSplit> results = splitter.call();",
      "right" : "List<OrcSplit> results = splitter.call();",
      "info" : "VariableDeclarationStatement[29947-29988]:VariableDeclarationStatement[34700-34741]"
    }, {
      "left" : "OrcSplit result = results.get(0);",
      "right" : "OrcSplit result = results.get(0);",
      "info" : "VariableDeclarationStatement[29993-30026]:VariableDeclarationStatement[34746-34779]"
    }, {
      "left" : "assertEquals(3, result.getStart());",
      "right" : "assertEquals(3, result.getStart());",
      "info" : "ExpressionStatement[30031-30066]:ExpressionStatement[34784-34819]"
    }, {
      "left" : "assertEquals(497, result.getLength());",
      "right" : "assertEquals(497, result.getLength());",
      "info" : "ExpressionStatement[30071-30109]:ExpressionStatement[34824-34862]"
    }, {
      "left" : "result = results.get(1);",
      "right" : "result = results.get(1);",
      "info" : "ExpressionStatement[30114-30138]:ExpressionStatement[34867-34891]"
    }, {
      "left" : "assertEquals(500, result.getStart());",
      "right" : "assertEquals(500, result.getStart());",
      "info" : "ExpressionStatement[30143-30180]:ExpressionStatement[34896-34933]"
    }, {
      "left" : "assertEquals(600, result.getLength());",
      "right" : "assertEquals(600, result.getLength());",
      "info" : "ExpressionStatement[30185-30223]:ExpressionStatement[34938-34976]"
    }, {
      "left" : "result = results.get(2);",
      "right" : "result = results.get(2);",
      "info" : "ExpressionStatement[30228-30252]:ExpressionStatement[34981-35005]"
    }, {
      "left" : "assertEquals(1100, result.getStart());",
      "right" : "assertEquals(1100, result.getStart());",
      "info" : "ExpressionStatement[30257-30295]:ExpressionStatement[35010-35048]"
    }, {
      "left" : "assertEquals(400, result.getLength());",
      "right" : "assertEquals(400, result.getLength());",
      "info" : "ExpressionStatement[30300-30338]:ExpressionStatement[35053-35091]"
    }, {
      "left" : "result = results.get(3);",
      "right" : "result = results.get(3);",
      "info" : "ExpressionStatement[30343-30367]:ExpressionStatement[35096-35120]"
    }, {
      "left" : "assertEquals(1500, result.getStart());",
      "right" : "assertEquals(1500, result.getStart());",
      "info" : "ExpressionStatement[30372-30410]:ExpressionStatement[35125-35163]"
    }, {
      "left" : "assertEquals(300, result.getLength());",
      "right" : "assertEquals(300, result.getLength());",
      "info" : "ExpressionStatement[30415-30453]:ExpressionStatement[35168-35206]"
    }, {
      "left" : "result = results.get(4);",
      "right" : "result = results.get(4);",
      "info" : "ExpressionStatement[30458-30482]:ExpressionStatement[35211-35235]"
    }, {
      "left" : "assertEquals(1800, result.getStart());",
      "right" : "assertEquals(1800, result.getStart());",
      "info" : "ExpressionStatement[30487-30525]:ExpressionStatement[35240-35278]"
    }, {
      "left" : "assertEquals(200, result.getLength());",
      "right" : "assertEquals(200, result.getLength());",
      "info" : "ExpressionStatement[30530-30568]:ExpressionStatement[35283-35321]"
    }, {
      "left" : "conf.setInt(OrcInputFormat.MIN_SPLIT_SIZE, 0);",
      "right" : "conf.setInt(OrcInputFormat.MIN_SPLIT_SIZE, 0);",
      "info" : "ExpressionStatement[30624-30670]:ExpressionStatement[35377-35423]"
    }, {
      "left" : "conf.setInt(OrcInputFormat.MAX_SPLIT_SIZE, 0);",
      "right" : "conf.setInt(OrcInputFormat.MAX_SPLIT_SIZE, 0);",
      "info" : "ExpressionStatement[30675-30721]:ExpressionStatement[35428-35474]"
    }, {
      "left" : "context = new OrcInputFormat.Context(conf);",
      "right" : "context = new OrcInputFormat.Context(conf);",
      "info" : "ExpressionStatement[30726-30769]:ExpressionStatement[35479-35522]"
    }, {
      "left" : "splitter = new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n      fs.getFileStatus(new Path(\"/a/file\")), null, true, new ArrayList<Long>(),\n        true, null, null));",
      "right" : "splitter = new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context, fs,\n      fs.getFileStatus(new Path(\"/a/file\")), null, true, new ArrayList<Long>(),\n        true, null, null));",
      "info" : "ExpressionStatement[30774-30968]:ExpressionStatement[35527-35721]"
    }, {
      "left" : "results = splitter.call();",
      "right" : "results = splitter.call();",
      "info" : "ExpressionStatement[30973-30999]:ExpressionStatement[35726-35752]"
    }, {
      "left" : "for(int i=0; i < stripeSizes.length; ++i)",
      "right" : "for(int i=0; i < stripeSizes.length; ++i)",
      "info" : "ForStatement[31004-31161]:ForStatement[35757-35914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31046-31161]:Block[35799-35914]"
    }, {
      "left" : "assertEquals(\"checking stripe \" + i + \" size\",\n          stripeSizes[i], results.get(i).getLength());",
      "right" : "assertEquals(\"checking stripe \" + i + \" size\",\n          stripeSizes[i], results.get(i).getLength());",
      "info" : "ExpressionStatement[31054-31155]:ExpressionStatement[35807-35908]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[31169-31174]:MarkerAnnotation[35922-35927]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "right" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "info" : "SingleMemberAnnotation[31177-31219]:SingleMemberAnnotation[35930-35972]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31222-31228]:Modifier[35975-35981]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31229-31233]:PrimitiveType[35982-35986]"
    }, {
      "left" : "testInOutFormat",
      "right" : "testInOutFormat",
      "info" : "SimpleName[31234-31249]:SimpleName[35987-36002]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[31259-31268]:SimpleType[36012-36021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31269-35319]:Block[36022-40072]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[31275-31316]:VariableDeclarationStatement[36028-36069]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[31321-31353]:VariableDeclarationStatement[36074-36106]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[31358-31582]:SynchronizedStatement[36111-36335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31391-31582]:Block[36144-36335]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[31399-31576]:ExpressionStatement[36152-36329]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[31587-31616]:VariableDeclarationStatement[36340-36369]"
    }, {
      "left" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[31621-31678]:VariableDeclarationStatement[36374-36431]"
    }, {
      "left" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, MyRow.class, true,\n            properties, Reporter.NULL);",
      "right" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, MyRow.class, true,\n            properties, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[31683-31869]:VariableDeclarationStatement[36436-36622]"
    }, {
      "left" : "writer.write(serde.serialize(new MyRow(1,2), inspector));",
      "right" : "writer.write(serde.serialize(new MyRow(1,2), inspector));",
      "info" : "ExpressionStatement[31874-31931]:ExpressionStatement[36627-36684]"
    }, {
      "left" : "writer.write(serde.serialize(new MyRow(2,2), inspector));",
      "right" : "writer.write(serde.serialize(new MyRow(2,2), inspector));",
      "info" : "ExpressionStatement[31936-31993]:ExpressionStatement[36689-36746]"
    }, {
      "left" : "writer.write(serde.serialize(new MyRow(3,2), inspector));",
      "right" : "writer.write(serde.serialize(new MyRow(3,2), inspector));",
      "info" : "ExpressionStatement[31998-32055]:ExpressionStatement[36751-36808]"
    }, {
      "left" : "writer.close(true);",
      "right" : "writer.close(true);",
      "info" : "ExpressionStatement[32060-32079]:ExpressionStatement[36813-36832]"
    }, {
      "left" : "serde = new OrcSerde();",
      "right" : "serde = new OrcSerde();",
      "info" : "ExpressionStatement[32084-32107]:ExpressionStatement[36837-36860]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"x,y\");",
      "right" : "properties.setProperty(\"columns\", \"x,y\");",
      "info" : "ExpressionStatement[32112-32153]:ExpressionStatement[36865-36906]"
    }, {
      "left" : "properties.setProperty(\"columns.types\", \"int:int\");",
      "right" : "properties.setProperty(\"columns.types\", \"int:int\");",
      "info" : "ExpressionStatement[32158-32209]:ExpressionStatement[36911-36962]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[32214-32272]:ExpressionStatement[36967-37025]"
    }, {
      "left" : "assertEquals(OrcSerde.OrcSerdeRow.class, serde.getSerializedClass());",
      "right" : "assertEquals(OrcSerde.OrcSerdeRow.class, serde.getSerializedClass());",
      "info" : "ExpressionStatement[32277-32346]:ExpressionStatement[37030-37099]"
    }, {
      "left" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "right" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "info" : "ExpressionStatement[32351-32414]:ExpressionStatement[37104-37167]"
    }, {
      "left" : "assertEquals(\"struct<x:int,y:int>\", inspector.getTypeName());",
      "right" : "assertEquals(\"struct<x:int,y:int>\", inspector.getTypeName());",
      "info" : "ExpressionStatement[32419-32480]:ExpressionStatement[37172-37233]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[32485-32528]:VariableDeclarationStatement[37238-37281]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[32533-32594]:ExpressionStatement[37286-37347]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[32599-32643]:VariableDeclarationStatement[37352-37396]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[32648-32679]:ExpressionStatement[37401-37432]"
    }, {
      "left" : "ArrayList<FileStatus> fileList = new ArrayList<FileStatus>();",
      "right" : "ArrayList<FileStatus> fileList = new ArrayList<FileStatus>();",
      "info" : "VariableDeclarationStatement[32722-32783]:VariableDeclarationStatement[37475-37536]"
    }, {
      "left" : "assertEquals(false,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "right" : "assertEquals(false,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "info" : "ExpressionStatement[32788-32887]:ExpressionStatement[37541-37640]"
    }, {
      "left" : "fileList.add(fs.getFileStatus(testFilePath));",
      "right" : "fileList.add(fs.getFileStatus(testFilePath));",
      "info" : "ExpressionStatement[32892-32937]:ExpressionStatement[37645-37690]"
    }, {
      "left" : "assertEquals(true,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "right" : "assertEquals(true,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "info" : "ExpressionStatement[32942-33040]:ExpressionStatement[37695-37793]"
    }, {
      "left" : "fileList.add(fs.getFileStatus(workDir));",
      "right" : "fileList.add(fs.getFileStatus(workDir));",
      "info" : "ExpressionStatement[33045-33085]:ExpressionStatement[37798-37838]"
    }, {
      "left" : "assertEquals(false,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "right" : "assertEquals(false,\n        ((InputFormatChecker) in).validateInput(fs, new HiveConf(), fileList));",
      "info" : "ExpressionStatement[33090-33189]:ExpressionStatement[37843-37942]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[33223-33329]:VariableDeclarationStatement[37976-38082]"
    }, {
      "left" : "Object key = reader.createKey();",
      "right" : "Object key = reader.createKey();",
      "info" : "VariableDeclarationStatement[33334-33366]:VariableDeclarationStatement[38087-38119]"
    }, {
      "left" : "Writable value = (Writable) reader.createValue();",
      "right" : "Writable value = (Writable) reader.createValue();",
      "info" : "VariableDeclarationStatement[33371-33420]:VariableDeclarationStatement[38124-38173]"
    }, {
      "left" : "int rowNum = 0;",
      "right" : "int rowNum = 0;",
      "info" : "VariableDeclarationStatement[33425-33440]:VariableDeclarationStatement[38178-38193]"
    }, {
      "left" : "List<? extends StructField> fields =inspector.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> fields =inspector.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[33445-33515]:VariableDeclarationStatement[38198-38268]"
    }, {
      "left" : "IntObjectInspector intInspector =\n        (IntObjectInspector) fields.get(0).getFieldObjectInspector();",
      "right" : "IntObjectInspector intInspector =\n        (IntObjectInspector) fields.get(0).getFieldObjectInspector();",
      "info" : "VariableDeclarationStatement[33520-33623]:VariableDeclarationStatement[38273-38376]"
    }, {
      "left" : "assertEquals(0.33, reader.getProgress(), 0.01);",
      "right" : "assertEquals(0.33, reader.getProgress(), 0.01);",
      "info" : "ExpressionStatement[33628-33675]:ExpressionStatement[38381-38428]"
    }, {
      "left" : "while (reader.next(key, value))",
      "right" : "while (reader.next(key, value))",
      "info" : "WhileStatement[33680-33972]:WhileStatement[38433-38725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33712-33972]:Block[38465-38725]"
    }, {
      "left" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(0))));",
      "right" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(0))));",
      "info" : "ExpressionStatement[33720-33843]:ExpressionStatement[38473-38596]"
    }, {
      "left" : "assertEquals(2, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(1))));",
      "right" : "assertEquals(2, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(1))));",
      "info" : "ExpressionStatement[33850-33966]:ExpressionStatement[38603-38719]"
    }, {
      "left" : "assertEquals(3, rowNum);",
      "right" : "assertEquals(3, rowNum);",
      "info" : "ExpressionStatement[33977-34001]:ExpressionStatement[38730-38754]"
    }, {
      "left" : "assertEquals(1.0, reader.getProgress(), 0.00001);",
      "right" : "assertEquals(1.0, reader.getProgress(), 0.00001);",
      "info" : "ExpressionStatement[34006-34055]:ExpressionStatement[38759-38808]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[34060-34075]:ExpressionStatement[38813-38828]"
    }, {
      "left" : "ColumnProjectionUtils.appendReadColumns(conf, Collections.singletonList(0));",
      "right" : "ColumnProjectionUtils.appendReadColumns(conf, Collections.singletonList(0));",
      "info" : "ExpressionStatement[34115-34191]:ExpressionStatement[38868-38944]"
    }, {
      "left" : "reader = in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "reader = in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "ExpressionStatement[34196-34256]:ExpressionStatement[38949-39009]"
    }, {
      "left" : "key = reader.createKey();",
      "right" : "key = reader.createKey();",
      "info" : "ExpressionStatement[34261-34286]:ExpressionStatement[39014-39039]"
    }, {
      "left" : "value = (Writable) reader.createValue();",
      "right" : "value = (Writable) reader.createValue();",
      "info" : "ExpressionStatement[34291-34331]:ExpressionStatement[39044-39084]"
    }, {
      "left" : "rowNum = 0;",
      "right" : "rowNum = 0;",
      "info" : "ExpressionStatement[34336-34347]:ExpressionStatement[39089-39100]"
    }, {
      "left" : "fields = inspector.getAllStructFieldRefs();",
      "right" : "fields = inspector.getAllStructFieldRefs();",
      "info" : "ExpressionStatement[34352-34395]:ExpressionStatement[39105-39148]"
    }, {
      "left" : "while (reader.next(key, value))",
      "right" : "while (reader.next(key, value))",
      "info" : "WhileStatement[34400-34628]:WhileStatement[39153-39381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34432-34628]:Block[39185-39381]"
    }, {
      "left" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[34440-34544]:ExpressionStatement[39193-39297]"
    }, {
      "left" : "assertEquals(null, inspector.getStructFieldData(value, fields.get(1)));",
      "right" : "assertEquals(null, inspector.getStructFieldData(value, fields.get(1)));",
      "info" : "ExpressionStatement[34551-34622]:ExpressionStatement[39304-39375]"
    }, {
      "left" : "assertEquals(3, rowNum);",
      "right" : "assertEquals(3, rowNum);",
      "info" : "ExpressionStatement[34633-34657]:ExpressionStatement[39386-39410]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[34662-34677]:ExpressionStatement[39415-39430]"
    }, {
      "left" : "ColumnProjectionUtils.setReadAllColumns(conf);",
      "right" : "ColumnProjectionUtils.setReadAllColumns(conf);",
      "info" : "ExpressionStatement[34738-34784]:ExpressionStatement[39491-39537]"
    }, {
      "left" : "reader = in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "reader = in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "ExpressionStatement[34789-34849]:ExpressionStatement[39542-39602]"
    }, {
      "left" : "key = reader.createKey();",
      "right" : "key = reader.createKey();",
      "info" : "ExpressionStatement[34854-34879]:ExpressionStatement[39607-39632]"
    }, {
      "left" : "value = (Writable) reader.createValue();",
      "right" : "value = (Writable) reader.createValue();",
      "info" : "ExpressionStatement[34884-34924]:ExpressionStatement[39637-39677]"
    }, {
      "left" : "rowNum = 0;",
      "right" : "rowNum = 0;",
      "info" : "ExpressionStatement[34929-34940]:ExpressionStatement[39682-39693]"
    }, {
      "left" : "fields = inspector.getAllStructFieldRefs();",
      "right" : "fields = inspector.getAllStructFieldRefs();",
      "info" : "ExpressionStatement[34945-34988]:ExpressionStatement[39698-39741]"
    }, {
      "left" : "while (reader.next(key, value))",
      "right" : "while (reader.next(key, value))",
      "info" : "WhileStatement[34993-35266]:WhileStatement[39746-40019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35025-35266]:Block[39778-40019]"
    }, {
      "left" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(++rowNum, intInspector.get(inspector.\n          getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[35033-35137]:ExpressionStatement[39786-39890]"
    }, {
      "left" : "assertEquals(2, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(1))));",
      "right" : "assertEquals(2, intInspector.get(inspector.\n          getStructFieldData(serde.deserialize(value), fields.get(1))));",
      "info" : "ExpressionStatement[35144-35260]:ExpressionStatement[39897-40013]"
    }, {
      "left" : "assertEquals(3, rowNum);",
      "right" : "assertEquals(3, rowNum);",
      "info" : "ExpressionStatement[35271-35295]:ExpressionStatement[40024-40048]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[35300-35315]:ExpressionStatement[40053-40068]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35323-35329]:Modifier[40076-40082]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[35330-35335]:TYPE_DECLARATION_KIND[40083-40088]"
    }, {
      "left" : "SimpleRow",
      "right" : "SimpleRow",
      "info" : "SimpleName[35336-35345]:SimpleName[40089-40098]"
    }, {
      "left" : "Writable",
      "right" : "Writable",
      "info" : "SimpleType[35357-35365]:SimpleType[40110-40118]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35385-35391]:Modifier[40138-40144]"
    }, {
      "left" : "SimpleRow",
      "right" : "SimpleRow",
      "info" : "SimpleName[35392-35401]:SimpleName[40145-40154]"
    }, {
      "left" : "Text t",
      "right" : "Text t",
      "info" : "SingleVariableDeclaration[35402-35408]:SingleVariableDeclaration[40155-40161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35410-35435]:Block[40163-40188]"
    }, {
      "left" : "this.z = t;",
      "right" : "this.z = t;",
      "info" : "ExpressionStatement[35418-35429]:ExpressionStatement[40171-40182]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35441-35450]:MarkerAnnotation[40194-40203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35455-35461]:Modifier[40208-40214]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35462-35466]:PrimitiveType[40215-40219]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[35467-35472]:SimpleName[40220-40225]"
    }, {
      "left" : "DataOutput dataOutput",
      "right" : "DataOutput dataOutput",
      "info" : "SingleVariableDeclaration[35473-35494]:SingleVariableDeclaration[40226-40247]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35503-35514]:SimpleType[40256-40267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35515-35584]:Block[40268-40337]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"unsupported\");",
      "right" : "throw new UnsupportedOperationException(\"unsupported\");",
      "info" : "ThrowStatement[35523-35578]:ThrowStatement[40276-40331]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35590-35599]:MarkerAnnotation[40343-40352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35604-35610]:Modifier[40357-40363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35611-35615]:PrimitiveType[40364-40368]"
    }, {
      "left" : "readFields",
      "right" : "readFields",
      "info" : "SimpleName[35616-35626]:SimpleName[40369-40379]"
    }, {
      "left" : "DataInput dataInput",
      "right" : "DataInput dataInput",
      "info" : "SingleVariableDeclaration[35627-35646]:SingleVariableDeclaration[40380-40399]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35655-35666]:SimpleType[40408-40419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35667-35736]:Block[40420-40489]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"unsupported\");",
      "right" : "throw new UnsupportedOperationException(\"unsupported\");",
      "info" : "ThrowStatement[35675-35730]:ThrowStatement[40428-40483]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35744-35750]:Modifier[40497-40503]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[35751-35756]:TYPE_DECLARATION_KIND[40504-40509]"
    }, {
      "left" : "NestedRow",
      "right" : "NestedRow",
      "info" : "SimpleName[35757-35766]:SimpleName[40510-40519]"
    }, {
      "left" : "Writable",
      "right" : "Writable",
      "info" : "SimpleType[35778-35786]:SimpleType[40531-40539]"
    }, {
      "left" : "NestedRow",
      "right" : "NestedRow",
      "info" : "SimpleName[35817-35826]:SimpleName[40570-40579]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[35827-35832]:SingleVariableDeclaration[40580-40585]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[35834-35839]:SingleVariableDeclaration[40587-40592]"
    }, {
      "left" : "int z",
      "right" : "int z",
      "info" : "SingleVariableDeclaration[35841-35846]:SingleVariableDeclaration[40594-40599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35848-35904]:Block[40601-40657]"
    }, {
      "left" : "this.z = z;",
      "right" : "this.z = z;",
      "info" : "ExpressionStatement[35856-35867]:ExpressionStatement[40609-40620]"
    }, {
      "left" : "this.r = new MyRow(x,y);",
      "right" : "this.r = new MyRow(x,y);",
      "info" : "ExpressionStatement[35874-35898]:ExpressionStatement[40627-40651]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35910-35919]:MarkerAnnotation[40663-40672]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35924-35930]:Modifier[40677-40683]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35931-35935]:PrimitiveType[40684-40688]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[35936-35941]:SimpleName[40689-40694]"
    }, {
      "left" : "DataOutput dataOutput",
      "right" : "DataOutput dataOutput",
      "info" : "SingleVariableDeclaration[35942-35963]:SingleVariableDeclaration[40695-40716]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35972-35983]:SimpleType[40725-40736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35984-36053]:Block[40737-40806]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"unsupported\");",
      "right" : "throw new UnsupportedOperationException(\"unsupported\");",
      "info" : "ThrowStatement[35992-36047]:ThrowStatement[40745-40800]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36059-36068]:MarkerAnnotation[40812-40821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36073-36079]:Modifier[40826-40832]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36080-36084]:PrimitiveType[40833-40837]"
    }, {
      "left" : "readFields",
      "right" : "readFields",
      "info" : "SimpleName[36085-36095]:SimpleName[40838-40848]"
    }, {
      "left" : "DataInput dataInput",
      "right" : "DataInput dataInput",
      "info" : "SingleVariableDeclaration[36096-36115]:SingleVariableDeclaration[40849-40868]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36124-36135]:SimpleType[40877-40888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36136-36205]:Block[40889-40958]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"unsupported\");",
      "right" : "throw new UnsupportedOperationException(\"unsupported\");",
      "info" : "ThrowStatement[36144-36199]:ThrowStatement[40897-40952]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[36213-36218]:MarkerAnnotation[40966-40971]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "right" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "info" : "SingleMemberAnnotation[36221-36263]:SingleMemberAnnotation[40974-41016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36266-36272]:Modifier[41019-41025]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36273-36277]:PrimitiveType[41026-41030]"
    }, {
      "left" : "testMROutput",
      "right" : "testMROutput",
      "info" : "SimpleName[36278-36290]:SimpleName[41031-41043]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[36300-36309]:SimpleType[41053-41062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36310-38776]:Block[41063-43529]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[36316-36357]:VariableDeclarationStatement[41069-41110]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[36362-36394]:VariableDeclarationStatement[41115-41147]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[36399-36627]:SynchronizedStatement[41152-41380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36432-36627]:Block[41185-41380]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[36440-36621]:ExpressionStatement[41193-41374]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[36632-36661]:VariableDeclarationStatement[41385-41414]"
    }, {
      "left" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[36666-36719]:VariableDeclarationStatement[41419-41472]"
    }, {
      "left" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "right" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "info" : "VariableDeclarationStatement[36724-36842]:VariableDeclarationStatement[41477-41595]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(1,2,3), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(1,2,3), inspector));",
      "info" : "ExpressionStatement[36847-36938]:ExpressionStatement[41600-41691]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(4,5,6), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(4,5,6), inspector));",
      "info" : "ExpressionStatement[36943-37034]:ExpressionStatement[41696-41787]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(7,8,9), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(7,8,9), inspector));",
      "info" : "ExpressionStatement[37039-37130]:ExpressionStatement[41792-41883]"
    }, {
      "left" : "writer.close(Reporter.NULL);",
      "right" : "writer.close(Reporter.NULL);",
      "info" : "ExpressionStatement[37135-37163]:ExpressionStatement[41888-41916]"
    }, {
      "left" : "serde = new OrcSerde();",
      "right" : "serde = new OrcSerde();",
      "info" : "ExpressionStatement[37168-37191]:ExpressionStatement[41921-41944]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"z,r\");",
      "right" : "properties.setProperty(\"columns\", \"z,r\");",
      "info" : "ExpressionStatement[37196-37237]:ExpressionStatement[41949-41990]"
    }, {
      "left" : "properties.setProperty(\"columns.types\", \"int:struct<x:int,y:int>\");",
      "right" : "properties.setProperty(\"columns.types\", \"int:struct<x:int,y:int>\");",
      "info" : "ExpressionStatement[37242-37309]:ExpressionStatement[41995-42062]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[37314-37372]:ExpressionStatement[42067-42125]"
    }, {
      "left" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "right" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "info" : "ExpressionStatement[37377-37440]:ExpressionStatement[42130-42193]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[37445-37488]:VariableDeclarationStatement[42198-42241]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[37493-37554]:ExpressionStatement[42246-42307]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[37559-37603]:VariableDeclarationStatement[42312-42356]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[37608-37639]:ExpressionStatement[42361-42392]"
    }, {
      "left" : "ColumnProjectionUtils.appendReadColumns(conf, Collections.singletonList(1));",
      "right" : "ColumnProjectionUtils.appendReadColumns(conf, Collections.singletonList(1));",
      "info" : "ExpressionStatement[37644-37720]:ExpressionStatement[42397-42473]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[37725-37831]:VariableDeclarationStatement[42478-42584]"
    }, {
      "left" : "Object key = reader.createKey();",
      "right" : "Object key = reader.createKey();",
      "info" : "VariableDeclarationStatement[37836-37868]:VariableDeclarationStatement[42589-42621]"
    }, {
      "left" : "Object value = reader.createValue();",
      "right" : "Object value = reader.createValue();",
      "info" : "VariableDeclarationStatement[37873-37909]:VariableDeclarationStatement[42626-42662]"
    }, {
      "left" : "int rowNum = 0;",
      "right" : "int rowNum = 0;",
      "info" : "VariableDeclarationStatement[37914-37929]:VariableDeclarationStatement[42667-42682]"
    }, {
      "left" : "List<? extends StructField> fields = inspector.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> fields = inspector.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[37934-38005]:VariableDeclarationStatement[42687-42758]"
    }, {
      "left" : "StructObjectInspector inner = (StructObjectInspector)\n        fields.get(1).getFieldObjectInspector();",
      "right" : "StructObjectInspector inner = (StructObjectInspector)\n        fields.get(1).getFieldObjectInspector();",
      "info" : "VariableDeclarationStatement[38010-38112]:VariableDeclarationStatement[42763-42865]"
    }, {
      "left" : "List<? extends StructField> inFields = inner.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> inFields = inner.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[38117-38186]:VariableDeclarationStatement[42870-42939]"
    }, {
      "left" : "IntObjectInspector intInspector =\n        (IntObjectInspector) fields.get(0).getFieldObjectInspector();",
      "right" : "IntObjectInspector intInspector =\n        (IntObjectInspector) fields.get(0).getFieldObjectInspector();",
      "info" : "VariableDeclarationStatement[38191-38294]:VariableDeclarationStatement[42944-43047]"
    }, {
      "left" : "while (reader.next(key, value))",
      "right" : "while (reader.next(key, value))",
      "info" : "WhileStatement[38299-38722]:WhileStatement[43052-43475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38331-38722]:Block[43084-43475]"
    }, {
      "left" : "assertEquals(null, inspector.getStructFieldData(value, fields.get(0)));",
      "right" : "assertEquals(null, inspector.getStructFieldData(value, fields.get(0)));",
      "info" : "ExpressionStatement[38339-38410]:ExpressionStatement[43092-43163]"
    }, {
      "left" : "Object sub = inspector.getStructFieldData(value, fields.get(1));",
      "right" : "Object sub = inspector.getStructFieldData(value, fields.get(1));",
      "info" : "VariableDeclarationStatement[38417-38481]:VariableDeclarationStatement[43170-43234]"
    }, {
      "left" : "assertEquals(3*rowNum+1, intInspector.get(inner.getStructFieldData(sub,\n          inFields.get(0))));",
      "right" : "assertEquals(3*rowNum+1, intInspector.get(inner.getStructFieldData(sub,\n          inFields.get(0))));",
      "info" : "ExpressionStatement[38488-38589]:ExpressionStatement[43241-43342]"
    }, {
      "left" : "assertEquals(3*rowNum+2, intInspector.get(inner.getStructFieldData(sub,\n          inFields.get(1))));",
      "right" : "assertEquals(3*rowNum+2, intInspector.get(inner.getStructFieldData(sub,\n          inFields.get(1))));",
      "info" : "ExpressionStatement[38596-38697]:ExpressionStatement[43349-43450]"
    }, {
      "left" : "rowNum += 1;",
      "right" : "rowNum += 1;",
      "info" : "ExpressionStatement[38704-38716]:ExpressionStatement[43457-43469]"
    }, {
      "left" : "assertEquals(3, rowNum);",
      "right" : "assertEquals(3, rowNum);",
      "info" : "ExpressionStatement[38727-38751]:ExpressionStatement[43480-43504]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[38756-38771]:ExpressionStatement[43509-43524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38823-38829]:Modifier[43576-43582]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38830-38834]:PrimitiveType[43583-43587]"
    }, {
      "left" : "testEmptyFile",
      "right" : "testEmptyFile",
      "info" : "SimpleName[38835-38848]:SimpleName[43588-43601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38868-39641]:Block[43621-44394]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[38874-38915]:VariableDeclarationStatement[43627-43668]"
    }, {
      "left" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[38920-38977]:VariableDeclarationStatement[43673-43730]"
    }, {
      "left" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, MyRow.class, true,\n            properties, Reporter.NULL);",
      "right" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, MyRow.class, true,\n            properties, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[38982-39168]:VariableDeclarationStatement[43735-43921]"
    }, {
      "left" : "writer.close(true);",
      "right" : "writer.close(true);",
      "info" : "ExpressionStatement[39173-39192]:ExpressionStatement[43926-43945]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"x,y\");",
      "right" : "properties.setProperty(\"columns\", \"x,y\");",
      "info" : "ExpressionStatement[39197-39238]:ExpressionStatement[43950-43991]"
    }, {
      "left" : "properties.setProperty(\"columns.types\", \"int:int\");",
      "right" : "properties.setProperty(\"columns.types\", \"int:int\");",
      "info" : "ExpressionStatement[39243-39294]:ExpressionStatement[43996-44047]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[39299-39328]:VariableDeclarationStatement[44052-44081]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[39333-39391]:ExpressionStatement[44086-44144]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[39396-39439]:VariableDeclarationStatement[44149-44192]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[39444-39505]:ExpressionStatement[44197-44258]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[39510-39554]:VariableDeclarationStatement[44263-44307]"
    }, {
      "left" : "assertTrue(1 == splits.length);",
      "right" : "assertTrue(0 == splits.length);",
      "info" : "ExpressionStatement[39559-39590]:ExpressionStatement[44312-44343]"
    }, {
      "left" : "1",
      "right" : "0",
      "info" : "NumberLiteral[39570-39571]:NumberLiteral[44323-44324]"
    }, {
      "left" : "assertEquals(null, serde.getSerDeStats());",
      "right" : "assertEquals(null, serde.getSerDeStats());",
      "info" : "ExpressionStatement[39595-39637]:ExpressionStatement[44348-44390]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39645-39651]:Modifier[44398-44404]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[39652-39657]:TYPE_DECLARATION_KIND[44405-44410]"
    }, {
      "left" : "StringRow",
      "right" : "StringRow",
      "info" : "SimpleName[39658-39667]:SimpleName[44411-44420]"
    }, {
      "left" : "Writable",
      "right" : "Writable",
      "info" : "SimpleType[39679-39687]:SimpleType[44432-44440]"
    }, {
      "left" : "StringRow",
      "right" : "StringRow",
      "info" : "SimpleName[39727-39736]:SimpleName[44480-44489]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[39737-39745]:SingleVariableDeclaration[44490-44498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39747-39785]:Block[44500-44538]"
    }, {
      "left" : "str = s;",
      "right" : "str = s;",
      "info" : "ExpressionStatement[39755-39763]:ExpressionStatement[44508-44516]"
    }, {
      "left" : "str2 = s;",
      "right" : "str2 = s;",
      "info" : "ExpressionStatement[39770-39779]:ExpressionStatement[44523-44532]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39790-39799]:MarkerAnnotation[44543-44552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39804-39810]:Modifier[44557-44563]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39811-39815]:PrimitiveType[44564-44568]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[39816-39821]:SimpleName[44569-44574]"
    }, {
      "left" : "DataOutput dataOutput",
      "right" : "DataOutput dataOutput",
      "info" : "SingleVariableDeclaration[39822-39843]:SingleVariableDeclaration[44575-44596]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[39852-39863]:SimpleType[44605-44616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39864-39930]:Block[44617-44683]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no write\");",
      "right" : "throw new UnsupportedOperationException(\"no write\");",
      "info" : "ThrowStatement[39872-39924]:ThrowStatement[44625-44677]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39936-39945]:MarkerAnnotation[44689-44698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39950-39956]:Modifier[44703-44709]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39957-39961]:PrimitiveType[44710-44714]"
    }, {
      "left" : "readFields",
      "right" : "readFields",
      "info" : "SimpleName[39962-39972]:SimpleName[44715-44725]"
    }, {
      "left" : "DataInput dataInput",
      "right" : "DataInput dataInput",
      "info" : "SingleVariableDeclaration[39973-39992]:SingleVariableDeclaration[44726-44745]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40001-40012]:SimpleType[44754-44765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40013-40078]:Block[44766-44831]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"no read\");",
      "right" : "throw new UnsupportedOperationException(\"no read\");",
      "info" : "ThrowStatement[40021-40072]:ThrowStatement[44774-44825]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[40086-40091]:MarkerAnnotation[44839-44844]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "right" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "info" : "SingleMemberAnnotation[40094-40136]:SingleMemberAnnotation[44847-44889]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40139-40145]:Modifier[44892-44898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40146-40150]:PrimitiveType[44899-44903]"
    }, {
      "left" : "testDefaultTypes",
      "right" : "testDefaultTypes",
      "info" : "SimpleName[40151-40167]:SimpleName[44904-44920]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[40177-40186]:SimpleType[44930-44939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40187-43260]:Block[44940-48013]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[40193-40234]:VariableDeclarationStatement[44946-44987]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[40239-40271]:VariableDeclarationStatement[44992-45024]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(StringRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(StringRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[40276-40504]:SynchronizedStatement[45029-45257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40309-40504]:Block[45062-45257]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(StringRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(StringRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[40317-40498]:ExpressionStatement[45070-45251]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[40509-40538]:VariableDeclarationStatement[45262-45291]"
    }, {
      "left" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "HiveOutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[40543-40600]:VariableDeclarationStatement[45296-45353]"
    }, {
      "left" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, StringRow.class,\n            true, properties, Reporter.NULL);",
      "right" : "org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer =\n        outFormat.getHiveRecordWriter(conf, testFilePath, StringRow.class,\n            true, properties, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[40605-40795]:VariableDeclarationStatement[45358-45548]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"owen\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"owen\"), inspector));",
      "info" : "ExpressionStatement[40800-40864]:ExpressionStatement[45553-45617]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"beth\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"beth\"), inspector));",
      "info" : "ExpressionStatement[40869-40933]:ExpressionStatement[45622-45686]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"laurel\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"laurel\"), inspector));",
      "info" : "ExpressionStatement[40938-41004]:ExpressionStatement[45691-45757]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"hazen\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"hazen\"), inspector));",
      "info" : "ExpressionStatement[41009-41074]:ExpressionStatement[45762-45827]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"colin\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"colin\"), inspector));",
      "info" : "ExpressionStatement[41079-41144]:ExpressionStatement[45832-45897]"
    }, {
      "left" : "writer.write(serde.serialize(new StringRow(\"miles\"), inspector));",
      "right" : "writer.write(serde.serialize(new StringRow(\"miles\"), inspector));",
      "info" : "ExpressionStatement[41149-41214]:ExpressionStatement[45902-45967]"
    }, {
      "left" : "writer.close(true);",
      "right" : "writer.close(true);",
      "info" : "ExpressionStatement[41219-41238]:ExpressionStatement[45972-45991]"
    }, {
      "left" : "serde = new OrcSerde();",
      "right" : "serde = new OrcSerde();",
      "info" : "ExpressionStatement[41243-41266]:ExpressionStatement[45996-46019]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"str,str2\");",
      "right" : "properties.setProperty(\"columns\", \"str,str2\");",
      "info" : "ExpressionStatement[41271-41317]:ExpressionStatement[46024-46070]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[41322-41380]:ExpressionStatement[46075-46133]"
    }, {
      "left" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "right" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "info" : "ExpressionStatement[41385-41448]:ExpressionStatement[46138-46201]"
    }, {
      "left" : "assertEquals(\"struct<str:string,str2:string>\", inspector.getTypeName());",
      "right" : "assertEquals(\"struct<str:string,str2:string>\", inspector.getTypeName());",
      "info" : "ExpressionStatement[41453-41525]:ExpressionStatement[46206-46278]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[41530-41573]:VariableDeclarationStatement[46283-46326]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[41578-41639]:ExpressionStatement[46331-46392]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[41644-41688]:VariableDeclarationStatement[46397-46441]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[41693-41724]:ExpressionStatement[46446-46477]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader reader =\n        in.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[41757-41863]:VariableDeclarationStatement[46510-46616]"
    }, {
      "left" : "Object key = reader.createKey();",
      "right" : "Object key = reader.createKey();",
      "info" : "VariableDeclarationStatement[41868-41900]:VariableDeclarationStatement[46621-46653]"
    }, {
      "left" : "Writable value = (Writable) reader.createValue();",
      "right" : "Writable value = (Writable) reader.createValue();",
      "info" : "VariableDeclarationStatement[41905-41954]:VariableDeclarationStatement[46658-46707]"
    }, {
      "left" : "List<? extends StructField> fields =inspector.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> fields =inspector.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[41959-42029]:VariableDeclarationStatement[46712-46782]"
    }, {
      "left" : "StringObjectInspector strInspector = (StringObjectInspector)\n        fields.get(0).getFieldObjectInspector();",
      "right" : "StringObjectInspector strInspector = (StringObjectInspector)\n        fields.get(0).getFieldObjectInspector();",
      "info" : "VariableDeclarationStatement[42034-42143]:VariableDeclarationStatement[46787-46896]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[42148-42192]:ExpressionStatement[46901-46945]"
    }, {
      "left" : "assertEquals(\"owen\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"owen\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[42197-42316]:ExpressionStatement[46950-47069]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[42321-42365]:ExpressionStatement[47074-47118]"
    }, {
      "left" : "assertEquals(\"beth\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"beth\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[42370-42489]:ExpressionStatement[47123-47242]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[42494-42538]:ExpressionStatement[47247-47291]"
    }, {
      "left" : "assertEquals(\"laurel\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"laurel\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[42543-42664]:ExpressionStatement[47296-47417]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[42669-42713]:ExpressionStatement[47422-47466]"
    }, {
      "left" : "assertEquals(\"hazen\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"hazen\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[42718-42838]:ExpressionStatement[47471-47591]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[42843-42887]:ExpressionStatement[47596-47640]"
    }, {
      "left" : "assertEquals(\"colin\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"colin\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[42892-43012]:ExpressionStatement[47645-47765]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[43017-43061]:ExpressionStatement[47770-47814]"
    }, {
      "left" : "assertEquals(\"miles\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "right" : "assertEquals(\"miles\", strInspector.getPrimitiveJavaObject(inspector.\n        getStructFieldData(value, fields.get(0))));",
      "info" : "ExpressionStatement[43066-43186]:ExpressionStatement[47819-47939]"
    }, {
      "left" : "assertEquals(false, reader.next(key, value));",
      "right" : "assertEquals(false, reader.next(key, value));",
      "info" : "ExpressionStatement[43191-43236]:ExpressionStatement[47944-47989]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[43241-43256]:ExpressionStatement[47994-48009]"
    }, {
      "left" : "JobConf",
      "right" : "JobConf",
      "info" : "SimpleType[43780-43787]:SimpleType[48533-48540]"
    }, {
      "left" : "createMockExecutionEnvironment",
      "right" : "createMockExecutionEnvironment",
      "info" : "SimpleName[43788-43818]:SimpleName[48541-48571]"
    }, {
      "left" : "Path workDir",
      "right" : "Path workDir",
      "info" : "SingleVariableDeclaration[43819-43831]:SingleVariableDeclaration[48572-48584]"
    }, {
      "left" : "Path warehouseDir",
      "right" : "Path warehouseDir",
      "info" : "SingleVariableDeclaration[43874-43891]:SingleVariableDeclaration[48627-48644]"
    }, {
      "left" : "String tableName",
      "right" : "String tableName",
      "info" : "SingleVariableDeclaration[43934-43950]:SingleVariableDeclaration[48687-48703]"
    }, {
      "left" : "ObjectInspector objectInspector",
      "right" : "ObjectInspector objectInspector",
      "info" : "SingleVariableDeclaration[43993-44024]:SingleVariableDeclaration[48746-48777]"
    }, {
      "left" : "boolean isVectorized",
      "right" : "boolean isVectorized",
      "info" : "SingleVariableDeclaration[44067-44087]:SingleVariableDeclaration[48820-48840]"
    }, {
      "left" : "int partitions",
      "right" : "int partitions",
      "info" : "SingleVariableDeclaration[44130-44144]:SingleVariableDeclaration[48883-48897]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[44195-44206]:SimpleType[48948-48959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44207-47592]:Block[48960-52345]"
    }, {
      "left" : "Utilities.clearWorkMap();",
      "right" : "Utilities.clearWorkMap();",
      "info" : "ExpressionStatement[44213-44238]:ExpressionStatement[48966-48991]"
    }, {
      "left" : "JobConf conf = new JobConf();",
      "right" : "JobConf conf = new JobConf();",
      "info" : "VariableDeclarationStatement[44243-44272]:VariableDeclarationStatement[48996-49025]"
    }, {
      "left" : "conf.set(\"hive.exec.plan\", workDir.toString());",
      "right" : "conf.set(\"hive.exec.plan\", workDir.toString());",
      "info" : "ExpressionStatement[44277-44324]:ExpressionStatement[49030-49077]"
    }, {
      "left" : "conf.set(\"mapred.job.tracker\", \"local\");",
      "right" : "conf.set(\"mapred.job.tracker\", \"local\");",
      "info" : "ExpressionStatement[44329-44369]:ExpressionStatement[49082-49122]"
    }, {
      "left" : "conf.set(\"hive.vectorized.execution.enabled\", Boolean.toString(isVectorized));",
      "right" : "conf.set(\"hive.vectorized.execution.enabled\", Boolean.toString(isVectorized));",
      "info" : "ExpressionStatement[44374-44452]:ExpressionStatement[49127-49205]"
    }, {
      "left" : "conf.set(\"fs.mock.impl\", MockFileSystem.class.getName());",
      "right" : "conf.set(\"fs.mock.impl\", MockFileSystem.class.getName());",
      "info" : "ExpressionStatement[44457-44514]:ExpressionStatement[49210-49267]"
    }, {
      "left" : "conf.set(\"mapred.mapper.class\", ExecMapper.class.getName());",
      "right" : "conf.set(\"mapred.mapper.class\", ExecMapper.class.getName());",
      "info" : "ExpressionStatement[44519-44579]:ExpressionStatement[49272-49332]"
    }, {
      "left" : "Path root = new Path(warehouseDir, tableName);",
      "right" : "Path root = new Path(warehouseDir, tableName);",
      "info" : "VariableDeclarationStatement[44584-44630]:VariableDeclarationStatement[49337-49383]"
    }, {
      "left" : "((MockFileSystem) root.getFileSystem(conf)).clear();",
      "right" : "((MockFileSystem) root.getFileSystem(conf)).clear();",
      "info" : "ExpressionStatement[44670-44722]:ExpressionStatement[49423-49475]"
    }, {
      "left" : "String[] partPath = new String[partitions];",
      "right" : "String[] partPath = new String[partitions];",
      "info" : "VariableDeclarationStatement[44758-44801]:VariableDeclarationStatement[49511-49554]"
    }, {
      "left" : "StringBuilder buffer = new StringBuilder();",
      "right" : "StringBuilder buffer = new StringBuilder();",
      "info" : "VariableDeclarationStatement[44806-44849]:VariableDeclarationStatement[49559-49602]"
    }, {
      "left" : "for(int p=0; p < partitions; ++p)",
      "right" : "for(int p=0; p < partitions; ++p)",
      "info" : "ForStatement[44854-45042]:ForStatement[49607-49795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44888-45042]:Block[49641-49795]"
    }, {
      "left" : "partPath[p] = new Path(root, \"p=\" + p).toString();",
      "right" : "partPath[p] = new Path(root, \"p=\" + p).toString();",
      "info" : "ExpressionStatement[44896-44946]:ExpressionStatement[49649-49699]"
    }, {
      "left" : "if (p != 0)",
      "right" : "if (p != 0)",
      "info" : "IfStatement[44953-45002]:IfStatement[49706-49755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44965-45002]:Block[49718-49755]"
    }, {
      "left" : "buffer.append(',');",
      "right" : "buffer.append(',');",
      "info" : "ExpressionStatement[44975-44994]:ExpressionStatement[49728-49747]"
    }, {
      "left" : "buffer.append(partPath[p]);",
      "right" : "buffer.append(partPath[p]);",
      "info" : "ExpressionStatement[45009-45036]:ExpressionStatement[49762-49789]"
    }, {
      "left" : "conf.set(\"mapred.input.dir\", buffer.toString());",
      "right" : "conf.set(\"mapred.input.dir\", buffer.toString());",
      "info" : "ExpressionStatement[45047-45095]:ExpressionStatement[49800-49848]"
    }, {
      "left" : "StringBuilder columnIds = new StringBuilder();",
      "right" : "StringBuilder columnIds = new StringBuilder();",
      "info" : "VariableDeclarationStatement[45100-45146]:VariableDeclarationStatement[49853-49899]"
    }, {
      "left" : "StringBuilder columnNames = new StringBuilder();",
      "right" : "StringBuilder columnNames = new StringBuilder();",
      "info" : "VariableDeclarationStatement[45151-45199]:VariableDeclarationStatement[49904-49952]"
    }, {
      "left" : "StringBuilder columnTypes = new StringBuilder();",
      "right" : "StringBuilder columnTypes = new StringBuilder();",
      "info" : "VariableDeclarationStatement[45204-45252]:VariableDeclarationStatement[49957-50005]"
    }, {
      "left" : "StructObjectInspector structOI = (StructObjectInspector) objectInspector;",
      "right" : "StructObjectInspector structOI = (StructObjectInspector) objectInspector;",
      "info" : "VariableDeclarationStatement[45257-45330]:VariableDeclarationStatement[50010-50083]"
    }, {
      "left" : "List<? extends StructField> fields = structOI.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> fields = structOI.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[45335-45405]:VariableDeclarationStatement[50088-50158]"
    }, {
      "left" : "int numCols = fields.size();",
      "right" : "int numCols = fields.size();",
      "info" : "VariableDeclarationStatement[45410-45438]:VariableDeclarationStatement[50163-50191]"
    }, {
      "left" : "for(int i=0; i < numCols; ++i)",
      "right" : "for(int i=0; i < numCols; ++i)",
      "info" : "ForStatement[45443-45770]:ForStatement[50196-50523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45474-45770]:Block[50227-50523]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[45482-45600]:IfStatement[50235-50353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45494-45600]:Block[50247-50353]"
    }, {
      "left" : "columnIds.append(',');",
      "right" : "columnIds.append(',');",
      "info" : "ExpressionStatement[45504-45526]:ExpressionStatement[50257-50279]"
    }, {
      "left" : "columnNames.append(',');",
      "right" : "columnNames.append(',');",
      "info" : "ExpressionStatement[45535-45559]:ExpressionStatement[50288-50312]"
    }, {
      "left" : "columnTypes.append(',');",
      "right" : "columnTypes.append(',');",
      "info" : "ExpressionStatement[45568-45592]:ExpressionStatement[50321-50345]"
    }, {
      "left" : "columnIds.append(i);",
      "right" : "columnIds.append(i);",
      "info" : "ExpressionStatement[45607-45627]:ExpressionStatement[50360-50380]"
    }, {
      "left" : "columnNames.append(fields.get(i).getFieldName());",
      "right" : "columnNames.append(fields.get(i).getFieldName());",
      "info" : "ExpressionStatement[45634-45683]:ExpressionStatement[50387-50436]"
    }, {
      "left" : "columnTypes.append(fields.get(i).getFieldObjectInspector().getTypeName());",
      "right" : "columnTypes.append(fields.get(i).getFieldObjectInspector().getTypeName());",
      "info" : "ExpressionStatement[45690-45764]:ExpressionStatement[50443-50517]"
    }, {
      "left" : "conf.set(\"hive.io.file.readcolumn.ids\", columnIds.toString());",
      "right" : "conf.set(\"hive.io.file.readcolumn.ids\", columnIds.toString());",
      "info" : "ExpressionStatement[45775-45837]:ExpressionStatement[50528-50590]"
    }, {
      "left" : "conf.set(\"partition_columns\", \"p\");",
      "right" : "conf.set(\"partition_columns\", \"p\");",
      "info" : "ExpressionStatement[45842-45877]:ExpressionStatement[50595-50630]"
    }, {
      "left" : "conf.set(serdeConstants.LIST_COLUMNS, columnNames.toString());",
      "right" : "conf.set(serdeConstants.LIST_COLUMNS, columnNames.toString());",
      "info" : "ExpressionStatement[45882-45944]:ExpressionStatement[50635-50697]"
    }, {
      "left" : "conf.set(serdeConstants.LIST_COLUMN_TYPES, columnTypes.toString());",
      "right" : "conf.set(serdeConstants.LIST_COLUMN_TYPES, columnTypes.toString());",
      "info" : "ExpressionStatement[45949-46016]:ExpressionStatement[50702-50769]"
    }, {
      "left" : "MockFileSystem fs = (MockFileSystem) warehouseDir.getFileSystem(conf);",
      "right" : "MockFileSystem fs = (MockFileSystem) warehouseDir.getFileSystem(conf);",
      "info" : "VariableDeclarationStatement[46021-46091]:VariableDeclarationStatement[50774-50844]"
    }, {
      "left" : "fs.clear();",
      "right" : "fs.clear();",
      "info" : "ExpressionStatement[46096-46107]:ExpressionStatement[50849-50860]"
    }, {
      "left" : "Properties tblProps = new Properties();",
      "right" : "Properties tblProps = new Properties();",
      "info" : "VariableDeclarationStatement[46113-46152]:VariableDeclarationStatement[50866-50905]"
    }, {
      "left" : "tblProps.put(\"name\", tableName);",
      "right" : "tblProps.put(\"name\", tableName);",
      "info" : "ExpressionStatement[46157-46189]:ExpressionStatement[50910-50942]"
    }, {
      "left" : "tblProps.put(\"serialization.lib\", OrcSerde.class.getName());",
      "right" : "tblProps.put(\"serialization.lib\", OrcSerde.class.getName());",
      "info" : "ExpressionStatement[46194-46254]:ExpressionStatement[50947-51007]"
    }, {
      "left" : "tblProps.put(\"columns\", columnNames.toString());",
      "right" : "tblProps.put(\"columns\", columnNames.toString());",
      "info" : "ExpressionStatement[46259-46307]:ExpressionStatement[51012-51060]"
    }, {
      "left" : "tblProps.put(\"columns.types\", columnTypes.toString());",
      "right" : "tblProps.put(\"columns.types\", columnTypes.toString());",
      "info" : "ExpressionStatement[46312-46366]:ExpressionStatement[51065-51119]"
    }, {
      "left" : "TableDesc tbl = new TableDesc(OrcInputFormat.class, OrcOutputFormat.class,\n        tblProps);",
      "right" : "TableDesc tbl = new TableDesc(OrcInputFormat.class, OrcOutputFormat.class,\n        tblProps);",
      "info" : "VariableDeclarationStatement[46371-46464]:VariableDeclarationStatement[51124-51217]"
    }, {
      "left" : "MapWork mapWork = new MapWork();",
      "right" : "MapWork mapWork = new MapWork();",
      "info" : "VariableDeclarationStatement[46470-46502]:VariableDeclarationStatement[51223-51255]"
    }, {
      "left" : "mapWork.setVectorMode(isVectorized);",
      "right" : "mapWork.setVectorMode(isVectorized);",
      "info" : "ExpressionStatement[46507-46543]:ExpressionStatement[51260-51296]"
    }, {
      "left" : "mapWork.setUseBucketizedHiveInputFormat(false);",
      "right" : "mapWork.setUseBucketizedHiveInputFormat(false);",
      "info" : "ExpressionStatement[46548-46595]:ExpressionStatement[51301-51348]"
    }, {
      "left" : "LinkedHashMap<String, ArrayList<String>> aliasMap =\n        new LinkedHashMap<String, ArrayList<String>>();",
      "right" : "LinkedHashMap<String, ArrayList<String>> aliasMap =\n        new LinkedHashMap<String, ArrayList<String>>();",
      "info" : "VariableDeclarationStatement[46600-46707]:VariableDeclarationStatement[51353-51460]"
    }, {
      "left" : "ArrayList<String> aliases = new ArrayList<String>();",
      "right" : "ArrayList<String> aliases = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[46712-46764]:VariableDeclarationStatement[51465-51517]"
    }, {
      "left" : "aliases.add(tableName);",
      "right" : "aliases.add(tableName);",
      "info" : "ExpressionStatement[46769-46792]:ExpressionStatement[51522-51545]"
    }, {
      "left" : "LinkedHashMap<String, PartitionDesc> partMap =\n        new LinkedHashMap<String, PartitionDesc>();",
      "right" : "LinkedHashMap<String, PartitionDesc> partMap =\n        new LinkedHashMap<String, PartitionDesc>();",
      "info" : "VariableDeclarationStatement[46797-46895]:VariableDeclarationStatement[51550-51648]"
    }, {
      "left" : "for(int p=0; p < partitions; ++p)",
      "right" : "for(int p=0; p < partitions; ++p)",
      "info" : "ForStatement[46900-47176]:ForStatement[51653-51929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46934-47176]:Block[51687-51929]"
    }, {
      "left" : "aliasMap.put(partPath[p], aliases);",
      "right" : "aliasMap.put(partPath[p], aliases);",
      "info" : "ExpressionStatement[46942-46977]:ExpressionStatement[51695-51730]"
    }, {
      "left" : "LinkedHashMap<String, String> partSpec =\n          new LinkedHashMap<String, String>();",
      "right" : "LinkedHashMap<String, String> partSpec =\n          new LinkedHashMap<String, String>();",
      "info" : "VariableDeclarationStatement[46984-47071]:VariableDeclarationStatement[51737-51824]"
    }, {
      "left" : "PartitionDesc part = new PartitionDesc(tbl, partSpec);",
      "right" : "PartitionDesc part = new PartitionDesc(tbl, partSpec);",
      "info" : "VariableDeclarationStatement[47078-47132]:VariableDeclarationStatement[51831-51885]"
    }, {
      "left" : "partMap.put(partPath[p], part);",
      "right" : "partMap.put(partPath[p], part);",
      "info" : "ExpressionStatement[47139-47170]:ExpressionStatement[51892-51923]"
    }, {
      "left" : "mapWork.setPathToAliases(aliasMap);",
      "right" : "mapWork.setPathToAliases(aliasMap);",
      "info" : "ExpressionStatement[47181-47216]:ExpressionStatement[51934-51969]"
    }, {
      "left" : "mapWork.setPathToPartitionInfo(partMap);",
      "right" : "mapWork.setPathToPartitionInfo(partMap);",
      "info" : "ExpressionStatement[47221-47261]:ExpressionStatement[51974-52014]"
    }, {
      "left" : "FileSystem localFs = FileSystem.getLocal(conf).getRaw();",
      "right" : "FileSystem localFs = FileSystem.getLocal(conf).getRaw();",
      "info" : "VariableDeclarationStatement[47293-47349]:VariableDeclarationStatement[52046-52102]"
    }, {
      "left" : "Path mapXml = new Path(workDir, \"map.xml\");",
      "right" : "Path mapXml = new Path(workDir, \"map.xml\");",
      "info" : "VariableDeclarationStatement[47354-47397]:VariableDeclarationStatement[52107-52150]"
    }, {
      "left" : "localFs.delete(mapXml, true);",
      "right" : "localFs.delete(mapXml, true);",
      "info" : "ExpressionStatement[47402-47431]:ExpressionStatement[52155-52184]"
    }, {
      "left" : "FSDataOutputStream planStream = localFs.create(mapXml);",
      "right" : "FSDataOutputStream planStream = localFs.create(mapXml);",
      "info" : "VariableDeclarationStatement[47436-47491]:VariableDeclarationStatement[52189-52244]"
    }, {
      "left" : "Utilities.serializePlan(mapWork, planStream, conf);",
      "right" : "Utilities.serializePlan(mapWork, planStream, conf);",
      "info" : "ExpressionStatement[47496-47547]:ExpressionStatement[52249-52300]"
    }, {
      "left" : "planStream.close();",
      "right" : "planStream.close();",
      "info" : "ExpressionStatement[47552-47571]:ExpressionStatement[52305-52324]"
    }, {
      "left" : "return conf;",
      "right" : "return conf;",
      "info" : "ReturnStatement[47576-47588]:ReturnStatement[52329-52341]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[47679-47684]:MarkerAnnotation[52432-52437]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[47687-47717]:SingleMemberAnnotation[52440-52470]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47720-47726]:Modifier[52473-52479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47727-47731]:PrimitiveType[52480-52484]"
    }, {
      "left" : "testVectorization",
      "right" : "testVectorization",
      "info" : "SimpleName[47732-47749]:SimpleName[52485-52502]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[47759-47768]:SimpleType[52512-52521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47769-49447]:Block[52522-54200]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[47817-47849]:VariableDeclarationStatement[52570-52602]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[47854-48078]:SynchronizedStatement[52607-52831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47887-48078]:Block[52640-52831]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[47895-48072]:ExpressionStatement[52648-52825]"
    }, {
      "left" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorization\", inspector, true, 1);",
      "right" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorization\", inspector, true, 1);",
      "info" : "VariableDeclarationStatement[48083-48205]:VariableDeclarationStatement[52836-52958]"
    }, {
      "left" : "Writer writer =\n        OrcFile.createWriter(new Path(conf.get(\"mapred.input.dir\") + \"/0_0\"),\n           OrcFile.writerOptions(conf).blockPadding(false)\n                  .bufferSize(1024).inspector(inspector));",
      "right" : "Writer writer =\n        OrcFile.createWriter(new Path(conf.get(\"mapred.input.dir\") + \"/0_0\"),\n           OrcFile.writerOptions(conf).blockPadding(false)\n                  .bufferSize(1024).inspector(inspector));",
      "info" : "VariableDeclarationStatement[48261-48472]:VariableDeclarationStatement[53014-53225]"
    }, {
      "left" : "for(int i=0; i < 10; ++i)",
      "right" : "for(int i=0; i < 10; ++i)",
      "info" : "ForStatement[48477-48550]:ForStatement[53230-53303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48503-48550]:Block[53256-53303]"
    }, {
      "left" : "writer.addRow(new MyRow(i, 2*i));",
      "right" : "writer.addRow(new MyRow(i, 2*i));",
      "info" : "ExpressionStatement[48511-48544]:ExpressionStatement[53264-53297]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[48555-48570]:ExpressionStatement[53308-53323]"
    }, {
      "left" : "((MockOutputStream) ((WriterImpl) writer).getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "right" : "((MockOutputStream) ((WriterImpl) writer).getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "info" : "ExpressionStatement[48575-48682]:ExpressionStatement[53328-53435]"
    }, {
      "left" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "right" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "info" : "VariableDeclarationStatement[48710-48805]:VariableDeclarationStatement[53463-53558]"
    }, {
      "left" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "right" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "info" : "VariableDeclarationStatement[48810-48864]:VariableDeclarationStatement[53563-53617]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[48869-48900]:ExpressionStatement[53622-53653]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n        reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n        reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[48906-49055]:VariableDeclarationStatement[53659-53808]"
    }, {
      "left" : "NullWritable key = reader.createKey();",
      "right" : "NullWritable key = reader.createKey();",
      "info" : "VariableDeclarationStatement[49060-49098]:VariableDeclarationStatement[53813-53851]"
    }, {
      "left" : "VectorizedRowBatch value = reader.createValue();",
      "right" : "VectorizedRowBatch value = reader.createValue();",
      "info" : "VariableDeclarationStatement[49103-49151]:VariableDeclarationStatement[53856-53904]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[49156-49200]:ExpressionStatement[53909-53953]"
    }, {
      "left" : "assertEquals(10, value.count());",
      "right" : "assertEquals(10, value.count());",
      "info" : "ExpressionStatement[49205-49237]:ExpressionStatement[53958-53990]"
    }, {
      "left" : "LongColumnVector col0 = (LongColumnVector) value.cols[0];",
      "right" : "LongColumnVector col0 = (LongColumnVector) value.cols[0];",
      "info" : "VariableDeclarationStatement[49242-49299]:VariableDeclarationStatement[53995-54052]"
    }, {
      "left" : "for(int i=0; i < 10; i++)",
      "right" : "for(int i=0; i < 10; i++)",
      "info" : "ForStatement[49304-49393]:ForStatement[54057-54146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49330-49393]:Block[54083-54146]"
    }, {
      "left" : "assertEquals(\"checking \" + i, i, col0.vector[i]);",
      "right" : "assertEquals(\"checking \" + i, i, col0.vector[i]);",
      "info" : "ExpressionStatement[49338-49387]:ExpressionStatement[54091-54140]"
    }, {
      "left" : "assertEquals(false, reader.next(key, value));",
      "right" : "assertEquals(false, reader.next(key, value));",
      "info" : "ExpressionStatement[49398-49443]:ExpressionStatement[54151-54196]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[49534-49539]:MarkerAnnotation[54287-54292]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[49542-49572]:SingleMemberAnnotation[54295-54325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49575-49581]:Modifier[54328-54334]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49582-49586]:PrimitiveType[54335-54339]"
    }, {
      "left" : "testVectorizationWithBuckets",
      "right" : "testVectorizationWithBuckets",
      "info" : "SimpleName[49587-49615]:SimpleName[54340-54368]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[49625-49634]:SimpleType[54378-54387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49635-51370]:Block[54388-56123]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[49683-49715]:VariableDeclarationStatement[54436-54468]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[49720-49944]:SynchronizedStatement[54473-54697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49753-49944]:Block[54506-54697]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[49761-49938]:ExpressionStatement[54514-54691]"
    }, {
      "left" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorBuckets\", inspector, true, 1);",
      "right" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorBuckets\", inspector, true, 1);",
      "info" : "VariableDeclarationStatement[49949-50071]:VariableDeclarationStatement[54702-54824]"
    }, {
      "left" : "Writer writer =\n        OrcFile.createWriter(new Path(conf.get(\"mapred.input.dir\") + \"/0_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "right" : "Writer writer =\n        OrcFile.createWriter(new Path(conf.get(\"mapred.input.dir\") + \"/0_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "info" : "VariableDeclarationStatement[50127-50337]:VariableDeclarationStatement[54880-55090]"
    }, {
      "left" : "for(int i=0; i < 10; ++i)",
      "right" : "for(int i=0; i < 10; ++i)",
      "info" : "ForStatement[50342-50415]:ForStatement[55095-55168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50368-50415]:Block[55121-55168]"
    }, {
      "left" : "writer.addRow(new MyRow(i, 2*i));",
      "right" : "writer.addRow(new MyRow(i, 2*i));",
      "info" : "ExpressionStatement[50376-50409]:ExpressionStatement[55129-55162]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[50420-50435]:ExpressionStatement[55173-55188]"
    }, {
      "left" : "((MockOutputStream) ((WriterImpl) writer).getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "right" : "((MockOutputStream) ((WriterImpl) writer).getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "info" : "ExpressionStatement[50440-50547]:ExpressionStatement[55193-55300]"
    }, {
      "left" : "conf.setInt(hive_metastoreConstants.BUCKET_COUNT, 3);",
      "right" : "conf.setInt(hive_metastoreConstants.BUCKET_COUNT, 3);",
      "info" : "ExpressionStatement[50575-50628]:ExpressionStatement[55328-55381]"
    }, {
      "left" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "right" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "info" : "VariableDeclarationStatement[50633-50728]:VariableDeclarationStatement[55386-55481]"
    }, {
      "left" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "right" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "info" : "VariableDeclarationStatement[50733-50787]:VariableDeclarationStatement[55486-55540]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[50792-50823]:ExpressionStatement[55545-55576]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n        reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n        reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[50829-50978]:VariableDeclarationStatement[55582-55731]"
    }, {
      "left" : "NullWritable key = reader.createKey();",
      "right" : "NullWritable key = reader.createKey();",
      "info" : "VariableDeclarationStatement[50983-51021]:VariableDeclarationStatement[55736-55774]"
    }, {
      "left" : "VectorizedRowBatch value = reader.createValue();",
      "right" : "VectorizedRowBatch value = reader.createValue();",
      "info" : "VariableDeclarationStatement[51026-51074]:VariableDeclarationStatement[55779-55827]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[51079-51123]:ExpressionStatement[55832-55876]"
    }, {
      "left" : "assertEquals(10, value.count());",
      "right" : "assertEquals(10, value.count());",
      "info" : "ExpressionStatement[51128-51160]:ExpressionStatement[55881-55913]"
    }, {
      "left" : "LongColumnVector col0 = (LongColumnVector) value.cols[0];",
      "right" : "LongColumnVector col0 = (LongColumnVector) value.cols[0];",
      "info" : "VariableDeclarationStatement[51165-51222]:VariableDeclarationStatement[55918-55975]"
    }, {
      "left" : "for(int i=0; i < 10; i++)",
      "right" : "for(int i=0; i < 10; i++)",
      "info" : "ForStatement[51227-51316]:ForStatement[55980-56069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51253-51316]:Block[56006-56069]"
    }, {
      "left" : "assertEquals(\"checking \" + i, i, col0.vector[i]);",
      "right" : "assertEquals(\"checking \" + i, i, col0.vector[i]);",
      "info" : "ExpressionStatement[51261-51310]:ExpressionStatement[56014-56063]"
    }, {
      "left" : "assertEquals(false, reader.next(key, value));",
      "right" : "assertEquals(false, reader.next(key, value));",
      "info" : "ExpressionStatement[51321-51366]:ExpressionStatement[56074-56119]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[51420-51425]:MarkerAnnotation[56173-56178]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[51428-51458]:SingleMemberAnnotation[56181-56211]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51461-51467]:Modifier[56214-56220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51468-51472]:PrimitiveType[56221-56225]"
    }, {
      "left" : "testVectorizationWithAcid",
      "right" : "testVectorizationWithAcid",
      "info" : "SimpleName[51473-51498]:SimpleName[56226-56251]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[51508-51517]:SimpleType[56261-56270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51518-54790]:Block[56271-59543]"
    }, {
      "left" : "StructObjectInspector inspector = new BigRowInspector();",
      "right" : "StructObjectInspector inspector = new BigRowInspector();",
      "info" : "VariableDeclarationStatement[51524-51580]:VariableDeclarationStatement[56277-56333]"
    }, {
      "left" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorizationAcid\", inspector, true, 1);",
      "right" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"vectorizationAcid\", inspector, true, 1);",
      "info" : "VariableDeclarationStatement[51585-51711]:VariableDeclarationStatement[56338-56464]"
    }, {
      "left" : "Path partDir = new Path(conf.get(\"mapred.input.dir\"));",
      "right" : "Path partDir = new Path(conf.get(\"mapred.input.dir\"));",
      "info" : "VariableDeclarationStatement[51767-51821]:VariableDeclarationStatement[56520-56574]"
    }, {
      "left" : "OrcRecordUpdater writer = new OrcRecordUpdater(partDir,\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(0).inspector(inspector));",
      "right" : "OrcRecordUpdater writer = new OrcRecordUpdater(partDir,\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(0).inspector(inspector));",
      "info" : "VariableDeclarationStatement[51826-52013]:VariableDeclarationStatement[56579-56766]"
    }, {
      "left" : "for(int i=0; i < 100; ++i)",
      "right" : "for(int i=0; i < 100; ++i)",
      "info" : "ForStatement[52018-52116]:ForStatement[56771-56869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52045-52116]:Block[56798-56869]"
    }, {
      "left" : "BigRow row = new BigRow(i);",
      "right" : "BigRow row = new BigRow(i);",
      "info" : "VariableDeclarationStatement[52053-52080]:VariableDeclarationStatement[56806-56833]"
    }, {
      "left" : "writer.insert(10, row);",
      "right" : "writer.insert(10, row);",
      "info" : "ExpressionStatement[52087-52110]:ExpressionStatement[56840-56863]"
    }, {
      "left" : "WriterImpl baseWriter = (WriterImpl) writer.getWriter();",
      "right" : "WriterImpl baseWriter = (WriterImpl) writer.getWriter();",
      "info" : "VariableDeclarationStatement[52121-52177]:VariableDeclarationStatement[56874-56930]"
    }, {
      "left" : "writer.close(false);",
      "right" : "writer.close(false);",
      "info" : "ExpressionStatement[52182-52202]:ExpressionStatement[56935-56955]"
    }, {
      "left" : "((MockOutputStream) baseWriter.getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "right" : "((MockOutputStream) baseWriter.getStream())\n        .setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "info" : "ExpressionStatement[52207-52303]:ExpressionStatement[56960-57056]"
    }, {
      "left" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "right" : "HiveInputFormat<?,?> inputFormat =\n        new HiveInputFormat<WritableComparable, Writable>();",
      "info" : "VariableDeclarationStatement[52331-52426]:VariableDeclarationStatement[57084-57179]"
    }, {
      "left" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "right" : "InputSplit[] splits = inputFormat.getSplits(conf, 10);",
      "info" : "VariableDeclarationStatement[52431-52485]:VariableDeclarationStatement[57184-57238]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[52490-52521]:ExpressionStatement[57243-57274]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n          reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader<NullWritable, VectorizedRowBatch>\n          reader = inputFormat.getRecordReader(splits[0], conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[52527-52678]:VariableDeclarationStatement[57280-57431]"
    }, {
      "left" : "NullWritable key = reader.createKey();",
      "right" : "NullWritable key = reader.createKey();",
      "info" : "VariableDeclarationStatement[52683-52721]:VariableDeclarationStatement[57436-57474]"
    }, {
      "left" : "VectorizedRowBatch value = reader.createValue();",
      "right" : "VectorizedRowBatch value = reader.createValue();",
      "info" : "VariableDeclarationStatement[52726-52774]:VariableDeclarationStatement[57479-57527]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[52779-52823]:ExpressionStatement[57532-57576]"
    }, {
      "left" : "assertEquals(100, value.count());",
      "right" : "assertEquals(100, value.count());",
      "info" : "ExpressionStatement[52828-52861]:ExpressionStatement[57581-57614]"
    }, {
      "left" : "LongColumnVector booleanColumn = (LongColumnVector) value.cols[0];",
      "right" : "LongColumnVector booleanColumn = (LongColumnVector) value.cols[0];",
      "info" : "VariableDeclarationStatement[52866-52932]:VariableDeclarationStatement[57619-57685]"
    }, {
      "left" : "LongColumnVector byteColumn = (LongColumnVector) value.cols[1];",
      "right" : "LongColumnVector byteColumn = (LongColumnVector) value.cols[1];",
      "info" : "VariableDeclarationStatement[52937-53000]:VariableDeclarationStatement[57690-57753]"
    }, {
      "left" : "LongColumnVector shortColumn = (LongColumnVector) value.cols[2];",
      "right" : "LongColumnVector shortColumn = (LongColumnVector) value.cols[2];",
      "info" : "VariableDeclarationStatement[53005-53069]:VariableDeclarationStatement[57758-57822]"
    }, {
      "left" : "LongColumnVector intColumn = (LongColumnVector) value.cols[3];",
      "right" : "LongColumnVector intColumn = (LongColumnVector) value.cols[3];",
      "info" : "VariableDeclarationStatement[53074-53136]:VariableDeclarationStatement[57827-57889]"
    }, {
      "left" : "LongColumnVector longColumn = (LongColumnVector) value.cols[4];",
      "right" : "LongColumnVector longColumn = (LongColumnVector) value.cols[4];",
      "info" : "VariableDeclarationStatement[53141-53204]:VariableDeclarationStatement[57894-57957]"
    }, {
      "left" : "DoubleColumnVector floatColumn = (DoubleColumnVector) value.cols[5];",
      "right" : "DoubleColumnVector floatColumn = (DoubleColumnVector) value.cols[5];",
      "info" : "VariableDeclarationStatement[53209-53277]:VariableDeclarationStatement[57962-58030]"
    }, {
      "left" : "DoubleColumnVector doubleCoulmn = (DoubleColumnVector) value.cols[6];",
      "right" : "DoubleColumnVector doubleCoulmn = (DoubleColumnVector) value.cols[6];",
      "info" : "VariableDeclarationStatement[53282-53351]:VariableDeclarationStatement[58035-58104]"
    }, {
      "left" : "BytesColumnVector stringColumn = (BytesColumnVector) value.cols[7];",
      "right" : "BytesColumnVector stringColumn = (BytesColumnVector) value.cols[7];",
      "info" : "VariableDeclarationStatement[53356-53423]:VariableDeclarationStatement[58109-58176]"
    }, {
      "left" : "DecimalColumnVector decimalColumn = (DecimalColumnVector) value.cols[8];",
      "right" : "DecimalColumnVector decimalColumn = (DecimalColumnVector) value.cols[8];",
      "info" : "VariableDeclarationStatement[53428-53500]:VariableDeclarationStatement[58181-58253]"
    }, {
      "left" : "LongColumnVector dateColumn = (LongColumnVector) value.cols[9];",
      "right" : "LongColumnVector dateColumn = (LongColumnVector) value.cols[9];",
      "info" : "VariableDeclarationStatement[53505-53568]:VariableDeclarationStatement[58258-58321]"
    }, {
      "left" : "LongColumnVector timestampColumn = (LongColumnVector) value.cols[10];",
      "right" : "LongColumnVector timestampColumn = (LongColumnVector) value.cols[10];",
      "info" : "VariableDeclarationStatement[53573-53642]:VariableDeclarationStatement[58326-58395]"
    }, {
      "left" : "for(int i=0; i < 100; i++)",
      "right" : "for(int i=0; i < 100; i++)",
      "info" : "ForStatement[53647-54736]:ForStatement[58400-59489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53674-54736]:Block[58427-59489]"
    }, {
      "left" : "assertEquals(\"checking boolean \" + i, i % 2 == 0 ? 1 : 0,\n          booleanColumn.vector[i]);",
      "right" : "assertEquals(\"checking boolean \" + i, i % 2 == 0 ? 1 : 0,\n          booleanColumn.vector[i]);",
      "info" : "ExpressionStatement[53682-53775]:ExpressionStatement[58435-58528]"
    }, {
      "left" : "assertEquals(\"checking byte \" + i, (byte) i,\n          byteColumn.vector[i]);",
      "right" : "assertEquals(\"checking byte \" + i, (byte) i,\n          byteColumn.vector[i]);",
      "info" : "ExpressionStatement[53782-53859]:ExpressionStatement[58535-58612]"
    }, {
      "left" : "assertEquals(\"checking short \" + i, (short) i, shortColumn.vector[i]);",
      "right" : "assertEquals(\"checking short \" + i, (short) i, shortColumn.vector[i]);",
      "info" : "ExpressionStatement[53866-53936]:ExpressionStatement[58619-58689]"
    }, {
      "left" : "assertEquals(\"checking int \" + i, i, intColumn.vector[i]);",
      "right" : "assertEquals(\"checking int \" + i, i, intColumn.vector[i]);",
      "info" : "ExpressionStatement[53943-54001]:ExpressionStatement[58696-58754]"
    }, {
      "left" : "assertEquals(\"checking long \" + i, i, longColumn.vector[i]);",
      "right" : "assertEquals(\"checking long \" + i, i, longColumn.vector[i]);",
      "info" : "ExpressionStatement[54008-54068]:ExpressionStatement[58761-58821]"
    }, {
      "left" : "assertEquals(\"checking float \" + i, i, floatColumn.vector[i], 0.0001);",
      "right" : "assertEquals(\"checking float \" + i, i, floatColumn.vector[i], 0.0001);",
      "info" : "ExpressionStatement[54075-54145]:ExpressionStatement[58828-58898]"
    }, {
      "left" : "assertEquals(\"checking double \" + i, i, doubleCoulmn.vector[i], 0.0001);",
      "right" : "assertEquals(\"checking double \" + i, i, doubleCoulmn.vector[i], 0.0001);",
      "info" : "ExpressionStatement[54152-54224]:ExpressionStatement[58905-58977]"
    }, {
      "left" : "assertEquals(\"checking string \" + i, new Text(Long.toHexString(i)),\n          stringColumn.getWritableObject(i));",
      "right" : "assertEquals(\"checking string \" + i, new Text(Long.toHexString(i)),\n          stringColumn.getWritableObject(i));",
      "info" : "ExpressionStatement[54231-54344]:ExpressionStatement[58984-59097]"
    }, {
      "left" : "assertEquals(\"checking decimal \" + i, HiveDecimal.create(i),\n          decimalColumn.vector[i].getHiveDecimal());",
      "right" : "assertEquals(\"checking decimal \" + i, HiveDecimal.create(i),\n          decimalColumn.vector[i].getHiveDecimal());",
      "info" : "ExpressionStatement[54351-54464]:ExpressionStatement[59104-59217]"
    }, {
      "left" : "assertEquals(\"checking date \" + i, i, dateColumn.vector[i]);",
      "right" : "assertEquals(\"checking date \" + i, i, dateColumn.vector[i]);",
      "info" : "ExpressionStatement[54471-54531]:ExpressionStatement[59224-59284]"
    }, {
      "left" : "long millis = (long) i * MILLIS_IN_DAY;",
      "right" : "long millis = (long) i * MILLIS_IN_DAY;",
      "info" : "VariableDeclarationStatement[54538-54577]:VariableDeclarationStatement[59291-59330]"
    }, {
      "left" : "millis -= LOCAL_TIMEZONE.getOffset(millis);",
      "right" : "millis -= LOCAL_TIMEZONE.getOffset(millis);",
      "info" : "ExpressionStatement[54584-54627]:ExpressionStatement[59337-59380]"
    }, {
      "left" : "assertEquals(\"checking timestamp \" + i, millis * 1000000L,\n          timestampColumn.vector[i]);",
      "right" : "assertEquals(\"checking timestamp \" + i, millis * 1000000L,\n          timestampColumn.vector[i]);",
      "info" : "ExpressionStatement[54634-54730]:ExpressionStatement[59387-59483]"
    }, {
      "left" : "assertEquals(false, reader.next(key, value));",
      "right" : "assertEquals(false, reader.next(key, value));",
      "info" : "ExpressionStatement[54741-54786]:ExpressionStatement[59494-59539]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[54838-54843]:MarkerAnnotation[59591-59596]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[54846-54876]:SingleMemberAnnotation[59599-59629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54879-54885]:Modifier[59632-59638]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54886-54890]:PrimitiveType[59639-59643]"
    }, {
      "left" : "testCombinationInputFormat",
      "right" : "testCombinationInputFormat",
      "info" : "SimpleName[54891-54917]:SimpleName[59644-59670]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[54927-54936]:SimpleType[59680-59689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54937-57734]:Block[59690-62487]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[54985-55017]:VariableDeclarationStatement[59738-59770]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[55022-55246]:SynchronizedStatement[59775-59999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55055-55246]:Block[59808-59999]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[55063-55240]:ExpressionStatement[59816-59993]"
    }, {
      "left" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"combination\", inspector, false, 1);",
      "right" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"combination\", inspector, false, 1);",
      "info" : "VariableDeclarationStatement[55251-55372]:VariableDeclarationStatement[60004-60125]"
    }, {
      "left" : "Path partDir = new Path(conf.get(\"mapred.input.dir\"));",
      "right" : "Path partDir = new Path(conf.get(\"mapred.input.dir\"));",
      "info" : "VariableDeclarationStatement[55428-55482]:VariableDeclarationStatement[60181-60235]"
    }, {
      "left" : "Writer writer =\n        OrcFile.createWriter(new Path(partDir, \"0_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "right" : "Writer writer =\n        OrcFile.createWriter(new Path(partDir, \"0_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "info" : "VariableDeclarationStatement[55487-55674]:VariableDeclarationStatement[60240-60427]"
    }, {
      "left" : "for(int i=0; i < 10; ++i)",
      "right" : "for(int i=0; i < 10; ++i)",
      "info" : "ForStatement[55679-55752]:ForStatement[60432-60505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55705-55752]:Block[60458-60505]"
    }, {
      "left" : "writer.addRow(new MyRow(i, 2*i));",
      "right" : "writer.addRow(new MyRow(i, 2*i));",
      "info" : "ExpressionStatement[55713-55746]:ExpressionStatement[60466-60499]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[55757-55772]:ExpressionStatement[60510-60525]"
    }, {
      "left" : "MockOutputStream outputStream = (MockOutputStream) ((WriterImpl) writer).getStream();",
      "right" : "MockOutputStream outputStream = (MockOutputStream) ((WriterImpl) writer).getStream();",
      "info" : "VariableDeclarationStatement[55777-55862]:VariableDeclarationStatement[60530-60615]"
    }, {
      "left" : "outputStream.setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "right" : "outputStream.setBlocks(new MockBlock(\"host0\", \"host1\"));",
      "info" : "ExpressionStatement[55867-55923]:ExpressionStatement[60620-60676]"
    }, {
      "left" : "int length0 = outputStream.file.length;",
      "right" : "int length0 = outputStream.file.length;",
      "info" : "VariableDeclarationStatement[55928-55967]:VariableDeclarationStatement[60681-60720]"
    }, {
      "left" : "writer =\n        OrcFile.createWriter(new Path(partDir, \"1_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "right" : "writer =\n        OrcFile.createWriter(new Path(partDir, \"1_0\"),\n            OrcFile.writerOptions(conf).blockPadding(false)\n                .bufferSize(1024).inspector(inspector));",
      "info" : "ExpressionStatement[55972-56152]:ExpressionStatement[60725-60905]"
    }, {
      "left" : "for(int i=10; i < 20; ++i)",
      "right" : "for(int i=10; i < 20; ++i)",
      "info" : "ForStatement[56157-56231]:ForStatement[60910-60984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56184-56231]:Block[60937-60984]"
    }, {
      "left" : "writer.addRow(new MyRow(i, 2*i));",
      "right" : "writer.addRow(new MyRow(i, 2*i));",
      "info" : "ExpressionStatement[56192-56225]:ExpressionStatement[60945-60978]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[56236-56251]:ExpressionStatement[60989-61004]"
    }, {
      "left" : "outputStream = (MockOutputStream) ((WriterImpl) writer).getStream();",
      "right" : "outputStream = (MockOutputStream) ((WriterImpl) writer).getStream();",
      "info" : "ExpressionStatement[56256-56324]:ExpressionStatement[61009-61077]"
    }, {
      "left" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "right" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "info" : "ExpressionStatement[56329-56385]:ExpressionStatement[61082-61138]"
    }, {
      "left" : "HiveInputFormat<?,?> inputFormat =\n        new CombineHiveInputFormat<WritableComparable, Writable>();",
      "right" : "HiveInputFormat<?,?> inputFormat =\n        new CombineHiveInputFormat<WritableComparable, Writable>();",
      "info" : "VariableDeclarationStatement[56413-56515]:VariableDeclarationStatement[61166-61268]"
    }, {
      "left" : "InputSplit[] splits = inputFormat.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = inputFormat.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[56520-56573]:VariableDeclarationStatement[61273-61326]"
    }, {
      "left" : "assertEquals(1, splits.length);",
      "right" : "assertEquals(1, splits.length);",
      "info" : "ExpressionStatement[56578-56609]:ExpressionStatement[61331-61362]"
    }, {
      "left" : "CombineHiveInputFormat.CombineHiveInputSplit split =\n        (CombineHiveInputFormat.CombineHiveInputSplit) splits[0];",
      "right" : "CombineHiveInputFormat.CombineHiveInputSplit split =\n        (CombineHiveInputFormat.CombineHiveInputSplit) splits[0];",
      "info" : "VariableDeclarationStatement[56614-56732]:VariableDeclarationStatement[61367-61485]"
    }, {
      "left" : "assertEquals(2, split.getNumPaths());",
      "right" : "assertEquals(2, split.getNumPaths());",
      "info" : "ExpressionStatement[56757-56794]:ExpressionStatement[61510-61547]"
    }, {
      "left" : "assertEquals(partDir.toString() + \"/0_0\", split.getPath(0).toString());",
      "right" : "assertEquals(partDir.toString() + \"/0_0\", split.getPath(0).toString());",
      "info" : "ExpressionStatement[56799-56870]:ExpressionStatement[61552-61623]"
    }, {
      "left" : "assertEquals(partDir.toString() + \"/1_0\", split.getPath(1).toString());",
      "right" : "assertEquals(partDir.toString() + \"/1_0\", split.getPath(1).toString());",
      "info" : "ExpressionStatement[56875-56946]:ExpressionStatement[61628-61699]"
    }, {
      "left" : "assertEquals(length0, split.getLength(0));",
      "right" : "assertEquals(length0, split.getLength(0));",
      "info" : "ExpressionStatement[56951-56993]:ExpressionStatement[61704-61746]"
    }, {
      "left" : "assertEquals(outputStream.file.length, split.getLength(1));",
      "right" : "assertEquals(outputStream.file.length, split.getLength(1));",
      "info" : "ExpressionStatement[56998-57057]:ExpressionStatement[61751-61810]"
    }, {
      "left" : "assertEquals(0, split.getOffset(0));",
      "right" : "assertEquals(0, split.getOffset(0));",
      "info" : "ExpressionStatement[57062-57098]:ExpressionStatement[61815-61851]"
    }, {
      "left" : "assertEquals(0, split.getOffset(1));",
      "right" : "assertEquals(0, split.getOffset(1));",
      "info" : "ExpressionStatement[57103-57139]:ExpressionStatement[61856-61892]"
    }, {
      "left" : "assertTrue(3 >= split.getLocations().length);",
      "right" : "assertTrue(3 >= split.getLocations().length);",
      "info" : "ExpressionStatement[57226-57271]:ExpressionStatement[61979-62024]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<CombineHiveKey, OrcStruct> reader =\n        inputFormat.getRecordReader(split, conf, Reporter.NULL);",
      "right" : "org.apache.hadoop.mapred.RecordReader<CombineHiveKey, OrcStruct> reader =\n        inputFormat.getRecordReader(split, conf, Reporter.NULL);",
      "info" : "VariableDeclarationStatement[57295-57433]:VariableDeclarationStatement[62048-62186]"
    }, {
      "left" : "CombineHiveKey key = reader.createKey();",
      "right" : "CombineHiveKey key = reader.createKey();",
      "info" : "VariableDeclarationStatement[57438-57478]:VariableDeclarationStatement[62191-62231]"
    }, {
      "left" : "OrcStruct value = reader.createValue();",
      "right" : "OrcStruct value = reader.createValue();",
      "info" : "VariableDeclarationStatement[57483-57522]:VariableDeclarationStatement[62236-62275]"
    }, {
      "left" : "for(int i=0; i < 20; i++)",
      "right" : "for(int i=0; i < 20; i++)",
      "info" : "ForStatement[57527-57680]:ForStatement[62280-62433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57553-57680]:Block[62306-62433]"
    }, {
      "left" : "assertEquals(true, reader.next(key, value));",
      "right" : "assertEquals(true, reader.next(key, value));",
      "info" : "ExpressionStatement[57561-57605]:ExpressionStatement[62314-62358]"
    }, {
      "left" : "assertEquals(i, ((IntWritable) value.getFieldValue(0)).get());",
      "right" : "assertEquals(i, ((IntWritable) value.getFieldValue(0)).get());",
      "info" : "ExpressionStatement[57612-57674]:ExpressionStatement[62365-62427]"
    }, {
      "left" : "assertEquals(false, reader.next(key, value));",
      "right" : "assertEquals(false, reader.next(key, value));",
      "info" : "ExpressionStatement[57685-57730]:ExpressionStatement[62438-62483]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[57778-57783]:MarkerAnnotation[62531-62536]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57786-57792]:Modifier[62539-62545]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57793-57797]:PrimitiveType[62546-62550]"
    }, {
      "left" : "testCombinationInputFormatWithAcid",
      "right" : "testCombinationInputFormatWithAcid",
      "info" : "SimpleName[57798-57832]:SimpleName[62551-62585]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[57842-57851]:SimpleType[62595-62604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57852-61783]:Block[62605-66536]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[57900-57932]:VariableDeclarationStatement[62653-62685]"
    }, {
      "left" : "final int PARTITIONS = 2;",
      "right" : "final int PARTITIONS = 2;",
      "info" : "VariableDeclarationStatement[57937-57962]:VariableDeclarationStatement[62690-62715]"
    }, {
      "left" : "final int BUCKETS = 3;",
      "right" : "final int BUCKETS = 3;",
      "info" : "VariableDeclarationStatement[57967-57989]:VariableDeclarationStatement[62720-62742]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[57994-58218]:SynchronizedStatement[62747-62971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58027-58218]:Block[62780-62971]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[58035-58212]:ExpressionStatement[62788-62965]"
    }, {
      "left" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"combinationAcid\", inspector, false, PARTITIONS);",
      "right" : "JobConf conf = createMockExecutionEnvironment(workDir, new Path(\"mock:///\"),\n        \"combinationAcid\", inspector, false, PARTITIONS);",
      "info" : "VariableDeclarationStatement[58223-58357]:VariableDeclarationStatement[62976-63110]"
    }, {
      "left" : "Path[] partDir = new Path[PARTITIONS];",
      "right" : "Path[] partDir = new Path[PARTITIONS];",
      "info" : "VariableDeclarationStatement[58413-58451]:VariableDeclarationStatement[63166-63204]"
    }, {
      "left" : "String[] paths = conf.getStrings(\"mapred.input.dir\");",
      "right" : "String[] paths = conf.getStrings(\"mapred.input.dir\");",
      "info" : "VariableDeclarationStatement[58456-58509]:VariableDeclarationStatement[63209-63262]"
    }, {
      "left" : "for(int p=0; p < PARTITIONS; ++p)",
      "right" : "for(int p=0; p < PARTITIONS; ++p)",
      "info" : "ForStatement[58514-58594]:ForStatement[63267-63347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58548-58594]:Block[63301-63347]"
    }, {
      "left" : "partDir[p] = new Path(paths[p]);",
      "right" : "partDir[p] = new Path(paths[p]);",
      "info" : "ExpressionStatement[58556-58588]:ExpressionStatement[63309-63341]"
    }, {
      "left" : "OrcRecordUpdater writer = new OrcRecordUpdater(partDir[0],\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(0).inspector(inspector));",
      "right" : "OrcRecordUpdater writer = new OrcRecordUpdater(partDir[0],\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(0).inspector(inspector));",
      "info" : "VariableDeclarationStatement[58640-58830]:VariableDeclarationStatement[63393-63583]"
    }, {
      "left" : "for(int i=0; i < 10; ++i)",
      "right" : "for(int i=0; i < 10; ++i)",
      "info" : "ForStatement[58835-58914]:ForStatement[63588-63667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58861-58914]:Block[63614-63667]"
    }, {
      "left" : "writer.insert(10, new MyRow(i, 2 * i));",
      "right" : "writer.insert(10, new MyRow(i, 2 * i));",
      "info" : "ExpressionStatement[58869-58908]:ExpressionStatement[63622-63661]"
    }, {
      "left" : "WriterImpl baseWriter = (WriterImpl) writer.getWriter();",
      "right" : "WriterImpl baseWriter = (WriterImpl) writer.getWriter();",
      "info" : "VariableDeclarationStatement[58919-58975]:VariableDeclarationStatement[63672-63728]"
    }, {
      "left" : "writer.close(false);",
      "right" : "writer.close(false);",
      "info" : "ExpressionStatement[58980-59000]:ExpressionStatement[63733-63753]"
    }, {
      "left" : "MockOutputStream outputStream = (MockOutputStream) baseWriter.getStream();",
      "right" : "MockOutputStream outputStream = (MockOutputStream) baseWriter.getStream();",
      "info" : "VariableDeclarationStatement[59006-59080]:VariableDeclarationStatement[63759-63833]"
    }, {
      "left" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "right" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "info" : "ExpressionStatement[59085-59141]:ExpressionStatement[63838-63894]"
    }, {
      "left" : "writer = new OrcRecordUpdater(partDir[0],\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(1).inspector(inspector));",
      "right" : "writer = new OrcRecordUpdater(partDir[0],\n        new AcidOutputFormat.Options(conf).maximumTransactionId(10)\n            .writingBase(true).bucket(1).inspector(inspector));",
      "info" : "ExpressionStatement[59188-59361]:ExpressionStatement[63941-64114]"
    }, {
      "left" : "for(int i=10; i < 20; ++i)",
      "right" : "for(int i=10; i < 20; ++i)",
      "info" : "ForStatement[59366-59444]:ForStatement[64119-64197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59393-59444]:Block[64146-64197]"
    }, {
      "left" : "writer.insert(10, new MyRow(i, 2*i));",
      "right" : "writer.insert(10, new MyRow(i, 2*i));",
      "info" : "ExpressionStatement[59401-59438]:ExpressionStatement[64154-64191]"
    }, {
      "left" : "WriterImpl deltaWriter = (WriterImpl) writer.getWriter();",
      "right" : "WriterImpl deltaWriter = (WriterImpl) writer.getWriter();",
      "info" : "VariableDeclarationStatement[59449-59506]:VariableDeclarationStatement[64202-64259]"
    }, {
      "left" : "outputStream = (MockOutputStream) deltaWriter.getStream();",
      "right" : "outputStream = (MockOutputStream) deltaWriter.getStream();",
      "info" : "ExpressionStatement[59511-59569]:ExpressionStatement[64264-64322]"
    }, {
      "left" : "writer.close(false);",
      "right" : "writer.close(false);",
      "info" : "ExpressionStatement[59574-59594]:ExpressionStatement[64327-64347]"
    }, {
      "left" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "right" : "outputStream.setBlocks(new MockBlock(\"host1\", \"host2\"));",
      "info" : "ExpressionStatement[59599-59655]:ExpressionStatement[64352-64408]"
    }, {
      "left" : "for(int bucket=0; bucket < BUCKETS; ++bucket)",
      "right" : "for(int bucket=0; bucket < BUCKETS; ++bucket)",
      "info" : "ForStatement[59701-60184]:ForStatement[64454-64937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59747-60184]:Block[64500-64937]"
    }, {
      "left" : "Writer orc = OrcFile.createWriter(\n          new Path(partDir[1], \"00000\" + bucket + \"_0\"),\n          OrcFile.writerOptions(conf)\n              .blockPadding(false)\n              .bufferSize(1024)\n              .inspector(inspector));",
      "right" : "Writer orc = OrcFile.createWriter(\n          new Path(partDir[1], \"00000\" + bucket + \"_0\"),\n          OrcFile.writerOptions(conf)\n              .blockPadding(false)\n              .bufferSize(1024)\n              .inspector(inspector));",
      "info" : "VariableDeclarationStatement[59755-59989]:VariableDeclarationStatement[64508-64742]"
    }, {
      "left" : "orc.addRow(new MyRow(1, 2));",
      "right" : "orc.addRow(new MyRow(1, 2));",
      "info" : "ExpressionStatement[59996-60024]:ExpressionStatement[64749-64777]"
    }, {
      "left" : "outputStream = (MockOutputStream) ((WriterImpl) orc).getStream();",
      "right" : "outputStream = (MockOutputStream) ((WriterImpl) orc).getStream();",
      "info" : "ExpressionStatement[60031-60096]:ExpressionStatement[64784-64849]"
    }, {
      "left" : "orc.close();",
      "right" : "orc.close();",
      "info" : "ExpressionStatement[60103-60115]:ExpressionStatement[64856-64868]"
    }, {
      "left" : "outputStream.setBlocks(new MockBlock(\"host3\", \"host4\"));",
      "right" : "outputStream.setBlocks(new MockBlock(\"host3\", \"host4\"));",
      "info" : "ExpressionStatement[60122-60178]:ExpressionStatement[64875-64931]"
    }, {
      "left" : "conf.setInt(hive_metastoreConstants.BUCKET_COUNT, BUCKETS);",
      "right" : "conf.setInt(hive_metastoreConstants.BUCKET_COUNT, BUCKETS);",
      "info" : "ExpressionStatement[60212-60271]:ExpressionStatement[64965-65024]"
    }, {
      "left" : "HiveInputFormat<?,?> inputFormat =\n        new CombineHiveInputFormat<WritableComparable, Writable>();",
      "right" : "HiveInputFormat<?,?> inputFormat =\n        new CombineHiveInputFormat<WritableComparable, Writable>();",
      "info" : "VariableDeclarationStatement[60276-60378]:VariableDeclarationStatement[65029-65131]"
    }, {
      "left" : "InputSplit[] splits = inputFormat.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = inputFormat.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[60383-60436]:VariableDeclarationStatement[65136-65189]"
    }, {
      "left" : "assertEquals(3, splits.length);",
      "right" : "assertEquals(3, splits.length);",
      "info" : "ExpressionStatement[60441-60472]:ExpressionStatement[65194-65225]"
    }, {
      "left" : "HiveInputFormat.HiveInputSplit split =\n        (HiveInputFormat.HiveInputSplit) splits[0];",
      "right" : "HiveInputFormat.HiveInputSplit split =\n        (HiveInputFormat.HiveInputSplit) splits[0];",
      "info" : "VariableDeclarationStatement[60477-60567]:VariableDeclarationStatement[65230-65320]"
    }, {
      "left" : "assertEquals(\"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\",\n        split.inputFormatClassName());",
      "right" : "assertEquals(\"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\",\n        split.inputFormatClassName());",
      "info" : "ExpressionStatement[60572-60674]:ExpressionStatement[65325-65427]"
    }, {
      "left" : "assertEquals(\"mock:/combinationAcid/p=0/base_0000010/bucket_00000\",\n        split.getPath().toString());",
      "right" : "assertEquals(\"mock:/combinationAcid/p=0/base_0000010/bucket_00000\",\n        split.getPath().toString());",
      "info" : "ExpressionStatement[60679-60783]:ExpressionStatement[65432-65536]"
    }, {
      "left" : "assertEquals(0, split.getStart());",
      "right" : "assertEquals(0, split.getStart());",
      "info" : "ExpressionStatement[60788-60822]:ExpressionStatement[65541-65575]"
    }, {
      "left" : "assertEquals(625, split.getLength());",
      "right" : "assertEquals(625, split.getLength());",
      "info" : "ExpressionStatement[60827-60864]:ExpressionStatement[65580-65617]"
    }, {
      "left" : "split = (HiveInputFormat.HiveInputSplit) splits[1];",
      "right" : "split = (HiveInputFormat.HiveInputSplit) splits[1];",
      "info" : "ExpressionStatement[60869-60920]:ExpressionStatement[65622-65673]"
    }, {
      "left" : "assertEquals(\"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\",\n        split.inputFormatClassName());",
      "right" : "assertEquals(\"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\",\n        split.inputFormatClassName());",
      "info" : "ExpressionStatement[60925-61027]:ExpressionStatement[65678-65780]"
    }, {
      "left" : "assertEquals(\"mock:/combinationAcid/p=0/base_0000010/bucket_00001\",\n        split.getPath().toString());",
      "right" : "assertEquals(\"mock:/combinationAcid/p=0/base_0000010/bucket_00001\",\n        split.getPath().toString());",
      "info" : "ExpressionStatement[61032-61136]:ExpressionStatement[65785-65889]"
    }, {
      "left" : "assertEquals(0, split.getStart());",
      "right" : "assertEquals(0, split.getStart());",
      "info" : "ExpressionStatement[61141-61175]:ExpressionStatement[65894-65928]"
    }, {
      "left" : "assertEquals(647, split.getLength());",
      "right" : "assertEquals(647, split.getLength());",
      "info" : "ExpressionStatement[61180-61217]:ExpressionStatement[65933-65970]"
    }, {
      "left" : "CombineHiveInputFormat.CombineHiveInputSplit combineSplit =\n        (CombineHiveInputFormat.CombineHiveInputSplit) splits[2];",
      "right" : "CombineHiveInputFormat.CombineHiveInputSplit combineSplit =\n        (CombineHiveInputFormat.CombineHiveInputSplit) splits[2];",
      "info" : "VariableDeclarationStatement[61222-61347]:VariableDeclarationStatement[65975-66100]"
    }, {
      "left" : "assertEquals(BUCKETS, combineSplit.getNumPaths());",
      "right" : "assertEquals(BUCKETS, combineSplit.getNumPaths());",
      "info" : "ExpressionStatement[61352-61402]:ExpressionStatement[66105-66155]"
    }, {
      "left" : "for(int bucket=0; bucket < BUCKETS; ++bucket)",
      "right" : "for(int bucket=0; bucket < BUCKETS; ++bucket)",
      "info" : "ForStatement[61407-61694]:ForStatement[66160-66447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61453-61694]:Block[66206-66447]"
    }, {
      "left" : "assertEquals(\"mock:/combinationAcid/p=1/00000\" + bucket + \"_0\",\n          combineSplit.getPath(bucket).toString());",
      "right" : "assertEquals(\"mock:/combinationAcid/p=1/00000\" + bucket + \"_0\",\n          combineSplit.getPath(bucket).toString());",
      "info" : "ExpressionStatement[61461-61576]:ExpressionStatement[66214-66329]"
    }, {
      "left" : "assertEquals(0, combineSplit.getOffset(bucket));",
      "right" : "assertEquals(0, combineSplit.getOffset(bucket));",
      "info" : "ExpressionStatement[61583-61631]:ExpressionStatement[66336-66384]"
    }, {
      "left" : "assertEquals(253, combineSplit.getLength(bucket));",
      "right" : "assertEquals(253, combineSplit.getLength(bucket));",
      "info" : "ExpressionStatement[61638-61688]:ExpressionStatement[66391-66441]"
    }, {
      "left" : "String[] hosts = combineSplit.getLocations();",
      "right" : "String[] hosts = combineSplit.getLocations();",
      "info" : "VariableDeclarationStatement[61699-61744]:VariableDeclarationStatement[66452-66497]"
    }, {
      "left" : "assertEquals(2, hosts.length);",
      "right" : "assertEquals(2, hosts.length);",
      "info" : "ExpressionStatement[61749-61779]:ExpressionStatement[66502-66532]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[61787-61792]:MarkerAnnotation[66540-66545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61795-61801]:Modifier[66548-66554]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61802-61806]:PrimitiveType[66555-66559]"
    }, {
      "left" : "testSetSearchArgument",
      "right" : "testSetSearchArgument",
      "info" : "SimpleName[61807-61828]:SimpleName[66560-66581]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[61838-61847]:SimpleType[66591-66600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61848-63810]:Block[66601-68563]"
    }, {
      "left" : "Reader.Options options = new Reader.Options();",
      "right" : "Reader.Options options = new Reader.Options();",
      "info" : "VariableDeclarationStatement[61854-61900]:VariableDeclarationStatement[66607-66653]"
    }, {
      "left" : "List<OrcProto.Type> types = new ArrayList<OrcProto.Type>();",
      "right" : "List<OrcProto.Type> types = new ArrayList<OrcProto.Type>();",
      "info" : "VariableDeclarationStatement[61905-61964]:VariableDeclarationStatement[66658-66717]"
    }, {
      "left" : "OrcProto.Type.Builder builder = OrcProto.Type.newBuilder();",
      "right" : "OrcProto.Type.Builder builder = OrcProto.Type.newBuilder();",
      "info" : "VariableDeclarationStatement[61969-62028]:VariableDeclarationStatement[66722-66781]"
    }, {
      "left" : "builder.setKind(OrcProto.Type.Kind.STRUCT)\n        .addAllFieldNames(Arrays.asList(\"op\", \"otid\", \"bucket\", \"rowid\", \"ctid\",\n            \"row\"))\n        .addAllSubtypes(Arrays.asList(1,2,3,4,5,6));",
      "right" : "builder.setKind(OrcProto.Type.Kind.STRUCT)\n        .addAllFieldNames(Arrays.asList(\"op\", \"otid\", \"bucket\", \"rowid\", \"ctid\",\n            \"row\"))\n        .addAllSubtypes(Arrays.asList(1,2,3,4,5,6));",
      "info" : "ExpressionStatement[62033-62229]:ExpressionStatement[66786-66982]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62234-62261]:ExpressionStatement[66987-67014]"
    }, {
      "left" : "builder.clear().setKind(OrcProto.Type.Kind.INT);",
      "right" : "builder.clear().setKind(OrcProto.Type.Kind.INT);",
      "info" : "ExpressionStatement[62266-62314]:ExpressionStatement[67019-67067]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62319-62346]:ExpressionStatement[67072-67099]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62351-62378]:ExpressionStatement[67104-67131]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62383-62410]:ExpressionStatement[67136-67163]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62415-62442]:ExpressionStatement[67168-67195]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62447-62474]:ExpressionStatement[67200-67227]"
    }, {
      "left" : "builder.clear().setKind(OrcProto.Type.Kind.STRUCT)\n        .addAllFieldNames(Arrays.asList(\"url\", \"purchase\", \"cost\", \"store\"))\n        .addAllSubtypes(Arrays.asList(7, 8, 9, 10));",
      "right" : "builder.clear().setKind(OrcProto.Type.Kind.STRUCT)\n        .addAllFieldNames(Arrays.asList(\"url\", \"purchase\", \"cost\", \"store\"))\n        .addAllSubtypes(Arrays.asList(7, 8, 9, 10));",
      "info" : "ExpressionStatement[62479-62659]:ExpressionStatement[67232-67412]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62664-62691]:ExpressionStatement[67417-67444]"
    }, {
      "left" : "builder.clear().setKind(OrcProto.Type.Kind.STRING);",
      "right" : "builder.clear().setKind(OrcProto.Type.Kind.STRING);",
      "info" : "ExpressionStatement[62696-62747]:ExpressionStatement[67449-67500]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62752-62779]:ExpressionStatement[67505-67532]"
    }, {
      "left" : "builder.clear().setKind(OrcProto.Type.Kind.INT);",
      "right" : "builder.clear().setKind(OrcProto.Type.Kind.INT);",
      "info" : "ExpressionStatement[62784-62832]:ExpressionStatement[67537-67585]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62837-62864]:ExpressionStatement[67590-67617]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62869-62896]:ExpressionStatement[67622-67649]"
    }, {
      "left" : "types.add(builder.build());",
      "right" : "types.add(builder.build());",
      "info" : "ExpressionStatement[62901-62928]:ExpressionStatement[67654-67681]"
    }, {
      "left" : "SearchArgument isNull = SearchArgumentFactory.newBuilder()\n        .startAnd().isNull(\"cost\").end().build();",
      "right" : "SearchArgument isNull = SearchArgumentFactory.newBuilder()\n        .startAnd().isNull(\"cost\").end().build();",
      "info" : "VariableDeclarationStatement[62933-63041]:VariableDeclarationStatement[67686-67794]"
    }, {
      "left" : "conf.set(SearchArgumentFactory.SARG_PUSHDOWN, isNull.toKryo());",
      "right" : "conf.set(SearchArgumentFactory.SARG_PUSHDOWN, isNull.toKryo());",
      "info" : "ExpressionStatement[63046-63109]:ExpressionStatement[67799-67862]"
    }, {
      "left" : "conf.set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n        \"url,cost\");",
      "right" : "conf.set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n        \"url,cost\");",
      "info" : "ExpressionStatement[63114-63193]:ExpressionStatement[67867-67946]"
    }, {
      "left" : "options.include(new boolean[]{true, true, false, true, false});",
      "right" : "options.include(new boolean[]{true, true, false, true, false});",
      "info" : "ExpressionStatement[63198-63261]:ExpressionStatement[67951-68014]"
    }, {
      "left" : "OrcInputFormat.setSearchArgument(options, types, conf, false);",
      "right" : "OrcInputFormat.setSearchArgument(options, types, conf, false);",
      "info" : "ExpressionStatement[63266-63328]:ExpressionStatement[68019-68081]"
    }, {
      "left" : "String[] colNames = options.getColumnNames();",
      "right" : "String[] colNames = options.getColumnNames();",
      "info" : "VariableDeclarationStatement[63333-63378]:VariableDeclarationStatement[68086-68131]"
    }, {
      "left" : "assertEquals(null, colNames[0]);",
      "right" : "assertEquals(null, colNames[0]);",
      "info" : "ExpressionStatement[63383-63415]:ExpressionStatement[68136-68168]"
    }, {
      "left" : "assertEquals(\"url\", colNames[1]);",
      "right" : "assertEquals(\"url\", colNames[1]);",
      "info" : "ExpressionStatement[63420-63453]:ExpressionStatement[68173-68206]"
    }, {
      "left" : "assertEquals(null, colNames[2]);",
      "right" : "assertEquals(null, colNames[2]);",
      "info" : "ExpressionStatement[63458-63490]:ExpressionStatement[68211-68243]"
    }, {
      "left" : "assertEquals(\"cost\", colNames[3]);",
      "right" : "assertEquals(\"cost\", colNames[3]);",
      "info" : "ExpressionStatement[63495-63529]:ExpressionStatement[68248-68282]"
    }, {
      "left" : "assertEquals(null, colNames[4]);",
      "right" : "assertEquals(null, colNames[4]);",
      "info" : "ExpressionStatement[63534-63566]:ExpressionStatement[68287-68319]"
    }, {
      "left" : "SearchArgument arg = options.getSearchArgument();",
      "right" : "SearchArgument arg = options.getSearchArgument();",
      "info" : "VariableDeclarationStatement[63571-63620]:VariableDeclarationStatement[68324-68373]"
    }, {
      "left" : "List<PredicateLeaf> leaves = arg.getLeaves();",
      "right" : "List<PredicateLeaf> leaves = arg.getLeaves();",
      "info" : "VariableDeclarationStatement[63625-63670]:VariableDeclarationStatement[68378-68423]"
    }, {
      "left" : "assertEquals(\"cost\", leaves.get(0).getColumnName());",
      "right" : "assertEquals(\"cost\", leaves.get(0).getColumnName());",
      "info" : "ExpressionStatement[63675-63727]:ExpressionStatement[68428-68480]"
    }, {
      "left" : "assertEquals(PredicateLeaf.Operator.IS_NULL, leaves.get(0).getOperator());",
      "right" : "assertEquals(PredicateLeaf.Operator.IS_NULL, leaves.get(0).getOperator());",
      "info" : "ExpressionStatement[63732-63806]:ExpressionStatement[68485-68559]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[63814-63819]:MarkerAnnotation[68567-68572]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "right" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "info" : "SingleMemberAnnotation[63822-63864]:SingleMemberAnnotation[68575-68617]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63867-63873]:Modifier[68620-68626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63874-63878]:PrimitiveType[68627-68631]"
    }, {
      "left" : "testSplitElimination",
      "right" : "testSplitElimination",
      "info" : "SimpleName[63879-63899]:SimpleName[68632-68652]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[63909-63918]:SimpleType[68662-68671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63919-65575]:Block[68672-70328]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[63925-63966]:VariableDeclarationStatement[68678-68719]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[63971-64003]:VariableDeclarationStatement[68724-68756]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[64008-64236]:SynchronizedStatement[68761-68989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64041-64236]:Block[68794-68989]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[64049-64230]:ExpressionStatement[68802-68983]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[64241-64270]:VariableDeclarationStatement[68994-69023]"
    }, {
      "left" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[64275-64328]:VariableDeclarationStatement[69028-69081]"
    }, {
      "left" : "conf.setInt(\"mapred.max.split.size\", 50);",
      "right" : "conf.setInt(\"mapred.max.split.size\", 50);",
      "info" : "ExpressionStatement[64333-64374]:ExpressionStatement[69086-69127]"
    }, {
      "left" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "right" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "info" : "VariableDeclarationStatement[64379-64497]:VariableDeclarationStatement[69132-69250]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(1,2,3), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(1,2,3), inspector));",
      "info" : "ExpressionStatement[64502-64593]:ExpressionStatement[69255-69346]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(4,5,6), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(4,5,6), inspector));",
      "info" : "ExpressionStatement[64598-64689]:ExpressionStatement[69351-69442]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(7,8,9), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new NestedRow(7,8,9), inspector));",
      "info" : "ExpressionStatement[64694-64785]:ExpressionStatement[69447-69538]"
    }, {
      "left" : "writer.close(Reporter.NULL);",
      "right" : "writer.close(Reporter.NULL);",
      "info" : "ExpressionStatement[64790-64818]:ExpressionStatement[69543-69571]"
    }, {
      "left" : "serde = new OrcSerde();",
      "right" : "serde = new OrcSerde();",
      "info" : "ExpressionStatement[64823-64846]:ExpressionStatement[69576-69599]"
    }, {
      "left" : "SearchArgument sarg =\n        SearchArgumentFactory.newBuilder()\n            .startAnd()\n            .lessThan(\"z\", new Integer(0))\n            .end()\n            .build();",
      "right" : "SearchArgument sarg =\n        SearchArgumentFactory.newBuilder()\n            .startAnd()\n            .lessThan(\"z\", new Integer(0))\n            .end()\n            .build();",
      "info" : "VariableDeclarationStatement[64851-65023]:VariableDeclarationStatement[69604-69776]"
    }, {
      "left" : "conf.set(\"sarg.pushdown\", sarg.toKryo());",
      "right" : "conf.set(\"sarg.pushdown\", sarg.toKryo());",
      "info" : "ExpressionStatement[65028-65069]:ExpressionStatement[69781-69822]"
    }, {
      "left" : "conf.set(\"hive.io.file.readcolumn.names\", \"z,r\");",
      "right" : "conf.set(\"hive.io.file.readcolumn.names\", \"z,r\");",
      "info" : "ExpressionStatement[65074-65123]:ExpressionStatement[69827-69876]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"z,r\");",
      "right" : "properties.setProperty(\"columns\", \"z,r\");",
      "info" : "ExpressionStatement[65128-65169]:ExpressionStatement[69881-69922]"
    }, {
      "left" : "properties.setProperty(\"columns.types\", \"int:struct<x:int,y:int>\");",
      "right" : "properties.setProperty(\"columns.types\", \"int:struct<x:int,y:int>\");",
      "info" : "ExpressionStatement[65174-65241]:ExpressionStatement[69927-69994]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[65246-65304]:ExpressionStatement[69999-70057]"
    }, {
      "left" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "right" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "info" : "ExpressionStatement[65309-65372]:ExpressionStatement[70062-70125]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[65377-65420]:VariableDeclarationStatement[70130-70173]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[65425-65486]:ExpressionStatement[70178-70239]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[65491-65535]:VariableDeclarationStatement[70244-70288]"
    }, {
      "left" : "assertEquals(0, splits.length);",
      "right" : "assertEquals(0, splits.length);",
      "info" : "ExpressionStatement[65540-65571]:ExpressionStatement[70293-70324]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[65579-65584]:MarkerAnnotation[70332-70337]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "right" : "@SuppressWarnings(\"unchecked,deprecation\")",
      "info" : "SingleMemberAnnotation[65587-65629]:SingleMemberAnnotation[70340-70382]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65632-65638]:Modifier[70385-70391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65639-65643]:PrimitiveType[70392-70396]"
    }, {
      "left" : "testSplitEliminationNullStats",
      "right" : "testSplitEliminationNullStats",
      "info" : "SimpleName[65644-65673]:SimpleName[70397-70426]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[65683-65692]:SimpleType[70436-70445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65693-67328]:Block[70446-72081]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[65699-65740]:VariableDeclarationStatement[70452-70493]"
    }, {
      "left" : "StructObjectInspector inspector;",
      "right" : "StructObjectInspector inspector;",
      "info" : "VariableDeclarationStatement[65745-65777]:VariableDeclarationStatement[70498-70530]"
    }, {
      "left" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(SimpleRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "right" : "synchronized (TestOrcFile.class) {\n      inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(SimpleRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n    }",
      "info" : "SynchronizedStatement[65782-66010]:SynchronizedStatement[70535-70763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65815-66010]:Block[70568-70763]"
    }, {
      "left" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(SimpleRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "right" : "inspector = (StructObjectInspector)\n          ObjectInspectorFactory.getReflectionObjectInspector(SimpleRow.class,\n              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);",
      "info" : "ExpressionStatement[65823-66004]:ExpressionStatement[70576-70757]"
    }, {
      "left" : "SerDe serde = new OrcSerde();",
      "right" : "SerDe serde = new OrcSerde();",
      "info" : "VariableDeclarationStatement[66015-66044]:VariableDeclarationStatement[70768-70797]"
    }, {
      "left" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "right" : "OutputFormat<?, ?> outFormat = new OrcOutputFormat();",
      "info" : "VariableDeclarationStatement[66049-66102]:VariableDeclarationStatement[70802-70855]"
    }, {
      "left" : "conf.setInt(\"mapred.max.split.size\", 50);",
      "right" : "conf.setInt(\"mapred.max.split.size\", 50);",
      "info" : "ExpressionStatement[66107-66148]:ExpressionStatement[70860-70901]"
    }, {
      "left" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "right" : "RecordWriter writer =\n        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n            Reporter.NULL);",
      "info" : "VariableDeclarationStatement[66153-66271]:VariableDeclarationStatement[70906-71024]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "info" : "ExpressionStatement[66276-66366]:ExpressionStatement[71029-71119]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "info" : "ExpressionStatement[66371-66461]:ExpressionStatement[71124-71214]"
    }, {
      "left" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "right" : "writer.write(NullWritable.get(),\n        serde.serialize(new SimpleRow(null), inspector));",
      "info" : "ExpressionStatement[66466-66556]:ExpressionStatement[71219-71309]"
    }, {
      "left" : "writer.close(Reporter.NULL);",
      "right" : "writer.close(Reporter.NULL);",
      "info" : "ExpressionStatement[66561-66589]:ExpressionStatement[71314-71342]"
    }, {
      "left" : "serde = new OrcSerde();",
      "right" : "serde = new OrcSerde();",
      "info" : "ExpressionStatement[66594-66617]:ExpressionStatement[71347-71370]"
    }, {
      "left" : "SearchArgument sarg =\n        SearchArgumentFactory.newBuilder()\n            .startAnd()\n            .lessThan(\"z\", new String(\"foo\"))\n            .end()\n            .build();",
      "right" : "SearchArgument sarg =\n        SearchArgumentFactory.newBuilder()\n            .startAnd()\n            .lessThan(\"z\", new String(\"foo\"))\n            .end()\n            .build();",
      "info" : "VariableDeclarationStatement[66622-66797]:VariableDeclarationStatement[71375-71550]"
    }, {
      "left" : "conf.set(\"sarg.pushdown\", sarg.toKryo());",
      "right" : "conf.set(\"sarg.pushdown\", sarg.toKryo());",
      "info" : "ExpressionStatement[66802-66843]:ExpressionStatement[71555-71596]"
    }, {
      "left" : "conf.set(\"hive.io.file.readcolumn.names\", \"z\");",
      "right" : "conf.set(\"hive.io.file.readcolumn.names\", \"z\");",
      "info" : "ExpressionStatement[66848-66895]:ExpressionStatement[71601-71648]"
    }, {
      "left" : "properties.setProperty(\"columns\", \"z\");",
      "right" : "properties.setProperty(\"columns\", \"z\");",
      "info" : "ExpressionStatement[66900-66939]:ExpressionStatement[71653-71692]"
    }, {
      "left" : "properties.setProperty(\"columns.types\", \"string\");",
      "right" : "properties.setProperty(\"columns.types\", \"string\");",
      "info" : "ExpressionStatement[66944-66994]:ExpressionStatement[71697-71747]"
    }, {
      "left" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "right" : "SerDeUtils.initializeSerDe(serde, conf, properties, null);",
      "info" : "ExpressionStatement[66999-67057]:ExpressionStatement[71752-71810]"
    }, {
      "left" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "right" : "inspector = (StructObjectInspector) serde.getObjectInspector();",
      "info" : "ExpressionStatement[67062-67125]:ExpressionStatement[71815-71878]"
    }, {
      "left" : "InputFormat<?,?> in = new OrcInputFormat();",
      "right" : "InputFormat<?,?> in = new OrcInputFormat();",
      "info" : "VariableDeclarationStatement[67130-67173]:VariableDeclarationStatement[71883-71926]"
    }, {
      "left" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "right" : "FileInputFormat.setInputPaths(conf, testFilePath.toString());",
      "info" : "ExpressionStatement[67178-67239]:ExpressionStatement[71931-71992]"
    }, {
      "left" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "right" : "InputSplit[] splits = in.getSplits(conf, 1);",
      "info" : "VariableDeclarationStatement[67244-67288]:VariableDeclarationStatement[71997-72041]"
    }, {
      "left" : "assertEquals(0, splits.length);",
      "right" : "assertEquals(0, splits.length);",
      "info" : "ExpressionStatement[67293-67324]:ExpressionStatement[72046-72077]"
    } ]
  },
  "interFileMappings" : { }
}