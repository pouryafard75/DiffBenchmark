{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[3866-54370]:TypeDeclaration[3866-54389]"
    }, {
      "left" : "static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "right" : "static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "info" : "FieldDeclaration[3950-4173]:FieldDeclaration[3950-4173]"
    }, {
      "left" : "static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "right" : "static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "info" : "FieldDeclaration[4177-4400]:FieldDeclaration[4177-4400]"
    }, {
      "left" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "right" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "info" : "FieldDeclaration[4404-4544]:FieldDeclaration[4404-4544]"
    }, {
      "left" : "static final String MISPLACED_TYPE_ANNOTATION =\n      \"Type annotations are not allowed here. Are you missing parentheses?\";",
      "right" : "static final String MISPLACED_TYPE_ANNOTATION =\n      \"Type annotations are not allowed here. Are you missing parentheses?\";",
      "info" : "FieldDeclaration[4548-4672]:FieldDeclaration[4548-4672]"
    }, {
      "left" : "static final String INVALID_ES3_PROP_NAME =\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "right" : "static final String INVALID_ES3_PROP_NAME =\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
      "info" : "FieldDeclaration[4676-4956]:FieldDeclaration[4676-4956]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[4960-4994]:FieldDeclaration[4960-4994]"
    }, {
      "left" : "private final StaticSourceFile sourceFile;",
      "right" : "private final StaticSourceFile sourceFile;",
      "info" : "FieldDeclaration[4997-5039]:FieldDeclaration[4997-5039]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[5042-5074]:FieldDeclaration[5042-5074]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[5077-5105]:FieldDeclaration[5077-5105]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[5108-5150]:FieldDeclaration[5108-5150]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[5153-5207]:FieldDeclaration[5153-5207]"
    }, {
      "left" : "private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
      "right" : "private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
      "info" : "FieldDeclaration[5211-5310]:FieldDeclaration[5211-5310]"
    }, {
      "left" : "private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "right" : "private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "info" : "FieldDeclaration[5314-5513]:FieldDeclaration[5314-5513]"
    }, {
      "left" : "private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "right" : "private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "info" : "FieldDeclaration[5516-5840]:FieldDeclaration[5516-5840]"
    }, {
      "left" : "private final Set<String> reservedKeywords;",
      "right" : "private final Set<String> reservedKeywords;",
      "info" : "FieldDeclaration[5844-5887]:FieldDeclaration[5844-5887]"
    }, {
      "left" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "right" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "info" : "FieldDeclaration[5890-5952]:FieldDeclaration[5890-5952]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[6081-6131]:FieldDeclaration[6081-6131]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[6134-6236]:FieldDeclaration[6134-6236]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[6239-6273]:FieldDeclaration[6239-6273]"
    }, {
      "left" : "private final Node templateNode;",
      "right" : "private final Node templateNode;",
      "info" : "FieldDeclaration[6395-6427]:FieldDeclaration[6395-6427]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[6510-7552]:MethodDeclaration[6510-7552]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[7788-7992]:MethodDeclaration[7788-7992]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[7996-8919]:MethodDeclaration[7996-8919]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[8923-9648]:MethodDeclaration[8923-9648]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[9652-10137]:MethodDeclaration[9652-10137]"
    }, {
      "left" : "private void handleBlockComment(Comment comment)",
      "right" : "private void handleBlockComment(Comment comment)",
      "info" : "MethodDeclaration[10141-10515]:MethodDeclaration[10141-10534]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[10519-10862]:MethodDeclaration[10538-10881]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "info" : "MethodDeclaration[10866-11103]:MethodDeclaration[10885-11122]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "info" : "MethodDeclaration[11107-11618]:MethodDeclaration[11126-11637]"
    }, {
      "left" : "private void validateTypeAnnotations(JSDocInfo info, AstNode node)",
      "right" : "private void validateTypeAnnotations(JSDocInfo info, AstNode node)",
      "info" : "MethodDeclaration[11622-14055]:MethodDeclaration[11641-14074]"
    }, {
      "left" : "private boolean isPropAccess(AstNode node)",
      "right" : "private boolean isPropAccess(AstNode node)",
      "info" : "MethodDeclaration[14059-14260]:MethodDeclaration[14078-14279]"
    }, {
      "left" : "private boolean isExprStmt(AstNode node)",
      "right" : "private boolean isExprStmt(AstNode node)",
      "info" : "MethodDeclaration[14264-14469]:MethodDeclaration[14283-14488]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[14473-14793]:MethodDeclaration[14492-14812]"
    }, {
      "left" : "private Node maybeInjectCastNode(AstNode node, JSDocInfo info, Node irNode)",
      "right" : "private Node maybeInjectCastNode(AstNode node, JSDocInfo info, Node irNode)",
      "info" : "MethodDeclaration[14797-15095]:MethodDeclaration[14816-15114]"
    }, {
      "left" : "private Node transformParameter(AstNode node)",
      "right" : "private Node transformParameter(AstNode node)",
      "info" : "MethodDeclaration[15099-15741]:MethodDeclaration[15118-15760]"
    }, {
      "left" : "private Node transformNameAsString(Name node)",
      "right" : "private Node transformNameAsString(Name node)",
      "info" : "MethodDeclaration[15745-16037]:MethodDeclaration[15764-16056]"
    }, {
      "left" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "right" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[16041-16376]:MethodDeclaration[16060-16395]"
    }, {
      "left" : "private static String getStringValue(double value)",
      "right" : "private static String getStringValue(double value)",
      "info" : "MethodDeclaration[16380-16632]:MethodDeclaration[16399-16651]"
    }, {
      "left" : "private void setSourceInfo(Node irNode, AstNode node)",
      "right" : "private void setSourceInfo(Node irNode, AstNode node)",
      "info" : "MethodDeclaration[16636-17167]:MethodDeclaration[16655-17186]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "info" : "MethodDeclaration[17171-18405]:MethodDeclaration[17190-18424]"
    }, {
      "left" : "private JSDocInfo parseInlineTypeDoc(Comment node, Node irNode)",
      "right" : "private JSDocInfo parseInlineTypeDoc(Comment node, Node irNode)",
      "info" : "MethodDeclaration[18409-19101]:MethodDeclaration[18428-19120]"
    }, {
      "left" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "right" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "info" : "MethodDeclaration[19159-19299]:MethodDeclaration[19178-19318]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[19303-19572]:MethodDeclaration[19322-19591]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[19576-19668]:MethodDeclaration[19595-19687]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[19672-45773]:TypeDeclaration[19691-45792]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "info" : "MethodDeclaration[19745-20036]:MethodDeclaration[19764-20055]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[20042-20953]:MethodDeclaration[20061-20972]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[20959-21324]:MethodDeclaration[20978-21343]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[21330-21706]:MethodDeclaration[21349-21725]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[21712-21994]:MethodDeclaration[21731-22013]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[22000-22851]:MethodDeclaration[22019-22870]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[22857-23139]:MethodDeclaration[22876-23158]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[23145-23241]:MethodDeclaration[23164-23260]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[23247-23636]:MethodDeclaration[23266-23655]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[23642-24130]:MethodDeclaration[23661-24149]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[24136-24422]:MethodDeclaration[24155-24441]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[24428-24816]:MethodDeclaration[24447-24835]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[24822-25014]:MethodDeclaration[24841-25033]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[25020-25217]:MethodDeclaration[25039-25236]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[25223-25357]:MethodDeclaration[25242-25376]"
    }, {
      "left" : "Node processEmptyStatement(EmptyStatement exprNode)",
      "right" : "Node processEmptyStatement(EmptyStatement exprNode)",
      "info" : "MethodDeclaration[25363-25495]:MethodDeclaration[25382-25514]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[25501-25749]:MethodDeclaration[25520-25768]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[25755-26328]:MethodDeclaration[25774-26347]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[26334-26664]:MethodDeclaration[26353-26683]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[26670-27149]:MethodDeclaration[26689-27168]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[27155-30616]:MethodDeclaration[27174-30635]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[30622-31021]:MethodDeclaration[30641-31040]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[31027-31425]:MethodDeclaration[31046-31444]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[31431-31572]:MethodDeclaration[31450-31591]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[31578-31701]:MethodDeclaration[31597-31720]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[31707-32428]:MethodDeclaration[31726-32447]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[32434-32530]:MethodDeclaration[32453-32549]"
    }, {
      "left" : "Node processName(Name nameNode, boolean asString)",
      "right" : "Node processName(Name nameNode, boolean asString)",
      "info" : "MethodDeclaration[32536-32987]:MethodDeclaration[32555-33006]"
    }, {
      "left" : "private boolean isAllowedProp(String identifier)",
      "right" : "private boolean isAllowedProp(String identifier)",
      "info" : "MethodDeclaration[32993-33188]:MethodDeclaration[33012-33207]"
    }, {
      "left" : "private boolean isReservedKeyword(String identifier)",
      "right" : "private boolean isReservedKeyword(String identifier)",
      "info" : "MethodDeclaration[33194-33453]:MethodDeclaration[33213-33472]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[33459-33936]:MethodDeclaration[33478-33955]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[33942-34069]:MethodDeclaration[33961-34088]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[34075-35574]:MethodDeclaration[34094-35593]"
    }, {
      "left" : "Node getFnParamNode(Node fnNode)",
      "right" : "Node getFnParamNode(Node fnNode)",
      "info" : "MethodDeclaration[35580-35897]:MethodDeclaration[35599-35916]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[35903-36031]:MethodDeclaration[35922-36050]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[36037-36202]:MethodDeclaration[36056-36221]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[36208-36911]:MethodDeclaration[36227-36930]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[36917-37660]:MethodDeclaration[36936-37679]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[37666-37938]:MethodDeclaration[37685-37957]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[37944-38040]:MethodDeclaration[37963-38059]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[38046-39308]:MethodDeclaration[38065-39327]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[39314-40085]:MethodDeclaration[39333-40104]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[40091-40393]:MethodDeclaration[40110-40412]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[40399-40564]:MethodDeclaration[40418-40583]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[40570-41749]:MethodDeclaration[40589-41768]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[41755-43017]:MethodDeclaration[41774-43036]"
    }, {
      "left" : "private boolean validAssignmentTarget(Node target)",
      "right" : "private boolean validAssignmentTarget(Node target)",
      "info" : "MethodDeclaration[43023-43321]:MethodDeclaration[43042-43340]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[43327-43784]:MethodDeclaration[43346-43803]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[43790-44131]:MethodDeclaration[43809-44150]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[44137-44338]:MethodDeclaration[44156-44357]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[44344-44573]:MethodDeclaration[44363-44592]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[44579-44886]:MethodDeclaration[44598-44905]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[44892-45077]:MethodDeclaration[44911-45096]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[45083-45239]:MethodDeclaration[45102-45258]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[45245-45401]:MethodDeclaration[45264-45420]"
    }, {
      "left" : "void reportGetterParam(AstNode node)",
      "right" : "void reportGetterParam(AstNode node)",
      "info" : "MethodDeclaration[45407-45581]:MethodDeclaration[45426-45600]"
    }, {
      "left" : "void reportSetterParam(AstNode node)",
      "right" : "void reportSetterParam(AstNode node)",
      "info" : "MethodDeclaration[45587-45769]:MethodDeclaration[45606-45788]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[45777-53441]:MethodDeclaration[45796-53460]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[53517-53609]:MethodDeclaration[53536-53628]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[53613-53726]:MethodDeclaration[53632-53745]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[53730-53864]:MethodDeclaration[53749-53883]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[53868-54023]:MethodDeclaration[53887-54042]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[54027-54131]:MethodDeclaration[54046-54150]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[54135-54260]:MethodDeclaration[54154-54279]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[54264-54368]:MethodDeclaration[54283-54387]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6682-7552]:Block[6682-7552]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[6688-6721]:ExpressionStatement[6688-6721]"
    }, {
      "left" : "this.sourceFile = sourceFile;",
      "right" : "this.sourceFile = sourceFile;",
      "info" : "ExpressionStatement[6726-6755]:ExpressionStatement[6726-6755]"
    }, {
      "left" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "right" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "info" : "ExpressionStatement[6806-6873]:ExpressionStatement[6806-6873]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[6879-6900]:ExpressionStatement[6879-6900]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[6905-6940]:ExpressionStatement[6905-6940]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[6945-6998]:ExpressionStatement[6945-6998]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[7083-7124]:ExpressionStatement[7083-7124]"
    }, {
      "left" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        reservedKeywords = null; // use TokenStream.isKeyword instead\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "right" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        reservedKeywords = null; // use TokenStream.isKeyword instead\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "info" : "SwitchStatement[7130-7548]:SwitchStatement[7130-7548]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[7167-7184]:SwitchCase[7167-7184]"
    }, {
      "left" : "reservedKeywords = null;",
      "right" : "reservedKeywords = null;",
      "info" : "ExpressionStatement[7193-7217]:ExpressionStatement[7193-7217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7263-7269]:BreakStatement[7263-7269]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[7276-7293]:SwitchCase[7276-7293]"
    }, {
      "left" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[7302-7343]:ExpressionStatement[7302-7343]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7352-7358]:BreakStatement[7352-7358]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[7365-7389]:SwitchCase[7365-7389]"
    }, {
      "left" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[7398-7446]:ExpressionStatement[7398-7446]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7455-7461]:BreakStatement[7455-7461]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7468-7476]:SwitchCase[7468-7476]"
    }, {
      "left" : "throw new IllegalStateException(\"unknown language mode\");",
      "right" : "throw new IllegalStateException(\"unknown language mode\");",
      "info" : "ThrowStatement[7485-7542]:ThrowStatement[7485-7542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7822-7992]:Block[7822-7992]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[7870-7913]:VariableDeclarationStatement[7870-7913]"
    }, {
      "left" : "templateNode.setStaticSourceFile(sourceFile);",
      "right" : "templateNode.setStaticSourceFile(sourceFile);",
      "info" : "ExpressionStatement[7918-7963]:ExpressionStatement[7918-7963]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[7968-7988]:ReturnStatement[7968-7988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8277-8919]:Block[8277-8919]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[8283-8376]:VariableDeclarationStatement[8283-8376]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[8381-8421]:VariableDeclarationStatement[8381-8421]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[8427-8850]:IfStatement[8427-8850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8459-8850]:Block[8459-8850]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[8467-8844]:EnhancedForStatement[8467-8844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8510-8844]:Block[8510-8844]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "right" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "info" : "IfStatement[8520-8836]:IfStatement[8520-8836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8630-8711]:Block[8630-8711]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "info" : "ExpressionStatement[8642-8701]:ExpressionStatement[8642-8701]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "right" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "info" : "IfStatement[8717-8836]:IfStatement[8717-8836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8776-8836]:Block[8776-8836]"
    }, {
      "left" : "irFactory.handleBlockComment(comment);",
      "right" : "irFactory.handleBlockComment(comment);",
      "info" : "ExpressionStatement[8788-8826]:ExpressionStatement[8788-8826]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[8856-8895]:ExpressionStatement[8856-8895]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[8901-8915]:ReturnStatement[8901-8915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8970-9648]:Block[8970-9648]"
    }, {
      "left" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "right" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[9133-9194]:VariableDeclarationStatement[9133-9194]"
    }, {
      "left" : "if (rootNodeJsDoc != null)",
      "right" : "if (rootNodeJsDoc != null)",
      "info" : "IfStatement[9199-9322]:IfStatement[9199-9322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9226-9322]:Block[9226-9322]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "right" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "info" : "ExpressionStatement[9234-9269]:ExpressionStatement[9234-9269]"
    }, {
      "left" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "right" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[9276-9316]:ExpressionStatement[9276-9316]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[9328-9644]:IfStatement[9328-9644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9644]:Block[9358-9644]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[9366-9543]:IfStatement[9366-9543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9461-9543]:Block[9461-9543]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[9471-9535]:ExpressionStatement[9471-9535]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[9550-9588]:ExpressionStatement[9550-9588]"
    }, {
      "left" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "right" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[9595-9638]:ExpressionStatement[9595-9638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9694-10137]:Block[9694-10137]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[9700-9730]:VariableDeclarationStatement[9700-9730]"
    }, {
      "left" : "if (!irNode.isBlock())",
      "right" : "if (!irNode.isBlock())",
      "info" : "IfStatement[9735-10114]:IfStatement[9735-10114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9758-10114]:Block[9758-10114]"
    }, {
      "left" : "if (irNode.isEmpty())",
      "right" : "if (irNode.isEmpty())",
      "info" : "IfStatement[9766-10108]:IfStatement[9766-10108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9788-9872]:Block[9788-9872]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[9798-9826]:ExpressionStatement[9798-9826]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[9835-9864]:ExpressionStatement[9835-9864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9878-10108]:Block[9878-10108]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[9888-9933]:VariableDeclarationStatement[9888-9933]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[9942-9981]:ExpressionStatement[9942-9981]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[9990-10029]:ExpressionStatement[9990-10029]"
    }, {
      "left" : "maybeSetLengthFrom(newBlock, node);",
      "right" : "maybeSetLengthFrom(newBlock, node);",
      "info" : "ExpressionStatement[10038-10073]:ExpressionStatement[10038-10073]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[10082-10100]:ExpressionStatement[10082-10100]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[10119-10133]:ReturnStatement[10119-10133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10278-10515]:Block[10278-10534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10376-10511]:Block[10395-10530]"
    }, {
      "left" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "right" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[10384-10505]:ExpressionStatement[10403-10524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10679-10862]:Block[10698-10881]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[10685-10840]:IfStatement[10704-10859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10749-10840]:Block[10768-10859]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[10757-10815]:ExpressionStatement[10776-10834]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10822-10834]:ReturnStatement[10841-10853]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10845-10858]:ReturnStatement[10864-10877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10941-11103]:Block[10960-11122]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[10947-11016]:VariableDeclarationStatement[10966-11035]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[11021-11049]:ExpressionStatement[11040-11068]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[11054-11099]:ExpressionStatement[11073-11118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11164-11618]:Block[11183-11637]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[11170-11208]:VariableDeclarationStatement[11189-11227]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[11213-11597]:IfStatement[11232-11616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11234-11597]:Block[11253-11616]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[11242-11311]:VariableDeclarationStatement[11261-11330]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[11318-11346]:ExpressionStatement[11337-11365]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[11353-11591]:IfStatement[11372-11610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11404-11591]:Block[11423-11610]"
    }, {
      "left" : "JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "VariableDeclarationStatement[11414-11477]:VariableDeclarationStatement[11433-11496]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[11486-11562]:IfStatement[11505-11581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11504-11562]:Block[11523-11581]"
    }, {
      "left" : "validateTypeAnnotations(info, node);",
      "right" : "validateTypeAnnotations(info, node);",
      "info" : "ExpressionStatement[11516-11552]:ExpressionStatement[11535-11571]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[11571-11583]:ReturnStatement[11590-11602]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11602-11614]:ReturnStatement[11621-11633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11689-14055]:Block[11708-14074]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[11695-14051]:IfStatement[11714-14070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11715-14051]:Block[11734-14070]"
    }, {
      "left" : "boolean valid = false;",
      "right" : "boolean valid = false;",
      "info" : "VariableDeclarationStatement[11723-11745]:VariableDeclarationStatement[11742-11764]"
    }, {
      "left" : "switch (node.getType()) {\n        // Casts are valid\n        case com.google.javascript.rhino.head.Token.LP:\n          valid = node instanceof ParenthesizedExpression;\n          break;\n        // Variable declarations are valid\n        case com.google.javascript.rhino.head.Token.VAR:\n          valid = true;\n          break;\n        // Function declarations are valid\n        case com.google.javascript.rhino.head.Token.FUNCTION:\n          FunctionNode fnNode = (FunctionNode) node;\n          valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;\n          break;\n        // Object literal properties, catch declarations and variable\n        // initializers are valid.\n        case com.google.javascript.rhino.head.Token.NAME:\n          AstNode parent = node.getParent();\n          valid = parent instanceof ObjectProperty\n              || parent instanceof CatchClause\n              || parent instanceof FunctionNode\n              || (parent instanceof VariableInitializer &&\n                  node == ((VariableInitializer) parent).getTarget());\n          break;\n        // Object literal properties are valid\n        case com.google.javascript.rhino.head.Token.GET:\n        case com.google.javascript.rhino.head.Token.SET:\n        case com.google.javascript.rhino.head.Token.NUMBER:\n        case com.google.javascript.rhino.head.Token.STRING:\n          valid = node.getParent() instanceof ObjectProperty;\n          break;\n\n        // Property assignments are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.ASSIGN:\n          if (node instanceof Assignment) {\n            valid = isExprStmt(node.getParent())\n                && isPropAccess(((Assignment) node).getLeft());\n          }\n          break;\n\n        // Property definitions are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.GETPROP:\n        case com.google.javascript.rhino.head.Token.GETELEM:\n          valid = isExprStmt(node.getParent());\n          break;\n\n        case com.google.javascript.rhino.head.Token.CALL:\n          valid = info.isDefine();\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        // Casts are valid\n        case com.google.javascript.rhino.head.Token.LP:\n          valid = node instanceof ParenthesizedExpression;\n          break;\n        // Variable declarations are valid\n        case com.google.javascript.rhino.head.Token.VAR:\n          valid = true;\n          break;\n        // Function declarations are valid\n        case com.google.javascript.rhino.head.Token.FUNCTION:\n          FunctionNode fnNode = (FunctionNode) node;\n          valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;\n          break;\n        // Object literal properties, catch declarations and variable\n        // initializers are valid.\n        case com.google.javascript.rhino.head.Token.NAME:\n          AstNode parent = node.getParent();\n          valid = parent instanceof ObjectProperty\n              || parent instanceof CatchClause\n              || parent instanceof FunctionNode\n              || (parent instanceof VariableInitializer &&\n                  node == ((VariableInitializer) parent).getTarget());\n          break;\n        // Object literal properties are valid\n        case com.google.javascript.rhino.head.Token.GET:\n        case com.google.javascript.rhino.head.Token.SET:\n        case com.google.javascript.rhino.head.Token.NUMBER:\n        case com.google.javascript.rhino.head.Token.STRING:\n          valid = node.getParent() instanceof ObjectProperty;\n          break;\n\n        // Property assignments are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.ASSIGN:\n          if (node instanceof Assignment) {\n            valid = isExprStmt(node.getParent())\n                && isPropAccess(((Assignment) node).getLeft());\n          }\n          break;\n\n        // Property definitions are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.GETPROP:\n        case com.google.javascript.rhino.head.Token.GETELEM:\n          valid = isExprStmt(node.getParent());\n          break;\n\n        case com.google.javascript.rhino.head.Token.CALL:\n          valid = info.isDefine();\n          break;\n      }",
      "info" : "SwitchStatement[11752-13898]:SwitchStatement[11771-13917]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LP:",
      "right" : "case com.google.javascript.rhino.head.Token.LP:",
      "info" : "SwitchCase[11813-11860]:SwitchCase[11832-11879]"
    }, {
      "left" : "valid = node instanceof ParenthesizedExpression;",
      "right" : "valid = node instanceof ParenthesizedExpression;",
      "info" : "ExpressionStatement[11871-11919]:ExpressionStatement[11890-11938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11930-11936]:BreakStatement[11949-11955]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VAR:",
      "right" : "case com.google.javascript.rhino.head.Token.VAR:",
      "info" : "SwitchCase[11988-12036]:SwitchCase[12007-12055]"
    }, {
      "left" : "valid = true;",
      "right" : "valid = true;",
      "info" : "ExpressionStatement[12047-12060]:ExpressionStatement[12066-12079]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12071-12077]:BreakStatement[12090-12096]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "right" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "info" : "SwitchCase[12129-12182]:SwitchCase[12148-12201]"
    }, {
      "left" : "FunctionNode fnNode = (FunctionNode) node;",
      "right" : "FunctionNode fnNode = (FunctionNode) node;",
      "info" : "VariableDeclarationStatement[12193-12235]:VariableDeclarationStatement[12212-12254]"
    }, {
      "left" : "valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;",
      "right" : "valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;",
      "info" : "ExpressionStatement[12246-12314]:ExpressionStatement[12265-12333]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12325-12331]:BreakStatement[12344-12350]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NAME:",
      "right" : "case com.google.javascript.rhino.head.Token.NAME:",
      "info" : "SwitchCase[12445-12494]:SwitchCase[12464-12513]"
    }, {
      "left" : "AstNode parent = node.getParent();",
      "right" : "AstNode parent = node.getParent();",
      "info" : "VariableDeclarationStatement[12505-12539]:VariableDeclarationStatement[12524-12558]"
    }, {
      "left" : "valid = parent instanceof ObjectProperty\n              || parent instanceof CatchClause\n              || parent instanceof FunctionNode\n              || (parent instanceof VariableInitializer &&\n                  node == ((VariableInitializer) parent).getTarget());",
      "right" : "valid = parent instanceof ObjectProperty\n              || parent instanceof CatchClause\n              || parent instanceof FunctionNode\n              || (parent instanceof VariableInitializer &&\n                  node == ((VariableInitializer) parent).getTarget());",
      "info" : "ExpressionStatement[12550-12815]:ExpressionStatement[12569-12834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12826-12832]:BreakStatement[12845-12851]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GET:",
      "right" : "case com.google.javascript.rhino.head.Token.GET:",
      "info" : "SwitchCase[12888-12936]:SwitchCase[12907-12955]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SET:",
      "right" : "case com.google.javascript.rhino.head.Token.SET:",
      "info" : "SwitchCase[12945-12993]:SwitchCase[12964-13012]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "right" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "info" : "SwitchCase[13002-13053]:SwitchCase[13021-13072]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.STRING:",
      "right" : "case com.google.javascript.rhino.head.Token.STRING:",
      "info" : "SwitchCase[13062-13113]:SwitchCase[13081-13132]"
    }, {
      "left" : "valid = node.getParent() instanceof ObjectProperty;",
      "right" : "valid = node.getParent() instanceof ObjectProperty;",
      "info" : "ExpressionStatement[13124-13175]:ExpressionStatement[13143-13194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13186-13192]:BreakStatement[13205-13211]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "info" : "SwitchCase[13278-13329]:SwitchCase[13297-13348]"
    }, {
      "left" : "if (node instanceof Assignment)",
      "right" : "if (node instanceof Assignment)",
      "info" : "IfStatement[13340-13498]:IfStatement[13359-13517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13372-13498]:Block[13391-13517]"
    }, {
      "left" : "valid = isExprStmt(node.getParent())\n                && isPropAccess(((Assignment) node).getLeft());",
      "right" : "valid = isExprStmt(node.getParent())\n                && isPropAccess(((Assignment) node).getLeft());",
      "info" : "ExpressionStatement[13386-13486]:ExpressionStatement[13405-13505]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13509-13515]:BreakStatement[13528-13534]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "info" : "SwitchCase[13601-13653]:SwitchCase[13620-13672]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "right" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "info" : "SwitchCase[13662-13714]:SwitchCase[13681-13733]"
    }, {
      "left" : "valid = isExprStmt(node.getParent());",
      "right" : "valid = isExprStmt(node.getParent());",
      "info" : "ExpressionStatement[13725-13762]:ExpressionStatement[13744-13781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13773-13779]:BreakStatement[13792-13798]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CALL:",
      "right" : "case com.google.javascript.rhino.head.Token.CALL:",
      "info" : "SwitchCase[13789-13838]:SwitchCase[13808-13857]"
    }, {
      "left" : "valid = info.isDefine();",
      "right" : "valid = info.isDefine();",
      "info" : "ExpressionStatement[13849-13873]:ExpressionStatement[13868-13892]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13884-13890]:BreakStatement[13903-13909]"
    }, {
      "left" : "if (!valid)",
      "right" : "if (!valid)",
      "info" : "IfStatement[13905-14045]:IfStatement[13924-14064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13917-14045]:Block[13936-14064]"
    }, {
      "left" : "errorReporter.warning(MISPLACED_TYPE_ANNOTATION,\n            sourceName,\n            node.getLineno(), \"\", 0);",
      "right" : "errorReporter.warning(MISPLACED_TYPE_ANNOTATION,\n            sourceName,\n            node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[13927-14037]:ExpressionStatement[13946-14056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14102-14260]:Block[14121-14279]"
    }, {
      "left" : "return node.getType() == com.google.javascript.rhino.head.Token.GETPROP\n        || node.getType() == com.google.javascript.rhino.head.Token.GETELEM;",
      "right" : "return node.getType() == com.google.javascript.rhino.head.Token.GETPROP\n        || node.getType() == com.google.javascript.rhino.head.Token.GETELEM;",
      "info" : "ReturnStatement[14108-14256]:ReturnStatement[14127-14275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14305-14469]:Block[14324-14488]"
    }, {
      "left" : "return node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT\n        || node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID;",
      "right" : "return node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT\n        || node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID;",
      "info" : "ReturnStatement[14311-14465]:ReturnStatement[14330-14484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14510-14793]:Block[14529-14812]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[14516-14550]:VariableDeclarationStatement[14535-14569]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[14555-14603]:VariableDeclarationStatement[14574-14622]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[14608-14737]:IfStatement[14627-14756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14631-14737]:Block[14650-14756]"
    }, {
      "left" : "irNode = maybeInjectCastNode(node, jsDocInfo, irNode);",
      "right" : "irNode = maybeInjectCastNode(node, jsDocInfo, irNode);",
      "info" : "ExpressionStatement[14639-14693]:ExpressionStatement[14658-14712]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[14700-14731]:ExpressionStatement[14719-14750]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[14742-14770]:ExpressionStatement[14761-14789]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[14775-14789]:ReturnStatement[14794-14808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14873-15095]:Block[14892-15114]"
    }, {
      "left" : "if (node.getType() == com.google.javascript.rhino.head.Token.LP\n        && node instanceof ParenthesizedExpression\n        && info.hasType())",
      "right" : "if (node.getType() == com.google.javascript.rhino.head.Token.LP\n        && node instanceof ParenthesizedExpression\n        && info.hasType())",
      "info" : "IfStatement[14879-15072]:IfStatement[14898-15091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15021-15072]:Block[15040-15091]"
    }, {
      "left" : "irNode = newNode(Token.CAST, irNode);",
      "right" : "irNode = newNode(Token.CAST, irNode);",
      "info" : "ExpressionStatement[15029-15066]:ExpressionStatement[15048-15085]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[15077-15091]:ReturnStatement[15096-15110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15440-15741]:Block[15459-15760]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[15446-15480]:VariableDeclarationStatement[15465-15499]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[15485-15523]:VariableDeclarationStatement[15504-15542]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[15528-15685]:IfStatement[15547-15704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15549-15685]:Block[15568-15704]"
    }, {
      "left" : "JSDocInfo info = parseInlineTypeDoc(comment, irNode);",
      "right" : "JSDocInfo info = parseInlineTypeDoc(comment, irNode);",
      "info" : "VariableDeclarationStatement[15557-15610]:VariableDeclarationStatement[15576-15629]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15617-15679]:IfStatement[15636-15698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15635-15679]:Block[15654-15698]"
    }, {
      "left" : "irNode.setJSDocInfo(info);",
      "right" : "irNode.setJSDocInfo(info);",
      "info" : "ExpressionStatement[15645-15671]:ExpressionStatement[15664-15690]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[15690-15718]:ExpressionStatement[15709-15737]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[15723-15737]:ReturnStatement[15742-15756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15791-16037]:Block[15810-16056]"
    }, {
      "left" : "Node irNode = transformDispatcher.processName(node, true);",
      "right" : "Node irNode = transformDispatcher.processName(node, true);",
      "info" : "VariableDeclarationStatement[15797-15855]:VariableDeclarationStatement[15816-15874]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[15860-15908]:VariableDeclarationStatement[15879-15927]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[15913-15981]:IfStatement[15932-16000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15936-15981]:Block[15955-16000]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[15944-15975]:ExpressionStatement[15963-15994]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[15986-16014]:ExpressionStatement[16005-16033]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[16019-16033]:ReturnStatement[16038-16052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16105-16376]:Block[16124-16395]"
    }, {
      "left" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "right" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "info" : "VariableDeclarationStatement[16111-16180]:VariableDeclarationStatement[16130-16199]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "info" : "VariableDeclarationStatement[16185-16240]:VariableDeclarationStatement[16204-16259]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[16245-16313]:IfStatement[16264-16332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16268-16313]:Block[16287-16332]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[16276-16307]:ExpressionStatement[16295-16326]"
    }, {
      "left" : "setSourceInfo(irNode, literalNode);",
      "right" : "setSourceInfo(irNode, literalNode);",
      "info" : "ExpressionStatement[16318-16353]:ExpressionStatement[16337-16372]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[16358-16372]:ReturnStatement[16377-16391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16431-16632]:Block[16450-16651]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[16437-16467]:VariableDeclarationStatement[16456-16486]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[16508-16628]:IfStatement[16527-16647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16532-16578]:Block[16551-16597]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[16540-16572]:ReturnStatement[16559-16591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16584-16628]:Block[16603-16647]"
    }, {
      "left" : "return Double.toString(value);",
      "right" : "return Double.toString(value);",
      "info" : "ReturnStatement[16592-16622]:ReturnStatement[16611-16641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-17167]:Block[16709-17186]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[16696-17163]:IfStatement[16715-17182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16726-17163]:Block[16745-17182]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[16959-16989]:VariableDeclarationStatement[16978-17008]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[16996-17021]:ExpressionStatement[17015-17040]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[17028-17085]:VariableDeclarationStatement[17047-17104]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[17092-17117]:ExpressionStatement[17111-17136]"
    }, {
      "left" : "maybeSetLengthFrom(irNode, node);",
      "right" : "maybeSetLengthFrom(irNode, node);",
      "info" : "ExpressionStatement[17124-17157]:ExpressionStatement[17143-17176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17680-18405]:Block[17699-18424]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[17686-17719]:VariableDeclarationStatement[17705-17738]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[17724-17754]:VariableDeclarationStatement[17743-17773]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[17759-17801]:VariableDeclarationStatement[17778-17820]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[17881-17905]:VariableDeclarationStatement[17900-17924]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[17910-18227]:VariableDeclarationStatement[17929-18246]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[18232-18292]:ExpressionStatement[18251-18311]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[18297-18352]:ExpressionStatement[18316-18371]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[18357-18377]:ExpressionStatement[18376-18396]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[18382-18401]:ReturnStatement[18401-18420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18515-19101]:Block[18534-19120]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[18521-18554]:VariableDeclarationStatement[18540-18573]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[18559-18589]:VariableDeclarationStatement[18578-18608]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[18594-18636]:VariableDeclarationStatement[18613-18655]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[18716-18740]:VariableDeclarationStatement[18735-18759]"
    }, {
      "left" : "JsDocInfoParser parser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser parser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[18745-19057]:VariableDeclarationStatement[18764-19076]"
    }, {
      "left" : "return parser.parseInlineTypeDoc();",
      "right" : "return parser.parseInlineTypeDoc();",
      "info" : "ReturnStatement[19062-19097]:ReturnStatement[19081-19116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19218-19299]:Block[19237-19318]"
    }, {
      "left" : "if (config.isIdeMode)",
      "right" : "if (config.isIdeMode)",
      "info" : "IfStatement[19224-19295]:IfStatement[19243-19314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19246-19295]:Block[19265-19314]"
    }, {
      "left" : "node.setLength(source.getLength());",
      "right" : "node.setLength(source.getLength());",
      "info" : "ExpressionStatement[19254-19289]:ExpressionStatement[19273-19308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19345-19572]:Block[19364-19591]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[19351-19408]:VariableDeclarationStatement[19370-19427]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[19413-19568]:IfStatement[19432-19587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19434-19464]:Block[19453-19483]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[19442-19458]:ReturnStatement[19461-19477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19470-19568]:Block[19489-19587]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[19530-19562]:ReturnStatement[19549-19581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19617-19668]:Block[19636-19687]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[19623-19664]:ReturnStatement[19642-19683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19823-20036]:Block[19842-20055]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[19831-19884]:VariableDeclarationStatement[19850-19903]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : n)",
      "right" : "for (com.google.javascript.rhino.head.Node child : n)",
      "info" : "EnhancedForStatement[19891-20011]:EnhancedForStatement[19910-20030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19945-20011]:Block[19964-20030]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode) child));",
      "right" : "node.addChildToBack(transform((AstNode) child));",
      "info" : "ExpressionStatement[19955-20003]:ExpressionStatement[19974-20022]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20018-20030]:ReturnStatement[20037-20049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20526-20953]:Block[20545-20972]"
    }, {
      "left" : "Node ret;",
      "right" : "Node ret;",
      "info" : "VariableDeclarationStatement[20534-20543]:VariableDeclarationStatement[20553-20562]"
    }, {
      "left" : "if (n instanceof Name)",
      "right" : "if (n instanceof Name)",
      "info" : "IfStatement[20550-20881]:IfStatement[20569-20900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20573-20629]:Block[20592-20648]"
    }, {
      "left" : "ret = transformNameAsString((Name) n);",
      "right" : "ret = transformNameAsString((Name) n);",
      "info" : "ExpressionStatement[20583-20621]:ExpressionStatement[20602-20640]"
    }, {
      "left" : "if (n instanceof NumberLiteral)",
      "right" : "if (n instanceof NumberLiteral)",
      "info" : "IfStatement[20635-20881]:IfStatement[20654-20900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20667-20786]:Block[20686-20805]"
    }, {
      "left" : "ret = transformNumberAsString((NumberLiteral) n);",
      "right" : "ret = transformNumberAsString((NumberLiteral) n);",
      "info" : "ExpressionStatement[20677-20726]:ExpressionStatement[20696-20745]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[20735-20778]:ExpressionStatement[20754-20797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20792-20881]:Block[20811-20900]"
    }, {
      "left" : "ret = transform(n);",
      "right" : "ret = transform(n);",
      "info" : "ExpressionStatement[20802-20821]:ExpressionStatement[20821-20840]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[20830-20873]:ExpressionStatement[20849-20892]"
    }, {
      "left" : "Preconditions.checkState(ret.isString());",
      "right" : "Preconditions.checkState(ret.isString());",
      "info" : "ExpressionStatement[20888-20929]:ExpressionStatement[20907-20948]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[20936-20947]:ReturnStatement[20955-20966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21024-21324]:Block[21043-21343]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[21032-21124]:IfStatement[21051-21143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21067-21124]:Block[21086-21143]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[21077-21116]:ExpressionStatement[21096-21135]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[21132-21168]:VariableDeclarationStatement[21151-21187]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[21175-21299]:EnhancedForStatement[21194-21318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21223-21299]:Block[21242-21318]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[21233-21259]:VariableDeclarationStatement[21252-21278]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[21268-21291]:ExpressionStatement[21287-21310]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[21306-21318]:ReturnStatement[21325-21337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21394-21706]:Block[21413-21725]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[21402-21455]:VariableDeclarationStatement[21421-21474]"
    }, {
      "left" : "Node target = assign.getFirstChild();",
      "right" : "Node target = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[21462-21499]:VariableDeclarationStatement[21481-21518]"
    }, {
      "left" : "if (!validAssignmentTarget(target))",
      "right" : "if (!validAssignmentTarget(target))",
      "info" : "IfStatement[21506-21679]:IfStatement[21525-21698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21542-21679]:Block[21561-21698]"
    }, {
      "left" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[21552-21671]:ExpressionStatement[21571-21690]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[21686-21700]:ReturnStatement[21705-21719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21764-21994]:Block[21783-22013]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[21772-21806]:VariableDeclarationStatement[21791-21825]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "right" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "info" : "EnhancedForStatement[21813-21940]:EnhancedForStatement[21832-21959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21874-21940]:Block[21893-21959]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode) child));",
      "right" : "node.addChildToBack(transform((AstNode) child));",
      "info" : "ExpressionStatement[21884-21932]:ExpressionStatement[21903-21951]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[21947-21969]:ExpressionStatement[21966-21988]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[21976-21988]:ReturnStatement[21995-22007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22375-22851]:Block[22394-22870]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[22447-22477]:VariableDeclarationStatement[22466-22496]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[22484-22764]:WhileStatement[22503-22783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22526-22764]:Block[22545-22783]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[22536-22607]:VariableDeclarationStatement[22555-22626]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[22616-22756]:IfStatement[22635-22775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22640-22702]:Block[22659-22721]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[22652-22692]:ExpressionStatement[22671-22711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22708-22756]:Block[22727-22775]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[22720-22746]:ExpressionStatement[22739-22765]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[22772-22845]:IfStatement[22791-22864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22796-22845]:Block[22815-22864]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[22806-22837]:ExpressionStatement[22825-22856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22893-23139]:Block[22912-23158]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[22901-22947]:IfStatement[22920-22966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22916-22947]:Block[22935-22966]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22926-22939]:ReturnStatement[22945-22958]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[22954-22978]:VariableDeclarationStatement[22973-22997]"
    }, {
      "left" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[22985-23133]:ReturnStatement[23004-23152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23194-23241]:Block[23213-23260]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[23202-23235]:ReturnStatement[23221-23254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23318-23636]:Block[23337-23655]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[23326-23359]:VariableDeclarationStatement[23345-23378]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[23366-23611]:IfStatement[23385-23630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23409-23611]:Block[23428-23630]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[23419-23477]:VariableDeclarationStatement[23438-23496]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[23527-23563]:ExpressionStatement[23546-23582]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[23572-23603]:ExpressionStatement[23591-23622]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[23618-23630]:ReturnStatement[23637-23649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23704-24130]:Block[23723-24149]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[23712-23755]:VariableDeclarationStatement[23731-23774]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[23762-23816]:VariableDeclarationStatement[23781-23835]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[23823-24040]:IfStatement[23842-24059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23867-24040]:Block[23886-24059]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[23877-24032]:ExpressionStatement[23896-24051]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[24047-24105]:ExpressionStatement[24066-24124]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24112-24124]:ReturnStatement[24131-24143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24216-24422]:Block[24235-24441]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[24224-24416]:ReturnStatement[24243-24435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24505-24816]:Block[24524-24835]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[24513-24549]:VariableDeclarationStatement[24532-24568]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[24556-24791]:IfStatement[24575-24810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24594-24791]:Block[24613-24810]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[24604-24657]:VariableDeclarationStatement[24623-24676]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[24707-24743]:ExpressionStatement[24726-24762]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[24752-24783]:ExpressionStatement[24771-24802]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24798-24810]:ReturnStatement[24817-24829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24872-25014]:Block[24891-25033]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[24880-25008]:ReturnStatement[24899-25027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25077-25217]:Block[25096-25236]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[25085-25211]:ReturnStatement[25104-25230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25291-25357]:Block[25310-25376]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[25299-25332]:VariableDeclarationStatement[25318-25351]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25339-25351]:ReturnStatement[25358-25370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25429-25495]:Block[25448-25514]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[25437-25470]:VariableDeclarationStatement[25456-25489]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25477-25489]:ReturnStatement[25496-25508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25582-25749]:Block[25601-25768]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[25590-25655]:VariableDeclarationStatement[25609-25674]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[25662-25724]:ExpressionStatement[25681-25743]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25731-25743]:ReturnStatement[25750-25762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25811-26328]:Block[25830-26347]"
    }, {
      "left" : "if (loopNode.isForEach())",
      "right" : "if (loopNode.isForEach())",
      "info" : "IfStatement[25819-26136]:IfStatement[25838-26155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25845-26136]:Block[25864-26155]"
    }, {
      "left" : "errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[25855-25997]:ExpressionStatement[25874-26016]"
    }, {
      "left" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "right" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "info" : "ReturnStatement[26075-26128]:ReturnStatement[26094-26147]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[26143-26322]:ReturnStatement[26162-26341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26386-26664]:Block[26405-26683]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[26394-26576]:VariableDeclarationStatement[26413-26595]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[26583-26639]:ExpressionStatement[26602-26658]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[26646-26658]:ReturnStatement[26665-26677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26732-27149]:Block[26751-27168]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[26740-26860]:VariableDeclarationStatement[26759-26879]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[26867-26969]:EnhancedForStatement[26886-26988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26913-26969]:Block[26932-26988]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[26923-26961]:ExpressionStatement[26942-26980]"
    }, {
      "left" : "node.setLineno(node.getFirstChild().getLineno());",
      "right" : "node.setLineno(node.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[26977-27026]:ExpressionStatement[26996-27045]"
    }, {
      "left" : "node.setCharno(node.getFirstChild().getCharno());",
      "right" : "node.setCharno(node.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[27033-27082]:ExpressionStatement[27052-27101]"
    }, {
      "left" : "maybeSetLengthFrom(node, callNode);",
      "right" : "maybeSetLengthFrom(node, callNode);",
      "info" : "ExpressionStatement[27089-27124]:ExpressionStatement[27108-27143]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27131-27143]:ReturnStatement[27150-27162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27221-30616]:Block[27240-30635]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[27229-27272]:VariableDeclarationStatement[27248-27291]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[27279-27313]:VariableDeclarationStatement[27298-27332]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[27320-27851]:IfStatement[27339-27870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27338-27851]:Block[27357-27870]"
    }, {
      "left" : "int functionType = functionNode.getFunctionType();",
      "right" : "int functionType = functionNode.getFunctionType();",
      "info" : "VariableDeclarationStatement[27348-27398]:VariableDeclarationStatement[27367-27417]"
    }, {
      "left" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "right" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "info" : "IfStatement[27407-27750]:IfStatement[27426-27769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27461-27750]:Block[27480-27769]"
    }, {
      "left" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[27473-27605]:ExpressionStatement[27492-27624]"
    }, {
      "left" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "right" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "info" : "ReturnStatement[27687-27740]:ReturnStatement[27706-27759]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[27759-27777]:ExpressionStatement[27778-27796]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[27786-27809]:ExpressionStatement[27805-27828]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[27818-27843]:ExpressionStatement[27837-27862]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[27858-27894]:VariableDeclarationStatement[27877-27913]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[27901-27932]:VariableDeclarationStatement[27920-27951]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[27939-28494]:IfStatement[27958-28513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27962-28494]:Block[27981-28513]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[28072-28116]:ExpressionStatement[28091-28135]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[28304-28389]:VariableDeclarationStatement[28323-28408]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[28398-28443]:ExpressionStatement[28417-28462]"
    }, {
      "left" : "maybeSetLengthFrom(newName, name);",
      "right" : "maybeSetLengthFrom(newName, name);",
      "info" : "ExpressionStatement[28452-28486]:ExpressionStatement[28471-28505]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[28502-28531]:ExpressionStatement[28521-28550]"
    }, {
      "left" : "Node lp = newNode(Token.PARAM_LIST);",
      "right" : "Node lp = newNode(Token.PARAM_LIST);",
      "info" : "VariableDeclarationStatement[28538-28574]:VariableDeclarationStatement[28557-28593]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[29029-29074]:VariableDeclarationStatement[29048-29093]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[29081-29215]:IfStatement[29100-29234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29101-29152]:Block[29120-29171]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[29111-29144]:ExpressionStatement[29130-29163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29158-29215]:Block[29177-29234]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[29168-29207]:ExpressionStatement[29187-29226]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[29222-29309]:VariableDeclarationStatement[29241-29328]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[29317-29361]:ExpressionStatement[29336-29380]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[29368-30135]:EnhancedForStatement[29387-30154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29415-30135]:Block[29434-30154]"
    }, {
      "left" : "Node paramNode = transformParameter(param);",
      "right" : "Node paramNode = transformParameter(param);",
      "info" : "VariableDeclarationStatement[29425-29468]:VariableDeclarationStatement[29444-29487]"
    }, {
      "left" : "if (paramNode.isName())",
      "right" : "if (paramNode.isName())",
      "info" : "IfStatement[29688-30127]:IfStatement[29707-30146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29712-29763]:Block[29731-29782]"
    }, {
      "left" : "lp.addChildToBack(paramNode);",
      "right" : "lp.addChildToBack(paramNode);",
      "info" : "ExpressionStatement[29724-29753]:ExpressionStatement[29743-29772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29769-30127]:Block[29788-30146]"
    }, {
      "left" : "Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());",
      "right" : "Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());",
      "info" : "ExpressionStatement[29978-30117]:ExpressionStatement[29997-30136]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[30142-30166]:ExpressionStatement[30161-30185]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[30174-30224]:VariableDeclarationStatement[30193-30243]"
    }, {
      "left" : "if (!bodyNode.isBlock())",
      "right" : "if (!bodyNode.isBlock())",
      "info" : "IfStatement[30231-30522]:IfStatement[30250-30541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30256-30522]:Block[30275-30541]"
    }, {
      "left" : "Preconditions.checkState(config.isIdeMode);",
      "right" : "Preconditions.checkState(config.isIdeMode);",
      "info" : "ExpressionStatement[30440-30483]:ExpressionStatement[30459-30502]"
    }, {
      "left" : "bodyNode = IR.block();",
      "right" : "bodyNode = IR.block();",
      "info" : "ExpressionStatement[30492-30514]:ExpressionStatement[30511-30533]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[30529-30555]:ExpressionStatement[30548-30574]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[30562-30592]:ExpressionStatement[30581-30611]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[30598-30610]:ReturnStatement[30617-30629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30687-31021]:Block[30706-31040]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[30695-30725]:VariableDeclarationStatement[30714-30744]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[30732-30793]:ExpressionStatement[30751-30812]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[30800-30865]:ExpressionStatement[30819-30884]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[30872-30996]:IfStatement[30891-31015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30913-30996]:Block[30932-31015]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[30923-30988]:ExpressionStatement[30942-31007]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[31003-31015]:ReturnStatement[31022-31034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31095-31425]:Block[31114-31444]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[31103-31255]:VariableDeclarationStatement[31122-31274]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[31262-31296]:ExpressionStatement[31281-31315]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[31303-31364]:ExpressionStatement[31322-31383]"
    }, {
      "left" : "maybeSetLengthFrom(n, exprNode);",
      "right" : "maybeSetLengthFrom(n, exprNode);",
      "info" : "ExpressionStatement[31371-31403]:ExpressionStatement[31390-31422]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31410-31419]:ReturnStatement[31429-31438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31500-31572]:Block[31519-31591]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[31508-31566]:ReturnStatement[31527-31585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31627-31701]:Block[31646-31720]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[31635-31695]:ReturnStatement[31654-31714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31782-32428]:Block[31801-32447]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[31790-31823]:VariableDeclarationStatement[31809-31842]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[31830-31847]:VariableDeclarationStatement[31849-31866]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[31854-31870]:VariableDeclarationStatement[31873-31889]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[31877-32335]:EnhancedForStatement[31896-32354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31923-32335]:Block[31942-32354]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[31933-31998]:IfStatement[31952-32017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31951-31998]:Block[31970-32017]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[31963-31988]:ExpressionStatement[31982-32007]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[32007-32044]:ExpressionStatement[32026-32063]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[32054-32087]:ExpressionStatement[32073-32106]"
    }, {
      "left" : "maybeSetLengthFrom(cur, label);",
      "right" : "maybeSetLengthFrom(cur, label);",
      "info" : "ExpressionStatement[32096-32127]:ExpressionStatement[32115-32146]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[32137-32223]:VariableDeclarationStatement[32156-32242]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[32232-32270]:ExpressionStatement[32251-32289]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[32280-32291]:ExpressionStatement[32299-32310]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[32300-32327]:ExpressionStatement[32319-32346]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[32342-32403]:ExpressionStatement[32361-32422]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32410-32422]:ReturnStatement[32429-32441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32480-32530]:Block[32499-32549]"
    }, {
      "left" : "return processName(nameNode, false);",
      "right" : "return processName(nameNode, false);",
      "info" : "ReturnStatement[32488-32524]:ReturnStatement[32507-32543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32586-32987]:Block[32605-33006]"
    }, {
      "left" : "if (asString)",
      "right" : "if (asString)",
      "info" : "IfStatement[32594-32981]:IfStatement[32613-33000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32608-32687]:Block[32627-32706]"
    }, {
      "left" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "info" : "ReturnStatement[32618-32679]:ReturnStatement[32637-32698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32693-32981]:Block[32712-33000]"
    }, {
      "left" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "right" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "info" : "IfStatement[32703-32905]:IfStatement[32722-32924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32752-32905]:Block[32771-32924]"
    }, {
      "left" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[32764-32895]:ExpressionStatement[32783-32914]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[32914-32973]:ReturnStatement[32933-32992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33042-33188]:Block[33061-33207]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[33050-33163]:IfStatement[33069-33182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33103-33163]:Block[33122-33182]"
    }, {
      "left" : "return !TokenStream.isKeyword(identifier);",
      "right" : "return !TokenStream.isKeyword(identifier);",
      "info" : "ReturnStatement[33113-33155]:ReturnStatement[33132-33174]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33170-33182]:ReturnStatement[33189-33201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33247-33453]:Block[33266-33472]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[33255-33367]:IfStatement[33274-33386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33308-33367]:Block[33327-33386]"
    }, {
      "left" : "return TokenStream.isKeyword(identifier);",
      "right" : "return TokenStream.isKeyword(identifier);",
      "info" : "ReturnStatement[33318-33359]:ReturnStatement[33337-33378]"
    }, {
      "left" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "right" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "info" : "ReturnStatement[33374-33447]:ReturnStatement[33393-33466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-33936]:Block[33542-33955]"
    }, {
      "left" : "Node node = newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getTarget()));",
      "right" : "Node node = newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getTarget()));",
      "info" : "VariableDeclarationStatement[33531-33645]:VariableDeclarationStatement[33550-33664]"
    }, {
      "left" : "for (AstNode child : exprNode.getArguments())",
      "right" : "for (AstNode child : exprNode.getArguments())",
      "info" : "EnhancedForStatement[33652-33754]:EnhancedForStatement[33671-33773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33698-33754]:Block[33717-33773]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[33708-33746]:ExpressionStatement[33727-33765]"
    }, {
      "left" : "node.setLineno(exprNode.getLineno());",
      "right" : "node.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[33761-33798]:ExpressionStatement[33780-33817]"
    }, {
      "left" : "node.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "right" : "node.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[33805-33869]:ExpressionStatement[33824-33888]"
    }, {
      "left" : "maybeSetLengthFrom(node, exprNode);",
      "right" : "maybeSetLengthFrom(node, exprNode);",
      "info" : "ExpressionStatement[33876-33911]:ExpressionStatement[33895-33930]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[33918-33930]:ReturnStatement[33937-33949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34009-34069]:Block[34028-34088]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[34017-34063]:ReturnStatement[34036-34082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34142-35574]:Block[34161-35593]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[34150-34242]:IfStatement[34169-34261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34185-34242]:Block[34204-34261]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[34195-34234]:ExpressionStatement[34214-34253]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[34250-34287]:VariableDeclarationStatement[34269-34306]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[34294-35549]:EnhancedForStatement[34313-35568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34346-35549]:Block[34365-35568]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[34356-34605]:IfStatement[34375-34624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34409-34605]:Block[34428-34624]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[34421-34595]:IfStatement[34440-34614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34440-34505]:Block[34459-34524]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[34454-34471]:ExpressionStatement[34473-34490]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34484-34493]:ContinueStatement[34503-34512]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[34511-34595]:IfStatement[34530-34614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34530-34595]:Block[34549-34614]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[34544-34561]:ExpressionStatement[34563-34580]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34574-34583]:ContinueStatement[34593-34602]"
    }, {
      "left" : "AstNode rawKey = el.getLeft();",
      "right" : "AstNode rawKey = el.getLeft();",
      "info" : "VariableDeclarationStatement[34615-34645]:VariableDeclarationStatement[34634-34664]"
    }, {
      "left" : "Node key = transformAsString(rawKey);",
      "right" : "Node key = transformAsString(rawKey);",
      "info" : "VariableDeclarationStatement[34654-34691]:VariableDeclarationStatement[34673-34710]"
    }, {
      "left" : "key.setType(Token.STRING_KEY);",
      "right" : "key.setType(Token.STRING_KEY);",
      "info" : "ExpressionStatement[34700-34730]:ExpressionStatement[34719-34749]"
    }, {
      "left" : "if (rawKey instanceof Name && !isAllowedProp(key.getString()))",
      "right" : "if (rawKey instanceof Name && !isAllowedProp(key.getString()))",
      "info" : "IfStatement[34739-34933]:IfStatement[34758-34952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34802-34933]:Block[34821-34952]"
    }, {
      "left" : "errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n              key.getLineno(), \"\", key.getCharno());",
      "right" : "errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n              key.getLineno(), \"\", key.getCharno());",
      "info" : "ExpressionStatement[34814-34923]:ExpressionStatement[34833-34942]"
    }, {
      "left" : "Node value = transform(el.getRight());",
      "right" : "Node value = transform(el.getRight());",
      "info" : "VariableDeclarationStatement[34943-34981]:VariableDeclarationStatement[34962-35000]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[34990-35471]:IfStatement[35009-35490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35009-35227]:Block[35028-35246]"
    }, {
      "left" : "key.setType(Token.GETTER_DEF);",
      "right" : "key.setType(Token.GETTER_DEF);",
      "info" : "ExpressionStatement[35021-35051]:ExpressionStatement[35040-35070]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[35062-35107]:ExpressionStatement[35081-35126]"
    }, {
      "left" : "if (getFnParamNode(value).hasChildren())",
      "right" : "if (getFnParamNode(value).hasChildren())",
      "info" : "IfStatement[35118-35217]:IfStatement[35137-35236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35159-35217]:Block[35178-35236]"
    }, {
      "left" : "reportGetterParam(el.getLeft());",
      "right" : "reportGetterParam(el.getLeft());",
      "info" : "ExpressionStatement[35173-35205]:ExpressionStatement[35192-35224]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[35233-35471]:IfStatement[35252-35490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35252-35471]:Block[35271-35490]"
    }, {
      "left" : "key.setType(Token.SETTER_DEF);",
      "right" : "key.setType(Token.SETTER_DEF);",
      "info" : "ExpressionStatement[35264-35294]:ExpressionStatement[35283-35313]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[35305-35350]:ExpressionStatement[35324-35369]"
    }, {
      "left" : "if (!getFnParamNode(value).hasOneChild())",
      "right" : "if (!getFnParamNode(value).hasOneChild())",
      "info" : "IfStatement[35361-35461]:IfStatement[35380-35480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35403-35461]:Block[35422-35480]"
    }, {
      "left" : "reportSetterParam(el.getLeft());",
      "right" : "reportSetterParam(el.getLeft());",
      "info" : "ExpressionStatement[35417-35449]:ExpressionStatement[35436-35468]"
    }, {
      "left" : "key.addChildToFront(value);",
      "right" : "key.addChildToFront(value);",
      "info" : "ExpressionStatement[35480-35507]:ExpressionStatement[35499-35526]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[35516-35541]:ExpressionStatement[35535-35560]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[35556-35568]:ReturnStatement[35575-35587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35723-35897]:Block[35742-35916]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.isFunction());",
      "right" : "Preconditions.checkArgument(fnNode.isFunction());",
      "info" : "ExpressionStatement[35797-35846]:ExpressionStatement[35816-35865]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[35852-35892]:ReturnStatement[35871-35911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35973-36031]:Block[35992-36050]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[35981-36025]:ReturnStatement[36000-36044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36121-36202]:Block[36140-36221]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[36129-36177]:VariableDeclarationStatement[36148-36196]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[36184-36196]:ReturnStatement[36203-36215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36267-36911]:Block[36286-36930]"
    }, {
      "left" : "Node leftChild = transform(getNode.getTarget());",
      "right" : "Node leftChild = transform(getNode.getTarget());",
      "info" : "VariableDeclarationStatement[36275-36323]:VariableDeclarationStatement[36294-36342]"
    }, {
      "left" : "AstNode nodeProp = getNode.getProperty();",
      "right" : "AstNode nodeProp = getNode.getProperty();",
      "info" : "VariableDeclarationStatement[36330-36371]:VariableDeclarationStatement[36349-36390]"
    }, {
      "left" : "Node rightChild = transformAsString(nodeProp);",
      "right" : "Node rightChild = transformAsString(nodeProp);",
      "info" : "VariableDeclarationStatement[36378-36424]:VariableDeclarationStatement[36397-36443]"
    }, {
      "left" : "if (nodeProp instanceof Name && !isAllowedProp(\n          ((Name) nodeProp).getIdentifier()))",
      "right" : "if (nodeProp instanceof Name && !isAllowedProp(\n          ((Name) nodeProp).getIdentifier()))",
      "info" : "IfStatement[36431-36664]:IfStatement[36450-36683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36525-36664]:Block[36544-36683]"
    }, {
      "left" : "errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n            rightChild.getLineno(), \"\", rightChild.getCharno());",
      "right" : "errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n            rightChild.getLineno(), \"\", rightChild.getCharno());",
      "info" : "ExpressionStatement[36535-36656]:ExpressionStatement[36554-36675]"
    }, {
      "left" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, rightChild);",
      "right" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, rightChild);",
      "info" : "VariableDeclarationStatement[36671-36743]:VariableDeclarationStatement[36690-36762]"
    }, {
      "left" : "newNode.setLineno(leftChild.getLineno());",
      "right" : "newNode.setLineno(leftChild.getLineno());",
      "info" : "ExpressionStatement[36750-36791]:ExpressionStatement[36769-36810]"
    }, {
      "left" : "newNode.setCharno(leftChild.getCharno());",
      "right" : "newNode.setCharno(leftChild.getCharno());",
      "info" : "ExpressionStatement[36798-36839]:ExpressionStatement[36817-36858]"
    }, {
      "left" : "maybeSetLengthFrom(newNode, getNode);",
      "right" : "maybeSetLengthFrom(newNode, getNode);",
      "info" : "ExpressionStatement[36846-36883]:ExpressionStatement[36865-36902]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[36890-36905]:ReturnStatement[36909-36924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36984-37660]:Block[37003-37679]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[36992-37055]:VariableDeclarationStatement[37011-37074]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[37101-37154]:ExpressionStatement[37120-37173]"
    }, {
      "left" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "right" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "info" : "ExpressionStatement[37161-37212]:ExpressionStatement[37180-37231]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[37219-37272]:VariableDeclarationStatement[37238-37291]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[37279-37317]:VariableDeclarationStatement[37298-37336]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[37324-37635]:IfStatement[37343-37654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37363-37635]:Block[37382-37654]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[37373-37411]:VariableDeclarationStatement[37392-37430]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[37490-37535]:ExpressionStatement[37509-37554]"
    }, {
      "left" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "right" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "info" : "ExpressionStatement[37544-37587]:ExpressionStatement[37563-37606]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[37596-37627]:ExpressionStatement[37615-37646]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[37642-37654]:ReturnStatement[37661-37673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37739-37938]:Block[37758-37957]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[37747-37781]:VariableDeclarationStatement[37766-37800]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[37788-37913]:IfStatement[37807-37932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37832-37913]:Block[37851-37932]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[37842-37905]:ExpressionStatement[37861-37924]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[37920-37932]:ReturnStatement[37939-37951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37993-38040]:Block[38012-38059]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[38001-38034]:ReturnStatement[38020-38053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38113-39308]:Block[38132-39327]"
    }, {
      "left" : "String value = literalNode.getValue();",
      "right" : "String value = literalNode.getValue();",
      "info" : "VariableDeclarationStatement[38121-38159]:VariableDeclarationStatement[38140-38178]"
    }, {
      "left" : "Node n = newStringNode(value);",
      "right" : "Node n = newStringNode(value);",
      "info" : "VariableDeclarationStatement[38166-38196]:VariableDeclarationStatement[38185-38215]"
    }, {
      "left" : "if (value.indexOf('\\u000B') != -1)",
      "right" : "if (value.indexOf('\\u000B') != -1)",
      "info" : "IfStatement[38203-39286]:IfStatement[38222-39305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38238-39286]:Block[38257-39305]"
    }, {
      "left" : "int start = literalNode.getAbsolutePosition();",
      "right" : "int start = literalNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[38940-38986]:VariableDeclarationStatement[38959-39005]"
    }, {
      "left" : "int end = start + literalNode.getLength();",
      "right" : "int end = start + literalNode.getLength();",
      "info" : "VariableDeclarationStatement[38995-39037]:VariableDeclarationStatement[39014-39056]"
    }, {
      "left" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "right" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "info" : "IfStatement[39046-39278]:IfStatement[39065-39297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39219-39278]:Block[39238-39297]"
    }, {
      "left" : "n.putBooleanProp(Node.SLASH_V, true);",
      "right" : "n.putBooleanProp(Node.SLASH_V, true);",
      "info" : "ExpressionStatement[39231-39268]:ExpressionStatement[39250-39287]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39293-39302]:ReturnStatement[39312-39321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39372-40085]:Block[39391-40104]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[39380-39390]:VariableDeclarationStatement[39399-39409]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[39397-39593]:IfStatement[39416-39612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39423-39476]:Block[39442-39495]"
    }, {
      "left" : "node = newNode(Token.DEFAULT_CASE);",
      "right" : "node = newNode(Token.DEFAULT_CASE);",
      "info" : "ExpressionStatement[39433-39468]:ExpressionStatement[39452-39487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39482-39593]:Block[39501-39612]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[39492-39532]:VariableDeclarationStatement[39511-39551]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[39541-39585]:ExpressionStatement[39560-39604]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[39600-39634]:VariableDeclarationStatement[39619-39653]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[39641-39695]:ExpressionStatement[39660-39714]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[39702-39740]:ExpressionStatement[39721-39759]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[39747-39812]:ExpressionStatement[39766-39831]"
    }, {
      "left" : "maybeSetLengthFrom(block, caseNode);",
      "right" : "maybeSetLengthFrom(block, caseNode);",
      "info" : "ExpressionStatement[39819-39855]:ExpressionStatement[39838-39874]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[39862-40026]:IfStatement[39881-40045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39900-40026]:Block[39919-40045]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[39910-40018]:EnhancedForStatement[39929-40037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39957-40018]:Block[39976-40037]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[39969-40008]:ExpressionStatement[39988-40027]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[40033-40060]:ExpressionStatement[40052-40079]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[40067-40079]:ReturnStatement[40086-40098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40164-40393]:Block[40183-40412]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[40172-40258]:VariableDeclarationStatement[40191-40277]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[40265-40368]:EnhancedForStatement[40284-40387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40312-40368]:Block[40331-40387]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[40322-40360]:ExpressionStatement[40341-40379]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[40375-40387]:ReturnStatement[40394-40406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40470-40564]:Block[40489-40583]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[40478-40558]:ReturnStatement[40497-40577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40637-41749]:Block[40656-41768]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[40645-40731]:VariableDeclarationStatement[40664-40750]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[40738-40772]:VariableDeclarationStatement[40757-40791]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[40779-40803]:VariableDeclarationStatement[40798-40822]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[40811-41163]:EnhancedForStatement[40830-41182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40866-41163]:Block[40885-41182]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[40967-41110]:IfStatement[40986-41129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40989-41110]:Block[41008-41129]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[41001-41033]:ExpressionStatement[41020-41052]"
    }, {
      "left" : "maybeSetLengthFrom(block, cc);",
      "right" : "maybeSetLengthFrom(block, cc);",
      "info" : "ExpressionStatement[41044-41074]:ExpressionStatement[41063-41093]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[41085-41100]:ExpressionStatement[41104-41119]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[41119-41155]:ExpressionStatement[41138-41174]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[41170-41197]:ExpressionStatement[41189-41216]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[41205-41260]:VariableDeclarationStatement[41224-41279]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[41267-41361]:IfStatement[41286-41380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41293-41361]:Block[41312-41380]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[41303-41353]:ExpressionStatement[41322-41372]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[41564-41723]:IfStatement[41583-41742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41614-41723]:Block[41633-41742]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[41624-41666]:ExpressionStatement[41643-41685]"
    }, {
      "left" : "maybeSetLengthFrom(block, finallyBlock);",
      "right" : "maybeSetLengthFrom(block, finallyBlock);",
      "info" : "ExpressionStatement[41675-41715]:ExpressionStatement[41694-41734]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[41731-41743]:ReturnStatement[41750-41762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41823-43017]:Block[41842-43036]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[41831-41881]:VariableDeclarationStatement[41850-41900]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[41888-41936]:VariableDeclarationStatement[41907-41955]"
    }, {
      "left" : "if (type == Token.NEG && operand.isNumber())",
      "right" : "if (type == Token.NEG && operand.isNumber())",
      "info" : "IfStatement[41943-43011]:IfStatement[41962-43030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41988-42070]:Block[42007-42089]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[41998-42038]:ExpressionStatement[42017-42057]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[42047-42062]:ReturnStatement[42066-42081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42076-43011]:Block[42095-43030]"
    }, {
      "left" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "right" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "info" : "IfStatement[42086-42834]:IfStatement[42105-42853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42222-42448]:Block[42241-42467]"
    }, {
      "left" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "right" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "info" : "VariableDeclarationStatement[42234-42319]:VariableDeclarationStatement[42253-42338]"
    }, {
      "left" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[42330-42438]:ExpressionStatement[42349-42457]"
    }, {
      "left" : "if (type == Token.INC || type == Token.DEC)",
      "right" : "if (type == Token.INC || type == Token.DEC)",
      "info" : "IfStatement[42455-42834]:IfStatement[42474-42853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42499-42834]:Block[42518-42853]"
    }, {
      "left" : "if (!validAssignmentTarget(operand))",
      "right" : "if (!validAssignmentTarget(operand))",
      "info" : "IfStatement[42511-42824]:IfStatement[42530-42843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42548-42824]:Block[42567-42843]"
    }, {
      "left" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "right" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "info" : "VariableDeclarationStatement[42562-42685]:VariableDeclarationStatement[42581-42704]"
    }, {
      "left" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[42698-42812]:ExpressionStatement[42717-42831]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[42844-42879]:VariableDeclarationStatement[42863-42898]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[42888-42982]:IfStatement[42907-43001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42914-42982]:Block[42933-43001]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[42926-42972]:ExpressionStatement[42945-42991]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[42991-43003]:ReturnStatement[43010-43022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43074-43321]:Block[43093-43340]"
    }, {
      "left" : "switch (target.getType()) {\n        case Token.CAST: // CAST is a bit weird, but syntactically valid.\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "right" : "switch (target.getType()) {\n        case Token.CAST: // CAST is a bit weird, but syntactically valid.\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "info" : "SwitchStatement[43082-43295]:SwitchStatement[43101-43314]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[43118-43134]:SwitchCase[43137-43153]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[43192-43208]:SwitchCase[43211-43227]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[43217-43236]:SwitchCase[43236-43255]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[43245-43264]:SwitchCase[43264-43283]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43275-43287]:ReturnStatement[43294-43306]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43302-43315]:ReturnStatement[43321-43334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43410-43784]:Block[43429-43803]"
    }, {
      "left" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "right" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "info" : "IfStatement[43418-43592]:IfStatement[43437-43611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43537-43592]:Block[43556-43611]"
    }, {
      "left" : "processIllegalToken(declarationNode);",
      "right" : "processIllegalToken(declarationNode);",
      "info" : "ExpressionStatement[43547-43584]:ExpressionStatement[43566-43603]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[43600-43631]:VariableDeclarationStatement[43619-43650]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[43638-43759]:EnhancedForStatement[43657-43778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43703-43759]:Block[43722-43778]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[43713-43751]:ExpressionStatement[43732-43770]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[43766-43778]:ReturnStatement[43785-43797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43873-44131]:Block[43892-44150]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[43881-43932]:VariableDeclarationStatement[43900-43951]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[43939-44106]:IfStatement[43958-44125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43985-44106]:Block[44004-44125]"
    }, {
      "left" : "Node initalizer = transform(initializerNode.getInitializer());",
      "right" : "Node initalizer = transform(initializerNode.getInitializer());",
      "info" : "VariableDeclarationStatement[43995-44057]:VariableDeclarationStatement[44014-44076]"
    }, {
      "left" : "node.addChildToBack(initalizer);",
      "right" : "node.addChildToBack(initalizer);",
      "info" : "ExpressionStatement[44066-44098]:ExpressionStatement[44085-44117]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[44113-44125]:ReturnStatement[44132-44144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44193-44338]:Block[44212-44357]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[44201-44332]:ReturnStatement[44220-44351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44413-44573]:Block[44432-44592]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[44421-44567]:ReturnStatement[44440-44586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44632-44886]:Block[44651-44905]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[44640-44845]:ExpressionStatement[44659-44864]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[44852-44880]:ReturnStatement[44871-44899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44937-45077]:Block[44956-45096]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[44945-45071]:ExpressionStatement[44964-45090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45115-45239]:Block[45134-45258]"
    }, {
      "left" : "errorReporter.error(\n          GETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          GETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[45123-45233]:ExpressionStatement[45142-45252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45277-45401]:Block[45296-45420]"
    }, {
      "left" : "errorReporter.error(\n          SETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          SETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[45285-45395]:ExpressionStatement[45304-45414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45444-45581]:Block[45463-45600]"
    }, {
      "left" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[45452-45575]:ExpressionStatement[45471-45594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45624-45769]:Block[45643-45788]"
    }, {
      "left" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[45632-45763]:ExpressionStatement[45651-45782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45826-53441]:Block[45845-53460]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[45832-53350]:SwitchStatement[45851-53369]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "right" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "info" : "SwitchCase[45855-45906]:SwitchCase[45874-45925]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[45915-45935]:ReturnStatement[45934-45954]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "info" : "SwitchCase[45942-45992]:SwitchCase[45961-46011]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[46001-46020]:ReturnStatement[46020-46039]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "info" : "SwitchCase[46027-46078]:SwitchCase[46046-46097]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[46087-46107]:ReturnStatement[46106-46126]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "info" : "SwitchCase[46114-46165]:SwitchCase[46133-46184]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[46174-46194]:ReturnStatement[46193-46213]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EQ:",
      "right" : "case com.google.javascript.rhino.head.Token.EQ:",
      "info" : "SwitchCase[46201-46248]:SwitchCase[46220-46267]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[46257-46273]:ReturnStatement[46276-46292]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NE:",
      "right" : "case com.google.javascript.rhino.head.Token.NE:",
      "info" : "SwitchCase[46280-46327]:SwitchCase[46299-46346]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[46336-46352]:ReturnStatement[46355-46371]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LT:",
      "right" : "case com.google.javascript.rhino.head.Token.LT:",
      "info" : "SwitchCase[46359-46406]:SwitchCase[46378-46425]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[46415-46431]:ReturnStatement[46434-46450]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LE:",
      "right" : "case com.google.javascript.rhino.head.Token.LE:",
      "info" : "SwitchCase[46438-46485]:SwitchCase[46457-46504]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[46494-46510]:ReturnStatement[46513-46529]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GT:",
      "right" : "case com.google.javascript.rhino.head.Token.GT:",
      "info" : "SwitchCase[46517-46564]:SwitchCase[46536-46583]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[46573-46589]:ReturnStatement[46592-46608]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GE:",
      "right" : "case com.google.javascript.rhino.head.Token.GE:",
      "info" : "SwitchCase[46596-46643]:SwitchCase[46615-46662]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[46652-46668]:ReturnStatement[46671-46687]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.LSH:",
      "info" : "SwitchCase[46675-46723]:SwitchCase[46694-46742]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[46732-46749]:ReturnStatement[46751-46768]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.RSH:",
      "info" : "SwitchCase[46756-46804]:SwitchCase[46775-46823]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[46813-46830]:ReturnStatement[46832-46849]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.URSH:",
      "info" : "SwitchCase[46837-46886]:SwitchCase[46856-46905]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[46895-46913]:ReturnStatement[46914-46932]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ADD:",
      "info" : "SwitchCase[46920-46968]:SwitchCase[46939-46987]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[46977-46994]:ReturnStatement[46996-47013]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.SUB:",
      "info" : "SwitchCase[47001-47049]:SwitchCase[47020-47068]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[47058-47075]:ReturnStatement[47077-47094]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.MUL:",
      "info" : "SwitchCase[47082-47130]:SwitchCase[47101-47149]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[47139-47156]:ReturnStatement[47158-47175]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.DIV:",
      "info" : "SwitchCase[47163-47211]:SwitchCase[47182-47230]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[47220-47237]:ReturnStatement[47239-47256]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.MOD:",
      "info" : "SwitchCase[47244-47292]:SwitchCase[47263-47311]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[47301-47318]:ReturnStatement[47320-47337]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NOT:",
      "right" : "case com.google.javascript.rhino.head.Token.NOT:",
      "info" : "SwitchCase[47325-47373]:SwitchCase[47344-47392]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[47382-47399]:ReturnStatement[47401-47418]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "right" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "info" : "SwitchCase[47406-47457]:SwitchCase[47425-47476]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[47466-47486]:ReturnStatement[47485-47505]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.POS:",
      "right" : "case com.google.javascript.rhino.head.Token.POS:",
      "info" : "SwitchCase[47493-47541]:SwitchCase[47512-47560]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[47550-47567]:ReturnStatement[47569-47586]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEG:",
      "right" : "case com.google.javascript.rhino.head.Token.NEG:",
      "info" : "SwitchCase[47574-47622]:SwitchCase[47593-47641]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[47631-47648]:ReturnStatement[47650-47667]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEW:",
      "right" : "case com.google.javascript.rhino.head.Token.NEW:",
      "info" : "SwitchCase[47655-47703]:SwitchCase[47674-47722]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[47712-47729]:ReturnStatement[47731-47748]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "info" : "SwitchCase[47736-47788]:SwitchCase[47755-47807]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[47797-47818]:ReturnStatement[47816-47837]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "info" : "SwitchCase[47825-47876]:SwitchCase[47844-47895]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[47885-47905]:ReturnStatement[47904-47924]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "info" : "SwitchCase[47912-47964]:SwitchCase[47931-47983]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[47973-47994]:ReturnStatement[47992-48013]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "right" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "info" : "SwitchCase[48001-48053]:SwitchCase[48020-48072]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[48062-48083]:ReturnStatement[48081-48102]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CALL:",
      "right" : "case com.google.javascript.rhino.head.Token.CALL:",
      "info" : "SwitchCase[48090-48139]:SwitchCase[48109-48158]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[48148-48166]:ReturnStatement[48167-48185]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NAME:",
      "right" : "case com.google.javascript.rhino.head.Token.NAME:",
      "info" : "SwitchCase[48173-48222]:SwitchCase[48192-48241]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[48231-48249]:ReturnStatement[48250-48268]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "right" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "info" : "SwitchCase[48256-48307]:SwitchCase[48275-48326]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[48316-48336]:ReturnStatement[48335-48355]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.STRING:",
      "right" : "case com.google.javascript.rhino.head.Token.STRING:",
      "info" : "SwitchCase[48343-48394]:SwitchCase[48362-48413]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[48403-48423]:ReturnStatement[48422-48442]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NULL:",
      "right" : "case com.google.javascript.rhino.head.Token.NULL:",
      "info" : "SwitchCase[48430-48479]:SwitchCase[48449-48498]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[48488-48506]:ReturnStatement[48507-48525]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THIS:",
      "right" : "case com.google.javascript.rhino.head.Token.THIS:",
      "info" : "SwitchCase[48513-48562]:SwitchCase[48532-48581]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[48571-48589]:ReturnStatement[48590-48608]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "right" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "info" : "SwitchCase[48596-48646]:SwitchCase[48615-48665]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[48655-48674]:ReturnStatement[48674-48693]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "right" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "info" : "SwitchCase[48681-48730]:SwitchCase[48700-48749]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[48739-48757]:ReturnStatement[48758-48776]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "right" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "info" : "SwitchCase[48764-48813]:SwitchCase[48783-48832]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[48822-48840]:ReturnStatement[48841-48859]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "right" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "info" : "SwitchCase[48847-48896]:SwitchCase[48866-48915]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[48905-48923]:ReturnStatement[48924-48942]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "right" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "info" : "SwitchCase[48930-48981]:SwitchCase[48949-49000]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[48990-49010]:ReturnStatement[49009-49029]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THROW:",
      "right" : "case com.google.javascript.rhino.head.Token.THROW:",
      "info" : "SwitchCase[49017-49067]:SwitchCase[49036-49086]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[49076-49095]:ReturnStatement[49095-49114]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IN:",
      "right" : "case com.google.javascript.rhino.head.Token.IN:",
      "info" : "SwitchCase[49102-49149]:SwitchCase[49121-49168]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[49158-49174]:ReturnStatement[49177-49193]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "info" : "SwitchCase[49181-49236]:SwitchCase[49200-49255]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[49245-49269]:ReturnStatement[49264-49288]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "info" : "SwitchCase[49276-49329]:SwitchCase[49295-49348]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[49338-49360]:ReturnStatement[49357-49379]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "info" : "SwitchCase[49367-49421]:SwitchCase[49386-49440]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[49430-49453]:ReturnStatement[49449-49472]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRY:",
      "right" : "case com.google.javascript.rhino.head.Token.TRY:",
      "info" : "SwitchCase[49460-49508]:SwitchCase[49479-49527]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[49517-49534]:ReturnStatement[49536-49553]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LP:",
      "right" : "case com.google.javascript.rhino.head.Token.LP:",
      "info" : "SwitchCase[49585-49632]:SwitchCase[49604-49651]"
    }, {
      "left" : "return Token.PARAM_LIST;",
      "right" : "return Token.PARAM_LIST;",
      "info" : "ReturnStatement[49641-49665]:ReturnStatement[49660-49684]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "right" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "info" : "SwitchCase[49672-49722]:SwitchCase[49691-49741]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[49731-49750]:ReturnStatement[49750-49769]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "info" : "SwitchCase[49757-49808]:SwitchCase[49776-49827]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[49817-49837]:ReturnStatement[49836-49856]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[49844-49901]:SwitchCase[49863-49920]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[49910-49936]:ReturnStatement[49929-49955]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[49943-50001]:SwitchCase[49962-50020]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[50010-50037]:ReturnStatement[50029-50056]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[50044-50102]:SwitchCase[50063-50121]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[50111-50138]:ReturnStatement[50130-50157]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[50145-50200]:SwitchCase[50164-50219]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[50209-50233]:ReturnStatement[50228-50252]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[50240-50295]:SwitchCase[50259-50314]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[50304-50328]:ReturnStatement[50323-50347]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[50335-50391]:SwitchCase[50354-50410]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[50400-50425]:ReturnStatement[50419-50444]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[50432-50487]:SwitchCase[50451-50506]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[50496-50520]:ReturnStatement[50515-50539]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[50527-50582]:SwitchCase[50546-50601]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[50591-50615]:ReturnStatement[50610-50634]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[50622-50677]:SwitchCase[50641-50696]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[50686-50710]:ReturnStatement[50705-50729]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[50717-50772]:SwitchCase[50736-50791]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[50781-50805]:ReturnStatement[50800-50824]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[50812-50867]:SwitchCase[50831-50886]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[50876-50900]:ReturnStatement[50895-50919]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "right" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "info" : "SwitchCase[50907-50956]:SwitchCase[50926-50975]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[50965-50983]:ReturnStatement[50984-51002]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OR:",
      "right" : "case com.google.javascript.rhino.head.Token.OR:",
      "info" : "SwitchCase[50990-51037]:SwitchCase[51009-51056]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[51046-51062]:ReturnStatement[51065-51081]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.AND:",
      "right" : "case com.google.javascript.rhino.head.Token.AND:",
      "info" : "SwitchCase[51069-51117]:SwitchCase[51088-51136]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[51126-51143]:ReturnStatement[51145-51162]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INC:",
      "right" : "case com.google.javascript.rhino.head.Token.INC:",
      "info" : "SwitchCase[51150-51198]:SwitchCase[51169-51217]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[51207-51224]:ReturnStatement[51226-51243]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEC:",
      "right" : "case com.google.javascript.rhino.head.Token.DEC:",
      "info" : "SwitchCase[51231-51279]:SwitchCase[51250-51298]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[51288-51305]:ReturnStatement[51307-51324]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "right" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "info" : "SwitchCase[51312-51365]:SwitchCase[51331-51384]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[51374-51396]:ReturnStatement[51393-51415]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IF:",
      "right" : "case com.google.javascript.rhino.head.Token.IF:",
      "info" : "SwitchCase[51403-51450]:SwitchCase[51422-51469]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[51459-51475]:ReturnStatement[51478-51494]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "right" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "info" : "SwitchCase[51482-51533]:SwitchCase[51501-51552]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[51542-51562]:ReturnStatement[51561-51581]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CASE:",
      "right" : "case com.google.javascript.rhino.head.Token.CASE:",
      "info" : "SwitchCase[51569-51618]:SwitchCase[51588-51637]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[51627-51645]:ReturnStatement[51646-51664]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "right" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "info" : "SwitchCase[51652-51704]:SwitchCase[51671-51723]"
    }, {
      "left" : "return Token.DEFAULT_CASE;",
      "right" : "return Token.DEFAULT_CASE;",
      "info" : "ReturnStatement[51713-51739]:ReturnStatement[51732-51758]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "right" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "info" : "SwitchCase[51746-51796]:SwitchCase[51765-51815]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[51805-51824]:ReturnStatement[51824-51843]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DO:",
      "right" : "case com.google.javascript.rhino.head.Token.DO:",
      "info" : "SwitchCase[51831-51878]:SwitchCase[51850-51897]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[51887-51903]:ReturnStatement[51906-51922]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FOR:",
      "right" : "case com.google.javascript.rhino.head.Token.FOR:",
      "info" : "SwitchCase[51910-51958]:SwitchCase[51929-51977]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[51967-51984]:ReturnStatement[51986-52003]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "right" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "info" : "SwitchCase[51991-52041]:SwitchCase[52010-52060]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[52050-52069]:ReturnStatement[52069-52088]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "right" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "info" : "SwitchCase[52076-52129]:SwitchCase[52095-52148]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[52138-52160]:ReturnStatement[52157-52179]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VAR:",
      "right" : "case com.google.javascript.rhino.head.Token.VAR:",
      "info" : "SwitchCase[52167-52215]:SwitchCase[52186-52234]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[52224-52241]:ReturnStatement[52243-52260]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WITH:",
      "right" : "case com.google.javascript.rhino.head.Token.WITH:",
      "info" : "SwitchCase[52248-52297]:SwitchCase[52267-52316]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[52306-52324]:ReturnStatement[52325-52343]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "right" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "info" : "SwitchCase[52331-52381]:SwitchCase[52350-52400]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[52390-52409]:ReturnStatement[52409-52428]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.VOID:",
      "info" : "SwitchCase[52416-52465]:SwitchCase[52435-52484]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[52474-52492]:ReturnStatement[52493-52511]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "right" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "info" : "SwitchCase[52499-52549]:SwitchCase[52518-52568]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[52558-52577]:ReturnStatement[52577-52596]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "right" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "info" : "SwitchCase[52584-52634]:SwitchCase[52603-52653]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[52643-52662]:ReturnStatement[52662-52681]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "right" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "info" : "SwitchCase[52669-52719]:SwitchCase[52688-52738]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[52728-52747]:ReturnStatement[52747-52766]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "info" : "SwitchCase[52754-52808]:SwitchCase[52773-52827]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "info" : "SwitchCase[52815-52871]:SwitchCase[52834-52890]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[52880-52905]:ReturnStatement[52899-52924]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "right" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "info" : "SwitchCase[52912-52963]:SwitchCase[52931-52982]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[52972-52992]:ReturnStatement[52991-53011]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GET:",
      "right" : "case com.google.javascript.rhino.head.Token.GET:",
      "info" : "SwitchCase[52999-53047]:SwitchCase[53018-53066]"
    }, {
      "left" : "return Token.GETTER_DEF;",
      "right" : "return Token.GETTER_DEF;",
      "info" : "ReturnStatement[53056-53080]:ReturnStatement[53075-53099]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SET:",
      "right" : "case com.google.javascript.rhino.head.Token.SET:",
      "info" : "SwitchCase[53087-53135]:SwitchCase[53106-53154]"
    }, {
      "left" : "return Token.SETTER_DEF;",
      "right" : "return Token.SETTER_DEF;",
      "info" : "ReturnStatement[53144-53168]:ReturnStatement[53163-53187]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONST:",
      "right" : "case com.google.javascript.rhino.head.Token.CONST:",
      "info" : "SwitchCase[53175-53225]:SwitchCase[53194-53244]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[53234-53253]:ReturnStatement[53253-53272]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "right" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "info" : "SwitchCase[53260-53313]:SwitchCase[53279-53332]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[53322-53344]:ReturnStatement[53341-53363]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[53382-53437]:ThrowStatement[53401-53456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53548-53609]:Block[53567-53628]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[53554-53605]:ReturnStatement[53573-53624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53657-53726]:Block[53676-53745]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[53663-53722]:ReturnStatement[53682-53741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53787-53864]:Block[53806-53883]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[53793-53860]:ReturnStatement[53812-53879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53938-54023]:Block[53957-54042]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[53944-54019]:ReturnStatement[53963-54038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54068-54131]:Block[54087-54150]"
    }, {
      "left" : "return IR.string(value).clonePropsFrom(templateNode);",
      "right" : "return IR.string(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[54074-54127]:ReturnStatement[54093-54146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54186-54260]:Block[54205-54279]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[54192-54256]:ReturnStatement[54211-54275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54305-54368]:Block[54324-54387]"
    }, {
      "left" : "return IR.number(value).clonePropsFrom(templateNode);",
      "right" : "return IR.number(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[54311-54364]:ReturnStatement[54330-54383]"
    } ]
  },
  "interFileMappings" : { }
}