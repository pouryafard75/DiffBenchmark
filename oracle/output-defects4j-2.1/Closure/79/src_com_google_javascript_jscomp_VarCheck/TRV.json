{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undefined\");",
      "right" : "static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undefined\");",
      "info" : "FieldDeclaration[1272-1411]:FieldDeclaration[1272-1411]"
    }, {
      "left" : "static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
      "right" : "static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
      "info" : "FieldDeclaration[1415-1635]:FieldDeclaration[1415-1635]"
    }, {
      "left" : "static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
      "right" : "static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
      "info" : "FieldDeclaration[1639-1869]:FieldDeclaration[1639-1869]"
    }, {
      "left" : "static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
      "right" : "static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
      "info" : "FieldDeclaration[1873-2065]:FieldDeclaration[1873-2065]"
    }, {
      "left" : "static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect\");",
      "right" : "static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect\");",
      "info" : "FieldDeclaration[2069-2251]:FieldDeclaration[2069-2251]"
    }, {
      "left" : "static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =\n    DiagnosticType.warning(\n      \"JSC_UNDEFINED_EXTERN_VAR_ERROR\",\n      \"name {0} is not undefined in the externs.\");",
      "right" : "static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =\n    DiagnosticType.warning(\n      \"JSC_UNDEFINED_EXTERN_VAR_ERROR\",\n      \"name {0} is not undefined in the externs.\");",
      "info" : "FieldDeclaration[2255-2431]:FieldDeclaration[2255-2431]"
    }, {
      "left" : "static final DiagnosticType INVALID_FUNCTION_DECL =\n    DiagnosticType.error(\"JSC_INVALID_FUNCTION_DECL\",\n        \"Syntax error: function declaration must have a name\");",
      "right" : "static final DiagnosticType INVALID_FUNCTION_DECL =\n    DiagnosticType.error(\"JSC_INVALID_FUNCTION_DECL\",\n        \"Syntax error: function declaration must have a name\");",
      "info" : "FieldDeclaration[2435-2604]:FieldDeclaration[2435-2604]"
    }, {
      "left" : "private CompilerInput synthesizedExternsInput = null;",
      "right" : "private CompilerInput synthesizedExternsInput = null;",
      "info" : "FieldDeclaration[2608-2661]:FieldDeclaration[2608-2661]"
    }, {
      "left" : "private Node synthesizedExternsRoot = null;",
      "right" : "private Node synthesizedExternsRoot = null;",
      "info" : "FieldDeclaration[2664-2707]:FieldDeclaration[2664-2707]"
    }, {
      "left" : "private Set<String> varsToDeclareInExterns = Sets.newHashSet();",
      "right" : "private Set<String> varsToDeclareInExterns = Sets.newHashSet();",
      "info" : "FieldDeclaration[2884-2947]:FieldDeclaration[2884-2947]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2951-2991]:FieldDeclaration[2951-2991]"
    }, {
      "left" : "private final boolean sanityCheck;",
      "right" : "private final boolean sanityCheck;",
      "info" : "FieldDeclaration[3050-3084]:FieldDeclaration[3050-3084]"
    }, {
      "left" : "private boolean strictExternCheck;",
      "right" : "private boolean strictExternCheck;",
      "info" : "FieldDeclaration[3127-3161]:FieldDeclaration[3127-3161]"
    }, {
      "left" : "VarCheck(AbstractCompiler compiler)",
      "right" : "VarCheck(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[3165-3233]:MethodDeclaration[3165-3233]"
    }, {
      "left" : "VarCheck(AbstractCompiler compiler, boolean sanityCheck)",
      "right" : "VarCheck(AbstractCompiler compiler, boolean sanityCheck)",
      "info" : "MethodDeclaration[3237-3499]:MethodDeclaration[3237-3499]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3503-4045]:MethodDeclaration[3503-4045]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4049-7267]:MethodDeclaration[4049-7267]"
    }, {
      "left" : "NameRefInExternsCheck",
      "right" : "NameRefInExternsCheck",
      "info" : "TypeDeclaration[8153-9382]:TypeDeclaration[8186-9415]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8388-9378]:MethodDeclaration[8421-9411]"
    }, {
      "left" : "private CompilerInput getSynthesizedExternsInput()",
      "right" : "private CompilerInput getSynthesizedExternsInput()",
      "info" : "MethodDeclaration[9386-9690]:MethodDeclaration[9419-9723]"
    }, {
      "left" : "private Node getSynthesizedExternsRoot()",
      "right" : "private Node getSynthesizedExternsRoot()",
      "info" : "MethodDeclaration[9694-10036]:MethodDeclaration[9727-10069]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3201-3233]:Block[3201-3233]"
    }, {
      "left" : "this(compiler, false);",
      "right" : "this(compiler, false);",
      "info" : "ConstructorInvocation[3207-3229]:ConstructorInvocation[3207-3229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3294-3499]:Block[3294-3499]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3300-3325]:ExpressionStatement[3300-3325]"
    }, {
      "left" : "this.strictExternCheck = compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;",
      "right" : "this.strictExternCheck = compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;",
      "info" : "ExpressionStatement[3330-3459]:ExpressionStatement[3330-3459]"
    }, {
      "left" : "this.sanityCheck = sanityCheck;",
      "right" : "this.sanityCheck = sanityCheck;",
      "info" : "ExpressionStatement[3464-3495]:ExpressionStatement[3464-3495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3560-4045]:Block[3560-4045]"
    }, {
      "left" : "if (!sanityCheck)",
      "right" : "if (!sanityCheck)",
      "info" : "IfStatement[3743-3846]:IfStatement[3743-3846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3761-3846]:Block[3761-3846]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());",
      "right" : "NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());",
      "info" : "ExpressionStatement[3769-3840]:ExpressionStatement[3769-3840]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[3852-3940]:ExpressionStatement[3852-3940]"
    }, {
      "left" : "for (String varName : varsToDeclareInExterns)",
      "right" : "for (String varName : varsToDeclareInExterns)",
      "info" : "EnhancedForStatement[3945-4041]:EnhancedForStatement[3945-4041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3991-4041]:Block[3991-4041]"
    }, {
      "left" : "createSynthesizedExternVar(varName);",
      "right" : "createSynthesizedExternVar(varName);",
      "info" : "ExpressionStatement[3999-4035]:ExpressionStatement[3999-4035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4117-7267]:Block[4117-7267]"
    }, {
      "left" : "if (n.getType() != Token.NAME)",
      "right" : "if (n.getType() != Token.NAME)",
      "info" : "IfStatement[4123-4175]:IfStatement[4123-4175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4154-4175]:Block[4154-4175]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4162-4169]:ReturnStatement[4162-4169]"
    }, {
      "left" : "String varName = n.getString();",
      "right" : "String varName = n.getString();",
      "info" : "VariableDeclarationStatement[4181-4212]:VariableDeclarationStatement[4181-4212]"
    }, {
      "left" : "if (varName.isEmpty())",
      "right" : "if (varName.isEmpty())",
      "info" : "IfStatement[4265-4609]:IfStatement[4265-4609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4288-4609]:Block[4288-4609]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isFunction(parent));",
      "right" : "Preconditions.checkState(NodeUtil.isFunction(parent));",
      "info" : "ExpressionStatement[4296-4350]:ExpressionStatement[4296-4350]"
    }, {
      "left" : "if (!NodeUtil.isFunctionExpression(parent))",
      "right" : "if (!NodeUtil.isFunctionExpression(parent))",
      "info" : "IfStatement[4492-4589]:IfStatement[4492-4589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4536-4589]:Block[4536-4589]"
    }, {
      "left" : "t.report(n, INVALID_FUNCTION_DECL);",
      "right" : "t.report(n, INVALID_FUNCTION_DECL);",
      "info" : "ExpressionStatement[4546-4581]:ExpressionStatement[4546-4581]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4596-4603]:ReturnStatement[4596-4603]"
    }, {
      "left" : "if ((parent.getType() == Token.VAR ||\n         NodeUtil.isFunctionDeclaration(parent)) &&\n        varsToDeclareInExterns.contains(varName))",
      "right" : "if ((parent.getType() == Token.VAR ||\n         NodeUtil.isFunctionDeclaration(parent)) &&\n        varsToDeclareInExterns.contains(varName))",
      "info" : "IfStatement[4735-4963]:IfStatement[4735-4963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4875-4963]:Block[4875-4963]"
    }, {
      "left" : "createSynthesizedExternVar(varName);",
      "right" : "createSynthesizedExternVar(varName);",
      "info" : "ExpressionStatement[4883-4919]:ExpressionStatement[4883-4919]"
    }, {
      "left" : "n.addSuppression(\"duplicate\");",
      "right" : "n.addSuppression(\"duplicate\");",
      "info" : "ExpressionStatement[4927-4957]:ExpressionStatement[4927-4957]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[5014-5041]:VariableDeclarationStatement[5014-5041]"
    }, {
      "left" : "Scope.Var var = scope.getVar(varName);",
      "right" : "Scope.Var var = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[5046-5084]:VariableDeclarationStatement[5046-5084]"
    }, {
      "left" : "if (var == null)",
      "right" : "if (var == null)",
      "info" : "IfStatement[5089-5786]:IfStatement[5089-5786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5106-5786]:Block[5106-5786]"
    }, {
      "left" : "if (NodeUtil.isFunctionExpression(parent))",
      "right" : "if (NodeUtil.isFunctionExpression(parent))",
      "info" : "IfStatement[5114-5766]:IfStatement[5114-5766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5157-5271]:Block[5157-5271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5277-5766]:Block[5277-5766]"
    }, {
      "left" : "if (!strictExternCheck || !t.getInput().isExtern())",
      "right" : "if (!strictExternCheck || !t.getInput().isExtern())",
      "info" : "IfStatement[5359-5475]:IfStatement[5359-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5411-5475]:Block[5411-5475]"
    }, {
      "left" : "t.report(n, UNDEFINED_VAR_ERROR, varName);",
      "right" : "t.report(n, UNDEFINED_VAR_ERROR, varName);",
      "info" : "ExpressionStatement[5423-5465]:ExpressionStatement[5423-5465]"
    }, {
      "left" : "if (sanityCheck)",
      "right" : "if (sanityCheck)",
      "info" : "IfStatement[5485-5758]:IfStatement[5485-5758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5502-5590]:Block[5502-5590]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected variable \" + varName);",
      "right" : "throw new IllegalStateException(\"Unexpected variable \" + varName);",
      "info" : "ThrowStatement[5514-5580]:ThrowStatement[5514-5580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5596-5758]:Block[5596-5758]"
    }, {
      "left" : "createSynthesizedExternVar(varName);",
      "right" : "createSynthesizedExternVar(varName);",
      "info" : "ExpressionStatement[5608-5644]:ExpressionStatement[5608-5644]"
    }, {
      "left" : "scope.getGlobalScope().declare(varName, n,\n              null, getSynthesizedExternsInput());",
      "right" : "scope.getGlobalScope().declare(varName, n,\n              null, getSynthesizedExternsInput());",
      "info" : "ExpressionStatement[5655-5748]:ExpressionStatement[5655-5748]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5773-5780]:ReturnStatement[5773-5780]"
    }, {
      "left" : "CompilerInput currInput = t.getInput();",
      "right" : "CompilerInput currInput = t.getInput();",
      "info" : "VariableDeclarationStatement[5792-5831]:VariableDeclarationStatement[5792-5831]"
    }, {
      "left" : "CompilerInput varInput = var.input;",
      "right" : "CompilerInput varInput = var.input;",
      "info" : "VariableDeclarationStatement[5836-5871]:VariableDeclarationStatement[5836-5871]"
    }, {
      "left" : "if (currInput == varInput || currInput == null || varInput == null)",
      "right" : "if (currInput == varInput || currInput == null || varInput == null)",
      "info" : "IfStatement[5876-6031]:IfStatement[5876-6031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5944-6031]:Block[5944-6031]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6018-6025]:ReturnStatement[6018-6025]"
    }, {
      "left" : "JSModule currModule = currInput.getModule();",
      "right" : "JSModule currModule = currInput.getModule();",
      "info" : "VariableDeclarationStatement[6071-6115]:VariableDeclarationStatement[6071-6115]"
    }, {
      "left" : "JSModule varModule = varInput.getModule();",
      "right" : "JSModule varModule = varInput.getModule();",
      "info" : "VariableDeclarationStatement[6120-6162]:VariableDeclarationStatement[6120-6162]"
    }, {
      "left" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "right" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "info" : "VariableDeclarationStatement[6167-6221]:VariableDeclarationStatement[6167-6221]"
    }, {
      "left" : "if (varModule != currModule && varModule != null && currModule != null)",
      "right" : "if (varModule != currModule && varModule != null && currModule != null)",
      "info" : "IfStatement[6226-7263]:IfStatement[6226-7263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6298-7263]:Block[6298-7263]"
    }, {
      "left" : "if (moduleGraph.dependsOn(currModule, varModule))",
      "right" : "if (moduleGraph.dependsOn(currModule, varModule))",
      "info" : "IfStatement[6306-7257]:IfStatement[6306-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6356-6421]:Block[6356-6421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6427-7257]:Block[6427-7257]"
    }, {
      "left" : "if (!sanityCheck && scope.isGlobal())",
      "right" : "if (!sanityCheck && scope.isGlobal())",
      "info" : "IfStatement[6437-7249]:IfStatement[6437-7249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6475-7113]:Block[6475-7113]"
    }, {
      "left" : "if (moduleGraph.dependsOn(varModule, currModule))",
      "right" : "if (moduleGraph.dependsOn(varModule, currModule))",
      "info" : "IfStatement[6487-7103]:IfStatement[6487-7103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6537-6752]:Block[6537-6752]"
    }, {
      "left" : "t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);",
      "right" : "t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);",
      "info" : "ExpressionStatement[6628-6740]:ExpressionStatement[6628-6740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6758-7103]:Block[6758-7103]"
    }, {
      "left" : "t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);",
      "right" : "t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);",
      "info" : "ExpressionStatement[6980-7091]:ExpressionStatement[6980-7091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7119-7249]:Block[7119-7249]"
    }, {
      "left" : "t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);",
      "right" : "t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);",
      "info" : "ExpressionStatement[7131-7239]:ExpressionStatement[7131-7239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8444-9378]:Block[8477-9411]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[8452-9372]:IfStatement[8485-9405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8483-9372]:Block[8516-9405]"
    }, {
      "left" : "switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.LP:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n == parent.getFirstChild()) {\n              Scope scope = t.getScope();\n              Scope.Var var = scope.getVar(n.getString());\n              if (var == null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope = t.getScope();\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }",
      "right" : "switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.LP:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n == parent.getFirstChild()) {\n              Scope scope = t.getScope();\n              Scope.Var var = scope.getVar(n.getString());\n              if (var == null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope = t.getScope();\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }",
      "info" : "SwitchStatement[8493-9364]:SwitchStatement[8526-9397]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[8531-8546]:SwitchCase[8564-8579]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8557-8577]:SwitchCase[8590-8610]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[8588-8602]:SwitchCase[8621-8635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8646-8652]:BreakStatement[8679-8685]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8663-8682]:SwitchCase[8696-8715]"
    }, {
      "left" : "if (n == parent.getFirstChild())",
      "right" : "if (n == parent.getFirstChild())",
      "info" : "IfStatement[8695-9024]:IfStatement[8728-9057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8728-9024]:Block[8761-9057]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[8744-8771]:VariableDeclarationStatement[8777-8804]"
    }, {
      "left" : "Scope.Var var = scope.getVar(n.getString());",
      "right" : "Scope.Var var = scope.getVar(n.getString());",
      "info" : "VariableDeclarationStatement[8786-8830]:VariableDeclarationStatement[8819-8863]"
    }, {
      "left" : "if (var == null)",
      "right" : "if (var == null)",
      "info" : "IfStatement[8845-9010]:IfStatement[8878-9043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8862-9010]:Block[8895-9043]"
    }, {
      "left" : "t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());",
      "right" : "t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());",
      "info" : "ExpressionStatement[8880-8935]:ExpressionStatement[8913-8968]"
    }, {
      "left" : "varsToDeclareInExterns.add(n.getString());",
      "right" : "varsToDeclareInExterns.add(n.getString());",
      "info" : "ExpressionStatement[8952-8994]:ExpressionStatement[8985-9027]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9037-9043]:BreakStatement[9070-9076]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9054-9062]:SwitchCase[9087-9095]"
    }, {
      "left" : "t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());",
      "right" : "t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());",
      "info" : "ExpressionStatement[9075-9135]:ExpressionStatement[9108-9168]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[9149-9176]:VariableDeclarationStatement[9182-9209]"
    }, {
      "left" : "Scope.Var var = scope.getVar(n.getString());",
      "right" : "Scope.Var var = scope.getVar(n.getString());",
      "info" : "VariableDeclarationStatement[9189-9233]:VariableDeclarationStatement[9222-9266]"
    }, {
      "left" : "if (var == null)",
      "right" : "if (var == null)",
      "info" : "IfStatement[9246-9335]:IfStatement[9279-9368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9263-9335]:Block[9296-9368]"
    }, {
      "left" : "varsToDeclareInExterns.add(n.getString());",
      "right" : "varsToDeclareInExterns.add(n.getString());",
      "info" : "ExpressionStatement[9279-9321]:ExpressionStatement[9312-9354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9348-9354]:BreakStatement[9381-9387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9508-9690]:Block[9541-9723]"
    }, {
      "left" : "if (synthesizedExternsInput == null)",
      "right" : "if (synthesizedExternsInput == null)",
      "info" : "IfStatement[9514-9650]:IfStatement[9547-9683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-9650]:Block[9584-9683]"
    }, {
      "left" : "synthesizedExternsInput =\n          compiler.newExternInput(\"{SyntheticVarsDeclar}\");",
      "right" : "synthesizedExternsInput =\n          compiler.newExternInput(\"{SyntheticVarsDeclar}\");",
      "info" : "ExpressionStatement[9559-9644]:ExpressionStatement[9592-9677]"
    }, {
      "left" : "return synthesizedExternsInput;",
      "right" : "return synthesizedExternsInput;",
      "info" : "ReturnStatement[9655-9686]:ReturnStatement[9688-9719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9805-10036]:Block[9838-10069]"
    }, {
      "left" : "if (synthesizedExternsRoot == null)",
      "right" : "if (synthesizedExternsRoot == null)",
      "info" : "IfStatement[9811-9997]:IfStatement[9844-10030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9847-9997]:Block[9880-10030]"
    }, {
      "left" : "CompilerInput synthesizedExterns = getSynthesizedExternsInput();",
      "right" : "CompilerInput synthesizedExterns = getSynthesizedExternsInput();",
      "info" : "VariableDeclarationStatement[9855-9919]:VariableDeclarationStatement[9888-9952]"
    }, {
      "left" : "synthesizedExternsRoot = synthesizedExterns.getAstRoot(compiler);",
      "right" : "synthesizedExternsRoot = synthesizedExterns.getAstRoot(compiler);",
      "info" : "ExpressionStatement[9926-9991]:ExpressionStatement[9959-10024]"
    }, {
      "left" : "return synthesizedExternsRoot;",
      "right" : "return synthesizedExternsRoot;",
      "info" : "ReturnStatement[10002-10032]:ReturnStatement[10035-10065]"
    } ]
  },
  "interFileMappings" : { }
}