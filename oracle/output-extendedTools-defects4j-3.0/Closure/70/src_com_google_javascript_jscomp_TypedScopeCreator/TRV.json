{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[4799-4973]:FieldDeclaration[4799-4973]"
    }, {
      "left" : "private static final String LEGACY_TYPEDEF = \"goog.typedef\";",
      "right" : "private static final String LEGACY_TYPEDEF = \"goog.typedef\";",
      "info" : "FieldDeclaration[4977-5037]:FieldDeclaration[4977-5037]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5041-5218]:FieldDeclaration[5041-5218]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5222-5409]:FieldDeclaration[5222-5409]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5413-5597]:FieldDeclaration[5413-5597]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5601-5786]:FieldDeclaration[5601-5786]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[5790-5969]:FieldDeclaration[5790-5969]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[5973-6143]:FieldDeclaration[5973-6143]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6147-6337]:FieldDeclaration[6147-6337]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6341-6381]:FieldDeclaration[6341-6381]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6384-6437]:FieldDeclaration[6384-6437]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6440-6478]:FieldDeclaration[6440-6478]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6481-6529]:FieldDeclaration[6481-6529]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[6532-6574]:FieldDeclaration[6532-6574]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[6577-6655]:FieldDeclaration[6577-6655]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[6659-7332]:TypeDeclaration[6659-7332]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[6838-6854]:FieldDeclaration[6838-6854]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[6859-6877]:FieldDeclaration[6859-6877]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[6883-7220]:MethodDeclaration[6883-7220]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[7226-7328]:MethodDeclaration[7226-7328]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7336-7438]:MethodDeclaration[7336-7438]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[7442-7780]:MethodDeclaration[7442-7780]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[7784-9646]:MethodDeclaration[7784-9646]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[9650-11414]:MethodDeclaration[9650-11414]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[11418-11722]:MethodDeclaration[11418-11722]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[11726-11886]:MethodDeclaration[11726-11886]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[11890-12009]:MethodDeclaration[11890-12009]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[12013-13735]:TypeDeclaration[12013-13735]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[12112-12150]:FieldDeclaration[12112-12150]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[12156-12245]:MethodDeclaration[12156-12245]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[12251-13109]:MethodDeclaration[12251-13109]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "info" : "MethodDeclaration[13115-13731]:MethodDeclaration[13115-13731]"
    }, {
      "left" : "private static Node getPrototypePropertyOwner(Node n)",
      "right" : "private static Node getPrototypePropertyOwner(Node n)",
      "info" : "MethodDeclaration[13739-14378]:MethodDeclaration[13739-14378]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[14382-14492]:MethodDeclaration[14382-14492]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[14496-58441]:TypeDeclaration[14496-58441]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[14587-14659]:FieldDeclaration[14587-14659]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[14665-14749]:FieldDeclaration[14665-14749]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[14755-14909]:FieldDeclaration[14755-14909]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[14915-15169]:FieldDeclaration[14915-15169]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[15175-15270]:FieldDeclaration[15175-15270]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[15276-15351]:MethodDeclaration[15276-15351]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[15357-15470]:MethodDeclaration[15357-15470]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[15476-15976]:MethodDeclaration[15476-15976]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[15982-17004]:MethodDeclaration[15982-17004]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[17010-18385]:MethodDeclaration[17010-18385]"
    }, {
      "left" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "right" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[18391-19518]:MethodDeclaration[18391-19518]"
    }, {
      "left" : "private void defineObjectLiteral(NodeTraversal t, Node objectLit)",
      "right" : "private void defineObjectLiteral(NodeTraversal t, Node objectLit)",
      "info" : "MethodDeclaration[19524-21215]:MethodDeclaration[19524-21215]"
    }, {
      "left" : "void processObjectLitProperties(\n        NodeTraversal t, Node objLit, ObjectType objLitType)",
      "right" : "void processObjectLitProperties(\n        NodeTraversal t, Node objLit, ObjectType objLitType)",
      "info" : "MethodDeclaration[21221-22737]:MethodDeclaration[21221-22737]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[22743-23662]:MethodDeclaration[22743-23662]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[23668-23968]:MethodDeclaration[23668-23968]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[23974-24193]:MethodDeclaration[23974-24193]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[24199-24825]:MethodDeclaration[24199-24825]"
    }, {
      "left" : "void defineFunctionLiteral(Node n, Node parent)",
      "right" : "void defineFunctionLiteral(Node n, Node parent)",
      "info" : "MethodDeclaration[24831-25704]:MethodDeclaration[24831-25704]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[25710-26626]:MethodDeclaration[25710-26626]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[26632-27306]:MethodDeclaration[26632-27306]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[27312-32187]:MethodDeclaration[27312-32187]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[32193-33020]:MethodDeclaration[32193-33020]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[33026-35493]:MethodDeclaration[33026-35493]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[35499-36023]:MethodDeclaration[35499-36023]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[36029-37320]:MethodDeclaration[36029-37320]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[37327-42540]:MethodDeclaration[37327-42540]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[42546-42940]:MethodDeclaration[42546-42940]"
    }, {
      "left" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "info" : "MethodDeclaration[42946-45485]:MethodDeclaration[42946-45485]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[45491-48000]:MethodDeclaration[45491-48000]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[48006-49917]:MethodDeclaration[48006-49917]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[49923-54639]:MethodDeclaration[49923-54639]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[54645-55193]:MethodDeclaration[54645-55193]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[55199-56522]:MethodDeclaration[55199-56522]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[56528-58412]:TypeDeclaration[56528-58412]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[56749-56783]:FieldDeclaration[56749-56783]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[56791-56873]:MethodDeclaration[56791-56873]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[56881-57364]:MethodDeclaration[56881-57364]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[57372-58406]:MethodDeclaration[57372-58406]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[58445-58834]:TypeDeclaration[58445-58834]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[58560-58584]:FieldDeclaration[58560-58584]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[58589-58620]:FieldDeclaration[58589-58620]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[58625-58656]:FieldDeclaration[58625-58656]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[58662-58830]:MethodDeclaration[58662-58830]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[58838-62411]:TypeDeclaration[58838-62411]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[59024-59091]:MethodDeclaration[59024-59091]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[59097-59830]:MethodDeclaration[59097-59830]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[59836-60078]:MethodDeclaration[59836-60078]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[60084-61219]:MethodDeclaration[60084-61219]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "right" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "info" : "MethodDeclaration[61225-62407]:MethodDeclaration[61225-62407]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[62616-62749]:MethodDeclaration[62616-62749]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[62755-62903]:MethodDeclaration[62755-62903]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[62909-63451]:MethodDeclaration[62909-63451]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[63457-64322]:MethodDeclaration[63457-64322]"
    }, {
      "left" : "static JSDocInfo getBestJSDocInfo(Node n)",
      "right" : "static JSDocInfo getBestJSDocInfo(Node n)",
      "info" : "MethodDeclaration[65292-65955]:MethodDeclaration[65293-65956]"
    }, {
      "left" : "private static Node getBestLValue(Node n)",
      "right" : "private static Node getBestLValue(Node n)",
      "info" : "MethodDeclaration[65959-66545]:MethodDeclaration[65960-66546]"
    }, {
      "left" : "private static String getBestLValueName(@Nullable Node lValue)",
      "right" : "private static String getBestLValueName(@Nullable Node lValue)",
      "info" : "MethodDeclaration[66549-67131]:MethodDeclaration[66550-67132]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6802-6809]:Modifier[6802-6809]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6810-6815]:TYPE_DECLARATION_KIND[6810-6815]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[6816-6831]:SimpleName[6816-6831]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[6883-6898]:SimpleName[6883-6898]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[6899-6908]:SingleVariableDeclaration[6899-6908]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6910-6921]:SingleVariableDeclaration[6910-6921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-7220]:Block[6923-7220]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[6931-6964]:ExpressionStatement[6931-6964]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[6971-7004]:ExpressionStatement[6971-7004]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7011-7028]:ExpressionStatement[7011-7028]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7035-7052]:ExpressionStatement[7035-7052]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[7193-7214]:ExpressionStatement[7193-7214]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7226-7230]:PrimitiveType[7226-7230]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7231-7238]:SimpleName[7231-7238]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7239-7250]:SingleVariableDeclaration[7239-7250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7252-7328]:Block[7252-7328]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[7260-7322]:ExpressionStatement[7260-7322]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7336-7353]:SimpleName[7336-7353]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7354-7379]:SingleVariableDeclaration[7354-7379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7381-7438]:Block[7381-7438]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[7387-7434]:ConstructorInvocation[7387-7434]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7442-7459]:SimpleName[7442-7459]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7460-7485]:SingleVariableDeclaration[7460-7485]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[7493-7526]:SingleVariableDeclaration[7493-7526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7528-7780]:Block[7528-7780]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7534-7559]:ExpressionStatement[7534-7559]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[7564-7609]:ExpressionStatement[7564-7609]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[7614-7655]:ExpressionStatement[7614-7655]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[7660-7707]:ExpressionStatement[7660-7707]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[7712-7776]:ExpressionStatement[7712-7776]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7921-7927]:Modifier[7921-7927]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[7928-7933]:SimpleType[7928-7933]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[7934-7945]:SimpleName[7934-7945]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[7946-7955]:SingleVariableDeclaration[7946-7955]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[7957-7969]:SingleVariableDeclaration[7957-7969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7971-9646]:Block[7971-9646]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[8166-8188]:VariableDeclarationStatement[8166-8188]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[8193-8234]:VariableDeclarationStatement[8193-8234]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8239-8747]:IfStatement[8239-8747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8259-8542]:Block[8259-8542]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[8318-8354]:ExpressionStatement[8318-8354]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[8362-8435]:VariableDeclarationStatement[8362-8435]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[8442-8476]:ExpressionStatement[8442-8476]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[8483-8536]:ExpressionStatement[8483-8536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8548-8747]:Block[8548-8747]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[8556-8591]:ExpressionStatement[8556-8591]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[8598-8668]:VariableDeclarationStatement[8598-8668]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[8675-8708]:ExpressionStatement[8675-8708]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[8715-8741]:ExpressionStatement[8715-8741]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[8753-8792]:ExpressionStatement[8753-8792]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[8797-8825]:ExpressionStatement[8797-8825]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[8993-9465]:EnhancedForStatement[8993-9465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9051-9465]:Block[9051-9465]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[9059-9098]:VariableDeclarationStatement[9059-9098]"
    }, {
      "left" : "if (type != null && type instanceof FunctionType)",
      "right" : "if (type != null && type instanceof FunctionType)",
      "info" : "IfStatement[9105-9459]:IfStatement[9105-9459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9155-9459]:Block[9155-9459]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[9165-9207]:VariableDeclarationStatement[9165-9207]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[9216-9263]:VariableDeclarationStatement[9216-9263]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[9272-9451]:IfStatement[9272-9451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9305-9451]:Block[9305-9451]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[9317-9441]:ExpressionStatement[9317-9441]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[9471-9621]:IfStatement[9471-9621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9491-9621]:Block[9491-9621]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "info" : "ExpressionStatement[9499-9615]:ExpressionStatement[9499-9615]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[9626-9642]:ReturnStatement[9626-9642]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[9778-9796]:MarkerAnnotation[9778-9796]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[9799-9804]:SimpleType[9799-9804]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[9805-9823]:SimpleName[9805-9823]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[9824-9833]:SingleVariableDeclaration[9824-9833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9835-11414]:Block[9835-11414]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[9842-9934]:ExpressionStatement[9842-9934]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[9940-9976]:VariableDeclarationStatement[9940-9976]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9981-10031]:ExpressionStatement[9981-10031]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10036-10095]:ExpressionStatement[10036-10095]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10100-10149]:ExpressionStatement[10100-10149]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10154-10204]:ExpressionStatement[10154-10204]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10209-10264]:ExpressionStatement[10209-10264]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10269-10322]:ExpressionStatement[10269-10322]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10327-10385]:ExpressionStatement[10327-10385]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10390-10441]:ExpressionStatement[10390-10441]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10446-10502]:ExpressionStatement[10446-10502]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10507-10567]:ExpressionStatement[10507-10567]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10572-10623]:ExpressionStatement[10572-10623]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10628-10686]:ExpressionStatement[10628-10686]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10691-10748]:ExpressionStatement[10691-10748]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10753-10808]:ExpressionStatement[10753-10808]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[10813-10867]:ExpressionStatement[10813-10867]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[10872-10922]:ExpressionStatement[10872-10922]"
    }, {
      "left" : "declareNativeValueType(s, LEGACY_TYPEDEF, NO_TYPE);",
      "right" : "declareNativeValueType(s, LEGACY_TYPEDEF, NO_TYPE);",
      "info" : "ExpressionStatement[11107-11158]:ExpressionStatement[11107-11158]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[11336-11395]:ExpressionStatement[11336-11395]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[11401-11410]:ReturnStatement[11401-11410]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11418-11425]:Modifier[11418-11425]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11426-11430]:PrimitiveType[11426-11430]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[11431-11456]:SimpleName[11431-11456]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[11457-11468]:SingleVariableDeclaration[11457-11468]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[11470-11486]:SingleVariableDeclaration[11470-11486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11488-11722]:Block[11488-11722]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[11494-11551]:VariableDeclarationStatement[11494-11551]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[11556-11624]:ExpressionStatement[11556-11624]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[11629-11718]:ExpressionStatement[11629-11718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11726-11733]:Modifier[11726-11733]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11734-11738]:PrimitiveType[11734-11738]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[11739-11761]:SimpleName[11739-11761]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[11762-11773]:SingleVariableDeclaration[11762-11773]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11775-11786]:SingleVariableDeclaration[11775-11786]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[11794-11810]:SingleVariableDeclaration[11794-11810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11812-11886]:Block[11812-11886]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[11818-11882]:ExpressionStatement[11818-11882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11890-11897]:Modifier[11890-11897]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11898-11902]:PrimitiveType[11898-11902]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[11903-11920]:SimpleName[11903-11920]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[11921-11932]:SingleVariableDeclaration[11921-11932]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11934-11945]:SingleVariableDeclaration[11934-11945]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[11947-11955]:SingleVariableDeclaration[11947-11955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11957-12009]:Block[11957-12009]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[11963-12005]:ExpressionStatement[11963-12005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12013-12020]:Modifier[12013-12020]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12021-12027]:Modifier[12021-12027]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12028-12033]:TYPE_DECLARATION_KIND[12028-12033]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[12034-12058]:SimpleName[12034-12058]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[12073-12105]:SimpleType[12073-12105]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[12156-12180]:SimpleName[12156-12180]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[12181-12204]:SingleVariableDeclaration[12181-12204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12206-12245]:Block[12206-12245]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[12214-12239]:ExpressionStatement[12214-12239]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12251-12260]:MarkerAnnotation[12251-12260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12265-12271]:Modifier[12265-12271]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12272-12276]:PrimitiveType[12272-12276]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[12277-12282]:SimpleName[12277-12282]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[12283-12298]:SingleVariableDeclaration[12283-12298]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[12300-12309]:SingleVariableDeclaration[12300-12309]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[12311-12322]:SingleVariableDeclaration[12311-12322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12324-13109]:Block[12324-13109]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[12332-12353]:VariableDeclarationStatement[12332-12353]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.getType() == Token.ASSIGN) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.getType() == Token.ASSIGN) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[12360-13103]:SwitchStatement[12360-13103]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[12394-12409]:SwitchCase[12394-12409]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[12420-12657]:ForStatement[12420-12657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12515-12657]:Block[12515-12657]"
    }, {
      "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));",
      "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));",
      "info" : "ExpressionStatement[12529-12645]:ExpressionStatement[12529-12645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12668-12674]:BreakStatement[12668-12674]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[12683-12706]:SwitchCase[12683-12706]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[12717-12756]:VariableDeclarationStatement[12717-12756]"
    }, {
      "left" : "if (firstChild.getType() == Token.ASSIGN)",
      "right" : "if (firstChild.getType() == Token.ASSIGN)",
      "info" : "IfStatement[12767-13078]:IfStatement[12767-13078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-12967]:Block[12809-12967]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[12823-12955]:ExpressionStatement[12823-12955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12973-13078]:Block[12973-13078]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[12987-13066]:ExpressionStatement[12987-13066]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13089-13095]:BreakStatement[13089-13095]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13115-13122]:Modifier[13115-13122]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13123-13127]:PrimitiveType[13123-13127]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[13128-13144]:SimpleName[13128-13144]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[13154-13167]:SingleVariableDeclaration[13154-13167]"
    }, {
      "left" : "Node valueNode",
      "right" : "Node valueNode",
      "info" : "SingleVariableDeclaration[13169-13183]:SingleVariableDeclaration[13169-13183]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[13185-13199]:SingleVariableDeclaration[13185-13199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13201-13731]:Block[13201-13731]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[13209-13725]:IfStatement[13209-13725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13241-13725]:Block[13241-13725]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[13251-13533]:IfStatement[13251-13533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13269-13533]:Block[13269-13533]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[13281-13523]:IfStatement[13281-13523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13314-13402]:Block[13314-13402]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[13328-13390]:ExpressionStatement[13328-13390]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[13408-13523]:IfStatement[13408-13523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13435-13523]:Block[13435-13523]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[13449-13511]:ExpressionStatement[13449-13511]"
    }, {
      "left" : "if (valueNode != null &&\n            LEGACY_TYPEDEF.equals(valueNode.getQualifiedName()))",
      "right" : "if (valueNode != null &&\n            LEGACY_TYPEDEF.equals(valueNode.getQualifiedName()))",
      "info" : "IfStatement[13543-13717]:IfStatement[13543-13717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-13717]:Block[13633-13717]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[13645-13707]:ExpressionStatement[13645-13707]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13946-13953]:Modifier[13946-13953]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13954-13960]:Modifier[13954-13960]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13961-13965]:SimpleType[13961-13965]"
    }, {
      "left" : "getPrototypePropertyOwner",
      "right" : "getPrototypePropertyOwner",
      "info" : "SimpleName[13966-13991]:SimpleName[13966-13991]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13992-13998]:SingleVariableDeclaration[13992-13998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-14378]:Block[14000-14378]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[14006-14357]:IfStatement[14006-14357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14040-14357]:Block[14040-14357]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14048-14084]:VariableDeclarationStatement[14048-14084]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[14091-14351]:IfStatement[14091-14351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14205-14351]:Block[14205-14351]"
    }, {
      "left" : "Node maybeOwner = firstChild.getFirstChild();",
      "right" : "Node maybeOwner = firstChild.getFirstChild();",
      "info" : "VariableDeclarationStatement[14215-14260]:VariableDeclarationStatement[14215-14260]"
    }, {
      "left" : "if (maybeOwner.isQualifiedName())",
      "right" : "if (maybeOwner.isQualifiedName())",
      "info" : "IfStatement[14269-14343]:IfStatement[14269-14343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14303-14343]:Block[14303-14343]"
    }, {
      "left" : "return maybeOwner;",
      "right" : "return maybeOwner;",
      "info" : "ReturnStatement[14315-14333]:ReturnStatement[14315-14333]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14362-14374]:ReturnStatement[14362-14374]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14382-14389]:Modifier[14382-14389]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[14390-14396]:SimpleType[14390-14396]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[14397-14410]:SimpleName[14397-14410]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[14411-14434]:SingleVariableDeclaration[14411-14434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14436-14492]:Block[14436-14492]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[14442-14488]:ReturnStatement[14442-14488]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14496-14503]:Modifier[14496-14503]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[14504-14512]:Modifier[14504-14512]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14513-14518]:TYPE_DECLARATION_KIND[14513-14518]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[14519-14539]:SimpleName[14519-14539]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[14557-14579]:SimpleType[14557-14579]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15276-15283]:Modifier[15276-15283]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[15284-15304]:SimpleName[15284-15304]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[15305-15316]:SingleVariableDeclaration[15305-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15318-15351]:Block[15318-15351]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[15326-15345]:ExpressionStatement[15326-15345]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15357-15361]:PrimitiveType[15357-15361]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[15362-15377]:SimpleName[15362-15377]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[15378-15387]:SingleVariableDeclaration[15378-15387]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[15389-15400]:SingleVariableDeclaration[15389-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15402-15470]:Block[15402-15470]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[15410-15464]:ExpressionStatement[15410-15464]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15476-15480]:PrimitiveType[15476-15480]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[15481-15493]:SimpleName[15481-15493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15496-15976]:Block[15496-15976]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[15553-15645]:EnhancedForStatement[15553-15645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15603-15645]:Block[15603-15645]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[15613-15637]:ExpressionStatement[15613-15637]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[15708-15745]:VariableDeclarationStatement[15708-15745]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[15752-15843]:WhileStatement[15752-15843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15775-15843]:Block[15775-15843]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[15785-15835]:ExpressionStatement[15785-15835]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[15930-15970]:ExpressionStatement[15930-15970]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15982-15991]:MarkerAnnotation[15982-15991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15996-16002]:Modifier[15996-16002]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16003-16008]:Modifier[16003-16008]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16009-16016]:PrimitiveType[16009-16016]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[16017-16031]:SimpleName[16017-16031]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[16032-16059]:SingleVariableDeclaration[16032-16059]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16061-16067]:SingleVariableDeclaration[16061-16067]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[16077-16088]:SingleVariableDeclaration[16077-16088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16090-17004]:Block[16090-17004]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "info" : "IfStatement[16098-16231]:IfStatement[16098-16231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16174-16231]:Block[16174-16231]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[16184-16223]:ExpressionStatement[16184-16223]"
    }, {
      "left" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[16363-16508]:VariableDeclarationStatement[16363-16508]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[16516-16975]:IfStatement[16516-16975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16529-16975]:Block[16529-16975]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[16665-16967]:IfStatement[16665-16967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16700-16967]:Block[16700-16967]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[16712-16957]:ForStatement[16712-16957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16819-16957]:Block[16819-16957]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[16833-16945]:IfStatement[16833-16945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16883-16945]:Block[16883-16945]"
    }, {
      "left" : "defineFunctionLiteral(child, n);",
      "right" : "defineFunctionLiteral(child, n);",
      "info" : "ExpressionStatement[16899-16931]:ExpressionStatement[16899-16931]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[16983-16998]:ReturnStatement[16983-16998]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17010-17019]:MarkerAnnotation[17010-17019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17024-17030]:Modifier[17024-17030]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17031-17035]:PrimitiveType[17031-17035]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[17036-17041]:SimpleName[17036-17041]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17042-17057]:SingleVariableDeclaration[17042-17057]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17059-17065]:SingleVariableDeclaration[17059-17065]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17067-17078]:SingleVariableDeclaration[17067-17078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17080-18385]:Block[17080-18385]"
    }, {
      "left" : "attachLiteralTypes(t, n);",
      "right" : "attachLiteralTypes(t, n);",
      "info" : "ExpressionStatement[17088-17113]:ExpressionStatement[17088-17113]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[17121-18379]:SwitchStatement[17121-18379]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[17152-17168]:SwitchCase[17152-17168]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[17179-17220]:ExpressionStatement[17179-17220]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17231-17237]:BreakStatement[17231-17237]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[17247-17267]:SwitchCase[17247-17267]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[17278-17384]:IfStatement[17278-17384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17332-17384]:Block[17332-17384]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[17346-17372]:ExpressionStatement[17346-17372]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[17461-17567]:IfStatement[17461-17567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17508-17567]:Block[17508-17567]"
    }, {
      "left" : "defineFunctionLiteral(n, parent);",
      "right" : "defineFunctionLiteral(n, parent);",
      "info" : "ExpressionStatement[17522-17555]:ExpressionStatement[17522-17555]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17578-17584]:BreakStatement[17578-17584]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[17594-17612]:SwitchCase[17594-17612]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[17673-17709]:VariableDeclarationStatement[17673-17709]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[17720-17935]:IfStatement[17720-17935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17809-17935]:Block[17809-17935]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[17823-17923]:ExpressionStatement[17823-17923]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17946-17952]:BreakStatement[17946-17952]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[17962-17979]:SwitchCase[17962-17979]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[17990-18013]:ExpressionStatement[17990-18013]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18024-18030]:BreakStatement[18024-18030]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[18040-18055]:SwitchCase[18040-18055]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[18066-18087]:ExpressionStatement[18066-18087]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18098-18104]:BreakStatement[18098-18104]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18114-18133]:SwitchCase[18114-18133]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "info" : "IfStatement[18184-18354]:IfStatement[18184-18354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18264-18354]:Block[18264-18354]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[18278-18342]:ExpressionStatement[18278-18342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18365-18371]:BreakStatement[18365-18371]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18391-18398]:Modifier[18391-18398]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18399-18403]:PrimitiveType[18399-18403]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[18404-18422]:SimpleName[18404-18422]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18423-18438]:SingleVariableDeclaration[18423-18438]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18440-18446]:SingleVariableDeclaration[18440-18446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18448-19518]:Block[18448-19518]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.REF_SPECIAL:\n          n.setJSType(getNativeType(UNKNOWN_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.REF_SPECIAL:\n          n.setJSType(getNativeType(UNKNOWN_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[18456-19512]:SwitchStatement[18456-19512]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[18487-18503]:SwitchCase[18487-18503]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[18514-18552]:ExpressionStatement[18514-18552]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18563-18569]:BreakStatement[18563-18569]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[18579-18595]:SwitchCase[18579-18595]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[18606-18644]:ExpressionStatement[18606-18644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18655-18661]:BreakStatement[18655-18661]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[18671-18689]:SwitchCase[18671-18689]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "info" : "IfStatement[18752-18866]:IfStatement[18752-18866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18800-18866]:Block[18800-18866]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[18814-18854]:ExpressionStatement[18814-18854]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18877-18883]:BreakStatement[18877-18883]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[18893-18911]:SwitchCase[18893-18911]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[18922-18962]:ExpressionStatement[18922-18962]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18973-18979]:BreakStatement[18973-18979]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[18989-19005]:SwitchCase[18989-19005]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[19014-19031]:SwitchCase[19014-19031]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[19042-19083]:ExpressionStatement[19042-19083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19094-19100]:BreakStatement[19094-19100]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[19110-19128]:SwitchCase[19110-19128]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[19139-19179]:ExpressionStatement[19139-19179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19190-19196]:BreakStatement[19190-19196]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[19206-19229]:SwitchCase[19206-19229]"
    }, {
      "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[19240-19281]:ExpressionStatement[19240-19281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19292-19298]:BreakStatement[19292-19298]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19308-19329]:SwitchCase[19308-19329]"
    }, {
      "left" : "defineObjectLiteral(t, n);",
      "right" : "defineObjectLiteral(t, n);",
      "info" : "ExpressionStatement[19340-19366]:ExpressionStatement[19340-19366]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19377-19383]:BreakStatement[19377-19383]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19524-19531]:Modifier[19524-19531]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19532-19536]:PrimitiveType[19532-19536]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[19537-19556]:SimpleName[19537-19556]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19557-19572]:SingleVariableDeclaration[19557-19572]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[19574-19588]:SingleVariableDeclaration[19574-19588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19590-21215]:Block[19590-21215]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[19637-19656]:VariableDeclarationStatement[19637-19656]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[19663-19705]:VariableDeclarationStatement[19663-19705]"
    }, {
      "left" : "if (info != null &&\n          info.getLendsName() != null)",
      "right" : "if (info != null &&\n          info.getLendsName() != null)",
      "info" : "IfStatement[19712-20501]:IfStatement[19712-20501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19771-20501]:Block[19771-20501]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[19781-19820]:VariableDeclarationStatement[19781-19820]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[19829-19868]:VariableDeclarationStatement[19829-19868]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[19877-20493]:IfStatement[19877-20493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19899-20015]:Block[19899-20015]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[19911-20005]:ExpressionStatement[19911-20005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20021-20493]:Block[20021-20493]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[20033-20059]:ExpressionStatement[20033-20059]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[20070-20162]:IfStatement[20070-20162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20088-20162]:Block[20088-20162]"
    }, {
      "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[20102-20150]:ExpressionStatement[20102-20150]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[20173-20483]:IfStatement[20173-20483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20235-20425]:Block[20235-20425]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[20249-20388]:ExpressionStatement[20249-20388]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[20401-20413]:ExpressionStatement[20401-20413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20431-20483]:Block[20431-20483]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[20445-20471]:ExpressionStatement[20445-20471]"
    }, {
      "left" : "info = getBestJSDocInfo(objectLit);",
      "right" : "info = getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[20509-20544]:ExpressionStatement[20509-20544]"
    }, {
      "left" : "Node lValue = getBestLValue(objectLit);",
      "right" : "Node lValue = getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[20551-20590]:VariableDeclarationStatement[20551-20590]"
    }, {
      "left" : "String lValueName = getBestLValueName(lValue);",
      "right" : "String lValueName = getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[20597-20643]:VariableDeclarationStatement[20597-20643]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[20650-20682]:VariableDeclarationStatement[20650-20682]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[20689-20856]:IfStatement[20689-20856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20738-20856]:Block[20738-20856]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[20748-20816]:ExpressionStatement[20748-20816]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[20825-20848]:ExpressionStatement[20825-20848]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[20864-20948]:IfStatement[20864-20948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20882-20948]:Block[20882-20948]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType();",
      "right" : "type = typeRegistry.createAnonymousObjectType();",
      "info" : "ExpressionStatement[20892-20940]:ExpressionStatement[20892-20940]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[20956-20989]:ExpressionStatement[20956-20989]"
    }, {
      "left" : "if (!createdEnumType)",
      "right" : "if (!createdEnumType)",
      "info" : "IfStatement[21075-21209]:IfStatement[21075-21209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21097-21209]:Block[21097-21209]"
    }, {
      "left" : "processObjectLitProperties(\n            t, objectLit, ObjectType.cast(objectLit.getJSType()));",
      "right" : "processObjectLitProperties(\n            t, objectLit, ObjectType.cast(objectLit.getJSType()));",
      "info" : "ExpressionStatement[21107-21201]:ExpressionStatement[21107-21201]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21465-21469]:PrimitiveType[21465-21469]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[21470-21496]:SimpleName[21470-21496]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[21506-21521]:SingleVariableDeclaration[21506-21521]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[21523-21534]:SingleVariableDeclaration[21523-21534]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[21536-21557]:SingleVariableDeclaration[21536-21557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21559-22737]:Block[21559-22737]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[21567-22731]:ForStatement[21567-22731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21668-22731]:Block[21668-22731]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[21678-21715]:VariableDeclarationStatement[21678-21715]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[21724-21782]:VariableDeclarationStatement[21724-21782]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21791-21831]:VariableDeclarationStatement[21791-21831]"
    }, {
      "left" : "JSType valueType = getDeclaredType(\n            t.getSourceName(), info, keyNode, value);",
      "right" : "JSType valueType = getDeclaredType(\n            t.getSourceName(), info, keyNode, value);",
      "info" : "VariableDeclarationStatement[21840-21929]:VariableDeclarationStatement[21840-21929]"
    }, {
      "left" : "JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            keyNode, valueType);",
      "right" : "JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            keyNode, valueType);",
      "info" : "VariableDeclarationStatement[21938-22030]:VariableDeclarationStatement[21938-22030]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[22039-22723]:IfStatement[22039-22723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22060-22723]:Block[22060-22723]"
    }, {
      "left" : "String qualifiedName = getBestLValueName(keyNode);",
      "right" : "String qualifiedName = getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[22181-22231]:VariableDeclarationStatement[22181-22231]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[22242-22420]:IfStatement[22242-22420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22269-22354]:Block[22269-22354]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
      "info" : "ExpressionStatement[22283-22342]:ExpressionStatement[22283-22342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22360-22420]:Block[22360-22420]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[22374-22408]:ExpressionStatement[22374-22408]"
    }, {
      "left" : "if (objLitType != null)",
      "right" : "if (objLitType != null)",
      "info" : "IfStatement[22432-22713]:IfStatement[22432-22713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22456-22713]:Block[22456-22713]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[22530-22597]:VariableDeclarationStatement[22530-22597]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(\n                memberName, keyType, isExtern, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(\n                memberName, keyType, isExtern, keyNode);",
      "info" : "ExpressionStatement[22610-22701]:ExpressionStatement[22610-22701]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22973-22980]:Modifier[22973-22980]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[22981-22987]:SimpleType[22981-22987]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[22988-23015]:SimpleName[22988-23015]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[23016-23033]:SingleVariableDeclaration[23016-23033]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23043-23052]:SingleVariableDeclaration[23043-23052]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[23054-23068]:SingleVariableDeclaration[23054-23068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23070-23662]:Block[23070-23662]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[23078-23099]:VariableDeclarationStatement[23078-23099]"
    }, {
      "left" : "Node objNode =\n          node.getType() == Token.GETPROP ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "right" : "Node objNode =\n          node.getType() == Token.GETPROP ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "info" : "VariableDeclarationStatement[23106-23282]:VariableDeclarationStatement[23106-23282]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[23289-23635]:IfStatement[23289-23635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23307-23635]:Block[23307-23635]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[23317-23627]:IfStatement[23317-23627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23337-23413]:Block[23337-23413]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[23349-23403]:ExpressionStatement[23349-23403]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[23419-23627]:IfStatement[23419-23627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23476-23627]:Block[23476-23627]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[23488-23528]:VariableDeclarationStatement[23488-23528]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[23539-23617]:ExpressionStatement[23539-23617]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[23642-23656]:ReturnStatement[23642-23656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23812-23816]:PrimitiveType[23812-23816]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[23817-23837]:SimpleName[23817-23837]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23838-23844]:SingleVariableDeclaration[23838-23844]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[23846-23854]:SingleVariableDeclaration[23846-23854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23856-23968]:Block[23856-23968]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[23864-23909]:ExpressionStatement[23864-23909]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[23916-23962]:ExpressionStatement[23916-23962]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24024-24028]:PrimitiveType[24024-24028]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[24029-24040]:SimpleName[24029-24040]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24041-24047]:SingleVariableDeclaration[24041-24047]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[24049-24060]:SingleVariableDeclaration[24049-24060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24062-24193]:Block[24062-24193]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[24070-24107]:ExpressionStatement[24070-24107]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24114-24149]:VariableDeclarationStatement[24114-24149]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[24156-24187]:ExpressionStatement[24156-24187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24252-24256]:PrimitiveType[24252-24256]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[24257-24266]:SimpleName[24257-24266]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24267-24273]:SingleVariableDeclaration[24267-24273]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[24275-24286]:SingleVariableDeclaration[24275-24286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24288-24825]:Block[24288-24825]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[24296-24331]:ExpressionStatement[24296-24331]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[24338-24372]:VariableDeclarationStatement[24338-24372]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[24379-24819]:IfStatement[24379-24819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24408-24671]:Block[24408-24671]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[24418-24552]:IfStatement[24418-24552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24436-24552]:Block[24436-24552]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[24479-24542]:ExpressionStatement[24479-24542]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[24561-24663]:EnhancedForStatement[24561-24663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24592-24663]:Block[24592-24663]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[24604-24653]:ExpressionStatement[24604-24653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24677-24819]:Block[24677-24819]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24687-24717]:VariableDeclarationStatement[24687-24717]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[24726-24811]:ExpressionStatement[24726-24811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24882-24886]:PrimitiveType[24882-24886]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[24887-24908]:SimpleName[24887-24908]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24909-24915]:SingleVariableDeclaration[24909-24915]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[24917-24928]:SingleVariableDeclaration[24917-24928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24930-25704]:Block[24930-25704]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[24938-24978]:ExpressionStatement[24938-24978]"
    }, {
      "left" : "Node lValue = getBestLValue(n);",
      "right" : "Node lValue = getBestLValue(n);",
      "info" : "VariableDeclarationStatement[25092-25123]:VariableDeclarationStatement[25092-25123]"
    }, {
      "left" : "JSDocInfo info = getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[25130-25167]:VariableDeclarationStatement[25130-25167]"
    }, {
      "left" : "String functionName = getBestLValueName(lValue);",
      "right" : "String functionName = getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[25174-25222]:VariableDeclarationStatement[25174-25222]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[25229-25326]:VariableDeclarationStatement[25229-25326]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[25392-25425]:ExpressionStatement[25392-25425]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[25594-25698]:IfStatement[25594-25698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25633-25698]:Block[25633-25698]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[25643-25690]:ExpressionStatement[25643-25690]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26094-26101]:Modifier[26094-26101]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26102-26106]:PrimitiveType[26102-26106]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[26107-26117]:SimpleName[26107-26117]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[26118-26127]:SingleVariableDeclaration[26118-26127]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[26129-26137]:SingleVariableDeclaration[26129-26137]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26139-26150]:SingleVariableDeclaration[26139-26150]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[26152-26166]:SingleVariableDeclaration[26152-26166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26168-26626]:Block[26168-26626]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[26176-26210]:VariableDeclarationStatement[26176-26210]"
    }, {
      "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "info" : "VariableDeclarationStatement[26243-26304]:VariableDeclarationStatement[26243-26304]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[26311-26585]:IfStatement[26311-26585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26329-26585]:Block[26329-26585]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[26388-26440]:VariableDeclarationStatement[26388-26440]"
    }, {
      "left" : "Preconditions.checkNotNull(input, sourceName);",
      "right" : "Preconditions.checkNotNull(input, sourceName);",
      "info" : "ExpressionStatement[26449-26495]:ExpressionStatement[26449-26495]"
    }, {
      "left" : "type = input.isExtern() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = input.isExtern() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[26504-26577]:ExpressionStatement[26504-26577]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[26592-26620]:ExpressionStatement[26592-26620]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26956-26963]:Modifier[26956-26963]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26964-26971]:PrimitiveType[26964-26971]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[26972-27000]:SimpleName[26972-27000]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[27010-27027]:SingleVariableDeclaration[27010-27027]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[27029-27043]:SingleVariableDeclaration[27029-27043]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[27045-27056]:SingleVariableDeclaration[27045-27056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27058-27306]:Block[27058-27306]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[27066-27114]:IfStatement[27066-27114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27084-27114]:Block[27084-27114]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27094-27106]:ReturnStatement[27094-27106]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[27121-27237]:IfStatement[27121-27237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27206-27237]:Block[27206-27237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27216-27229]:ReturnStatement[27216-27229]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[27244-27300]:ReturnStatement[27244-27300]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28333-28340]:Modifier[28333-28340]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[28341-28353]:SimpleType[28341-28353]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[28354-28381]:SimpleName[28354-28381]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[28391-28412]:SingleVariableDeclaration[28391-28412]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[28422-28443]:SingleVariableDeclaration[28422-28443]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[28453-28477]:SingleVariableDeclaration[28453-28477]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[28487-28512]:SingleVariableDeclaration[28487-28512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28514-32187]:Block[28514-32187]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[28523-28556]:VariableDeclarationStatement[28523-28556]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[28638-29244]:IfStatement[28638-29244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28706-29244]:Block[28706-29244]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[28716-28766]:VariableDeclarationStatement[28716-28766]"
    }, {
      "left" : "if (var != null && var.getType() instanceof FunctionType)",
      "right" : "if (var != null && var.getType() instanceof FunctionType)",
      "info" : "IfStatement[28775-29236]:IfStatement[28775-29236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28833-29236]:Block[28833-29236]"
    }, {
      "left" : "FunctionType aliasedType  = (FunctionType) var.getType();",
      "right" : "FunctionType aliasedType  = (FunctionType) var.getType();",
      "info" : "VariableDeclarationStatement[28845-28902]:VariableDeclarationStatement[28845-28902]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[28913-29226]:IfStatement[28913-29226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29028-29226]:Block[29028-29226]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[29042-29069]:ExpressionStatement[29042-29069]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[29083-29214]:IfStatement[29083-29214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29121-29214]:Block[29121-29214]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[29137-29200]:ExpressionStatement[29137-29200]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[29252-32135]:IfStatement[29252-32135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29278-32135]:Block[29278-32135]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[29288-29342]:VariableDeclarationStatement[29288-29342]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.getType() == Token.FUNCTION;",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.getType() == Token.FUNCTION;",
      "info" : "VariableDeclarationStatement[29351-29438]:VariableDeclarationStatement[29351-29438]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[29447-29489]:VariableDeclarationStatement[29447-29489]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[29498-29586]:VariableDeclarationStatement[29498-29586]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[29595-29656]:VariableDeclarationStatement[29595-29656]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[29666-30056]:IfStatement[29666-30056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29702-30056]:Block[29702-30056]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[29714-29773]:VariableDeclarationStatement[29714-29773]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[29859-29902]:ExpressionStatement[29859-29902]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[29913-30046]:IfStatement[29913-30046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29940-30046]:Block[29940-30046]"
    }, {
      "left" : "functionType = (FunctionType) type;",
      "right" : "functionType = (FunctionType) type;",
      "info" : "ExpressionStatement[29954-29989]:ExpressionStatement[29954-29989]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[30002-30034]:ExpressionStatement[30002-30034]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[30066-32127]:IfStatement[30066-32127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30092-32127]:Block[30092-32127]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[30159-30198]:VariableDeclarationStatement[30159-30198]"
    }, {
      "left" : "if (lvalueNode != null &&\n              lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "right" : "if (lvalueNode != null &&\n              lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "info" : "IfStatement[30209-30791]:IfStatement[30209-30791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30334-30791]:Block[30334-30791]"
    }, {
      "left" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "right" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "info" : "VariableDeclarationStatement[30348-30435]:VariableDeclarationStatement[30348-30435]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[30448-30779]:IfStatement[30448-30779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30465-30779]:Block[30465-30779]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "right" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "info" : "VariableDeclarationStatement[30481-30535]:VariableDeclarationStatement[30481-30535]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[30550-30765]:IfStatement[30550-30765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30573-30765]:Block[30573-30765]"
    }, {
      "left" : "String propName = lvalueNode.getLastChild().getString();",
      "right" : "String propName = lvalueNode.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[30591-30647]:VariableDeclarationStatement[30591-30647]"
    }, {
      "left" : "overriddenPropType =\n                    findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType =\n                    findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[30664-30749]:ExpressionStatement[30664-30749]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setSourceNode(fnRoot)\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setSourceNode(fnRoot)\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[30803-31169]:VariableDeclarationStatement[30803-31169]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[31218-31254]:VariableDeclarationStatement[31218-31254]"
    }, {
      "left" : "if (lvalueNode != null &&\n              lvalueNode.getType() == Token.GETPROP)",
      "right" : "if (lvalueNode != null &&\n              lvalueNode.getType() == Token.GETPROP)",
      "info" : "IfStatement[31265-31828]:IfStatement[31265-31828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31344-31828]:Block[31344-31828]"
    }, {
      "left" : "Node objNode = lvalueNode.getFirstChild();",
      "right" : "Node objNode = lvalueNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[31358-31400]:VariableDeclarationStatement[31358-31400]"
    }, {
      "left" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[31413-31816]:IfStatement[31413-31816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31527-31652]:Block[31527-31652]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getFirstChild());",
      "right" : "builder.inferThisType(info, objNode.getFirstChild());",
      "info" : "ExpressionStatement[31543-31596]:ExpressionStatement[31543-31596]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[31611-31638]:ExpressionStatement[31611-31638]"
    }, {
      "left" : "if (objNode.getType() == Token.THIS)",
      "right" : "if (objNode.getType() == Token.THIS)",
      "info" : "IfStatement[31658-31816]:IfStatement[31658-31816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31695-31816]:Block[31695-31816]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getJSType());",
      "right" : "builder.inferThisType(info, objNode.getJSType());",
      "info" : "ExpressionStatement[31711-31760]:ExpressionStatement[31711-31760]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[31775-31802]:ExpressionStatement[31775-31802]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[31840-31933]:IfStatement[31840-31933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31866-31933]:Block[31866-31933]"
    }, {
      "left" : "builder.inferThisType(info, (Node) null);",
      "right" : "builder.inferThisType(info, (Node) null);",
      "info" : "ExpressionStatement[31880-31921]:ExpressionStatement[31880-31921]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .inferReturnStatementsAsLastResort(fnBlock)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .inferReturnStatementsAsLastResort(fnBlock)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[31945-32117]:ExpressionStatement[31945-32117]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[32161-32181]:ReturnStatement[32161-32181]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32280-32287]:Modifier[32280-32287]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[32288-32300]:SimpleType[32288-32300]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[32301-32323]:SimpleName[32301-32323]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[32333-32353]:SingleVariableDeclaration[32333-32353]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[32355-32370]:SingleVariableDeclaration[32355-32370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32372-33020]:Block[32372-33020]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[32466-32520]:VariableDeclarationStatement[32466-32520]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[32527-32994]:IfStatement[32527-32994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32565-32614]:Block[32565-32614]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[32575-32606]:ReturnStatement[32575-32606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32620-32994]:Block[32620-32994]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[32732-32986]:EnhancedForStatement[32732-32986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32815-32986]:Block[32815-32986]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[32827-32870]:ExpressionStatement[32827-32870]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[32881-32976]:IfStatement[32881-32976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32919-32976]:Block[32919-32976]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[32933-32964]:ReturnStatement[32933-32964]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33002-33014]:ReturnStatement[33002-33014]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33710-33717]:Modifier[33710-33717]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[33718-33726]:SimpleType[33718-33726]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[33727-33750]:SimpleName[33727-33750]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[33751-33762]:SingleVariableDeclaration[33751-33762]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[33764-33775]:SingleVariableDeclaration[33764-33775]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[33785-33799]:SingleVariableDeclaration[33785-33799]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[33801-33816]:SingleVariableDeclaration[33801-33816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33818-35493]:Block[33818-35493]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[33826-33859]:ExpressionStatement[33826-33859]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[33866-33920]:ExpressionStatement[33866-33920]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[33928-33953]:VariableDeclarationStatement[33928-33953]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[33960-34232]:IfStatement[33960-34232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34008-34232]:Block[34008-34232]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[34053-34103]:VariableDeclarationStatement[34053-34103]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[34112-34224]:IfStatement[34112-34224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34166-34224]:Block[34166-34224]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[34178-34214]:ExpressionStatement[34178-34214]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[34240-35340]:IfStatement[34240-35340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34262-35340]:Block[34262-35340]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[34272-34364]:VariableDeclarationStatement[34272-34364]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "info" : "ExpressionStatement[34373-34432]:ExpressionStatement[34373-34432]"
    }, {
      "left" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
      "right" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[34442-35332]:IfStatement[34442-35332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34501-35332]:Block[34501-35332]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[34548-34582]:VariableDeclarationStatement[34548-34582]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[34593-35322]:WhileStatement[34593-35322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34613-35322]:Block[34613-35322]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[34627-34673]:VariableDeclarationStatement[34627-34673]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[34686-35277]:IfStatement[34686-35277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34707-34887]:Block[34707-34887]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[34779-34873]:ExpressionStatement[34779-34873]"
    }, {
      "left" : "if (enumType.hasOwnProperty(keyName))",
      "right" : "if (enumType.hasOwnProperty(keyName))",
      "info" : "IfStatement[34893-35277]:IfStatement[34893-35277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34931-35027]:Block[34931-35027]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "info" : "ExpressionStatement[34947-35013]:ExpressionStatement[34947-35013]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[35033-35277]:IfStatement[35033-35277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35080-35204]:Block[35080-35204]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[35096-35190]:ExpressionStatement[35096-35190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35210-35277]:Block[35210-35277]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[35226-35263]:ExpressionStatement[35226-35263]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[35290-35310]:ExpressionStatement[35290-35310]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[35348-35463]:IfStatement[35348-35463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35386-35463]:Block[35386-35463]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[35396-35455]:ExpressionStatement[35396-35455]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[35471-35487]:ReturnStatement[35471-35487]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35903-35910]:Modifier[35903-35910]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35911-35915]:PrimitiveType[35911-35915]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[35916-35926]:SimpleName[35916-35926]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[35927-35936]:SingleVariableDeclaration[35927-35936]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[35938-35949]:SingleVariableDeclaration[35938-35949]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[35951-35962]:SingleVariableDeclaration[35951-35962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35964-36023]:Block[35964-36023]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[35972-36017]:ExpressionStatement[35972-36017]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36512-36516]:PrimitiveType[36512-36516]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[36517-36527]:SimpleName[36517-36527]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36528-36534]:SingleVariableDeclaration[36528-36534]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[36536-36547]:SingleVariableDeclaration[36536-36547]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[36549-36560]:SingleVariableDeclaration[36549-36560]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[36562-36578]:SingleVariableDeclaration[36562-36578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36580-37320]:Block[36580-37320]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[36588-36642]:ExpressionStatement[36588-36642]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[36786-37247]:IfStatement[36786-37247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36817-37048]:Block[36817-37048]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "info" : "ExpressionStatement[36827-37040]:ExpressionStatement[36827-37040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37054-37247]:Block[37054-37247]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "info" : "ExpressionStatement[37064-37239]:ExpressionStatement[37064-37239]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[37254-37314]:ExpressionStatement[37254-37314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37756-37760]:PrimitiveType[37756-37760]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[37761-37771]:SimpleName[37761-37771]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37772-37778]:SingleVariableDeclaration[37772-37778]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[37780-37791]:SingleVariableDeclaration[37780-37791]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[37793-37812]:SingleVariableDeclaration[37793-37812]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[37822-37833]:SingleVariableDeclaration[37822-37833]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[37835-37851]:SingleVariableDeclaration[37835-37851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37853-42540]:Block[37853-42540]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[37861-37914]:ExpressionStatement[37861-37914]"
    }, {
      "left" : "boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[37922-37990]:VariableDeclarationStatement[37922-37990]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.getType() == Token.VAR ||\n           parent.getType() == Token.FUNCTION);",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.getType() == Token.VAR ||\n           parent.getType() == Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[37997-38149]:VariableDeclarationStatement[37997-38149]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[38357-38388]:VariableDeclarationStatement[38357-38388]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[38395-38791]:IfStatement[38395-38791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38493-38791]:Block[38493-38791]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[38503-38546]:VariableDeclarationStatement[38503-38546]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[38669-38783]:IfStatement[38669-38783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38719-38783]:Block[38719-38783]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[38731-38773]:ExpressionStatement[38731-38773]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[38835-42058]:IfStatement[38835-42058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38889-39066]:Block[38889-39066]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[38899-38950]:VariableDeclarationStatement[38899-38950]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[38959-39058]:ExpressionStatement[38959-39058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39072-42058]:Block[39072-42058]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[39082-39144]:IfStatement[39082-39144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39097-39144]:Block[39097-39144]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[39109-39134]:ExpressionStatement[39109-39134]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[39153-39205]:VariableDeclarationStatement[39153-39205]"
    }, {
      "left" : "boolean isExtern = input.isExtern();",
      "right" : "boolean isExtern = input.isExtern();",
      "info" : "VariableDeclarationStatement[39214-39250]:VariableDeclarationStatement[39214-39250]"
    }, {
      "left" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "VariableDeclarationStatement[39259-39349]:VariableDeclarationStatement[39259-39349]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[39359-39838]:IfStatement[39359-39838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39390-39838]:Block[39390-39838]"
    }, {
      "left" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[39402-39486]:VariableDeclarationStatement[39402-39486]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[39497-39828]:IfStatement[39497-39828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39511-39729]:Block[39511-39729]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern, n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern, n);",
      "info" : "ExpressionStatement[39525-39717]:ExpressionStatement[39525-39717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39735-39828]:Block[39735-39828]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, isExtern, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, isExtern, n);",
      "info" : "ExpressionStatement[39749-39816]:ExpressionStatement[39749-39816]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[39848-40229]:IfStatement[39848-40229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39878-40229]:Block[39878-40229]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[39890-39935]:VariableDeclarationStatement[39890-39935]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.getType() == Token.OBJECTLIT ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.getType() == Token.OBJECTLIT ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[39946-40100]:VariableDeclarationStatement[39946-40100]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[40111-40219]:IfStatement[40111-40219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40130-40219]:Block[40130-40219]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[40144-40207]:ExpressionStatement[40144-40207]"
    }, {
      "left" : "if (type instanceof FunctionType &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
      "right" : "if (type instanceof FunctionType &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
      "info" : "IfStatement[40318-42050]:IfStatement[40318-42050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40449-42050]:Block[40449-42050]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[40461-40503]:VariableDeclarationStatement[40461-40503]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "info" : "IfStatement[40514-42040]:IfStatement[40514-42040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40637-42040]:Block[40637-42040]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[40708-40772]:VariableDeclarationStatement[40708-40772]"
    }, {
      "left" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), input,\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), input,\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[40785-41101]:ExpressionStatement[40785-41101]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
      "right" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
      "info" : "IfStatement[41221-42028]:IfStatement[41221-42028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41787-42028]:Block[41787-42028]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
      "info" : "ExpressionStatement[41803-42014]:ExpressionStatement[41803-42014]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type instanceof FunctionType\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type instanceof FunctionType\n          && type.isConstructor())",
      "info" : "IfStatement[42066-42534]:IfStatement[42066-42534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42192-42534]:Block[42192-42534]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[42202-42307]:VariableDeclarationStatement[42202-42307]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[42316-42369]:ExpressionStatement[42316-42369]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[42378-42428]:ExpressionStatement[42378-42428]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn(((FunctionType) type).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn(((FunctionType) type).getInstanceType());",
      "info" : "ExpressionStatement[42437-42526]:ExpressionStatement[42437-42526]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42638-42645]:Modifier[42638-42645]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42646-42653]:PrimitiveType[42646-42653]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[42654-42680]:SimpleName[42654-42680]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42681-42687]:SingleVariableDeclaration[42681-42687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42689-42940]:Block[42689-42940]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[42697-42744]:VariableDeclarationStatement[42697-42744]"
    }, {
      "left" : "if (root.getType() == Token.NAME)",
      "right" : "if (root.getType() == Token.NAME)",
      "info" : "IfStatement[42751-42914]:IfStatement[42751-42914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42785-42914]:Block[42785-42914]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[42795-42836]:VariableDeclarationStatement[42795-42836]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[42845-42906]:IfStatement[42845-42906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42862-42906]:Block[42862-42906]"
    }, {
      "left" : "return var.isGlobal();",
      "right" : "return var.isGlobal();",
      "info" : "ReturnStatement[42874-42896]:ReturnStatement[42874-42896]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42921-42934]:ReturnStatement[42921-42934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43295-43302]:Modifier[43295-43302]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[43303-43309]:SimpleType[43303-43309]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[43310-43325]:SimpleName[43310-43325]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[43326-43343]:SingleVariableDeclaration[43326-43343]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[43345-43359]:SingleVariableDeclaration[43345-43359]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[43369-43380]:SingleVariableDeclaration[43369-43380]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[43382-43403]:SingleVariableDeclaration[43382-43403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43405-45485]:Block[43405-45485]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[43413-45410]:IfStatement[43413-45410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43449-43528]:Block[43449-43528]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[43459-43520]:ReturnStatement[43459-43520]"
    }, {
      "left" : "if (rValue != null && rValue.getType() == Token.FUNCTION &&\n          shouldUseFunctionLiteralType(\n              (FunctionType) rValue.getJSType(), info, lValue))",
      "right" : "if (rValue != null && rValue.getType() == Token.FUNCTION &&\n          shouldUseFunctionLiteralType(\n              (FunctionType) rValue.getJSType(), info, lValue))",
      "info" : "IfStatement[43534-45410]:IfStatement[43534-45410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43698-43742]:Block[43698-43742]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[43708-43734]:ReturnStatement[43708-43734]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[43748-45410]:IfStatement[43748-45410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43766-45410]:Block[43766-45410]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[43776-45402]:IfStatement[43776-45402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43809-44071]:Block[43809-44071]"
    }, {
      "left" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
      "right" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[43821-44061]:IfStatement[43821-44061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43880-43932]:Block[43880-43932]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[43894-43920]:ReturnStatement[43894-43920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43938-44061]:Block[43938-44061]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[43952-44049]:ReturnStatement[43952-44049]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[44077-45402]:IfStatement[44077-45402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44125-44246]:Block[44125-44246]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[44137-44236]:ReturnStatement[44137-44236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44252-45402]:Block[44252-45402]"
    }, {
      "left" : "if (info.isConstant())",
      "right" : "if (info.isConstant())",
      "info" : "IfStatement[44332-45392]:IfStatement[44332-45392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44355-45392]:Block[44355-45392]"
    }, {
      "left" : "JSType knownType = null;",
      "right" : "JSType knownType = null;",
      "info" : "VariableDeclarationStatement[44369-44393]:VariableDeclarationStatement[44369-44393]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[44406-45380]:IfStatement[44406-45380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44426-45380]:Block[44426-45380]"
    }, {
      "left" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[44442-45366]:IfStatement[44442-45366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44531-44591]:Block[44531-44591]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[44549-44575]:ReturnStatement[44549-44575]"
    }, {
      "left" : "if (rValue.getType() == Token.OR)",
      "right" : "if (rValue.getType() == Token.OR)",
      "info" : "IfStatement[44597-45366]:IfStatement[44597-45366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44631-45366]:Block[44631-45366]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[44843-44885]:VariableDeclarationStatement[44843-44885]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[44902-44944]:VariableDeclarationStatement[44902-44944]"
    }, {
      "left" : "boolean namesMatch = firstClause.getType() == Token.NAME\n                    && lValue.getType() == Token.NAME\n                    && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.getType() == Token.NAME\n                    && lValue.getType() == Token.NAME\n                    && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[44961-45146]:VariableDeclarationStatement[44961-45146]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[45163-45350]:IfStatement[45163-45350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45280-45350]:Block[45280-45350]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[45300-45332]:ReturnStatement[45300-45332]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[45418-45479]:ReturnStatement[45418-45479]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45688-45695]:Modifier[45688-45695]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45696-45700]:PrimitiveType[45696-45700]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[45701-45727]:SimpleName[45701-45727]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[45737-45752]:SingleVariableDeclaration[45737-45752]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45754-45760]:SingleVariableDeclaration[45754-45760]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[45762-45773]:SingleVariableDeclaration[45762-45773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45775-48000]:Block[45775-48000]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[45783-45873]:VariableDeclarationStatement[45783-45873]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[45880-46644]:IfStatement[45880-46644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45906-46644]:Block[45906-46644]"
    }, {
      "left" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "right" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[45916-46020]:VariableDeclarationStatement[45916-46020]"
    }, {
      "left" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "right" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[46029-46129]:VariableDeclarationStatement[46029-46129]"
    }, {
      "left" : "if (superClass != null && subClass != null)",
      "right" : "if (superClass != null && subClass != null)",
      "info" : "IfStatement[46138-46636]:IfStatement[46138-46636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46182-46636]:Block[46182-46636]"
    }, {
      "left" : "FunctionType superCtor = superClass.getConstructor();",
      "right" : "FunctionType superCtor = superClass.getConstructor();",
      "info" : "VariableDeclarationStatement[46194-46247]:VariableDeclarationStatement[46194-46247]"
    }, {
      "left" : "FunctionType subCtor = subClass.getConstructor();",
      "right" : "FunctionType subCtor = subClass.getConstructor();",
      "info" : "VariableDeclarationStatement[46258-46307]:VariableDeclarationStatement[46258-46307]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS)",
      "right" : "if (relationship.type == SubclassType.INHERITS)",
      "info" : "IfStatement[46319-46447]:IfStatement[46319-46447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46367-46447]:Block[46367-46447]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[46381-46435]:ExpressionStatement[46381-46435]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[46459-46626]:IfStatement[46459-46626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46501-46626]:Block[46501-46626]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[46515-46614]:ExpressionStatement[46515-46614]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[46652-46744]:VariableDeclarationStatement[46652-46744]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[46751-47274]:IfStatement[46751-47274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46789-47274]:Block[46789-47274]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[46799-46900]:VariableDeclarationStatement[46799-46900]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[46909-47266]:IfStatement[46909-47266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46933-47266]:Block[46933-47266]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[46945-47001]:VariableDeclarationStatement[46945-47001]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[47013-47256]:IfStatement[47013-47256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47039-47256]:Block[47039-47256]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[47053-47139]:VariableDeclarationStatement[47053-47139]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[47152-47244]:ExpressionStatement[47152-47244]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[47282-47380]:VariableDeclarationStatement[47282-47380]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[47387-47487]:IfStatement[47387-47487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47421-47487]:Block[47421-47487]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[47431-47479]:ExpressionStatement[47431-47479]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[47495-47587]:VariableDeclarationStatement[47495-47587]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[47594-47994]:IfStatement[47594-47994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47625-47994]:Block[47625-47994]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[47635-47732]:VariableDeclarationStatement[47635-47732]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[47741-47986]:IfStatement[47741-47986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47792-47866]:Block[47792-47866]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[47804-47856]:ExpressionStatement[47804-47856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47872-47986]:Block[47872-47986]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[47884-47976]:ExpressionStatement[47884-47976]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48084-48091]:Modifier[48084-48091]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48092-48096]:PrimitiveType[48092-48096]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[48097-48122]:SimpleName[48097-48122]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[48132-48173]:SingleVariableDeclaration[48132-48173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48175-49917]:Block[48175-49917]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[48183-48293]:VariableDeclarationStatement[48183-48293]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[48300-48416]:VariableDeclarationStatement[48300-48416]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[48423-48551]:VariableDeclarationStatement[48423-48551]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[48558-49911]:IfStatement[48558-49911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48668-49911]:Block[48668-49911]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[48678-48740]:VariableDeclarationStatement[48678-48740]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[48749-48817]:VariableDeclarationStatement[48749-48817]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[48826-48896]:VariableDeclarationStatement[48826-48896]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[48906-49903]:IfStatement[48906-49903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49002-49903]:Block[49002-49903]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[49014-49111]:VariableDeclarationStatement[49014-49111]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[49122-49213]:ExpressionStatement[49122-49213]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[49224-49402]:VariableDeclarationStatement[49224-49402]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[49414-49588]:VariableDeclarationStatement[49414-49588]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[49599-49653]:ExpressionStatement[49599-49653]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[49665-49824]:ExpressionStatement[49665-49824]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[49835-49893]:ExpressionStatement[49835-49893]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50346-50350]:PrimitiveType[50346-50350]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[50351-50376]:SimpleName[50351-50376]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50377-50392]:SingleVariableDeclaration[50377-50392]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[50394-50408]:SingleVariableDeclaration[50394-50408]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50418-50424]:SingleVariableDeclaration[50418-50424]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50426-50437]:SingleVariableDeclaration[50426-50437]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[50439-50452]:SingleVariableDeclaration[50439-50452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50454-54639]:Block[50454-54639]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[50462-50497]:VariableDeclarationStatement[50462-50497]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[50504-50552]:VariableDeclarationStatement[50504-50552]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[50559-50595]:VariableDeclarationStatement[50559-50595]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[50602-50649]:VariableDeclarationStatement[50602-50649]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[50656-50720]:ExpressionStatement[50656-50720]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[50963-51304]:IfStatement[50963-51304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50997-51304]:Block[50997-51304]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[51007-51038]:VariableDeclarationStatement[51007-51038]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[51047-51296]:IfStatement[51047-51296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51065-51296]:Block[51065-51296]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[51077-51197]:IfStatement[51077-51197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51105-51197]:Block[51105-51197]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51178-51185]:ReturnStatement[51178-51185]"
    }, {
      "left" : "if (qVar.getScope() == scope)",
      "right" : "if (qVar.getScope() == scope)",
      "info" : "IfStatement[51208-51286]:IfStatement[51208-51286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51238-51286]:Block[51238-51286]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[51252-51274]:ExpressionStatement[51252-51274]"
    }, {
      "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[51949-52022]:VariableDeclarationStatement[51949-52022]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[52029-52158]:IfStatement[52029-52158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52072-52158]:Block[52072-52158]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[52117-52150]:ExpressionStatement[52117-52150]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[52166-52437]:IfStatement[52166-52437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52189-52437]:Block[52189-52437]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[52199-52412]:IfStatement[52199-52412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52242-52412]:Block[52242-52412]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[52254-52402]:ExpressionStatement[52254-52402]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52422-52429]:ReturnStatement[52422-52429]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[52445-52469]:VariableDeclarationStatement[52445-52469]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[52476-52805]:IfStatement[52476-52805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52494-52805]:Block[52494-52805]"
    }, {
      "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[52556-52797]:ExpressionStatement[52556-52797]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[52813-53017]:IfStatement[52813-53017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52827-53017]:Block[52827-53017]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "info" : "ExpressionStatement[52879-53009]:ExpressionStatement[52879-53009]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[53025-54633]:IfStatement[53025-54633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53040-53906]:Block[53040-53906]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[53050-53098]:VariableDeclarationStatement[53050-53098]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[53107-53713]:IfStatement[53107-53713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53130-53713]:Block[53130-53713]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[53243-53310]:VariableDeclarationStatement[53243-53310]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[53321-53703]:IfStatement[53321-53703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53536-53703]:Block[53536-53703]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern, n);",
      "info" : "ExpressionStatement[53624-53691]:ExpressionStatement[53624-53691]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[53855-53898]:ExpressionStatement[53855-53898]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "info" : "IfStatement[53912-54633]:IfStatement[53912-54633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53980-54633]:Block[53980-54633]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[54056-54104]:VariableDeclarationStatement[54056-54104]"
    }, {
      "left" : "if (ownerType instanceof FunctionType)",
      "right" : "if (ownerType instanceof FunctionType)",
      "info" : "IfStatement[54113-54625]:IfStatement[54113-54625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54152-54625]:Block[54152-54625]"
    }, {
      "left" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "info" : "VariableDeclarationStatement[54164-54232]:VariableDeclarationStatement[54164-54232]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[54243-54310]:VariableDeclarationStatement[54243-54310]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[54321-54422]:VariableDeclarationStatement[54321-54422]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[54433-54615]:IfStatement[54433-54615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54516-54615]:Block[54516-54615]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "info" : "ExpressionStatement[54530-54603]:ExpressionStatement[54530-54603]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54865-54872]:Modifier[54865-54872]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[54873-54883]:SimpleType[54873-54883]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[54884-54897]:SimpleName[54884-54897]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[54898-54913]:SingleVariableDeclaration[54898-54913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54915-55193]:Block[54915-55193]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[54923-54961]:VariableDeclarationStatement[54923-54961]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[54968-55168]:IfStatement[54968-55168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54990-55168]:Block[54990-55168]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[55000-55041]:VariableDeclarationStatement[55000-55041]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[55050-55160]:ReturnStatement[55050-55160]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55175-55187]:ReturnStatement[55175-55187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55330-55334]:PrimitiveType[55330-55334]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[55335-55358]:SimpleName[55335-55358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55361-56522]:Block[55361-56522]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[55369-56516]:EnhancedForStatement[55369-56516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55415-56516]:Block[55415-56516]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[55425-55444]:VariableDeclarationStatement[55425-55444]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[55453-55481]:VariableDeclarationStatement[55453-55481]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[55490-55526]:VariableDeclarationStatement[55490-55526]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[55535-55582]:VariableDeclarationStatement[55535-55582]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[55591-55625]:VariableDeclarationStatement[55591-55625]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[55634-55667]:VariableDeclarationStatement[55634-55667]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[55677-55744]:IfStatement[55677-55744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55713-55744]:Block[55713-55744]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[55725-55734]:ContinueStatement[55725-55734]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[55861-55909]:VariableDeclarationStatement[55861-55909]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[55918-55990]:VariableDeclarationStatement[55918-55990]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[55999-56040]:ExpressionStatement[55999-56040]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[56050-56508]:IfStatement[56050-56508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56138-56374]:Block[56138-56374]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern, n);",
      "info" : "ExpressionStatement[56280-56364]:ExpressionStatement[56280-56364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56380-56508]:Block[56380-56508]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[56392-56498]:ExpressionStatement[56392-56498]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56654-56661]:Modifier[56654-56661]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[56662-56667]:Modifier[56662-56667]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[56668-56673]:TYPE_DECLARATION_KIND[56668-56673]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[56674-56691]:SimpleName[56674-56691]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[56708-56740]:SimpleType[56708-56740]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[56791-56808]:SimpleName[56791-56808]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[56809-56828]:SingleVariableDeclaration[56809-56828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56830-56873]:Block[56830-56873]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[56840-56865]:ExpressionStatement[56840-56865]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56881-56887]:Modifier[56881-56887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56888-56892]:PrimitiveType[56888-56892]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[56893-56898]:SimpleName[56893-56898]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[56899-56914]:SingleVariableDeclaration[56899-56914]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56916-56922]:SingleVariableDeclaration[56916-56922]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[56924-56935]:SingleVariableDeclaration[56924-56935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56937-57364]:Block[56937-57364]"
    }, {
      "left" : "if (n.getType() == Token.EXPR_RESULT)",
      "right" : "if (n.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[56947-57356]:IfStatement[56947-57356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56985-57356]:Block[56985-57356]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[56997-57028]:VariableDeclarationStatement[56997-57028]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[57039-57346]:SwitchStatement[57039-57346]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[57078-57096]:SwitchCase[57078-57096]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[57111-57203]:ExpressionStatement[57111-57203]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57218-57224]:BreakStatement[57218-57224]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[57237-57256]:SwitchCase[57237-57256]"
    }, {
      "left" : "maybeCollectMember(t, child, child, null);",
      "right" : "maybeCollectMember(t, child, child, null);",
      "info" : "ExpressionStatement[57271-57313]:ExpressionStatement[57271-57313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57328-57334]:BreakStatement[57328-57334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57372-57379]:Modifier[57372-57379]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57380-57384]:PrimitiveType[57380-57384]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[57385-57403]:SimpleName[57385-57403]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[57404-57419]:SingleVariableDeclaration[57404-57419]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[57431-57442]:SingleVariableDeclaration[57431-57442]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[57444-57466]:SingleVariableDeclaration[57444-57466]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[57468-57488]:SingleVariableDeclaration[57468-57488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57490-58406]:Block[57490-58406]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[57500-57550]:VariableDeclarationStatement[57500-57550]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[57746-57904]:IfStatement[57746-57904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57875-57904]:Block[57875-57904]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57887-57894]:ReturnStatement[57887-57894]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[57914-57957]:ExpressionStatement[57914-57957]"
    }, {
      "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "info" : "VariableDeclarationStatement[57966-58038]:VariableDeclarationStatement[57966-58038]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[58047-58081]:VariableDeclarationStatement[58047-58081]"
    }, {
      "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "info" : "IfStatement[58090-58398]:IfStatement[58090-58398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58190-58398]:Block[58190-58398]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */,\n              member);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */,\n              member);",
      "info" : "ExpressionStatement[58202-58388]:ExpressionStatement[58202-58388]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58511-58518]:Modifier[58511-58518]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58519-58525]:Modifier[58519-58525]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[58526-58531]:Modifier[58526-58531]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58532-58537]:TYPE_DECLARATION_KIND[58532-58537]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[58538-58553]:SimpleName[58538-58553]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58662-58669]:Modifier[58662-58669]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[58670-58685]:SimpleName[58670-58685]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[58686-58695]:SingleVariableDeclaration[58686-58695]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[58697-58713]:SingleVariableDeclaration[58697-58713]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[58715-58731]:SingleVariableDeclaration[58715-58731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58733-58830]:Block[58733-58830]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[58741-58758]:ExpressionStatement[58741-58758]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[58765-58790]:ExpressionStatement[58765-58790]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[58797-58824]:ExpressionStatement[58797-58824]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58949-58956]:Modifier[58949-58956]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[58957-58962]:Modifier[58957-58962]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58963-58968]:TYPE_DECLARATION_KIND[58963-58968]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[58969-58987]:SimpleName[58969-58987]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[58996-59016]:SimpleType[58996-59016]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59024-59031]:Modifier[59024-59031]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[59032-59050]:SimpleName[59032-59050]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[59051-59062]:SingleVariableDeclaration[59051-59062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59064-59091]:Block[59064-59091]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[59072-59085]:SuperConstructorInvocation[59072-59085]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[59341-59350]:MarkerAnnotation[59341-59350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59351-59357]:Modifier[59351-59357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59358-59362]:PrimitiveType[59358-59362]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[59363-59368]:SimpleName[59363-59368]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[59369-59384]:SingleVariableDeclaration[59369-59384]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[59386-59392]:SingleVariableDeclaration[59386-59392]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[59394-59405]:SingleVariableDeclaration[59394-59405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59407-59830]:Block[59407-59830]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[59415-59441]:ExpressionStatement[59415-59441]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[59449-59824]:SwitchStatement[59449-59824]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[59481-59499]:SwitchCase[59481-59499]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[59540-59570]:ExpressionStatement[59540-59570]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59581-59587]:BreakStatement[59581-59587]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[59597-59612]:SwitchCase[59597-59612]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[59653-59799]:IfStatement[59653-59799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59674-59799]:Block[59674-59799]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[59688-59718]:ExpressionStatement[59688-59718]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[59731-59787]:ExpressionStatement[59731-59787]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59810-59816]:BreakStatement[59810-59816]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[59836-59845]:MarkerAnnotation[59836-59845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59850-59854]:PrimitiveType[59850-59854]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[59855-59880]:SimpleName[59855-59880]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[59890-59905]:SingleVariableDeclaration[59890-59905]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[59907-59921]:SingleVariableDeclaration[59907-59921]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[59931-59937]:SingleVariableDeclaration[59931-59937]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[59939-59950]:SingleVariableDeclaration[59939-59950]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[59952-59965]:SingleVariableDeclaration[59952-59965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59967-60078]:Block[59967-60078]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[59975-60003]:ExpressionStatement[59975-60003]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[60010-60072]:ExpressionStatement[60010-60072]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60245-60252]:Modifier[60245-60252]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60253-60257]:PrimitiveType[60253-60257]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[60258-60273]:SimpleName[60258-60273]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[60283-60298]:SingleVariableDeclaration[60283-60298]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[60300-60314]:SingleVariableDeclaration[60300-60314]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[60316-60330]:SingleVariableDeclaration[60316-60330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60332-61219]:Block[60332-61219]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[60340-60409]:IfStatement[60340-60409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60384-60409]:Block[60384-60409]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60394-60401]:ReturnStatement[60394-60401]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[60417-60463]:VariableDeclarationStatement[60417-60463]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[60470-60516]:IfStatement[60470-60516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60491-60516]:Block[60491-60516]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60501-60508]:ReturnStatement[60501-60508]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[60690-60753]:ExpressionStatement[60690-60753]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[60761-60831]:VariableDeclarationStatement[60761-60831]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[60838-60996]:IfStatement[60838-60996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60860-60996]:Block[60860-60996]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[60870-60988]:ExpressionStatement[60870-60988]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[61004-61058]:ExpressionStatement[61004-61058]"
    }, {
      "left" : "if (candidate.getType() == Token.GETPROP)",
      "right" : "if (candidate.getType() == Token.GETPROP)",
      "info" : "IfStatement[61065-61213]:IfStatement[61065-61213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61107-61213]:Block[61107-61213]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[61117-61205]:ExpressionStatement[61117-61205]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61387-61394]:Modifier[61387-61394]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61395-61399]:PrimitiveType[61395-61399]"
    }, {
      "left" : "checkForOldStyleTypedef",
      "right" : "checkForOldStyleTypedef",
      "info" : "SimpleName[61400-61423]:SimpleName[61400-61423]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[61424-61439]:SingleVariableDeclaration[61424-61439]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[61441-61455]:SingleVariableDeclaration[61441-61455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61457-62407]:Block[61457-62407]"
    }, {
      "left" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "right" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "info" : "VariableDeclarationStatement[61493-61560]:VariableDeclarationStatement[61493-61560]"
    }, {
      "left" : "if (typedef != null)",
      "right" : "if (typedef != null)",
      "info" : "IfStatement[61567-62401]:IfStatement[61567-62401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61588-62401]:Block[61588-62401]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[61770-61833]:ExpressionStatement[61770-61833]"
    }, {
      "left" : "JSDocInfo info = candidate.getJSDocInfo();",
      "right" : "JSDocInfo info = candidate.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[61843-61885]:VariableDeclarationStatement[61843-61885]"
    }, {
      "left" : "JSType realType = null;",
      "right" : "JSType realType = null;",
      "info" : "VariableDeclarationStatement[61894-61917]:VariableDeclarationStatement[61894-61917]"
    }, {
      "left" : "if (info != null && info.getType() != null)",
      "right" : "if (info != null && info.getType() != null)",
      "info" : "IfStatement[61926-62048]:IfStatement[61926-62048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61970-62048]:Block[61970-62048]"
    }, {
      "left" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[61982-62038]:ExpressionStatement[61982-62038]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[62058-62224]:IfStatement[62058-62224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62080-62224]:Block[62080-62224]"
    }, {
      "left" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[62092-62214]:ExpressionStatement[62092-62214]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[62234-62288]:ExpressionStatement[62234-62288]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62683-62690]:Modifier[62683-62690]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[62691-62708]:SimpleName[62691-62708]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[62709-62720]:SingleVariableDeclaration[62709-62720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62722-62749]:Block[62722-62749]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[62730-62743]:SuperConstructorInvocation[62730-62743]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62816-62820]:PrimitiveType[62816-62820]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[62821-62826]:SimpleName[62821-62826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62829-62903]:Block[62829-62903]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[62837-62897]:ExpressionStatement[62837-62897]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63167-63176]:MarkerAnnotation[63167-63176]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63177-63183]:Modifier[63177-63183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63184-63188]:PrimitiveType[63184-63188]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[63189-63194]:SimpleName[63189-63194]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[63195-63210]:SingleVariableDeclaration[63195-63210]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[63212-63218]:SingleVariableDeclaration[63212-63218]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[63220-63231]:SingleVariableDeclaration[63220-63231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63233-63451]:Block[63233-63451]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[63241-63278]:IfStatement[63241-63278]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63271-63278]:ReturnStatement[63271-63278]"
    }, {
      "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "info" : "IfStatement[63286-63411]:IfStatement[63286-63411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63348-63411]:Block[63348-63411]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[63358-63387]:ExpressionStatement[63358-63387]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63396-63403]:ReturnStatement[63396-63403]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[63419-63445]:ExpressionStatement[63419-63445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63519-63526]:Modifier[63519-63526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63527-63531]:PrimitiveType[63527-63531]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[63532-63552]:SimpleName[63532-63552]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[63553-63564]:SingleVariableDeclaration[63553-63564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63566-64322]:Block[63566-64322]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[63610-63651]:VariableDeclarationStatement[63610-63651]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[63658-63697]:VariableDeclarationStatement[63658-63697]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[63704-64283]:IfStatement[63704-64283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63727-64283]:Block[63727-64283]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[63737-63776]:VariableDeclarationStatement[63737-63776]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[63785-64275]:IfStatement[63785-64275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64195-64275]:Block[64195-64275]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[64207-64265]:ExpressionStatement[64207-64265]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[64291-64316]:ExpressionStatement[64291-64316]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65341-65347]:Modifier[65342-65348]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[65348-65357]:SimpleType[65349-65358]"
    }, {
      "left" : "getBestJSDocInfo",
      "right" : "getBestJSDocInfo",
      "info" : "SimpleName[65358-65374]:SimpleName[65359-65375]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65375-65381]:SingleVariableDeclaration[65376-65382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65383-65955]:Block[65384-65956]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[65389-65423]:VariableDeclarationStatement[65390-65424]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[65428-65934]:IfStatement[65429-65935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65446-65934]:Block[65447-65935]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[65454-65482]:VariableDeclarationStatement[65455-65483]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[65489-65523]:VariableDeclarationStatement[65490-65524]"
    }, {
      "left" : "if (parentType == Token.NAME)",
      "right" : "if (parentType == Token.NAME)",
      "info" : "IfStatement[65530-65928]:IfStatement[65531-65929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65560-65733]:Block[65561-65734]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[65570-65599]:ExpressionStatement[65571-65600]"
    }, {
      "left" : "if (info == null && parent.getParent().hasOneChild())",
      "right" : "if (info == null && parent.getParent().hasOneChild())",
      "info" : "IfStatement[65608-65725]:IfStatement[65609-65726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65662-65725]:Block[65663-65726]"
    }, {
      "left" : "info = parent.getParent().getJSDocInfo();",
      "right" : "info = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[65674-65715]:ExpressionStatement[65675-65716]"
    }, {
      "left" : "if (parentType == Token.ASSIGN)",
      "right" : "if (parentType == Token.ASSIGN)",
      "info" : "IfStatement[65739-65928]:IfStatement[65740-65929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65771-65818]:Block[65772-65819]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[65781-65810]:ExpressionStatement[65782-65811]"
    }, {
      "left" : "if (NodeUtil.isObjectLitKey(parent, parent.getParent()))",
      "right" : "if (NodeUtil.isObjectLitKey(parent, parent.getParent()))",
      "info" : "IfStatement[65824-65928]:IfStatement[65825-65929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65881-65928]:Block[65882-65929]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[65891-65920]:ExpressionStatement[65892-65921]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[65939-65951]:ReturnStatement[65940-65952]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66030-66037]:Modifier[66031-66038]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66038-66044]:Modifier[66039-66045]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[66045-66049]:SimpleType[66046-66050]"
    }, {
      "left" : "getBestLValue",
      "right" : "getBestLValue",
      "info" : "SimpleName[66050-66063]:SimpleName[66051-66064]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[66064-66070]:SingleVariableDeclaration[66065-66071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66072-66545]:Block[66073-66546]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[66078-66106]:VariableDeclarationStatement[66079-66107]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[66111-66145]:VariableDeclarationStatement[66112-66146]"
    }, {
      "left" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);",
      "right" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);",
      "info" : "VariableDeclarationStatement[66150-66216]:VariableDeclarationStatement[66151-66217]"
    }, {
      "left" : "if (isFunctionDeclaration)",
      "right" : "if (isFunctionDeclaration)",
      "info" : "IfStatement[66221-66524]:IfStatement[66222-66525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66248-66287]:Block[66249-66288]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[66256-66281]:ReturnStatement[66257-66282]"
    }, {
      "left" : "if (parentType == Token.NAME)",
      "right" : "if (parentType == Token.NAME)",
      "info" : "IfStatement[66293-66524]:IfStatement[66294-66525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66323-66351]:Block[66324-66352]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[66331-66345]:ReturnStatement[66332-66346]"
    }, {
      "left" : "if (parentType == Token.ASSIGN)",
      "right" : "if (parentType == Token.ASSIGN)",
      "info" : "IfStatement[66357-66524]:IfStatement[66358-66525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66389-66433]:Block[66390-66434]"
    }, {
      "left" : "return parent.getFirstChild();",
      "right" : "return parent.getFirstChild();",
      "info" : "ReturnStatement[66397-66427]:ReturnStatement[66398-66428]"
    }, {
      "left" : "if (NodeUtil.isObjectLitKey(parent, parent.getParent()))",
      "right" : "if (NodeUtil.isObjectLitKey(parent, parent.getParent()))",
      "info" : "IfStatement[66439-66524]:IfStatement[66440-66525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66496-66524]:Block[66497-66525]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[66504-66518]:ReturnStatement[66505-66519]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[66529-66541]:ReturnStatement[66530-66542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66598-66605]:Modifier[66599-66606]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66606-66612]:Modifier[66607-66613]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66613-66619]:SimpleType[66614-66620]"
    }, {
      "left" : "getBestLValueName",
      "right" : "getBestLValueName",
      "info" : "SimpleName[66620-66637]:SimpleName[66621-66638]"
    }, {
      "left" : "@Nullable Node lValue",
      "right" : "@Nullable Node lValue",
      "info" : "SingleVariableDeclaration[66638-66659]:SingleVariableDeclaration[66639-66660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66661-67131]:Block[66662-67132]"
    }, {
      "left" : "if (lValue == null || lValue.getParent() == null)",
      "right" : "if (lValue == null || lValue.getParent() == null)",
      "info" : "IfStatement[66667-66743]:IfStatement[66668-66744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66717-66743]:Block[66718-66744]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[66725-66737]:ReturnStatement[66726-66738]"
    }, {
      "left" : "if (NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[66748-67089]:IfStatement[66749-67090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66805-67089]:Block[66806-67090]"
    }, {
      "left" : "Node owner = getBestLValue(lValue.getParent());",
      "right" : "Node owner = getBestLValue(lValue.getParent());",
      "info" : "VariableDeclarationStatement[66813-66860]:VariableDeclarationStatement[66814-66861]"
    }, {
      "left" : "if (owner != null)",
      "right" : "if (owner != null)",
      "info" : "IfStatement[66867-67064]:IfStatement[66868-67065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66886-67064]:Block[66887-67065]"
    }, {
      "left" : "String ownerName = getBestLValueName(owner);",
      "right" : "String ownerName = getBestLValueName(owner);",
      "info" : "VariableDeclarationStatement[66896-66940]:VariableDeclarationStatement[66897-66941]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[66949-67056]:IfStatement[66950-67057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66972-67056]:Block[66973-67057]"
    }, {
      "left" : "return ownerName + \".\" + NodeUtil.getObjectLitKeyName(lValue);",
      "right" : "return ownerName + \".\" + NodeUtil.getObjectLitKeyName(lValue);",
      "info" : "ReturnStatement[66984-67046]:ReturnStatement[66985-67047]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[67071-67083]:ReturnStatement[67072-67084]"
    }, {
      "left" : "return lValue.getQualifiedName();",
      "right" : "return lValue.getQualifiedName();",
      "info" : "ReturnStatement[67094-67127]:ReturnStatement[67095-67128]"
    } ]
  },
  "interFileMappings" : { }
}