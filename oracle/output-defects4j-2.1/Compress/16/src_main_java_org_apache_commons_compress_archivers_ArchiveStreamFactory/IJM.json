{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ArchiveStreamFactory",
      "right" : "ArchiveStreamFactory",
      "info" : "TypeDeclaration[1777-10236]:TypeDeclaration[1777-10282]"
    }, {
      "left" : "public static final String AR = \"ar\";",
      "right" : "public static final String AR = \"ar\";",
      "info" : "FieldDeclaration[3071-3215]:FieldDeclaration[3071-3215]"
    }, {
      "left" : "public static final String CPIO = \"cpio\";",
      "right" : "public static final String CPIO = \"cpio\";",
      "info" : "FieldDeclaration[3220-3370]:FieldDeclaration[3220-3370]"
    }, {
      "left" : "public static final String DUMP = \"dump\";",
      "right" : "public static final String DUMP = \"dump\";",
      "info" : "FieldDeclaration[3375-3530]:FieldDeclaration[3375-3530]"
    }, {
      "left" : "public static final String JAR = \"jar\";",
      "right" : "public static final String JAR = \"jar\";",
      "info" : "FieldDeclaration[3535-3682]:FieldDeclaration[3535-3682]"
    }, {
      "left" : "public static final String TAR = \"tar\";",
      "right" : "public static final String TAR = \"tar\";",
      "info" : "FieldDeclaration[3687-3834]:FieldDeclaration[3687-3834]"
    }, {
      "left" : "public static final String ZIP = \"zip\";",
      "right" : "public static final String ZIP = \"zip\";",
      "info" : "FieldDeclaration[3839-3986]:FieldDeclaration[3839-3986]"
    }, {
      "left" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "right" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "info" : "MethodDeclaration[3992-5558]:MethodDeclaration[3992-5558]"
    }, {
      "left" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "right" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "info" : "MethodDeclaration[5564-7027]:MethodDeclaration[5564-7027]"
    }, {
      "left" : "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException",
      "right" : "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException",
      "info" : "MethodDeclaration[7033-10234]:MethodDeclaration[7033-10280]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4559-5558]:Block[4559-5558]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[4570-4689]:IfStatement[4570-4689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4596-4689]:Block[4596-4689]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[4610-4679]:ThrowStatement[4610-4679]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[4699-4807]:IfStatement[4699-4807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4715-4807]:Block[4715-4807]"
    }, {
      "left" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "info" : "ThrowStatement[4729-4797]:ThrowStatement[4729-4797]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[4817-4916]:IfStatement[4817-4916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4856-4916]:Block[4856-4916]"
    }, {
      "left" : "return new ArArchiveInputStream(in);",
      "right" : "return new ArArchiveInputStream(in);",
      "info" : "ReturnStatement[4870-4906]:ReturnStatement[4870-4906]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[4925-5026]:IfStatement[4925-5026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4965-5026]:Block[4965-5026]"
    }, {
      "left" : "return new ZipArchiveInputStream(in);",
      "right" : "return new ZipArchiveInputStream(in);",
      "info" : "ReturnStatement[4979-5016]:ReturnStatement[4979-5016]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5035-5136]:IfStatement[5035-5136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5075-5136]:Block[5075-5136]"
    }, {
      "left" : "return new TarArchiveInputStream(in);",
      "right" : "return new TarArchiveInputStream(in);",
      "info" : "ReturnStatement[5089-5126]:ReturnStatement[5089-5126]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5145-5246]:IfStatement[5145-5246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5185-5246]:Block[5185-5246]"
    }, {
      "left" : "return new JarArchiveInputStream(in);",
      "right" : "return new JarArchiveInputStream(in);",
      "info" : "ReturnStatement[5199-5236]:ReturnStatement[5199-5236]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5255-5358]:IfStatement[5255-5358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5296-5358]:Block[5296-5358]"
    }, {
      "left" : "return new CpioArchiveInputStream(in);",
      "right" : "return new CpioArchiveInputStream(in);",
      "info" : "ReturnStatement[5310-5348]:ReturnStatement[5310-5348]"
    }, {
      "left" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "right" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5367-5470]:IfStatement[5367-5470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5408-5470]:Block[5408-5470]"
    }, {
      "left" : "return new DumpArchiveInputStream(in);",
      "right" : "return new DumpArchiveInputStream(in);",
      "info" : "ReturnStatement[5422-5460]:ReturnStatement[5422-5460]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[5480-5552]:ThrowStatement[5480-5552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6131-7027]:Block[6131-7027]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[6141-6260]:IfStatement[6141-6260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6167-6260]:Block[6167-6260]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[6181-6250]:ThrowStatement[6181-6250]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[6269-6379]:IfStatement[6269-6379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6286-6379]:Block[6286-6379]"
    }, {
      "left" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "info" : "ThrowStatement[6300-6369]:ThrowStatement[6300-6369]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6389-6490]:IfStatement[6389-6490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6428-6490]:Block[6428-6490]"
    }, {
      "left" : "return new ArArchiveOutputStream(out);",
      "right" : "return new ArArchiveOutputStream(out);",
      "info" : "ReturnStatement[6442-6480]:ReturnStatement[6442-6480]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6499-6602]:IfStatement[6499-6602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6539-6602]:Block[6539-6602]"
    }, {
      "left" : "return new ZipArchiveOutputStream(out);",
      "right" : "return new ZipArchiveOutputStream(out);",
      "info" : "ReturnStatement[6553-6592]:ReturnStatement[6553-6592]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6611-6714]:IfStatement[6611-6714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6651-6714]:Block[6651-6714]"
    }, {
      "left" : "return new TarArchiveOutputStream(out);",
      "right" : "return new TarArchiveOutputStream(out);",
      "info" : "ReturnStatement[6665-6704]:ReturnStatement[6665-6704]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6723-6826]:IfStatement[6723-6826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6763-6826]:Block[6763-6826]"
    }, {
      "left" : "return new JarArchiveOutputStream(out);",
      "right" : "return new JarArchiveOutputStream(out);",
      "info" : "ReturnStatement[6777-6816]:ReturnStatement[6777-6816]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6835-6940]:IfStatement[6835-6940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6876-6940]:Block[6876-6940]"
    }, {
      "left" : "return new CpioArchiveOutputStream(out);",
      "right" : "return new CpioArchiveOutputStream(out);",
      "info" : "ReturnStatement[6890-6930]:ReturnStatement[6890-6930]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[6949-7021]:ThrowStatement[6949-7021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7600-10234]:Block[7600-10280]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[7610-7713]:IfStatement[7610-7713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-7713]:Block[7626-7713]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "info" : "ThrowStatement[7640-7703]:ThrowStatement[7640-7703]"
    }, {
      "left" : "if (!in.markSupported())",
      "right" : "if (!in.markSupported())",
      "info" : "IfStatement[7723-7833]:IfStatement[7723-7833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7748-7833]:Block[7748-7833]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "right" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "info" : "ThrowStatement[7762-7823]:ThrowStatement[7762-7823]"
    }, {
      "left" : "final byte[] signature = new byte[12];",
      "right" : "final byte[] signature = new byte[12];",
      "info" : "VariableDeclarationStatement[7843-7881]:VariableDeclarationStatement[7843-7881]"
    }, {
      "left" : "in.mark(signature.length);",
      "right" : "in.mark(signature.length);",
      "info" : "ExpressionStatement[7890-7916]:ExpressionStatement[7890-7916]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7925-10145]:TryStatement[7925-10191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7929-10024]:Block[7929-10070]"
    }, {
      "left" : "int signatureLength = in.read(signature);",
      "right" : "int signatureLength = in.read(signature);",
      "info" : "VariableDeclarationStatement[7943-7984]:VariableDeclarationStatement[7943-7984]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[7997-8008]:ExpressionStatement[7997-8008]"
    }, {
      "left" : "if (ZipArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (ZipArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[8021-8567]:IfStatement[8021-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8084-8153]:Block[8084-8153]"
    }, {
      "left" : "return new ZipArchiveInputStream(in);",
      "right" : "return new ZipArchiveInputStream(in);",
      "info" : "ReturnStatement[8102-8139]:ReturnStatement[8102-8139]"
    }, {
      "left" : "if (JarArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (JarArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[8159-8567]:IfStatement[8159-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8222-8291]:Block[8222-8291]"
    }, {
      "left" : "return new JarArchiveInputStream(in);",
      "right" : "return new JarArchiveInputStream(in);",
      "info" : "ReturnStatement[8240-8277]:ReturnStatement[8240-8277]"
    }, {
      "left" : "if (ArArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (ArArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[8297-8567]:IfStatement[8297-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8359-8427]:Block[8359-8427]"
    }, {
      "left" : "return new ArArchiveInputStream(in);",
      "right" : "return new ArArchiveInputStream(in);",
      "info" : "ReturnStatement[8377-8413]:ReturnStatement[8377-8413]"
    }, {
      "left" : "if (CpioArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (CpioArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[8433-8567]:IfStatement[8433-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8497-8567]:Block[8497-8567]"
    }, {
      "left" : "return new CpioArchiveInputStream(in);",
      "right" : "return new CpioArchiveInputStream(in);",
      "info" : "ReturnStatement[8515-8553]:ReturnStatement[8515-8553]"
    }, {
      "left" : "final byte[] dumpsig = new byte[32];",
      "right" : "final byte[] dumpsig = new byte[32];",
      "info" : "VariableDeclarationStatement[8647-8683]:VariableDeclarationStatement[8647-8683]"
    }, {
      "left" : "in.mark(dumpsig.length);",
      "right" : "in.mark(dumpsig.length);",
      "info" : "ExpressionStatement[8696-8720]:ExpressionStatement[8696-8720]"
    }, {
      "left" : "signatureLength = in.read(dumpsig);",
      "right" : "signatureLength = in.read(dumpsig);",
      "info" : "ExpressionStatement[8733-8768]:ExpressionStatement[8733-8768]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[8781-8792]:ExpressionStatement[8781-8792]"
    }, {
      "left" : "if (DumpArchiveInputStream.matches(dumpsig, signatureLength))",
      "right" : "if (DumpArchiveInputStream.matches(dumpsig, signatureLength))",
      "info" : "IfStatement[8805-8937]:IfStatement[8805-8937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8867-8937]:Block[8867-8937]"
    }, {
      "left" : "return new DumpArchiveInputStream(in);",
      "right" : "return new DumpArchiveInputStream(in);",
      "info" : "ReturnStatement[8885-8923]:ReturnStatement[8885-8923]"
    }, {
      "left" : "final byte[] tarheader = new byte[512];",
      "right" : "final byte[] tarheader = new byte[512];",
      "info" : "VariableDeclarationStatement[9043-9082]:VariableDeclarationStatement[9043-9082]"
    }, {
      "left" : "in.mark(tarheader.length);",
      "right" : "in.mark(tarheader.length);",
      "info" : "ExpressionStatement[9095-9121]:ExpressionStatement[9095-9121]"
    }, {
      "left" : "signatureLength = in.read(tarheader);",
      "right" : "signatureLength = in.read(tarheader);",
      "info" : "ExpressionStatement[9134-9171]:ExpressionStatement[9134-9171]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[9184-9195]:ExpressionStatement[9184-9195]"
    }, {
      "left" : "if (TarArchiveInputStream.matches(tarheader, signatureLength))",
      "right" : "if (TarArchiveInputStream.matches(tarheader, signatureLength))",
      "info" : "IfStatement[9208-9340]:IfStatement[9208-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9271-9340]:Block[9271-9340]"
    }, {
      "left" : "return new TarArchiveInputStream(in);",
      "right" : "return new TarArchiveInputStream(in);",
      "info" : "ReturnStatement[9289-9326]:ReturnStatement[9289-9326]"
    }, {
      "left" : "if (signatureLength >= 512)",
      "right" : "if (signatureLength >= 512)",
      "info" : "IfStatement[9408-10014]:IfStatement[9408-10060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9436-10014]:Block[9436-10060]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9454-10000]:TryStatement[9454-10046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9458-9758]:Block[9458-9804]"
    }, {
      "left" : "TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));",
      "right" : "TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));",
      "info" : "VariableDeclarationStatement[9480-9572]:VariableDeclarationStatement[9480-9572]"
    }, {
      "left" : "return new TarArchiveInputStream(in);",
      "right" : "return new TarArchiveInputStream(in);",
      "info" : "ReturnStatement[9703-9740]:ReturnStatement[9727-9764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9779-10000]:Block[9825-10046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10047-10145]:Block[10093-10191]"
    }, {
      "left" : "throw new ArchiveException(\"Could not use reset and mark operations.\", e);",
      "right" : "throw new ArchiveException(\"Could not use reset and mark operations.\", e);",
      "info" : "ThrowStatement[10061-10135]:ThrowStatement[10107-10181]"
    }, {
      "left" : "throw new ArchiveException(\"No Archiver found for the stream signature\");",
      "right" : "throw new ArchiveException(\"No Archiver found for the stream signature\");",
      "info" : "ThrowStatement[10155-10228]:ThrowStatement[10201-10274]"
    } ]
  },
  "interFileMappings" : { }
}