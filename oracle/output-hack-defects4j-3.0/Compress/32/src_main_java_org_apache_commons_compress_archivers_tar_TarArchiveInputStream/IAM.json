{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "TypeDeclaration[1610-24682]:TypeDeclaration[1610-24678]"
    }, {
      "left" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "right" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "info" : "FieldDeclaration[1917-1966]:FieldDeclaration[1917-1966]"
    }, {
      "left" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "right" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "info" : "FieldDeclaration[1972-2033]:FieldDeclaration[1972-2033]"
    }, {
      "left" : "private final int recordSize;",
      "right" : "private final int recordSize;",
      "info" : "FieldDeclaration[2039-2103]:FieldDeclaration[2039-2103]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[2109-2168]:FieldDeclaration[2109-2168]"
    }, {
      "left" : "private boolean hasHitEOF;",
      "right" : "private boolean hasHitEOF;",
      "info" : "FieldDeclaration[2174-2236]:FieldDeclaration[2174-2236]"
    }, {
      "left" : "private long entrySize;",
      "right" : "private long entrySize;",
      "info" : "FieldDeclaration[2242-2302]:FieldDeclaration[2242-2302]"
    }, {
      "left" : "private long entryOffset;",
      "right" : "private long entryOffset;",
      "info" : "FieldDeclaration[2308-2384]:FieldDeclaration[2308-2384]"
    }, {
      "left" : "private final InputStream is;",
      "right" : "private final InputStream is;",
      "info" : "FieldDeclaration[2390-2459]:FieldDeclaration[2390-2459]"
    }, {
      "left" : "private TarArchiveEntry currEntry;",
      "right" : "private TarArchiveEntry currEntry;",
      "info" : "FieldDeclaration[2465-2548]:FieldDeclaration[2465-2548]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[2554-2628]:FieldDeclaration[2554-2628]"
    }, {
      "left" : "final String encoding;",
      "right" : "final String encoding;",
      "info" : "FieldDeclaration[2680-2702]:FieldDeclaration[2680-2702]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is)",
      "right" : "public TarArchiveInputStream(InputStream is)",
      "info" : "MethodDeclaration[2708-2934]:MethodDeclaration[2708-2934]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "info" : "MethodDeclaration[2940-3290]:MethodDeclaration[2940-3290]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "info" : "MethodDeclaration[3296-3564]:MethodDeclaration[3296-3564]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[3570-3982]:MethodDeclaration[3570-3982]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[3988-4314]:MethodDeclaration[3988-4314]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[4320-4960]:MethodDeclaration[4320-4960]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[4966-5163]:MethodDeclaration[4966-5163]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[5169-5358]:MethodDeclaration[5169-5358]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[5364-6175]:MethodDeclaration[5364-6175]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[6186-7274]:MethodDeclaration[6186-7274]"
    }, {
      "left" : "public boolean markSupported()",
      "right" : "public boolean markSupported()",
      "info" : "MethodDeclaration[7280-7465]:MethodDeclaration[7280-7465]"
    }, {
      "left" : "public void mark(int markLimit)",
      "right" : "public void mark(int markLimit)",
      "info" : "MethodDeclaration[7471-7654]:MethodDeclaration[7471-7654]"
    }, {
      "left" : "public synchronized void reset()",
      "right" : "public synchronized void reset()",
      "info" : "MethodDeclaration[7660-7794]:MethodDeclaration[7660-7794]"
    }, {
      "left" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "right" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "info" : "MethodDeclaration[7800-10548]:MethodDeclaration[7800-10548]"
    }, {
      "left" : "private void skipRecordPadding() throws IOException",
      "right" : "private void skipRecordPadding() throws IOException",
      "info" : "MethodDeclaration[10558-11084]:MethodDeclaration[10558-11084]"
    }, {
      "left" : "protected byte[] getLongNameData() throws IOException",
      "right" : "protected byte[] getLongNameData() throws IOException",
      "info" : "MethodDeclaration[11090-12223]:MethodDeclaration[11090-12223]"
    }, {
      "left" : "private byte[] getRecord() throws IOException",
      "right" : "private byte[] getRecord() throws IOException",
      "info" : "MethodDeclaration[12229-13122]:MethodDeclaration[12229-13122]"
    }, {
      "left" : "protected boolean isEOFRecord(byte[] record)",
      "right" : "protected boolean isEOFRecord(byte[] record)",
      "info" : "MethodDeclaration[13128-13537]:MethodDeclaration[13128-13537]"
    }, {
      "left" : "protected byte[] readRecord() throws IOException",
      "right" : "protected byte[] readRecord() throws IOException",
      "info" : "MethodDeclaration[13547-14007]:MethodDeclaration[13547-14007]"
    }, {
      "left" : "private void paxHeaders() throws IOExceptio",
      "right" : "private void paxHeaders() throws IOExceptio",
      "info" : "MethodDeclaration[14013-14226]:MethodDeclaration[14013-14226]"
    }, {
      "left" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "right" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "info" : "MethodDeclaration[14232-16290]:MethodDeclaration[14232-16290]"
    }, {
      "left" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "right" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "info" : "MethodDeclaration[16296-17919]:MethodDeclaration[16296-17915]"
    }, {
      "left" : "private void readGNUSparse() throws IOException",
      "right" : "private void readGNUSparse() throws IOException",
      "info" : "MethodDeclaration[17925-18914]:MethodDeclaration[17921-18910]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[18920-19260]:MethodDeclaration[18916-19256]"
    }, {
      "left" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "right" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "info" : "MethodDeclaration[19270-20188]:MethodDeclaration[19266-20184]"
    }, {
      "left" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "right" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "info" : "MethodDeclaration[20194-21450]:MethodDeclaration[20190-21446]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[21456-21848]:MethodDeclaration[21452-21844]"
    }, {
      "left" : "public TarArchiveEntry getCurrentEntry()",
      "right" : "public TarArchiveEntry getCurrentEntry()",
      "info" : "MethodDeclaration[21854-22071]:MethodDeclaration[21850-22067]"
    }, {
      "left" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "right" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "info" : "MethodDeclaration[22077-22163]:MethodDeclaration[22073-22159]"
    }, {
      "left" : "protected final boolean isAtEOF()",
      "right" : "protected final boolean isAtEOF()",
      "info" : "MethodDeclaration[22169-22236]:MethodDeclaration[22165-22232]"
    }, {
      "left" : "protected final void setAtEOF(boolean b)",
      "right" : "protected final void setAtEOF(boolean b)",
      "info" : "MethodDeclaration[22242-22313]:MethodDeclaration[22238-22309]"
    }, {
      "left" : "private void consumeRemainderOfLastBlock() throws IOException",
      "right" : "private void consumeRemainderOfLastBlock() throws IOException",
      "info" : "MethodDeclaration[22319-22829]:MethodDeclaration[22315-22825]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[22835-24679]:MethodDeclaration[22831-24675]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1848-1854]:Modifier[1848-1854]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1855-1860]:TYPE_DECLARATION_KIND[1855-1860]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[1861-1882]:SimpleName[1861-1882]"
    }, {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[1891-1909]:SimpleType[1891-1909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2804-2810]:Modifier[2804-2810]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2811-2832]:SimpleName[2811-2832]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[2833-2847]:SingleVariableDeclaration[2833-2847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2849-2934]:Block[2849-2934]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2859-2928]:ConstructorInvocation[2859-2928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3120-3126]:Modifier[3120-3126]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3127-3148]:SimpleName[3127-3148]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3149-3163]:SingleVariableDeclaration[3149-3163]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[3165-3180]:SingleVariableDeclaration[3165-3180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3182-3290]:Block[3182-3290]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "info" : "ConstructorInvocation[3192-3284]:ConstructorInvocation[3192-3284]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3438-3444]:Modifier[3438-3444]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3445-3466]:SimpleName[3445-3466]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3467-3481]:SingleVariableDeclaration[3467-3481]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[3483-3496]:SingleVariableDeclaration[3483-3496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3498-3564]:Block[3498-3564]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3508-3558]:ConstructorInvocation[3508-3558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3796-3802]:Modifier[3796-3802]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3803-3824]:SimpleName[3803-3824]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3825-3839]:SingleVariableDeclaration[3825-3839]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[3841-3854]:SingleVariableDeclaration[3841-3854]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[3889-3904]:SingleVariableDeclaration[3889-3904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3906-3982]:Block[3906-3982]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[3916-3976]:ConstructorInvocation[3916-3976]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4178-4184]:Modifier[4178-4184]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4185-4206]:SimpleName[4185-4206]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[4207-4221]:SingleVariableDeclaration[4207-4221]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4223-4236]:SingleVariableDeclaration[4223-4236]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[4238-4252]:SingleVariableDeclaration[4238-4252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4254-4314]:Block[4254-4314]"
    }, {
      "left" : "this(is, blockSize, recordSize, null);",
      "right" : "this(is, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[4264-4302]:ConstructorInvocation[4264-4302]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4594-4600]:Modifier[4594-4600]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4601-4622]:SimpleName[4601-4622]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[4623-4637]:SingleVariableDeclaration[4623-4637]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4639-4652]:SingleVariableDeclaration[4639-4652]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[4654-4668]:SingleVariableDeclaration[4654-4668]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4703-4718]:SingleVariableDeclaration[4703-4718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4720-4960]:Block[4720-4960]"
    }, {
      "left" : "this.is = is;",
      "right" : "this.is = is;",
      "info" : "ExpressionStatement[4730-4743]:ExpressionStatement[4730-4743]"
    }, {
      "left" : "this.hasHitEOF = false;",
      "right" : "this.hasHitEOF = false;",
      "info" : "ExpressionStatement[4752-4775]:ExpressionStatement[4752-4775]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[4784-4809]:ExpressionStatement[4784-4809]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[4818-4880]:ExpressionStatement[4818-4880]"
    }, {
      "left" : "this.recordSize = recordSize;",
      "right" : "this.recordSize = recordSize;",
      "info" : "ExpressionStatement[4889-4918]:ExpressionStatement[4889-4918]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[4927-4954]:ExpressionStatement[4927-4954]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5083-5092]:MarkerAnnotation[5083-5092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5097-5103]:Modifier[5097-5103]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5104-5108]:PrimitiveType[5104-5108]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5109-5114]:SimpleName[5109-5114]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5124-5135]:SimpleType[5124-5135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5136-5163]:Block[5136-5163]"
    }, {
      "left" : "is.close();",
      "right" : "is.close();",
      "info" : "ExpressionStatement[5146-5157]:ExpressionStatement[5146-5157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5297-5303]:Modifier[5297-5303]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5304-5307]:PrimitiveType[5304-5307]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[5308-5321]:SimpleName[5308-5321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5324-5358]:Block[5324-5358]"
    }, {
      "left" : "return recordSize;",
      "right" : "return recordSize;",
      "info" : "ReturnStatement[5334-5352]:ReturnStatement[5334-5352]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5957-5966]:MarkerAnnotation[5957-5966]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5971-5977]:Modifier[5971-5977]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5978-5981]:PrimitiveType[5978-5981]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[5982-5991]:SimpleName[5982-5991]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6001-6012]:SimpleType[6001-6012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6013-6175]:Block[6013-6175]"
    }, {
      "left" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "right" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "info" : "IfStatement[6023-6121]:IfStatement[6023-6121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6072-6121]:Block[6072-6121]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[6086-6111]:ReturnStatement[6086-6111]"
    }, {
      "left" : "return (int) (entrySize - entryOffset);",
      "right" : "return (int) (entrySize - entryOffset);",
      "info" : "ReturnStatement[6130-6169]:ReturnStatement[6130-6169]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6949-6958]:MarkerAnnotation[6949-6958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6963-6969]:Modifier[6963-6969]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6970-6974]:PrimitiveType[6970-6974]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[6975-6979]:SimpleName[6975-6979]"
    }, {
      "left" : "final long n",
      "right" : "final long n",
      "info" : "SingleVariableDeclaration[6980-6992]:SingleVariableDeclaration[6980-6992]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7001-7012]:SimpleType[7001-7012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7013-7274]:Block[7013-7274]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[7023-7068]:IfStatement[7023-7068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7035-7068]:Block[7035-7068]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[7049-7058]:ReturnStatement[7049-7058]"
    }, {
      "left" : "final long available = entrySize - entryOffset;",
      "right" : "final long available = entrySize - entryOffset;",
      "info" : "VariableDeclarationStatement[7078-7125]:VariableDeclarationStatement[7078-7125]"
    }, {
      "left" : "final long skipped = is.skip(Math.min(n, available));",
      "right" : "final long skipped = is.skip(Math.min(n, available));",
      "info" : "VariableDeclarationStatement[7134-7187]:VariableDeclarationStatement[7134-7187]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[7197-7212]:ExpressionStatement[7197-7212]"
    }, {
      "left" : "entryOffset += skipped;",
      "right" : "entryOffset += skipped;",
      "info" : "ExpressionStatement[7221-7244]:ExpressionStatement[7221-7244]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[7253-7268]:ReturnStatement[7253-7268]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7391-7400]:MarkerAnnotation[7391-7400]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7405-7411]:Modifier[7405-7411]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7412-7419]:PrimitiveType[7412-7419]"
    }, {
      "left" : "markSupported",
      "right" : "markSupported",
      "info" : "SimpleName[7420-7433]:SimpleName[7420-7433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7436-7465]:Block[7436-7465]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7446-7459]:ReturnStatement[7446-7459]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7601-7610]:MarkerAnnotation[7601-7610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7615-7621]:Modifier[7615-7621]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7622-7626]:PrimitiveType[7622-7626]"
    }, {
      "left" : "mark",
      "right" : "mark",
      "info" : "SimpleName[7627-7631]:SimpleName[7627-7631]"
    }, {
      "left" : "int markLimit",
      "right" : "int markLimit",
      "info" : "SingleVariableDeclaration[7632-7645]:SingleVariableDeclaration[7632-7645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7647-7654]:Block[7647-7654]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7740-7749]:MarkerAnnotation[7740-7749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7754-7760]:Modifier[7754-7760]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[7761-7773]:Modifier[7761-7773]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7774-7778]:PrimitiveType[7774-7778]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[7779-7784]:SimpleName[7779-7784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7787-7794]:Block[7787-7794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8372-8378]:Modifier[8372-8378]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[8379-8394]:SimpleType[8379-8394]"
    }, {
      "left" : "getNextTarEntry",
      "right" : "getNextTarEntry",
      "info" : "SimpleName[8395-8410]:SimpleName[8395-8410]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8420-8431]:SimpleType[8420-8431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8432-10548]:Block[8432-10548]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[8442-8493]:IfStatement[8442-8493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8457-8493]:Block[8457-8493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8471-8483]:ReturnStatement[8471-8483]"
    }, {
      "left" : "if (currEntry != null)",
      "right" : "if (currEntry != null)",
      "info" : "IfStatement[8503-8740]:IfStatement[8503-8740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8526-8740]:Block[8526-8740]"
    }, {
      "left" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "right" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "info" : "ExpressionStatement[8608-8643]:ExpressionStatement[8608-8643]"
    }, {
      "left" : "skipRecordPadding();",
      "right" : "skipRecordPadding();",
      "info" : "ExpressionStatement[8710-8730]:ExpressionStatement[8710-8730]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[8750-8781]:VariableDeclarationStatement[8750-8781]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[8791-8906]:IfStatement[8791-8906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8814-8906]:Block[8814-8906]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[8854-8871]:ExpressionStatement[8854-8871]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8884-8896]:ReturnStatement[8884-8896]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8916-9184]:TryStatement[8916-9184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8920-9000]:Block[8920-9000]"
    }, {
      "left" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "right" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "info" : "ExpressionStatement[8934-8990]:ExpressionStatement[8934-8990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9036-9184]:Block[9036-9184]"
    }, {
      "left" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "right" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "info" : "VariableDeclarationStatement[9050-9121]:VariableDeclarationStatement[9050-9121]"
    }, {
      "left" : "ioe.initCause(e);",
      "right" : "ioe.initCause(e);",
      "info" : "ExpressionStatement[9134-9151]:ExpressionStatement[9134-9151]"
    }, {
      "left" : "throw ioe;",
      "right" : "throw ioe;",
      "info" : "ThrowStatement[9164-9174]:ThrowStatement[9164-9174]"
    }, {
      "left" : "entryOffset = 0;",
      "right" : "entryOffset = 0;",
      "info" : "ExpressionStatement[9194-9210]:ExpressionStatement[9194-9210]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[9219-9251]:ExpressionStatement[9219-9251]"
    }, {
      "left" : "if (currEntry.isGNULongLinkEntry())",
      "right" : "if (currEntry.isGNULongLinkEntry())",
      "info" : "IfStatement[9261-9650]:IfStatement[9261-9650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9297-9650]:Block[9297-9650]"
    }, {
      "left" : "byte[] longLinkData = getLongNameData();",
      "right" : "byte[] longLinkData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9311-9351]:VariableDeclarationStatement[9311-9351]"
    }, {
      "left" : "if (longLinkData == null)",
      "right" : "if (longLinkData == null)",
      "info" : "IfStatement[9364-9571]:IfStatement[9364-9571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9390-9571]:Block[9390-9571]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9545-9557]:ReturnStatement[9545-9557]"
    }, {
      "left" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "right" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "info" : "ExpressionStatement[9584-9640]:ExpressionStatement[9584-9640]"
    }, {
      "left" : "if (currEntry.isGNULongNameEntry())",
      "right" : "if (currEntry.isGNULongNameEntry())",
      "info" : "IfStatement[9660-10040]:IfStatement[9660-10040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9696-10040]:Block[9696-10040]"
    }, {
      "left" : "byte[] longNameData = getLongNameData();",
      "right" : "byte[] longNameData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9710-9750]:VariableDeclarationStatement[9710-9750]"
    }, {
      "left" : "if (longNameData == null)",
      "right" : "if (longNameData == null)",
      "info" : "IfStatement[9763-9965]:IfStatement[9763-9965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9789-9965]:Block[9789-9965]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9939-9951]:ReturnStatement[9939-9951]"
    }, {
      "left" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "right" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "info" : "ExpressionStatement[9978-10030]:ExpressionStatement[9978-10030]"
    }, {
      "left" : "if (currEntry.isPaxHeader())",
      "right" : "if (currEntry.isPaxHeader())",
      "info" : "IfStatement[10050-10138]:IfStatement[10050-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10078-10138]:Block[10078-10138]"
    }, {
      "left" : "paxHeaders();",
      "right" : "paxHeaders();",
      "info" : "ExpressionStatement[10115-10128]:ExpressionStatement[10115-10128]"
    }, {
      "left" : "if (currEntry.isGNUSparse())",
      "right" : "if (currEntry.isGNUSparse())",
      "info" : "IfStatement[10148-10240]:IfStatement[10148-10240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10176-10240]:Block[10176-10240]"
    }, {
      "left" : "readGNUSparse();",
      "right" : "readGNUSparse();",
      "info" : "ExpressionStatement[10214-10230]:ExpressionStatement[10214-10230]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[10483-10515]:ExpressionStatement[10483-10515]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[10525-10542]:ReturnStatement[10525-10542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10712-10719]:Modifier[10712-10719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10720-10724]:PrimitiveType[10720-10724]"
    }, {
      "left" : "skipRecordPadding",
      "right" : "skipRecordPadding",
      "info" : "SimpleName[10725-10742]:SimpleName[10725-10742]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10752-10763]:SimpleType[10752-10763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10764-11084]:Block[10764-11084]"
    }, {
      "left" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "right" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "info" : "IfStatement[10774-11078]:IfStatement[10774-11078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10839-11078]:Block[10839-11078]"
    }, {
      "left" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "right" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "info" : "VariableDeclarationStatement[10853-10910]:VariableDeclarationStatement[10853-10910]"
    }, {
      "left" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "right" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "info" : "VariableDeclarationStatement[10923-10986]:VariableDeclarationStatement[10923-10986]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, padding);",
      "right" : "long skipped = IOUtils.skip(is, padding);",
      "info" : "VariableDeclarationStatement[10999-11040]:VariableDeclarationStatement[10999-11040]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[11053-11068]:ExpressionStatement[11053-11068]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11285-11294]:Modifier[11285-11294]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[11295-11301]:ArrayType[11295-11301]"
    }, {
      "left" : "getLongNameData",
      "right" : "getLongNameData",
      "info" : "SimpleName[11302-11317]:SimpleName[11302-11317]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11327-11338]:SimpleType[11327-11338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11339-12223]:Block[11339-12223]"
    }, {
      "left" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[11377-11438]:VariableDeclarationStatement[11377-11438]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[11447-11462]:VariableDeclarationStatement[11447-11462]"
    }, {
      "left" : "while ((length = read(SMALL_BUF)) >= 0)",
      "right" : "while ((length = read(SMALL_BUF)) >= 0)",
      "info" : "WhileStatement[11471-11572]:WhileStatement[11471-11572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11511-11572]:Block[11511-11572]"
    }, {
      "left" : "longName.write(SMALL_BUF, 0, length);",
      "right" : "longName.write(SMALL_BUF, 0, length);",
      "info" : "ExpressionStatement[11525-11562]:ExpressionStatement[11525-11562]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[11581-11596]:ExpressionStatement[11581-11596]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[11605-11769]:IfStatement[11605-11769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11628-11769]:Block[11628-11769]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11747-11759]:ReturnStatement[11747-11759]"
    }, {
      "left" : "byte[] longNameData = longName.toByteArray();",
      "right" : "byte[] longNameData = longName.toByteArray();",
      "info" : "VariableDeclarationStatement[11778-11823]:VariableDeclarationStatement[11778-11823]"
    }, {
      "left" : "length = longNameData.length;",
      "right" : "length = longNameData.length;",
      "info" : "ExpressionStatement[11878-11907]:ExpressionStatement[11878-11907]"
    }, {
      "left" : "while (length > 0 && longNameData[length - 1] == 0)",
      "right" : "while (length > 0 && longNameData[length - 1] == 0)",
      "info" : "WhileStatement[11916-12001]:WhileStatement[11916-12001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11968-12001]:Block[11968-12001]"
    }, {
      "left" : "--length;",
      "right" : "--length;",
      "info" : "ExpressionStatement[11982-11991]:ExpressionStatement[11982-11991]"
    }, {
      "left" : "if (length != longNameData.length)",
      "right" : "if (length != longNameData.length)",
      "info" : "IfStatement[12010-12188]:IfStatement[12010-12188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12045-12188]:Block[12045-12188]"
    }, {
      "left" : "byte[] l = new byte[length];",
      "right" : "byte[] l = new byte[length];",
      "info" : "VariableDeclarationStatement[12059-12087]:VariableDeclarationStatement[12059-12087]"
    }, {
      "left" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "right" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "info" : "ExpressionStatement[12100-12148]:ExpressionStatement[12100-12148]"
    }, {
      "left" : "longNameData = l;",
      "right" : "longNameData = l;",
      "info" : "ExpressionStatement[12161-12178]:ExpressionStatement[12161-12178]"
    }, {
      "left" : "return longNameData;",
      "right" : "return longNameData;",
      "info" : "ReturnStatement[12197-12217]:ReturnStatement[12197-12217]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12786-12793]:Modifier[12786-12793]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[12794-12800]:ArrayType[12794-12800]"
    }, {
      "left" : "getRecord",
      "right" : "getRecord",
      "info" : "SimpleName[12801-12810]:SimpleName[12801-12810]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12820-12831]:SimpleType[12820-12831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12832-13122]:Block[12832-13122]"
    }, {
      "left" : "byte[] headerBuf = readRecord();",
      "right" : "byte[] headerBuf = readRecord();",
      "info" : "VariableDeclarationStatement[12842-12874]:VariableDeclarationStatement[12842-12874]"
    }, {
      "left" : "hasHitEOF = isEOFRecord(headerBuf);",
      "right" : "hasHitEOF = isEOFRecord(headerBuf);",
      "info" : "ExpressionStatement[12883-12918]:ExpressionStatement[12883-12918]"
    }, {
      "left" : "if (hasHitEOF && headerBuf != null)",
      "right" : "if (hasHitEOF && headerBuf != null)",
      "info" : "IfStatement[12927-13090]:IfStatement[12927-13090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12963-13090]:Block[12963-13090]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord();",
      "right" : "tryToConsumeSecondEOFRecord();",
      "info" : "ExpressionStatement[12977-13007]:ExpressionStatement[12977-13007]"
    }, {
      "left" : "consumeRemainderOfLastBlock();",
      "right" : "consumeRemainderOfLastBlock();",
      "info" : "ExpressionStatement[13020-13050]:ExpressionStatement[13020-13050]"
    }, {
      "left" : "headerBuf = null;",
      "right" : "headerBuf = null;",
      "info" : "ExpressionStatement[13063-13080]:ExpressionStatement[13063-13080]"
    }, {
      "left" : "return headerBuf;",
      "right" : "return headerBuf;",
      "info" : "ReturnStatement[13099-13116]:ReturnStatement[13099-13116]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13406-13415]:Modifier[13406-13415]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13416-13423]:PrimitiveType[13416-13423]"
    }, {
      "left" : "isEOFRecord",
      "right" : "isEOFRecord",
      "info" : "SimpleName[13424-13435]:SimpleName[13424-13435]"
    }, {
      "left" : "byte[] record",
      "right" : "byte[] record",
      "info" : "SingleVariableDeclaration[13436-13449]:SingleVariableDeclaration[13436-13449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13451-13537]:Block[13451-13537]"
    }, {
      "left" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "right" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "info" : "ReturnStatement[13461-13531]:ReturnStatement[13461-13531]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13730-13739]:Modifier[13730-13739]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[13740-13746]:ArrayType[13740-13746]"
    }, {
      "left" : "readRecord",
      "right" : "readRecord",
      "info" : "SimpleName[13747-13757]:SimpleName[13747-13757]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13767-13778]:SimpleType[13767-13778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13779-14007]:Block[13779-14007]"
    }, {
      "left" : "byte[] record = new byte[recordSize];",
      "right" : "byte[] record = new byte[recordSize];",
      "info" : "VariableDeclarationStatement[13790-13827]:VariableDeclarationStatement[13790-13827]"
    }, {
      "left" : "int readNow = IOUtils.readFully(is, record);",
      "right" : "int readNow = IOUtils.readFully(is, record);",
      "info" : "VariableDeclarationStatement[13837-13881]:VariableDeclarationStatement[13837-13881]"
    }, {
      "left" : "count(readNow);",
      "right" : "count(readNow);",
      "info" : "ExpressionStatement[13890-13905]:ExpressionStatement[13890-13905]"
    }, {
      "left" : "if (readNow != recordSize)",
      "right" : "if (readNow != recordSize)",
      "info" : "IfStatement[13914-13977]:IfStatement[13914-13977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13941-13977]:Block[13941-13977]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13955-13967]:ReturnStatement[13955-13967]"
    }, {
      "left" : "return record;",
      "right" : "return record;",
      "info" : "ReturnStatement[13987-14001]:ReturnStatement[13987-14001]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14013-14020]:Modifier[14013-14020]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14021-14025]:PrimitiveType[14021-14025]"
    }, {
      "left" : "paxHeaders",
      "right" : "paxHeaders",
      "info" : "SimpleName[14026-14036]:SimpleName[14026-14036]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14046-14057]:SimpleType[14046-14057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14057-14226]:Block[14057-14226]"
    }, {
      "left" : "Map<String, String> headers = parsePaxHeaders(this);",
      "right" : "Map<String, String> headers = parsePaxHeaders(this);",
      "info" : "VariableDeclarationStatement[14067-14119]:VariableDeclarationStatement[14067-14119]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[14128-14143]:ExpressionStatement[14128-14143]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(headers);",
      "right" : "applyPaxHeadersToCurrentEntry(headers);",
      "info" : "ExpressionStatement[14181-14220]:ExpressionStatement[14181-14220]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[14232-14251]:ParameterizedType[14232-14251]"
    }, {
      "left" : "parsePaxHeaders",
      "right" : "parsePaxHeaders",
      "info" : "SimpleName[14252-14267]:SimpleName[14252-14267]"
    }, {
      "left" : "InputStream i",
      "right" : "InputStream i",
      "info" : "SingleVariableDeclaration[14268-14281]:SingleVariableDeclaration[14268-14281]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14290-14301]:SimpleType[14290-14301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14302-16290]:Block[14302-16290]"
    }, {
      "left" : "Map<String, String> headers = new HashMap<String, String>();",
      "right" : "Map<String, String> headers = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[14312-14372]:VariableDeclarationStatement[14312-14372]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[14428-16260]:WhileStatement[14428-16260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14439-16260]:Block[14439-16260]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[14467-14474]:VariableDeclarationStatement[14467-14474]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[14487-14499]:VariableDeclarationStatement[14487-14499]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[14512-14525]:VariableDeclarationStatement[14512-14525]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[14538-16179]:WhileStatement[14538-16179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14567-16179]:Block[14567-16179]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[14585-14592]:ExpressionStatement[14585-14592]"
    }, {
      "left" : "if (ch == ' ')",
      "right" : "if (ch == ' ')",
      "info" : "IfStatement[14609-16105]:IfStatement[14609-16105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14623-16105]:Block[14623-16105]"
    }, {
      "left" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[14704-14761]:VariableDeclarationStatement[14704-14761]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[14782-16033]:WhileStatement[14782-16033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14811-16033]:Block[14811-16033]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[14837-14844]:ExpressionStatement[14837-14844]"
    }, {
      "left" : "if (ch == '=')",
      "right" : "if (ch == '=')",
      "info" : "IfStatement[14869-15964]:IfStatement[14869-15964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14883-15964]:Block[14883-15964]"
    }, {
      "left" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "right" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[14931-14982]:VariableDeclarationStatement[14931-14982]"
    }, {
      "left" : "final int restLen = len - read;",
      "right" : "final int restLen = len - read;",
      "info" : "VariableDeclarationStatement[15060-15091]:VariableDeclarationStatement[15060-15091]"
    }, {
      "left" : "byte[] rest = new byte[restLen];",
      "right" : "byte[] rest = new byte[restLen];",
      "info" : "VariableDeclarationStatement[15120-15152]:VariableDeclarationStatement[15120-15152]"
    }, {
      "left" : "int got = IOUtils.readFully(i, rest);",
      "right" : "int got = IOUtils.readFully(i, rest);",
      "info" : "VariableDeclarationStatement[15181-15218]:VariableDeclarationStatement[15181-15218]"
    }, {
      "left" : "if (got != restLen)",
      "right" : "if (got != restLen)",
      "info" : "IfStatement[15247-15647]:IfStatement[15247-15647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15267-15647]:Block[15267-15647]"
    }, {
      "left" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);",
      "right" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);",
      "info" : "ThrowStatement[15301-15617]:ThrowStatement[15301-15617]"
    }, {
      "left" : "String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);",
      "right" : "String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[15724-15846]:VariableDeclarationStatement[15724-15846]"
    }, {
      "left" : "headers.put(keyword, value);",
      "right" : "headers.put(keyword, value);",
      "info" : "ExpressionStatement[15875-15903]:ExpressionStatement[15875-15903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15932-15938]:BreakStatement[15932-15938]"
    }, {
      "left" : "coll.write((byte) ch);",
      "right" : "coll.write((byte) ch);",
      "info" : "ExpressionStatement[15989-16011]:ExpressionStatement[15989-16011]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16054-16060]:BreakStatement[16054-16060]"
    }, {
      "left" : "len *= 10;",
      "right" : "len *= 10;",
      "info" : "ExpressionStatement[16122-16132]:ExpressionStatement[16122-16132]"
    }, {
      "left" : "len += ch - '0';",
      "right" : "len += ch - '0';",
      "info" : "ExpressionStatement[16149-16165]:ExpressionStatement[16149-16165]"
    }, {
      "left" : "if (ch == -1)",
      "right" : "if (ch == -1)",
      "info" : "IfStatement[16192-16250]:IfStatement[16192-16250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16205-16250]:Block[16205-16250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16230-16236]:BreakStatement[16230-16236]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[16269-16284]:ReturnStatement[16269-16284]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16296-16303]:Modifier[16296-16303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16304-16308]:PrimitiveType[16304-16308]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry",
      "right" : "applyPaxHeadersToCurrentEntry",
      "info" : "SimpleName[16309-16338]:SimpleName[16309-16338]"
    }, {
      "left" : "Map<String, String> headers",
      "right" : "Map<String, String> headers",
      "info" : "SingleVariableDeclaration[16339-16366]:SingleVariableDeclaration[16339-16366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16368-17919]:Block[16368-17915]"
    }, {
      "left" : "for (Entry<String, String> ent : headers.entrySet())",
      "right" : "for (Entry<String, String> ent : headers.entrySet())",
      "info" : "EnhancedForStatement[16743-17913]:EnhancedForStatement[16743-17909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16795-17913]:Block[16795-17909]"
    }, {
      "left" : "String key = ent.getKey();",
      "right" : "String key = ent.getKey();",
      "info" : "VariableDeclarationStatement[16809-16835]:VariableDeclarationStatement[16809-16835]"
    }, {
      "left" : "String val = ent.getValue();",
      "right" : "String val = ent.getValue();",
      "info" : "VariableDeclarationStatement[16848-16876]:VariableDeclarationStatement[16848-16876]"
    }, {
      "left" : "if (\"path\".equals(key))",
      "right" : "if (\"path\".equals(key))",
      "info" : "IfStatement[16889-17903]:IfStatement[16889-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16912-16967]:Block[16912-16967]"
    }, {
      "left" : "currEntry.setName(val);",
      "right" : "currEntry.setName(val);",
      "info" : "ExpressionStatement[16930-16953]:ExpressionStatement[16930-16953]"
    }, {
      "left" : "if (\"linkpath\".equals(key))",
      "right" : "if (\"linkpath\".equals(key))",
      "info" : "IfStatement[16973-17903]:IfStatement[16973-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17000-17059]:Block[17000-17059]"
    }, {
      "left" : "currEntry.setLinkName(val);",
      "right" : "currEntry.setLinkName(val);",
      "info" : "ExpressionStatement[17018-17045]:ExpressionStatement[17018-17045]"
    }, {
      "left" : "if (\"gid\".equals(key))",
      "right" : "if (\"gid\".equals(key))",
      "info" : "IfStatement[17065-17903]:IfStatement[17065-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17087-17163]:Block[17087-17161]"
    }, {
      "left" : "currEntry.setGroupId(Integer.parseInt(val));",
      "right" : "currEntry.setGroupId(Long.parseLong(val));",
      "info" : "ExpressionStatement[17105-17149]:ExpressionStatement[17105-17147]"
    }, {
      "left" : "if (\"gname\".equals(key))",
      "right" : "if (\"gname\".equals(key))",
      "info" : "IfStatement[17169-17903]:IfStatement[17167-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17193-17253]:Block[17191-17251]"
    }, {
      "left" : "currEntry.setGroupName(val);",
      "right" : "currEntry.setGroupName(val);",
      "info" : "ExpressionStatement[17211-17239]:ExpressionStatement[17209-17237]"
    }, {
      "left" : "if (\"uid\".equals(key))",
      "right" : "if (\"uid\".equals(key))",
      "info" : "IfStatement[17259-17903]:IfStatement[17257-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17281-17356]:Block[17279-17352]"
    }, {
      "left" : "currEntry.setUserId(Integer.parseInt(val));",
      "right" : "currEntry.setUserId(Long.parseLong(val));",
      "info" : "ExpressionStatement[17299-17342]:ExpressionStatement[17297-17338]"
    }, {
      "left" : "if (\"uname\".equals(key))",
      "right" : "if (\"uname\".equals(key))",
      "info" : "IfStatement[17362-17903]:IfStatement[17358-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17386-17445]:Block[17382-17441]"
    }, {
      "left" : "currEntry.setUserName(val);",
      "right" : "currEntry.setUserName(val);",
      "info" : "ExpressionStatement[17404-17431]:ExpressionStatement[17400-17427]"
    }, {
      "left" : "if (\"size\".equals(key))",
      "right" : "if (\"size\".equals(key))",
      "info" : "IfStatement[17451-17903]:IfStatement[17447-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17474-17545]:Block[17470-17541]"
    }, {
      "left" : "currEntry.setSize(Long.parseLong(val));",
      "right" : "currEntry.setSize(Long.parseLong(val));",
      "info" : "ExpressionStatement[17492-17531]:ExpressionStatement[17488-17527]"
    }, {
      "left" : "if (\"mtime\".equals(key))",
      "right" : "if (\"mtime\".equals(key))",
      "info" : "IfStatement[17551-17903]:IfStatement[17547-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17575-17669]:Block[17571-17665]"
    }, {
      "left" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "right" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "info" : "ExpressionStatement[17593-17655]:ExpressionStatement[17589-17651]"
    }, {
      "left" : "if (\"SCHILY.devminor\".equals(key))",
      "right" : "if (\"SCHILY.devminor\".equals(key))",
      "info" : "IfStatement[17675-17903]:IfStatement[17671-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17709-17786]:Block[17705-17782]"
    }, {
      "left" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17727-17772]:ExpressionStatement[17723-17768]"
    }, {
      "left" : "if (\"SCHILY.devmajor\".equals(key))",
      "right" : "if (\"SCHILY.devmajor\".equals(key))",
      "info" : "IfStatement[17792-17903]:IfStatement[17788-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17826-17903]:Block[17822-17899]"
    }, {
      "left" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17844-17889]:ExpressionStatement[17840-17885]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18198-18205]:Modifier[18194-18201]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18206-18210]:PrimitiveType[18202-18206]"
    }, {
      "left" : "readGNUSparse",
      "right" : "readGNUSparse",
      "info" : "SimpleName[18211-18224]:SimpleName[18207-18220]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18234-18245]:SimpleType[18230-18241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18246-18914]:Block[18242-18910]"
    }, {
      "left" : "if (currEntry.isExtended())",
      "right" : "if (currEntry.isExtended())",
      "info" : "IfStatement[18403-18908]:IfStatement[18399-18904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18431-18908]:Block[18427-18904]"
    }, {
      "left" : "TarArchiveSparseEntry entry;",
      "right" : "TarArchiveSparseEntry entry;",
      "info" : "VariableDeclarationStatement[18445-18473]:VariableDeclarationStatement[18441-18469]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[18486-18898]:DoStatement[18482-18894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18489-18870]:Block[18485-18866]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[18507-18538]:VariableDeclarationStatement[18503-18534]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[18555-18662]:IfStatement[18551-18658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18578-18662]:Block[18574-18658]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[18600-18617]:ExpressionStatement[18596-18613]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18638-18644]:BreakStatement[18634-18640]"
    }, {
      "left" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "right" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "info" : "ExpressionStatement[18679-18724]:ExpressionStatement[18675-18720]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19151-19160]:MarkerAnnotation[19147-19156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19165-19171]:Modifier[19161-19167]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[19172-19184]:SimpleType[19168-19180]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[19185-19197]:SimpleName[19181-19193]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19207-19218]:SimpleType[19203-19214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19219-19260]:Block[19215-19256]"
    }, {
      "left" : "return getNextTarEntry();",
      "right" : "return getNextTarEntry();",
      "info" : "ReturnStatement[19229-19254]:ReturnStatement[19225-19250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19750-19757]:Modifier[19746-19753]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19758-19762]:PrimitiveType[19754-19758]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord",
      "right" : "tryToConsumeSecondEOFRecord",
      "info" : "SimpleName[19763-19790]:SimpleName[19759-19786]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19800-19811]:SimpleType[19796-19807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19812-20188]:Block[19808-20184]"
    }, {
      "left" : "boolean shouldReset = true;",
      "right" : "boolean shouldReset = true;",
      "info" : "VariableDeclarationStatement[19822-19849]:VariableDeclarationStatement[19818-19845]"
    }, {
      "left" : "boolean marked = is.markSupported();",
      "right" : "boolean marked = is.markSupported();",
      "info" : "VariableDeclarationStatement[19858-19894]:VariableDeclarationStatement[19854-19890]"
    }, {
      "left" : "if (marked)",
      "right" : "if (marked)",
      "info" : "IfStatement[19903-19959]:IfStatement[19899-19955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19915-19959]:Block[19911-19955]"
    }, {
      "left" : "is.mark(recordSize);",
      "right" : "is.mark(recordSize);",
      "info" : "ExpressionStatement[19929-19949]:ExpressionStatement[19925-19945]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19968-20182]:TryStatement[19964-20178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19972-20037]:Block[19968-20033]"
    }, {
      "left" : "shouldReset = !isEOFRecord(readRecord());",
      "right" : "shouldReset = !isEOFRecord(readRecord());",
      "info" : "ExpressionStatement[19986-20027]:ExpressionStatement[19982-20023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20046-20182]:Block[20042-20178]"
    }, {
      "left" : "if (shouldReset && marked)",
      "right" : "if (shouldReset && marked)",
      "info" : "IfStatement[20060-20172]:IfStatement[20056-20168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20087-20172]:Block[20083-20168]"
    }, {
      "left" : "pushedBackBytes(recordSize);",
      "right" : "pushedBackBytes(recordSize);",
      "info" : "ExpressionStatement[20105-20133]:ExpressionStatement[20101-20129]"
    }, {
      "left" : "is.reset();",
      "right" : "is.reset();",
      "info" : "ExpressionStatement[20147-20158]:ExpressionStatement[20143-20154]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20711-20720]:MarkerAnnotation[20707-20716]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20725-20731]:Modifier[20721-20727]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20732-20735]:PrimitiveType[20728-20731]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20736-20740]:SimpleName[20732-20736]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[20741-20751]:SingleVariableDeclaration[20737-20747]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[20753-20763]:SingleVariableDeclaration[20749-20759]"
    }, {
      "left" : "int numToRead",
      "right" : "int numToRead",
      "info" : "SingleVariableDeclaration[20765-20778]:SingleVariableDeclaration[20761-20774]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20787-20798]:SimpleType[20783-20794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20799-21450]:Block[20795-21446]"
    }, {
      "left" : "int totalRead = 0;",
      "right" : "int totalRead = 0;",
      "info" : "VariableDeclarationStatement[20806-20824]:VariableDeclarationStatement[20802-20820]"
    }, {
      "left" : "if (hasHitEOF || entryOffset >= entrySize)",
      "right" : "if (hasHitEOF || entryOffset >= entrySize)",
      "info" : "IfStatement[20834-20911]:IfStatement[20830-20907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20877-20911]:Block[20873-20907]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[20891-20901]:ReturnStatement[20887-20897]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[20921-21024]:IfStatement[20917-21020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20944-21024]:Block[20940-21020]"
    }, {
      "left" : "throw new IllegalStateException(\"No current tar entry\");",
      "right" : "throw new IllegalStateException(\"No current tar entry\");",
      "info" : "ThrowStatement[20958-21014]:ThrowStatement[20954-21010]"
    }, {
      "left" : "numToRead = Math.min(numToRead, available());",
      "right" : "numToRead = Math.min(numToRead, available());",
      "info" : "ExpressionStatement[21034-21079]:ExpressionStatement[21030-21075]"
    }, {
      "left" : "totalRead = is.read(buf, offset, numToRead);",
      "right" : "totalRead = is.read(buf, offset, numToRead);",
      "info" : "ExpressionStatement[21097-21141]:ExpressionStatement[21093-21137]"
    }, {
      "left" : "if (totalRead == -1)",
      "right" : "if (totalRead == -1)",
      "info" : "IfStatement[21159-21417]:IfStatement[21155-21413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21180-21332]:Block[21176-21328]"
    }, {
      "left" : "if (numToRead > 0)",
      "right" : "if (numToRead > 0)",
      "info" : "IfStatement[21194-21292]:IfStatement[21190-21288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21213-21292]:Block[21209-21288]"
    }, {
      "left" : "throw new IOException(\"Truncated TAR archive\");",
      "right" : "throw new IOException(\"Truncated TAR archive\");",
      "info" : "ThrowStatement[21231-21278]:ThrowStatement[21227-21274]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[21305-21322]:ExpressionStatement[21301-21318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21338-21417]:Block[21334-21413]"
    }, {
      "left" : "count(totalRead);",
      "right" : "count(totalRead);",
      "info" : "ExpressionStatement[21352-21369]:ExpressionStatement[21348-21365]"
    }, {
      "left" : "entryOffset += totalRead;",
      "right" : "entryOffset += totalRead;",
      "info" : "ExpressionStatement[21382-21407]:ExpressionStatement[21378-21403]"
    }, {
      "left" : "return totalRead;",
      "right" : "return totalRead;",
      "info" : "ReturnStatement[21427-21444]:ReturnStatement[21423-21440]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21608-21617]:MarkerAnnotation[21604-21613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21622-21628]:Modifier[21618-21624]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21629-21636]:PrimitiveType[21625-21632]"
    }, {
      "left" : "canReadEntryData",
      "right" : "canReadEntryData",
      "info" : "SimpleName[21637-21653]:SimpleName[21633-21649]"
    }, {
      "left" : "ArchiveEntry ae",
      "right" : "ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[21654-21669]:SingleVariableDeclaration[21650-21665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21671-21848]:Block[21667-21844]"
    }, {
      "left" : "if (ae instanceof TarArchiveEntry)",
      "right" : "if (ae instanceof TarArchiveEntry)",
      "info" : "IfStatement[21681-21820]:IfStatement[21677-21816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21716-21820]:Block[21712-21816]"
    }, {
      "left" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "right" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[21730-21772]:VariableDeclarationStatement[21726-21768]"
    }, {
      "left" : "return !te.isGNUSparse();",
      "right" : "return !te.isGNUSparse();",
      "info" : "ReturnStatement[21785-21810]:ReturnStatement[21781-21806]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21829-21842]:ReturnStatement[21825-21838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21997-22003]:Modifier[21993-21999]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[22004-22019]:SimpleType[22000-22015]"
    }, {
      "left" : "getCurrentEntry",
      "right" : "getCurrentEntry",
      "info" : "SimpleName[22020-22035]:SimpleName[22016-22031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22038-22071]:Block[22034-22067]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[22048-22065]:ReturnStatement[22044-22061]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22077-22086]:Modifier[22073-22082]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22087-22092]:Modifier[22083-22088]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22093-22097]:PrimitiveType[22089-22093]"
    }, {
      "left" : "setCurrentEntry",
      "right" : "setCurrentEntry",
      "info" : "SimpleName[22098-22113]:SimpleName[22094-22109]"
    }, {
      "left" : "TarArchiveEntry e",
      "right" : "TarArchiveEntry e",
      "info" : "SingleVariableDeclaration[22114-22131]:SingleVariableDeclaration[22110-22127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22133-22163]:Block[22129-22159]"
    }, {
      "left" : "currEntry = e;",
      "right" : "currEntry = e;",
      "info" : "ExpressionStatement[22143-22157]:ExpressionStatement[22139-22153]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22169-22178]:Modifier[22165-22174]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22179-22184]:Modifier[22175-22180]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22185-22192]:PrimitiveType[22181-22188]"
    }, {
      "left" : "isAtEOF",
      "right" : "isAtEOF",
      "info" : "SimpleName[22193-22200]:SimpleName[22189-22196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22203-22236]:Block[22199-22232]"
    }, {
      "left" : "return hasHitEOF;",
      "right" : "return hasHitEOF;",
      "info" : "ReturnStatement[22213-22230]:ReturnStatement[22209-22226]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22242-22251]:Modifier[22238-22247]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22252-22257]:Modifier[22248-22253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22258-22262]:PrimitiveType[22254-22258]"
    }, {
      "left" : "setAtEOF",
      "right" : "setAtEOF",
      "info" : "SimpleName[22263-22271]:SimpleName[22259-22267]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[22272-22281]:SingleVariableDeclaration[22268-22277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22283-22313]:Block[22279-22309]"
    }, {
      "left" : "hasHitEOF = b;",
      "right" : "hasHitEOF = b;",
      "info" : "ExpressionStatement[22293-22307]:ExpressionStatement[22289-22303]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22539-22546]:Modifier[22535-22542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22547-22551]:PrimitiveType[22543-22547]"
    }, {
      "left" : "consumeRemainderOfLastBlock",
      "right" : "consumeRemainderOfLastBlock",
      "info" : "SimpleName[22552-22579]:SimpleName[22548-22575]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22589-22600]:SimpleType[22585-22596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22601-22829]:Block[22597-22825]"
    }, {
      "left" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "right" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "info" : "VariableDeclarationStatement[22611-22666]:VariableDeclarationStatement[22607-22662]"
    }, {
      "left" : "if (bytesReadOfLastBlock > 0)",
      "right" : "if (bytesReadOfLastBlock > 0)",
      "info" : "IfStatement[22675-22823]:IfStatement[22671-22819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22705-22823]:Block[22701-22819]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "right" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "info" : "VariableDeclarationStatement[22719-22785]:VariableDeclarationStatement[22715-22781]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[22798-22813]:ExpressionStatement[22794-22809]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23136-23142]:Modifier[23132-23138]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23143-23149]:Modifier[23139-23145]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23150-23157]:PrimitiveType[23146-23153]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[23158-23165]:SimpleName[23154-23161]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[23166-23182]:SingleVariableDeclaration[23162-23178]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[23184-23194]:SingleVariableDeclaration[23180-23190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23196-24679]:Block[23192-24675]"
    }, {
      "left" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "right" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "info" : "IfStatement[23206-23309]:IfStatement[23202-23305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23272-23309]:Block[23268-23305]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23286-23299]:ReturnStatement[23282-23295]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[23319-23675]:IfStatement[23315-23671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23639-23675]:Block[23635-23671]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23653-23665]:ReturnStatement[23649-23661]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "info" : "IfStatement[23684-24240]:IfStatement[23680-24236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24204-24240]:Block[24200-24236]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24218-24230]:ReturnStatement[24214-24226]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[24299-24651]:IfStatement[24295-24647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24615-24651]:Block[24611-24647]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24629-24641]:ReturnStatement[24625-24637]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24660-24673]:ReturnStatement[24656-24669]"
    } ]
  },
  "interFileMappings" : { }
}