{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PBDMMapSegment",
      "right" : "PBDMMapSegment",
      "info" : "TypeDeclaration[1306-12629]:TypeDeclaration[1306-12961]"
    }, {
      "left" : "private static final VoltLogger LOG = new VoltLogger(\"HOST\");",
      "right" : "private static final VoltLogger LOG = new VoltLogger(\"HOST\");",
      "info" : "FieldDeclaration[1694-1755]:FieldDeclaration[1694-1755]"
    }, {
      "left" : "private boolean m_syncedSinceLastEdit;",
      "right" : "private boolean m_syncedSinceLastEdit;",
      "info" : "FieldDeclaration[1804-1842]:FieldDeclaration[1804-1842]"
    }, {
      "left" : "final File m_file;",
      "right" : "final File m_file;",
      "info" : "FieldDeclaration[1847-1865]:FieldDeclaration[1847-1865]"
    }, {
      "left" : "private RandomAccessFile m_ras;",
      "right" : "private RandomAccessFile m_ras;",
      "info" : "FieldDeclaration[1870-1901]:FieldDeclaration[1870-1901]"
    }, {
      "left" : "private FileChannel m_fc;",
      "right" : "private FileChannel m_fc;",
      "info" : "FieldDeclaration[1906-1931]:FieldDeclaration[1906-1931]"
    }, {
      "left" : "private MBBContainer m_buf;",
      "right" : "private MBBContainer m_buf;",
      "info" : "FieldDeclaration[1936-1963]:FieldDeclaration[1936-1963]"
    }, {
      "left" : "private ByteBuffer m_readBuf;",
      "right" : "private ByteBuffer m_readBuf;",
      "info" : "FieldDeclaration[1968-1997]:FieldDeclaration[1968-1997]"
    }, {
      "left" : "private boolean m_haveMAdvised;",
      "right" : "private boolean m_haveMAdvised;",
      "info" : "FieldDeclaration[2097-2128]:FieldDeclaration[2097-2128]"
    }, {
      "left" : "int m_objectReadIndex;",
      "right" : "int m_objectReadIndex;",
      "info" : "FieldDeclaration[2297-2319]:FieldDeclaration[2297-2319]"
    }, {
      "left" : "private int m_bytesRead;",
      "right" : "private int m_bytesRead;",
      "info" : "FieldDeclaration[2324-2348]:FieldDeclaration[2324-2348]"
    }, {
      "left" : "private final Long m_index;",
      "right" : "private final Long m_index;",
      "info" : "FieldDeclaration[2379-2406]:FieldDeclaration[2379-2406]"
    }, {
      "left" : "private boolean m_closed = true;",
      "right" : "private boolean m_closed = true;",
      "info" : "FieldDeclaration[2412-2444]:FieldDeclaration[2412-2444]"
    }, {
      "left" : "private int m_discardCount;",
      "right" : "private int m_discardCount;",
      "info" : "FieldDeclaration[2590-2617]:FieldDeclaration[2590-2617]"
    }, {
      "left" : "public PBDMMapSegment(Long index, File file)",
      "right" : "public PBDMMapSegment(Long index, File file)",
      "info" : "MethodDeclaration[2623-2874]:MethodDeclaration[2623-2874]"
    }, {
      "left" : "public long segmentId()",
      "right" : "public long segmentId()",
      "info" : "MethodDeclaration[2880-2949]:MethodDeclaration[2880-2949]"
    }, {
      "left" : "public File file()",
      "right" : "public File file()",
      "info" : "MethodDeclaration[2955-3018]:MethodDeclaration[2955-3018]"
    }, {
      "left" : "public void reset()",
      "right" : "public void reset()",
      "info" : "MethodDeclaration[3024-3219]:MethodDeclaration[3024-3219]"
    }, {
      "left" : "public int getNumEntries() throws IOException",
      "right" : "public int getNumEntries() throws IOException",
      "info" : "MethodDeclaration[3225-3537]:MethodDeclaration[3225-3501]"
    }, {
      "left" : "public boolean isBeingPolled()",
      "right" : "public boolean isBeingPolled()",
      "info" : "MethodDeclaration[3543-3634]:MethodDeclaration[3507-3598]"
    }, {
      "left" : "public int readIndex()",
      "right" : "public int readIndex()",
      "info" : "MethodDeclaration[3640-3718]:MethodDeclaration[3604-3682]"
    }, {
      "left" : "private void initNumEntries() throws IOException",
      "right" : "private void initNumEntries(int count, int size) throws IOException",
      "info" : "MethodDeclaration[3724-3913]:MethodDeclaration[3688-3903]"
    }, {
      "left" : "private void incrementNumEntries(int size) throws IOException",
      "right" : "private void incrementNumEntries(int size) throws IOException",
      "info" : "MethodDeclaration[3919-4239]:MethodDeclaration[3909-4229]"
    }, {
      "left" : "public void open(boolean forWrite) throws IOException",
      "right" : "private void open(boolean forWrite, boolean truncate) throws IOException",
      "info" : "MethodDeclaration[4245-5423]:MethodDeclaration[4350-5755]"
    }, {
      "left" : "public void closeAndDelete() throws IOException",
      "right" : "public void closeAndDelete() throws IOException",
      "info" : "MethodDeclaration[5429-5688]:MethodDeclaration[5761-6020]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[5694-5766]:MethodDeclaration[6026-6098]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[5772-6158]:MethodDeclaration[6104-6490]"
    }, {
      "left" : "public void sync() throws IOException",
      "right" : "public void sync() throws IOException",
      "info" : "MethodDeclaration[6164-6395]:MethodDeclaration[6496-6727]"
    }, {
      "left" : "public boolean hasMoreEntries() throws IOException",
      "right" : "public boolean hasMoreEntries() throws IOException",
      "info" : "MethodDeclaration[6401-6595]:MethodDeclaration[6733-6927]"
    }, {
      "left" : "public boolean isEmpty() throws IOException",
      "right" : "public boolean isEmpty() throws IOException",
      "info" : "MethodDeclaration[6601-6771]:MethodDeclaration[6933-7103]"
    }, {
      "left" : "public boolean offer(BBContainer cont, boolean compress) throws IOException",
      "right" : "public boolean offer(BBContainer cont, boolean compress) throws IOException",
      "info" : "MethodDeclaration[6777-8431]:MethodDeclaration[7109-8763]"
    }, {
      "left" : "public int offer(DeferredSerialization ds) throws IOException",
      "right" : "public int offer(DeferredSerialization ds) throws IOException",
      "info" : "MethodDeclaration[8437-8877]:MethodDeclaration[8769-9209]"
    }, {
      "left" : "public BBContainer poll(OutputContainerFactory factory) throws IOException",
      "right" : "public BBContainer poll(OutputContainerFactory factory) throws IOException",
      "info" : "MethodDeclaration[8883-12251]:MethodDeclaration[9215-12583]"
    }, {
      "left" : "private boolean m_discarded = false;",
      "right" : "private boolean m_discarded = false;",
      "info" : "FieldDeclaration[11819-11855]:FieldDeclaration[12151-12187]"
    }, {
      "left" : "public void discard()",
      "right" : "public void discard()",
      "info" : "MethodDeclaration[11869-12234]:MethodDeclaration[12201-12566]"
    }, {
      "left" : "public int uncompressedBytesToRead()",
      "right" : "public int uncompressedBytesToRead()",
      "info" : "MethodDeclaration[12436-12627]:MethodDeclaration[12768-12959]"
    } ],
    "mappings" : [
 {
      "left" : "PBDSegment",
      "right" : "PBDSegment",
      "info" : "SimpleType[1677-1687]:SimpleType[1677-1687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2623-2629]:Modifier[2623-2629]"
    }, {
      "left" : "PBDMMapSegment",
      "right" : "PBDMMapSegment",
      "info" : "SimpleName[2630-2644]:SimpleName[2630-2644]"
    }, {
      "left" : "Long index",
      "right" : "Long index",
      "info" : "SingleVariableDeclaration[2645-2655]:SingleVariableDeclaration[2645-2655]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[2657-2666]:SingleVariableDeclaration[2657-2666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2668-2874]:Block[2668-2874]"
    }, {
      "left" : "m_index = index;",
      "right" : "m_index = index;",
      "info" : "ExpressionStatement[2678-2694]:ExpressionStatement[2678-2694]"
    }, {
      "left" : "m_file = file;",
      "right" : "m_file = file;",
      "info" : "ExpressionStatement[2703-2717]:ExpressionStatement[2703-2717]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[2726-2734]:ExpressionStatement[2726-2734]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[2743-2868]:IfStatement[2743-2868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2769-2868]:Block[2769-2868]"
    }, {
      "left" : "LOG.debug(\"Creating Segment: \" + file.getName() + \" At Index: \" + m_index);",
      "right" : "LOG.debug(\"Creating Segment: \" + file.getName() + \" At Index: \" + m_index);",
      "info" : "ExpressionStatement[2783-2858]:ExpressionStatement[2783-2858]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2880-2889]:MarkerAnnotation[2880-2889]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2894-2900]:Modifier[2894-2900]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[2901-2905]:PrimitiveType[2901-2905]"
    }, {
      "left" : "segmentId",
      "right" : "segmentId",
      "info" : "SimpleName[2906-2915]:SimpleName[2906-2915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2918-2949]:Block[2918-2949]"
    }, {
      "left" : "return m_index;",
      "right" : "return m_index;",
      "info" : "ReturnStatement[2928-2943]:ReturnStatement[2928-2943]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2955-2964]:MarkerAnnotation[2955-2964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2969-2975]:Modifier[2969-2975]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[2976-2980]:SimpleType[2976-2980]"
    }, {
      "left" : "file",
      "right" : "file",
      "info" : "SimpleName[2981-2985]:SimpleName[2981-2985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2988-3018]:Block[2988-3018]"
    }, {
      "left" : "return m_file;",
      "right" : "return m_file;",
      "info" : "ReturnStatement[2998-3012]:ReturnStatement[2998-3012]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3024-3033]:MarkerAnnotation[3024-3033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3038-3044]:Modifier[3038-3044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3045-3049]:PrimitiveType[3045-3049]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[3050-3055]:SimpleName[3050-3055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3058-3219]:Block[3058-3219]"
    }, {
      "left" : "m_syncedSinceLastEdit = true;",
      "right" : "m_syncedSinceLastEdit = true;",
      "info" : "ExpressionStatement[3068-3097]:ExpressionStatement[3068-3097]"
    }, {
      "left" : "m_haveMAdvised = false;",
      "right" : "m_haveMAdvised = false;",
      "info" : "ExpressionStatement[3106-3129]:ExpressionStatement[3106-3129]"
    }, {
      "left" : "m_objectReadIndex = 0;",
      "right" : "m_objectReadIndex = 0;",
      "info" : "ExpressionStatement[3138-3160]:ExpressionStatement[3138-3160]"
    }, {
      "left" : "m_bytesRead = 0;",
      "right" : "m_bytesRead = 0;",
      "info" : "ExpressionStatement[3169-3185]:ExpressionStatement[3169-3185]"
    }, {
      "left" : "m_discardCount = 0;",
      "right" : "m_discardCount = 0;",
      "info" : "ExpressionStatement[3194-3213]:ExpressionStatement[3194-3213]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3225-3234]:MarkerAnnotation[3225-3234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3239-3245]:Modifier[3239-3245]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3246-3249]:PrimitiveType[3246-3249]"
    }, {
      "left" : "getNumEntries",
      "right" : "getNumEntries",
      "info" : "SimpleName[3250-3263]:SimpleName[3250-3263]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3273-3284]:SimpleType[3273-3284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3285-3537]:Block[3285-3501]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[3295-3345]:IfStatement[3295-3345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3309-3345]:Block[3309-3345]"
    }, {
      "left" : "open(false);",
      "right" : "open(false);",
      "info" : "ExpressionStatement[3323-3335]:ExpressionStatement[3323-3335]"
    }, {
      "left" : "if (m_fc.size() > SEGMENT_HEADER_BYTES)",
      "right" : "if (m_fc.size() > SEGMENT_HEADER_BYTES)",
      "info" : "IfStatement[3354-3531]:IfStatement[3354-3495]"
    }, {
      "left" : "m_buf.b().getInt(0)",
      "right" : "m_buf.b().getInt(COUNT_OFFSET)",
      "info" : "MethodInvocation[3431-3450]:MethodInvocation[3415-3445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3498-3531]:Block[3462-3495]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[3512-3521]:ReturnStatement[3476-3485]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3543-3552]:MarkerAnnotation[3507-3516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3557-3563]:Modifier[3521-3527]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3564-3571]:PrimitiveType[3528-3535]"
    }, {
      "left" : "isBeingPolled",
      "right" : "isBeingPolled",
      "info" : "SimpleName[3572-3585]:SimpleName[3536-3549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3588-3634]:Block[3552-3598]"
    }, {
      "left" : "return m_objectReadIndex != 0;",
      "right" : "return m_objectReadIndex != 0;",
      "info" : "ReturnStatement[3598-3628]:ReturnStatement[3562-3592]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3640-3649]:MarkerAnnotation[3604-3613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3654-3660]:Modifier[3618-3624]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3661-3664]:PrimitiveType[3625-3628]"
    }, {
      "left" : "readIndex",
      "right" : "readIndex",
      "info" : "SimpleName[3665-3674]:SimpleName[3629-3638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3677-3718]:Block[3641-3682]"
    }, {
      "left" : "return m_objectReadIndex;",
      "right" : "return m_objectReadIndex;",
      "info" : "ReturnStatement[3687-3712]:ReturnStatement[3651-3676]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3724-3731]:Modifier[3688-3695]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3732-3736]:PrimitiveType[3696-3700]"
    }, {
      "left" : "initNumEntries",
      "right" : "initNumEntries",
      "info" : "SimpleName[3737-3751]:SimpleName[3701-3715]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3761-3772]:SimpleType[3744-3755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3773-3913]:Block[3756-3903]"
    }, {
      "left" : "final ByteBuffer buf = m_buf.b();",
      "right" : "final ByteBuffer buf = m_buf.b();",
      "info" : "VariableDeclarationStatement[3783-3816]:VariableDeclarationStatement[3766-3799]"
    }, {
      "left" : "buf",
      "right" : "buf",
      "info" : "METHOD_INVOCATION_RECEIVER[3825-3828]:METHOD_INVOCATION_RECEIVER[3808-3811]"
    }, {
      "left" : "buf.putInt(4, 0);",
      "right" : "buf.putInt(4, size);",
      "info" : "ExpressionStatement[3851-3868]:ExpressionStatement[3838-3858]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[3877-3907]:ExpressionStatement[3867-3897]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3919-3926]:Modifier[3909-3916]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3927-3931]:PrimitiveType[3917-3921]"
    }, {
      "left" : "incrementNumEntries",
      "right" : "incrementNumEntries",
      "info" : "SimpleName[3932-3951]:SimpleName[3922-3941]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[3952-3960]:SingleVariableDeclaration[3942-3950]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3969-3980]:SimpleType[3959-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3981-4239]:Block[3971-4229]"
    }, {
      "left" : "final ByteBuffer buf = m_buf.b();",
      "right" : "final ByteBuffer buf = m_buf.b();",
      "info" : "VariableDeclarationStatement[3991-4024]:VariableDeclarationStatement[3981-4014]"
    }, {
      "left" : "buf.putInt(COUNT_OFFSET, buf.getInt(COUNT_OFFSET) + 1);",
      "right" : "buf.putInt(COUNT_OFFSET, buf.getInt(COUNT_OFFSET) + 1);",
      "info" : "ExpressionStatement[4074-4129]:ExpressionStatement[4064-4119]"
    }, {
      "left" : "buf.putInt(SIZE_OFFSET, buf.getInt(SIZE_OFFSET) + size);",
      "right" : "buf.putInt(SIZE_OFFSET, buf.getInt(SIZE_OFFSET) + size);",
      "info" : "ExpressionStatement[4138-4194]:ExpressionStatement[4128-4184]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[4203-4233]:ExpressionStatement[4193-4223]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4245-4254]:MarkerAnnotation[4235-4244]"
    }, {
      "left" : "public",
      "right" : "private",
      "info" : "Modifier[4259-4265]:Modifier[4522-4529]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4266-4270]:PrimitiveType[4530-4534]"
    }, {
      "left" : "open",
      "right" : "open",
      "info" : "SimpleName[4271-4275]:SimpleName[4535-4539]"
    }, {
      "left" : "boolean forWrite",
      "right" : "boolean forWrite",
      "info" : "SingleVariableDeclaration[4276-4292]:SingleVariableDeclaration[4540-4556]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4301-4312]:SimpleType[4583-4594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4313-5423]:Block[4595-5755]"
    }, {
      "left" : "if (!m_closed)",
      "right" : "if (!m_closed)",
      "info" : "IfStatement[4323-4413]:IfStatement[4605-4695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4338-4413]:Block[4620-4695]"
    }, {
      "left" : "throw new IOException(\"Segment is already opened\");",
      "right" : "throw new IOException(\"Segment is already opened\");",
      "info" : "ThrowStatement[4352-4403]:ThrowStatement[4634-4685]"
    }, {
      "left" : "if (!m_file.exists())",
      "right" : "if (!m_file.exists())",
      "info" : "IfStatement[4423-4499]:IfStatement[4705-4781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4445-4499]:Block[4727-4781]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[4459-4489]:ExpressionStatement[4741-4771]"
    }, {
      "left" : "assert(m_ras == null);",
      "right" : "assert(m_ras == null);",
      "info" : "AssertStatement[4508-4530]:AssertStatement[4790-4812]"
    }, {
      "left" : "m_ras = new RandomAccessFile(m_file, \"rw\");",
      "right" : "m_ras = new RandomAccessFile(m_file, \"rw\");",
      "info" : "ExpressionStatement[4539-4582]:ExpressionStatement[4821-4864]"
    }, {
      "left" : "m_fc = m_ras.getChannel();",
      "right" : "m_fc = m_ras.getChannel();",
      "info" : "ExpressionStatement[4591-4617]:ExpressionStatement[4873-4899]"
    }, {
      "left" : "if (forWrite)",
      "right" : "if (forWrite)",
      "info" : "IfStatement[4627-5390]:IfStatement[4909-5722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4641-4959]:Block[4923-5291]"
    }, {
      "left" : "m_buf = DBBPool.wrapMBB(m_fc.map(MapMode.READ_WRITE, 0, CHUNK_SIZE));",
      "right" : "m_buf = DBBPool.wrapMBB(m_fc.map(MapMode.READ_WRITE, 0, CHUNK_SIZE));",
      "info" : "ExpressionStatement[4754-4823]:ExpressionStatement[5036-5105]"
    }, {
      "left" : "m_buf.b().position(SIZE_OFFSET + 4);",
      "right" : "m_buf.b().position(SIZE_OFFSET + 4);",
      "info" : "ExpressionStatement[4836-4872]:ExpressionStatement[5118-5154]"
    }, {
      "left" : "m_readBuf = m_buf.b().duplicate();",
      "right" : "m_readBuf = m_buf.b().duplicate();",
      "info" : "ExpressionStatement[4885-4919]:ExpressionStatement[5167-5201]"
    }, {
      "left" : "initNumEntries()",
      "right" : "initNumEntries",
      "info" : "MethodInvocation[4932-4948]:SimpleName[5246-5260]"
    }, {
      "left" : "initNumEntries();",
      "right" : "initNumEntries(0, 0);",
      "info" : "ExpressionStatement[4932-4949]:ExpressionStatement[5246-5267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4965-5390]:Block[5297-5722]"
    }, {
      "left" : "final long size = m_fc.size();",
      "right" : "final long size = m_fc.size();",
      "info" : "VariableDeclarationStatement[5135-5165]:VariableDeclarationStatement[5467-5497]"
    }, {
      "left" : "m_buf = DBBPool.wrapMBB(m_fc.map(MapMode.READ_ONLY, 0, size));",
      "right" : "m_buf = DBBPool.wrapMBB(m_fc.map(MapMode.READ_ONLY, 0, size));",
      "info" : "ExpressionStatement[5178-5240]:ExpressionStatement[5510-5572]"
    }, {
      "left" : "m_readBuf = m_buf.b().duplicate();",
      "right" : "m_readBuf = m_buf.b().duplicate();",
      "info" : "ExpressionStatement[5253-5287]:ExpressionStatement[5585-5619]"
    }, {
      "left" : "m_buf.b().position((int) size);",
      "right" : "m_buf.b().position((int) size);",
      "info" : "ExpressionStatement[5300-5331]:ExpressionStatement[5632-5663]"
    }, {
      "left" : "m_readBuf.position(SIZE_OFFSET + 4);",
      "right" : "m_readBuf.position(SIZE_OFFSET + 4);",
      "info" : "ExpressionStatement[5344-5380]:ExpressionStatement[5676-5712]"
    }, {
      "left" : "m_closed = false;",
      "right" : "m_closed = false;",
      "info" : "ExpressionStatement[5400-5417]:ExpressionStatement[5732-5749]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5429-5438]:MarkerAnnotation[5761-5770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5443-5449]:Modifier[5775-5781]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5450-5454]:PrimitiveType[5782-5786]"
    }, {
      "left" : "closeAndDelete",
      "right" : "closeAndDelete",
      "info" : "SimpleName[5455-5469]:SimpleName[5787-5801]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5479-5490]:SimpleType[5811-5822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5491-5688]:Block[5823-6020]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[5501-5509]:ExpressionStatement[5833-5841]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[5518-5657]:IfStatement[5850-5989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5544-5657]:Block[5876-5989]"
    }, {
      "left" : "LOG.debug(\"Deleting segment at Index \" + m_index + \" File: \" + m_file.getAbsolutePath());",
      "right" : "LOG.debug(\"Deleting segment at Index \" + m_index + \" File: \" + m_file.getAbsolutePath());",
      "info" : "ExpressionStatement[5558-5647]:ExpressionStatement[5890-5979]"
    }, {
      "left" : "m_file.delete();",
      "right" : "m_file.delete();",
      "info" : "ExpressionStatement[5666-5682]:ExpressionStatement[5998-6014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5694-5703]:MarkerAnnotation[6026-6035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5708-5714]:Modifier[6040-6046]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5715-5722]:PrimitiveType[6047-6054]"
    }, {
      "left" : "isClosed",
      "right" : "isClosed",
      "info" : "SimpleName[5723-5731]:SimpleName[6055-6063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5734-5766]:Block[6066-6098]"
    }, {
      "left" : "return m_closed;",
      "right" : "return m_closed;",
      "info" : "ReturnStatement[5744-5760]:ReturnStatement[6076-6092]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5772-5781]:MarkerAnnotation[6104-6113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5786-5792]:Modifier[6118-6124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5793-5797]:PrimitiveType[6125-6129]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5798-5803]:SimpleName[6130-6135]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5813-5824]:SimpleType[6145-6156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5825-6158]:Block[6157-6490]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5835-6152]:TryStatement[6167-6484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5839-6082]:Block[6171-6414]"
    }, {
      "left" : "if (m_fc != null)",
      "right" : "if (m_fc != null)",
      "info" : "IfStatement[5853-6072]:IfStatement[6185-6404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5871-6072]:Block[6203-6404]"
    }, {
      "left" : "m_fc.close();",
      "right" : "m_fc.close();",
      "info" : "ExpressionStatement[5889-5902]:ExpressionStatement[6221-6234]"
    }, {
      "left" : "m_ras = null;",
      "right" : "m_ras = null;",
      "info" : "ExpressionStatement[5919-5932]:ExpressionStatement[6251-6264]"
    }, {
      "left" : "m_fc = null;",
      "right" : "m_fc = null;",
      "info" : "ExpressionStatement[5949-5961]:ExpressionStatement[6281-6293]"
    }, {
      "left" : "m_buf.discard();",
      "right" : "m_buf.discard();",
      "info" : "ExpressionStatement[5978-5994]:ExpressionStatement[6310-6326]"
    }, {
      "left" : "m_buf = null;",
      "right" : "m_buf = null;",
      "info" : "ExpressionStatement[6011-6024]:ExpressionStatement[6343-6356]"
    }, {
      "left" : "m_readBuf = null;",
      "right" : "m_readBuf = null;",
      "info" : "ExpressionStatement[6041-6058]:ExpressionStatement[6373-6390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6091-6152]:Block[6423-6484]"
    }, {
      "left" : "m_closed = true;",
      "right" : "m_closed = true;",
      "info" : "ExpressionStatement[6105-6121]:ExpressionStatement[6437-6453]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[6134-6142]:ExpressionStatement[6466-6474]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6164-6173]:MarkerAnnotation[6496-6505]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6178-6184]:Modifier[6510-6516]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6185-6189]:PrimitiveType[6517-6521]"
    }, {
      "left" : "sync",
      "right" : "sync",
      "info" : "SimpleName[6190-6194]:SimpleName[6522-6526]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6204-6215]:SimpleType[6536-6547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6216-6395]:Block[6548-6727]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6226-6272]:IfStatement[6558-6604]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[6240-6272]:ThrowStatement[6572-6604]"
    }, {
      "left" : "if (!m_syncedSinceLastEdit)",
      "right" : "if (!m_syncedSinceLastEdit)",
      "info" : "IfStatement[6281-6351]:IfStatement[6613-6683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6309-6351]:Block[6641-6683]"
    }, {
      "left" : "m_buf.b().force();",
      "right" : "m_buf.b().force();",
      "info" : "ExpressionStatement[6323-6341]:ExpressionStatement[6655-6673]"
    }, {
      "left" : "m_syncedSinceLastEdit = true;",
      "right" : "m_syncedSinceLastEdit = true;",
      "info" : "ExpressionStatement[6360-6389]:ExpressionStatement[6692-6721]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6401-6410]:MarkerAnnotation[6733-6742]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6415-6421]:Modifier[6747-6753]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6422-6429]:PrimitiveType[6754-6761]"
    }, {
      "left" : "hasMoreEntries",
      "right" : "hasMoreEntries",
      "info" : "SimpleName[6430-6444]:SimpleName[6762-6776]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6454-6465]:SimpleType[6786-6797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6466-6595]:Block[6798-6927]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6476-6522]:IfStatement[6808-6854]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[6490-6522]:ThrowStatement[6822-6854]"
    }, {
      "left" : "return m_objectReadIndex < m_buf.b().getInt(COUNT_OFFSET);",
      "right" : "return m_objectReadIndex < m_buf.b().getInt(COUNT_OFFSET);",
      "info" : "ReturnStatement[6531-6589]:ReturnStatement[6863-6921]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6601-6610]:MarkerAnnotation[6933-6942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6615-6621]:Modifier[6947-6953]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6622-6629]:PrimitiveType[6954-6961]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[6630-6637]:SimpleName[6962-6969]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6647-6658]:SimpleType[6979-6990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6659-6771]:Block[6991-7103]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6669-6715]:IfStatement[7001-7047]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[6683-6715]:ThrowStatement[7015-7047]"
    }, {
      "left" : "return m_discardCount == getNumEntries();",
      "right" : "return m_discardCount == getNumEntries();",
      "info" : "ReturnStatement[6724-6765]:ReturnStatement[7056-7097]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6777-6786]:MarkerAnnotation[7109-7118]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6791-6797]:Modifier[7123-7129]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6798-6805]:PrimitiveType[7130-7137]"
    }, {
      "left" : "offer",
      "right" : "offer",
      "info" : "SimpleName[6806-6811]:SimpleName[7138-7143]"
    }, {
      "left" : "BBContainer cont",
      "right" : "BBContainer cont",
      "info" : "SingleVariableDeclaration[6812-6828]:SingleVariableDeclaration[7144-7160]"
    }, {
      "left" : "boolean compress",
      "right" : "boolean compress",
      "info" : "SingleVariableDeclaration[6830-6846]:SingleVariableDeclaration[7162-7178]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6855-6866]:SimpleType[7187-7198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6867-8431]:Block[7199-8763]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[6877-6923]:IfStatement[7209-7255]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[6891-6923]:ThrowStatement[7223-7255]"
    }, {
      "left" : "final ByteBuffer buf = cont.b();",
      "right" : "final ByteBuffer buf = cont.b();",
      "info" : "VariableDeclarationStatement[6932-6964]:VariableDeclarationStatement[7264-7296]"
    }, {
      "left" : "final int remaining = buf.remaining();",
      "right" : "final int remaining = buf.remaining();",
      "info" : "VariableDeclarationStatement[6973-7011]:VariableDeclarationStatement[7305-7343]"
    }, {
      "left" : "if (remaining < 32 || !buf.isDirect())",
      "right" : "if (remaining < 32 || !buf.isDirect())",
      "info" : "IfStatement[7020-7076]:IfStatement[7352-7408]"
    }, {
      "left" : "compress = false;",
      "right" : "compress = false;",
      "info" : "ExpressionStatement[7059-7076]:ExpressionStatement[7391-7408]"
    }, {
      "left" : "final int maxCompressedSize = compress ? Snappy.maxCompressedLength(remaining) : remaining;",
      "right" : "final int maxCompressedSize = compress ? Snappy.maxCompressedLength(remaining) : remaining;",
      "info" : "VariableDeclarationStatement[7085-7176]:VariableDeclarationStatement[7417-7508]"
    }, {
      "left" : "final ByteBuffer mbuf = m_buf.b();",
      "right" : "final ByteBuffer mbuf = m_buf.b();",
      "info" : "VariableDeclarationStatement[7185-7219]:VariableDeclarationStatement[7517-7551]"
    }, {
      "left" : "if (mbuf.remaining() < maxCompressedSize + OBJECT_HEADER_BYTES)",
      "right" : "if (mbuf.remaining() < maxCompressedSize + OBJECT_HEADER_BYTES)",
      "info" : "IfStatement[7228-7305]:IfStatement[7560-7637]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7292-7305]:ReturnStatement[7624-7637]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[7316-7346]:ExpressionStatement[7648-7678]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7355-8403]:TryStatement[7687-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7359-8355]:Block[7691-8687]"
    }, {
      "left" : "final int objSizePosition = mbuf.position();",
      "right" : "final int objSizePosition = mbuf.position();",
      "info" : "VariableDeclarationStatement[7427-7471]:VariableDeclarationStatement[7759-7803]"
    }, {
      "left" : "mbuf.position(mbuf.position() + OBJECT_HEADER_BYTES);",
      "right" : "mbuf.position(mbuf.position() + OBJECT_HEADER_BYTES);",
      "info" : "ExpressionStatement[7484-7537]:ExpressionStatement[7816-7869]"
    }, {
      "left" : "int written = maxCompressedSize;",
      "right" : "int written = maxCompressedSize;",
      "info" : "VariableDeclarationStatement[7551-7583]:VariableDeclarationStatement[7883-7915]"
    }, {
      "left" : "if (compress)",
      "right" : "if (compress)",
      "info" : "IfStatement[7596-7991]:IfStatement[7928-8323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7610-7939]:Block[7942-8271]"
    }, {
      "left" : "final long destAddr = m_buf.address() + mbuf.position();",
      "right" : "final long destAddr = m_buf.address() + mbuf.position();",
      "info" : "VariableDeclarationStatement[7706-7762]:VariableDeclarationStatement[8038-8094]"
    }, {
      "left" : "written = (int)Snappy.rawCompress(cont.address() + buf.position(), remaining, destAddr);",
      "right" : "written = (int)Snappy.rawCompress(cont.address() + buf.position(), remaining, destAddr);",
      "info" : "ExpressionStatement[7779-7867]:ExpressionStatement[8111-8199]"
    }, {
      "left" : "mbuf.position(mbuf.position() + written);",
      "right" : "mbuf.position(mbuf.position() + written);",
      "info" : "ExpressionStatement[7884-7925]:ExpressionStatement[8216-8257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-7991]:Block[8277-8323]"
    }, {
      "left" : "mbuf.put(buf);",
      "right" : "mbuf.put(buf);",
      "info" : "ExpressionStatement[7963-7977]:ExpressionStatement[8295-8309]"
    }, {
      "left" : "mbuf.putInt(objSizePosition, written);",
      "right" : "mbuf.putInt(objSizePosition, written);",
      "info" : "ExpressionStatement[8140-8178]:ExpressionStatement[8472-8510]"
    }, {
      "left" : "mbuf.putInt(objSizePosition + 4, compress ? FLAG_COMPRESSED: NO_FLAGS);",
      "right" : "mbuf.putInt(objSizePosition + 4, compress ? FLAG_COMPRESSED: NO_FLAGS);",
      "info" : "ExpressionStatement[8191-8262]:ExpressionStatement[8523-8594]"
    }, {
      "left" : "buf.position(buf.limit());",
      "right" : "buf.position(buf.limit());",
      "info" : "ExpressionStatement[8275-8301]:ExpressionStatement[8607-8633]"
    }, {
      "left" : "incrementNumEntries(remaining);",
      "right" : "incrementNumEntries(remaining);",
      "info" : "ExpressionStatement[8314-8345]:ExpressionStatement[8646-8677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8364-8403]:Block[8696-8735]"
    }, {
      "left" : "cont.discard();",
      "right" : "cont.discard();",
      "info" : "ExpressionStatement[8378-8393]:ExpressionStatement[8710-8725]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8413-8425]:ReturnStatement[8745-8757]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8437-8446]:MarkerAnnotation[8769-8778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8451-8457]:Modifier[8783-8789]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8458-8461]:PrimitiveType[8790-8793]"
    }, {
      "left" : "offer",
      "right" : "offer",
      "info" : "SimpleName[8462-8467]:SimpleName[8794-8799]"
    }, {
      "left" : "DeferredSerialization ds",
      "right" : "DeferredSerialization ds",
      "info" : "SingleVariableDeclaration[8468-8492]:SingleVariableDeclaration[8800-8824]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8501-8512]:SimpleType[8833-8844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8513-8877]:Block[8845-9209]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[8523-8569]:IfStatement[8855-8901]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[8537-8569]:ThrowStatement[8869-8901]"
    }, {
      "left" : "final ByteBuffer mbuf = m_buf.b();",
      "right" : "final ByteBuffer mbuf = m_buf.b();",
      "info" : "VariableDeclarationStatement[8578-8612]:VariableDeclarationStatement[8910-8944]"
    }, {
      "left" : "if (mbuf.remaining() < ds.getSerializedSize() + OBJECT_HEADER_BYTES)",
      "right" : "if (mbuf.remaining() < ds.getSerializedSize() + OBJECT_HEADER_BYTES)",
      "info" : "IfStatement[8621-8700]:IfStatement[8953-9032]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[8690-8700]:ReturnStatement[9022-9032]"
    }, {
      "left" : "m_syncedSinceLastEdit = false;",
      "right" : "m_syncedSinceLastEdit = false;",
      "info" : "ExpressionStatement[8710-8740]:ExpressionStatement[9042-9072]"
    }, {
      "left" : "int written = PBDUtils.writeDeferredSerialization(mbuf, ds);",
      "right" : "int written = PBDUtils.writeDeferredSerialization(mbuf, ds);",
      "info" : "VariableDeclarationStatement[8749-8809]:VariableDeclarationStatement[9081-9141]"
    }, {
      "left" : "incrementNumEntries(written);",
      "right" : "incrementNumEntries(written);",
      "info" : "ExpressionStatement[8818-8847]:ExpressionStatement[9150-9179]"
    }, {
      "left" : "return written;",
      "right" : "return written;",
      "info" : "ReturnStatement[8856-8871]:ReturnStatement[9188-9203]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8883-8892]:MarkerAnnotation[9215-9224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8897-8903]:Modifier[9229-9235]"
    }, {
      "left" : "BBContainer",
      "right" : "BBContainer",
      "info" : "SimpleType[8904-8915]:SimpleType[9236-9247]"
    }, {
      "left" : "poll",
      "right" : "poll",
      "info" : "SimpleName[8916-8920]:SimpleName[9248-9252]"
    }, {
      "left" : "OutputContainerFactory factory",
      "right" : "OutputContainerFactory factory",
      "info" : "SingleVariableDeclaration[8921-8951]:SingleVariableDeclaration[9253-9283]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8960-8971]:SimpleType[9292-9303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8972-12251]:Block[9304-12583]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[8982-9028]:IfStatement[9314-9360]"
    }, {
      "left" : "throw new IOException(\"closed\");",
      "right" : "throw new IOException(\"closed\");",
      "info" : "ThrowStatement[8996-9028]:ThrowStatement[9328-9360]"
    }, {
      "left" : "final long mBufAddr = m_buf.address();",
      "right" : "final long mBufAddr = m_buf.address();",
      "info" : "VariableDeclarationStatement[9037-9075]:VariableDeclarationStatement[9369-9407]"
    }, {
      "left" : "if (!m_haveMAdvised)",
      "right" : "if (!m_haveMAdvised)",
      "info" : "IfStatement[9084-9489]:IfStatement[9416-9821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9105-9489]:Block[9437-9821]"
    }, {
      "left" : "final ByteBuffer mbuf = m_buf.b();",
      "right" : "final ByteBuffer mbuf = m_buf.b();",
      "info" : "VariableDeclarationStatement[9119-9153]:VariableDeclarationStatement[9451-9485]"
    }, {
      "left" : "m_haveMAdvised = true;",
      "right" : "m_haveMAdvised = true;",
      "info" : "ExpressionStatement[9166-9188]:ExpressionStatement[9498-9520]"
    }, {
      "left" : "final long retval = PosixAdvise.madvise(\n                    m_buf.address(),\n                    mbuf.position(),\n                    PosixAdvise.POSIX_MADV_WILLNEED);",
      "right" : "final long retval = PosixAdvise.madvise(\n                    m_buf.address(),\n                    mbuf.position(),\n                    PosixAdvise.POSIX_MADV_WILLNEED);",
      "info" : "VariableDeclarationStatement[9201-9369]:VariableDeclarationStatement[9533-9701]"
    }, {
      "left" : "if (retval != 0)",
      "right" : "if (retval != 0)",
      "info" : "IfStatement[9382-9479]:IfStatement[9714-9811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9399-9479]:Block[9731-9811]"
    }, {
      "left" : "LOG.warn(\"madvise will need failed: \" + retval);",
      "right" : "LOG.warn(\"madvise will need failed: \" + retval);",
      "info" : "ExpressionStatement[9417-9465]:ExpressionStatement[9749-9797]"
    }, {
      "left" : "if (!hasMoreEntries())",
      "right" : "if (!hasMoreEntries())",
      "info" : "IfStatement[9533-9592]:IfStatement[9865-9924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9556-9592]:Block[9888-9924]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9570-9582]:ReturnStatement[9902-9914]"
    }, {
      "left" : "m_objectReadIndex++;",
      "right" : "m_objectReadIndex++;",
      "info" : "ExpressionStatement[9602-9622]:ExpressionStatement[9934-9954]"
    }, {
      "left" : "final int nextCompressedLength = m_readBuf.getInt();",
      "right" : "final int nextCompressedLength = m_readBuf.getInt();",
      "info" : "VariableDeclarationStatement[9689-9741]:VariableDeclarationStatement[10021-10073]"
    }, {
      "left" : "final int nextFlags = m_readBuf.getInt();",
      "right" : "final int nextFlags = m_readBuf.getInt();",
      "info" : "VariableDeclarationStatement[9750-9791]:VariableDeclarationStatement[10082-10123]"
    }, {
      "left" : "final boolean compressed = (nextFlags & FLAG_COMPRESSED) != 0;",
      "right" : "final boolean compressed = (nextFlags & FLAG_COMPRESSED) != 0;",
      "info" : "VariableDeclarationStatement[9833-9895]:VariableDeclarationStatement[10165-10227]"
    }, {
      "left" : "final int nextUncompressedLength = compressed ? (int)Snappy.uncompressedLength(mBufAddr + m_readBuf.position(), nextCompressedLength) : nextCompressedLength;",
      "right" : "final int nextUncompressedLength = compressed ? (int)Snappy.uncompressedLength(mBufAddr + m_readBuf.position(), nextCompressedLength) : nextCompressedLength;",
      "info" : "VariableDeclarationStatement[9965-10122]:VariableDeclarationStatement[10297-10454]"
    }, {
      "left" : "m_bytesRead += nextUncompressedLength;",
      "right" : "m_bytesRead += nextUncompressedLength;",
      "info" : "ExpressionStatement[10131-10169]:ExpressionStatement[10463-10501]"
    }, {
      "left" : "final BBContainer retcont;",
      "right" : "final BBContainer retcont;",
      "info" : "VariableDeclarationStatement[10179-10205]:VariableDeclarationStatement[10511-10537]"
    }, {
      "left" : "if (compressed)",
      "right" : "if (compressed)",
      "info" : "IfStatement[10214-11759]:IfStatement[10546-12091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10230-10821]:Block[10562-11153]"
    }, {
      "left" : "retcont = factory.getContainer(nextUncompressedLength);",
      "right" : "retcont = factory.getContainer(nextUncompressedLength);",
      "info" : "ExpressionStatement[10281-10336]:ExpressionStatement[10613-10668]"
    }, {
      "left" : "final ByteBuffer retbuf = retcont.b();",
      "right" : "final ByteBuffer retbuf = retcont.b();",
      "info" : "VariableDeclarationStatement[10349-10387]:VariableDeclarationStatement[10681-10719]"
    }, {
      "left" : "retbuf.limit(nextUncompressedLength);",
      "right" : "retbuf.limit(nextUncompressedLength);",
      "info" : "ExpressionStatement[10454-10491]:ExpressionStatement[10786-10823]"
    }, {
      "left" : "final long sourceAddr = mBufAddr + m_readBuf.position();",
      "right" : "final long sourceAddr = mBufAddr + m_readBuf.position();",
      "info" : "VariableDeclarationStatement[10547-10603]:VariableDeclarationStatement[10879-10935]"
    }, {
      "left" : "final long destAddr = retcont.address();",
      "right" : "final long destAddr = retcont.address();",
      "info" : "VariableDeclarationStatement[10616-10656]:VariableDeclarationStatement[10948-10988]"
    }, {
      "left" : "Snappy.rawUncompress(sourceAddr, nextCompressedLength, destAddr);",
      "right" : "Snappy.rawUncompress(sourceAddr, nextCompressedLength, destAddr);",
      "info" : "ExpressionStatement[10669-10734]:ExpressionStatement[11001-11066]"
    }, {
      "left" : "m_readBuf.position(m_readBuf.position() + nextCompressedLength);",
      "right" : "m_readBuf.position(m_readBuf.position() + nextCompressedLength);",
      "info" : "ExpressionStatement[10747-10811]:ExpressionStatement[11079-11143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10827-11759]:Block[11159-12091]"
    }, {
      "left" : "final int oldLimit = m_readBuf.limit();",
      "right" : "final int oldLimit = m_readBuf.limit();",
      "info" : "VariableDeclarationStatement[10870-10909]:VariableDeclarationStatement[11202-11241]"
    }, {
      "left" : "m_readBuf.limit(m_readBuf.position() + nextUncompressedLength);",
      "right" : "m_readBuf.limit(m_readBuf.position() + nextUncompressedLength);",
      "info" : "ExpressionStatement[10922-10985]:ExpressionStatement[11254-11317]"
    }, {
      "left" : "ByteBuffer retbuf = m_readBuf.slice();",
      "right" : "ByteBuffer retbuf = m_readBuf.slice();",
      "info" : "VariableDeclarationStatement[10998-11036]:VariableDeclarationStatement[11330-11368]"
    }, {
      "left" : "m_readBuf.position(m_readBuf.limit());",
      "right" : "m_readBuf.position(m_readBuf.limit());",
      "info" : "ExpressionStatement[11049-11087]:ExpressionStatement[11381-11419]"
    }, {
      "left" : "m_readBuf.limit(oldLimit);",
      "right" : "m_readBuf.limit(oldLimit);",
      "info" : "ExpressionStatement[11100-11126]:ExpressionStatement[11432-11458]"
    }, {
      "left" : "retcont = DBBPool.dummyWrapBB(retbuf);",
      "right" : "retcont = DBBPool.dummyWrapBB(retbuf);",
      "info" : "ExpressionStatement[11670-11708]:ExpressionStatement[12002-12040]"
    }, {
      "left" : "Bits.readEveryPage(retcont);",
      "right" : "Bits.readEveryPage(retcont);",
      "info" : "ExpressionStatement[11721-11749]:ExpressionStatement[12053-12081]"
    }, {
      "left" : "return new BBContainer(retcont.b()) {\n            private boolean m_discarded = false;\n\n            @Override\n            public void discard()\n            {\n                checkDoubleFree();\n                if (m_discarded) {\n                    LOG.error(\"PBD Container discarded more than once\");\n                    return;\n                }\n                m_discarded = true;\n                retcont.discard();\n                m_discardCount++;\n            }\n        };",
      "right" : "return new BBContainer(retcont.b()) {\n            private boolean m_discarded = false;\n\n            @Override\n            public void discard()\n            {\n                checkDoubleFree();\n                if (m_discarded) {\n                    LOG.error(\"PBD Container discarded more than once\");\n                    return;\n                }\n                m_discarded = true;\n                retcont.discard();\n                m_discardCount++;\n            }\n        };",
      "info" : "ReturnStatement[11769-12245]:ReturnStatement[12101-12577]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11869-11878]:MarkerAnnotation[12201-12210]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11891-11897]:Modifier[12223-12229]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11898-11902]:PrimitiveType[12230-12234]"
    }, {
      "left" : "discard",
      "right" : "discard",
      "info" : "SimpleName[11903-11910]:SimpleName[12235-12242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11925-12234]:Block[12257-12566]"
    }, {
      "left" : "checkDoubleFree();",
      "right" : "checkDoubleFree();",
      "info" : "ExpressionStatement[11943-11961]:ExpressionStatement[12275-12293]"
    }, {
      "left" : "if (m_discarded)",
      "right" : "if (m_discarded)",
      "info" : "IfStatement[11978-12115]:IfStatement[12310-12447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11995-12115]:Block[12327-12447]"
    }, {
      "left" : "LOG.error(\"PBD Container discarded more than once\");",
      "right" : "LOG.error(\"PBD Container discarded more than once\");",
      "info" : "ExpressionStatement[12017-12069]:ExpressionStatement[12349-12401]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12090-12097]:ReturnStatement[12422-12429]"
    }, {
      "left" : "m_discarded = true;",
      "right" : "m_discarded = true;",
      "info" : "ExpressionStatement[12132-12151]:ExpressionStatement[12464-12483]"
    }, {
      "left" : "retcont.discard();",
      "right" : "retcont.discard();",
      "info" : "ExpressionStatement[12168-12186]:ExpressionStatement[12500-12518]"
    }, {
      "left" : "m_discardCount++;",
      "right" : "m_discardCount++;",
      "info" : "ExpressionStatement[12203-12220]:ExpressionStatement[12535-12552]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12436-12445]:MarkerAnnotation[12768-12777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12450-12456]:Modifier[12782-12788]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12457-12460]:PrimitiveType[12789-12792]"
    }, {
      "left" : "uncompressedBytesToRead",
      "right" : "uncompressedBytesToRead",
      "info" : "SimpleName[12461-12484]:SimpleName[12793-12816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12487-12627]:Block[12819-12959]"
    }, {
      "left" : "if (m_closed)",
      "right" : "if (m_closed)",
      "info" : "IfStatement[12497-12548]:IfStatement[12829-12880]"
    }, {
      "left" : "throw new RuntimeException(\"closed\");",
      "right" : "throw new RuntimeException(\"closed\");",
      "info" : "ThrowStatement[12511-12548]:ThrowStatement[12843-12880]"
    }, {
      "left" : "return Math.max(0, m_buf.b().getInt(SIZE_OFFSET) - m_bytesRead);",
      "right" : "return Math.max(0, m_buf.b().getInt(SIZE_OFFSET) - m_bytesRead);",
      "info" : "ReturnStatement[12557-12621]:ReturnStatement[12889-12953]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: src/frontend/org/voltdb/utils/PBDRegularSegment.java" : {
      "matchedElements" : [
 ],
      "mappings" : [
 {
        "left" : "buf.putInt(0, 0);",
        "right" : "initNumEntries(0, 0);",
        "info" : "ExpressionStatement[3825-3842]:ExpressionStatement[4465-4486]"
      } ]
    }
  }
}