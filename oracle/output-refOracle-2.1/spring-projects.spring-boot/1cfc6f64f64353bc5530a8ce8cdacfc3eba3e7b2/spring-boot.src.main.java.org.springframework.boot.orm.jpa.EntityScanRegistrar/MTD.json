{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "EntityScanRegistrar",
      "right" : "EntityScanRegistrar",
      "info" : "TypeDeclaration[1612-5001]:TypeDeclaration[1701-6007]"
    }, {
      "left" : "private static final String BEAN_NAME = \"entityScanBeanPostProcessor\";",
      "right" : "private static final String BEAN_NAME = \"entityScanBeanPostProcessor\";",
      "info" : "FieldDeclaration[1787-1857]:FieldDeclaration[1901-1971]"
    }, {
      "left" : "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\tBeanDefinitionRegistry registry)",
      "right" : "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\tBeanDefinitionRegistry registry)",
      "info" : "MethodDeclaration[1860-2611]:MethodDeclaration[1974-2373]"
    }, {
      "left" : "private String[] getPackagesToScan(AnnotationMetadata metadata)",
      "right" : "private String[] toArray(Set<String> set)",
      "info" : "MethodDeclaration[2614-3696]:MethodDeclaration[4610-4702]"
    }, {
      "left" : "EntityScanBeanPostProcessor",
      "right" : "EntityScanBeanPostProcessor",
      "info" : "TypeDeclaration[3699-4998]:TypeDeclaration[4705-6004]"
    }, {
      "left" : "private final String[] packagesToScan;",
      "right" : "private final String[] packagesToScan;",
      "info" : "FieldDeclaration[3988-4026]:FieldDeclaration[4994-5032]"
    }, {
      "left" : "private boolean processed;",
      "right" : "private boolean processed;",
      "info" : "FieldDeclaration[4030-4056]:FieldDeclaration[5036-5062]"
    }, {
      "left" : "public EntityScanBeanPostProcessor(String[] packagesToScan)",
      "right" : "public EntityScanBeanPostProcessor(String[] packagesToScan)",
      "info" : "MethodDeclaration[4060-4166]:MethodDeclaration[5066-5172]"
    }, {
      "left" : "public Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException",
      "right" : "public Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException",
      "info" : "MethodDeclaration[4170-4562]:MethodDeclaration[5176-5568]"
    }, {
      "left" : "public Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException",
      "right" : "public Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException",
      "info" : "MethodDeclaration[4566-4700]:MethodDeclaration[5572-5706]"
    }, {
      "left" : "public void afterSingletonsInstantiated()",
      "right" : "public void afterSingletonsInstantiated()",
      "info" : "MethodDeclaration[4704-4938]:MethodDeclaration[5710-5944]"
    }, {
      "left" : "public int getOrder()",
      "right" : "public int getOrder()",
      "info" : "MethodDeclaration[4942-4994]:MethodDeclaration[5948-6000]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1986-2611]:Block[2100-2373]"
    }, {
      "left" : "if (!registry.containsBeanDefinition(BEAN_NAME))",
      "right" : "if (!registry.containsBeanDefinition(BEAN_NAME))",
      "info" : "IfStatement[1990-2608]:IfStatement[2178-2370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2039-2608]:Block[2301-2370]"
    }, {
      "left" : "GenericBeanDefinition beanDefinition = new GenericBeanDefinition();",
      "right" : "GenericBeanDefinition beanDefinition = new GenericBeanDefinition();",
      "info" : "VariableDeclarationStatement[2044-2111]:VariableDeclarationStatement[3515-3582]"
    }, {
      "left" : "beanDefinition.setBeanClass(EntityScanBeanPostProcessor.class);",
      "right" : "beanDefinition.setBeanClass(EntityScanBeanPostProcessor.class);",
      "info" : "ExpressionStatement[2115-2178]:ExpressionStatement[3585-3648]"
    }, {
      "left" : "beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(\n\t\t\t\t\tgetPackagesToScan(importingClassMetadata));",
      "right" : "addEntityScanBeanPostProcessor(registry, packagesToScan);",
      "info" : "ExpressionStatement[2182-2301]:ExpressionStatement[2232-2289]"
    }, {
      "left" : "beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
      "right" : "beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
      "info" : "ExpressionStatement[2305-2364]:ExpressionStatement[3754-3813]"
    }, {
      "left" : "beanDefinition.setSynthetic(true);",
      "right" : "beanDefinition.setSynthetic(true);",
      "info" : "ExpressionStatement[2507-2541]:ExpressionStatement[3953-3987]"
    }, {
      "left" : "registry.registerBeanDefinition(BEAN_NAME, beanDefinition);",
      "right" : "registry.registerBeanDefinition(BEAN_NAME, beanDefinition);",
      "info" : "ExpressionStatement[2545-2604]:ExpressionStatement[3990-4049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2678-3696]:Block[4652-4702]"
    }, {
      "left" : "AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata\n\t\t\t\t.getAnnotationAttributes(EntityScan.class.getName()));",
      "right" : "AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata\n\t\t\t\t.getAnnotationAttributes(EntityScan.class.getName()));",
      "info" : "VariableDeclarationStatement[2682-2812]:VariableDeclarationStatement[2447-2577]"
    }, {
      "left" : "String[] value = attributes.getStringArray(\"value\");",
      "right" : "String[] value = attributes.getStringArray(\"value\");",
      "info" : "VariableDeclarationStatement[2815-2867]:VariableDeclarationStatement[2580-2632]"
    }, {
      "left" : "String[] basePackages = attributes.getStringArray(\"basePackages\");",
      "right" : "String[] basePackages = attributes.getStringArray(\"basePackages\");",
      "info" : "VariableDeclarationStatement[2870-2936]:VariableDeclarationStatement[2635-2701]"
    }, {
      "left" : "Class<?>[] basePackageClasses = attributes.getClassArray(\"basePackageClasses\");",
      "right" : "Class<?>[] basePackageClasses = attributes.getClassArray(\"basePackageClasses\");",
      "info" : "VariableDeclarationStatement[2939-3018]:VariableDeclarationStatement[2704-2783]"
    }, {
      "left" : "if (!ObjectUtils.isEmpty(value))",
      "right" : "if (!ObjectUtils.isEmpty(value))",
      "info" : "IfStatement[3022-3189]:IfStatement[2786-2953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3055-3189]:Block[2819-2953]"
    }, {
      "left" : "Assert.state(ObjectUtils.isEmpty(basePackages),\n\t\t\t\t\t\"@EntityScan basePackages and value attributes are mutually exclusive\");",
      "right" : "Assert.state(ObjectUtils.isEmpty(basePackages),\n\t\t\t\t\t\"@EntityScan basePackages and value attributes are mutually exclusive\");",
      "info" : "ExpressionStatement[3060-3185]:ExpressionStatement[2824-2949]"
    }, {
      "left" : "Set<String> packagesToScan = new LinkedHashSet<String>();",
      "right" : "Set<String> packagesToScan = new LinkedHashSet<String>();",
      "info" : "VariableDeclarationStatement[3193-3250]:VariableDeclarationStatement[2956-3013]"
    }, {
      "left" : "packagesToScan.addAll(Arrays.asList(value));",
      "right" : "packagesToScan.addAll(Arrays.asList(value));",
      "info" : "ExpressionStatement[3253-3297]:ExpressionStatement[3016-3060]"
    }, {
      "left" : "packagesToScan.addAll(Arrays.asList(basePackages));",
      "right" : "packagesToScan.addAll(Arrays.asList(basePackages));",
      "info" : "ExpressionStatement[3300-3351]:ExpressionStatement[3063-3114]"
    }, {
      "left" : "for (Class<?> basePackageClass : basePackageClasses)",
      "right" : "for (Class<?> basePackageClass : basePackageClasses)",
      "info" : "EnhancedForStatement[3354-3480]:EnhancedForStatement[3117-3243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3407-3480]:Block[3170-3243]"
    }, {
      "left" : "packagesToScan.add(ClassUtils.getPackageName(basePackageClass));",
      "right" : "packagesToScan.add(ClassUtils.getPackageName(basePackageClass));",
      "info" : "ExpressionStatement[3412-3476]:ExpressionStatement[3175-3239]"
    }, {
      "left" : "if (packagesToScan.isEmpty())",
      "right" : "if (packagesToScan.isEmpty())",
      "info" : "IfStatement[3483-3597]:IfStatement[3246-3372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3513-3597]:Block[3276-3372]"
    }, {
      "left" : "return new String[] { ClassUtils.getPackageName(metadata.getClassName()) };",
      "right" : "return Collections.singleton(ClassUtils.getPackageName(metadata\n\t\t\t\t\t.getClassName()));",
      "info" : "ReturnStatement[3518-3593]:ReturnStatement[3281-3368]"
    }, {
      "left" : "return new ArrayList<String>(packagesToScan).toArray(new String[packagesToScan\n\t\t\t\t.size()]);",
      "right" : "return set.toArray(new String[set.size()]);",
      "info" : "ReturnStatement[3600-3693]:ReturnStatement[4656-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4120-4166]:Block[5126-5172]"
    }, {
      "left" : "this.packagesToScan = packagesToScan;",
      "right" : "this.packagesToScan = packagesToScan;",
      "info" : "ExpressionStatement[4125-4162]:ExpressionStatement[5131-5168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4284-4562]:Block[5290-5568]"
    }, {
      "left" : "if (bean instanceof LocalContainerEntityManagerFactoryBean)",
      "right" : "if (bean instanceof LocalContainerEntityManagerFactoryBean)",
      "info" : "IfStatement[4289-4542]:IfStatement[5295-5548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4349-4542]:Block[5355-5548]"
    }, {
      "left" : "LocalContainerEntityManagerFactoryBean factoryBean = (LocalContainerEntityManagerFactoryBean) bean;",
      "right" : "LocalContainerEntityManagerFactoryBean factoryBean = (LocalContainerEntityManagerFactoryBean) bean;",
      "info" : "VariableDeclarationStatement[4355-4454]:VariableDeclarationStatement[5361-5460]"
    }, {
      "left" : "factoryBean.setPackagesToScan(this.packagesToScan);",
      "right" : "factoryBean.setPackagesToScan(this.packagesToScan);",
      "info" : "ExpressionStatement[4459-4510]:ExpressionStatement[5465-5516]"
    }, {
      "left" : "this.processed = true;",
      "right" : "this.processed = true;",
      "info" : "ExpressionStatement[4515-4537]:ExpressionStatement[5521-5543]"
    }, {
      "left" : "return bean;",
      "right" : "return bean;",
      "info" : "ReturnStatement[4546-4558]:ReturnStatement[5552-5564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4679-4700]:Block[5685-5706]"
    }, {
      "left" : "return bean;",
      "right" : "return bean;",
      "info" : "ReturnStatement[4684-4696]:ReturnStatement[5690-5702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4758-4938]:Block[5764-5944]"
    }, {
      "left" : "Assert.state(this.processed, \"Unable to configure \"\n\t\t\t\t\t+ \"LocalContainerEntityManagerFactoryBean from @EntityScan, \"\n\t\t\t\t\t+ \"ensure an appropriate bean is registered.\");",
      "right" : "Assert.state(this.processed, \"Unable to configure \"\n\t\t\t\t\t+ \"LocalContainerEntityManagerFactoryBean from @EntityScan, \"\n\t\t\t\t\t+ \"ensure an appropriate bean is registered.\");",
      "info" : "ExpressionStatement[4763-4934]:ExpressionStatement[5769-5940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4976-4994]:Block[5982-6000]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4981-4990]:ReturnStatement[5987-5996]"
    } ]
  },
  "interFileMappings" : { }
}