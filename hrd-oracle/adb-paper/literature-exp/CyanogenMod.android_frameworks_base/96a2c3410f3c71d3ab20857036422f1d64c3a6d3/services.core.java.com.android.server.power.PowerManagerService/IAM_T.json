{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PowerManagerService",
      "right" : "PowerManagerService",
      "info" : "TypeDeclaration[3137-158286]:TypeDeclaration[3137-158581]"
    }, {
      "left" : "private static final String TAG = \"PowerManagerService\";",
      "right" : "private static final String TAG = \"PowerManagerService\";",
      "info" : "FieldDeclaration[3354-3410]:FieldDeclaration[3354-3410]"
    }, {
      "left" : "private static final boolean DEBUG = false;",
      "right" : "private static final boolean DEBUG = false;",
      "info" : "FieldDeclaration[3416-3459]:FieldDeclaration[3416-3459]"
    }, {
      "left" : "private static final boolean DEBUG_SPEW = DEBUG && true;",
      "right" : "private static final boolean DEBUG_SPEW = DEBUG && true;",
      "info" : "FieldDeclaration[3464-3520]:FieldDeclaration[3464-3520]"
    }, {
      "left" : "private static final int MSG_USER_ACTIVITY_TIMEOUT = 1;",
      "right" : "private static final int MSG_USER_ACTIVITY_TIMEOUT = 1;",
      "info" : "FieldDeclaration[3610-3665]:FieldDeclaration[3610-3665]"
    }, {
      "left" : "private static final int MSG_SANDMAN = 2;",
      "right" : "private static final int MSG_SANDMAN = 2;",
      "info" : "FieldDeclaration[3751-3792]:FieldDeclaration[3751-3792]"
    }, {
      "left" : "private static final int MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT = 3;",
      "right" : "private static final int MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT = 3;",
      "info" : "FieldDeclaration[3860-3925]:FieldDeclaration[3860-3925]"
    }, {
      "left" : "private static final int MSG_WAKE_UP = 5;",
      "right" : "private static final int MSG_WAKE_UP = 5;",
      "info" : "FieldDeclaration[3931-3972]:FieldDeclaration[3931-3972]"
    }, {
      "left" : "private static final int DIRTY_WAKE_LOCKS = 1 << 0;",
      "right" : "private static final int DIRTY_WAKE_LOCKS = 1 << 0;",
      "info" : "FieldDeclaration[4015-4066]:FieldDeclaration[4015-4066]"
    }, {
      "left" : "private static final int DIRTY_WAKEFULNESS = 1 << 1;",
      "right" : "private static final int DIRTY_WAKEFULNESS = 1 << 1;",
      "info" : "FieldDeclaration[4110-4162]:FieldDeclaration[4110-4162]"
    }, {
      "left" : "private static final int DIRTY_USER_ACTIVITY = 1 << 2;",
      "right" : "private static final int DIRTY_USER_ACTIVITY = 1 << 2;",
      "info" : "FieldDeclaration[4231-4285]:FieldDeclaration[4231-4285]"
    }, {
      "left" : "private static final int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED = 1 << 3;",
      "right" : "private static final int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED = 1 << 3;",
      "info" : "FieldDeclaration[4362-4437]:FieldDeclaration[4362-4437]"
    }, {
      "left" : "private static final int DIRTY_BOOT_COMPLETED = 1 << 4;",
      "right" : "private static final int DIRTY_BOOT_COMPLETED = 1 << 4;",
      "info" : "FieldDeclaration[4483-4538]:FieldDeclaration[4483-4538]"
    }, {
      "left" : "private static final int DIRTY_SETTINGS = 1 << 5;",
      "right" : "private static final int DIRTY_SETTINGS = 1 << 5;",
      "info" : "FieldDeclaration[4578-4627]:FieldDeclaration[4578-4627]"
    }, {
      "left" : "private static final int DIRTY_IS_POWERED = 1 << 6;",
      "right" : "private static final int DIRTY_IS_POWERED = 1 << 6;",
      "info" : "FieldDeclaration[4669-4720]:FieldDeclaration[4669-4720]"
    }, {
      "left" : "private static final int DIRTY_STAY_ON = 1 << 7;",
      "right" : "private static final int DIRTY_STAY_ON = 1 << 7;",
      "info" : "FieldDeclaration[4759-4807]:FieldDeclaration[4759-4807]"
    }, {
      "left" : "private static final int DIRTY_BATTERY_STATE = 1 << 8;",
      "right" : "private static final int DIRTY_BATTERY_STATE = 1 << 8;",
      "info" : "FieldDeclaration[4852-4906]:FieldDeclaration[4852-4906]"
    }, {
      "left" : "private static final int DIRTY_PROXIMITY_POSITIVE = 1 << 9;",
      "right" : "private static final int DIRTY_PROXIMITY_POSITIVE = 1 << 9;",
      "info" : "FieldDeclaration[4953-5012]:FieldDeclaration[4953-5012]"
    }, {
      "left" : "private static final int DIRTY_DOCK_STATE = 1 << 10;",
      "right" : "private static final int DIRTY_DOCK_STATE = 1 << 10;",
      "info" : "FieldDeclaration[5054-5106]:FieldDeclaration[5054-5106]"
    }, {
      "left" : "private static final int DIRTY_SCREEN_BRIGHTNESS_BOOST = 1 << 11;",
      "right" : "private static final int DIRTY_SCREEN_BRIGHTNESS_BOOST = 1 << 11;",
      "info" : "FieldDeclaration[5154-5219]:FieldDeclaration[5154-5219]"
    }, {
      "left" : "private static final int WAKE_LOCK_CPU = 1 << 0;",
      "right" : "private static final int WAKE_LOCK_CPU = 1 << 0;",
      "info" : "FieldDeclaration[5278-5326]:FieldDeclaration[5278-5326]"
    }, {
      "left" : "private static final int WAKE_LOCK_SCREEN_BRIGHT = 1 << 1;",
      "right" : "private static final int WAKE_LOCK_SCREEN_BRIGHT = 1 << 1;",
      "info" : "FieldDeclaration[5331-5389]:FieldDeclaration[5331-5389]"
    }, {
      "left" : "private static final int WAKE_LOCK_SCREEN_DIM = 1 << 2;",
      "right" : "private static final int WAKE_LOCK_SCREEN_DIM = 1 << 2;",
      "info" : "FieldDeclaration[5394-5449]:FieldDeclaration[5394-5449]"
    }, {
      "left" : "private static final int WAKE_LOCK_BUTTON_BRIGHT = 1 << 3;",
      "right" : "private static final int WAKE_LOCK_BUTTON_BRIGHT = 1 << 3;",
      "info" : "FieldDeclaration[5454-5512]:FieldDeclaration[5454-5512]"
    }, {
      "left" : "private static final int WAKE_LOCK_PROXIMITY_SCREEN_OFF = 1 << 4;",
      "right" : "private static final int WAKE_LOCK_PROXIMITY_SCREEN_OFF = 1 << 4;",
      "info" : "FieldDeclaration[5517-5582]:FieldDeclaration[5517-5582]"
    }, {
      "left" : "private static final int WAKE_LOCK_STAY_AWAKE = 1 << 5;",
      "right" : "private static final int WAKE_LOCK_STAY_AWAKE = 1 << 5;",
      "info" : "FieldDeclaration[5587-5642]:FieldDeclaration[5587-5642]"
    }, {
      "left" : "private static final int WAKE_LOCK_DOZE = 1 << 6;",
      "right" : "private static final int WAKE_LOCK_DOZE = 1 << 6;",
      "info" : "FieldDeclaration[5676-5725]:FieldDeclaration[5676-5725]"
    }, {
      "left" : "private static final int USER_ACTIVITY_SCREEN_BRIGHT = 1 << 0;",
      "right" : "private static final int USER_ACTIVITY_SCREEN_BRIGHT = 1 << 0;",
      "info" : "FieldDeclaration[5774-5836]:FieldDeclaration[5774-5836]"
    }, {
      "left" : "private static final int USER_ACTIVITY_SCREEN_DIM = 1 << 1;",
      "right" : "private static final int USER_ACTIVITY_SCREEN_DIM = 1 << 1;",
      "info" : "FieldDeclaration[5841-5900]:FieldDeclaration[5841-5900]"
    }, {
      "left" : "private static final int USER_ACTIVITY_SCREEN_DREAM = 1 << 2;",
      "right" : "private static final int USER_ACTIVITY_SCREEN_DREAM = 1 << 2;",
      "info" : "FieldDeclaration[5905-5966]:FieldDeclaration[5905-5966]"
    }, {
      "left" : "private static final int DEFAULT_SCREEN_OFF_TIMEOUT = 15 * 1000;",
      "right" : "private static final int DEFAULT_SCREEN_OFF_TIMEOUT = 15 * 1000;",
      "info" : "FieldDeclaration[6137-6201]:FieldDeclaration[6137-6201]"
    }, {
      "left" : "private static final int DEFAULT_SLEEP_TIMEOUT = -1;",
      "right" : "private static final int DEFAULT_SLEEP_TIMEOUT = -1;",
      "info" : "FieldDeclaration[6206-6258]:FieldDeclaration[6206-6258]"
    }, {
      "left" : "private static final int SCREEN_BRIGHTNESS_BOOST_TIMEOUT = 5 * 1000;",
      "right" : "private static final int SCREEN_BRIGHTNESS_BOOST_TIMEOUT = 5 * 1000;",
      "info" : "FieldDeclaration[6419-6487]:FieldDeclaration[6419-6487]"
    }, {
      "left" : "private static final int POWER_HINT_INTERACTION = 2;",
      "right" : "private static final int POWER_HINT_INTERACTION = 2;",
      "info" : "FieldDeclaration[6570-6622]:FieldDeclaration[6570-6622]"
    }, {
      "left" : "private static final int POWER_HINT_LOW_POWER = 5;",
      "right" : "private static final int POWER_HINT_LOW_POWER = 5;",
      "info" : "FieldDeclaration[6627-6677]:FieldDeclaration[6627-6677]"
    }, {
      "left" : "private static final int DEFAULT_BUTTON_ON_DURATION = 5 * 1000;",
      "right" : "private static final int DEFAULT_BUTTON_ON_DURATION = 5 * 1000;",
      "info" : "FieldDeclaration[6683-6746]:FieldDeclaration[6683-6746]"
    }, {
      "left" : "private static final int DPM_CONFIG_FEATURE_MASK_NSRM = 0x00000004;",
      "right" : "private static final int DPM_CONFIG_FEATURE_MASK_NSRM = 0x00000004;",
      "info" : "FieldDeclaration[6781-6848]:FieldDeclaration[6781-6848]"
    }, {
      "left" : "private static final int BUTTON_ON_DURATION = 5 * 1000;",
      "right" : "private static final int BUTTON_ON_DURATION = 5 * 1000;",
      "info" : "FieldDeclaration[6854-6909]:FieldDeclaration[6854-6909]"
    }, {
      "left" : "private static final int MAX_CPU_BOOST_TIME = 5000000;",
      "right" : "private static final int MAX_CPU_BOOST_TIME = 5000000;",
      "info" : "FieldDeclaration[6971-7025]:FieldDeclaration[6971-7025]"
    }, {
      "left" : "private static final float PROXIMITY_NEAR_THRESHOLD = 5.0f;",
      "right" : "private static final float PROXIMITY_NEAR_THRESHOLD = 5.0f;",
      "info" : "FieldDeclaration[7031-7090]:FieldDeclaration[7031-7090]"
    }, {
      "left" : "private final Context mContext;",
      "right" : "private final Context mContext;",
      "info" : "FieldDeclaration[7096-7127]:FieldDeclaration[7096-7127]"
    }, {
      "left" : "private final ServiceThread mHandlerThread;",
      "right" : "private final ServiceThread mHandlerThread;",
      "info" : "FieldDeclaration[7132-7175]:FieldDeclaration[7132-7175]"
    }, {
      "left" : "private final PowerManagerHandler mHandler;",
      "right" : "private final PowerManagerHandler mHandler;",
      "info" : "FieldDeclaration[7180-7223]:FieldDeclaration[7180-7223]"
    }, {
      "left" : "private LightsManager mLightsManager;",
      "right" : "private LightsManager mLightsManager;",
      "info" : "FieldDeclaration[7229-7266]:FieldDeclaration[7229-7266]"
    }, {
      "left" : "private BatteryManagerInternal mBatteryManagerInternal;",
      "right" : "private BatteryManagerInternal mBatteryManagerInternal;",
      "info" : "FieldDeclaration[7271-7326]:FieldDeclaration[7271-7326]"
    }, {
      "left" : "private DisplayManagerInternal mDisplayManagerInternal;",
      "right" : "private DisplayManagerInternal mDisplayManagerInternal;",
      "info" : "FieldDeclaration[7331-7386]:FieldDeclaration[7331-7386]"
    }, {
      "left" : "private IBatteryStats mBatteryStats;",
      "right" : "private IBatteryStats mBatteryStats;",
      "info" : "FieldDeclaration[7391-7427]:FieldDeclaration[7391-7427]"
    }, {
      "left" : "private IAppOpsService mAppOps;",
      "right" : "private IAppOpsService mAppOps;",
      "info" : "FieldDeclaration[7432-7463]:FieldDeclaration[7432-7463]"
    }, {
      "left" : "private WindowManagerPolicy mPolicy;",
      "right" : "private WindowManagerPolicy mPolicy;",
      "info" : "FieldDeclaration[7468-7504]:FieldDeclaration[7468-7504]"
    }, {
      "left" : "private Notifier mNotifier;",
      "right" : "private Notifier mNotifier;",
      "info" : "FieldDeclaration[7509-7536]:FieldDeclaration[7509-7536]"
    }, {
      "left" : "private WirelessChargerDetector mWirelessChargerDetector;",
      "right" : "private WirelessChargerDetector mWirelessChargerDetector;",
      "info" : "FieldDeclaration[7541-7598]:FieldDeclaration[7541-7598]"
    }, {
      "left" : "private SettingsObserver mSettingsObserver;",
      "right" : "private SettingsObserver mSettingsObserver;",
      "info" : "FieldDeclaration[7603-7646]:FieldDeclaration[7603-7646]"
    }, {
      "left" : "private DreamManagerInternal mDreamManager;",
      "right" : "private DreamManagerInternal mDreamManager;",
      "info" : "FieldDeclaration[7651-7694]:FieldDeclaration[7651-7694]"
    }, {
      "left" : "private Light mAttentionLight;",
      "right" : "private Light mAttentionLight;",
      "info" : "FieldDeclaration[7699-7729]:FieldDeclaration[7699-7729]"
    }, {
      "left" : "private Light mButtonsLight;",
      "right" : "private Light mButtonsLight;",
      "info" : "FieldDeclaration[7734-7762]:FieldDeclaration[7734-7762]"
    }, {
      "left" : "private Light mKeyboardLight;",
      "right" : "private Light mKeyboardLight;",
      "info" : "FieldDeclaration[7767-7796]:FieldDeclaration[7767-7796]"
    }, {
      "left" : "private Light mCapsLight;",
      "right" : "private Light mCapsLight;",
      "info" : "FieldDeclaration[7801-7826]:FieldDeclaration[7801-7826]"
    }, {
      "left" : "private Light mFnLight;",
      "right" : "private Light mFnLight;",
      "info" : "FieldDeclaration[7831-7854]:FieldDeclaration[7831-7854]"
    }, {
      "left" : "private int mButtonTimeout;",
      "right" : "private int mButtonTimeout;",
      "info" : "FieldDeclaration[7860-7887]:FieldDeclaration[7860-7887]"
    }, {
      "left" : "private int mButtonBrightness;",
      "right" : "private int mButtonBrightness;",
      "info" : "FieldDeclaration[7892-7922]:FieldDeclaration[7892-7922]"
    }, {
      "left" : "private int mButtonBrightnessSettingDefault;",
      "right" : "private int mButtonBrightnessSettingDefault;",
      "info" : "FieldDeclaration[7927-7971]:FieldDeclaration[7927-7971]"
    }, {
      "left" : "private int mKeyboardBrightness;",
      "right" : "private int mKeyboardBrightness;",
      "info" : "FieldDeclaration[7976-8008]:FieldDeclaration[7976-8008]"
    }, {
      "left" : "private int mKeyboardBrightnessSettingDefault;",
      "right" : "private int mKeyboardBrightnessSettingDefault;",
      "info" : "FieldDeclaration[8013-8059]:FieldDeclaration[8013-8059]"
    }, {
      "left" : "private final Object mLock = new Object();",
      "right" : "private final Object mLock = new Object();",
      "info" : "FieldDeclaration[8065-8107]:FieldDeclaration[8065-8107]"
    }, {
      "left" : "private int mDirty;",
      "right" : "private int mDirty;",
      "info" : "FieldDeclaration[8225-8244]:FieldDeclaration[8225-8244]"
    }, {
      "left" : "private int mWakefulness;",
      "right" : "private int mWakefulness;",
      "info" : "FieldDeclaration[8412-8437]:FieldDeclaration[8412-8437]"
    }, {
      "left" : "private boolean mWakefulnessChanging;",
      "right" : "private boolean mWakefulnessChanging;",
      "info" : "FieldDeclaration[8442-8479]:FieldDeclaration[8442-8479]"
    }, {
      "left" : "private boolean mSandmanSummoned;",
      "right" : "private boolean mSandmanSummoned;",
      "info" : "FieldDeclaration[8651-8684]:FieldDeclaration[8651-8684]"
    }, {
      "left" : "private boolean mSandmanScheduled;",
      "right" : "private boolean mSandmanScheduled;",
      "info" : "FieldDeclaration[8737-8771]:FieldDeclaration[8737-8771]"
    }, {
      "left" : "private final ArrayList<SuspendBlocker> mSuspendBlockers = new ArrayList<SuspendBlocker>();",
      "right" : "private final ArrayList<SuspendBlocker> mSuspendBlockers = new ArrayList<SuspendBlocker>();",
      "info" : "FieldDeclaration[8859-8950]:FieldDeclaration[8859-8950]"
    }, {
      "left" : "private final ArrayList<WakeLock> mWakeLocks = new ArrayList<WakeLock>();",
      "right" : "private final ArrayList<WakeLock> mWakeLocks = new ArrayList<WakeLock>();",
      "info" : "FieldDeclaration[9013-9086]:FieldDeclaration[9013-9086]"
    }, {
      "left" : "private int mWakeLockSummary;",
      "right" : "private int mWakeLockSummary;",
      "info" : "FieldDeclaration[9161-9190]:FieldDeclaration[9161-9190]"
    }, {
      "left" : "private boolean mRequestWaitForNegativeProximity;",
      "right" : "private boolean mRequestWaitForNegativeProximity;",
      "info" : "FieldDeclaration[9330-9379]:FieldDeclaration[9330-9379]"
    }, {
      "left" : "private long mLastWakeTime;",
      "right" : "private long mLastWakeTime;",
      "info" : "FieldDeclaration[9458-9485]:FieldDeclaration[9458-9485]"
    }, {
      "left" : "private long mLastSleepTime;",
      "right" : "private long mLastSleepTime;",
      "info" : "FieldDeclaration[9490-9518]:FieldDeclaration[9490-9518]"
    }, {
      "left" : "private long mLastUserActivityTime;",
      "right" : "private long mLastUserActivityTime;",
      "info" : "FieldDeclaration[9576-9611]:FieldDeclaration[9576-9611]"
    }, {
      "left" : "private long mLastUserActivityTimeNoChangeLights;",
      "right" : "private long mLastUserActivityTimeNoChangeLights;",
      "info" : "FieldDeclaration[9616-9665]:FieldDeclaration[9616-9665]"
    }, {
      "left" : "private long mLastInteractivePowerHintTime;",
      "right" : "private long mLastInteractivePowerHintTime;",
      "info" : "FieldDeclaration[9720-9763]:FieldDeclaration[9720-9763]"
    }, {
      "left" : "private long mLastScreenBrightnessBoostTime;",
      "right" : "private long mLastScreenBrightnessBoostTime;",
      "info" : "FieldDeclaration[9823-9867]:FieldDeclaration[9823-9867]"
    }, {
      "left" : "private boolean mScreenBrightnessBoostInProgress;",
      "right" : "private boolean mScreenBrightnessBoostInProgress;",
      "info" : "FieldDeclaration[9872-9921]:FieldDeclaration[9872-9921]"
    }, {
      "left" : "private int mUserActivitySummary;",
      "right" : "private int mUserActivitySummary;",
      "info" : "FieldDeclaration[10000-10033]:FieldDeclaration[10000-10033]"
    }, {
      "left" : "private final DisplayPowerRequest mDisplayPowerRequest = new DisplayPowerRequest();",
      "right" : "private final DisplayPowerRequest mDisplayPowerRequest = new DisplayPowerRequest();",
      "info" : "FieldDeclaration[10203-10286]:FieldDeclaration[10203-10286]"
    }, {
      "left" : "private boolean mDisplayReady;",
      "right" : "private boolean mDisplayReady;",
      "info" : "FieldDeclaration[10444-10474]:FieldDeclaration[10444-10474]"
    }, {
      "left" : "private final SuspendBlocker mWakeLockSuspendBlocker;",
      "right" : "private final SuspendBlocker mWakeLockSuspendBlocker;",
      "info" : "FieldDeclaration[10587-10640]:FieldDeclaration[10587-10640]"
    }, {
      "left" : "private boolean mHoldingWakeLockSuspendBlocker;",
      "right" : "private boolean mHoldingWakeLockSuspendBlocker;",
      "info" : "FieldDeclaration[10710-10757]:FieldDeclaration[10710-10757]"
    }, {
      "left" : "private final SuspendBlocker mDisplaySuspendBlocker;",
      "right" : "private final SuspendBlocker mDisplaySuspendBlocker;",
      "info" : "FieldDeclaration[10950-11002]:FieldDeclaration[10950-11002]"
    }, {
      "left" : "private boolean mHoldingDisplaySuspendBlocker;",
      "right" : "private boolean mHoldingDisplaySuspendBlocker;",
      "info" : "FieldDeclaration[11070-11116]:FieldDeclaration[11070-11116]"
    }, {
      "left" : "private boolean mSystemReady;",
      "right" : "private boolean mSystemReady;",
      "info" : "FieldDeclaration[11168-11197]:FieldDeclaration[11168-11197]"
    }, {
      "left" : "private boolean mBootCompleted;",
      "right" : "private boolean mBootCompleted;",
      "info" : "FieldDeclaration[11286-11317]:FieldDeclaration[11286-11317]"
    }, {
      "left" : "private boolean mHalAutoSuspendModeEnabled;",
      "right" : "private boolean mHalAutoSuspendModeEnabled;",
      "info" : "FieldDeclaration[11399-11442]:FieldDeclaration[11399-11442]"
    }, {
      "left" : "private boolean mHalInteractiveModeEnabled;",
      "right" : "private boolean mHalInteractiveModeEnabled;",
      "info" : "FieldDeclaration[11517-11560]:FieldDeclaration[11517-11560]"
    }, {
      "left" : "private boolean mIsPowered;",
      "right" : "private boolean mIsPowered;",
      "info" : "FieldDeclaration[11624-11651]:FieldDeclaration[11624-11651]"
    }, {
      "left" : "private int mPlugType;",
      "right" : "private int mPlugType;",
      "info" : "FieldDeclaration[11736-11758]:FieldDeclaration[11736-11758]"
    }, {
      "left" : "private int mBatteryLevel;",
      "right" : "private int mBatteryLevel;",
      "info" : "FieldDeclaration[11809-11835]:FieldDeclaration[11809-11835]"
    }, {
      "left" : "private int mBatteryLevelWhenDreamStarted;",
      "right" : "private int mBatteryLevelWhenDreamStarted;",
      "info" : "FieldDeclaration[12069-12111]:FieldDeclaration[12069-12111]"
    }, {
      "left" : "private int mDockState = Intent.EXTRA_DOCK_STATE_UNDOCKED;",
      "right" : "private int mDockState = Intent.EXTRA_DOCK_STATE_UNDOCKED;",
      "info" : "FieldDeclaration[12148-12206]:FieldDeclaration[12148-12206]"
    }, {
      "left" : "private boolean mDecoupleHalAutoSuspendModeFromDisplayConfig;",
      "right" : "private boolean mDecoupleHalAutoSuspendModeFromDisplayConfig;",
      "info" : "FieldDeclaration[12278-12339]:FieldDeclaration[12278-12339]"
    }, {
      "left" : "private boolean mDecoupleHalInteractiveModeFromDisplayConfig;",
      "right" : "private boolean mDecoupleHalInteractiveModeFromDisplayConfig;",
      "info" : "FieldDeclaration[12410-12471]:FieldDeclaration[12410-12471]"
    }, {
      "left" : "private boolean mWakeUpWhenPluggedOrUnpluggedConfig;",
      "right" : "private boolean mWakeUpWhenPluggedOrUnpluggedConfig;",
      "info" : "FieldDeclaration[12545-12597]:FieldDeclaration[12545-12597]"
    }, {
      "left" : "private boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig;",
      "right" : "private boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig;",
      "info" : "FieldDeclaration[12687-12752]:FieldDeclaration[12687-12752]"
    }, {
      "left" : "private boolean mSuspendWhenScreenOffDueToProximityConfig;",
      "right" : "private boolean mSuspendWhenScreenOffDueToProximityConfig;",
      "info" : "FieldDeclaration[12840-12898]:FieldDeclaration[12840-12898]"
    }, {
      "left" : "private boolean mDreamsSupportedConfig;",
      "right" : "private boolean mDreamsSupportedConfig;",
      "info" : "FieldDeclaration[12956-12995]:FieldDeclaration[12956-12995]"
    }, {
      "left" : "private boolean mDreamsEnabledByDefaultConfig;",
      "right" : "private boolean mDreamsEnabledByDefaultConfig;",
      "info" : "FieldDeclaration[13041-13087]:FieldDeclaration[13041-13087]"
    }, {
      "left" : "private boolean mDreamsActivatedOnSleepByDefaultConfig;",
      "right" : "private boolean mDreamsActivatedOnSleepByDefaultConfig;",
      "info" : "FieldDeclaration[13143-13198]:FieldDeclaration[13143-13198]"
    }, {
      "left" : "private boolean mDreamsActivatedOnDockByDefaultConfig;",
      "right" : "private boolean mDreamsActivatedOnDockByDefaultConfig;",
      "info" : "FieldDeclaration[13253-13307]:FieldDeclaration[13253-13307]"
    }, {
      "left" : "private boolean mDreamsEnabledOnBatteryConfig;",
      "right" : "private boolean mDreamsEnabledOnBatteryConfig;",
      "info" : "FieldDeclaration[13365-13411]:FieldDeclaration[13365-13411]"
    }, {
      "left" : "private int mDreamsBatteryLevelMinimumWhenPoweredConfig;",
      "right" : "private int mDreamsBatteryLevelMinimumWhenPoweredConfig;",
      "info" : "FieldDeclaration[13524-13580]:FieldDeclaration[13524-13580]"
    }, {
      "left" : "private int mDreamsBatteryLevelMinimumWhenNotPoweredConfig;",
      "right" : "private int mDreamsBatteryLevelMinimumWhenNotPoweredConfig;",
      "info" : "FieldDeclaration[13697-13756]:FieldDeclaration[13697-13756]"
    }, {
      "left" : "private int mDreamsBatteryLevelDrainCutoffConfig;",
      "right" : "private int mDreamsBatteryLevelDrainCutoffConfig;",
      "info" : "FieldDeclaration[14016-14065]:FieldDeclaration[14016-14065]"
    }, {
      "left" : "private boolean mDreamsEnabledSetting;",
      "right" : "private boolean mDreamsEnabledSetting;",
      "info" : "FieldDeclaration[14118-14156]:FieldDeclaration[14118-14156]"
    }, {
      "left" : "private boolean mDreamsActivateOnSleepSetting;",
      "right" : "private boolean mDreamsActivateOnSleepSetting;",
      "info" : "FieldDeclaration[14214-14260]:FieldDeclaration[14214-14260]"
    }, {
      "left" : "private boolean mDreamsActivateOnDockSetting;",
      "right" : "private boolean mDreamsActivateOnDockSetting;",
      "info" : "FieldDeclaration[14317-14362]:FieldDeclaration[14317-14362]"
    }, {
      "left" : "private boolean mDozeAfterScreenOffConfig;",
      "right" : "private boolean mDozeAfterScreenOffConfig;",
      "info" : "FieldDeclaration[14449-14491]:FieldDeclaration[14449-14491]"
    }, {
      "left" : "private int mMinimumScreenOffTimeoutConfig;",
      "right" : "private int mMinimumScreenOffTimeoutConfig;",
      "info" : "FieldDeclaration[14553-14596]:FieldDeclaration[14553-14596]"
    }, {
      "left" : "private int mMaximumScreenDimDurationConfig;",
      "right" : "private int mMaximumScreenDimDurationConfig;",
      "info" : "FieldDeclaration[14785-14829]:FieldDeclaration[14785-14829]"
    }, {
      "left" : "private float mMaximumScreenDimRatioConfig;",
      "right" : "private float mMaximumScreenDimRatioConfig;",
      "info" : "FieldDeclaration[15151-15194]:FieldDeclaration[15151-15194]"
    }, {
      "left" : "private int mScreenOffTimeoutSetting;",
      "right" : "private int mScreenOffTimeoutSetting;",
      "info" : "FieldDeclaration[15261-15298]:FieldDeclaration[15261-15298]"
    }, {
      "left" : "private int mSleepTimeoutSetting;",
      "right" : "private int mSleepTimeoutSetting;",
      "info" : "FieldDeclaration[15360-15393]:FieldDeclaration[15360-15393]"
    }, {
      "left" : "private int mMaximumScreenOffTimeoutFromDeviceAdmin = Integer.MAX_VALUE;",
      "right" : "private int mMaximumScreenOffTimeoutFromDeviceAdmin = Integer.MAX_VALUE;",
      "info" : "FieldDeclaration[15528-15600]:FieldDeclaration[15528-15600]"
    }, {
      "left" : "private int mStayOnWhilePluggedInSetting;",
      "right" : "private int mStayOnWhilePluggedInSetting;",
      "info" : "FieldDeclaration[15731-15772]:FieldDeclaration[15731-15772]"
    }, {
      "left" : "private int mWakeUpWhenPluggedOrUnpluggedSetting;",
      "right" : "private int mWakeUpWhenPluggedOrUnpluggedSetting;",
      "info" : "FieldDeclaration[15845-15894]:FieldDeclaration[15845-15894]"
    }, {
      "left" : "private boolean mStayOn;",
      "right" : "private boolean mStayOn;",
      "info" : "FieldDeclaration[15942-15966]:FieldDeclaration[15942-15966]"
    }, {
      "left" : "private boolean mProximityPositive;",
      "right" : "private boolean mProximityPositive;",
      "info" : "FieldDeclaration[16033-16068]:FieldDeclaration[16033-16068]"
    }, {
      "left" : "private int mScreenBrightnessSettingMinimum;",
      "right" : "private int mScreenBrightnessSettingMinimum;",
      "info" : "FieldDeclaration[16115-16159]:FieldDeclaration[16115-16159]"
    }, {
      "left" : "private int mScreenBrightnessSettingMaximum;",
      "right" : "private int mScreenBrightnessSettingMaximum;",
      "info" : "FieldDeclaration[16164-16208]:FieldDeclaration[16164-16208]"
    }, {
      "left" : "private int mScreenBrightnessSettingDefault;",
      "right" : "private int mScreenBrightnessSettingDefault;",
      "info" : "FieldDeclaration[16213-16257]:FieldDeclaration[16213-16257]"
    }, {
      "left" : "private int mScreenBrightnessSetting;",
      "right" : "private int mScreenBrightnessSetting;",
      "info" : "FieldDeclaration[16356-16393]:FieldDeclaration[16356-16393]"
    }, {
      "left" : "private float mScreenAutoBrightnessAdjustmentSetting;",
      "right" : "private float mScreenAutoBrightnessAdjustmentSetting;",
      "info" : "FieldDeclaration[16507-16560]:FieldDeclaration[16507-16560]"
    }, {
      "left" : "private int mScreenBrightnessModeSetting;",
      "right" : "private int mScreenBrightnessModeSetting;",
      "info" : "FieldDeclaration[16671-16712]:FieldDeclaration[16671-16712]"
    }, {
      "left" : "private int mScreenBrightnessOverrideFromWindowManager = -1;",
      "right" : "private int mScreenBrightnessOverrideFromWindowManager = -1;",
      "info" : "FieldDeclaration[16890-16950]:FieldDeclaration[16890-16950]"
    }, {
      "left" : "private int mButtonBrightnessOverrideFromWindowManager = -1;",
      "right" : "private int mButtonBrightnessOverrideFromWindowManager = -1;",
      "info" : "FieldDeclaration[17135-17195]:FieldDeclaration[17135-17195]"
    }, {
      "left" : "private long mUserActivityTimeoutOverrideFromWindowManager = -1;",
      "right" : "private long mUserActivityTimeoutOverrideFromWindowManager = -1;",
      "info" : "FieldDeclaration[17380-17444]:FieldDeclaration[17380-17444]"
    }, {
      "left" : "private int mTemporaryScreenBrightnessSettingOverride = -1;",
      "right" : "private int mTemporaryScreenBrightnessSettingOverride = -1;",
      "info" : "FieldDeclaration[17616-17675]:FieldDeclaration[17616-17675]"
    }, {
      "left" : "private float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = Float.NaN;",
      "right" : "private float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = Float.NaN;",
      "info" : "FieldDeclaration[17909-17991]:FieldDeclaration[17909-17991]"
    }, {
      "left" : "private int mDozeScreenStateOverrideFromDreamManager = Display.STATE_UNKNOWN;",
      "right" : "private int mDozeScreenStateOverrideFromDreamManager = Display.STATE_UNKNOWN;",
      "info" : "FieldDeclaration[18042-18119]:FieldDeclaration[18042-18119]"
    }, {
      "left" : "private int mDozeScreenBrightnessOverrideFromDreamManager = PowerManager.BRIGHTNESS_DEFAULT;",
      "right" : "private int mDozeScreenBrightnessOverrideFromDreamManager = PowerManager.BRIGHTNESS_DEFAULT;",
      "info" : "FieldDeclaration[18175-18267]:FieldDeclaration[18175-18267]"
    }, {
      "left" : "private long mLastWarningAboutUserActivityPermission = Long.MIN_VALUE;",
      "right" : "private long mLastWarningAboutUserActivityPermission = Long.MIN_VALUE;",
      "info" : "FieldDeclaration[18364-18434]:FieldDeclaration[18364-18434]"
    }, {
      "left" : "private boolean mLowPowerModeEnabled;",
      "right" : "private boolean mLowPowerModeEnabled;",
      "info" : "FieldDeclaration[18489-18526]:FieldDeclaration[18489-18526]"
    }, {
      "left" : "private boolean mLowPowerModeSetting;",
      "right" : "private boolean mLowPowerModeSetting;",
      "info" : "FieldDeclaration[18584-18621]:FieldDeclaration[18584-18621]"
    }, {
      "left" : "private boolean mAutoLowPowerModeConfigured;",
      "right" : "private boolean mAutoLowPowerModeConfigured;",
      "info" : "FieldDeclaration[18706-18750]:FieldDeclaration[18706-18750]"
    }, {
      "left" : "private boolean mAutoLowPowerModeSnoozing;",
      "right" : "private boolean mAutoLowPowerModeSnoozing;",
      "info" : "FieldDeclaration[18822-18864]:FieldDeclaration[18822-18864]"
    }, {
      "left" : "private boolean mBatteryLevelLow;",
      "right" : "private boolean mBatteryLevelLow;",
      "info" : "FieldDeclaration[18932-18965]:FieldDeclaration[18932-18965]"
    }, {
      "left" : "private boolean mTheaterModeEnabled;",
      "right" : "private boolean mTheaterModeEnabled;",
      "info" : "FieldDeclaration[19010-19046]:FieldDeclaration[19010-19046]"
    }, {
      "left" : "private final ArrayList<PowerManagerInternal.LowPowerModeListener> mLowPowerModeListeners\n            = new ArrayList<PowerManagerInternal.LowPowerModeListener>();",
      "right" : "private final ArrayList<PowerManagerInternal.LowPowerModeListener> mLowPowerModeListeners\n            = new ArrayList<PowerManagerInternal.LowPowerModeListener>();",
      "info" : "FieldDeclaration[19052-19215]:FieldDeclaration[19052-19215]"
    }, {
      "left" : "private final ArrayList<Integer> mBlockedUids = new ArrayList<Integer>();",
      "right" : "private final ArrayList<Integer> mBlockedUids = new ArrayList<Integer>();",
      "info" : "FieldDeclaration[19251-19324]:FieldDeclaration[19251-19324]"
    }, {
      "left" : "private native void nativeInit();",
      "right" : "private native void nativeInit();",
      "info" : "MethodDeclaration[19330-19363]:MethodDeclaration[19330-19363]"
    }, {
      "left" : "private static native void nativeAcquireSuspendBlocker(String name);",
      "right" : "private static native void nativeAcquireSuspendBlocker(String name);",
      "info" : "MethodDeclaration[19369-19437]:MethodDeclaration[19369-19437]"
    }, {
      "left" : "private static native void nativeReleaseSuspendBlocker(String name);",
      "right" : "private static native void nativeReleaseSuspendBlocker(String name);",
      "info" : "MethodDeclaration[19442-19510]:MethodDeclaration[19442-19510]"
    }, {
      "left" : "private static native void nativeSetInteractive(boolean enable);",
      "right" : "private static native void nativeSetInteractive(boolean enable);",
      "info" : "MethodDeclaration[19515-19579]:MethodDeclaration[19515-19579]"
    }, {
      "left" : "private static native void nativeSetAutoSuspend(boolean enable);",
      "right" : "private static native void nativeSetAutoSuspend(boolean enable);",
      "info" : "MethodDeclaration[19584-19648]:MethodDeclaration[19584-19648]"
    }, {
      "left" : "private static native void nativeSendPowerHint(int hintId, int data);",
      "right" : "private static native void nativeSendPowerHint(int hintId, int data);",
      "info" : "MethodDeclaration[19653-19722]:MethodDeclaration[19653-19722]"
    }, {
      "left" : "private static native void nativeCpuBoost(int duration);",
      "right" : "private static native void nativeCpuBoost(int duration);",
      "info" : "MethodDeclaration[19727-19783]:MethodDeclaration[19727-19783]"
    }, {
      "left" : "static native void nativeSetPowerProfile(int profile);",
      "right" : "static native void nativeSetPowerProfile(int profile);",
      "info" : "MethodDeclaration[19788-19842]:MethodDeclaration[19788-19842]"
    }, {
      "left" : "private boolean mKeyboardVisible = false;",
      "right" : "private boolean mKeyboardVisible = false;",
      "info" : "FieldDeclaration[19847-19888]:FieldDeclaration[19847-19888]"
    }, {
      "left" : "private SensorManager mSensorManager;",
      "right" : "private SensorManager mSensorManager;",
      "info" : "FieldDeclaration[19894-19931]:FieldDeclaration[19894-19931]"
    }, {
      "left" : "private Sensor mProximitySensor;",
      "right" : "private Sensor mProximitySensor;",
      "info" : "FieldDeclaration[19936-19968]:FieldDeclaration[19936-19968]"
    }, {
      "left" : "private boolean mProximityWakeEnabled;",
      "right" : "private boolean mProximityWakeEnabled;",
      "info" : "FieldDeclaration[19973-20011]:FieldDeclaration[19973-20011]"
    }, {
      "left" : "private int mProximityTimeOut;",
      "right" : "private int mProximityTimeOut;",
      "info" : "FieldDeclaration[20016-20046]:FieldDeclaration[20016-20046]"
    }, {
      "left" : "private boolean mProximityWakeSupported;",
      "right" : "private boolean mProximityWakeSupported;",
      "info" : "FieldDeclaration[20051-20091]:FieldDeclaration[20051-20091]"
    }, {
      "left" : "android.os.PowerManager.WakeLock mProximityWakeLock;",
      "right" : "android.os.PowerManager.WakeLock mProximityWakeLock;",
      "info" : "FieldDeclaration[20096-20148]:FieldDeclaration[20096-20148]"
    }, {
      "left" : "SensorEventListener mProximityListener;",
      "right" : "SensorEventListener mProximityListener;",
      "info" : "FieldDeclaration[20153-20192]:FieldDeclaration[20153-20192]"
    }, {
      "left" : "private PerformanceManager mPerformanceManager;",
      "right" : "private PerformanceManager mPerformanceManager;",
      "info" : "FieldDeclaration[20198-20245]:FieldDeclaration[20198-20245]"
    }, {
      "left" : "public PowerManagerService(Context context)",
      "right" : "public PowerManagerService(Context context)",
      "info" : "MethodDeclaration[20251-21396]:MethodDeclaration[20251-21396]"
    }, {
      "left" : "public void onStart()",
      "right" : "public void onStart()",
      "info" : "MethodDeclaration[21402-21698]:MethodDeclaration[21402-21698]"
    }, {
      "left" : "public void onBootPhase(int phase)",
      "right" : "public void onBootPhase(int phase)",
      "info" : "MethodDeclaration[21704-22191]:MethodDeclaration[21704-22191]"
    }, {
      "left" : "public void systemReady(IAppOpsService appOps)",
      "right" : "public void systemReady(IAppOpsService appOps)",
      "info" : "MethodDeclaration[22197-29377]:MethodDeclaration[22197-29377]"
    }, {
      "left" : "private void readConfigurationLocked()",
      "right" : "private void readConfigurationLocked()",
      "info" : "MethodDeclaration[29383-32618]:MethodDeclaration[29383-32618]"
    }, {
      "left" : "private void updateSettingsLocked()",
      "right" : "private void updateSettingsLocked()",
      "info" : "MethodDeclaration[32624-36873]:MethodDeclaration[32624-36873]"
    }, {
      "left" : "void updateLowPowerModeLocked()",
      "right" : "void updateLowPowerModeLocked()",
      "info" : "MethodDeclaration[36879-38934]:MethodDeclaration[36879-38934]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[37840-38902]:MethodDeclaration[37840-38902]"
    }, {
      "left" : "private void handleSettingsChangedLocked()",
      "right" : "private void handleSettingsChangedLocked()",
      "info" : "MethodDeclaration[38940-39056]:MethodDeclaration[38940-39056]"
    }, {
      "left" : "private void acquireWakeLockInternal(IBinder lock, int flags, String tag, String packageName,\n            WorkSource ws, String historyTag, int uid, int pid)",
      "right" : "private void acquireWakeLockInternal(IBinder lock, int flags, String tag, String packageName,\n            WorkSource ws, String historyTag, int uid, int pid)",
      "info" : "MethodDeclaration[39062-41731]:MethodDeclaration[39062-41731]"
    }, {
      "left" : "private static boolean isScreenLock(final WakeLock wakeLock)",
      "right" : "private static boolean isScreenLock(final WakeLock wakeLock)",
      "info" : "MethodDeclaration[41737-42127]:MethodDeclaration[41737-42127]"
    }, {
      "left" : "private void applyWakeLockFlagsOnAcquireLocked(WakeLock wakeLock, int uid)",
      "right" : "private void applyWakeLockFlagsOnAcquireLocked(WakeLock wakeLock, int uid)",
      "info" : "MethodDeclaration[42133-42409]:MethodDeclaration[42133-42409]"
    }, {
      "left" : "private void releaseWakeLockInternal(IBinder lock, int flags)",
      "right" : "private void releaseWakeLockInternal(IBinder lock, int flags)",
      "info" : "MethodDeclaration[42415-43416]:MethodDeclaration[42415-43416]"
    }, {
      "left" : "private void handleWakeLockDeath(WakeLock wakeLock)",
      "right" : "private void handleWakeLockDeath(WakeLock wakeLock)",
      "info" : "MethodDeclaration[43422-43887]:MethodDeclaration[43422-43887]"
    }, {
      "left" : "private void removeWakeLockLocked(WakeLock wakeLock, int index)",
      "right" : "private void removeWakeLockLocked(WakeLock wakeLock, int index)",
      "info" : "MethodDeclaration[43893-44170]:MethodDeclaration[43893-44170]"
    }, {
      "left" : "private void applyWakeLockFlagsOnReleaseLocked(WakeLock wakeLock)",
      "right" : "private void applyWakeLockFlagsOnReleaseLocked(WakeLock wakeLock)",
      "info" : "MethodDeclaration[44176-44609]:MethodDeclaration[44176-44609]"
    }, {
      "left" : "private void updateWakeLockWorkSourceInternal(IBinder lock, WorkSource ws, String historyTag,\n            int callingUid)",
      "right" : "private void updateWakeLockWorkSourceInternal(IBinder lock, WorkSource ws, String historyTag,\n            int callingUid)",
      "info" : "MethodDeclaration[44615-46222]:MethodDeclaration[44615-46222]"
    }, {
      "left" : "private boolean checkWorkSourceObjectId(int uid, WakeLock wl)",
      "right" : "private boolean checkWorkSourceObjectId(int uid, WakeLock wl)",
      "info" : "MethodDeclaration[46228-46671]:MethodDeclaration[46228-46671]"
    }, {
      "left" : "private int findWakeLockIndexLocked(IBinder lock)",
      "right" : "private int findWakeLockIndexLocked(IBinder lock)",
      "info" : "MethodDeclaration[46677-46941]:MethodDeclaration[46677-46941]"
    }, {
      "left" : "private void notifyWakeLockAcquiredLocked(WakeLock wakeLock)",
      "right" : "private void notifyWakeLockAcquiredLocked(WakeLock wakeLock)",
      "info" : "MethodDeclaration[46947-47321]:MethodDeclaration[46947-47321]"
    }, {
      "left" : "private void notifyWakeLockChangingLocked(WakeLock wakeLock, int flags, String tag,\n            String packageName, int uid, int pid, WorkSource ws, String historyTag)",
      "right" : "private void notifyWakeLockChangingLocked(WakeLock wakeLock, int flags, String tag,\n            String packageName, int uid, int pid, WorkSource ws, String historyTag)",
      "info" : "MethodDeclaration[47327-47842]:MethodDeclaration[47327-47842]"
    }, {
      "left" : "private void notifyWakeLockReleasedLocked(WakeLock wakeLock)",
      "right" : "private void notifyWakeLockReleasedLocked(WakeLock wakeLock)",
      "info" : "MethodDeclaration[47848-48253]:MethodDeclaration[47848-48253]"
    }, {
      "left" : "private boolean isWakeLockLevelSupportedInternal(int level)",
      "right" : "private boolean isWakeLockLevelSupportedInternal(int level)",
      "info" : "MethodDeclaration[48259-48972]:MethodDeclaration[48259-48972]"
    }, {
      "left" : "private boolean isQuickBootCall()",
      "right" : "private boolean isQuickBootCall()",
      "info" : "MethodDeclaration[48978-49649]:MethodDeclaration[48978-49649]"
    }, {
      "left" : "private void userActivityFromNative(long eventTime, int event, int flags)",
      "right" : "private void userActivityFromNative(long eventTime, int event, int flags)",
      "info" : "MethodDeclaration[49687-49843]:MethodDeclaration[49687-49843]"
    }, {
      "left" : "private void userActivityInternal(long eventTime, int event, int flags, int uid)",
      "right" : "private void userActivityInternal(long eventTime, int event, int flags, int uid)",
      "info" : "MethodDeclaration[49849-50110]:MethodDeclaration[49849-50110]"
    }, {
      "left" : "private boolean userActivityNoUpdateLocked(long eventTime, int event, int flags, int uid)",
      "right" : "private boolean userActivityNoUpdateLocked(long eventTime, int event, int flags, int uid)",
      "info" : "MethodDeclaration[50116-51912]:MethodDeclaration[50116-51912]"
    }, {
      "left" : "private void wakeUpInternal(long eventTime, int uid)",
      "right" : "private void wakeUpInternal(long eventTime, int uid)",
      "info" : "MethodDeclaration[51918-52131]:MethodDeclaration[51918-52131]"
    }, {
      "left" : "private boolean wakeUpNoUpdateLocked(long eventTime, int uid)",
      "right" : "private boolean wakeUpNoUpdateLocked(long eventTime, int uid)",
      "info" : "MethodDeclaration[52137-53381]:MethodDeclaration[52137-53381]"
    }, {
      "left" : "private void enableQbCharger(boolean enable)",
      "right" : "private void enableQbCharger(boolean enable)",
      "info" : "MethodDeclaration[53387-53863]:MethodDeclaration[53387-53863]"
    }, {
      "left" : "private void goToSleepInternal(long eventTime, int reason, int flags, int uid)",
      "right" : "private void goToSleepInternal(long eventTime, int reason, int flags, int uid)",
      "info" : "MethodDeclaration[53869-54126]:MethodDeclaration[53869-54126]"
    }, {
      "left" : "private boolean goToSleepNoUpdateLocked(long eventTime, int reason, int flags, int uid)",
      "right" : "private boolean goToSleepNoUpdateLocked(long eventTime, int reason, int flags, int uid)",
      "info" : "MethodDeclaration[54260-57314]:MethodDeclaration[54260-57314]"
    }, {
      "left" : "private void napInternal(long eventTime, int uid)",
      "right" : "private void napInternal(long eventTime, int uid)",
      "info" : "MethodDeclaration[57320-57527]:MethodDeclaration[57320-57527]"
    }, {
      "left" : "private boolean napNoUpdateLocked(long eventTime, int uid)",
      "right" : "private boolean napNoUpdateLocked(long eventTime, int uid)",
      "info" : "MethodDeclaration[57533-58216]:MethodDeclaration[57533-58216]"
    }, {
      "left" : "private boolean reallyGoToSleepNoUpdateLocked(long eventTime, int uid)",
      "right" : "private boolean reallyGoToSleepNoUpdateLocked(long eventTime, int uid)",
      "info" : "MethodDeclaration[58275-59014]:MethodDeclaration[58275-59014]"
    }, {
      "left" : "private void setWakefulnessLocked(int wakefulness, int reason)",
      "right" : "private void setWakefulnessLocked(int wakefulness, int reason)",
      "info" : "MethodDeclaration[59020-59382]:MethodDeclaration[59020-59382]"
    }, {
      "left" : "private void finishWakefulnessChangeLocked()",
      "right" : "private void finishWakefulnessChangeLocked()",
      "info" : "MethodDeclaration[59388-59593]:MethodDeclaration[59388-59593]"
    }, {
      "left" : "private void updatePowerStateLocked()",
      "right" : "private void updatePowerStateLocked()",
      "info" : "MethodDeclaration[59599-61944]:MethodDeclaration[59599-61944]"
    }, {
      "left" : "private void updateIsPoweredLocked(int dirty)",
      "right" : "private void updateIsPoweredLocked(int dirty)",
      "info" : "MethodDeclaration[61950-64839]:MethodDeclaration[61950-64839]"
    }, {
      "left" : "private boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(\n            boolean wasPowered, int oldPlugType, boolean dockedOnWirelessCharger)",
      "right" : "private boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(\n            boolean wasPowered, int oldPlugType, boolean dockedOnWirelessCharger)",
      "info" : "MethodDeclaration[64845-66262]:MethodDeclaration[64845-66262]"
    }, {
      "left" : "private void updateStayOnLocked(int dirty)",
      "right" : "private void updateStayOnLocked(int dirty)",
      "info" : "MethodDeclaration[66268-66934]:MethodDeclaration[66268-66934]"
    }, {
      "left" : "private void updateWakeLockSummaryLocked(int dirty)",
      "right" : "private void updateWakeLockSummaryLocked(int dirty)",
      "info" : "MethodDeclaration[66940-70022]:MethodDeclaration[66940-70022]"
    }, {
      "left" : "private void updateUserActivitySummaryLocked(long now, int dirty)",
      "right" : "private void updateUserActivitySummaryLocked(long now, int dirty)",
      "info" : "MethodDeclaration[70028-75626]:MethodDeclaration[70028-75626]"
    }, {
      "left" : "private void handleUserActivityTimeout()",
      "right" : "private void handleUserActivityTimeout()",
      "info" : "MethodDeclaration[75632-76332]:MethodDeclaration[75632-76332]"
    }, {
      "left" : "private int getSleepTimeoutLocked()",
      "right" : "private int getSleepTimeoutLocked()",
      "info" : "MethodDeclaration[76338-76552]:MethodDeclaration[76338-76552]"
    }, {
      "left" : "private int getScreenOffTimeoutLocked(int sleepTimeout)",
      "right" : "private int getScreenOffTimeoutLocked(int sleepTimeout)",
      "info" : "MethodDeclaration[76558-77166]:MethodDeclaration[76558-77166]"
    }, {
      "left" : "private int getScreenDimDurationLocked(int screenOffTimeout)",
      "right" : "private int getScreenDimDurationLocked(int screenOffTimeout)",
      "info" : "MethodDeclaration[77172-77370]:MethodDeclaration[77172-77370]"
    }, {
      "left" : "private boolean updateWakefulnessLocked(int dirty)",
      "right" : "private boolean updateWakefulnessLocked(int dirty)",
      "info" : "MethodDeclaration[77376-78684]:MethodDeclaration[77376-78684]"
    }, {
      "left" : "private boolean shouldNapAtBedTimeLocked()",
      "right" : "private boolean shouldNapAtBedTimeLocked()",
      "info" : "MethodDeclaration[78690-79072]:MethodDeclaration[78690-79072]"
    }, {
      "left" : "private boolean isItBedTimeYetLocked()",
      "right" : "private boolean isItBedTimeYetLocked()",
      "info" : "MethodDeclaration[79078-79393]:MethodDeclaration[79078-79393]"
    }, {
      "left" : "private boolean isBeingKeptAwakeLocked()",
      "right" : "private boolean isBeingKeptAwakeLocked()",
      "info" : "MethodDeclaration[79399-80205]:MethodDeclaration[79399-80205]"
    }, {
      "left" : "private void updateDreamLocked(int dirty, boolean displayBecameReady)",
      "right" : "private void updateDreamLocked(int dirty, boolean displayBecameReady)",
      "info" : "MethodDeclaration[80211-80853]:MethodDeclaration[80211-80853]"
    }, {
      "left" : "private void scheduleSandmanLocked()",
      "right" : "private void scheduleSandmanLocked()",
      "info" : "MethodDeclaration[80859-81126]:MethodDeclaration[80859-81126]"
    }, {
      "left" : "private void handleSandman()",
      "right" : "private void handleSandman()",
      "info" : "MethodDeclaration[81132-85591]:MethodDeclaration[81132-85591]"
    }, {
      "left" : "private boolean canDreamLocked()",
      "right" : "private boolean canDreamLocked()",
      "info" : "MethodDeclaration[85597-86799]:MethodDeclaration[85597-86799]"
    }, {
      "left" : "private boolean canDozeLocked()",
      "right" : "private boolean canDozeLocked()",
      "info" : "MethodDeclaration[86805-86986]:MethodDeclaration[86805-86986]"
    }, {
      "left" : "private boolean updateDisplayPowerStateLocked(int dirty)",
      "right" : "private boolean updateDisplayPowerStateLocked(int dirty)",
      "info" : "MethodDeclaration[86992-91626]:MethodDeclaration[86992-91626]"
    }, {
      "left" : "private void updateScreenBrightnessBoostLocked(int dirty)",
      "right" : "private void updateScreenBrightnessBoostLocked(int dirty)",
      "info" : "MethodDeclaration[91632-92716]:MethodDeclaration[91632-92716]"
    }, {
      "left" : "private static boolean isValidBrightness(int value)",
      "right" : "private static boolean isValidBrightness(int value)",
      "info" : "MethodDeclaration[92722-92824]:MethodDeclaration[92722-92824]"
    }, {
      "left" : "private static boolean isValidAutoBrightnessAdjustment(float value)",
      "right" : "private static boolean isValidAutoBrightnessAdjustment(float value)",
      "info" : "MethodDeclaration[92830-93003]:MethodDeclaration[92830-93003]"
    }, {
      "left" : "private int getDesiredScreenPolicyLocked()",
      "right" : "private int getDesiredScreenPolicyLocked()",
      "info" : "MethodDeclaration[93009-93997]:MethodDeclaration[93009-93997]"
    }, {
      "left" : "private final DisplayManagerInternal.DisplayPowerCallbacks mDisplayPowerCallbacks =\n            new DisplayManagerInternal.DisplayPowerCallbacks() {\n        private int mDisplayState = Display.STATE_UNKNOWN;\n\n        @Override\n        public void onStateChanged() {\n            synchronized (mLock) {\n                mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onProximityPositive() {\n            synchronized (mLock) {\n                mProximityPositive = true;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onProximityNegative() {\n            synchronized (mLock) {\n                mProximityPositive = false;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onDisplayStateChange(int state) {\n            // This method is only needed to support legacy display blanking behavior\n            // where the display's power state is coupled to suspend or to the power HAL.\n            // The order of operations matters here.\n            synchronized (mLock) {\n                if (mDisplayState != state) {\n                    mDisplayState = state;\n                    if (state == Display.STATE_OFF) {\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(false);\n                        }\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(true);\n                        }\n                    } else {\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(false);\n                        }\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(true);\n                        }\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void acquireSuspendBlocker() {\n            mDisplaySuspendBlocker.acquire();\n        }\n\n        @Override\n        public void releaseSuspendBlocker() {\n            mDisplaySuspendBlocker.release();\n        }\n\n        @Override\n        public String toString() {\n            synchronized (this) {\n                return \"state=\" + Display.stateToString(mDisplayState);\n            }\n        }\n    };",
      "right" : "private final DisplayManagerInternal.DisplayPowerCallbacks mDisplayPowerCallbacks =\n            new DisplayManagerInternal.DisplayPowerCallbacks() {\n        private int mDisplayState = Display.STATE_UNKNOWN;\n\n        @Override\n        public void onStateChanged() {\n            synchronized (mLock) {\n                mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onProximityPositive() {\n            synchronized (mLock) {\n                mProximityPositive = true;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onProximityNegative() {\n            synchronized (mLock) {\n                mProximityPositive = false;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }\n\n        @Override\n        public void onDisplayStateChange(int state) {\n            // This method is only needed to support legacy display blanking behavior\n            // where the display's power state is coupled to suspend or to the power HAL.\n            // The order of operations matters here.\n            synchronized (mLock) {\n                if (mDisplayState != state) {\n                    mDisplayState = state;\n                    if (state == Display.STATE_OFF) {\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(false);\n                        }\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(true);\n                        }\n                    } else {\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(false);\n                        }\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(true);\n                        }\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void acquireSuspendBlocker() {\n            mDisplaySuspendBlocker.acquire();\n        }\n\n        @Override\n        public void releaseSuspendBlocker() {\n            mDisplaySuspendBlocker.release();\n        }\n\n        @Override\n        public String toString() {\n            synchronized (this) {\n                return \"state=\" + Display.stateToString(mDisplayState);\n            }\n        }\n    };",
      "info" : "FieldDeclaration[94003-96787]:FieldDeclaration[94003-96787]"
    }, {
      "left" : "private int mDisplayState = Display.STATE_UNKNOWN;",
      "right" : "private int mDisplayState = Display.STATE_UNKNOWN;",
      "info" : "FieldDeclaration[94160-94210]:FieldDeclaration[94160-94210]"
    }, {
      "left" : "public void onStateChanged()",
      "right" : "public void onStateChanged()",
      "info" : "MethodDeclaration[94220-94437]:MethodDeclaration[94220-94437]"
    }, {
      "left" : "public void onProximityPositive()",
      "right" : "public void onProximityPositive()",
      "info" : "MethodDeclaration[94447-94696]:MethodDeclaration[94447-94696]"
    }, {
      "left" : "public void onProximityNegative()",
      "right" : "public void onProximityNegative()",
      "info" : "MethodDeclaration[94706-95115]:MethodDeclaration[94706-95115]"
    }, {
      "left" : "public void onDisplayStateChange(int state)",
      "right" : "public void onDisplayStateChange(int state)",
      "info" : "MethodDeclaration[95125-96354]:MethodDeclaration[95125-96354]"
    }, {
      "left" : "public void acquireSuspendBlocker()",
      "right" : "public void acquireSuspendBlocker()",
      "info" : "MethodDeclaration[96364-96475]:MethodDeclaration[96364-96475]"
    }, {
      "left" : "public void releaseSuspendBlocker()",
      "right" : "public void releaseSuspendBlocker()",
      "info" : "MethodDeclaration[96485-96596]:MethodDeclaration[96485-96596]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[96606-96780]:MethodDeclaration[96606-96780]"
    }, {
      "left" : "private boolean shouldUseProximitySensorLocked()",
      "right" : "private boolean shouldUseProximitySensorLocked()",
      "info" : "MethodDeclaration[96793-96922]:MethodDeclaration[96793-96922]"
    }, {
      "left" : "private void updateSuspendBlockerLocked()",
      "right" : "private void updateSuspendBlockerLocked()",
      "info" : "MethodDeclaration[96928-99683]:MethodDeclaration[96928-99683]"
    }, {
      "left" : "private boolean needDisplaySuspendBlockerLocked()",
      "right" : "private boolean needDisplaySuspendBlockerLocked()",
      "info" : "MethodDeclaration[99689-100738]:MethodDeclaration[99689-100738]"
    }, {
      "left" : "private void setHalAutoSuspendModeLocked(boolean enable)",
      "right" : "private void setHalAutoSuspendModeLocked(boolean enable)",
      "info" : "MethodDeclaration[100744-101280]:MethodDeclaration[100744-101280]"
    }, {
      "left" : "private void setHalInteractiveModeLocked(boolean enable)",
      "right" : "private void setHalInteractiveModeLocked(boolean enable)",
      "info" : "MethodDeclaration[101286-101821]:MethodDeclaration[101286-101821]"
    }, {
      "left" : "private boolean isInteractiveInternal()",
      "right" : "private boolean isInteractiveInternal()",
      "info" : "MethodDeclaration[101827-101984]:MethodDeclaration[101827-101984]"
    }, {
      "left" : "private boolean isLowPowerModeInternal()",
      "right" : "private boolean isLowPowerModeInternal()",
      "info" : "MethodDeclaration[101990-102120]:MethodDeclaration[101990-102120]"
    }, {
      "left" : "private boolean setLowPowerModeInternal(boolean mode)",
      "right" : "private boolean setLowPowerModeInternal(boolean mode)",
      "info" : "MethodDeclaration[102126-103280]:MethodDeclaration[102126-103280]"
    }, {
      "left" : "private void handleBatteryStateChangedLocked()",
      "right" : "private void handleBatteryStateChangedLocked()",
      "info" : "MethodDeclaration[103286-103413]:MethodDeclaration[103286-103413]"
    }, {
      "left" : "private void shutdownOrRebootInternal(final boolean shutdown, final boolean confirm,\n            final String reason, boolean wait)",
      "right" : "private void shutdownOrRebootInternal(final boolean shutdown, final boolean confirm,\n            final String reason, boolean wait)",
      "info" : "MethodDeclaration[103419-104692]:MethodDeclaration[103419-104692]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[103759-104099]:MethodDeclaration[103759-104099]"
    }, {
      "left" : "private void crashInternal(final String message)",
      "right" : "private void crashInternal(final String message)",
      "info" : "MethodDeclaration[104698-105091]:MethodDeclaration[104698-105091]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[104824-104932]:MethodDeclaration[104824-104932]"
    }, {
      "left" : "private void setStayOnSettingInternal(int val)",
      "right" : "private void setStayOnSettingInternal(int val)",
      "info" : "MethodDeclaration[105097-105277]:MethodDeclaration[105097-105277]"
    }, {
      "left" : "private void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int timeMs)",
      "right" : "private void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int timeMs)",
      "info" : "MethodDeclaration[105283-105544]:MethodDeclaration[105283-105544]"
    }, {
      "left" : "private boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()",
      "right" : "private boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()",
      "info" : "MethodDeclaration[105550-105770]:MethodDeclaration[105550-105770]"
    }, {
      "left" : "private void setAttentionLightInternal(boolean on, int color)",
      "right" : "private void setAttentionLightInternal(boolean on, int color)",
      "info" : "MethodDeclaration[105776-106137]:MethodDeclaration[105776-106137]"
    }, {
      "left" : "private void boostScreenBrightnessInternal(long eventTime, int uid)",
      "right" : "private void boostScreenBrightnessInternal(long eventTime, int uid)",
      "info" : "MethodDeclaration[106143-106830]:MethodDeclaration[106143-106830]"
    }, {
      "left" : "private void handleScreenBrightnessBoostTimeout()",
      "right" : "private void handleScreenBrightnessBoostTimeout()",
      "info" : "MethodDeclaration[106836-107375]:MethodDeclaration[106836-107375]"
    }, {
      "left" : "private void setScreenBrightnessOverrideFromWindowManagerInternal(int brightness)",
      "right" : "private void setScreenBrightnessOverrideFromWindowManagerInternal(int brightness)",
      "info" : "MethodDeclaration[107381-107758]:MethodDeclaration[107381-107758]"
    }, {
      "left" : "private void setUserActivityTimeoutOverrideFromWindowManagerInternal(long timeoutMillis)",
      "right" : "private void setUserActivityTimeoutOverrideFromWindowManagerInternal(long timeoutMillis)",
      "info" : "MethodDeclaration[107764-108160]:MethodDeclaration[107764-108160]"
    }, {
      "left" : "private void setTemporaryScreenBrightnessSettingOverrideInternal(int brightness)",
      "right" : "private void setTemporaryScreenBrightnessSettingOverrideInternal(int brightness)",
      "info" : "MethodDeclaration[108166-108540]:MethodDeclaration[108166-108540]"
    }, {
      "left" : "private void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float adj)",
      "right" : "private void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float adj)",
      "info" : "MethodDeclaration[108546-109069]:MethodDeclaration[108546-109069]"
    }, {
      "left" : "private void setDozeOverrideFromDreamManagerInternal(\n            int screenState, int screenBrightness)",
      "right" : "private void setDozeOverrideFromDreamManagerInternal(\n            int screenState, int screenBrightness)",
      "info" : "MethodDeclaration[109075-109644]:MethodDeclaration[109075-109644]"
    }, {
      "left" : "private void powerHintInternal(int hintId, int data)",
      "right" : "private void powerHintInternal(int hintId, int data)",
      "info" : "MethodDeclaration[109650-109753]:MethodDeclaration[109650-109753]"
    }, {
      "left" : "public static void lowLevelShutdown()",
      "right" : "public static void lowLevelShutdown()",
      "info" : "MethodDeclaration[109759-110041]:MethodDeclaration[109759-110041]"
    }, {
      "left" : "public static void lowLevelReboot(String reason)",
      "right" : "public static void lowLevelReboot(String reason)",
      "info" : "MethodDeclaration[110047-111433]:MethodDeclaration[110047-111433]"
    }, {
      "left" : "// Watchdog.Monitor implementation\n    public void monitor()",
      "right" : "// Watchdog.Monitor implementation\n    public void monitor()",
      "info" : "MethodDeclaration[111439-111633]:MethodDeclaration[111439-111633]"
    }, {
      "left" : "private void dumpInternal(PrintWriter pw)",
      "right" : "private void dumpInternal(PrintWriter pw)",
      "info" : "MethodDeclaration[111639-120157]:MethodDeclaration[111639-120157]"
    }, {
      "left" : "private SuspendBlocker createSuspendBlockerLocked(String name)",
      "right" : "private SuspendBlocker createSuspendBlockerLocked(String name)",
      "info" : "MethodDeclaration[120163-120380]:MethodDeclaration[120163-120380]"
    }, {
      "left" : "private static WorkSource copyWorkSource(WorkSource workSource)",
      "right" : "private static WorkSource copyWorkSource(WorkSource workSource)",
      "info" : "MethodDeclaration[120386-120528]:MethodDeclaration[120386-120528]"
    }, {
      "left" : "BatteryReceiver",
      "right" : "BatteryReceiver",
      "info" : "TypeDeclaration[120534-120795]:TypeDeclaration[120534-120795]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[120606-120789]:MethodDeclaration[120606-120789]"
    }, {
      "left" : "DreamReceiver",
      "right" : "DreamReceiver",
      "info" : "TypeDeclaration[120801-121050]:TypeDeclaration[120801-121050]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[120871-121044]:MethodDeclaration[120871-121044]"
    }, {
      "left" : "UserSwitchedReceiver",
      "right" : "UserSwitchedReceiver",
      "info" : "TypeDeclaration[121056-121318]:TypeDeclaration[121056-121318]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[121133-121312]:MethodDeclaration[121133-121312]"
    }, {
      "left" : "DockReceiver",
      "right" : "DockReceiver",
      "info" : "TypeDeclaration[121324-121869]:TypeDeclaration[121324-121869]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[121393-121863]:MethodDeclaration[121393-121863]"
    }, {
      "left" : "SettingsObserver",
      "right" : "SettingsObserver",
      "info" : "TypeDeclaration[121875-122217]:TypeDeclaration[121875-122217]"
    }, {
      "left" : "public SettingsObserver(Handler handler)",
      "right" : "public SettingsObserver(Handler handler)",
      "info" : "MethodDeclaration[121946-122026]:MethodDeclaration[121946-122026]"
    }, {
      "left" : "public void onChange(boolean selfChange, Uri uri)",
      "right" : "public void onChange(boolean selfChange, Uri uri)",
      "info" : "MethodDeclaration[122036-122211]:MethodDeclaration[122036-122211]"
    }, {
      "left" : "PowerManagerHandler",
      "right" : "PowerManagerHandler",
      "info" : "TypeDeclaration[122223-123126]:TypeDeclaration[122223-123126]"
    }, {
      "left" : "public PowerManagerHandler(Looper looper)",
      "right" : "public PowerManagerHandler(Looper looper)",
      "info" : "MethodDeclaration[122380-122482]:MethodDeclaration[122380-122482]"
    }, {
      "left" : "public void handleMessage(Message msg)",
      "right" : "public void handleMessage(Message msg)",
      "info" : "MethodDeclaration[122492-123120]:MethodDeclaration[122492-123120]"
    }, {
      "left" : "WakeLock",
      "right" : "WakeLock",
      "info" : "TypeDeclaration[123132-127355]:TypeDeclaration[123132-127355]"
    }, {
      "left" : "public final IBinder mLock;",
      "right" : "public final IBinder mLock;",
      "info" : "FieldDeclaration[123293-123320]:FieldDeclaration[123293-123320]"
    }, {
      "left" : "public int mFlags;",
      "right" : "public int mFlags;",
      "info" : "FieldDeclaration[123329-123347]:FieldDeclaration[123329-123347]"
    }, {
      "left" : "public String mTag;",
      "right" : "public String mTag;",
      "info" : "FieldDeclaration[123356-123375]:FieldDeclaration[123356-123375]"
    }, {
      "left" : "public final String mPackageName;",
      "right" : "public final String mPackageName;",
      "info" : "FieldDeclaration[123384-123417]:FieldDeclaration[123384-123417]"
    }, {
      "left" : "public WorkSource mWorkSource;",
      "right" : "public WorkSource mWorkSource;",
      "info" : "FieldDeclaration[123426-123456]:FieldDeclaration[123426-123456]"
    }, {
      "left" : "public String mHistoryTag;",
      "right" : "public String mHistoryTag;",
      "info" : "FieldDeclaration[123465-123491]:FieldDeclaration[123465-123491]"
    }, {
      "left" : "public final int mOwnerUid;",
      "right" : "public final int mOwnerUid;",
      "info" : "FieldDeclaration[123500-123527]:FieldDeclaration[123500-123527]"
    }, {
      "left" : "public final int mOwnerPid;",
      "right" : "public final int mOwnerPid;",
      "info" : "FieldDeclaration[123536-123563]:FieldDeclaration[123536-123563]"
    }, {
      "left" : "public boolean mNotifiedAcquired;",
      "right" : "public boolean mNotifiedAcquired;",
      "info" : "FieldDeclaration[123572-123605]:FieldDeclaration[123572-123605]"
    }, {
      "left" : "public WakeLock(IBinder lock, int flags, String tag, String packageName,\n                WorkSource workSource, String historyTag, int ownerUid, int ownerPid)",
      "right" : "public WakeLock(IBinder lock, int flags, String tag, String packageName,\n                WorkSource workSource, String historyTag, int ownerUid, int ownerPid)",
      "info" : "MethodDeclaration[123615-124063]:MethodDeclaration[123615-124063]"
    }, {
      "left" : "public void binderDied()",
      "right" : "public void binderDied()",
      "info" : "MethodDeclaration[124073-124191]:MethodDeclaration[124073-124191]"
    }, {
      "left" : "public boolean hasSameProperties(int flags, String tag, WorkSource workSource,\n                int ownerUid, int ownerPid)",
      "right" : "public boolean hasSameProperties(int flags, String tag, WorkSource workSource,\n                int ownerUid, int ownerPid)",
      "info" : "MethodDeclaration[124201-124554]:MethodDeclaration[124201-124554]"
    }, {
      "left" : "public void updateProperties(int flags, String tag, String packageName,\n                WorkSource workSource, String historyTag, int ownerUid, int ownerPid)",
      "right" : "public void updateProperties(int flags, String tag, String packageName,\n                WorkSource workSource, String historyTag, int ownerUid, int ownerPid)",
      "info" : "MethodDeclaration[124564-125480]:MethodDeclaration[124564-125480]"
    }, {
      "left" : "public boolean hasSameWorkSource(WorkSource workSource)",
      "right" : "public boolean hasSameWorkSource(WorkSource workSource)",
      "info" : "MethodDeclaration[125490-125616]:MethodDeclaration[125490-125616]"
    }, {
      "left" : "public void updateWorkSource(WorkSource workSource)",
      "right" : "public void updateWorkSource(WorkSource workSource)",
      "info" : "MethodDeclaration[125626-125743]:MethodDeclaration[125626-125743]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[125753-126007]:MethodDeclaration[125753-126007]"
    }, {
      "left" : "private String getLockLevelString()",
      "right" : "private String getLockLevelString()",
      "info" : "MethodDeclaration[126017-126971]:MethodDeclaration[126017-126971]"
    }, {
      "left" : "private String getLockFlagsString()",
      "right" : "private String getLockFlagsString()",
      "info" : "MethodDeclaration[126981-127349]:MethodDeclaration[126981-127349]"
    }, {
      "left" : "SuspendBlockerImpl",
      "right" : "SuspendBlockerImpl",
      "info" : "TypeDeclaration[127361-129641]:TypeDeclaration[127361-129641]"
    }, {
      "left" : "private final String mName;",
      "right" : "private final String mName;",
      "info" : "FieldDeclaration[127436-127463]:FieldDeclaration[127436-127463]"
    }, {
      "left" : "private final String mTraceName;",
      "right" : "private final String mTraceName;",
      "info" : "FieldDeclaration[127472-127504]:FieldDeclaration[127472-127504]"
    }, {
      "left" : "private int mReferenceCount;",
      "right" : "private int mReferenceCount;",
      "info" : "FieldDeclaration[127513-127541]:FieldDeclaration[127513-127541]"
    }, {
      "left" : "public SuspendBlockerImpl(String name)",
      "right" : "public SuspendBlockerImpl(String name)",
      "info" : "MethodDeclaration[127551-127685]:MethodDeclaration[127551-127685]"
    }, {
      "left" : "protected void finalize() throws Throwable",
      "right" : "protected void finalize() throws Throwable",
      "info" : "MethodDeclaration[127695-128233]:MethodDeclaration[127695-128233]"
    }, {
      "left" : "public void acquire()",
      "right" : "public void acquire()",
      "info" : "MethodDeclaration[128243-128724]:MethodDeclaration[128243-128724]"
    }, {
      "left" : "public void release()",
      "right" : "public void release()",
      "info" : "MethodDeclaration[128734-129458]:MethodDeclaration[128734-129458]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[129468-129635]:MethodDeclaration[129468-129635]"
    }, {
      "left" : "private void cleanupProximity()",
      "right" : "private void cleanupProximity()",
      "info" : "MethodDeclaration[129647-129939]:MethodDeclaration[129647-129778]"
    }, {
      "left" : "BinderService",
      "right" : "BinderService",
      "info" : "TypeDeclaration[129945-155332]:TypeDeclaration[130088-155627]"
    }, {
      "left" : "// Binder call\n        public void acquireWakeLockWithUid(IBinder lock, int flags, String tag,\n                String packageName, int uid)",
      "right" : "// Binder call\n        public void acquireWakeLockWithUid(IBinder lock, int flags, String tag,\n                String packageName, int uid)",
      "info" : "MethodDeclaration[130016-130351]:MethodDeclaration[130159-130494]"
    }, {
      "left" : "// Binder call\n        public void powerHint(int hintId, int data)",
      "right" : "// Binder call\n        public void powerHint(int hintId, int data)",
      "info" : "MethodDeclaration[130361-130754]:MethodDeclaration[130504-130897]"
    }, {
      "left" : "// Binder call\n        public void acquireWakeLock(IBinder lock, int flags, String tag, String packageName,\n                WorkSource ws, String historyTag)",
      "right" : "// Binder call\n        public void acquireWakeLock(IBinder lock, int flags, String tag, String packageName,\n                WorkSource ws, String historyTag)",
      "info" : "MethodDeclaration[130764-132778]:MethodDeclaration[130907-132921]"
    }, {
      "left" : "// Binder call\n        public void releaseWakeLock(IBinder lock, int flags)",
      "right" : "// Binder call\n        public void releaseWakeLock(IBinder lock, int flags)",
      "info" : "MethodDeclaration[132788-133334]:MethodDeclaration[132931-133477]"
    }, {
      "left" : "// Binder call\n        public void updateWakeLockUids(IBinder lock, int[] uids)",
      "right" : "// Binder call\n        public void updateWakeLockUids(IBinder lock, int[] uids)",
      "info" : "MethodDeclaration[133344-133863]:MethodDeclaration[133487-134006]"
    }, {
      "left" : "// Binder call\n        public void updateWakeLockWorkSource(IBinder lock, WorkSource ws, String historyTag)",
      "right" : "// Binder call\n        public void updateWakeLockWorkSource(IBinder lock, WorkSource ws, String historyTag)",
      "info" : "MethodDeclaration[133873-134787]:MethodDeclaration[134016-134930]"
    }, {
      "left" : "// Binder call\n        public boolean isWakeLockLevelSupported(int level)",
      "right" : "// Binder call\n        public boolean isWakeLockLevelSupported(int level)",
      "info" : "MethodDeclaration[134797-135128]:MethodDeclaration[134940-135271]"
    }, {
      "left" : "// Binder call\n        public void userActivity(long eventTime, int event, int flags)",
      "right" : "// Binder call\n        public void userActivity(long eventTime, int event, int flags)",
      "info" : "MethodDeclaration[135138-137050]:MethodDeclaration[135281-137193]"
    }, {
      "left" : "// Binder call\n        public void setKeyboardVisibility(boolean visible)",
      "right" : "// Binder call\n        public void setKeyboardVisibility(boolean visible)",
      "info" : "MethodDeclaration[137060-137836]:MethodDeclaration[137203-137979]"
    }, {
      "left" : "// Binder call\n        public void setKeyboardLight(boolean on, int key)",
      "right" : "// Binder call\n        public void setKeyboardLight(boolean on, int key)",
      "info" : "MethodDeclaration[137846-138293]:MethodDeclaration[137989-138436]"
    }, {
      "left" : "private void wakeUp(final long eventTime, boolean checkProximity)",
      "right" : "private void wakeUp(final long eventTime, boolean checkProximity)",
      "info" : "MethodDeclaration[138303-139512]:MethodDeclaration[138446-139655]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[139118-139449]:MethodDeclaration[139261-139592]"
    }, {
      "left" : "private void runWithProximityCheck(Runnable r)",
      "right" : "private void runWithProximityCheck(Runnable r)",
      "info" : "MethodDeclaration[139522-140353]:MethodDeclaration[139665-140496]"
    }, {
      "left" : "private void runPostProximityCheck(final Runnable r)",
      "right" : "private void runPostProximityCheck(final Runnable r)",
      "info" : "MethodDeclaration[140363-141573]:MethodDeclaration[140506-141868]"
    }, {
      "left" : "public void onSensorChanged(SensorEvent event)",
      "right" : "public void onSensorChanged(SensorEvent event)",
      "info" : "MethodDeclaration[140642-141305]:MethodDeclaration[140845-141566]"
    }, {
      "left" : "public void onAccuracyChanged(Sensor sensor, int accuracy)",
      "right" : "public void onAccuracyChanged(Sensor sensor, int accuracy)",
      "info" : "MethodDeclaration[141323-141410]:MethodDeclaration[141588-141679]"
    }, {
      "left" : "// Binder call\n        public void wakeUpWithProximityCheck(long eventTime)",
      "right" : "// Binder call\n        public void wakeUpWithProximityCheck(long eventTime)",
      "info" : "MethodDeclaration[141583-141717]:MethodDeclaration[141878-142012]"
    }, {
      "left" : "// Binder call\n        public void wakeUp(long eventTime)",
      "right" : "// Binder call\n        public void wakeUp(long eventTime)",
      "info" : "MethodDeclaration[141727-141844]:MethodDeclaration[142022-142139]"
    }, {
      "left" : "// Binder call\n        public void goToSleep(long eventTime, int reason, int flags)",
      "right" : "// Binder call\n        public void goToSleep(long eventTime, int reason, int flags)",
      "info" : "MethodDeclaration[141854-142537]:MethodDeclaration[142149-142832]"
    }, {
      "left" : "// Binder call\n        public void nap(long eventTime)",
      "right" : "// Binder call\n        public void nap(long eventTime)",
      "info" : "MethodDeclaration[142547-143180]:MethodDeclaration[142842-143475]"
    }, {
      "left" : "// Binder call\n        public boolean isInteractive()",
      "right" : "// Binder call\n        public boolean isInteractive()",
      "info" : "MethodDeclaration[143190-143485]:MethodDeclaration[143485-143780]"
    }, {
      "left" : "// Binder call\n        public boolean isPowerSaveMode()",
      "right" : "// Binder call\n        public boolean isPowerSaveMode()",
      "info" : "MethodDeclaration[143495-143793]:MethodDeclaration[143790-144088]"
    }, {
      "left" : "// Binder call\n        public boolean setPowerSaveMode(boolean mode)",
      "right" : "// Binder call\n        public boolean setPowerSaveMode(boolean mode)",
      "info" : "MethodDeclaration[143803-144506]:MethodDeclaration[144098-144801]"
    }, {
      "left" : "// Binder call\n        public boolean setPowerProfile(String profile)",
      "right" : "// Binder call\n        public boolean setPowerProfile(String profile)",
      "info" : "MethodDeclaration[144516-145035]:MethodDeclaration[144811-145330]"
    }, {
      "left" : "public String getPowerProfile()",
      "right" : "public String getPowerProfile()",
      "info" : "MethodDeclaration[145045-145164]:MethodDeclaration[145340-145459]"
    }, {
      "left" : "public void cpuBoost(int duration)",
      "right" : "public void cpuBoost(int duration)",
      "info" : "MethodDeclaration[145174-145843]:MethodDeclaration[145469-146138]"
    }, {
      "left" : "public void activityResumed(String componentName)",
      "right" : "public void activityResumed(String componentName)",
      "info" : "MethodDeclaration[145853-145996]:MethodDeclaration[146148-146291]"
    }, {
      "left" : "// Binder call\n        public void reboot(boolean confirm, String reason, boolean wait)",
      "right" : "// Binder call\n        public void reboot(boolean confirm, String reason, boolean wait)",
      "info" : "MethodDeclaration[146006-146935]:MethodDeclaration[146301-147230]"
    }, {
      "left" : "// Binder call\n        public void shutdown(boolean confirm, boolean wait)",
      "right" : "// Binder call\n        public void shutdown(boolean confirm, boolean wait)",
      "info" : "MethodDeclaration[146945-147618]:MethodDeclaration[147240-147913]"
    }, {
      "left" : "// Binder call\n        public void crash(String message)",
      "right" : "// Binder call\n        public void crash(String message)",
      "info" : "MethodDeclaration[147628-148202]:MethodDeclaration[147923-148497]"
    }, {
      "left" : "// Binder call\n        public void setStayOnSetting(int val)",
      "right" : "// Binder call\n        public void setStayOnSetting(int val)",
      "info" : "MethodDeclaration[148212-149403]:MethodDeclaration[148507-149698]"
    }, {
      "left" : "// Binder call\n        public void setTemporaryScreenBrightnessSettingOverride(int brightness)",
      "right" : "// Binder call\n        public void setTemporaryScreenBrightnessSettingOverride(int brightness)",
      "info" : "MethodDeclaration[149413-150440]:MethodDeclaration[149708-150735]"
    }, {
      "left" : "// Binder call\n        public void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float adj)",
      "right" : "// Binder call\n        public void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float adj)",
      "info" : "MethodDeclaration[150450-151549]:MethodDeclaration[150745-151844]"
    }, {
      "left" : "// Binder call\n        public void setAttentionLight(boolean on, int color)",
      "right" : "// Binder call\n        public void setAttentionLight(boolean on, int color)",
      "info" : "MethodDeclaration[151559-152116]:MethodDeclaration[151854-152411]"
    }, {
      "left" : "// Binder call\n        public void boostScreenBrightness(long eventTime)",
      "right" : "// Binder call\n        public void boostScreenBrightness(long eventTime)",
      "info" : "MethodDeclaration[152126-152795]:MethodDeclaration[152421-153090]"
    }, {
      "left" : "// Binder call\n        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
      "right" : "// Binder call\n        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
      "info" : "MethodDeclaration[152805-153502]:MethodDeclaration[153100-153797]"
    }, {
      "left" : "public void updateBlockedUids(int uid, boolean isBlocked)",
      "right" : "public void updateBlockedUids(int uid, boolean isBlocked)",
      "info" : "MethodDeclaration[153626-155326]:MethodDeclaration[153921-155621]"
    }, {
      "left" : "private void setButtonBrightnessOverrideFromWindowManagerInternal(int brightness)",
      "right" : "private void setButtonBrightnessOverrideFromWindowManagerInternal(int brightness)",
      "info" : "MethodDeclaration[155338-155715]:MethodDeclaration[155633-156010]"
    }, {
      "left" : "LocalService",
      "right" : "LocalService",
      "info" : "TypeDeclaration[155721-158284]:TypeDeclaration[156016-158579]"
    }, {
      "left" : "public void setScreenBrightnessOverrideFromWindowManager(int screenBrightness)",
      "right" : "public void setScreenBrightnessOverrideFromWindowManager(int screenBrightness)",
      "info" : "MethodDeclaration[155793-156206]:MethodDeclaration[156088-156501]"
    }, {
      "left" : "public void setButtonBrightnessOverrideFromWindowManager(int screenBrightness)",
      "right" : "public void setButtonBrightnessOverrideFromWindowManager(int screenBrightness)",
      "info" : "MethodDeclaration[156216-156687]:MethodDeclaration[156511-156982]"
    }, {
      "left" : "public void setDozeOverrideFromDreamManager(int screenState, int screenBrightness)",
      "right" : "public void setDozeOverrideFromDreamManager(int screenState, int screenBrightness)",
      "info" : "MethodDeclaration[156697-157512]:MethodDeclaration[156992-157807]"
    }, {
      "left" : "public void setUserActivityTimeoutOverrideFromWindowManager(long timeoutMillis)",
      "right" : "public void setUserActivityTimeoutOverrideFromWindowManager(long timeoutMillis)",
      "info" : "MethodDeclaration[157522-157715]:MethodDeclaration[157817-158010]"
    }, {
      "left" : "public void setMaximumScreenOffTimeoutFromDeviceAdmin(int timeMs)",
      "right" : "public void setMaximumScreenOffTimeoutFromDeviceAdmin(int timeMs)",
      "info" : "MethodDeclaration[157725-157891]:MethodDeclaration[158020-158186]"
    }, {
      "left" : "public boolean getLowPowerModeEnabled()",
      "right" : "public boolean getLowPowerModeEnabled()",
      "info" : "MethodDeclaration[157901-158064]:MethodDeclaration[158196-158359]"
    }, {
      "left" : "public void registerLowPowerModeObserver(LowPowerModeListener listener)",
      "right" : "public void registerLowPowerModeObserver(LowPowerModeListener listener)",
      "info" : "MethodDeclaration[158074-158278]:MethodDeclaration[158369-158573]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3251-3257]:Modifier[3251-3257]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[3258-3263]:Modifier[3258-3263]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3264-3269]:TYPE_DECLARATION_KIND[3264-3269]"
    }, {
      "left" : "PowerManagerService",
      "right" : "PowerManagerService",
      "info" : "SimpleName[3270-3289]:SimpleName[3270-3289]"
    }, {
      "left" : "SystemService",
      "right" : "SystemService",
      "info" : "SimpleType[3298-3311]:SimpleType[3298-3311]"
    }, {
      "left" : "Watchdog.Monitor",
      "right" : "Watchdog.Monitor",
      "info" : "SimpleType[3331-3347]:SimpleType[3331-3347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19330-19337]:Modifier[19330-19337]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19338-19344]:Modifier[19338-19344]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19345-19349]:PrimitiveType[19345-19349]"
    }, {
      "left" : "nativeInit",
      "right" : "nativeInit",
      "info" : "SimpleName[19350-19360]:SimpleName[19350-19360]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19369-19376]:Modifier[19369-19376]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19377-19383]:Modifier[19377-19383]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19384-19390]:Modifier[19384-19390]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19391-19395]:PrimitiveType[19391-19395]"
    }, {
      "left" : "nativeAcquireSuspendBlocker",
      "right" : "nativeAcquireSuspendBlocker",
      "info" : "SimpleName[19396-19423]:SimpleName[19396-19423]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[19424-19435]:SingleVariableDeclaration[19424-19435]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19442-19449]:Modifier[19442-19449]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19450-19456]:Modifier[19450-19456]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19457-19463]:Modifier[19457-19463]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19464-19468]:PrimitiveType[19464-19468]"
    }, {
      "left" : "nativeReleaseSuspendBlocker",
      "right" : "nativeReleaseSuspendBlocker",
      "info" : "SimpleName[19469-19496]:SimpleName[19469-19496]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[19497-19508]:SingleVariableDeclaration[19497-19508]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19515-19522]:Modifier[19515-19522]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19523-19529]:Modifier[19523-19529]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19530-19536]:Modifier[19530-19536]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19537-19541]:PrimitiveType[19537-19541]"
    }, {
      "left" : "nativeSetInteractive",
      "right" : "nativeSetInteractive",
      "info" : "SimpleName[19542-19562]:SimpleName[19542-19562]"
    }, {
      "left" : "boolean enable",
      "right" : "boolean enable",
      "info" : "SingleVariableDeclaration[19563-19577]:SingleVariableDeclaration[19563-19577]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19584-19591]:Modifier[19584-19591]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19592-19598]:Modifier[19592-19598]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19599-19605]:Modifier[19599-19605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19606-19610]:PrimitiveType[19606-19610]"
    }, {
      "left" : "nativeSetAutoSuspend",
      "right" : "nativeSetAutoSuspend",
      "info" : "SimpleName[19611-19631]:SimpleName[19611-19631]"
    }, {
      "left" : "boolean enable",
      "right" : "boolean enable",
      "info" : "SingleVariableDeclaration[19632-19646]:SingleVariableDeclaration[19632-19646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19653-19660]:Modifier[19653-19660]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19661-19667]:Modifier[19661-19667]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19668-19674]:Modifier[19668-19674]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19675-19679]:PrimitiveType[19675-19679]"
    }, {
      "left" : "nativeSendPowerHint",
      "right" : "nativeSendPowerHint",
      "info" : "SimpleName[19680-19699]:SimpleName[19680-19699]"
    }, {
      "left" : "int hintId",
      "right" : "int hintId",
      "info" : "SingleVariableDeclaration[19700-19710]:SingleVariableDeclaration[19700-19710]"
    }, {
      "left" : "int data",
      "right" : "int data",
      "info" : "SingleVariableDeclaration[19712-19720]:SingleVariableDeclaration[19712-19720]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19727-19734]:Modifier[19727-19734]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19735-19741]:Modifier[19735-19741]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19742-19748]:Modifier[19742-19748]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19749-19753]:PrimitiveType[19749-19753]"
    }, {
      "left" : "nativeCpuBoost",
      "right" : "nativeCpuBoost",
      "info" : "SimpleName[19754-19768]:SimpleName[19754-19768]"
    }, {
      "left" : "int duration",
      "right" : "int duration",
      "info" : "SingleVariableDeclaration[19769-19781]:SingleVariableDeclaration[19769-19781]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19788-19794]:Modifier[19788-19794]"
    }, {
      "left" : "native",
      "right" : "native",
      "info" : "Modifier[19795-19801]:Modifier[19795-19801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19802-19806]:PrimitiveType[19802-19806]"
    }, {
      "left" : "nativeSetPowerProfile",
      "right" : "nativeSetPowerProfile",
      "info" : "SimpleName[19807-19828]:SimpleName[19807-19828]"
    }, {
      "left" : "int profile",
      "right" : "int profile",
      "info" : "SingleVariableDeclaration[19829-19840]:SingleVariableDeclaration[19829-19840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20251-20257]:Modifier[20251-20257]"
    }, {
      "left" : "PowerManagerService",
      "right" : "PowerManagerService",
      "info" : "SimpleName[20258-20277]:SimpleName[20258-20277]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[20278-20293]:SingleVariableDeclaration[20278-20293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20295-21396]:Block[20295-21396]"
    }, {
      "left" : "super(context);",
      "right" : "super(context);",
      "info" : "SuperConstructorInvocation[20305-20320]:SuperConstructorInvocation[20305-20320]"
    }, {
      "left" : "mContext = context;",
      "right" : "mContext = context;",
      "info" : "ExpressionStatement[20329-20348]:ExpressionStatement[20329-20348]"
    }, {
      "left" : "mHandlerThread = new ServiceThread(TAG,\n                Process.THREAD_PRIORITY_DISPLAY, false /*allowIo*/);",
      "right" : "mHandlerThread = new ServiceThread(TAG,\n                Process.THREAD_PRIORITY_DISPLAY, false /*allowIo*/);",
      "info" : "ExpressionStatement[20357-20465]:ExpressionStatement[20357-20465]"
    }, {
      "left" : "mHandlerThread.start();",
      "right" : "mHandlerThread.start();",
      "info" : "ExpressionStatement[20474-20497]:ExpressionStatement[20474-20497]"
    }, {
      "left" : "mHandler = new PowerManagerHandler(mHandlerThread.getLooper());",
      "right" : "mHandler = new PowerManagerHandler(mHandlerThread.getLooper());",
      "info" : "ExpressionStatement[20506-20569]:ExpressionStatement[20506-20569]"
    }, {
      "left" : "mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);",
      "right" : "mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);",
      "info" : "ExpressionStatement[20578-20661]:ExpressionStatement[20578-20661]"
    }, {
      "left" : "mProximitySensor = mSensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);",
      "right" : "mProximitySensor = mSensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);",
      "info" : "ExpressionStatement[20670-20744]:ExpressionStatement[20670-20744]"
    }, {
      "left" : "mPerformanceManager = new PerformanceManager(context);",
      "right" : "mPerformanceManager = new PerformanceManager(context);",
      "info" : "ExpressionStatement[20753-20807]:ExpressionStatement[20753-20807]"
    }, {
      "left" : "synchronized (mLock) {\n            mWakeLockSuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.WakeLocks\");\n            mDisplaySuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.Display\");\n            mDisplaySuspendBlocker.acquire();\n            mHoldingDisplaySuspendBlocker = true;\n            mHalAutoSuspendModeEnabled = false;\n            mHalInteractiveModeEnabled = true;\n\n            mWakefulness = WAKEFULNESS_AWAKE;\n\n            nativeInit();\n            nativeSetAutoSuspend(false);\n            nativeSetInteractive(true);\n        }",
      "right" : "synchronized (mLock) {\n            mWakeLockSuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.WakeLocks\");\n            mDisplaySuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.Display\");\n            mDisplaySuspendBlocker.acquire();\n            mHoldingDisplaySuspendBlocker = true;\n            mHalAutoSuspendModeEnabled = false;\n            mHalInteractiveModeEnabled = true;\n\n            mWakefulness = WAKEFULNESS_AWAKE;\n\n            nativeInit();\n            nativeSetAutoSuspend(false);\n            nativeSetInteractive(true);\n        }",
      "info" : "SynchronizedStatement[20817-21390]:SynchronizedStatement[20817-21390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20838-21390]:Block[20838-21390]"
    }, {
      "left" : "mWakeLockSuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.WakeLocks\");",
      "right" : "mWakeLockSuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.WakeLocks\");",
      "info" : "ExpressionStatement[20852-20938]:ExpressionStatement[20852-20938]"
    }, {
      "left" : "mDisplaySuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.Display\");",
      "right" : "mDisplaySuspendBlocker = createSuspendBlockerLocked(\"PowerManagerService.Display\");",
      "info" : "ExpressionStatement[20951-21034]:ExpressionStatement[20951-21034]"
    }, {
      "left" : "mDisplaySuspendBlocker.acquire();",
      "right" : "mDisplaySuspendBlocker.acquire();",
      "info" : "ExpressionStatement[21047-21080]:ExpressionStatement[21047-21080]"
    }, {
      "left" : "mHoldingDisplaySuspendBlocker = true;",
      "right" : "mHoldingDisplaySuspendBlocker = true;",
      "info" : "ExpressionStatement[21093-21130]:ExpressionStatement[21093-21130]"
    }, {
      "left" : "mHalAutoSuspendModeEnabled = false;",
      "right" : "mHalAutoSuspendModeEnabled = false;",
      "info" : "ExpressionStatement[21143-21178]:ExpressionStatement[21143-21178]"
    }, {
      "left" : "mHalInteractiveModeEnabled = true;",
      "right" : "mHalInteractiveModeEnabled = true;",
      "info" : "ExpressionStatement[21191-21225]:ExpressionStatement[21191-21225]"
    }, {
      "left" : "mWakefulness = WAKEFULNESS_AWAKE;",
      "right" : "mWakefulness = WAKEFULNESS_AWAKE;",
      "info" : "ExpressionStatement[21239-21272]:ExpressionStatement[21239-21272]"
    }, {
      "left" : "nativeInit();",
      "right" : "nativeInit();",
      "info" : "ExpressionStatement[21286-21299]:ExpressionStatement[21286-21299]"
    }, {
      "left" : "nativeSetAutoSuspend(false);",
      "right" : "nativeSetAutoSuspend(false);",
      "info" : "ExpressionStatement[21312-21340]:ExpressionStatement[21312-21340]"
    }, {
      "left" : "nativeSetInteractive(true);",
      "right" : "nativeSetInteractive(true);",
      "info" : "ExpressionStatement[21353-21380]:ExpressionStatement[21353-21380]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21402-21411]:MarkerAnnotation[21402-21411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21416-21422]:Modifier[21416-21422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21423-21427]:PrimitiveType[21423-21427]"
    }, {
      "left" : "onStart",
      "right" : "onStart",
      "info" : "SimpleName[21428-21435]:SimpleName[21428-21435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21438-21698]:Block[21438-21698]"
    }, {
      "left" : "publishBinderService(Context.POWER_SERVICE, new BinderService());",
      "right" : "publishBinderService(Context.POWER_SERVICE, new BinderService());",
      "info" : "ExpressionStatement[21448-21513]:ExpressionStatement[21448-21513]"
    }, {
      "left" : "publishLocalService(PowerManagerInternal.class, new LocalService());",
      "right" : "publishLocalService(PowerManagerInternal.class, new LocalService());",
      "info" : "ExpressionStatement[21522-21590]:ExpressionStatement[21522-21590]"
    }, {
      "left" : "Watchdog.getInstance().addMonitor(this);",
      "right" : "Watchdog.getInstance().addMonitor(this);",
      "info" : "ExpressionStatement[21600-21640]:ExpressionStatement[21600-21640]"
    }, {
      "left" : "Watchdog.getInstance().addThread(mHandler);",
      "right" : "Watchdog.getInstance().addThread(mHandler);",
      "info" : "ExpressionStatement[21649-21692]:ExpressionStatement[21649-21692]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21704-21713]:MarkerAnnotation[21704-21713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21718-21724]:Modifier[21718-21724]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21725-21729]:PrimitiveType[21725-21729]"
    }, {
      "left" : "onBootPhase",
      "right" : "onBootPhase",
      "info" : "SimpleName[21730-21741]:SimpleName[21730-21741]"
    }, {
      "left" : "int phase",
      "right" : "int phase",
      "info" : "SingleVariableDeclaration[21742-21751]:SingleVariableDeclaration[21742-21751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21753-22191]:Block[21753-22191]"
    }, {
      "left" : "synchronized (mLock) {\n            if (phase == PHASE_BOOT_COMPLETED) {\n                final long now = SystemClock.uptimeMillis();\n                mBootCompleted = true;\n                mDirty |= DIRTY_BOOT_COMPLETED;\n                userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (phase == PHASE_BOOT_COMPLETED) {\n                final long now = SystemClock.uptimeMillis();\n                mBootCompleted = true;\n                mDirty |= DIRTY_BOOT_COMPLETED;\n                userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[21763-22185]:SynchronizedStatement[21763-22185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21784-22185]:Block[21784-22185]"
    }, {
      "left" : "if (phase == PHASE_BOOT_COMPLETED)",
      "right" : "if (phase == PHASE_BOOT_COMPLETED)",
      "info" : "IfStatement[21798-22175]:IfStatement[21798-22175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21833-22175]:Block[21833-22175]"
    }, {
      "left" : "final long now = SystemClock.uptimeMillis();",
      "right" : "final long now = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[21851-21895]:VariableDeclarationStatement[21851-21895]"
    }, {
      "left" : "mBootCompleted = true;",
      "right" : "mBootCompleted = true;",
      "info" : "ExpressionStatement[21912-21934]:ExpressionStatement[21912-21934]"
    }, {
      "left" : "mDirty |= DIRTY_BOOT_COMPLETED;",
      "right" : "mDirty |= DIRTY_BOOT_COMPLETED;",
      "info" : "ExpressionStatement[21951-21982]:ExpressionStatement[21951-21982]"
    }, {
      "left" : "userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "right" : "userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[21999-22119]:ExpressionStatement[21999-22119]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[22136-22161]:ExpressionStatement[22136-22161]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22197-22203]:Modifier[22197-22203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22204-22208]:PrimitiveType[22204-22208]"
    }, {
      "left" : "systemReady",
      "right" : "systemReady",
      "info" : "SimpleName[22209-22220]:SimpleName[22209-22220]"
    }, {
      "left" : "IAppOpsService appOps",
      "right" : "IAppOpsService appOps",
      "info" : "SingleVariableDeclaration[22221-22242]:SingleVariableDeclaration[22221-22242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22244-29377]:Block[22244-29377]"
    }, {
      "left" : "synchronized (mLock) {\n            mSystemReady = true;\n            mAppOps = appOps;\n            mDreamManager = getLocalService(DreamManagerInternal.class);\n            mDisplayManagerInternal = getLocalService(DisplayManagerInternal.class);\n            mPolicy = getLocalService(WindowManagerPolicy.class);\n            mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);\n\n            PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n            mScreenBrightnessSettingMinimum = pm.getMinimumScreenBrightnessSetting();\n            mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();\n            mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();\n            mButtonBrightnessSettingDefault = pm.getDefaultButtonBrightness();\n            mKeyboardBrightnessSettingDefault = pm.getDefaultKeyboardBrightness();\n\n            SensorManager sensorManager = new SystemSensorManager(mContext, mHandler.getLooper());\n\n            // The notifier runs on the system server's main looper so as not to interfere\n            // with the animations and other critical functions of the power manager.\n            mBatteryStats = BatteryStatsService.getService();\n            mNotifier = new Notifier(Looper.getMainLooper(), mContext, mBatteryStats,\n                    mAppOps, createSuspendBlockerLocked(\"PowerManagerService.Broadcasts\"),\n                    mPolicy);\n\n            mWirelessChargerDetector = new WirelessChargerDetector(sensorManager,\n                    createSuspendBlockerLocked(\"PowerManagerService.WirelessChargerDetector\"),\n                    mHandler);\n            mSettingsObserver = new SettingsObserver(mHandler);\n\n            mLightsManager = getLocalService(LightsManager.class);\n            mAttentionLight = mLightsManager.getLight(LightsManager.LIGHT_ID_ATTENTION);\n            mButtonsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_BUTTONS);\n            mKeyboardLight = mLightsManager.getLight(LightsManager.LIGHT_ID_KEYBOARD);\n            mCapsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_CAPS);\n            mFnLight = mLightsManager.getLight(LightsManager.LIGHT_ID_FUNC);\n\n            // Initialize display power management.\n            mDisplayManagerInternal.initPowerManagement(\n                    mDisplayPowerCallbacks, mHandler, sensorManager);\n\n            // Register for broadcasts from other components of the system.\n            IntentFilter filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_BATTERY_CHANGED);\n            filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);\n            mContext.registerReceiver(new BatteryReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_DREAMING_STARTED);\n            filter.addAction(Intent.ACTION_DREAMING_STOPPED);\n            mContext.registerReceiver(new DreamReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_USER_SWITCHED);\n            mContext.registerReceiver(new UserSwitchedReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_DOCK_EVENT);\n            mContext.registerReceiver(new DockReceiver(), filter, null, mHandler);\n\n            // Register for settings changes.\n            final ContentResolver resolver = mContext.getContentResolver();\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ENABLED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_OFF_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SLEEP_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.STAY_ON_WHILE_PLUGGED_IN),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.THEATER_MODE_ON),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.PROXIMITY_ON_WAKE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.KEYBOARD_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n\n            mPerformanceManager.reset();\n\n            // Go.\n            readConfigurationLocked();\n            updateSettingsLocked();\n            mDirty |= DIRTY_BATTERY_STATE;\n            updatePowerStateLocked();\n        }",
      "right" : "synchronized (mLock) {\n            mSystemReady = true;\n            mAppOps = appOps;\n            mDreamManager = getLocalService(DreamManagerInternal.class);\n            mDisplayManagerInternal = getLocalService(DisplayManagerInternal.class);\n            mPolicy = getLocalService(WindowManagerPolicy.class);\n            mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);\n\n            PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n            mScreenBrightnessSettingMinimum = pm.getMinimumScreenBrightnessSetting();\n            mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();\n            mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();\n            mButtonBrightnessSettingDefault = pm.getDefaultButtonBrightness();\n            mKeyboardBrightnessSettingDefault = pm.getDefaultKeyboardBrightness();\n\n            SensorManager sensorManager = new SystemSensorManager(mContext, mHandler.getLooper());\n\n            // The notifier runs on the system server's main looper so as not to interfere\n            // with the animations and other critical functions of the power manager.\n            mBatteryStats = BatteryStatsService.getService();\n            mNotifier = new Notifier(Looper.getMainLooper(), mContext, mBatteryStats,\n                    mAppOps, createSuspendBlockerLocked(\"PowerManagerService.Broadcasts\"),\n                    mPolicy);\n\n            mWirelessChargerDetector = new WirelessChargerDetector(sensorManager,\n                    createSuspendBlockerLocked(\"PowerManagerService.WirelessChargerDetector\"),\n                    mHandler);\n            mSettingsObserver = new SettingsObserver(mHandler);\n\n            mLightsManager = getLocalService(LightsManager.class);\n            mAttentionLight = mLightsManager.getLight(LightsManager.LIGHT_ID_ATTENTION);\n            mButtonsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_BUTTONS);\n            mKeyboardLight = mLightsManager.getLight(LightsManager.LIGHT_ID_KEYBOARD);\n            mCapsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_CAPS);\n            mFnLight = mLightsManager.getLight(LightsManager.LIGHT_ID_FUNC);\n\n            // Initialize display power management.\n            mDisplayManagerInternal.initPowerManagement(\n                    mDisplayPowerCallbacks, mHandler, sensorManager);\n\n            // Register for broadcasts from other components of the system.\n            IntentFilter filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_BATTERY_CHANGED);\n            filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);\n            mContext.registerReceiver(new BatteryReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_DREAMING_STARTED);\n            filter.addAction(Intent.ACTION_DREAMING_STOPPED);\n            mContext.registerReceiver(new DreamReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_USER_SWITCHED);\n            mContext.registerReceiver(new UserSwitchedReceiver(), filter, null, mHandler);\n\n            filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_DOCK_EVENT);\n            mContext.registerReceiver(new DockReceiver(), filter, null, mHandler);\n\n            // Register for settings changes.\n            final ContentResolver resolver = mContext.getContentResolver();\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ENABLED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_OFF_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SLEEP_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.STAY_ON_WHILE_PLUGGED_IN),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.THEATER_MODE_ON),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.PROXIMITY_ON_WAKE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.KEYBOARD_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n            resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);\n\n            mPerformanceManager.reset();\n\n            // Go.\n            readConfigurationLocked();\n            updateSettingsLocked();\n            mDirty |= DIRTY_BATTERY_STATE;\n            updatePowerStateLocked();\n        }",
      "info" : "SynchronizedStatement[22254-29371]:SynchronizedStatement[22254-29371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22275-29371]:Block[22275-29371]"
    }, {
      "left" : "mSystemReady = true;",
      "right" : "mSystemReady = true;",
      "info" : "ExpressionStatement[22289-22309]:ExpressionStatement[22289-22309]"
    }, {
      "left" : "mAppOps = appOps;",
      "right" : "mAppOps = appOps;",
      "info" : "ExpressionStatement[22322-22339]:ExpressionStatement[22322-22339]"
    }, {
      "left" : "mDreamManager = getLocalService(DreamManagerInternal.class);",
      "right" : "mDreamManager = getLocalService(DreamManagerInternal.class);",
      "info" : "ExpressionStatement[22352-22412]:ExpressionStatement[22352-22412]"
    }, {
      "left" : "mDisplayManagerInternal = getLocalService(DisplayManagerInternal.class);",
      "right" : "mDisplayManagerInternal = getLocalService(DisplayManagerInternal.class);",
      "info" : "ExpressionStatement[22425-22497]:ExpressionStatement[22425-22497]"
    }, {
      "left" : "mPolicy = getLocalService(WindowManagerPolicy.class);",
      "right" : "mPolicy = getLocalService(WindowManagerPolicy.class);",
      "info" : "ExpressionStatement[22510-22563]:ExpressionStatement[22510-22563]"
    }, {
      "left" : "mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);",
      "right" : "mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);",
      "info" : "ExpressionStatement[22576-22648]:ExpressionStatement[22576-22648]"
    }, {
      "left" : "PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "right" : "PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "info" : "VariableDeclarationStatement[22662-22744]:VariableDeclarationStatement[22662-22744]"
    }, {
      "left" : "mScreenBrightnessSettingMinimum = pm.getMinimumScreenBrightnessSetting();",
      "right" : "mScreenBrightnessSettingMinimum = pm.getMinimumScreenBrightnessSetting();",
      "info" : "ExpressionStatement[22757-22830]:ExpressionStatement[22757-22830]"
    }, {
      "left" : "mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();",
      "right" : "mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();",
      "info" : "ExpressionStatement[22843-22916]:ExpressionStatement[22843-22916]"
    }, {
      "left" : "mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();",
      "right" : "mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();",
      "info" : "ExpressionStatement[22929-23002]:ExpressionStatement[22929-23002]"
    }, {
      "left" : "mButtonBrightnessSettingDefault = pm.getDefaultButtonBrightness();",
      "right" : "mButtonBrightnessSettingDefault = pm.getDefaultButtonBrightness();",
      "info" : "ExpressionStatement[23015-23081]:ExpressionStatement[23015-23081]"
    }, {
      "left" : "mKeyboardBrightnessSettingDefault = pm.getDefaultKeyboardBrightness();",
      "right" : "mKeyboardBrightnessSettingDefault = pm.getDefaultKeyboardBrightness();",
      "info" : "ExpressionStatement[23094-23164]:ExpressionStatement[23094-23164]"
    }, {
      "left" : "SensorManager sensorManager = new SystemSensorManager(mContext, mHandler.getLooper());",
      "right" : "SensorManager sensorManager = new SystemSensorManager(mContext, mHandler.getLooper());",
      "info" : "VariableDeclarationStatement[23178-23264]:VariableDeclarationStatement[23178-23264]"
    }, {
      "left" : "mBatteryStats = BatteryStatsService.getService();",
      "right" : "mBatteryStats = BatteryStatsService.getService();",
      "info" : "ExpressionStatement[23455-23504]:ExpressionStatement[23455-23504]"
    }, {
      "left" : "mNotifier = new Notifier(Looper.getMainLooper(), mContext, mBatteryStats,\n                    mAppOps, createSuspendBlockerLocked(\"PowerManagerService.Broadcasts\"),\n                    mPolicy);",
      "right" : "mNotifier = new Notifier(Looper.getMainLooper(), mContext, mBatteryStats,\n                    mAppOps, createSuspendBlockerLocked(\"PowerManagerService.Broadcasts\"),\n                    mPolicy);",
      "info" : "ExpressionStatement[23517-23711]:ExpressionStatement[23517-23711]"
    }, {
      "left" : "mWirelessChargerDetector = new WirelessChargerDetector(sensorManager,\n                    createSuspendBlockerLocked(\"PowerManagerService.WirelessChargerDetector\"),\n                    mHandler);",
      "right" : "mWirelessChargerDetector = new WirelessChargerDetector(sensorManager,\n                    createSuspendBlockerLocked(\"PowerManagerService.WirelessChargerDetector\"),\n                    mHandler);",
      "info" : "ExpressionStatement[23725-23920]:ExpressionStatement[23725-23920]"
    }, {
      "left" : "mSettingsObserver = new SettingsObserver(mHandler);",
      "right" : "mSettingsObserver = new SettingsObserver(mHandler);",
      "info" : "ExpressionStatement[23933-23984]:ExpressionStatement[23933-23984]"
    }, {
      "left" : "mLightsManager = getLocalService(LightsManager.class);",
      "right" : "mLightsManager = getLocalService(LightsManager.class);",
      "info" : "ExpressionStatement[23998-24052]:ExpressionStatement[23998-24052]"
    }, {
      "left" : "mAttentionLight = mLightsManager.getLight(LightsManager.LIGHT_ID_ATTENTION);",
      "right" : "mAttentionLight = mLightsManager.getLight(LightsManager.LIGHT_ID_ATTENTION);",
      "info" : "ExpressionStatement[24065-24141]:ExpressionStatement[24065-24141]"
    }, {
      "left" : "mButtonsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_BUTTONS);",
      "right" : "mButtonsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_BUTTONS);",
      "info" : "ExpressionStatement[24154-24226]:ExpressionStatement[24154-24226]"
    }, {
      "left" : "mKeyboardLight = mLightsManager.getLight(LightsManager.LIGHT_ID_KEYBOARD);",
      "right" : "mKeyboardLight = mLightsManager.getLight(LightsManager.LIGHT_ID_KEYBOARD);",
      "info" : "ExpressionStatement[24239-24313]:ExpressionStatement[24239-24313]"
    }, {
      "left" : "mCapsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_CAPS);",
      "right" : "mCapsLight = mLightsManager.getLight(LightsManager.LIGHT_ID_CAPS);",
      "info" : "ExpressionStatement[24326-24392]:ExpressionStatement[24326-24392]"
    }, {
      "left" : "mFnLight = mLightsManager.getLight(LightsManager.LIGHT_ID_FUNC);",
      "right" : "mFnLight = mLightsManager.getLight(LightsManager.LIGHT_ID_FUNC);",
      "info" : "ExpressionStatement[24405-24469]:ExpressionStatement[24405-24469]"
    }, {
      "left" : "mDisplayManagerInternal.initPowerManagement(\n                    mDisplayPowerCallbacks, mHandler, sensorManager);",
      "right" : "mDisplayManagerInternal.initPowerManagement(\n                    mDisplayPowerCallbacks, mHandler, sensorManager);",
      "info" : "ExpressionStatement[24535-24649]:ExpressionStatement[24535-24649]"
    }, {
      "left" : "IntentFilter filter = new IntentFilter();",
      "right" : "IntentFilter filter = new IntentFilter();",
      "info" : "VariableDeclarationStatement[24739-24780]:VariableDeclarationStatement[24739-24780]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_BATTERY_CHANGED);",
      "right" : "filter.addAction(Intent.ACTION_BATTERY_CHANGED);",
      "info" : "ExpressionStatement[24793-24841]:ExpressionStatement[24793-24841]"
    }, {
      "left" : "filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);",
      "right" : "filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);",
      "info" : "ExpressionStatement[24854-24908]:ExpressionStatement[24854-24908]"
    }, {
      "left" : "mContext.registerReceiver(new BatteryReceiver(), filter, null, mHandler);",
      "right" : "mContext.registerReceiver(new BatteryReceiver(), filter, null, mHandler);",
      "info" : "ExpressionStatement[24921-24994]:ExpressionStatement[24921-24994]"
    }, {
      "left" : "filter = new IntentFilter();",
      "right" : "filter = new IntentFilter();",
      "info" : "ExpressionStatement[25008-25036]:ExpressionStatement[25008-25036]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_DREAMING_STARTED);",
      "right" : "filter.addAction(Intent.ACTION_DREAMING_STARTED);",
      "info" : "ExpressionStatement[25049-25098]:ExpressionStatement[25049-25098]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_DREAMING_STOPPED);",
      "right" : "filter.addAction(Intent.ACTION_DREAMING_STOPPED);",
      "info" : "ExpressionStatement[25111-25160]:ExpressionStatement[25111-25160]"
    }, {
      "left" : "mContext.registerReceiver(new DreamReceiver(), filter, null, mHandler);",
      "right" : "mContext.registerReceiver(new DreamReceiver(), filter, null, mHandler);",
      "info" : "ExpressionStatement[25173-25244]:ExpressionStatement[25173-25244]"
    }, {
      "left" : "filter = new IntentFilter();",
      "right" : "filter = new IntentFilter();",
      "info" : "ExpressionStatement[25258-25286]:ExpressionStatement[25258-25286]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_USER_SWITCHED);",
      "right" : "filter.addAction(Intent.ACTION_USER_SWITCHED);",
      "info" : "ExpressionStatement[25299-25345]:ExpressionStatement[25299-25345]"
    }, {
      "left" : "mContext.registerReceiver(new UserSwitchedReceiver(), filter, null, mHandler);",
      "right" : "mContext.registerReceiver(new UserSwitchedReceiver(), filter, null, mHandler);",
      "info" : "ExpressionStatement[25358-25436]:ExpressionStatement[25358-25436]"
    }, {
      "left" : "filter = new IntentFilter();",
      "right" : "filter = new IntentFilter();",
      "info" : "ExpressionStatement[25450-25478]:ExpressionStatement[25450-25478]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_DOCK_EVENT);",
      "right" : "filter.addAction(Intent.ACTION_DOCK_EVENT);",
      "info" : "ExpressionStatement[25491-25534]:ExpressionStatement[25491-25534]"
    }, {
      "left" : "mContext.registerReceiver(new DockReceiver(), filter, null, mHandler);",
      "right" : "mContext.registerReceiver(new DockReceiver(), filter, null, mHandler);",
      "info" : "ExpressionStatement[25547-25617]:ExpressionStatement[25547-25617]"
    }, {
      "left" : "final ContentResolver resolver = mContext.getContentResolver();",
      "right" : "final ContentResolver resolver = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[25677-25740]:VariableDeclarationStatement[25677-25740]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ENABLED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ENABLED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[25753-25938]:ExpressionStatement[25753-25938]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[25951-26146]:ExpressionStatement[25951-26146]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[26159-26353]:ExpressionStatement[26159-26353]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_OFF_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_OFF_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[26366-26550]:ExpressionStatement[26366-26550]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SLEEP_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.SLEEP_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[26563-26742]:ExpressionStatement[26563-26742]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.STAY_ON_WHILE_PLUGGED_IN),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.STAY_ON_WHILE_PLUGGED_IN),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[26755-26945]:ExpressionStatement[26755-26945]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[26958-27141]:ExpressionStatement[26958-27141]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_BRIGHTNESS_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[27154-27342]:ExpressionStatement[27154-27342]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[27355-27547]:ExpressionStatement[27355-27547]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[27560-27740]:ExpressionStatement[27560-27740]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[27753-27947]:ExpressionStatement[27753-27947]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.THEATER_MODE_ON),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.THEATER_MODE_ON),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[27960-28141]:ExpressionStatement[27960-28141]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.PROXIMITY_ON_WAKE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.System.getUriFor(\n                    Settings.System.PROXIMITY_ON_WAKE),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[28154-28337]:ExpressionStatement[28154-28337]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[28350-28533]:ExpressionStatement[28350-28533]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.KEYBOARD_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.KEYBOARD_BRIGHTNESS),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[28546-28731]:ExpressionStatement[28546-28731]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Secure.getUriFor(\n                    Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[28744-28934]:ExpressionStatement[28744-28934]"
    }, {
      "left" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "right" : "resolver.registerContentObserver(Settings.Global.getUriFor(\n                    Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED),\n                    false, mSettingsObserver, UserHandle.USER_ALL);",
      "info" : "ExpressionStatement[28947-29143]:ExpressionStatement[28947-29143]"
    }, {
      "left" : "mPerformanceManager.reset();",
      "right" : "mPerformanceManager.reset();",
      "info" : "ExpressionStatement[29157-29185]:ExpressionStatement[29157-29185]"
    }, {
      "left" : "readConfigurationLocked();",
      "right" : "readConfigurationLocked();",
      "info" : "ExpressionStatement[29218-29244]:ExpressionStatement[29218-29244]"
    }, {
      "left" : "updateSettingsLocked();",
      "right" : "updateSettingsLocked();",
      "info" : "ExpressionStatement[29257-29280]:ExpressionStatement[29257-29280]"
    }, {
      "left" : "mDirty |= DIRTY_BATTERY_STATE;",
      "right" : "mDirty |= DIRTY_BATTERY_STATE;",
      "info" : "ExpressionStatement[29293-29323]:ExpressionStatement[29293-29323]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[29336-29361]:ExpressionStatement[29336-29361]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29383-29390]:Modifier[29383-29390]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29391-29395]:PrimitiveType[29391-29395]"
    }, {
      "left" : "readConfigurationLocked",
      "right" : "readConfigurationLocked",
      "info" : "SimpleName[29396-29419]:SimpleName[29396-29419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29422-32618]:Block[29422-32618]"
    }, {
      "left" : "final Resources resources = mContext.getResources();",
      "right" : "final Resources resources = mContext.getResources();",
      "info" : "VariableDeclarationStatement[29432-29484]:VariableDeclarationStatement[29432-29484]"
    }, {
      "left" : "mDecoupleHalAutoSuspendModeFromDisplayConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_powerDecoupleAutoSuspendModeFromDisplay);",
      "right" : "mDecoupleHalAutoSuspendModeFromDisplayConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_powerDecoupleAutoSuspendModeFromDisplay);",
      "info" : "ExpressionStatement[29494-29655]:ExpressionStatement[29494-29655]"
    }, {
      "left" : "mDecoupleHalInteractiveModeFromDisplayConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_powerDecoupleInteractiveModeFromDisplay);",
      "right" : "mDecoupleHalInteractiveModeFromDisplayConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_powerDecoupleInteractiveModeFromDisplay);",
      "info" : "ExpressionStatement[29664-29825]:ExpressionStatement[29664-29825]"
    }, {
      "left" : "mWakeUpWhenPluggedOrUnpluggedConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_unplugTurnsOnScreen);",
      "right" : "mWakeUpWhenPluggedOrUnpluggedConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_unplugTurnsOnScreen);",
      "info" : "ExpressionStatement[29834-29966]:ExpressionStatement[29834-29966]"
    }, {
      "left" : "mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_allowTheaterModeWakeFromUnplug);",
      "right" : "mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_allowTheaterModeWakeFromUnplug);",
      "info" : "ExpressionStatement[29975-30131]:ExpressionStatement[29975-30131]"
    }, {
      "left" : "mSuspendWhenScreenOffDueToProximityConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_suspendWhenScreenOffDueToProximity);",
      "right" : "mSuspendWhenScreenOffDueToProximityConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_suspendWhenScreenOffDueToProximity);",
      "info" : "ExpressionStatement[30140-30293]:ExpressionStatement[30140-30293]"
    }, {
      "left" : "mDreamsSupportedConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsSupported);",
      "right" : "mDreamsSupportedConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsSupported);",
      "info" : "ExpressionStatement[30302-30417]:ExpressionStatement[30302-30417]"
    }, {
      "left" : "mDreamsEnabledByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsEnabledByDefault);",
      "right" : "mDreamsEnabledByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsEnabledByDefault);",
      "info" : "ExpressionStatement[30426-30555]:ExpressionStatement[30426-30555]"
    }, {
      "left" : "mDreamsActivatedOnSleepByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsActivatedOnSleepByDefault);",
      "right" : "mDreamsActivatedOnSleepByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsActivatedOnSleepByDefault);",
      "info" : "ExpressionStatement[30564-30711]:ExpressionStatement[30564-30711]"
    }, {
      "left" : "mDreamsActivatedOnDockByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsActivatedOnDockByDefault);",
      "right" : "mDreamsActivatedOnDockByDefaultConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsActivatedOnDockByDefault);",
      "info" : "ExpressionStatement[30720-30865]:ExpressionStatement[30720-30865]"
    }, {
      "left" : "mDreamsEnabledOnBatteryConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsEnabledOnBattery);",
      "right" : "mDreamsEnabledOnBatteryConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dreamsEnabledOnBattery);",
      "info" : "ExpressionStatement[30874-31003]:ExpressionStatement[30874-31003]"
    }, {
      "left" : "mDreamsBatteryLevelMinimumWhenPoweredConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelMinimumWhenPowered);",
      "right" : "mDreamsBatteryLevelMinimumWhenPoweredConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelMinimumWhenPowered);",
      "info" : "ExpressionStatement[31012-31172]:ExpressionStatement[31012-31172]"
    }, {
      "left" : "mDreamsBatteryLevelMinimumWhenNotPoweredConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelMinimumWhenNotPowered);",
      "right" : "mDreamsBatteryLevelMinimumWhenNotPoweredConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelMinimumWhenNotPowered);",
      "info" : "ExpressionStatement[31181-31347]:ExpressionStatement[31181-31347]"
    }, {
      "left" : "mDreamsBatteryLevelDrainCutoffConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelDrainCutoff);",
      "right" : "mDreamsBatteryLevelDrainCutoffConfig = resources.getInteger(\n                com.android.internal.R.integer.config_dreamsBatteryLevelDrainCutoff);",
      "info" : "ExpressionStatement[31356-31502]:ExpressionStatement[31356-31502]"
    }, {
      "left" : "mDozeAfterScreenOffConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dozeAfterScreenOff);",
      "right" : "mDozeAfterScreenOffConfig = resources.getBoolean(\n                com.android.internal.R.bool.config_dozeAfterScreenOff);",
      "info" : "ExpressionStatement[31511-31632]:ExpressionStatement[31511-31632]"
    }, {
      "left" : "mMinimumScreenOffTimeoutConfig = resources.getInteger(\n                com.android.internal.R.integer.config_minimumScreenOffTimeout);",
      "right" : "mMinimumScreenOffTimeoutConfig = resources.getInteger(\n                com.android.internal.R.integer.config_minimumScreenOffTimeout);",
      "info" : "ExpressionStatement[31641-31775]:ExpressionStatement[31641-31775]"
    }, {
      "left" : "mMaximumScreenDimDurationConfig = resources.getInteger(\n                com.android.internal.R.integer.config_maximumScreenDimDuration);",
      "right" : "mMaximumScreenDimDurationConfig = resources.getInteger(\n                com.android.internal.R.integer.config_maximumScreenDimDuration);",
      "info" : "ExpressionStatement[31784-31920]:ExpressionStatement[31784-31920]"
    }, {
      "left" : "mMaximumScreenDimRatioConfig = resources.getFraction(\n                com.android.internal.R.fraction.config_maximumScreenDimRatio, 1, 1);",
      "right" : "mMaximumScreenDimRatioConfig = resources.getFraction(\n                com.android.internal.R.fraction.config_maximumScreenDimRatio, 1, 1);",
      "info" : "ExpressionStatement[31929-32067]:ExpressionStatement[31929-32067]"
    }, {
      "left" : "mProximityTimeOut = resources.getInteger(\n                com.android.internal.R.integer.config_proximityCheckTimeout);",
      "right" : "mProximityTimeOut = resources.getInteger(\n                com.android.internal.R.integer.config_proximityCheckTimeout);",
      "info" : "ExpressionStatement[32076-32195]:ExpressionStatement[32076-32195]"
    }, {
      "left" : "mProximityWakeSupported = resources.getBoolean(\n                com.android.internal.R.bool.config_proximityCheckOnWake);",
      "right" : "mProximityWakeSupported = resources.getBoolean(\n                com.android.internal.R.bool.config_proximityCheckOnWake);",
      "info" : "ExpressionStatement[32204-32325]:ExpressionStatement[32204-32325]"
    }, {
      "left" : "if (mProximityWakeSupported)",
      "right" : "if (mProximityWakeSupported)",
      "info" : "IfStatement[32334-32611]:IfStatement[32334-32611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32363-32611]:Block[32363-32611]"
    }, {
      "left" : "PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "right" : "PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "info" : "VariableDeclarationStatement[32377-32469]:VariableDeclarationStatement[32377-32469]"
    }, {
      "left" : "mProximityWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n                    \"ProximityWakeLock\");",
      "right" : "mProximityWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n                    \"ProximityWakeLock\");",
      "info" : "ExpressionStatement[32482-32601]:ExpressionStatement[32482-32601]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32624-32631]:Modifier[32624-32631]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32632-32636]:PrimitiveType[32632-32636]"
    }, {
      "left" : "updateSettingsLocked",
      "right" : "updateSettingsLocked",
      "info" : "SimpleName[32637-32657]:SimpleName[32637-32657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32660-36873]:Block[32660-36873]"
    }, {
      "left" : "final ContentResolver resolver = mContext.getContentResolver();",
      "right" : "final ContentResolver resolver = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[32670-32733]:VariableDeclarationStatement[32670-32733]"
    }, {
      "left" : "mDreamsEnabledSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ENABLED,\n                mDreamsEnabledByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "right" : "mDreamsEnabledSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ENABLED,\n                mDreamsEnabledByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "info" : "ExpressionStatement[32743-32963]:ExpressionStatement[32743-32963]"
    }, {
      "left" : "mDreamsActivateOnSleepSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP,\n                mDreamsActivatedOnSleepByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "right" : "mDreamsActivateOnSleepSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP,\n                mDreamsActivatedOnSleepByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "info" : "ExpressionStatement[32972-33219]:ExpressionStatement[32972-33219]"
    }, {
      "left" : "mDreamsActivateOnDockSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,\n                mDreamsActivatedOnDockByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "right" : "mDreamsActivateOnDockSetting = (Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,\n                mDreamsActivatedOnDockByDefaultConfig ? 1 : 0,\n                UserHandle.USER_CURRENT) != 0);",
      "info" : "ExpressionStatement[33228-33472]:ExpressionStatement[33228-33472]"
    }, {
      "left" : "mScreenOffTimeoutSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_OFF_TIMEOUT, DEFAULT_SCREEN_OFF_TIMEOUT,\n                UserHandle.USER_CURRENT);",
      "right" : "mScreenOffTimeoutSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_OFF_TIMEOUT, DEFAULT_SCREEN_OFF_TIMEOUT,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[33481-33669]:ExpressionStatement[33481-33669]"
    }, {
      "left" : "mSleepTimeoutSetting = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SLEEP_TIMEOUT, DEFAULT_SLEEP_TIMEOUT,\n                UserHandle.USER_CURRENT);",
      "right" : "mSleepTimeoutSetting = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.SLEEP_TIMEOUT, DEFAULT_SLEEP_TIMEOUT,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[33678-33852]:ExpressionStatement[33678-33852]"
    }, {
      "left" : "mStayOnWhilePluggedInSetting = Settings.Global.getInt(resolver,\n                Settings.Global.STAY_ON_WHILE_PLUGGED_IN, BatteryManager.BATTERY_PLUGGED_AC);",
      "right" : "mStayOnWhilePluggedInSetting = Settings.Global.getInt(resolver,\n                Settings.Global.STAY_ON_WHILE_PLUGGED_IN, BatteryManager.BATTERY_PLUGGED_AC);",
      "info" : "ExpressionStatement[33861-34018]:ExpressionStatement[33861-34018]"
    }, {
      "left" : "mTheaterModeEnabled = Settings.Global.getInt(mContext.getContentResolver(),\n                Settings.Global.THEATER_MODE_ON, 0) == 1;",
      "right" : "mTheaterModeEnabled = Settings.Global.getInt(mContext.getContentResolver(),\n                Settings.Global.THEATER_MODE_ON, 0) == 1;",
      "info" : "ExpressionStatement[34027-34160]:ExpressionStatement[34027-34160]"
    }, {
      "left" : "mWakeUpWhenPluggedOrUnpluggedSetting = Settings.Global.getInt(resolver,\n                Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED,\n                (mWakeUpWhenPluggedOrUnpluggedConfig ? 1 : 0));",
      "right" : "mWakeUpWhenPluggedOrUnpluggedSetting = Settings.Global.getInt(resolver,\n                Settings.Global.WAKE_WHEN_PLUGGED_OR_UNPLUGGED,\n                (mWakeUpWhenPluggedOrUnpluggedConfig ? 1 : 0));",
      "info" : "ExpressionStatement[34169-34368]:ExpressionStatement[34169-34368]"
    }, {
      "left" : "mProximityWakeEnabled = Settings.System.getInt(resolver,\n                Settings.System.PROXIMITY_ON_WAKE, 0) == 1;",
      "right" : "mProximityWakeEnabled = Settings.System.getInt(resolver,\n                Settings.System.PROXIMITY_ON_WAKE, 0) == 1;",
      "info" : "ExpressionStatement[34377-34493]:ExpressionStatement[34377-34493]"
    }, {
      "left" : "final int oldScreenBrightnessSetting = mScreenBrightnessSetting;",
      "right" : "final int oldScreenBrightnessSetting = mScreenBrightnessSetting;",
      "info" : "VariableDeclarationStatement[34503-34567]:VariableDeclarationStatement[34503-34567]"
    }, {
      "left" : "mScreenBrightnessSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_BRIGHTNESS, mScreenBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "right" : "mScreenBrightnessSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_BRIGHTNESS, mScreenBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[34576-34768]:ExpressionStatement[34576-34768]"
    }, {
      "left" : "if (oldScreenBrightnessSetting != mScreenBrightnessSetting)",
      "right" : "if (oldScreenBrightnessSetting != mScreenBrightnessSetting)",
      "info" : "IfStatement[34777-34908]:IfStatement[34777-34908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34837-34908]:Block[34837-34908]"
    }, {
      "left" : "mTemporaryScreenBrightnessSettingOverride = -1;",
      "right" : "mTemporaryScreenBrightnessSettingOverride = -1;",
      "info" : "ExpressionStatement[34851-34898]:ExpressionStatement[34851-34898]"
    }, {
      "left" : "final float oldScreenAutoBrightnessAdjustmentSetting =\n                mScreenAutoBrightnessAdjustmentSetting;",
      "right" : "final float oldScreenAutoBrightnessAdjustmentSetting =\n                mScreenAutoBrightnessAdjustmentSetting;",
      "info" : "VariableDeclarationStatement[34918-35028]:VariableDeclarationStatement[34918-35028]"
    }, {
      "left" : "mScreenAutoBrightnessAdjustmentSetting = Settings.System.getFloatForUser(resolver,\n                Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ, 0.0f,\n                UserHandle.USER_CURRENT);",
      "right" : "mScreenAutoBrightnessAdjustmentSetting = Settings.System.getFloatForUser(resolver,\n                Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ, 0.0f,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[35037-35227]:ExpressionStatement[35037-35227]"
    }, {
      "left" : "if (oldScreenAutoBrightnessAdjustmentSetting != mScreenAutoBrightnessAdjustmentSetting)",
      "right" : "if (oldScreenAutoBrightnessAdjustmentSetting != mScreenAutoBrightnessAdjustmentSetting)",
      "info" : "IfStatement[35236-35416]:IfStatement[35236-35416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35324-35416]:Block[35324-35416]"
    }, {
      "left" : "mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = Float.NaN;",
      "right" : "mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = Float.NaN;",
      "info" : "ExpressionStatement[35338-35406]:ExpressionStatement[35338-35406]"
    }, {
      "left" : "mScreenBrightnessModeSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_BRIGHTNESS_MODE,\n                Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL, UserHandle.USER_CURRENT);",
      "right" : "mScreenBrightnessModeSetting = Settings.System.getIntForUser(resolver,\n                Settings.System.SCREEN_BRIGHTNESS_MODE,\n                Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL, UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[35426-35641]:ExpressionStatement[35426-35641]"
    }, {
      "left" : "final boolean lowPowerModeEnabled = Settings.Global.getInt(resolver,\n                Settings.Global.LOW_POWER_MODE, 0) != 0;",
      "right" : "final boolean lowPowerModeEnabled = Settings.Global.getInt(resolver,\n                Settings.Global.LOW_POWER_MODE, 0) != 0;",
      "info" : "VariableDeclarationStatement[35651-35776]:VariableDeclarationStatement[35651-35776]"
    }, {
      "left" : "final boolean autoLowPowerModeConfigured = Settings.Global.getInt(resolver,\n                Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL, 0) != 0;",
      "right" : "final boolean autoLowPowerModeConfigured = Settings.Global.getInt(resolver,\n                Settings.Global.LOW_POWER_MODE_TRIGGER_LEVEL, 0) != 0;",
      "info" : "VariableDeclarationStatement[35785-35931]:VariableDeclarationStatement[35785-35931]"
    }, {
      "left" : "if (lowPowerModeEnabled != mLowPowerModeSetting\n                || autoLowPowerModeConfigured != mAutoLowPowerModeConfigured)",
      "right" : "if (lowPowerModeEnabled != mLowPowerModeSetting\n                || autoLowPowerModeConfigured != mAutoLowPowerModeConfigured)",
      "info" : "IfStatement[35940-36243]:IfStatement[35940-36243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36066-36243]:Block[36066-36243]"
    }, {
      "left" : "mLowPowerModeSetting = lowPowerModeEnabled;",
      "right" : "mLowPowerModeSetting = lowPowerModeEnabled;",
      "info" : "ExpressionStatement[36080-36123]:ExpressionStatement[36080-36123]"
    }, {
      "left" : "mAutoLowPowerModeConfigured = autoLowPowerModeConfigured;",
      "right" : "mAutoLowPowerModeConfigured = autoLowPowerModeConfigured;",
      "info" : "ExpressionStatement[36136-36193]:ExpressionStatement[36136-36193]"
    }, {
      "left" : "updateLowPowerModeLocked();",
      "right" : "updateLowPowerModeLocked();",
      "info" : "ExpressionStatement[36206-36233]:ExpressionStatement[36206-36233]"
    }, {
      "left" : "mButtonTimeout = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT,\n                DEFAULT_BUTTON_ON_DURATION, UserHandle.USER_CURRENT);",
      "right" : "mButtonTimeout = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.BUTTON_BACKLIGHT_TIMEOUT,\n                DEFAULT_BUTTON_ON_DURATION, UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[36253-36437]:ExpressionStatement[36253-36437]"
    }, {
      "left" : "mButtonBrightness = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.BUTTON_BRIGHTNESS, mButtonBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "right" : "mButtonBrightness = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.BUTTON_BRIGHTNESS, mButtonBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[36447-36632]:ExpressionStatement[36447-36632]"
    }, {
      "left" : "mKeyboardBrightness = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.KEYBOARD_BRIGHTNESS, mKeyboardBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "right" : "mKeyboardBrightness = Settings.Secure.getIntForUser(resolver,\n                Settings.Secure.KEYBOARD_BRIGHTNESS, mKeyboardBrightnessSettingDefault,\n                UserHandle.USER_CURRENT);",
      "info" : "ExpressionStatement[36641-36832]:ExpressionStatement[36641-36832]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[36842-36867]:ExpressionStatement[36842-36867]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36879-36883]:PrimitiveType[36879-36883]"
    }, {
      "left" : "updateLowPowerModeLocked",
      "right" : "updateLowPowerModeLocked",
      "info" : "SimpleName[36884-36908]:SimpleName[36884-36908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36911-38934]:Block[36911-38934]"
    }, {
      "left" : "if (mIsPowered && mLowPowerModeSetting)",
      "right" : "if (mIsPowered && mLowPowerModeSetting)",
      "info" : "IfStatement[36921-37310]:IfStatement[36921-37310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36961-37310]:Block[36961-37310]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[36975-37093]:IfStatement[36975-37093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36991-37093]:Block[36991-37093]"
    }, {
      "left" : "Slog.d(TAG, \"updateLowPowerModeLocked: powered, turning setting off\");",
      "right" : "Slog.d(TAG, \"updateLowPowerModeLocked: powered, turning setting off\");",
      "info" : "ExpressionStatement[37009-37079]:ExpressionStatement[37009-37079]"
    }, {
      "left" : "Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, 0);",
      "right" : "Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, 0);",
      "info" : "ExpressionStatement[37149-37258]:ExpressionStatement[37149-37258]"
    }, {
      "left" : "mLowPowerModeSetting = false;",
      "right" : "mLowPowerModeSetting = false;",
      "info" : "ExpressionStatement[37271-37300]:ExpressionStatement[37271-37300]"
    }, {
      "left" : "final boolean autoLowPowerModeEnabled = !mIsPowered && mAutoLowPowerModeConfigured\n                && !mAutoLowPowerModeSnoozing && mBatteryLevelLow;",
      "right" : "final boolean autoLowPowerModeEnabled = !mIsPowered && mAutoLowPowerModeConfigured\n                && !mAutoLowPowerModeSnoozing && mBatteryLevelLow;",
      "info" : "VariableDeclarationStatement[37319-37468]:VariableDeclarationStatement[37319-37468]"
    }, {
      "left" : "final boolean lowPowerModeEnabled = mLowPowerModeSetting || autoLowPowerModeEnabled;",
      "right" : "final boolean lowPowerModeEnabled = mLowPowerModeSetting || autoLowPowerModeEnabled;",
      "info" : "VariableDeclarationStatement[37477-37561]:VariableDeclarationStatement[37477-37561]"
    }, {
      "left" : "if (mLowPowerModeEnabled != lowPowerModeEnabled)",
      "right" : "if (mLowPowerModeEnabled != lowPowerModeEnabled)",
      "info" : "IfStatement[37571-38928]:IfStatement[37571-38928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37620-38928]:Block[37620-38928]"
    }, {
      "left" : "mLowPowerModeEnabled = lowPowerModeEnabled;",
      "right" : "mLowPowerModeEnabled = lowPowerModeEnabled;",
      "info" : "ExpressionStatement[37634-37677]:ExpressionStatement[37634-37677]"
    }, {
      "left" : "powerHintInternal(POWER_HINT_LOW_POWER, lowPowerModeEnabled ? 1 : 0);",
      "right" : "powerHintInternal(POWER_HINT_LOW_POWER, lowPowerModeEnabled ? 1 : 0);",
      "info" : "ExpressionStatement[37690-37759]:ExpressionStatement[37690-37759]"
    }, {
      "left" : "BackgroundThread.getHandler().post(new Runnable() {\n                @Override\n                public void run() {\n                    Intent intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGING)\n                            .putExtra(PowerManager.EXTRA_POWER_SAVE_MODE, mLowPowerModeEnabled)\n                            .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n                    mContext.sendBroadcast(intent);\n                    ArrayList<PowerManagerInternal.LowPowerModeListener> listeners;\n                    synchronized (mLock) {\n                        listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);\n                    }\n                    for (int i=0; i<listeners.size(); i++) {\n                        listeners.get(i).onLowPowerModeChanged(lowPowerModeEnabled);\n                    }\n                    intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);\n                    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n                    mContext.sendBroadcast(intent);\n                }\n            });",
      "right" : "BackgroundThread.getHandler().post(new Runnable() {\n                @Override\n                public void run() {\n                    Intent intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGING)\n                            .putExtra(PowerManager.EXTRA_POWER_SAVE_MODE, mLowPowerModeEnabled)\n                            .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n                    mContext.sendBroadcast(intent);\n                    ArrayList<PowerManagerInternal.LowPowerModeListener> listeners;\n                    synchronized (mLock) {\n                        listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);\n                    }\n                    for (int i=0; i<listeners.size(); i++) {\n                        listeners.get(i).onLowPowerModeChanged(lowPowerModeEnabled);\n                    }\n                    intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);\n                    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n                    mContext.sendBroadcast(intent);\n                }\n            });",
      "info" : "ExpressionStatement[37772-38918]:ExpressionStatement[37772-38918]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37840-37849]:MarkerAnnotation[37840-37849]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37866-37872]:Modifier[37866-37872]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37873-37877]:PrimitiveType[37873-37877]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[37878-37881]:SimpleName[37878-37881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37884-38902]:Block[37884-38902]"
    }, {
      "left" : "Intent intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGING)\n                            .putExtra(PowerManager.EXTRA_POWER_SAVE_MODE, mLowPowerModeEnabled)\n                            .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);",
      "right" : "Intent intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGING)\n                            .putExtra(PowerManager.EXTRA_POWER_SAVE_MODE, mLowPowerModeEnabled)\n                            .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);",
      "info" : "VariableDeclarationStatement[37906-38151]:VariableDeclarationStatement[37906-38151]"
    }, {
      "left" : "mContext.sendBroadcast(intent);",
      "right" : "mContext.sendBroadcast(intent);",
      "info" : "ExpressionStatement[38172-38203]:ExpressionStatement[38172-38203]"
    }, {
      "left" : "ArrayList<PowerManagerInternal.LowPowerModeListener> listeners;",
      "right" : "ArrayList<PowerManagerInternal.LowPowerModeListener> listeners;",
      "info" : "VariableDeclarationStatement[38224-38287]:VariableDeclarationStatement[38224-38287]"
    }, {
      "left" : "synchronized (mLock) {\n                        listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);\n                    }",
      "right" : "synchronized (mLock) {\n                        listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);\n                    }",
      "info" : "SynchronizedStatement[38308-38503]:SynchronizedStatement[38308-38503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38329-38503]:Block[38329-38503]"
    }, {
      "left" : "listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);",
      "right" : "listeners = new ArrayList<PowerManagerInternal.LowPowerModeListener>(\n                                mLowPowerModeListeners);",
      "info" : "ExpressionStatement[38355-38481]:ExpressionStatement[38355-38481]"
    }, {
      "left" : "for (int i=0; i<listeners.size(); i++)",
      "right" : "for (int i=0; i<listeners.size(); i++)",
      "info" : "ForStatement[38524-38671]:ForStatement[38524-38671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38563-38671]:Block[38563-38671]"
    }, {
      "left" : "listeners.get(i).onLowPowerModeChanged(lowPowerModeEnabled);",
      "right" : "listeners.get(i).onLowPowerModeChanged(lowPowerModeEnabled);",
      "info" : "ExpressionStatement[38589-38649]:ExpressionStatement[38589-38649]"
    }, {
      "left" : "intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);",
      "right" : "intent = new Intent(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);",
      "info" : "ExpressionStatement[38692-38757]:ExpressionStatement[38692-38757]"
    }, {
      "left" : "intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);",
      "right" : "intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);",
      "info" : "ExpressionStatement[38778-38832]:ExpressionStatement[38778-38832]"
    }, {
      "left" : "mContext.sendBroadcast(intent);",
      "right" : "mContext.sendBroadcast(intent);",
      "info" : "ExpressionStatement[38853-38884]:ExpressionStatement[38853-38884]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38940-38947]:Modifier[38940-38947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38948-38952]:PrimitiveType[38948-38952]"
    }, {
      "left" : "handleSettingsChangedLocked",
      "right" : "handleSettingsChangedLocked",
      "info" : "SimpleName[38953-38980]:SimpleName[38953-38980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38983-39056]:Block[38983-39056]"
    }, {
      "left" : "updateSettingsLocked();",
      "right" : "updateSettingsLocked();",
      "info" : "ExpressionStatement[38993-39016]:ExpressionStatement[38993-39016]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[39025-39050]:ExpressionStatement[39025-39050]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39062-39069]:Modifier[39062-39069]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39070-39074]:PrimitiveType[39070-39074]"
    }, {
      "left" : "acquireWakeLockInternal",
      "right" : "acquireWakeLockInternal",
      "info" : "SimpleName[39075-39098]:SimpleName[39075-39098]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[39099-39111]:SingleVariableDeclaration[39099-39111]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[39113-39122]:SingleVariableDeclaration[39113-39122]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[39124-39134]:SingleVariableDeclaration[39124-39134]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[39136-39154]:SingleVariableDeclaration[39136-39154]"
    }, {
      "left" : "WorkSource ws",
      "right" : "WorkSource ws",
      "info" : "SingleVariableDeclaration[39168-39181]:SingleVariableDeclaration[39168-39181]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[39183-39200]:SingleVariableDeclaration[39183-39200]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[39202-39209]:SingleVariableDeclaration[39202-39209]"
    }, {
      "left" : "int pid",
      "right" : "int pid",
      "info" : "SingleVariableDeclaration[39211-39218]:SingleVariableDeclaration[39211-39218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39220-41731]:Block[39220-41731]"
    }, {
      "left" : "synchronized (mLock) {\n            if(mBlockedUids.contains(new Integer(uid)) && uid != Process.myUid()) {\n                //wakelock acquisition for blocked uid, do not acquire.\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"uid is blocked not acquiring wakeLock flags=0x\" +\n                            Integer.toHexString(flags) + \" tag=\" + tag + \" uid=\" + uid +\n                            \" pid =\" + pid);\n                }\n                return;\n            }\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"acquireWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \", flags=0x\" + Integer.toHexString(flags)\n                        + \", tag=\\\"\" + tag + \"\\\", ws=\" + ws + \", uid=\" + uid + \", pid=\" + pid);\n            }\n\n            WakeLock wakeLock;\n            int index = findWakeLockIndexLocked(lock);\n            boolean notifyAcquire;\n            if (index >= 0) {\n                wakeLock = mWakeLocks.get(index);\n                if (!wakeLock.hasSameProperties(flags, tag, ws, uid, pid)) {\n                    // Update existing wake lock.  This shouldn't happen but is harmless.\n                    notifyWakeLockChangingLocked(wakeLock, flags, tag, packageName,\n                            uid, pid, ws, historyTag);\n                    wakeLock.updateProperties(flags, tag, packageName, ws, historyTag, uid, pid);\n                }\n                notifyAcquire = false;\n            } else {\n                wakeLock = new WakeLock(lock, flags, tag, packageName, ws, historyTag, uid, pid);\n                try {\n                    lock.linkToDeath(wakeLock, 0);\n                } catch (RemoteException ex) {\n                    throw new IllegalArgumentException(\"Wake lock is already dead.\");\n                }\n                mWakeLocks.add(wakeLock);\n                notifyAcquire = true;\n            }\n\n            applyWakeLockFlagsOnAcquireLocked(wakeLock, uid);\n            mDirty |= DIRTY_WAKE_LOCKS;\n            updatePowerStateLocked();\n            if (notifyAcquire) {\n                // This needs to be done last so we are sure we have acquired the\n                // kernel wake lock.  Otherwise we have a race where the system may\n                // go to sleep between the time we start the accounting in battery\n                // stats and when we actually get around to telling the kernel to\n                // stay awake.\n                notifyWakeLockAcquiredLocked(wakeLock);\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if(mBlockedUids.contains(new Integer(uid)) && uid != Process.myUid()) {\n                //wakelock acquisition for blocked uid, do not acquire.\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"uid is blocked not acquiring wakeLock flags=0x\" +\n                            Integer.toHexString(flags) + \" tag=\" + tag + \" uid=\" + uid +\n                            \" pid =\" + pid);\n                }\n                return;\n            }\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"acquireWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \", flags=0x\" + Integer.toHexString(flags)\n                        + \", tag=\\\"\" + tag + \"\\\", ws=\" + ws + \", uid=\" + uid + \", pid=\" + pid);\n            }\n\n            WakeLock wakeLock;\n            int index = findWakeLockIndexLocked(lock);\n            boolean notifyAcquire;\n            if (index >= 0) {\n                wakeLock = mWakeLocks.get(index);\n                if (!wakeLock.hasSameProperties(flags, tag, ws, uid, pid)) {\n                    // Update existing wake lock.  This shouldn't happen but is harmless.\n                    notifyWakeLockChangingLocked(wakeLock, flags, tag, packageName,\n                            uid, pid, ws, historyTag);\n                    wakeLock.updateProperties(flags, tag, packageName, ws, historyTag, uid, pid);\n                }\n                notifyAcquire = false;\n            } else {\n                wakeLock = new WakeLock(lock, flags, tag, packageName, ws, historyTag, uid, pid);\n                try {\n                    lock.linkToDeath(wakeLock, 0);\n                } catch (RemoteException ex) {\n                    throw new IllegalArgumentException(\"Wake lock is already dead.\");\n                }\n                mWakeLocks.add(wakeLock);\n                notifyAcquire = true;\n            }\n\n            applyWakeLockFlagsOnAcquireLocked(wakeLock, uid);\n            mDirty |= DIRTY_WAKE_LOCKS;\n            updatePowerStateLocked();\n            if (notifyAcquire) {\n                // This needs to be done last so we are sure we have acquired the\n                // kernel wake lock.  Otherwise we have a race where the system may\n                // go to sleep between the time we start the accounting in battery\n                // stats and when we actually get around to telling the kernel to\n                // stay awake.\n                notifyWakeLockAcquiredLocked(wakeLock);\n            }\n        }",
      "info" : "SynchronizedStatement[39230-41725]:SynchronizedStatement[39230-41725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39251-41725]:Block[39251-41725]"
    }, {
      "left" : "if(mBlockedUids.contains(new Integer(uid)) && uid != Process.myUid())",
      "right" : "if(mBlockedUids.contains(new Integer(uid)) && uid != Process.myUid())",
      "info" : "IfStatement[39265-39715]:IfStatement[39265-39715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39335-39715]:Block[39335-39715]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[39425-39677]:IfStatement[39425-39677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39441-39677]:Block[39441-39677]"
    }, {
      "left" : "Slog.d(TAG, \"uid is blocked not acquiring wakeLock flags=0x\" +\n                            Integer.toHexString(flags) + \" tag=\" + tag + \" uid=\" + uid +\n                            \" pid =\" + pid);",
      "right" : "Slog.d(TAG, \"uid is blocked not acquiring wakeLock flags=0x\" +\n                            Integer.toHexString(flags) + \" tag=\" + tag + \" uid=\" + uid +\n                            \" pid =\" + pid);",
      "info" : "ExpressionStatement[39463-39659]:ExpressionStatement[39463-39659]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39694-39701]:ReturnStatement[39694-39701]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[39728-40009]:IfStatement[39728-40009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39744-40009]:Block[39744-40009]"
    }, {
      "left" : "Slog.d(TAG, \"acquireWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \", flags=0x\" + Integer.toHexString(flags)\n                        + \", tag=\\\"\" + tag + \"\\\", ws=\" + ws + \", uid=\" + uid + \", pid=\" + pid);",
      "right" : "Slog.d(TAG, \"acquireWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \", flags=0x\" + Integer.toHexString(flags)\n                        + \", tag=\\\"\" + tag + \"\\\", ws=\" + ws + \", uid=\" + uid + \", pid=\" + pid);",
      "info" : "ExpressionStatement[39762-39995]:ExpressionStatement[39762-39995]"
    }, {
      "left" : "WakeLock wakeLock;",
      "right" : "WakeLock wakeLock;",
      "info" : "VariableDeclarationStatement[40023-40041]:VariableDeclarationStatement[40023-40041]"
    }, {
      "left" : "int index = findWakeLockIndexLocked(lock);",
      "right" : "int index = findWakeLockIndexLocked(lock);",
      "info" : "VariableDeclarationStatement[40054-40096]:VariableDeclarationStatement[40054-40096]"
    }, {
      "left" : "boolean notifyAcquire;",
      "right" : "boolean notifyAcquire;",
      "info" : "VariableDeclarationStatement[40109-40131]:VariableDeclarationStatement[40109-40131]"
    }, {
      "left" : "if (index >= 0)",
      "right" : "if (index >= 0)",
      "info" : "IfStatement[40144-41109]:IfStatement[40144-41109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40160-40686]:Block[40160-40686]"
    }, {
      "left" : "wakeLock = mWakeLocks.get(index);",
      "right" : "wakeLock = mWakeLocks.get(index);",
      "info" : "ExpressionStatement[40178-40211]:ExpressionStatement[40178-40211]"
    }, {
      "left" : "if (!wakeLock.hasSameProperties(flags, tag, ws, uid, pid))",
      "right" : "if (!wakeLock.hasSameProperties(flags, tag, ws, uid, pid))",
      "info" : "IfStatement[40228-40633]:IfStatement[40228-40633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40287-40633]:Block[40287-40633]"
    }, {
      "left" : "notifyWakeLockChangingLocked(wakeLock, flags, tag, packageName,\n                            uid, pid, ws, historyTag);",
      "right" : "notifyWakeLockChangingLocked(wakeLock, flags, tag, packageName,\n                            uid, pid, ws, historyTag);",
      "info" : "ExpressionStatement[40399-40517]:ExpressionStatement[40399-40517]"
    }, {
      "left" : "wakeLock.updateProperties(flags, tag, packageName, ws, historyTag, uid, pid);",
      "right" : "wakeLock.updateProperties(flags, tag, packageName, ws, historyTag, uid, pid);",
      "info" : "ExpressionStatement[40538-40615]:ExpressionStatement[40538-40615]"
    }, {
      "left" : "notifyAcquire = false;",
      "right" : "notifyAcquire = false;",
      "info" : "ExpressionStatement[40650-40672]:ExpressionStatement[40650-40672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40692-41109]:Block[40692-41109]"
    }, {
      "left" : "wakeLock = new WakeLock(lock, flags, tag, packageName, ws, historyTag, uid, pid);",
      "right" : "wakeLock = new WakeLock(lock, flags, tag, packageName, ws, historyTag, uid, pid);",
      "info" : "ExpressionStatement[40710-40791]:ExpressionStatement[40710-40791]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[40808-41015]:TryStatement[40808-41015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40812-40882]:Block[40812-40882]"
    }, {
      "left" : "lock.linkToDeath(wakeLock, 0);",
      "right" : "lock.linkToDeath(wakeLock, 0);",
      "info" : "ExpressionStatement[40834-40864]:ExpressionStatement[40834-40864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40910-41015]:Block[40910-41015]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Wake lock is already dead.\");",
      "right" : "throw new IllegalArgumentException(\"Wake lock is already dead.\");",
      "info" : "ThrowStatement[40932-40997]:ThrowStatement[40932-40997]"
    }, {
      "left" : "mWakeLocks.add(wakeLock);",
      "right" : "mWakeLocks.add(wakeLock);",
      "info" : "ExpressionStatement[41032-41057]:ExpressionStatement[41032-41057]"
    }, {
      "left" : "notifyAcquire = true;",
      "right" : "notifyAcquire = true;",
      "info" : "ExpressionStatement[41074-41095]:ExpressionStatement[41074-41095]"
    }, {
      "left" : "applyWakeLockFlagsOnAcquireLocked(wakeLock, uid);",
      "right" : "applyWakeLockFlagsOnAcquireLocked(wakeLock, uid);",
      "info" : "ExpressionStatement[41123-41172]:ExpressionStatement[41123-41172]"
    }, {
      "left" : "mDirty |= DIRTY_WAKE_LOCKS;",
      "right" : "mDirty |= DIRTY_WAKE_LOCKS;",
      "info" : "ExpressionStatement[41185-41212]:ExpressionStatement[41185-41212]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[41225-41250]:ExpressionStatement[41225-41250]"
    }, {
      "left" : "if (notifyAcquire)",
      "right" : "if (notifyAcquire)",
      "info" : "IfStatement[41263-41715]:IfStatement[41263-41715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41282-41715]:Block[41282-41715]"
    }, {
      "left" : "notifyWakeLockAcquiredLocked(wakeLock);",
      "right" : "notifyWakeLockAcquiredLocked(wakeLock);",
      "info" : "ExpressionStatement[41662-41701]:ExpressionStatement[41662-41701]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[41737-41769]:SingleMemberAnnotation[41737-41769]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41774-41781]:Modifier[41774-41781]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41782-41788]:Modifier[41782-41788]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41789-41796]:PrimitiveType[41789-41796]"
    }, {
      "left" : "isScreenLock",
      "right" : "isScreenLock",
      "info" : "SimpleName[41797-41809]:SimpleName[41797-41809]"
    }, {
      "left" : "final WakeLock wakeLock",
      "right" : "final WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[41810-41833]:SingleVariableDeclaration[41810-41833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41835-42127]:Block[41835-42127]"
    }, {
      "left" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n            case PowerManager.FULL_WAKE_LOCK:\n            case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n            case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                return true;\n        }",
      "right" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n            case PowerManager.FULL_WAKE_LOCK:\n            case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n            case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                return true;\n        }",
      "info" : "SwitchStatement[41845-42099]:SwitchStatement[41845-42099]"
    }, {
      "left" : "case PowerManager.FULL_WAKE_LOCK:",
      "right" : "case PowerManager.FULL_WAKE_LOCK:",
      "info" : "SwitchCase[41920-41953]:SwitchCase[41920-41953]"
    }, {
      "left" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "info" : "SwitchCase[41966-42008]:SwitchCase[41966-42008]"
    }, {
      "left" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "info" : "SwitchCase[42021-42060]:SwitchCase[42021-42060]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42077-42089]:ReturnStatement[42077-42089]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42108-42121]:ReturnStatement[42108-42121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42133-42140]:Modifier[42133-42140]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42141-42145]:PrimitiveType[42141-42145]"
    }, {
      "left" : "applyWakeLockFlagsOnAcquireLocked",
      "right" : "applyWakeLockFlagsOnAcquireLocked",
      "info" : "SimpleName[42146-42179]:SimpleName[42146-42179]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[42180-42197]:SingleVariableDeclaration[42180-42197]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[42199-42206]:SingleVariableDeclaration[42199-42206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42208-42409]:Block[42208-42409]"
    }, {
      "left" : "if ((wakeLock.mFlags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0\n                && isScreenLock(wakeLock))",
      "right" : "if ((wakeLock.mFlags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0\n                && isScreenLock(wakeLock))",
      "info" : "IfStatement[42218-42403]:IfStatement[42218-42403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42325-42403]:Block[42325-42403]"
    }, {
      "left" : "wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), uid);",
      "right" : "wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), uid);",
      "info" : "ExpressionStatement[42339-42393]:ExpressionStatement[42339-42393]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42415-42422]:Modifier[42415-42422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42423-42427]:PrimitiveType[42423-42427]"
    }, {
      "left" : "releaseWakeLockInternal",
      "right" : "releaseWakeLockInternal",
      "info" : "SimpleName[42428-42451]:SimpleName[42428-42451]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[42452-42464]:SingleVariableDeclaration[42452-42464]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[42466-42475]:SingleVariableDeclaration[42466-42475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42477-43416]:Block[42477-43416]"
    }, {
      "left" : "synchronized (mLock) {\n            int index = findWakeLockIndexLocked(lock);\n            if (index < 0) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], flags=0x\" + Integer.toHexString(flags));\n                }\n                return;\n            }\n\n            WakeLock wakeLock = mWakeLocks.get(index);\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], flags=0x\" + Integer.toHexString(flags));\n            }\n\n            if ((flags & PowerManager.RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY) != 0) {\n                mRequestWaitForNegativeProximity = true;\n            }\n\n            wakeLock.mLock.unlinkToDeath(wakeLock, 0);\n            removeWakeLockLocked(wakeLock, index);\n        }",
      "right" : "synchronized (mLock) {\n            int index = findWakeLockIndexLocked(lock);\n            if (index < 0) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], flags=0x\" + Integer.toHexString(flags));\n                }\n                return;\n            }\n\n            WakeLock wakeLock = mWakeLocks.get(index);\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], flags=0x\" + Integer.toHexString(flags));\n            }\n\n            if ((flags & PowerManager.RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY) != 0) {\n                mRequestWaitForNegativeProximity = true;\n            }\n\n            wakeLock.mLock.unlinkToDeath(wakeLock, 0);\n            removeWakeLockLocked(wakeLock, index);\n        }",
      "info" : "SynchronizedStatement[42487-43410]:SynchronizedStatement[42487-43410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42508-43410]:Block[42508-43410]"
    }, {
      "left" : "int index = findWakeLockIndexLocked(lock);",
      "right" : "int index = findWakeLockIndexLocked(lock);",
      "info" : "VariableDeclarationStatement[42522-42564]:VariableDeclarationStatement[42522-42564]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[42577-42859]:IfStatement[42577-42859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42592-42859]:Block[42592-42859]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[42610-42821]:IfStatement[42610-42821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42626-42821]:Block[42626-42821]"
    }, {
      "left" : "Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], flags=0x\" + Integer.toHexString(flags));",
      "right" : "Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], flags=0x\" + Integer.toHexString(flags));",
      "info" : "ExpressionStatement[42648-42803]:ExpressionStatement[42648-42803]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42838-42845]:ReturnStatement[42838-42845]"
    }, {
      "left" : "WakeLock wakeLock = mWakeLocks.get(index);",
      "right" : "WakeLock wakeLock = mWakeLocks.get(index);",
      "info" : "VariableDeclarationStatement[42873-42915]:VariableDeclarationStatement[42873-42915]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[42928-43139]:IfStatement[42928-43139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42944-43139]:Block[42944-43139]"
    }, {
      "left" : "Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], flags=0x\" + Integer.toHexString(flags));",
      "right" : "Slog.d(TAG, \"releaseWakeLockInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], flags=0x\" + Integer.toHexString(flags));",
      "info" : "ExpressionStatement[42962-43125]:ExpressionStatement[42962-43125]"
    }, {
      "left" : "if ((flags & PowerManager.RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY) != 0)",
      "right" : "if ((flags & PowerManager.RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY) != 0)",
      "info" : "IfStatement[43153-43293]:IfStatement[43153-43293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43221-43293]:Block[43221-43293]"
    }, {
      "left" : "mRequestWaitForNegativeProximity = true;",
      "right" : "mRequestWaitForNegativeProximity = true;",
      "info" : "ExpressionStatement[43239-43279]:ExpressionStatement[43239-43279]"
    }, {
      "left" : "wakeLock.mLock.unlinkToDeath(wakeLock, 0);",
      "right" : "wakeLock.mLock.unlinkToDeath(wakeLock, 0);",
      "info" : "ExpressionStatement[43307-43349]:ExpressionStatement[43307-43349]"
    }, {
      "left" : "removeWakeLockLocked(wakeLock, index);",
      "right" : "removeWakeLockLocked(wakeLock, index);",
      "info" : "ExpressionStatement[43362-43400]:ExpressionStatement[43362-43400]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43422-43429]:Modifier[43422-43429]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43430-43434]:PrimitiveType[43430-43434]"
    }, {
      "left" : "handleWakeLockDeath",
      "right" : "handleWakeLockDeath",
      "info" : "SimpleName[43435-43454]:SimpleName[43435-43454]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[43455-43472]:SingleVariableDeclaration[43455-43472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43474-43887]:Block[43474-43887]"
    }, {
      "left" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleWakeLockDeath: lock=\" + Objects.hashCode(wakeLock.mLock)\n                        + \" [\" + wakeLock.mTag + \"]\");\n            }\n\n            int index = mWakeLocks.indexOf(wakeLock);\n            if (index < 0) {\n                return;\n            }\n\n            removeWakeLockLocked(wakeLock, index);\n        }",
      "right" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleWakeLockDeath: lock=\" + Objects.hashCode(wakeLock.mLock)\n                        + \" [\" + wakeLock.mTag + \"]\");\n            }\n\n            int index = mWakeLocks.indexOf(wakeLock);\n            if (index < 0) {\n                return;\n            }\n\n            removeWakeLockLocked(wakeLock, index);\n        }",
      "info" : "SynchronizedStatement[43484-43881]:SynchronizedStatement[43484-43881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43505-43881]:Block[43505-43881]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[43519-43697]:IfStatement[43519-43697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43535-43697]:Block[43535-43697]"
    }, {
      "left" : "Slog.d(TAG, \"handleWakeLockDeath: lock=\" + Objects.hashCode(wakeLock.mLock)\n                        + \" [\" + wakeLock.mTag + \"]\");",
      "right" : "Slog.d(TAG, \"handleWakeLockDeath: lock=\" + Objects.hashCode(wakeLock.mLock)\n                        + \" [\" + wakeLock.mTag + \"]\");",
      "info" : "ExpressionStatement[43553-43683]:ExpressionStatement[43553-43683]"
    }, {
      "left" : "int index = mWakeLocks.indexOf(wakeLock);",
      "right" : "int index = mWakeLocks.indexOf(wakeLock);",
      "info" : "VariableDeclarationStatement[43711-43752]:VariableDeclarationStatement[43711-43752]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[43765-43819]:IfStatement[43765-43819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43780-43819]:Block[43780-43819]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43798-43805]:ReturnStatement[43798-43805]"
    }, {
      "left" : "removeWakeLockLocked(wakeLock, index);",
      "right" : "removeWakeLockLocked(wakeLock, index);",
      "info" : "ExpressionStatement[43833-43871]:ExpressionStatement[43833-43871]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43893-43900]:Modifier[43893-43900]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43901-43905]:PrimitiveType[43901-43905]"
    }, {
      "left" : "removeWakeLockLocked",
      "right" : "removeWakeLockLocked",
      "info" : "SimpleName[43906-43926]:SimpleName[43906-43926]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[43927-43944]:SingleVariableDeclaration[43927-43944]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[43946-43955]:SingleVariableDeclaration[43946-43955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43957-44170]:Block[43957-44170]"
    }, {
      "left" : "mWakeLocks.remove(index);",
      "right" : "mWakeLocks.remove(index);",
      "info" : "ExpressionStatement[43967-43992]:ExpressionStatement[43967-43992]"
    }, {
      "left" : "notifyWakeLockReleasedLocked(wakeLock);",
      "right" : "notifyWakeLockReleasedLocked(wakeLock);",
      "info" : "ExpressionStatement[44001-44040]:ExpressionStatement[44001-44040]"
    }, {
      "left" : "applyWakeLockFlagsOnReleaseLocked(wakeLock);",
      "right" : "applyWakeLockFlagsOnReleaseLocked(wakeLock);",
      "info" : "ExpressionStatement[44050-44094]:ExpressionStatement[44050-44094]"
    }, {
      "left" : "mDirty |= DIRTY_WAKE_LOCKS;",
      "right" : "mDirty |= DIRTY_WAKE_LOCKS;",
      "info" : "ExpressionStatement[44103-44130]:ExpressionStatement[44103-44130]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[44139-44164]:ExpressionStatement[44139-44164]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44176-44183]:Modifier[44176-44183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44184-44188]:PrimitiveType[44184-44188]"
    }, {
      "left" : "applyWakeLockFlagsOnReleaseLocked",
      "right" : "applyWakeLockFlagsOnReleaseLocked",
      "info" : "SimpleName[44189-44222]:SimpleName[44189-44222]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[44223-44240]:SingleVariableDeclaration[44223-44240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44242-44609]:Block[44242-44609]"
    }, {
      "left" : "if ((wakeLock.mFlags & PowerManager.ON_AFTER_RELEASE) != 0\n                && isScreenLock(wakeLock))",
      "right" : "if ((wakeLock.mFlags & PowerManager.ON_AFTER_RELEASE) != 0\n                && isScreenLock(wakeLock))",
      "info" : "IfStatement[44252-44603]:IfStatement[44252-44603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44354-44603]:Block[44354-44603]"
    }, {
      "left" : "userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER,\n                    PowerManager.USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS,\n                    wakeLock.mOwnerUid);",
      "right" : "userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER,\n                    PowerManager.USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS,\n                    wakeLock.mOwnerUid);",
      "info" : "ExpressionStatement[44368-44593]:ExpressionStatement[44368-44593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44615-44622]:Modifier[44615-44622]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44623-44627]:PrimitiveType[44623-44627]"
    }, {
      "left" : "updateWakeLockWorkSourceInternal",
      "right" : "updateWakeLockWorkSourceInternal",
      "info" : "SimpleName[44628-44660]:SimpleName[44628-44660]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[44661-44673]:SingleVariableDeclaration[44661-44673]"
    }, {
      "left" : "WorkSource ws",
      "right" : "WorkSource ws",
      "info" : "SingleVariableDeclaration[44675-44688]:SingleVariableDeclaration[44675-44688]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[44690-44707]:SingleVariableDeclaration[44690-44707]"
    }, {
      "left" : "int callingUid",
      "right" : "int callingUid",
      "info" : "SingleVariableDeclaration[44721-44735]:SingleVariableDeclaration[44721-44735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44737-46222]:Block[44737-46222]"
    }, {
      "left" : "synchronized (mLock) {\n            int index = findWakeLockIndexLocked(lock);\n            int value = SystemProperties.getInt(\"persist.dpm.feature\", 0);\n            boolean isNsrmEnabled = false;\n\n            if ((value & DPM_CONFIG_FEATURE_MASK_NSRM) == DPM_CONFIG_FEATURE_MASK_NSRM)\n                isNsrmEnabled = true;\n\n            if (index < 0) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], ws=\" + ws);\n                }\n                if (!isNsrmEnabled) {\n                throw new IllegalArgumentException(\"Wake lock not active: \" + lock\n                        + \" from uid \" + callingUid);\n                } else {\n                    return;\n                }\n            }\n\n            WakeLock wakeLock = mWakeLocks.get(index);\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], ws=\" + ws);\n            }\n\n            if (!wakeLock.hasSameWorkSource(ws)) {\n                notifyWakeLockChangingLocked(wakeLock, wakeLock.mFlags, wakeLock.mTag,\n                        wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                        ws, historyTag);\n                wakeLock.mHistoryTag = historyTag;\n                wakeLock.updateWorkSource(ws);\n            }\n        }",
      "right" : "synchronized (mLock) {\n            int index = findWakeLockIndexLocked(lock);\n            int value = SystemProperties.getInt(\"persist.dpm.feature\", 0);\n            boolean isNsrmEnabled = false;\n\n            if ((value & DPM_CONFIG_FEATURE_MASK_NSRM) == DPM_CONFIG_FEATURE_MASK_NSRM)\n                isNsrmEnabled = true;\n\n            if (index < 0) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], ws=\" + ws);\n                }\n                if (!isNsrmEnabled) {\n                throw new IllegalArgumentException(\"Wake lock not active: \" + lock\n                        + \" from uid \" + callingUid);\n                } else {\n                    return;\n                }\n            }\n\n            WakeLock wakeLock = mWakeLocks.get(index);\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], ws=\" + ws);\n            }\n\n            if (!wakeLock.hasSameWorkSource(ws)) {\n                notifyWakeLockChangingLocked(wakeLock, wakeLock.mFlags, wakeLock.mTag,\n                        wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                        ws, historyTag);\n                wakeLock.mHistoryTag = historyTag;\n                wakeLock.updateWorkSource(ws);\n            }\n        }",
      "info" : "SynchronizedStatement[44747-46216]:SynchronizedStatement[44747-46216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44768-46216]:Block[44768-46216]"
    }, {
      "left" : "int index = findWakeLockIndexLocked(lock);",
      "right" : "int index = findWakeLockIndexLocked(lock);",
      "info" : "VariableDeclarationStatement[44782-44824]:VariableDeclarationStatement[44782-44824]"
    }, {
      "left" : "int value = SystemProperties.getInt(\"persist.dpm.feature\", 0);",
      "right" : "int value = SystemProperties.getInt(\"persist.dpm.feature\", 0);",
      "info" : "VariableDeclarationStatement[44837-44899]:VariableDeclarationStatement[44837-44899]"
    }, {
      "left" : "boolean isNsrmEnabled = false;",
      "right" : "boolean isNsrmEnabled = false;",
      "info" : "VariableDeclarationStatement[44912-44942]:VariableDeclarationStatement[44912-44942]"
    }, {
      "left" : "if ((value & DPM_CONFIG_FEATURE_MASK_NSRM) == DPM_CONFIG_FEATURE_MASK_NSRM)",
      "right" : "if ((value & DPM_CONFIG_FEATURE_MASK_NSRM) == DPM_CONFIG_FEATURE_MASK_NSRM)",
      "info" : "IfStatement[44956-45069]:IfStatement[44956-45069]"
    }, {
      "left" : "isNsrmEnabled = true;",
      "right" : "isNsrmEnabled = true;",
      "info" : "ExpressionStatement[45048-45069]:ExpressionStatement[45048-45069]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[45083-45567]:IfStatement[45083-45567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45098-45567]:Block[45098-45567]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[45116-45307]:IfStatement[45116-45307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45132-45307]:Block[45132-45307]"
    }, {
      "left" : "Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], ws=\" + ws);",
      "right" : "Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                            + \" [not found], ws=\" + ws);",
      "info" : "ExpressionStatement[45154-45289]:ExpressionStatement[45154-45289]"
    }, {
      "left" : "if (!isNsrmEnabled)",
      "right" : "if (!isNsrmEnabled)",
      "info" : "IfStatement[45324-45553]:IfStatement[45324-45553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45344-45500]:Block[45344-45500]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Wake lock not active: \" + lock\n                        + \" from uid \" + callingUid);",
      "right" : "throw new IllegalArgumentException(\"Wake lock not active: \" + lock\n                        + \" from uid \" + callingUid);",
      "info" : "ThrowStatement[45362-45482]:ThrowStatement[45362-45482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45506-45553]:Block[45506-45553]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[45528-45535]:ReturnStatement[45528-45535]"
    }, {
      "left" : "WakeLock wakeLock = mWakeLocks.get(index);",
      "right" : "WakeLock wakeLock = mWakeLocks.get(index);",
      "info" : "VariableDeclarationStatement[45581-45623]:VariableDeclarationStatement[45581-45623]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[45636-45827]:IfStatement[45636-45827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45652-45827]:Block[45652-45827]"
    }, {
      "left" : "Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], ws=\" + ws);",
      "right" : "Slog.d(TAG, \"updateWakeLockWorkSourceInternal: lock=\" + Objects.hashCode(lock)\n                        + \" [\" + wakeLock.mTag + \"], ws=\" + ws);",
      "info" : "ExpressionStatement[45670-45813]:ExpressionStatement[45670-45813]"
    }, {
      "left" : "if (!wakeLock.hasSameWorkSource(ws))",
      "right" : "if (!wakeLock.hasSameWorkSource(ws))",
      "info" : "IfStatement[45841-46206]:IfStatement[45841-46206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45878-46206]:Block[45878-46206]"
    }, {
      "left" : "notifyWakeLockChangingLocked(wakeLock, wakeLock.mFlags, wakeLock.mTag,\n                        wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                        ws, historyTag);",
      "right" : "notifyWakeLockChangingLocked(wakeLock, wakeLock.mFlags, wakeLock.mTag,\n                        wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                        ws, historyTag);",
      "info" : "ExpressionStatement[45896-46094]:ExpressionStatement[45896-46094]"
    }, {
      "left" : "wakeLock.mHistoryTag = historyTag;",
      "right" : "wakeLock.mHistoryTag = historyTag;",
      "info" : "ExpressionStatement[46111-46145]:ExpressionStatement[46111-46145]"
    }, {
      "left" : "wakeLock.updateWorkSource(ws);",
      "right" : "wakeLock.updateWorkSource(ws);",
      "info" : "ExpressionStatement[46162-46192]:ExpressionStatement[46162-46192]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46228-46235]:Modifier[46228-46235]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46236-46243]:PrimitiveType[46236-46243]"
    }, {
      "left" : "checkWorkSourceObjectId",
      "right" : "checkWorkSourceObjectId",
      "info" : "SimpleName[46244-46267]:SimpleName[46244-46267]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[46268-46275]:SingleVariableDeclaration[46268-46275]"
    }, {
      "left" : "WakeLock wl",
      "right" : "WakeLock wl",
      "info" : "SingleVariableDeclaration[46277-46288]:SingleVariableDeclaration[46277-46288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46290-46671]:Block[46290-46671]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[46300-46643]:TryStatement[46300-46643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46304-46577]:Block[46304-46577]"
    }, {
      "left" : "for (int index = 0; index < wl.mWorkSource.size(); index++)",
      "right" : "for (int index = 0; index < wl.mWorkSource.size(); index++)",
      "info" : "ForStatement[46318-46567]:ForStatement[46318-46567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46378-46567]:Block[46378-46567]"
    }, {
      "left" : "if (uid == wl.mWorkSource.get(index))",
      "right" : "if (uid == wl.mWorkSource.get(index))",
      "info" : "IfStatement[46396-46553]:IfStatement[46396-46553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46434-46553]:Block[46434-46553]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[46456-46502]:IfStatement[46456-46502]"
    }, {
      "left" : "Slog.v(TAG, \"WS uid matched\");",
      "right" : "Slog.v(TAG, \"WS uid matched\");",
      "info" : "ExpressionStatement[46472-46502]:ExpressionStatement[46472-46502]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46523-46535]:ReturnStatement[46523-46535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46606-46643]:Block[46606-46643]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46620-46633]:ReturnStatement[46620-46633]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46652-46665]:ReturnStatement[46652-46665]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46677-46684]:Modifier[46677-46684]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[46685-46688]:PrimitiveType[46685-46688]"
    }, {
      "left" : "findWakeLockIndexLocked",
      "right" : "findWakeLockIndexLocked",
      "info" : "SimpleName[46689-46712]:SimpleName[46689-46712]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[46713-46725]:SingleVariableDeclaration[46713-46725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46727-46941]:Block[46727-46941]"
    }, {
      "left" : "final int count = mWakeLocks.size();",
      "right" : "final int count = mWakeLocks.size();",
      "info" : "VariableDeclarationStatement[46737-46773]:VariableDeclarationStatement[46737-46773]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[46782-46916]:ForStatement[46782-46916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46814-46916]:Block[46814-46916]"
    }, {
      "left" : "if (mWakeLocks.get(i).mLock == lock)",
      "right" : "if (mWakeLocks.get(i).mLock == lock)",
      "info" : "IfStatement[46828-46906]:IfStatement[46828-46906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46865-46906]:Block[46865-46906]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[46883-46892]:ReturnStatement[46883-46892]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[46925-46935]:ReturnStatement[46925-46935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46947-46954]:Modifier[46947-46954]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46955-46959]:PrimitiveType[46955-46959]"
    }, {
      "left" : "notifyWakeLockAcquiredLocked",
      "right" : "notifyWakeLockAcquiredLocked",
      "info" : "SimpleName[46960-46988]:SimpleName[46960-46988]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[46989-47006]:SingleVariableDeclaration[46989-47006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47008-47321]:Block[47008-47321]"
    }, {
      "left" : "if (mSystemReady)",
      "right" : "if (mSystemReady)",
      "info" : "IfStatement[47018-47315]:IfStatement[47018-47315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47036-47315]:Block[47036-47315]"
    }, {
      "left" : "wakeLock.mNotifiedAcquired = true;",
      "right" : "wakeLock.mNotifiedAcquired = true;",
      "info" : "ExpressionStatement[47050-47084]:ExpressionStatement[47050-47084]"
    }, {
      "left" : "mNotifier.onWakeLockAcquired(wakeLock.mFlags, wakeLock.mTag, wakeLock.mPackageName,\n                    wakeLock.mOwnerUid, wakeLock.mOwnerPid, wakeLock.mWorkSource,\n                    wakeLock.mHistoryTag);",
      "right" : "mNotifier.onWakeLockAcquired(wakeLock.mFlags, wakeLock.mTag, wakeLock.mPackageName,\n                    wakeLock.mOwnerUid, wakeLock.mOwnerPid, wakeLock.mWorkSource,\n                    wakeLock.mHistoryTag);",
      "info" : "ExpressionStatement[47097-47305]:ExpressionStatement[47097-47305]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47327-47334]:Modifier[47327-47334]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47335-47339]:PrimitiveType[47335-47339]"
    }, {
      "left" : "notifyWakeLockChangingLocked",
      "right" : "notifyWakeLockChangingLocked",
      "info" : "SimpleName[47340-47368]:SimpleName[47340-47368]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[47369-47386]:SingleVariableDeclaration[47369-47386]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[47388-47397]:SingleVariableDeclaration[47388-47397]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[47399-47409]:SingleVariableDeclaration[47399-47409]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[47423-47441]:SingleVariableDeclaration[47423-47441]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[47443-47450]:SingleVariableDeclaration[47443-47450]"
    }, {
      "left" : "int pid",
      "right" : "int pid",
      "info" : "SingleVariableDeclaration[47452-47459]:SingleVariableDeclaration[47452-47459]"
    }, {
      "left" : "WorkSource ws",
      "right" : "WorkSource ws",
      "info" : "SingleVariableDeclaration[47461-47474]:SingleVariableDeclaration[47461-47474]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[47476-47493]:SingleVariableDeclaration[47476-47493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47495-47842]:Block[47495-47842]"
    }, {
      "left" : "if (mSystemReady && wakeLock.mNotifiedAcquired)",
      "right" : "if (mSystemReady && wakeLock.mNotifiedAcquired)",
      "info" : "IfStatement[47505-47836]:IfStatement[47505-47836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47553-47836]:Block[47553-47836]"
    }, {
      "left" : "mNotifier.onWakeLockChanging(wakeLock.mFlags, wakeLock.mTag, wakeLock.mPackageName,\n                    wakeLock.mOwnerUid, wakeLock.mOwnerPid, wakeLock.mWorkSource,\n                    wakeLock.mHistoryTag, flags, tag, packageName, uid, pid, ws, historyTag);",
      "right" : "mNotifier.onWakeLockChanging(wakeLock.mFlags, wakeLock.mTag, wakeLock.mPackageName,\n                    wakeLock.mOwnerUid, wakeLock.mOwnerPid, wakeLock.mWorkSource,\n                    wakeLock.mHistoryTag, flags, tag, packageName, uid, pid, ws, historyTag);",
      "info" : "ExpressionStatement[47567-47826]:ExpressionStatement[47567-47826]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47848-47855]:Modifier[47848-47855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47856-47860]:PrimitiveType[47856-47860]"
    }, {
      "left" : "notifyWakeLockReleasedLocked",
      "right" : "notifyWakeLockReleasedLocked",
      "info" : "SimpleName[47861-47889]:SimpleName[47861-47889]"
    }, {
      "left" : "WakeLock wakeLock",
      "right" : "WakeLock wakeLock",
      "info" : "SingleVariableDeclaration[47890-47907]:SingleVariableDeclaration[47890-47907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47909-48253]:Block[47909-48253]"
    }, {
      "left" : "if (mSystemReady && wakeLock.mNotifiedAcquired)",
      "right" : "if (mSystemReady && wakeLock.mNotifiedAcquired)",
      "info" : "IfStatement[47919-48247]:IfStatement[47919-48247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47967-48247]:Block[47967-48247]"
    }, {
      "left" : "wakeLock.mNotifiedAcquired = false;",
      "right" : "wakeLock.mNotifiedAcquired = false;",
      "info" : "ExpressionStatement[47981-48016]:ExpressionStatement[47981-48016]"
    }, {
      "left" : "mNotifier.onWakeLockReleased(wakeLock.mFlags, wakeLock.mTag,\n                    wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                    wakeLock.mWorkSource, wakeLock.mHistoryTag);",
      "right" : "mNotifier.onWakeLockReleased(wakeLock.mFlags, wakeLock.mTag,\n                    wakeLock.mPackageName, wakeLock.mOwnerUid, wakeLock.mOwnerPid,\n                    wakeLock.mWorkSource, wakeLock.mHistoryTag);",
      "info" : "ExpressionStatement[48029-48237]:ExpressionStatement[48029-48237]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[48259-48291]:SingleMemberAnnotation[48259-48291]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48296-48303]:Modifier[48296-48303]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48304-48311]:PrimitiveType[48304-48311]"
    }, {
      "left" : "isWakeLockLevelSupportedInternal",
      "right" : "isWakeLockLevelSupportedInternal",
      "info" : "SimpleName[48312-48344]:SimpleName[48312-48344]"
    }, {
      "left" : "int level",
      "right" : "int level",
      "info" : "SingleVariableDeclaration[48345-48354]:SingleVariableDeclaration[48345-48354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48356-48972]:Block[48356-48972]"
    }, {
      "left" : "synchronized (mLock) {\n            switch (level) {\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                case PowerManager.FULL_WAKE_LOCK:\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return true;\n\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();\n\n                default:\n                    return false;\n            }\n        }",
      "right" : "synchronized (mLock) {\n            switch (level) {\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                case PowerManager.FULL_WAKE_LOCK:\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return true;\n\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();\n\n                default:\n                    return false;\n            }\n        }",
      "info" : "SynchronizedStatement[48366-48966]:SynchronizedStatement[48366-48966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48387-48966]:Block[48387-48966]"
    }, {
      "left" : "switch (level) {\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                case PowerManager.FULL_WAKE_LOCK:\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return true;\n\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();\n\n                default:\n                    return false;\n            }",
      "right" : "switch (level) {\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                case PowerManager.FULL_WAKE_LOCK:\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return true;\n\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();\n\n                default:\n                    return false;\n            }",
      "info" : "SwitchStatement[48401-48956]:SwitchStatement[48401-48956]"
    }, {
      "left" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "right" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "info" : "SwitchCase[48434-48470]:SwitchCase[48434-48470]"
    }, {
      "left" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "info" : "SwitchCase[48487-48526]:SwitchCase[48487-48526]"
    }, {
      "left" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "info" : "SwitchCase[48543-48585]:SwitchCase[48543-48585]"
    }, {
      "left" : "case PowerManager.FULL_WAKE_LOCK:",
      "right" : "case PowerManager.FULL_WAKE_LOCK:",
      "info" : "SwitchCase[48602-48635]:SwitchCase[48602-48635]"
    }, {
      "left" : "case PowerManager.DOZE_WAKE_LOCK:",
      "right" : "case PowerManager.DOZE_WAKE_LOCK:",
      "info" : "SwitchCase[48652-48685]:SwitchCase[48652-48685]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48706-48718]:ReturnStatement[48706-48718]"
    }, {
      "left" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "right" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "info" : "SwitchCase[48736-48785]:SwitchCase[48736-48785]"
    }, {
      "left" : "return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();",
      "right" : "return mSystemReady && mDisplayManagerInternal.isProximitySensorAvailable();",
      "info" : "ReturnStatement[48806-48882]:ReturnStatement[48806-48882]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48900-48908]:SwitchCase[48900-48908]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48929-48942]:ReturnStatement[48929-48942]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48978-48985]:Modifier[48978-48985]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48986-48993]:PrimitiveType[48986-48993]"
    }, {
      "left" : "isQuickBootCall",
      "right" : "isQuickBootCall",
      "info" : "SimpleName[48994-49009]:SimpleName[48994-49009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49012-49649]:Block[49012-49649]"
    }, {
      "left" : "ActivityManager activityManager = (ActivityManager) mContext\n                .getSystemService(Context.ACTIVITY_SERVICE);",
      "right" : "ActivityManager activityManager = (ActivityManager) mContext\n                .getSystemService(Context.ACTIVITY_SERVICE);",
      "info" : "VariableDeclarationStatement[49023-49144]:VariableDeclarationStatement[49023-49144]"
    }, {
      "left" : "List<ActivityManager.RunningAppProcessInfo> runningList = activityManager\n                .getRunningAppProcesses();",
      "right" : "List<ActivityManager.RunningAppProcessInfo> runningList = activityManager\n                .getRunningAppProcesses();",
      "info" : "VariableDeclarationStatement[49154-49270]:VariableDeclarationStatement[49154-49270]"
    }, {
      "left" : "int callingPid = Binder.getCallingPid();",
      "right" : "int callingPid = Binder.getCallingPid();",
      "info" : "VariableDeclarationStatement[49279-49319]:VariableDeclarationStatement[49279-49319]"
    }, {
      "left" : "for (ActivityManager.RunningAppProcessInfo processInfo : runningList)",
      "right" : "for (ActivityManager.RunningAppProcessInfo processInfo : runningList)",
      "info" : "EnhancedForStatement[49328-49621]:EnhancedForStatement[49328-49621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49398-49621]:Block[49398-49621]"
    }, {
      "left" : "if (processInfo.pid == callingPid)",
      "right" : "if (processInfo.pid == callingPid)",
      "info" : "IfStatement[49412-49611]:IfStatement[49412-49611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49447-49611]:Block[49447-49611]"
    }, {
      "left" : "String process = processInfo.processName;",
      "right" : "String process = processInfo.processName;",
      "info" : "VariableDeclarationStatement[49465-49506]:VariableDeclarationStatement[49465-49506]"
    }, {
      "left" : "if (\"com.qapp.quickboot\".equals(process))",
      "right" : "if (\"com.qapp.quickboot\".equals(process))",
      "info" : "IfStatement[49523-49597]:IfStatement[49523-49597]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49585-49597]:ReturnStatement[49585-49597]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49630-49643]:ReturnStatement[49630-49643]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49687-49694]:Modifier[49687-49694]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49695-49699]:PrimitiveType[49695-49699]"
    }, {
      "left" : "userActivityFromNative",
      "right" : "userActivityFromNative",
      "info" : "SimpleName[49700-49722]:SimpleName[49700-49722]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[49723-49737]:SingleVariableDeclaration[49723-49737]"
    }, {
      "left" : "int event",
      "right" : "int event",
      "info" : "SingleVariableDeclaration[49739-49748]:SingleVariableDeclaration[49739-49748]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[49750-49759]:SingleVariableDeclaration[49750-49759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49761-49843]:Block[49761-49843]"
    }, {
      "left" : "userActivityInternal(eventTime, event, flags, Process.SYSTEM_UID);",
      "right" : "userActivityInternal(eventTime, event, flags, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[49771-49837]:ExpressionStatement[49771-49837]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49849-49856]:Modifier[49849-49856]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49857-49861]:PrimitiveType[49857-49861]"
    }, {
      "left" : "userActivityInternal",
      "right" : "userActivityInternal",
      "info" : "SimpleName[49862-49882]:SimpleName[49862-49882]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[49883-49897]:SingleVariableDeclaration[49883-49897]"
    }, {
      "left" : "int event",
      "right" : "int event",
      "info" : "SingleVariableDeclaration[49899-49908]:SingleVariableDeclaration[49899-49908]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[49910-49919]:SingleVariableDeclaration[49910-49919]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[49921-49928]:SingleVariableDeclaration[49921-49928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49930-50110]:Block[49930-50110]"
    }, {
      "left" : "synchronized (mLock) {\n            if (userActivityNoUpdateLocked(eventTime, event, flags, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (userActivityNoUpdateLocked(eventTime, event, flags, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[49940-50104]:SynchronizedStatement[49940-50104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49961-50104]:Block[49961-50104]"
    }, {
      "left" : "if (userActivityNoUpdateLocked(eventTime, event, flags, uid))",
      "right" : "if (userActivityNoUpdateLocked(eventTime, event, flags, uid))",
      "info" : "IfStatement[49975-50094]:IfStatement[49975-50094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50037-50094]:Block[50037-50094]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[50055-50080]:ExpressionStatement[50055-50080]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50116-50123]:Modifier[50116-50123]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50124-50131]:PrimitiveType[50124-50131]"
    }, {
      "left" : "userActivityNoUpdateLocked",
      "right" : "userActivityNoUpdateLocked",
      "info" : "SimpleName[50132-50158]:SimpleName[50132-50158]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[50159-50173]:SingleVariableDeclaration[50159-50173]"
    }, {
      "left" : "int event",
      "right" : "int event",
      "info" : "SingleVariableDeclaration[50175-50184]:SingleVariableDeclaration[50175-50184]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[50186-50195]:SingleVariableDeclaration[50186-50195]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[50197-50204]:SingleVariableDeclaration[50197-50204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50206-51912]:Block[50206-51912]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[50216-50444]:IfStatement[50216-50444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50232-50444]:Block[50232-50444]"
    }, {
      "left" : "Slog.d(TAG, \"userActivityNoUpdateLocked: eventTime=\" + eventTime\n                    + \", event=\" + event + \", flags=0x\" + Integer.toHexString(flags)\n                    + \", uid=\" + uid);",
      "right" : "Slog.d(TAG, \"userActivityNoUpdateLocked: eventTime=\" + eventTime\n                    + \", event=\" + event + \", flags=0x\" + Integer.toHexString(flags)\n                    + \", uid=\" + uid);",
      "info" : "ExpressionStatement[50246-50434]:ExpressionStatement[50246-50434]"
    }, {
      "left" : "if (eventTime < mLastSleepTime || eventTime < mLastWakeTime\n                || !mBootCompleted || !mSystemReady)",
      "right" : "if (eventTime < mLastSleepTime || eventTime < mLastWakeTime\n                || !mBootCompleted || !mSystemReady)",
      "info" : "IfStatement[50454-50604]:IfStatement[50454-50604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50567-50604]:Block[50567-50604]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50581-50594]:ReturnStatement[50581-50594]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"userActivity\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"userActivity\");",
      "info" : "ExpressionStatement[50614-50670]:ExpressionStatement[50614-50670]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[50679-51884]:TryStatement[50679-51884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50683-51813]:Block[50683-51813]"
    }, {
      "left" : "if (eventTime > mLastInteractivePowerHintTime)",
      "right" : "if (eventTime > mLastInteractivePowerHintTime)",
      "info" : "IfStatement[50697-50880]:IfStatement[50697-50880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50744-50880]:Block[50744-50880]"
    }, {
      "left" : "powerHintInternal(POWER_HINT_INTERACTION, 0);",
      "right" : "powerHintInternal(POWER_HINT_INTERACTION, 0);",
      "info" : "ExpressionStatement[50762-50807]:ExpressionStatement[50762-50807]"
    }, {
      "left" : "mLastInteractivePowerHintTime = eventTime;",
      "right" : "mLastInteractivePowerHintTime = eventTime;",
      "info" : "ExpressionStatement[50824-50866]:ExpressionStatement[50824-50866]"
    }, {
      "left" : "mNotifier.onUserActivity(event, uid);",
      "right" : "mNotifier.onUserActivity(event, uid);",
      "info" : "ExpressionStatement[50894-50931]:ExpressionStatement[50894-50931]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_ASLEEP\n                    || mWakefulness == WAKEFULNESS_DOZING\n                    || (flags & PowerManager.USER_ACTIVITY_FLAG_INDIRECT) != 0)",
      "right" : "if (mWakefulness == WAKEFULNESS_ASLEEP\n                    || mWakefulness == WAKEFULNESS_DOZING\n                    || (flags & PowerManager.USER_ACTIVITY_FLAG_INDIRECT) != 0)",
      "info" : "IfStatement[50945-51167]:IfStatement[50945-51167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51122-51167]:Block[51122-51167]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51140-51153]:ReturnStatement[51140-51153]"
    }, {
      "left" : "if ((flags & PowerManager.USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS) != 0)",
      "right" : "if ((flags & PowerManager.USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS) != 0)",
      "info" : "IfStatement[51181-51803]:IfStatement[51181-51803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51250-51568]:Block[51250-51568]"
    }, {
      "left" : "if (eventTime > mLastUserActivityTimeNoChangeLights\n                        && eventTime > mLastUserActivityTime)",
      "right" : "if (eventTime > mLastUserActivityTimeNoChangeLights\n                        && eventTime > mLastUserActivityTime)",
      "info" : "IfStatement[51268-51554]:IfStatement[51268-51554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51382-51554]:Block[51382-51554]"
    }, {
      "left" : "mLastUserActivityTimeNoChangeLights = eventTime;",
      "right" : "mLastUserActivityTimeNoChangeLights = eventTime;",
      "info" : "ExpressionStatement[51404-51452]:ExpressionStatement[51404-51452]"
    }, {
      "left" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "right" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "info" : "ExpressionStatement[51473-51503]:ExpressionStatement[51473-51503]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51524-51536]:ReturnStatement[51524-51536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51574-51803]:Block[51574-51803]"
    }, {
      "left" : "if (eventTime > mLastUserActivityTime)",
      "right" : "if (eventTime > mLastUserActivityTime)",
      "info" : "IfStatement[51592-51789]:IfStatement[51592-51789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51631-51789]:Block[51631-51789]"
    }, {
      "left" : "mLastUserActivityTime = eventTime;",
      "right" : "mLastUserActivityTime = eventTime;",
      "info" : "ExpressionStatement[51653-51687]:ExpressionStatement[51653-51687]"
    }, {
      "left" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "right" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "info" : "ExpressionStatement[51708-51738]:ExpressionStatement[51708-51738]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51759-51771]:ReturnStatement[51759-51771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51822-51884]:Block[51822-51884]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[51836-51874]:ExpressionStatement[51836-51874]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51893-51906]:ReturnStatement[51893-51906]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51918-51925]:Modifier[51918-51925]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51926-51930]:PrimitiveType[51926-51930]"
    }, {
      "left" : "wakeUpInternal",
      "right" : "wakeUpInternal",
      "info" : "SimpleName[51931-51945]:SimpleName[51931-51945]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[51946-51960]:SingleVariableDeclaration[51946-51960]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[51962-51969]:SingleVariableDeclaration[51962-51969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51971-52131]:Block[51971-52131]"
    }, {
      "left" : "synchronized (mLock) {\n            if (wakeUpNoUpdateLocked(eventTime, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (wakeUpNoUpdateLocked(eventTime, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[51981-52125]:SynchronizedStatement[51981-52125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52002-52125]:Block[52002-52125]"
    }, {
      "left" : "if (wakeUpNoUpdateLocked(eventTime, uid))",
      "right" : "if (wakeUpNoUpdateLocked(eventTime, uid))",
      "info" : "IfStatement[52016-52115]:IfStatement[52016-52115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52058-52115]:Block[52058-52115]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[52076-52101]:ExpressionStatement[52076-52101]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52137-52144]:Modifier[52137-52144]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52145-52152]:PrimitiveType[52145-52152]"
    }, {
      "left" : "wakeUpNoUpdateLocked",
      "right" : "wakeUpNoUpdateLocked",
      "info" : "SimpleName[52153-52173]:SimpleName[52153-52173]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[52174-52188]:SingleVariableDeclaration[52174-52188]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[52190-52197]:SingleVariableDeclaration[52190-52197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52199-53381]:Block[52199-53381]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[52209-52326]:IfStatement[52209-52326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52225-52326]:Block[52225-52326]"
    }, {
      "left" : "Slog.d(TAG, \"wakeUpNoUpdateLocked: eventTime=\" + eventTime + \", uid=\" + uid);",
      "right" : "Slog.d(TAG, \"wakeUpNoUpdateLocked: eventTime=\" + eventTime + \", uid=\" + uid);",
      "info" : "ExpressionStatement[52239-52316]:ExpressionStatement[52239-52316]"
    }, {
      "left" : "if (eventTime < mLastSleepTime || mWakefulness == WAKEFULNESS_AWAKE\n                || !mBootCompleted || !mSystemReady)",
      "right" : "if (eventTime < mLastSleepTime || mWakefulness == WAKEFULNESS_AWAKE\n                || !mBootCompleted || !mSystemReady)",
      "info" : "IfStatement[52336-52494]:IfStatement[52336-52494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52457-52494]:Block[52457-52494]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52471-52484]:ReturnStatement[52471-52484]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"wakeUp\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"wakeUp\");",
      "info" : "ExpressionStatement[52504-52554]:ExpressionStatement[52504-52554]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52563-53354]:TryStatement[52563-53354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52567-53283]:Block[52567-53283]"
    }, {
      "left" : "switch (mWakefulness) {\n                case WAKEFULNESS_ASLEEP:\n                    Slog.i(TAG, \"Waking up from sleep (uid \" + uid +\")...\");\n                    break;\n                case WAKEFULNESS_DREAMING:\n                    Slog.i(TAG, \"Waking up from dream (uid \" + uid +\")...\");\n                    break;\n                case WAKEFULNESS_DOZING:\n                    Slog.i(TAG, \"Waking up from dozing (uid \" + uid +\")...\");\n                    break;\n            }",
      "right" : "switch (mWakefulness) {\n                case WAKEFULNESS_ASLEEP:\n                    Slog.i(TAG, \"Waking up from sleep (uid \" + uid +\")...\");\n                    break;\n                case WAKEFULNESS_DREAMING:\n                    Slog.i(TAG, \"Waking up from dream (uid \" + uid +\")...\");\n                    break;\n                case WAKEFULNESS_DOZING:\n                    Slog.i(TAG, \"Waking up from dozing (uid \" + uid +\")...\");\n                    break;\n            }",
      "info" : "SwitchStatement[52581-53056]:SwitchStatement[52581-53056]"
    }, {
      "left" : "case WAKEFULNESS_ASLEEP:",
      "right" : "case WAKEFULNESS_ASLEEP:",
      "info" : "SwitchCase[52621-52645]:SwitchCase[52621-52645]"
    }, {
      "left" : "Slog.i(TAG, \"Waking up from sleep (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Waking up from sleep (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[52666-52722]:ExpressionStatement[52666-52722]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52743-52749]:BreakStatement[52743-52749]"
    }, {
      "left" : "case WAKEFULNESS_DREAMING:",
      "right" : "case WAKEFULNESS_DREAMING:",
      "info" : "SwitchCase[52766-52792]:SwitchCase[52766-52792]"
    }, {
      "left" : "Slog.i(TAG, \"Waking up from dream (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Waking up from dream (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[52813-52869]:ExpressionStatement[52813-52869]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52890-52896]:BreakStatement[52890-52896]"
    }, {
      "left" : "case WAKEFULNESS_DOZING:",
      "right" : "case WAKEFULNESS_DOZING:",
      "info" : "SwitchCase[52913-52937]:SwitchCase[52913-52937]"
    }, {
      "left" : "Slog.i(TAG, \"Waking up from dozing (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Waking up from dozing (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[52958-53015]:ExpressionStatement[52958-53015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53036-53042]:BreakStatement[53036-53042]"
    }, {
      "left" : "mLastWakeTime = eventTime;",
      "right" : "mLastWakeTime = eventTime;",
      "info" : "ExpressionStatement[53070-53096]:ExpressionStatement[53070-53096]"
    }, {
      "left" : "setWakefulnessLocked(WAKEFULNESS_AWAKE, 0);",
      "right" : "setWakefulnessLocked(WAKEFULNESS_AWAKE, 0);",
      "info" : "ExpressionStatement[53109-53152]:ExpressionStatement[53109-53152]"
    }, {
      "left" : "userActivityNoUpdateLocked(\n                    eventTime, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);",
      "right" : "userActivityNoUpdateLocked(\n                    eventTime, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);",
      "info" : "ExpressionStatement[53166-53273]:ExpressionStatement[53166-53273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53292-53354]:Block[53292-53354]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[53306-53344]:ExpressionStatement[53306-53344]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53363-53375]:ReturnStatement[53363-53375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53387-53394]:Modifier[53387-53394]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53395-53399]:PrimitiveType[53395-53399]"
    }, {
      "left" : "enableQbCharger",
      "right" : "enableQbCharger",
      "info" : "SimpleName[53400-53415]:SimpleName[53400-53415]"
    }, {
      "left" : "boolean enable",
      "right" : "boolean enable",
      "info" : "SingleVariableDeclaration[53416-53430]:SingleVariableDeclaration[53416-53430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53432-53863]:Block[53432-53863]"
    }, {
      "left" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1 &&\n                SystemProperties.getInt(\"sys.quickboot.poweroff\", 0) != 1)",
      "right" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1 &&\n                SystemProperties.getInt(\"sys.quickboot.poweroff\", 0) != 1)",
      "info" : "IfStatement[53442-53857]:IfStatement[53442-53857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53580-53857]:Block[53580-53857]"
    }, {
      "left" : "if (enable && mIsPowered && !isInteractiveInternal())",
      "right" : "if (enable && mIsPowered && !isInteractiveInternal())",
      "info" : "IfStatement[53708-53847]:IfStatement[53708-53847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53762-53847]:Block[53762-53847]"
    }, {
      "left" : "SystemProperties.set(\"sys.qbcharger.enable\", \"true\");",
      "right" : "SystemProperties.set(\"sys.qbcharger.enable\", \"true\");",
      "info" : "ExpressionStatement[53780-53833]:ExpressionStatement[53780-53833]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53869-53876]:Modifier[53869-53876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53877-53881]:PrimitiveType[53877-53881]"
    }, {
      "left" : "goToSleepInternal",
      "right" : "goToSleepInternal",
      "info" : "SimpleName[53882-53899]:SimpleName[53882-53899]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[53900-53914]:SingleVariableDeclaration[53900-53914]"
    }, {
      "left" : "int reason",
      "right" : "int reason",
      "info" : "SingleVariableDeclaration[53916-53926]:SingleVariableDeclaration[53916-53926]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[53928-53937]:SingleVariableDeclaration[53928-53937]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[53939-53946]:SingleVariableDeclaration[53939-53946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53948-54126]:Block[53948-54126]"
    }, {
      "left" : "synchronized (mLock) {\n            if (goToSleepNoUpdateLocked(eventTime, reason, flags, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (goToSleepNoUpdateLocked(eventTime, reason, flags, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[53958-54120]:SynchronizedStatement[53958-54120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53979-54120]:Block[53979-54120]"
    }, {
      "left" : "if (goToSleepNoUpdateLocked(eventTime, reason, flags, uid))",
      "right" : "if (goToSleepNoUpdateLocked(eventTime, reason, flags, uid))",
      "info" : "IfStatement[53993-54110]:IfStatement[53993-54110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54053-54110]:Block[54053-54110]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[54071-54096]:ExpressionStatement[54071-54096]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[54260-54292]:SingleMemberAnnotation[54260-54292]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54297-54304]:Modifier[54297-54304]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54305-54312]:PrimitiveType[54305-54312]"
    }, {
      "left" : "goToSleepNoUpdateLocked",
      "right" : "goToSleepNoUpdateLocked",
      "info" : "SimpleName[54313-54336]:SimpleName[54313-54336]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[54337-54351]:SingleVariableDeclaration[54337-54351]"
    }, {
      "left" : "int reason",
      "right" : "int reason",
      "info" : "SingleVariableDeclaration[54353-54363]:SingleVariableDeclaration[54353-54363]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[54365-54374]:SingleVariableDeclaration[54365-54374]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[54376-54383]:SingleVariableDeclaration[54376-54383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54385-57314]:Block[54385-57314]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[54395-54579]:IfStatement[54395-54579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54411-54579]:Block[54411-54579]"
    }, {
      "left" : "Slog.d(TAG, \"goToSleepNoUpdateLocked: eventTime=\" + eventTime\n                    + \", reason=\" + reason + \", flags=\" + flags + \", uid=\" + uid);",
      "right" : "Slog.d(TAG, \"goToSleepNoUpdateLocked: eventTime=\" + eventTime\n                    + \", reason=\" + reason + \", flags=\" + flags + \", uid=\" + uid);",
      "info" : "ExpressionStatement[54425-54569]:ExpressionStatement[54425-54569]"
    }, {
      "left" : "if (eventTime < mLastWakeTime\n                || mWakefulness == WAKEFULNESS_ASLEEP\n                || mWakefulness == WAKEFULNESS_DOZING\n                || !mBootCompleted || !mSystemReady)",
      "right" : "if (eventTime < mLastWakeTime\n                || mWakefulness == WAKEFULNESS_ASLEEP\n                || mWakefulness == WAKEFULNESS_DOZING\n                || !mBootCompleted || !mSystemReady)",
      "info" : "IfStatement[54589-54817]:IfStatement[54589-54817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54780-54817]:Block[54780-54817]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54794-54807]:ReturnStatement[54794-54807]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"goToSleep\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"goToSleep\");",
      "info" : "ExpressionStatement[54827-54880]:ExpressionStatement[54827-54880]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[54889-57287]:TryStatement[54889-57287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54893-57216]:Block[54893-57216]"
    }, {
      "left" : "switch (reason) {\n                case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:\n                    Slog.i(TAG, \"Going to sleep due to device administration policy \"\n                            + \"(uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:\n                    Slog.i(TAG, \"Going to sleep due to screen timeout (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH:\n                    Slog.i(TAG, \"Going to sleep due to lid switch (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON:\n                    Slog.i(TAG, \"Going to sleep due to power button (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_HDMI:\n                    Slog.i(TAG, \"Going to sleep due to HDMI standby (uid \" + uid +\")...\");\n                    break;\n                default:\n                    Slog.i(TAG, \"Going to sleep by application request (uid \" + uid +\")...\");\n                    reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;\n                    break;\n            }",
      "right" : "switch (reason) {\n                case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:\n                    Slog.i(TAG, \"Going to sleep due to device administration policy \"\n                            + \"(uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:\n                    Slog.i(TAG, \"Going to sleep due to screen timeout (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH:\n                    Slog.i(TAG, \"Going to sleep due to lid switch (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON:\n                    Slog.i(TAG, \"Going to sleep due to power button (uid \" + uid +\")...\");\n                    break;\n                case PowerManager.GO_TO_SLEEP_REASON_HDMI:\n                    Slog.i(TAG, \"Going to sleep due to HDMI standby (uid \" + uid +\")...\");\n                    break;\n                default:\n                    Slog.i(TAG, \"Going to sleep by application request (uid \" + uid +\")...\");\n                    reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;\n                    break;\n            }",
      "info" : "SwitchStatement[54907-56117]:SwitchStatement[54907-56117]"
    }, {
      "left" : "case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:",
      "right" : "case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:",
      "info" : "SwitchCase[54941-54991]:SwitchCase[54941-54991]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep due to device administration policy \"\n                            + \"(uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep due to device administration policy \"\n                            + \"(uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55012-55131]:ExpressionStatement[55012-55131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55152-55158]:BreakStatement[55152-55158]"
    }, {
      "left" : "case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:",
      "right" : "case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:",
      "info" : "SwitchCase[55175-55220]:SwitchCase[55175-55220]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep due to screen timeout (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep due to screen timeout (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55241-55313]:ExpressionStatement[55241-55313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55334-55340]:BreakStatement[55334-55340]"
    }, {
      "left" : "case PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH:",
      "right" : "case PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH:",
      "info" : "SwitchCase[55357-55405]:SwitchCase[55357-55405]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep due to lid switch (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep due to lid switch (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55426-55494]:ExpressionStatement[55426-55494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55515-55521]:BreakStatement[55515-55521]"
    }, {
      "left" : "case PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON:",
      "right" : "case PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON:",
      "info" : "SwitchCase[55538-55588]:SwitchCase[55538-55588]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep due to power button (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep due to power button (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55609-55679]:ExpressionStatement[55609-55679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55700-55706]:BreakStatement[55700-55706]"
    }, {
      "left" : "case PowerManager.GO_TO_SLEEP_REASON_HDMI:",
      "right" : "case PowerManager.GO_TO_SLEEP_REASON_HDMI:",
      "info" : "SwitchCase[55723-55765]:SwitchCase[55723-55765]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep due to HDMI standby (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep due to HDMI standby (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55786-55856]:ExpressionStatement[55786-55856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55877-55883]:BreakStatement[55877-55883]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55900-55908]:SwitchCase[55900-55908]"
    }, {
      "left" : "Slog.i(TAG, \"Going to sleep by application request (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Going to sleep by application request (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[55929-56002]:ExpressionStatement[55929-56002]"
    }, {
      "left" : "reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;",
      "right" : "reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;",
      "info" : "ExpressionStatement[56023-56076]:ExpressionStatement[56023-56076]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56097-56103]:BreakStatement[56097-56103]"
    }, {
      "left" : "mLastSleepTime = eventTime;",
      "right" : "mLastSleepTime = eventTime;",
      "info" : "ExpressionStatement[56131-56158]:ExpressionStatement[56131-56158]"
    }, {
      "left" : "mSandmanSummoned = true;",
      "right" : "mSandmanSummoned = true;",
      "info" : "ExpressionStatement[56171-56195]:ExpressionStatement[56171-56195]"
    }, {
      "left" : "setWakefulnessLocked(WAKEFULNESS_DOZING, reason);",
      "right" : "setWakefulnessLocked(WAKEFULNESS_DOZING, reason);",
      "info" : "ExpressionStatement[56208-56257]:ExpressionStatement[56208-56257]"
    }, {
      "left" : "int numWakeLocksCleared = 0;",
      "right" : "int numWakeLocksCleared = 0;",
      "info" : "VariableDeclarationStatement[56358-56386]:VariableDeclarationStatement[56358-56386]"
    }, {
      "left" : "final int numWakeLocks = mWakeLocks.size();",
      "right" : "final int numWakeLocks = mWakeLocks.size();",
      "info" : "VariableDeclarationStatement[56399-56442]:VariableDeclarationStatement[56399-56442]"
    }, {
      "left" : "for (int i = 0; i < numWakeLocks; i++)",
      "right" : "for (int i = 0; i < numWakeLocks; i++)",
      "info" : "ForStatement[56455-56925]:ForStatement[56455-56925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56494-56925]:Block[56494-56925]"
    }, {
      "left" : "final WakeLock wakeLock = mWakeLocks.get(i);",
      "right" : "final WakeLock wakeLock = mWakeLocks.get(i);",
      "info" : "VariableDeclarationStatement[56512-56556]:VariableDeclarationStatement[56512-56556]"
    }, {
      "left" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                    case PowerManager.FULL_WAKE_LOCK:\n                    case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                    case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                        numWakeLocksCleared += 1;\n                        break;\n                }",
      "right" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                    case PowerManager.FULL_WAKE_LOCK:\n                    case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                    case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                        numWakeLocksCleared += 1;\n                        break;\n                }",
      "info" : "SwitchStatement[56573-56911]:SwitchStatement[56573-56911]"
    }, {
      "left" : "case PowerManager.FULL_WAKE_LOCK:",
      "right" : "case PowerManager.FULL_WAKE_LOCK:",
      "info" : "SwitchCase[56656-56689]:SwitchCase[56656-56689]"
    }, {
      "left" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "info" : "SwitchCase[56710-56752]:SwitchCase[56710-56752]"
    }, {
      "left" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "info" : "SwitchCase[56773-56812]:SwitchCase[56773-56812]"
    }, {
      "left" : "numWakeLocksCleared += 1;",
      "right" : "numWakeLocksCleared += 1;",
      "info" : "ExpressionStatement[56837-56862]:ExpressionStatement[56837-56862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56887-56893]:BreakStatement[56887-56893]"
    }, {
      "left" : "EventLog.writeEvent(EventLogTags.POWER_SLEEP_REQUESTED, numWakeLocksCleared);",
      "right" : "EventLog.writeEvent(EventLogTags.POWER_SLEEP_REQUESTED, numWakeLocksCleared);",
      "info" : "ExpressionStatement[56938-57015]:ExpressionStatement[56938-57015]"
    }, {
      "left" : "if ((flags & PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE) != 0)",
      "right" : "if ((flags & PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE) != 0)",
      "info" : "IfStatement[57070-57206]:IfStatement[57070-57206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57128-57206]:Block[57128-57206]"
    }, {
      "left" : "reallyGoToSleepNoUpdateLocked(eventTime, uid);",
      "right" : "reallyGoToSleepNoUpdateLocked(eventTime, uid);",
      "info" : "ExpressionStatement[57146-57192]:ExpressionStatement[57146-57192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57225-57287]:Block[57225-57287]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[57239-57277]:ExpressionStatement[57239-57277]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57296-57308]:ReturnStatement[57296-57308]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57320-57327]:Modifier[57320-57327]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57328-57332]:PrimitiveType[57328-57332]"
    }, {
      "left" : "napInternal",
      "right" : "napInternal",
      "info" : "SimpleName[57333-57344]:SimpleName[57333-57344]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[57345-57359]:SingleVariableDeclaration[57345-57359]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[57361-57368]:SingleVariableDeclaration[57361-57368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57370-57527]:Block[57370-57527]"
    }, {
      "left" : "synchronized (mLock) {\n            if (napNoUpdateLocked(eventTime, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (napNoUpdateLocked(eventTime, uid)) {\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[57380-57521]:SynchronizedStatement[57380-57521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57401-57521]:Block[57401-57521]"
    }, {
      "left" : "if (napNoUpdateLocked(eventTime, uid))",
      "right" : "if (napNoUpdateLocked(eventTime, uid))",
      "info" : "IfStatement[57415-57511]:IfStatement[57415-57511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57454-57511]:Block[57454-57511]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[57472-57497]:ExpressionStatement[57472-57497]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57533-57540]:Modifier[57533-57540]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57541-57548]:PrimitiveType[57541-57548]"
    }, {
      "left" : "napNoUpdateLocked",
      "right" : "napNoUpdateLocked",
      "info" : "SimpleName[57549-57566]:SimpleName[57549-57566]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[57567-57581]:SingleVariableDeclaration[57567-57581]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[57583-57590]:SingleVariableDeclaration[57583-57590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57592-58216]:Block[57592-58216]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[57602-57716]:IfStatement[57602-57716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57618-57716]:Block[57618-57716]"
    }, {
      "left" : "Slog.d(TAG, \"napNoUpdateLocked: eventTime=\" + eventTime + \", uid=\" + uid);",
      "right" : "Slog.d(TAG, \"napNoUpdateLocked: eventTime=\" + eventTime + \", uid=\" + uid);",
      "info" : "ExpressionStatement[57632-57706]:ExpressionStatement[57632-57706]"
    }, {
      "left" : "if (eventTime < mLastWakeTime || mWakefulness != WAKEFULNESS_AWAKE\n                || !mBootCompleted || !mSystemReady)",
      "right" : "if (eventTime < mLastWakeTime || mWakefulness != WAKEFULNESS_AWAKE\n                || !mBootCompleted || !mSystemReady)",
      "info" : "IfStatement[57726-57883]:IfStatement[57726-57883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57846-57883]:Block[57846-57883]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57860-57873]:ReturnStatement[57860-57873]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"nap\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"nap\");",
      "info" : "ExpressionStatement[57893-57940]:ExpressionStatement[57893-57940]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[57949-58189]:TryStatement[57949-58189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57953-58118]:Block[57953-58118]"
    }, {
      "left" : "Slog.i(TAG, \"Nap time (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Nap time (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[57967-58011]:ExpressionStatement[57967-58011]"
    }, {
      "left" : "mSandmanSummoned = true;",
      "right" : "mSandmanSummoned = true;",
      "info" : "ExpressionStatement[58025-58049]:ExpressionStatement[58025-58049]"
    }, {
      "left" : "setWakefulnessLocked(WAKEFULNESS_DREAMING, 0);",
      "right" : "setWakefulnessLocked(WAKEFULNESS_DREAMING, 0);",
      "info" : "ExpressionStatement[58062-58108]:ExpressionStatement[58062-58108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58127-58189]:Block[58127-58189]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[58141-58179]:ExpressionStatement[58141-58179]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[58198-58210]:ReturnStatement[58198-58210]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58275-58282]:Modifier[58275-58282]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58283-58290]:PrimitiveType[58283-58290]"
    }, {
      "left" : "reallyGoToSleepNoUpdateLocked",
      "right" : "reallyGoToSleepNoUpdateLocked",
      "info" : "SimpleName[58291-58320]:SimpleName[58291-58320]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[58321-58335]:SingleVariableDeclaration[58321-58335]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[58337-58344]:SingleVariableDeclaration[58337-58344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58346-59014]:Block[58346-59014]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[58356-58502]:IfStatement[58356-58502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58372-58502]:Block[58372-58502]"
    }, {
      "left" : "Slog.d(TAG, \"reallyGoToSleepNoUpdateLocked: eventTime=\" + eventTime\n                    + \", uid=\" + uid);",
      "right" : "Slog.d(TAG, \"reallyGoToSleepNoUpdateLocked: eventTime=\" + eventTime\n                    + \", uid=\" + uid);",
      "info" : "ExpressionStatement[58386-58492]:ExpressionStatement[58386-58492]"
    }, {
      "left" : "if (eventTime < mLastWakeTime || mWakefulness == WAKEFULNESS_ASLEEP\n                || !mBootCompleted || !mSystemReady)",
      "right" : "if (eventTime < mLastWakeTime || mWakefulness == WAKEFULNESS_ASLEEP\n                || !mBootCompleted || !mSystemReady)",
      "info" : "IfStatement[58512-58670]:IfStatement[58512-58670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58633-58670]:Block[58633-58670]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58647-58660]:ReturnStatement[58647-58660]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"reallyGoToSleep\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"reallyGoToSleep\");",
      "info" : "ExpressionStatement[58680-58739]:ExpressionStatement[58680-58739]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[58748-58987]:TryStatement[58748-58987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58752-58916]:Block[58752-58916]"
    }, {
      "left" : "Slog.i(TAG, \"Sleeping (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Sleeping (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[58766-58810]:ExpressionStatement[58766-58810]"
    }, {
      "left" : "setWakefulnessLocked(WAKEFULNESS_ASLEEP, PowerManager.GO_TO_SLEEP_REASON_TIMEOUT);",
      "right" : "setWakefulnessLocked(WAKEFULNESS_ASLEEP, PowerManager.GO_TO_SLEEP_REASON_TIMEOUT);",
      "info" : "ExpressionStatement[58824-58906]:ExpressionStatement[58824-58906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58925-58987]:Block[58925-58987]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[58939-58977]:ExpressionStatement[58939-58977]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[58996-59008]:ReturnStatement[58996-59008]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59020-59027]:Modifier[59020-59027]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59028-59032]:PrimitiveType[59028-59032]"
    }, {
      "left" : "setWakefulnessLocked",
      "right" : "setWakefulnessLocked",
      "info" : "SimpleName[59033-59053]:SimpleName[59033-59053]"
    }, {
      "left" : "int wakefulness",
      "right" : "int wakefulness",
      "info" : "SingleVariableDeclaration[59054-59069]:SingleVariableDeclaration[59054-59069]"
    }, {
      "left" : "int reason",
      "right" : "int reason",
      "info" : "SingleVariableDeclaration[59071-59081]:SingleVariableDeclaration[59071-59081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59083-59382]:Block[59083-59382]"
    }, {
      "left" : "if (mWakefulness != wakefulness)",
      "right" : "if (mWakefulness != wakefulness)",
      "info" : "IfStatement[59093-59376]:IfStatement[59093-59376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59126-59376]:Block[59126-59376]"
    }, {
      "left" : "finishWakefulnessChangeLocked();",
      "right" : "finishWakefulnessChangeLocked();",
      "info" : "ExpressionStatement[59140-59172]:ExpressionStatement[59140-59172]"
    }, {
      "left" : "mWakefulness = wakefulness;",
      "right" : "mWakefulness = wakefulness;",
      "info" : "ExpressionStatement[59186-59213]:ExpressionStatement[59186-59213]"
    }, {
      "left" : "mWakefulnessChanging = true;",
      "right" : "mWakefulnessChanging = true;",
      "info" : "ExpressionStatement[59226-59254]:ExpressionStatement[59226-59254]"
    }, {
      "left" : "mDirty |= DIRTY_WAKEFULNESS;",
      "right" : "mDirty |= DIRTY_WAKEFULNESS;",
      "info" : "ExpressionStatement[59267-59295]:ExpressionStatement[59267-59295]"
    }, {
      "left" : "mNotifier.onWakefulnessChangeStarted(wakefulness, reason);",
      "right" : "mNotifier.onWakefulnessChangeStarted(wakefulness, reason);",
      "info" : "ExpressionStatement[59308-59366]:ExpressionStatement[59308-59366]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59388-59395]:Modifier[59388-59395]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59396-59400]:PrimitiveType[59396-59400]"
    }, {
      "left" : "finishWakefulnessChangeLocked",
      "right" : "finishWakefulnessChangeLocked",
      "info" : "SimpleName[59401-59430]:SimpleName[59401-59430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59433-59593]:Block[59433-59593]"
    }, {
      "left" : "if (mWakefulnessChanging)",
      "right" : "if (mWakefulnessChanging)",
      "info" : "IfStatement[59443-59587]:IfStatement[59443-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59469-59587]:Block[59469-59587]"
    }, {
      "left" : "mNotifier.onWakefulnessChangeFinished(mWakefulness);",
      "right" : "mNotifier.onWakefulnessChangeFinished(mWakefulness);",
      "info" : "ExpressionStatement[59483-59535]:ExpressionStatement[59483-59535]"
    }, {
      "left" : "mWakefulnessChanging = false;",
      "right" : "mWakefulnessChanging = false;",
      "info" : "ExpressionStatement[59548-59577]:ExpressionStatement[59548-59577]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60015-60022]:Modifier[60015-60022]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60023-60027]:PrimitiveType[60023-60027]"
    }, {
      "left" : "updatePowerStateLocked",
      "right" : "updatePowerStateLocked",
      "info" : "SimpleName[60028-60050]:SimpleName[60028-60050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60053-61944]:Block[60053-61944]"
    }, {
      "left" : "if (!mSystemReady || mDirty == 0)",
      "right" : "if (!mSystemReady || mDirty == 0)",
      "info" : "IfStatement[60063-60128]:IfStatement[60063-60128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60097-60128]:Block[60097-60128]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60111-60118]:ReturnStatement[60111-60118]"
    }, {
      "left" : "if (!Thread.holdsLock(mLock))",
      "right" : "if (!Thread.holdsLock(mLock))",
      "info" : "IfStatement[60137-60276]:IfStatement[60137-60276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60167-60276]:Block[60167-60276]"
    }, {
      "left" : "Slog.wtf(TAG, \"Power manager lock was not held when calling updatePowerStateLocked\");",
      "right" : "Slog.wtf(TAG, \"Power manager lock was not held when calling updatePowerStateLocked\");",
      "info" : "ExpressionStatement[60181-60266]:ExpressionStatement[60181-60266]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"updatePowerState\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"updatePowerState\");",
      "info" : "ExpressionStatement[60286-60346]:ExpressionStatement[60286-60346]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[60355-61938]:TryStatement[60355-61938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60359-61867]:Block[60359-61867]"
    }, {
      "left" : "updateIsPoweredLocked(mDirty);",
      "right" : "updateIsPoweredLocked(mDirty);",
      "info" : "ExpressionStatement[60418-60448]:ExpressionStatement[60418-60448]"
    }, {
      "left" : "updateStayOnLocked(mDirty);",
      "right" : "updateStayOnLocked(mDirty);",
      "info" : "ExpressionStatement[60461-60488]:ExpressionStatement[60461-60488]"
    }, {
      "left" : "updateScreenBrightnessBoostLocked(mDirty);",
      "right" : "updateScreenBrightnessBoostLocked(mDirty);",
      "info" : "ExpressionStatement[60501-60543]:ExpressionStatement[60501-60543]"
    }, {
      "left" : "final long now = SystemClock.uptimeMillis();",
      "right" : "final long now = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[60731-60775]:VariableDeclarationStatement[60731-60775]"
    }, {
      "left" : "int dirtyPhase2 = 0;",
      "right" : "int dirtyPhase2 = 0;",
      "info" : "VariableDeclarationStatement[60788-60808]:VariableDeclarationStatement[60788-60808]"
    }, {
      "left" : "for (;;) {\n                int dirtyPhase1 = mDirty;\n                dirtyPhase2 |= dirtyPhase1;\n                mDirty = 0;\n\n                updateWakeLockSummaryLocked(dirtyPhase1);\n                updateUserActivitySummaryLocked(now, dirtyPhase1);\n                if (!updateWakefulnessLocked(dirtyPhase1)) {\n                    break;\n                }\n            })",
      "right" : "for (;;) {\n                int dirtyPhase1 = mDirty;\n                dirtyPhase2 |= dirtyPhase1;\n                mDirty = 0;\n\n                updateWakeLockSummaryLocked(dirtyPhase1);\n                updateUserActivitySummaryLocked(now, dirtyPhase1);\n                if (!updateWakefulnessLocked(dirtyPhase1)) {\n                    break;\n                }\n            })",
      "info" : "ForStatement[60821-61191]:ForStatement[60821-61191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60830-61191]:Block[60830-61191]"
    }, {
      "left" : "int dirtyPhase1 = mDirty;",
      "right" : "int dirtyPhase1 = mDirty;",
      "info" : "VariableDeclarationStatement[60848-60873]:VariableDeclarationStatement[60848-60873]"
    }, {
      "left" : "dirtyPhase2 |= dirtyPhase1;",
      "right" : "dirtyPhase2 |= dirtyPhase1;",
      "info" : "ExpressionStatement[60890-60917]:ExpressionStatement[60890-60917]"
    }, {
      "left" : "mDirty = 0;",
      "right" : "mDirty = 0;",
      "info" : "ExpressionStatement[60934-60945]:ExpressionStatement[60934-60945]"
    }, {
      "left" : "updateWakeLockSummaryLocked(dirtyPhase1);",
      "right" : "updateWakeLockSummaryLocked(dirtyPhase1);",
      "info" : "ExpressionStatement[60963-61004]:ExpressionStatement[60963-61004]"
    }, {
      "left" : "updateUserActivitySummaryLocked(now, dirtyPhase1);",
      "right" : "updateUserActivitySummaryLocked(now, dirtyPhase1);",
      "info" : "ExpressionStatement[61021-61071]:ExpressionStatement[61021-61071]"
    }, {
      "left" : "if (!updateWakefulnessLocked(dirtyPhase1))",
      "right" : "if (!updateWakefulnessLocked(dirtyPhase1))",
      "info" : "IfStatement[61088-61177]:IfStatement[61088-61177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61131-61177]:Block[61131-61177]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61153-61159]:BreakStatement[61153-61159]"
    }, {
      "left" : "boolean displayBecameReady = updateDisplayPowerStateLocked(dirtyPhase2);",
      "right" : "boolean displayBecameReady = updateDisplayPowerStateLocked(dirtyPhase2);",
      "info" : "VariableDeclarationStatement[61257-61329]:VariableDeclarationStatement[61257-61329]"
    }, {
      "left" : "updateDreamLocked(dirtyPhase2, displayBecameReady);",
      "right" : "updateDreamLocked(dirtyPhase2, displayBecameReady);",
      "info" : "ExpressionStatement[61421-61472]:ExpressionStatement[61421-61472]"
    }, {
      "left" : "if (mDisplayReady)",
      "right" : "if (mDisplayReady)",
      "info" : "IfStatement[61541-61624]:IfStatement[61541-61624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61560-61624]:Block[61560-61624]"
    }, {
      "left" : "finishWakefulnessChangeLocked();",
      "right" : "finishWakefulnessChangeLocked();",
      "info" : "ExpressionStatement[61578-61610]:ExpressionStatement[61578-61610]"
    }, {
      "left" : "updateSuspendBlockerLocked();",
      "right" : "updateSuspendBlockerLocked();",
      "info" : "ExpressionStatement[61828-61857]:ExpressionStatement[61828-61857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61876-61938]:Block[61876-61938]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[61890-61928]:ExpressionStatement[61890-61928]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62057-62064]:Modifier[62057-62064]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62065-62069]:PrimitiveType[62065-62069]"
    }, {
      "left" : "updateIsPoweredLocked",
      "right" : "updateIsPoweredLocked",
      "info" : "SimpleName[62070-62091]:SimpleName[62070-62091]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[62092-62101]:SingleVariableDeclaration[62092-62101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62103-64839]:Block[62103-64839]"
    }, {
      "left" : "if ((dirty & DIRTY_BATTERY_STATE) != 0)",
      "right" : "if ((dirty & DIRTY_BATTERY_STATE) != 0)",
      "info" : "IfStatement[62113-64833]:IfStatement[62113-64833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62153-64833]:Block[62153-64833]"
    }, {
      "left" : "final boolean wasPowered = mIsPowered;",
      "right" : "final boolean wasPowered = mIsPowered;",
      "info" : "VariableDeclarationStatement[62167-62205]:VariableDeclarationStatement[62167-62205]"
    }, {
      "left" : "final int oldPlugType = mPlugType;",
      "right" : "final int oldPlugType = mPlugType;",
      "info" : "VariableDeclarationStatement[62218-62252]:VariableDeclarationStatement[62218-62252]"
    }, {
      "left" : "final boolean oldLevelLow = mBatteryLevelLow;",
      "right" : "final boolean oldLevelLow = mBatteryLevelLow;",
      "info" : "VariableDeclarationStatement[62265-62310]:VariableDeclarationStatement[62265-62310]"
    }, {
      "left" : "mIsPowered = mBatteryManagerInternal.isPowered(BatteryManager.BATTERY_PLUGGED_ANY);",
      "right" : "mIsPowered = mBatteryManagerInternal.isPowered(BatteryManager.BATTERY_PLUGGED_ANY);",
      "info" : "ExpressionStatement[62323-62406]:ExpressionStatement[62323-62406]"
    }, {
      "left" : "mPlugType = mBatteryManagerInternal.getPlugType();",
      "right" : "mPlugType = mBatteryManagerInternal.getPlugType();",
      "info" : "ExpressionStatement[62419-62469]:ExpressionStatement[62419-62469]"
    }, {
      "left" : "mBatteryLevel = mBatteryManagerInternal.getBatteryLevel();",
      "right" : "mBatteryLevel = mBatteryManagerInternal.getBatteryLevel();",
      "info" : "ExpressionStatement[62482-62540]:ExpressionStatement[62482-62540]"
    }, {
      "left" : "mBatteryLevelLow = mBatteryManagerInternal.getBatteryLevelLow();",
      "right" : "mBatteryLevelLow = mBatteryManagerInternal.getBatteryLevelLow();",
      "info" : "ExpressionStatement[62553-62617]:ExpressionStatement[62553-62617]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[62631-62968]:IfStatement[62631-62968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62647-62968]:Block[62647-62968]"
    }, {
      "left" : "Slog.d(TAG, \"updateIsPoweredLocked: wasPowered=\" + wasPowered\n                        + \", mIsPowered=\" + mIsPowered\n                        + \", oldPlugType=\" + oldPlugType\n                        + \", mPlugType=\" + mPlugType\n                        + \", mBatteryLevel=\" + mBatteryLevel);",
      "right" : "Slog.d(TAG, \"updateIsPoweredLocked: wasPowered=\" + wasPowered\n                        + \", mIsPowered=\" + mIsPowered\n                        + \", oldPlugType=\" + oldPlugType\n                        + \", mPlugType=\" + mPlugType\n                        + \", mBatteryLevel=\" + mBatteryLevel);",
      "info" : "ExpressionStatement[62665-62954]:ExpressionStatement[62665-62954]"
    }, {
      "left" : "enableQbCharger(mIsPowered);",
      "right" : "enableQbCharger(mIsPowered);",
      "info" : "ExpressionStatement[62982-63010]:ExpressionStatement[62982-63010]"
    }, {
      "left" : "if (wasPowered != mIsPowered || oldPlugType != mPlugType)",
      "right" : "if (wasPowered != mIsPowered || oldPlugType != mPlugType)",
      "info" : "IfStatement[63023-64386]:IfStatement[63023-64386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63081-64386]:Block[63081-64386]"
    }, {
      "left" : "mDirty |= DIRTY_IS_POWERED;",
      "right" : "mDirty |= DIRTY_IS_POWERED;",
      "info" : "ExpressionStatement[63099-63126]:ExpressionStatement[63099-63126]"
    }, {
      "left" : "final boolean dockedOnWirelessCharger = mWirelessChargerDetector.update(\n                        mIsPowered, mPlugType, mBatteryLevel);",
      "right" : "final boolean dockedOnWirelessCharger = mWirelessChargerDetector.update(\n                        mIsPowered, mPlugType, mBatteryLevel);",
      "info" : "VariableDeclarationStatement[63201-63336]:VariableDeclarationStatement[63201-63336]"
    }, {
      "left" : "final long now = SystemClock.uptimeMillis();",
      "right" : "final long now = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[63704-63748]:VariableDeclarationStatement[63704-63748]"
    }, {
      "left" : "if (shouldWakeUpWhenPluggedOrUnpluggedLocked(wasPowered, oldPlugType,\n                        dockedOnWirelessCharger))",
      "right" : "if (shouldWakeUpWhenPluggedOrUnpluggedLocked(wasPowered, oldPlugType,\n                        dockedOnWirelessCharger))",
      "info" : "IfStatement[63765-63971]:IfStatement[63765-63971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63885-63971]:Block[63885-63971]"
    }, {
      "left" : "wakeUpNoUpdateLocked(now, Process.SYSTEM_UID);",
      "right" : "wakeUpNoUpdateLocked(now, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[63907-63953]:ExpressionStatement[63907-63953]"
    }, {
      "left" : "userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "right" : "userActivityNoUpdateLocked(\n                        now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[63988-64108]:ExpressionStatement[63988-64108]"
    }, {
      "left" : "if (dockedOnWirelessCharger)",
      "right" : "if (dockedOnWirelessCharger)",
      "info" : "IfStatement[64265-64372]:IfStatement[64265-64372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64294-64372]:Block[64294-64372]"
    }, {
      "left" : "mNotifier.onWirelessChargingStarted();",
      "right" : "mNotifier.onWirelessChargingStarted();",
      "info" : "ExpressionStatement[64316-64354]:ExpressionStatement[64316-64354]"
    }, {
      "left" : "if (wasPowered != mIsPowered || oldLevelLow != mBatteryLevelLow)",
      "right" : "if (wasPowered != mIsPowered || oldLevelLow != mBatteryLevelLow)",
      "info" : "IfStatement[64400-64823]:IfStatement[64400-64823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64465-64823]:Block[64465-64823]"
    }, {
      "left" : "if (oldLevelLow != mBatteryLevelLow && !mBatteryLevelLow)",
      "right" : "if (oldLevelLow != mBatteryLevelLow && !mBatteryLevelLow)",
      "info" : "IfStatement[64483-64765]:IfStatement[64483-64765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64541-64765]:Block[64541-64765]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[64563-64692]:IfStatement[64563-64692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64579-64692]:Block[64579-64692]"
    }, {
      "left" : "Slog.d(TAG, \"updateIsPoweredLocked: resetting low power snooze\");",
      "right" : "Slog.d(TAG, \"updateIsPoweredLocked: resetting low power snooze\");",
      "info" : "ExpressionStatement[64605-64670]:ExpressionStatement[64605-64670]"
    }, {
      "left" : "mAutoLowPowerModeSnoozing = false;",
      "right" : "mAutoLowPowerModeSnoozing = false;",
      "info" : "ExpressionStatement[64713-64747]:ExpressionStatement[64713-64747]"
    }, {
      "left" : "updateLowPowerModeLocked();",
      "right" : "updateLowPowerModeLocked();",
      "info" : "ExpressionStatement[64782-64809]:ExpressionStatement[64782-64809]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64845-64852]:Modifier[64845-64852]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64853-64860]:PrimitiveType[64853-64860]"
    }, {
      "left" : "shouldWakeUpWhenPluggedOrUnpluggedLocked",
      "right" : "shouldWakeUpWhenPluggedOrUnpluggedLocked",
      "info" : "SimpleName[64861-64901]:SimpleName[64861-64901]"
    }, {
      "left" : "boolean wasPowered",
      "right" : "boolean wasPowered",
      "info" : "SingleVariableDeclaration[64915-64933]:SingleVariableDeclaration[64915-64933]"
    }, {
      "left" : "int oldPlugType",
      "right" : "int oldPlugType",
      "info" : "SingleVariableDeclaration[64935-64950]:SingleVariableDeclaration[64935-64950]"
    }, {
      "left" : "boolean dockedOnWirelessCharger",
      "right" : "boolean dockedOnWirelessCharger",
      "info" : "SingleVariableDeclaration[64952-64983]:SingleVariableDeclaration[64952-64983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64985-66262]:Block[64985-66262]"
    }, {
      "left" : "if (mWakeUpWhenPluggedOrUnpluggedSetting == 0)",
      "right" : "if (mWakeUpWhenPluggedOrUnpluggedSetting == 0)",
      "info" : "IfStatement[65058-65142]:IfStatement[65058-65142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65105-65142]:Block[65105-65142]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65119-65132]:ReturnStatement[65119-65132]"
    }, {
      "left" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1)",
      "right" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1)",
      "info" : "IfStatement[65151-65249]:IfStatement[65151-65249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65212-65249]:Block[65212-65249]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65226-65239]:ReturnStatement[65226-65239]"
    }, {
      "left" : "if (wasPowered && !mIsPowered\n                && oldPlugType == BatteryManager.BATTERY_PLUGGED_WIRELESS)",
      "right" : "if (wasPowered && !mIsPowered\n                && oldPlugType == BatteryManager.BATTERY_PLUGGED_WIRELESS)",
      "info" : "IfStatement[65376-65518]:IfStatement[65376-65518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65481-65518]:Block[65481-65518]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65495-65508]:ReturnStatement[65495-65508]"
    }, {
      "left" : "if (!wasPowered && mIsPowered\n                && mPlugType == BatteryManager.BATTERY_PLUGGED_WIRELESS\n                && !dockedOnWirelessCharger)",
      "right" : "if (!wasPowered && mIsPowered\n                && mPlugType == BatteryManager.BATTERY_PLUGGED_WIRELESS\n                && !dockedOnWirelessCharger)",
      "info" : "IfStatement[65669-65853]:IfStatement[65669-65853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65816-65853]:Block[65816-65853]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65830-65843]:ReturnStatement[65830-65843]"
    }, {
      "left" : "if (mIsPowered && mWakefulness == WAKEFULNESS_DREAMING)",
      "right" : "if (mIsPowered && mWakefulness == WAKEFULNESS_DREAMING)",
      "info" : "IfStatement[65933-66026]:IfStatement[65933-66026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65989-66026]:Block[65989-66026]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66003-66016]:ReturnStatement[66003-66016]"
    }, {
      "left" : "if (mTheaterModeEnabled && !mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig)",
      "right" : "if (mTheaterModeEnabled && !mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig)",
      "info" : "IfStatement[66089-66204]:IfStatement[66089-66204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66167-66204]:Block[66167-66204]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66181-66194]:ReturnStatement[66181-66194]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66244-66256]:ReturnStatement[66244-66256]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66369-66376]:Modifier[66369-66376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66377-66381]:PrimitiveType[66377-66381]"
    }, {
      "left" : "updateStayOnLocked",
      "right" : "updateStayOnLocked",
      "info" : "SimpleName[66382-66400]:SimpleName[66382-66400]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[66401-66410]:SingleVariableDeclaration[66401-66410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66412-66934]:Block[66412-66934]"
    }, {
      "left" : "if ((dirty & (DIRTY_BATTERY_STATE | DIRTY_SETTINGS)) != 0)",
      "right" : "if ((dirty & (DIRTY_BATTERY_STATE | DIRTY_SETTINGS)) != 0)",
      "info" : "IfStatement[66422-66928]:IfStatement[66422-66928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66481-66928]:Block[66481-66928]"
    }, {
      "left" : "final boolean wasStayOn = mStayOn;",
      "right" : "final boolean wasStayOn = mStayOn;",
      "info" : "VariableDeclarationStatement[66495-66529]:VariableDeclarationStatement[66495-66529]"
    }, {
      "left" : "if (mStayOnWhilePluggedInSetting != 0\n                    && !isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked())",
      "right" : "if (mStayOnWhilePluggedInSetting != 0\n                    && !isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked())",
      "info" : "IfStatement[66542-66822]:IfStatement[66542-66822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66662-66768]:Block[66662-66768]"
    }, {
      "left" : "mStayOn = mBatteryManagerInternal.isPowered(mStayOnWhilePluggedInSetting);",
      "right" : "mStayOn = mBatteryManagerInternal.isPowered(mStayOnWhilePluggedInSetting);",
      "info" : "ExpressionStatement[66680-66754]:ExpressionStatement[66680-66754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66774-66822]:Block[66774-66822]"
    }, {
      "left" : "mStayOn = false;",
      "right" : "mStayOn = false;",
      "info" : "ExpressionStatement[66792-66808]:ExpressionStatement[66792-66808]"
    }, {
      "left" : "if (mStayOn != wasStayOn)",
      "right" : "if (mStayOn != wasStayOn)",
      "info" : "IfStatement[66836-66918]:IfStatement[66836-66918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66862-66918]:Block[66862-66918]"
    }, {
      "left" : "mDirty |= DIRTY_STAY_ON;",
      "right" : "mDirty |= DIRTY_STAY_ON;",
      "info" : "ExpressionStatement[66880-66904]:ExpressionStatement[66880-66904]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[67183-67215]:SingleMemberAnnotation[67183-67215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67220-67227]:Modifier[67220-67227]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67228-67232]:PrimitiveType[67228-67232]"
    }, {
      "left" : "updateWakeLockSummaryLocked",
      "right" : "updateWakeLockSummaryLocked",
      "info" : "SimpleName[67233-67260]:SimpleName[67233-67260]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[67261-67270]:SingleVariableDeclaration[67261-67270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67272-70022]:Block[67272-70022]"
    }, {
      "left" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_WAKEFULNESS)) != 0)",
      "right" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_WAKEFULNESS)) != 0)",
      "info" : "IfStatement[67282-70016]:IfStatement[67282-70016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67341-70016]:Block[67341-70016]"
    }, {
      "left" : "mWakeLockSummary = 0;",
      "right" : "mWakeLockSummary = 0;",
      "info" : "ExpressionStatement[67355-67376]:ExpressionStatement[67355-67376]"
    }, {
      "left" : "final int numWakeLocks = mWakeLocks.size();",
      "right" : "final int numWakeLocks = mWakeLocks.size();",
      "info" : "VariableDeclarationStatement[67390-67433]:VariableDeclarationStatement[67390-67433]"
    }, {
      "left" : "for (int i = 0; i < numWakeLocks; i++)",
      "right" : "for (int i = 0; i < numWakeLocks; i++)",
      "info" : "ForStatement[67446-68627]:ForStatement[67446-68627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67485-68627]:Block[67485-68627]"
    }, {
      "left" : "final WakeLock wakeLock = mWakeLocks.get(i);",
      "right" : "final WakeLock wakeLock = mWakeLocks.get(i);",
      "info" : "VariableDeclarationStatement[67503-67547]:VariableDeclarationStatement[67503-67547]"
    }, {
      "left" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                    case PowerManager.PARTIAL_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_CPU;\n                        break;\n                    case PowerManager.FULL_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_BUTTON_BRIGHT;\n                        break;\n                    case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT;\n                        break;\n                    case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_DIM;\n                        break;\n                    case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_PROXIMITY_SCREEN_OFF;\n                        break;\n                    case PowerManager.DOZE_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_DOZE;\n                        break;\n                }",
      "right" : "switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                    case PowerManager.PARTIAL_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_CPU;\n                        break;\n                    case PowerManager.FULL_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_BUTTON_BRIGHT;\n                        break;\n                    case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT;\n                        break;\n                    case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_SCREEN_DIM;\n                        break;\n                    case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_PROXIMITY_SCREEN_OFF;\n                        break;\n                    case PowerManager.DOZE_WAKE_LOCK:\n                        mWakeLockSummary |= WAKE_LOCK_DOZE;\n                        break;\n                }",
      "info" : "SwitchStatement[67564-68613]:SwitchStatement[67564-68613]"
    }, {
      "left" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "right" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "info" : "SwitchCase[67647-67683]:SwitchCase[67647-67683]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_CPU;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_CPU;",
      "info" : "ExpressionStatement[67708-67742]:ExpressionStatement[67708-67742]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67767-67773]:BreakStatement[67767-67773]"
    }, {
      "left" : "case PowerManager.FULL_WAKE_LOCK:",
      "right" : "case PowerManager.FULL_WAKE_LOCK:",
      "info" : "SwitchCase[67794-67827]:SwitchCase[67794-67827]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_BUTTON_BRIGHT;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_BUTTON_BRIGHT;",
      "info" : "ExpressionStatement[67852-67922]:ExpressionStatement[67852-67922]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67947-67953]:BreakStatement[67947-67953]"
    }, {
      "left" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "info" : "SwitchCase[67974-68016]:SwitchCase[67974-68016]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_BRIGHT;",
      "info" : "ExpressionStatement[68041-68085]:ExpressionStatement[68041-68085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68110-68116]:BreakStatement[68110-68116]"
    }, {
      "left" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "info" : "SwitchCase[68137-68176]:SwitchCase[68137-68176]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_DIM;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_SCREEN_DIM;",
      "info" : "ExpressionStatement[68201-68242]:ExpressionStatement[68201-68242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68267-68273]:BreakStatement[68267-68273]"
    }, {
      "left" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "right" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "info" : "SwitchCase[68294-68343]:SwitchCase[68294-68343]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_PROXIMITY_SCREEN_OFF;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_PROXIMITY_SCREEN_OFF;",
      "info" : "ExpressionStatement[68368-68419]:ExpressionStatement[68368-68419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68444-68450]:BreakStatement[68444-68450]"
    }, {
      "left" : "case PowerManager.DOZE_WAKE_LOCK:",
      "right" : "case PowerManager.DOZE_WAKE_LOCK:",
      "info" : "SwitchCase[68471-68504]:SwitchCase[68471-68504]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_DOZE;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_DOZE;",
      "info" : "ExpressionStatement[68529-68564]:ExpressionStatement[68529-68564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68589-68595]:BreakStatement[68589-68595]"
    }, {
      "left" : "if (mWakefulness != WAKEFULNESS_DOZING)",
      "right" : "if (mWakefulness != WAKEFULNESS_DOZING)",
      "info" : "IfStatement[68721-68829]:IfStatement[68721-68829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68761-68829]:Block[68761-68829]"
    }, {
      "left" : "mWakeLockSummary &= ~WAKE_LOCK_DOZE;",
      "right" : "mWakeLockSummary &= ~WAKE_LOCK_DOZE;",
      "info" : "ExpressionStatement[68779-68815]:ExpressionStatement[68779-68815]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_ASLEEP\n                    || (mWakeLockSummary & WAKE_LOCK_DOZE) != 0)",
      "right" : "if (mWakefulness == WAKEFULNESS_ASLEEP\n                    || (mWakeLockSummary & WAKE_LOCK_DOZE) != 0)",
      "info" : "IfStatement[68842-69247]:IfStatement[68842-69247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68946-69247]:Block[68946-69247]"
    }, {
      "left" : "mWakeLockSummary &= ~(WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_SCREEN_DIM\n                        | WAKE_LOCK_BUTTON_BRIGHT);",
      "right" : "mWakeLockSummary &= ~(WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_SCREEN_DIM\n                        | WAKE_LOCK_BUTTON_BRIGHT);",
      "info" : "ExpressionStatement[68964-69084]:ExpressionStatement[68964-69084]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_ASLEEP)",
      "right" : "if (mWakefulness == WAKEFULNESS_ASLEEP)",
      "info" : "IfStatement[69101-69233]:IfStatement[69101-69233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69141-69233]:Block[69141-69233]"
    }, {
      "left" : "mWakeLockSummary &= ~WAKE_LOCK_PROXIMITY_SCREEN_OFF;",
      "right" : "mWakeLockSummary &= ~WAKE_LOCK_PROXIMITY_SCREEN_OFF;",
      "info" : "ExpressionStatement[69163-69215]:ExpressionStatement[69163-69215]"
    }, {
      "left" : "if ((mWakeLockSummary & (WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_SCREEN_DIM)) != 0)",
      "right" : "if ((mWakeLockSummary & (WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_SCREEN_DIM)) != 0)",
      "info" : "IfStatement[69345-69715]:IfStatement[69345-69715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69425-69715]:Block[69425-69715]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "right" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "info" : "IfStatement[69443-69701]:IfStatement[69443-69701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69482-69579]:Block[69482-69579]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_CPU | WAKE_LOCK_STAY_AWAKE;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_CPU | WAKE_LOCK_STAY_AWAKE;",
      "info" : "ExpressionStatement[69504-69561]:ExpressionStatement[69504-69561]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_DREAMING)",
      "right" : "if (mWakefulness == WAKEFULNESS_DREAMING)",
      "info" : "IfStatement[69585-69701]:IfStatement[69585-69701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69627-69701]:Block[69627-69701]"
    }, {
      "left" : "mWakeLockSummary |= WAKE_LOCK_CPU;",
      "right" : "mWakeLockSummary |= WAKE_LOCK_CPU;",
      "info" : "ExpressionStatement[69649-69683]:ExpressionStatement[69649-69683]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[69729-70006]:IfStatement[69729-70006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69745-70006]:Block[69745-70006]"
    }, {
      "left" : "Slog.d(TAG, \"updateWakeLockSummaryLocked: mWakefulness=\"\n                        + PowerManagerInternal.wakefulnessToString(mWakefulness)\n                        + \", mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));",
      "right" : "Slog.d(TAG, \"updateWakeLockSummaryLocked: mWakefulness=\"\n                        + PowerManagerInternal.wakefulnessToString(mWakefulness)\n                        + \", mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));",
      "info" : "ExpressionStatement[69763-69992]:ExpressionStatement[69763-69992]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70334-70341]:Modifier[70334-70341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70342-70346]:PrimitiveType[70342-70346]"
    }, {
      "left" : "updateUserActivitySummaryLocked",
      "right" : "updateUserActivitySummaryLocked",
      "info" : "SimpleName[70347-70378]:SimpleName[70347-70378]"
    }, {
      "left" : "long now",
      "right" : "long now",
      "info" : "SingleVariableDeclaration[70379-70387]:SingleVariableDeclaration[70379-70387]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[70389-70398]:SingleVariableDeclaration[70389-70398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70400-75626]:Block[70400-75626]"
    }, {
      "left" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY\n                | DIRTY_WAKEFULNESS | DIRTY_SETTINGS)) != 0)",
      "right" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY\n                | DIRTY_WAKEFULNESS | DIRTY_SETTINGS)) != 0)",
      "info" : "IfStatement[70475-75620]:IfStatement[70475-75620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70589-75620]:Block[70589-75620]"
    }, {
      "left" : "mHandler.removeMessages(MSG_USER_ACTIVITY_TIMEOUT);",
      "right" : "mHandler.removeMessages(MSG_USER_ACTIVITY_TIMEOUT);",
      "info" : "ExpressionStatement[70603-70654]:ExpressionStatement[70603-70654]"
    }, {
      "left" : "long nextTimeout = 0;",
      "right" : "long nextTimeout = 0;",
      "info" : "VariableDeclarationStatement[70668-70689]:VariableDeclarationStatement[70668-70689]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_AWAKE\n                    || mWakefulness == WAKEFULNESS_DREAMING\n                    || mWakefulness == WAKEFULNESS_DOZING)",
      "right" : "if (mWakefulness == WAKEFULNESS_AWAKE\n                    || mWakefulness == WAKEFULNESS_DREAMING\n                    || mWakefulness == WAKEFULNESS_DOZING)",
      "info" : "IfStatement[70702-75226]:IfStatement[70702-75226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70859-75163]:Block[70859-75163]"
    }, {
      "left" : "final int sleepTimeout = getSleepTimeoutLocked();",
      "right" : "final int sleepTimeout = getSleepTimeoutLocked();",
      "info" : "VariableDeclarationStatement[70877-70926]:VariableDeclarationStatement[70877-70926]"
    }, {
      "left" : "final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);",
      "right" : "final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);",
      "info" : "VariableDeclarationStatement[70943-71012]:VariableDeclarationStatement[70943-71012]"
    }, {
      "left" : "final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);",
      "right" : "final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);",
      "info" : "VariableDeclarationStatement[71029-71104]:VariableDeclarationStatement[71029-71104]"
    }, {
      "left" : "mUserActivitySummary = 0;",
      "right" : "mUserActivitySummary = 0;",
      "info" : "ExpressionStatement[71122-71147]:ExpressionStatement[71122-71147]"
    }, {
      "left" : "if (mLastUserActivityTime >= mLastWakeTime)",
      "right" : "if (mLastUserActivityTime >= mLastWakeTime)",
      "info" : "IfStatement[71164-73416]:IfStatement[71164-73416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71208-73416]:Block[71208-73416]"
    }, {
      "left" : "nextTimeout = mLastUserActivityTime\n                            + screenOffTimeout - screenDimDuration;",
      "right" : "nextTimeout = mLastUserActivityTime\n                            + screenOffTimeout - screenDimDuration;",
      "info" : "ExpressionStatement[71230-71333]:ExpressionStatement[71230-71333]"
    }, {
      "left" : "if (now < nextTimeout)",
      "right" : "if (now < nextTimeout)",
      "info" : "IfStatement[71354-73398]:IfStatement[71354-73398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71377-72909]:Block[71377-72909]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_BRIGHT;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_BRIGHT;",
      "info" : "ExpressionStatement[71403-71454]:ExpressionStatement[71403-71454]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "right" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "info" : "IfStatement[71479-72887]:IfStatement[71479-72887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71518-72887]:Block[71518-72887]"
    }, {
      "left" : "int buttonBrightness, keyboardBrightness;",
      "right" : "int buttonBrightness, keyboardBrightness;",
      "info" : "VariableDeclarationStatement[71548-71589]:VariableDeclarationStatement[71548-71589]"
    }, {
      "left" : "if (mButtonBrightnessOverrideFromWindowManager >= 0)",
      "right" : "if (mButtonBrightnessOverrideFromWindowManager >= 0)",
      "info" : "IfStatement[71618-72075]:IfStatement[71618-72075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71671-71894]:Block[71671-71894]"
    }, {
      "left" : "buttonBrightness = mButtonBrightnessOverrideFromWindowManager;",
      "right" : "buttonBrightness = mButtonBrightnessOverrideFromWindowManager;",
      "info" : "ExpressionStatement[71705-71767]:ExpressionStatement[71705-71767]"
    }, {
      "left" : "keyboardBrightness = mButtonBrightnessOverrideFromWindowManager;",
      "right" : "keyboardBrightness = mButtonBrightnessOverrideFromWindowManager;",
      "info" : "ExpressionStatement[71800-71864]:ExpressionStatement[71800-71864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71900-72075]:Block[71900-72075]"
    }, {
      "left" : "buttonBrightness = mButtonBrightness;",
      "right" : "buttonBrightness = mButtonBrightness;",
      "info" : "ExpressionStatement[71934-71971]:ExpressionStatement[71934-71971]"
    }, {
      "left" : "keyboardBrightness = mKeyboardBrightness;",
      "right" : "keyboardBrightness = mKeyboardBrightness;",
      "info" : "ExpressionStatement[72004-72045]:ExpressionStatement[72004-72045]"
    }, {
      "left" : "mKeyboardLight.setBrightness(mKeyboardVisible ?\n                                    keyboardBrightness : 0);",
      "right" : "mKeyboardLight.setBrightness(mKeyboardVisible ?\n                                    keyboardBrightness : 0);",
      "info" : "ExpressionStatement[72105-72213]:ExpressionStatement[72105-72213]"
    }, {
      "left" : "if (mButtonTimeout != 0\n                                    && now > mLastUserActivityTime + mButtonTimeout)",
      "right" : "if (mButtonTimeout != 0\n                                    && now > mLastUserActivityTime + mButtonTimeout)",
      "info" : "IfStatement[72242-72861]:IfStatement[72242-72861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72351-72446]:Block[72351-72446]"
    }, {
      "left" : "mButtonsLight.setBrightness(0);",
      "right" : "mButtonsLight.setBrightness(0);",
      "info" : "ExpressionStatement[72385-72416]:ExpressionStatement[72385-72416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72452-72861]:Block[72452-72861]"
    }, {
      "left" : "if (!mProximityPositive)",
      "right" : "if (!mProximityPositive)",
      "info" : "IfStatement[72486-72831]:IfStatement[72486-72831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72511-72831]:Block[72511-72831]"
    }, {
      "left" : "mButtonsLight.setBrightness(buttonBrightness);",
      "right" : "mButtonsLight.setBrightness(buttonBrightness);",
      "info" : "ExpressionStatement[72549-72595]:ExpressionStatement[72549-72595]"
    }, {
      "left" : "if (buttonBrightness != 0 && mButtonTimeout != 0)",
      "right" : "if (buttonBrightness != 0 && mButtonTimeout != 0)",
      "info" : "IfStatement[72632-72797]:IfStatement[72632-72797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72682-72797]:Block[72682-72797]"
    }, {
      "left" : "nextTimeout = now + mButtonTimeout;",
      "right" : "nextTimeout = now + mButtonTimeout;",
      "info" : "ExpressionStatement[72724-72759]:ExpressionStatement[72724-72759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72915-73398]:Block[72915-73398]"
    }, {
      "left" : "nextTimeout = mLastUserActivityTime + screenOffTimeout;",
      "right" : "nextTimeout = mLastUserActivityTime + screenOffTimeout;",
      "info" : "ExpressionStatement[72941-72996]:ExpressionStatement[72941-72996]"
    }, {
      "left" : "if (now < nextTimeout)",
      "right" : "if (now < nextTimeout)",
      "info" : "IfStatement[73021-73376]:IfStatement[73021-73376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73044-73376]:Block[73044-73376]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DIM;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DIM;",
      "info" : "ExpressionStatement[73074-73122]:ExpressionStatement[73074-73122]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "right" : "if (mWakefulness == WAKEFULNESS_AWAKE)",
      "info" : "IfStatement[73151-73350]:IfStatement[73151-73350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73190-73350]:Block[73190-73350]"
    }, {
      "left" : "mButtonsLight.setBrightness(0);",
      "right" : "mButtonsLight.setBrightness(0);",
      "info" : "ExpressionStatement[73224-73255]:ExpressionStatement[73224-73255]"
    }, {
      "left" : "mKeyboardLight.setBrightness(0);",
      "right" : "mKeyboardLight.setBrightness(0);",
      "info" : "ExpressionStatement[73288-73320]:ExpressionStatement[73288-73320]"
    }, {
      "left" : "if (mUserActivitySummary == 0\n                        && mLastUserActivityTimeNoChangeLights >= mLastWakeTime)",
      "right" : "if (mUserActivitySummary == 0\n                        && mLastUserActivityTimeNoChangeLights >= mLastWakeTime)",
      "info" : "IfStatement[73433-74099]:IfStatement[73433-74099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73544-74099]:Block[73544-74099]"
    }, {
      "left" : "nextTimeout = mLastUserActivityTimeNoChangeLights + screenOffTimeout;",
      "right" : "nextTimeout = mLastUserActivityTimeNoChangeLights + screenOffTimeout;",
      "info" : "ExpressionStatement[73566-73635]:ExpressionStatement[73566-73635]"
    }, {
      "left" : "if (now < nextTimeout)",
      "right" : "if (now < nextTimeout)",
      "info" : "IfStatement[73656-74081]:IfStatement[73656-74081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73679-74081]:Block[73679-74081]"
    }, {
      "left" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT)",
      "right" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT)",
      "info" : "IfStatement[73705-74059]:IfStatement[73705-74059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73775-73882]:Block[73775-73882]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_BRIGHT;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_BRIGHT;",
      "info" : "ExpressionStatement[73805-73856]:ExpressionStatement[73805-73856]"
    }, {
      "left" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DIM)",
      "right" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DIM)",
      "info" : "IfStatement[73888-74059]:IfStatement[73888-74059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73955-74059]:Block[73955-74059]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DIM;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DIM;",
      "info" : "ExpressionStatement[73985-74033]:ExpressionStatement[73985-74033]"
    }, {
      "left" : "if (mUserActivitySummary == 0)",
      "right" : "if (mUserActivitySummary == 0)",
      "info" : "IfStatement[74116-74864]:IfStatement[74116-74864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74147-74864]:Block[74147-74864]"
    }, {
      "left" : "if (sleepTimeout >= 0)",
      "right" : "if (sleepTimeout >= 0)",
      "info" : "IfStatement[74169-74846]:IfStatement[74169-74846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74192-74700]:Block[74192-74700]"
    }, {
      "left" : "final long anyUserActivity = Math.max(mLastUserActivityTime,\n                                mLastUserActivityTimeNoChangeLights);",
      "right" : "final long anyUserActivity = Math.max(mLastUserActivityTime,\n                                mLastUserActivityTimeNoChangeLights);",
      "info" : "VariableDeclarationStatement[74218-74348]:VariableDeclarationStatement[74218-74348]"
    }, {
      "left" : "if (anyUserActivity >= mLastWakeTime)",
      "right" : "if (anyUserActivity >= mLastWakeTime)",
      "info" : "IfStatement[74373-74678]:IfStatement[74373-74678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74411-74678]:Block[74411-74678]"
    }, {
      "left" : "nextTimeout = anyUserActivity + sleepTimeout;",
      "right" : "nextTimeout = anyUserActivity + sleepTimeout;",
      "info" : "ExpressionStatement[74441-74486]:ExpressionStatement[74441-74486]"
    }, {
      "left" : "if (now < nextTimeout)",
      "right" : "if (now < nextTimeout)",
      "info" : "IfStatement[74515-74652]:IfStatement[74515-74652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74538-74652]:Block[74538-74652]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DREAM;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DREAM;",
      "info" : "ExpressionStatement[74572-74622]:ExpressionStatement[74572-74622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74706-74846]:Block[74706-74846]"
    }, {
      "left" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DREAM;",
      "right" : "mUserActivitySummary = USER_ACTIVITY_SCREEN_DREAM;",
      "info" : "ExpressionStatement[74732-74782]:ExpressionStatement[74732-74782]"
    }, {
      "left" : "nextTimeout = -1;",
      "right" : "nextTimeout = -1;",
      "info" : "ExpressionStatement[74807-74824]:ExpressionStatement[74807-74824]"
    }, {
      "left" : "if (mUserActivitySummary != 0 && nextTimeout >= 0)",
      "right" : "if (mUserActivitySummary != 0 && nextTimeout >= 0)",
      "info" : "IfStatement[74881-75149]:IfStatement[74881-75149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74932-75149]:Block[74932-75149]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_USER_ACTIVITY_TIMEOUT);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_USER_ACTIVITY_TIMEOUT);",
      "info" : "VariableDeclarationStatement[74954-75018]:VariableDeclarationStatement[74954-75018]"
    }, {
      "left" : "msg.setAsynchronous(true);",
      "right" : "msg.setAsynchronous(true);",
      "info" : "ExpressionStatement[75039-75065]:ExpressionStatement[75039-75065]"
    }, {
      "left" : "mHandler.sendMessageAtTime(msg, nextTimeout);",
      "right" : "mHandler.sendMessageAtTime(msg, nextTimeout);",
      "info" : "ExpressionStatement[75086-75131]:ExpressionStatement[75086-75131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75169-75226]:Block[75169-75226]"
    }, {
      "left" : "mUserActivitySummary = 0;",
      "right" : "mUserActivitySummary = 0;",
      "info" : "ExpressionStatement[75187-75212]:ExpressionStatement[75187-75212]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[75240-75610]:IfStatement[75240-75610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75256-75610]:Block[75256-75610]"
    }, {
      "left" : "Slog.d(TAG, \"updateUserActivitySummaryLocked: mWakefulness=\"\n                        + PowerManagerInternal.wakefulnessToString(mWakefulness)\n                        + \", mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary)\n                        + \", nextTimeout=\" + TimeUtils.formatUptime(nextTimeout));",
      "right" : "Slog.d(TAG, \"updateUserActivitySummaryLocked: mWakefulness=\"\n                        + PowerManagerInternal.wakefulnessToString(mWakefulness)\n                        + \", mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary)\n                        + \", nextTimeout=\" + TimeUtils.formatUptime(nextTimeout));",
      "info" : "ExpressionStatement[75274-75596]:ExpressionStatement[75274-75596]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76033-76040]:Modifier[76033-76040]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[76041-76045]:PrimitiveType[76041-76045]"
    }, {
      "left" : "handleUserActivityTimeout",
      "right" : "handleUserActivityTimeout",
      "info" : "SimpleName[76046-76071]:SimpleName[76046-76071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76074-76332]:Block[76074-76332]"
    }, {
      "left" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleUserActivityTimeout\");\n            }\n\n            mDirty |= DIRTY_USER_ACTIVITY;\n            updatePowerStateLocked();\n        }",
      "right" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleUserActivityTimeout\");\n            }\n\n            mDirty |= DIRTY_USER_ACTIVITY;\n            updatePowerStateLocked();\n        }",
      "info" : "SynchronizedStatement[76110-76326]:SynchronizedStatement[76110-76326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76131-76326]:Block[76131-76326]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[76145-76234]:IfStatement[76145-76234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76161-76234]:Block[76161-76234]"
    }, {
      "left" : "Slog.d(TAG, \"handleUserActivityTimeout\");",
      "right" : "Slog.d(TAG, \"handleUserActivityTimeout\");",
      "info" : "ExpressionStatement[76179-76220]:ExpressionStatement[76179-76220]"
    }, {
      "left" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "right" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "info" : "ExpressionStatement[76248-76278]:ExpressionStatement[76248-76278]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[76291-76316]:ExpressionStatement[76291-76316]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76338-76345]:Modifier[76338-76345]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76346-76349]:PrimitiveType[76346-76349]"
    }, {
      "left" : "getSleepTimeoutLocked",
      "right" : "getSleepTimeoutLocked",
      "info" : "SimpleName[76350-76371]:SimpleName[76350-76371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76374-76552]:Block[76374-76552]"
    }, {
      "left" : "int timeout = mSleepTimeoutSetting;",
      "right" : "int timeout = mSleepTimeoutSetting;",
      "info" : "VariableDeclarationStatement[76384-76419]:VariableDeclarationStatement[76384-76419]"
    }, {
      "left" : "if (timeout <= 0)",
      "right" : "if (timeout <= 0)",
      "info" : "IfStatement[76428-76480]:IfStatement[76428-76480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76446-76480]:Block[76446-76480]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[76460-76470]:ReturnStatement[76460-76470]"
    }, {
      "left" : "return Math.max(timeout, mMinimumScreenOffTimeoutConfig);",
      "right" : "return Math.max(timeout, mMinimumScreenOffTimeoutConfig);",
      "info" : "ReturnStatement[76489-76546]:ReturnStatement[76489-76546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76558-76565]:Modifier[76558-76565]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76566-76569]:PrimitiveType[76566-76569]"
    }, {
      "left" : "getScreenOffTimeoutLocked",
      "right" : "getScreenOffTimeoutLocked",
      "info" : "SimpleName[76570-76595]:SimpleName[76570-76595]"
    }, {
      "left" : "int sleepTimeout",
      "right" : "int sleepTimeout",
      "info" : "SingleVariableDeclaration[76596-76612]:SingleVariableDeclaration[76596-76612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76614-77166]:Block[76614-77166]"
    }, {
      "left" : "int timeout = mScreenOffTimeoutSetting;",
      "right" : "int timeout = mScreenOffTimeoutSetting;",
      "info" : "VariableDeclarationStatement[76624-76663]:VariableDeclarationStatement[76624-76663]"
    }, {
      "left" : "if (isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked())",
      "right" : "if (isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked())",
      "info" : "IfStatement[76672-76827]:IfStatement[76672-76827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76734-76827]:Block[76734-76827]"
    }, {
      "left" : "timeout = Math.min(timeout, mMaximumScreenOffTimeoutFromDeviceAdmin);",
      "right" : "timeout = Math.min(timeout, mMaximumScreenOffTimeoutFromDeviceAdmin);",
      "info" : "ExpressionStatement[76748-76817]:ExpressionStatement[76748-76817]"
    }, {
      "left" : "if (mUserActivityTimeoutOverrideFromWindowManager >= 0)",
      "right" : "if (mUserActivityTimeoutOverrideFromWindowManager >= 0)",
      "info" : "IfStatement[76836-76996]:IfStatement[76836-76996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76892-76996]:Block[76892-76996]"
    }, {
      "left" : "timeout = (int)Math.min(timeout, mUserActivityTimeoutOverrideFromWindowManager);",
      "right" : "timeout = (int)Math.min(timeout, mUserActivityTimeoutOverrideFromWindowManager);",
      "info" : "ExpressionStatement[76906-76986]:ExpressionStatement[76906-76986]"
    }, {
      "left" : "if (sleepTimeout >= 0)",
      "right" : "if (sleepTimeout >= 0)",
      "info" : "IfStatement[77005-77094]:IfStatement[77005-77094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77028-77094]:Block[77028-77094]"
    }, {
      "left" : "timeout = Math.min(timeout, sleepTimeout);",
      "right" : "timeout = Math.min(timeout, sleepTimeout);",
      "info" : "ExpressionStatement[77042-77084]:ExpressionStatement[77042-77084]"
    }, {
      "left" : "return Math.max(timeout, mMinimumScreenOffTimeoutConfig);",
      "right" : "return Math.max(timeout, mMinimumScreenOffTimeoutConfig);",
      "info" : "ReturnStatement[77103-77160]:ReturnStatement[77103-77160]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77172-77179]:Modifier[77172-77179]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77180-77183]:PrimitiveType[77180-77183]"
    }, {
      "left" : "getScreenDimDurationLocked",
      "right" : "getScreenDimDurationLocked",
      "info" : "SimpleName[77184-77210]:SimpleName[77184-77210]"
    }, {
      "left" : "int screenOffTimeout",
      "right" : "int screenOffTimeout",
      "info" : "SingleVariableDeclaration[77211-77231]:SingleVariableDeclaration[77211-77231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77233-77370]:Block[77233-77370]"
    }, {
      "left" : "return Math.min(mMaximumScreenDimDurationConfig,\n                (int)(screenOffTimeout * mMaximumScreenDimRatioConfig));",
      "right" : "return Math.min(mMaximumScreenDimDurationConfig,\n                (int)(screenOffTimeout * mMaximumScreenDimRatioConfig));",
      "info" : "ReturnStatement[77243-77364]:ReturnStatement[77243-77364]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77750-77757]:Modifier[77750-77757]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77758-77765]:PrimitiveType[77758-77765]"
    }, {
      "left" : "updateWakefulnessLocked",
      "right" : "updateWakefulnessLocked",
      "info" : "SimpleName[77766-77789]:SimpleName[77766-77789]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[77790-77799]:SingleVariableDeclaration[77790-77799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77801-78684]:Block[77801-78684]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[77811-77835]:VariableDeclarationStatement[77811-77835]"
    }, {
      "left" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_BOOT_COMPLETED\n                | DIRTY_WAKEFULNESS | DIRTY_STAY_ON | DIRTY_PROXIMITY_POSITIVE\n                | DIRTY_DOCK_STATE)) != 0)",
      "right" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_BOOT_COMPLETED\n                | DIRTY_WAKEFULNESS | DIRTY_STAY_ON | DIRTY_PROXIMITY_POSITIVE\n                | DIRTY_DOCK_STATE)) != 0)",
      "info" : "IfStatement[77844-78654]:IfStatement[77844-78654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78042-78654]:Block[78042-78654]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_AWAKE && isItBedTimeYetLocked())",
      "right" : "if (mWakefulness == WAKEFULNESS_AWAKE && isItBedTimeYetLocked())",
      "info" : "IfStatement[78056-78644]:IfStatement[78056-78644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78121-78644]:Block[78121-78644]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[78139-78247]:IfStatement[78139-78247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78155-78247]:Block[78155-78247]"
    }, {
      "left" : "Slog.d(TAG, \"updateWakefulnessLocked: Bed time...\");",
      "right" : "Slog.d(TAG, \"updateWakefulnessLocked: Bed time...\");",
      "info" : "ExpressionStatement[78177-78229]:ExpressionStatement[78177-78229]"
    }, {
      "left" : "final long time = SystemClock.uptimeMillis();",
      "right" : "final long time = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[78264-78309]:VariableDeclarationStatement[78264-78309]"
    }, {
      "left" : "if (shouldNapAtBedTimeLocked())",
      "right" : "if (shouldNapAtBedTimeLocked())",
      "info" : "IfStatement[78326-78630]:IfStatement[78326-78630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78358-78452]:Block[78358-78452]"
    }, {
      "left" : "changed = napNoUpdateLocked(time, Process.SYSTEM_UID);",
      "right" : "changed = napNoUpdateLocked(time, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[78380-78434]:ExpressionStatement[78380-78434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78458-78630]:Block[78458-78630]"
    }, {
      "left" : "changed = goToSleepNoUpdateLocked(time,\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);",
      "right" : "changed = goToSleepNoUpdateLocked(time,\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[78480-78612]:ExpressionStatement[78480-78612]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[78663-78678]:ReturnStatement[78663-78678]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[78852-78859]:Modifier[78852-78859]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[78860-78867]:PrimitiveType[78860-78867]"
    }, {
      "left" : "shouldNapAtBedTimeLocked",
      "right" : "shouldNapAtBedTimeLocked",
      "info" : "SimpleName[78868-78892]:SimpleName[78868-78892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78895-79072]:Block[78895-79072]"
    }, {
      "left" : "return mDreamsActivateOnSleepSetting\n                || (mDreamsActivateOnDockSetting\n                        && mDockState != Intent.EXTRA_DOCK_STATE_UNDOCKED);",
      "right" : "return mDreamsActivateOnSleepSetting\n                || (mDreamsActivateOnDockSetting\n                        && mDockState != Intent.EXTRA_DOCK_STATE_UNDOCKED);",
      "info" : "ReturnStatement[78905-79066]:ReturnStatement[78905-79066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79287-79294]:Modifier[79287-79294]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[79295-79302]:PrimitiveType[79295-79302]"
    }, {
      "left" : "isItBedTimeYetLocked",
      "right" : "isItBedTimeYetLocked",
      "info" : "SimpleName[79303-79323]:SimpleName[79303-79323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79326-79393]:Block[79326-79393]"
    }, {
      "left" : "return mBootCompleted && !isBeingKeptAwakeLocked();",
      "right" : "return mBootCompleted && !isBeingKeptAwakeLocked();",
      "info" : "ReturnStatement[79336-79387]:ReturnStatement[79336-79387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79847-79854]:Modifier[79847-79854]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[79855-79862]:PrimitiveType[79855-79862]"
    }, {
      "left" : "isBeingKeptAwakeLocked",
      "right" : "isBeingKeptAwakeLocked",
      "info" : "SimpleName[79863-79885]:SimpleName[79863-79885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79888-80205]:Block[79888-80205]"
    }, {
      "left" : "return mStayOn\n                || mProximityPositive\n                || (mWakeLockSummary & WAKE_LOCK_STAY_AWAKE) != 0\n                || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT\n                        | USER_ACTIVITY_SCREEN_DIM)) != 0\n                || mScreenBrightnessBoostInProgress;",
      "right" : "return mStayOn\n                || mProximityPositive\n                || (mWakeLockSummary & WAKE_LOCK_STAY_AWAKE) != 0\n                || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT\n                        | USER_ACTIVITY_SCREEN_DIM)) != 0\n                || mScreenBrightnessBoostInProgress;",
      "info" : "ReturnStatement[79898-80199]:ReturnStatement[79898-80199]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80313-80320]:Modifier[80313-80320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[80321-80325]:PrimitiveType[80321-80325]"
    }, {
      "left" : "updateDreamLocked",
      "right" : "updateDreamLocked",
      "info" : "SimpleName[80326-80343]:SimpleName[80326-80343]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[80344-80353]:SingleVariableDeclaration[80344-80353]"
    }, {
      "left" : "boolean displayBecameReady",
      "right" : "boolean displayBecameReady",
      "info" : "SingleVariableDeclaration[80355-80381]:SingleVariableDeclaration[80355-80381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80383-80853]:Block[80383-80853]"
    }, {
      "left" : "if ((dirty & (DIRTY_WAKEFULNESS\n                | DIRTY_USER_ACTIVITY\n                | DIRTY_WAKE_LOCKS\n                | DIRTY_BOOT_COMPLETED\n                | DIRTY_SETTINGS\n                | DIRTY_IS_POWERED\n                | DIRTY_STAY_ON\n                | DIRTY_PROXIMITY_POSITIVE\n                | DIRTY_BATTERY_STATE)) != 0 || displayBecameReady)",
      "right" : "if ((dirty & (DIRTY_WAKEFULNESS\n                | DIRTY_USER_ACTIVITY\n                | DIRTY_WAKE_LOCKS\n                | DIRTY_BOOT_COMPLETED\n                | DIRTY_SETTINGS\n                | DIRTY_IS_POWERED\n                | DIRTY_STAY_ON\n                | DIRTY_PROXIMITY_POSITIVE\n                | DIRTY_BATTERY_STATE)) != 0 || displayBecameReady)",
      "info" : "IfStatement[80393-80847]:IfStatement[80393-80847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80748-80847]:Block[80748-80847]"
    }, {
      "left" : "if (mDisplayReady)",
      "right" : "if (mDisplayReady)",
      "info" : "IfStatement[80762-80837]:IfStatement[80762-80837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80781-80837]:Block[80781-80837]"
    }, {
      "left" : "scheduleSandmanLocked();",
      "right" : "scheduleSandmanLocked();",
      "info" : "ExpressionStatement[80799-80823]:ExpressionStatement[80799-80823]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80859-80866]:Modifier[80859-80866]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[80867-80871]:PrimitiveType[80867-80871]"
    }, {
      "left" : "scheduleSandmanLocked",
      "right" : "scheduleSandmanLocked",
      "info" : "SimpleName[80872-80893]:SimpleName[80872-80893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80896-81126]:Block[80896-81126]"
    }, {
      "left" : "if (!mSandmanScheduled)",
      "right" : "if (!mSandmanScheduled)",
      "info" : "IfStatement[80906-81120]:IfStatement[80906-81120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80930-81120]:Block[80930-81120]"
    }, {
      "left" : "mSandmanScheduled = true;",
      "right" : "mSandmanScheduled = true;",
      "info" : "ExpressionStatement[80944-80969]:ExpressionStatement[80944-80969]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_SANDMAN);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_SANDMAN);",
      "info" : "VariableDeclarationStatement[80982-81032]:VariableDeclarationStatement[80982-81032]"
    }, {
      "left" : "msg.setAsynchronous(true);",
      "right" : "msg.setAsynchronous(true);",
      "info" : "ExpressionStatement[81045-81071]:ExpressionStatement[81045-81071]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[81084-81110]:ExpressionStatement[81084-81110]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[81498-81505]:Modifier[81498-81505]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81506-81510]:PrimitiveType[81506-81510]"
    }, {
      "left" : "handleSandman",
      "right" : "handleSandman",
      "info" : "SimpleName[81511-81524]:SimpleName[81511-81524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81527-85591]:Block[81527-85591]"
    }, {
      "left" : "final boolean startDreaming;",
      "right" : "final boolean startDreaming;",
      "info" : "VariableDeclarationStatement[81596-81624]:VariableDeclarationStatement[81596-81624]"
    }, {
      "left" : "final int wakefulness;",
      "right" : "final int wakefulness;",
      "info" : "VariableDeclarationStatement[81633-81655]:VariableDeclarationStatement[81633-81655]"
    }, {
      "left" : "synchronized (mLock) {\n            mSandmanScheduled = false;\n            wakefulness = mWakefulness;\n            if (mSandmanSummoned && mDisplayReady) {\n                startDreaming = canDreamLocked() || canDozeLocked();\n                mSandmanSummoned = false;\n            } else {\n                startDreaming = false;\n            }\n        }",
      "right" : "synchronized (mLock) {\n            mSandmanScheduled = false;\n            wakefulness = mWakefulness;\n            if (mSandmanSummoned && mDisplayReady) {\n                startDreaming = canDreamLocked() || canDozeLocked();\n                mSandmanSummoned = false;\n            } else {\n                startDreaming = false;\n            }\n        }",
      "info" : "SynchronizedStatement[81664-82013]:SynchronizedStatement[81664-82013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81685-82013]:Block[81685-82013]"
    }, {
      "left" : "mSandmanScheduled = false;",
      "right" : "mSandmanScheduled = false;",
      "info" : "ExpressionStatement[81699-81725]:ExpressionStatement[81699-81725]"
    }, {
      "left" : "wakefulness = mWakefulness;",
      "right" : "wakefulness = mWakefulness;",
      "info" : "ExpressionStatement[81738-81765]:ExpressionStatement[81738-81765]"
    }, {
      "left" : "if (mSandmanSummoned && mDisplayReady)",
      "right" : "if (mSandmanSummoned && mDisplayReady)",
      "info" : "IfStatement[81778-82003]:IfStatement[81778-82003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81817-81943]:Block[81817-81943]"
    }, {
      "left" : "startDreaming = canDreamLocked() || canDozeLocked();",
      "right" : "startDreaming = canDreamLocked() || canDozeLocked();",
      "info" : "ExpressionStatement[81835-81887]:ExpressionStatement[81835-81887]"
    }, {
      "left" : "mSandmanSummoned = false;",
      "right" : "mSandmanSummoned = false;",
      "info" : "ExpressionStatement[81904-81929]:ExpressionStatement[81904-81929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81949-82003]:Block[81949-82003]"
    }, {
      "left" : "startDreaming = false;",
      "right" : "startDreaming = false;",
      "info" : "ExpressionStatement[81967-81989]:ExpressionStatement[81967-81989]"
    }, {
      "left" : "final boolean isDreaming;",
      "right" : "final boolean isDreaming;",
      "info" : "VariableDeclarationStatement[82211-82236]:VariableDeclarationStatement[82211-82236]"
    }, {
      "left" : "if (mDreamManager != null)",
      "right" : "if (mDreamManager != null)",
      "info" : "IfStatement[82245-82638]:IfStatement[82245-82638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82272-82589]:Block[82272-82589]"
    }, {
      "left" : "if (startDreaming)",
      "right" : "if (startDreaming)",
      "info" : "IfStatement[82353-82526]:IfStatement[82353-82526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82372-82526]:Block[82372-82526]"
    }, {
      "left" : "mDreamManager.stopDream(false /*immediate*/);",
      "right" : "mDreamManager.stopDream(false /*immediate*/);",
      "info" : "ExpressionStatement[82390-82435]:ExpressionStatement[82390-82435]"
    }, {
      "left" : "mDreamManager.startDream(wakefulness == WAKEFULNESS_DOZING);",
      "right" : "mDreamManager.startDream(wakefulness == WAKEFULNESS_DOZING);",
      "info" : "ExpressionStatement[82452-82512]:ExpressionStatement[82452-82512]"
    }, {
      "left" : "isDreaming = mDreamManager.isDreaming();",
      "right" : "isDreaming = mDreamManager.isDreaming();",
      "info" : "ExpressionStatement[82539-82579]:ExpressionStatement[82539-82579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82595-82638]:Block[82595-82638]"
    }, {
      "left" : "isDreaming = false;",
      "right" : "isDreaming = false;",
      "info" : "ExpressionStatement[82609-82628]:ExpressionStatement[82609-82628]"
    }, {
      "left" : "synchronized (mLock) {\n            // Remember the initial battery level when the dream started.\n            if (startDreaming && isDreaming) {\n                mBatteryLevelWhenDreamStarted = mBatteryLevel;\n                if (wakefulness == WAKEFULNESS_DOZING) {\n                    Slog.i(TAG, \"Dozing...\");\n                } else {\n                    Slog.i(TAG, \"Dreaming...\");\n                }\n            }\n\n            // If preconditions changed, wait for the next iteration to determine\n            // whether the dream should continue (or be restarted).\n            if (mSandmanSummoned || mWakefulness != wakefulness) {\n                return; // wait for next cycle\n            }\n\n            // Determine whether the dream should continue.\n            if (wakefulness == WAKEFULNESS_DREAMING) {\n                if (isDreaming && canDreamLocked()) {\n                    if (mDreamsBatteryLevelDrainCutoffConfig >= 0\n                            && mBatteryLevel < mBatteryLevelWhenDreamStarted\n                                    - mDreamsBatteryLevelDrainCutoffConfig\n                            && !isBeingKeptAwakeLocked()) {\n                        // If the user activity timeout expired and the battery appears\n                        // to be draining faster than it is charging then stop dreaming\n                        // and go to sleep.\n                        Slog.i(TAG, \"Stopping dream because the battery appears to \"\n                                + \"be draining faster than it is charging.  \"\n                                + \"Battery level when dream started: \"\n                                + mBatteryLevelWhenDreamStarted + \"%.  \"\n                                + \"Battery level now: \" + mBatteryLevel + \"%.\");\n                    } else {\n                        return; // continue dreaming\n                    }\n                }\n\n                // Dream has ended or will be stopped.  Update the power state.\n                if (isItBedTimeYetLocked()) {\n                    goToSleepNoUpdateLocked(SystemClock.uptimeMillis(),\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);\n                    updatePowerStateLocked();\n                } else {\n                    wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);\n                    updatePowerStateLocked();\n                }\n            } else if (wakefulness == WAKEFULNESS_DOZING) {\n                if (isDreaming) {\n                    return; // continue dozing\n                }\n\n                // Doze has ended or will be stopped.  Update the power state.\n                reallyGoToSleepNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            // Remember the initial battery level when the dream started.\n            if (startDreaming && isDreaming) {\n                mBatteryLevelWhenDreamStarted = mBatteryLevel;\n                if (wakefulness == WAKEFULNESS_DOZING) {\n                    Slog.i(TAG, \"Dozing...\");\n                } else {\n                    Slog.i(TAG, \"Dreaming...\");\n                }\n            }\n\n            // If preconditions changed, wait for the next iteration to determine\n            // whether the dream should continue (or be restarted).\n            if (mSandmanSummoned || mWakefulness != wakefulness) {\n                return; // wait for next cycle\n            }\n\n            // Determine whether the dream should continue.\n            if (wakefulness == WAKEFULNESS_DREAMING) {\n                if (isDreaming && canDreamLocked()) {\n                    if (mDreamsBatteryLevelDrainCutoffConfig >= 0\n                            && mBatteryLevel < mBatteryLevelWhenDreamStarted\n                                    - mDreamsBatteryLevelDrainCutoffConfig\n                            && !isBeingKeptAwakeLocked()) {\n                        // If the user activity timeout expired and the battery appears\n                        // to be draining faster than it is charging then stop dreaming\n                        // and go to sleep.\n                        Slog.i(TAG, \"Stopping dream because the battery appears to \"\n                                + \"be draining faster than it is charging.  \"\n                                + \"Battery level when dream started: \"\n                                + mBatteryLevelWhenDreamStarted + \"%.  \"\n                                + \"Battery level now: \" + mBatteryLevel + \"%.\");\n                    } else {\n                        return; // continue dreaming\n                    }\n                }\n\n                // Dream has ended or will be stopped.  Update the power state.\n                if (isItBedTimeYetLocked()) {\n                    goToSleepNoUpdateLocked(SystemClock.uptimeMillis(),\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);\n                    updatePowerStateLocked();\n                } else {\n                    wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);\n                    updatePowerStateLocked();\n                }\n            } else if (wakefulness == WAKEFULNESS_DOZING) {\n                if (isDreaming) {\n                    return; // continue dozing\n                }\n\n                // Doze has ended or will be stopped.  Update the power state.\n                reallyGoToSleepNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[82679-85467]:SynchronizedStatement[82679-85467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82700-85467]:Block[82700-85467]"
    }, {
      "left" : "if (startDreaming && isDreaming)",
      "right" : "if (startDreaming && isDreaming)",
      "info" : "IfStatement[82788-83093]:IfStatement[82788-83093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82821-83093]:Block[82821-83093]"
    }, {
      "left" : "mBatteryLevelWhenDreamStarted = mBatteryLevel;",
      "right" : "mBatteryLevelWhenDreamStarted = mBatteryLevel;",
      "info" : "ExpressionStatement[82839-82885]:ExpressionStatement[82839-82885]"
    }, {
      "left" : "if (wakefulness == WAKEFULNESS_DOZING)",
      "right" : "if (wakefulness == WAKEFULNESS_DOZING)",
      "info" : "IfStatement[82902-83079]:IfStatement[82902-83079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82941-83006]:Block[82941-83006]"
    }, {
      "left" : "Slog.i(TAG, \"Dozing...\");",
      "right" : "Slog.i(TAG, \"Dozing...\");",
      "info" : "ExpressionStatement[82963-82988]:ExpressionStatement[82963-82988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83012-83079]:Block[83012-83079]"
    }, {
      "left" : "Slog.i(TAG, \"Dreaming...\");",
      "right" : "Slog.i(TAG, \"Dreaming...\");",
      "info" : "ExpressionStatement[83034-83061]:ExpressionStatement[83034-83061]"
    }, {
      "left" : "if (mSandmanSummoned || mWakefulness != wakefulness)",
      "right" : "if (mSandmanSummoned || mWakefulness != wakefulness)",
      "info" : "IfStatement[83257-83372]:IfStatement[83257-83372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83310-83372]:Block[83310-83372]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83328-83335]:ReturnStatement[83328-83335]"
    }, {
      "left" : "if (wakefulness == WAKEFULNESS_DREAMING)",
      "right" : "if (wakefulness == WAKEFULNESS_DREAMING)",
      "info" : "IfStatement[83446-85457]:IfStatement[83446-85457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83487-85081]:Block[83487-85081]"
    }, {
      "left" : "if (isDreaming && canDreamLocked())",
      "right" : "if (isDreaming && canDreamLocked())",
      "info" : "IfStatement[83505-84550]:IfStatement[83505-84550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83541-84550]:Block[83541-84550]"
    }, {
      "left" : "if (mDreamsBatteryLevelDrainCutoffConfig >= 0\n                            && mBatteryLevel < mBatteryLevelWhenDreamStarted\n                                    - mDreamsBatteryLevelDrainCutoffConfig\n                            && !isBeingKeptAwakeLocked())",
      "right" : "if (mDreamsBatteryLevelDrainCutoffConfig >= 0\n                            && mBatteryLevel < mBatteryLevelWhenDreamStarted\n                                    - mDreamsBatteryLevelDrainCutoffConfig\n                            && !isBeingKeptAwakeLocked())",
      "info" : "IfStatement[83563-84532]:IfStatement[83563-84532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83819-84450]:Block[83819-84450]"
    }, {
      "left" : "Slog.i(TAG, \"Stopping dream because the battery appears to \"\n                                + \"be draining faster than it is charging.  \"\n                                + \"Battery level when dream started: \"\n                                + mBatteryLevelWhenDreamStarted + \"%.  \"\n                                + \"Battery level now: \" + mBatteryLevel + \"%.\");",
      "right" : "Slog.i(TAG, \"Stopping dream because the battery appears to \"\n                                + \"be draining faster than it is charging.  \"\n                                + \"Battery level when dream started: \"\n                                + mBatteryLevelWhenDreamStarted + \"%.  \"\n                                + \"Battery level now: \" + mBatteryLevel + \"%.\");",
      "info" : "ExpressionStatement[84065-84428]:ExpressionStatement[84065-84428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84456-84532]:Block[84456-84532]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[84482-84489]:ReturnStatement[84482-84489]"
    }, {
      "left" : "if (isItBedTimeYetLocked())",
      "right" : "if (isItBedTimeYetLocked())",
      "info" : "IfStatement[84648-85067]:IfStatement[84648-85067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84676-84906]:Block[84676-84906]"
    }, {
      "left" : "goToSleepNoUpdateLocked(SystemClock.uptimeMillis(),\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);",
      "right" : "goToSleepNoUpdateLocked(SystemClock.uptimeMillis(),\n                            PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[84698-84842]:ExpressionStatement[84698-84842]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[84863-84888]:ExpressionStatement[84863-84888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84912-85067]:Block[84912-85067]"
    }, {
      "left" : "wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);",
      "right" : "wakeUpNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[84934-85003]:ExpressionStatement[84934-85003]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[85024-85049]:ExpressionStatement[85024-85049]"
    }, {
      "left" : "if (wakefulness == WAKEFULNESS_DOZING)",
      "right" : "if (wakefulness == WAKEFULNESS_DOZING)",
      "info" : "IfStatement[85087-85457]:IfStatement[85087-85457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85126-85457]:Block[85126-85457]"
    }, {
      "left" : "if (isDreaming)",
      "right" : "if (isDreaming)",
      "info" : "IfStatement[85144-85226]:IfStatement[85144-85226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85160-85226]:Block[85160-85226]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[85182-85189]:ReturnStatement[85182-85189]"
    }, {
      "left" : "reallyGoToSleepNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);",
      "right" : "reallyGoToSleepNoUpdateLocked(SystemClock.uptimeMillis(), Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[85323-85401]:ExpressionStatement[85323-85401]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[85418-85443]:ExpressionStatement[85418-85443]"
    }, {
      "left" : "if (isDreaming)",
      "right" : "if (isDreaming)",
      "info" : "IfStatement[85500-85585]:IfStatement[85500-85585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85516-85585]:Block[85516-85585]"
    }, {
      "left" : "mDreamManager.stopDream(false /*immediate*/);",
      "right" : "mDreamManager.stopDream(false /*immediate*/);",
      "info" : "ExpressionStatement[85530-85575]:ExpressionStatement[85530-85575]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85689-85696]:Modifier[85689-85696]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[85697-85704]:PrimitiveType[85697-85704]"
    }, {
      "left" : "canDreamLocked",
      "right" : "canDreamLocked",
      "info" : "SimpleName[85705-85719]:SimpleName[85705-85719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85722-86799]:Block[85722-86799]"
    }, {
      "left" : "if (mWakefulness != WAKEFULNESS_DREAMING\n                || !mDreamsSupportedConfig\n                || !mDreamsEnabledSetting\n                || !mDisplayPowerRequest.isBrightOrDim()\n                || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT\n                        | USER_ACTIVITY_SCREEN_DIM | USER_ACTIVITY_SCREEN_DREAM)) == 0\n                || !mBootCompleted)",
      "right" : "if (mWakefulness != WAKEFULNESS_DREAMING\n                || !mDreamsSupportedConfig\n                || !mDreamsEnabledSetting\n                || !mDisplayPowerRequest.isBrightOrDim()\n                || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT\n                        | USER_ACTIVITY_SCREEN_DIM | USER_ACTIVITY_SCREEN_DREAM)) == 0\n                || !mBootCompleted)",
      "info" : "IfStatement[85732-86147]:IfStatement[85732-86147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86110-86147]:Block[86110-86147]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[86124-86137]:ReturnStatement[86124-86137]"
    }, {
      "left" : "if (!isBeingKeptAwakeLocked())",
      "right" : "if (!isBeingKeptAwakeLocked())",
      "info" : "IfStatement[86156-86772]:IfStatement[86156-86772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86187-86772]:Block[86187-86772]"
    }, {
      "left" : "if (!mIsPowered && !mDreamsEnabledOnBatteryConfig)",
      "right" : "if (!mIsPowered && !mDreamsEnabledOnBatteryConfig)",
      "info" : "IfStatement[86201-86297]:IfStatement[86201-86297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86252-86297]:Block[86252-86297]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[86270-86283]:ReturnStatement[86270-86283]"
    }, {
      "left" : "if (!mIsPowered\n                    && mDreamsBatteryLevelMinimumWhenNotPoweredConfig >= 0\n                    && mBatteryLevel < mDreamsBatteryLevelMinimumWhenNotPoweredConfig)",
      "right" : "if (!mIsPowered\n                    && mDreamsBatteryLevelMinimumWhenNotPoweredConfig >= 0\n                    && mBatteryLevel < mDreamsBatteryLevelMinimumWhenNotPoweredConfig)",
      "info" : "IfStatement[86310-86533]:IfStatement[86310-86533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86488-86533]:Block[86488-86533]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[86506-86519]:ReturnStatement[86506-86519]"
    }, {
      "left" : "if (mIsPowered\n                    && mDreamsBatteryLevelMinimumWhenPoweredConfig >= 0\n                    && mBatteryLevel < mDreamsBatteryLevelMinimumWhenPoweredConfig)",
      "right" : "if (mIsPowered\n                    && mDreamsBatteryLevelMinimumWhenPoweredConfig >= 0\n                    && mBatteryLevel < mDreamsBatteryLevelMinimumWhenPoweredConfig)",
      "info" : "IfStatement[86546-86762]:IfStatement[86546-86762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86717-86762]:Block[86717-86762]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[86735-86748]:ReturnStatement[86735-86748]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86781-86793]:ReturnStatement[86781-86793]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[86896-86903]:Modifier[86896-86903]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[86904-86911]:PrimitiveType[86904-86911]"
    }, {
      "left" : "canDozeLocked",
      "right" : "canDozeLocked",
      "info" : "SimpleName[86912-86925]:SimpleName[86912-86925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86928-86986]:Block[86928-86986]"
    }, {
      "left" : "return mWakefulness == WAKEFULNESS_DOZING;",
      "right" : "return mWakefulness == WAKEFULNESS_DOZING;",
      "info" : "ReturnStatement[86938-86980]:ReturnStatement[86938-86980]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[87436-87443]:Modifier[87436-87443]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[87444-87451]:PrimitiveType[87444-87451]"
    }, {
      "left" : "updateDisplayPowerStateLocked",
      "right" : "updateDisplayPowerStateLocked",
      "info" : "SimpleName[87452-87481]:SimpleName[87452-87481]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[87482-87491]:SingleVariableDeclaration[87482-87491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87493-91626]:Block[87493-91626]"
    }, {
      "left" : "final boolean oldDisplayReady = mDisplayReady;",
      "right" : "final boolean oldDisplayReady = mDisplayReady;",
      "info" : "VariableDeclarationStatement[87503-87549]:VariableDeclarationStatement[87503-87549]"
    }, {
      "left" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_WAKEFULNESS\n                | DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED | DIRTY_BOOT_COMPLETED\n                | DIRTY_SETTINGS | DIRTY_SCREEN_BRIGHTNESS_BOOST)) != 0)",
      "right" : "if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_WAKEFULNESS\n                | DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED | DIRTY_BOOT_COMPLETED\n                | DIRTY_SETTINGS | DIRTY_SCREEN_BRIGHTNESS_BOOST)) != 0)",
      "info" : "IfStatement[87558-91570]:IfStatement[87558-91570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87786-91570]:Block[87786-91570]"
    }, {
      "left" : "mDisplayPowerRequest.policy = getDesiredScreenPolicyLocked();",
      "right" : "mDisplayPowerRequest.policy = getDesiredScreenPolicyLocked();",
      "info" : "ExpressionStatement[87800-87861]:ExpressionStatement[87800-87861]"
    }, {
      "left" : "int screenBrightness = mScreenBrightnessSettingDefault;",
      "right" : "int screenBrightness = mScreenBrightnessSettingDefault;",
      "info" : "VariableDeclarationStatement[87963-88018]:VariableDeclarationStatement[87963-88018]"
    }, {
      "left" : "float screenAutoBrightnessAdjustment = 0.0f;",
      "right" : "float screenAutoBrightnessAdjustment = 0.0f;",
      "info" : "VariableDeclarationStatement[88031-88075]:VariableDeclarationStatement[88031-88075]"
    }, {
      "left" : "boolean autoBrightness = (mScreenBrightnessModeSetting ==\n                    Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);",
      "right" : "boolean autoBrightness = (mScreenBrightnessModeSetting ==\n                    Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);",
      "info" : "VariableDeclarationStatement[88088-88216]:VariableDeclarationStatement[88088-88216]"
    }, {
      "left" : "if (isValidBrightness(mScreenBrightnessOverrideFromWindowManager))",
      "right" : "if (isValidBrightness(mScreenBrightnessOverrideFromWindowManager))",
      "info" : "IfStatement[88229-88726]:IfStatement[88229-88726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88296-88430]:Block[88296-88430]"
    }, {
      "left" : "screenBrightness = mScreenBrightnessOverrideFromWindowManager;",
      "right" : "screenBrightness = mScreenBrightnessOverrideFromWindowManager;",
      "info" : "ExpressionStatement[88314-88376]:ExpressionStatement[88314-88376]"
    }, {
      "left" : "autoBrightness = false;",
      "right" : "autoBrightness = false;",
      "info" : "ExpressionStatement[88393-88416]:ExpressionStatement[88393-88416]"
    }, {
      "left" : "if (isValidBrightness(mTemporaryScreenBrightnessSettingOverride))",
      "right" : "if (isValidBrightness(mTemporaryScreenBrightnessSettingOverride))",
      "info" : "IfStatement[88436-88726]:IfStatement[88436-88726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88502-88595]:Block[88502-88595]"
    }, {
      "left" : "screenBrightness = mTemporaryScreenBrightnessSettingOverride;",
      "right" : "screenBrightness = mTemporaryScreenBrightnessSettingOverride;",
      "info" : "ExpressionStatement[88520-88581]:ExpressionStatement[88520-88581]"
    }, {
      "left" : "if (isValidBrightness(mScreenBrightnessSetting))",
      "right" : "if (isValidBrightness(mScreenBrightnessSetting))",
      "info" : "IfStatement[88601-88726]:IfStatement[88601-88726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88650-88726]:Block[88650-88726]"
    }, {
      "left" : "screenBrightness = mScreenBrightnessSetting;",
      "right" : "screenBrightness = mScreenBrightnessSetting;",
      "info" : "ExpressionStatement[88668-88712]:ExpressionStatement[88668-88712]"
    }, {
      "left" : "if (autoBrightness)",
      "right" : "if (autoBrightness)",
      "info" : "IfStatement[88739-89355]:IfStatement[88739-89355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88759-89355]:Block[88759-89355]"
    }, {
      "left" : "screenBrightness = mScreenBrightnessSettingDefault;",
      "right" : "screenBrightness = mScreenBrightnessSettingDefault;",
      "info" : "ExpressionStatement[88777-88828]:ExpressionStatement[88777-88828]"
    }, {
      "left" : "if (isValidAutoBrightnessAdjustment(\n                        mTemporaryScreenAutoBrightnessAdjustmentSettingOverride))",
      "right" : "if (isValidAutoBrightnessAdjustment(\n                        mTemporaryScreenAutoBrightnessAdjustmentSettingOverride))",
      "info" : "IfStatement[88845-89341]:IfStatement[88845-89341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88964-89121]:Block[88964-89121]"
    }, {
      "left" : "screenAutoBrightnessAdjustment =\n                            mTemporaryScreenAutoBrightnessAdjustmentSettingOverride;",
      "right" : "screenAutoBrightnessAdjustment =\n                            mTemporaryScreenAutoBrightnessAdjustmentSettingOverride;",
      "info" : "ExpressionStatement[88986-89103]:ExpressionStatement[88986-89103]"
    }, {
      "left" : "if (isValidAutoBrightnessAdjustment(\n                        mScreenAutoBrightnessAdjustmentSetting))",
      "right" : "if (isValidAutoBrightnessAdjustment(\n                        mScreenAutoBrightnessAdjustmentSetting))",
      "info" : "IfStatement[89127-89341]:IfStatement[89127-89341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89229-89341]:Block[89229-89341]"
    }, {
      "left" : "screenAutoBrightnessAdjustment = mScreenAutoBrightnessAdjustmentSetting;",
      "right" : "screenAutoBrightnessAdjustment = mScreenAutoBrightnessAdjustmentSetting;",
      "info" : "ExpressionStatement[89251-89323]:ExpressionStatement[89251-89323]"
    }, {
      "left" : "screenBrightness = Math.max(Math.min(screenBrightness,\n                    mScreenBrightnessSettingMaximum), mScreenBrightnessSettingMinimum);",
      "right" : "screenBrightness = Math.max(Math.min(screenBrightness,\n                    mScreenBrightnessSettingMaximum), mScreenBrightnessSettingMinimum);",
      "info" : "ExpressionStatement[89368-89510]:ExpressionStatement[89368-89510]"
    }, {
      "left" : "screenAutoBrightnessAdjustment = Math.max(Math.min(\n                    screenAutoBrightnessAdjustment, 1.0f), -1.0f);",
      "right" : "screenAutoBrightnessAdjustment = Math.max(Math.min(\n                    screenAutoBrightnessAdjustment, 1.0f), -1.0f);",
      "info" : "ExpressionStatement[89523-89641]:ExpressionStatement[89523-89641]"
    }, {
      "left" : "mDisplayPowerRequest.screenBrightness = screenBrightness;",
      "right" : "mDisplayPowerRequest.screenBrightness = screenBrightness;",
      "info" : "ExpressionStatement[89700-89757]:ExpressionStatement[89700-89757]"
    }, {
      "left" : "mDisplayPowerRequest.screenAutoBrightnessAdjustment =\n                    screenAutoBrightnessAdjustment;",
      "right" : "mDisplayPowerRequest.screenAutoBrightnessAdjustment =\n                    screenAutoBrightnessAdjustment;",
      "info" : "ExpressionStatement[89770-89875]:ExpressionStatement[89770-89875]"
    }, {
      "left" : "mDisplayPowerRequest.useAutoBrightness = autoBrightness;",
      "right" : "mDisplayPowerRequest.useAutoBrightness = autoBrightness;",
      "info" : "ExpressionStatement[89888-89944]:ExpressionStatement[89888-89944]"
    }, {
      "left" : "mDisplayPowerRequest.useProximitySensor = shouldUseProximitySensorLocked();",
      "right" : "mDisplayPowerRequest.useProximitySensor = shouldUseProximitySensorLocked();",
      "info" : "ExpressionStatement[89957-90032]:ExpressionStatement[89957-90032]"
    }, {
      "left" : "mDisplayPowerRequest.lowPowerMode = mLowPowerModeEnabled;",
      "right" : "mDisplayPowerRequest.lowPowerMode = mLowPowerModeEnabled;",
      "info" : "ExpressionStatement[90045-90102]:ExpressionStatement[90045-90102]"
    }, {
      "left" : "mDisplayPowerRequest.boostScreenBrightness = mScreenBrightnessBoostInProgress;",
      "right" : "mDisplayPowerRequest.boostScreenBrightness = mScreenBrightnessBoostInProgress;",
      "info" : "ExpressionStatement[90115-90193]:ExpressionStatement[90115-90193]"
    }, {
      "left" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DOZE)",
      "right" : "if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DOZE)",
      "info" : "IfStatement[90207-90710]:IfStatement[90207-90710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90275-90518]:Block[90275-90518]"
    }, {
      "left" : "mDisplayPowerRequest.dozeScreenState = mDozeScreenStateOverrideFromDreamManager;",
      "right" : "mDisplayPowerRequest.dozeScreenState = mDozeScreenStateOverrideFromDreamManager;",
      "info" : "ExpressionStatement[90293-90373]:ExpressionStatement[90293-90373]"
    }, {
      "left" : "mDisplayPowerRequest.dozeScreenBrightness =\n                        mDozeScreenBrightnessOverrideFromDreamManager;",
      "right" : "mDisplayPowerRequest.dozeScreenBrightness =\n                        mDozeScreenBrightnessOverrideFromDreamManager;",
      "info" : "ExpressionStatement[90390-90504]:ExpressionStatement[90390-90504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90524-90710]:Block[90524-90710]"
    }, {
      "left" : "mDisplayPowerRequest.dozeScreenState = Display.STATE_UNKNOWN;",
      "right" : "mDisplayPowerRequest.dozeScreenState = Display.STATE_UNKNOWN;",
      "info" : "ExpressionStatement[90542-90603]:ExpressionStatement[90542-90603]"
    }, {
      "left" : "mDisplayPowerRequest.dozeScreenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "right" : "mDisplayPowerRequest.dozeScreenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "info" : "ExpressionStatement[90620-90696]:ExpressionStatement[90620-90696]"
    }, {
      "left" : "mDisplayReady = mDisplayManagerInternal.requestPowerState(mDisplayPowerRequest,\n                    mRequestWaitForNegativeProximity);",
      "right" : "mDisplayReady = mDisplayManagerInternal.requestPowerState(mDisplayPowerRequest,\n                    mRequestWaitForNegativeProximity);",
      "info" : "ExpressionStatement[90724-90858]:ExpressionStatement[90724-90858]"
    }, {
      "left" : "mRequestWaitForNegativeProximity = false;",
      "right" : "mRequestWaitForNegativeProximity = false;",
      "info" : "ExpressionStatement[90871-90912]:ExpressionStatement[90871-90912]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[90926-91560]:IfStatement[90926-91560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90942-91560]:Block[90942-91560]"
    }, {
      "left" : "Slog.d(TAG, \"updateDisplayPowerStateLocked: mDisplayReady=\" + mDisplayReady\n                        + \", policy=\" + mDisplayPowerRequest.policy\n                        + \", mWakefulness=\" + mWakefulness\n                        + \", mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary)\n                        + \", mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary)\n                        + \", mBootCompleted=\" + mBootCompleted\n                        + \", mScreenBrightnessBoostInProgress=\"\n                                + mScreenBrightnessBoostInProgress);",
      "right" : "Slog.d(TAG, \"updateDisplayPowerStateLocked: mDisplayReady=\" + mDisplayReady\n                        + \", policy=\" + mDisplayPowerRequest.policy\n                        + \", mWakefulness=\" + mWakefulness\n                        + \", mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary)\n                        + \", mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary)\n                        + \", mBootCompleted=\" + mBootCompleted\n                        + \", mScreenBrightnessBoostInProgress=\"\n                                + mScreenBrightnessBoostInProgress);",
      "info" : "ExpressionStatement[90960-91546]:ExpressionStatement[90960-91546]"
    }, {
      "left" : "return mDisplayReady && !oldDisplayReady;",
      "right" : "return mDisplayReady && !oldDisplayReady;",
      "info" : "ReturnStatement[91579-91620]:ReturnStatement[91579-91620]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[91632-91639]:Modifier[91632-91639]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[91640-91644]:PrimitiveType[91640-91644]"
    }, {
      "left" : "updateScreenBrightnessBoostLocked",
      "right" : "updateScreenBrightnessBoostLocked",
      "info" : "SimpleName[91645-91678]:SimpleName[91645-91678]"
    }, {
      "left" : "int dirty",
      "right" : "int dirty",
      "info" : "SingleVariableDeclaration[91679-91688]:SingleVariableDeclaration[91679-91688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91690-92716]:Block[91690-92716]"
    }, {
      "left" : "if ((dirty & DIRTY_SCREEN_BRIGHTNESS_BOOST) != 0)",
      "right" : "if ((dirty & DIRTY_SCREEN_BRIGHTNESS_BOOST) != 0)",
      "info" : "IfStatement[91700-92710]:IfStatement[91700-92710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91750-92710]:Block[91750-92710]"
    }, {
      "left" : "if (mScreenBrightnessBoostInProgress)",
      "right" : "if (mScreenBrightnessBoostInProgress)",
      "info" : "IfStatement[91764-92700]:IfStatement[91764-92700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91802-92700]:Block[91802-92700]"
    }, {
      "left" : "final long now = SystemClock.uptimeMillis();",
      "right" : "final long now = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[91820-91864]:VariableDeclarationStatement[91820-91864]"
    }, {
      "left" : "mHandler.removeMessages(MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT);",
      "right" : "mHandler.removeMessages(MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT);",
      "info" : "ExpressionStatement[91881-91942]:ExpressionStatement[91881-91942]"
    }, {
      "left" : "if (mLastScreenBrightnessBoostTime > mLastSleepTime)",
      "right" : "if (mLastScreenBrightnessBoostTime > mLastSleepTime)",
      "info" : "IfStatement[91959-92492]:IfStatement[91959-92492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92012-92492]:Block[92012-92492]"
    }, {
      "left" : "final long boostTimeout = mLastScreenBrightnessBoostTime +\n                            SCREEN_BRIGHTNESS_BOOST_TIMEOUT;",
      "right" : "final long boostTimeout = mLastScreenBrightnessBoostTime +\n                            SCREEN_BRIGHTNESS_BOOST_TIMEOUT;",
      "info" : "VariableDeclarationStatement[92034-92153]:VariableDeclarationStatement[92034-92153]"
    }, {
      "left" : "if (boostTimeout > now)",
      "right" : "if (boostTimeout > now)",
      "info" : "IfStatement[92174-92474]:IfStatement[92174-92474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92198-92474]:Block[92198-92474]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[92224-92298]:VariableDeclarationStatement[92224-92298]"
    }, {
      "left" : "msg.setAsynchronous(true);",
      "right" : "msg.setAsynchronous(true);",
      "info" : "ExpressionStatement[92323-92349]:ExpressionStatement[92323-92349]"
    }, {
      "left" : "mHandler.sendMessageAtTime(msg, boostTimeout);",
      "right" : "mHandler.sendMessageAtTime(msg, boostTimeout);",
      "info" : "ExpressionStatement[92374-92420]:ExpressionStatement[92374-92420]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[92445-92452]:ReturnStatement[92445-92452]"
    }, {
      "left" : "mScreenBrightnessBoostInProgress = false;",
      "right" : "mScreenBrightnessBoostInProgress = false;",
      "info" : "ExpressionStatement[92509-92550]:ExpressionStatement[92509-92550]"
    }, {
      "left" : "userActivityNoUpdateLocked(now,\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "right" : "userActivityNoUpdateLocked(now,\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[92567-92686]:ExpressionStatement[92567-92686]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[92722-92729]:Modifier[92722-92729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[92730-92736]:Modifier[92730-92736]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[92737-92744]:PrimitiveType[92737-92744]"
    }, {
      "left" : "isValidBrightness",
      "right" : "isValidBrightness",
      "info" : "SimpleName[92745-92762]:SimpleName[92745-92762]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[92763-92772]:SingleVariableDeclaration[92763-92772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92774-92824]:Block[92774-92824]"
    }, {
      "left" : "return value >= 0 && value <= 255;",
      "right" : "return value >= 0 && value <= 255;",
      "info" : "ReturnStatement[92784-92818]:ReturnStatement[92784-92818]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[92830-92837]:Modifier[92830-92837]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[92838-92844]:Modifier[92838-92844]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[92845-92852]:PrimitiveType[92845-92852]"
    }, {
      "left" : "isValidAutoBrightnessAdjustment",
      "right" : "isValidAutoBrightnessAdjustment",
      "info" : "SimpleName[92853-92884]:SimpleName[92853-92884]"
    }, {
      "left" : "float value",
      "right" : "float value",
      "info" : "SingleVariableDeclaration[92885-92896]:SingleVariableDeclaration[92885-92896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92898-93003]:Block[92898-93003]"
    }, {
      "left" : "return value >= -1.0f && value <= 1.0f;",
      "right" : "return value >= -1.0f && value <= 1.0f;",
      "info" : "ReturnStatement[92958-92997]:ReturnStatement[92958-92997]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[93009-93016]:Modifier[93009-93016]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[93017-93020]:PrimitiveType[93017-93020]"
    }, {
      "left" : "getDesiredScreenPolicyLocked",
      "right" : "getDesiredScreenPolicyLocked",
      "info" : "SimpleName[93021-93049]:SimpleName[93021-93049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93052-93997]:Block[93052-93997]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_ASLEEP)",
      "right" : "if (mWakefulness == WAKEFULNESS_ASLEEP)",
      "info" : "IfStatement[93062-93164]:IfStatement[93062-93164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93102-93164]:Block[93102-93164]"
    }, {
      "left" : "return DisplayPowerRequest.POLICY_OFF;",
      "right" : "return DisplayPowerRequest.POLICY_OFF;",
      "info" : "ReturnStatement[93116-93154]:ReturnStatement[93116-93154]"
    }, {
      "left" : "if (mWakefulness == WAKEFULNESS_DOZING)",
      "right" : "if (mWakefulness == WAKEFULNESS_DOZING)",
      "info" : "IfStatement[93174-93649]:IfStatement[93174-93649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93214-93649]:Block[93214-93649]"
    }, {
      "left" : "if ((mWakeLockSummary & WAKE_LOCK_DOZE) != 0)",
      "right" : "if ((mWakeLockSummary & WAKE_LOCK_DOZE) != 0)",
      "info" : "IfStatement[93228-93345]:IfStatement[93228-93345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93274-93345]:Block[93274-93345]"
    }, {
      "left" : "return DisplayPowerRequest.POLICY_DOZE;",
      "right" : "return DisplayPowerRequest.POLICY_DOZE;",
      "info" : "ReturnStatement[93292-93331]:ReturnStatement[93292-93331]"
    }, {
      "left" : "if (mDozeAfterScreenOffConfig)",
      "right" : "if (mDozeAfterScreenOffConfig)",
      "info" : "IfStatement[93358-93459]:IfStatement[93358-93459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93389-93459]:Block[93389-93459]"
    }, {
      "left" : "return DisplayPowerRequest.POLICY_OFF;",
      "right" : "return DisplayPowerRequest.POLICY_OFF;",
      "info" : "ReturnStatement[93407-93445]:ReturnStatement[93407-93445]"
    }, {
      "left" : "if ((mWakeLockSummary & WAKE_LOCK_SCREEN_BRIGHT) != 0\n                || (mUserActivitySummary & USER_ACTIVITY_SCREEN_BRIGHT) != 0\n                || !mBootCompleted\n                || mScreenBrightnessBoostInProgress)",
      "right" : "if ((mWakeLockSummary & WAKE_LOCK_SCREEN_BRIGHT) != 0\n                || (mUserActivitySummary & USER_ACTIVITY_SCREEN_BRIGHT) != 0\n                || !mBootCompleted\n                || mScreenBrightnessBoostInProgress)",
      "info" : "IfStatement[93659-93943]:IfStatement[93659-93943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93878-93943]:Block[93878-93943]"
    }, {
      "left" : "return DisplayPowerRequest.POLICY_BRIGHT;",
      "right" : "return DisplayPowerRequest.POLICY_BRIGHT;",
      "info" : "ReturnStatement[93892-93933]:ReturnStatement[93892-93933]"
    }, {
      "left" : "return DisplayPowerRequest.POLICY_DIM;",
      "right" : "return DisplayPowerRequest.POLICY_DIM;",
      "info" : "ReturnStatement[93953-93991]:ReturnStatement[93953-93991]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[94220-94229]:MarkerAnnotation[94220-94229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94238-94244]:Modifier[94238-94244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[94245-94249]:PrimitiveType[94245-94249]"
    }, {
      "left" : "onStateChanged",
      "right" : "onStateChanged",
      "info" : "SimpleName[94250-94264]:SimpleName[94250-94264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94267-94437]:Block[94267-94437]"
    }, {
      "left" : "synchronized (mLock) {\n                mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;\n                updatePowerStateLocked();\n            }",
      "right" : "synchronized (mLock) {\n                mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;\n                updatePowerStateLocked();\n            }",
      "info" : "SynchronizedStatement[94281-94427]:SynchronizedStatement[94281-94427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94302-94427]:Block[94302-94427]"
    }, {
      "left" : "mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;",
      "right" : "mDirty |= DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;",
      "info" : "ExpressionStatement[94320-94371]:ExpressionStatement[94320-94371]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[94388-94413]:ExpressionStatement[94388-94413]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[94447-94456]:MarkerAnnotation[94447-94456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94465-94471]:Modifier[94465-94471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[94472-94476]:PrimitiveType[94472-94476]"
    }, {
      "left" : "onProximityPositive",
      "right" : "onProximityPositive",
      "info" : "SimpleName[94477-94496]:SimpleName[94477-94496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94499-94696]:Block[94499-94696]"
    }, {
      "left" : "synchronized (mLock) {\n                mProximityPositive = true;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                updatePowerStateLocked();\n            }",
      "right" : "synchronized (mLock) {\n                mProximityPositive = true;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                updatePowerStateLocked();\n            }",
      "info" : "SynchronizedStatement[94513-94686]:SynchronizedStatement[94513-94686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94534-94686]:Block[94534-94686]"
    }, {
      "left" : "mProximityPositive = true;",
      "right" : "mProximityPositive = true;",
      "info" : "ExpressionStatement[94552-94578]:ExpressionStatement[94552-94578]"
    }, {
      "left" : "mDirty |= DIRTY_PROXIMITY_POSITIVE;",
      "right" : "mDirty |= DIRTY_PROXIMITY_POSITIVE;",
      "info" : "ExpressionStatement[94595-94630]:ExpressionStatement[94595-94630]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[94647-94672]:ExpressionStatement[94647-94672]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[94706-94715]:MarkerAnnotation[94706-94715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94724-94730]:Modifier[94724-94730]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[94731-94735]:PrimitiveType[94731-94735]"
    }, {
      "left" : "onProximityNegative",
      "right" : "onProximityNegative",
      "info" : "SimpleName[94736-94755]:SimpleName[94736-94755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94758-95115]:Block[94758-95115]"
    }, {
      "left" : "synchronized (mLock) {\n                mProximityPositive = false;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }",
      "right" : "synchronized (mLock) {\n                mProximityPositive = false;\n                mDirty |= DIRTY_PROXIMITY_POSITIVE;\n                userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);\n                updatePowerStateLocked();\n            }",
      "info" : "SynchronizedStatement[94772-95105]:SynchronizedStatement[94772-95105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94793-95105]:Block[94793-95105]"
    }, {
      "left" : "mProximityPositive = false;",
      "right" : "mProximityPositive = false;",
      "info" : "ExpressionStatement[94811-94838]:ExpressionStatement[94811-94838]"
    }, {
      "left" : "mDirty |= DIRTY_PROXIMITY_POSITIVE;",
      "right" : "mDirty |= DIRTY_PROXIMITY_POSITIVE;",
      "info" : "ExpressionStatement[94855-94890]:ExpressionStatement[94855-94890]"
    }, {
      "left" : "userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "right" : "userActivityNoUpdateLocked(SystemClock.uptimeMillis(),\n                        PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);",
      "info" : "ExpressionStatement[94907-95049]:ExpressionStatement[94907-95049]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[95066-95091]:ExpressionStatement[95066-95091]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[95125-95134]:MarkerAnnotation[95125-95134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[95143-95149]:Modifier[95143-95149]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[95150-95154]:PrimitiveType[95150-95154]"
    }, {
      "left" : "onDisplayStateChange",
      "right" : "onDisplayStateChange",
      "info" : "SimpleName[95155-95175]:SimpleName[95155-95175]"
    }, {
      "left" : "int state",
      "right" : "int state",
      "info" : "SingleVariableDeclaration[95176-95185]:SingleVariableDeclaration[95176-95185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95187-96354]:Block[95187-96354]"
    }, {
      "left" : "synchronized (mLock) {\n                if (mDisplayState != state) {\n                    mDisplayState = state;\n                    if (state == Display.STATE_OFF) {\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(false);\n                        }\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(true);\n                        }\n                    } else {\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(false);\n                        }\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(true);\n                        }\n                    }\n                }\n            }",
      "right" : "synchronized (mLock) {\n                if (mDisplayState != state) {\n                    mDisplayState = state;\n                    if (state == Display.STATE_OFF) {\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(false);\n                        }\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(true);\n                        }\n                    } else {\n                        if (!mDecoupleHalAutoSuspendModeFromDisplayConfig) {\n                            setHalAutoSuspendModeLocked(false);\n                        }\n                        if (!mDecoupleHalInteractiveModeFromDisplayConfig) {\n                            setHalInteractiveModeLocked(true);\n                        }\n                    }\n                }\n            }",
      "info" : "SynchronizedStatement[95430-96344]:SynchronizedStatement[95430-96344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95451-96344]:Block[95451-96344]"
    }, {
      "left" : "if (mDisplayState != state)",
      "right" : "if (mDisplayState != state)",
      "info" : "IfStatement[95469-96330]:IfStatement[95469-96330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95497-96330]:Block[95497-96330]"
    }, {
      "left" : "mDisplayState = state;",
      "right" : "mDisplayState = state;",
      "info" : "ExpressionStatement[95519-95541]:ExpressionStatement[95519-95541]"
    }, {
      "left" : "if (state == Display.STATE_OFF)",
      "right" : "if (state == Display.STATE_OFF)",
      "info" : "IfStatement[95562-96312]:IfStatement[95562-96312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95594-95950]:Block[95594-95950]"
    }, {
      "left" : "if (!mDecoupleHalInteractiveModeFromDisplayConfig)",
      "right" : "if (!mDecoupleHalInteractiveModeFromDisplayConfig)",
      "info" : "IfStatement[95620-95762]:IfStatement[95620-95762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95671-95762]:Block[95671-95762]"
    }, {
      "left" : "setHalInteractiveModeLocked(false);",
      "right" : "setHalInteractiveModeLocked(false);",
      "info" : "ExpressionStatement[95701-95736]:ExpressionStatement[95701-95736]"
    }, {
      "left" : "if (!mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "right" : "if (!mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "info" : "IfStatement[95787-95928]:IfStatement[95787-95928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95838-95928]:Block[95838-95928]"
    }, {
      "left" : "setHalAutoSuspendModeLocked(true);",
      "right" : "setHalAutoSuspendModeLocked(true);",
      "info" : "ExpressionStatement[95868-95902]:ExpressionStatement[95868-95902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95956-96312]:Block[95956-96312]"
    }, {
      "left" : "if (!mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "right" : "if (!mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "info" : "IfStatement[95982-96124]:IfStatement[95982-96124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96033-96124]:Block[96033-96124]"
    }, {
      "left" : "setHalAutoSuspendModeLocked(false);",
      "right" : "setHalAutoSuspendModeLocked(false);",
      "info" : "ExpressionStatement[96063-96098]:ExpressionStatement[96063-96098]"
    }, {
      "left" : "if (!mDecoupleHalInteractiveModeFromDisplayConfig)",
      "right" : "if (!mDecoupleHalInteractiveModeFromDisplayConfig)",
      "info" : "IfStatement[96149-96290]:IfStatement[96149-96290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96200-96290]:Block[96200-96290]"
    }, {
      "left" : "setHalInteractiveModeLocked(true);",
      "right" : "setHalInteractiveModeLocked(true);",
      "info" : "ExpressionStatement[96230-96264]:ExpressionStatement[96230-96264]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[96364-96373]:MarkerAnnotation[96364-96373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96382-96388]:Modifier[96382-96388]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[96389-96393]:PrimitiveType[96389-96393]"
    }, {
      "left" : "acquireSuspendBlocker",
      "right" : "acquireSuspendBlocker",
      "info" : "SimpleName[96394-96415]:SimpleName[96394-96415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96418-96475]:Block[96418-96475]"
    }, {
      "left" : "mDisplaySuspendBlocker.acquire();",
      "right" : "mDisplaySuspendBlocker.acquire();",
      "info" : "ExpressionStatement[96432-96465]:ExpressionStatement[96432-96465]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[96485-96494]:MarkerAnnotation[96485-96494]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96503-96509]:Modifier[96503-96509]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[96510-96514]:PrimitiveType[96510-96514]"
    }, {
      "left" : "releaseSuspendBlocker",
      "right" : "releaseSuspendBlocker",
      "info" : "SimpleName[96515-96536]:SimpleName[96515-96536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96539-96596]:Block[96539-96596]"
    }, {
      "left" : "mDisplaySuspendBlocker.release();",
      "right" : "mDisplaySuspendBlocker.release();",
      "info" : "ExpressionStatement[96553-96586]:ExpressionStatement[96553-96586]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[96606-96615]:MarkerAnnotation[96606-96615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96624-96630]:Modifier[96624-96630]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[96631-96637]:SimpleType[96631-96637]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[96638-96646]:SimpleName[96638-96646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96649-96780]:Block[96649-96780]"
    }, {
      "left" : "synchronized (this) {\n                return \"state=\" + Display.stateToString(mDisplayState);\n            }",
      "right" : "synchronized (this) {\n                return \"state=\" + Display.stateToString(mDisplayState);\n            }",
      "info" : "SynchronizedStatement[96663-96770]:SynchronizedStatement[96663-96770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96683-96770]:Block[96683-96770]"
    }, {
      "left" : "return \"state=\" + Display.stateToString(mDisplayState);",
      "right" : "return \"state=\" + Display.stateToString(mDisplayState);",
      "info" : "ReturnStatement[96701-96756]:ReturnStatement[96701-96756]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[96793-96800]:Modifier[96793-96800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[96801-96808]:PrimitiveType[96801-96808]"
    }, {
      "left" : "shouldUseProximitySensorLocked",
      "right" : "shouldUseProximitySensorLocked",
      "info" : "SimpleName[96809-96839]:SimpleName[96809-96839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96842-96922]:Block[96842-96922]"
    }, {
      "left" : "return (mWakeLockSummary & WAKE_LOCK_PROXIMITY_SCREEN_OFF) != 0;",
      "right" : "return (mWakeLockSummary & WAKE_LOCK_PROXIMITY_SCREEN_OFF) != 0;",
      "info" : "ReturnStatement[96852-96916]:ReturnStatement[96852-96916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[97066-97073]:Modifier[97066-97073]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[97074-97078]:PrimitiveType[97074-97078]"
    }, {
      "left" : "updateSuspendBlockerLocked",
      "right" : "updateSuspendBlockerLocked",
      "info" : "SimpleName[97079-97105]:SimpleName[97079-97105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97108-99683]:Block[97108-99683]"
    }, {
      "left" : "final boolean needWakeLockSuspendBlocker = ((mWakeLockSummary & WAKE_LOCK_CPU) != 0);",
      "right" : "final boolean needWakeLockSuspendBlocker = ((mWakeLockSummary & WAKE_LOCK_CPU) != 0);",
      "info" : "VariableDeclarationStatement[97118-97203]:VariableDeclarationStatement[97118-97203]"
    }, {
      "left" : "final boolean needDisplaySuspendBlocker = needDisplaySuspendBlockerLocked();",
      "right" : "final boolean needDisplaySuspendBlocker = needDisplaySuspendBlockerLocked();",
      "info" : "VariableDeclarationStatement[97212-97288]:VariableDeclarationStatement[97212-97288]"
    }, {
      "left" : "final boolean autoSuspend = !needDisplaySuspendBlocker;",
      "right" : "final boolean autoSuspend = !needDisplaySuspendBlocker;",
      "info" : "VariableDeclarationStatement[97297-97352]:VariableDeclarationStatement[97297-97352]"
    }, {
      "left" : "final boolean interactive = mDisplayPowerRequest.isBrightOrDim();",
      "right" : "final boolean interactive = mDisplayPowerRequest.isBrightOrDim();",
      "info" : "VariableDeclarationStatement[97361-97426]:VariableDeclarationStatement[97361-97426]"
    }, {
      "left" : "if (!autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "right" : "if (!autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "info" : "IfStatement[97615-97740]:IfStatement[97615-97740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97681-97740]:Block[97681-97740]"
    }, {
      "left" : "setHalAutoSuspendModeLocked(false);",
      "right" : "setHalAutoSuspendModeLocked(false);",
      "info" : "ExpressionStatement[97695-97730]:ExpressionStatement[97695-97730]"
    }, {
      "left" : "if (needWakeLockSuspendBlocker && !mHoldingWakeLockSuspendBlocker)",
      "right" : "if (needWakeLockSuspendBlocker && !mHoldingWakeLockSuspendBlocker)",
      "info" : "IfStatement[97803-97979]:IfStatement[97803-97979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97870-97979]:Block[97870-97979]"
    }, {
      "left" : "mWakeLockSuspendBlocker.acquire();",
      "right" : "mWakeLockSuspendBlocker.acquire();",
      "info" : "ExpressionStatement[97884-97918]:ExpressionStatement[97884-97918]"
    }, {
      "left" : "mHoldingWakeLockSuspendBlocker = true;",
      "right" : "mHoldingWakeLockSuspendBlocker = true;",
      "info" : "ExpressionStatement[97931-97969]:ExpressionStatement[97931-97969]"
    }, {
      "left" : "if (needDisplaySuspendBlocker && !mHoldingDisplaySuspendBlocker)",
      "right" : "if (needDisplaySuspendBlocker && !mHoldingDisplaySuspendBlocker)",
      "info" : "IfStatement[97988-98160]:IfStatement[97988-98160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98053-98160]:Block[98053-98160]"
    }, {
      "left" : "mDisplaySuspendBlocker.acquire();",
      "right" : "mDisplaySuspendBlocker.acquire();",
      "info" : "ExpressionStatement[98067-98100]:ExpressionStatement[98067-98100]"
    }, {
      "left" : "mHoldingDisplaySuspendBlocker = true;",
      "right" : "mHoldingDisplaySuspendBlocker = true;",
      "info" : "ExpressionStatement[98113-98150]:ExpressionStatement[98113-98150]"
    }, {
      "left" : "if (mDecoupleHalInteractiveModeFromDisplayConfig)",
      "right" : "if (mDecoupleHalInteractiveModeFromDisplayConfig)",
      "info" : "IfStatement[98617-99081]:IfStatement[98617-99081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98667-99081]:Block[98667-99081]"
    }, {
      "left" : "if (interactive || mDisplayReady)",
      "right" : "if (interactive || mDisplayReady)",
      "info" : "IfStatement[98964-99071]:IfStatement[98964-99071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98998-99071]:Block[98998-99071]"
    }, {
      "left" : "setHalInteractiveModeLocked(interactive);",
      "right" : "setHalInteractiveModeLocked(interactive);",
      "info" : "ExpressionStatement[99016-99057]:ExpressionStatement[99016-99057]"
    }, {
      "left" : "if (!needWakeLockSuspendBlocker && mHoldingWakeLockSuspendBlocker)",
      "right" : "if (!needWakeLockSuspendBlocker && mHoldingWakeLockSuspendBlocker)",
      "info" : "IfStatement[99143-99320]:IfStatement[99143-99320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99210-99320]:Block[99210-99320]"
    }, {
      "left" : "mWakeLockSuspendBlocker.release();",
      "right" : "mWakeLockSuspendBlocker.release();",
      "info" : "ExpressionStatement[99224-99258]:ExpressionStatement[99224-99258]"
    }, {
      "left" : "mHoldingWakeLockSuspendBlocker = false;",
      "right" : "mHoldingWakeLockSuspendBlocker = false;",
      "info" : "ExpressionStatement[99271-99310]:ExpressionStatement[99271-99310]"
    }, {
      "left" : "if (!needDisplaySuspendBlocker && mHoldingDisplaySuspendBlocker)",
      "right" : "if (!needDisplaySuspendBlocker && mHoldingDisplaySuspendBlocker)",
      "info" : "IfStatement[99329-99502]:IfStatement[99329-99502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99394-99502]:Block[99394-99502]"
    }, {
      "left" : "mDisplaySuspendBlocker.release();",
      "right" : "mDisplaySuspendBlocker.release();",
      "info" : "ExpressionStatement[99408-99441]:ExpressionStatement[99408-99441]"
    }, {
      "left" : "mHoldingDisplaySuspendBlocker = false;",
      "right" : "mHoldingDisplaySuspendBlocker = false;",
      "info" : "ExpressionStatement[99454-99492]:ExpressionStatement[99454-99492]"
    }, {
      "left" : "if (autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "right" : "if (autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig)",
      "info" : "IfStatement[99554-99677]:IfStatement[99554-99677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99619-99677]:Block[99619-99677]"
    }, {
      "left" : "setHalAutoSuspendModeLocked(true);",
      "right" : "setHalAutoSuspendModeLocked(true);",
      "info" : "ExpressionStatement[99633-99667]:ExpressionStatement[99633-99667]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[99863-99870]:Modifier[99863-99870]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[99871-99878]:PrimitiveType[99871-99878]"
    }, {
      "left" : "needDisplaySuspendBlockerLocked",
      "right" : "needDisplaySuspendBlockerLocked",
      "info" : "SimpleName[99879-99910]:SimpleName[99879-99910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99913-100738]:Block[99913-100738]"
    }, {
      "left" : "if (!mDisplayReady)",
      "right" : "if (!mDisplayReady)",
      "info" : "IfStatement[99923-99979]:IfStatement[99923-99979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99943-99979]:Block[99943-99979]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[99957-99969]:ReturnStatement[99957-99969]"
    }, {
      "left" : "if (mDisplayPowerRequest.isBrightOrDim())",
      "right" : "if (mDisplayPowerRequest.isBrightOrDim())",
      "info" : "IfStatement[99988-100561]:IfStatement[99988-100561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100030-100561]:Block[100030-100561]"
    }, {
      "left" : "if (!mDisplayPowerRequest.useProximitySensor || !mProximityPositive\n                    || !mSuspendWhenScreenOffDueToProximityConfig)",
      "right" : "if (!mDisplayPowerRequest.useProximitySensor || !mProximityPositive\n                    || !mSuspendWhenScreenOffDueToProximityConfig)",
      "info" : "IfStatement[100372-100551]:IfStatement[100372-100551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100507-100551]:Block[100507-100551]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[100525-100537]:ReturnStatement[100525-100537]"
    }, {
      "left" : "if (mScreenBrightnessBoostInProgress)",
      "right" : "if (mScreenBrightnessBoostInProgress)",
      "info" : "IfStatement[100570-100644]:IfStatement[100570-100644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100608-100644]:Block[100608-100644]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[100622-100634]:ReturnStatement[100622-100634]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[100719-100732]:ReturnStatement[100719-100732]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[100744-100751]:Modifier[100744-100751]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[100752-100756]:PrimitiveType[100752-100756]"
    }, {
      "left" : "setHalAutoSuspendModeLocked",
      "right" : "setHalAutoSuspendModeLocked",
      "info" : "SimpleName[100757-100784]:SimpleName[100757-100784]"
    }, {
      "left" : "boolean enable",
      "right" : "boolean enable",
      "info" : "SingleVariableDeclaration[100785-100799]:SingleVariableDeclaration[100785-100799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100801-101280]:Block[100801-101280]"
    }, {
      "left" : "if (enable != mHalAutoSuspendModeEnabled)",
      "right" : "if (enable != mHalAutoSuspendModeEnabled)",
      "info" : "IfStatement[100811-101274]:IfStatement[100811-101274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100853-101274]:Block[100853-101274]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[100867-100968]:IfStatement[100867-100968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100878-100968]:Block[100878-100968]"
    }, {
      "left" : "Slog.d(TAG, \"Setting HAL auto-suspend mode to \" + enable);",
      "right" : "Slog.d(TAG, \"Setting HAL auto-suspend mode to \" + enable);",
      "info" : "ExpressionStatement[100896-100954]:ExpressionStatement[100896-100954]"
    }, {
      "left" : "mHalAutoSuspendModeEnabled = enable;",
      "right" : "mHalAutoSuspendModeEnabled = enable;",
      "info" : "ExpressionStatement[100981-101017]:ExpressionStatement[100981-101017]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"setHalAutoSuspend(\" + enable + \")\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"setHalAutoSuspend(\" + enable + \")\");",
      "info" : "ExpressionStatement[101030-101107]:ExpressionStatement[101030-101107]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[101120-101264]:TryStatement[101120-101264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101124-101185]:Block[101124-101185]"
    }, {
      "left" : "nativeSetAutoSuspend(enable);",
      "right" : "nativeSetAutoSuspend(enable);",
      "info" : "ExpressionStatement[101142-101171]:ExpressionStatement[101142-101171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101194-101264]:Block[101194-101264]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[101212-101250]:ExpressionStatement[101212-101250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[101286-101293]:Modifier[101286-101293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[101294-101298]:PrimitiveType[101294-101298]"
    }, {
      "left" : "setHalInteractiveModeLocked",
      "right" : "setHalInteractiveModeLocked",
      "info" : "SimpleName[101299-101326]:SimpleName[101299-101326]"
    }, {
      "left" : "boolean enable",
      "right" : "boolean enable",
      "info" : "SingleVariableDeclaration[101327-101341]:SingleVariableDeclaration[101327-101341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101343-101821]:Block[101343-101821]"
    }, {
      "left" : "if (enable != mHalInteractiveModeEnabled)",
      "right" : "if (enable != mHalInteractiveModeEnabled)",
      "info" : "IfStatement[101353-101815]:IfStatement[101353-101815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101395-101815]:Block[101395-101815]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[101409-101509]:IfStatement[101409-101509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101420-101509]:Block[101420-101509]"
    }, {
      "left" : "Slog.d(TAG, \"Setting HAL interactive mode to \" + enable);",
      "right" : "Slog.d(TAG, \"Setting HAL interactive mode to \" + enable);",
      "info" : "ExpressionStatement[101438-101495]:ExpressionStatement[101438-101495]"
    }, {
      "left" : "mHalInteractiveModeEnabled = enable;",
      "right" : "mHalInteractiveModeEnabled = enable;",
      "info" : "ExpressionStatement[101522-101558]:ExpressionStatement[101522-101558]"
    }, {
      "left" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"setHalInteractive(\" + enable + \")\");",
      "right" : "Trace.traceBegin(Trace.TRACE_TAG_POWER, \"setHalInteractive(\" + enable + \")\");",
      "info" : "ExpressionStatement[101571-101648]:ExpressionStatement[101571-101648]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[101661-101805]:TryStatement[101661-101805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101665-101726]:Block[101665-101726]"
    }, {
      "left" : "nativeSetInteractive(enable);",
      "right" : "nativeSetInteractive(enable);",
      "info" : "ExpressionStatement[101683-101712]:ExpressionStatement[101683-101712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101735-101805]:Block[101735-101805]"
    }, {
      "left" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "right" : "Trace.traceEnd(Trace.TRACE_TAG_POWER);",
      "info" : "ExpressionStatement[101753-101791]:ExpressionStatement[101753-101791]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[101827-101834]:Modifier[101827-101834]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[101835-101842]:PrimitiveType[101835-101842]"
    }, {
      "left" : "isInteractiveInternal",
      "right" : "isInteractiveInternal",
      "info" : "SimpleName[101843-101864]:SimpleName[101843-101864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101867-101984]:Block[101867-101984]"
    }, {
      "left" : "synchronized (mLock) {\n            return PowerManagerInternal.isInteractive(mWakefulness);\n        }",
      "right" : "synchronized (mLock) {\n            return PowerManagerInternal.isInteractive(mWakefulness);\n        }",
      "info" : "SynchronizedStatement[101877-101978]:SynchronizedStatement[101877-101978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101898-101978]:Block[101898-101978]"
    }, {
      "left" : "return PowerManagerInternal.isInteractive(mWakefulness);",
      "right" : "return PowerManagerInternal.isInteractive(mWakefulness);",
      "info" : "ReturnStatement[101912-101968]:ReturnStatement[101912-101968]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[101990-101997]:Modifier[101990-101997]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[101998-102005]:PrimitiveType[101998-102005]"
    }, {
      "left" : "isLowPowerModeInternal",
      "right" : "isLowPowerModeInternal",
      "info" : "SimpleName[102006-102028]:SimpleName[102006-102028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102031-102120]:Block[102031-102120]"
    }, {
      "left" : "synchronized (mLock) {\n            return mLowPowerModeEnabled;\n        }",
      "right" : "synchronized (mLock) {\n            return mLowPowerModeEnabled;\n        }",
      "info" : "SynchronizedStatement[102041-102114]:SynchronizedStatement[102041-102114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102062-102114]:Block[102062-102114]"
    }, {
      "left" : "return mLowPowerModeEnabled;",
      "right" : "return mLowPowerModeEnabled;",
      "info" : "ReturnStatement[102076-102104]:ReturnStatement[102076-102104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[102126-102133]:Modifier[102126-102133]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[102134-102141]:PrimitiveType[102134-102141]"
    }, {
      "left" : "setLowPowerModeInternal",
      "right" : "setLowPowerModeInternal",
      "info" : "SimpleName[102142-102165]:SimpleName[102142-102165]"
    }, {
      "left" : "boolean mode",
      "right" : "boolean mode",
      "info" : "SingleVariableDeclaration[102166-102178]:SingleVariableDeclaration[102166-102178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102180-103280]:Block[102180-103280]"
    }, {
      "left" : "synchronized (mLock) {\n            if (DEBUG) Slog.d(TAG, \"setLowPowerModeInternal \" + mode + \" mIsPowered=\" + mIsPowered);\n            if (mIsPowered) {\n                return false;\n            }\n            Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, mode ? 1 : 0);\n            mLowPowerModeSetting = mode;\n\n            if (mAutoLowPowerModeConfigured && mBatteryLevelLow) {\n                if (mode && mAutoLowPowerModeSnoozing) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"setLowPowerModeInternal: clearing low power mode snooze\");\n                    }\n                    mAutoLowPowerModeSnoozing = false;\n                } else if (!mode && !mAutoLowPowerModeSnoozing) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"setLowPowerModeInternal: snoozing low power mode\");\n                    }\n                    mAutoLowPowerModeSnoozing = true;\n                }\n            }\n\n            updateLowPowerModeLocked();\n            return true;\n        }",
      "right" : "synchronized (mLock) {\n            if (DEBUG) Slog.d(TAG, \"setLowPowerModeInternal \" + mode + \" mIsPowered=\" + mIsPowered);\n            if (mIsPowered) {\n                return false;\n            }\n            Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, mode ? 1 : 0);\n            mLowPowerModeSetting = mode;\n\n            if (mAutoLowPowerModeConfigured && mBatteryLevelLow) {\n                if (mode && mAutoLowPowerModeSnoozing) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"setLowPowerModeInternal: clearing low power mode snooze\");\n                    }\n                    mAutoLowPowerModeSnoozing = false;\n                } else if (!mode && !mAutoLowPowerModeSnoozing) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"setLowPowerModeInternal: snoozing low power mode\");\n                    }\n                    mAutoLowPowerModeSnoozing = true;\n                }\n            }\n\n            updateLowPowerModeLocked();\n            return true;\n        }",
      "info" : "SynchronizedStatement[102190-103274]:SynchronizedStatement[102190-103274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102211-103274]:Block[102211-103274]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[102225-102313]:IfStatement[102225-102313]"
    }, {
      "left" : "Slog.d(TAG, \"setLowPowerModeInternal \" + mode + \" mIsPowered=\" + mIsPowered);",
      "right" : "Slog.d(TAG, \"setLowPowerModeInternal \" + mode + \" mIsPowered=\" + mIsPowered);",
      "info" : "ExpressionStatement[102236-102313]:ExpressionStatement[102236-102313]"
    }, {
      "left" : "if (mIsPowered)",
      "right" : "if (mIsPowered)",
      "info" : "IfStatement[102326-102387]:IfStatement[102326-102387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102342-102387]:Block[102342-102387]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102360-102373]:ReturnStatement[102360-102373]"
    }, {
      "left" : "Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, mode ? 1 : 0);",
      "right" : "Settings.Global.putInt(mContext.getContentResolver(),\n                    Settings.Global.LOW_POWER_MODE, mode ? 1 : 0);",
      "info" : "ExpressionStatement[102400-102520]:ExpressionStatement[102400-102520]"
    }, {
      "left" : "mLowPowerModeSetting = mode;",
      "right" : "mLowPowerModeSetting = mode;",
      "info" : "ExpressionStatement[102533-102561]:ExpressionStatement[102533-102561]"
    }, {
      "left" : "if (mAutoLowPowerModeConfigured && mBatteryLevelLow)",
      "right" : "if (mAutoLowPowerModeConfigured && mBatteryLevelLow)",
      "info" : "IfStatement[102575-103198]:IfStatement[102575-103198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102628-103198]:Block[102628-103198]"
    }, {
      "left" : "if (mode && mAutoLowPowerModeSnoozing)",
      "right" : "if (mode && mAutoLowPowerModeSnoozing)",
      "info" : "IfStatement[102646-103184]:IfStatement[102646-103184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102685-102915]:Block[102685-102915]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[102707-102842]:IfStatement[102707-102842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102723-102842]:Block[102723-102842]"
    }, {
      "left" : "Slog.d(TAG, \"setLowPowerModeInternal: clearing low power mode snooze\");",
      "right" : "Slog.d(TAG, \"setLowPowerModeInternal: clearing low power mode snooze\");",
      "info" : "ExpressionStatement[102749-102820]:ExpressionStatement[102749-102820]"
    }, {
      "left" : "mAutoLowPowerModeSnoozing = false;",
      "right" : "mAutoLowPowerModeSnoozing = false;",
      "info" : "ExpressionStatement[102863-102897]:ExpressionStatement[102863-102897]"
    }, {
      "left" : "if (!mode && !mAutoLowPowerModeSnoozing)",
      "right" : "if (!mode && !mAutoLowPowerModeSnoozing)",
      "info" : "IfStatement[102921-103184]:IfStatement[102921-103184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102962-103184]:Block[102962-103184]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[102984-103112]:IfStatement[102984-103112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103000-103112]:Block[103000-103112]"
    }, {
      "left" : "Slog.d(TAG, \"setLowPowerModeInternal: snoozing low power mode\");",
      "right" : "Slog.d(TAG, \"setLowPowerModeInternal: snoozing low power mode\");",
      "info" : "ExpressionStatement[103026-103090]:ExpressionStatement[103026-103090]"
    }, {
      "left" : "mAutoLowPowerModeSnoozing = true;",
      "right" : "mAutoLowPowerModeSnoozing = true;",
      "info" : "ExpressionStatement[103133-103166]:ExpressionStatement[103133-103166]"
    }, {
      "left" : "updateLowPowerModeLocked();",
      "right" : "updateLowPowerModeLocked();",
      "info" : "ExpressionStatement[103212-103239]:ExpressionStatement[103212-103239]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[103252-103264]:ReturnStatement[103252-103264]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[103286-103293]:Modifier[103286-103293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[103294-103298]:PrimitiveType[103294-103298]"
    }, {
      "left" : "handleBatteryStateChangedLocked",
      "right" : "handleBatteryStateChangedLocked",
      "info" : "SimpleName[103299-103330]:SimpleName[103299-103330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103333-103413]:Block[103333-103413]"
    }, {
      "left" : "mDirty |= DIRTY_BATTERY_STATE;",
      "right" : "mDirty |= DIRTY_BATTERY_STATE;",
      "info" : "ExpressionStatement[103343-103373]:ExpressionStatement[103343-103373]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[103382-103407]:ExpressionStatement[103382-103407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[103419-103426]:Modifier[103419-103426]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[103427-103431]:PrimitiveType[103427-103431]"
    }, {
      "left" : "shutdownOrRebootInternal",
      "right" : "shutdownOrRebootInternal",
      "info" : "SimpleName[103432-103456]:SimpleName[103432-103456]"
    }, {
      "left" : "final boolean shutdown",
      "right" : "final boolean shutdown",
      "info" : "SingleVariableDeclaration[103457-103479]:SingleVariableDeclaration[103457-103479]"
    }, {
      "left" : "final boolean confirm",
      "right" : "final boolean confirm",
      "info" : "SingleVariableDeclaration[103481-103502]:SingleVariableDeclaration[103481-103502]"
    }, {
      "left" : "final String reason",
      "right" : "final String reason",
      "info" : "SingleVariableDeclaration[103516-103535]:SingleVariableDeclaration[103516-103535]"
    }, {
      "left" : "boolean wait",
      "right" : "boolean wait",
      "info" : "SingleVariableDeclaration[103537-103549]:SingleVariableDeclaration[103537-103549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103551-104692]:Block[103551-104692]"
    }, {
      "left" : "if (mHandler == null || !mSystemReady)",
      "right" : "if (mHandler == null || !mSystemReady)",
      "info" : "IfStatement[103561-103700]:IfStatement[103561-103700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103600-103700]:Block[103600-103700]"
    }, {
      "left" : "throw new IllegalStateException(\"Too early to call shutdown() or reboot()\");",
      "right" : "throw new IllegalStateException(\"Too early to call shutdown() or reboot()\");",
      "info" : "ThrowStatement[103614-103690]:ThrowStatement[103614-103690]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (this) {\n                    if (shutdown) {\n                        ShutdownThread.shutdown(mContext, confirm);\n                    } else {\n                        ShutdownThread.reboot(mContext, reason, confirm);\n                    }\n                }\n            }\n        };",
      "right" : "Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (this) {\n                    if (shutdown) {\n                        ShutdownThread.shutdown(mContext, confirm);\n                    } else {\n                        ShutdownThread.reboot(mContext, reason, confirm);\n                    }\n                }\n            }\n        };",
      "info" : "VariableDeclarationStatement[103710-104110]:VariableDeclarationStatement[103710-104110]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[103759-103768]:MarkerAnnotation[103759-103768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[103781-103787]:Modifier[103781-103787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[103788-103792]:PrimitiveType[103788-103792]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[103793-103796]:SimpleName[103793-103796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103799-104099]:Block[103799-104099]"
    }, {
      "left" : "synchronized (this) {\n                    if (shutdown) {\n                        ShutdownThread.shutdown(mContext, confirm);\n                    } else {\n                        ShutdownThread.reboot(mContext, reason, confirm);\n                    }\n                }",
      "right" : "synchronized (this) {\n                    if (shutdown) {\n                        ShutdownThread.shutdown(mContext, confirm);\n                    } else {\n                        ShutdownThread.reboot(mContext, reason, confirm);\n                    }\n                }",
      "info" : "SynchronizedStatement[103817-104085]:SynchronizedStatement[103817-104085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103837-104085]:Block[103837-104085]"
    }, {
      "left" : "if (shutdown)",
      "right" : "if (shutdown)",
      "info" : "IfStatement[103859-104067]:IfStatement[103859-104067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103873-103964]:Block[103873-103964]"
    }, {
      "left" : "ShutdownThread.shutdown(mContext, confirm);",
      "right" : "ShutdownThread.shutdown(mContext, confirm);",
      "info" : "ExpressionStatement[103899-103942]:ExpressionStatement[103899-103942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103970-104067]:Block[103970-104067]"
    }, {
      "left" : "ShutdownThread.reboot(mContext, reason, confirm);",
      "right" : "ShutdownThread.reboot(mContext, reason, confirm);",
      "info" : "ExpressionStatement[103996-104045]:ExpressionStatement[103996-104045]"
    }, {
      "left" : "Message msg = Message.obtain(mHandler, runnable);",
      "right" : "Message msg = Message.obtain(mHandler, runnable);",
      "info" : "VariableDeclarationStatement[104197-104246]:VariableDeclarationStatement[104197-104246]"
    }, {
      "left" : "msg.setAsynchronous(true);",
      "right" : "msg.setAsynchronous(true);",
      "info" : "ExpressionStatement[104255-104281]:ExpressionStatement[104255-104281]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[104290-104316]:ExpressionStatement[104290-104316]"
    }, {
      "left" : "if (wait)",
      "right" : "if (wait)",
      "info" : "IfStatement[104420-104686]:IfStatement[104420-104686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104430-104686]:Block[104430-104686]"
    }, {
      "left" : "synchronized (runnable) {\n                while (true) {\n                    try {\n                        runnable.wait();\n                    } catch (InterruptedException e) {\n                    }\n                }\n            }",
      "right" : "synchronized (runnable) {\n                while (true) {\n                    try {\n                        runnable.wait();\n                    } catch (InterruptedException e) {\n                    }\n                }\n            }",
      "info" : "SynchronizedStatement[104444-104676]:SynchronizedStatement[104444-104676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104468-104676]:Block[104468-104676]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[104486-104662]:WhileStatement[104486-104662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104499-104662]:Block[104499-104662]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[104521-104644]:TryStatement[104521-104644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104525-104589]:Block[104525-104589]"
    }, {
      "left" : "runnable.wait();",
      "right" : "runnable.wait();",
      "info" : "ExpressionStatement[104551-104567]:ExpressionStatement[104551-104567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104621-104644]:Block[104621-104644]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[104698-104705]:Modifier[104698-104705]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[104706-104710]:PrimitiveType[104706-104710]"
    }, {
      "left" : "crashInternal",
      "right" : "crashInternal",
      "info" : "SimpleName[104711-104724]:SimpleName[104711-104724]"
    }, {
      "left" : "final String message",
      "right" : "final String message",
      "info" : "SingleVariableDeclaration[104725-104745]:SingleVariableDeclaration[104725-104745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104747-105091]:Block[104747-105091]"
    }, {
      "left" : "Thread t = new Thread(\"PowerManagerService.crash()\") {\n            @Override\n            public void run() {\n                throw new RuntimeException(message);\n            }\n        };",
      "right" : "Thread t = new Thread(\"PowerManagerService.crash()\") {\n            @Override\n            public void run() {\n                throw new RuntimeException(message);\n            }\n        };",
      "info" : "VariableDeclarationStatement[104757-104943]:VariableDeclarationStatement[104757-104943]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[104824-104833]:MarkerAnnotation[104824-104833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[104846-104852]:Modifier[104846-104852]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[104853-104857]:PrimitiveType[104853-104857]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[104858-104861]:SimpleName[104858-104861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104864-104932]:Block[104864-104932]"
    }, {
      "left" : "throw new RuntimeException(message);",
      "right" : "throw new RuntimeException(message);",
      "info" : "ThrowStatement[104882-104918]:ThrowStatement[104882-104918]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[104952-105085]:TryStatement[104952-105085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104956-105012]:Block[104956-105012]"
    }, {
      "left" : "t.start();",
      "right" : "t.start();",
      "info" : "ExpressionStatement[104970-104980]:ExpressionStatement[104970-104980]"
    }, {
      "left" : "t.join();",
      "right" : "t.join();",
      "info" : "ExpressionStatement[104993-105002]:ExpressionStatement[104993-105002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105044-105085]:Block[105044-105085]"
    }, {
      "left" : "Slog.wtf(TAG, e);",
      "right" : "Slog.wtf(TAG, e);",
      "info" : "ExpressionStatement[105058-105075]:ExpressionStatement[105058-105075]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105097-105104]:Modifier[105097-105104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105105-105109]:PrimitiveType[105105-105109]"
    }, {
      "left" : "setStayOnSettingInternal",
      "right" : "setStayOnSettingInternal",
      "info" : "SimpleName[105110-105134]:SimpleName[105110-105134]"
    }, {
      "left" : "int val",
      "right" : "int val",
      "info" : "SingleVariableDeclaration[105135-105142]:SingleVariableDeclaration[105135-105142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105144-105277]:Block[105144-105277]"
    }, {
      "left" : "Settings.Global.putInt(mContext.getContentResolver(),\n                Settings.Global.STAY_ON_WHILE_PLUGGED_IN, val);",
      "right" : "Settings.Global.putInt(mContext.getContentResolver(),\n                Settings.Global.STAY_ON_WHILE_PLUGGED_IN, val);",
      "info" : "ExpressionStatement[105154-105271]:ExpressionStatement[105154-105271]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105283-105290]:Modifier[105283-105290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105291-105295]:PrimitiveType[105291-105295]"
    }, {
      "left" : "setMaximumScreenOffTimeoutFromDeviceAdminInternal",
      "right" : "setMaximumScreenOffTimeoutFromDeviceAdminInternal",
      "info" : "SimpleName[105296-105345]:SimpleName[105296-105345]"
    }, {
      "left" : "int timeMs",
      "right" : "int timeMs",
      "info" : "SingleVariableDeclaration[105346-105356]:SingleVariableDeclaration[105346-105356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105358-105544]:Block[105358-105544]"
    }, {
      "left" : "synchronized (mLock) {\n            mMaximumScreenOffTimeoutFromDeviceAdmin = timeMs;\n            mDirty |= DIRTY_SETTINGS;\n            updatePowerStateLocked();\n        }",
      "right" : "synchronized (mLock) {\n            mMaximumScreenOffTimeoutFromDeviceAdmin = timeMs;\n            mDirty |= DIRTY_SETTINGS;\n            updatePowerStateLocked();\n        }",
      "info" : "SynchronizedStatement[105368-105538]:SynchronizedStatement[105368-105538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105389-105538]:Block[105389-105538]"
    }, {
      "left" : "mMaximumScreenOffTimeoutFromDeviceAdmin = timeMs;",
      "right" : "mMaximumScreenOffTimeoutFromDeviceAdmin = timeMs;",
      "info" : "ExpressionStatement[105403-105452]:ExpressionStatement[105403-105452]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[105465-105490]:ExpressionStatement[105465-105490]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[105503-105528]:ExpressionStatement[105503-105528]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105550-105557]:Modifier[105550-105557]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[105558-105565]:PrimitiveType[105558-105565]"
    }, {
      "left" : "isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked",
      "right" : "isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked",
      "info" : "SimpleName[105566-105620]:SimpleName[105566-105620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105623-105770]:Block[105623-105770]"
    }, {
      "left" : "return mMaximumScreenOffTimeoutFromDeviceAdmin >= 0\n                && mMaximumScreenOffTimeoutFromDeviceAdmin < Integer.MAX_VALUE;",
      "right" : "return mMaximumScreenOffTimeoutFromDeviceAdmin >= 0\n                && mMaximumScreenOffTimeoutFromDeviceAdmin < Integer.MAX_VALUE;",
      "info" : "ReturnStatement[105633-105764]:ReturnStatement[105633-105764]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105776-105783]:Modifier[105776-105783]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105784-105788]:PrimitiveType[105784-105788]"
    }, {
      "left" : "setAttentionLightInternal",
      "right" : "setAttentionLightInternal",
      "info" : "SimpleName[105789-105814]:SimpleName[105789-105814]"
    }, {
      "left" : "boolean on",
      "right" : "boolean on",
      "info" : "SingleVariableDeclaration[105815-105825]:SingleVariableDeclaration[105815-105825]"
    }, {
      "left" : "int color",
      "right" : "int color",
      "info" : "SingleVariableDeclaration[105827-105836]:SingleVariableDeclaration[105827-105836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105838-106137]:Block[105838-106137]"
    }, {
      "left" : "Light light;",
      "right" : "Light light;",
      "info" : "VariableDeclarationStatement[105848-105860]:VariableDeclarationStatement[105848-105860]"
    }, {
      "left" : "synchronized (mLock) {\n            if (!mSystemReady) {\n                return;\n            }\n            light = mAttentionLight;\n        }",
      "right" : "synchronized (mLock) {\n            if (!mSystemReady) {\n                return;\n            }\n            light = mAttentionLight;\n        }",
      "info" : "SynchronizedStatement[105869-106009]:SynchronizedStatement[105869-106009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105890-106009]:Block[105890-106009]"
    }, {
      "left" : "if (!mSystemReady)",
      "right" : "if (!mSystemReady)",
      "info" : "IfStatement[105904-105962]:IfStatement[105904-105962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105923-105962]:Block[105923-105962]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[105941-105948]:ReturnStatement[105941-105948]"
    }, {
      "left" : "light = mAttentionLight;",
      "right" : "light = mAttentionLight;",
      "info" : "ExpressionStatement[105975-105999]:ExpressionStatement[105975-105999]"
    }, {
      "left" : "light.setFlashing(color, Light.LIGHT_FLASH_HARDWARE, (on ? 3 : 0), 0);",
      "right" : "light.setFlashing(color, Light.LIGHT_FLASH_HARDWARE, (on ? 3 : 0), 0);",
      "info" : "ExpressionStatement[106061-106131]:ExpressionStatement[106061-106131]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[106143-106150]:Modifier[106143-106150]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[106151-106155]:PrimitiveType[106151-106155]"
    }, {
      "left" : "boostScreenBrightnessInternal",
      "right" : "boostScreenBrightnessInternal",
      "info" : "SimpleName[106156-106185]:SimpleName[106156-106185]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[106186-106200]:SingleVariableDeclaration[106186-106200]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[106202-106209]:SingleVariableDeclaration[106202-106209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106211-106830]:Block[106211-106830]"
    }, {
      "left" : "synchronized (mLock) {\n            if (!mSystemReady || mWakefulness == WAKEFULNESS_ASLEEP\n                    || eventTime < mLastScreenBrightnessBoostTime) {\n                return;\n            }\n\n            Slog.i(TAG, \"Brightness boost activated (uid \" + uid +\")...\");\n            mLastScreenBrightnessBoostTime = eventTime;\n            mScreenBrightnessBoostInProgress = true;\n            mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;\n\n            userActivityNoUpdateLocked(eventTime,\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);\n            updatePowerStateLocked();\n        }",
      "right" : "synchronized (mLock) {\n            if (!mSystemReady || mWakefulness == WAKEFULNESS_ASLEEP\n                    || eventTime < mLastScreenBrightnessBoostTime) {\n                return;\n            }\n\n            Slog.i(TAG, \"Brightness boost activated (uid \" + uid +\")...\");\n            mLastScreenBrightnessBoostTime = eventTime;\n            mScreenBrightnessBoostInProgress = true;\n            mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;\n\n            userActivityNoUpdateLocked(eventTime,\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);\n            updatePowerStateLocked();\n        }",
      "info" : "SynchronizedStatement[106221-106824]:SynchronizedStatement[106221-106824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106242-106824]:Block[106242-106824]"
    }, {
      "left" : "if (!mSystemReady || mWakefulness == WAKEFULNESS_ASLEEP\n                    || eventTime < mLastScreenBrightnessBoostTime)",
      "right" : "if (!mSystemReady || mWakefulness == WAKEFULNESS_ASLEEP\n                    || eventTime < mLastScreenBrightnessBoostTime)",
      "info" : "IfStatement[106256-106418]:IfStatement[106256-106418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106379-106418]:Block[106379-106418]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[106397-106404]:ReturnStatement[106397-106404]"
    }, {
      "left" : "Slog.i(TAG, \"Brightness boost activated (uid \" + uid +\")...\");",
      "right" : "Slog.i(TAG, \"Brightness boost activated (uid \" + uid +\")...\");",
      "info" : "ExpressionStatement[106432-106494]:ExpressionStatement[106432-106494]"
    }, {
      "left" : "mLastScreenBrightnessBoostTime = eventTime;",
      "right" : "mLastScreenBrightnessBoostTime = eventTime;",
      "info" : "ExpressionStatement[106507-106550]:ExpressionStatement[106507-106550]"
    }, {
      "left" : "mScreenBrightnessBoostInProgress = true;",
      "right" : "mScreenBrightnessBoostInProgress = true;",
      "info" : "ExpressionStatement[106563-106603]:ExpressionStatement[106563-106603]"
    }, {
      "left" : "mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;",
      "right" : "mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;",
      "info" : "ExpressionStatement[106616-106656]:ExpressionStatement[106616-106656]"
    }, {
      "left" : "userActivityNoUpdateLocked(eventTime,\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);",
      "right" : "userActivityNoUpdateLocked(eventTime,\n                    PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, uid);",
      "info" : "ExpressionStatement[106670-106776]:ExpressionStatement[106670-106776]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[106789-106814]:ExpressionStatement[106789-106814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107048-107055]:Modifier[107048-107055]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[107056-107060]:PrimitiveType[107056-107060]"
    }, {
      "left" : "handleScreenBrightnessBoostTimeout",
      "right" : "handleScreenBrightnessBoostTimeout",
      "info" : "SimpleName[107061-107095]:SimpleName[107061-107095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107098-107375]:Block[107098-107375]"
    }, {
      "left" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleScreenBrightnessBoostTimeout\");\n            }\n\n            mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;\n            updatePowerStateLocked();\n        }",
      "right" : "synchronized (mLock) {\n            if (DEBUG_SPEW) {\n                Slog.d(TAG, \"handleScreenBrightnessBoostTimeout\");\n            }\n\n            mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;\n            updatePowerStateLocked();\n        }",
      "info" : "SynchronizedStatement[107134-107369]:SynchronizedStatement[107134-107369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107155-107369]:Block[107155-107369]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[107169-107267]:IfStatement[107169-107267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107185-107267]:Block[107185-107267]"
    }, {
      "left" : "Slog.d(TAG, \"handleScreenBrightnessBoostTimeout\");",
      "right" : "Slog.d(TAG, \"handleScreenBrightnessBoostTimeout\");",
      "info" : "ExpressionStatement[107203-107253]:ExpressionStatement[107203-107253]"
    }, {
      "left" : "mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;",
      "right" : "mDirty |= DIRTY_SCREEN_BRIGHTNESS_BOOST;",
      "info" : "ExpressionStatement[107281-107321]:ExpressionStatement[107281-107321]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[107334-107359]:ExpressionStatement[107334-107359]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107381-107388]:Modifier[107381-107388]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[107389-107393]:PrimitiveType[107389-107393]"
    }, {
      "left" : "setScreenBrightnessOverrideFromWindowManagerInternal",
      "right" : "setScreenBrightnessOverrideFromWindowManagerInternal",
      "info" : "SimpleName[107394-107446]:SimpleName[107394-107446]"
    }, {
      "left" : "int brightness",
      "right" : "int brightness",
      "info" : "SingleVariableDeclaration[107447-107461]:SingleVariableDeclaration[107447-107461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107463-107758]:Block[107463-107758]"
    }, {
      "left" : "synchronized (mLock) {\n            if (mScreenBrightnessOverrideFromWindowManager != brightness) {\n                mScreenBrightnessOverrideFromWindowManager = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (mScreenBrightnessOverrideFromWindowManager != brightness) {\n                mScreenBrightnessOverrideFromWindowManager = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[107473-107752]:SynchronizedStatement[107473-107752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107494-107752]:Block[107494-107752]"
    }, {
      "left" : "if (mScreenBrightnessOverrideFromWindowManager != brightness)",
      "right" : "if (mScreenBrightnessOverrideFromWindowManager != brightness)",
      "info" : "IfStatement[107508-107742]:IfStatement[107508-107742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107570-107742]:Block[107570-107742]"
    }, {
      "left" : "mScreenBrightnessOverrideFromWindowManager = brightness;",
      "right" : "mScreenBrightnessOverrideFromWindowManager = brightness;",
      "info" : "ExpressionStatement[107588-107644]:ExpressionStatement[107588-107644]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[107661-107686]:ExpressionStatement[107661-107686]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[107703-107728]:ExpressionStatement[107703-107728]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107764-107771]:Modifier[107764-107771]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[107772-107776]:PrimitiveType[107772-107776]"
    }, {
      "left" : "setUserActivityTimeoutOverrideFromWindowManagerInternal",
      "right" : "setUserActivityTimeoutOverrideFromWindowManagerInternal",
      "info" : "SimpleName[107777-107832]:SimpleName[107777-107832]"
    }, {
      "left" : "long timeoutMillis",
      "right" : "long timeoutMillis",
      "info" : "SingleVariableDeclaration[107833-107851]:SingleVariableDeclaration[107833-107851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107853-108160]:Block[107853-108160]"
    }, {
      "left" : "synchronized (mLock) {\n            if (mUserActivityTimeoutOverrideFromWindowManager != timeoutMillis) {\n                mUserActivityTimeoutOverrideFromWindowManager = timeoutMillis;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (mUserActivityTimeoutOverrideFromWindowManager != timeoutMillis) {\n                mUserActivityTimeoutOverrideFromWindowManager = timeoutMillis;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[107863-108154]:SynchronizedStatement[107863-108154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107884-108154]:Block[107884-108154]"
    }, {
      "left" : "if (mUserActivityTimeoutOverrideFromWindowManager != timeoutMillis)",
      "right" : "if (mUserActivityTimeoutOverrideFromWindowManager != timeoutMillis)",
      "info" : "IfStatement[107898-108144]:IfStatement[107898-108144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107966-108144]:Block[107966-108144]"
    }, {
      "left" : "mUserActivityTimeoutOverrideFromWindowManager = timeoutMillis;",
      "right" : "mUserActivityTimeoutOverrideFromWindowManager = timeoutMillis;",
      "info" : "ExpressionStatement[107984-108046]:ExpressionStatement[107984-108046]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[108063-108088]:ExpressionStatement[108063-108088]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[108105-108130]:ExpressionStatement[108105-108130]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[108166-108173]:Modifier[108166-108173]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[108174-108178]:PrimitiveType[108174-108178]"
    }, {
      "left" : "setTemporaryScreenBrightnessSettingOverrideInternal",
      "right" : "setTemporaryScreenBrightnessSettingOverrideInternal",
      "info" : "SimpleName[108179-108230]:SimpleName[108179-108230]"
    }, {
      "left" : "int brightness",
      "right" : "int brightness",
      "info" : "SingleVariableDeclaration[108231-108245]:SingleVariableDeclaration[108231-108245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108247-108540]:Block[108247-108540]"
    }, {
      "left" : "synchronized (mLock) {\n            if (mTemporaryScreenBrightnessSettingOverride != brightness) {\n                mTemporaryScreenBrightnessSettingOverride = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (mTemporaryScreenBrightnessSettingOverride != brightness) {\n                mTemporaryScreenBrightnessSettingOverride = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[108257-108534]:SynchronizedStatement[108257-108534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108278-108534]:Block[108278-108534]"
    }, {
      "left" : "if (mTemporaryScreenBrightnessSettingOverride != brightness)",
      "right" : "if (mTemporaryScreenBrightnessSettingOverride != brightness)",
      "info" : "IfStatement[108292-108524]:IfStatement[108292-108524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108353-108524]:Block[108353-108524]"
    }, {
      "left" : "mTemporaryScreenBrightnessSettingOverride = brightness;",
      "right" : "mTemporaryScreenBrightnessSettingOverride = brightness;",
      "info" : "ExpressionStatement[108371-108426]:ExpressionStatement[108371-108426]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[108443-108468]:ExpressionStatement[108443-108468]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[108485-108510]:ExpressionStatement[108485-108510]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[108546-108553]:Modifier[108546-108553]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[108554-108558]:PrimitiveType[108554-108558]"
    }, {
      "left" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal",
      "right" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal",
      "info" : "SimpleName[108559-108624]:SimpleName[108559-108624]"
    }, {
      "left" : "float adj",
      "right" : "float adj",
      "info" : "SingleVariableDeclaration[108625-108634]:SingleVariableDeclaration[108625-108634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108636-109069]:Block[108636-109069]"
    }, {
      "left" : "synchronized (mLock) {\n            // Note: This condition handles NaN because NaN is not equal to any other\n            // value, including itself.\n            if (mTemporaryScreenAutoBrightnessAdjustmentSettingOverride != adj) {\n                mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = adj;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            // Note: This condition handles NaN because NaN is not equal to any other\n            // value, including itself.\n            if (mTemporaryScreenAutoBrightnessAdjustmentSettingOverride != adj) {\n                mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = adj;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[108646-109063]:SynchronizedStatement[108646-109063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108667-109063]:Block[108667-109063]"
    }, {
      "left" : "if (mTemporaryScreenAutoBrightnessAdjustmentSettingOverride != adj)",
      "right" : "if (mTemporaryScreenAutoBrightnessAdjustmentSettingOverride != adj)",
      "info" : "IfStatement[108807-109053]:IfStatement[108807-109053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108875-109053]:Block[108875-109053]"
    }, {
      "left" : "mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = adj;",
      "right" : "mTemporaryScreenAutoBrightnessAdjustmentSettingOverride = adj;",
      "info" : "ExpressionStatement[108893-108955]:ExpressionStatement[108893-108955]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[108972-108997]:ExpressionStatement[108972-108997]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[109014-109039]:ExpressionStatement[109014-109039]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[109075-109082]:Modifier[109075-109082]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[109083-109087]:PrimitiveType[109083-109087]"
    }, {
      "left" : "setDozeOverrideFromDreamManagerInternal",
      "right" : "setDozeOverrideFromDreamManagerInternal",
      "info" : "SimpleName[109088-109127]:SimpleName[109088-109127]"
    }, {
      "left" : "int screenState",
      "right" : "int screenState",
      "info" : "SingleVariableDeclaration[109141-109156]:SingleVariableDeclaration[109141-109156]"
    }, {
      "left" : "int screenBrightness",
      "right" : "int screenBrightness",
      "info" : "SingleVariableDeclaration[109158-109178]:SingleVariableDeclaration[109158-109178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109180-109644]:Block[109180-109644]"
    }, {
      "left" : "synchronized (mLock) {\n            if (mDozeScreenStateOverrideFromDreamManager != screenState\n                    || mDozeScreenBrightnessOverrideFromDreamManager != screenBrightness) {\n                mDozeScreenStateOverrideFromDreamManager = screenState;\n                mDozeScreenBrightnessOverrideFromDreamManager = screenBrightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (mDozeScreenStateOverrideFromDreamManager != screenState\n                    || mDozeScreenBrightnessOverrideFromDreamManager != screenBrightness) {\n                mDozeScreenStateOverrideFromDreamManager = screenState;\n                mDozeScreenBrightnessOverrideFromDreamManager = screenBrightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[109190-109638]:SynchronizedStatement[109190-109638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109211-109638]:Block[109211-109638]"
    }, {
      "left" : "if (mDozeScreenStateOverrideFromDreamManager != screenState\n                    || mDozeScreenBrightnessOverrideFromDreamManager != screenBrightness)",
      "right" : "if (mDozeScreenStateOverrideFromDreamManager != screenState\n                    || mDozeScreenBrightnessOverrideFromDreamManager != screenBrightness)",
      "info" : "IfStatement[109225-109628]:IfStatement[109225-109628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109375-109628]:Block[109375-109628]"
    }, {
      "left" : "mDozeScreenStateOverrideFromDreamManager = screenState;",
      "right" : "mDozeScreenStateOverrideFromDreamManager = screenState;",
      "info" : "ExpressionStatement[109393-109448]:ExpressionStatement[109393-109448]"
    }, {
      "left" : "mDozeScreenBrightnessOverrideFromDreamManager = screenBrightness;",
      "right" : "mDozeScreenBrightnessOverrideFromDreamManager = screenBrightness;",
      "info" : "ExpressionStatement[109465-109530]:ExpressionStatement[109465-109530]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[109547-109572]:ExpressionStatement[109547-109572]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[109589-109614]:ExpressionStatement[109589-109614]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[109650-109657]:Modifier[109650-109657]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[109658-109662]:PrimitiveType[109658-109662]"
    }, {
      "left" : "powerHintInternal",
      "right" : "powerHintInternal",
      "info" : "SimpleName[109663-109680]:SimpleName[109663-109680]"
    }, {
      "left" : "int hintId",
      "right" : "int hintId",
      "info" : "SingleVariableDeclaration[109681-109691]:SingleVariableDeclaration[109681-109691]"
    }, {
      "left" : "int data",
      "right" : "int data",
      "info" : "SingleVariableDeclaration[109693-109701]:SingleVariableDeclaration[109693-109701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109703-109753]:Block[109703-109753]"
    }, {
      "left" : "nativeSendPowerHint(hintId, data);",
      "right" : "nativeSendPowerHint(hintId, data);",
      "info" : "ExpressionStatement[109713-109747]:ExpressionStatement[109713-109747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[109938-109944]:Modifier[109938-109944]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[109945-109951]:Modifier[109945-109951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[109952-109956]:PrimitiveType[109952-109956]"
    }, {
      "left" : "lowLevelShutdown",
      "right" : "lowLevelShutdown",
      "info" : "SimpleName[109957-109973]:SimpleName[109957-109973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109976-110041]:Block[109976-110041]"
    }, {
      "left" : "SystemProperties.set(\"sys.powerctl\", \"shutdown\");",
      "right" : "SystemProperties.set(\"sys.powerctl\", \"shutdown\");",
      "info" : "ExpressionStatement[109986-110035]:ExpressionStatement[109986-110035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[110383-110389]:Modifier[110383-110389]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[110390-110396]:Modifier[110390-110396]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[110397-110401]:PrimitiveType[110397-110401]"
    }, {
      "left" : "lowLevelReboot",
      "right" : "lowLevelReboot",
      "info" : "SimpleName[110402-110416]:SimpleName[110402-110416]"
    }, {
      "left" : "String reason",
      "right" : "String reason",
      "info" : "SingleVariableDeclaration[110417-110430]:SingleVariableDeclaration[110417-110430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110432-111433]:Block[110432-111433]"
    }, {
      "left" : "if (reason == null)",
      "right" : "if (reason == null)",
      "info" : "IfStatement[110442-110498]:IfStatement[110442-110498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110462-110498]:Block[110462-110498]"
    }, {
      "left" : "reason = \"\";",
      "right" : "reason = \"\";",
      "info" : "ExpressionStatement[110476-110488]:ExpressionStatement[110476-110488]"
    }, {
      "left" : "long duration;",
      "right" : "long duration;",
      "info" : "VariableDeclarationStatement[110507-110521]:VariableDeclarationStatement[110507-110521]"
    }, {
      "left" : "if (reason.equals(PowerManager.REBOOT_RECOVERY))",
      "right" : "if (reason.equals(PowerManager.REBOOT_RECOVERY))",
      "info" : "IfStatement[110530-111276]:IfStatement[110530-111276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110579-111154]:Block[110579-111154]"
    }, {
      "left" : "SystemProperties.set(\"ctl.start\", \"pre-recovery\");",
      "right" : "SystemProperties.set(\"ctl.start\", \"pre-recovery\");",
      "info" : "ExpressionStatement[111058-111108]:ExpressionStatement[111058-111108]"
    }, {
      "left" : "duration = 300 * 1000L;",
      "right" : "duration = 300 * 1000L;",
      "info" : "ExpressionStatement[111121-111144]:ExpressionStatement[111121-111144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111160-111276]:Block[111160-111276]"
    }, {
      "left" : "SystemProperties.set(\"sys.powerctl\", \"reboot,\" + reason);",
      "right" : "SystemProperties.set(\"sys.powerctl\", \"reboot,\" + reason);",
      "info" : "ExpressionStatement[111174-111231]:ExpressionStatement[111174-111231]"
    }, {
      "left" : "duration = 20 * 1000L;",
      "right" : "duration = 20 * 1000L;",
      "info" : "ExpressionStatement[111244-111266]:ExpressionStatement[111244-111266]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[111285-111427]:TryStatement[111285-111427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111289-111336]:Block[111289-111336]"
    }, {
      "left" : "Thread.sleep(duration);",
      "right" : "Thread.sleep(duration);",
      "info" : "ExpressionStatement[111303-111326]:ExpressionStatement[111303-111326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111368-111427]:Block[111368-111427]"
    }, {
      "left" : "Thread.currentThread().interrupt();",
      "right" : "Thread.currentThread().interrupt();",
      "info" : "ExpressionStatement[111382-111417]:ExpressionStatement[111382-111417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[111439-111448]:MarkerAnnotation[111439-111448]"
    }, {
      "left" : "// Watchdog.Monitor implementation",
      "right" : "// Watchdog.Monitor implementation",
      "info" : "LineComment[111449-111483]:LineComment[111449-111483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[111488-111494]:Modifier[111488-111494]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[111495-111499]:PrimitiveType[111495-111499]"
    }, {
      "left" : "monitor",
      "right" : "monitor",
      "info" : "SimpleName[111500-111507]:SimpleName[111500-111507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111510-111633]:Block[111510-111633]"
    }, {
      "left" : "synchronized (mLock) {\n        }",
      "right" : "synchronized (mLock) {\n        }",
      "info" : "SynchronizedStatement[111595-111627]:SynchronizedStatement[111595-111627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111616-111627]:Block[111616-111627]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[111639-111646]:Modifier[111639-111646]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[111647-111651]:PrimitiveType[111647-111651]"
    }, {
      "left" : "dumpInternal",
      "right" : "dumpInternal",
      "info" : "SimpleName[111652-111664]:SimpleName[111652-111664]"
    }, {
      "left" : "PrintWriter pw",
      "right" : "PrintWriter pw",
      "info" : "SingleVariableDeclaration[111665-111679]:SingleVariableDeclaration[111665-111679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111681-120157]:Block[111681-120157]"
    }, {
      "left" : "pw.println(\"POWER MANAGER (dumpsys power)\\n\");",
      "right" : "pw.println(\"POWER MANAGER (dumpsys power)\\n\");",
      "info" : "ExpressionStatement[111691-111737]:ExpressionStatement[111691-111737]"
    }, {
      "left" : "final WirelessChargerDetector wcd;",
      "right" : "final WirelessChargerDetector wcd;",
      "info" : "VariableDeclarationStatement[111747-111781]:VariableDeclarationStatement[111747-111781]"
    }, {
      "left" : "synchronized (mLock) {\n            pw.println(\"Power Manager State:\");\n            pw.println(\"  mDirty=0x\" + Integer.toHexString(mDirty));\n            pw.println(\"  mWakefulness=\" + PowerManagerInternal.wakefulnessToString(mWakefulness));\n            pw.println(\"  mWakefulnessChanging=\" + mWakefulnessChanging);\n            pw.println(\"  mIsPowered=\" + mIsPowered);\n            pw.println(\"  mPlugType=\" + mPlugType);\n            pw.println(\"  mBatteryLevel=\" + mBatteryLevel);\n            pw.println(\"  mBatteryLevelWhenDreamStarted=\" + mBatteryLevelWhenDreamStarted);\n            pw.println(\"  mDockState=\" + mDockState);\n            pw.println(\"  mStayOn=\" + mStayOn);\n            pw.println(\"  mProximityPositive=\" + mProximityPositive);\n            pw.println(\"  mBootCompleted=\" + mBootCompleted);\n            pw.println(\"  mSystemReady=\" + mSystemReady);\n            pw.println(\"  mHalAutoSuspendModeEnabled=\" + mHalAutoSuspendModeEnabled);\n            pw.println(\"  mHalInteractiveModeEnabled=\" + mHalInteractiveModeEnabled);\n            pw.println(\"  mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));\n            pw.println(\"  mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary));\n            pw.println(\"  mRequestWaitForNegativeProximity=\" + mRequestWaitForNegativeProximity);\n            pw.println(\"  mSandmanScheduled=\" + mSandmanScheduled);\n            pw.println(\"  mSandmanSummoned=\" + mSandmanSummoned);\n            pw.println(\"  mLowPowerModeEnabled=\" + mLowPowerModeEnabled);\n            pw.println(\"  mBatteryLevelLow=\" + mBatteryLevelLow);\n            pw.println(\"  mLastWakeTime=\" + TimeUtils.formatUptime(mLastWakeTime));\n            pw.println(\"  mLastSleepTime=\" + TimeUtils.formatUptime(mLastSleepTime));\n            pw.println(\"  mLastUserActivityTime=\" + TimeUtils.formatUptime(mLastUserActivityTime));\n            pw.println(\"  mLastUserActivityTimeNoChangeLights=\"\n                    + TimeUtils.formatUptime(mLastUserActivityTimeNoChangeLights));\n            pw.println(\"  mLastInteractivePowerHintTime=\"\n                    + TimeUtils.formatUptime(mLastInteractivePowerHintTime));\n            pw.println(\"  mLastScreenBrightnessBoostTime=\"\n                    + TimeUtils.formatUptime(mLastScreenBrightnessBoostTime));\n            pw.println(\"  mScreenBrightnessBoostInProgress=\"\n                    + mScreenBrightnessBoostInProgress);\n            pw.println(\"  mDisplayReady=\" + mDisplayReady);\n            pw.println(\"  mHoldingWakeLockSuspendBlocker=\" + mHoldingWakeLockSuspendBlocker);\n            pw.println(\"  mHoldingDisplaySuspendBlocker=\" + mHoldingDisplaySuspendBlocker);\n\n            pw.println();\n            pw.println(\"Settings and Configuration:\");\n            pw.println(\"  mDecoupleHalAutoSuspendModeFromDisplayConfig=\"\n                    + mDecoupleHalAutoSuspendModeFromDisplayConfig);\n            pw.println(\"  mDecoupleHalInteractiveModeFromDisplayConfig=\"\n                    + mDecoupleHalInteractiveModeFromDisplayConfig);\n            pw.println(\"  mWakeUpWhenPluggedOrUnpluggedConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedConfig);\n            pw.println(\"  mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig);\n            pw.println(\"  mTheaterModeEnabled=\"\n                    + mTheaterModeEnabled);\n            pw.println(\"  mSuspendWhenScreenOffDueToProximityConfig=\"\n                    + mSuspendWhenScreenOffDueToProximityConfig);\n            pw.println(\"  mDreamsSupportedConfig=\" + mDreamsSupportedConfig);\n            pw.println(\"  mDreamsEnabledByDefaultConfig=\" + mDreamsEnabledByDefaultConfig);\n            pw.println(\"  mDreamsActivatedOnSleepByDefaultConfig=\"\n                    + mDreamsActivatedOnSleepByDefaultConfig);\n            pw.println(\"  mDreamsActivatedOnDockByDefaultConfig=\"\n                    + mDreamsActivatedOnDockByDefaultConfig);\n            pw.println(\"  mDreamsEnabledOnBatteryConfig=\"\n                    + mDreamsEnabledOnBatteryConfig);\n            pw.println(\"  mDreamsBatteryLevelMinimumWhenPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenPoweredConfig);\n            pw.println(\"  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenNotPoweredConfig);\n            pw.println(\"  mDreamsBatteryLevelDrainCutoffConfig=\"\n                    + mDreamsBatteryLevelDrainCutoffConfig);\n            pw.println(\"  mDreamsEnabledSetting=\" + mDreamsEnabledSetting);\n            pw.println(\"  mDreamsActivateOnSleepSetting=\" + mDreamsActivateOnSleepSetting);\n            pw.println(\"  mDreamsActivateOnDockSetting=\" + mDreamsActivateOnDockSetting);\n            pw.println(\"  mDozeAfterScreenOffConfig=\" + mDozeAfterScreenOffConfig);\n            pw.println(\"  mLowPowerModeSetting=\" + mLowPowerModeSetting);\n            pw.println(\"  mAutoLowPowerModeConfigured=\" + mAutoLowPowerModeConfigured);\n            pw.println(\"  mAutoLowPowerModeSnoozing=\" + mAutoLowPowerModeSnoozing);\n            pw.println(\"  mMinimumScreenOffTimeoutConfig=\" + mMinimumScreenOffTimeoutConfig);\n            pw.println(\"  mMaximumScreenDimDurationConfig=\" + mMaximumScreenDimDurationConfig);\n            pw.println(\"  mMaximumScreenDimRatioConfig=\" + mMaximumScreenDimRatioConfig);\n            pw.println(\"  mScreenOffTimeoutSetting=\" + mScreenOffTimeoutSetting);\n            pw.println(\"  mSleepTimeoutSetting=\" + mSleepTimeoutSetting);\n            pw.println(\"  mMaximumScreenOffTimeoutFromDeviceAdmin=\"\n                    + mMaximumScreenOffTimeoutFromDeviceAdmin + \" (enforced=\"\n                    + isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked() + \")\");\n            pw.println(\"  mStayOnWhilePluggedInSetting=\" + mStayOnWhilePluggedInSetting);\n            pw.println(\"  mScreenBrightnessSetting=\" + mScreenBrightnessSetting);\n            pw.println(\"  mScreenAutoBrightnessAdjustmentSetting=\"\n                    + mScreenAutoBrightnessAdjustmentSetting);\n            pw.println(\"  mScreenBrightnessModeSetting=\" + mScreenBrightnessModeSetting);\n            pw.println(\"  mScreenBrightnessOverrideFromWindowManager=\"\n                    + mScreenBrightnessOverrideFromWindowManager);\n            pw.println(\"  mUserActivityTimeoutOverrideFromWindowManager=\"\n                    + mUserActivityTimeoutOverrideFromWindowManager);\n            pw.println(\"  mTemporaryScreenBrightnessSettingOverride=\"\n                    + mTemporaryScreenBrightnessSettingOverride);\n            pw.println(\"  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=\"\n                    + mTemporaryScreenAutoBrightnessAdjustmentSettingOverride);\n            pw.println(\"  mDozeScreenStateOverrideFromDreamManager=\"\n                    + mDozeScreenStateOverrideFromDreamManager);\n            pw.println(\"  mDozeScreenBrightnessOverrideFromDreamManager=\"\n                    + mDozeScreenBrightnessOverrideFromDreamManager);\n            pw.println(\"  mScreenBrightnessSettingMinimum=\" + mScreenBrightnessSettingMinimum);\n            pw.println(\"  mScreenBrightnessSettingMaximum=\" + mScreenBrightnessSettingMaximum);\n            pw.println(\"  mScreenBrightnessSettingDefault=\" + mScreenBrightnessSettingDefault);\n\n            final int sleepTimeout = getSleepTimeoutLocked();\n            final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);\n            final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);\n            pw.println();\n            pw.println(\"Sleep timeout: \" + sleepTimeout + \" ms\");\n            pw.println(\"Screen off timeout: \" + screenOffTimeout + \" ms\");\n            pw.println(\"Screen dim duration: \" + screenDimDuration + \" ms\");\n\n            pw.println();\n            pw.println(\"Wake Locks: size=\" + mWakeLocks.size());\n            for (WakeLock wl : mWakeLocks) {\n                pw.println(\"  \" + wl);\n            }\n\n            pw.println();\n            pw.println(\"Suspend Blockers: size=\" + mSuspendBlockers.size());\n            for (SuspendBlocker sb : mSuspendBlockers) {\n                pw.println(\"  \" + sb);\n            }\n\n            pw.println();\n            pw.println(\"Display Power: \" + mDisplayPowerCallbacks);\n\n            wcd = mWirelessChargerDetector;\n        }",
      "right" : "synchronized (mLock) {\n            pw.println(\"Power Manager State:\");\n            pw.println(\"  mDirty=0x\" + Integer.toHexString(mDirty));\n            pw.println(\"  mWakefulness=\" + PowerManagerInternal.wakefulnessToString(mWakefulness));\n            pw.println(\"  mWakefulnessChanging=\" + mWakefulnessChanging);\n            pw.println(\"  mIsPowered=\" + mIsPowered);\n            pw.println(\"  mPlugType=\" + mPlugType);\n            pw.println(\"  mBatteryLevel=\" + mBatteryLevel);\n            pw.println(\"  mBatteryLevelWhenDreamStarted=\" + mBatteryLevelWhenDreamStarted);\n            pw.println(\"  mDockState=\" + mDockState);\n            pw.println(\"  mStayOn=\" + mStayOn);\n            pw.println(\"  mProximityPositive=\" + mProximityPositive);\n            pw.println(\"  mBootCompleted=\" + mBootCompleted);\n            pw.println(\"  mSystemReady=\" + mSystemReady);\n            pw.println(\"  mHalAutoSuspendModeEnabled=\" + mHalAutoSuspendModeEnabled);\n            pw.println(\"  mHalInteractiveModeEnabled=\" + mHalInteractiveModeEnabled);\n            pw.println(\"  mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));\n            pw.println(\"  mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary));\n            pw.println(\"  mRequestWaitForNegativeProximity=\" + mRequestWaitForNegativeProximity);\n            pw.println(\"  mSandmanScheduled=\" + mSandmanScheduled);\n            pw.println(\"  mSandmanSummoned=\" + mSandmanSummoned);\n            pw.println(\"  mLowPowerModeEnabled=\" + mLowPowerModeEnabled);\n            pw.println(\"  mBatteryLevelLow=\" + mBatteryLevelLow);\n            pw.println(\"  mLastWakeTime=\" + TimeUtils.formatUptime(mLastWakeTime));\n            pw.println(\"  mLastSleepTime=\" + TimeUtils.formatUptime(mLastSleepTime));\n            pw.println(\"  mLastUserActivityTime=\" + TimeUtils.formatUptime(mLastUserActivityTime));\n            pw.println(\"  mLastUserActivityTimeNoChangeLights=\"\n                    + TimeUtils.formatUptime(mLastUserActivityTimeNoChangeLights));\n            pw.println(\"  mLastInteractivePowerHintTime=\"\n                    + TimeUtils.formatUptime(mLastInteractivePowerHintTime));\n            pw.println(\"  mLastScreenBrightnessBoostTime=\"\n                    + TimeUtils.formatUptime(mLastScreenBrightnessBoostTime));\n            pw.println(\"  mScreenBrightnessBoostInProgress=\"\n                    + mScreenBrightnessBoostInProgress);\n            pw.println(\"  mDisplayReady=\" + mDisplayReady);\n            pw.println(\"  mHoldingWakeLockSuspendBlocker=\" + mHoldingWakeLockSuspendBlocker);\n            pw.println(\"  mHoldingDisplaySuspendBlocker=\" + mHoldingDisplaySuspendBlocker);\n\n            pw.println();\n            pw.println(\"Settings and Configuration:\");\n            pw.println(\"  mDecoupleHalAutoSuspendModeFromDisplayConfig=\"\n                    + mDecoupleHalAutoSuspendModeFromDisplayConfig);\n            pw.println(\"  mDecoupleHalInteractiveModeFromDisplayConfig=\"\n                    + mDecoupleHalInteractiveModeFromDisplayConfig);\n            pw.println(\"  mWakeUpWhenPluggedOrUnpluggedConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedConfig);\n            pw.println(\"  mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig);\n            pw.println(\"  mTheaterModeEnabled=\"\n                    + mTheaterModeEnabled);\n            pw.println(\"  mSuspendWhenScreenOffDueToProximityConfig=\"\n                    + mSuspendWhenScreenOffDueToProximityConfig);\n            pw.println(\"  mDreamsSupportedConfig=\" + mDreamsSupportedConfig);\n            pw.println(\"  mDreamsEnabledByDefaultConfig=\" + mDreamsEnabledByDefaultConfig);\n            pw.println(\"  mDreamsActivatedOnSleepByDefaultConfig=\"\n                    + mDreamsActivatedOnSleepByDefaultConfig);\n            pw.println(\"  mDreamsActivatedOnDockByDefaultConfig=\"\n                    + mDreamsActivatedOnDockByDefaultConfig);\n            pw.println(\"  mDreamsEnabledOnBatteryConfig=\"\n                    + mDreamsEnabledOnBatteryConfig);\n            pw.println(\"  mDreamsBatteryLevelMinimumWhenPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenPoweredConfig);\n            pw.println(\"  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenNotPoweredConfig);\n            pw.println(\"  mDreamsBatteryLevelDrainCutoffConfig=\"\n                    + mDreamsBatteryLevelDrainCutoffConfig);\n            pw.println(\"  mDreamsEnabledSetting=\" + mDreamsEnabledSetting);\n            pw.println(\"  mDreamsActivateOnSleepSetting=\" + mDreamsActivateOnSleepSetting);\n            pw.println(\"  mDreamsActivateOnDockSetting=\" + mDreamsActivateOnDockSetting);\n            pw.println(\"  mDozeAfterScreenOffConfig=\" + mDozeAfterScreenOffConfig);\n            pw.println(\"  mLowPowerModeSetting=\" + mLowPowerModeSetting);\n            pw.println(\"  mAutoLowPowerModeConfigured=\" + mAutoLowPowerModeConfigured);\n            pw.println(\"  mAutoLowPowerModeSnoozing=\" + mAutoLowPowerModeSnoozing);\n            pw.println(\"  mMinimumScreenOffTimeoutConfig=\" + mMinimumScreenOffTimeoutConfig);\n            pw.println(\"  mMaximumScreenDimDurationConfig=\" + mMaximumScreenDimDurationConfig);\n            pw.println(\"  mMaximumScreenDimRatioConfig=\" + mMaximumScreenDimRatioConfig);\n            pw.println(\"  mScreenOffTimeoutSetting=\" + mScreenOffTimeoutSetting);\n            pw.println(\"  mSleepTimeoutSetting=\" + mSleepTimeoutSetting);\n            pw.println(\"  mMaximumScreenOffTimeoutFromDeviceAdmin=\"\n                    + mMaximumScreenOffTimeoutFromDeviceAdmin + \" (enforced=\"\n                    + isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked() + \")\");\n            pw.println(\"  mStayOnWhilePluggedInSetting=\" + mStayOnWhilePluggedInSetting);\n            pw.println(\"  mScreenBrightnessSetting=\" + mScreenBrightnessSetting);\n            pw.println(\"  mScreenAutoBrightnessAdjustmentSetting=\"\n                    + mScreenAutoBrightnessAdjustmentSetting);\n            pw.println(\"  mScreenBrightnessModeSetting=\" + mScreenBrightnessModeSetting);\n            pw.println(\"  mScreenBrightnessOverrideFromWindowManager=\"\n                    + mScreenBrightnessOverrideFromWindowManager);\n            pw.println(\"  mUserActivityTimeoutOverrideFromWindowManager=\"\n                    + mUserActivityTimeoutOverrideFromWindowManager);\n            pw.println(\"  mTemporaryScreenBrightnessSettingOverride=\"\n                    + mTemporaryScreenBrightnessSettingOverride);\n            pw.println(\"  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=\"\n                    + mTemporaryScreenAutoBrightnessAdjustmentSettingOverride);\n            pw.println(\"  mDozeScreenStateOverrideFromDreamManager=\"\n                    + mDozeScreenStateOverrideFromDreamManager);\n            pw.println(\"  mDozeScreenBrightnessOverrideFromDreamManager=\"\n                    + mDozeScreenBrightnessOverrideFromDreamManager);\n            pw.println(\"  mScreenBrightnessSettingMinimum=\" + mScreenBrightnessSettingMinimum);\n            pw.println(\"  mScreenBrightnessSettingMaximum=\" + mScreenBrightnessSettingMaximum);\n            pw.println(\"  mScreenBrightnessSettingDefault=\" + mScreenBrightnessSettingDefault);\n\n            final int sleepTimeout = getSleepTimeoutLocked();\n            final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);\n            final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);\n            pw.println();\n            pw.println(\"Sleep timeout: \" + sleepTimeout + \" ms\");\n            pw.println(\"Screen off timeout: \" + screenOffTimeout + \" ms\");\n            pw.println(\"Screen dim duration: \" + screenDimDuration + \" ms\");\n\n            pw.println();\n            pw.println(\"Wake Locks: size=\" + mWakeLocks.size());\n            for (WakeLock wl : mWakeLocks) {\n                pw.println(\"  \" + wl);\n            }\n\n            pw.println();\n            pw.println(\"Suspend Blockers: size=\" + mSuspendBlockers.size());\n            for (SuspendBlocker sb : mSuspendBlockers) {\n                pw.println(\"  \" + sb);\n            }\n\n            pw.println();\n            pw.println(\"Display Power: \" + mDisplayPowerCallbacks);\n\n            wcd = mWirelessChargerDetector;\n        }",
      "info" : "SynchronizedStatement[111790-120087]:SynchronizedStatement[111790-120087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111811-120087]:Block[111811-120087]"
    }, {
      "left" : "pw.println(\"Power Manager State:\");",
      "right" : "pw.println(\"Power Manager State:\");",
      "info" : "ExpressionStatement[111825-111860]:ExpressionStatement[111825-111860]"
    }, {
      "left" : "pw.println(\"  mDirty=0x\" + Integer.toHexString(mDirty));",
      "right" : "pw.println(\"  mDirty=0x\" + Integer.toHexString(mDirty));",
      "info" : "ExpressionStatement[111873-111929]:ExpressionStatement[111873-111929]"
    }, {
      "left" : "pw.println(\"  mWakefulness=\" + PowerManagerInternal.wakefulnessToString(mWakefulness));",
      "right" : "pw.println(\"  mWakefulness=\" + PowerManagerInternal.wakefulnessToString(mWakefulness));",
      "info" : "ExpressionStatement[111942-112029]:ExpressionStatement[111942-112029]"
    }, {
      "left" : "pw.println(\"  mWakefulnessChanging=\" + mWakefulnessChanging);",
      "right" : "pw.println(\"  mWakefulnessChanging=\" + mWakefulnessChanging);",
      "info" : "ExpressionStatement[112042-112103]:ExpressionStatement[112042-112103]"
    }, {
      "left" : "pw.println(\"  mIsPowered=\" + mIsPowered);",
      "right" : "pw.println(\"  mIsPowered=\" + mIsPowered);",
      "info" : "ExpressionStatement[112116-112157]:ExpressionStatement[112116-112157]"
    }, {
      "left" : "pw.println(\"  mPlugType=\" + mPlugType);",
      "right" : "pw.println(\"  mPlugType=\" + mPlugType);",
      "info" : "ExpressionStatement[112170-112209]:ExpressionStatement[112170-112209]"
    }, {
      "left" : "pw.println(\"  mBatteryLevel=\" + mBatteryLevel);",
      "right" : "pw.println(\"  mBatteryLevel=\" + mBatteryLevel);",
      "info" : "ExpressionStatement[112222-112269]:ExpressionStatement[112222-112269]"
    }, {
      "left" : "pw.println(\"  mBatteryLevelWhenDreamStarted=\" + mBatteryLevelWhenDreamStarted);",
      "right" : "pw.println(\"  mBatteryLevelWhenDreamStarted=\" + mBatteryLevelWhenDreamStarted);",
      "info" : "ExpressionStatement[112282-112361]:ExpressionStatement[112282-112361]"
    }, {
      "left" : "pw.println(\"  mDockState=\" + mDockState);",
      "right" : "pw.println(\"  mDockState=\" + mDockState);",
      "info" : "ExpressionStatement[112374-112415]:ExpressionStatement[112374-112415]"
    }, {
      "left" : "pw.println(\"  mStayOn=\" + mStayOn);",
      "right" : "pw.println(\"  mStayOn=\" + mStayOn);",
      "info" : "ExpressionStatement[112428-112463]:ExpressionStatement[112428-112463]"
    }, {
      "left" : "pw.println(\"  mProximityPositive=\" + mProximityPositive);",
      "right" : "pw.println(\"  mProximityPositive=\" + mProximityPositive);",
      "info" : "ExpressionStatement[112476-112533]:ExpressionStatement[112476-112533]"
    }, {
      "left" : "pw.println(\"  mBootCompleted=\" + mBootCompleted);",
      "right" : "pw.println(\"  mBootCompleted=\" + mBootCompleted);",
      "info" : "ExpressionStatement[112546-112595]:ExpressionStatement[112546-112595]"
    }, {
      "left" : "pw.println(\"  mSystemReady=\" + mSystemReady);",
      "right" : "pw.println(\"  mSystemReady=\" + mSystemReady);",
      "info" : "ExpressionStatement[112608-112653]:ExpressionStatement[112608-112653]"
    }, {
      "left" : "pw.println(\"  mHalAutoSuspendModeEnabled=\" + mHalAutoSuspendModeEnabled);",
      "right" : "pw.println(\"  mHalAutoSuspendModeEnabled=\" + mHalAutoSuspendModeEnabled);",
      "info" : "ExpressionStatement[112666-112739]:ExpressionStatement[112666-112739]"
    }, {
      "left" : "pw.println(\"  mHalInteractiveModeEnabled=\" + mHalInteractiveModeEnabled);",
      "right" : "pw.println(\"  mHalInteractiveModeEnabled=\" + mHalInteractiveModeEnabled);",
      "info" : "ExpressionStatement[112752-112825]:ExpressionStatement[112752-112825]"
    }, {
      "left" : "pw.println(\"  mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));",
      "right" : "pw.println(\"  mWakeLockSummary=0x\" + Integer.toHexString(mWakeLockSummary));",
      "info" : "ExpressionStatement[112838-112914]:ExpressionStatement[112838-112914]"
    }, {
      "left" : "pw.println(\"  mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary));",
      "right" : "pw.println(\"  mUserActivitySummary=0x\" + Integer.toHexString(mUserActivitySummary));",
      "info" : "ExpressionStatement[112927-113011]:ExpressionStatement[112927-113011]"
    }, {
      "left" : "pw.println(\"  mRequestWaitForNegativeProximity=\" + mRequestWaitForNegativeProximity);",
      "right" : "pw.println(\"  mRequestWaitForNegativeProximity=\" + mRequestWaitForNegativeProximity);",
      "info" : "ExpressionStatement[113024-113109]:ExpressionStatement[113024-113109]"
    }, {
      "left" : "pw.println(\"  mSandmanScheduled=\" + mSandmanScheduled);",
      "right" : "pw.println(\"  mSandmanScheduled=\" + mSandmanScheduled);",
      "info" : "ExpressionStatement[113122-113177]:ExpressionStatement[113122-113177]"
    }, {
      "left" : "pw.println(\"  mSandmanSummoned=\" + mSandmanSummoned);",
      "right" : "pw.println(\"  mSandmanSummoned=\" + mSandmanSummoned);",
      "info" : "ExpressionStatement[113190-113243]:ExpressionStatement[113190-113243]"
    }, {
      "left" : "pw.println(\"  mLowPowerModeEnabled=\" + mLowPowerModeEnabled);",
      "right" : "pw.println(\"  mLowPowerModeEnabled=\" + mLowPowerModeEnabled);",
      "info" : "ExpressionStatement[113256-113317]:ExpressionStatement[113256-113317]"
    }, {
      "left" : "pw.println(\"  mBatteryLevelLow=\" + mBatteryLevelLow);",
      "right" : "pw.println(\"  mBatteryLevelLow=\" + mBatteryLevelLow);",
      "info" : "ExpressionStatement[113330-113383]:ExpressionStatement[113330-113383]"
    }, {
      "left" : "pw.println(\"  mLastWakeTime=\" + TimeUtils.formatUptime(mLastWakeTime));",
      "right" : "pw.println(\"  mLastWakeTime=\" + TimeUtils.formatUptime(mLastWakeTime));",
      "info" : "ExpressionStatement[113396-113467]:ExpressionStatement[113396-113467]"
    }, {
      "left" : "pw.println(\"  mLastSleepTime=\" + TimeUtils.formatUptime(mLastSleepTime));",
      "right" : "pw.println(\"  mLastSleepTime=\" + TimeUtils.formatUptime(mLastSleepTime));",
      "info" : "ExpressionStatement[113480-113553]:ExpressionStatement[113480-113553]"
    }, {
      "left" : "pw.println(\"  mLastUserActivityTime=\" + TimeUtils.formatUptime(mLastUserActivityTime));",
      "right" : "pw.println(\"  mLastUserActivityTime=\" + TimeUtils.formatUptime(mLastUserActivityTime));",
      "info" : "ExpressionStatement[113566-113653]:ExpressionStatement[113566-113653]"
    }, {
      "left" : "pw.println(\"  mLastUserActivityTimeNoChangeLights=\"\n                    + TimeUtils.formatUptime(mLastUserActivityTimeNoChangeLights));",
      "right" : "pw.println(\"  mLastUserActivityTimeNoChangeLights=\"\n                    + TimeUtils.formatUptime(mLastUserActivityTimeNoChangeLights));",
      "info" : "ExpressionStatement[113666-113801]:ExpressionStatement[113666-113801]"
    }, {
      "left" : "pw.println(\"  mLastInteractivePowerHintTime=\"\n                    + TimeUtils.formatUptime(mLastInteractivePowerHintTime));",
      "right" : "pw.println(\"  mLastInteractivePowerHintTime=\"\n                    + TimeUtils.formatUptime(mLastInteractivePowerHintTime));",
      "info" : "ExpressionStatement[113814-113937]:ExpressionStatement[113814-113937]"
    }, {
      "left" : "pw.println(\"  mLastScreenBrightnessBoostTime=\"\n                    + TimeUtils.formatUptime(mLastScreenBrightnessBoostTime));",
      "right" : "pw.println(\"  mLastScreenBrightnessBoostTime=\"\n                    + TimeUtils.formatUptime(mLastScreenBrightnessBoostTime));",
      "info" : "ExpressionStatement[113950-114075]:ExpressionStatement[113950-114075]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessBoostInProgress=\"\n                    + mScreenBrightnessBoostInProgress);",
      "right" : "pw.println(\"  mScreenBrightnessBoostInProgress=\"\n                    + mScreenBrightnessBoostInProgress);",
      "info" : "ExpressionStatement[114088-114193]:ExpressionStatement[114088-114193]"
    }, {
      "left" : "pw.println(\"  mDisplayReady=\" + mDisplayReady);",
      "right" : "pw.println(\"  mDisplayReady=\" + mDisplayReady);",
      "info" : "ExpressionStatement[114206-114253]:ExpressionStatement[114206-114253]"
    }, {
      "left" : "pw.println(\"  mHoldingWakeLockSuspendBlocker=\" + mHoldingWakeLockSuspendBlocker);",
      "right" : "pw.println(\"  mHoldingWakeLockSuspendBlocker=\" + mHoldingWakeLockSuspendBlocker);",
      "info" : "ExpressionStatement[114266-114347]:ExpressionStatement[114266-114347]"
    }, {
      "left" : "pw.println(\"  mHoldingDisplaySuspendBlocker=\" + mHoldingDisplaySuspendBlocker);",
      "right" : "pw.println(\"  mHoldingDisplaySuspendBlocker=\" + mHoldingDisplaySuspendBlocker);",
      "info" : "ExpressionStatement[114360-114439]:ExpressionStatement[114360-114439]"
    }, {
      "left" : "pw.println();",
      "right" : "pw.println();",
      "info" : "ExpressionStatement[114453-114466]:ExpressionStatement[114453-114466]"
    }, {
      "left" : "pw.println(\"Settings and Configuration:\");",
      "right" : "pw.println(\"Settings and Configuration:\");",
      "info" : "ExpressionStatement[114479-114521]:ExpressionStatement[114479-114521]"
    }, {
      "left" : "pw.println(\"  mDecoupleHalAutoSuspendModeFromDisplayConfig=\"\n                    + mDecoupleHalAutoSuspendModeFromDisplayConfig);",
      "right" : "pw.println(\"  mDecoupleHalAutoSuspendModeFromDisplayConfig=\"\n                    + mDecoupleHalAutoSuspendModeFromDisplayConfig);",
      "info" : "ExpressionStatement[114534-114663]:ExpressionStatement[114534-114663]"
    }, {
      "left" : "pw.println(\"  mDecoupleHalInteractiveModeFromDisplayConfig=\"\n                    + mDecoupleHalInteractiveModeFromDisplayConfig);",
      "right" : "pw.println(\"  mDecoupleHalInteractiveModeFromDisplayConfig=\"\n                    + mDecoupleHalInteractiveModeFromDisplayConfig);",
      "info" : "ExpressionStatement[114676-114805]:ExpressionStatement[114676-114805]"
    }, {
      "left" : "pw.println(\"  mWakeUpWhenPluggedOrUnpluggedConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedConfig);",
      "right" : "pw.println(\"  mWakeUpWhenPluggedOrUnpluggedConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedConfig);",
      "info" : "ExpressionStatement[114818-114929]:ExpressionStatement[114818-114929]"
    }, {
      "left" : "pw.println(\"  mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig);",
      "right" : "pw.println(\"  mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig=\"\n                    + mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig);",
      "info" : "ExpressionStatement[114942-115079]:ExpressionStatement[114942-115079]"
    }, {
      "left" : "pw.println(\"  mTheaterModeEnabled=\"\n                    + mTheaterModeEnabled);",
      "right" : "pw.println(\"  mTheaterModeEnabled=\"\n                    + mTheaterModeEnabled);",
      "info" : "ExpressionStatement[115092-115171]:ExpressionStatement[115092-115171]"
    }, {
      "left" : "pw.println(\"  mSuspendWhenScreenOffDueToProximityConfig=\"\n                    + mSuspendWhenScreenOffDueToProximityConfig);",
      "right" : "pw.println(\"  mSuspendWhenScreenOffDueToProximityConfig=\"\n                    + mSuspendWhenScreenOffDueToProximityConfig);",
      "info" : "ExpressionStatement[115184-115307]:ExpressionStatement[115184-115307]"
    }, {
      "left" : "pw.println(\"  mDreamsSupportedConfig=\" + mDreamsSupportedConfig);",
      "right" : "pw.println(\"  mDreamsSupportedConfig=\" + mDreamsSupportedConfig);",
      "info" : "ExpressionStatement[115320-115385]:ExpressionStatement[115320-115385]"
    }, {
      "left" : "pw.println(\"  mDreamsEnabledByDefaultConfig=\" + mDreamsEnabledByDefaultConfig);",
      "right" : "pw.println(\"  mDreamsEnabledByDefaultConfig=\" + mDreamsEnabledByDefaultConfig);",
      "info" : "ExpressionStatement[115398-115477]:ExpressionStatement[115398-115477]"
    }, {
      "left" : "pw.println(\"  mDreamsActivatedOnSleepByDefaultConfig=\"\n                    + mDreamsActivatedOnSleepByDefaultConfig);",
      "right" : "pw.println(\"  mDreamsActivatedOnSleepByDefaultConfig=\"\n                    + mDreamsActivatedOnSleepByDefaultConfig);",
      "info" : "ExpressionStatement[115490-115607]:ExpressionStatement[115490-115607]"
    }, {
      "left" : "pw.println(\"  mDreamsActivatedOnDockByDefaultConfig=\"\n                    + mDreamsActivatedOnDockByDefaultConfig);",
      "right" : "pw.println(\"  mDreamsActivatedOnDockByDefaultConfig=\"\n                    + mDreamsActivatedOnDockByDefaultConfig);",
      "info" : "ExpressionStatement[115620-115735]:ExpressionStatement[115620-115735]"
    }, {
      "left" : "pw.println(\"  mDreamsEnabledOnBatteryConfig=\"\n                    + mDreamsEnabledOnBatteryConfig);",
      "right" : "pw.println(\"  mDreamsEnabledOnBatteryConfig=\"\n                    + mDreamsEnabledOnBatteryConfig);",
      "info" : "ExpressionStatement[115748-115847]:ExpressionStatement[115748-115847]"
    }, {
      "left" : "pw.println(\"  mDreamsBatteryLevelMinimumWhenPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenPoweredConfig);",
      "right" : "pw.println(\"  mDreamsBatteryLevelMinimumWhenPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenPoweredConfig);",
      "info" : "ExpressionStatement[115860-115987]:ExpressionStatement[115860-115987]"
    }, {
      "left" : "pw.println(\"  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenNotPoweredConfig);",
      "right" : "pw.println(\"  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=\"\n                    + mDreamsBatteryLevelMinimumWhenNotPoweredConfig);",
      "info" : "ExpressionStatement[116000-116133]:ExpressionStatement[116000-116133]"
    }, {
      "left" : "pw.println(\"  mDreamsBatteryLevelDrainCutoffConfig=\"\n                    + mDreamsBatteryLevelDrainCutoffConfig);",
      "right" : "pw.println(\"  mDreamsBatteryLevelDrainCutoffConfig=\"\n                    + mDreamsBatteryLevelDrainCutoffConfig);",
      "info" : "ExpressionStatement[116146-116259]:ExpressionStatement[116146-116259]"
    }, {
      "left" : "pw.println(\"  mDreamsEnabledSetting=\" + mDreamsEnabledSetting);",
      "right" : "pw.println(\"  mDreamsEnabledSetting=\" + mDreamsEnabledSetting);",
      "info" : "ExpressionStatement[116272-116335]:ExpressionStatement[116272-116335]"
    }, {
      "left" : "pw.println(\"  mDreamsActivateOnSleepSetting=\" + mDreamsActivateOnSleepSetting);",
      "right" : "pw.println(\"  mDreamsActivateOnSleepSetting=\" + mDreamsActivateOnSleepSetting);",
      "info" : "ExpressionStatement[116348-116427]:ExpressionStatement[116348-116427]"
    }, {
      "left" : "pw.println(\"  mDreamsActivateOnDockSetting=\" + mDreamsActivateOnDockSetting);",
      "right" : "pw.println(\"  mDreamsActivateOnDockSetting=\" + mDreamsActivateOnDockSetting);",
      "info" : "ExpressionStatement[116440-116517]:ExpressionStatement[116440-116517]"
    }, {
      "left" : "pw.println(\"  mDozeAfterScreenOffConfig=\" + mDozeAfterScreenOffConfig);",
      "right" : "pw.println(\"  mDozeAfterScreenOffConfig=\" + mDozeAfterScreenOffConfig);",
      "info" : "ExpressionStatement[116530-116601]:ExpressionStatement[116530-116601]"
    }, {
      "left" : "pw.println(\"  mLowPowerModeSetting=\" + mLowPowerModeSetting);",
      "right" : "pw.println(\"  mLowPowerModeSetting=\" + mLowPowerModeSetting);",
      "info" : "ExpressionStatement[116614-116675]:ExpressionStatement[116614-116675]"
    }, {
      "left" : "pw.println(\"  mAutoLowPowerModeConfigured=\" + mAutoLowPowerModeConfigured);",
      "right" : "pw.println(\"  mAutoLowPowerModeConfigured=\" + mAutoLowPowerModeConfigured);",
      "info" : "ExpressionStatement[116688-116763]:ExpressionStatement[116688-116763]"
    }, {
      "left" : "pw.println(\"  mAutoLowPowerModeSnoozing=\" + mAutoLowPowerModeSnoozing);",
      "right" : "pw.println(\"  mAutoLowPowerModeSnoozing=\" + mAutoLowPowerModeSnoozing);",
      "info" : "ExpressionStatement[116776-116847]:ExpressionStatement[116776-116847]"
    }, {
      "left" : "pw.println(\"  mMinimumScreenOffTimeoutConfig=\" + mMinimumScreenOffTimeoutConfig);",
      "right" : "pw.println(\"  mMinimumScreenOffTimeoutConfig=\" + mMinimumScreenOffTimeoutConfig);",
      "info" : "ExpressionStatement[116860-116941]:ExpressionStatement[116860-116941]"
    }, {
      "left" : "pw.println(\"  mMaximumScreenDimDurationConfig=\" + mMaximumScreenDimDurationConfig);",
      "right" : "pw.println(\"  mMaximumScreenDimDurationConfig=\" + mMaximumScreenDimDurationConfig);",
      "info" : "ExpressionStatement[116954-117037]:ExpressionStatement[116954-117037]"
    }, {
      "left" : "pw.println(\"  mMaximumScreenDimRatioConfig=\" + mMaximumScreenDimRatioConfig);",
      "right" : "pw.println(\"  mMaximumScreenDimRatioConfig=\" + mMaximumScreenDimRatioConfig);",
      "info" : "ExpressionStatement[117050-117127]:ExpressionStatement[117050-117127]"
    }, {
      "left" : "pw.println(\"  mScreenOffTimeoutSetting=\" + mScreenOffTimeoutSetting);",
      "right" : "pw.println(\"  mScreenOffTimeoutSetting=\" + mScreenOffTimeoutSetting);",
      "info" : "ExpressionStatement[117140-117209]:ExpressionStatement[117140-117209]"
    }, {
      "left" : "pw.println(\"  mSleepTimeoutSetting=\" + mSleepTimeoutSetting);",
      "right" : "pw.println(\"  mSleepTimeoutSetting=\" + mSleepTimeoutSetting);",
      "info" : "ExpressionStatement[117222-117283]:ExpressionStatement[117222-117283]"
    }, {
      "left" : "pw.println(\"  mMaximumScreenOffTimeoutFromDeviceAdmin=\"\n                    + mMaximumScreenOffTimeoutFromDeviceAdmin + \" (enforced=\"\n                    + isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked() + \")\");",
      "right" : "pw.println(\"  mMaximumScreenOffTimeoutFromDeviceAdmin=\"\n                    + mMaximumScreenOffTimeoutFromDeviceAdmin + \" (enforced=\"\n                    + isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked() + \")\");",
      "info" : "ExpressionStatement[117296-117516]:ExpressionStatement[117296-117516]"
    }, {
      "left" : "pw.println(\"  mStayOnWhilePluggedInSetting=\" + mStayOnWhilePluggedInSetting);",
      "right" : "pw.println(\"  mStayOnWhilePluggedInSetting=\" + mStayOnWhilePluggedInSetting);",
      "info" : "ExpressionStatement[117529-117606]:ExpressionStatement[117529-117606]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessSetting=\" + mScreenBrightnessSetting);",
      "right" : "pw.println(\"  mScreenBrightnessSetting=\" + mScreenBrightnessSetting);",
      "info" : "ExpressionStatement[117619-117688]:ExpressionStatement[117619-117688]"
    }, {
      "left" : "pw.println(\"  mScreenAutoBrightnessAdjustmentSetting=\"\n                    + mScreenAutoBrightnessAdjustmentSetting);",
      "right" : "pw.println(\"  mScreenAutoBrightnessAdjustmentSetting=\"\n                    + mScreenAutoBrightnessAdjustmentSetting);",
      "info" : "ExpressionStatement[117701-117818]:ExpressionStatement[117701-117818]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessModeSetting=\" + mScreenBrightnessModeSetting);",
      "right" : "pw.println(\"  mScreenBrightnessModeSetting=\" + mScreenBrightnessModeSetting);",
      "info" : "ExpressionStatement[117831-117908]:ExpressionStatement[117831-117908]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessOverrideFromWindowManager=\"\n                    + mScreenBrightnessOverrideFromWindowManager);",
      "right" : "pw.println(\"  mScreenBrightnessOverrideFromWindowManager=\"\n                    + mScreenBrightnessOverrideFromWindowManager);",
      "info" : "ExpressionStatement[117921-118046]:ExpressionStatement[117921-118046]"
    }, {
      "left" : "pw.println(\"  mUserActivityTimeoutOverrideFromWindowManager=\"\n                    + mUserActivityTimeoutOverrideFromWindowManager);",
      "right" : "pw.println(\"  mUserActivityTimeoutOverrideFromWindowManager=\"\n                    + mUserActivityTimeoutOverrideFromWindowManager);",
      "info" : "ExpressionStatement[118059-118190]:ExpressionStatement[118059-118190]"
    }, {
      "left" : "pw.println(\"  mTemporaryScreenBrightnessSettingOverride=\"\n                    + mTemporaryScreenBrightnessSettingOverride);",
      "right" : "pw.println(\"  mTemporaryScreenBrightnessSettingOverride=\"\n                    + mTemporaryScreenBrightnessSettingOverride);",
      "info" : "ExpressionStatement[118203-118326]:ExpressionStatement[118203-118326]"
    }, {
      "left" : "pw.println(\"  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=\"\n                    + mTemporaryScreenAutoBrightnessAdjustmentSettingOverride);",
      "right" : "pw.println(\"  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=\"\n                    + mTemporaryScreenAutoBrightnessAdjustmentSettingOverride);",
      "info" : "ExpressionStatement[118339-118490]:ExpressionStatement[118339-118490]"
    }, {
      "left" : "pw.println(\"  mDozeScreenStateOverrideFromDreamManager=\"\n                    + mDozeScreenStateOverrideFromDreamManager);",
      "right" : "pw.println(\"  mDozeScreenStateOverrideFromDreamManager=\"\n                    + mDozeScreenStateOverrideFromDreamManager);",
      "info" : "ExpressionStatement[118503-118624]:ExpressionStatement[118503-118624]"
    }, {
      "left" : "pw.println(\"  mDozeScreenBrightnessOverrideFromDreamManager=\"\n                    + mDozeScreenBrightnessOverrideFromDreamManager);",
      "right" : "pw.println(\"  mDozeScreenBrightnessOverrideFromDreamManager=\"\n                    + mDozeScreenBrightnessOverrideFromDreamManager);",
      "info" : "ExpressionStatement[118637-118768]:ExpressionStatement[118637-118768]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessSettingMinimum=\" + mScreenBrightnessSettingMinimum);",
      "right" : "pw.println(\"  mScreenBrightnessSettingMinimum=\" + mScreenBrightnessSettingMinimum);",
      "info" : "ExpressionStatement[118781-118864]:ExpressionStatement[118781-118864]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessSettingMaximum=\" + mScreenBrightnessSettingMaximum);",
      "right" : "pw.println(\"  mScreenBrightnessSettingMaximum=\" + mScreenBrightnessSettingMaximum);",
      "info" : "ExpressionStatement[118877-118960]:ExpressionStatement[118877-118960]"
    }, {
      "left" : "pw.println(\"  mScreenBrightnessSettingDefault=\" + mScreenBrightnessSettingDefault);",
      "right" : "pw.println(\"  mScreenBrightnessSettingDefault=\" + mScreenBrightnessSettingDefault);",
      "info" : "ExpressionStatement[118973-119056]:ExpressionStatement[118973-119056]"
    }, {
      "left" : "final int sleepTimeout = getSleepTimeoutLocked();",
      "right" : "final int sleepTimeout = getSleepTimeoutLocked();",
      "info" : "VariableDeclarationStatement[119070-119119]:VariableDeclarationStatement[119070-119119]"
    }, {
      "left" : "final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);",
      "right" : "final int screenOffTimeout = getScreenOffTimeoutLocked(sleepTimeout);",
      "info" : "VariableDeclarationStatement[119132-119201]:VariableDeclarationStatement[119132-119201]"
    }, {
      "left" : "final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);",
      "right" : "final int screenDimDuration = getScreenDimDurationLocked(screenOffTimeout);",
      "info" : "VariableDeclarationStatement[119214-119289]:VariableDeclarationStatement[119214-119289]"
    }, {
      "left" : "pw.println();",
      "right" : "pw.println();",
      "info" : "ExpressionStatement[119302-119315]:ExpressionStatement[119302-119315]"
    }, {
      "left" : "pw.println(\"Sleep timeout: \" + sleepTimeout + \" ms\");",
      "right" : "pw.println(\"Sleep timeout: \" + sleepTimeout + \" ms\");",
      "info" : "ExpressionStatement[119328-119381]:ExpressionStatement[119328-119381]"
    }, {
      "left" : "pw.println(\"Screen off timeout: \" + screenOffTimeout + \" ms\");",
      "right" : "pw.println(\"Screen off timeout: \" + screenOffTimeout + \" ms\");",
      "info" : "ExpressionStatement[119394-119456]:ExpressionStatement[119394-119456]"
    }, {
      "left" : "pw.println(\"Screen dim duration: \" + screenDimDuration + \" ms\");",
      "right" : "pw.println(\"Screen dim duration: \" + screenDimDuration + \" ms\");",
      "info" : "ExpressionStatement[119469-119533]:ExpressionStatement[119469-119533]"
    }, {
      "left" : "pw.println();",
      "right" : "pw.println();",
      "info" : "ExpressionStatement[119547-119560]:ExpressionStatement[119547-119560]"
    }, {
      "left" : "pw.println(\"Wake Locks: size=\" + mWakeLocks.size());",
      "right" : "pw.println(\"Wake Locks: size=\" + mWakeLocks.size());",
      "info" : "ExpressionStatement[119573-119625]:ExpressionStatement[119573-119625]"
    }, {
      "left" : "for (WakeLock wl : mWakeLocks)",
      "right" : "for (WakeLock wl : mWakeLocks)",
      "info" : "EnhancedForStatement[119638-119723]:EnhancedForStatement[119638-119723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119669-119723]:Block[119669-119723]"
    }, {
      "left" : "pw.println(\"  \" + wl);",
      "right" : "pw.println(\"  \" + wl);",
      "info" : "ExpressionStatement[119687-119709]:ExpressionStatement[119687-119709]"
    }, {
      "left" : "pw.println();",
      "right" : "pw.println();",
      "info" : "ExpressionStatement[119737-119750]:ExpressionStatement[119737-119750]"
    }, {
      "left" : "pw.println(\"Suspend Blockers: size=\" + mSuspendBlockers.size());",
      "right" : "pw.println(\"Suspend Blockers: size=\" + mSuspendBlockers.size());",
      "info" : "ExpressionStatement[119763-119827]:ExpressionStatement[119763-119827]"
    }, {
      "left" : "for (SuspendBlocker sb : mSuspendBlockers)",
      "right" : "for (SuspendBlocker sb : mSuspendBlockers)",
      "info" : "EnhancedForStatement[119840-119937]:EnhancedForStatement[119840-119937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119883-119937]:Block[119883-119937]"
    }, {
      "left" : "pw.println(\"  \" + sb);",
      "right" : "pw.println(\"  \" + sb);",
      "info" : "ExpressionStatement[119901-119923]:ExpressionStatement[119901-119923]"
    }, {
      "left" : "pw.println();",
      "right" : "pw.println();",
      "info" : "ExpressionStatement[119951-119964]:ExpressionStatement[119951-119964]"
    }, {
      "left" : "pw.println(\"Display Power: \" + mDisplayPowerCallbacks);",
      "right" : "pw.println(\"Display Power: \" + mDisplayPowerCallbacks);",
      "info" : "ExpressionStatement[119977-120032]:ExpressionStatement[119977-120032]"
    }, {
      "left" : "wcd = mWirelessChargerDetector;",
      "right" : "wcd = mWirelessChargerDetector;",
      "info" : "ExpressionStatement[120046-120077]:ExpressionStatement[120046-120077]"
    }, {
      "left" : "if (wcd != null)",
      "right" : "if (wcd != null)",
      "info" : "IfStatement[120097-120151]:IfStatement[120097-120151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120114-120151]:Block[120114-120151]"
    }, {
      "left" : "wcd.dump(pw);",
      "right" : "wcd.dump(pw);",
      "info" : "ExpressionStatement[120128-120141]:ExpressionStatement[120128-120141]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[120163-120170]:Modifier[120163-120170]"
    }, {
      "left" : "SuspendBlocker",
      "right" : "SuspendBlocker",
      "info" : "SimpleType[120171-120185]:SimpleType[120171-120185]"
    }, {
      "left" : "createSuspendBlockerLocked",
      "right" : "createSuspendBlockerLocked",
      "info" : "SimpleName[120186-120212]:SimpleName[120186-120212]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[120213-120224]:SingleVariableDeclaration[120213-120224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120226-120380]:Block[120226-120380]"
    }, {
      "left" : "SuspendBlocker suspendBlocker = new SuspendBlockerImpl(name);",
      "right" : "SuspendBlocker suspendBlocker = new SuspendBlockerImpl(name);",
      "info" : "VariableDeclarationStatement[120236-120297]:VariableDeclarationStatement[120236-120297]"
    }, {
      "left" : "mSuspendBlockers.add(suspendBlocker);",
      "right" : "mSuspendBlockers.add(suspendBlocker);",
      "info" : "ExpressionStatement[120306-120343]:ExpressionStatement[120306-120343]"
    }, {
      "left" : "return suspendBlocker;",
      "right" : "return suspendBlocker;",
      "info" : "ReturnStatement[120352-120374]:ReturnStatement[120352-120374]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[120386-120393]:Modifier[120386-120393]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[120394-120400]:Modifier[120394-120400]"
    }, {
      "left" : "WorkSource",
      "right" : "WorkSource",
      "info" : "SimpleType[120401-120411]:SimpleType[120401-120411]"
    }, {
      "left" : "copyWorkSource",
      "right" : "copyWorkSource",
      "info" : "SimpleName[120412-120426]:SimpleName[120412-120426]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[120427-120448]:SingleVariableDeclaration[120427-120448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120450-120528]:Block[120450-120528]"
    }, {
      "left" : "return workSource != null ? new WorkSource(workSource) : null;",
      "right" : "return workSource != null ? new WorkSource(workSource) : null;",
      "info" : "ReturnStatement[120460-120522]:ReturnStatement[120460-120522]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[120534-120541]:Modifier[120534-120541]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[120542-120547]:Modifier[120542-120547]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[120548-120553]:TYPE_DECLARATION_KIND[120548-120553]"
    }, {
      "left" : "BatteryReceiver",
      "right" : "BatteryReceiver",
      "info" : "SimpleName[120554-120569]:SimpleName[120554-120569]"
    }, {
      "left" : "BroadcastReceiver",
      "right" : "BroadcastReceiver",
      "info" : "SimpleType[120578-120595]:SimpleType[120578-120595]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[120606-120615]:MarkerAnnotation[120606-120615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[120624-120630]:Modifier[120624-120630]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[120631-120635]:PrimitiveType[120631-120635]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[120636-120645]:SimpleName[120636-120645]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[120646-120661]:SingleVariableDeclaration[120646-120661]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[120663-120676]:SingleVariableDeclaration[120663-120676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120678-120789]:Block[120678-120789]"
    }, {
      "left" : "synchronized (mLock) {\n                handleBatteryStateChangedLocked();\n            }",
      "right" : "synchronized (mLock) {\n                handleBatteryStateChangedLocked();\n            }",
      "info" : "SynchronizedStatement[120692-120779]:SynchronizedStatement[120692-120779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120713-120779]:Block[120713-120779]"
    }, {
      "left" : "handleBatteryStateChangedLocked();",
      "right" : "handleBatteryStateChangedLocked();",
      "info" : "ExpressionStatement[120731-120765]:ExpressionStatement[120731-120765]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[120801-120808]:Modifier[120801-120808]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[120809-120814]:Modifier[120809-120814]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[120815-120820]:TYPE_DECLARATION_KIND[120815-120820]"
    }, {
      "left" : "DreamReceiver",
      "right" : "DreamReceiver",
      "info" : "SimpleName[120821-120834]:SimpleName[120821-120834]"
    }, {
      "left" : "BroadcastReceiver",
      "right" : "BroadcastReceiver",
      "info" : "SimpleType[120843-120860]:SimpleType[120843-120860]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[120871-120880]:MarkerAnnotation[120871-120880]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[120889-120895]:Modifier[120889-120895]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[120896-120900]:PrimitiveType[120896-120900]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[120901-120910]:SimpleName[120901-120910]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[120911-120926]:SingleVariableDeclaration[120911-120926]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[120928-120941]:SingleVariableDeclaration[120928-120941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120943-121044]:Block[120943-121044]"
    }, {
      "left" : "synchronized (mLock) {\n                scheduleSandmanLocked();\n            }",
      "right" : "synchronized (mLock) {\n                scheduleSandmanLocked();\n            }",
      "info" : "SynchronizedStatement[120957-121034]:SynchronizedStatement[120957-121034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120978-121034]:Block[120978-121034]"
    }, {
      "left" : "scheduleSandmanLocked();",
      "right" : "scheduleSandmanLocked();",
      "info" : "ExpressionStatement[120996-121020]:ExpressionStatement[120996-121020]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[121056-121063]:Modifier[121056-121063]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[121064-121069]:Modifier[121064-121069]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[121070-121075]:TYPE_DECLARATION_KIND[121070-121075]"
    }, {
      "left" : "UserSwitchedReceiver",
      "right" : "UserSwitchedReceiver",
      "info" : "SimpleName[121076-121096]:SimpleName[121076-121096]"
    }, {
      "left" : "BroadcastReceiver",
      "right" : "BroadcastReceiver",
      "info" : "SimpleType[121105-121122]:SimpleType[121105-121122]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[121133-121142]:MarkerAnnotation[121133-121142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[121151-121157]:Modifier[121151-121157]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[121158-121162]:PrimitiveType[121158-121162]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[121163-121172]:SimpleName[121163-121172]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[121173-121188]:SingleVariableDeclaration[121173-121188]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[121190-121203]:SingleVariableDeclaration[121190-121203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121205-121312]:Block[121205-121312]"
    }, {
      "left" : "synchronized (mLock) {\n                handleSettingsChangedLocked();\n            }",
      "right" : "synchronized (mLock) {\n                handleSettingsChangedLocked();\n            }",
      "info" : "SynchronizedStatement[121219-121302]:SynchronizedStatement[121219-121302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121240-121302]:Block[121240-121302]"
    }, {
      "left" : "handleSettingsChangedLocked();",
      "right" : "handleSettingsChangedLocked();",
      "info" : "ExpressionStatement[121258-121288]:ExpressionStatement[121258-121288]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[121324-121331]:Modifier[121324-121331]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[121332-121337]:Modifier[121332-121337]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[121338-121343]:TYPE_DECLARATION_KIND[121338-121343]"
    }, {
      "left" : "DockReceiver",
      "right" : "DockReceiver",
      "info" : "SimpleName[121344-121356]:SimpleName[121344-121356]"
    }, {
      "left" : "BroadcastReceiver",
      "right" : "BroadcastReceiver",
      "info" : "SimpleType[121365-121382]:SimpleType[121365-121382]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[121393-121402]:MarkerAnnotation[121393-121402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[121411-121417]:Modifier[121411-121417]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[121418-121422]:PrimitiveType[121418-121422]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[121423-121432]:SimpleName[121423-121432]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[121433-121448]:SingleVariableDeclaration[121433-121448]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[121450-121463]:SingleVariableDeclaration[121450-121463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121465-121863]:Block[121465-121863]"
    }, {
      "left" : "synchronized (mLock) {\n                int dockState = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,\n                        Intent.EXTRA_DOCK_STATE_UNDOCKED);\n                if (mDockState != dockState) {\n                    mDockState = dockState;\n                    mDirty |= DIRTY_DOCK_STATE;\n                    updatePowerStateLocked();\n                }\n            }",
      "right" : "synchronized (mLock) {\n                int dockState = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,\n                        Intent.EXTRA_DOCK_STATE_UNDOCKED);\n                if (mDockState != dockState) {\n                    mDockState = dockState;\n                    mDirty |= DIRTY_DOCK_STATE;\n                    updatePowerStateLocked();\n                }\n            }",
      "info" : "SynchronizedStatement[121479-121853]:SynchronizedStatement[121479-121853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121500-121853]:Block[121500-121853]"
    }, {
      "left" : "int dockState = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,\n                        Intent.EXTRA_DOCK_STATE_UNDOCKED);",
      "right" : "int dockState = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,\n                        Intent.EXTRA_DOCK_STATE_UNDOCKED);",
      "info" : "VariableDeclarationStatement[121518-121636]:VariableDeclarationStatement[121518-121636]"
    }, {
      "left" : "if (mDockState != dockState)",
      "right" : "if (mDockState != dockState)",
      "info" : "IfStatement[121653-121839]:IfStatement[121653-121839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121682-121839]:Block[121682-121839]"
    }, {
      "left" : "mDockState = dockState;",
      "right" : "mDockState = dockState;",
      "info" : "ExpressionStatement[121704-121727]:ExpressionStatement[121704-121727]"
    }, {
      "left" : "mDirty |= DIRTY_DOCK_STATE;",
      "right" : "mDirty |= DIRTY_DOCK_STATE;",
      "info" : "ExpressionStatement[121748-121775]:ExpressionStatement[121748-121775]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[121796-121821]:ExpressionStatement[121796-121821]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[121875-121882]:Modifier[121875-121882]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[121883-121888]:Modifier[121883-121888]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[121889-121894]:TYPE_DECLARATION_KIND[121889-121894]"
    }, {
      "left" : "SettingsObserver",
      "right" : "SettingsObserver",
      "info" : "SimpleName[121895-121911]:SimpleName[121895-121911]"
    }, {
      "left" : "ContentObserver",
      "right" : "ContentObserver",
      "info" : "SimpleType[121920-121935]:SimpleType[121920-121935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[121946-121952]:Modifier[121946-121952]"
    }, {
      "left" : "SettingsObserver",
      "right" : "SettingsObserver",
      "info" : "SimpleName[121953-121969]:SimpleName[121953-121969]"
    }, {
      "left" : "Handler handler",
      "right" : "Handler handler",
      "info" : "SingleVariableDeclaration[121970-121985]:SingleVariableDeclaration[121970-121985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121987-122026]:Block[121987-122026]"
    }, {
      "left" : "super(handler);",
      "right" : "super(handler);",
      "info" : "SuperConstructorInvocation[122001-122016]:SuperConstructorInvocation[122001-122016]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[122036-122045]:MarkerAnnotation[122036-122045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[122054-122060]:Modifier[122054-122060]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[122061-122065]:PrimitiveType[122061-122065]"
    }, {
      "left" : "onChange",
      "right" : "onChange",
      "info" : "SimpleName[122066-122074]:SimpleName[122066-122074]"
    }, {
      "left" : "boolean selfChange",
      "right" : "boolean selfChange",
      "info" : "SingleVariableDeclaration[122075-122093]:SingleVariableDeclaration[122075-122093]"
    }, {
      "left" : "Uri uri",
      "right" : "Uri uri",
      "info" : "SingleVariableDeclaration[122095-122102]:SingleVariableDeclaration[122095-122102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122104-122211]:Block[122104-122211]"
    }, {
      "left" : "synchronized (mLock) {\n                handleSettingsChangedLocked();\n            }",
      "right" : "synchronized (mLock) {\n                handleSettingsChangedLocked();\n            }",
      "info" : "SynchronizedStatement[122118-122201]:SynchronizedStatement[122118-122201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122139-122201]:Block[122139-122201]"
    }, {
      "left" : "handleSettingsChangedLocked();",
      "right" : "handleSettingsChangedLocked();",
      "info" : "ExpressionStatement[122157-122187]:ExpressionStatement[122157-122187]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[122314-122321]:Modifier[122314-122321]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[122322-122327]:Modifier[122322-122327]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[122328-122333]:TYPE_DECLARATION_KIND[122328-122333]"
    }, {
      "left" : "PowerManagerHandler",
      "right" : "PowerManagerHandler",
      "info" : "SimpleName[122334-122353]:SimpleName[122334-122353]"
    }, {
      "left" : "Handler",
      "right" : "Handler",
      "info" : "SimpleType[122362-122369]:SimpleType[122362-122369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[122380-122386]:Modifier[122380-122386]"
    }, {
      "left" : "PowerManagerHandler",
      "right" : "PowerManagerHandler",
      "info" : "SimpleName[122387-122406]:SimpleName[122387-122406]"
    }, {
      "left" : "Looper looper",
      "right" : "Looper looper",
      "info" : "SingleVariableDeclaration[122407-122420]:SingleVariableDeclaration[122407-122420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122422-122482]:Block[122422-122482]"
    }, {
      "left" : "super(looper, null, true /*async*/);",
      "right" : "super(looper, null, true /*async*/);",
      "info" : "SuperConstructorInvocation[122436-122472]:SuperConstructorInvocation[122436-122472]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[122492-122501]:MarkerAnnotation[122492-122501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[122510-122516]:Modifier[122510-122516]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[122517-122521]:PrimitiveType[122517-122521]"
    }, {
      "left" : "handleMessage",
      "right" : "handleMessage",
      "info" : "SimpleName[122522-122535]:SimpleName[122522-122535]"
    }, {
      "left" : "Message msg",
      "right" : "Message msg",
      "info" : "SingleVariableDeclaration[122536-122547]:SingleVariableDeclaration[122536-122547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122549-123120]:Block[122549-123120]"
    }, {
      "left" : "switch (msg.what) {\n                case MSG_USER_ACTIVITY_TIMEOUT:\n                    handleUserActivityTimeout();\n                    break;\n                case MSG_SANDMAN:\n                    handleSandman();\n                    break;\n                case MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT:\n                    handleScreenBrightnessBoostTimeout();\n                    break;\n                case MSG_WAKE_UP:\n                    cleanupProximity();\n                    ((Runnable) msg.obj).run();\n                    break;\n            }",
      "right" : "switch (msg.what) {\n                case MSG_USER_ACTIVITY_TIMEOUT:\n                    handleUserActivityTimeout();\n                    break;\n                case MSG_SANDMAN:\n                    handleSandman();\n                    break;\n                case MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT:\n                    handleScreenBrightnessBoostTimeout();\n                    break;\n                case MSG_WAKE_UP:\n                    cleanupProximity();\n                    ((Runnable) msg.obj).run();\n                    break;\n            }",
      "info" : "SwitchStatement[122563-123110]:SwitchStatement[122563-123110]"
    }, {
      "left" : "case MSG_USER_ACTIVITY_TIMEOUT:",
      "right" : "case MSG_USER_ACTIVITY_TIMEOUT:",
      "info" : "SwitchCase[122599-122630]:SwitchCase[122599-122630]"
    }, {
      "left" : "handleUserActivityTimeout();",
      "right" : "handleUserActivityTimeout();",
      "info" : "ExpressionStatement[122651-122679]:ExpressionStatement[122651-122679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[122700-122706]:BreakStatement[122700-122706]"
    }, {
      "left" : "case MSG_SANDMAN:",
      "right" : "case MSG_SANDMAN:",
      "info" : "SwitchCase[122723-122740]:SwitchCase[122723-122740]"
    }, {
      "left" : "handleSandman();",
      "right" : "handleSandman();",
      "info" : "ExpressionStatement[122761-122777]:ExpressionStatement[122761-122777]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[122798-122804]:BreakStatement[122798-122804]"
    }, {
      "left" : "case MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT:",
      "right" : "case MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT:",
      "info" : "SwitchCase[122821-122862]:SwitchCase[122821-122862]"
    }, {
      "left" : "handleScreenBrightnessBoostTimeout();",
      "right" : "handleScreenBrightnessBoostTimeout();",
      "info" : "ExpressionStatement[122883-122920]:ExpressionStatement[122883-122920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[122941-122947]:BreakStatement[122941-122947]"
    }, {
      "left" : "case MSG_WAKE_UP:",
      "right" : "case MSG_WAKE_UP:",
      "info" : "SwitchCase[122964-122981]:SwitchCase[122964-122981]"
    }, {
      "left" : "cleanupProximity();",
      "right" : "cleanupProximity();",
      "info" : "ExpressionStatement[123002-123021]:ExpressionStatement[123002-123021]"
    }, {
      "left" : "((Runnable) msg.obj).run();",
      "right" : "((Runnable) msg.obj).run();",
      "info" : "ExpressionStatement[123042-123069]:ExpressionStatement[123042-123069]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[123090-123096]:BreakStatement[123090-123096]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[123220-123227]:Modifier[123220-123227]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[123228-123233]:Modifier[123228-123233]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[123234-123239]:TYPE_DECLARATION_KIND[123234-123239]"
    }, {
      "left" : "WakeLock",
      "right" : "WakeLock",
      "info" : "SimpleName[123240-123248]:SimpleName[123240-123248]"
    }, {
      "left" : "IBinder.DeathRecipient",
      "right" : "IBinder.DeathRecipient",
      "info" : "SimpleType[123260-123282]:SimpleType[123260-123282]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[123615-123621]:Modifier[123615-123621]"
    }, {
      "left" : "WakeLock",
      "right" : "WakeLock",
      "info" : "SimpleName[123622-123630]:SimpleName[123622-123630]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[123631-123643]:SingleVariableDeclaration[123631-123643]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[123645-123654]:SingleVariableDeclaration[123645-123654]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[123656-123666]:SingleVariableDeclaration[123656-123666]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[123668-123686]:SingleVariableDeclaration[123668-123686]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[123704-123725]:SingleVariableDeclaration[123704-123725]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[123727-123744]:SingleVariableDeclaration[123727-123744]"
    }, {
      "left" : "int ownerUid",
      "right" : "int ownerUid",
      "info" : "SingleVariableDeclaration[123746-123758]:SingleVariableDeclaration[123746-123758]"
    }, {
      "left" : "int ownerPid",
      "right" : "int ownerPid",
      "info" : "SingleVariableDeclaration[123760-123772]:SingleVariableDeclaration[123760-123772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123774-124063]:Block[123774-124063]"
    }, {
      "left" : "mLock = lock;",
      "right" : "mLock = lock;",
      "info" : "ExpressionStatement[123788-123801]:ExpressionStatement[123788-123801]"
    }, {
      "left" : "mFlags = flags;",
      "right" : "mFlags = flags;",
      "info" : "ExpressionStatement[123814-123829]:ExpressionStatement[123814-123829]"
    }, {
      "left" : "mTag = tag;",
      "right" : "mTag = tag;",
      "info" : "ExpressionStatement[123842-123853]:ExpressionStatement[123842-123853]"
    }, {
      "left" : "mPackageName = packageName;",
      "right" : "mPackageName = packageName;",
      "info" : "ExpressionStatement[123866-123893]:ExpressionStatement[123866-123893]"
    }, {
      "left" : "mWorkSource = copyWorkSource(workSource);",
      "right" : "mWorkSource = copyWorkSource(workSource);",
      "info" : "ExpressionStatement[123906-123947]:ExpressionStatement[123906-123947]"
    }, {
      "left" : "mHistoryTag = historyTag;",
      "right" : "mHistoryTag = historyTag;",
      "info" : "ExpressionStatement[123960-123985]:ExpressionStatement[123960-123985]"
    }, {
      "left" : "mOwnerUid = ownerUid;",
      "right" : "mOwnerUid = ownerUid;",
      "info" : "ExpressionStatement[123998-124019]:ExpressionStatement[123998-124019]"
    }, {
      "left" : "mOwnerPid = ownerPid;",
      "right" : "mOwnerPid = ownerPid;",
      "info" : "ExpressionStatement[124032-124053]:ExpressionStatement[124032-124053]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[124073-124082]:MarkerAnnotation[124073-124082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[124091-124097]:Modifier[124091-124097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[124098-124102]:PrimitiveType[124098-124102]"
    }, {
      "left" : "binderDied",
      "right" : "binderDied",
      "info" : "SimpleName[124103-124113]:SimpleName[124103-124113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124116-124191]:Block[124116-124191]"
    }, {
      "left" : "PowerManagerService.this.handleWakeLockDeath(this);",
      "right" : "PowerManagerService.this.handleWakeLockDeath(this);",
      "info" : "ExpressionStatement[124130-124181]:ExpressionStatement[124130-124181]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[124201-124207]:Modifier[124201-124207]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[124208-124215]:PrimitiveType[124208-124215]"
    }, {
      "left" : "hasSameProperties",
      "right" : "hasSameProperties",
      "info" : "SimpleName[124216-124233]:SimpleName[124216-124233]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[124234-124243]:SingleVariableDeclaration[124234-124243]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[124245-124255]:SingleVariableDeclaration[124245-124255]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[124257-124278]:SingleVariableDeclaration[124257-124278]"
    }, {
      "left" : "int ownerUid",
      "right" : "int ownerUid",
      "info" : "SingleVariableDeclaration[124296-124308]:SingleVariableDeclaration[124296-124308]"
    }, {
      "left" : "int ownerPid",
      "right" : "int ownerPid",
      "info" : "SingleVariableDeclaration[124310-124322]:SingleVariableDeclaration[124310-124322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124324-124554]:Block[124324-124554]"
    }, {
      "left" : "return mFlags == flags\n                    && mTag.equals(tag)\n                    && hasSameWorkSource(workSource)\n                    && mOwnerUid == ownerUid\n                    && mOwnerPid == ownerPid;",
      "right" : "return mFlags == flags\n                    && mTag.equals(tag)\n                    && hasSameWorkSource(workSource)\n                    && mOwnerUid == ownerUid\n                    && mOwnerPid == ownerPid;",
      "info" : "ReturnStatement[124338-124544]:ReturnStatement[124338-124544]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[124564-124570]:Modifier[124564-124570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[124571-124575]:PrimitiveType[124571-124575]"
    }, {
      "left" : "updateProperties",
      "right" : "updateProperties",
      "info" : "SimpleName[124576-124592]:SimpleName[124576-124592]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[124593-124602]:SingleVariableDeclaration[124593-124602]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[124604-124614]:SingleVariableDeclaration[124604-124614]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[124616-124634]:SingleVariableDeclaration[124616-124634]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[124652-124673]:SingleVariableDeclaration[124652-124673]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[124675-124692]:SingleVariableDeclaration[124675-124692]"
    }, {
      "left" : "int ownerUid",
      "right" : "int ownerUid",
      "info" : "SingleVariableDeclaration[124694-124706]:SingleVariableDeclaration[124694-124706]"
    }, {
      "left" : "int ownerPid",
      "right" : "int ownerPid",
      "info" : "SingleVariableDeclaration[124708-124720]:SingleVariableDeclaration[124708-124720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124722-125480]:Block[124722-125480]"
    }, {
      "left" : "if (!mPackageName.equals(packageName))",
      "right" : "if (!mPackageName.equals(packageName))",
      "info" : "IfStatement[124736-124946]:IfStatement[124736-124946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124775-124946]:Block[124775-124946]"
    }, {
      "left" : "throw new IllegalStateException(\"Existing wake lock package name changed: \"\n                        + mPackageName + \" to \" + packageName);",
      "right" : "throw new IllegalStateException(\"Existing wake lock package name changed: \"\n                        + mPackageName + \" to \" + packageName);",
      "info" : "ThrowStatement[124793-124932]:ThrowStatement[124793-124932]"
    }, {
      "left" : "if (mOwnerUid != ownerUid)",
      "right" : "if (mOwnerUid != ownerUid)",
      "info" : "IfStatement[124959-125142]:IfStatement[124959-125142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124986-125142]:Block[124986-125142]"
    }, {
      "left" : "throw new IllegalStateException(\"Existing wake lock uid changed: \"\n                        + mOwnerUid + \" to \" + ownerUid);",
      "right" : "throw new IllegalStateException(\"Existing wake lock uid changed: \"\n                        + mOwnerUid + \" to \" + ownerUid);",
      "info" : "ThrowStatement[125004-125128]:ThrowStatement[125004-125128]"
    }, {
      "left" : "if (mOwnerPid != ownerPid)",
      "right" : "if (mOwnerPid != ownerPid)",
      "info" : "IfStatement[125155-125338]:IfStatement[125155-125338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125182-125338]:Block[125182-125338]"
    }, {
      "left" : "throw new IllegalStateException(\"Existing wake lock pid changed: \"\n                        + mOwnerPid + \" to \" + ownerPid);",
      "right" : "throw new IllegalStateException(\"Existing wake lock pid changed: \"\n                        + mOwnerPid + \" to \" + ownerPid);",
      "info" : "ThrowStatement[125200-125324]:ThrowStatement[125200-125324]"
    }, {
      "left" : "mFlags = flags;",
      "right" : "mFlags = flags;",
      "info" : "ExpressionStatement[125351-125366]:ExpressionStatement[125351-125366]"
    }, {
      "left" : "mTag = tag;",
      "right" : "mTag = tag;",
      "info" : "ExpressionStatement[125379-125390]:ExpressionStatement[125379-125390]"
    }, {
      "left" : "updateWorkSource(workSource);",
      "right" : "updateWorkSource(workSource);",
      "info" : "ExpressionStatement[125403-125432]:ExpressionStatement[125403-125432]"
    }, {
      "left" : "mHistoryTag = historyTag;",
      "right" : "mHistoryTag = historyTag;",
      "info" : "ExpressionStatement[125445-125470]:ExpressionStatement[125445-125470]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[125490-125496]:Modifier[125490-125496]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[125497-125504]:PrimitiveType[125497-125504]"
    }, {
      "left" : "hasSameWorkSource",
      "right" : "hasSameWorkSource",
      "info" : "SimpleName[125505-125522]:SimpleName[125505-125522]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[125523-125544]:SingleVariableDeclaration[125523-125544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125546-125616]:Block[125546-125616]"
    }, {
      "left" : "return Objects.equal(mWorkSource, workSource);",
      "right" : "return Objects.equal(mWorkSource, workSource);",
      "info" : "ReturnStatement[125560-125606]:ReturnStatement[125560-125606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[125626-125632]:Modifier[125626-125632]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[125633-125637]:PrimitiveType[125633-125637]"
    }, {
      "left" : "updateWorkSource",
      "right" : "updateWorkSource",
      "info" : "SimpleName[125638-125654]:SimpleName[125638-125654]"
    }, {
      "left" : "WorkSource workSource",
      "right" : "WorkSource workSource",
      "info" : "SingleVariableDeclaration[125655-125676]:SingleVariableDeclaration[125655-125676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125678-125743]:Block[125678-125743]"
    }, {
      "left" : "mWorkSource = copyWorkSource(workSource);",
      "right" : "mWorkSource = copyWorkSource(workSource);",
      "info" : "ExpressionStatement[125692-125733]:ExpressionStatement[125692-125733]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[125753-125762]:MarkerAnnotation[125753-125762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[125771-125777]:Modifier[125771-125777]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[125778-125784]:SimpleType[125778-125784]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[125785-125793]:SimpleName[125785-125793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125796-126007]:Block[125796-126007]"
    }, {
      "left" : "return getLockLevelString()\n                    + \" '\" + mTag + \"'\" + getLockFlagsString()\n                    + \" (uid=\" + mOwnerUid + \", pid=\" + mOwnerPid + \", ws=\" + mWorkSource + \")\";",
      "right" : "return getLockLevelString()\n                    + \" '\" + mTag + \"'\" + getLockFlagsString()\n                    + \" (uid=\" + mOwnerUid + \", pid=\" + mOwnerPid + \", ws=\" + mWorkSource + \")\";",
      "info" : "ReturnStatement[125810-125997]:ReturnStatement[125810-125997]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[126017-126049]:SingleMemberAnnotation[126017-126049]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[126058-126065]:Modifier[126058-126065]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[126066-126072]:SimpleType[126066-126072]"
    }, {
      "left" : "getLockLevelString",
      "right" : "getLockLevelString",
      "info" : "SimpleName[126073-126091]:SimpleName[126073-126091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126094-126971]:Block[126094-126971]"
    }, {
      "left" : "switch (mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                case PowerManager.FULL_WAKE_LOCK:\n                    return \"FULL_WAKE_LOCK                \";\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                    return \"SCREEN_BRIGHT_WAKE_LOCK       \";\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                    return \"SCREEN_DIM_WAKE_LOCK          \";\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                    return \"PARTIAL_WAKE_LOCK             \";\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return \"PROXIMITY_SCREEN_OFF_WAKE_LOCK\";\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return \"DOZE_WAKE_LOCK                \";\n                default:\n                    return \"???                           \";\n            }",
      "right" : "switch (mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {\n                case PowerManager.FULL_WAKE_LOCK:\n                    return \"FULL_WAKE_LOCK                \";\n                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:\n                    return \"SCREEN_BRIGHT_WAKE_LOCK       \";\n                case PowerManager.SCREEN_DIM_WAKE_LOCK:\n                    return \"SCREEN_DIM_WAKE_LOCK          \";\n                case PowerManager.PARTIAL_WAKE_LOCK:\n                    return \"PARTIAL_WAKE_LOCK             \";\n                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:\n                    return \"PROXIMITY_SCREEN_OFF_WAKE_LOCK\";\n                case PowerManager.DOZE_WAKE_LOCK:\n                    return \"DOZE_WAKE_LOCK                \";\n                default:\n                    return \"???                           \";\n            }",
      "info" : "SwitchStatement[126108-126961]:SwitchStatement[126108-126961]"
    }, {
      "left" : "case PowerManager.FULL_WAKE_LOCK:",
      "right" : "case PowerManager.FULL_WAKE_LOCK:",
      "info" : "SwitchCase[126178-126211]:SwitchCase[126178-126211]"
    }, {
      "left" : "return \"FULL_WAKE_LOCK                \";",
      "right" : "return \"FULL_WAKE_LOCK                \";",
      "info" : "ReturnStatement[126232-126272]:ReturnStatement[126232-126272]"
    }, {
      "left" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:",
      "info" : "SwitchCase[126289-126331]:SwitchCase[126289-126331]"
    }, {
      "left" : "return \"SCREEN_BRIGHT_WAKE_LOCK       \";",
      "right" : "return \"SCREEN_BRIGHT_WAKE_LOCK       \";",
      "info" : "ReturnStatement[126352-126392]:ReturnStatement[126352-126392]"
    }, {
      "left" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "right" : "case PowerManager.SCREEN_DIM_WAKE_LOCK:",
      "info" : "SwitchCase[126409-126448]:SwitchCase[126409-126448]"
    }, {
      "left" : "return \"SCREEN_DIM_WAKE_LOCK          \";",
      "right" : "return \"SCREEN_DIM_WAKE_LOCK          \";",
      "info" : "ReturnStatement[126469-126509]:ReturnStatement[126469-126509]"
    }, {
      "left" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "right" : "case PowerManager.PARTIAL_WAKE_LOCK:",
      "info" : "SwitchCase[126526-126562]:SwitchCase[126526-126562]"
    }, {
      "left" : "return \"PARTIAL_WAKE_LOCK             \";",
      "right" : "return \"PARTIAL_WAKE_LOCK             \";",
      "info" : "ReturnStatement[126583-126623]:ReturnStatement[126583-126623]"
    }, {
      "left" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "right" : "case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:",
      "info" : "SwitchCase[126640-126689]:SwitchCase[126640-126689]"
    }, {
      "left" : "return \"PROXIMITY_SCREEN_OFF_WAKE_LOCK\";",
      "right" : "return \"PROXIMITY_SCREEN_OFF_WAKE_LOCK\";",
      "info" : "ReturnStatement[126710-126750]:ReturnStatement[126710-126750]"
    }, {
      "left" : "case PowerManager.DOZE_WAKE_LOCK:",
      "right" : "case PowerManager.DOZE_WAKE_LOCK:",
      "info" : "SwitchCase[126767-126800]:SwitchCase[126767-126800]"
    }, {
      "left" : "return \"DOZE_WAKE_LOCK                \";",
      "right" : "return \"DOZE_WAKE_LOCK                \";",
      "info" : "ReturnStatement[126821-126861]:ReturnStatement[126821-126861]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[126878-126886]:SwitchCase[126878-126886]"
    }, {
      "left" : "return \"???                           \";",
      "right" : "return \"???                           \";",
      "info" : "ReturnStatement[126907-126947]:ReturnStatement[126907-126947]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[126981-126988]:Modifier[126981-126988]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[126989-126995]:SimpleType[126989-126995]"
    }, {
      "left" : "getLockFlagsString",
      "right" : "getLockFlagsString",
      "info" : "SimpleName[126996-127014]:SimpleName[126996-127014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127017-127349]:Block[127017-127349]"
    }, {
      "left" : "String result = \"\";",
      "right" : "String result = \"\";",
      "info" : "VariableDeclarationStatement[127031-127050]:VariableDeclarationStatement[127031-127050]"
    }, {
      "left" : "if ((mFlags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0)",
      "right" : "if ((mFlags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0)",
      "info" : "IfStatement[127063-127186]:IfStatement[127063-127186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127119-127186]:Block[127119-127186]"
    }, {
      "left" : "result += \" ACQUIRE_CAUSES_WAKEUP\";",
      "right" : "result += \" ACQUIRE_CAUSES_WAKEUP\";",
      "info" : "ExpressionStatement[127137-127172]:ExpressionStatement[127137-127172]"
    }, {
      "left" : "if ((mFlags & PowerManager.ON_AFTER_RELEASE) != 0)",
      "right" : "if ((mFlags & PowerManager.ON_AFTER_RELEASE) != 0)",
      "info" : "IfStatement[127199-127312]:IfStatement[127199-127312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127250-127312]:Block[127250-127312]"
    }, {
      "left" : "result += \" ON_AFTER_RELEASE\";",
      "right" : "result += \" ON_AFTER_RELEASE\";",
      "info" : "ExpressionStatement[127268-127298]:ExpressionStatement[127268-127298]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[127325-127339]:ReturnStatement[127325-127339]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[127361-127368]:Modifier[127361-127368]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[127369-127374]:Modifier[127369-127374]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[127375-127380]:TYPE_DECLARATION_KIND[127375-127380]"
    }, {
      "left" : "SuspendBlockerImpl",
      "right" : "SuspendBlockerImpl",
      "info" : "SimpleName[127381-127399]:SimpleName[127381-127399]"
    }, {
      "left" : "SuspendBlocker",
      "right" : "SuspendBlocker",
      "info" : "SimpleType[127411-127425]:SimpleType[127411-127425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[127551-127557]:Modifier[127551-127557]"
    }, {
      "left" : "SuspendBlockerImpl",
      "right" : "SuspendBlockerImpl",
      "info" : "SimpleName[127558-127576]:SimpleName[127558-127576]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[127577-127588]:SingleVariableDeclaration[127577-127588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127590-127685]:Block[127590-127685]"
    }, {
      "left" : "mName = name;",
      "right" : "mName = name;",
      "info" : "ExpressionStatement[127604-127617]:ExpressionStatement[127604-127617]"
    }, {
      "left" : "mTraceName = \"SuspendBlocker (\" + name + \")\";",
      "right" : "mTraceName = \"SuspendBlocker (\" + name + \")\";",
      "info" : "ExpressionStatement[127630-127675]:ExpressionStatement[127630-127675]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[127695-127704]:MarkerAnnotation[127695-127704]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[127713-127722]:Modifier[127713-127722]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[127723-127727]:PrimitiveType[127723-127727]"
    }, {
      "left" : "finalize",
      "right" : "finalize",
      "info" : "SimpleName[127728-127736]:SimpleName[127728-127736]"
    }, {
      "left" : "Throwable",
      "right" : "Throwable",
      "info" : "SimpleType[127746-127755]:SimpleType[127746-127755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127756-128233]:Block[127756-128233]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[127770-128223]:TryStatement[127770-128223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127774-128165]:Block[127774-128165]"
    }, {
      "left" : "if (mReferenceCount != 0)",
      "right" : "if (mReferenceCount != 0)",
      "info" : "IfStatement[127792-128151]:IfStatement[127792-128151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127818-128151]:Block[127818-128151]"
    }, {
      "left" : "Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was finalized without being released!\");",
      "right" : "Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was finalized without being released!\");",
      "info" : "ExpressionStatement[127840-127957]:ExpressionStatement[127840-127957]"
    }, {
      "left" : "mReferenceCount = 0;",
      "right" : "mReferenceCount = 0;",
      "info" : "ExpressionStatement[127978-127998]:ExpressionStatement[127978-127998]"
    }, {
      "left" : "nativeReleaseSuspendBlocker(mName);",
      "right" : "nativeReleaseSuspendBlocker(mName);",
      "info" : "ExpressionStatement[128019-128054]:ExpressionStatement[128019-128054]"
    }, {
      "left" : "Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "right" : "Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "info" : "ExpressionStatement[128075-128133]:ExpressionStatement[128075-128133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128174-128223]:Block[128174-128223]"
    }, {
      "left" : "super.finalize();",
      "right" : "super.finalize();",
      "info" : "ExpressionStatement[128192-128209]:ExpressionStatement[128192-128209]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[128243-128252]:MarkerAnnotation[128243-128252]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[128261-128267]:Modifier[128261-128267]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[128268-128272]:PrimitiveType[128268-128272]"
    }, {
      "left" : "acquire",
      "right" : "acquire",
      "info" : "SimpleName[128273-128280]:SimpleName[128273-128280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128283-128724]:Block[128283-128724]"
    }, {
      "left" : "synchronized (this) {\n                mReferenceCount += 1;\n                if (mReferenceCount == 1) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"Acquiring suspend blocker \\\"\" + mName + \"\\\".\");\n                    }\n                    Trace.asyncTraceBegin(Trace.TRACE_TAG_POWER, mTraceName, 0);\n                    nativeAcquireSuspendBlocker(mName);\n                }\n            }",
      "right" : "synchronized (this) {\n                mReferenceCount += 1;\n                if (mReferenceCount == 1) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"Acquiring suspend blocker \\\"\" + mName + \"\\\".\");\n                    }\n                    Trace.asyncTraceBegin(Trace.TRACE_TAG_POWER, mTraceName, 0);\n                    nativeAcquireSuspendBlocker(mName);\n                }\n            }",
      "info" : "SynchronizedStatement[128297-128714]:SynchronizedStatement[128297-128714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128317-128714]:Block[128317-128714]"
    }, {
      "left" : "mReferenceCount += 1;",
      "right" : "mReferenceCount += 1;",
      "info" : "ExpressionStatement[128335-128356]:ExpressionStatement[128335-128356]"
    }, {
      "left" : "if (mReferenceCount == 1)",
      "right" : "if (mReferenceCount == 1)",
      "info" : "IfStatement[128373-128700]:IfStatement[128373-128700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128399-128700]:Block[128399-128700]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[128421-128545]:IfStatement[128421-128545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128437-128545]:Block[128437-128545]"
    }, {
      "left" : "Slog.d(TAG, \"Acquiring suspend blocker \\\"\" + mName + \"\\\".\");",
      "right" : "Slog.d(TAG, \"Acquiring suspend blocker \\\"\" + mName + \"\\\".\");",
      "info" : "ExpressionStatement[128463-128523]:ExpressionStatement[128463-128523]"
    }, {
      "left" : "Trace.asyncTraceBegin(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "right" : "Trace.asyncTraceBegin(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "info" : "ExpressionStatement[128566-128626]:ExpressionStatement[128566-128626]"
    }, {
      "left" : "nativeAcquireSuspendBlocker(mName);",
      "right" : "nativeAcquireSuspendBlocker(mName);",
      "info" : "ExpressionStatement[128647-128682]:ExpressionStatement[128647-128682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[128734-128743]:MarkerAnnotation[128734-128743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[128752-128758]:Modifier[128752-128758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[128759-128763]:PrimitiveType[128759-128763]"
    }, {
      "left" : "release",
      "right" : "release",
      "info" : "SimpleName[128764-128771]:SimpleName[128764-128771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128774-129458]:Block[128774-129458]"
    }, {
      "left" : "synchronized (this) {\n                mReferenceCount -= 1;\n                if (mReferenceCount == 0) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"Releasing suspend blocker \\\"\" + mName + \"\\\".\");\n                    }\n                    nativeReleaseSuspendBlocker(mName);\n                    Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);\n                } else if (mReferenceCount < 0) {\n                    Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was released without being acquired!\", new Throwable());\n                    mReferenceCount = 0;\n                }\n            }",
      "right" : "synchronized (this) {\n                mReferenceCount -= 1;\n                if (mReferenceCount == 0) {\n                    if (DEBUG_SPEW) {\n                        Slog.d(TAG, \"Releasing suspend blocker \\\"\" + mName + \"\\\".\");\n                    }\n                    nativeReleaseSuspendBlocker(mName);\n                    Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);\n                } else if (mReferenceCount < 0) {\n                    Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was released without being acquired!\", new Throwable());\n                    mReferenceCount = 0;\n                }\n            }",
      "info" : "SynchronizedStatement[128788-129448]:SynchronizedStatement[128788-129448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128808-129448]:Block[128808-129448]"
    }, {
      "left" : "mReferenceCount -= 1;",
      "right" : "mReferenceCount -= 1;",
      "info" : "ExpressionStatement[128826-128847]:ExpressionStatement[128826-128847]"
    }, {
      "left" : "if (mReferenceCount == 0)",
      "right" : "if (mReferenceCount == 0)",
      "info" : "IfStatement[128864-129434]:IfStatement[128864-129434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128890-129189]:Block[128890-129189]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[128912-129036]:IfStatement[128912-129036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128928-129036]:Block[128928-129036]"
    }, {
      "left" : "Slog.d(TAG, \"Releasing suspend blocker \\\"\" + mName + \"\\\".\");",
      "right" : "Slog.d(TAG, \"Releasing suspend blocker \\\"\" + mName + \"\\\".\");",
      "info" : "ExpressionStatement[128954-129014]:ExpressionStatement[128954-129014]"
    }, {
      "left" : "nativeReleaseSuspendBlocker(mName);",
      "right" : "nativeReleaseSuspendBlocker(mName);",
      "info" : "ExpressionStatement[129057-129092]:ExpressionStatement[129057-129092]"
    }, {
      "left" : "Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "right" : "Trace.asyncTraceEnd(Trace.TRACE_TAG_POWER, mTraceName, 0);",
      "info" : "ExpressionStatement[129113-129171]:ExpressionStatement[129113-129171]"
    }, {
      "left" : "if (mReferenceCount < 0)",
      "right" : "if (mReferenceCount < 0)",
      "info" : "IfStatement[129195-129434]:IfStatement[129195-129434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129220-129434]:Block[129220-129434]"
    }, {
      "left" : "Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was released without being acquired!\", new Throwable());",
      "right" : "Slog.wtf(TAG, \"Suspend blocker \\\"\" + mName\n                            + \"\\\" was released without being acquired!\", new Throwable());",
      "info" : "ExpressionStatement[129242-129375]:ExpressionStatement[129242-129375]"
    }, {
      "left" : "mReferenceCount = 0;",
      "right" : "mReferenceCount = 0;",
      "info" : "ExpressionStatement[129396-129416]:ExpressionStatement[129396-129416]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[129468-129477]:MarkerAnnotation[129468-129477]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[129486-129492]:Modifier[129486-129492]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[129493-129499]:SimpleType[129493-129499]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[129500-129508]:SimpleName[129500-129508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129511-129635]:Block[129511-129635]"
    }, {
      "left" : "synchronized (this) {\n                return mName + \": ref count=\" + mReferenceCount;\n            }",
      "right" : "synchronized (this) {\n                return mName + \": ref count=\" + mReferenceCount;\n            }",
      "info" : "SynchronizedStatement[129525-129625]:SynchronizedStatement[129525-129625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129545-129625]:Block[129545-129625]"
    }, {
      "left" : "return mName + \": ref count=\" + mReferenceCount;",
      "right" : "return mName + \": ref count=\" + mReferenceCount;",
      "info" : "ReturnStatement[129563-129611]:ReturnStatement[129563-129611]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[129647-129654]:Modifier[129647-129654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[129655-129659]:PrimitiveType[129655-129659]"
    }, {
      "left" : "cleanupProximity",
      "right" : "cleanupProximity",
      "info" : "SimpleName[129660-129676]:SimpleName[129660-129676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129679-129939]:Block[129679-129778]"
    }, {
      "left" : "if (mProximityWakeLock.isHeld())",
      "right" : "if (mProximityWakeLock.isHeld())",
      "info" : "IfStatement[129689-129775]:IfStatement[129832-129918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129722-129775]:Block[129865-129918]"
    }, {
      "left" : "mProximityWakeLock.release();",
      "right" : "mProximityWakeLock.release();",
      "info" : "ExpressionStatement[129736-129765]:ExpressionStatement[129879-129908]"
    }, {
      "left" : "if (mProximityListener != null)",
      "right" : "if (mProximityListener != null)",
      "info" : "IfStatement[129784-129933]:IfStatement[129927-130076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129816-129933]:Block[129959-130076]"
    }, {
      "left" : "mSensorManager.unregisterListener(mProximityListener);",
      "right" : "mSensorManager.unregisterListener(mProximityListener);",
      "info" : "ExpressionStatement[129830-129884]:ExpressionStatement[129973-130027]"
    }, {
      "left" : "mProximityListener = null;",
      "right" : "mProximityListener = null;",
      "info" : "ExpressionStatement[129897-129923]:ExpressionStatement[130040-130066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[129945-129952]:Modifier[130088-130095]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[129953-129958]:Modifier[130096-130101]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[129959-129964]:TYPE_DECLARATION_KIND[130102-130107]"
    }, {
      "left" : "BinderService",
      "right" : "BinderService",
      "info" : "SimpleName[129965-129978]:SimpleName[130108-130121]"
    }, {
      "left" : "IPowerManager.Stub",
      "right" : "IPowerManager.Stub",
      "info" : "SimpleType[129987-130005]:SimpleType[130130-130148]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[130016-130025]:MarkerAnnotation[130159-130168]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[130026-130040]:LineComment[130169-130183]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[130049-130055]:Modifier[130192-130198]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[130056-130060]:PrimitiveType[130199-130203]"
    }, {
      "left" : "acquireWakeLockWithUid",
      "right" : "acquireWakeLockWithUid",
      "info" : "SimpleName[130061-130083]:SimpleName[130204-130226]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[130084-130096]:SingleVariableDeclaration[130227-130239]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[130098-130107]:SingleVariableDeclaration[130241-130250]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[130109-130119]:SingleVariableDeclaration[130252-130262]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[130137-130155]:SingleVariableDeclaration[130280-130298]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[130157-130164]:SingleVariableDeclaration[130300-130307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130166-130351]:Block[130309-130494]"
    }, {
      "left" : "if (uid < 0)",
      "right" : "if (uid < 0)",
      "info" : "IfStatement[130180-130254]:IfStatement[130323-130397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130193-130254]:Block[130336-130397]"
    }, {
      "left" : "uid = Binder.getCallingUid();",
      "right" : "uid = Binder.getCallingUid();",
      "info" : "ExpressionStatement[130211-130240]:ExpressionStatement[130354-130383]"
    }, {
      "left" : "acquireWakeLock(lock, flags, tag, packageName, new WorkSource(uid), null);",
      "right" : "acquireWakeLock(lock, flags, tag, packageName, new WorkSource(uid), null);",
      "info" : "ExpressionStatement[130267-130341]:ExpressionStatement[130410-130484]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[130361-130370]:MarkerAnnotation[130504-130513]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[130371-130385]:LineComment[130514-130528]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[130394-130400]:Modifier[130537-130543]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[130401-130405]:PrimitiveType[130544-130548]"
    }, {
      "left" : "powerHint",
      "right" : "powerHint",
      "info" : "SimpleName[130406-130415]:SimpleName[130549-130558]"
    }, {
      "left" : "int hintId",
      "right" : "int hintId",
      "info" : "SingleVariableDeclaration[130416-130426]:SingleVariableDeclaration[130559-130569]"
    }, {
      "left" : "int data",
      "right" : "int data",
      "info" : "SingleVariableDeclaration[130428-130436]:SingleVariableDeclaration[130571-130579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130438-130754]:Block[130581-130897]"
    }, {
      "left" : "if (!mSystemReady)",
      "right" : "if (!mSystemReady)",
      "info" : "IfStatement[130452-130598]:IfStatement[130595-130741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130471-130598]:Block[130614-130741]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[130577-130584]:ReturnStatement[130720-130727]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[130611-130699]:ExpressionStatement[130754-130842]"
    }, {
      "left" : "powerHintInternal(hintId, data);",
      "right" : "powerHintInternal(hintId, data);",
      "info" : "ExpressionStatement[130712-130744]:ExpressionStatement[130855-130887]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[130764-130773]:MarkerAnnotation[130907-130916]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[130774-130788]:LineComment[130917-130931]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[130797-130803]:Modifier[130940-130946]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[130804-130808]:PrimitiveType[130947-130951]"
    }, {
      "left" : "acquireWakeLock",
      "right" : "acquireWakeLock",
      "info" : "SimpleName[130809-130824]:SimpleName[130952-130967]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[130825-130837]:SingleVariableDeclaration[130968-130980]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[130839-130848]:SingleVariableDeclaration[130982-130991]"
    }, {
      "left" : "String tag",
      "right" : "String tag",
      "info" : "SingleVariableDeclaration[130850-130860]:SingleVariableDeclaration[130993-131003]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[130862-130880]:SingleVariableDeclaration[131005-131023]"
    }, {
      "left" : "WorkSource ws",
      "right" : "WorkSource ws",
      "info" : "SingleVariableDeclaration[130898-130911]:SingleVariableDeclaration[131041-131054]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[130913-130930]:SingleVariableDeclaration[131056-131073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130932-132778]:Block[131075-132921]"
    }, {
      "left" : "if (lock == null)",
      "right" : "if (lock == null)",
      "info" : "IfStatement[130946-131056]:IfStatement[131089-131199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130964-131056]:Block[131107-131199]"
    }, {
      "left" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "right" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "info" : "ThrowStatement[130982-131042]:ThrowStatement[131125-131185]"
    }, {
      "left" : "if (packageName == null)",
      "right" : "if (packageName == null)",
      "info" : "IfStatement[131069-131193]:IfStatement[131212-131336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131094-131193]:Block[131237-131336]"
    }, {
      "left" : "throw new IllegalArgumentException(\"packageName must not be null\");",
      "right" : "throw new IllegalArgumentException(\"packageName must not be null\");",
      "info" : "ThrowStatement[131112-131179]:ThrowStatement[131255-131322]"
    }, {
      "left" : "PowerManager.validateWakeLockParameters(flags, tag);",
      "right" : "PowerManager.validateWakeLockParameters(flags, tag);",
      "info" : "ExpressionStatement[131206-131258]:ExpressionStatement[131349-131401]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "info" : "ExpressionStatement[131272-131357]:ExpressionStatement[131415-131500]"
    }, {
      "left" : "if ((flags & PowerManager.DOZE_WAKE_LOCK) != 0)",
      "right" : "if ((flags & PowerManager.DOZE_WAKE_LOCK) != 0)",
      "info" : "IfStatement[131370-131563]:IfStatement[131513-131706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131418-131563]:Block[131561-131706]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[131436-131549]:ExpressionStatement[131579-131692]"
    }, {
      "left" : "if (ws != null && ws.size() != 0)",
      "right" : "if (ws != null && ws.size() != 0)",
      "info" : "IfStatement[131576-131810]:IfStatement[131719-131953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131610-131762]:Block[131753-131905]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.UPDATE_DEVICE_STATS, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.UPDATE_DEVICE_STATS, null);",
      "info" : "ExpressionStatement[131628-131748]:ExpressionStatement[131771-131891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131768-131810]:Block[131911-131953]"
    }, {
      "left" : "ws = null;",
      "right" : "ws = null;",
      "info" : "ExpressionStatement[131786-131796]:ExpressionStatement[131929-131939]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[131824-131863]:VariableDeclarationStatement[131967-132006]"
    }, {
      "left" : "final int pid = Binder.getCallingPid();",
      "right" : "final int pid = Binder.getCallingPid();",
      "info" : "VariableDeclarationStatement[131876-131915]:VariableDeclarationStatement[132019-132058]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[131929-132497]:TryStatement[132072-132640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131933-132455]:Block[132076-132598]"
    }, {
      "left" : "if (mAppOps != null &&\n                        mAppOps.checkOperation(AppOpsManager.OP_WAKE_LOCK, uid, packageName)\n                        != AppOpsManager.MODE_ALLOWED)",
      "right" : "if (mAppOps != null &&\n                        mAppOps.checkOperation(AppOpsManager.OP_WAKE_LOCK, uid, packageName)\n                        != AppOpsManager.MODE_ALLOWED)",
      "info" : "IfStatement[131951-132441]:IfStatement[132094-132584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132122-132441]:Block[132265-132584]"
    }, {
      "left" : "Slog.d(TAG, \"acquireWakeLock: ignoring request from \" + packageName);",
      "right" : "Slog.d(TAG, \"acquireWakeLock: ignoring request from \" + packageName);",
      "info" : "ExpressionStatement[132144-132213]:ExpressionStatement[132287-132356]"
    }, {
      "left" : "mAppOps.noteOperation(AppOpsManager.OP_WAKE_LOCK, uid, packageName);",
      "right" : "mAppOps.noteOperation(AppOpsManager.OP_WAKE_LOCK, uid, packageName);",
      "info" : "ExpressionStatement[132290-132358]:ExpressionStatement[132433-132501]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[132416-132423]:ReturnStatement[132559-132566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132482-132497]:Block[132625-132640]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[132511-132560]:VariableDeclarationStatement[132654-132703]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[132573-132768]:TryStatement[132716-132911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132577-132690]:Block[132720-132833]"
    }, {
      "left" : "acquireWakeLockInternal(lock, flags, tag, packageName, ws, historyTag, uid, pid);",
      "right" : "acquireWakeLockInternal(lock, flags, tag, packageName, ws, historyTag, uid, pid);",
      "info" : "ExpressionStatement[132595-132676]:ExpressionStatement[132738-132819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132699-132768]:Block[132842-132911]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[132717-132754]:ExpressionStatement[132860-132897]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[132788-132797]:MarkerAnnotation[132931-132940]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[132798-132812]:LineComment[132941-132955]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[132821-132827]:Modifier[132964-132970]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[132828-132832]:PrimitiveType[132971-132975]"
    }, {
      "left" : "releaseWakeLock",
      "right" : "releaseWakeLock",
      "info" : "SimpleName[132833-132848]:SimpleName[132976-132991]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[132849-132861]:SingleVariableDeclaration[132992-133004]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[132863-132872]:SingleVariableDeclaration[133006-133015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132874-133334]:Block[133017-133477]"
    }, {
      "left" : "if (lock == null)",
      "right" : "if (lock == null)",
      "info" : "IfStatement[132888-132998]:IfStatement[133031-133141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132906-132998]:Block[133049-133141]"
    }, {
      "left" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "right" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "info" : "ThrowStatement[132924-132984]:ThrowStatement[133067-133127]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "info" : "ExpressionStatement[133012-133097]:ExpressionStatement[133155-133240]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[133111-133160]:VariableDeclarationStatement[133254-133303]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[133173-133324]:TryStatement[133316-133467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133177-133246]:Block[133320-133389]"
    }, {
      "left" : "releaseWakeLockInternal(lock, flags);",
      "right" : "releaseWakeLockInternal(lock, flags);",
      "info" : "ExpressionStatement[133195-133232]:ExpressionStatement[133338-133375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133255-133324]:Block[133398-133467]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[133273-133310]:ExpressionStatement[133416-133453]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[133344-133353]:MarkerAnnotation[133487-133496]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[133354-133368]:LineComment[133497-133511]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[133377-133383]:Modifier[133520-133526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[133384-133388]:PrimitiveType[133527-133531]"
    }, {
      "left" : "updateWakeLockUids",
      "right" : "updateWakeLockUids",
      "info" : "SimpleName[133389-133407]:SimpleName[133532-133550]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[133408-133420]:SingleVariableDeclaration[133551-133563]"
    }, {
      "left" : "int[] uids",
      "right" : "int[] uids",
      "info" : "SingleVariableDeclaration[133422-133432]:SingleVariableDeclaration[133565-133575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133434-133863]:Block[133577-134006]"
    }, {
      "left" : "WorkSource ws = null;",
      "right" : "WorkSource ws = null;",
      "info" : "VariableDeclarationStatement[133448-133469]:VariableDeclarationStatement[133591-133612]"
    }, {
      "left" : "if (uids != null)",
      "right" : "if (uids != null)",
      "info" : "IfStatement[133483-133799]:IfStatement[133626-133942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133501-133799]:Block[133644-133942]"
    }, {
      "left" : "ws = new WorkSource();",
      "right" : "ws = new WorkSource();",
      "info" : "ExpressionStatement[133519-133541]:ExpressionStatement[133662-133684]"
    }, {
      "left" : "for (int i = 0; i < uids.length; i++)",
      "right" : "for (int i = 0; i < uids.length; i++)",
      "info" : "ForStatement[133691-133785]:ForStatement[133834-133928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133729-133785]:Block[133872-133928]"
    }, {
      "left" : "ws.add(uids[i]);",
      "right" : "ws.add(uids[i]);",
      "info" : "ExpressionStatement[133751-133767]:ExpressionStatement[133894-133910]"
    }, {
      "left" : "updateWakeLockWorkSource(lock, ws, null);",
      "right" : "updateWakeLockWorkSource(lock, ws, null);",
      "info" : "ExpressionStatement[133812-133853]:ExpressionStatement[133955-133996]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[133873-133882]:MarkerAnnotation[134016-134025]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[133883-133897]:LineComment[134026-134040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[133906-133912]:Modifier[134049-134055]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[133913-133917]:PrimitiveType[134056-134060]"
    }, {
      "left" : "updateWakeLockWorkSource",
      "right" : "updateWakeLockWorkSource",
      "info" : "SimpleName[133918-133942]:SimpleName[134061-134085]"
    }, {
      "left" : "IBinder lock",
      "right" : "IBinder lock",
      "info" : "SingleVariableDeclaration[133943-133955]:SingleVariableDeclaration[134086-134098]"
    }, {
      "left" : "WorkSource ws",
      "right" : "WorkSource ws",
      "info" : "SingleVariableDeclaration[133957-133970]:SingleVariableDeclaration[134100-134113]"
    }, {
      "left" : "String historyTag",
      "right" : "String historyTag",
      "info" : "SingleVariableDeclaration[133972-133989]:SingleVariableDeclaration[134115-134132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133991-134787]:Block[134134-134930]"
    }, {
      "left" : "if (lock == null)",
      "right" : "if (lock == null)",
      "info" : "IfStatement[134005-134115]:IfStatement[134148-134258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134023-134115]:Block[134166-134258]"
    }, {
      "left" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "right" : "throw new IllegalArgumentException(\"lock must not be null\");",
      "info" : "ThrowStatement[134041-134101]:ThrowStatement[134184-134244]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);",
      "info" : "ExpressionStatement[134129-134214]:ExpressionStatement[134272-134357]"
    }, {
      "left" : "if (ws != null && ws.size() != 0)",
      "right" : "if (ws != null && ws.size() != 0)",
      "info" : "IfStatement[134227-134461]:IfStatement[134370-134604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134261-134413]:Block[134404-134556]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.UPDATE_DEVICE_STATS, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                        android.Manifest.permission.UPDATE_DEVICE_STATS, null);",
      "info" : "ExpressionStatement[134279-134399]:ExpressionStatement[134422-134542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134419-134461]:Block[134562-134604]"
    }, {
      "left" : "ws = null;",
      "right" : "ws = null;",
      "info" : "ExpressionStatement[134437-134447]:ExpressionStatement[134580-134590]"
    }, {
      "left" : "final int callingUid = Binder.getCallingUid();",
      "right" : "final int callingUid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[134475-134521]:VariableDeclarationStatement[134618-134664]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[134534-134583]:VariableDeclarationStatement[134677-134726]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[134596-134777]:TryStatement[134739-134920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134600-134699]:Block[134743-134842]"
    }, {
      "left" : "updateWakeLockWorkSourceInternal(lock, ws, historyTag, callingUid);",
      "right" : "updateWakeLockWorkSourceInternal(lock, ws, historyTag, callingUid);",
      "info" : "ExpressionStatement[134618-134685]:ExpressionStatement[134761-134828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134708-134777]:Block[134851-134920]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[134726-134763]:ExpressionStatement[134869-134906]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[134797-134806]:MarkerAnnotation[134940-134949]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[134807-134821]:LineComment[134950-134964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[134830-134836]:Modifier[134973-134979]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[134837-134844]:PrimitiveType[134980-134987]"
    }, {
      "left" : "isWakeLockLevelSupported",
      "right" : "isWakeLockLevelSupported",
      "info" : "SimpleName[134845-134869]:SimpleName[134988-135012]"
    }, {
      "left" : "int level",
      "right" : "int level",
      "info" : "SingleVariableDeclaration[134870-134879]:SingleVariableDeclaration[135013-135022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134881-135128]:Block[135024-135271]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[134895-134944]:VariableDeclarationStatement[135038-135087]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[134957-135118]:TryStatement[135100-135261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134961-135040]:Block[135104-135183]"
    }, {
      "left" : "return isWakeLockLevelSupportedInternal(level);",
      "right" : "return isWakeLockLevelSupportedInternal(level);",
      "info" : "ReturnStatement[134979-135026]:ReturnStatement[135122-135169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135049-135118]:Block[135192-135261]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[135067-135104]:ExpressionStatement[135210-135247]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[135138-135147]:MarkerAnnotation[135281-135290]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[135148-135162]:LineComment[135291-135305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[135171-135177]:Modifier[135314-135320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[135178-135182]:PrimitiveType[135321-135325]"
    }, {
      "left" : "userActivity",
      "right" : "userActivity",
      "info" : "SimpleName[135183-135195]:SimpleName[135326-135338]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[135196-135210]:SingleVariableDeclaration[135339-135353]"
    }, {
      "left" : "int event",
      "right" : "int event",
      "info" : "SingleVariableDeclaration[135212-135221]:SingleVariableDeclaration[135355-135364]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[135223-135232]:SingleVariableDeclaration[135366-135375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135234-137050]:Block[135377-137193]"
    }, {
      "left" : "final long now = SystemClock.uptimeMillis();",
      "right" : "final long now = SystemClock.uptimeMillis();",
      "info" : "VariableDeclarationStatement[135248-135292]:VariableDeclarationStatement[135391-135435]"
    }, {
      "left" : "if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER)\n                    != PackageManager.PERMISSION_GRANTED\n                    && mContext.checkCallingOrSelfPermission(\n                            android.Manifest.permission.USER_ACTIVITY)\n                            != PackageManager.PERMISSION_GRANTED)",
      "right" : "if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER)\n                    != PackageManager.PERMISSION_GRANTED\n                    && mContext.checkCallingOrSelfPermission(\n                            android.Manifest.permission.USER_ACTIVITY)\n                            != PackageManager.PERMISSION_GRANTED)",
      "info" : "IfStatement[135305-136582]:IfStatement[135448-136725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135645-136582]:Block[135788-136725]"
    }, {
      "left" : "synchronized (mLock) {\n                    if (now >= mLastWarningAboutUserActivityPermission + (5 * 60 * 1000)) {\n                        mLastWarningAboutUserActivityPermission = now;\n                        Slog.w(TAG, \"Ignoring call to PowerManager.userActivity() because the \"\n                                + \"caller does not have DEVICE_POWER or USER_ACTIVITY \"\n                                + \"permission.  Please fix your app!  \"\n                                + \" pid=\" + Binder.getCallingPid()\n                                + \" uid=\" + Binder.getCallingUid());\n                    }\n                }",
      "right" : "synchronized (mLock) {\n                    if (now >= mLastWarningAboutUserActivityPermission + (5 * 60 * 1000)) {\n                        mLastWarningAboutUserActivityPermission = now;\n                        Slog.w(TAG, \"Ignoring call to PowerManager.userActivity() because the \"\n                                + \"caller does not have DEVICE_POWER or USER_ACTIVITY \"\n                                + \"permission.  Please fix your app!  \"\n                                + \" pid=\" + Binder.getCallingPid()\n                                + \" uid=\" + Binder.getCallingUid());\n                    }\n                }",
      "info" : "SynchronizedStatement[135927-136544]:SynchronizedStatement[136070-136687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135948-136544]:Block[136091-136687]"
    }, {
      "left" : "if (now >= mLastWarningAboutUserActivityPermission + (5 * 60 * 1000))",
      "right" : "if (now >= mLastWarningAboutUserActivityPermission + (5 * 60 * 1000))",
      "info" : "IfStatement[135970-136526]:IfStatement[136113-136669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136040-136526]:Block[136183-136669]"
    }, {
      "left" : "mLastWarningAboutUserActivityPermission = now;",
      "right" : "mLastWarningAboutUserActivityPermission = now;",
      "info" : "ExpressionStatement[136066-136112]:ExpressionStatement[136209-136255]"
    }, {
      "left" : "Slog.w(TAG, \"Ignoring call to PowerManager.userActivity() because the \"\n                                + \"caller does not have DEVICE_POWER or USER_ACTIVITY \"\n                                + \"permission.  Please fix your app!  \"\n                                + \" pid=\" + Binder.getCallingPid()\n                                + \" uid=\" + Binder.getCallingUid());",
      "right" : "Slog.w(TAG, \"Ignoring call to PowerManager.userActivity() because the \"\n                                + \"caller does not have DEVICE_POWER or USER_ACTIVITY \"\n                                + \"permission.  Please fix your app!  \"\n                                + \" pid=\" + Binder.getCallingPid()\n                                + \" uid=\" + Binder.getCallingUid());",
      "info" : "ExpressionStatement[136137-136504]:ExpressionStatement[136280-136647]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[136561-136568]:ReturnStatement[136704-136711]"
    }, {
      "left" : "if (eventTime > SystemClock.uptimeMillis())",
      "right" : "if (eventTime > SystemClock.uptimeMillis())",
      "info" : "IfStatement[136596-136747]:IfStatement[136739-136890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136640-136747]:Block[136783-136890]"
    }, {
      "left" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "right" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "info" : "ThrowStatement[136658-136733]:ThrowStatement[136801-136876]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[136761-136800]:VariableDeclarationStatement[136904-136943]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[136813-136862]:VariableDeclarationStatement[136956-137005]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[136875-137040]:TryStatement[137018-137183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136879-136962]:Block[137022-137105]"
    }, {
      "left" : "userActivityInternal(eventTime, event, flags, uid);",
      "right" : "userActivityInternal(eventTime, event, flags, uid);",
      "info" : "ExpressionStatement[136897-136948]:ExpressionStatement[137040-137091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136971-137040]:Block[137114-137183]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[136989-137026]:ExpressionStatement[137132-137169]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[137060-137069]:MarkerAnnotation[137203-137212]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[137070-137084]:LineComment[137213-137227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[137093-137099]:Modifier[137236-137242]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[137100-137104]:PrimitiveType[137243-137247]"
    }, {
      "left" : "setKeyboardVisibility",
      "right" : "setKeyboardVisibility",
      "info" : "SimpleName[137105-137126]:SimpleName[137248-137269]"
    }, {
      "left" : "boolean visible",
      "right" : "boolean visible",
      "info" : "SingleVariableDeclaration[137127-137142]:SingleVariableDeclaration[137270-137285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137144-137836]:Block[137287-137979]"
    }, {
      "left" : "synchronized (mLock) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"setKeyboardVisibility: \" + visible);\n                }\n                if (mKeyboardVisible != visible) {\n                    mKeyboardVisible = visible;\n                    if (!visible) {\n                        // If hiding keyboard, turn off leds\n                        setKeyboardLight(false, 1);\n                        setKeyboardLight(false, 2);\n                    }\n                    synchronized (mLock) {\n                        mDirty |= DIRTY_USER_ACTIVITY;\n                        updatePowerStateLocked();\n                    }\n                }\n            }",
      "right" : "synchronized (mLock) {\n                if (DEBUG_SPEW) {\n                    Slog.d(TAG, \"setKeyboardVisibility: \" + visible);\n                }\n                if (mKeyboardVisible != visible) {\n                    mKeyboardVisible = visible;\n                    if (!visible) {\n                        // If hiding keyboard, turn off leds\n                        setKeyboardLight(false, 1);\n                        setKeyboardLight(false, 2);\n                    }\n                    synchronized (mLock) {\n                        mDirty |= DIRTY_USER_ACTIVITY;\n                        updatePowerStateLocked();\n                    }\n                }\n            }",
      "info" : "SynchronizedStatement[137158-137826]:SynchronizedStatement[137301-137969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137179-137826]:Block[137322-137969]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[137197-137302]:IfStatement[137340-137445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137213-137302]:Block[137356-137445]"
    }, {
      "left" : "Slog.d(TAG, \"setKeyboardVisibility: \" + visible);",
      "right" : "Slog.d(TAG, \"setKeyboardVisibility: \" + visible);",
      "info" : "ExpressionStatement[137235-137284]:ExpressionStatement[137378-137427]"
    }, {
      "left" : "if (mKeyboardVisible != visible)",
      "right" : "if (mKeyboardVisible != visible)",
      "info" : "IfStatement[137319-137812]:IfStatement[137462-137955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137352-137812]:Block[137495-137955]"
    }, {
      "left" : "mKeyboardVisible = visible;",
      "right" : "mKeyboardVisible = visible;",
      "info" : "ExpressionStatement[137374-137401]:ExpressionStatement[137517-137544]"
    }, {
      "left" : "if (!visible)",
      "right" : "if (!visible)",
      "info" : "IfStatement[137422-137624]:IfStatement[137565-137767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137436-137624]:Block[137579-137767]"
    }, {
      "left" : "setKeyboardLight(false, 1);",
      "right" : "setKeyboardLight(false, 1);",
      "info" : "ExpressionStatement[137523-137550]:ExpressionStatement[137666-137693]"
    }, {
      "left" : "setKeyboardLight(false, 2);",
      "right" : "setKeyboardLight(false, 2);",
      "info" : "ExpressionStatement[137575-137602]:ExpressionStatement[137718-137745]"
    }, {
      "left" : "synchronized (mLock) {\n                        mDirty |= DIRTY_USER_ACTIVITY;\n                        updatePowerStateLocked();\n                    }",
      "right" : "synchronized (mLock) {\n                        mDirty |= DIRTY_USER_ACTIVITY;\n                        updatePowerStateLocked();\n                    }",
      "info" : "SynchronizedStatement[137645-137794]:SynchronizedStatement[137788-137937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137666-137794]:Block[137809-137937]"
    }, {
      "left" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "right" : "mDirty |= DIRTY_USER_ACTIVITY;",
      "info" : "ExpressionStatement[137692-137722]:ExpressionStatement[137835-137865]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[137747-137772]:ExpressionStatement[137890-137915]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[137846-137855]:MarkerAnnotation[137989-137998]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[137856-137870]:LineComment[137999-138013]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[137879-137885]:Modifier[138022-138028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[137886-137890]:PrimitiveType[138029-138033]"
    }, {
      "left" : "setKeyboardLight",
      "right" : "setKeyboardLight",
      "info" : "SimpleName[137891-137907]:SimpleName[138034-138050]"
    }, {
      "left" : "boolean on",
      "right" : "boolean on",
      "info" : "SingleVariableDeclaration[137908-137918]:SingleVariableDeclaration[138051-138061]"
    }, {
      "left" : "int key",
      "right" : "int key",
      "info" : "SingleVariableDeclaration[137920-137927]:SingleVariableDeclaration[138063-138070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137929-138293]:Block[138072-138436]"
    }, {
      "left" : "if (key == 1)",
      "right" : "if (key == 1)",
      "info" : "IfStatement[137943-138283]:IfStatement[138086-138426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137957-138112]:Block[138100-138255]"
    }, {
      "left" : "if (on)",
      "right" : "if (on)",
      "info" : "IfStatement[137975-138098]:IfStatement[138118-138241]"
    }, {
      "left" : "mCapsLight.setColor(0x00ffffff);",
      "right" : "mCapsLight.setColor(0x00ffffff);",
      "info" : "ExpressionStatement[138003-138035]:ExpressionStatement[138146-138178]"
    }, {
      "left" : "mCapsLight.turnOff();",
      "right" : "mCapsLight.turnOff();",
      "info" : "ExpressionStatement[138077-138098]:ExpressionStatement[138220-138241]"
    }, {
      "left" : "if (key == 2)",
      "right" : "if (key == 2)",
      "info" : "IfStatement[138118-138283]:IfStatement[138261-138426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138132-138283]:Block[138275-138426]"
    }, {
      "left" : "if (on)",
      "right" : "if (on)",
      "info" : "IfStatement[138150-138269]:IfStatement[138293-138412]"
    }, {
      "left" : "mFnLight.setColor(0x00ffffff);",
      "right" : "mFnLight.setColor(0x00ffffff);",
      "info" : "ExpressionStatement[138178-138208]:ExpressionStatement[138321-138351]"
    }, {
      "left" : "mFnLight.turnOff();",
      "right" : "mFnLight.turnOff();",
      "info" : "ExpressionStatement[138250-138269]:ExpressionStatement[138393-138412]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[138344-138351]:Modifier[138487-138494]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[138352-138356]:PrimitiveType[138495-138499]"
    }, {
      "left" : "wakeUp",
      "right" : "wakeUp",
      "info" : "SimpleName[138357-138363]:SimpleName[138500-138506]"
    }, {
      "left" : "final long eventTime",
      "right" : "final long eventTime",
      "info" : "SingleVariableDeclaration[138364-138384]:SingleVariableDeclaration[138507-138527]"
    }, {
      "left" : "boolean checkProximity",
      "right" : "boolean checkProximity",
      "info" : "SingleVariableDeclaration[138386-138408]:SingleVariableDeclaration[138529-138551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138410-139512]:Block[138553-139655]"
    }, {
      "left" : "if (eventTime > SystemClock.uptimeMillis())",
      "right" : "if (eventTime > SystemClock.uptimeMillis())",
      "info" : "IfStatement[138424-138575]:IfStatement[138567-138718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138468-138575]:Block[138611-138718]"
    }, {
      "left" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "right" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "info" : "ThrowStatement[138486-138561]:ThrowStatement[138629-138704]"
    }, {
      "left" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1)",
      "right" : "if (SystemProperties.getInt(\"sys.quickboot.enable\", 0) == 1)",
      "info" : "IfStatement[138645-138883]:IfStatement[138788-139026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138706-138883]:Block[138849-139026]"
    }, {
      "left" : "if (!isQuickBootCall())",
      "right" : "if (!isQuickBootCall())",
      "info" : "IfStatement[138724-138869]:IfStatement[138867-139012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138748-138869]:Block[138891-139012]"
    }, {
      "left" : "Slog.d(TAG, \"ignore wakeup request under QuickBoot\");",
      "right" : "Slog.d(TAG, \"ignore wakeup request under QuickBoot\");",
      "info" : "ExpressionStatement[138770-138823]:ExpressionStatement[138913-138966]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[138844-138851]:ReturnStatement[138987-138994]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[138897-139006]:ExpressionStatement[139040-139149]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[139020-139059]:VariableDeclarationStatement[139163-139202]"
    }, {
      "left" : "Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    final long ident = Binder.clearCallingIdentity();\n                    try {\n                        wakeUpInternal(eventTime, uid);\n                    } finally {\n                        Binder.restoreCallingIdentity(ident);\n                    }\n                }\n            };",
      "right" : "Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    final long ident = Binder.clearCallingIdentity();\n                    try {\n                        wakeUpInternal(eventTime, uid);\n                    } finally {\n                        Binder.restoreCallingIdentity(ident);\n                    }\n                }\n            };",
      "info" : "VariableDeclarationStatement[139072-139464]:VariableDeclarationStatement[139215-139607]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[139118-139127]:MarkerAnnotation[139261-139270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[139144-139150]:Modifier[139287-139293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[139151-139155]:PrimitiveType[139294-139298]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[139156-139159]:SimpleName[139299-139302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139162-139449]:Block[139305-139592]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[139184-139233]:VariableDeclarationStatement[139327-139376]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[139254-139431]:TryStatement[139397-139574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139258-139337]:Block[139401-139480]"
    }, {
      "left" : "wakeUpInternal(eventTime, uid);",
      "right" : "wakeUpInternal(eventTime, uid);",
      "info" : "ExpressionStatement[139284-139315]:ExpressionStatement[139427-139458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139346-139431]:Block[139489-139574]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[139372-139409]:ExpressionStatement[139515-139552]"
    }, {
      "left" : "runWithProximityCheck(r);",
      "right" : "runWithProximityCheck(r);",
      "info" : "ExpressionStatement[139477-139502]:ExpressionStatement[139620-139645]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[139522-139529]:Modifier[139665-139672]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[139530-139534]:PrimitiveType[139673-139677]"
    }, {
      "left" : "runWithProximityCheck",
      "right" : "runWithProximityCheck",
      "info" : "SimpleName[139535-139556]:SimpleName[139678-139699]"
    }, {
      "left" : "Runnable r",
      "right" : "Runnable r",
      "info" : "SingleVariableDeclaration[139557-139567]:SingleVariableDeclaration[139700-139710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139569-140353]:Block[139712-140496]"
    }, {
      "left" : "if (mHandler.hasMessages(MSG_WAKE_UP))",
      "right" : "if (mHandler.hasMessages(MSG_WAKE_UP))",
      "info" : "IfStatement[139583-139715]:IfStatement[139726-139858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139622-139715]:Block[139765-139858]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[139694-139701]:ReturnStatement[139837-139844]"
    }, {
      "left" : "TelephonyManager tm = (TelephonyManager)mContext.getSystemService(\n                    Context.TELEPHONY_SERVICE);",
      "right" : "TelephonyManager tm = (TelephonyManager)mContext.getSystemService(\n                    Context.TELEPHONY_SERVICE);",
      "info" : "VariableDeclarationStatement[139729-139843]:VariableDeclarationStatement[139872-139986]"
    }, {
      "left" : "boolean hasIncomingCall = tm.getCallState() == TelephonyManager.CALL_STATE_RINGING;",
      "right" : "boolean hasIncomingCall = tm.getCallState() == TelephonyManager.CALL_STATE_RINGING;",
      "info" : "VariableDeclarationStatement[139856-139939]:VariableDeclarationStatement[139999-140082]"
    }, {
      "left" : "if (mProximityWakeSupported && mProximityWakeEnabled && mProximitySensor != null\n                    && !hasIncomingCall)",
      "right" : "if (mProximityWakeSupported && mProximityWakeEnabled && mProximitySensor != null\n                    && !hasIncomingCall)",
      "info" : "IfStatement[139953-140343]:IfStatement[140096-140486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140075-140297]:Block[140218-140440]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_WAKE_UP);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_WAKE_UP);",
      "info" : "VariableDeclarationStatement[140093-140143]:VariableDeclarationStatement[140236-140286]"
    }, {
      "left" : "msg.obj = r;",
      "right" : "msg.obj = r;",
      "info" : "ExpressionStatement[140160-140172]:ExpressionStatement[140303-140315]"
    }, {
      "left" : "mHandler.sendMessageDelayed(msg, mProximityTimeOut);",
      "right" : "mHandler.sendMessageDelayed(msg, mProximityTimeOut);",
      "info" : "ExpressionStatement[140189-140241]:ExpressionStatement[140332-140384]"
    }, {
      "left" : "runPostProximityCheck(r);",
      "right" : "runPostProximityCheck(r);",
      "info" : "ExpressionStatement[140258-140283]:ExpressionStatement[140401-140426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140303-140343]:Block[140446-140486]"
    }, {
      "left" : "r.run();",
      "right" : "r.run();",
      "info" : "ExpressionStatement[140321-140329]:ExpressionStatement[140464-140472]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[140363-140370]:Modifier[140506-140513]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[140371-140375]:PrimitiveType[140514-140518]"
    }, {
      "left" : "runPostProximityCheck",
      "right" : "runPostProximityCheck",
      "info" : "SimpleName[140376-140397]:SimpleName[140519-140540]"
    }, {
      "left" : "final Runnable r",
      "right" : "final Runnable r",
      "info" : "SingleVariableDeclaration[140398-140414]:SingleVariableDeclaration[140541-140557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140416-141573]:Block[140559-141868]"
    }, {
      "left" : "if (mSensorManager == null)",
      "right" : "if (mSensorManager == null)",
      "info" : "IfStatement[140430-140522]:IfStatement[140573-140665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140458-140522]:Block[140601-140665]"
    }, {
      "left" : "r.run();",
      "right" : "r.run();",
      "info" : "ExpressionStatement[140476-140484]:ExpressionStatement[140619-140627]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[140501-140508]:ReturnStatement[140644-140651]"
    }, {
      "left" : "mProximityWakeLock.acquire();",
      "right" : "mProximityWakeLock.acquire();",
      "info" : "ExpressionStatement[140535-140564]:ExpressionStatement[140730-140759]"
    }, {
      "left" : "mProximityListener = new SensorEventListener() {\n                @Override\n                public void onSensorChanged(SensorEvent event) {\n                    cleanupProximity();\n                    if (!mHandler.hasMessages(MSG_WAKE_UP)) {\n                        Slog.w(TAG, \"The proximity sensor took too long, wake event already triggered!\");\n                        return;\n                    }\n                    mHandler.removeMessages(MSG_WAKE_UP);\n                    float distance = event.values[0];\n                    if (distance >= PROXIMITY_NEAR_THRESHOLD ||\n                            distance >= mProximitySensor.getMaximumRange()) {\n                        r.run();\n                    }\n                }\n\n                @Override\n                public void onAccuracyChanged(Sensor sensor, int accuracy) {}\n            };",
      "right" : "mProximityListener = new SensorEventListener() {\n                    @Override\n                    public void onSensorChanged(SensorEvent event) {\n                        cleanupProximityLocked();\n                        if (!mHandler.hasMessages(MSG_WAKE_UP)) {\n                            Slog.w(TAG, \"The proximity sensor took too long, wake event already triggered!\");\n                            return;\n                        }\n                        mHandler.removeMessages(MSG_WAKE_UP);\n                        float distance = event.values[0];\n                        if (distance >= PROXIMITY_NEAR_THRESHOLD ||\n                                distance >= mProximitySensor.getMaximumRange()) {\n                            r.run();\n                        }\n                    }\n\n                    @Override\n                    public void onAccuracyChanged(Sensor sensor, int accuracy) {}\n                };",
      "info" : "ExpressionStatement[140577-141425]:ExpressionStatement[140776-141698]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[140642-140651]:MarkerAnnotation[140845-140854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[140668-140674]:Modifier[140875-140881]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[140675-140679]:PrimitiveType[140882-140886]"
    }, {
      "left" : "onSensorChanged",
      "right" : "onSensorChanged",
      "info" : "SimpleName[140680-140695]:SimpleName[140887-140902]"
    }, {
      "left" : "SensorEvent event",
      "right" : "SensorEvent event",
      "info" : "SingleVariableDeclaration[140696-140713]:SingleVariableDeclaration[140903-140920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140715-141305]:Block[140922-141566]"
    }, {
      "left" : "cleanupProximity",
      "right" : "cleanupProximityLocked",
      "info" : "SimpleName[140737-140753]:SimpleName[140948-140970]"
    }, {
      "left" : "cleanupProximity();",
      "right" : "cleanupProximityLocked();",
      "info" : "ExpressionStatement[140737-140756]:ExpressionStatement[140948-140973]"
    }, {
      "left" : "if (!mHandler.hasMessages(MSG_WAKE_UP))",
      "right" : "if (!mHandler.hasMessages(MSG_WAKE_UP))",
      "info" : "IfStatement[140777-140978]:IfStatement[140998-141211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140817-140978]:Block[141038-141211]"
    }, {
      "left" : "Slog.w(TAG, \"The proximity sensor took too long, wake event already triggered!\");",
      "right" : "Slog.w(TAG, \"The proximity sensor took too long, wake event already triggered!\");",
      "info" : "ExpressionStatement[140843-140924]:ExpressionStatement[141068-141149]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[140949-140956]:ReturnStatement[141178-141185]"
    }, {
      "left" : "mHandler.removeMessages(MSG_WAKE_UP);",
      "right" : "mHandler.removeMessages(MSG_WAKE_UP);",
      "info" : "ExpressionStatement[140999-141036]:ExpressionStatement[141236-141273]"
    }, {
      "left" : "float distance = event.values[0];",
      "right" : "float distance = event.values[0];",
      "info" : "VariableDeclarationStatement[141057-141090]:VariableDeclarationStatement[141298-141331]"
    }, {
      "left" : "if (distance >= PROXIMITY_NEAR_THRESHOLD ||\n                            distance >= mProximitySensor.getMaximumRange())",
      "right" : "if (distance >= PROXIMITY_NEAR_THRESHOLD ||\n                                distance >= mProximitySensor.getMaximumRange())",
      "info" : "IfStatement[141111-141287]:IfStatement[141356-141544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141231-141287]:Block[141480-141544]"
    }, {
      "left" : "r.run();",
      "right" : "r.run();",
      "info" : "ExpressionStatement[141257-141265]:ExpressionStatement[141510-141518]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[141323-141332]:MarkerAnnotation[141588-141597]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[141349-141355]:Modifier[141618-141624]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[141356-141360]:PrimitiveType[141625-141629]"
    }, {
      "left" : "onAccuracyChanged",
      "right" : "onAccuracyChanged",
      "info" : "SimpleName[141361-141378]:SimpleName[141630-141647]"
    }, {
      "left" : "Sensor sensor",
      "right" : "Sensor sensor",
      "info" : "SingleVariableDeclaration[141379-141392]:SingleVariableDeclaration[141648-141661]"
    }, {
      "left" : "int accuracy",
      "right" : "int accuracy",
      "info" : "SingleVariableDeclaration[141394-141406]:SingleVariableDeclaration[141663-141675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141408-141410]:Block[141677-141679]"
    }, {
      "left" : "mSensorManager.registerListener(mProximityListener,\n                   mProximitySensor, SensorManager.SENSOR_DELAY_FASTEST);",
      "right" : "mSensorManager.registerListener(mProximityListener,\n                       mProximitySensor, SensorManager.SENSOR_DELAY_FASTEST);",
      "info" : "ExpressionStatement[141438-141563]:ExpressionStatement[141715-141844]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[141583-141592]:MarkerAnnotation[141878-141887]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[141593-141607]:LineComment[141888-141902]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[141616-141622]:Modifier[141911-141917]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[141623-141627]:PrimitiveType[141918-141922]"
    }, {
      "left" : "wakeUpWithProximityCheck",
      "right" : "wakeUpWithProximityCheck",
      "info" : "SimpleName[141628-141652]:SimpleName[141923-141947]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[141653-141667]:SingleVariableDeclaration[141948-141962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141669-141717]:Block[141964-142012]"
    }, {
      "left" : "wakeUp(eventTime, true);",
      "right" : "wakeUp(eventTime, true);",
      "info" : "ExpressionStatement[141683-141707]:ExpressionStatement[141978-142002]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[141727-141736]:MarkerAnnotation[142022-142031]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[141737-141751]:LineComment[142032-142046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[141760-141766]:Modifier[142055-142061]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[141767-141771]:PrimitiveType[142062-142066]"
    }, {
      "left" : "wakeUp",
      "right" : "wakeUp",
      "info" : "SimpleName[141772-141778]:SimpleName[142067-142073]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[141779-141793]:SingleVariableDeclaration[142074-142088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141795-141844]:Block[142090-142139]"
    }, {
      "left" : "wakeUp(eventTime, false);",
      "right" : "wakeUp(eventTime, false);",
      "info" : "ExpressionStatement[141809-141834]:ExpressionStatement[142104-142129]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[141854-141863]:MarkerAnnotation[142149-142158]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[141864-141878]:LineComment[142159-142173]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[141887-141893]:Modifier[142182-142188]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[141894-141898]:PrimitiveType[142189-142193]"
    }, {
      "left" : "goToSleep",
      "right" : "goToSleep",
      "info" : "SimpleName[141899-141908]:SimpleName[142194-142203]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[141909-141923]:SingleVariableDeclaration[142204-142218]"
    }, {
      "left" : "int reason",
      "right" : "int reason",
      "info" : "SingleVariableDeclaration[141925-141935]:SingleVariableDeclaration[142220-142230]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[141937-141946]:SingleVariableDeclaration[142232-142241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141948-142537]:Block[142243-142832]"
    }, {
      "left" : "if (eventTime > SystemClock.uptimeMillis())",
      "right" : "if (eventTime > SystemClock.uptimeMillis())",
      "info" : "IfStatement[141962-142113]:IfStatement[142257-142408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142006-142113]:Block[142301-142408]"
    }, {
      "left" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "right" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "info" : "ThrowStatement[142024-142099]:ThrowStatement[142319-142394]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[142127-142236]:ExpressionStatement[142422-142531]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[142250-142289]:VariableDeclarationStatement[142545-142584]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[142302-142351]:VariableDeclarationStatement[142597-142646]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[142364-142527]:TryStatement[142659-142822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142368-142449]:Block[142663-142744]"
    }, {
      "left" : "goToSleepInternal(eventTime, reason, flags, uid);",
      "right" : "goToSleepInternal(eventTime, reason, flags, uid);",
      "info" : "ExpressionStatement[142386-142435]:ExpressionStatement[142681-142730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142458-142527]:Block[142753-142822]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[142476-142513]:ExpressionStatement[142771-142808]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[142547-142556]:MarkerAnnotation[142842-142851]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[142557-142571]:LineComment[142852-142866]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[142580-142586]:Modifier[142875-142881]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[142587-142591]:PrimitiveType[142882-142886]"
    }, {
      "left" : "nap",
      "right" : "nap",
      "info" : "SimpleName[142592-142595]:SimpleName[142887-142890]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[142596-142610]:SingleVariableDeclaration[142891-142905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142612-143180]:Block[142907-143475]"
    }, {
      "left" : "if (eventTime > SystemClock.uptimeMillis())",
      "right" : "if (eventTime > SystemClock.uptimeMillis())",
      "info" : "IfStatement[142626-142777]:IfStatement[142921-143072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142670-142777]:Block[142965-143072]"
    }, {
      "left" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "right" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "info" : "ThrowStatement[142688-142763]:ThrowStatement[142983-143058]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[142791-142900]:ExpressionStatement[143086-143195]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[142914-142953]:VariableDeclarationStatement[143209-143248]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[142966-143015]:VariableDeclarationStatement[143261-143310]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[143028-143170]:TryStatement[143323-143465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143032-143092]:Block[143327-143387]"
    }, {
      "left" : "napInternal(eventTime, uid);",
      "right" : "napInternal(eventTime, uid);",
      "info" : "ExpressionStatement[143050-143078]:ExpressionStatement[143345-143373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143101-143170]:Block[143396-143465]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[143119-143156]:ExpressionStatement[143414-143451]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[143190-143199]:MarkerAnnotation[143485-143494]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[143200-143214]:LineComment[143495-143509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[143223-143229]:Modifier[143518-143524]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[143230-143237]:PrimitiveType[143525-143532]"
    }, {
      "left" : "isInteractive",
      "right" : "isInteractive",
      "info" : "SimpleName[143238-143251]:SimpleName[143533-143546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143254-143485]:Block[143549-143780]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[143268-143317]:VariableDeclarationStatement[143563-143612]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[143330-143475]:TryStatement[143625-143770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143334-143397]:Block[143629-143692]"
    }, {
      "left" : "return isInteractiveInternal();",
      "right" : "return isInteractiveInternal();",
      "info" : "ReturnStatement[143352-143383]:ReturnStatement[143647-143678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143406-143475]:Block[143701-143770]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[143424-143461]:ExpressionStatement[143719-143756]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[143495-143504]:MarkerAnnotation[143790-143799]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[143505-143519]:LineComment[143800-143814]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[143528-143534]:Modifier[143823-143829]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[143535-143542]:PrimitiveType[143830-143837]"
    }, {
      "left" : "isPowerSaveMode",
      "right" : "isPowerSaveMode",
      "info" : "SimpleName[143543-143558]:SimpleName[143838-143853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143561-143793]:Block[143856-144088]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[143575-143624]:VariableDeclarationStatement[143870-143919]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[143637-143783]:TryStatement[143932-144078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143641-143705]:Block[143936-144000]"
    }, {
      "left" : "return isLowPowerModeInternal();",
      "right" : "return isLowPowerModeInternal();",
      "info" : "ReturnStatement[143659-143691]:ReturnStatement[143954-143986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143714-143783]:Block[144009-144078]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[143732-143769]:ExpressionStatement[144027-144064]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[143803-143812]:MarkerAnnotation[144098-144107]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[143813-143827]:LineComment[144108-144122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[143836-143842]:Modifier[144131-144137]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[143843-143850]:PrimitiveType[144138-144145]"
    }, {
      "left" : "setPowerSaveMode",
      "right" : "setPowerSaveMode",
      "info" : "SimpleName[143851-143867]:SimpleName[144146-144162]"
    }, {
      "left" : "boolean mode",
      "right" : "boolean mode",
      "info" : "SingleVariableDeclaration[143868-143880]:SingleVariableDeclaration[144163-144175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143882-144506]:Block[144177-144801]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[143896-144005]:ExpressionStatement[144191-144300]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[144018-144067]:VariableDeclarationStatement[144313-144362]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[144080-144496]:TryStatement[144375-144791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144084-144418]:Block[144379-144713]"
    }, {
      "left" : "boolean changed = setLowPowerModeInternal(mode);",
      "right" : "boolean changed = setLowPowerModeInternal(mode);",
      "info" : "VariableDeclarationStatement[144102-144150]:VariableDeclarationStatement[144397-144445]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[144167-144372]:IfStatement[144462-144667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144180-144372]:Block[144475-144667]"
    }, {
      "left" : "mPerformanceManager.setPowerProfile(mLowPowerModeEnabled ?\n                            PowerManager.PROFILE_POWER_SAVE : PowerManager.PROFILE_BALANCED);",
      "right" : "mPerformanceManager.setPowerProfile(mLowPowerModeEnabled ?\n                            PowerManager.PROFILE_POWER_SAVE : PowerManager.PROFILE_BALANCED);",
      "info" : "ExpressionStatement[144202-144354]:ExpressionStatement[144497-144649]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[144389-144404]:ReturnStatement[144684-144699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144427-144496]:Block[144722-144791]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[144445-144482]:ExpressionStatement[144740-144777]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[144516-144525]:MarkerAnnotation[144811-144820]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[144526-144540]:LineComment[144821-144835]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[144549-144555]:Modifier[144844-144850]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[144556-144563]:PrimitiveType[144851-144858]"
    }, {
      "left" : "setPowerProfile",
      "right" : "setPowerProfile",
      "info" : "SimpleName[144564-144579]:SimpleName[144859-144874]"
    }, {
      "left" : "String profile",
      "right" : "String profile",
      "info" : "SingleVariableDeclaration[144580-144594]:SingleVariableDeclaration[144875-144889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144596-145035]:Block[144891-145330]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[144610-144698]:ExpressionStatement[144905-144993]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[144711-144760]:VariableDeclarationStatement[145006-145055]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[144773-144960]:TryStatement[145068-145255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144777-144882]:Block[145072-145177]"
    }, {
      "left" : "setLowPowerModeInternal(PowerManager.PROFILE_POWER_SAVE.equals(profile));",
      "right" : "setLowPowerModeInternal(PowerManager.PROFILE_POWER_SAVE.equals(profile));",
      "info" : "ExpressionStatement[144795-144868]:ExpressionStatement[145090-145163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144891-144960]:Block[145186-145255]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[144909-144946]:ExpressionStatement[145204-145241]"
    }, {
      "left" : "return mPerformanceManager.setPowerProfile(profile);",
      "right" : "return mPerformanceManager.setPowerProfile(profile);",
      "info" : "ReturnStatement[144973-145025]:ReturnStatement[145268-145320]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[145045-145054]:MarkerAnnotation[145340-145349]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[145063-145069]:Modifier[145358-145364]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[145070-145076]:SimpleType[145365-145371]"
    }, {
      "left" : "getPowerProfile",
      "right" : "getPowerProfile",
      "info" : "SimpleName[145077-145092]:SimpleName[145372-145387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145095-145164]:Block[145390-145459]"
    }, {
      "left" : "return mPerformanceManager.getPowerProfile();",
      "right" : "return mPerformanceManager.getPowerProfile();",
      "info" : "ReturnStatement[145109-145154]:ReturnStatement[145404-145449]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[145315-145324]:MarkerAnnotation[145610-145619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[145333-145339]:Modifier[145628-145634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[145340-145344]:PrimitiveType[145635-145639]"
    }, {
      "left" : "cpuBoost",
      "right" : "cpuBoost",
      "info" : "SimpleName[145345-145353]:SimpleName[145640-145648]"
    }, {
      "left" : "int duration",
      "right" : "int duration",
      "info" : "SingleVariableDeclaration[145354-145366]:SingleVariableDeclaration[145649-145661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145368-145843]:Block[145663-146138]"
    }, {
      "left" : "if (duration > 0 && duration <= MAX_CPU_BOOST_TIME)",
      "right" : "if (duration > 0 && duration <= MAX_CPU_BOOST_TIME)",
      "info" : "IfStatement[145382-145833]:IfStatement[145677-146128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145434-145744]:Block[145729-146039]"
    }, {
      "left" : "String profile = mPerformanceManager.getPowerProfile();",
      "right" : "String profile = mPerformanceManager.getPowerProfile();",
      "info" : "VariableDeclarationStatement[145523-145578]:VariableDeclarationStatement[145818-145873]"
    }, {
      "left" : "if (profile == null || profile.equals(PowerManager.PROFILE_BALANCED))",
      "right" : "if (profile == null || profile.equals(PowerManager.PROFILE_BALANCED))",
      "info" : "IfStatement[145595-145730]:IfStatement[145890-146025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145665-145730]:Block[145960-146025]"
    }, {
      "left" : "nativeCpuBoost(duration);",
      "right" : "nativeCpuBoost(duration);",
      "info" : "ExpressionStatement[145687-145712]:ExpressionStatement[145982-146007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145750-145833]:Block[146045-146128]"
    }, {
      "left" : "Slog.e(TAG, \"Invalid boost duration: \" + duration);",
      "right" : "Slog.e(TAG, \"Invalid boost duration: \" + duration);",
      "info" : "ExpressionStatement[145768-145819]:ExpressionStatement[146063-146114]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[145853-145862]:MarkerAnnotation[146148-146157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[145871-145877]:Modifier[146166-146172]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[145878-145882]:PrimitiveType[146173-146177]"
    }, {
      "left" : "activityResumed",
      "right" : "activityResumed",
      "info" : "SimpleName[145883-145898]:SimpleName[146178-146193]"
    }, {
      "left" : "String componentName",
      "right" : "String componentName",
      "info" : "SingleVariableDeclaration[145899-145919]:SingleVariableDeclaration[146194-146214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145921-145996]:Block[146216-146291]"
    }, {
      "left" : "mPerformanceManager.activityResumed(componentName);",
      "right" : "mPerformanceManager.activityResumed(componentName);",
      "info" : "ExpressionStatement[145935-145986]:ExpressionStatement[146230-146281]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[146308-146317]:MarkerAnnotation[146603-146612]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[146318-146332]:LineComment[146613-146627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[146341-146347]:Modifier[146636-146642]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[146348-146352]:PrimitiveType[146643-146647]"
    }, {
      "left" : "reboot",
      "right" : "reboot",
      "info" : "SimpleName[146353-146359]:SimpleName[146648-146654]"
    }, {
      "left" : "boolean confirm",
      "right" : "boolean confirm",
      "info" : "SingleVariableDeclaration[146360-146375]:SingleVariableDeclaration[146655-146670]"
    }, {
      "left" : "String reason",
      "right" : "String reason",
      "info" : "SingleVariableDeclaration[146377-146390]:SingleVariableDeclaration[146672-146685]"
    }, {
      "left" : "boolean wait",
      "right" : "boolean wait",
      "info" : "SingleVariableDeclaration[146392-146404]:SingleVariableDeclaration[146687-146699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146406-146935]:Block[146701-147230]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "info" : "ExpressionStatement[146420-146502]:ExpressionStatement[146715-146797]"
    }, {
      "left" : "if (PowerManager.REBOOT_RECOVERY.equals(reason))",
      "right" : "if (PowerManager.REBOOT_RECOVERY.equals(reason))",
      "info" : "IfStatement[146515-146680]:IfStatement[146810-146975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146564-146680]:Block[146859-146975]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.RECOVERY, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.RECOVERY, null);",
      "info" : "ExpressionStatement[146582-146666]:ExpressionStatement[146877-146961]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[146694-146743]:VariableDeclarationStatement[146989-147038]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[146756-146925]:TryStatement[147051-147220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146760-146847]:Block[147055-147142]"
    }, {
      "left" : "shutdownOrRebootInternal(false, confirm, reason, wait);",
      "right" : "shutdownOrRebootInternal(false, confirm, reason, wait);",
      "info" : "ExpressionStatement[146778-146833]:ExpressionStatement[147073-147128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146856-146925]:Block[147151-147220]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[146874-146911]:ExpressionStatement[147169-147206]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[147185-147194]:MarkerAnnotation[147480-147489]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[147195-147209]:LineComment[147490-147504]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[147218-147224]:Modifier[147513-147519]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[147225-147229]:PrimitiveType[147520-147524]"
    }, {
      "left" : "shutdown",
      "right" : "shutdown",
      "info" : "SimpleName[147230-147238]:SimpleName[147525-147533]"
    }, {
      "left" : "boolean confirm",
      "right" : "boolean confirm",
      "info" : "SingleVariableDeclaration[147239-147254]:SingleVariableDeclaration[147534-147549]"
    }, {
      "left" : "boolean wait",
      "right" : "boolean wait",
      "info" : "SingleVariableDeclaration[147256-147268]:SingleVariableDeclaration[147551-147563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147270-147618]:Block[147565-147913]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "info" : "ExpressionStatement[147284-147366]:ExpressionStatement[147579-147661]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[147380-147429]:VariableDeclarationStatement[147675-147724]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[147442-147608]:TryStatement[147737-147903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147446-147530]:Block[147741-147825]"
    }, {
      "left" : "shutdownOrRebootInternal(true, confirm, null, wait);",
      "right" : "shutdownOrRebootInternal(true, confirm, null, wait);",
      "info" : "ExpressionStatement[147464-147516]:ExpressionStatement[147759-147811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147539-147608]:Block[147834-147903]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[147557-147594]:ExpressionStatement[147852-147889]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[147816-147825]:MarkerAnnotation[148111-148120]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[147826-147840]:LineComment[148121-148135]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[147849-147855]:Modifier[148144-148150]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[147856-147860]:PrimitiveType[148151-148155]"
    }, {
      "left" : "crash",
      "right" : "crash",
      "info" : "SimpleName[147861-147866]:SimpleName[148156-148161]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[147867-147881]:SingleVariableDeclaration[148162-148176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147883-148202]:Block[148178-148497]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);",
      "info" : "ExpressionStatement[147897-147979]:ExpressionStatement[148192-148274]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[147993-148042]:VariableDeclarationStatement[148288-148337]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[148055-148192]:TryStatement[148350-148487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148059-148114]:Block[148354-148409]"
    }, {
      "left" : "crashInternal(message);",
      "right" : "crashInternal(message);",
      "info" : "ExpressionStatement[148077-148100]:ExpressionStatement[148372-148395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148123-148192]:Block[148418-148487]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[148141-148178]:ExpressionStatement[148436-148473]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[148977-148986]:MarkerAnnotation[149272-149281]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[148987-149001]:LineComment[149282-149296]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[149010-149016]:Modifier[149305-149311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[149017-149021]:PrimitiveType[149312-149316]"
    }, {
      "left" : "setStayOnSetting",
      "right" : "setStayOnSetting",
      "info" : "SimpleName[149022-149038]:SimpleName[149317-149333]"
    }, {
      "left" : "int val",
      "right" : "int val",
      "info" : "SingleVariableDeclaration[149039-149046]:SingleVariableDeclaration[149334-149341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149048-149403]:Block[149343-149698]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.WRITE_SETTINGS, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.WRITE_SETTINGS, null);",
      "info" : "ExpressionStatement[149062-149173]:ExpressionStatement[149357-149468]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[149187-149236]:VariableDeclarationStatement[149482-149531]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[149249-149393]:TryStatement[149544-149688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149253-149315]:Block[149548-149610]"
    }, {
      "left" : "setStayOnSettingInternal(val);",
      "right" : "setStayOnSettingInternal(val);",
      "info" : "ExpressionStatement[149271-149301]:ExpressionStatement[149566-149596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149324-149393]:Block[149619-149688]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[149342-149379]:ExpressionStatement[149637-149674]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[149948-149957]:MarkerAnnotation[150243-150252]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[149958-149972]:LineComment[150253-150267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[149981-149987]:Modifier[150276-150282]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[149988-149992]:PrimitiveType[150283-150287]"
    }, {
      "left" : "setTemporaryScreenBrightnessSettingOverride",
      "right" : "setTemporaryScreenBrightnessSettingOverride",
      "info" : "SimpleName[149993-150036]:SimpleName[150288-150331]"
    }, {
      "left" : "int brightness",
      "right" : "int brightness",
      "info" : "SingleVariableDeclaration[150037-150051]:SingleVariableDeclaration[150332-150346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150053-150440]:Block[150348-150735]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[150067-150176]:ExpressionStatement[150362-150471]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[150190-150239]:VariableDeclarationStatement[150485-150534]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[150252-150430]:TryStatement[150547-150725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150256-150352]:Block[150551-150647]"
    }, {
      "left" : "setTemporaryScreenBrightnessSettingOverrideInternal(brightness);",
      "right" : "setTemporaryScreenBrightnessSettingOverrideInternal(brightness);",
      "info" : "ExpressionStatement[150274-150338]:ExpressionStatement[150569-150633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150361-150430]:Block[150656-150725]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[150379-150416]:ExpressionStatement[150674-150711]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[151041-151050]:MarkerAnnotation[151336-151345]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[151051-151065]:LineComment[151346-151360]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[151074-151080]:Modifier[151369-151375]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[151081-151085]:PrimitiveType[151376-151380]"
    }, {
      "left" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverride",
      "right" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverride",
      "info" : "SimpleName[151086-151143]:SimpleName[151381-151438]"
    }, {
      "left" : "float adj",
      "right" : "float adj",
      "info" : "SingleVariableDeclaration[151144-151153]:SingleVariableDeclaration[151439-151448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151155-151549]:Block[151450-151844]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[151169-151278]:ExpressionStatement[151464-151573]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[151292-151341]:VariableDeclarationStatement[151587-151636]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[151354-151539]:TryStatement[151649-151834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151358-151461]:Block[151653-151756]"
    }, {
      "left" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(adj);",
      "right" : "setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(adj);",
      "info" : "ExpressionStatement[151376-151447]:ExpressionStatement[151671-151742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151470-151539]:Block[151765-151834]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[151488-151525]:ExpressionStatement[151783-151820]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[151670-151679]:MarkerAnnotation[151965-151974]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[151680-151694]:LineComment[151975-151989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[151703-151709]:Modifier[151998-152004]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[151710-151714]:PrimitiveType[152005-152009]"
    }, {
      "left" : "setAttentionLight",
      "right" : "setAttentionLight",
      "info" : "SimpleName[151715-151732]:SimpleName[152010-152027]"
    }, {
      "left" : "boolean on",
      "right" : "boolean on",
      "info" : "SingleVariableDeclaration[151733-151743]:SingleVariableDeclaration[152028-152038]"
    }, {
      "left" : "int color",
      "right" : "int color",
      "info" : "SingleVariableDeclaration[151745-151754]:SingleVariableDeclaration[152040-152049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151756-152116]:Block[152051-152411]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[151770-151879]:ExpressionStatement[152065-152174]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[151893-151942]:VariableDeclarationStatement[152188-152237]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[151955-152106]:TryStatement[152250-152401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151959-152028]:Block[152254-152323]"
    }, {
      "left" : "setAttentionLightInternal(on, color);",
      "right" : "setAttentionLightInternal(on, color);",
      "info" : "ExpressionStatement[151977-152014]:ExpressionStatement[152272-152309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152037-152106]:Block[152332-152401]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[152055-152092]:ExpressionStatement[152350-152387]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[152126-152135]:MarkerAnnotation[152421-152430]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[152136-152150]:LineComment[152431-152445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[152159-152165]:Modifier[152454-152460]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[152166-152170]:PrimitiveType[152461-152465]"
    }, {
      "left" : "boostScreenBrightness",
      "right" : "boostScreenBrightness",
      "info" : "SimpleName[152171-152192]:SimpleName[152466-152487]"
    }, {
      "left" : "long eventTime",
      "right" : "long eventTime",
      "info" : "SingleVariableDeclaration[152193-152207]:SingleVariableDeclaration[152488-152502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152209-152795]:Block[152504-153090]"
    }, {
      "left" : "if (eventTime > SystemClock.uptimeMillis())",
      "right" : "if (eventTime > SystemClock.uptimeMillis())",
      "info" : "IfStatement[152223-152374]:IfStatement[152518-152669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152267-152374]:Block[152562-152669]"
    }, {
      "left" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "right" : "throw new IllegalArgumentException(\"event time must not be in the future\");",
      "info" : "ThrowStatement[152285-152360]:ThrowStatement[152580-152655]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(\n                    android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[152388-152497]:ExpressionStatement[152683-152792]"
    }, {
      "left" : "final int uid = Binder.getCallingUid();",
      "right" : "final int uid = Binder.getCallingUid();",
      "info" : "VariableDeclarationStatement[152511-152550]:VariableDeclarationStatement[152806-152845]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[152563-152612]:VariableDeclarationStatement[152858-152907]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[152625-152785]:TryStatement[152920-153080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152629-152707]:Block[152924-153002]"
    }, {
      "left" : "boostScreenBrightnessInternal(eventTime, uid);",
      "right" : "boostScreenBrightnessInternal(eventTime, uid);",
      "info" : "ExpressionStatement[152647-152693]:ExpressionStatement[152942-152988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152716-152785]:Block[153011-153080]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[152734-152771]:ExpressionStatement[153029-153066]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[152805-152814]:MarkerAnnotation[153100-153109]"
    }, {
      "left" : "// Binder call",
      "right" : "// Binder call",
      "info" : "LineComment[152815-152829]:LineComment[153110-153124]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[152838-152847]:Modifier[153133-153142]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[152848-152852]:PrimitiveType[153143-153147]"
    }, {
      "left" : "dump",
      "right" : "dump",
      "info" : "SimpleName[152853-152857]:SimpleName[153148-153152]"
    }, {
      "left" : "FileDescriptor fd",
      "right" : "FileDescriptor fd",
      "info" : "SingleVariableDeclaration[152858-152875]:SingleVariableDeclaration[153153-153170]"
    }, {
      "left" : "PrintWriter pw",
      "right" : "PrintWriter pw",
      "info" : "SingleVariableDeclaration[152877-152891]:SingleVariableDeclaration[153172-153186]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[152893-152906]:SingleVariableDeclaration[153188-153201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152908-153502]:Block[153203-153797]"
    }, {
      "left" : "if (mContext.checkCallingOrSelfPermission(Manifest.permission.DUMP)\n                    != PackageManager.PERMISSION_GRANTED)",
      "right" : "if (mContext.checkCallingOrSelfPermission(Manifest.permission.DUMP)\n                    != PackageManager.PERMISSION_GRANTED)",
      "info" : "IfStatement[152922-153285]:IfStatement[153217-153580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153048-153285]:Block[153343-153580]"
    }, {
      "left" : "pw.println(\"Permission Denial: can't dump PowerManager from from pid=\"\n                        + Binder.getCallingPid()\n                        + \", uid=\" + Binder.getCallingUid());",
      "right" : "pw.println(\"Permission Denial: can't dump PowerManager from from pid=\"\n                        + Binder.getCallingPid()\n                        + \", uid=\" + Binder.getCallingUid());",
      "info" : "ExpressionStatement[153066-153247]:ExpressionStatement[153361-153542]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[153264-153271]:ReturnStatement[153559-153566]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[153299-153348]:VariableDeclarationStatement[153594-153643]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[153361-153492]:TryStatement[153656-153787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153365-153414]:Block[153660-153709]"
    }, {
      "left" : "dumpInternal(pw);",
      "right" : "dumpInternal(pw);",
      "info" : "ExpressionStatement[153383-153400]:ExpressionStatement[153678-153695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153423-153492]:Block[153718-153787]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[153441-153478]:ExpressionStatement[153736-153773]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[153626-153632]:Modifier[153921-153927]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[153633-153637]:PrimitiveType[153928-153932]"
    }, {
      "left" : "updateBlockedUids",
      "right" : "updateBlockedUids",
      "info" : "SimpleName[153638-153655]:SimpleName[153933-153950]"
    }, {
      "left" : "int uid",
      "right" : "int uid",
      "info" : "SingleVariableDeclaration[153656-153663]:SingleVariableDeclaration[153951-153958]"
    }, {
      "left" : "boolean isBlocked",
      "right" : "boolean isBlocked",
      "info" : "SingleVariableDeclaration[153665-153682]:SingleVariableDeclaration[153960-153977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153684-155326]:Block[153979-155621]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[153699-153791]:IfStatement[153994-154086]"
    }, {
      "left" : "Slog.v(TAG, \"updateBlockedUids: uid = \" + uid + \"isBlocked = \" + isBlocked);",
      "right" : "Slog.v(TAG, \"updateBlockedUids: uid = \" + uid + \"isBlocked = \" + isBlocked);",
      "info" : "ExpressionStatement[153715-153791]:ExpressionStatement[154010-154086]"
    }, {
      "left" : "if (Binder.getCallingUid() != Process.SYSTEM_UID)",
      "right" : "if (Binder.getCallingUid() != Process.SYSTEM_UID)",
      "info" : "IfStatement[153805-153975]:IfStatement[154100-154270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153855-153975]:Block[154150-154270]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[153873-153937]:IfStatement[154168-154232]"
    }, {
      "left" : "Slog.v(TAG, \"UpdateBlockedUids is not allowed\");",
      "right" : "Slog.v(TAG, \"UpdateBlockedUids is not allowed\");",
      "info" : "ExpressionStatement[153889-153937]:ExpressionStatement[154184-154232]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[153954-153961]:ReturnStatement[154249-154256]"
    }, {
      "left" : "synchronized(mLock) {\n                if(isBlocked) {\n                    mBlockedUids.add(new Integer(uid));\n                    for (int index = 0; index < mWakeLocks.size(); index++) {\n                        WakeLock wl = mWakeLocks.get(index);\n                        if(wl != null) {\n                            if(wl.mTag.startsWith(\"*sync*\") && wl.mOwnerUid == Process.SYSTEM_UID) {\n                                releaseWakeLockInternal(wl.mLock, wl.mFlags);\n                                index--;\n                                if (DEBUG_SPEW) Slog.v(TAG, \"Internally releasing the wakelock\"\n                                        + \"acquired by SyncManager\");\n                                continue;\n                            }\n                            // release the wakelock for the blocked uid\n                            if (wl.mOwnerUid == uid || checkWorkSourceObjectId(uid, wl)) {\n                                releaseWakeLockInternal(wl.mLock, wl.mFlags);\n                                index--;\n                                if (DEBUG_SPEW) Slog.v(TAG, \"Internally releasing it\");\n                            }\n                        }\n                    }\n                }\n                else {\n                    mBlockedUids.remove(new Integer(uid));\n                }\n            }",
      "right" : "synchronized(mLock) {\n                if(isBlocked) {\n                    mBlockedUids.add(new Integer(uid));\n                    for (int index = 0; index < mWakeLocks.size(); index++) {\n                        WakeLock wl = mWakeLocks.get(index);\n                        if(wl != null) {\n                            if(wl.mTag.startsWith(\"*sync*\") && wl.mOwnerUid == Process.SYSTEM_UID) {\n                                releaseWakeLockInternal(wl.mLock, wl.mFlags);\n                                index--;\n                                if (DEBUG_SPEW) Slog.v(TAG, \"Internally releasing the wakelock\"\n                                        + \"acquired by SyncManager\");\n                                continue;\n                            }\n                            // release the wakelock for the blocked uid\n                            if (wl.mOwnerUid == uid || checkWorkSourceObjectId(uid, wl)) {\n                                releaseWakeLockInternal(wl.mLock, wl.mFlags);\n                                index--;\n                                if (DEBUG_SPEW) Slog.v(TAG, \"Internally releasing it\");\n                            }\n                        }\n                    }\n                }\n                else {\n                    mBlockedUids.remove(new Integer(uid));\n                }\n            }",
      "info" : "SynchronizedStatement[153989-155316]:SynchronizedStatement[154284-155611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154009-155316]:Block[154304-155611]"
    }, {
      "left" : "if(isBlocked)",
      "right" : "if(isBlocked)",
      "info" : "IfStatement[154027-155302]:IfStatement[154322-155597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154041-155202]:Block[154336-155497]"
    }, {
      "left" : "mBlockedUids.add(new Integer(uid));",
      "right" : "mBlockedUids.add(new Integer(uid));",
      "info" : "ExpressionStatement[154063-154098]:ExpressionStatement[154358-154393]"
    }, {
      "left" : "for (int index = 0; index < mWakeLocks.size(); index++)",
      "right" : "for (int index = 0; index < mWakeLocks.size(); index++)",
      "info" : "ForStatement[154119-155184]:ForStatement[154414-155479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154175-155184]:Block[154470-155479]"
    }, {
      "left" : "WakeLock wl = mWakeLocks.get(index);",
      "right" : "WakeLock wl = mWakeLocks.get(index);",
      "info" : "VariableDeclarationStatement[154201-154237]:VariableDeclarationStatement[154496-154532]"
    }, {
      "left" : "if(wl != null)",
      "right" : "if(wl != null)",
      "info" : "IfStatement[154262-155162]:IfStatement[154557-155457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154277-155162]:Block[154572-155457]"
    }, {
      "left" : "if(wl.mTag.startsWith(\"*sync*\") && wl.mOwnerUid == Process.SYSTEM_UID)",
      "right" : "if(wl.mTag.startsWith(\"*sync*\") && wl.mOwnerUid == Process.SYSTEM_UID)",
      "info" : "IfStatement[154307-154736]:IfStatement[154602-155031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154378-154736]:Block[154673-155031]"
    }, {
      "left" : "releaseWakeLockInternal(wl.mLock, wl.mFlags);",
      "right" : "releaseWakeLockInternal(wl.mLock, wl.mFlags);",
      "info" : "ExpressionStatement[154412-154457]:ExpressionStatement[154707-154752]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[154490-154498]:ExpressionStatement[154785-154793]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[154531-154664]:IfStatement[154826-154959]"
    }, {
      "left" : "Slog.v(TAG, \"Internally releasing the wakelock\"\n                                        + \"acquired by SyncManager\");",
      "right" : "Slog.v(TAG, \"Internally releasing the wakelock\"\n                                        + \"acquired by SyncManager\");",
      "info" : "ExpressionStatement[154547-154664]:ExpressionStatement[154842-154959]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[154697-154706]:ContinueStatement[154992-155001]"
    }, {
      "left" : "if (wl.mOwnerUid == uid || checkWorkSourceObjectId(uid, wl))",
      "right" : "if (wl.mOwnerUid == uid || checkWorkSourceObjectId(uid, wl))",
      "info" : "IfStatement[154837-155136]:IfStatement[155132-155431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154898-155136]:Block[155193-155431]"
    }, {
      "left" : "releaseWakeLockInternal(wl.mLock, wl.mFlags);",
      "right" : "releaseWakeLockInternal(wl.mLock, wl.mFlags);",
      "info" : "ExpressionStatement[154932-154977]:ExpressionStatement[155227-155272]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[155010-155018]:ExpressionStatement[155305-155313]"
    }, {
      "left" : "if (DEBUG_SPEW)",
      "right" : "if (DEBUG_SPEW)",
      "info" : "IfStatement[155051-155106]:IfStatement[155346-155401]"
    }, {
      "left" : "Slog.v(TAG, \"Internally releasing it\");",
      "right" : "Slog.v(TAG, \"Internally releasing it\");",
      "info" : "ExpressionStatement[155067-155106]:ExpressionStatement[155362-155401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155224-155302]:Block[155519-155597]"
    }, {
      "left" : "mBlockedUids.remove(new Integer(uid));",
      "right" : "mBlockedUids.remove(new Integer(uid));",
      "info" : "ExpressionStatement[155246-155284]:ExpressionStatement[155541-155579]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[155338-155345]:Modifier[155633-155640]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[155346-155350]:PrimitiveType[155641-155645]"
    }, {
      "left" : "setButtonBrightnessOverrideFromWindowManagerInternal",
      "right" : "setButtonBrightnessOverrideFromWindowManagerInternal",
      "info" : "SimpleName[155351-155403]:SimpleName[155646-155698]"
    }, {
      "left" : "int brightness",
      "right" : "int brightness",
      "info" : "SingleVariableDeclaration[155404-155418]:SingleVariableDeclaration[155699-155713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155420-155715]:Block[155715-156010]"
    }, {
      "left" : "synchronized (mLock) {\n            if (mButtonBrightnessOverrideFromWindowManager != brightness) {\n                mButtonBrightnessOverrideFromWindowManager = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "right" : "synchronized (mLock) {\n            if (mButtonBrightnessOverrideFromWindowManager != brightness) {\n                mButtonBrightnessOverrideFromWindowManager = brightness;\n                mDirty |= DIRTY_SETTINGS;\n                updatePowerStateLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[155430-155709]:SynchronizedStatement[155725-156004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155451-155709]:Block[155746-156004]"
    }, {
      "left" : "if (mButtonBrightnessOverrideFromWindowManager != brightness)",
      "right" : "if (mButtonBrightnessOverrideFromWindowManager != brightness)",
      "info" : "IfStatement[155465-155699]:IfStatement[155760-155994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155527-155699]:Block[155822-155994]"
    }, {
      "left" : "mButtonBrightnessOverrideFromWindowManager = brightness;",
      "right" : "mButtonBrightnessOverrideFromWindowManager = brightness;",
      "info" : "ExpressionStatement[155545-155601]:ExpressionStatement[155840-155896]"
    }, {
      "left" : "mDirty |= DIRTY_SETTINGS;",
      "right" : "mDirty |= DIRTY_SETTINGS;",
      "info" : "ExpressionStatement[155618-155643]:ExpressionStatement[155913-155938]"
    }, {
      "left" : "updatePowerStateLocked();",
      "right" : "updatePowerStateLocked();",
      "info" : "ExpressionStatement[155660-155685]:ExpressionStatement[155955-155980]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[155721-155728]:Modifier[156016-156023]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[155729-155734]:Modifier[156024-156029]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[155735-155740]:TYPE_DECLARATION_KIND[156030-156035]"
    }, {
      "left" : "LocalService",
      "right" : "LocalService",
      "info" : "SimpleName[155741-155753]:SimpleName[156036-156048]"
    }, {
      "left" : "PowerManagerInternal",
      "right" : "PowerManagerInternal",
      "info" : "SimpleType[155762-155782]:SimpleType[156057-156077]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[155793-155802]:MarkerAnnotation[156088-156097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[155811-155817]:Modifier[156106-156112]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[155818-155822]:PrimitiveType[156113-156117]"
    }, {
      "left" : "setScreenBrightnessOverrideFromWindowManager",
      "right" : "setScreenBrightnessOverrideFromWindowManager",
      "info" : "SimpleName[155823-155867]:SimpleName[156118-156162]"
    }, {
      "left" : "int screenBrightness",
      "right" : "int screenBrightness",
      "info" : "SingleVariableDeclaration[155868-155888]:SingleVariableDeclaration[156163-156183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155890-156206]:Block[156185-156501]"
    }, {
      "left" : "if (screenBrightness < PowerManager.BRIGHTNESS_DEFAULT\n                    || screenBrightness > PowerManager.BRIGHTNESS_ON)",
      "right" : "if (screenBrightness < PowerManager.BRIGHTNESS_DEFAULT\n                    || screenBrightness > PowerManager.BRIGHTNESS_ON)",
      "info" : "IfStatement[155904-156112]:IfStatement[156199-156407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156029-156112]:Block[156324-156407]"
    }, {
      "left" : "screenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "right" : "screenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "info" : "ExpressionStatement[156047-156098]:ExpressionStatement[156342-156393]"
    }, {
      "left" : "setScreenBrightnessOverrideFromWindowManagerInternal(screenBrightness);",
      "right" : "setScreenBrightnessOverrideFromWindowManagerInternal(screenBrightness);",
      "info" : "ExpressionStatement[156125-156196]:ExpressionStatement[156420-156491]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[156216-156225]:MarkerAnnotation[156511-156520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[156234-156240]:Modifier[156529-156535]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[156241-156245]:PrimitiveType[156536-156540]"
    }, {
      "left" : "setButtonBrightnessOverrideFromWindowManager",
      "right" : "setButtonBrightnessOverrideFromWindowManager",
      "info" : "SimpleName[156246-156290]:SimpleName[156541-156585]"
    }, {
      "left" : "int screenBrightness",
      "right" : "int screenBrightness",
      "info" : "SingleVariableDeclaration[156291-156311]:SingleVariableDeclaration[156586-156606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156313-156687]:Block[156608-156982]"
    }, {
      "left" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "right" : "mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);",
      "info" : "ExpressionStatement[156327-156415]:ExpressionStatement[156622-156710]"
    }, {
      "left" : "final long ident = Binder.clearCallingIdentity();",
      "right" : "final long ident = Binder.clearCallingIdentity();",
      "info" : "VariableDeclarationStatement[156429-156478]:VariableDeclarationStatement[156724-156773]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[156491-156676]:TryStatement[156786-156971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156495-156598]:Block[156790-156893]"
    }, {
      "left" : "setButtonBrightnessOverrideFromWindowManagerInternal(screenBrightness);",
      "right" : "setButtonBrightnessOverrideFromWindowManagerInternal(screenBrightness);",
      "info" : "ExpressionStatement[156513-156584]:ExpressionStatement[156808-156879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156607-156676]:Block[156902-156971]"
    }, {
      "left" : "Binder.restoreCallingIdentity(ident);",
      "right" : "Binder.restoreCallingIdentity(ident);",
      "info" : "ExpressionStatement[156625-156662]:ExpressionStatement[156920-156957]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[156697-156706]:MarkerAnnotation[156992-157001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[156715-156721]:Modifier[157010-157016]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[156722-156726]:PrimitiveType[157017-157021]"
    }, {
      "left" : "setDozeOverrideFromDreamManager",
      "right" : "setDozeOverrideFromDreamManager",
      "info" : "SimpleName[156727-156758]:SimpleName[157022-157053]"
    }, {
      "left" : "int screenState",
      "right" : "int screenState",
      "info" : "SingleVariableDeclaration[156759-156774]:SingleVariableDeclaration[157054-157069]"
    }, {
      "left" : "int screenBrightness",
      "right" : "int screenBrightness",
      "info" : "SingleVariableDeclaration[156776-156796]:SingleVariableDeclaration[157071-157091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156798-157512]:Block[157093-157807]"
    }, {
      "left" : "switch (screenState) {\n                case Display.STATE_UNKNOWN:\n                case Display.STATE_OFF:\n                case Display.STATE_DOZE:\n                case Display.STATE_DOZE_SUSPEND:\n                case Display.STATE_ON:\n                    break;\n                default:\n                    screenState = Display.STATE_UNKNOWN;\n                    break;\n            }",
      "right" : "switch (screenState) {\n                case Display.STATE_UNKNOWN:\n                case Display.STATE_OFF:\n                case Display.STATE_DOZE:\n                case Display.STATE_DOZE_SUSPEND:\n                case Display.STATE_ON:\n                    break;\n                default:\n                    screenState = Display.STATE_UNKNOWN;\n                    break;\n            }",
      "info" : "SwitchStatement[156812-157197]:SwitchStatement[157107-157492]"
    }, {
      "left" : "case Display.STATE_UNKNOWN:",
      "right" : "case Display.STATE_UNKNOWN:",
      "info" : "SwitchCase[156851-156878]:SwitchCase[157146-157173]"
    }, {
      "left" : "case Display.STATE_OFF:",
      "right" : "case Display.STATE_OFF:",
      "info" : "SwitchCase[156895-156918]:SwitchCase[157190-157213]"
    }, {
      "left" : "case Display.STATE_DOZE:",
      "right" : "case Display.STATE_DOZE:",
      "info" : "SwitchCase[156935-156959]:SwitchCase[157230-157254]"
    }, {
      "left" : "case Display.STATE_DOZE_SUSPEND:",
      "right" : "case Display.STATE_DOZE_SUSPEND:",
      "info" : "SwitchCase[156976-157008]:SwitchCase[157271-157303]"
    }, {
      "left" : "case Display.STATE_ON:",
      "right" : "case Display.STATE_ON:",
      "info" : "SwitchCase[157025-157047]:SwitchCase[157320-157342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[157068-157074]:BreakStatement[157363-157369]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[157091-157099]:SwitchCase[157386-157394]"
    }, {
      "left" : "screenState = Display.STATE_UNKNOWN;",
      "right" : "screenState = Display.STATE_UNKNOWN;",
      "info" : "ExpressionStatement[157120-157156]:ExpressionStatement[157415-157451]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[157177-157183]:BreakStatement[157472-157478]"
    }, {
      "left" : "if (screenBrightness < PowerManager.BRIGHTNESS_DEFAULT\n                    || screenBrightness > PowerManager.BRIGHTNESS_ON)",
      "right" : "if (screenBrightness < PowerManager.BRIGHTNESS_DEFAULT\n                    || screenBrightness > PowerManager.BRIGHTNESS_ON)",
      "info" : "IfStatement[157210-157418]:IfStatement[157505-157713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157335-157418]:Block[157630-157713]"
    }, {
      "left" : "screenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "right" : "screenBrightness = PowerManager.BRIGHTNESS_DEFAULT;",
      "info" : "ExpressionStatement[157353-157404]:ExpressionStatement[157648-157699]"
    }, {
      "left" : "setDozeOverrideFromDreamManagerInternal(screenState, screenBrightness);",
      "right" : "setDozeOverrideFromDreamManagerInternal(screenState, screenBrightness);",
      "info" : "ExpressionStatement[157431-157502]:ExpressionStatement[157726-157797]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[157522-157531]:MarkerAnnotation[157817-157826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[157540-157546]:Modifier[157835-157841]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[157547-157551]:PrimitiveType[157842-157846]"
    }, {
      "left" : "setUserActivityTimeoutOverrideFromWindowManager",
      "right" : "setUserActivityTimeoutOverrideFromWindowManager",
      "info" : "SimpleName[157552-157599]:SimpleName[157847-157894]"
    }, {
      "left" : "long timeoutMillis",
      "right" : "long timeoutMillis",
      "info" : "SingleVariableDeclaration[157600-157618]:SingleVariableDeclaration[157895-157913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157620-157715]:Block[157915-158010]"
    }, {
      "left" : "setUserActivityTimeoutOverrideFromWindowManagerInternal(timeoutMillis);",
      "right" : "setUserActivityTimeoutOverrideFromWindowManagerInternal(timeoutMillis);",
      "info" : "ExpressionStatement[157634-157705]:ExpressionStatement[157929-158000]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[157725-157734]:MarkerAnnotation[158020-158029]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[157743-157749]:Modifier[158038-158044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[157750-157754]:PrimitiveType[158045-158049]"
    }, {
      "left" : "setMaximumScreenOffTimeoutFromDeviceAdmin",
      "right" : "setMaximumScreenOffTimeoutFromDeviceAdmin",
      "info" : "SimpleName[157755-157796]:SimpleName[158050-158091]"
    }, {
      "left" : "int timeMs",
      "right" : "int timeMs",
      "info" : "SingleVariableDeclaration[157797-157807]:SingleVariableDeclaration[158092-158102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157809-157891]:Block[158104-158186]"
    }, {
      "left" : "setMaximumScreenOffTimeoutFromDeviceAdminInternal(timeMs);",
      "right" : "setMaximumScreenOffTimeoutFromDeviceAdminInternal(timeMs);",
      "info" : "ExpressionStatement[157823-157881]:ExpressionStatement[158118-158176]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[157901-157910]:MarkerAnnotation[158196-158205]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[157919-157925]:Modifier[158214-158220]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[157926-157933]:PrimitiveType[158221-158228]"
    }, {
      "left" : "getLowPowerModeEnabled",
      "right" : "getLowPowerModeEnabled",
      "info" : "SimpleName[157934-157956]:SimpleName[158229-158251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157959-158064]:Block[158254-158359]"
    }, {
      "left" : "synchronized (mLock) {\n                return mLowPowerModeEnabled;\n            }",
      "right" : "synchronized (mLock) {\n                return mLowPowerModeEnabled;\n            }",
      "info" : "SynchronizedStatement[157973-158054]:SynchronizedStatement[158268-158349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157994-158054]:Block[158289-158349]"
    }, {
      "left" : "return mLowPowerModeEnabled;",
      "right" : "return mLowPowerModeEnabled;",
      "info" : "ReturnStatement[158012-158040]:ReturnStatement[158307-158335]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[158074-158083]:MarkerAnnotation[158369-158378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[158092-158098]:Modifier[158387-158393]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[158099-158103]:PrimitiveType[158394-158398]"
    }, {
      "left" : "registerLowPowerModeObserver",
      "right" : "registerLowPowerModeObserver",
      "info" : "SimpleName[158104-158132]:SimpleName[158399-158427]"
    }, {
      "left" : "LowPowerModeListener listener",
      "right" : "LowPowerModeListener listener",
      "info" : "SingleVariableDeclaration[158133-158162]:SingleVariableDeclaration[158428-158457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158164-158278]:Block[158459-158573]"
    }, {
      "left" : "synchronized (mLock) {\n                mLowPowerModeListeners.add(listener);\n            }",
      "right" : "synchronized (mLock) {\n                mLowPowerModeListeners.add(listener);\n            }",
      "info" : "SynchronizedStatement[158178-158268]:SynchronizedStatement[158473-158563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158199-158268]:Block[158494-158563]"
    }, {
      "left" : "mLowPowerModeListeners.add(listener);",
      "right" : "mLowPowerModeListeners.add(listener);",
      "info" : "ExpressionStatement[158217-158254]:ExpressionStatement[158512-158549]"
    } ]
  },
  "interFileMappings" : { }
}