{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";",
      "right" : "private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";",
      "info" : "FieldDeclaration[2450-2554]:FieldDeclaration[2450-2554]"
    }, {
      "left" : "private static final int DEFAULT_ULPS = 10;",
      "right" : "private static final int DEFAULT_ULPS = 10;",
      "info" : "FieldDeclaration[2560-2689]:FieldDeclaration[2560-2689]"
    }, {
      "left" : "private static final long serialVersionUID = -1369660067587938365L;",
      "right" : "private static final long serialVersionUID = -1369660067587938365L;",
      "info" : "FieldDeclaration[2695-2806]:FieldDeclaration[2695-2806]"
    }, {
      "left" : "private final LinearObjectiveFunction f;",
      "right" : "private final LinearObjectiveFunction f;",
      "info" : "FieldDeclaration[2812-2890]:FieldDeclaration[2812-2890]"
    }, {
      "left" : "private final List<LinearConstraint> constraints;",
      "right" : "private final List<LinearConstraint> constraints;",
      "info" : "FieldDeclaration[2896-2976]:FieldDeclaration[2896-2976]"
    }, {
      "left" : "private final boolean restrictToNonNegative;",
      "right" : "private final boolean restrictToNonNegative;",
      "info" : "FieldDeclaration[2982-3095]:FieldDeclaration[2982-3095]"
    }, {
      "left" : "private final List<String> columnLabels = new ArrayList<String>();",
      "right" : "private final List<String> columnLabels = new ArrayList<String>();",
      "info" : "FieldDeclaration[3101-3215]:FieldDeclaration[3101-3215]"
    }, {
      "left" : "private transient RealMatrix tableau;",
      "right" : "private transient RealMatrix tableau;",
      "info" : "FieldDeclaration[3221-3285]:FieldDeclaration[3221-3285]"
    }, {
      "left" : "private final int numDecisionVariables;",
      "right" : "private final int numDecisionVariables;",
      "info" : "FieldDeclaration[3291-3371]:FieldDeclaration[3291-3371]"
    }, {
      "left" : "private final int numSlackVariables;",
      "right" : "private final int numSlackVariables;",
      "info" : "FieldDeclaration[3377-3451]:FieldDeclaration[3377-3451]"
    }, {
      "left" : "private int numArtificialVariables;",
      "right" : "private int numArtificialVariables;",
      "info" : "FieldDeclaration[3457-3535]:FieldDeclaration[3457-3535]"
    }, {
      "left" : "private final double epsilon;",
      "right" : "private final double epsilon;",
      "info" : "FieldDeclaration[3541-3637]:FieldDeclaration[3541-3637]"
    }, {
      "left" : "private final int maxUlps;",
      "right" : "private final int maxUlps;",
      "info" : "FieldDeclaration[3643-3737]:FieldDeclaration[3643-3737]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "info" : "MethodDeclaration[3743-4510]:MethodDeclaration[3743-4510]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon,\n                   final int maxUlps)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon,\n                   final int maxUlps)",
      "info" : "MethodDeclaration[4516-6156]:MethodDeclaration[4516-6156]"
    }, {
      "left" : "protected void initializeColumnLabels()",
      "right" : "protected void initializeColumnLabels()",
      "info" : "MethodDeclaration[6162-6828]:MethodDeclaration[6162-6828]"
    }, {
      "left" : "protected RealMatrix createTableau(final boolean maximize)",
      "right" : "protected RealMatrix createTableau(final boolean maximize)",
      "info" : "MethodDeclaration[6834-9764]:MethodDeclaration[6834-9764]"
    }, {
      "left" : "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints)",
      "right" : "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints)",
      "info" : "MethodDeclaration[9770-10327]:MethodDeclaration[9770-10327]"
    }, {
      "left" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "right" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "info" : "MethodDeclaration[10333-11037]:MethodDeclaration[10333-11037]"
    }, {
      "left" : "protected final int getNumObjectiveFunctions()",
      "right" : "protected final int getNumObjectiveFunctions()",
      "info" : "MethodDeclaration[11043-11277]:MethodDeclaration[11043-11277]"
    }, {
      "left" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "right" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "info" : "MethodDeclaration[11283-11791]:MethodDeclaration[11283-11791]"
    }, {
      "left" : "protected static double getInvertedCoefficientSum(final RealVector coefficients)",
      "right" : "protected static double getInvertedCoefficientSum(final RealVector coefficients)",
      "info" : "MethodDeclaration[11797-12242]:MethodDeclaration[11797-12242]"
    }, {
      "left" : "protected Integer getBasicRow(final int col)",
      "right" : "protected Integer getBasicRow(final int col)",
      "info" : "MethodDeclaration[12248-12861]:MethodDeclaration[12248-12861]"
    }, {
      "left" : "protected void dropPhase1Objective()",
      "right" : "protected void dropPhase1Objective()",
      "info" : "MethodDeclaration[12867-14424]:MethodDeclaration[12867-14424]"
    }, {
      "left" : "private void copyArray(final double[] src, final double[] dest)",
      "right" : "private void copyArray(final double[] src, final double[] dest)",
      "info" : "MethodDeclaration[14430-14673]:MethodDeclaration[14430-14673]"
    }, {
      "left" : "boolean isOptimal()",
      "right" : "boolean isOptimal()",
      "info" : "MethodDeclaration[14679-15101]:MethodDeclaration[14679-15101]"
    }, {
      "left" : "protected void divideRow(final int dividendRow, final double divisor)",
      "right" : "protected void divideRow(final int dividendRow, final double divisor)",
      "info" : "MethodDeclaration[16744-17275]:MethodDeclaration[16837-17368]"
    }, {
      "left" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "right" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "info" : "MethodDeclaration[17281-17912]:MethodDeclaration[17374-18005]"
    }, {
      "left" : "protected final int getWidth()",
      "right" : "protected final int getWidth()",
      "info" : "MethodDeclaration[17918-18090]:MethodDeclaration[18011-18183]"
    }, {
      "left" : "protected final int getHeight()",
      "right" : "protected final int getHeight()",
      "info" : "MethodDeclaration[18096-18268]:MethodDeclaration[18189-18361]"
    }, {
      "left" : "protected final double getEntry(final int row, final int column)",
      "right" : "protected final double getEntry(final int row, final int column)",
      "info" : "MethodDeclaration[18274-18537]:MethodDeclaration[18367-18630]"
    }, {
      "left" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "right" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "info" : "MethodDeclaration[18543-18854]:MethodDeclaration[18636-18947]"
    }, {
      "left" : "protected final int getSlackVariableOffset()",
      "right" : "protected final int getSlackVariableOffset()",
      "info" : "MethodDeclaration[18860-19095]:MethodDeclaration[18953-19188]"
    }, {
      "left" : "protected final int getArtificialVariableOffset()",
      "right" : "protected final int getArtificialVariableOffset()",
      "info" : "MethodDeclaration[19101-19371]:MethodDeclaration[19194-19464]"
    }, {
      "left" : "protected final int getRhsOffset()",
      "right" : "protected final int getRhsOffset()",
      "info" : "MethodDeclaration[19377-19557]:MethodDeclaration[19470-19650]"
    }, {
      "left" : "protected final int getNumDecisionVariables()",
      "right" : "protected final int getNumDecisionVariables()",
      "info" : "MethodDeclaration[19563-20008]:MethodDeclaration[19656-20101]"
    }, {
      "left" : "protected final int getOriginalNumDecisionVariables()",
      "right" : "protected final int getOriginalNumDecisionVariables()",
      "info" : "MethodDeclaration[20014-20288]:MethodDeclaration[20107-20381]"
    }, {
      "left" : "protected final int getNumSlackVariables()",
      "right" : "protected final int getNumSlackVariables()",
      "info" : "MethodDeclaration[20294-20477]:MethodDeclaration[20387-20570]"
    }, {
      "left" : "protected final int getNumArtificialVariables()",
      "right" : "protected final int getNumArtificialVariables()",
      "info" : "MethodDeclaration[20483-20686]:MethodDeclaration[20576-20779]"
    }, {
      "left" : "protected final double[][] getData()",
      "right" : "protected final double[][] getData()",
      "info" : "MethodDeclaration[20692-20843]:MethodDeclaration[20785-20936]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[20849-21667]:MethodDeclaration[20942-21760]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[21673-22103]:MethodDeclaration[21766-22196]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "right" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "info" : "MethodDeclaration[22109-22442]:MethodDeclaration[22202-22535]"
    }, {
      "left" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "right" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "info" : "MethodDeclaration[22448-22900]:MethodDeclaration[22541-22993]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4417-4510]:Block[4417-4510]"
    }, {
      "left" : "this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",
      "right" : "this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",
      "info" : "ConstructorInvocation[4427-4504]:ConstructorInvocation[4427-4504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5306-6156]:Block[5306-6156]"
    }, {
      "left" : "this.f                      = f;",
      "right" : "this.f                      = f;",
      "info" : "ExpressionStatement[5316-5348]:ExpressionStatement[5316-5348]"
    }, {
      "left" : "this.constraints            = normalizeConstraints(constraints);",
      "right" : "this.constraints            = normalizeConstraints(constraints);",
      "info" : "ExpressionStatement[5357-5421]:ExpressionStatement[5357-5421]"
    }, {
      "left" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "right" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "info" : "ExpressionStatement[5430-5482]:ExpressionStatement[5430-5482]"
    }, {
      "left" : "this.epsilon                = epsilon;",
      "right" : "this.epsilon                = epsilon;",
      "info" : "ExpressionStatement[5491-5529]:ExpressionStatement[5491-5529]"
    }, {
      "left" : "this.maxUlps                = maxUlps;",
      "right" : "this.maxUlps                = maxUlps;",
      "info" : "ExpressionStatement[5538-5576]:ExpressionStatement[5538-5576]"
    }, {
      "left" : "this.numDecisionVariables   = f.getCoefficients().getDimension() +\n                                      (restrictToNonNegative ? 0 : 1);",
      "right" : "this.numDecisionVariables   = f.getCoefficients().getDimension() +\n                                      (restrictToNonNegative ? 0 : 1);",
      "info" : "ExpressionStatement[5585-5722]:ExpressionStatement[5585-5722]"
    }, {
      "left" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[5731-5885]:ExpressionStatement[5731-5885]"
    }, {
      "left" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[5894-6047]:ExpressionStatement[5894-6047]"
    }, {
      "left" : "this.tableau = createTableau(goalType == GoalType.MAXIMIZE);",
      "right" : "this.tableau = createTableau(goalType == GoalType.MAXIMIZE);",
      "info" : "ExpressionStatement[6056-6116]:ExpressionStatement[6056-6116]"
    }, {
      "left" : "initializeColumnLabels();",
      "right" : "initializeColumnLabels();",
      "info" : "ExpressionStatement[6125-6150]:ExpressionStatement[6125-6150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6828]:Block[6264-6828]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[6272-6349]:IfStatement[6272-6349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6309-6349]:Block[6309-6349]"
    }, {
      "left" : "columnLabels.add(\"W\");",
      "right" : "columnLabels.add(\"W\");",
      "info" : "ExpressionStatement[6319-6341]:ExpressionStatement[6319-6341]"
    }, {
      "left" : "columnLabels.add(\"Z\");",
      "right" : "columnLabels.add(\"Z\");",
      "info" : "ExpressionStatement[6356-6378]:ExpressionStatement[6356-6378]"
    }, {
      "left" : "for (int i = 0; i < getOriginalNumDecisionVariables(); i++)",
      "right" : "for (int i = 0; i < getOriginalNumDecisionVariables(); i++)",
      "info" : "ForStatement[6385-6489]:ForStatement[6385-6489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6445-6489]:Block[6445-6489]"
    }, {
      "left" : "columnLabels.add(\"x\" + i);",
      "right" : "columnLabels.add(\"x\" + i);",
      "info" : "ExpressionStatement[6455-6481]:ExpressionStatement[6455-6481]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[6496-6586]:IfStatement[6496-6586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6524-6586]:Block[6524-6586]"
    }, {
      "left" : "columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);",
      "right" : "columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);",
      "info" : "ExpressionStatement[6534-6578]:ExpressionStatement[6534-6578]"
    }, {
      "left" : "for (int i = 0; i < getNumSlackVariables(); i++)",
      "right" : "for (int i = 0; i < getNumSlackVariables(); i++)",
      "info" : "ForStatement[6593-6686]:ForStatement[6593-6686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6642-6686]:Block[6642-6686]"
    }, {
      "left" : "columnLabels.add(\"s\" + i);",
      "right" : "columnLabels.add(\"s\" + i);",
      "info" : "ExpressionStatement[6652-6678]:ExpressionStatement[6652-6678]"
    }, {
      "left" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "right" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "info" : "ForStatement[6693-6791]:ForStatement[6693-6791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6747-6791]:Block[6747-6791]"
    }, {
      "left" : "columnLabels.add(\"a\" + i);",
      "right" : "columnLabels.add(\"a\" + i);",
      "info" : "ExpressionStatement[6757-6783]:ExpressionStatement[6757-6783]"
    }, {
      "left" : "columnLabels.add(\"RHS\");",
      "right" : "columnLabels.add(\"RHS\");",
      "info" : "ExpressionStatement[6798-6822]:ExpressionStatement[6798-6822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7052-9764]:Block[7052-9764]"
    }, {
      "left" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "right" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "info" : "VariableDeclarationStatement[7110-7229]:VariableDeclarationStatement[7110-7229]"
    }, {
      "left" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "right" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "info" : "VariableDeclarationStatement[7256-7317]:VariableDeclarationStatement[7256-7317]"
    }, {
      "left" : "Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",
      "right" : "Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",
      "info" : "VariableDeclarationStatement[7326-7396]:VariableDeclarationStatement[7326-7396]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[7456-7543]:IfStatement[7456-7543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7493-7543]:Block[7493-7543]"
    }, {
      "left" : "matrix.setEntry(0, 0, -1);",
      "right" : "matrix.setEntry(0, 0, -1);",
      "info" : "ExpressionStatement[7507-7533]:ExpressionStatement[7507-7533]"
    }, {
      "left" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "right" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[7552-7607]:VariableDeclarationStatement[7552-7607]"
    }, {
      "left" : "matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",
      "right" : "matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",
      "info" : "ExpressionStatement[7616-7667]:ExpressionStatement[7616-7667]"
    }, {
      "left" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "right" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "info" : "VariableDeclarationStatement[7676-7792]:VariableDeclarationStatement[7676-7792]"
    }, {
      "left" : "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",
      "right" : "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",
      "info" : "ExpressionStatement[7801-7873]:ExpressionStatement[7801-7873]"
    }, {
      "left" : "matrix.setEntry(zIndex, width - 1,\n            maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());",
      "right" : "matrix.setEntry(zIndex, width - 1,\n            maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());",
      "info" : "ExpressionStatement[7882-7988]:ExpressionStatement[7882-7988]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[7998-8170]:IfStatement[7998-8170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8026-8170]:Block[8026-8170]"
    }, {
      "left" : "matrix.setEntry(zIndex, getSlackVariableOffset() - 1,\n                getInvertedCoefficientSum(objectiveCoefficients));",
      "right" : "matrix.setEntry(zIndex, getSlackVariableOffset() - 1,\n                getInvertedCoefficientSum(objectiveCoefficients));",
      "info" : "ExpressionStatement[8040-8160]:ExpressionStatement[8040-8160]"
    }, {
      "left" : "int slackVar = 0;",
      "right" : "int slackVar = 0;",
      "info" : "VariableDeclarationStatement[8222-8239]:VariableDeclarationStatement[8222-8239]"
    }, {
      "left" : "int artificialVar = 0;",
      "right" : "int artificialVar = 0;",
      "info" : "VariableDeclarationStatement[8248-8270]:VariableDeclarationStatement[8248-8270]"
    }, {
      "left" : "for (int i = 0; i < constraints.size(); i++)",
      "right" : "for (int i = 0; i < constraints.size(); i++)",
      "info" : "ForStatement[8279-9734]:ForStatement[8279-9734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8324-9734]:Block[8324-9734]"
    }, {
      "left" : "LinearConstraint constraint = constraints.get(i);",
      "right" : "LinearConstraint constraint = constraints.get(i);",
      "info" : "VariableDeclarationStatement[8338-8387]:VariableDeclarationStatement[8338-8387]"
    }, {
      "left" : "int row = getNumObjectiveFunctions() + i;",
      "right" : "int row = getNumObjectiveFunctions() + i;",
      "info" : "VariableDeclarationStatement[8400-8441]:VariableDeclarationStatement[8400-8441]"
    }, {
      "left" : "copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",
      "right" : "copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",
      "info" : "ExpressionStatement[8501-8577]:ExpressionStatement[8501-8577]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[8609-8797]:IfStatement[8609-8797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8637-8797]:Block[8637-8797]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() - 1,\n                    getInvertedCoefficientSum(constraint.getCoefficients()));",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() - 1,\n                    getInvertedCoefficientSum(constraint.getCoefficients()));",
      "info" : "ExpressionStatement[8655-8783]:ExpressionStatement[8655-8783]"
    }, {
      "left" : "matrix.setEntry(row, width - 1, constraint.getValue());",
      "right" : "matrix.setEntry(row, width - 1, constraint.getValue());",
      "info" : "ExpressionStatement[8830-8885]:ExpressionStatement[8830-8885]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "info" : "IfStatement[8930-9255]:IfStatement[8930-9255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8984-9089]:Block[8984-9089]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);",
      "info" : "ExpressionStatement[9002-9065]:ExpressionStatement[9002-9065]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "info" : "IfStatement[9095-9255]:IfStatement[9095-9255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9149-9255]:Block[9149-9255]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);",
      "info" : "ExpressionStatement[9167-9231]:ExpressionStatement[9167-9231]"
    }, {
      "left" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                    (constraint.getRelationship() == Relationship.GEQ))",
      "right" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                    (constraint.getRelationship() == Relationship.GEQ))",
      "info" : "IfStatement[9305-9724]:IfStatement[9305-9724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9434-9724]:Block[9434-9724]"
    }, {
      "left" : "matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",
      "right" : "matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",
      "info" : "ExpressionStatement[9452-9521]:ExpressionStatement[9452-9521]"
    }, {
      "left" : "matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",
      "right" : "matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",
      "info" : "ExpressionStatement[9538-9611]:ExpressionStatement[9538-9611]"
    }, {
      "left" : "matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",
      "right" : "matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",
      "info" : "ExpressionStatement[9628-9710]:ExpressionStatement[9628-9710]"
    }, {
      "left" : "return matrix;",
      "right" : "return matrix;",
      "info" : "ReturnStatement[9744-9758]:ReturnStatement[9744-9758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10087-10327]:Block[10087-10327]"
    }, {
      "left" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "right" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "info" : "VariableDeclarationStatement[10097-10167]:VariableDeclarationStatement[10097-10167]"
    }, {
      "left" : "for (LinearConstraint constraint : originalConstraints)",
      "right" : "for (LinearConstraint constraint : originalConstraints)",
      "info" : "EnhancedForStatement[10176-10294]:EnhancedForStatement[10176-10294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10232-10294]:Block[10232-10294]"
    }, {
      "left" : "normalized.add(normalize(constraint));",
      "right" : "normalized.add(normalize(constraint));",
      "info" : "ExpressionStatement[10246-10284]:ExpressionStatement[10246-10284]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[10303-10321]:ReturnStatement[10303-10321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10575-11037]:Block[10575-11037]"
    }, {
      "left" : "if (constraint.getValue() < 0)",
      "right" : "if (constraint.getValue() < 0)",
      "info" : "IfStatement[10585-10875]:IfStatement[10585-10875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10616-10875]:Block[10616-10875]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "info" : "ReturnStatement[10630-10865]:ReturnStatement[10630-10865]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients(),\n                                    constraint.getRelationship(), constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients(),\n                                    constraint.getRelationship(), constraint.getValue());",
      "info" : "ReturnStatement[10884-11031]:ReturnStatement[10884-11031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11214-11277]:Block[11214-11277]"
    }, {
      "left" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "right" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "info" : "ReturnStatement[11224-11271]:ReturnStatement[11224-11271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11562-11791]:Block[11562-11791]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[11572-11586]:VariableDeclarationStatement[11572-11586]"
    }, {
      "left" : "for (final LinearConstraint constraint : constraints)",
      "right" : "for (final LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[11595-11763]:EnhancedForStatement[11595-11763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11649-11763]:Block[11649-11763]"
    }, {
      "left" : "if (constraint.getRelationship() == relationship)",
      "right" : "if (constraint.getRelationship() == relationship)",
      "info" : "IfStatement[11663-11753]:IfStatement[11663-11753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11713-11753]:Block[11713-11753]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[11731-11739]:ExpressionStatement[11731-11739]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[11772-11785]:ReturnStatement[11772-11785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12089-12242]:Block[12089-12242]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[12099-12114]:VariableDeclarationStatement[12099-12114]"
    }, {
      "left" : "for (double coefficient : coefficients.toArray())",
      "right" : "for (double coefficient : coefficients.toArray())",
      "info" : "EnhancedForStatement[12123-12216]:EnhancedForStatement[12123-12216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12173-12216]:Block[12173-12216]"
    }, {
      "left" : "sum -= coefficient;",
      "right" : "sum -= coefficient;",
      "info" : "ExpressionStatement[12187-12206]:ExpressionStatement[12187-12206]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[12225-12236]:ReturnStatement[12225-12236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12492-12861]:Block[12492-12861]"
    }, {
      "left" : "Integer row = null;",
      "right" : "Integer row = null;",
      "info" : "VariableDeclarationStatement[12502-12521]:VariableDeclarationStatement[12502-12521]"
    }, {
      "left" : "for (int i = 0; i < getHeight(); i++)",
      "right" : "for (int i = 0; i < getHeight(); i++)",
      "info" : "ForStatement[12530-12835]:ForStatement[12530-12835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12568-12835]:Block[12568-12835]"
    }, {
      "left" : "final double entry = getEntry(i, col);",
      "right" : "final double entry = getEntry(i, col);",
      "info" : "VariableDeclarationStatement[12582-12620]:VariableDeclarationStatement[12582-12620]"
    }, {
      "left" : "if (Precision.equals(entry, 1d, maxUlps) && (row == null))",
      "right" : "if (Precision.equals(entry, 1d, maxUlps) && (row == null))",
      "info" : "IfStatement[12633-12825]:IfStatement[12633-12825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12692-12732]:Block[12692-12732]"
    }, {
      "left" : "row = i;",
      "right" : "row = i;",
      "info" : "ExpressionStatement[12710-12718]:ExpressionStatement[12710-12718]"
    }, {
      "left" : "if (!Precision.equals(entry, 0d, maxUlps))",
      "right" : "if (!Precision.equals(entry, 0d, maxUlps))",
      "info" : "IfStatement[12738-12825]:IfStatement[12738-12825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12781-12825]:Block[12781-12825]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12799-12811]:ReturnStatement[12799-12811]"
    }, {
      "left" : "return row;",
      "right" : "return row;",
      "info" : "ReturnStatement[12844-12855]:ReturnStatement[12844-12855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13072-14424]:Block[13072-14424]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 1)",
      "right" : "if (getNumObjectiveFunctions() == 1)",
      "info" : "IfStatement[13082-13150]:IfStatement[13082-13150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13119-13150]:Block[13119-13150]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13133-13140]:ReturnStatement[13133-13140]"
    }, {
      "left" : "List<Integer> columnsToDrop = new ArrayList<Integer>();",
      "right" : "List<Integer> columnsToDrop = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[13160-13215]:VariableDeclarationStatement[13160-13215]"
    }, {
      "left" : "columnsToDrop.add(0);",
      "right" : "columnsToDrop.add(0);",
      "info" : "ExpressionStatement[13224-13245]:ExpressionStatement[13224-13245]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++)",
      "info" : "ForStatement[13305-13569]:ForStatement[13305-13569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13386-13569]:Block[13386-13569]"
    }, {
      "left" : "final double entry = tableau.getEntry(0, i);",
      "right" : "final double entry = tableau.getEntry(0, i);",
      "info" : "VariableDeclarationStatement[13400-13444]:VariableDeclarationStatement[13400-13444]"
    }, {
      "left" : "if (Precision.compareTo(entry, 0d, maxUlps) > 0)",
      "right" : "if (Precision.compareTo(entry, 0d, maxUlps) > 0)",
      "info" : "IfStatement[13457-13559]:IfStatement[13457-13559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13559]:Block[13506-13559]"
    }, {
      "left" : "columnsToDrop.add(i);",
      "right" : "columnsToDrop.add(i);",
      "info" : "ExpressionStatement[13524-13545]:ExpressionStatement[13524-13545]"
    }, {
      "left" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "right" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "info" : "ForStatement[13621-13831]:ForStatement[13621-13831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13675-13831]:Block[13675-13831]"
    }, {
      "left" : "int col = i + getArtificialVariableOffset();",
      "right" : "int col = i + getArtificialVariableOffset();",
      "info" : "VariableDeclarationStatement[13687-13731]:VariableDeclarationStatement[13687-13731]"
    }, {
      "left" : "if (getBasicRow(col) == null)",
      "right" : "if (getBasicRow(col) == null)",
      "info" : "IfStatement[13742-13821]:IfStatement[13742-13821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13772-13821]:Block[13772-13821]"
    }, {
      "left" : "columnsToDrop.add(col);",
      "right" : "columnsToDrop.add(col);",
      "info" : "ExpressionStatement[13786-13809]:ExpressionStatement[13786-13809]"
    }, {
      "left" : "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];",
      "right" : "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];",
      "info" : "VariableDeclarationStatement[13841-13924]:VariableDeclarationStatement[13841-13924]"
    }, {
      "left" : "for (int i = 1; i < getHeight(); i++)",
      "right" : "for (int i = 1; i < getHeight(); i++)",
      "info" : "ForStatement[13933-14187]:ForStatement[13933-14187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13971-14187]:Block[13971-14187]"
    }, {
      "left" : "int col = 0;",
      "right" : "int col = 0;",
      "info" : "VariableDeclarationStatement[13983-13995]:VariableDeclarationStatement[13983-13995]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14006-14177]:ForStatement[14006-14177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14043-14177]:Block[14043-14177]"
    }, {
      "left" : "if (!columnsToDrop.contains(j))",
      "right" : "if (!columnsToDrop.contains(j))",
      "info" : "IfStatement[14057-14165]:IfStatement[14057-14165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14089-14165]:Block[14089-14165]"
    }, {
      "left" : "matrix[i - 1][col++] = tableau.getEntry(i, j);",
      "right" : "matrix[i - 1][col++] = tableau.getEntry(i, j);",
      "info" : "ExpressionStatement[14105-14151]:ExpressionStatement[14105-14151]"
    }, {
      "left" : "for (int i = columnsToDrop.size() - 1; i >= 0; i--)",
      "right" : "for (int i = columnsToDrop.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[14197-14319]:ForStatement[14197-14319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14249-14319]:Block[14249-14319]"
    }, {
      "left" : "columnLabels.remove((int) columnsToDrop.get(i));",
      "right" : "columnLabels.remove((int) columnsToDrop.get(i));",
      "info" : "ExpressionStatement[14261-14309]:ExpressionStatement[14261-14309]"
    }, {
      "left" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "right" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "info" : "ExpressionStatement[14329-14377]:ExpressionStatement[14329-14377]"
    }, {
      "left" : "this.numArtificialVariables = 0;",
      "right" : "this.numArtificialVariables = 0;",
      "info" : "ExpressionStatement[14386-14418]:ExpressionStatement[14386-14418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14586-14673]:Block[14586-14673]"
    }, {
      "left" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "right" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "info" : "ExpressionStatement[14596-14667]:ExpressionStatement[14596-14667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14823-15101]:Block[14823-15101]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++)",
      "info" : "ForStatement[14833-15074]:ForStatement[14833-15074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14899-15074]:Block[14899-15074]"
    }, {
      "left" : "final double entry = tableau.getEntry(0, i);",
      "right" : "final double entry = tableau.getEntry(0, i);",
      "info" : "VariableDeclarationStatement[14913-14957]:VariableDeclarationStatement[14913-14957]"
    }, {
      "left" : "if (Precision.compareTo(entry, 0d, epsilon) < 0)",
      "right" : "if (Precision.compareTo(entry, 0d, epsilon) < 0)",
      "info" : "IfStatement[14970-15064]:IfStatement[14970-15064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15019-15064]:Block[15019-15064]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15037-15050]:ReturnStatement[15037-15050]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15083-15095]:ReturnStatement[15083-15095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17121-17275]:Block[17214-17368]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[17131-17269]:ForStatement[17224-17362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17168-17269]:Block[17261-17362]"
    }, {
      "left" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "right" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "info" : "ExpressionStatement[17182-17259]:ExpressionStatement[17275-17352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17748-17912]:Block[17841-18005]"
    }, {
      "left" : "tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n            .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));",
      "right" : "tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n            .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));",
      "info" : "ExpressionStatement[17758-17906]:ExpressionStatement[17851-17999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18038-18090]:Block[18131-18183]"
    }, {
      "left" : "return tableau.getColumnDimension();",
      "right" : "return tableau.getColumnDimension();",
      "info" : "ReturnStatement[18048-18084]:ReturnStatement[18141-18177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18219-18268]:Block[18312-18361]"
    }, {
      "left" : "return tableau.getRowDimension();",
      "right" : "return tableau.getRowDimension();",
      "info" : "ReturnStatement[18229-18262]:ReturnStatement[18322-18355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18484-18537]:Block[18577-18630]"
    }, {
      "left" : "return tableau.getEntry(row, column);",
      "right" : "return tableau.getEntry(row, column);",
      "info" : "ReturnStatement[18494-18531]:ReturnStatement[18587-18624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18801-18854]:Block[18894-18947]"
    }, {
      "left" : "tableau.setEntry(row, column, value);",
      "right" : "tableau.setEntry(row, column, value);",
      "info" : "ExpressionStatement[18811-18848]:ExpressionStatement[18904-18941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19022-19095]:Block[19115-19188]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "info" : "ReturnStatement[19032-19089]:ReturnStatement[19125-19182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19278-19371]:Block[19371-19464]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "info" : "ReturnStatement[19288-19365]:ReturnStatement[19381-19458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19519-19557]:Block[19612-19650]"
    }, {
      "left" : "return getWidth() - 1;",
      "right" : "return getWidth() - 1;",
      "info" : "ReturnStatement[19529-19551]:ReturnStatement[19622-19644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19964-20008]:Block[20057-20101]"
    }, {
      "left" : "return numDecisionVariables;",
      "right" : "return numDecisionVariables;",
      "info" : "ReturnStatement[19974-20002]:ReturnStatement[20067-20095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20230-20288]:Block[20323-20381]"
    }, {
      "left" : "return f.getCoefficients().getDimension();",
      "right" : "return f.getCoefficients().getDimension();",
      "info" : "ReturnStatement[20240-20282]:ReturnStatement[20333-20375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20436-20477]:Block[20529-20570]"
    }, {
      "left" : "return numSlackVariables;",
      "right" : "return numSlackVariables;",
      "info" : "ReturnStatement[20446-20471]:ReturnStatement[20539-20564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20640-20686]:Block[20733-20779]"
    }, {
      "left" : "return numArtificialVariables;",
      "right" : "return numArtificialVariables;",
      "info" : "ReturnStatement[20650-20680]:ReturnStatement[20743-20773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20802-20843]:Block[20895-20936]"
    }, {
      "left" : "return tableau.getData();",
      "right" : "return tableau.getData();",
      "info" : "ReturnStatement[20812-20837]:ReturnStatement[20905-20930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20924-21667]:Block[21017-21760]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[20933-20982]:IfStatement[21026-21075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20952-20982]:Block[21045-21075]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20962-20974]:ReturnStatement[21055-21067]"
    }, {
      "left" : "if (other instanceof SimplexTableau)",
      "right" : "if (other instanceof SimplexTableau)",
      "info" : "IfStatement[20990-21641]:IfStatement[21083-21734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21027-21641]:Block[21120-21734]"
    }, {
      "left" : "SimplexTableau rhs = (SimplexTableau) other;",
      "right" : "SimplexTableau rhs = (SimplexTableau) other;",
      "info" : "VariableDeclarationStatement[21039-21083]:VariableDeclarationStatement[21132-21176]"
    }, {
      "left" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 (maxUlps                == rhs.maxUlps) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "right" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 (maxUlps                == rhs.maxUlps) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "info" : "ReturnStatement[21094-21633]:ReturnStatement[21187-21726]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21648-21661]:ReturnStatement[21741-21754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21734-22103]:Block[21827-22196]"
    }, {
      "left" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               maxUlps ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "right" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               maxUlps ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "info" : "ReturnStatement[21744-22097]:ReturnStatement[21837-22190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22346-22442]:Block[22439-22535]"
    }, {
      "left" : "oos.defaultWriteObject();",
      "right" : "oos.defaultWriteObject();",
      "info" : "ExpressionStatement[22356-22381]:ExpressionStatement[22449-22474]"
    }, {
      "left" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "right" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "info" : "ExpressionStatement[22390-22436]:ExpressionStatement[22483-22529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22795-22900]:Block[22888-22993]"
    }, {
      "left" : "ois.defaultReadObject();",
      "right" : "ois.defaultReadObject();",
      "info" : "ExpressionStatement[22805-22829]:ExpressionStatement[22898-22922]"
    }, {
      "left" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "right" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "info" : "ExpressionStatement[22838-22894]:ExpressionStatement[22931-22987]"
    } ]
  },
  "interFileMappings" : { }
}