{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1461-1755]:FieldDeclaration[1461-1755]"
    }, {
      "left" : "public static final String CONSTANT_MARKER = \"$$constant\";",
      "right" : "public static final String CONSTANT_MARKER = \"$$constant\";",
      "info" : "FieldDeclaration[1759-1817]:FieldDeclaration[1759-1817]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[1861-1882]:MethodDeclaration[1861-1882]"
    }, {
      "left" : "static boolean getBooleanValue(Node n)",
      "right" : "static boolean getBooleanValue(Node n)",
      "info" : "MethodDeclaration[1886-3025]:MethodDeclaration[1886-3025]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[3030-3964]:MethodDeclaration[3030-3964]"
    }, {
      "left" : "static String getFunctionName(Node n, Node parent)",
      "right" : "static String getFunctionName(Node n, Node parent)",
      "info" : "MethodDeclaration[3968-5210]:MethodDeclaration[3968-5210]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[5214-5928]:MethodDeclaration[5214-5928]"
    }, {
      "left" : "static boolean isLiteralValue(Node n)",
      "right" : "static boolean isLiteralValue(Node n)",
      "info" : "MethodDeclaration[5932-6734]:MethodDeclaration[5932-6734]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[6738-7659]:MethodDeclaration[6738-7659]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[7663-8043]:MethodDeclaration[7663-8043]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[8047-9024]:MethodDeclaration[8047-9024]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[9028-9335]:MethodDeclaration[9028-9335]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[9339-9606]:MethodDeclaration[9339-9606]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[9610-9790]:MethodDeclaration[9610-9790]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects)",
      "info" : "MethodDeclaration[9794-13879]:MethodDeclaration[9794-13879]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[13883-14485]:MethodDeclaration[13883-14485]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[14489-15474]:MethodDeclaration[14489-15474]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[15478-16184]:MethodDeclaration[15478-16184]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[16188-16428]:MethodDeclaration[16188-16428]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[18111-20166]:MethodDeclaration[18227-20282]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[20170-20638]:MethodDeclaration[20286-20754]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[20642-21109]:MethodDeclaration[20758-21225]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[21113-21876]:MethodDeclaration[21229-21992]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[21880-21970]:MethodDeclaration[21996-22086]"
    }, {
      "left" : "static boolean containsFunctionDeclaration(Node n)",
      "right" : "static boolean containsFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[21974-22153]:MethodDeclaration[22090-22269]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[22157-22323]:MethodDeclaration[22273-22439]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[22327-22494]:MethodDeclaration[22443-22610]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[22498-22618]:MethodDeclaration[22614-22734]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[22622-22733]:MethodDeclaration[22738-22849]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[22737-22845]:MethodDeclaration[22853-22961]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[22849-22957]:MethodDeclaration[22965-23073]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[22961-23370]:MethodDeclaration[23077-23486]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[23374-23816]:MethodDeclaration[23490-23932]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[23820-23937]:MethodDeclaration[23936-24053]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[23941-24269]:MethodDeclaration[24057-24385]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[24273-24391]:MethodDeclaration[24389-24507]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[24395-24710]:MethodDeclaration[24511-24826]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[24714-24889]:MethodDeclaration[24830-25005]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[24893-25175]:MethodDeclaration[25009-25291]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[25179-25582]:MethodDeclaration[25295-25698]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[25586-26069]:MethodDeclaration[25702-26185]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[26073-26954]:MethodDeclaration[26189-27070]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[26958-27758]:MethodDeclaration[27074-27874]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[27762-27963]:MethodDeclaration[27878-28079]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[27967-28563]:MethodDeclaration[28083-28679]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[28567-28735]:MethodDeclaration[28683-28851]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[28739-29016]:MethodDeclaration[28855-29132]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[29020-29425]:MethodDeclaration[29136-29541]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[29429-29669]:MethodDeclaration[29545-29785]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[29673-31339]:MethodDeclaration[29789-31455]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[31343-32193]:MethodDeclaration[31459-32309]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[32197-32308]:MethodDeclaration[32313-32424]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[32312-32435]:MethodDeclaration[32428-32551]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[32439-32626]:MethodDeclaration[32555-32742]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[32630-32747]:MethodDeclaration[32746-32863]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[32751-32893]:MethodDeclaration[32867-33009]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[32897-33243]:MethodDeclaration[33013-33359]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[33247-33658]:MethodDeclaration[33363-33774]"
    }, {
      "left" : "static boolean isAnonymousFunction(Node n)",
      "right" : "static boolean isAnonymousFunction(Node n)",
      "info" : "MethodDeclaration[33663-33980]:MethodDeclaration[33779-34096]"
    }, {
      "left" : "static boolean isFunctionAnonymous(Node n)",
      "right" : "static boolean isFunctionAnonymous(Node n)",
      "info" : "MethodDeclaration[33984-34701]:MethodDeclaration[34100-34817]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[34705-35126]:MethodDeclaration[34821-35242]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[35130-35742]:MethodDeclaration[35246-35858]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[35747-35982]:MethodDeclaration[35863-36098]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[35986-36225]:MethodDeclaration[36102-36341]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[36229-36624]:MethodDeclaration[36345-36740]"
    }, {
      "left" : "static boolean isLhs(Node n, Node parent)",
      "right" : "static boolean isLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[36628-37146]:MethodDeclaration[36744-37262]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[37150-37746]:MethodDeclaration[37266-37862]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[37750-39663]:MethodDeclaration[37866-39779]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[39667-40170]:MethodDeclaration[39783-40286]"
    }, {
      "left" : "static boolean containsTypeInOuterScope(Node node, int type)",
      "right" : "static boolean containsTypeInOuterScope(Node node, int type)",
      "info" : "MethodDeclaration[40174-40479]:MethodDeclaration[40290-40595]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[40483-40788]:MethodDeclaration[40599-40904]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[40792-40998]:MethodDeclaration[40908-41114]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[41003-41654]:MethodDeclaration[41119-41770]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[41658-41959]:MethodDeclaration[41774-42075]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[41963-42785]:MethodDeclaration[42079-42901]"
    }, {
      "left" : "public static FunctionNode newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static FunctionNode newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[42789-43380]:MethodDeclaration[42905-43496]"
    }, {
      "left" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "info" : "MethodDeclaration[43384-44437]:MethodDeclaration[43500-44553]"
    }, {
      "left" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[44441-45187]:MethodDeclaration[44557-45303]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[45191-45722]:MethodDeclaration[45307-45838]"
    }, {
      "left" : "static Node newName(String name, Node basisNode)",
      "right" : "static Node newName(String name, Node basisNode)",
      "info" : "MethodDeclaration[45726-46226]:MethodDeclaration[45842-46342]"
    }, {
      "left" : "static Node newName(String name, Node basisNode, String originalName)",
      "right" : "static Node newName(String name, Node basisNode, String originalName)",
      "info" : "MethodDeclaration[46230-46945]:MethodDeclaration[46346-47061]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[46949-47816]:MethodDeclaration[47065-47932]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[47820-48490]:MethodDeclaration[47936-48606]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[48494-48931]:TypeDeclaration[48610-49047]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[48553-48608]:FieldDeclaration[48669-48724]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[48614-48927]:MethodDeclaration[48730-49043]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[48935-49311]:MethodDeclaration[49051-49427]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[49315-49622]:MethodDeclaration[49431-49738]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[49626-49862]:MethodDeclaration[49742-49978]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[49866-50225]:MethodDeclaration[49982-50341]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[50229-50587]:MethodDeclaration[50345-50703]"
    }, {
      "left" : "static Node newUndefinedNode()",
      "right" : "static Node newUndefinedNode()",
      "info" : "MethodDeclaration[50591-50830]:MethodDeclaration[50707-50946]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[50834-51167]:MethodDeclaration[50950-51283]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[51171-51523]:TypeDeclaration[51287-51639]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[51316-51334]:FieldDeclaration[51432-51450]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[51340-51397]:MethodDeclaration[51456-51513]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[51403-51519]:MethodDeclaration[51519-51635]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[51527-51814]:TypeDeclaration[51643-51930]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[51659-51674]:FieldDeclaration[51775-51790]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[51680-51734]:MethodDeclaration[51796-51850]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[51740-51810]:MethodDeclaration[51856-51926]"
    }, {
      "left" : "static boolean isNodeTypeReferenced(Node node, int type)",
      "right" : "static boolean isNodeTypeReferenced(Node node, int type)",
      "info" : "MethodDeclaration[51818-52018]:MethodDeclaration[51934-52134]"
    }, {
      "left" : "static boolean isNodeTypeReferenced(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNodeTypeReferenced(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[52022-52260]:MethodDeclaration[52138-52376]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(Node node, int type)",
      "right" : "static int getNodeTypeReferenceCount(Node node, int type)",
      "info" : "MethodDeclaration[52264-52465]:MethodDeclaration[52380-52581]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[52469-52780]:MethodDeclaration[52585-52896]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[52784-52992]:MethodDeclaration[52900-53108]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[52996-53204]:MethodDeclaration[53112-53320]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[53208-53735]:MethodDeclaration[53324-53851]"
    }, {
      "left" : "static int getCount(Node n, Predicate<Node> pred)",
      "right" : "static int getCount(Node n, Predicate<Node> pred)",
      "info" : "MethodDeclaration[53739-54100]:MethodDeclaration[53855-54216]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[54104-54236]:TypeDeclaration[54220-54352]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[54210-54232]:MethodDeclaration[54326-54348]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[54240-54694]:MethodDeclaration[54356-54810]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[54698-55155]:MethodDeclaration[54814-55271]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[55159-55357]:MethodDeclaration[55275-55473]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[55361-55589]:MethodDeclaration[55477-55705]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[55593-55880]:MethodDeclaration[55709-55996]"
    }, {
      "left" : "static Node getFnParameters(Node fnNode)",
      "right" : "static Node getFnParameters(Node fnNode)",
      "info" : "MethodDeclaration[55884-56213]:MethodDeclaration[56000-56329]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[56217-57020]:MethodDeclaration[56333-57136]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[57024-57549]:MethodDeclaration[57140-57665]"
    }, {
      "left" : "static String getSourceName(Node n)",
      "right" : "static String getSourceName(Node n)",
      "info" : "MethodDeclaration[57553-57889]:MethodDeclaration[57669-58005]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1861-1868]:Modifier[1861-1868]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1869-1877]:SimpleName[1869-1877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1880-1882]:Block[1880-1882]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2133-2139]:Modifier[2133-2139]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2140-2147]:PrimitiveType[2140-2147]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[2148-2163]:SimpleName[2148-2163]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2164-2170]:SingleVariableDeclaration[2164-2170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2172-3025]:Block[2172-3025]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString().length() > 0;\n\n      case Token.NUMBER:\n        return n.getDouble() != 0;\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return false;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return false;\n        } else if (\"Infinity\".equals(name)) {\n          return true;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString().length() > 0;\n\n      case Token.NUMBER:\n        return n.getDouble() != 0;\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return false;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return false;\n        } else if (\"Infinity\".equals(name)) {\n          return true;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return true;\n    }",
      "info" : "SwitchStatement[2178-2954]:SwitchStatement[2178-2954]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[2207-2225]:SwitchCase[2207-2225]"
    }, {
      "left" : "return n.getString().length() > 0;",
      "right" : "return n.getString().length() > 0;",
      "info" : "ReturnStatement[2234-2268]:ReturnStatement[2234-2268]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[2276-2294]:SwitchCase[2276-2294]"
    }, {
      "left" : "return n.getDouble() != 0;",
      "right" : "return n.getDouble() != 0;",
      "info" : "ReturnStatement[2303-2329]:ReturnStatement[2303-2329]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[2337-2353]:SwitchCase[2337-2353]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[2360-2377]:SwitchCase[2360-2377]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[2384-2400]:SwitchCase[2384-2400]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2409-2422]:ReturnStatement[2409-2422]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[2430-2446]:SwitchCase[2430-2446]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[2455-2483]:VariableDeclarationStatement[2455-2483]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[2492-2808]:IfStatement[2492-2808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2556-2739]:Block[2556-2739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2716-2729]:ReturnStatement[2716-2729]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[2745-2808]:IfStatement[2745-2808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2774-2808]:Block[2774-2808]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2786-2798]:ReturnStatement[2786-2798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2817-2823]:BreakStatement[2817-2823]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[2831-2847]:SwitchCase[2831-2847]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[2854-2874]:SwitchCase[2854-2874]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[2881-2902]:SwitchCase[2881-2902]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[2909-2927]:SwitchCase[2909-2927]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2936-2948]:ReturnStatement[2936-2948]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Non-literal value: \" + n);",
      "right" : "throw new IllegalArgumentException(\"Non-literal value: \" + n);",
      "info" : "ThrowStatement[2959-3021]:ThrowStatement[2959-3021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3250-3256]:Modifier[3250-3256]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3257-3263]:SimpleType[3257-3263]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[3264-3278]:SimpleName[3264-3278]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3279-3285]:SingleVariableDeclaration[3279-3285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3287-3964]:Block[3287-3964]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "info" : "SwitchStatement[3372-3943]:SwitchStatement[3372-3943]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[3401-3417]:SwitchCase[3401-3417]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[3424-3442]:SwitchCase[3424-3442]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[3451-3472]:ReturnStatement[3451-3472]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[3480-3498]:SwitchCase[3480-3498]"
    }, {
      "left" : "double value = n.getDouble();",
      "right" : "double value = n.getDouble();",
      "info" : "VariableDeclarationStatement[3507-3536]:VariableDeclarationStatement[3507-3536]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[3545-3575]:VariableDeclarationStatement[3545-3575]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[3624-3768]:IfStatement[3624-3768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3648-3702]:Block[3648-3702]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[3660-3692]:ReturnStatement[3660-3692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3708-3768]:Block[3708-3768]"
    }, {
      "left" : "return Double.toString(n.getDouble());",
      "right" : "return Double.toString(n.getDouble());",
      "info" : "ReturnStatement[3720-3758]:ReturnStatement[3720-3758]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[3776-3793]:SwitchCase[3776-3793]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[3800-3816]:SwitchCase[3800-3816]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[3823-3839]:SwitchCase[3823-3839]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[3848-3885]:ReturnStatement[3848-3885]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3893-3909]:SwitchCase[3893-3909]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[3918-3937]:ReturnStatement[3918-3937]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3948-3960]:ReturnStatement[3948-3960]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4639-4645]:Modifier[4639-4645]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4646-4652]:SimpleType[4646-4652]"
    }, {
      "left" : "getFunctionName",
      "right" : "getFunctionName",
      "info" : "SimpleName[4653-4668]:SimpleName[4653-4668]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4669-4675]:SingleVariableDeclaration[4669-4675]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4677-4688]:SingleVariableDeclaration[4677-4688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4690-5210]:Block[4690-5210]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4696-4740]:VariableDeclarationStatement[4696-4740]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[4745-5206]:SwitchStatement[4745-5206]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4779-4795]:SwitchCase[4779-4795]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[4885-4911]:ReturnStatement[4885-4911]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[4919-4937]:SwitchCase[4919-4937]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[5039-5088]:ReturnStatement[5039-5088]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5096-5104]:SwitchCase[5096-5104]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[5144-5200]:ReturnStatement[5144-5200]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5275-5281]:Modifier[5275-5281]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5282-5289]:PrimitiveType[5282-5289]"
    }, {
      "left" : "isImmutableValue",
      "right" : "isImmutableValue",
      "info" : "SimpleName[5290-5306]:SimpleName[5290-5306]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5307-5313]:SingleVariableDeclaration[5307-5313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5315-5928]:Block[5315-5928]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.VOID:\n        return true;\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.VOID:\n        return true;\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[5321-5905]:SwitchStatement[5321-5905]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5350-5368]:SwitchCase[5350-5368]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[5375-5393]:SwitchCase[5375-5393]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[5400-5416]:SwitchCase[5400-5416]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5423-5439]:SwitchCase[5423-5439]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[5446-5463]:SwitchCase[5446-5463]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[5470-5486]:SwitchCase[5470-5486]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5495-5507]:ReturnStatement[5495-5507]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[5514-5529]:SwitchCase[5514-5529]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[5538-5581]:ReturnStatement[5538-5581]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5588-5604]:SwitchCase[5588-5604]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5613-5641]:VariableDeclarationStatement[5613-5641]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[5794-5899]:ReturnStatement[5794-5899]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5911-5924]:ReturnStatement[5911-5924]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6192-6198]:Modifier[6192-6198]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6199-6206]:PrimitiveType[6199-6206]"
    }, {
      "left" : "isLiteralValue",
      "right" : "isLiteralValue",
      "info" : "SimpleName[6207-6221]:SimpleName[6207-6221]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6222-6228]:SingleVariableDeclaration[6222-6228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6230-6734]:Block[6230-6734]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child)) {\n            return false;\n          }\n        }\n        return true;\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child)) {\n            return false;\n          }\n        }\n        return true;\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[6306-6730]:SwitchStatement[6306-6730]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6335-6355]:SwitchCase[6335-6355]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6362-6383]:SwitchCase[6362-6383]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[6390-6408]:SwitchCase[6390-6408]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[6472-6651]:ForStatement[6472-6651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6562-6651]:Block[6562-6651]"
    }, {
      "left" : "if (!isLiteralValue(child))",
      "right" : "if (!isLiteralValue(child))",
      "info" : "IfStatement[6574-6641]:IfStatement[6574-6641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6602-6641]:Block[6602-6641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6616-6629]:ReturnStatement[6616-6629]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6660-6672]:ReturnStatement[6660-6672]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6680-6688]:SwitchCase[6680-6688]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[6697-6724]:ReturnStatement[6697-6724]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6925-6931]:Modifier[6925-6931]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6932-6939]:PrimitiveType[6932-6939]"
    }, {
      "left" : "isValidDefineValue",
      "right" : "isValidDefineValue",
      "info" : "SimpleName[6940-6958]:SimpleName[6940-6958]"
    }, {
      "left" : "Node val",
      "right" : "Node val",
      "info" : "SingleVariableDeclaration[6959-6967]:SingleVariableDeclaration[6959-6967]"
    }, {
      "left" : "Set<String> defines",
      "right" : "Set<String> defines",
      "info" : "SingleVariableDeclaration[6969-6988]:SingleVariableDeclaration[6969-6988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6990-7659]:Block[6990-7659]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Single operators are valid if the child is valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Single operators are valid if the child is valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[6996-7637]:SwitchStatement[6996-7637]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7027-7045]:SwitchCase[7027-7045]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7052-7070]:SwitchCase[7052-7070]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7077-7093]:SwitchCase[7077-7093]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7100-7117]:SwitchCase[7100-7117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7126-7138]:ReturnStatement[7126-7138]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[7205-7223]:SwitchCase[7205-7223]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7230-7248]:SwitchCase[7230-7248]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[7255-7272]:SwitchCase[7255-7272]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[7279-7297]:SwitchCase[7279-7297]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[7304-7319]:SwitchCase[7304-7319]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7326-7341]:SwitchCase[7326-7341]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[7350-7406]:ReturnStatement[7350-7406]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7483-7499]:SwitchCase[7483-7499]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[7506-7525]:SwitchCase[7506-7525]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[7534-7631]:IfStatement[7534-7631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7631]:Block[7561-7631]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[7573-7621]:ReturnStatement[7573-7621]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7642-7655]:ReturnStatement[7642-7655]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7765-7771]:Modifier[7765-7771]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7772-7779]:PrimitiveType[7772-7779]"
    }, {
      "left" : "isEmptyBlock",
      "right" : "isEmptyBlock",
      "info" : "SimpleName[7780-7792]:SimpleName[7780-7792]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[7793-7803]:SingleVariableDeclaration[7793-7803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7805-8043]:Block[7805-8043]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[7811-7874]:IfStatement[7811-7874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7847-7874]:Block[7847-7874]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7855-7868]:ReturnStatement[7855-7868]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[7880-8022]:ForStatement[7880-8022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8022]:Block[7945-8022]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[7953-8016]:IfStatement[7953-8016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7985-8016]:Block[7985-8016]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7995-8008]:ReturnStatement[7995-8008]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8027-8039]:ReturnStatement[8027-8039]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8221-8227]:Modifier[8221-8227]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8228-8235]:PrimitiveType[8228-8235]"
    }, {
      "left" : "isSimpleOperatorType",
      "right" : "isSimpleOperatorType",
      "info" : "SimpleName[8236-8256]:SimpleName[8236-8256]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[8257-8265]:SingleVariableDeclaration[8257-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8267-9024]:Block[8267-9024]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[8273-9020]:SwitchStatement[8273-9020]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[8295-8310]:SwitchCase[8295-8310]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[8317-8335]:SwitchCase[8317-8335]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[8342-8360]:SwitchCase[8342-8360]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[8367-8384]:SwitchCase[8367-8384]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[8391-8409]:SwitchCase[8391-8409]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[8416-8433]:SwitchCase[8416-8433]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[8440-8455]:SwitchCase[8440-8455]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[8462-8476]:SwitchCase[8462-8476]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[8483-8497]:SwitchCase[8483-8497]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[8504-8523]:SwitchCase[8504-8523]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8530-8549]:SwitchCase[8530-8549]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[8556-8570]:SwitchCase[8556-8570]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[8577-8599]:SwitchCase[8577-8599]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[8606-8620]:SwitchCase[8606-8620]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[8627-8642]:SwitchCase[8627-8642]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[8649-8663]:SwitchCase[8649-8663]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[8670-8685]:SwitchCase[8670-8685]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[8692-8707]:SwitchCase[8692-8707]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[8714-8728]:SwitchCase[8714-8728]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[8735-8750]:SwitchCase[8735-8750]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[8757-8772]:SwitchCase[8757-8772]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[8779-8795]:SwitchCase[8779-8795]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[8802-8818]:SwitchCase[8802-8818]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[8825-8840]:SwitchCase[8825-8840]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[8847-8865]:SwitchCase[8847-8865]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8872-8888]:SwitchCase[8872-8888]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[8895-8910]:SwitchCase[8895-8910]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8917-8932]:SwitchCase[8917-8932]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[8939-8955]:SwitchCase[8939-8955]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8964-8976]:ReturnStatement[8964-8976]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8984-8992]:SwitchCase[8984-8992]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9001-9014]:ReturnStatement[9001-9014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9185-9191]:Modifier[9185-9191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9192-9198]:Modifier[9192-9198]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9199-9203]:SimpleType[9199-9203]"
    }, {
      "left" : "newExpr",
      "right" : "newExpr",
      "info" : "SimpleName[9204-9211]:SimpleName[9204-9211]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[9212-9222]:SingleVariableDeclaration[9212-9222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9224-9335]:Block[9224-9335]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT, child);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT, child);",
      "info" : "VariableDeclarationStatement[9230-9277]:VariableDeclarationStatement[9230-9277]"
    }, {
      "left" : "expr.copyInformationFrom(child);",
      "right" : "expr.copyInformationFrom(child);",
      "info" : "ExpressionStatement[9282-9314]:ExpressionStatement[9282-9314]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[9319-9331]:ReturnStatement[9319-9331]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9509-9515]:Modifier[9509-9515]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9516-9523]:PrimitiveType[9516-9523]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[9524-9545]:SimpleName[9524-9545]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9546-9552]:SingleVariableDeclaration[9546-9552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9554-9606]:Block[9554-9606]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true);",
      "right" : "return checkForStateChangeHelper(n, true);",
      "info" : "ReturnStatement[9560-9602]:ReturnStatement[9560-9602]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9695-9701]:Modifier[9695-9701]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9702-9709]:PrimitiveType[9702-9709]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[9710-9728]:SimpleName[9710-9728]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9729-9735]:SingleVariableDeclaration[9729-9735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9737-9790]:Block[9737-9790]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false);",
      "right" : "return checkForStateChangeHelper(n, false);",
      "info" : "ReturnStatement[9743-9786]:ReturnStatement[9743-9786]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10068-10075]:Modifier[10068-10075]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10076-10082]:Modifier[10076-10082]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10083-10090]:PrimitiveType[10083-10090]"
    }, {
      "left" : "checkForStateChangeHelper",
      "right" : "checkForStateChangeHelper",
      "info" : "SimpleName[10091-10116]:SimpleName[10091-10116]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10124-10130]:SingleVariableDeclaration[10124-10130]"
    }, {
      "left" : "boolean checkForNewObjects",
      "right" : "boolean checkForNewObjects",
      "info" : "SingleVariableDeclaration[10132-10158]:SingleVariableDeclaration[10132-10158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10160-13879]:Block[10160-13879]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null)\n          return true;\n\n        break;\n\n      case Token.FUNCTION:\n        // Anonymous functions don't have side-effects, but named ones\n        // change the namespace. Therefore, we check if the function has\n        // a name. Either way, we don't need to check the children, since\n        // they aren't executed at declaration time.\n        //\n        return !isFunctionAnonymous(n);\n\n      case Token.NEW:\n        {\n          if (checkForNewObjects) {\n            return true;\n          }\n\n          // calls to constructors that have no side effects have the\n          // no side effect property set.\n          if (n.isNoSideEffectsCall()) {\n            break;\n          }\n\n          // certain constructors are certified side effect free\n          Node constructor = n.getFirstChild();\n          if (Token.NAME == constructor.getType()) {\n            String className = constructor.getString();\n            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n              // loop below will see if the constructor parameters have\n              // side-effects\n              break;\n            }\n          } else {\n            // the constructor could also be an expression like\n            // new (useArray ? Object : Array)();\n          }\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (n.isNoSideEffectsCall()) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType()))\n          break;\n\n        if (isAssignmentOp(n)) {\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects)) {\n            return true;\n          }\n\n          Node current = n.getFirstChild();\n          for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild()) { }\n\n          return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null)\n          return true;\n\n        break;\n\n      case Token.FUNCTION:\n        // Anonymous functions don't have side-effects, but named ones\n        // change the namespace. Therefore, we check if the function has\n        // a name. Either way, we don't need to check the children, since\n        // they aren't executed at declaration time.\n        //\n        return !isFunctionAnonymous(n);\n\n      case Token.NEW:\n        {\n          if (checkForNewObjects) {\n            return true;\n          }\n\n          // calls to constructors that have no side effects have the\n          // no side effect property set.\n          if (n.isNoSideEffectsCall()) {\n            break;\n          }\n\n          // certain constructors are certified side effect free\n          Node constructor = n.getFirstChild();\n          if (Token.NAME == constructor.getType()) {\n            String className = constructor.getString();\n            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n              // loop below will see if the constructor parameters have\n              // side-effects\n              break;\n            }\n          } else {\n            // the constructor could also be an expression like\n            // new (useArray ? Object : Array)();\n          }\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (n.isNoSideEffectsCall()) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType()))\n          break;\n\n        if (isAssignmentOp(n)) {\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects)) {\n            return true;\n          }\n\n          Node current = n.getFirstChild();\n          for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild()) { }\n\n          return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[10264-13691]:SwitchStatement[10264-13691]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[10352-10367]:SwitchCase[10352-10367]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10374-10391]:SwitchCase[10374-10391]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[10398-10421]:SwitchCase[10398-10421]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[10428-10444]:SwitchCase[10428-10444]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[10451-10465]:SwitchCase[10451-10465]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[10472-10486]:SwitchCase[10472-10486]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[10493-10507]:SwitchCase[10493-10507]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[10514-10532]:SwitchCase[10514-10532]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[10539-10553]:SwitchCase[10539-10553]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[10560-10576]:SwitchCase[10560-10576]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[10583-10599]:SwitchCase[10583-10599]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[10606-10623]:SwitchCase[10606-10623]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[10630-10646]:SwitchCase[10630-10646]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[10653-10671]:SwitchCase[10653-10671]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[10678-10696]:SwitchCase[10678-10696]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[10703-10718]:SwitchCase[10703-10718]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[10725-10742]:SwitchCase[10725-10742]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10751-10757]:BreakStatement[10751-10757]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[10812-10829]:SwitchCase[10812-10829]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10838-10850]:ReturnStatement[10838-10850]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[10858-10879]:SwitchCase[10858-10879]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[10886-10906]:SwitchCase[10886-10906]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[10913-10931]:SwitchCase[10913-10931]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[10940-10998]:IfStatement[10940-10998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10964-10998]:Block[10964-10998]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10976-10988]:ReturnStatement[10976-10988]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11007-11013]:BreakStatement[11007-11013]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[11021-11036]:SwitchCase[11021-11036]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[11086-11102]:SwitchCase[11086-11102]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[11135-11188]:IfStatement[11135-11188]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11176-11188]:ReturnStatement[11176-11188]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11198-11204]:BreakStatement[11198-11204]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[11212-11232]:SwitchCase[11212-11232]"
    }, {
      "left" : "return !isFunctionAnonymous(n);",
      "right" : "return !isFunctionAnonymous(n);",
      "info" : "ReturnStatement[11523-11554]:ReturnStatement[11523-11554]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[11562-11577]:SwitchCase[11562-11577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11586-12433]:Block[11586-12433]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[11598-11660]:IfStatement[11598-11660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11622-11660]:Block[11622-11660]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11636-11648]:ReturnStatement[11636-11648]"
    }, {
      "left" : "if (n.isNoSideEffectsCall())",
      "right" : "if (n.isNoSideEffectsCall())",
      "info" : "IfStatement[11784-11845]:IfStatement[11784-11845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11813-11845]:Block[11813-11845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11827-11833]:BreakStatement[11827-11833]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[11922-11959]:VariableDeclarationStatement[11922-11959]"
    }, {
      "left" : "if (Token.NAME == constructor.getType())",
      "right" : "if (Token.NAME == constructor.getType())",
      "info" : "IfStatement[11970-12423]:IfStatement[11970-12423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12011-12290]:Block[12011-12290]"
    }, {
      "left" : "String className = constructor.getString();",
      "right" : "String className = constructor.getString();",
      "info" : "VariableDeclarationStatement[12025-12068]:VariableDeclarationStatement[12025-12068]"
    }, {
      "left" : "if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className))",
      "right" : "if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className))",
      "info" : "IfStatement[12081-12278]:IfStatement[12081-12278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12140-12278]:Block[12140-12278]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12258-12264]:BreakStatement[12258-12264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12296-12423]:Block[12296-12423]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12442-12454]:ReturnStatement[12442-12454]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[12462-12478]:SwitchCase[12462-12478]"
    }, {
      "left" : "if (n.isNoSideEffectsCall())",
      "right" : "if (n.isNoSideEffectsCall())",
      "info" : "IfStatement[12592-12740]:IfStatement[12592-12740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12621-12740]:Block[12621-12740]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12724-12730]:BreakStatement[12724-12730]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12749-12761]:ReturnStatement[12749-12761]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12769-12777]:SwitchCase[12769-12777]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[12786-12841]:IfStatement[12786-12841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12835-12841]:BreakStatement[12835-12841]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[12851-13663]:IfStatement[12851-13663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12874-13663]:Block[12874-13663]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects))",
      "info" : "IfStatement[13107-13334]:IfStatement[13107-13334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13296-13334]:Block[13296-13334]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13310-13322]:ReturnStatement[13310-13322]"
    }, {
      "left" : "Node current = n.getFirstChild();",
      "right" : "Node current = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13346-13379]:VariableDeclarationStatement[13346-13379]"
    }, {
      "left" : "for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild())",
      "right" : "for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild())",
      "info" : "ForStatement[13390-13554]:ForStatement[13390-13554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13551-13554]:Block[13551-13554]"
    }, {
      "left" : "return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);",
      "right" : "return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[13566-13653]:ReturnStatement[13566-13653]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13673-13685]:ReturnStatement[13673-13685]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[13697-13856]:ForStatement[13697-13856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13758-13856]:Block[13758-13856]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects))",
      "info" : "IfStatement[13766-13850]:IfStatement[13766-13850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13820-13850]:Block[13820-13850]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13830-13842]:ReturnStatement[13830-13842]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13862-13875]:ReturnStatement[13862-13875]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13997-14003]:Modifier[13997-14003]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14004-14011]:PrimitiveType[14004-14011]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[14012-14041]:SimpleName[14012-14041]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[14042-14055]:SingleVariableDeclaration[14042-14055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14057-14485]:Block[14057-14485]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[14063-14201]:ExpressionStatement[14063-14201]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[14207-14270]:IfStatement[14207-14270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14243-14270]:Block[14243-14270]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14251-14264]:ReturnStatement[14251-14264]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[14276-14317]:VariableDeclarationStatement[14276-14317]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[14322-14463]:IfStatement[14322-14463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14436-14463]:Block[14436-14463]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14444-14457]:ReturnStatement[14444-14457]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14469-14481]:ReturnStatement[14469-14481]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14611-14617]:Modifier[14611-14617]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14618-14625]:PrimitiveType[14618-14625]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[14626-14652]:SimpleName[14626-14652]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[14653-14666]:SingleVariableDeclaration[14653-14666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14668-15474]:Block[14668-15474]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[14674-14814]:ExpressionStatement[14674-14814]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[14820-14883]:IfStatement[14820-14883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14856-14883]:Block[14856-14883]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14864-14877]:ReturnStatement[14864-14877]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[14889-14930]:VariableDeclarationStatement[14889-14930]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[14984-15136]:IfStatement[14984-15136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15022-15136]:Block[15022-15136]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[15030-15065]:VariableDeclarationStatement[15030-15065]"
    }, {
      "left" : "if (name.equals(\"String\"))",
      "right" : "if (name.equals(\"String\"))",
      "info" : "IfStatement[15072-15130]:IfStatement[15072-15130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15099-15130]:Block[15099-15130]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15109-15122]:ReturnStatement[15109-15122]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP &&\n        nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.GETPROP &&\n        nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[15205-15452]:IfStatement[15205-15452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15306-15452]:Block[15306-15452]"
    }, {
      "left" : "String namespaceName = nameNode.getFirstChild().getString();",
      "right" : "String namespaceName = nameNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[15314-15374]:VariableDeclarationStatement[15314-15374]"
    }, {
      "left" : "if (namespaceName.equals(\"Math\"))",
      "right" : "if (namespaceName.equals(\"Math\"))",
      "info" : "IfStatement[15381-15446]:IfStatement[15381-15446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15415-15446]:Block[15415-15446]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15425-15438]:ReturnStatement[15425-15438]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15458-15470]:ReturnStatement[15458-15470]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15747-15753]:Modifier[15747-15753]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15754-15761]:PrimitiveType[15754-15761]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[15762-15788]:SimpleName[15762-15788]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15789-15795]:SingleVariableDeclaration[15789-15795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15797-16184]:Block[15797-16184]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n))",
      "right" : "if (NodeUtil.isAssignmentOp(n))",
      "info" : "IfStatement[15803-15861]:IfStatement[15803-15861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15835-15861]:Block[15835-15861]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15843-15855]:ReturnStatement[15843-15855]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.CALL:\n      case Token.DELPROP:\n      case Token.NEW:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.CALL:\n      case Token.DELPROP:\n      case Token.NEW:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[15867-16180]:SwitchStatement[15867-16180]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15895-15911]:SwitchCase[15895-15911]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[15918-15937]:SwitchCase[15918-15937]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[15944-15959]:SwitchCase[15944-15959]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[15966-15981]:SwitchCase[15966-15981]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[15988-16003]:SwitchCase[15988-16003]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[16010-16027]:SwitchCase[16010-16027]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16036-16048]:ReturnStatement[16036-16048]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16055-16071]:SwitchCase[16055-16071]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[16114-16137]:ReturnStatement[16114-16137]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16144-16152]:SwitchCase[16144-16152]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16161-16174]:ReturnStatement[16161-16174]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16288-16294]:Modifier[16288-16294]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16295-16302]:PrimitiveType[16295-16302]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[16303-16320]:SimpleName[16303-16320]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16321-16327]:SingleVariableDeclaration[16321-16327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16329-16428]:Block[16329-16428]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[16335-16381]:VariableDeclarationStatement[16335-16381]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[16386-16424]:ReturnStatement[16386-16424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18111-18117]:Modifier[18227-18233]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18118-18121]:PrimitiveType[18234-18237]"
    }, {
      "left" : "precedence",
      "right" : "precedence",
      "info" : "SimpleName[18122-18132]:SimpleName[18238-18248]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[18133-18141]:SingleVariableDeclaration[18249-18257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18143-20166]:Block[18259-20282]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[18149-20162]:SwitchStatement[18265-20278]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[18171-18188]:SwitchCase[18287-18304]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[18190-18199]:ReturnStatement[18306-18315]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[18206-18230]:SwitchCase[18322-18346]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[18237-18262]:SwitchCase[18353-18378]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[18269-18294]:SwitchCase[18385-18410]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[18301-18323]:SwitchCase[18417-18439]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[18330-18352]:SwitchCase[18446-18468]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[18359-18382]:SwitchCase[18475-18498]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[18389-18411]:SwitchCase[18505-18527]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[18418-18440]:SwitchCase[18534-18556]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[18447-18469]:SwitchCase[18563-18585]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[18476-18498]:SwitchCase[18592-18614]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[18505-18527]:SwitchCase[18621-18643]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[18534-18552]:SwitchCase[18650-18668]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[18553-18562]:ReturnStatement[18669-18678]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[18569-18585]:SwitchCase[18685-18701]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[18588-18597]:ReturnStatement[18704-18713]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[18620-18634]:SwitchCase[18736-18750]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[18639-18648]:ReturnStatement[18755-18764]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[18655-18670]:SwitchCase[18771-18786]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[18674-18683]:ReturnStatement[18790-18799]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[18690-18707]:SwitchCase[18806-18823]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[18709-18718]:ReturnStatement[18825-18834]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[18725-18743]:SwitchCase[18841-18859]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[18744-18753]:ReturnStatement[18860-18869]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18760-18778]:SwitchCase[18876-18894]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[18779-18788]:ReturnStatement[18895-18904]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[18795-18809]:SwitchCase[18911-18925]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[18816-18830]:SwitchCase[18932-18946]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[18837-18853]:SwitchCase[18953-18969]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[18860-18876]:SwitchCase[18976-18992]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[18879-18888]:ReturnStatement[18995-19004]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[18895-18909]:SwitchCase[19011-19025]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[18916-18930]:SwitchCase[19032-19046]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[18937-18951]:SwitchCase[19053-19067]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[18958-18972]:SwitchCase[19074-19088]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[18979-19001]:SwitchCase[19095-19117]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[19008-19022]:SwitchCase[19124-19138]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[19027-19036]:ReturnStatement[19143-19152]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[19043-19058]:SwitchCase[19159-19174]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[19065-19080]:SwitchCase[19181-19196]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[19087-19103]:SwitchCase[19203-19219]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[19106-19116]:ReturnStatement[19222-19232]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[19123-19138]:SwitchCase[19239-19254]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[19145-19160]:SwitchCase[19261-19276]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[19164-19174]:ReturnStatement[19280-19290]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[19181-19196]:SwitchCase[19297-19312]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[19203-19218]:SwitchCase[19319-19334]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[19225-19240]:SwitchCase[19341-19356]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[19244-19254]:ReturnStatement[19360-19370]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[19261-19276]:SwitchCase[19377-19392]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[19283-19298]:SwitchCase[19399-19414]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[19305-19320]:SwitchCase[19421-19436]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19327-19346]:SwitchCase[19443-19462]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[19353-19371]:SwitchCase[19469-19487]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19378-19394]:SwitchCase[19494-19510]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19401-19416]:SwitchCase[19517-19532]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19423-19441]:SwitchCase[19539-19557]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19448-19463]:SwitchCase[19564-19579]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19470-19485]:SwitchCase[19586-19601]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[19489-19499]:ReturnStatement[19605-19615]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[19507-19527]:SwitchCase[19623-19643]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19534-19550]:SwitchCase[19650-19666]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[19557-19574]:SwitchCase[19673-19690]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[19581-19598]:SwitchCase[19697-19714]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19605-19625]:SwitchCase[19721-19741]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[19632-19651]:SwitchCase[19748-19767]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19658-19677]:SwitchCase[19774-19793]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[19684-19703]:SwitchCase[19800-19819]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[19710-19724]:SwitchCase[19826-19840]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[19731-19745]:SwitchCase[19847-19861]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[19752-19768]:SwitchCase[19868-19884]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[19775-19791]:SwitchCase[19891-19907]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[19798-19816]:SwitchCase[19914-19932]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19823-19844]:SwitchCase[19939-19960]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[19851-19869]:SwitchCase[19967-19985]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[19876-19894]:SwitchCase[19992-20010]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[19901-19919]:SwitchCase[20017-20035]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[19926-19942]:SwitchCase[20042-20058]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[19949-19965]:SwitchCase[20065-20081]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[19974-19984]:ReturnStatement[20090-20100]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19992-20000]:SwitchCase[20108-20116]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[20001-20156]:ThrowStatement[20117-20272]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20396-20402]:Modifier[20512-20518]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20403-20410]:PrimitiveType[20519-20526]"
    }, {
      "left" : "isAssociative",
      "right" : "isAssociative",
      "info" : "SimpleName[20411-20424]:SimpleName[20527-20540]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[20425-20433]:SingleVariableDeclaration[20541-20549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20435-20638]:Block[20551-20754]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[20441-20634]:SwitchStatement[20557-20750]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[20463-20478]:SwitchCase[20579-20594]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[20485-20500]:SwitchCase[20601-20616]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[20507-20521]:SwitchCase[20623-20637]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[20528-20545]:SwitchCase[20644-20661]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[20552-20570]:SwitchCase[20668-20686]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20579-20591]:ReturnStatement[20695-20707]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20598-20606]:SwitchCase[20714-20722]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20615-20628]:ReturnStatement[20731-20744]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20642-20648]:Modifier[20758-20764]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20649-20656]:PrimitiveType[20765-20772]"
    }, {
      "left" : "isAssignmentOp",
      "right" : "isAssignmentOp",
      "info" : "SimpleName[20657-20671]:SimpleName[20773-20787]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20672-20678]:SingleVariableDeclaration[20788-20794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20680-21109]:Block[20796-21225]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[20686-21087]:SwitchStatement[20802-21203]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20714-20732]:SwitchCase[20830-20848]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[20739-20763]:SwitchCase[20855-20879]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[20770-20795]:SwitchCase[20886-20911]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[20802-20827]:SwitchCase[20918-20943]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[20834-20856]:SwitchCase[20950-20972]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[20863-20885]:SwitchCase[20979-21001]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[20892-20915]:SwitchCase[21008-21031]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[20922-20944]:SwitchCase[21038-21060]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[20951-20973]:SwitchCase[21067-21089]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[20980-21002]:SwitchCase[21096-21118]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[21009-21031]:SwitchCase[21125-21147]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[21038-21060]:SwitchCase[21154-21176]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21069-21081]:ReturnStatement[21185-21197]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21092-21105]:ReturnStatement[21208-21221]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21113-21119]:Modifier[21229-21235]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21120-21123]:PrimitiveType[21236-21239]"
    }, {
      "left" : "getOpFromAssignmentOp",
      "right" : "getOpFromAssignmentOp",
      "info" : "SimpleName[21124-21145]:SimpleName[21240-21261]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21146-21152]:SingleVariableDeclaration[21262-21268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21154-21876]:Block[21270-21992]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[21160-21810]:SwitchStatement[21276-21926]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[21188-21212]:SwitchCase[21304-21328]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[21221-21240]:ReturnStatement[21337-21356]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[21247-21272]:SwitchCase[21363-21388]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[21281-21301]:ReturnStatement[21397-21417]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[21308-21333]:SwitchCase[21424-21449]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[21342-21362]:ReturnStatement[21458-21478]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[21369-21391]:SwitchCase[21485-21507]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[21400-21417]:ReturnStatement[21516-21533]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[21424-21446]:SwitchCase[21540-21562]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[21455-21472]:ReturnStatement[21571-21588]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[21479-21502]:SwitchCase[21595-21618]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[21511-21529]:ReturnStatement[21627-21645]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[21536-21558]:SwitchCase[21652-21674]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[21567-21584]:ReturnStatement[21683-21700]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[21591-21613]:SwitchCase[21707-21729]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[21622-21639]:ReturnStatement[21738-21755]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[21646-21668]:SwitchCase[21762-21784]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[21677-21694]:ReturnStatement[21793-21810]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[21701-21723]:SwitchCase[21817-21839]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[21732-21749]:ReturnStatement[21848-21865]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[21756-21778]:SwitchCase[21872-21894]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[21787-21804]:ReturnStatement[21903-21920]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[21815-21872]:ThrowStatement[21931-21988]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21880-21886]:Modifier[21996-22002]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21887-21894]:PrimitiveType[22003-22010]"
    }, {
      "left" : "isExpressionNode",
      "right" : "isExpressionNode",
      "info" : "SimpleName[21895-21911]:SimpleName[22011-22027]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21912-21918]:SingleVariableDeclaration[22028-22034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21920-21970]:Block[22036-22086]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[21926-21966]:ReturnStatement[22042-22082]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22053-22059]:Modifier[22169-22175]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22060-22067]:PrimitiveType[22176-22183]"
    }, {
      "left" : "containsFunctionDeclaration",
      "right" : "containsFunctionDeclaration",
      "info" : "SimpleName[22068-22095]:SimpleName[22184-22211]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22096-22102]:SingleVariableDeclaration[22212-22218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22104-22153]:Block[22220-22269]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[22110-22149]:ReturnStatement[22226-22265]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22240-22246]:Modifier[22356-22362]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22247-22254]:PrimitiveType[22363-22370]"
    }, {
      "left" : "referencesThis",
      "right" : "referencesThis",
      "info" : "SimpleName[22255-22269]:SimpleName[22371-22385]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22270-22276]:SingleVariableDeclaration[22386-22392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22278-22323]:Block[22394-22439]"
    }, {
      "left" : "return containsType(n, Token.THIS);",
      "right" : "return containsType(n, Token.THIS);",
      "info" : "ReturnStatement[22284-22319]:ReturnStatement[22400-22435]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22379-22385]:Modifier[22495-22501]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22386-22393]:PrimitiveType[22502-22509]"
    }, {
      "left" : "isGet",
      "right" : "isGet",
      "info" : "SimpleName[22394-22399]:SimpleName[22510-22515]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22400-22406]:SingleVariableDeclaration[22516-22522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22408-22494]:Block[22524-22610]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[22414-22490]:ReturnStatement[22530-22606]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22539-22545]:Modifier[22655-22661]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22546-22553]:PrimitiveType[22662-22669]"
    }, {
      "left" : "isGetProp",
      "right" : "isGetProp",
      "info" : "SimpleName[22554-22563]:SimpleName[22670-22679]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22564-22570]:SingleVariableDeclaration[22680-22686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22572-22618]:Block[22688-22734]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[22578-22614]:ReturnStatement[22694-22730]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22660-22666]:Modifier[22776-22782]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22667-22674]:PrimitiveType[22783-22790]"
    }, {
      "left" : "isName",
      "right" : "isName",
      "info" : "SimpleName[22675-22681]:SimpleName[22791-22797]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22682-22688]:SingleVariableDeclaration[22798-22804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22690-22733]:Block[22806-22849]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[22696-22729]:ReturnStatement[22812-22845]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22774-22780]:Modifier[22890-22896]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22781-22788]:PrimitiveType[22897-22904]"
    }, {
      "left" : "isNew",
      "right" : "isNew",
      "info" : "SimpleName[22789-22794]:SimpleName[22905-22910]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22795-22801]:SingleVariableDeclaration[22911-22917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22803-22845]:Block[22919-22961]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[22809-22841]:ReturnStatement[22925-22957]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22886-22892]:Modifier[23002-23008]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22893-22900]:PrimitiveType[23009-23016]"
    }, {
      "left" : "isVar",
      "right" : "isVar",
      "info" : "SimpleName[22901-22906]:SimpleName[23017-23022]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22907-22913]:SingleVariableDeclaration[23023-23029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22915-22957]:Block[23031-23073]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[22921-22953]:ReturnStatement[23037-23069]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23123-23129]:Modifier[23239-23245]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23130-23137]:PrimitiveType[23246-23253]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[23138-23154]:SimpleName[23254-23270]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23155-23161]:SingleVariableDeclaration[23271-23277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23163-23370]:Block[23279-23486]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[23293-23366]:ReturnStatement[23409-23482]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23513-23519]:Modifier[23629-23635]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23520-23524]:SimpleType[23636-23640]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[23525-23541]:SimpleName[23641-23657]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23542-23548]:SingleVariableDeclaration[23658-23664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23550-23816]:Block[23666-23932]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[23556-23592]:ExpressionStatement[23672-23708]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[23597-23625]:VariableDeclarationStatement[23713-23741]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[23630-23812]:IfStatement[23746-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23649-23688]:Block[23765-23804]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[23657-23682]:ReturnStatement[23773-23798]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[23694-23812]:IfStatement[23810-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23747-23780]:Block[23863-23896]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[23755-23774]:ReturnStatement[23871-23890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23786-23812]:Block[23902-23928]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23794-23806]:ReturnStatement[23910-23922]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23860-23866]:Modifier[23976-23982]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23867-23874]:PrimitiveType[23983-23990]"
    }, {
      "left" : "isString",
      "right" : "isString",
      "info" : "SimpleName[23875-23883]:SimpleName[23991-23999]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23884-23890]:SingleVariableDeclaration[24000-24006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23892-23937]:Block[24008-24053]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[23898-23933]:ReturnStatement[24014-24049]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24128-24134]:Modifier[24244-24250]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24135-24142]:PrimitiveType[24251-24258]"
    }, {
      "left" : "isExprAssign",
      "right" : "isExprAssign",
      "info" : "SimpleName[24143-24155]:SimpleName[24259-24271]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24156-24162]:SingleVariableDeclaration[24272-24278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24164-24269]:Block[24280-24385]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[24170-24265]:ReturnStatement[24286-24381]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24314-24320]:Modifier[24430-24436]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24321-24328]:PrimitiveType[24437-24444]"
    }, {
      "left" : "isAssign",
      "right" : "isAssign",
      "info" : "SimpleName[24329-24337]:SimpleName[24445-24453]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24338-24344]:SingleVariableDeclaration[24454-24460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24346-24391]:Block[24462-24507]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[24352-24387]:ReturnStatement[24468-24503]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24573-24579]:Modifier[24689-24695]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24580-24587]:PrimitiveType[24696-24703]"
    }, {
      "left" : "isExprCall",
      "right" : "isExprCall",
      "info" : "SimpleName[24588-24598]:SimpleName[24704-24714]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24599-24605]:SingleVariableDeclaration[24715-24721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24607-24710]:Block[24723-24826]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[24613-24706]:ReturnStatement[24729-24822]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24782-24788]:Modifier[24898-24904]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24789-24796]:PrimitiveType[24905-24912]"
    }, {
      "left" : "isForIn",
      "right" : "isForIn",
      "info" : "SimpleName[24797-24804]:SimpleName[24913-24920]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24805-24811]:SingleVariableDeclaration[24921-24927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24813-24889]:Block[24929-25005]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[24819-24885]:ReturnStatement[24935-25001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24973-24979]:Modifier[25089-25095]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24980-24987]:PrimitiveType[25096-25103]"
    }, {
      "left" : "isLoopStructure",
      "right" : "isLoopStructure",
      "info" : "SimpleName[24988-25003]:SimpleName[25104-25119]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25004-25010]:SingleVariableDeclaration[25120-25126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25012-25175]:Block[25128-25291]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[25018-25171]:SwitchStatement[25134-25287]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25047-25062]:SwitchCase[25163-25178]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25069-25083]:SwitchCase[25185-25199]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25090-25107]:SwitchCase[25206-25223]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25116-25128]:ReturnStatement[25232-25244]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25135-25143]:SwitchCase[25251-25259]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25152-25165]:ReturnStatement[25268-25281]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25337-25343]:Modifier[25453-25459]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25344-25348]:SimpleType[25460-25464]"
    }, {
      "left" : "getLoopCodeBlock",
      "right" : "getLoopCodeBlock",
      "info" : "SimpleName[25349-25365]:SimpleName[25465-25481]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25366-25372]:SingleVariableDeclaration[25482-25488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25374-25582]:Block[25490-25698]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[25380-25578]:SwitchStatement[25496-25694]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25409-25424]:SwitchCase[25525-25540]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25431-25448]:SwitchCase[25547-25564]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[25457-25481]:ReturnStatement[25573-25597]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25488-25502]:SwitchCase[25604-25618]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[25511-25536]:ReturnStatement[25627-25652]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25543-25551]:SwitchCase[25659-25667]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25560-25572]:ReturnStatement[25676-25688]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25676-25682]:Modifier[25792-25798]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25683-25690]:PrimitiveType[25799-25806]"
    }, {
      "left" : "isControlStructure",
      "right" : "isControlStructure",
      "info" : "SimpleName[25691-25709]:SimpleName[25807-25825]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25710-25716]:SingleVariableDeclaration[25826-25832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25718-26069]:Block[25834-26185]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[25724-26065]:SwitchStatement[25840-26181]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25753-25768]:SwitchCase[25869-25884]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25775-25789]:SwitchCase[25891-25905]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25796-25813]:SwitchCase[25912-25929]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[25820-25836]:SwitchCase[25936-25952]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[25843-25857]:SwitchCase[25959-25973]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[25864-25881]:SwitchCase[25980-25997]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[25888-25903]:SwitchCase[26004-26019]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[25910-25927]:SwitchCase[26026-26043]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[25934-25952]:SwitchCase[26050-26068]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[25959-25975]:SwitchCase[26075-26091]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[25982-26001]:SwitchCase[26098-26117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26010-26022]:ReturnStatement[26126-26138]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26029-26037]:SwitchCase[26145-26153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26046-26059]:ReturnStatement[26162-26175]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26180-26186]:Modifier[26296-26302]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26187-26194]:PrimitiveType[26303-26310]"
    }, {
      "left" : "isControlStructureCodeBlock",
      "right" : "isControlStructureCodeBlock",
      "info" : "SimpleName[26195-26222]:SimpleName[26311-26338]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26223-26234]:SingleVariableDeclaration[26339-26350]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26236-26242]:SingleVariableDeclaration[26352-26358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26244-26954]:Block[26360-27070]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[26250-26950]:SwitchStatement[26366-27066]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[26284-26299]:SwitchCase[26400-26415]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[26306-26323]:SwitchCase[26422-26439]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[26330-26347]:SwitchCase[26446-26463]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[26354-26370]:SwitchCase[26470-26486]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[26379-26413]:ReturnStatement[26495-26529]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[26420-26434]:SwitchCase[26536-26550]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[26443-26478]:ReturnStatement[26559-26594]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[26485-26499]:SwitchCase[26601-26615]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[26508-26543]:ReturnStatement[26624-26659]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[26550-26565]:SwitchCase[26666-26681]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[26574-26639]:ReturnStatement[26690-26755]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[26646-26663]:SwitchCase[26762-26779]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[26672-26706]:ReturnStatement[26788-26822]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[26713-26731]:SwitchCase[26829-26847]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[26738-26754]:SwitchCase[26854-26870]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[26763-26798]:ReturnStatement[26879-26914]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[26805-26824]:SwitchCase[26921-26940]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26833-26845]:ReturnStatement[26949-26961]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26852-26860]:SwitchCase[26968-26976]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[26869-26922]:ExpressionStatement[26985-27038]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26931-26944]:ReturnStatement[27047-27060]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27169-27175]:Modifier[27285-27291]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27176-27180]:SimpleType[27292-27296]"
    }, {
      "left" : "getConditionExpression",
      "right" : "getConditionExpression",
      "info" : "SimpleName[27181-27203]:SimpleName[27297-27319]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27204-27210]:SingleVariableDeclaration[27320-27326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27212-27758]:Block[27328-27874]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[27218-27679]:SwitchStatement[27334-27795]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[27247-27261]:SwitchCase[27363-27377]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[27268-27285]:SwitchCase[27384-27401]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[27294-27319]:ReturnStatement[27410-27435]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[27326-27340]:SwitchCase[27442-27456]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[27349-27373]:ReturnStatement[27465-27489]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[27380-27395]:SwitchCase[27496-27511]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[27404-27551]:SwitchStatement[27520-27667]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[27443-27450]:SwitchCase[27559-27566]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27463-27475]:ReturnStatement[27579-27591]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[27486-27493]:SwitchCase[27602-27609]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[27506-27541]:ReturnStatement[27622-27657]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[27560-27629]:ThrowStatement[27676-27745]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[27636-27652]:SwitchCase[27752-27768]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27661-27673]:ReturnStatement[27777-27789]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[27684-27754]:ThrowStatement[27800-27870]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27848-27854]:Modifier[27964-27970]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27855-27862]:PrimitiveType[27971-27978]"
    }, {
      "left" : "isStatementBlock",
      "right" : "isStatementBlock",
      "info" : "SimpleName[27863-27879]:SimpleName[27979-27995]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27880-27886]:SingleVariableDeclaration[27996-28002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27888-27963]:Block[28004-28079]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[27894-27959]:ReturnStatement[28010-28075]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28033-28039]:Modifier[28149-28155]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28040-28047]:PrimitiveType[28156-28163]"
    }, {
      "left" : "isStatement",
      "right" : "isStatement",
      "info" : "SimpleName[28048-28059]:SimpleName[28164-28175]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28060-28066]:SingleVariableDeclaration[28176-28182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28068-28563]:Block[28184-28679]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[28074-28102]:VariableDeclarationStatement[28190-28218]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[28349-28390]:ExpressionStatement[28465-28506]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[28395-28559]:SwitchStatement[28511-28675]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[28429-28447]:SwitchCase[28545-28563]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[28454-28471]:SwitchCase[28570-28587]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[28478-28495]:SwitchCase[28594-28611]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28504-28516]:ReturnStatement[28620-28632]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28523-28531]:SwitchCase[28639-28647]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28540-28553]:ReturnStatement[28656-28669]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28624-28630]:Modifier[28740-28746]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28631-28638]:PrimitiveType[28747-28754]"
    }, {
      "left" : "isSwitchCase",
      "right" : "isSwitchCase",
      "info" : "SimpleName[28639-28651]:SimpleName[28755-28767]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28652-28658]:SingleVariableDeclaration[28768-28774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28660-28735]:Block[28776-28851]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[28666-28731]:ReturnStatement[28782-28847]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28903-28909]:Modifier[29019-29025]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28910-28917]:PrimitiveType[29026-29033]"
    }, {
      "left" : "isReferenceName",
      "right" : "isReferenceName",
      "info" : "SimpleName[28918-28933]:SimpleName[29034-29049]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28934-28940]:SingleVariableDeclaration[29050-29056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28942-29016]:Block[29058-29132]"
    }, {
      "left" : "return isName(n) && !n.getString().isEmpty() && !isLabelName(n);",
      "right" : "return isName(n) && !n.getString().isEmpty() && !isLabelName(n);",
      "info" : "ReturnStatement[28948-29012]:ReturnStatement[29064-29128]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29071-29077]:Modifier[29187-29193]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29078-29085]:PrimitiveType[29194-29201]"
    }, {
      "left" : "isLabelName",
      "right" : "isLabelName",
      "info" : "SimpleName[29086-29097]:SimpleName[29202-29213]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29098-29104]:SingleVariableDeclaration[29214-29220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29106-29425]:Block[29222-29541]"
    }, {
      "left" : "if (n != null && n.getType() == Token.NAME)",
      "right" : "if (n != null && n.getType() == Token.NAME)",
      "info" : "IfStatement[29112-29403]:IfStatement[29228-29519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29156-29403]:Block[29272-29519]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[29164-29192]:VariableDeclarationStatement[29280-29308]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.LABEL:\n        case Token.BREAK:\n        case Token.CONTINUE:\n          if (n == parent.getFirstChild()) {\n            return true;\n          }\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.LABEL:\n        case Token.BREAK:\n        case Token.CONTINUE:\n          if (n == parent.getFirstChild()) {\n            return true;\n          }\n      }",
      "info" : "SwitchStatement[29199-29397]:SwitchStatement[29315-29513]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[29235-29252]:SwitchCase[29351-29368]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[29261-29278]:SwitchCase[29377-29394]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[29287-29307]:SwitchCase[29403-29423]"
    }, {
      "left" : "if (n == parent.getFirstChild())",
      "right" : "if (n == parent.getFirstChild())",
      "info" : "IfStatement[29318-29389]:IfStatement[29434-29505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29351-29389]:Block[29467-29505]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29365-29377]:ReturnStatement[29481-29493]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29408-29421]:ReturnStatement[29524-29537]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29492-29498]:Modifier[29608-29614]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29499-29506]:PrimitiveType[29615-29622]"
    }, {
      "left" : "isTryFinallyNode",
      "right" : "isTryFinallyNode",
      "info" : "SimpleName[29507-29523]:SimpleName[29623-29639]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29524-29535]:SingleVariableDeclaration[29640-29651]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[29537-29547]:SingleVariableDeclaration[29653-29663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29549-29669]:Block[29665-29785]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[29555-29665]:ReturnStatement[29671-29781]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29747-29753]:Modifier[29863-29869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29754-29758]:PrimitiveType[29870-29874]"
    }, {
      "left" : "removeChild",
      "right" : "removeChild",
      "info" : "SimpleName[29759-29770]:SimpleName[29875-29886]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29771-29782]:SingleVariableDeclaration[29887-29898]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[29784-29793]:SingleVariableDeclaration[29900-29909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29795-31339]:Block[29911-31455]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "info" : "IfStatement[29840-31335]:IfStatement[29956-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29942-30036]:Block[30058-30152]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[30005-30030]:ExpressionStatement[30121-30146]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[30042-31335]:IfStatement[30158-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30077-30396]:Block[30193-30512]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[30085-30390]:IfStatement[30201-30506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30119-30162]:Block[30235-30278]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[30129-30154]:ExpressionStatement[30245-30270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30168-30390]:Block[30284-30506]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[30243-30268]:ExpressionStatement[30359-30384]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[30342-30382]:ExpressionStatement[30458-30498]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[30402-31335]:IfStatement[30518-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30437-30569]:Block[30553-30685]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[30541-30563]:ExpressionStatement[30657-30679]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[30575-31335]:IfStatement[30691-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30653-30871]:Block[30769-30987]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[30724-30749]:ExpressionStatement[30840-30865]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[30825-30865]:ExpressionStatement[30941-30981]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[30877-31335]:IfStatement[30993-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30951-31191]:Block[31067-31307]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[31136-31185]:ExpressionStatement[31252-31301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31197-31335]:Block[31313-31451]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[31205-31329]:ThrowStatement[31321-31445]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31441-31447]:Modifier[31557-31563]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31448-31455]:PrimitiveType[31564-31571]"
    }, {
      "left" : "tryMergeBlock",
      "right" : "tryMergeBlock",
      "info" : "SimpleName[31456-31469]:SimpleName[31572-31585]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[31470-31480]:SingleVariableDeclaration[31586-31596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31482-32193]:Block[31598-32309]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[31488-31545]:ExpressionStatement[31604-31661]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[31550-31582]:VariableDeclarationStatement[31666-31698]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(parent))",
      "right" : "if (NodeUtil.isStatementBlock(parent))",
      "info" : "IfStatement[31713-32189]:IfStatement[31829-32305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31752-32004]:Block[31868-32120]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[31760-31782]:VariableDeclarationStatement[31876-31898]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[31789-31946]:WhileStatement[31905-32062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31817-31946]:Block[31933-32062]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[31827-31865]:VariableDeclarationStatement[31943-31981]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[31874-31912]:ExpressionStatement[31990-32028]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[31921-31938]:ExpressionStatement[32037-32054]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[31953-31979]:ExpressionStatement[32069-32095]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31986-31998]:ReturnStatement[32102-32114]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL && block.hasOneChild())",
      "right" : "if (parent.getType() == Token.LABEL && block.hasOneChild())",
      "info" : "IfStatement[32010-32189]:IfStatement[32126-32305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32070-32156]:Block[32186-32272]"
    }, {
      "left" : "parent.replaceChild(block, block.removeFirstChild());",
      "right" : "parent.replaceChild(block, block.removeFirstChild());",
      "info" : "ExpressionStatement[32078-32131]:ExpressionStatement[32194-32247]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32138-32150]:ReturnStatement[32254-32266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32162-32189]:Block[32278-32305]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32170-32183]:ReturnStatement[32286-32299]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32235-32241]:Modifier[32351-32357]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32242-32249]:PrimitiveType[32358-32365]"
    }, {
      "left" : "isCall",
      "right" : "isCall",
      "info" : "SimpleName[32250-32256]:SimpleName[32366-32372]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32257-32263]:SingleVariableDeclaration[32373-32379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32265-32308]:Block[32381-32424]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[32271-32304]:ReturnStatement[32387-32420]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32354-32360]:Modifier[32470-32476]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32361-32368]:PrimitiveType[32477-32484]"
    }, {
      "left" : "isFunction",
      "right" : "isFunction",
      "info" : "SimpleName[32369-32379]:SimpleName[32485-32495]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32380-32386]:SingleVariableDeclaration[32496-32502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32388-32435]:Block[32504-32551]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[32394-32431]:ReturnStatement[32510-32547]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32505-32511]:Modifier[32621-32627]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32512-32516]:SimpleType[32628-32632]"
    }, {
      "left" : "getFunctionBody",
      "right" : "getFunctionBody",
      "info" : "SimpleName[32517-32532]:SimpleName[32633-32648]"
    }, {
      "left" : "Node fn",
      "right" : "Node fn",
      "info" : "SingleVariableDeclaration[32533-32540]:SingleVariableDeclaration[32649-32656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32542-32626]:Block[32658-32742]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[32548-32592]:ExpressionStatement[32664-32708]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[32597-32622]:ReturnStatement[32713-32738]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32668-32674]:Modifier[32784-32790]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32675-32682]:PrimitiveType[32791-32798]"
    }, {
      "left" : "isThis",
      "right" : "isThis",
      "info" : "SimpleName[32683-32689]:SimpleName[32799-32805]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[32690-32699]:SingleVariableDeclaration[32806-32815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32701-32747]:Block[32817-32863]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[32707-32743]:ReturnStatement[32823-32859]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32812-32818]:Modifier[32928-32934]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32819-32826]:PrimitiveType[32935-32942]"
    }, {
      "left" : "containsCall",
      "right" : "containsCall",
      "info" : "SimpleName[32827-32839]:SimpleName[32943-32955]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32840-32846]:SingleVariableDeclaration[32956-32962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32848-32893]:Block[32964-33009]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[32854-32889]:ReturnStatement[32970-33005]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33124-33130]:Modifier[33240-33246]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33131-33138]:PrimitiveType[33247-33254]"
    }, {
      "left" : "isFunctionDeclaration",
      "right" : "isFunctionDeclaration",
      "info" : "SimpleName[33139-33160]:SimpleName[33255-33276]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33161-33167]:SingleVariableDeclaration[33277-33283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33169-33243]:Block[33285-33359]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);",
      "info" : "ReturnStatement[33175-33239]:ReturnStatement[33291-33355]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33433-33439]:Modifier[33549-33555]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33440-33447]:PrimitiveType[33556-33563]"
    }, {
      "left" : "isHoistedFunctionDeclaration",
      "right" : "isHoistedFunctionDeclaration",
      "info" : "SimpleName[33448-33476]:SimpleName[33564-33592]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33477-33483]:SingleVariableDeclaration[33593-33599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33485-33658]:Block[33601-33774]"
    }, {
      "left" : "return NodeUtil.isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return NodeUtil.isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[33491-33654]:ReturnStatement[33607-33770]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33864-33870]:Modifier[33980-33986]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33871-33878]:PrimitiveType[33987-33994]"
    }, {
      "left" : "isAnonymousFunction",
      "right" : "isAnonymousFunction",
      "info" : "SimpleName[33879-33898]:SimpleName[33995-34014]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33899-33905]:SingleVariableDeclaration[34015-34021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33907-33980]:Block[34023-34096]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);",
      "right" : "return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);",
      "info" : "ReturnStatement[33913-33976]:ReturnStatement[34029-34092]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34625-34631]:Modifier[34741-34747]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34632-34639]:PrimitiveType[34748-34755]"
    }, {
      "left" : "isFunctionAnonymous",
      "right" : "isFunctionAnonymous",
      "info" : "SimpleName[34640-34659]:SimpleName[34756-34775]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34660-34666]:SingleVariableDeclaration[34776-34782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34668-34701]:Block[34784-34817]"
    }, {
      "left" : "return !isStatement(n);",
      "right" : "return !isStatement(n);",
      "info" : "ReturnStatement[34674-34697]:ReturnStatement[34790-34813]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34851-34857]:Modifier[34967-34973]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34858-34865]:PrimitiveType[34974-34981]"
    }, {
      "left" : "isVarArgsFunction",
      "right" : "isVarArgsFunction",
      "info" : "SimpleName[34866-34883]:SimpleName[34982-34999]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[34884-34897]:SingleVariableDeclaration[35000-35013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34899-35126]:Block[35015-35242]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[34905-34955]:ExpressionStatement[35021-35071]"
    }, {
      "left" : "return NodeUtil.isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "return NodeUtil.isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ReturnStatement[34960-35122]:ReturnStatement[35076-35238]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35230-35236]:Modifier[35346-35352]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35237-35244]:PrimitiveType[35353-35360]"
    }, {
      "left" : "isObjectCallMethod",
      "right" : "isObjectCallMethod",
      "info" : "SimpleName[35245-35263]:SimpleName[35361-35379]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[35264-35277]:SingleVariableDeclaration[35380-35393]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[35279-35296]:SingleVariableDeclaration[35395-35412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35298-35742]:Block[35414-35858]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[35304-35720]:IfStatement[35420-35836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35342-35720]:Block[35458-35836]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[35350-35413]:VariableDeclarationStatement[35466-35529]"
    }, {
      "left" : "if (NodeUtil.isGet(functionIndentifyingExpression))",
      "right" : "if (NodeUtil.isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[35420-35714]:IfStatement[35536-35830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35472-35714]:Block[35588-35830]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[35482-35540]:VariableDeclarationStatement[35598-35656]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[35549-35706]:IfStatement[35665-35822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35601-35706]:Block[35717-35822]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[35613-35648]:VariableDeclarationStatement[35729-35764]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[35659-35696]:ReturnStatement[35775-35812]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35725-35738]:ReturnStatement[35841-35854]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35877-35883]:Modifier[35993-35999]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35884-35891]:PrimitiveType[36000-36007]"
    }, {
      "left" : "isFunctionObjectCall",
      "right" : "isFunctionObjectCall",
      "info" : "SimpleName[35892-35912]:SimpleName[36008-36028]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[35913-35926]:SingleVariableDeclaration[36029-36042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35928-35982]:Block[36044-36098]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[35934-35978]:ReturnStatement[36050-36094]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36118-36124]:Modifier[36234-36240]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36125-36132]:PrimitiveType[36241-36248]"
    }, {
      "left" : "isFunctionObjectApply",
      "right" : "isFunctionObjectApply",
      "info" : "SimpleName[36133-36154]:SimpleName[36249-36270]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[36155-36168]:SingleVariableDeclaration[36271-36284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36170-36225]:Block[36286-36341]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[36176-36221]:ReturnStatement[36292-36337]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36388-36394]:Modifier[36504-36510]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36395-36402]:PrimitiveType[36511-36518]"
    }, {
      "left" : "isSimpleFunctionObjectCall",
      "right" : "isSimpleFunctionObjectCall",
      "info" : "SimpleName[36403-36429]:SimpleName[36519-36545]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[36430-36443]:SingleVariableDeclaration[36546-36559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36445-36624]:Block[36561-36740]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[36451-36601]:IfStatement[36567-36717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36487-36601]:Block[36603-36717]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[36495-36595]:IfStatement[36611-36711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36565-36595]:Block[36681-36711]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36575-36587]:ReturnStatement[36691-36703]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36607-36620]:ReturnStatement[36723-36736]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36977-36983]:Modifier[37093-37099]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36984-36991]:PrimitiveType[37100-37107]"
    }, {
      "left" : "isLhs",
      "right" : "isLhs",
      "info" : "SimpleName[36992-36997]:SimpleName[37108-37113]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36998-37004]:SingleVariableDeclaration[37114-37120]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[37006-37017]:SingleVariableDeclaration[37122-37133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37019-37146]:Block[37135-37262]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[37025-37142]:ReturnStatement[37141-37258]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37342-37348]:Modifier[37458-37464]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37349-37356]:PrimitiveType[37465-37472]"
    }, {
      "left" : "isObjectLitKey",
      "right" : "isObjectLitKey",
      "info" : "SimpleName[37357-37371]:SimpleName[37473-37487]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[37372-37381]:SingleVariableDeclaration[37488-37497]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[37383-37394]:SingleVariableDeclaration[37499-37510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37396-37746]:Block[37512-37862]"
    }, {
      "left" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "right" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[37402-37724]:IfStatement[37518-37840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37477-37724]:Block[37593-37840]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[37485-37499]:VariableDeclarationStatement[37601-37615]"
    }, {
      "left" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "right" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "info" : "ForStatement[37506-37718]:ForStatement[37622-37834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37618-37718]:Block[37734-37834]"
    }, {
      "left" : "if (current == node)",
      "right" : "if (current == node)",
      "info" : "IfStatement[37628-37693]:IfStatement[37744-37809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37649-37693]:Block[37765-37809]"
    }, {
      "left" : "return index % 2 == 0;",
      "right" : "return index % 2 == 0;",
      "info" : "ReturnStatement[37661-37683]:ReturnStatement[37777-37799]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[37702-37710]:ExpressionStatement[37818-37826]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37729-37742]:ReturnStatement[37845-37858]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38017-38023]:Modifier[38133-38139]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[38024-38030]:SimpleType[38140-38146]"
    }, {
      "left" : "opToStr",
      "right" : "opToStr",
      "info" : "SimpleName[38031-38038]:SimpleName[38147-38154]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[38039-38051]:SingleVariableDeclaration[38155-38167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38053-39663]:Block[38169-39779]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[38059-39659]:SwitchStatement[38175-39775]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[38085-38102]:SwitchCase[38201-38218]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[38103-38114]:ReturnStatement[38219-38230]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[38121-38135]:SwitchCase[38237-38251]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[38136-38148]:ReturnStatement[38252-38264]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[38155-38173]:SwitchCase[38271-38289]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[38174-38185]:ReturnStatement[38290-38301]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[38192-38207]:SwitchCase[38308-38323]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[38208-38220]:ReturnStatement[38324-38336]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[38227-38245]:SwitchCase[38343-38361]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[38246-38257]:ReturnStatement[38362-38373]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[38264-38280]:SwitchCase[38380-38396]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[38281-38294]:ReturnStatement[38397-38410]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[38301-38315]:SwitchCase[38417-38431]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[38316-38328]:ReturnStatement[38432-38444]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[38335-38350]:SwitchCase[38451-38466]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[38351-38362]:ReturnStatement[38467-38478]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[38369-38383]:SwitchCase[38485-38499]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[38384-38396]:ReturnStatement[38500-38512]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[38403-38419]:SwitchCase[38519-38535]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[38420-38433]:ReturnStatement[38536-38549]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[38440-38455]:SwitchCase[38556-38571]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[38456-38468]:ReturnStatement[38572-38584]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[38475-38489]:SwitchCase[38591-38605]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[38490-38502]:ReturnStatement[38606-38618]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[38509-38523]:SwitchCase[38625-38639]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[38524-38536]:ReturnStatement[38640-38652]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[38543-38557]:SwitchCase[38659-38673]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[38558-38569]:ReturnStatement[38674-38685]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[38576-38592]:SwitchCase[38692-38708]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[38593-38606]:ReturnStatement[38709-38722]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[38613-38628]:SwitchCase[38729-38744]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[38629-38641]:ReturnStatement[38745-38757]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[38648-38662]:SwitchCase[38764-38778]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[38663-38675]:ReturnStatement[38779-38791]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[38682-38696]:SwitchCase[38798-38812]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[38697-38708]:ReturnStatement[38813-38824]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[38715-38730]:SwitchCase[38831-38846]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[38731-38742]:ReturnStatement[38847-38858]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[38749-38764]:SwitchCase[38865-38880]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[38765-38776]:ReturnStatement[38881-38892]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[38783-38798]:SwitchCase[38899-38914]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[38799-38810]:ReturnStatement[38915-38926]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[38817-38835]:SwitchCase[38933-38951]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[38836-38847]:ReturnStatement[38952-38963]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[38854-38869]:SwitchCase[38970-38985]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[38870-38881]:ReturnStatement[38986-38997]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[38888-38903]:SwitchCase[39004-39019]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[38904-38915]:ReturnStatement[39020-39031]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[38922-38937]:SwitchCase[39038-39053]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[38938-38949]:ReturnStatement[39054-39065]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[38956-38971]:SwitchCase[39072-39087]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[38972-38983]:ReturnStatement[39088-39099]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[38990-39008]:SwitchCase[39106-39124]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[39009-39020]:ReturnStatement[39125-39136]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[39027-39051]:SwitchCase[39143-39167]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[39052-39064]:ReturnStatement[39168-39180]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[39071-39096]:SwitchCase[39187-39212]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[39097-39109]:ReturnStatement[39213-39225]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[39116-39141]:SwitchCase[39232-39257]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[39142-39154]:ReturnStatement[39258-39270]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[39161-39183]:SwitchCase[39277-39299]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[39184-39197]:ReturnStatement[39300-39313]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[39204-39226]:SwitchCase[39320-39342]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[39227-39240]:ReturnStatement[39343-39356]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[39247-39270]:SwitchCase[39363-39386]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[39271-39285]:ReturnStatement[39387-39401]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[39292-39314]:SwitchCase[39408-39430]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[39315-39327]:ReturnStatement[39431-39443]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[39334-39356]:SwitchCase[39450-39472]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[39357-39369]:ReturnStatement[39473-39485]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[39376-39398]:SwitchCase[39492-39514]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[39399-39411]:ReturnStatement[39515-39527]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[39418-39440]:SwitchCase[39534-39556]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[39441-39453]:ReturnStatement[39557-39569]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[39460-39482]:SwitchCase[39576-39598]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[39483-39495]:ReturnStatement[39599-39611]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[39502-39518]:SwitchCase[39618-39634]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[39519-39533]:ReturnStatement[39635-39649]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[39540-39558]:SwitchCase[39656-39674]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[39559-39575]:ReturnStatement[39675-39691]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[39582-39604]:SwitchCase[39698-39720]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[39605-39625]:ReturnStatement[39721-39741]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39632-39640]:SwitchCase[39748-39756]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39641-39653]:ReturnStatement[39757-39769]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39941-39947]:Modifier[40057-40063]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39948-39954]:SimpleType[40064-40070]"
    }, {
      "left" : "opToStrNoFail",
      "right" : "opToStrNoFail",
      "info" : "SimpleName[39955-39968]:SimpleName[40071-40084]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[39969-39981]:SingleVariableDeclaration[40085-40097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39983-40170]:Block[40099-40286]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[39989-40020]:VariableDeclarationStatement[40105-40136]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[40025-40150]:IfStatement[40141-40266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40042-40150]:Block[40158-40266]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[40050-40144]:ThrowStatement[40166-40260]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[40155-40166]:ReturnStatement[40271-40282]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40302-40308]:Modifier[40418-40424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40309-40316]:PrimitiveType[40425-40432]"
    }, {
      "left" : "containsTypeInOuterScope",
      "right" : "containsTypeInOuterScope",
      "info" : "SimpleName[40317-40341]:SimpleName[40433-40457]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40342-40351]:SingleVariableDeclaration[40458-40467]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40353-40361]:SingleVariableDeclaration[40469-40477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40363-40479]:Block[40479-40595]"
    }, {
      "left" : "return containsType(node, type,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "return containsType(node, type,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ReturnStatement[40369-40475]:ReturnStatement[40485-40591]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40567-40573]:Modifier[40683-40689]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40574-40581]:PrimitiveType[40690-40697]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[40582-40594]:SimpleName[40698-40710]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40595-40604]:SingleVariableDeclaration[40711-40720]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40636-40644]:SingleVariableDeclaration[40752-40760]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[40676-40712]:SingleVariableDeclaration[40792-40828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40714-40788]:Block[40830-40904]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[40720-40784]:ReturnStatement[40836-40900]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40876-40882]:Modifier[40992-40998]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40883-40890]:PrimitiveType[40999-41006]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[40891-40903]:SimpleName[41007-41019]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40904-40913]:SingleVariableDeclaration[41020-41029]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40915-40923]:SingleVariableDeclaration[41031-41039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40925-40998]:Block[41041-41114]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[40931-40994]:ReturnStatement[41047-41110]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41218-41224]:Modifier[41334-41340]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41225-41229]:PrimitiveType[41341-41345]"
    }, {
      "left" : "redeclareVarsInsideBranch",
      "right" : "redeclareVarsInsideBranch",
      "info" : "SimpleName[41230-41255]:SimpleName[41346-41371]"
    }, {
      "left" : "Node branch",
      "right" : "Node branch",
      "info" : "SingleVariableDeclaration[41256-41267]:SingleVariableDeclaration[41372-41383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41269-41654]:Block[41385-41770]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[41275-41331]:VariableDeclarationStatement[41391-41447]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[41336-41377]:IfStatement[41452-41493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41356-41377]:Block[41472-41493]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41364-41371]:ReturnStatement[41480-41487]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[41383-41419]:VariableDeclarationStatement[41499-41535]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[41424-41650]:EnhancedForStatement[41540-41766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41451-41650]:Block[41567-41766]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR, Node.newString(Token.NAME, nameNode.getString()));",
      "right" : "Node var = new Node(\n          Token.VAR, Node.newString(Token.NAME, nameNode.getString()));",
      "info" : "VariableDeclarationStatement[41459-41551]:VariableDeclarationStatement[41575-41667]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[41558-41609]:ExpressionStatement[41674-41725]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[41616-41644]:ExpressionStatement[41732-41760]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41766-41772]:Modifier[41882-41888]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41773-41777]:PrimitiveType[41889-41893]"
    }, {
      "left" : "copyNameAnnotations",
      "right" : "copyNameAnnotations",
      "info" : "SimpleName[41778-41797]:SimpleName[41894-41913]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[41798-41809]:SingleVariableDeclaration[41914-41925]"
    }, {
      "left" : "Node destination",
      "right" : "Node destination",
      "info" : "SingleVariableDeclaration[41811-41827]:SingleVariableDeclaration[41927-41943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41829-41959]:Block[41945-42075]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[41835-41955]:IfStatement[41951-42071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41885-41955]:Block[42001-42071]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[41893-41949]:ExpressionStatement[42009-42065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42080-42087]:Modifier[42196-42203]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42088-42094]:Modifier[42204-42210]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[42095-42099]:SimpleType[42211-42215]"
    }, {
      "left" : "getAddingRoot",
      "right" : "getAddingRoot",
      "info" : "SimpleName[42100-42113]:SimpleName[42216-42229]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42114-42120]:SingleVariableDeclaration[42230-42236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42122-42785]:Block[42238-42901]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[42128-42151]:VariableDeclarationStatement[42244-42267]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[42156-42174]:VariableDeclarationStatement[42272-42290]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[42179-42465]:WhileStatement[42295-42581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42229-42465]:Block[42345-42581]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[42237-42267]:VariableDeclarationStatement[42353-42383]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[42274-42459]:IfStatement[42390-42575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42300-42355]:Block[42416-42471]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[42310-42332]:ExpressionStatement[42426-42448]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42341-42347]:BreakStatement[42457-42463]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[42361-42459]:IfStatement[42477-42575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42389-42459]:Block[42505-42575]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[42399-42436]:ExpressionStatement[42515-42552]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42445-42451]:BreakStatement[42561-42567]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[42518-42628]:ExpressionStatement[42634-42744]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[42633-42758]:ExpressionStatement[42749-42874]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[42763-42781]:ReturnStatement[42879-42897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42855-42861]:Modifier[42971-42977]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42862-42868]:Modifier[42978-42984]"
    }, {
      "left" : "FunctionNode",
      "right" : "FunctionNode",
      "info" : "SimpleType[42869-42881]:SimpleType[42985-42997]"
    }, {
      "left" : "newFunctionNode",
      "right" : "newFunctionNode",
      "info" : "SimpleName[42882-42897]:SimpleName[42998-43013]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[42898-42909]:SingleVariableDeclaration[43014-43025]"
    }, {
      "left" : "List<Node> params",
      "right" : "List<Node> params",
      "info" : "SingleVariableDeclaration[42911-42928]:SingleVariableDeclaration[43027-43044]"
    }, {
      "left" : "Node body",
      "right" : "Node body",
      "info" : "SingleVariableDeclaration[42936-42945]:SingleVariableDeclaration[43052-43061]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[42947-42957]:SingleVariableDeclaration[43063-43073]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[42959-42969]:SingleVariableDeclaration[43075-43085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42971-43380]:Block[43087-43496]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[42977-43034]:VariableDeclarationStatement[43093-43150]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[43039-43116]:EnhancedForStatement[43155-43232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43065-43116]:Block[43181-43232]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[43073-43110]:ExpressionStatement[43189-43226]"
    }, {
      "left" : "FunctionNode function = new FunctionNode(name, lineno, charno);",
      "right" : "FunctionNode function = new FunctionNode(name, lineno, charno);",
      "info" : "VariableDeclarationStatement[43121-43184]:VariableDeclarationStatement[43237-43300]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[43189-43275]:ExpressionStatement[43305-43391]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[43280-43320]:ExpressionStatement[43396-43436]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[43325-43355]:ExpressionStatement[43441-43471]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[43360-43376]:ReturnStatement[43476-43492]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43666-43672]:Modifier[43782-43788]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43673-43679]:Modifier[43789-43795]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[43680-43684]:SimpleType[43796-43800]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[43685-43705]:SimpleName[43801-43821]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[43706-43717]:SingleVariableDeclaration[43822-43833]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[43719-43729]:SingleVariableDeclaration[43835-43845]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[43731-43741]:SingleVariableDeclaration[43847-43857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43743-44437]:Block[43859-44553]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[43749-43780]:VariableDeclarationStatement[43865-43896]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[43785-43873]:IfStatement[43901-43989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43803-43873]:Block[43919-43989]"
    }, {
      "left" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "ReturnStatement[43811-43867]:ReturnStatement[43927-43983]"
    }, {
      "left" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "right" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "info" : "VariableDeclarationStatement[43878-43991]:VariableDeclarationStatement[43994-44107]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[43996-44009]:VariableDeclarationStatement[44112-44125]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[44014-44415]:DoStatement[44130-44531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44017-44393]:Block[44133-44509]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[44025-44047]:ExpressionStatement[44141-44163]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[44054-44091]:ExpressionStatement[44170-44207]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[44098-44231]:VariableDeclarationStatement[44214-44347]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "info" : "ExpressionStatement[44238-44387]:ExpressionStatement[44354-44503]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[44421-44433]:ReturnStatement[44537-44549]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44968-44974]:Modifier[45084-45090]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44975-44979]:SimpleType[45091-45095]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[44980-45000]:SimpleName[45096-45116]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[45001-45012]:SingleVariableDeclaration[45117-45128]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[45014-45028]:SingleVariableDeclaration[45130-45144]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[45036-45055]:SingleVariableDeclaration[45152-45171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45057-45187]:Block[45173-45303]"
    }, {
      "left" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "info" : "VariableDeclarationStatement[45063-45110]:VariableDeclarationStatement[45179-45226]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[45115-45166]:ExpressionStatement[45231-45282]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[45171-45183]:ReturnStatement[45287-45299]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45499-45505]:Modifier[45615-45621]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45506-45510]:PrimitiveType[45622-45626]"
    }, {
      "left" : "setDebugInformation",
      "right" : "setDebugInformation",
      "info" : "SimpleName[45511-45530]:SimpleName[45627-45646]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[45531-45540]:SingleVariableDeclaration[45647-45656]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[45542-45556]:SingleVariableDeclaration[45658-45672]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[45592-45611]:SingleVariableDeclaration[45708-45727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45613-45722]:Block[45729-45838]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[45619-45662]:ExpressionStatement[45735-45778]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[45667-45718]:ExpressionStatement[45783-45834]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46052-46058]:Modifier[46168-46174]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46059-46063]:SimpleType[46175-46179]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[46064-46071]:SimpleName[46180-46187]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[46072-46083]:SingleVariableDeclaration[46188-46199]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[46085-46099]:SingleVariableDeclaration[46201-46215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46101-46226]:Block[46217-46342]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[46107-46156]:VariableDeclarationStatement[46223-46272]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[46161-46201]:ExpressionStatement[46277-46317]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[46206-46222]:ReturnStatement[46322-46338]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46743-46749]:Modifier[46859-46865]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46750-46754]:SimpleType[46866-46870]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[46755-46762]:SimpleName[46871-46878]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[46763-46774]:SingleVariableDeclaration[46879-46890]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[46776-46790]:SingleVariableDeclaration[46892-46906]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[46792-46811]:SingleVariableDeclaration[46908-46927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46813-46945]:Block[46929-47061]"
    }, {
      "left" : "Node nameNode = newName(name, basisNode);",
      "right" : "Node nameNode = newName(name, basisNode);",
      "info" : "VariableDeclarationStatement[46819-46860]:VariableDeclarationStatement[46935-46976]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[46865-46920]:ExpressionStatement[46981-47036]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[46925-46941]:ReturnStatement[47041-47057]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47545-47551]:Modifier[47661-47667]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47552-47559]:PrimitiveType[47668-47675]"
    }, {
      "left" : "isLatin",
      "right" : "isLatin",
      "info" : "SimpleName[47560-47567]:SimpleName[47676-47683]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[47568-47576]:SingleVariableDeclaration[47684-47692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47578-47816]:Block[47694-47932]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[47584-47616]:VariableDeclarationStatement[47700-47732]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[47621-47642]:VariableDeclarationStatement[47737-47758]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[47647-47795]:ForStatement[47763-47911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47689-47795]:Block[47805-47911]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[47697-47722]:VariableDeclarationStatement[47813-47838]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[47729-47789]:IfStatement[47845-47905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47758-47789]:Block[47874-47905]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47768-47781]:ReturnStatement[47884-47897]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47800-47812]:ReturnStatement[47916-47928]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47972-47978]:Modifier[48088-48094]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47979-47986]:PrimitiveType[48095-48102]"
    }, {
      "left" : "isValidPropertyName",
      "right" : "isValidPropertyName",
      "info" : "SimpleName[47987-48006]:SimpleName[48103-48122]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[48007-48018]:SingleVariableDeclaration[48123-48134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48020-48490]:Block[48136-48606]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        NodeUtil.isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        NodeUtil.isLatin(name);",
      "info" : "ReturnStatement[48026-48486]:ReturnStatement[48142-48602]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48494-48501]:Modifier[48610-48617]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48502-48508]:Modifier[48618-48624]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48509-48514]:TYPE_DECLARATION_KIND[48625-48630]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "SimpleName[48515-48527]:SimpleName[48631-48643]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleType[48539-48546]:SimpleType[48655-48662]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48614-48620]:Modifier[48730-48736]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48621-48625]:PrimitiveType[48737-48741]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[48626-48631]:SimpleName[48742-48747]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48632-48638]:SingleVariableDeclaration[48748-48754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48640-48927]:Block[48756-49043]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[48648-48921]:IfStatement[48764-49037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48679-48921]:Block[48795-49037]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[48689-48717]:VariableDeclarationStatement[48805-48833]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[48726-48913]:IfStatement[48842-49029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48779-48913]:Block[48895-49029]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[48791-48819]:VariableDeclarationStatement[48907-48935]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[48830-48903]:IfStatement[48946-49019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48859-48903]:Block[48975-49019]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[48873-48891]:ExpressionStatement[48989-49007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49028-49034]:Modifier[49144-49150]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49035-49041]:Modifier[49151-49157]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[49042-49058]:ParameterizedType[49158-49174]"
    }, {
      "left" : "getVarsDeclaredInBranch",
      "right" : "getVarsDeclaredInBranch",
      "info" : "SimpleName[49059-49082]:SimpleName[49175-49198]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[49083-49092]:SingleVariableDeclaration[49199-49208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49094-49311]:Block[49210-49427]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[49100-49144]:VariableDeclarationStatement[49216-49260]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ExpressionStatement[49149-49271]:ExpressionStatement[49265-49387]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[49276-49307]:ReturnStatement[49392-49423]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49433-49439]:Modifier[49549-49555]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49440-49447]:PrimitiveType[49556-49563]"
    }, {
      "left" : "isPrototypePropertyDeclaration",
      "right" : "isPrototypePropertyDeclaration",
      "info" : "SimpleName[49448-49478]:SimpleName[49564-49594]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49479-49485]:SingleVariableDeclaration[49595-49601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49487-49622]:Block[49603-49738]"
    }, {
      "left" : "if (!NodeUtil.isExprAssign(n))",
      "right" : "if (!NodeUtil.isExprAssign(n))",
      "info" : "IfStatement[49493-49551]:IfStatement[49609-49667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49524-49551]:Block[49640-49667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49532-49545]:ReturnStatement[49648-49661]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[49556-49618]:ReturnStatement[49672-49734]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49626-49632]:Modifier[49742-49748]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49633-49640]:PrimitiveType[49749-49756]"
    }, {
      "left" : "isPrototypeProperty",
      "right" : "isPrototypeProperty",
      "info" : "SimpleName[49641-49660]:SimpleName[49757-49776]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49661-49667]:SingleVariableDeclaration[49777-49783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49669-49862]:Block[49785-49978]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[49675-49715]:VariableDeclarationStatement[49791-49831]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[49720-49770]:IfStatement[49836-49886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49743-49770]:Block[49859-49886]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49751-49764]:ReturnStatement[49867-49880]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[49775-49827]:VariableDeclarationStatement[49891-49943]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[49832-49858]:ReturnStatement[49948-49974]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49942-49948]:Modifier[50058-50064]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49949-49953]:SimpleType[50065-50069]"
    }, {
      "left" : "getPrototypeClassName",
      "right" : "getPrototypeClassName",
      "info" : "SimpleName[49954-49975]:SimpleName[50070-50091]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[49976-49986]:SingleVariableDeclaration[50092-50102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49988-50225]:Block[50104-50341]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[49994-50011]:VariableDeclarationStatement[50110-50127]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[50016-50204]:WhileStatement[50132-50320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50039-50204]:Block[50155-50320]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[50047-50198]:IfStatement[50163-50314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50103-50148]:Block[50219-50264]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[50113-50140]:ReturnStatement[50229-50256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50154-50198]:Block[50270-50314]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[50164-50190]:ExpressionStatement[50280-50306]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[50209-50221]:ReturnStatement[50325-50337]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50315-50321]:Modifier[50431-50437]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[50322-50328]:SimpleType[50438-50444]"
    }, {
      "left" : "getPrototypePropertyName",
      "right" : "getPrototypePropertyName",
      "info" : "SimpleName[50329-50353]:SimpleName[50445-50469]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[50354-50364]:SingleVariableDeclaration[50470-50480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50366-50587]:Block[50482-50703]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[50372-50415]:VariableDeclarationStatement[50488-50531]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[50420-50475]:VariableDeclarationStatement[50536-50591]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[50480-50539]:VariableDeclarationStatement[50596-50655]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[50544-50583]:ReturnStatement[50660-50699]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50670-50676]:Modifier[50786-50792]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50677-50681]:SimpleType[50793-50797]"
    }, {
      "left" : "newUndefinedNode",
      "right" : "newUndefinedNode",
      "info" : "SimpleName[50682-50698]:SimpleName[50798-50814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50701-50830]:Block[50817-50946]"
    }, {
      "left" : "return new Node(Token.VOID, Node.newNumber(0));",
      "right" : "return new Node(Token.VOID, Node.newNumber(0));",
      "info" : "ReturnStatement[50779-50826]:ReturnStatement[50895-50942]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50925-50931]:Modifier[51041-51047]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50932-50936]:SimpleType[51048-51052]"
    }, {
      "left" : "newVarNode",
      "right" : "newVarNode",
      "info" : "SimpleName[50937-50947]:SimpleName[51053-51063]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[50948-50959]:SingleVariableDeclaration[51064-51075]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[50961-50971]:SingleVariableDeclaration[51077-51087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50973-51167]:Block[51089-51283]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[50979-51028]:VariableDeclarationStatement[51095-51144]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[51033-51100]:IfStatement[51149-51216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51052-51100]:Block[51168-51216]"
    }, {
      "left" : "nodeName.addChildrenToBack(value);",
      "right" : "nodeName.addChildrenToBack(value);",
      "info" : "ExpressionStatement[51060-51094]:ExpressionStatement[51176-51210]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName);",
      "info" : "VariableDeclarationStatement[51105-51146]:VariableDeclarationStatement[51221-51262]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[51152-51163]:ReturnStatement[51268-51279]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51249-51256]:Modifier[51365-51372]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51257-51263]:Modifier[51373-51379]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[51264-51269]:TYPE_DECLARATION_KIND[51380-51385]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[51270-51283]:SimpleName[51386-51399]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[51340-51353]:SimpleName[51456-51469]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[51354-51365]:SingleVariableDeclaration[51470-51481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51366-51397]:Block[51482-51513]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[51374-51391]:ExpressionStatement[51490-51507]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51403-51409]:Modifier[51519-51525]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51410-51417]:PrimitiveType[51526-51533]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[51418-51423]:SimpleName[51534-51539]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51424-51430]:SingleVariableDeclaration[51540-51546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51432-51519]:Block[51548-51635]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[51440-51513]:ReturnStatement[51556-51629]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51600-51606]:Modifier[51716-51722]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[51607-51612]:TYPE_DECLARATION_KIND[51723-51728]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[51613-51626]:SimpleName[51729-51742]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[51680-51693]:SimpleName[51796-51809]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[51694-51702]:SingleVariableDeclaration[51810-51818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51703-51734]:Block[51819-51850]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[51711-51728]:ExpressionStatement[51827-51844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51740-51746]:Modifier[51856-51862]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51747-51754]:PrimitiveType[51863-51870]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[51755-51760]:SimpleName[51871-51876]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51761-51767]:SingleVariableDeclaration[51877-51883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51769-51810]:Block[51885-51926]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[51777-51804]:ReturnStatement[51893-51920]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51880-51886]:Modifier[51996-52002]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51887-51894]:PrimitiveType[52003-52010]"
    }, {
      "left" : "isNodeTypeReferenced",
      "right" : "isNodeTypeReferenced",
      "info" : "SimpleName[51895-51915]:SimpleName[52011-52031]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[51916-51925]:SingleVariableDeclaration[52032-52041]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[51927-51935]:SingleVariableDeclaration[52043-52051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51937-52018]:Block[52053-52134]"
    }, {
      "left" : "return isNodeTypeReferenced(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return isNodeTypeReferenced(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[51943-52014]:ReturnStatement[52059-52130]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52084-52090]:Modifier[52200-52206]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52091-52098]:PrimitiveType[52207-52214]"
    }, {
      "left" : "isNodeTypeReferenced",
      "right" : "isNodeTypeReferenced",
      "info" : "SimpleName[52099-52119]:SimpleName[52215-52235]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52127-52136]:SingleVariableDeclaration[52243-52252]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[52138-52146]:SingleVariableDeclaration[52254-52262]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[52148-52184]:SingleVariableDeclaration[52264-52300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52186-52260]:Block[52302-52376]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[52192-52256]:ReturnStatement[52308-52372]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52350-52356]:Modifier[52466-52472]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[52357-52360]:PrimitiveType[52473-52476]"
    }, {
      "left" : "getNodeTypeReferenceCount",
      "right" : "getNodeTypeReferenceCount",
      "info" : "SimpleName[52361-52386]:SimpleName[52477-52502]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52387-52396]:SingleVariableDeclaration[52503-52512]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[52398-52406]:SingleVariableDeclaration[52514-52522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52408-52465]:Block[52524-52581]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type));",
      "right" : "return getCount(node, new MatchNodeType(type));",
      "info" : "ReturnStatement[52414-52461]:ReturnStatement[52530-52577]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52544-52550]:Modifier[52660-52666]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52551-52558]:PrimitiveType[52667-52674]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[52559-52575]:SimpleName[52675-52691]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52576-52585]:SingleVariableDeclaration[52692-52701]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52621-52632]:SingleVariableDeclaration[52737-52748]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[52668-52704]:SingleVariableDeclaration[52784-52820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52706-52780]:Block[52822-52896]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[52712-52776]:ReturnStatement[52828-52892]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52859-52865]:Modifier[52975-52981]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52866-52873]:PrimitiveType[52982-52989]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[52874-52890]:SimpleName[52990-53006]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52891-52900]:SingleVariableDeclaration[53007-53016]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52902-52913]:SingleVariableDeclaration[53018-53029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52915-52992]:Block[53031-53108]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[52921-52988]:ReturnStatement[53037-53104]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53089-53095]:Modifier[53205-53211]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[53096-53099]:PrimitiveType[53212-53215]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "getNameReferenceCount",
      "info" : "SimpleName[53100-53121]:SimpleName[53216-53237]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53122-53131]:SingleVariableDeclaration[53238-53247]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[53133-53144]:SingleVariableDeclaration[53249-53260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53146-53204]:Block[53262-53320]"
    }, {
      "left" : "return getCount(node, new MatchNameNode(name) );",
      "right" : "return getCount(node, new MatchNameNode(name) );",
      "info" : "ReturnStatement[53152-53200]:ReturnStatement[53268-53316]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53300-53306]:Modifier[53416-53422]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53307-53314]:PrimitiveType[53423-53430]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[53315-53318]:SimpleName[53431-53434]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53319-53328]:SingleVariableDeclaration[53435-53444]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[53351-53371]:SingleVariableDeclaration[53467-53487]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[53394-53430]:SingleVariableDeclaration[53510-53546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53432-53735]:Block[53548-53851]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[53438-53486]:IfStatement[53554-53602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53460-53486]:Block[53576-53602]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53468-53480]:ReturnStatement[53584-53596]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[53492-53558]:IfStatement[53608-53674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53531-53558]:Block[53647-53674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53539-53552]:ReturnStatement[53655-53668]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[53564-53712]:ForStatement[53680-53828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53628-53712]:Block[53744-53828]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[53636-53706]:IfStatement[53752-53822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53676-53706]:Block[53792-53822]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53686-53698]:ReturnStatement[53802-53814]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53718-53731]:ReturnStatement[53834-53847]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53852-53858]:Modifier[53968-53974]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[53859-53862]:PrimitiveType[53975-53978]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[53863-53871]:SimpleName[53979-53987]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53872-53878]:SingleVariableDeclaration[53988-53994]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[53880-53900]:SingleVariableDeclaration[53996-54016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53902-54100]:Block[54018-54216]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[53908-53922]:VariableDeclarationStatement[54024-54038]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[53928-53969]:IfStatement[54044-54085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53947-53969]:Block[54063-54085]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[53955-53963]:ExpressionStatement[54071-54079]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[53975-54077]:ForStatement[54091-54193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54036-54077]:Block[54152-54193]"
    }, {
      "left" : "total += getCount(c, pred);",
      "right" : "total += getCount(c, pred);",
      "info" : "ExpressionStatement[54044-54071]:ExpressionStatement[54160-54187]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[54083-54096]:ReturnStatement[54199-54212]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54179-54185]:Modifier[54295-54301]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[54186-54195]:TYPE_DECLARATION_KIND[54302-54311]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleName[54196-54203]:SimpleName[54312-54319]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54210-54214]:PrimitiveType[54326-54330]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[54215-54220]:SimpleName[54331-54336]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54221-54230]:SingleVariableDeclaration[54337-54346]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54345-54351]:Modifier[54461-54467]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54352-54356]:PrimitiveType[54468-54472]"
    }, {
      "left" : "visitPreOrder",
      "right" : "visitPreOrder",
      "info" : "SimpleName[54357-54370]:SimpleName[54473-54486]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54371-54380]:SingleVariableDeclaration[54487-54496]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[54403-54417]:SingleVariableDeclaration[54519-54533]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[54440-54476]:SingleVariableDeclaration[54556-54592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54478-54694]:Block[54594-54810]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[54484-54503]:ExpressionStatement[54600-54619]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[54509-54690]:IfStatement[54625-54806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54547-54690]:Block[54663-54806]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[54555-54684]:ForStatement[54671-54800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54619-54684]:Block[54735-54800]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[54629-54676]:ExpressionStatement[54745-54792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54804-54810]:Modifier[54920-54926]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54811-54815]:PrimitiveType[54927-54931]"
    }, {
      "left" : "visitPostOrder",
      "right" : "visitPostOrder",
      "info" : "SimpleName[54816-54830]:SimpleName[54932-54946]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54831-54840]:SingleVariableDeclaration[54947-54956]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[54863-54877]:SingleVariableDeclaration[54979-54993]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[54900-54936]:SingleVariableDeclaration[55016-55052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54938-55155]:Block[55054-55271]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[54944-55126]:IfStatement[55060-55242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54982-55126]:Block[55098-55242]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[54990-55120]:ForStatement[55106-55236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55054-55120]:Block[55170-55236]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[55064-55112]:ExpressionStatement[55180-55228]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[55132-55151]:ExpressionStatement[55248-55267]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55224-55230]:Modifier[55340-55346]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55231-55238]:PrimitiveType[55347-55354]"
    }, {
      "left" : "hasFinally",
      "right" : "hasFinally",
      "info" : "SimpleName[55239-55249]:SimpleName[55355-55365]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55250-55256]:SingleVariableDeclaration[55366-55372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55258-55357]:Block[55374-55473]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[55264-55318]:ExpressionStatement[55380-55434]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[55323-55353]:ReturnStatement[55439-55469]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55451-55457]:Modifier[55567-55573]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[55458-55462]:SimpleType[55574-55578]"
    }, {
      "left" : "getCatchBlock",
      "right" : "getCatchBlock",
      "info" : "SimpleName[55463-55476]:SimpleName[55579-55592]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55477-55483]:SingleVariableDeclaration[55593-55599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55485-55589]:Block[55601-55705]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[55491-55545]:ExpressionStatement[55607-55661]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[55550-55585]:ReturnStatement[55666-55701]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55701-55707]:Modifier[55817-55823]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55708-55715]:PrimitiveType[55824-55831]"
    }, {
      "left" : "hasCatchHandler",
      "right" : "hasCatchHandler",
      "info" : "SimpleName[55716-55731]:SimpleName[55832-55847]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55732-55738]:SingleVariableDeclaration[55848-55854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55740-55880]:Block[55856-55996]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[55746-55802]:ExpressionStatement[55862-55918]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[55807-55876]:ReturnStatement[55923-55992]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55990-55996]:Modifier[56106-56112]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[55997-56001]:SimpleType[56113-56117]"
    }, {
      "left" : "getFnParameters",
      "right" : "getFnParameters",
      "info" : "SimpleName[56002-56017]:SimpleName[56118-56133]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[56018-56029]:SingleVariableDeclaration[56134-56145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56031-56213]:Block[56147-56329]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[56101-56165]:ExpressionStatement[56217-56281]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[56169-56209]:ReturnStatement[56285-56325]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56919-56925]:Modifier[57035-57041]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56926-56933]:PrimitiveType[57042-57049]"
    }, {
      "left" : "isConstantName",
      "right" : "isConstantName",
      "info" : "SimpleName[56934-56948]:SimpleName[57050-57064]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[56949-56958]:SingleVariableDeclaration[57065-57074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56960-57020]:Block[57076-57136]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[56966-57016]:ReturnStatement[57082-57132]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57114-57120]:Modifier[57230-57236]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[57121-57130]:SimpleType[57237-57246]"
    }, {
      "left" : "getInfoForNameNode",
      "right" : "getInfoForNameNode",
      "info" : "SimpleName[57131-57149]:SimpleName[57247-57265]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[57150-57163]:SingleVariableDeclaration[57266-57279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57165-57549]:Block[57281-57665]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[57171-57193]:VariableDeclarationStatement[57287-57309]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[57198-57217]:VariableDeclarationStatement[57314-57333]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[57222-57326]:IfStatement[57338-57442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57244-57326]:Block[57360-57442]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[57252-57283]:ExpressionStatement[57368-57399]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[57290-57320]:ExpressionStatement[57406-57436]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[57332-57528]:IfStatement[57448-57644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57485-57528]:Block[57601-57644]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[57493-57522]:ExpressionStatement[57609-57638]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[57533-57545]:ReturnStatement[57649-57661]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57657-57663]:Modifier[57773-57779]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[57664-57670]:SimpleType[57780-57786]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[57671-57684]:SimpleName[57787-57800]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[57685-57691]:SingleVariableDeclaration[57801-57807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57693-57889]:Block[57809-58005]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[57699-57724]:VariableDeclarationStatement[57815-57840]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[57729-57862]:WhileStatement[57845-57978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57769-57862]:Block[57885-57978]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[57777-57831]:ExpressionStatement[57893-57947]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[57838-57856]:ExpressionStatement[57954-57972]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[57867-57885]:ReturnStatement[57983-58001]"
    } ]
  },
  "interFileMappings" : { }
}