{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;",
      "right" : "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;",
      "info" : "FieldDeclaration[1487-1685]:FieldDeclaration[1487-1685]"
    }, {
      "left" : "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;",
      "right" : "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;",
      "info" : "FieldDeclaration[1691-1886]:FieldDeclaration[1691-1886]"
    }, {
      "left" : "private double[][] lTData;",
      "right" : "private double[][] lTData;",
      "info" : "FieldDeclaration[1892-1981]:FieldDeclaration[1892-1981]"
    }, {
      "left" : "private RealMatrix cachedL;",
      "right" : "private RealMatrix cachedL;",
      "info" : "FieldDeclaration[1987-2044]:FieldDeclaration[1987-2044]"
    }, {
      "left" : "private RealMatrix cachedLT;",
      "right" : "private RealMatrix cachedLT;",
      "info" : "FieldDeclaration[2050-2109]:FieldDeclaration[2050-2109]"
    }, {
      "left" : "public CholeskyDecompositionImpl(final RealMatrix matrix)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException",
      "right" : "public CholeskyDecompositionImpl(final RealMatrix matrix)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException",
      "info" : "MethodDeclaration[2115-3263]:MethodDeclaration[2115-3263]"
    }, {
      "left" : "public RealMatrix getL()",
      "right" : "public RealMatrix getL()",
      "info" : "MethodDeclaration[6123-6288]:MethodDeclaration[6117-6282]"
    }, {
      "left" : "public RealMatrix getLT()",
      "right" : "public RealMatrix getLT()",
      "info" : "MethodDeclaration[6294-6519]:MethodDeclaration[6288-6513]"
    }, {
      "left" : "public double getDeterminant()",
      "right" : "public double getDeterminant()",
      "info" : "MethodDeclaration[6525-6790]:MethodDeclaration[6519-6784]"
    }, {
      "left" : "public DecompositionSolver getSolver()",
      "right" : "public DecompositionSolver getSolver()",
      "info" : "MethodDeclaration[6796-6902]:MethodDeclaration[6790-6896]"
    }, {
      "left" : "Solver",
      "right" : "Solver",
      "info" : "TypeDeclaration[6908-12618]:TypeDeclaration[6902-12612]"
    }, {
      "left" : "private final double[][] lTData;",
      "right" : "private final double[][] lTData;",
      "info" : "FieldDeclaration[7013-7112]:FieldDeclaration[7007-7106]"
    }, {
      "left" : "private Solver(final double[][] lTData)",
      "right" : "private Solver(final double[][] lTData)",
      "info" : "MethodDeclaration[7122-7357]:MethodDeclaration[7116-7351]"
    }, {
      "left" : "public boolean isNonSingular()",
      "right" : "public boolean isNonSingular()",
      "info" : "MethodDeclaration[7367-7551]:MethodDeclaration[7361-7545]"
    }, {
      "left" : "public double[] solve(double[] b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public double[] solve(double[] b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[7561-8639]:MethodDeclaration[7555-8633]"
    }, {
      "left" : "public RealVector solve(RealVector b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealVector solve(RealVector b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[8649-10005]:MethodDeclaration[8643-9999]"
    }, {
      "left" : "public RealVectorImpl solve(RealVectorImpl b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealVectorImpl solve(RealVectorImpl b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[10015-10616]:MethodDeclaration[10009-10610]"
    }, {
      "left" : "public RealMatrix solve(RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealMatrix solve(RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[10626-12421]:MethodDeclaration[10620-12415]"
    }, {
      "left" : "public RealMatrix getInverse() throws InvalidMatrixException",
      "right" : "public RealMatrix getInverse() throws InvalidMatrixException",
      "info" : "MethodDeclaration[12431-12611]:MethodDeclaration[12425-12605]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3145-3263]:Block[3145-3263]"
    }, {
      "left" : "this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,\n             DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);",
      "right" : "this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,\n             DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);",
      "info" : "ConstructorInvocation[3155-3257]:ConstructorInvocation[3155-3257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6173-6288]:Block[6167-6282]"
    }, {
      "left" : "if (cachedL == null)",
      "right" : "if (cachedL == null)",
      "info" : "IfStatement[6183-6258]:IfStatement[6177-6252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6204-6258]:Block[6198-6252]"
    }, {
      "left" : "cachedL = getLT().transpose();",
      "right" : "cachedL = getLT().transpose();",
      "info" : "ExpressionStatement[6218-6248]:ExpressionStatement[6212-6242]"
    }, {
      "left" : "return cachedL;",
      "right" : "return cachedL;",
      "info" : "ReturnStatement[6267-6282]:ReturnStatement[6261-6276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6345-6519]:Block[6339-6513]"
    }, {
      "left" : "if (cachedLT == null)",
      "right" : "if (cachedLT == null)",
      "info" : "IfStatement[6356-6450]:IfStatement[6350-6444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6378-6450]:Block[6372-6444]"
    }, {
      "left" : "cachedLT = MatrixUtils.createRealMatrix(lTData);",
      "right" : "cachedLT = MatrixUtils.createRealMatrix(lTData);",
      "info" : "ExpressionStatement[6392-6440]:ExpressionStatement[6386-6434]"
    }, {
      "left" : "return cachedLT;",
      "right" : "return cachedLT;",
      "info" : "ReturnStatement[6496-6512]:ReturnStatement[6490-6506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6581-6790]:Block[6575-6784]"
    }, {
      "left" : "double determinant = 1.0;",
      "right" : "double determinant = 1.0;",
      "info" : "VariableDeclarationStatement[6591-6616]:VariableDeclarationStatement[6585-6610]"
    }, {
      "left" : "for (int i = 0; i < lTData.length; ++i)",
      "right" : "for (int i = 0; i < lTData.length; ++i)",
      "info" : "ForStatement[6625-6756]:ForStatement[6619-6750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6665-6756]:Block[6659-6750]"
    }, {
      "left" : "double lTii = lTData[i][i];",
      "right" : "double lTii = lTData[i][i];",
      "info" : "VariableDeclarationStatement[6679-6706]:VariableDeclarationStatement[6673-6700]"
    }, {
      "left" : "determinant *= lTii * lTii;",
      "right" : "determinant *= lTii * lTii;",
      "info" : "ExpressionStatement[6719-6746]:ExpressionStatement[6713-6740]"
    }, {
      "left" : "return determinant;",
      "right" : "return determinant;",
      "info" : "ReturnStatement[6765-6784]:ReturnStatement[6759-6778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6860-6902]:Block[6854-6896]"
    }, {
      "left" : "return new Solver(lTData);",
      "right" : "return new Solver(lTData);",
      "info" : "ReturnStatement[6870-6896]:ReturnStatement[6864-6890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7312-7357]:Block[7306-7351]"
    }, {
      "left" : "this.lTData = lTData;",
      "right" : "this.lTData = lTData;",
      "info" : "ExpressionStatement[7326-7347]:ExpressionStatement[7320-7341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7427-7551]:Block[7421-7545]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7529-7541]:ReturnStatement[7523-7535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7692-8639]:Block[7686-8633]"
    }, {
      "left" : "final int m = lTData.length;",
      "right" : "final int m = lTData.length;",
      "info" : "VariableDeclarationStatement[7707-7735]:VariableDeclarationStatement[7701-7729]"
    }, {
      "left" : "if (b.length != m)",
      "right" : "if (b.length != m)",
      "info" : "IfStatement[7748-7971]:IfStatement[7742-7965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7767-7971]:Block[7761-7965]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
      "info" : "ThrowStatement[7785-7957]:ThrowStatement[7779-7951]"
    }, {
      "left" : "final double[] x = b.clone();",
      "right" : "final double[] x = b.clone();",
      "info" : "VariableDeclarationStatement[7985-8014]:VariableDeclarationStatement[7979-8008]"
    }, {
      "left" : "for (int j = 0; j < m; j++)",
      "right" : "for (int j = 0; j < m; j++)",
      "info" : "ForStatement[8056-8325]:ForStatement[8050-8319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8084-8325]:Block[8078-8319]"
    }, {
      "left" : "final double[] lJ = lTData[j];",
      "right" : "final double[] lJ = lTData[j];",
      "info" : "VariableDeclarationStatement[8102-8132]:VariableDeclarationStatement[8096-8126]"
    }, {
      "left" : "x[j] /= lJ[j];",
      "right" : "x[j] /= lJ[j];",
      "info" : "ExpressionStatement[8149-8163]:ExpressionStatement[8143-8157]"
    }, {
      "left" : "final double xJ = x[j];",
      "right" : "final double xJ = x[j];",
      "info" : "VariableDeclarationStatement[8180-8203]:VariableDeclarationStatement[8174-8197]"
    }, {
      "left" : "for (int i = j + 1; i < m; i++)",
      "right" : "for (int i = j + 1; i < m; i++)",
      "info" : "ForStatement[8220-8311]:ForStatement[8214-8305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8252-8311]:Block[8246-8305]"
    }, {
      "left" : "x[i] -= xJ * lJ[i];",
      "right" : "x[i] -= xJ * lJ[i];",
      "info" : "ExpressionStatement[8274-8293]:ExpressionStatement[8268-8287]"
    }, {
      "left" : "for (int j = m - 1; j >= 0; j--)",
      "right" : "for (int j = m - 1; j >= 0; j--)",
      "info" : "ForStatement[8368-8605]:ForStatement[8362-8599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8401-8605]:Block[8395-8599]"
    }, {
      "left" : "x[j] /= lTData[j][j];",
      "right" : "x[j] /= lTData[j][j];",
      "info" : "ExpressionStatement[8419-8440]:ExpressionStatement[8413-8434]"
    }, {
      "left" : "final double xJ = x[j];",
      "right" : "final double xJ = x[j];",
      "info" : "VariableDeclarationStatement[8457-8480]:VariableDeclarationStatement[8451-8474]"
    }, {
      "left" : "for (int i = 0; i < j; i++)",
      "right" : "for (int i = 0; i < j; i++)",
      "info" : "ForStatement[8497-8591]:ForStatement[8491-8585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8525-8591]:Block[8519-8585]"
    }, {
      "left" : "x[i] -= xJ * lTData[i][j];",
      "right" : "x[i] -= xJ * lTData[i][j];",
      "info" : "ExpressionStatement[8547-8573]:ExpressionStatement[8541-8567]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[8619-8628]:ReturnStatement[8613-8622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8784-10005]:Block[8778-9999]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8798-9995]:TryStatement[8792-9989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8802-8867]:Block[8796-8861]"
    }, {
      "left" : "return solve((RealVectorImpl) b);",
      "right" : "return solve((RealVectorImpl) b);",
      "info" : "ReturnStatement[8820-8853]:ReturnStatement[8814-8847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8899-9995]:Block[8893-9989]"
    }, {
      "left" : "final int m = lTData.length;",
      "right" : "final int m = lTData.length;",
      "info" : "VariableDeclarationStatement[8918-8946]:VariableDeclarationStatement[8912-8940]"
    }, {
      "left" : "if (b.getDimension() != m)",
      "right" : "if (b.getDimension() != m)",
      "info" : "IfStatement[8963-9218]:IfStatement[8957-9212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8990-9218]:Block[8984-9212]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                            \"vector length mismatch: got {0} but expected {1}\",\n                            b.getDimension(), m);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                            \"vector length mismatch: got {0} but expected {1}\",\n                            b.getDimension(), m);",
      "info" : "ThrowStatement[9012-9200]:ThrowStatement[9006-9194]"
    }, {
      "left" : "final double[] x = b.getData();",
      "right" : "final double[] x = b.getData();",
      "info" : "VariableDeclarationStatement[9236-9267]:VariableDeclarationStatement[9230-9261]"
    }, {
      "left" : "for (int j = 0; j < m; j++)",
      "right" : "for (int j = 0; j < m; j++)",
      "info" : "ForStatement[9317-9614]:ForStatement[9311-9608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9345-9614]:Block[9339-9608]"
    }, {
      "left" : "final double[] lJ = lTData[j];",
      "right" : "final double[] lJ = lTData[j];",
      "info" : "VariableDeclarationStatement[9367-9397]:VariableDeclarationStatement[9361-9391]"
    }, {
      "left" : "x[j] /= lJ[j];",
      "right" : "x[j] /= lJ[j];",
      "info" : "ExpressionStatement[9418-9432]:ExpressionStatement[9412-9426]"
    }, {
      "left" : "final double xJ = x[j];",
      "right" : "final double xJ = x[j];",
      "info" : "VariableDeclarationStatement[9453-9476]:VariableDeclarationStatement[9447-9470]"
    }, {
      "left" : "for (int i = j + 1; i < m; i++)",
      "right" : "for (int i = j + 1; i < m; i++)",
      "info" : "ForStatement[9497-9596]:ForStatement[9491-9590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9529-9596]:Block[9523-9590]"
    }, {
      "left" : "x[i] -= xJ * lJ[i];",
      "right" : "x[i] -= xJ * lJ[i];",
      "info" : "ExpressionStatement[9555-9574]:ExpressionStatement[9549-9568]"
    }, {
      "left" : "for (int j = m - 1; j >= 0; j--)",
      "right" : "for (int j = m - 1; j >= 0; j--)",
      "info" : "ForStatement[9665-9926]:ForStatement[9659-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9698-9926]:Block[9692-9920]"
    }, {
      "left" : "x[j] /= lTData[j][j];",
      "right" : "x[j] /= lTData[j][j];",
      "info" : "ExpressionStatement[9720-9741]:ExpressionStatement[9714-9735]"
    }, {
      "left" : "final double xJ = x[j];",
      "right" : "final double xJ = x[j];",
      "info" : "VariableDeclarationStatement[9762-9785]:VariableDeclarationStatement[9756-9779]"
    }, {
      "left" : "for (int i = 0; i < j; i++)",
      "right" : "for (int i = 0; i < j; i++)",
      "info" : "ForStatement[9806-9908]:ForStatement[9800-9902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9834-9908]:Block[9828-9902]"
    }, {
      "left" : "x[i] -= xJ * lTData[i][j];",
      "right" : "x[i] -= xJ * lTData[i][j];",
      "info" : "ExpressionStatement[9860-9886]:ExpressionStatement[9854-9880]"
    }, {
      "left" : "return new RealVectorImpl(x, false);",
      "right" : "return new RealVectorImpl(x, false);",
      "info" : "ReturnStatement[9944-9980]:ReturnStatement[9938-9974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10536-10616]:Block[10530-10610]"
    }, {
      "left" : "return new RealVectorImpl(solve(b.getDataRef()), false);",
      "right" : "return new RealVectorImpl(solve(b.getDataRef()), false);",
      "info" : "ReturnStatement[10550-10606]:ReturnStatement[10544-10600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10761-12421]:Block[10755-12415]"
    }, {
      "left" : "final int m = lTData.length;",
      "right" : "final int m = lTData.length;",
      "info" : "VariableDeclarationStatement[10776-10804]:VariableDeclarationStatement[10770-10798]"
    }, {
      "left" : "if (b.getRowDimension() != m)",
      "right" : "if (b.getRowDimension() != m)",
      "info" : "IfStatement[10817-11096]:IfStatement[10811-11090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10847-11096]:Block[10841-11090]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
      "info" : "ThrowStatement[10865-11082]:ThrowStatement[10859-11076]"
    }, {
      "left" : "final int nColB = b.getColumnDimension();",
      "right" : "final int nColB = b.getColumnDimension();",
      "info" : "VariableDeclarationStatement[11110-11151]:VariableDeclarationStatement[11104-11145]"
    }, {
      "left" : "double[][] x = b.getData();",
      "right" : "double[][] x = b.getData();",
      "info" : "VariableDeclarationStatement[11164-11191]:VariableDeclarationStatement[11158-11185]"
    }, {
      "left" : "for (int j = 0; j < m; j++)",
      "right" : "for (int j = 0; j < m; j++)",
      "info" : "ForStatement[11233-11791]:ForStatement[11227-11785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11261-11791]:Block[11255-11785]"
    }, {
      "left" : "final double[] lJ = lTData[j];",
      "right" : "final double[] lJ = lTData[j];",
      "info" : "VariableDeclarationStatement[11279-11309]:VariableDeclarationStatement[11273-11303]"
    }, {
      "left" : "final double lJJ = lJ[j];",
      "right" : "final double lJJ = lJ[j];",
      "info" : "VariableDeclarationStatement[11326-11351]:VariableDeclarationStatement[11320-11345]"
    }, {
      "left" : "final double[] xJ = x[j];",
      "right" : "final double[] xJ = x[j];",
      "info" : "VariableDeclarationStatement[11368-11393]:VariableDeclarationStatement[11362-11387]"
    }, {
      "left" : "for (int k = 0; k < nColB; ++k)",
      "right" : "for (int k = 0; k < nColB; ++k)",
      "info" : "ForStatement[11410-11495]:ForStatement[11404-11489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11442-11495]:Block[11436-11489]"
    }, {
      "left" : "xJ[k] /= lJJ;",
      "right" : "xJ[k] /= lJJ;",
      "info" : "ExpressionStatement[11464-11477]:ExpressionStatement[11458-11471]"
    }, {
      "left" : "for (int i = j + 1; i < m; i++)",
      "right" : "for (int i = j + 1; i < m; i++)",
      "info" : "ForStatement[11512-11777]:ForStatement[11506-11771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11544-11777]:Block[11538-11771]"
    }, {
      "left" : "final double[] xI = x[i];",
      "right" : "final double[] xI = x[i];",
      "info" : "VariableDeclarationStatement[11566-11591]:VariableDeclarationStatement[11560-11585]"
    }, {
      "left" : "final double lJI = lJ[i];",
      "right" : "final double lJI = lJ[i];",
      "info" : "VariableDeclarationStatement[11612-11637]:VariableDeclarationStatement[11606-11631]"
    }, {
      "left" : "for (int k = 0; k < nColB; ++k)",
      "right" : "for (int k = 0; k < nColB; ++k)",
      "info" : "ForStatement[11658-11759]:ForStatement[11652-11753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11690-11759]:Block[11684-11753]"
    }, {
      "left" : "xI[k] -= xJ[k] * lJI;",
      "right" : "xI[k] -= xJ[k] * lJI;",
      "info" : "ExpressionStatement[11716-11737]:ExpressionStatement[11710-11731]"
    }, {
      "left" : "for (int j = m - 1; j >= 0; j--)",
      "right" : "for (int j = m - 1; j >= 0; j--)",
      "info" : "ForStatement[11834-12360]:ForStatement[11828-12354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11867-12360]:Block[11861-12354]"
    }, {
      "left" : "final double lJJ = lTData[j][j];",
      "right" : "final double lJJ = lTData[j][j];",
      "info" : "VariableDeclarationStatement[11885-11917]:VariableDeclarationStatement[11879-11911]"
    }, {
      "left" : "final double[] xJ = x[j];",
      "right" : "final double[] xJ = x[j];",
      "info" : "VariableDeclarationStatement[11934-11959]:VariableDeclarationStatement[11928-11953]"
    }, {
      "left" : "for (int k = 0; k < nColB; ++k)",
      "right" : "for (int k = 0; k < nColB; ++k)",
      "info" : "ForStatement[11976-12061]:ForStatement[11970-12055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12008-12061]:Block[12002-12055]"
    }, {
      "left" : "xJ[k] /= lJJ;",
      "right" : "xJ[k] /= lJJ;",
      "info" : "ExpressionStatement[12030-12043]:ExpressionStatement[12024-12037]"
    }, {
      "left" : "for (int i = 0; i < j; i++)",
      "right" : "for (int i = 0; i < j; i++)",
      "info" : "ForStatement[12078-12346]:ForStatement[12072-12340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12106-12346]:Block[12100-12340]"
    }, {
      "left" : "final double[] xI = x[i];",
      "right" : "final double[] xI = x[i];",
      "info" : "VariableDeclarationStatement[12128-12153]:VariableDeclarationStatement[12122-12147]"
    }, {
      "left" : "final double lIJ = lTData[i][j];",
      "right" : "final double lIJ = lTData[i][j];",
      "info" : "VariableDeclarationStatement[12174-12206]:VariableDeclarationStatement[12168-12200]"
    }, {
      "left" : "for (int k = 0; k < nColB; ++k)",
      "right" : "for (int k = 0; k < nColB; ++k)",
      "info" : "ForStatement[12227-12328]:ForStatement[12221-12322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12259-12328]:Block[12253-12322]"
    }, {
      "left" : "xI[k] -= xJ[k] * lIJ;",
      "right" : "xI[k] -= xJ[k] * lIJ;",
      "info" : "ExpressionStatement[12285-12306]:ExpressionStatement[12279-12300]"
    }, {
      "left" : "return new RealMatrixImpl(x, false);",
      "right" : "return new RealMatrixImpl(x, false);",
      "info" : "ReturnStatement[12374-12410]:ReturnStatement[12368-12404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12521-12611]:Block[12515-12605]"
    }, {
      "left" : "return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));",
      "right" : "return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));",
      "info" : "ReturnStatement[12535-12601]:ReturnStatement[12529-12595]"
    } ]
  },
  "interFileMappings" : { }
}