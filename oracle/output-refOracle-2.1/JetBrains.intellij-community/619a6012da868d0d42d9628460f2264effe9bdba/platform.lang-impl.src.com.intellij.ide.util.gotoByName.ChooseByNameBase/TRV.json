{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String TEMPORARILY_FOCUSABLE_COMPONENT_KEY = \"ChooseByNameBase.TemporarilyFocusableComponent\";",
      "right" : "public static final String TEMPORARILY_FOCUSABLE_COMPONENT_KEY = \"ChooseByNameBase.TemporarilyFocusableComponent\";",
      "info" : "FieldDeclaration[4465-4579]:FieldDeclaration[4465-4579]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.ide.util.gotoByName.ChooseByNameBase\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.ide.util.gotoByName.ChooseByNameBase\");",
      "info" : "FieldDeclaration[4583-4690]:FieldDeclaration[4583-4690]"
    }, {
      "left" : "protected final Project myProject;",
      "right" : "protected final Project myProject;",
      "info" : "FieldDeclaration[4693-4727]:FieldDeclaration[4693-4727]"
    }, {
      "left" : "protected final ChooseByNameModel myModel;",
      "right" : "protected final ChooseByNameModel myModel;",
      "info" : "FieldDeclaration[4730-4772]:FieldDeclaration[4730-4772]"
    }, {
      "left" : "protected ChooseByNameItemProvider myProvider;",
      "right" : "protected ChooseByNameItemProvider myProvider;",
      "info" : "FieldDeclaration[4775-4821]:FieldDeclaration[4775-4821]"
    }, {
      "left" : "protected final String myInitialText;",
      "right" : "protected final String myInitialText;",
      "info" : "FieldDeclaration[4824-4861]:FieldDeclaration[4824-4861]"
    }, {
      "left" : "private boolean mySearchInAnyPlace = false;",
      "right" : "private boolean mySearchInAnyPlace = false;",
      "info" : "FieldDeclaration[4864-4907]:FieldDeclaration[4864-4907]"
    }, {
      "left" : "protected Component myPreviouslyFocusedComponent;",
      "right" : "protected Component myPreviouslyFocusedComponent;",
      "info" : "FieldDeclaration[4911-4960]:FieldDeclaration[4911-4960]"
    }, {
      "left" : "private boolean myInitialized;",
      "right" : "private boolean myInitialized;",
      "info" : "FieldDeclaration[4963-4993]:FieldDeclaration[4963-4993]"
    }, {
      "left" : "protected final JPanelProvider myTextFieldPanel = new JPanelProvider();",
      "right" : "protected final JPanelProvider myTextFieldPanel = new JPanelProvider();",
      "info" : "FieldDeclaration[4997-5068]:FieldDeclaration[4997-5068]"
    }, {
      "left" : "protected final MyTextField myTextField = new MyTextField();",
      "right" : "protected final MyTextField myTextField = new MyTextField();",
      "info" : "FieldDeclaration[5101-5161]:FieldDeclaration[5101-5161]"
    }, {
      "left" : "private final CardLayout myCard = new CardLayout();",
      "right" : "private final CardLayout myCard = new CardLayout();",
      "info" : "FieldDeclaration[5164-5215]:FieldDeclaration[5164-5215]"
    }, {
      "left" : "private final JPanel myCardContainer = new JPanel(myCard);",
      "right" : "private final JPanel myCardContainer = new JPanel(myCard);",
      "info" : "FieldDeclaration[5218-5276]:FieldDeclaration[5218-5276]"
    }, {
      "left" : "protected JCheckBox myCheckBox;",
      "right" : "protected JCheckBox myCheckBox;",
      "info" : "FieldDeclaration[5279-5310]:FieldDeclaration[5279-5310]"
    }, {
      "left" : "private JComponent myToolArea;",
      "right" : "private JComponent myToolArea;",
      "info" : "FieldDeclaration[5313-5414]:FieldDeclaration[5313-5414]"
    }, {
      "left" : "protected JScrollPane myListScrollPane;",
      "right" : "protected JScrollPane myListScrollPane;",
      "info" : "FieldDeclaration[5418-5457]:FieldDeclaration[5418-5457]"
    }, {
      "left" : "private final MyListModel<Object> myListModel = new MyListModel<Object>();",
      "right" : "private final MyListModel<Object> myListModel = new MyListModel<Object>();",
      "info" : "FieldDeclaration[5491-5565]:FieldDeclaration[5491-5565]"
    }, {
      "left" : "protected final JList myList = new JBList(myListModel);",
      "right" : "protected final JList myList = new JBList(myListModel);",
      "info" : "FieldDeclaration[5568-5623]:FieldDeclaration[5568-5623]"
    }, {
      "left" : "private final List<Pair<String, Integer>> myHistory = ContainerUtil.newArrayList();",
      "right" : "private final List<Pair<String, Integer>> myHistory = ContainerUtil.newArrayList();",
      "info" : "FieldDeclaration[5626-5709]:FieldDeclaration[5626-5709]"
    }, {
      "left" : "private final List<Pair<String, Integer>> myFuture = ContainerUtil.newArrayList();",
      "right" : "private final List<Pair<String, Integer>> myFuture = ContainerUtil.newArrayList();",
      "info" : "FieldDeclaration[5712-5794]:FieldDeclaration[5712-5794]"
    }, {
      "left" : "protected ChooseByNamePopupComponent.Callback myActionListener;",
      "right" : "protected ChooseByNamePopupComponent.Callback myActionListener;",
      "info" : "FieldDeclaration[5798-5861]:FieldDeclaration[5798-5861]"
    }, {
      "left" : "protected final Alarm myAlarm = new Alarm();",
      "right" : "protected final Alarm myAlarm = new Alarm();",
      "info" : "FieldDeclaration[5865-5909]:FieldDeclaration[5865-5909]"
    }, {
      "left" : "private final ListUpdater myListUpdater = new ListUpdater();",
      "right" : "private final ListUpdater myListUpdater = new ListUpdater();",
      "info" : "FieldDeclaration[5913-5973]:FieldDeclaration[5913-5973]"
    }, {
      "left" : "private boolean myDisposedFlag = false;",
      "right" : "private boolean myDisposedFlag = false;",
      "info" : "FieldDeclaration[5977-6016]:FieldDeclaration[5977-6016]"
    }, {
      "left" : "private ActionCallback myPostponedOkAction;",
      "right" : "private ActionCallback myPostponedOkAction;",
      "info" : "FieldDeclaration[6019-6062]:FieldDeclaration[6019-6062]"
    }, {
      "left" : "private final String[][] myNames = new String[2][];",
      "right" : "private final String[][] myNames = new String[2][];",
      "info" : "FieldDeclaration[6066-6117]:FieldDeclaration[6066-6117]"
    }, {
      "left" : "private volatile CalcElementsThread myCalcElementsThread;",
      "right" : "private volatile CalcElementsThread myCalcElementsThread;",
      "info" : "FieldDeclaration[6120-6177]:FieldDeclaration[6120-6177]"
    }, {
      "left" : "private static int VISIBLE_LIST_SIZE_LIMIT = 10;",
      "right" : "private static int VISIBLE_LIST_SIZE_LIMIT = 10;",
      "info" : "FieldDeclaration[6180-6228]:FieldDeclaration[6180-6228]"
    }, {
      "left" : "private int myListSizeIncreasing = 30;",
      "right" : "private int myListSizeIncreasing = 30;",
      "info" : "FieldDeclaration[6231-6269]:FieldDeclaration[6231-6269]"
    }, {
      "left" : "private int myMaximumListSizeLimit = 30;",
      "right" : "private int myMaximumListSizeLimit = 30;",
      "info" : "FieldDeclaration[6272-6312]:FieldDeclaration[6272-6312]"
    }, {
      "left" : "@NonNls private static final String NOT_FOUND_IN_PROJECT_CARD = \"syslib\";",
      "right" : "@NonNls private static final String NOT_FOUND_IN_PROJECT_CARD = \"syslib\";",
      "info" : "FieldDeclaration[6315-6388]:FieldDeclaration[6315-6388]"
    }, {
      "left" : "@NonNls private static final String NOT_FOUND_CARD = \"nfound\";",
      "right" : "@NonNls private static final String NOT_FOUND_CARD = \"nfound\";",
      "info" : "FieldDeclaration[6391-6453]:FieldDeclaration[6391-6453]"
    }, {
      "left" : "@NonNls private static final String CHECK_BOX_CARD = \"chkbox\";",
      "right" : "@NonNls private static final String CHECK_BOX_CARD = \"chkbox\";",
      "info" : "FieldDeclaration[6456-6518]:FieldDeclaration[6456-6518]"
    }, {
      "left" : "@NonNls private static final String SEARCHING_CARD = \"searching\";",
      "right" : "@NonNls private static final String SEARCHING_CARD = \"searching\";",
      "info" : "FieldDeclaration[6521-6586]:FieldDeclaration[6521-6586]"
    }, {
      "left" : "private final int myRebuildDelay;",
      "right" : "private final int myRebuildDelay;",
      "info" : "FieldDeclaration[6589-6622]:FieldDeclaration[6589-6622]"
    }, {
      "left" : "private final Alarm myHideAlarm = new Alarm();",
      "right" : "private final Alarm myHideAlarm = new Alarm();",
      "info" : "FieldDeclaration[6626-6672]:FieldDeclaration[6626-6672]"
    }, {
      "left" : "private boolean myShowListAfterCompletionKeyStroke = false;",
      "right" : "private boolean myShowListAfterCompletionKeyStroke = false;",
      "info" : "FieldDeclaration[6675-6734]:FieldDeclaration[6675-6734]"
    }, {
      "left" : "protected JBPopup myTextPopup;",
      "right" : "protected JBPopup myTextPopup;",
      "info" : "FieldDeclaration[6737-6767]:FieldDeclaration[6737-6767]"
    }, {
      "left" : "protected JBPopup myDropdownPopup;",
      "right" : "protected JBPopup myDropdownPopup;",
      "info" : "FieldDeclaration[6770-6804]:FieldDeclaration[6770-6804]"
    }, {
      "left" : "private boolean myClosedByShiftEnter = false;",
      "right" : "private boolean myClosedByShiftEnter = false;",
      "info" : "FieldDeclaration[6808-6853]:FieldDeclaration[6808-6853]"
    }, {
      "left" : "protected final int myInitialIndex;",
      "right" : "protected final int myInitialIndex;",
      "info" : "FieldDeclaration[6856-6891]:FieldDeclaration[6856-6891]"
    }, {
      "left" : "private String myFindUsagesTitle;",
      "right" : "private String myFindUsagesTitle;",
      "info" : "FieldDeclaration[6894-6927]:FieldDeclaration[6894-6927]"
    }, {
      "left" : "private ShortcutSet myCheckBoxShortcut;",
      "right" : "private ShortcutSet myCheckBoxShortcut;",
      "info" : "FieldDeclaration[6930-6969]:FieldDeclaration[6930-6969]"
    }, {
      "left" : "protected boolean myInitIsDone;",
      "right" : "protected boolean myInitIsDone;",
      "info" : "FieldDeclaration[6972-7003]:FieldDeclaration[6972-7003]"
    }, {
      "left" : "static final boolean ourLoadNamesEachTime = FileBasedIndex.ourEnableTracingOfKeyHashToVirtualFileMapping;",
      "right" : "static final boolean ourLoadNamesEachTime = FileBasedIndex.ourEnableTracingOfKeyHashToVirtualFileMapping;",
      "info" : "FieldDeclaration[7006-7111]:FieldDeclaration[7006-7111]"
    }, {
      "left" : "private boolean myFixLostTyping = true;",
      "right" : "private boolean myFixLostTyping = true;",
      "info" : "FieldDeclaration[7114-7153]:FieldDeclaration[7114-7153]"
    }, {
      "left" : "private boolean myAlwaysHasMore = false;",
      "right" : "private boolean myAlwaysHasMore = false;",
      "info" : "FieldDeclaration[7156-7196]:FieldDeclaration[7156-7196]"
    }, {
      "left" : "public boolean checkDisposed()",
      "right" : "public boolean checkDisposed()",
      "info" : "MethodDeclaration[7200-7406]:MethodDeclaration[7200-7406]"
    }, {
      "left" : "public void setDisposed(boolean disposedFlag)",
      "right" : "public void setDisposed(boolean disposedFlag)",
      "info" : "MethodDeclaration[7410-7591]:MethodDeclaration[7410-7591]"
    }, {
      "left" : "private void setNamesSync(boolean checkboxState, @Nullable String[] value)",
      "right" : "private void setNamesSync(boolean checkboxState, @Nullable String[] value)",
      "info" : "MethodDeclaration[7595-7756]:MethodDeclaration[7595-7756]"
    }, {
      "left" : "protected ChooseByNameBase(Project project, @NotNull ChooseByNameModel model, String initialText, PsiElement context)",
      "right" : "protected ChooseByNameBase(Project project, @NotNull ChooseByNameModel model, String initialText, PsiElement context)",
      "info" : "MethodDeclaration[7760-8059]:MethodDeclaration[7760-8059]"
    }, {
      "left" : "// Used in MPS\n  protected ChooseByNameBase(Project project,\n                             @NotNull ChooseByNameModel model,\n                             @NotNull ChooseByNameItemProvider provider,\n                             String initialText)",
      "right" : "// Used in MPS\n  protected ChooseByNameBase(Project project,\n                             @NotNull ChooseByNameModel model,\n                             @NotNull ChooseByNameItemProvider provider,\n                             String initialText)",
      "info" : "MethodDeclaration[8063-8405]:MethodDeclaration[8063-8405]"
    }, {
      "left" : "protected ChooseByNameBase(Project project,\n                             @NotNull ChooseByNameModel model,\n                             @NotNull ChooseByNameItemProvider provider,\n                             String initialText,\n                             final int initialIndex)",
      "right" : "protected ChooseByNameBase(Project project,\n                             @NotNull ChooseByNameModel model,\n                             @NotNull ChooseByNameItemProvider provider,\n                             String initialText,\n                             final int initialIndex)",
      "info" : "MethodDeclaration[8409-9152]:MethodDeclaration[8409-9152]"
    }, {
      "left" : "public void setShowListAfterCompletionKeyStroke(boolean showListAfterCompletionKeyStroke)",
      "right" : "public void setShowListAfterCompletionKeyStroke(boolean showListAfterCompletionKeyStroke)",
      "info" : "MethodDeclaration[9156-9326]:MethodDeclaration[9156-9326]"
    }, {
      "left" : "public boolean isSearchInAnyPlace()",
      "right" : "public boolean isSearchInAnyPlace()",
      "info" : "MethodDeclaration[9330-9402]:MethodDeclaration[9330-9402]"
    }, {
      "left" : "public void setSearchInAnyPlace(boolean searchInAnyPlace)",
      "right" : "public void setSearchInAnyPlace(boolean searchInAnyPlace)",
      "info" : "MethodDeclaration[9406-9512]:MethodDeclaration[9406-9512]"
    }, {
      "left" : "public boolean isClosedByShiftEnter()",
      "right" : "public boolean isClosedByShiftEnter()",
      "info" : "MethodDeclaration[9516-9592]:MethodDeclaration[9516-9592]"
    }, {
      "left" : "public boolean isOpenInCurrentWindowRequested()",
      "right" : "public boolean isOpenInCurrentWindowRequested()",
      "info" : "MethodDeclaration[9596-9684]:MethodDeclaration[9596-9684]"
    }, {
      "left" : "public void setToolArea(JComponent toolArea)",
      "right" : "public void setToolArea(JComponent toolArea)",
      "info" : "MethodDeclaration[9688-10013]:MethodDeclaration[9688-10013]"
    }, {
      "left" : "public void setFindUsagesTitle(@Nullable String findUsagesTitle)",
      "right" : "public void setFindUsagesTitle(@Nullable String findUsagesTitle)",
      "info" : "MethodDeclaration[10017-10128]:MethodDeclaration[10017-10128]"
    }, {
      "left" : "public void invoke(final ChooseByNamePopupComponent.Callback callback,\n                     final ModalityState modalityState,\n                     boolean allowMultipleSelection)",
      "right" : "public void invoke(final ChooseByNamePopupComponent.Callback callback,\n                     final ModalityState modalityState,\n                     boolean allowMultipleSelection)",
      "info" : "MethodDeclaration[10132-10378]:MethodDeclaration[10132-10378]"
    }, {
      "left" : "public ChooseByNameModel getModel()",
      "right" : "public ChooseByNameModel getModel()",
      "info" : "MethodDeclaration[10382-10454]:MethodDeclaration[10382-10454]"
    }, {
      "left" : "JPanelProvider",
      "right" : "JPanelProvider",
      "info" : "TypeDeclaration[10458-13189]:TypeDeclaration[10458-13189]"
    }, {
      "left" : "private JBPopup myHint = null;",
      "right" : "private JBPopup myHint = null;",
      "info" : "FieldDeclaration[10531-10561]:FieldDeclaration[10531-10561]"
    }, {
      "left" : "private boolean myFocusRequested = false;",
      "right" : "private boolean myFocusRequested = false;",
      "info" : "FieldDeclaration[10566-10607]:FieldDeclaration[10566-10607]"
    }, {
      "left" : "JPanelProvider()",
      "right" : "JPanelProvider()",
      "info" : "MethodDeclaration[10613-10637]:MethodDeclaration[10613-10637]"
    }, {
      "left" : "public Object getData(String dataId)",
      "right" : "public Object getData(String dataId)",
      "info" : "MethodDeclaration[10643-12067]:MethodDeclaration[10643-12067]"
    }, {
      "left" : "public void registerHint(JBPopup h)",
      "right" : "public void registerHint(JBPopup h)",
      "info" : "MethodDeclaration[12073-12232]:MethodDeclaration[12073-12232]"
    }, {
      "left" : "public boolean focusRequested()",
      "right" : "public boolean focusRequested()",
      "info" : "MethodDeclaration[12238-12389]:MethodDeclaration[12238-12389]"
    }, {
      "left" : "public void requestFocus()",
      "right" : "public void requestFocus()",
      "info" : "MethodDeclaration[12395-12474]:MethodDeclaration[12395-12474]"
    }, {
      "left" : "public void unregisterHint()",
      "right" : "public void unregisterHint()",
      "info" : "MethodDeclaration[12480-12537]:MethodDeclaration[12480-12537]"
    }, {
      "left" : "public void hideHint()",
      "right" : "public void hideHint()",
      "info" : "MethodDeclaration[12543-12634]:MethodDeclaration[12543-12634]"
    }, {
      "left" : "public JBPopup getHint()",
      "right" : "public JBPopup getHint()",
      "info" : "MethodDeclaration[12640-12707]:MethodDeclaration[12640-12707]"
    }, {
      "left" : "public void updateHint(PsiElement element)",
      "right" : "public void updateHint(PsiElement element)",
      "info" : "MethodDeclaration[12713-13010]:MethodDeclaration[12713-13010]"
    }, {
      "left" : "public void repositionHint()",
      "right" : "public void repositionHint()",
      "info" : "MethodDeclaration[13016-13185]:MethodDeclaration[13016-13185]"
    }, {
      "left" : "protected void initUI(final ChooseByNamePopupComponent.Callback callback,\n                        final ModalityState modalityState,\n                        final boolean allowMultipleSelection)",
      "right" : "protected void initUI(final ChooseByNamePopupComponent.Callback callback,\n                        final ModalityState modalityState,\n                        final boolean allowMultipleSelection)",
      "info" : "MethodDeclaration[13193-25945]:MethodDeclaration[13193-25945]"
    }, {
      "left" : "public PsiElement[][] getElements()",
      "right" : "public PsiElement[][] getElements()",
      "info" : "MethodDeclaration[15989-17024]:MethodDeclaration[15989-17024]"
    }, {
      "left" : "public void actionPerformed(@NotNull ActionEvent e)",
      "right" : "public void actionPerformed(@NotNull ActionEvent e)",
      "info" : "MethodDeclaration[17708-18145]:MethodDeclaration[17708-18145]"
    }, {
      "left" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "right" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "info" : "MethodDeclaration[18476-18625]:MethodDeclaration[18476-18625]"
    }, {
      "left" : "public void focusLost(@NotNull final FocusEvent e)",
      "right" : "public void focusLost(@NotNull final FocusEvent e)",
      "info" : "MethodDeclaration[18807-20939]:MethodDeclaration[18807-20939]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19009-20912]:MethodDeclaration[19009-20912]"
    }, {
      "left" : "public void onClosed(@NotNull LightweightWindowEvent event)",
      "right" : "public void onClosed(@NotNull LightweightWindowEvent event)",
      "info" : "MethodDeclaration[19269-19474]:MethodDeclaration[19269-19474]"
    }, {
      "left" : "public void itemStateChanged(@NotNull ItemEvent e)",
      "right" : "public void itemStateChanged(@NotNull ItemEvent e)",
      "info" : "MethodDeclaration[21049-21159]:MethodDeclaration[21049-21159]"
    }, {
      "left" : "protected void textChanged(DocumentEvent e)",
      "right" : "protected void textChanged(DocumentEvent e)",
      "info" : "MethodDeclaration[21295-21431]:MethodDeclaration[21295-21431]"
    }, {
      "left" : "public void keyPressed(@NotNull KeyEvent e)",
      "right" : "public void keyPressed(@NotNull KeyEvent e)",
      "info" : "MethodDeclaration[21687-23617]:MethodDeclaration[21687-23617]"
    }, {
      "left" : "public void actionPerformed(@NotNull ActionEvent actionEvent)",
      "right" : "public void actionPerformed(@NotNull ActionEvent actionEvent)",
      "info" : "MethodDeclaration[23690-23800]:MethodDeclaration[23690-23800]"
    }, {
      "left" : "public boolean onClick(@NotNull MouseEvent e, int clickCount)",
      "right" : "public boolean onClick(@NotNull MouseEvent e, int clickCount)",
      "info" : "MethodDeclaration[24042-24943]:MethodDeclaration[24042-24943]"
    }, {
      "left" : "private int myPreviousSelectionIndex = 0;",
      "right" : "private int myPreviousSelectionIndex = 0;",
      "info" : "FieldDeclaration[25134-25175]:FieldDeclaration[25134-25175]"
    }, {
      "left" : "public void valueChanged(@NotNull ListSelectionEvent e)",
      "right" : "public void valueChanged(@NotNull ListSelectionEvent e)",
      "info" : "MethodDeclaration[25183-25588]:MethodDeclaration[25183-25588]"
    }, {
      "left" : "private boolean isDescendingFromTemporarilyFocusableToolWindow(@Nullable Component component)",
      "right" : "private boolean isDescendingFromTemporarilyFocusableToolWindow(@Nullable Component component)",
      "info" : "MethodDeclaration[25949-26632]:MethodDeclaration[25949-26632]"
    }, {
      "left" : "private void addCard(JComponent comp, String cardId)",
      "right" : "private void addCard(JComponent comp, String cardId)",
      "info" : "MethodDeclaration[26636-26831]:MethodDeclaration[26636-26831]"
    }, {
      "left" : "public void setCheckBoxShortcut(ShortcutSet shortcutSet)",
      "right" : "public void setCheckBoxShortcut(ShortcutSet shortcutSet)",
      "info" : "MethodDeclaration[26835-26935]:MethodDeclaration[26835-26935]"
    }, {
      "left" : "private static Set<KeyStroke> getShortcuts(@NotNull String actionId)",
      "right" : "private static Set<KeyStroke> getShortcuts(@NotNull String actionId)",
      "info" : "MethodDeclaration[26939-27514]:MethodDeclaration[26939-27514]"
    }, {
      "left" : "private void hideHint()",
      "right" : "private void hideHint()",
      "info" : "MethodDeclaration[27518-27656]:MethodDeclaration[27518-27656]"
    }, {
      "left" : "public void rebuildList(boolean initial)",
      "right" : "public void rebuildList(boolean initial)",
      "info" : "MethodDeclaration[27660-27985]:MethodDeclaration[27660-27985]"
    }, {
      "left" : "private void updateDocumentation()",
      "right" : "private void updateDocumentation()",
      "info" : "MethodDeclaration[27989-28525]:MethodDeclaration[27989-28525]"
    }, {
      "left" : "public String transformPattern(String pattern)",
      "right" : "public String transformPattern(String pattern)",
      "info" : "MethodDeclaration[28529-28601]:MethodDeclaration[28529-28601]"
    }, {
      "left" : "protected void doClose(final boolean ok)",
      "right" : "protected void doClose(final boolean ok)",
      "info" : "MethodDeclaration[28605-28868]:MethodDeclaration[28605-28868]"
    }, {
      "left" : "protected boolean closeForbidden(boolean ok)",
      "right" : "protected boolean closeForbidden(boolean ok)",
      "info" : "MethodDeclaration[28872-28940]:MethodDeclaration[28872-28940]"
    }, {
      "left" : "protected void cancelListUpdater()",
      "right" : "protected void cancelListUpdater()",
      "info" : "MethodDeclaration[28944-29331]:MethodDeclaration[28944-29331]"
    }, {
      "left" : "private boolean postponeCloseWhenListReady(boolean ok)",
      "right" : "private boolean postponeCloseWhenListReady(boolean ok)",
      "info" : "MethodDeclaration[29335-29723]:MethodDeclaration[29335-29723]"
    }, {
      "left" : "public String getTrimmedText()",
      "right" : "public String getTrimmedText()",
      "info" : "MethodDeclaration[29727-29853]:MethodDeclaration[29727-29853]"
    }, {
      "left" : "public void setFixLostTyping(boolean fixLostTyping)",
      "right" : "public void setFixLostTyping(boolean fixLostTyping)",
      "info" : "MethodDeclaration[29857-29951]:MethodDeclaration[29857-29951]"
    }, {
      "left" : "protected boolean isToFixLostTyping()",
      "right" : "protected boolean isToFixLostTyping()",
      "info" : "MethodDeclaration[29955-30071]:MethodDeclaration[29955-30071]"
    }, {
      "left" : "private synchronized String[] ensureNamesLoaded(boolean checkboxState)",
      "right" : "private synchronized String[] ensureNamesLoaded(boolean checkboxState)",
      "info" : "MethodDeclaration[30075-30940]:MethodDeclaration[30075-30940]"
    }, {
      "left" : "public String[] getNames(boolean checkboxState)",
      "right" : "public String[] getNames(boolean checkboxState)",
      "info" : "MethodDeclaration[30944-31174]:MethodDeclaration[30944-31174]"
    }, {
      "left" : "private String[] getNamesSync(boolean checkboxState)",
      "right" : "private String[] getNamesSync(boolean checkboxState)",
      "info" : "MethodDeclaration[31178-31316]:MethodDeclaration[31178-31316]"
    }, {
      "left" : "protected Set<Object> filter(@NotNull Set<Object> elements)",
      "right" : "protected Set<Object> filter(@NotNull Set<Object> elements)",
      "info" : "MethodDeclaration[31320-31417]:MethodDeclaration[31320-31417]"
    }, {
      "left" : "protected abstract boolean isCheckboxVisible();",
      "right" : "protected abstract boolean isCheckboxVisible();",
      "info" : "MethodDeclaration[31421-31468]:MethodDeclaration[31421-31468]"
    }, {
      "left" : "protected abstract boolean isShowListForEmptyPattern();",
      "right" : "protected abstract boolean isShowListForEmptyPattern();",
      "info" : "MethodDeclaration[31472-31527]:MethodDeclaration[31472-31527]"
    }, {
      "left" : "protected abstract boolean isCloseByFocusLost();",
      "right" : "protected abstract boolean isCloseByFocusLost();",
      "info" : "MethodDeclaration[31531-31579]:MethodDeclaration[31531-31579]"
    }, {
      "left" : "protected void showTextFieldPanel()",
      "right" : "protected void showTextFieldPanel()",
      "info" : "MethodDeclaration[31583-34236]:MethodDeclaration[31583-34236]"
    }, {
      "left" : "public boolean fun(KeyEvent event)",
      "right" : "public boolean fun(KeyEvent event)",
      "info" : "MethodDeclaration[32375-32928]:MethodDeclaration[32375-32928]"
    }, {
      "left" : "public Boolean compute()",
      "right" : "public Boolean compute()",
      "info" : "MethodDeclaration[32988-33117]:MethodDeclaration[32988-33117]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[33838-33914]:MethodDeclaration[33838-33914]"
    }, {
      "left" : "private JLayeredPane getLayeredPane()",
      "right" : "private JLayeredPane getLayeredPane()",
      "info" : "MethodDeclaration[34240-34950]:MethodDeclaration[34240-34950]"
    }, {
      "left" : "protected void rebuildList(final int pos,\n                             final int delay,\n                             @NotNull final ModalityState modalityState,\n                             @Nullable final Runnable postRunnable)",
      "right" : "protected void rebuildList(final int pos,\n                             final int delay,\n                             @NotNull final ModalityState modalityState,\n                             @Nullable final Runnable postRunnable)",
      "info" : "MethodDeclaration[34954-36908]:MethodDeclaration[34954-36908]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[35403-35510]:MethodDeclaration[35403-35510]"
    }, {
      "left" : "public void consume(Set<?> elements)",
      "right" : "public void consume(Set<?> elements)",
      "info" : "MethodDeclaration[36633-36896]:MethodDeclaration[36633-36896]"
    }, {
      "left" : "private void backgroundCalculationFinished(Collection<?> result, int toSelect)",
      "right" : "private void backgroundCalculationFinished(Collection<?> result, int toSelect)",
      "info" : "MethodDeclaration[36912-37194]:MethodDeclaration[36912-37194]"
    }, {
      "left" : "private boolean isShowListAfterCompletionKeyStroke()",
      "right" : "private boolean isShowListAfterCompletionKeyStroke()",
      "info" : "MethodDeclaration[37535-37640]:MethodDeclaration[37528-37633]"
    }, {
      "left" : "private void setElementsToList(int pos, @NotNull Collection<?> elements)",
      "right" : "private void setElementsToList(int pos, @NotNull Collection<?> elements)",
      "info" : "MethodDeclaration[37644-38810]:MethodDeclaration[37637-38803]"
    }, {
      "left" : "private int detectBestStatisticalPosition()",
      "right" : "private int detectBestStatisticalPosition()",
      "info" : "MethodDeclaration[38814-40132]:MethodDeclaration[38807-40125]"
    }, {
      "left" : "protected String statisticsContext()",
      "right" : "protected String statisticsContext()",
      "info" : "MethodDeclaration[40136-40312]:MethodDeclaration[40129-40305]"
    }, {
      "left" : "MyListModel",
      "right" : "MyListModel",
      "info" : "TypeDeclaration[40316-40776]:TypeDeclaration[40309-40769]"
    }, {
      "left" : "public void addToModel(int idx, T element)",
      "right" : "public void addToModel(int idx, T element)",
      "info" : "MethodDeclaration[40413-40588]:MethodDeclaration[40406-40581]"
    }, {
      "left" : "public void removeRangeFromModel(int start, int end)",
      "right" : "public void removeRangeFromModel(int start, int end)",
      "info" : "MethodDeclaration[40594-40772]:MethodDeclaration[40587-40765]"
    }, {
      "left" : "ListUpdater",
      "right" : "ListUpdater",
      "info" : "TypeDeclaration[40780-42732]:TypeDeclaration[40773-42725]"
    }, {
      "left" : "private final Alarm myAlarm = new Alarm(Alarm.ThreadToUse.SWING_THREAD);",
      "right" : "private final Alarm myAlarm = new Alarm(Alarm.ThreadToUse.SWING_THREAD);",
      "info" : "FieldDeclaration[40812-40884]:FieldDeclaration[40805-40877]"
    }, {
      "left" : "private static final int DELAY = 10;",
      "right" : "private static final int DELAY = 10;",
      "info" : "FieldDeclaration[40889-40925]:FieldDeclaration[40882-40918]"
    }, {
      "left" : "private static final int MAX_BLOCKING_TIME = 30;",
      "right" : "private static final int MAX_BLOCKING_TIME = 30;",
      "info" : "FieldDeclaration[40930-40978]:FieldDeclaration[40923-40971]"
    }, {
      "left" : "private final List<ModelDiff.Cmd> myCommands = Collections.synchronizedList(new ArrayList<ModelDiff.Cmd>());",
      "right" : "private final List<ModelDiff.Cmd> myCommands = Collections.synchronizedList(new ArrayList<ModelDiff.Cmd>());",
      "info" : "FieldDeclaration[40983-41091]:FieldDeclaration[40976-41084]"
    }, {
      "left" : "public void cancelAll()",
      "right" : "public void cancelAll()",
      "info" : "MethodDeclaration[41097-41189]:MethodDeclaration[41090-41182]"
    }, {
      "left" : "public void appendToModel(@NotNull List<ModelDiff.Cmd> commands, final int selectionPos)",
      "right" : "public void appendToModel(@NotNull List<ModelDiff.Cmd> commands, final int selectionPos)",
      "info" : "MethodDeclaration[41195-42503]:MethodDeclaration[41188-42496]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[41484-42480]:MethodDeclaration[41477-42473]"
    }, {
      "left" : "private void doPostponedOkIfNeeded()",
      "right" : "private void doPostponedOkIfNeeded()",
      "info" : "MethodDeclaration[42509-42728]:MethodDeclaration[42502-42721]"
    }, {
      "left" : "private void clearPostponedOkAction(boolean success)",
      "right" : "private void clearPostponedOkAction(boolean success)",
      "info" : "MethodDeclaration[42736-43004]:MethodDeclaration[42729-42997]"
    }, {
      "left" : "public boolean hasPostponedAction()",
      "right" : "public boolean hasPostponedAction()",
      "info" : "MethodDeclaration[43008-43089]:MethodDeclaration[43001-43082]"
    }, {
      "left" : "protected abstract void showList();",
      "right" : "protected abstract void showList();",
      "info" : "MethodDeclaration[43093-43128]:MethodDeclaration[43086-43121]"
    }, {
      "left" : "protected abstract void hideList();",
      "right" : "protected abstract void hideList();",
      "info" : "MethodDeclaration[43132-43167]:MethodDeclaration[43125-43160]"
    }, {
      "left" : "protected abstract void close(boolean isOk);",
      "right" : "protected abstract void close(boolean isOk);",
      "info" : "MethodDeclaration[43171-43215]:MethodDeclaration[43164-43208]"
    }, {
      "left" : "public Object getChosenElement()",
      "right" : "public Object getChosenElement()",
      "info" : "MethodDeclaration[43219-43402]:MethodDeclaration[43212-43395]"
    }, {
      "left" : "protected List<Object> getChosenElements()",
      "right" : "protected List<Object> getChosenElements()",
      "info" : "MethodDeclaration[43406-43672]:MethodDeclaration[43399-43665]"
    }, {
      "left" : "public boolean value(Object o)",
      "right" : "public boolean value(Object o)",
      "info" : "MethodDeclaration[43543-43660]:MethodDeclaration[43536-43653]"
    }, {
      "left" : "protected void chosenElementMightChange()",
      "right" : "protected void chosenElementMightChange()",
      "info" : "MethodDeclaration[43676-43723]:MethodDeclaration[43669-43716]"
    }, {
      "left" : "MyTextField",
      "right" : "MyTextField",
      "info" : "TypeDeclaration[43727-50435]:TypeDeclaration[43720-50428]"
    }, {
      "left" : "private final KeyStroke myCompletionKeyStroke;",
      "right" : "private final KeyStroke myCompletionKeyStroke;",
      "info" : "FieldDeclaration[43830-43876]:FieldDeclaration[43823-43869]"
    }, {
      "left" : "private final KeyStroke forwardStroke;",
      "right" : "private final KeyStroke forwardStroke;",
      "info" : "FieldDeclaration[43881-43919]:FieldDeclaration[43874-43912]"
    }, {
      "left" : "private final KeyStroke backStroke;",
      "right" : "private final KeyStroke backStroke;",
      "info" : "FieldDeclaration[43924-43959]:FieldDeclaration[43917-43952]"
    }, {
      "left" : "private boolean completionKeyStrokeHappened = false;",
      "right" : "private boolean completionKeyStrokeHappened = false;",
      "info" : "FieldDeclaration[43965-44017]:FieldDeclaration[43958-44010]"
    }, {
      "left" : "private MyTextField()",
      "right" : "private MyTextField()",
      "info" : "MethodDeclaration[44023-44949]:MethodDeclaration[44016-44942]"
    }, {
      "left" : "public void insertString(int offs, String str, AttributeSet a) throws BadLocationException",
      "right" : "public void insertString(int offs, String str, AttributeSet a) throws BadLocationException",
      "info" : "MethodDeclaration[44678-44933]:MethodDeclaration[44671-44926]"
    }, {
      "left" : "private KeyStroke getShortcut(String actionCodeCompletion)",
      "right" : "private KeyStroke getShortcut(String actionCodeCompletion)",
      "info" : "MethodDeclaration[44955-45358]:MethodDeclaration[44948-45351]"
    }, {
      "left" : "public void calcData(final DataKey key, @NotNull final DataSink sink)",
      "right" : "public void calcData(final DataKey key, @NotNull final DataSink sink)",
      "info" : "MethodDeclaration[45364-45821]:MethodDeclaration[45357-45814]"
    }, {
      "left" : "protected void processKeyEvent(@NotNull KeyEvent e)",
      "right" : "protected void processKeyEvent(@NotNull KeyEvent e)",
      "info" : "MethodDeclaration[45827-48035]:MethodDeclaration[45820-48028]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[46337-46429]:MethodDeclaration[46330-46422]"
    }, {
      "left" : "private void fillInCommonPrefix(@NotNull final String pattern)",
      "right" : "private void fillInCommonPrefix(@NotNull final String pattern)",
      "info" : "MethodDeclaration[48041-49787]:MethodDeclaration[48034-49780]"
    }, {
      "left" : "private boolean isComplexPattern(@NotNull final String pattern)",
      "right" : "private boolean isComplexPattern(@NotNull final String pattern)",
      "info" : "MethodDeclaration[49793-50038]:MethodDeclaration[49786-50031]"
    }, {
      "left" : "public Point getBestPopupPosition()",
      "right" : "public Point getBestPopupPosition()",
      "info" : "MethodDeclaration[50044-50181]:MethodDeclaration[50037-50174]"
    }, {
      "left" : "protected void paintComponent(@NotNull final Graphics g)",
      "right" : "protected void paintComponent(@NotNull final Graphics g)",
      "info" : "MethodDeclaration[50187-50337]:MethodDeclaration[50180-50330]"
    }, {
      "left" : "public boolean isCompletionKeyStroke()",
      "right" : "public boolean isCompletionKeyStroke()",
      "info" : "MethodDeclaration[50343-50431]:MethodDeclaration[50336-50424]"
    }, {
      "left" : "public ChooseByNameItemProvider getProvider()",
      "right" : "public ChooseByNameItemProvider getProvider()",
      "info" : "MethodDeclaration[50439-50513]:MethodDeclaration[50432-50506]"
    }, {
      "left" : "protected void handlePaste(String str)",
      "right" : "protected void handlePaste(String str)",
      "info" : "MethodDeclaration[50517-51445]:MethodDeclaration[50510-51438]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[50751-51425]:MethodDeclaration[50744-51418]"
    }, {
      "left" : "private static boolean isFileName(String name)",
      "right" : "private static boolean isFileName(String name)",
      "info" : "MethodDeclaration[51449-51858]:MethodDeclaration[51442-51851]"
    }, {
      "left" : "public static final String EXTRA_ELEM = \"...\";",
      "right" : "public static final String EXTRA_ELEM = \"...\";",
      "info" : "FieldDeclaration[51862-51908]:FieldDeclaration[51855-51901]"
    }, {
      "left" : "public static final String NON_PREFIX_SEPARATOR = \"non-prefix matches:\";",
      "right" : "public static final String NON_PREFIX_SEPARATOR = \"non-prefix matches:\";",
      "info" : "FieldDeclaration[51911-51983]:FieldDeclaration[51904-51976]"
    }, {
      "left" : "public static Component renderNonPrefixSeparatorComponent(Color backgroundColor)",
      "right" : "public static Component renderNonPrefixSeparatorComponent(Color backgroundColor)",
      "info" : "MethodDeclaration[51987-52420]:MethodDeclaration[51980-52413]"
    }, {
      "left" : "private final String myPattern;",
      "right" : "private final String myPattern;",
      "info" : "FieldDeclaration[52483-52514]:FieldDeclaration[52476-52507]"
    }, {
      "left" : "private final Consumer<Set<?>> myCallback;",
      "right" : "private final Consumer<Set<?>> myCallback;",
      "info" : "FieldDeclaration[52611-52653]:FieldDeclaration[52555-52597]"
    }, {
      "left" : "private final ModalityState myModalityState;",
      "right" : "private final ModalityState myModalityState;",
      "info" : "FieldDeclaration[52658-52702]:FieldDeclaration[52602-52646]"
    }, {
      "left" : "private final ProgressIndicator myProgress = new ProgressIndicatorBase();",
      "right" : "private final ProgressIndicator myProgress = new ProgressIndicatorBase();",
      "info" : "FieldDeclaration[52708-52781]:FieldDeclaration[52652-52725]"
    }, {
      "left" : "private final Alarm myShowCardAlarm = new Alarm();",
      "right" : "private final Alarm myShowCardAlarm = new Alarm();",
      "info" : "FieldDeclaration[53211-53261]:FieldDeclaration[53070-53120]"
    }, {
      "left" : "void scheduleThread()",
      "right" : "void scheduleThread()",
      "info" : "MethodDeclaration[53267-53516]:MethodDeclaration[53126-53375]"
    }, {
      "left" : "private void addElementsByPattern(@NotNull String pattern,\n                                      @NotNull final Set<Object> elements,\n                                      @NotNull final ProgressIndicator indicator,\n                                      boolean everywhere)",
      "right" : "private void addElementsByPattern(@NotNull String pattern,\n                                      @NotNull final Set<Object> elements,\n                                      @NotNull final ProgressIndicator indicator,\n                                      boolean everywhere)",
      "info" : "MethodDeclaration[55308-56424]:MethodDeclaration[55391-56507]"
    }, {
      "left" : "public boolean process(Object o)",
      "right" : "public boolean process(Object o)",
      "info" : "MethodDeclaration[55779-56076]:MethodDeclaration[55862-56159]"
    }, {
      "left" : "private void showCard(final String card, final int delay)",
      "right" : "private void showCard(final String card, final int delay)",
      "info" : "MethodDeclaration[56430-56852]:MethodDeclaration[56513-56935]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[56663-56812]:MethodDeclaration[56746-56895]"
    }, {
      "left" : "protected boolean isOverflow(@NotNull Set<Object> elementsArray)",
      "right" : "protected boolean isOverflow(@NotNull Set<Object> elementsArray)",
      "info" : "MethodDeclaration[56858-56991]:MethodDeclaration[56941-57074]"
    }, {
      "left" : "private void cancel()",
      "right" : "private void cancel()",
      "info" : "MethodDeclaration[56997-57121]:MethodDeclaration[57080-57204]"
    }, {
      "left" : "public boolean canShowListForEmptyPattern()",
      "right" : "public boolean canShowListForEmptyPattern()",
      "info" : "MethodDeclaration[57131-57291]:MethodDeclaration[57214-57374]"
    }, {
      "left" : "protected boolean lastKeyStrokeIsCompletion()",
      "right" : "protected boolean lastKeyStrokeIsCompletion()",
      "info" : "MethodDeclaration[57295-57394]:MethodDeclaration[57378-57477]"
    }, {
      "left" : "private static Matcher buildPatternMatcher(@NotNull String pattern)",
      "right" : "private static Matcher buildPatternMatcher(@NotNull String pattern)",
      "info" : "MethodDeclaration[57398-57568]:MethodDeclaration[57481-57651]"
    }, {
      "left" : "HintLabel",
      "right" : "HintLabel",
      "info" : "TypeDeclaration[57572-57729]:TypeDeclaration[57655-57812]"
    }, {
      "left" : "private HintLabel(String text)",
      "right" : "private HintLabel(String text)",
      "info" : "MethodDeclaration[57624-57725]:MethodDeclaration[57707-57808]"
    }, {
      "left" : "public int getMaximumListSizeLimit()",
      "right" : "public int getMaximumListSizeLimit()",
      "info" : "MethodDeclaration[57733-57810]:MethodDeclaration[57816-57893]"
    }, {
      "left" : "public void setMaximumListSizeLimit(final int maximumListSizeLimit)",
      "right" : "public void setMaximumListSizeLimit(final int maximumListSizeLimit)",
      "info" : "MethodDeclaration[57814-57938]:MethodDeclaration[57897-58021]"
    }, {
      "left" : "public void setListSizeIncreasing(final int listSizeIncreasing)",
      "right" : "public void setListSizeIncreasing(final int listSizeIncreasing)",
      "info" : "MethodDeclaration[57942-58058]:MethodDeclaration[58025-58141]"
    }, {
      "left" : "public boolean isAlwaysHasMore()",
      "right" : "public boolean isAlwaysHasMore()",
      "info" : "MethodDeclaration[58062-58128]:MethodDeclaration[58145-58211]"
    }, {
      "left" : "public void setAlwaysHasMore(boolean enabled)",
      "right" : "public void setAlwaysHasMore(boolean enabled)",
      "info" : "MethodDeclaration[58132-58484]:MethodDeclaration[58215-58567]"
    }, {
      "left" : "private static final String ACTION_NAME = \"Show All in View\";",
      "right" : "private static final String ACTION_NAME = \"Show All in View\";",
      "info" : "FieldDeclaration[58488-58549]:FieldDeclaration[58571-58632]"
    }, {
      "left" : "public ShowFindUsagesAction()",
      "right" : "public ShowFindUsagesAction()",
      "info" : "MethodDeclaration[58620-58726]:MethodDeclaration[58703-58809]"
    }, {
      "left" : "private ChooseByNameBase.CalcElementsThread myCalcUsagesThread;",
      "right" : "private ChooseByNameBase.CalcElementsThread myCalcUsagesThread;",
      "info" : "FieldDeclaration[60256-60319]:FieldDeclaration[60339-60402]"
    }, {
      "left" : "public void onSuccess()",
      "right" : "public void onSuccess()",
      "info" : "MethodDeclaration[62285-62400]:MethodDeclaration[62361-62476]"
    }, {
      "left" : "public void onCancel()",
      "right" : "public void onCancel()",
      "info" : "MethodDeclaration[62412-62509]:MethodDeclaration[62488-62585]"
    }, {
      "left" : "private void fillUsages(Collection<Object> matchElementsArray,\n                            List<Usage> usages,\n                            List<PsiElement> targets,\n                            final boolean separateGroup)",
      "right" : "private void fillUsages(Collection<Object> matchElementsArray,\n                            List<Usage> usages,\n                            List<PsiElement> targets,\n                            final boolean separateGroup)",
      "info" : "MethodDeclaration[62636-63379]:MethodDeclaration[62712-63455]"
    }, {
      "left" : "public boolean isDynamicUsage()",
      "right" : "public boolean isDynamicUsage()",
      "info" : "MethodDeclaration[63126-63263]:MethodDeclaration[63202-63339]"
    }, {
      "left" : "private void showUsageView(@NotNull List<PsiElement> targets,\n                               @NotNull List<Usage> usages,\n                               @NotNull UsageViewPresentation presentation)",
      "right" : "private void showUsageView(@NotNull List<PsiElement> targets,\n                               @NotNull List<Usage> usages,\n                               @NotNull UsageViewPresentation presentation)",
      "info" : "MethodDeclaration[63385-63913]:MethodDeclaration[63461-63989]"
    }, {
      "left" : "public void update(@NotNull AnActionEvent e)",
      "right" : "public void update(@NotNull AnActionEvent e)",
      "info" : "MethodDeclaration[63919-64268]:MethodDeclaration[63995-64344]"
    }, {
      "left" : "public abstract Object[][] getElements();",
      "right" : "public abstract Object[][] getElements();",
      "info" : "MethodDeclaration[64274-64315]:MethodDeclaration[64350-64391]"
    }, {
      "left" : "public JTextField getTextField()",
      "right" : "public JTextField getTextField()",
      "info" : "MethodDeclaration[64323-64385]:MethodDeclaration[64399-64461]"
    }, {
      "left" : "public static Font getEditorFont()",
      "right" : "public static Font getEditorFont()",
      "info" : "MethodDeclaration[64389-64743]:MethodDeclaration[64465-64819]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7231-7406]:Block[7231-7406]"
    }, {
      "left" : "if (myDisposedFlag && myPostponedOkAction != null && !myPostponedOkAction.isProcessed())",
      "right" : "if (myDisposedFlag && myPostponedOkAction != null && !myPostponedOkAction.isProcessed())",
      "info" : "IfStatement[7237-7374]:IfStatement[7237-7374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7326-7374]:Block[7326-7374]"
    }, {
      "left" : "myPostponedOkAction.setRejected();",
      "right" : "myPostponedOkAction.setRejected();",
      "info" : "ExpressionStatement[7334-7368]:ExpressionStatement[7334-7368]"
    }, {
      "left" : "return myDisposedFlag;",
      "right" : "return myDisposedFlag;",
      "info" : "ReturnStatement[7380-7402]:ReturnStatement[7380-7402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7456-7591]:Block[7456-7591]"
    }, {
      "left" : "myDisposedFlag = disposedFlag;",
      "right" : "myDisposedFlag = disposedFlag;",
      "info" : "ExpressionStatement[7462-7492]:ExpressionStatement[7462-7492]"
    }, {
      "left" : "if (disposedFlag)",
      "right" : "if (disposedFlag)",
      "info" : "IfStatement[7497-7587]:IfStatement[7497-7587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7515-7587]:Block[7515-7587]"
    }, {
      "left" : "setNamesSync(true, null);",
      "right" : "setNamesSync(true, null);",
      "info" : "ExpressionStatement[7523-7548]:ExpressionStatement[7523-7548]"
    }, {
      "left" : "setNamesSync(false, null);",
      "right" : "setNamesSync(false, null);",
      "info" : "ExpressionStatement[7555-7581]:ExpressionStatement[7555-7581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7670-7756]:Block[7670-7756]"
    }, {
      "left" : "synchronized (myNames) {\n      myNames[checkboxState ? 1 : 0] = value;\n    }",
      "right" : "synchronized (myNames) {\n      myNames[checkboxState ? 1 : 0] = value;\n    }",
      "info" : "SynchronizedStatement[7676-7752]:SynchronizedStatement[7676-7752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7699-7752]:Block[7699-7752]"
    }, {
      "left" : "myNames[checkboxState ? 1 : 0] = value;",
      "right" : "myNames[checkboxState ? 1 : 0] = value;",
      "info" : "ExpressionStatement[7707-7746]:ExpressionStatement[7707-7746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7966-8059]:Block[7966-8059]"
    }, {
      "left" : "this(project, model, new DefaultChooseByNameItemProvider(context), initialText, 0);",
      "right" : "this(project, model, new DefaultChooseByNameItemProvider(context), initialText, 0);",
      "info" : "ConstructorInvocation[7972-8055]:ConstructorInvocation[7972-8055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8348-8405]:Block[8348-8405]"
    }, {
      "left" : "this(project, model, provider, initialText, 0);",
      "right" : "this(project, model, provider, initialText, 0);",
      "info" : "ConstructorInvocation[8354-8401]:ConstructorInvocation[8354-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8779-9152]:Block[8779-9152]"
    }, {
      "left" : "myProject = project;",
      "right" : "myProject = project;",
      "info" : "ExpressionStatement[8785-8805]:ExpressionStatement[8785-8805]"
    }, {
      "left" : "myModel = model;",
      "right" : "myModel = model;",
      "info" : "ExpressionStatement[8810-8826]:ExpressionStatement[8810-8826]"
    }, {
      "left" : "myInitialText = initialText;",
      "right" : "myInitialText = initialText;",
      "info" : "ExpressionStatement[8831-8859]:ExpressionStatement[8831-8859]"
    }, {
      "left" : "myProvider = provider;",
      "right" : "myProvider = provider;",
      "info" : "ExpressionStatement[8864-8886]:ExpressionStatement[8864-8886]"
    }, {
      "left" : "myInitialIndex = initialIndex;",
      "right" : "myInitialIndex = initialIndex;",
      "info" : "ExpressionStatement[8891-8921]:ExpressionStatement[8891-8921]"
    }, {
      "left" : "mySearchInAnyPlace = Registry.is(\"ide.goto.middle.matching\") && model.useMiddleMatching();",
      "right" : "mySearchInAnyPlace = Registry.is(\"ide.goto.middle.matching\") && model.useMiddleMatching();",
      "info" : "ExpressionStatement[8926-9016]:ExpressionStatement[8926-9016]"
    }, {
      "left" : "myRebuildDelay = Registry.intValue(\"ide.goto.rebuild.delay\");",
      "right" : "myRebuildDelay = Registry.intValue(\"ide.goto.rebuild.delay\");",
      "info" : "ExpressionStatement[9021-9082]:ExpressionStatement[9021-9082]"
    }, {
      "left" : "myTextField.setText(myInitialText);",
      "right" : "myTextField.setText(myInitialText);",
      "info" : "ExpressionStatement[9088-9123]:ExpressionStatement[9088-9123]"
    }, {
      "left" : "myInitIsDone = true;",
      "right" : "myInitIsDone = true;",
      "info" : "ExpressionStatement[9128-9148]:ExpressionStatement[9128-9148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9246-9326]:Block[9246-9326]"
    }, {
      "left" : "myShowListAfterCompletionKeyStroke = showListAfterCompletionKeyStroke;",
      "right" : "myShowListAfterCompletionKeyStroke = showListAfterCompletionKeyStroke;",
      "info" : "ExpressionStatement[9252-9322]:ExpressionStatement[9252-9322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9366-9402]:Block[9366-9402]"
    }, {
      "left" : "return mySearchInAnyPlace;",
      "right" : "return mySearchInAnyPlace;",
      "info" : "ReturnStatement[9372-9398]:ReturnStatement[9372-9398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9464-9512]:Block[9464-9512]"
    }, {
      "left" : "mySearchInAnyPlace = searchInAnyPlace;",
      "right" : "mySearchInAnyPlace = searchInAnyPlace;",
      "info" : "ExpressionStatement[9470-9508]:ExpressionStatement[9470-9508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9554-9592]:Block[9554-9592]"
    }, {
      "left" : "return myClosedByShiftEnter;",
      "right" : "return myClosedByShiftEnter;",
      "info" : "ReturnStatement[9560-9588]:ReturnStatement[9560-9588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9644-9684]:Block[9644-9684]"
    }, {
      "left" : "return isClosedByShiftEnter();",
      "right" : "return isClosedByShiftEnter();",
      "info" : "ReturnStatement[9650-9680]:ReturnStatement[9650-9680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9858-10013]:Block[9858-10013]"
    }, {
      "left" : "if (myToolArea != null)",
      "right" : "if (myToolArea != null)",
      "info" : "IfStatement[9864-9982]:IfStatement[9864-9982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9888-9982]:Block[9888-9982]"
    }, {
      "left" : "throw new IllegalStateException(\"Tool area is modifiable only before invoke()\");",
      "right" : "throw new IllegalStateException(\"Tool area is modifiable only before invoke()\");",
      "info" : "ThrowStatement[9896-9976]:ThrowStatement[9896-9976]"
    }, {
      "left" : "myToolArea = toolArea;",
      "right" : "myToolArea = toolArea;",
      "info" : "ExpressionStatement[9987-10009]:ExpressionStatement[9987-10009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10082-10128]:Block[10082-10128]"
    }, {
      "left" : "myFindUsagesTitle = findUsagesTitle;",
      "right" : "myFindUsagesTitle = findUsagesTitle;",
      "info" : "ExpressionStatement[10088-10124]:ExpressionStatement[10088-10124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10312-10378]:Block[10312-10378]"
    }, {
      "left" : "initUI(callback, modalityState, allowMultipleSelection);",
      "right" : "initUI(callback, modalityState, allowMultipleSelection);",
      "info" : "ExpressionStatement[10318-10374]:ExpressionStatement[10318-10374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10429-10454]:Block[10429-10454]"
    }, {
      "left" : "return myModel;",
      "right" : "return myModel;",
      "info" : "ReturnStatement[10435-10450]:ReturnStatement[10435-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10630-10637]:Block[10630-10637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10694-12067]:Block[10694-12067]"
    }, {
      "left" : "if (PlatformDataKeys.SEARCH_INPUT_TEXT.is(dataId))",
      "right" : "if (PlatformDataKeys.SEARCH_INPUT_TEXT.is(dataId))",
      "info" : "IfStatement[10702-10829]:IfStatement[10702-10829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10753-10829]:Block[10753-10829]"
    }, {
      "left" : "return myTextField == null ? null : myTextField.getText();",
      "right" : "return myTextField == null ? null : myTextField.getText();",
      "info" : "ReturnStatement[10763-10821]:ReturnStatement[10763-10821]"
    }, {
      "left" : "if (PlatformDataKeys.HELP_ID.is(dataId))",
      "right" : "if (PlatformDataKeys.HELP_ID.is(dataId))",
      "info" : "IfStatement[10837-10923]:IfStatement[10837-10923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10878-10923]:Block[10878-10923]"
    }, {
      "left" : "return myModel.getHelpId();",
      "right" : "return myModel.getHelpId();",
      "info" : "ReturnStatement[10888-10915]:ReturnStatement[10888-10915]"
    }, {
      "left" : "if (myCalcElementsThread != null)",
      "right" : "if (myCalcElementsThread != null)",
      "info" : "IfStatement[10931-10995]:IfStatement[10931-10995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10965-10995]:Block[10965-10995]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10975-10987]:ReturnStatement[10975-10987]"
    }, {
      "left" : "if (CommonDataKeys.PSI_ELEMENT.is(dataId))",
      "right" : "if (CommonDataKeys.PSI_ELEMENT.is(dataId))",
      "info" : "IfStatement[11002-12042]:IfStatement[11002-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11045-11297]:Block[11045-11297]"
    }, {
      "left" : "Object element = getChosenElement();",
      "right" : "Object element = getChosenElement();",
      "info" : "VariableDeclarationStatement[11055-11091]:VariableDeclarationStatement[11055-11091]"
    }, {
      "left" : "if (element instanceof PsiElement)",
      "right" : "if (element instanceof PsiElement)",
      "info" : "IfStatement[11101-11173]:IfStatement[11101-11173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11136-11173]:Block[11136-11173]"
    }, {
      "left" : "return element;",
      "right" : "return element;",
      "info" : "ReturnStatement[11148-11163]:ReturnStatement[11148-11163]"
    }, {
      "left" : "if (element instanceof DataProvider)",
      "right" : "if (element instanceof DataProvider)",
      "info" : "IfStatement[11183-11289]:IfStatement[11183-11289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11220-11289]:Block[11220-11289]"
    }, {
      "left" : "return ((DataProvider)element).getData(dataId);",
      "right" : "return ((DataProvider)element).getData(dataId);",
      "info" : "ReturnStatement[11232-11279]:ReturnStatement[11232-11279]"
    }, {
      "left" : "if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId))",
      "right" : "if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId))",
      "info" : "IfStatement[11309-12042]:IfStatement[11309-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11356-11792]:Block[11356-11792]"
    }, {
      "left" : "final List<Object> chosenElements = getChosenElements();",
      "right" : "final List<Object> chosenElements = getChosenElements();",
      "info" : "VariableDeclarationStatement[11366-11422]:VariableDeclarationStatement[11366-11422]"
    }, {
      "left" : "if (chosenElements != null)",
      "right" : "if (chosenElements != null)",
      "info" : "IfStatement[11431-11784]:IfStatement[11431-11784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11459-11784]:Block[11459-11784]"
    }, {
      "left" : "List<PsiElement> result = new ArrayList<PsiElement>(chosenElements.size());",
      "right" : "List<PsiElement> result = new ArrayList<PsiElement>(chosenElements.size());",
      "info" : "VariableDeclarationStatement[11471-11546]:VariableDeclarationStatement[11471-11546]"
    }, {
      "left" : "for (Object element : chosenElements)",
      "right" : "for (Object element : chosenElements)",
      "info" : "EnhancedForStatement[11557-11718]:EnhancedForStatement[11557-11718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11595-11718]:Block[11595-11718]"
    }, {
      "left" : "if (element instanceof PsiElement)",
      "right" : "if (element instanceof PsiElement)",
      "info" : "IfStatement[11609-11706]:IfStatement[11609-11706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11644-11706]:Block[11644-11706]"
    }, {
      "left" : "result.add((PsiElement)element);",
      "right" : "result.add((PsiElement)element);",
      "info" : "ExpressionStatement[11660-11692]:ExpressionStatement[11660-11692]"
    }, {
      "left" : "return PsiUtilCore.toPsiElementArray(result);",
      "right" : "return PsiUtilCore.toPsiElementArray(result);",
      "info" : "ReturnStatement[11729-11774]:ReturnStatement[11729-11774]"
    }, {
      "left" : "if (PlatformDataKeys.DOMINANT_HINT_AREA_RECTANGLE.is(dataId))",
      "right" : "if (PlatformDataKeys.DOMINANT_HINT_AREA_RECTANGLE.is(dataId))",
      "info" : "IfStatement[11804-12042]:IfStatement[11804-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11866-11903]:Block[11866-11903]"
    }, {
      "left" : "return getBounds();",
      "right" : "return getBounds();",
      "info" : "ReturnStatement[11876-11895]:ReturnStatement[11876-11895]"
    }, {
      "left" : "if (PlatformDataKeys.SEARCH_INPUT_TEXT.is(dataId))",
      "right" : "if (PlatformDataKeys.SEARCH_INPUT_TEXT.is(dataId))",
      "info" : "IfStatement[11915-12042]:IfStatement[11915-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11966-12042]:Block[11966-12042]"
    }, {
      "left" : "return myTextField == null ? null : myTextField.getText();",
      "right" : "return myTextField == null ? null : myTextField.getText();",
      "info" : "ReturnStatement[11976-12034]:ReturnStatement[11976-12034]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12049-12061]:ReturnStatement[12049-12061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12109-12232]:Block[12109-12232]"
    }, {
      "left" : "if (myHint != null && myHint.isVisible() && myHint != h)",
      "right" : "if (myHint != null && myHint.isVisible() && myHint != h)",
      "info" : "IfStatement[12117-12208]:IfStatement[12117-12208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12174-12208]:Block[12174-12208]"
    }, {
      "left" : "myHint.cancel();",
      "right" : "myHint.cancel();",
      "info" : "ExpressionStatement[12184-12200]:ExpressionStatement[12184-12200]"
    }, {
      "left" : "myHint = h;",
      "right" : "myHint = h;",
      "info" : "ExpressionStatement[12215-12226]:ExpressionStatement[12215-12226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12270-12389]:Block[12270-12389]"
    }, {
      "left" : "boolean focusRequested = myFocusRequested;",
      "right" : "boolean focusRequested = myFocusRequested;",
      "info" : "VariableDeclarationStatement[12278-12320]:VariableDeclarationStatement[12278-12320]"
    }, {
      "left" : "myFocusRequested = false;",
      "right" : "myFocusRequested = false;",
      "info" : "ExpressionStatement[12328-12353]:ExpressionStatement[12328-12353]"
    }, {
      "left" : "return focusRequested;",
      "right" : "return focusRequested;",
      "info" : "ReturnStatement[12361-12383]:ReturnStatement[12361-12383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12436-12474]:Block[12436-12474]"
    }, {
      "left" : "myFocusRequested = true;",
      "right" : "myFocusRequested = true;",
      "info" : "ExpressionStatement[12444-12468]:ExpressionStatement[12444-12468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12509-12537]:Block[12509-12537]"
    }, {
      "left" : "myHint = null;",
      "right" : "myHint = null;",
      "info" : "ExpressionStatement[12517-12531]:ExpressionStatement[12517-12531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12566-12634]:Block[12566-12634]"
    }, {
      "left" : "if (myHint != null)",
      "right" : "if (myHint != null)",
      "info" : "IfStatement[12574-12628]:IfStatement[12574-12628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12594-12628]:Block[12594-12628]"
    }, {
      "left" : "myHint.cancel();",
      "right" : "myHint.cancel();",
      "info" : "ExpressionStatement[12604-12620]:ExpressionStatement[12604-12620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12679-12707]:Block[12679-12707]"
    }, {
      "left" : "return myHint;",
      "right" : "return myHint;",
      "info" : "ReturnStatement[12687-12701]:ReturnStatement[12687-12701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12756-13010]:Block[12756-13010]"
    }, {
      "left" : "if (myHint == null || !myHint.isVisible())",
      "right" : "if (myHint == null || !myHint.isVisible())",
      "info" : "IfStatement[12764-12814]:IfStatement[12764-12814]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12807-12814]:ReturnStatement[12807-12814]"
    }, {
      "left" : "final PopupUpdateProcessor updateProcessor = myHint.getUserData(PopupUpdateProcessor.class);",
      "right" : "final PopupUpdateProcessor updateProcessor = myHint.getUserData(PopupUpdateProcessor.class);",
      "info" : "VariableDeclarationStatement[12821-12913]:VariableDeclarationStatement[12821-12913]"
    }, {
      "left" : "if (updateProcessor != null)",
      "right" : "if (updateProcessor != null)",
      "info" : "IfStatement[12920-13004]:IfStatement[12920-13004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12949-13004]:Block[12949-13004]"
    }, {
      "left" : "updateProcessor.updatePopup(element);",
      "right" : "updateProcessor.updatePopup(element);",
      "info" : "ExpressionStatement[12959-12996]:ExpressionStatement[12959-12996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13045-13185]:Block[13045-13185]"
    }, {
      "left" : "if (myHint == null || !myHint.isVisible())",
      "right" : "if (myHint == null || !myHint.isVisible())",
      "info" : "IfStatement[13053-13103]:IfStatement[13053-13103]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13096-13103]:ReturnStatement[13096-13103]"
    }, {
      "left" : "PopupPositionManager.positionPopupInBestPosition(myHint, null, null);",
      "right" : "PopupPositionManager.positionPopupInBestPosition(myHint, null, null);",
      "info" : "ExpressionStatement[13110-13179]:ExpressionStatement[13110-13179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13494-25945]:Block[13494-25945]"
    }, {
      "left" : "myPreviouslyFocusedComponent = WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);",
      "right" : "myPreviouslyFocusedComponent = WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);",
      "info" : "ExpressionStatement[13500-13594]:ExpressionStatement[13500-13594]"
    }, {
      "left" : "myActionListener = callback;",
      "right" : "myActionListener = callback;",
      "info" : "ExpressionStatement[13600-13628]:ExpressionStatement[13600-13628]"
    }, {
      "left" : "myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel, BoxLayout.Y_AXIS));",
      "right" : "myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel, BoxLayout.Y_AXIS));",
      "info" : "ExpressionStatement[13633-13711]:ExpressionStatement[13633-13711]"
    }, {
      "left" : "final JPanel hBox = new JPanel();",
      "right" : "final JPanel hBox = new JPanel();",
      "info" : "VariableDeclarationStatement[13717-13750]:VariableDeclarationStatement[13717-13750]"
    }, {
      "left" : "hBox.setLayout(new BoxLayout(hBox, BoxLayout.X_AXIS));",
      "right" : "hBox.setLayout(new BoxLayout(hBox, BoxLayout.X_AXIS));",
      "info" : "ExpressionStatement[13755-13809]:ExpressionStatement[13755-13809]"
    }, {
      "left" : "JPanel caption2Tools = new JPanel(new BorderLayout());",
      "right" : "JPanel caption2Tools = new JPanel(new BorderLayout());",
      "info" : "VariableDeclarationStatement[13815-13869]:VariableDeclarationStatement[13815-13869]"
    }, {
      "left" : "if (myModel.getPromptText() != null)",
      "right" : "if (myModel.getPromptText() != null)",
      "info" : "IfStatement[13875-14240]:IfStatement[13875-14240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13912-14240]:Block[13912-14240]"
    }, {
      "left" : "JLabel label = new JLabel(myModel.getPromptText());",
      "right" : "JLabel label = new JLabel(myModel.getPromptText());",
      "info" : "VariableDeclarationStatement[13920-13971]:VariableDeclarationStatement[13920-13971]"
    }, {
      "left" : "if (UIUtil.isUnderAquaLookAndFeel())",
      "right" : "if (UIUtil.isUnderAquaLookAndFeel())",
      "info" : "IfStatement[13978-14117]:IfStatement[13978-14117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14015-14117]:Block[14015-14117]"
    }, {
      "left" : "label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()));",
      "right" : "label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()));",
      "info" : "ExpressionStatement[14025-14109]:ExpressionStatement[14025-14109]"
    }, {
      "left" : "label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));",
      "right" : "label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));",
      "info" : "ExpressionStatement[14124-14183]:ExpressionStatement[14124-14183]"
    }, {
      "left" : "caption2Tools.add(label, BorderLayout.WEST);",
      "right" : "caption2Tools.add(label, BorderLayout.WEST);",
      "info" : "ExpressionStatement[14190-14234]:ExpressionStatement[14190-14234]"
    }, {
      "left" : "caption2Tools.add(hBox, BorderLayout.EAST);",
      "right" : "caption2Tools.add(hBox, BorderLayout.EAST);",
      "info" : "ExpressionStatement[14246-14289]:ExpressionStatement[14246-14289]"
    }, {
      "left" : "myCardContainer.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 4));",
      "right" : "myCardContainer.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 4));",
      "info" : "ExpressionStatement[14295-14366]:ExpressionStatement[14295-14366]"
    }, {
      "left" : "final String checkBoxName = myModel.getCheckBoxName();",
      "right" : "final String checkBoxName = myModel.getCheckBoxName();",
      "info" : "VariableDeclarationStatement[14435-14489]:VariableDeclarationStatement[14435-14489]"
    }, {
      "left" : "myCheckBox = new JCheckBox(checkBoxName != null ? checkBoxName +\n                                                      (myCheckBoxShortcut != null ? \" (\" +\n                                                                                    KeymapUtil\n                                                                                      .getShortcutsText(myCheckBoxShortcut.getShortcuts()) +\n                                                                                    \")\" : \"\") : \"\");",
      "right" : "myCheckBox = new JCheckBox(checkBoxName != null ? checkBoxName +\n                                                      (myCheckBoxShortcut != null ? \" (\" +\n                                                                                    KeymapUtil\n                                                                                      .getShortcutsText(myCheckBoxShortcut.getShortcuts()) +\n                                                                                    \")\" : \"\") : \"\");",
      "info" : "ExpressionStatement[14494-14986]:ExpressionStatement[14494-14986]"
    }, {
      "left" : "myCheckBox.setAlignmentX(SwingConstants.RIGHT);",
      "right" : "myCheckBox.setAlignmentX(SwingConstants.RIGHT);",
      "info" : "ExpressionStatement[14991-15038]:ExpressionStatement[14991-15038]"
    }, {
      "left" : "if (!SystemInfo.isMac)",
      "right" : "if (!SystemInfo.isMac)",
      "info" : "IfStatement[15044-15108]:IfStatement[15044-15108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15067-15108]:Block[15067-15108]"
    }, {
      "left" : "myCheckBox.setBorder(null);",
      "right" : "myCheckBox.setBorder(null);",
      "info" : "ExpressionStatement[15075-15102]:ExpressionStatement[15075-15102]"
    }, {
      "left" : "myCheckBox.setSelected(myModel.loadInitialCheckBoxState());",
      "right" : "myCheckBox.setSelected(myModel.loadInitialCheckBoxState());",
      "info" : "ExpressionStatement[15114-15173]:ExpressionStatement[15114-15173]"
    }, {
      "left" : "if (checkBoxName == null)",
      "right" : "if (checkBoxName == null)",
      "info" : "IfStatement[15179-15248]:IfStatement[15179-15248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15205-15248]:Block[15205-15248]"
    }, {
      "left" : "myCheckBox.setVisible(false);",
      "right" : "myCheckBox.setVisible(false);",
      "info" : "ExpressionStatement[15213-15242]:ExpressionStatement[15213-15242]"
    }, {
      "left" : "addCard(myCheckBox, CHECK_BOX_CARD);",
      "right" : "addCard(myCheckBox, CHECK_BOX_CARD);",
      "info" : "ExpressionStatement[15254-15290]:ExpressionStatement[15254-15290]"
    }, {
      "left" : "addCard(new HintLabel(myModel.getNotInMessage()), NOT_FOUND_IN_PROJECT_CARD);",
      "right" : "addCard(new HintLabel(myModel.getNotInMessage()), NOT_FOUND_IN_PROJECT_CARD);",
      "info" : "ExpressionStatement[15296-15373]:ExpressionStatement[15296-15373]"
    }, {
      "left" : "addCard(new HintLabel(IdeBundle.message(\"label.choosebyname.no.matches.found\")), NOT_FOUND_CARD);",
      "right" : "addCard(new HintLabel(IdeBundle.message(\"label.choosebyname.no.matches.found\")), NOT_FOUND_CARD);",
      "info" : "ExpressionStatement[15378-15475]:ExpressionStatement[15378-15475]"
    }, {
      "left" : "JPanel searching = new JPanel(new BorderLayout(5, 0));",
      "right" : "JPanel searching = new JPanel(new BorderLayout(5, 0));",
      "info" : "VariableDeclarationStatement[15480-15534]:VariableDeclarationStatement[15480-15534]"
    }, {
      "left" : "searching.add(new AsyncProcessIcon(\"searching\"), BorderLayout.WEST);",
      "right" : "searching.add(new AsyncProcessIcon(\"searching\"), BorderLayout.WEST);",
      "info" : "ExpressionStatement[15539-15607]:ExpressionStatement[15539-15607]"
    }, {
      "left" : "searching.add(new HintLabel(IdeBundle.message(\"label.choosebyname.searching\")), BorderLayout.CENTER);",
      "right" : "searching.add(new HintLabel(IdeBundle.message(\"label.choosebyname.searching\")), BorderLayout.CENTER);",
      "info" : "ExpressionStatement[15612-15713]:ExpressionStatement[15612-15713]"
    }, {
      "left" : "addCard(searching, SEARCHING_CARD);",
      "right" : "addCard(searching, SEARCHING_CARD);",
      "info" : "ExpressionStatement[15718-15753]:ExpressionStatement[15718-15753]"
    }, {
      "left" : "myCard.show(myCardContainer, CHECK_BOX_CARD);",
      "right" : "myCard.show(myCardContainer, CHECK_BOX_CARD);",
      "info" : "ExpressionStatement[15758-15803]:ExpressionStatement[15758-15803]"
    }, {
      "left" : "if (isCheckboxVisible())",
      "right" : "if (isCheckboxVisible())",
      "info" : "IfStatement[15809-15874]:IfStatement[15809-15874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15834-15874]:Block[15834-15874]"
    }, {
      "left" : "hBox.add(myCardContainer);",
      "right" : "hBox.add(myCardContainer);",
      "info" : "ExpressionStatement[15842-15868]:ExpressionStatement[15842-15868]"
    }, {
      "left" : "final DefaultActionGroup group = new DefaultActionGroup();",
      "right" : "final DefaultActionGroup group = new DefaultActionGroup();",
      "info" : "VariableDeclarationStatement[15881-15939]:VariableDeclarationStatement[15881-15939]"
    }, {
      "left" : "group.add(new ShowFindUsagesAction() {\n      @Override\n      public PsiElement[][] getElements() {\n        final Object[] objects = myListModel.toArray();\n        final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length);\n        final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length);\n        List<PsiElement> curElements = prefixMatchElements;\n        for (Object object : objects) {\n          if (object instanceof PsiElement) {\n            curElements.add((PsiElement)object);\n          }\n          else if (object instanceof DataProvider) {\n            final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider)object);\n            if (psi != null) {\n              curElements.add(psi);\n            }\n          }\n          else if (object == NON_PREFIX_SEPARATOR) {\n            curElements = nonPrefixMatchElements;\n          }\n        }\n        return new PsiElement[][]{PsiUtilCore.toPsiElementArray(prefixMatchElements),\n          PsiUtilCore.toPsiElementArray(nonPrefixMatchElements)};\n      }\n    });",
      "right" : "group.add(new ShowFindUsagesAction() {\n      @Override\n      public PsiElement[][] getElements() {\n        final Object[] objects = myListModel.toArray();\n        final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length);\n        final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length);\n        List<PsiElement> curElements = prefixMatchElements;\n        for (Object object : objects) {\n          if (object instanceof PsiElement) {\n            curElements.add((PsiElement)object);\n          }\n          else if (object instanceof DataProvider) {\n            final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider)object);\n            if (psi != null) {\n              curElements.add(psi);\n            }\n          }\n          else if (object == NON_PREFIX_SEPARATOR) {\n            curElements = nonPrefixMatchElements;\n          }\n        }\n        return new PsiElement[][]{PsiUtilCore.toPsiElementArray(prefixMatchElements),\n          PsiUtilCore.toPsiElementArray(nonPrefixMatchElements)};\n      }\n    });",
      "info" : "ExpressionStatement[15944-17032]:ExpressionStatement[15944-17032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16041-17024]:Block[16041-17024]"
    }, {
      "left" : "final Object[] objects = myListModel.toArray();",
      "right" : "final Object[] objects = myListModel.toArray();",
      "info" : "VariableDeclarationStatement[16051-16098]:VariableDeclarationStatement[16051-16098]"
    }, {
      "left" : "final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length);",
      "right" : "final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length);",
      "info" : "VariableDeclarationStatement[16107-16194]:VariableDeclarationStatement[16107-16194]"
    }, {
      "left" : "final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length);",
      "right" : "final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length);",
      "info" : "VariableDeclarationStatement[16203-16293]:VariableDeclarationStatement[16203-16293]"
    }, {
      "left" : "List<PsiElement> curElements = prefixMatchElements;",
      "right" : "List<PsiElement> curElements = prefixMatchElements;",
      "info" : "VariableDeclarationStatement[16302-16353]:VariableDeclarationStatement[16302-16353]"
    }, {
      "left" : "for (Object object : objects)",
      "right" : "for (Object object : objects)",
      "info" : "EnhancedForStatement[16362-16864]:EnhancedForStatement[16362-16864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16392-16864]:Block[16392-16864]"
    }, {
      "left" : "if (object instanceof PsiElement)",
      "right" : "if (object instanceof PsiElement)",
      "info" : "IfStatement[16404-16854]:IfStatement[16404-16854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16438-16500]:Block[16438-16500]"
    }, {
      "left" : "curElements.add((PsiElement)object);",
      "right" : "curElements.add((PsiElement)object);",
      "info" : "ExpressionStatement[16452-16488]:ExpressionStatement[16452-16488]"
    }, {
      "left" : "if (object instanceof DataProvider)",
      "right" : "if (object instanceof DataProvider)",
      "info" : "IfStatement[16516-16854]:IfStatement[16516-16854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16552-16739]:Block[16552-16739]"
    }, {
      "left" : "final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider)object);",
      "right" : "final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider)object);",
      "info" : "VariableDeclarationStatement[16566-16646]:VariableDeclarationStatement[16566-16646]"
    }, {
      "left" : "if (psi != null)",
      "right" : "if (psi != null)",
      "info" : "IfStatement[16659-16727]:IfStatement[16659-16727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16676-16727]:Block[16676-16727]"
    }, {
      "left" : "curElements.add(psi);",
      "right" : "curElements.add(psi);",
      "info" : "ExpressionStatement[16692-16713]:ExpressionStatement[16692-16713]"
    }, {
      "left" : "if (object == NON_PREFIX_SEPARATOR)",
      "right" : "if (object == NON_PREFIX_SEPARATOR)",
      "info" : "IfStatement[16755-16854]:IfStatement[16755-16854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16791-16854]:Block[16791-16854]"
    }, {
      "left" : "curElements = nonPrefixMatchElements;",
      "right" : "curElements = nonPrefixMatchElements;",
      "info" : "ExpressionStatement[16805-16842]:ExpressionStatement[16805-16842]"
    }, {
      "left" : "return new PsiElement[][]{PsiUtilCore.toPsiElementArray(prefixMatchElements),\n          PsiUtilCore.toPsiElementArray(nonPrefixMatchElements)};",
      "right" : "return new PsiElement[][]{PsiUtilCore.toPsiElementArray(prefixMatchElements),\n          PsiUtilCore.toPsiElementArray(nonPrefixMatchElements)};",
      "info" : "ReturnStatement[16873-17016]:ReturnStatement[16873-17016]"
    }, {
      "left" : "final ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true);",
      "right" : "final ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true);",
      "info" : "VariableDeclarationStatement[17037-17156]:VariableDeclarationStatement[17037-17156]"
    }, {
      "left" : "actionToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);",
      "right" : "actionToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);",
      "info" : "ExpressionStatement[17161-17227]:ExpressionStatement[17161-17227]"
    }, {
      "left" : "final JComponent toolbarComponent = actionToolbar.getComponent();",
      "right" : "final JComponent toolbarComponent = actionToolbar.getComponent();",
      "info" : "VariableDeclarationStatement[17232-17297]:VariableDeclarationStatement[17232-17297]"
    }, {
      "left" : "toolbarComponent.setBorder(null);",
      "right" : "toolbarComponent.setBorder(null);",
      "info" : "ExpressionStatement[17302-17335]:ExpressionStatement[17302-17335]"
    }, {
      "left" : "if (myToolArea == null)",
      "right" : "if (myToolArea == null)",
      "info" : "IfStatement[17341-17428]:IfStatement[17341-17428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17365-17428]:Block[17365-17428]"
    }, {
      "left" : "myToolArea = new JLabel(EmptyIcon.create(1, 24));",
      "right" : "myToolArea = new JLabel(EmptyIcon.create(1, 24));",
      "info" : "ExpressionStatement[17373-17422]:ExpressionStatement[17373-17422]"
    }, {
      "left" : "hBox.add(myToolArea);",
      "right" : "hBox.add(myToolArea);",
      "info" : "ExpressionStatement[17433-17454]:ExpressionStatement[17433-17454]"
    }, {
      "left" : "hBox.add(toolbarComponent);",
      "right" : "hBox.add(toolbarComponent);",
      "info" : "ExpressionStatement[17459-17486]:ExpressionStatement[17459-17486]"
    }, {
      "left" : "myTextFieldPanel.add(caption2Tools);",
      "right" : "myTextFieldPanel.add(caption2Tools);",
      "info" : "ExpressionStatement[17492-17528]:ExpressionStatement[17492-17528]"
    }, {
      "left" : "final ActionMap actionMap = new ActionMap();",
      "right" : "final ActionMap actionMap = new ActionMap();",
      "info" : "VariableDeclarationStatement[17534-17578]:VariableDeclarationStatement[17534-17578]"
    }, {
      "left" : "actionMap.setParent(myTextField.getActionMap());",
      "right" : "actionMap.setParent(myTextField.getActionMap());",
      "info" : "ExpressionStatement[17583-17631]:ExpressionStatement[17583-17631]"
    }, {
      "left" : "actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        if (myTextField.getSelectedText() != null) {\n          actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);\n          return;\n        }\n        final Object chosenElement = getChosenElement();\n        if (chosenElement instanceof PsiElement) {\n          CopyReferenceAction.doCopy((PsiElement)chosenElement, myProject);\n        }\n      }\n    });",
      "right" : "actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        if (myTextField.getSelectedText() != null) {\n          actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);\n          return;\n        }\n        final Object chosenElement = getChosenElement();\n        if (chosenElement instanceof PsiElement) {\n          CopyReferenceAction.doCopy((PsiElement)chosenElement, myProject);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[17636-18153]:ExpressionStatement[17636-18153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17776-18145]:Block[17776-18145]"
    }, {
      "left" : "if (myTextField.getSelectedText() != null)",
      "right" : "if (myTextField.getSelectedText() != null)",
      "info" : "IfStatement[17786-17943]:IfStatement[17786-17943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17829-17943]:Block[17829-17943]"
    }, {
      "left" : "actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);",
      "right" : "actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);",
      "info" : "ExpressionStatement[17841-17915]:ExpressionStatement[17841-17915]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17926-17933]:ReturnStatement[17926-17933]"
    }, {
      "left" : "final Object chosenElement = getChosenElement();",
      "right" : "final Object chosenElement = getChosenElement();",
      "info" : "VariableDeclarationStatement[17952-18000]:VariableDeclarationStatement[17952-18000]"
    }, {
      "left" : "if (chosenElement instanceof PsiElement)",
      "right" : "if (chosenElement instanceof PsiElement)",
      "info" : "IfStatement[18009-18137]:IfStatement[18009-18137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18050-18137]:Block[18050-18137]"
    }, {
      "left" : "CopyReferenceAction.doCopy((PsiElement)chosenElement, myProject);",
      "right" : "CopyReferenceAction.doCopy((PsiElement)chosenElement, myProject);",
      "info" : "ExpressionStatement[18062-18127]:ExpressionStatement[18062-18127]"
    }, {
      "left" : "myTextField.setActionMap(actionMap);",
      "right" : "myTextField.setActionMap(actionMap);",
      "info" : "ExpressionStatement[18158-18194]:ExpressionStatement[18158-18194]"
    }, {
      "left" : "myTextFieldPanel.add(myTextField);",
      "right" : "myTextFieldPanel.add(myTextField);",
      "info" : "ExpressionStatement[18200-18234]:ExpressionStatement[18200-18234]"
    }, {
      "left" : "Font editorFont = getEditorFont();",
      "right" : "Font editorFont = getEditorFont();",
      "info" : "VariableDeclarationStatement[18239-18273]:VariableDeclarationStatement[18239-18273]"
    }, {
      "left" : "myTextField.setFont(editorFont);",
      "right" : "myTextField.setFont(editorFont);",
      "info" : "ExpressionStatement[18278-18310]:ExpressionStatement[18278-18310]"
    }, {
      "left" : "if (checkBoxName != null)",
      "right" : "if (checkBoxName != null)",
      "info" : "IfStatement[18316-18709]:IfStatement[18316-18709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18342-18709]:Block[18342-18709]"
    }, {
      "left" : "if (myCheckBox != null && myCheckBoxShortcut != null)",
      "right" : "if (myCheckBox != null && myCheckBoxShortcut != null)",
      "info" : "IfStatement[18350-18703]:IfStatement[18350-18703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18404-18703]:Block[18404-18703]"
    }, {
      "left" : "new AnAction(\"change goto check box\", null, null) {\n          @Override\n          public void actionPerformed(@NotNull AnActionEvent e) {\n            myCheckBox.setSelected(!myCheckBox.isSelected());\n          }\n        }.registerCustomShortcutSet(myCheckBoxShortcut, myTextField);",
      "right" : "new AnAction(\"change goto check box\", null, null) {\n          @Override\n          public void actionPerformed(@NotNull AnActionEvent e) {\n            myCheckBox.setSelected(!myCheckBox.isSelected());\n          }\n        }.registerCustomShortcutSet(myCheckBoxShortcut, myTextField);",
      "info" : "ExpressionStatement[18414-18695]:ExpressionStatement[18414-18695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18550-18625]:Block[18550-18625]"
    }, {
      "left" : "myCheckBox.setSelected(!myCheckBox.isSelected());",
      "right" : "myCheckBox.setSelected(!myCheckBox.isSelected());",
      "info" : "ExpressionStatement[18564-18613]:ExpressionStatement[18564-18613]"
    }, {
      "left" : "if (isCloseByFocusLost())",
      "right" : "if (isCloseByFocusLost())",
      "info" : "IfStatement[18715-20955]:IfStatement[18715-20955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18741-20955]:Block[18741-20955]"
    }, {
      "left" : "myTextField.addFocusListener(new FocusAdapter() {\n        @Override\n        public void focusLost(@NotNull final FocusEvent e) {\n          cancelListUpdater(); // cancel thread as early as possible\n          myHideAlarm.addRequest(new Runnable() {\n            @Override\n            public void run() {\n              JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());\n              if (popup != null) {\n                popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });\n              }\n              else {\n                Component oppositeComponent = e.getOppositeComponent();\n                if (oppositeComponent == myCheckBox) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n                  return;\n                }\n                if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);// Otherwise me may skip some KeyEvents\n                  return;\n                }\n\n                if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) {\n                  return; // Allow toolwindows to gain focus (used by QuickDoc shown in a toolwindow)\n                }\n\n                EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();\n                if (queue instanceof IdeEventQueue) {\n                  if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent)) {\n                    Component root = SwingUtilities.getRoot(myTextField);\n                    if (root == null || root.isShowing()) {\n                      hideHint();\n                    }\n                  }\n                }\n              }\n            }\n          }, 5);\n        }\n      });",
      "right" : "myTextField.addFocusListener(new FocusAdapter() {\n        @Override\n        public void focusLost(@NotNull final FocusEvent e) {\n          cancelListUpdater(); // cancel thread as early as possible\n          myHideAlarm.addRequest(new Runnable() {\n            @Override\n            public void run() {\n              JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());\n              if (popup != null) {\n                popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });\n              }\n              else {\n                Component oppositeComponent = e.getOppositeComponent();\n                if (oppositeComponent == myCheckBox) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n                  return;\n                }\n                if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);// Otherwise me may skip some KeyEvents\n                  return;\n                }\n\n                if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) {\n                  return; // Allow toolwindows to gain focus (used by QuickDoc shown in a toolwindow)\n                }\n\n                EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();\n                if (queue instanceof IdeEventQueue) {\n                  if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent)) {\n                    Component root = SwingUtilities.getRoot(myTextField);\n                    if (root == null || root.isShowing()) {\n                      hideHint();\n                    }\n                  }\n                }\n              }\n            }\n          }, 5);\n        }\n      });",
      "info" : "ExpressionStatement[18749-20949]:ExpressionStatement[18749-20949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18876-20939]:Block[18876-20939]"
    }, {
      "left" : "cancelListUpdater();",
      "right" : "cancelListUpdater();",
      "info" : "ExpressionStatement[18888-18908]:ExpressionStatement[18888-18908]"
    }, {
      "left" : "myHideAlarm.addRequest(new Runnable() {\n            @Override\n            public void run() {\n              JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());\n              if (popup != null) {\n                popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });\n              }\n              else {\n                Component oppositeComponent = e.getOppositeComponent();\n                if (oppositeComponent == myCheckBox) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n                  return;\n                }\n                if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);// Otherwise me may skip some KeyEvents\n                  return;\n                }\n\n                if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) {\n                  return; // Allow toolwindows to gain focus (used by QuickDoc shown in a toolwindow)\n                }\n\n                EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();\n                if (queue instanceof IdeEventQueue) {\n                  if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent)) {\n                    Component root = SwingUtilities.getRoot(myTextField);\n                    if (root == null || root.isShowing()) {\n                      hideHint();\n                    }\n                  }\n                }\n              }\n            }\n          }, 5);",
      "right" : "myHideAlarm.addRequest(new Runnable() {\n            @Override\n            public void run() {\n              JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());\n              if (popup != null) {\n                popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });\n              }\n              else {\n                Component oppositeComponent = e.getOppositeComponent();\n                if (oppositeComponent == myCheckBox) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n                  return;\n                }\n                if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) {\n                  IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);// Otherwise me may skip some KeyEvents\n                  return;\n                }\n\n                if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) {\n                  return; // Allow toolwindows to gain focus (used by QuickDoc shown in a toolwindow)\n                }\n\n                EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();\n                if (queue instanceof IdeEventQueue) {\n                  if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent)) {\n                    Component root = SwingUtilities.getRoot(myTextField);\n                    if (root == null || root.isShowing()) {\n                      hideHint();\n                    }\n                  }\n                }\n              }\n            }\n          }, 5);",
      "info" : "ExpressionStatement[18957-20929]:ExpressionStatement[18957-20929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19049-20912]:Block[19049-20912]"
    }, {
      "left" : "JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());",
      "right" : "JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());",
      "info" : "VariableDeclarationStatement[19065-19149]:VariableDeclarationStatement[19065-19149]"
    }, {
      "left" : "if (popup != null)",
      "right" : "if (popup != null)",
      "info" : "IfStatement[19164-20898]:IfStatement[19164-20898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19183-19510]:Block[19183-19510]"
    }, {
      "left" : "popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });",
      "right" : "popup.addListener(new JBPopupListener.Adapter() {\n                  @Override\n                  public void onClosed(@NotNull LightweightWindowEvent event) {\n                    if (event.isOk()) {\n                      hideHint();\n                    }\n                  }\n                });",
      "info" : "ExpressionStatement[19201-19494]:ExpressionStatement[19201-19494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19357-19474]:Block[19357-19474]"
    }, {
      "left" : "if (event.isOk())",
      "right" : "if (event.isOk())",
      "info" : "IfStatement[19379-19454]:IfStatement[19379-19454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19397-19454]:Block[19397-19454]"
    }, {
      "left" : "hideHint();",
      "right" : "hideHint();",
      "info" : "ExpressionStatement[19421-19432]:ExpressionStatement[19421-19432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19530-20898]:Block[19530-20898]"
    }, {
      "left" : "Component oppositeComponent = e.getOppositeComponent();",
      "right" : "Component oppositeComponent = e.getOppositeComponent();",
      "info" : "VariableDeclarationStatement[19548-19603]:VariableDeclarationStatement[19548-19603]"
    }, {
      "left" : "if (oppositeComponent == myCheckBox)",
      "right" : "if (oppositeComponent == myCheckBox)",
      "info" : "IfStatement[19620-19792]:IfStatement[19620-19792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19657-19792]:Block[19657-19792]"
    }, {
      "left" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "right" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "info" : "ExpressionStatement[19677-19748]:ExpressionStatement[19677-19748]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19767-19774]:ReturnStatement[19767-19774]"
    }, {
      "left" : "if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent)))",
      "right" : "if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) &&\n                    myList.isShowing() &&\n                    (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent)))",
      "info" : "IfStatement[19809-20213]:IfStatement[19809-20213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20039-20213]:Block[20039-20213]"
    }, {
      "left" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "right" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "info" : "ExpressionStatement[20059-20130]:ExpressionStatement[20059-20130]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20188-20195]:ReturnStatement[20188-20195]"
    }, {
      "left" : "if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent))",
      "right" : "if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent))",
      "info" : "IfStatement[20231-20423]:IfStatement[20231-20423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20302-20423]:Block[20302-20423]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20322-20329]:ReturnStatement[20322-20329]"
    }, {
      "left" : "EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "right" : "EventQueue queue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "info" : "VariableDeclarationStatement[20441-20510]:VariableDeclarationStatement[20441-20510]"
    }, {
      "left" : "if (queue instanceof IdeEventQueue)",
      "right" : "if (queue instanceof IdeEventQueue)",
      "info" : "IfStatement[20527-20882]:IfStatement[20527-20882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20563-20882]:Block[20563-20882]"
    }, {
      "left" : "if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent))",
      "right" : "if (((IdeEventQueue)queue).wasRootRecentlyClicked(oppositeComponent))",
      "info" : "IfStatement[20583-20864]:IfStatement[20583-20864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20653-20864]:Block[20653-20864]"
    }, {
      "left" : "Component root = SwingUtilities.getRoot(myTextField);",
      "right" : "Component root = SwingUtilities.getRoot(myTextField);",
      "info" : "VariableDeclarationStatement[20675-20728]:VariableDeclarationStatement[20675-20728]"
    }, {
      "left" : "if (root == null || root.isShowing())",
      "right" : "if (root == null || root.isShowing())",
      "info" : "IfStatement[20749-20844]:IfStatement[20749-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20787-20844]:Block[20787-20844]"
    }, {
      "left" : "hideHint();",
      "right" : "hideHint();",
      "info" : "ExpressionStatement[20811-20822]:ExpressionStatement[20811-20822]"
    }, {
      "left" : "if (myCheckBox != null)",
      "right" : "if (myCheckBox != null)",
      "info" : "IfStatement[20961-21213]:IfStatement[20961-21213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20985-21213]:Block[20985-21213]"
    }, {
      "left" : "myCheckBox.addItemListener(new ItemListener() {\n        @Override\n        public void itemStateChanged(@NotNull ItemEvent e) {\n          rebuildList(false);\n        }\n      });",
      "right" : "myCheckBox.addItemListener(new ItemListener() {\n        @Override\n        public void itemStateChanged(@NotNull ItemEvent e) {\n          rebuildList(false);\n        }\n      });",
      "info" : "ExpressionStatement[20993-21169]:ExpressionStatement[20993-21169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21118-21159]:Block[21118-21159]"
    }, {
      "left" : "rebuildList(false);",
      "right" : "rebuildList(false);",
      "info" : "ExpressionStatement[21130-21149]:ExpressionStatement[21130-21149]"
    }, {
      "left" : "myCheckBox.setFocusable(false);",
      "right" : "myCheckBox.setFocusable(false);",
      "info" : "ExpressionStatement[21176-21207]:ExpressionStatement[21176-21207]"
    }, {
      "left" : "myTextField.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        clearPostponedOkAction(false);\n        rebuildList(false);\n      }\n    });",
      "right" : "myTextField.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        clearPostponedOkAction(false);\n        rebuildList(false);\n      }\n    });",
      "info" : "ExpressionStatement[21219-21439]:ExpressionStatement[21219-21439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21355-21431]:Block[21355-21431]"
    }, {
      "left" : "clearPostponedOkAction(false);",
      "right" : "clearPostponedOkAction(false);",
      "info" : "ExpressionStatement[21365-21395]:ExpressionStatement[21365-21395]"
    }, {
      "left" : "rebuildList(false);",
      "right" : "rebuildList(false);",
      "info" : "ExpressionStatement[21404-21423]:ExpressionStatement[21404-21423]"
    }, {
      "left" : "final Set<KeyStroke> upShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_UP);",
      "right" : "final Set<KeyStroke> upShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_UP);",
      "info" : "VariableDeclarationStatement[21445-21533]:VariableDeclarationStatement[21445-21533]"
    }, {
      "left" : "final Set<KeyStroke> downShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN);",
      "right" : "final Set<KeyStroke> downShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN);",
      "info" : "VariableDeclarationStatement[21538-21630]:VariableDeclarationStatement[21538-21630]"
    }, {
      "left" : "myTextField.addKeyListener(new KeyAdapter() {\n      @Override\n      public void keyPressed(@NotNull KeyEvent e) {\n        if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {\n          myClosedByShiftEnter = true;\n          close(true);\n        }\n        if (!myListScrollPane.isVisible()) {\n          return;\n        }\n        final int keyCode;\n\n        // Add support for user-defined 'caret up/down' shortcuts.\n        KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e);\n        if (upShortcuts.contains(stroke)) {\n          keyCode = KeyEvent.VK_UP;\n        }\n        else if (downShortcuts.contains(stroke)) {\n          keyCode = KeyEvent.VK_DOWN;\n        }\n        else {\n          keyCode = e.getKeyCode();\n        }\n        switch (keyCode) {\n          case KeyEvent.VK_DOWN:\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_UP:\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_PAGE_UP:\n            ListScrollingUtil.movePageUp(myList);\n            break;\n          case KeyEvent.VK_PAGE_DOWN:\n            ListScrollingUtil.movePageDown(myList);\n            break;\n          case KeyEvent.VK_TAB:\n            close(true);\n            break;\n          case KeyEvent.VK_ENTER:\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);\n              e.consume();\n            }\n            break;\n        }\n\n        if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) {\n          if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) {\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n          }\n          else {\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n          }\n        }\n      }\n    });",
      "right" : "myTextField.addKeyListener(new KeyAdapter() {\n      @Override\n      public void keyPressed(@NotNull KeyEvent e) {\n        if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {\n          myClosedByShiftEnter = true;\n          close(true);\n        }\n        if (!myListScrollPane.isVisible()) {\n          return;\n        }\n        final int keyCode;\n\n        // Add support for user-defined 'caret up/down' shortcuts.\n        KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e);\n        if (upShortcuts.contains(stroke)) {\n          keyCode = KeyEvent.VK_UP;\n        }\n        else if (downShortcuts.contains(stroke)) {\n          keyCode = KeyEvent.VK_DOWN;\n        }\n        else {\n          keyCode = e.getKeyCode();\n        }\n        switch (keyCode) {\n          case KeyEvent.VK_DOWN:\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_UP:\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_PAGE_UP:\n            ListScrollingUtil.movePageUp(myList);\n            break;\n          case KeyEvent.VK_PAGE_DOWN:\n            ListScrollingUtil.movePageDown(myList);\n            break;\n          case KeyEvent.VK_TAB:\n            close(true);\n            break;\n          case KeyEvent.VK_ENTER:\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);\n              e.consume();\n            }\n            break;\n        }\n\n        if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) {\n          if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) {\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n          }\n          else {\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[21635-23625]:ExpressionStatement[21635-23625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21747-23617]:Block[21747-23617]"
    }, {
      "left" : "if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0)",
      "right" : "if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0)",
      "info" : "IfStatement[21757-21922]:IfStatement[21757-21922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21849-21922]:Block[21849-21922]"
    }, {
      "left" : "myClosedByShiftEnter = true;",
      "right" : "myClosedByShiftEnter = true;",
      "info" : "ExpressionStatement[21861-21889]:ExpressionStatement[21861-21889]"
    }, {
      "left" : "close(true);",
      "right" : "close(true);",
      "info" : "ExpressionStatement[21900-21912]:ExpressionStatement[21900-21912]"
    }, {
      "left" : "if (!myListScrollPane.isVisible())",
      "right" : "if (!myListScrollPane.isVisible())",
      "info" : "IfStatement[21931-21995]:IfStatement[21931-21995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21966-21995]:Block[21966-21995]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21978-21985]:ReturnStatement[21978-21985]"
    }, {
      "left" : "final int keyCode;",
      "right" : "final int keyCode;",
      "info" : "VariableDeclarationStatement[22004-22022]:VariableDeclarationStatement[22004-22022]"
    }, {
      "left" : "KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e);",
      "right" : "KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e);",
      "info" : "VariableDeclarationStatement[22099-22152]:VariableDeclarationStatement[22099-22152]"
    }, {
      "left" : "if (upShortcuts.contains(stroke))",
      "right" : "if (upShortcuts.contains(stroke))",
      "info" : "IfStatement[22161-22402]:IfStatement[22161-22402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22195-22242]:Block[22195-22242]"
    }, {
      "left" : "keyCode = KeyEvent.VK_UP;",
      "right" : "keyCode = KeyEvent.VK_UP;",
      "info" : "ExpressionStatement[22207-22232]:ExpressionStatement[22207-22232]"
    }, {
      "left" : "if (downShortcuts.contains(stroke))",
      "right" : "if (downShortcuts.contains(stroke))",
      "info" : "IfStatement[22256-22402]:IfStatement[22256-22402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22292-22341]:Block[22292-22341]"
    }, {
      "left" : "keyCode = KeyEvent.VK_DOWN;",
      "right" : "keyCode = KeyEvent.VK_DOWN;",
      "info" : "ExpressionStatement[22304-22331]:ExpressionStatement[22304-22331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22355-22402]:Block[22355-22402]"
    }, {
      "left" : "keyCode = e.getKeyCode();",
      "right" : "keyCode = e.getKeyCode();",
      "info" : "ExpressionStatement[22367-22392]:ExpressionStatement[22367-22392]"
    }, {
      "left" : "switch (keyCode) {\n          case KeyEvent.VK_DOWN:\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_UP:\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_PAGE_UP:\n            ListScrollingUtil.movePageUp(myList);\n            break;\n          case KeyEvent.VK_PAGE_DOWN:\n            ListScrollingUtil.movePageDown(myList);\n            break;\n          case KeyEvent.VK_TAB:\n            close(true);\n            break;\n          case KeyEvent.VK_ENTER:\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);\n              e.consume();\n            }\n            break;\n        }",
      "right" : "switch (keyCode) {\n          case KeyEvent.VK_DOWN:\n            ListScrollingUtil.moveDown(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_UP:\n            ListScrollingUtil.moveUp(myList, e.getModifiersEx());\n            break;\n          case KeyEvent.VK_PAGE_UP:\n            ListScrollingUtil.movePageUp(myList);\n            break;\n          case KeyEvent.VK_PAGE_DOWN:\n            ListScrollingUtil.movePageDown(myList);\n            break;\n          case KeyEvent.VK_TAB:\n            close(true);\n            break;\n          case KeyEvent.VK_ENTER:\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);\n              e.consume();\n            }\n            break;\n        }",
      "info" : "SwitchStatement[22411-23281]:SwitchStatement[22411-23281]"
    }, {
      "left" : "case KeyEvent.VK_DOWN:",
      "right" : "case KeyEvent.VK_DOWN:",
      "info" : "SwitchCase[22440-22462]:SwitchCase[22440-22462]"
    }, {
      "left" : "ListScrollingUtil.moveDown(myList, e.getModifiersEx());",
      "right" : "ListScrollingUtil.moveDown(myList, e.getModifiersEx());",
      "info" : "ExpressionStatement[22475-22530]:ExpressionStatement[22475-22530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22543-22549]:BreakStatement[22543-22549]"
    }, {
      "left" : "case KeyEvent.VK_UP:",
      "right" : "case KeyEvent.VK_UP:",
      "info" : "SwitchCase[22560-22580]:SwitchCase[22560-22580]"
    }, {
      "left" : "ListScrollingUtil.moveUp(myList, e.getModifiersEx());",
      "right" : "ListScrollingUtil.moveUp(myList, e.getModifiersEx());",
      "info" : "ExpressionStatement[22593-22646]:ExpressionStatement[22593-22646]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22659-22665]:BreakStatement[22659-22665]"
    }, {
      "left" : "case KeyEvent.VK_PAGE_UP:",
      "right" : "case KeyEvent.VK_PAGE_UP:",
      "info" : "SwitchCase[22676-22701]:SwitchCase[22676-22701]"
    }, {
      "left" : "ListScrollingUtil.movePageUp(myList);",
      "right" : "ListScrollingUtil.movePageUp(myList);",
      "info" : "ExpressionStatement[22714-22751]:ExpressionStatement[22714-22751]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22764-22770]:BreakStatement[22764-22770]"
    }, {
      "left" : "case KeyEvent.VK_PAGE_DOWN:",
      "right" : "case KeyEvent.VK_PAGE_DOWN:",
      "info" : "SwitchCase[22781-22808]:SwitchCase[22781-22808]"
    }, {
      "left" : "ListScrollingUtil.movePageDown(myList);",
      "right" : "ListScrollingUtil.movePageDown(myList);",
      "info" : "ExpressionStatement[22821-22860]:ExpressionStatement[22821-22860]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22873-22879]:BreakStatement[22873-22879]"
    }, {
      "left" : "case KeyEvent.VK_TAB:",
      "right" : "case KeyEvent.VK_TAB:",
      "info" : "SwitchCase[22890-22911]:SwitchCase[22890-22911]"
    }, {
      "left" : "close(true);",
      "right" : "close(true);",
      "info" : "ExpressionStatement[22924-22936]:ExpressionStatement[22924-22936]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22949-22955]:BreakStatement[22949-22955]"
    }, {
      "left" : "case KeyEvent.VK_ENTER:",
      "right" : "case KeyEvent.VK_ENTER:",
      "info" : "SwitchCase[22966-22989]:SwitchCase[22966-22989]"
    }, {
      "left" : "if (myList.getSelectedValue() == EXTRA_ELEM)",
      "right" : "if (myList.getSelectedValue() == EXTRA_ELEM)",
      "info" : "IfStatement[23002-23252]:IfStatement[23002-23252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23047-23252]:Block[23047-23252]"
    }, {
      "left" : "myMaximumListSizeLimit += myListSizeIncreasing;",
      "right" : "myMaximumListSizeLimit += myListSizeIncreasing;",
      "info" : "ExpressionStatement[23063-23110]:ExpressionStatement[23063-23110]"
    }, {
      "left" : "rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);",
      "right" : "rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null);",
      "info" : "ExpressionStatement[23125-23211]:ExpressionStatement[23125-23211]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[23226-23238]:ExpressionStatement[23226-23238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23265-23271]:BreakStatement[23265-23271]"
    }, {
      "left" : "if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR)",
      "right" : "if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR)",
      "info" : "IfStatement[23291-23609]:IfStatement[23291-23609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23346-23609]:Block[23346-23609]"
    }, {
      "left" : "if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP)",
      "right" : "if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP)",
      "info" : "IfStatement[23358-23599]:IfStatement[23358-23599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23423-23502]:Block[23423-23502]"
    }, {
      "left" : "ListScrollingUtil.moveUp(myList, e.getModifiersEx());",
      "right" : "ListScrollingUtil.moveUp(myList, e.getModifiersEx());",
      "info" : "ExpressionStatement[23437-23490]:ExpressionStatement[23437-23490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23518-23599]:Block[23518-23599]"
    }, {
      "left" : "ListScrollingUtil.moveDown(myList, e.getModifiersEx());",
      "right" : "ListScrollingUtil.moveDown(myList, e.getModifiersEx());",
      "info" : "ExpressionStatement[23532-23587]:ExpressionStatement[23532-23587]"
    }, {
      "left" : "myTextField.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent actionEvent) {\n        doClose(true);\n      }\n    });",
      "right" : "myTextField.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent actionEvent) {\n        doClose(true);\n      }\n    });",
      "info" : "ExpressionStatement[23631-23808]:ExpressionStatement[23631-23808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23768-23800]:Block[23768-23800]"
    }, {
      "left" : "doClose(true);",
      "right" : "doClose(true);",
      "info" : "ExpressionStatement[23778-23792]:ExpressionStatement[23778-23792]"
    }, {
      "left" : "myList.setFocusable(false);",
      "right" : "myList.setFocusable(false);",
      "info" : "ExpressionStatement[23814-23841]:ExpressionStatement[23814-23841]"
    }, {
      "left" : "myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION :\n                            ListSelectionModel.SINGLE_SELECTION);",
      "right" : "myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION :\n                            ListSelectionModel.SINGLE_SELECTION);",
      "info" : "ExpressionStatement[23846-24009]:ExpressionStatement[23846-24009]"
    }, {
      "left" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent e, int clickCount) {\n        if (!myTextField.hasFocus()) {\n          IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n        }\n\n        if (clickCount == 2) {\n          int selectedIndex = myList.getSelectedIndex();\n          Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex);\n\n          if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) { // Otherwise it was reselected in the selection listener\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null);\n            }\n            else {\n              doClose(true);\n            }\n          }\n          return true;\n        }\n\n        return false;\n      }\n    }.installOn(myList);",
      "right" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent e, int clickCount) {\n        if (!myTextField.hasFocus()) {\n          IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);\n        }\n\n        if (clickCount == 2) {\n          int selectedIndex = myList.getSelectedIndex();\n          Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex);\n\n          if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) { // Otherwise it was reselected in the selection listener\n            if (myList.getSelectedValue() == EXTRA_ELEM) {\n              myMaximumListSizeLimit += myListSizeIncreasing;\n              rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null);\n            }\n            else {\n              doClose(true);\n            }\n          }\n          return true;\n        }\n\n        return false;\n      }\n    }.installOn(myList);",
      "info" : "ExpressionStatement[24014-24968]:ExpressionStatement[24014-24968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24120-24943]:Block[24120-24943]"
    }, {
      "left" : "if (!myTextField.hasFocus())",
      "right" : "if (!myTextField.hasFocus())",
      "info" : "IfStatement[24130-24252]:IfStatement[24130-24252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24159-24252]:Block[24159-24252]"
    }, {
      "left" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "right" : "IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true);",
      "info" : "ExpressionStatement[24171-24242]:ExpressionStatement[24171-24242]"
    }, {
      "left" : "if (clickCount == 2)",
      "right" : "if (clickCount == 2)",
      "info" : "IfStatement[24262-24912]:IfStatement[24262-24912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24283-24912]:Block[24283-24912]"
    }, {
      "left" : "int selectedIndex = myList.getSelectedIndex();",
      "right" : "int selectedIndex = myList.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[24295-24341]:VariableDeclarationStatement[24295-24341]"
    }, {
      "left" : "Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex);",
      "right" : "Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex);",
      "info" : "VariableDeclarationStatement[24352-24434]:VariableDeclarationStatement[24352-24434]"
    }, {
      "left" : "if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint()))",
      "right" : "if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint()))",
      "info" : "IfStatement[24446-24879]:IfStatement[24446-24879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24523-24879]:Block[24523-24879]"
    }, {
      "left" : "if (myList.getSelectedValue() == EXTRA_ELEM)",
      "right" : "if (myList.getSelectedValue() == EXTRA_ELEM)",
      "info" : "IfStatement[24594-24867]:IfStatement[24594-24867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24639-24805]:Block[24639-24805]"
    }, {
      "left" : "myMaximumListSizeLimit += myListSizeIncreasing;",
      "right" : "myMaximumListSizeLimit += myListSizeIncreasing;",
      "info" : "ExpressionStatement[24655-24702]:ExpressionStatement[24655-24702]"
    }, {
      "left" : "rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null);",
      "right" : "rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null);",
      "info" : "ExpressionStatement[24717-24791]:ExpressionStatement[24717-24791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24823-24867]:Block[24823-24867]"
    }, {
      "left" : "doClose(true);",
      "right" : "doClose(true);",
      "info" : "ExpressionStatement[24839-24853]:ExpressionStatement[24839-24853]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24890-24902]:ReturnStatement[24890-24902]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24922-24935]:ReturnStatement[24922-24935]"
    }, {
      "left" : "myList.setCellRenderer(myModel.getListCellRenderer());",
      "right" : "myList.setCellRenderer(myModel.getListCellRenderer());",
      "info" : "ExpressionStatement[24974-25028]:ExpressionStatement[24974-25028]"
    }, {
      "left" : "myList.setFont(editorFont);",
      "right" : "myList.setFont(editorFont);",
      "info" : "ExpressionStatement[25033-25060]:ExpressionStatement[25033-25060]"
    }, {
      "left" : "myList.addListSelectionListener(new ListSelectionListener() {\n      private int myPreviousSelectionIndex = 0;\n\n      @Override\n      public void valueChanged(@NotNull ListSelectionEvent e) {\n        if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) {\n          myPreviousSelectionIndex = myList.getSelectedIndex();\n          chosenElementMightChange();\n          updateDocumentation();\n        }\n        else if (allowMultipleSelection) {\n          myList.setSelectedIndex(myPreviousSelectionIndex);\n        }\n      }\n    });",
      "right" : "myList.addListSelectionListener(new ListSelectionListener() {\n      private int myPreviousSelectionIndex = 0;\n\n      @Override\n      public void valueChanged(@NotNull ListSelectionEvent e) {\n        if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) {\n          myPreviousSelectionIndex = myList.getSelectedIndex();\n          chosenElementMightChange();\n          updateDocumentation();\n        }\n        else if (allowMultipleSelection) {\n          myList.setSelectedIndex(myPreviousSelectionIndex);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[25066-25596]:ExpressionStatement[25066-25596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25255-25588]:Block[25255-25588]"
    }, {
      "left" : "if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR)",
      "right" : "if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR)",
      "info" : "IfStatement[25265-25580]:IfStatement[25265-25580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25320-25466]:Block[25320-25466]"
    }, {
      "left" : "myPreviousSelectionIndex = myList.getSelectedIndex();",
      "right" : "myPreviousSelectionIndex = myList.getSelectedIndex();",
      "info" : "ExpressionStatement[25332-25385]:ExpressionStatement[25332-25385]"
    }, {
      "left" : "chosenElementMightChange();",
      "right" : "chosenElementMightChange();",
      "info" : "ExpressionStatement[25396-25423]:ExpressionStatement[25396-25423]"
    }, {
      "left" : "updateDocumentation();",
      "right" : "updateDocumentation();",
      "info" : "ExpressionStatement[25434-25456]:ExpressionStatement[25434-25456]"
    }, {
      "left" : "if (allowMultipleSelection)",
      "right" : "if (allowMultipleSelection)",
      "info" : "IfStatement[25480-25580]:IfStatement[25480-25580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25508-25580]:Block[25508-25580]"
    }, {
      "left" : "myList.setSelectedIndex(myPreviousSelectionIndex);",
      "right" : "myList.setSelectedIndex(myPreviousSelectionIndex);",
      "info" : "ExpressionStatement[25520-25570]:ExpressionStatement[25520-25570]"
    }, {
      "left" : "myListScrollPane = ScrollPaneFactory.createScrollPane(myList);",
      "right" : "myListScrollPane = ScrollPaneFactory.createScrollPane(myList);",
      "info" : "ExpressionStatement[25602-25664]:ExpressionStatement[25602-25664]"
    }, {
      "left" : "myListScrollPane.setViewportBorder(JBUI.Borders.empty());",
      "right" : "myListScrollPane.setViewportBorder(JBUI.Borders.empty());",
      "info" : "ExpressionStatement[25669-25726]:ExpressionStatement[25669-25726]"
    }, {
      "left" : "myTextFieldPanel.setBorder(new EmptyBorder(2, 2, 2, 2));",
      "right" : "myTextFieldPanel.setBorder(new EmptyBorder(2, 2, 2, 2));",
      "info" : "ExpressionStatement[25732-25788]:ExpressionStatement[25732-25788]"
    }, {
      "left" : "showTextFieldPanel();",
      "right" : "showTextFieldPanel();",
      "info" : "ExpressionStatement[25794-25815]:ExpressionStatement[25794-25815]"
    }, {
      "left" : "myInitialized = true;",
      "right" : "myInitialized = true;",
      "info" : "ExpressionStatement[25821-25842]:ExpressionStatement[25821-25842]"
    }, {
      "left" : "if (modalityState != null)",
      "right" : "if (modalityState != null)",
      "info" : "IfStatement[25848-25941]:IfStatement[25848-25941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25875-25941]:Block[25875-25941]"
    }, {
      "left" : "rebuildList(myInitialIndex, 0, modalityState, null);",
      "right" : "rebuildList(myInitialIndex, 0, modalityState, null);",
      "info" : "ExpressionStatement[25883-25935]:ExpressionStatement[25883-25935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26043-26632]:Block[26043-26632]"
    }, {
      "left" : "if (component == null || myProject == null || myProject.isDisposed())",
      "right" : "if (component == null || myProject == null || myProject.isDisposed())",
      "info" : "IfStatement[26049-26132]:IfStatement[26049-26132]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26119-26132]:ReturnStatement[26119-26132]"
    }, {
      "left" : "ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(myProject);",
      "right" : "ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(myProject);",
      "info" : "VariableDeclarationStatement[26138-26217]:VariableDeclarationStatement[26138-26217]"
    }, {
      "left" : "ToolWindow toolWindow = toolWindowManager.getToolWindow(toolWindowManager.getActiveToolWindowId());",
      "right" : "ToolWindow toolWindow = toolWindowManager.getToolWindow(toolWindowManager.getActiveToolWindowId());",
      "info" : "VariableDeclarationStatement[26222-26321]:VariableDeclarationStatement[26222-26321]"
    }, {
      "left" : "JComponent toolWindowComponent = toolWindow != null ? toolWindow.getComponent() : null;",
      "right" : "JComponent toolWindowComponent = toolWindow != null ? toolWindow.getComponent() : null;",
      "info" : "VariableDeclarationStatement[26326-26413]:VariableDeclarationStatement[26326-26413]"
    }, {
      "left" : "return toolWindowComponent != null &&\n           toolWindowComponent.getClientProperty(TEMPORARILY_FOCUSABLE_COMPONENT_KEY) != null &&\n           SwingUtilities.isDescendingFrom(component, toolWindowComponent);",
      "right" : "return toolWindowComponent != null &&\n           toolWindowComponent.getClientProperty(TEMPORARILY_FOCUSABLE_COMPONENT_KEY) != null &&\n           SwingUtilities.isDescendingFrom(component, toolWindowComponent);",
      "info" : "ReturnStatement[26418-26628]:ReturnStatement[26418-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26689-26831]:Block[26689-26831]"
    }, {
      "left" : "JPanel wrapper = new JPanel(new BorderLayout());",
      "right" : "JPanel wrapper = new JPanel(new BorderLayout());",
      "info" : "VariableDeclarationStatement[26695-26743]:VariableDeclarationStatement[26695-26743]"
    }, {
      "left" : "wrapper.add(comp, BorderLayout.EAST);",
      "right" : "wrapper.add(comp, BorderLayout.EAST);",
      "info" : "ExpressionStatement[26748-26785]:ExpressionStatement[26748-26785]"
    }, {
      "left" : "myCardContainer.add(wrapper, cardId);",
      "right" : "myCardContainer.add(wrapper, cardId);",
      "info" : "ExpressionStatement[26790-26827]:ExpressionStatement[26790-26827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26892-26935]:Block[26892-26935]"
    }, {
      "left" : "myCheckBoxShortcut = shortcutSet;",
      "right" : "myCheckBoxShortcut = shortcutSet;",
      "info" : "ExpressionStatement[26898-26931]:ExpressionStatement[26898-26931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27019-27514]:Block[27019-27514]"
    }, {
      "left" : "Set<KeyStroke> result = new HashSet<KeyStroke>();",
      "right" : "Set<KeyStroke> result = new HashSet<KeyStroke>();",
      "info" : "VariableDeclarationStatement[27025-27074]:VariableDeclarationStatement[27025-27074]"
    }, {
      "left" : "Keymap keymap = KeymapManager.getInstance().getActiveKeymap();",
      "right" : "Keymap keymap = KeymapManager.getInstance().getActiveKeymap();",
      "info" : "VariableDeclarationStatement[27079-27141]:VariableDeclarationStatement[27079-27141]"
    }, {
      "left" : "Shortcut[] shortcuts = keymap.getShortcuts(actionId);",
      "right" : "Shortcut[] shortcuts = keymap.getShortcuts(actionId);",
      "info" : "VariableDeclarationStatement[27146-27199]:VariableDeclarationStatement[27146-27199]"
    }, {
      "left" : "if (shortcuts == null)",
      "right" : "if (shortcuts == null)",
      "info" : "IfStatement[27204-27255]:IfStatement[27204-27255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27227-27255]:Block[27227-27255]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27235-27249]:ReturnStatement[27235-27249]"
    }, {
      "left" : "for (Shortcut shortcut : shortcuts)",
      "right" : "for (Shortcut shortcut : shortcuts)",
      "info" : "EnhancedForStatement[27260-27491]:EnhancedForStatement[27260-27491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27296-27491]:Block[27296-27491]"
    }, {
      "left" : "if (shortcut instanceof KeyboardShortcut)",
      "right" : "if (shortcut instanceof KeyboardShortcut)",
      "info" : "IfStatement[27304-27485]:IfStatement[27304-27485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27346-27485]:Block[27346-27485]"
    }, {
      "left" : "KeyboardShortcut keyboardShortcut = (KeyboardShortcut)shortcut;",
      "right" : "KeyboardShortcut keyboardShortcut = (KeyboardShortcut)shortcut;",
      "info" : "VariableDeclarationStatement[27356-27419]:VariableDeclarationStatement[27356-27419]"
    }, {
      "left" : "result.add(keyboardShortcut.getFirstKeyStroke());",
      "right" : "result.add(keyboardShortcut.getFirstKeyStroke());",
      "info" : "ExpressionStatement[27428-27477]:ExpressionStatement[27428-27477]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27496-27510]:ReturnStatement[27496-27510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27542-27656]:Block[27542-27656]"
    }, {
      "left" : "if (!myTextFieldPanel.focusRequested())",
      "right" : "if (!myTextFieldPanel.focusRequested())",
      "info" : "IfStatement[27548-27652]:IfStatement[27548-27652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27588-27652]:Block[27588-27652]"
    }, {
      "left" : "doClose(false);",
      "right" : "doClose(false);",
      "info" : "ExpressionStatement[27596-27611]:ExpressionStatement[27596-27611]"
    }, {
      "left" : "myTextFieldPanel.hideHint();",
      "right" : "myTextFieldPanel.hideHint();",
      "info" : "ExpressionStatement[27618-27646]:ExpressionStatement[27618-27646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27800-27985]:Block[27800-27985]"
    }, {
      "left" : "rebuildList(initial ? myInitialIndex : 0, myRebuildDelay, ModalityState.current(), null);",
      "right" : "rebuildList(initial ? myInitialIndex : 0, myRebuildDelay, ModalityState.current(), null);",
      "info" : "ExpressionStatement[27892-27981]:ExpressionStatement[27892-27981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28024-28525]:Block[28024-28525]"
    }, {
      "left" : "final JBPopup hint = myTextFieldPanel.getHint();",
      "right" : "final JBPopup hint = myTextFieldPanel.getHint();",
      "info" : "VariableDeclarationStatement[28030-28078]:VariableDeclarationStatement[28030-28078]"
    }, {
      "left" : "final Object element = getChosenElement();",
      "right" : "final Object element = getChosenElement();",
      "info" : "VariableDeclarationStatement[28083-28125]:VariableDeclarationStatement[28083-28125]"
    }, {
      "left" : "if (hint != null)",
      "right" : "if (hint != null)",
      "info" : "IfStatement[28130-28521]:IfStatement[28130-28521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28148-28521]:Block[28148-28521]"
    }, {
      "left" : "if (element instanceof PsiElement)",
      "right" : "if (element instanceof PsiElement)",
      "info" : "IfStatement[28156-28515]:IfStatement[28156-28515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28191-28258]:Block[28191-28258]"
    }, {
      "left" : "myTextFieldPanel.updateHint((PsiElement)element);",
      "right" : "myTextFieldPanel.updateHint((PsiElement)element);",
      "info" : "ExpressionStatement[28201-28250]:ExpressionStatement[28201-28250]"
    }, {
      "left" : "if (element instanceof DataProvider)",
      "right" : "if (element instanceof DataProvider)",
      "info" : "IfStatement[28270-28515]:IfStatement[28270-28515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28307-28515]:Block[28307-28515]"
    }, {
      "left" : "final Object o = ((DataProvider)element).getData(CommonDataKeys.PSI_ELEMENT.getName());",
      "right" : "final Object o = ((DataProvider)element).getData(CommonDataKeys.PSI_ELEMENT.getName());",
      "info" : "VariableDeclarationStatement[28317-28404]:VariableDeclarationStatement[28317-28404]"
    }, {
      "left" : "if (o instanceof PsiElement)",
      "right" : "if (o instanceof PsiElement)",
      "info" : "IfStatement[28413-28507]:IfStatement[28413-28507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28442-28507]:Block[28442-28507]"
    }, {
      "left" : "myTextFieldPanel.updateHint((PsiElement)o);",
      "right" : "myTextFieldPanel.updateHint((PsiElement)o);",
      "info" : "ExpressionStatement[28454-28497]:ExpressionStatement[28454-28497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28576-28601]:Block[28576-28601]"
    }, {
      "left" : "return pattern;",
      "right" : "return pattern;",
      "info" : "ReturnStatement[28582-28597]:ReturnStatement[28582-28597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28646-28868]:Block[28646-28868]"
    }, {
      "left" : "if (checkDisposed())",
      "right" : "if (checkDisposed())",
      "info" : "IfStatement[28652-28680]:IfStatement[28652-28680]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28673-28680]:ReturnStatement[28673-28680]"
    }, {
      "left" : "if (closeForbidden(ok))",
      "right" : "if (closeForbidden(ok))",
      "info" : "IfStatement[28686-28717]:IfStatement[28686-28717]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28710-28717]:ReturnStatement[28710-28717]"
    }, {
      "left" : "if (postponeCloseWhenListReady(ok))",
      "right" : "if (postponeCloseWhenListReady(ok))",
      "info" : "IfStatement[28722-28765]:IfStatement[28722-28765]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28758-28765]:ReturnStatement[28758-28765]"
    }, {
      "left" : "cancelListUpdater();",
      "right" : "cancelListUpdater();",
      "info" : "ExpressionStatement[28771-28791]:ExpressionStatement[28771-28791]"
    }, {
      "left" : "close(ok);",
      "right" : "close(ok);",
      "info" : "ExpressionStatement[28796-28806]:ExpressionStatement[28796-28806]"
    }, {
      "left" : "clearPostponedOkAction(ok);",
      "right" : "clearPostponedOkAction(ok);",
      "info" : "ExpressionStatement[28812-28839]:ExpressionStatement[28812-28839]"
    }, {
      "left" : "myListModel.clear();",
      "right" : "myListModel.clear();",
      "info" : "ExpressionStatement[28844-28864]:ExpressionStatement[28844-28864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28917-28940]:Block[28917-28940]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28923-28936]:ReturnStatement[28923-28936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28979-29331]:Block[28979-29331]"
    }, {
      "left" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "right" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "info" : "ExpressionStatement[28985-29046]:ExpressionStatement[28985-29046]"
    }, {
      "left" : "if (checkDisposed())",
      "right" : "if (checkDisposed())",
      "info" : "IfStatement[29051-29079]:IfStatement[29051-29079]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29072-29079]:ReturnStatement[29072-29079]"
    }, {
      "left" : "final CalcElementsThread calcElementsThread = myCalcElementsThread;",
      "right" : "final CalcElementsThread calcElementsThread = myCalcElementsThread;",
      "info" : "VariableDeclarationStatement[29085-29152]:VariableDeclarationStatement[29085-29152]"
    }, {
      "left" : "if (calcElementsThread != null)",
      "right" : "if (calcElementsThread != null)",
      "info" : "IfStatement[29157-29296]:IfStatement[29157-29296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29189-29296]:Block[29189-29296]"
    }, {
      "left" : "calcElementsThread.cancel();",
      "right" : "calcElementsThread.cancel();",
      "info" : "ExpressionStatement[29197-29225]:ExpressionStatement[29197-29225]"
    }, {
      "left" : "backgroundCalculationFinished(Collections.emptyList(), 0);",
      "right" : "backgroundCalculationFinished(Collections.emptyList(), 0);",
      "info" : "ExpressionStatement[29232-29290]:ExpressionStatement[29232-29290]"
    }, {
      "left" : "myListUpdater.cancelAll();",
      "right" : "myListUpdater.cancelAll();",
      "info" : "ExpressionStatement[29301-29327]:ExpressionStatement[29301-29327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29390-29723]:Block[29390-29723]"
    }, {
      "left" : "if (!isToFixLostTyping())",
      "right" : "if (!isToFixLostTyping())",
      "info" : "IfStatement[29396-29435]:IfStatement[29396-29435]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29422-29435]:ReturnStatement[29422-29435]"
    }, {
      "left" : "final String text = getTrimmedText();",
      "right" : "final String text = getTrimmedText();",
      "info" : "VariableDeclarationStatement[29441-29478]:VariableDeclarationStatement[29441-29478]"
    }, {
      "left" : "if (ok && myCalcElementsThread != null && !text.isEmpty())",
      "right" : "if (ok && myCalcElementsThread != null && !text.isEmpty())",
      "info" : "IfStatement[29483-29700]:IfStatement[29483-29700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29542-29700]:Block[29542-29700]"
    }, {
      "left" : "myPostponedOkAction = new ActionCallback();",
      "right" : "myPostponedOkAction = new ActionCallback();",
      "info" : "ExpressionStatement[29550-29593]:ExpressionStatement[29550-29593]"
    }, {
      "left" : "IdeFocusManager.getInstance(myProject).typeAheadUntil(myPostponedOkAction);",
      "right" : "IdeFocusManager.getInstance(myProject).typeAheadUntil(myPostponedOkAction);",
      "info" : "ExpressionStatement[29600-29675]:ExpressionStatement[29600-29675]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29682-29694]:ReturnStatement[29682-29694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29706-29719]:ReturnStatement[29706-29719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29767-29853]:Block[29767-29853]"
    }, {
      "left" : "return StringUtil.trimLeading(StringUtil.notNullize(myTextField.getText()));",
      "right" : "return StringUtil.trimLeading(StringUtil.notNullize(myTextField.getText()));",
      "info" : "ReturnStatement[29773-29849]:ReturnStatement[29773-29849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29909-29951]:Block[29909-29951]"
    }, {
      "left" : "myFixLostTyping = fixLostTyping;",
      "right" : "myFixLostTyping = fixLostTyping;",
      "info" : "ExpressionStatement[29915-29947]:ExpressionStatement[29915-29947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29993-30071]:Block[29993-30071]"
    }, {
      "left" : "return myFixLostTyping && Registry.is(\"actionSystem.fixLostTyping\");",
      "right" : "return myFixLostTyping && Registry.is(\"actionSystem.fixLostTyping\");",
      "info" : "ReturnStatement[29999-30067]:ReturnStatement[29999-30067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30157-30940]:Block[30157-30940]"
    }, {
      "left" : "String[] cached = getNamesSync(checkboxState);",
      "right" : "String[] cached = getNamesSync(checkboxState);",
      "info" : "VariableDeclarationStatement[30163-30209]:VariableDeclarationStatement[30163-30209]"
    }, {
      "left" : "if (cached != null)",
      "right" : "if (cached != null)",
      "info" : "IfStatement[30214-30248]:IfStatement[30214-30248]"
    }, {
      "left" : "return cached;",
      "right" : "return cached;",
      "info" : "ReturnStatement[30234-30248]:ReturnStatement[30234-30248]"
    }, {
      "left" : "if (checkboxState &&\n        myModel instanceof ContributorsBasedGotoByModel &&\n        ((ContributorsBasedGotoByModel)myModel).sameNamesForProjectAndLibraries() &&\n        getNamesSync(false) != null)",
      "right" : "if (checkboxState &&\n        myModel instanceof ContributorsBasedGotoByModel &&\n        ((ContributorsBasedGotoByModel)myModel).sameNamesForProjectAndLibraries() &&\n        getNamesSync(false) != null)",
      "info" : "IfStatement[30254-30687]:IfStatement[30254-30687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30456-30687]:Block[30456-30687]"
    }, {
      "left" : "String[] allNames = getNamesSync(false);",
      "right" : "String[] allNames = getNamesSync(false);",
      "info" : "VariableDeclarationStatement[30582-30622]:VariableDeclarationStatement[30582-30622]"
    }, {
      "left" : "setNamesSync(true, allNames);",
      "right" : "setNamesSync(true, allNames);",
      "info" : "ExpressionStatement[30629-30658]:ExpressionStatement[30629-30658]"
    }, {
      "left" : "return allNames;",
      "right" : "return allNames;",
      "info" : "ReturnStatement[30665-30681]:ReturnStatement[30665-30681]"
    }, {
      "left" : "String[] result = myModel.getNames(checkboxState);",
      "right" : "String[] result = myModel.getNames(checkboxState);",
      "info" : "VariableDeclarationStatement[30693-30743]:VariableDeclarationStatement[30693-30743]"
    }, {
      "left" : "assert result != null : \"Model \"+myModel+ \"(\"+myModel.getClass()+\") returned null names\";",
      "right" : "assert result != null : \"Model \"+myModel+ \"(\"+myModel.getClass()+\") returned null names\";",
      "info" : "AssertStatement[30786-30875]:AssertStatement[30786-30875]"
    }, {
      "left" : "setNamesSync(checkboxState, result);",
      "right" : "setNamesSync(checkboxState, result);",
      "info" : "ExpressionStatement[30880-30916]:ExpressionStatement[30880-30916]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30922-30936]:ReturnStatement[30922-30936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31003-31174]:Block[31003-31174]"
    }, {
      "left" : "if (ourLoadNamesEachTime)",
      "right" : "if (ourLoadNamesEachTime)",
      "info" : "IfStatement[31009-31130]:IfStatement[31009-31130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31035-31130]:Block[31035-31130]"
    }, {
      "left" : "setNamesSync(checkboxState, null);",
      "right" : "setNamesSync(checkboxState, null);",
      "info" : "ExpressionStatement[31043-31077]:ExpressionStatement[31043-31077]"
    }, {
      "left" : "return ensureNamesLoaded(checkboxState);",
      "right" : "return ensureNamesLoaded(checkboxState);",
      "info" : "ReturnStatement[31084-31124]:ReturnStatement[31084-31124]"
    }, {
      "left" : "return getNamesSync(checkboxState);",
      "right" : "return getNamesSync(checkboxState);",
      "info" : "ReturnStatement[31135-31170]:ReturnStatement[31135-31170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31231-31316]:Block[31231-31316]"
    }, {
      "left" : "synchronized (myNames) {\n      return myNames[checkboxState ? 1 : 0];\n    }",
      "right" : "synchronized (myNames) {\n      return myNames[checkboxState ? 1 : 0];\n    }",
      "info" : "SynchronizedStatement[31237-31312]:SynchronizedStatement[31237-31312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31260-31312]:Block[31260-31312]"
    }, {
      "left" : "return myNames[checkboxState ? 1 : 0];",
      "right" : "return myNames[checkboxState ? 1 : 0];",
      "info" : "ReturnStatement[31268-31306]:ReturnStatement[31268-31306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31391-31417]:Block[31391-31417]"
    }, {
      "left" : "return elements;",
      "right" : "return elements;",
      "info" : "ReturnStatement[31397-31413]:ReturnStatement[31397-31413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31619-34236]:Block[31619-34236]"
    }, {
      "left" : "final JLayeredPane layeredPane = getLayeredPane();",
      "right" : "final JLayeredPane layeredPane = getLayeredPane();",
      "info" : "VariableDeclarationStatement[31625-31675]:VariableDeclarationStatement[31625-31675]"
    }, {
      "left" : "final Dimension preferredTextFieldPanelSize = myTextFieldPanel.getPreferredSize();",
      "right" : "final Dimension preferredTextFieldPanelSize = myTextFieldPanel.getPreferredSize();",
      "info" : "VariableDeclarationStatement[31680-31762]:VariableDeclarationStatement[31680-31762]"
    }, {
      "left" : "final int x = (layeredPane.getWidth() - preferredTextFieldPanelSize.width) / 2;",
      "right" : "final int x = (layeredPane.getWidth() - preferredTextFieldPanelSize.width) / 2;",
      "info" : "VariableDeclarationStatement[31767-31846]:VariableDeclarationStatement[31767-31846]"
    }, {
      "left" : "final int paneHeight = layeredPane.getHeight();",
      "right" : "final int paneHeight = layeredPane.getHeight();",
      "info" : "VariableDeclarationStatement[31851-31898]:VariableDeclarationStatement[31851-31898]"
    }, {
      "left" : "final int y = paneHeight / 3 - preferredTextFieldPanelSize.height / 2;",
      "right" : "final int y = paneHeight / 3 - preferredTextFieldPanelSize.height / 2;",
      "info" : "VariableDeclarationStatement[31903-31973]:VariableDeclarationStatement[31903-31973]"
    }, {
      "left" : "VISIBLE_LIST_SIZE_LIMIT = Math.max\n      (10, (paneHeight - (y + preferredTextFieldPanelSize.height)) / (preferredTextFieldPanelSize.height / 2) - 1);",
      "right" : "VISIBLE_LIST_SIZE_LIMIT = Math.max\n      (10, (paneHeight - (y + preferredTextFieldPanelSize.height)) / (preferredTextFieldPanelSize.height / 2) - 1);",
      "info" : "ExpressionStatement[31979-32129]:ExpressionStatement[31979-32129]"
    }, {
      "left" : "ComponentPopupBuilder builder = JBPopupFactory.getInstance().createComponentPopupBuilder(myTextFieldPanel, myTextField);",
      "right" : "ComponentPopupBuilder builder = JBPopupFactory.getInstance().createComponentPopupBuilder(myTextFieldPanel, myTextField);",
      "info" : "VariableDeclarationStatement[32135-32255]:VariableDeclarationStatement[32135-32255]"
    }, {
      "left" : "builder.setLocateWithinScreenBounds(false);",
      "right" : "builder.setLocateWithinScreenBounds(false);",
      "info" : "ExpressionStatement[32260-32303]:ExpressionStatement[32260-32303]"
    }, {
      "left" : "builder.setKeyEventHandler(new BooleanFunction<KeyEvent>() {\n      @Override\n      public boolean fun(KeyEvent event) {\n        if (myTextPopup == null || !AbstractPopup.isCloseRequest(event) || !myTextPopup.isCancelKeyEnabled()) {\n          return false;\n        }\n\n        IdeFocusManager focusManager = IdeFocusManager.getInstance(myProject);\n        if (isDescendingFromTemporarilyFocusableToolWindow(focusManager.getFocusOwner())) {\n          focusManager.requestFocus(myTextField, true);\n          return false;\n        }\n        else {\n          myTextPopup.cancel(event);\n          return true;\n        }\n      }\n    }).setCancelCallback(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        myTextPopup = null;\n        close(false);\n        return Boolean.TRUE;\n      }\n    }).setFocusable(true).setRequestFocus(true).setModalContext(false).setCancelOnClickOutside(false);",
      "right" : "builder.setKeyEventHandler(new BooleanFunction<KeyEvent>() {\n      @Override\n      public boolean fun(KeyEvent event) {\n        if (myTextPopup == null || !AbstractPopup.isCloseRequest(event) || !myTextPopup.isCancelKeyEnabled()) {\n          return false;\n        }\n\n        IdeFocusManager focusManager = IdeFocusManager.getInstance(myProject);\n        if (isDescendingFromTemporarilyFocusableToolWindow(focusManager.getFocusOwner())) {\n          focusManager.requestFocus(myTextField, true);\n          return false;\n        }\n        else {\n          myTextPopup.cancel(event);\n          return true;\n        }\n      }\n    }).setCancelCallback(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        myTextPopup = null;\n        close(false);\n        return Boolean.TRUE;\n      }\n    }).setFocusable(true).setRequestFocus(true).setModalContext(false).setCancelOnClickOutside(false);",
      "info" : "ExpressionStatement[32308-33220]:ExpressionStatement[32308-33220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32426-32928]:Block[32426-32928]"
    }, {
      "left" : "if (myTextPopup == null || !AbstractPopup.isCloseRequest(event) || !myTextPopup.isCancelKeyEnabled())",
      "right" : "if (myTextPopup == null || !AbstractPopup.isCloseRequest(event) || !myTextPopup.isCancelKeyEnabled())",
      "info" : "IfStatement[32436-32573]:IfStatement[32436-32573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32538-32573]:Block[32538-32573]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32550-32563]:ReturnStatement[32550-32563]"
    }, {
      "left" : "IdeFocusManager focusManager = IdeFocusManager.getInstance(myProject);",
      "right" : "IdeFocusManager focusManager = IdeFocusManager.getInstance(myProject);",
      "info" : "VariableDeclarationStatement[32583-32653]:VariableDeclarationStatement[32583-32653]"
    }, {
      "left" : "if (isDescendingFromTemporarilyFocusableToolWindow(focusManager.getFocusOwner()))",
      "right" : "if (isDescendingFromTemporarilyFocusableToolWindow(focusManager.getFocusOwner()))",
      "info" : "IfStatement[32662-32920]:IfStatement[32662-32920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32744-32835]:Block[32744-32835]"
    }, {
      "left" : "focusManager.requestFocus(myTextField, true);",
      "right" : "focusManager.requestFocus(myTextField, true);",
      "info" : "ExpressionStatement[32756-32801]:ExpressionStatement[32756-32801]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32812-32825]:ReturnStatement[32812-32825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32849-32920]:Block[32849-32920]"
    }, {
      "left" : "myTextPopup.cancel(event);",
      "right" : "myTextPopup.cancel(event);",
      "info" : "ExpressionStatement[32861-32887]:ExpressionStatement[32861-32887]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32898-32910]:ReturnStatement[32898-32910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33029-33117]:Block[33029-33117]"
    }, {
      "left" : "myTextPopup = null;",
      "right" : "myTextPopup = null;",
      "info" : "ExpressionStatement[33039-33058]:ExpressionStatement[33039-33058]"
    }, {
      "left" : "close(false);",
      "right" : "close(false);",
      "info" : "ExpressionStatement[33067-33080]:ExpressionStatement[33067-33080]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[33089-33109]:ReturnStatement[33089-33109]"
    }, {
      "left" : "Point point = new Point(x, y);",
      "right" : "Point point = new Point(x, y);",
      "info" : "VariableDeclarationStatement[33226-33256]:VariableDeclarationStatement[33226-33256]"
    }, {
      "left" : "SwingUtilities.convertPointToScreen(point, layeredPane);",
      "right" : "SwingUtilities.convertPointToScreen(point, layeredPane);",
      "info" : "ExpressionStatement[33261-33317]:ExpressionStatement[33261-33317]"
    }, {
      "left" : "Rectangle bounds = new Rectangle(point, new Dimension(preferredTextFieldPanelSize.width + 20, preferredTextFieldPanelSize.height));",
      "right" : "Rectangle bounds = new Rectangle(point, new Dimension(preferredTextFieldPanelSize.width + 20, preferredTextFieldPanelSize.height));",
      "info" : "VariableDeclarationStatement[33322-33453]:VariableDeclarationStatement[33322-33453]"
    }, {
      "left" : "myTextPopup = builder.createPopup();",
      "right" : "myTextPopup = builder.createPopup();",
      "info" : "ExpressionStatement[33458-33494]:ExpressionStatement[33458-33494]"
    }, {
      "left" : "myTextPopup.setSize(bounds.getSize());",
      "right" : "myTextPopup.setSize(bounds.getSize());",
      "info" : "ExpressionStatement[33499-33537]:ExpressionStatement[33499-33537]"
    }, {
      "left" : "myTextPopup.setLocation(bounds.getLocation());",
      "right" : "myTextPopup.setLocation(bounds.getLocation());",
      "info" : "ExpressionStatement[33542-33588]:ExpressionStatement[33542-33588]"
    }, {
      "left" : "MnemonicHelper.init(myTextFieldPanel);",
      "right" : "MnemonicHelper.init(myTextFieldPanel);",
      "info" : "ExpressionStatement[33594-33632]:ExpressionStatement[33594-33632]"
    }, {
      "left" : "if (myProject != null && !myProject.isDefault())",
      "right" : "if (myProject != null && !myProject.isDefault())",
      "info" : "IfStatement[33637-33776]:IfStatement[33637-33776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33686-33776]:Block[33686-33776]"
    }, {
      "left" : "DaemonCodeAnalyzer.getInstance(myProject).disableUpdateByTimer(myTextPopup);",
      "right" : "DaemonCodeAnalyzer.getInstance(myProject).disableUpdateByTimer(myTextPopup);",
      "info" : "ExpressionStatement[33694-33770]:ExpressionStatement[33694-33770]"
    }, {
      "left" : "Disposer.register(myTextPopup, new Disposable() {\n      @Override\n      public void dispose() {\n        cancelListUpdater();\n      }\n    });",
      "right" : "Disposer.register(myTextPopup, new Disposable() {\n      @Override\n      public void dispose() {\n        cancelListUpdater();\n      }\n    });",
      "info" : "ExpressionStatement[33782-33922]:ExpressionStatement[33782-33922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33876-33914]:Block[33876-33914]"
    }, {
      "left" : "cancelListUpdater();",
      "right" : "cancelListUpdater();",
      "info" : "ExpressionStatement[33886-33906]:ExpressionStatement[33886-33906]"
    }, {
      "left" : "myTextPopup.show(layeredPane);",
      "right" : "myTextPopup.show(layeredPane);",
      "info" : "ExpressionStatement[33927-33957]:ExpressionStatement[33927-33957]"
    }, {
      "left" : "if (myTextPopup instanceof AbstractPopup)",
      "right" : "if (myTextPopup instanceof AbstractPopup)",
      "info" : "IfStatement[33962-34232]:IfStatement[33962-34232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34004-34232]:Block[34004-34232]"
    }, {
      "left" : "Window window = ((AbstractPopup)myTextPopup).getPopupWindow();",
      "right" : "Window window = ((AbstractPopup)myTextPopup).getPopupWindow();",
      "info" : "VariableDeclarationStatement[34012-34074]:VariableDeclarationStatement[34012-34074]"
    }, {
      "left" : "if (window instanceof JDialog)",
      "right" : "if (window instanceof JDialog)",
      "info" : "IfStatement[34081-34226]:IfStatement[34081-34226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34112-34226]:Block[34112-34226]"
    }, {
      "left" : "((JDialog)window).getRootPane().putClientProperty(WindowAction.NO_WINDOW_ACTIONS, Boolean.TRUE);",
      "right" : "((JDialog)window).getRootPane().putClientProperty(WindowAction.NO_WINDOW_ACTIONS, Boolean.TRUE);",
      "info" : "ExpressionStatement[34122-34218]:ExpressionStatement[34122-34218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34278-34950]:Block[34278-34950]"
    }, {
      "left" : "JLayeredPane layeredPane;",
      "right" : "JLayeredPane layeredPane;",
      "info" : "VariableDeclarationStatement[34284-34309]:VariableDeclarationStatement[34284-34309]"
    }, {
      "left" : "final Window window = WindowManager.getInstance().suggestParentWindow(myProject);",
      "right" : "final Window window = WindowManager.getInstance().suggestParentWindow(myProject);",
      "info" : "VariableDeclarationStatement[34314-34395]:VariableDeclarationStatement[34314-34395]"
    }, {
      "left" : "Component parent = UIUtil.findUltimateParent(window);",
      "right" : "Component parent = UIUtil.findUltimateParent(window);",
      "info" : "VariableDeclarationStatement[34401-34454]:VariableDeclarationStatement[34401-34454]"
    }, {
      "left" : "if (parent instanceof JFrame)",
      "right" : "if (parent instanceof JFrame)",
      "info" : "IfStatement[34460-34922]:IfStatement[34460-34922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34490-34552]:Block[34490-34552]"
    }, {
      "left" : "layeredPane = ((JFrame)parent).getLayeredPane();",
      "right" : "layeredPane = ((JFrame)parent).getLayeredPane();",
      "info" : "ExpressionStatement[34498-34546]:ExpressionStatement[34498-34546]"
    }, {
      "left" : "if (parent instanceof JDialog)",
      "right" : "if (parent instanceof JDialog)",
      "info" : "IfStatement[34562-34922]:IfStatement[34562-34922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34593-34656]:Block[34593-34656]"
    }, {
      "left" : "layeredPane = ((JDialog)parent).getLayeredPane();",
      "right" : "layeredPane = ((JDialog)parent).getLayeredPane();",
      "info" : "ExpressionStatement[34601-34650]:ExpressionStatement[34601-34650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34666-34922]:Block[34666-34922]"
    }, {
      "left" : "throw new IllegalStateException(\"cannot find parent window: project=\" + myProject +\n                                      (myProject != null ? \"; open=\" + myProject.isOpen() : \"\") +\n                                      \"; window=\" + window);",
      "right" : "throw new IllegalStateException(\"cannot find parent window: project=\" + myProject +\n                                      (myProject != null ? \"; open=\" + myProject.isOpen() : \"\") +\n                                      \"; window=\" + window);",
      "info" : "ThrowStatement[34674-34916]:ThrowStatement[34674-34916]"
    }, {
      "left" : "return layeredPane;",
      "right" : "return layeredPane;",
      "info" : "ReturnStatement[34927-34946]:ReturnStatement[34927-34946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35183-36908]:Block[35183-36908]"
    }, {
      "left" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "right" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "info" : "ExpressionStatement[35189-35250]:ExpressionStatement[35189-35250]"
    }, {
      "left" : "if (!myInitialized)",
      "right" : "if (!myInitialized)",
      "info" : "IfStatement[35255-35296]:IfStatement[35255-35296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35275-35296]:Block[35275-35296]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35283-35290]:ReturnStatement[35283-35290]"
    }, {
      "left" : "myAlarm.cancelAllRequests();",
      "right" : "myAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[35302-35330]:ExpressionStatement[35302-35330]"
    }, {
      "left" : "if (delay > 0)",
      "right" : "if (delay > 0)",
      "info" : "IfStatement[35336-35593]:IfStatement[35336-35593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35351-35593]:Block[35351-35593]"
    }, {
      "left" : "myAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          rebuildList(pos, 0, modalityState, postRunnable);\n        }\n      }, delay, ModalityState.stateForComponent(myTextField));",
      "right" : "myAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          rebuildList(pos, 0, modalityState, postRunnable);\n        }\n      }, delay, ModalityState.stateForComponent(myTextField));",
      "info" : "ExpressionStatement[35359-35573]:ExpressionStatement[35359-35573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35439-35510]:Block[35439-35510]"
    }, {
      "left" : "rebuildList(pos, 0, modalityState, postRunnable);",
      "right" : "rebuildList(pos, 0, modalityState, postRunnable);",
      "info" : "ExpressionStatement[35451-35500]:ExpressionStatement[35451-35500]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35580-35587]:ReturnStatement[35580-35587]"
    }, {
      "left" : "myListUpdater.cancelAll();",
      "right" : "myListUpdater.cancelAll();",
      "info" : "ExpressionStatement[35599-35625]:ExpressionStatement[35599-35625]"
    }, {
      "left" : "final CalcElementsThread calcElementsThread = myCalcElementsThread;",
      "right" : "final CalcElementsThread calcElementsThread = myCalcElementsThread;",
      "info" : "VariableDeclarationStatement[35631-35698]:VariableDeclarationStatement[35631-35698]"
    }, {
      "left" : "if (calcElementsThread != null)",
      "right" : "if (calcElementsThread != null)",
      "info" : "IfStatement[35703-35777]:IfStatement[35703-35777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35735-35777]:Block[35735-35777]"
    }, {
      "left" : "calcElementsThread.cancel();",
      "right" : "calcElementsThread.cancel();",
      "info" : "ExpressionStatement[35743-35771]:ExpressionStatement[35743-35771]"
    }, {
      "left" : "final String text = getTrimmedText();",
      "right" : "final String text = getTrimmedText();",
      "info" : "VariableDeclarationStatement[35783-35820]:VariableDeclarationStatement[35783-35820]"
    }, {
      "left" : "if (!canShowListForEmptyPattern() && text.isEmpty())",
      "right" : "if (!canShowListForEmptyPattern() && text.isEmpty())",
      "info" : "IfStatement[35825-36031]:IfStatement[35825-36031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35878-36031]:Block[35878-36031]"
    }, {
      "left" : "myListModel.clear();",
      "right" : "myListModel.clear();",
      "info" : "ExpressionStatement[35886-35906]:ExpressionStatement[35886-35906]"
    }, {
      "left" : "hideList();",
      "right" : "hideList();",
      "info" : "ExpressionStatement[35913-35924]:ExpressionStatement[35913-35924]"
    }, {
      "left" : "myTextFieldPanel.hideHint();",
      "right" : "myTextFieldPanel.hideHint();",
      "info" : "ExpressionStatement[35931-35959]:ExpressionStatement[35931-35959]"
    }, {
      "left" : "myCard.show(myCardContainer, CHECK_BOX_CARD);",
      "right" : "myCard.show(myCardContainer, CHECK_BOX_CARD);",
      "info" : "ExpressionStatement[35966-36011]:ExpressionStatement[35966-36011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36018-36025]:ReturnStatement[36018-36025]"
    }, {
      "left" : "ListCellRenderer cellRenderer = myList.getCellRenderer();",
      "right" : "ListCellRenderer cellRenderer = myList.getCellRenderer();",
      "info" : "VariableDeclarationStatement[36037-36094]:VariableDeclarationStatement[36037-36094]"
    }, {
      "left" : "if (cellRenderer instanceof ExpandedItemListCellRendererWrapper)",
      "right" : "if (cellRenderer instanceof ExpandedItemListCellRendererWrapper)",
      "info" : "IfStatement[36099-36258]:IfStatement[36099-36258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36164-36258]:Block[36164-36258]"
    }, {
      "left" : "cellRenderer = ((ExpandedItemListCellRendererWrapper)cellRenderer).getWrappee();",
      "right" : "cellRenderer = ((ExpandedItemListCellRendererWrapper)cellRenderer).getWrappee();",
      "info" : "ExpressionStatement[36172-36252]:ExpressionStatement[36172-36252]"
    }, {
      "left" : "if (cellRenderer instanceof MatcherHolder)",
      "right" : "if (cellRenderer instanceof MatcherHolder)",
      "info" : "IfStatement[36263-36529]:IfStatement[36263-36529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36306-36529]:Block[36306-36529]"
    }, {
      "left" : "final String pattern = transformPattern(text);",
      "right" : "final String pattern = transformPattern(text);",
      "info" : "VariableDeclarationStatement[36314-36360]:VariableDeclarationStatement[36314-36360]"
    }, {
      "left" : "final Matcher matcher = buildPatternMatcher(isSearchInAnyPlace() ? \"*\" + pattern : pattern);",
      "right" : "final Matcher matcher = buildPatternMatcher(isSearchInAnyPlace() ? \"*\" + pattern : pattern);",
      "info" : "VariableDeclarationStatement[36367-36459]:VariableDeclarationStatement[36367-36459]"
    }, {
      "left" : "((MatcherHolder)cellRenderer).setPatternMatcher(matcher);",
      "right" : "((MatcherHolder)cellRenderer).setPatternMatcher(matcher);",
      "info" : "ExpressionStatement[36466-36523]:ExpressionStatement[36466-36523]"
    }, {
      "left" : "scheduleCalcElements(text, myCheckBox.isSelected(), modalityState, new Consumer<Set<?>>() {\n      @Override\n      public void consume(Set<?> elements) {\n        ApplicationManager.getApplication().assertIsDispatchThread();\n        backgroundCalculationFinished(elements, pos);\n\n        if (postRunnable != null) {\n          postRunnable.run();\n        }\n      }\n    });",
      "right" : "scheduleCalcElements(text, myCheckBox.isSelected(), modalityState, new Consumer<Set<?>>() {\n      @Override\n      public void consume(Set<?> elements) {\n        ApplicationManager.getApplication().assertIsDispatchThread();\n        backgroundCalculationFinished(elements, pos);\n\n        if (postRunnable != null) {\n          postRunnable.run();\n        }\n      }\n    });",
      "info" : "ExpressionStatement[36535-36904]:ExpressionStatement[36535-36904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36686-36896]:Block[36686-36896]"
    }, {
      "left" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "right" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "info" : "ExpressionStatement[36696-36757]:ExpressionStatement[36696-36757]"
    }, {
      "left" : "backgroundCalculationFinished(elements, pos);",
      "right" : "backgroundCalculationFinished(elements, pos);",
      "info" : "ExpressionStatement[36766-36811]:ExpressionStatement[36766-36811]"
    }, {
      "left" : "if (postRunnable != null)",
      "right" : "if (postRunnable != null)",
      "info" : "IfStatement[36821-36888]:IfStatement[36821-36888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36847-36888]:Block[36847-36888]"
    }, {
      "left" : "postRunnable.run();",
      "right" : "postRunnable.run();",
      "info" : "ExpressionStatement[36859-36878]:ExpressionStatement[36859-36878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36991-37194]:Block[36991-37194]"
    }, {
      "left" : "myCalcElementsThread = null;",
      "right" : "myCalcElementsThread = null;",
      "info" : "ExpressionStatement[36997-37025]:ExpressionStatement[36997-37025]"
    }, {
      "left" : "setElementsToList(toSelect, result);",
      "right" : "setElementsToList(toSelect, result);",
      "info" : "ExpressionStatement[37030-37066]:ExpressionStatement[37030-37066]"
    }, {
      "left" : "myList.repaint();",
      "right" : "myList.repaint();",
      "info" : "ExpressionStatement[37071-37088]:ExpressionStatement[37071-37088]"
    }, {
      "left" : "chosenElementMightChange();",
      "right" : "chosenElementMightChange();",
      "info" : "ExpressionStatement[37093-37120]:ExpressionStatement[37093-37120]"
    }, {
      "left" : "if (result.isEmpty())",
      "right" : "if (result.isEmpty())",
      "info" : "IfStatement[37126-37190]:IfStatement[37126-37190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37148-37190]:Block[37148-37190]"
    }, {
      "left" : "myTextFieldPanel.hideHint();",
      "right" : "myTextFieldPanel.hideHint();",
      "info" : "ExpressionStatement[37156-37184]:ExpressionStatement[37156-37184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37588-37640]:Block[37581-37633]"
    }, {
      "left" : "return myShowListAfterCompletionKeyStroke;",
      "right" : "return myShowListAfterCompletionKeyStroke;",
      "info" : "ReturnStatement[37594-37636]:ReturnStatement[37587-37629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37717-38810]:Block[37710-38803]"
    }, {
      "left" : "myListUpdater.cancelAll();",
      "right" : "myListUpdater.cancelAll();",
      "info" : "ExpressionStatement[37723-37749]:ExpressionStatement[37716-37742]"
    }, {
      "left" : "if (checkDisposed())",
      "right" : "if (checkDisposed())",
      "info" : "IfStatement[37754-37782]:IfStatement[37747-37775]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37775-37782]:ReturnStatement[37768-37775]"
    }, {
      "left" : "if (elements.isEmpty())",
      "right" : "if (elements.isEmpty())",
      "info" : "IfStatement[37787-37993]:IfStatement[37780-37986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37811-37993]:Block[37804-37986]"
    }, {
      "left" : "myListModel.clear();",
      "right" : "myListModel.clear();",
      "info" : "ExpressionStatement[37819-37839]:ExpressionStatement[37812-37832]"
    }, {
      "left" : "myTextField.setForeground(JBColor.red);",
      "right" : "myTextField.setForeground(JBColor.red);",
      "info" : "ExpressionStatement[37846-37885]:ExpressionStatement[37839-37878]"
    }, {
      "left" : "myListUpdater.cancelAll();",
      "right" : "myListUpdater.cancelAll();",
      "info" : "ExpressionStatement[37892-37918]:ExpressionStatement[37885-37911]"
    }, {
      "left" : "hideList();",
      "right" : "hideList();",
      "info" : "ExpressionStatement[37925-37936]:ExpressionStatement[37918-37929]"
    }, {
      "left" : "clearPostponedOkAction(false);",
      "right" : "clearPostponedOkAction(false);",
      "info" : "ExpressionStatement[37943-37973]:ExpressionStatement[37936-37966]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37980-37987]:ReturnStatement[37973-37980]"
    }, {
      "left" : "Object[] oldElements = myListModel.toArray();",
      "right" : "Object[] oldElements = myListModel.toArray();",
      "info" : "VariableDeclarationStatement[37999-38044]:VariableDeclarationStatement[37992-38037]"
    }, {
      "left" : "Object[] newElements = elements.toArray();",
      "right" : "Object[] newElements = elements.toArray();",
      "info" : "VariableDeclarationStatement[38049-38091]:VariableDeclarationStatement[38042-38084]"
    }, {
      "left" : "List<ModelDiff.Cmd> commands = ModelDiff.createDiffCmds(myListModel, oldElements, newElements);",
      "right" : "List<ModelDiff.Cmd> commands = ModelDiff.createDiffCmds(myListModel, oldElements, newElements);",
      "info" : "VariableDeclarationStatement[38096-38191]:VariableDeclarationStatement[38089-38184]"
    }, {
      "left" : "if (commands == null)",
      "right" : "if (commands == null)",
      "info" : "IfStatement[38196-38303]:IfStatement[38189-38296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38218-38303]:Block[38211-38296]"
    }, {
      "left" : "myListUpdater.doPostponedOkIfNeeded();",
      "right" : "myListUpdater.doPostponedOkIfNeeded();",
      "info" : "ExpressionStatement[38226-38264]:ExpressionStatement[38219-38257]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38271-38278]:ReturnStatement[38264-38271]"
    }, {
      "left" : "myTextField.setForeground(UIUtil.getTextFieldForeground());",
      "right" : "myTextField.setForeground(UIUtil.getTextFieldForeground());",
      "info" : "ExpressionStatement[38309-38368]:ExpressionStatement[38302-38361]"
    }, {
      "left" : "if (commands.isEmpty())",
      "right" : "if (commands.isEmpty())",
      "info" : "IfStatement[38373-38806]:IfStatement[38366-38799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38397-38721]:Block[38390-38714]"
    }, {
      "left" : "if (pos <= 0)",
      "right" : "if (pos <= 0)",
      "info" : "IfStatement[38405-38475]:IfStatement[38398-38468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38419-38475]:Block[38412-38468]"
    }, {
      "left" : "pos = detectBestStatisticalPosition();",
      "right" : "pos = detectBestStatisticalPosition();",
      "info" : "ExpressionStatement[38429-38467]:ExpressionStatement[38422-38460]"
    }, {
      "left" : "ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));",
      "right" : "ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));",
      "info" : "ExpressionStatement[38483-38559]:ExpressionStatement[38476-38552]"
    }, {
      "left" : "myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));",
      "right" : "myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));",
      "info" : "ExpressionStatement[38566-38656]:ExpressionStatement[38559-38649]"
    }, {
      "left" : "showList();",
      "right" : "showList();",
      "info" : "ExpressionStatement[38663-38674]:ExpressionStatement[38656-38667]"
    }, {
      "left" : "myTextFieldPanel.repositionHint();",
      "right" : "myTextFieldPanel.repositionHint();",
      "info" : "ExpressionStatement[38681-38715]:ExpressionStatement[38674-38708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38731-38806]:Block[38724-38799]"
    }, {
      "left" : "showList();",
      "right" : "showList();",
      "info" : "ExpressionStatement[38739-38750]:ExpressionStatement[38732-38743]"
    }, {
      "left" : "myListUpdater.appendToModel(commands, pos);",
      "right" : "myListUpdater.appendToModel(commands, pos);",
      "info" : "ExpressionStatement[38757-38800]:ExpressionStatement[38750-38793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38858-40132]:Block[38851-40125]"
    }, {
      "left" : "if (myModel instanceof Comparator)",
      "right" : "if (myModel instanceof Comparator)",
      "info" : "IfStatement[38864-38922]:IfStatement[38857-38915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38899-38922]:Block[38892-38915]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[38907-38916]:ReturnStatement[38900-38909]"
    }, {
      "left" : "int best = 0;",
      "right" : "int best = 0;",
      "info" : "VariableDeclarationStatement[38928-38941]:VariableDeclarationStatement[38921-38934]"
    }, {
      "left" : "int bestPosition = 0;",
      "right" : "int bestPosition = 0;",
      "info" : "VariableDeclarationStatement[38946-38967]:VariableDeclarationStatement[38939-38960]"
    }, {
      "left" : "int bestMatch = Integer.MIN_VALUE;",
      "right" : "int bestMatch = Integer.MIN_VALUE;",
      "info" : "VariableDeclarationStatement[38972-39006]:VariableDeclarationStatement[38965-38999]"
    }, {
      "left" : "final int count = myListModel.getSize();",
      "right" : "final int count = myListModel.getSize();",
      "info" : "VariableDeclarationStatement[39011-39051]:VariableDeclarationStatement[39004-39044]"
    }, {
      "left" : "Matcher matcher = buildPatternMatcher(transformPattern(getTrimmedText()));",
      "right" : "Matcher matcher = buildPatternMatcher(transformPattern(getTrimmedText()));",
      "info" : "VariableDeclarationStatement[39057-39131]:VariableDeclarationStatement[39050-39124]"
    }, {
      "left" : "final String statContext = statisticsContext();",
      "right" : "final String statContext = statisticsContext();",
      "info" : "VariableDeclarationStatement[39137-39184]:VariableDeclarationStatement[39130-39177]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[39189-39971]:ForStatement[39182-39964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39221-39971]:Block[39214-39964]"
    }, {
      "left" : "final Object modelElement = myListModel.getElementAt(i);",
      "right" : "final Object modelElement = myListModel.getElementAt(i);",
      "info" : "VariableDeclarationStatement[39229-39285]:VariableDeclarationStatement[39222-39278]"
    }, {
      "left" : "String text = EXTRA_ELEM.equals(modelElement) || NON_PREFIX_SEPARATOR.equals(modelElement) ? null : myModel.getFullName(modelElement);",
      "right" : "String text = EXTRA_ELEM.equals(modelElement) || NON_PREFIX_SEPARATOR.equals(modelElement) ? null : myModel.getFullName(modelElement);",
      "info" : "VariableDeclarationStatement[39292-39426]:VariableDeclarationStatement[39285-39419]"
    }, {
      "left" : "if (text != null)",
      "right" : "if (text != null)",
      "info" : "IfStatement[39433-39965]:IfStatement[39426-39958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39451-39965]:Block[39444-39958]"
    }, {
      "left" : "String shortName = myModel.getElementName(modelElement);",
      "right" : "String shortName = myModel.getElementName(modelElement);",
      "info" : "VariableDeclarationStatement[39461-39517]:VariableDeclarationStatement[39454-39510]"
    }, {
      "left" : "int match = shortName != null && matcher instanceof MinusculeMatcher\n                    ? ((MinusculeMatcher)matcher).matchingDegree(shortName) : Integer.MIN_VALUE;",
      "right" : "int match = shortName != null && matcher instanceof MinusculeMatcher\n                    ? ((MinusculeMatcher)matcher).matchingDegree(shortName) : Integer.MIN_VALUE;",
      "info" : "VariableDeclarationStatement[39526-39691]:VariableDeclarationStatement[39519-39684]"
    }, {
      "left" : "int stats = StatisticsManager.getInstance().getUseCount(new StatisticsInfo(statContext, text));",
      "right" : "int stats = StatisticsManager.getInstance().getUseCount(new StatisticsInfo(statContext, text));",
      "info" : "VariableDeclarationStatement[39700-39795]:VariableDeclarationStatement[39693-39788]"
    }, {
      "left" : "if (match > bestMatch || match == bestMatch && stats > best)",
      "right" : "if (match > bestMatch || match == bestMatch && stats > best)",
      "info" : "IfStatement[39804-39957]:IfStatement[39797-39950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39865-39957]:Block[39858-39950]"
    }, {
      "left" : "best = stats;",
      "right" : "best = stats;",
      "info" : "ExpressionStatement[39877-39890]:ExpressionStatement[39870-39883]"
    }, {
      "left" : "bestPosition = i;",
      "right" : "bestPosition = i;",
      "info" : "ExpressionStatement[39901-39918]:ExpressionStatement[39894-39911]"
    }, {
      "left" : "bestMatch = match;",
      "right" : "bestMatch = match;",
      "info" : "ExpressionStatement[39929-39947]:ExpressionStatement[39922-39940]"
    }, {
      "left" : "if (bestPosition < count - 1 && myListModel.getElementAt(bestPosition) == NON_PREFIX_SEPARATOR)",
      "right" : "if (bestPosition < count - 1 && myListModel.getElementAt(bestPosition) == NON_PREFIX_SEPARATOR)",
      "info" : "IfStatement[39977-40102]:IfStatement[39970-40095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40073-40102]:Block[40066-40095]"
    }, {
      "left" : "bestPosition++;",
      "right" : "bestPosition++;",
      "info" : "ExpressionStatement[40081-40096]:ExpressionStatement[40074-40089]"
    }, {
      "left" : "return bestPosition;",
      "right" : "return bestPosition;",
      "info" : "ReturnStatement[40108-40128]:ReturnStatement[40101-40121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40194-40312]:Block[40187-40305]"
    }, {
      "left" : "return \"choose_by_name#\" + myModel.getPromptText() + \"#\" + myCheckBox.isSelected() + \"#\" + getTrimmedText();",
      "right" : "return \"choose_by_name#\" + myModel.getPromptText() + \"#\" + myCheckBox.isSelected() + \"#\" + getTrimmedText();",
      "info" : "ReturnStatement[40200-40308]:ReturnStatement[40193-40301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40470-40588]:Block[40463-40581]"
    }, {
      "left" : "if (idx < size())",
      "right" : "if (idx < size())",
      "info" : "IfStatement[40478-40582]:IfStatement[40471-40575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40496-40532]:Block[40489-40525]"
    }, {
      "left" : "add(idx, element);",
      "right" : "add(idx, element);",
      "info" : "ExpressionStatement[40506-40524]:ExpressionStatement[40499-40517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40544-40582]:Block[40537-40575]"
    }, {
      "left" : "addElement(element);",
      "right" : "addElement(element);",
      "info" : "ExpressionStatement[40554-40574]:ExpressionStatement[40547-40567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40661-40772]:Block[40654-40765]"
    }, {
      "left" : "if (start < size() && size() != 0)",
      "right" : "if (start < size() && size() != 0)",
      "info" : "IfStatement[40669-40766]:IfStatement[40662-40759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40704-40766]:Block[40697-40759]"
    }, {
      "left" : "removeRange(start, Math.min(end, size()-1));",
      "right" : "removeRange(start, Math.min(end, size()-1));",
      "info" : "ExpressionStatement[40714-40758]:ExpressionStatement[40707-40751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41121-41189]:Block[41114-41182]"
    }, {
      "left" : "myCommands.clear();",
      "right" : "myCommands.clear();",
      "info" : "ExpressionStatement[41129-41148]:ExpressionStatement[41122-41141]"
    }, {
      "left" : "myAlarm.cancelAllRequests();",
      "right" : "myAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[41155-41183]:ExpressionStatement[41148-41176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41284-42503]:Block[41277-42496]"
    }, {
      "left" : "myAlarm.cancelAllRequests();",
      "right" : "myAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[41292-41320]:ExpressionStatement[41285-41313]"
    }, {
      "left" : "myCommands.addAll(commands);",
      "right" : "myCommands.addAll(commands);",
      "info" : "ExpressionStatement[41327-41355]:ExpressionStatement[41320-41348]"
    }, {
      "left" : "if (myCommands.isEmpty() || checkDisposed())",
      "right" : "if (myCommands.isEmpty() || checkDisposed())",
      "info" : "IfStatement[41363-41433]:IfStatement[41356-41426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41408-41433]:Block[41401-41426]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41418-41425]:ReturnStatement[41411-41418]"
    }, {
      "left" : "myAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          if (checkDisposed()) {\n            return;\n          }\n          final long startTime = System.currentTimeMillis();\n          while (!myCommands.isEmpty() && System.currentTimeMillis() - startTime < MAX_BLOCKING_TIME) {\n            final ModelDiff.Cmd cmd = myCommands.remove(0);\n            cmd.apply();\n          }\n\n          myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));\n\n          if (!myCommands.isEmpty()) {\n            myAlarm.addRequest(this, DELAY);\n          }\n          else {\n            doPostponedOkIfNeeded();\n          }\n          if (!checkDisposed()) {\n            showList();\n            myTextFieldPanel.repositionHint();\n\n            if (!myListModel.isEmpty()) {\n              int pos = selectionPos <= 0 ? detectBestStatisticalPosition() : selectionPos;\n              ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));\n            }\n          }\n        }\n      }, DELAY);",
      "right" : "myAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          if (checkDisposed()) {\n            return;\n          }\n          final long startTime = System.currentTimeMillis();\n          while (!myCommands.isEmpty() && System.currentTimeMillis() - startTime < MAX_BLOCKING_TIME) {\n            final ModelDiff.Cmd cmd = myCommands.remove(0);\n            cmd.apply();\n          }\n\n          myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));\n\n          if (!myCommands.isEmpty()) {\n            myAlarm.addRequest(this, DELAY);\n          }\n          else {\n            doPostponedOkIfNeeded();\n          }\n          if (!checkDisposed()) {\n            showList();\n            myTextFieldPanel.repositionHint();\n\n            if (!myListModel.isEmpty()) {\n              int pos = selectionPos <= 0 ? detectBestStatisticalPosition() : selectionPos;\n              ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));\n            }\n          }\n        }\n      }, DELAY);",
      "info" : "ExpressionStatement[41440-42497]:ExpressionStatement[41433-42490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41520-42480]:Block[41513-42473]"
    }, {
      "left" : "if (checkDisposed())",
      "right" : "if (checkDisposed())",
      "info" : "IfStatement[41532-41586]:IfStatement[41525-41579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41553-41586]:Block[41546-41579]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41567-41574]:ReturnStatement[41560-41567]"
    }, {
      "left" : "final long startTime = System.currentTimeMillis();",
      "right" : "final long startTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[41597-41647]:VariableDeclarationStatement[41590-41640]"
    }, {
      "left" : "while (!myCommands.isEmpty() && System.currentTimeMillis() - startTime < MAX_BLOCKING_TIME)",
      "right" : "while (!myCommands.isEmpty() && System.currentTimeMillis() - startTime < MAX_BLOCKING_TIME)",
      "info" : "WhileStatement[41658-41848]:WhileStatement[41651-41841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41750-41848]:Block[41743-41841]"
    }, {
      "left" : "final ModelDiff.Cmd cmd = myCommands.remove(0);",
      "right" : "final ModelDiff.Cmd cmd = myCommands.remove(0);",
      "info" : "VariableDeclarationStatement[41764-41811]:VariableDeclarationStatement[41757-41804]"
    }, {
      "left" : "cmd.apply();",
      "right" : "cmd.apply();",
      "info" : "ExpressionStatement[41824-41836]:ExpressionStatement[41817-41829]"
    }, {
      "left" : "myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));",
      "right" : "myList.setVisibleRowCount(Math.min(VISIBLE_LIST_SIZE_LIMIT, myList.getModel().getSize()));",
      "info" : "ExpressionStatement[41860-41950]:ExpressionStatement[41853-41943]"
    }, {
      "left" : "if (!myCommands.isEmpty())",
      "right" : "if (!myCommands.isEmpty())",
      "info" : "IfStatement[41962-42113]:IfStatement[41955-42106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41989-42047]:Block[41982-42040]"
    }, {
      "left" : "myAlarm.addRequest(this, DELAY);",
      "right" : "myAlarm.addRequest(this, DELAY);",
      "info" : "ExpressionStatement[42003-42035]:ExpressionStatement[41996-42028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42063-42113]:Block[42056-42106]"
    }, {
      "left" : "doPostponedOkIfNeeded();",
      "right" : "doPostponedOkIfNeeded();",
      "info" : "ExpressionStatement[42077-42101]:ExpressionStatement[42070-42094]"
    }, {
      "left" : "if (!checkDisposed())",
      "right" : "if (!checkDisposed())",
      "info" : "IfStatement[42124-42470]:IfStatement[42117-42463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42146-42470]:Block[42139-42463]"
    }, {
      "left" : "showList();",
      "right" : "showList();",
      "info" : "ExpressionStatement[42160-42171]:ExpressionStatement[42153-42164]"
    }, {
      "left" : "myTextFieldPanel.repositionHint();",
      "right" : "myTextFieldPanel.repositionHint();",
      "info" : "ExpressionStatement[42184-42218]:ExpressionStatement[42177-42211]"
    }, {
      "left" : "if (!myListModel.isEmpty())",
      "right" : "if (!myListModel.isEmpty())",
      "info" : "IfStatement[42232-42458]:IfStatement[42225-42451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42260-42458]:Block[42253-42451]"
    }, {
      "left" : "int pos = selectionPos <= 0 ? detectBestStatisticalPosition() : selectionPos;",
      "right" : "int pos = selectionPos <= 0 ? detectBestStatisticalPosition() : selectionPos;",
      "info" : "VariableDeclarationStatement[42276-42353]:VariableDeclarationStatement[42269-42346]"
    }, {
      "left" : "ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));",
      "right" : "ListScrollingUtil.selectItem(myList, Math.min(pos, myListModel.size() - 1));",
      "info" : "ExpressionStatement[42368-42444]:ExpressionStatement[42361-42437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42546-42728]:Block[42539-42721]"
    }, {
      "left" : "if (myPostponedOkAction != null)",
      "right" : "if (myPostponedOkAction != null)",
      "info" : "IfStatement[42554-42722]:IfStatement[42547-42715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42587-42722]:Block[42580-42715]"
    }, {
      "left" : "if (getChosenElement() != null)",
      "right" : "if (getChosenElement() != null)",
      "info" : "IfStatement[42597-42665]:IfStatement[42590-42658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42629-42665]:Block[42622-42658]"
    }, {
      "left" : "doClose(true);",
      "right" : "doClose(true);",
      "info" : "ExpressionStatement[42641-42655]:ExpressionStatement[42634-42648]"
    }, {
      "left" : "clearPostponedOkAction(checkDisposed());",
      "right" : "clearPostponedOkAction(checkDisposed());",
      "info" : "ExpressionStatement[42674-42714]:ExpressionStatement[42667-42707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42789-43004]:Block[42782-42997]"
    }, {
      "left" : "if (myPostponedOkAction != null)",
      "right" : "if (myPostponedOkAction != null)",
      "info" : "IfStatement[42795-42967]:IfStatement[42788-42960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42828-42967]:Block[42821-42960]"
    }, {
      "left" : "if (success)",
      "right" : "if (success)",
      "info" : "IfStatement[42836-42961]:IfStatement[42829-42954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42849-42897]:Block[42842-42890]"
    }, {
      "left" : "myPostponedOkAction.setDone();",
      "right" : "myPostponedOkAction.setDone();",
      "info" : "ExpressionStatement[42859-42889]:ExpressionStatement[42852-42882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42909-42961]:Block[42902-42954]"
    }, {
      "left" : "myPostponedOkAction.setRejected();",
      "right" : "myPostponedOkAction.setRejected();",
      "info" : "ExpressionStatement[42919-42953]:ExpressionStatement[42912-42946]"
    }, {
      "left" : "myPostponedOkAction = null;",
      "right" : "myPostponedOkAction = null;",
      "info" : "ExpressionStatement[42973-43000]:ExpressionStatement[42966-42993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43044-43089]:Block[43037-43082]"
    }, {
      "left" : "return myPostponedOkAction != null;",
      "right" : "return myPostponedOkAction != null;",
      "info" : "ReturnStatement[43050-43085]:ReturnStatement[43043-43078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43264-43402]:Block[43257-43395]"
    }, {
      "left" : "final List<Object> elements = getChosenElements();",
      "right" : "final List<Object> elements = getChosenElements();",
      "info" : "VariableDeclarationStatement[43270-43320]:VariableDeclarationStatement[43263-43313]"
    }, {
      "left" : "return elements != null && elements.size() == 1 ? elements.get(0) : null;",
      "right" : "return elements != null && elements.size() == 1 ? elements.get(0) : null;",
      "info" : "ReturnStatement[43325-43398]:ReturnStatement[43318-43391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43449-43672]:Block[43442-43665]"
    }, {
      "left" : "return ContainerUtil.filter(myList.getSelectedValues(), new Condition<Object>() {\n      @Override\n      public boolean value(Object o) {\n        return o != EXTRA_ELEM && o != NON_PREFIX_SEPARATOR;\n      }\n    });",
      "right" : "return ContainerUtil.filter(myList.getSelectedValues(), new Condition<Object>() {\n      @Override\n      public boolean value(Object o) {\n        return o != EXTRA_ELEM && o != NON_PREFIX_SEPARATOR;\n      }\n    });",
      "info" : "ReturnStatement[43455-43668]:ReturnStatement[43448-43661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43590-43660]:Block[43583-43653]"
    }, {
      "left" : "return o != EXTRA_ELEM && o != NON_PREFIX_SEPARATOR;",
      "right" : "return o != EXTRA_ELEM && o != NON_PREFIX_SEPARATOR;",
      "info" : "ReturnStatement[43600-43652]:ReturnStatement[43593-43645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43718-43723]:Block[43711-43716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44045-44949]:Block[44038-44942]"
    }, {
      "left" : "super(40);",
      "right" : "super(40);",
      "info" : "SuperConstructorInvocation[44053-44063]:SuperConstructorInvocation[44046-44056]"
    }, {
      "left" : "if (!UIUtil.isUnderGTKLookAndFeel())",
      "right" : "if (!UIUtil.isUnderGTKLookAndFeel())",
      "info" : "IfStatement[44070-44278]:IfStatement[44063-44271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44107-44278]:Block[44100-44271]"
    }, {
      "left" : "if (!(getUI() instanceof DarculaTextFieldUI))",
      "right" : "if (!(getUI() instanceof DarculaTextFieldUI))",
      "info" : "IfStatement[44117-44226]:IfStatement[44110-44219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44163-44226]:Block[44156-44219]"
    }, {
      "left" : "setUI(DarculaTextFieldUI.createUI(this));",
      "right" : "setUI(DarculaTextFieldUI.createUI(this));",
      "info" : "ExpressionStatement[44175-44216]:ExpressionStatement[44168-44209]"
    }, {
      "left" : "setBorder(new DarculaTextBorder());",
      "right" : "setBorder(new DarculaTextBorder());",
      "info" : "ExpressionStatement[44235-44270]:ExpressionStatement[44228-44263]"
    }, {
      "left" : "enableEvents(AWTEvent.KEY_EVENT_MASK);",
      "right" : "enableEvents(AWTEvent.KEY_EVENT_MASK);",
      "info" : "ExpressionStatement[44285-44323]:ExpressionStatement[44278-44316]"
    }, {
      "left" : "myCompletionKeyStroke = getShortcut(IdeActions.ACTION_CODE_COMPLETION);",
      "right" : "myCompletionKeyStroke = getShortcut(IdeActions.ACTION_CODE_COMPLETION);",
      "info" : "ExpressionStatement[44330-44401]:ExpressionStatement[44323-44394]"
    }, {
      "left" : "forwardStroke = getShortcut(IdeActions.ACTION_GOTO_FORWARD);",
      "right" : "forwardStroke = getShortcut(IdeActions.ACTION_GOTO_FORWARD);",
      "info" : "ExpressionStatement[44408-44468]:ExpressionStatement[44401-44461]"
    }, {
      "left" : "backStroke = getShortcut(IdeActions.ACTION_GOTO_BACK);",
      "right" : "backStroke = getShortcut(IdeActions.ACTION_GOTO_BACK);",
      "info" : "ExpressionStatement[44475-44529]:ExpressionStatement[44468-44522]"
    }, {
      "left" : "setFocusTraversalKeysEnabled(false);",
      "right" : "setFocusTraversalKeysEnabled(false);",
      "info" : "ExpressionStatement[44536-44572]:ExpressionStatement[44529-44565]"
    }, {
      "left" : "putClientProperty(\"JTextField.variant\", \"search\");",
      "right" : "putClientProperty(\"JTextField.variant\", \"search\");",
      "info" : "ExpressionStatement[44579-44629]:ExpressionStatement[44572-44622]"
    }, {
      "left" : "setDocument(new PlainDocument() {\n        @Override\n        public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {\n          super.insertString(offs, str, a);\n          if (str != null && str.length() > 1) {\n            handlePaste(str);\n          }\n        }\n      });",
      "right" : "setDocument(new PlainDocument() {\n        @Override\n        public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {\n          super.insertString(offs, str, a);\n          if (str != null && str.length() > 1) {\n            handlePaste(str);\n          }\n        }\n      });",
      "info" : "ExpressionStatement[44636-44943]:ExpressionStatement[44629-44936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44787-44933]:Block[44780-44926]"
    }, {
      "left" : "super.insertString(offs, str, a);",
      "right" : "super.insertString(offs, str, a);",
      "info" : "ExpressionStatement[44799-44832]:ExpressionStatement[44792-44825]"
    }, {
      "left" : "if (str != null && str.length() > 1)",
      "right" : "if (str != null && str.length() > 1)",
      "info" : "IfStatement[44843-44923]:IfStatement[44836-44916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44880-44923]:Block[44873-44916]"
    }, {
      "left" : "handlePaste(str);",
      "right" : "handlePaste(str);",
      "info" : "ExpressionStatement[44894-44911]:ExpressionStatement[44887-44904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45028-45358]:Block[45021-45351]"
    }, {
      "left" : "final Shortcut[] shortcuts = KeymapManager.getInstance().getActiveKeymap().getShortcuts(actionCodeCompletion);",
      "right" : "final Shortcut[] shortcuts = KeymapManager.getInstance().getActiveKeymap().getShortcuts(actionCodeCompletion);",
      "info" : "VariableDeclarationStatement[45036-45146]:VariableDeclarationStatement[45029-45139]"
    }, {
      "left" : "for (final Shortcut shortcut : shortcuts)",
      "right" : "for (final Shortcut shortcut : shortcuts)",
      "info" : "EnhancedForStatement[45153-45333]:EnhancedForStatement[45146-45326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45195-45333]:Block[45188-45326]"
    }, {
      "left" : "if (shortcut instanceof KeyboardShortcut)",
      "right" : "if (shortcut instanceof KeyboardShortcut)",
      "info" : "IfStatement[45205-45325]:IfStatement[45198-45318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45247-45325]:Block[45240-45318]"
    }, {
      "left" : "return ((KeyboardShortcut)shortcut).getFirstKeyStroke();",
      "right" : "return ((KeyboardShortcut)shortcut).getFirstKeyStroke();",
      "info" : "ReturnStatement[45259-45315]:ReturnStatement[45252-45308]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45340-45352]:ReturnStatement[45333-45345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45448-45821]:Block[45441-45814]"
    }, {
      "left" : "if (LangDataKeys.POSITION_ADJUSTER_POPUP.equals(key))",
      "right" : "if (LangDataKeys.POSITION_ADJUSTER_POPUP.equals(key))",
      "info" : "IfStatement[45456-45815]:IfStatement[45449-45808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45510-45641]:Block[45503-45634]"
    }, {
      "left" : "if (myDropdownPopup != null && myDropdownPopup.isVisible())",
      "right" : "if (myDropdownPopup != null && myDropdownPopup.isVisible())",
      "info" : "IfStatement[45520-45633]:IfStatement[45513-45626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45580-45633]:Block[45573-45626]"
    }, {
      "left" : "sink.put(key, myDropdownPopup);",
      "right" : "sink.put(key, myDropdownPopup);",
      "info" : "ExpressionStatement[45592-45623]:ExpressionStatement[45585-45616]"
    }, {
      "left" : "if (LangDataKeys.PARENT_POPUP.equals(key))",
      "right" : "if (LangDataKeys.PARENT_POPUP.equals(key))",
      "info" : "IfStatement[45653-45815]:IfStatement[45646-45808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45696-45815]:Block[45689-45808]"
    }, {
      "left" : "if (myTextPopup != null && myTextPopup.isVisible())",
      "right" : "if (myTextPopup != null && myTextPopup.isVisible())",
      "info" : "IfStatement[45706-45807]:IfStatement[45699-45800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45758-45807]:Block[45751-45800]"
    }, {
      "left" : "sink.put(key, myTextPopup);",
      "right" : "sink.put(key, myTextPopup);",
      "info" : "ExpressionStatement[45770-45797]:ExpressionStatement[45763-45790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45893-48035]:Block[45886-48028]"
    }, {
      "left" : "final KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e);",
      "right" : "final KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e);",
      "info" : "VariableDeclarationStatement[45901-45963]:VariableDeclarationStatement[45894-45956]"
    }, {
      "left" : "if (myCompletionKeyStroke != null && keyStroke.equals(myCompletionKeyStroke))",
      "right" : "if (myCompletionKeyStroke != null && keyStroke.equals(myCompletionKeyStroke))",
      "info" : "IfStatement[45971-46530]:IfStatement[45964-46523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46049-46530]:Block[46042-46523]"
    }, {
      "left" : "completionKeyStrokeHappened = true;",
      "right" : "completionKeyStrokeHappened = true;",
      "info" : "ExpressionStatement[46059-46094]:ExpressionStatement[46052-46087]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[46103-46115]:ExpressionStatement[46096-46108]"
    }, {
      "left" : "final String pattern = getTrimmedText();",
      "right" : "final String pattern = getTrimmedText();",
      "info" : "VariableDeclarationStatement[46124-46164]:VariableDeclarationStatement[46117-46157]"
    }, {
      "left" : "final int oldPos = myList.getSelectedIndex();",
      "right" : "final int oldPos = myList.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[46173-46218]:VariableDeclarationStatement[46166-46211]"
    }, {
      "left" : "myHistory.add(Pair.create(pattern, oldPos));",
      "right" : "myHistory.add(Pair.create(pattern, oldPos));",
      "info" : "ExpressionStatement[46227-46271]:ExpressionStatement[46220-46264]"
    }, {
      "left" : "final Runnable postRunnable = new Runnable() {\n          @Override\n          public void run() {\n            fillInCommonPrefix(pattern);\n          }\n        };",
      "right" : "final Runnable postRunnable = new Runnable() {\n          @Override\n          public void run() {\n            fillInCommonPrefix(pattern);\n          }\n        };",
      "info" : "VariableDeclarationStatement[46280-46440]:VariableDeclarationStatement[46273-46433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46375-46429]:Block[46368-46422]"
    }, {
      "left" : "fillInCommonPrefix(pattern);",
      "right" : "fillInCommonPrefix(pattern);",
      "info" : "ExpressionStatement[46389-46417]:ExpressionStatement[46382-46410]"
    }, {
      "left" : "rebuildList(0, 0, ModalityState.current(), postRunnable);",
      "right" : "rebuildList(0, 0, ModalityState.current(), postRunnable);",
      "info" : "ExpressionStatement[46449-46506]:ExpressionStatement[46442-46499]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46515-46522]:ReturnStatement[46508-46515]"
    }, {
      "left" : "if (backStroke != null && keyStroke.equals(backStroke))",
      "right" : "if (backStroke != null && keyStroke.equals(backStroke))",
      "info" : "IfStatement[46537-47034]:IfStatement[46530-47027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46593-47034]:Block[46586-47027]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[46603-46615]:ExpressionStatement[46596-46608]"
    }, {
      "left" : "if (!myHistory.isEmpty())",
      "right" : "if (!myHistory.isEmpty())",
      "info" : "IfStatement[46624-47010]:IfStatement[46617-47003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46650-47010]:Block[46643-47003]"
    }, {
      "left" : "final String oldText = getTrimmedText();",
      "right" : "final String oldText = getTrimmedText();",
      "info" : "VariableDeclarationStatement[46662-46702]:VariableDeclarationStatement[46655-46695]"
    }, {
      "left" : "final int oldPos = myList.getSelectedIndex();",
      "right" : "final int oldPos = myList.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[46713-46758]:VariableDeclarationStatement[46706-46751]"
    }, {
      "left" : "final Pair<String, Integer> last = myHistory.remove(myHistory.size() - 1);",
      "right" : "final Pair<String, Integer> last = myHistory.remove(myHistory.size() - 1);",
      "info" : "VariableDeclarationStatement[46769-46843]:VariableDeclarationStatement[46762-46836]"
    }, {
      "left" : "myTextField.setText(last.first);",
      "right" : "myTextField.setText(last.first);",
      "info" : "ExpressionStatement[46854-46886]:ExpressionStatement[46847-46879]"
    }, {
      "left" : "myFuture.add(Pair.create(oldText, oldPos));",
      "right" : "myFuture.add(Pair.create(oldText, oldPos));",
      "info" : "ExpressionStatement[46897-46940]:ExpressionStatement[46890-46933]"
    }, {
      "left" : "rebuildList(0, 0, ModalityState.current(), null);",
      "right" : "rebuildList(0, 0, ModalityState.current(), null);",
      "info" : "ExpressionStatement[46951-47000]:ExpressionStatement[46944-46993]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47019-47026]:ReturnStatement[47012-47019]"
    }, {
      "left" : "if (forwardStroke != null && keyStroke.equals(forwardStroke))",
      "right" : "if (forwardStroke != null && keyStroke.equals(forwardStroke))",
      "info" : "IfStatement[47041-47542]:IfStatement[47034-47535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47103-47542]:Block[47096-47535]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[47113-47125]:ExpressionStatement[47106-47118]"
    }, {
      "left" : "if (!myFuture.isEmpty())",
      "right" : "if (!myFuture.isEmpty())",
      "info" : "IfStatement[47134-47518]:IfStatement[47127-47511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47159-47518]:Block[47152-47511]"
    }, {
      "left" : "final String oldText = getTrimmedText();",
      "right" : "final String oldText = getTrimmedText();",
      "info" : "VariableDeclarationStatement[47171-47211]:VariableDeclarationStatement[47164-47204]"
    }, {
      "left" : "final int oldPos = myList.getSelectedIndex();",
      "right" : "final int oldPos = myList.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[47222-47267]:VariableDeclarationStatement[47215-47260]"
    }, {
      "left" : "final Pair<String, Integer> next = myFuture.remove(myFuture.size() - 1);",
      "right" : "final Pair<String, Integer> next = myFuture.remove(myFuture.size() - 1);",
      "info" : "VariableDeclarationStatement[47278-47350]:VariableDeclarationStatement[47271-47343]"
    }, {
      "left" : "myTextField.setText(next.first);",
      "right" : "myTextField.setText(next.first);",
      "info" : "ExpressionStatement[47361-47393]:ExpressionStatement[47354-47386]"
    }, {
      "left" : "myHistory.add(Pair.create(oldText, oldPos));",
      "right" : "myHistory.add(Pair.create(oldText, oldPos));",
      "info" : "ExpressionStatement[47404-47448]:ExpressionStatement[47397-47441]"
    }, {
      "left" : "rebuildList(0, 0, ModalityState.current(), null);",
      "right" : "rebuildList(0, 0, ModalityState.current(), null);",
      "info" : "ExpressionStatement[47459-47508]:ExpressionStatement[47452-47501]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47527-47534]:ReturnStatement[47520-47527]"
    }, {
      "left" : "int position = myTextField.getCaretPosition();",
      "right" : "int position = myTextField.getCaretPosition();",
      "info" : "VariableDeclarationStatement[47549-47595]:VariableDeclarationStatement[47542-47588]"
    }, {
      "left" : "int code = keyStroke.getKeyCode();",
      "right" : "int code = keyStroke.getKeyCode();",
      "info" : "VariableDeclarationStatement[47602-47636]:VariableDeclarationStatement[47595-47629]"
    }, {
      "left" : "int modifiers = keyStroke.getModifiers();",
      "right" : "int modifiers = keyStroke.getModifiers();",
      "info" : "VariableDeclarationStatement[47643-47684]:VariableDeclarationStatement[47636-47677]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[47691-48029]:TryStatement[47684-48022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47695-47738]:Block[47688-47731]"
    }, {
      "left" : "super.processKeyEvent(e);",
      "right" : "super.processKeyEvent(e);",
      "info" : "ExpressionStatement[47705-47730]:ExpressionStatement[47698-47723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47777-47859]:Block[47770-47852]"
    }, {
      "left" : "if (!Patches.SUN_BUG_ID_6322854)",
      "right" : "if (!Patches.SUN_BUG_ID_6322854)",
      "info" : "IfStatement[47787-47851]:IfStatement[47780-47844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47820-47851]:Block[47813-47844]"
    }, {
      "left" : "throw e1;",
      "right" : "throw e1;",
      "info" : "ThrowStatement[47832-47841]:ThrowStatement[47825-47834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47874-48029]:Block[47867-48022]"
    }, {
      "left" : "if ((code == KeyEvent.VK_UP || code == KeyEvent.VK_DOWN) && modifiers == 0)",
      "right" : "if ((code == KeyEvent.VK_UP || code == KeyEvent.VK_DOWN) && modifiers == 0)",
      "info" : "IfStatement[47884-48021]:IfStatement[47877-48014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47960-48021]:Block[47953-48014]"
    }, {
      "left" : "myTextField.setCaretPosition(position);",
      "right" : "myTextField.setCaretPosition(position);",
      "info" : "ExpressionStatement[47972-48011]:ExpressionStatement[47965-48004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48104-49787]:Block[48097-49780]"
    }, {
      "left" : "if (StringUtil.isEmpty(pattern) && !canShowListForEmptyPattern())",
      "right" : "if (StringUtil.isEmpty(pattern) && !canShowListForEmptyPattern())",
      "info" : "IfStatement[48112-48203]:IfStatement[48105-48196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48178-48203]:Block[48171-48196]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48188-48195]:ReturnStatement[48181-48188]"
    }, {
      "left" : "final List<String> list = myProvider.filterNames(ChooseByNameBase.this, getNames(myCheckBox.isSelected()), pattern);",
      "right" : "final List<String> list = myProvider.filterNames(ChooseByNameBase.this, getNames(myCheckBox.isSelected()), pattern);",
      "info" : "VariableDeclarationStatement[48211-48327]:VariableDeclarationStatement[48204-48320]"
    }, {
      "left" : "if (isComplexPattern(pattern))",
      "right" : "if (isComplexPattern(pattern))",
      "info" : "IfStatement[48335-48373]:IfStatement[48328-48366]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48366-48373]:ReturnStatement[48359-48366]"
    }, {
      "left" : "final String oldText = getTrimmedText();",
      "right" : "final String oldText = getTrimmedText();",
      "info" : "VariableDeclarationStatement[48400-48440]:VariableDeclarationStatement[48393-48433]"
    }, {
      "left" : "final int oldPos = myList.getSelectedIndex();",
      "right" : "final int oldPos = myList.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[48447-48492]:VariableDeclarationStatement[48440-48485]"
    }, {
      "left" : "String commonPrefix = null;",
      "right" : "String commonPrefix = null;",
      "info" : "VariableDeclarationStatement[48500-48527]:VariableDeclarationStatement[48493-48520]"
    }, {
      "left" : "if (!list.isEmpty())",
      "right" : "if (!list.isEmpty())",
      "info" : "IfStatement[48534-49400]:IfStatement[48527-49393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48555-49400]:Block[48548-49393]"
    }, {
      "left" : "for (String name : list)",
      "right" : "for (String name : list)",
      "info" : "EnhancedForStatement[48565-49049]:EnhancedForStatement[48558-49042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48590-49049]:Block[48583-49042]"
    }, {
      "left" : "final String string = name.toLowerCase();",
      "right" : "final String string = name.toLowerCase();",
      "info" : "VariableDeclarationStatement[48602-48643]:VariableDeclarationStatement[48595-48636]"
    }, {
      "left" : "if (commonPrefix == null)",
      "right" : "if (commonPrefix == null)",
      "info" : "IfStatement[48654-49039]:IfStatement[48647-49032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48680-48728]:Block[48673-48721]"
    }, {
      "left" : "commonPrefix = string;",
      "right" : "commonPrefix = string;",
      "info" : "ExpressionStatement[48694-48716]:ExpressionStatement[48687-48709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48744-49039]:Block[48737-49032]"
    }, {
      "left" : "while (!commonPrefix.isEmpty())",
      "right" : "while (!commonPrefix.isEmpty())",
      "info" : "WhileStatement[48758-48980]:WhileStatement[48751-48973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48790-48980]:Block[48783-48973]"
    }, {
      "left" : "if (string.startsWith(commonPrefix))",
      "right" : "if (string.startsWith(commonPrefix))",
      "info" : "IfStatement[48806-48883]:IfStatement[48799-48876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48843-48883]:Block[48836-48876]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48861-48867]:BreakStatement[48854-48860]"
    }, {
      "left" : "commonPrefix = commonPrefix.substring(0, commonPrefix.length() - 1);",
      "right" : "commonPrefix = commonPrefix.substring(0, commonPrefix.length() - 1);",
      "info" : "ExpressionStatement[48898-48966]:ExpressionStatement[48891-48959]"
    }, {
      "left" : "if (commonPrefix.isEmpty())",
      "right" : "if (commonPrefix.isEmpty())",
      "info" : "IfStatement[48993-49027]:IfStatement[48986-49020]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49021-49027]:BreakStatement[49014-49020]"
    }, {
      "left" : "commonPrefix = list.get(0).substring(0, commonPrefix.length());",
      "right" : "commonPrefix = list.get(0).substring(0, commonPrefix.length());",
      "info" : "ExpressionStatement[49058-49121]:ExpressionStatement[49051-49114]"
    }, {
      "left" : "for (int i = 1; i < list.size(); i++)",
      "right" : "for (int i = 1; i < list.size(); i++)",
      "info" : "ForStatement[49130-49392]:ForStatement[49123-49385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49168-49392]:Block[49161-49385]"
    }, {
      "left" : "final String string = list.get(i).substring(0, commonPrefix.length());",
      "right" : "final String string = list.get(i).substring(0, commonPrefix.length());",
      "info" : "VariableDeclarationStatement[49180-49250]:VariableDeclarationStatement[49173-49243]"
    }, {
      "left" : "if (!string.equals(commonPrefix))",
      "right" : "if (!string.equals(commonPrefix))",
      "info" : "IfStatement[49261-49382]:IfStatement[49254-49375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49295-49382]:Block[49288-49375]"
    }, {
      "left" : "commonPrefix = commonPrefix.toLowerCase();",
      "right" : "commonPrefix = commonPrefix.toLowerCase();",
      "info" : "ExpressionStatement[49309-49351]:ExpressionStatement[49302-49344]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49364-49370]:BreakStatement[49357-49363]"
    }, {
      "left" : "if (commonPrefix == null)",
      "right" : "if (commonPrefix == null)",
      "info" : "IfStatement[49407-49451]:IfStatement[49400-49444]"
    }, {
      "left" : "commonPrefix = \"\";",
      "right" : "commonPrefix = \"\";",
      "info" : "ExpressionStatement[49433-49451]:ExpressionStatement[49426-49444]"
    }, {
      "left" : "if (!StringUtil.startsWithIgnoreCase(commonPrefix, pattern))",
      "right" : "if (!StringUtil.startsWithIgnoreCase(commonPrefix, pattern))",
      "info" : "IfStatement[49458-49560]:IfStatement[49451-49553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49519-49560]:Block[49512-49553]"
    }, {
      "left" : "commonPrefix = pattern;",
      "right" : "commonPrefix = pattern;",
      "info" : "ExpressionStatement[49529-49552]:ExpressionStatement[49522-49545]"
    }, {
      "left" : "final String newPattern = commonPrefix;",
      "right" : "final String newPattern = commonPrefix;",
      "info" : "VariableDeclarationStatement[49567-49606]:VariableDeclarationStatement[49560-49599]"
    }, {
      "left" : "myHistory.add(Pair.create(oldText, oldPos));",
      "right" : "myHistory.add(Pair.create(oldText, oldPos));",
      "info" : "ExpressionStatement[49614-49658]:ExpressionStatement[49607-49651]"
    }, {
      "left" : "myTextField.setText(newPattern);",
      "right" : "myTextField.setText(newPattern);",
      "info" : "ExpressionStatement[49665-49697]:ExpressionStatement[49658-49690]"
    }, {
      "left" : "myTextField.setCaretPosition(newPattern.length());",
      "right" : "myTextField.setCaretPosition(newPattern.length());",
      "info" : "ExpressionStatement[49704-49754]:ExpressionStatement[49697-49747]"
    }, {
      "left" : "rebuildList(false);",
      "right" : "rebuildList(false);",
      "info" : "ExpressionStatement[49762-49781]:ExpressionStatement[49755-49774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49857-50038]:Block[49850-50031]"
    }, {
      "left" : "if (pattern.indexOf('*') >= 0)",
      "right" : "if (pattern.indexOf('*') >= 0)",
      "info" : "IfStatement[49865-49908]:IfStatement[49858-49901]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49896-49908]:ReturnStatement[49889-49901]"
    }, {
      "left" : "for (String s : myModel.getSeparators())",
      "right" : "for (String s : myModel.getSeparators())",
      "info" : "EnhancedForStatement[49915-50011]:EnhancedForStatement[49908-50004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49956-50011]:Block[49949-50004]"
    }, {
      "left" : "if (pattern.contains(s))",
      "right" : "if (pattern.contains(s))",
      "info" : "IfStatement[49966-50003]:IfStatement[49959-49996]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49991-50003]:ReturnStatement[49984-49996]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50019-50032]:ReturnStatement[50012-50025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50108-50181]:Block[50101-50174]"
    }, {
      "left" : "return new Point(myTextFieldPanel.getWidth(), getHeight());",
      "right" : "return new Point(myTextFieldPanel.getWidth(), getHeight());",
      "info" : "ReturnStatement[50116-50175]:ReturnStatement[50109-50168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50258-50337]:Block[50251-50330]"
    }, {
      "left" : "GraphicsUtil.setupAntialiasing(g);",
      "right" : "GraphicsUtil.setupAntialiasing(g);",
      "info" : "ExpressionStatement[50266-50300]:ExpressionStatement[50259-50293]"
    }, {
      "left" : "super.paintComponent(g);",
      "right" : "super.paintComponent(g);",
      "info" : "ExpressionStatement[50307-50331]:ExpressionStatement[50300-50324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50382-50431]:Block[50375-50424]"
    }, {
      "left" : "return completionKeyStrokeHappened;",
      "right" : "return completionKeyStrokeHappened;",
      "info" : "ReturnStatement[50390-50425]:ReturnStatement[50383-50418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50485-50513]:Block[50478-50506]"
    }, {
      "left" : "return myProvider;",
      "right" : "return myProvider;",
      "info" : "ReturnStatement[50491-50509]:ReturnStatement[50484-50502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50556-51445]:Block[50549-51438]"
    }, {
      "left" : "if (!myInitIsDone)",
      "right" : "if (!myInitIsDone)",
      "info" : "IfStatement[50562-50588]:IfStatement[50555-50581]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50581-50588]:ReturnStatement[50574-50581]"
    }, {
      "left" : "if (myModel instanceof GotoClassModel2 && isFileName(str))",
      "right" : "if (myModel instanceof GotoClassModel2 && isFileName(str))",
      "info" : "IfStatement[50593-51441]:IfStatement[50586-51434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50652-51441]:Block[50645-51434]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          final GotoFileAction gotoFile = new GotoFileAction();\n          AnActionEvent event = new AnActionEvent(null,\n                                                  DataManager.getInstance().getDataContext(myTextField),\n                                                  ActionPlaces.UNKNOWN,\n                                                  gotoFile.getTemplatePresentation(),\n                                                  ActionManager.getInstance(),\n                                                  0);\n          event.setInjectedContext(gotoFile.isInInjectedContext());\n          gotoFile.actionPerformed(event);\n        }\n      });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          final GotoFileAction gotoFile = new GotoFileAction();\n          AnActionEvent event = new AnActionEvent(null,\n                                                  DataManager.getInstance().getDataContext(myTextField),\n                                                  ActionPlaces.UNKNOWN,\n                                                  gotoFile.getTemplatePresentation(),\n                                                  ActionManager.getInstance(),\n                                                  0);\n          event.setInjectedContext(gotoFile.isInInjectedContext());\n          gotoFile.actionPerformed(event);\n        }\n      });",
      "info" : "ExpressionStatement[50699-51435]:ExpressionStatement[50692-51428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50787-51425]:Block[50780-51418]"
    }, {
      "left" : "final GotoFileAction gotoFile = new GotoFileAction();",
      "right" : "final GotoFileAction gotoFile = new GotoFileAction();",
      "info" : "VariableDeclarationStatement[50799-50852]:VariableDeclarationStatement[50792-50845]"
    }, {
      "left" : "AnActionEvent event = new AnActionEvent(null,\n                                                  DataManager.getInstance().getDataContext(myTextField),\n                                                  ActionPlaces.UNKNOWN,\n                                                  gotoFile.getTemplatePresentation(),\n                                                  ActionManager.getInstance(),\n                                                  0);",
      "right" : "AnActionEvent event = new AnActionEvent(null,\n                                                  DataManager.getInstance().getDataContext(myTextField),\n                                                  ActionPlaces.UNKNOWN,\n                                                  gotoFile.getTemplatePresentation(),\n                                                  ActionManager.getInstance(),\n                                                  0);",
      "info" : "VariableDeclarationStatement[50863-51304]:VariableDeclarationStatement[50856-51297]"
    }, {
      "left" : "event.setInjectedContext(gotoFile.isInInjectedContext());",
      "right" : "event.setInjectedContext(gotoFile.isInInjectedContext());",
      "info" : "ExpressionStatement[51315-51372]:ExpressionStatement[51308-51365]"
    }, {
      "left" : "gotoFile.actionPerformed(event);",
      "right" : "gotoFile.actionPerformed(event);",
      "info" : "ExpressionStatement[51383-51415]:ExpressionStatement[51376-51408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51496-51858]:Block[51489-51851]"
    }, {
      "left" : "final int index = name.lastIndexOf('.');",
      "right" : "final int index = name.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[51502-51542]:VariableDeclarationStatement[51495-51535]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[51547-51836]:IfStatement[51540-51829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51562-51836]:Block[51555-51829]"
    }, {
      "left" : "String ext = name.substring(index + 1);",
      "right" : "String ext = name.substring(index + 1);",
      "info" : "VariableDeclarationStatement[51570-51609]:VariableDeclarationStatement[51563-51602]"
    }, {
      "left" : "if (ext.contains(\":\"))",
      "right" : "if (ext.contains(\":\"))",
      "info" : "IfStatement[51616-51698]:IfStatement[51609-51691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51639-51698]:Block[51632-51691]"
    }, {
      "left" : "ext = ext.substring(0, ext.indexOf(':'));",
      "right" : "ext = ext.substring(0, ext.indexOf(':'));",
      "info" : "ExpressionStatement[51649-51690]:ExpressionStatement[51642-51683]"
    }, {
      "left" : "if (FileTypeManagerEx.getInstanceEx().getFileTypeByExtension(ext) != UnknownFileType.INSTANCE)",
      "right" : "if (FileTypeManagerEx.getInstanceEx().getFileTypeByExtension(ext) != UnknownFileType.INSTANCE)",
      "info" : "IfStatement[51705-51830]:IfStatement[51698-51823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51800-51830]:Block[51793-51823]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51810-51822]:ReturnStatement[51803-51815]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51841-51854]:ReturnStatement[51834-51847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52068-52420]:Block[52061-52413]"
    }, {
      "left" : "final JPanel panel = new JPanel(new BorderLayout());",
      "right" : "final JPanel panel = new JPanel(new BorderLayout());",
      "info" : "VariableDeclarationStatement[52074-52126]:VariableDeclarationStatement[52067-52119]"
    }, {
      "left" : "final JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);",
      "right" : "final JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);",
      "info" : "VariableDeclarationStatement[52131-52202]:VariableDeclarationStatement[52124-52195]"
    }, {
      "left" : "panel.add(separator, BorderLayout.CENTER);",
      "right" : "panel.add(separator, BorderLayout.CENTER);",
      "info" : "ExpressionStatement[52207-52249]:ExpressionStatement[52200-52242]"
    }, {
      "left" : "if (!UIUtil.isUnderAquaBasedLookAndFeel())",
      "right" : "if (!UIUtil.isUnderAquaBasedLookAndFeel())",
      "info" : "IfStatement[52254-52356]:IfStatement[52247-52349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52297-52356]:Block[52290-52349]"
    }, {
      "left" : "panel.setBorder(new EmptyBorder(3, 0, 2, 0));",
      "right" : "panel.setBorder(new EmptyBorder(3, 0, 2, 0));",
      "info" : "ExpressionStatement[52305-52350]:ExpressionStatement[52298-52343]"
    }, {
      "left" : "panel.setBackground(backgroundColor);",
      "right" : "panel.setBackground(backgroundColor);",
      "info" : "ExpressionStatement[52361-52398]:ExpressionStatement[52354-52391]"
    }, {
      "left" : "return panel;",
      "right" : "return panel;",
      "info" : "ReturnStatement[52403-52416]:ReturnStatement[52396-52409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53289-53516]:Block[53148-53375]"
    }, {
      "left" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "right" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "info" : "ExpressionStatement[53297-53358]:ExpressionStatement[53156-53217]"
    }, {
      "left" : "myCalcElementsThread = this;",
      "right" : "myCalcElementsThread = this;",
      "info" : "ExpressionStatement[53365-53393]:ExpressionStatement[53224-53252]"
    }, {
      "left" : "showCard(SEARCHING_CARD, 200);",
      "right" : "showCard(SEARCHING_CARD, 200);",
      "info" : "ExpressionStatement[53400-53430]:ExpressionStatement[53259-53289]"
    }, {
      "left" : "ProgressIndicatorUtils.scheduleWithWriteActionPriority(myProgress, this);",
      "right" : "ProgressIndicatorUtils.scheduleWithWriteActionPriority(myProgress, this);",
      "info" : "ExpressionStatement[53437-53510]:ExpressionStatement[53296-53369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55582-56424]:Block[55665-56507]"
    }, {
      "left" : "long start = System.currentTimeMillis();",
      "right" : "long start = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[55590-55630]:VariableDeclarationStatement[55673-55713]"
    }, {
      "left" : "myProvider.filterElements(\n        ChooseByNameBase.this, pattern, everywhere,\n        indicator,\n        new Processor<Object>() {\n          @Override\n          public boolean process(Object o) {\n            if (indicator.isCanceled()) return false;\n            elements.add(o);\n\n            if (isOverflow(elements)) {\n              elements.add(EXTRA_ELEM);\n              return false;\n            }\n            return true;\n          }\n        }\n      );",
      "right" : "myProvider.filterElements(\n        ChooseByNameBase.this, pattern, everywhere,\n        indicator,\n        new Processor<Object>() {\n          @Override\n          public boolean process(Object o) {\n            if (indicator.isCanceled()) return false;\n            elements.add(o);\n\n            if (isOverflow(elements)) {\n              elements.add(EXTRA_ELEM);\n              return false;\n            }\n            return true;\n          }\n        }\n      );",
      "info" : "ExpressionStatement[55637-56095]:ExpressionStatement[55720-56178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55832-56076]:Block[55915-56159]"
    }, {
      "left" : "if (indicator.isCanceled())",
      "right" : "if (indicator.isCanceled())",
      "info" : "IfStatement[55846-55887]:IfStatement[55929-55970]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55874-55887]:ReturnStatement[55957-55970]"
    }, {
      "left" : "elements.add(o);",
      "right" : "elements.add(o);",
      "info" : "ExpressionStatement[55900-55916]:ExpressionStatement[55983-55999]"
    }, {
      "left" : "if (isOverflow(elements))",
      "right" : "if (isOverflow(elements))",
      "info" : "IfStatement[55930-56039]:IfStatement[56013-56122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55956-56039]:Block[56039-56122]"
    }, {
      "left" : "elements.add(EXTRA_ELEM);",
      "right" : "elements.add(EXTRA_ELEM);",
      "info" : "ExpressionStatement[55972-55997]:ExpressionStatement[56055-56080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56012-56025]:ReturnStatement[56095-56108]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56052-56064]:ReturnStatement[56135-56147]"
    }, {
      "left" : "if (myAlwaysHasMore)",
      "right" : "if (myAlwaysHasMore)",
      "info" : "IfStatement[56102-56166]:IfStatement[56185-56249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56123-56166]:Block[56206-56249]"
    }, {
      "left" : "elements.add(EXTRA_ELEM);",
      "right" : "elements.add(EXTRA_ELEM);",
      "info" : "ExpressionStatement[56133-56158]:ExpressionStatement[56216-56241]"
    }, {
      "left" : "if (ContributorsBasedGotoByModel.LOG.isDebugEnabled())",
      "right" : "if (ContributorsBasedGotoByModel.LOG.isDebugEnabled())",
      "info" : "IfStatement[56173-56418]:IfStatement[56256-56501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56228-56418]:Block[56311-56501]"
    }, {
      "left" : "long end = System.currentTimeMillis();",
      "right" : "long end = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[56238-56276]:VariableDeclarationStatement[56321-56359]"
    }, {
      "left" : "ContributorsBasedGotoByModel.LOG.debug(\"addElementsByPattern(\"+pattern+\"): \"+(end-start)+\"ms; \"+elements.size()+\" elements\");",
      "right" : "ContributorsBasedGotoByModel.LOG.debug(\"addElementsByPattern(\"+pattern+\"): \"+(end-start)+\"ms; \"+elements.size()+\" elements\");",
      "info" : "ExpressionStatement[56285-56410]:ExpressionStatement[56368-56493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56488-56852]:Block[56571-56935]"
    }, {
      "left" : "if (ApplicationManager.getApplication().isUnitTestMode())",
      "right" : "if (ApplicationManager.getApplication().isUnitTestMode())",
      "info" : "IfStatement[56496-56561]:IfStatement[56579-56644]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56554-56561]:ReturnStatement[56637-56644]"
    }, {
      "left" : "myShowCardAlarm.cancelAllRequests();",
      "right" : "myShowCardAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[56568-56604]:ExpressionStatement[56651-56687]"
    }, {
      "left" : "myShowCardAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          if (!myProgress.isCanceled()) {\n            myCard.show(myCardContainer, card);\n          }\n        }\n      }, delay, myModalityState);",
      "right" : "myShowCardAlarm.addRequest(new Runnable() {\n        @Override\n        public void run() {\n          if (!myProgress.isCanceled()) {\n            myCard.show(myCardContainer, card);\n          }\n        }\n      }, delay, myModalityState);",
      "info" : "ExpressionStatement[56611-56846]:ExpressionStatement[56694-56929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56699-56812]:Block[56782-56895]"
    }, {
      "left" : "if (!myProgress.isCanceled())",
      "right" : "if (!myProgress.isCanceled())",
      "info" : "IfStatement[56711-56802]:IfStatement[56794-56885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56741-56802]:Block[56824-56885]"
    }, {
      "left" : "myCard.show(myCardContainer, card);",
      "right" : "myCard.show(myCardContainer, card);",
      "info" : "ExpressionStatement[56755-56790]:ExpressionStatement[56838-56873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56923-56991]:Block[57006-57074]"
    }, {
      "left" : "return elementsArray.size() >= myMaximumListSizeLimit;",
      "right" : "return elementsArray.size() >= myMaximumListSizeLimit;",
      "info" : "ReturnStatement[56931-56985]:ReturnStatement[57014-57068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57019-57121]:Block[57102-57204]"
    }, {
      "left" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "right" : "ApplicationManager.getApplication().assertIsDispatchThread();",
      "info" : "ExpressionStatement[57027-57088]:ExpressionStatement[57110-57171]"
    }, {
      "left" : "myProgress.cancel();",
      "right" : "myProgress.cancel();",
      "info" : "ExpressionStatement[57095-57115]:ExpressionStatement[57178-57198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57175-57291]:Block[57258-57374]"
    }, {
      "left" : "return isShowListForEmptyPattern() || isShowListAfterCompletionKeyStroke() && lastKeyStrokeIsCompletion();",
      "right" : "return isShowListForEmptyPattern() || isShowListAfterCompletionKeyStroke() && lastKeyStrokeIsCompletion();",
      "info" : "ReturnStatement[57181-57287]:ReturnStatement[57264-57370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57341-57394]:Block[57424-57477]"
    }, {
      "left" : "return myTextField.isCompletionKeyStroke();",
      "right" : "return myTextField.isCompletionKeyStroke();",
      "info" : "ReturnStatement[57347-57390]:ReturnStatement[57430-57473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57466-57568]:Block[57549-57651]"
    }, {
      "left" : "return NameUtil.buildMatcher(pattern, 0, true, true, pattern.toLowerCase().equals(pattern));",
      "right" : "return NameUtil.buildMatcher(pattern, 0, true, true, pattern.toLowerCase().equals(pattern));",
      "info" : "ReturnStatement[57472-57564]:ReturnStatement[57555-57647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57655-57725]:Block[57738-57808]"
    }, {
      "left" : "super(text, RIGHT);",
      "right" : "super(text, RIGHT);",
      "info" : "SuperConstructorInvocation[57663-57682]:SuperConstructorInvocation[57746-57765]"
    }, {
      "left" : "setForeground(Color.darkGray);",
      "right" : "setForeground(Color.darkGray);",
      "info" : "ExpressionStatement[57689-57719]:ExpressionStatement[57772-57802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57770-57810]:Block[57853-57893]"
    }, {
      "left" : "return myMaximumListSizeLimit;",
      "right" : "return myMaximumListSizeLimit;",
      "info" : "ReturnStatement[57776-57806]:ReturnStatement[57859-57889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57882-57938]:Block[57965-58021]"
    }, {
      "left" : "myMaximumListSizeLimit = maximumListSizeLimit;",
      "right" : "myMaximumListSizeLimit = maximumListSizeLimit;",
      "info" : "ExpressionStatement[57888-57934]:ExpressionStatement[57971-58017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58006-58058]:Block[58089-58141]"
    }, {
      "left" : "myListSizeIncreasing = listSizeIncreasing;",
      "right" : "myListSizeIncreasing = listSizeIncreasing;",
      "info" : "ExpressionStatement[58012-58054]:ExpressionStatement[58095-58137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58095-58128]:Block[58178-58211]"
    }, {
      "left" : "return myAlwaysHasMore;",
      "right" : "return myAlwaysHasMore;",
      "info" : "ReturnStatement[58101-58124]:ReturnStatement[58184-58207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58448-58484]:Block[58531-58567]"
    }, {
      "left" : "myAlwaysHasMore = enabled;",
      "right" : "myAlwaysHasMore = enabled;",
      "info" : "ExpressionStatement[58454-58480]:ExpressionStatement[58537-58563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58650-58726]:Block[58733-58809]"
    }, {
      "left" : "super(ACTION_NAME, ACTION_NAME, AllIcons.General.AutohideOff);",
      "right" : "super(ACTION_NAME, ACTION_NAME, AllIcons.General.AutohideOff);",
      "info" : "SuperConstructorInvocation[58658-58720]:SuperConstructorInvocation[58741-58803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62329-62400]:Block[62405-62476]"
    }, {
      "left" : "showUsageView(targets, usages, presentation);",
      "right" : "showUsageView(targets, usages, presentation);",
      "info" : "ExpressionStatement[62343-62388]:ExpressionStatement[62419-62464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62455-62509]:Block[62531-62585]"
    }, {
      "left" : "myCalcUsagesThread.cancel();",
      "right" : "myCalcUsagesThread.cancel();",
      "info" : "ExpressionStatement[62469-62497]:ExpressionStatement[62545-62573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62858-63379]:Block[62934-63455]"
    }, {
      "left" : "for (Object o : matchElementsArray)",
      "right" : "for (Object o : matchElementsArray)",
      "info" : "EnhancedForStatement[62866-63373]:EnhancedForStatement[62942-63449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62902-63373]:Block[62978-63449]"
    }, {
      "left" : "if (o instanceof PsiElement)",
      "right" : "if (o instanceof PsiElement)",
      "info" : "IfStatement[62912-63365]:IfStatement[62988-63441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62941-63365]:Block[63017-63441]"
    }, {
      "left" : "PsiElement element = (PsiElement)o;",
      "right" : "PsiElement element = (PsiElement)o;",
      "info" : "VariableDeclarationStatement[62953-62988]:VariableDeclarationStatement[63029-63064]"
    }, {
      "left" : "if (element.getTextRange() != null)",
      "right" : "if (element.getTextRange() != null)",
      "info" : "IfStatement[62999-63355]:IfStatement[63075-63431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63035-63292]:Block[63111-63368]"
    }, {
      "left" : "usages.add(new UsageInfo2UsageAdapter(new UsageInfo(element) {\n              @Override\n              public boolean isDynamicUsage() {\n                return separateGroup || super.isDynamicUsage();\n              }\n            }));",
      "right" : "usages.add(new UsageInfo2UsageAdapter(new UsageInfo(element) {\n              @Override\n              public boolean isDynamicUsage() {\n                return separateGroup || super.isDynamicUsage();\n              }\n            }));",
      "info" : "ExpressionStatement[63049-63280]:ExpressionStatement[63125-63356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63182-63263]:Block[63258-63339]"
    }, {
      "left" : "return separateGroup || super.isDynamicUsage();",
      "right" : "return separateGroup || super.isDynamicUsage();",
      "info" : "ReturnStatement[63200-63247]:ReturnStatement[63276-63323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63308-63355]:Block[63384-63431]"
    }, {
      "left" : "targets.add(element);",
      "right" : "targets.add(element);",
      "info" : "ExpressionStatement[63322-63343]:ExpressionStatement[63398-63419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63583-63913]:Block[63659-63989]"
    }, {
      "left" : "UsageTarget[] usageTargets = targets.isEmpty() ? UsageTarget.EMPTY_ARRAY :\n                                   PsiElement2UsageTargetAdapter.convert(PsiUtilCore.toPsiElementArray(targets));",
      "right" : "UsageTarget[] usageTargets = targets.isEmpty() ? UsageTarget.EMPTY_ARRAY :\n                                   PsiElement2UsageTargetAdapter.convert(PsiUtilCore.toPsiElementArray(targets));",
      "info" : "VariableDeclarationStatement[63591-63779]:VariableDeclarationStatement[63667-63855]"
    }, {
      "left" : "UsageViewManager.getInstance(myProject).showUsages(usageTargets, usages.toArray(new Usage[usages.size()]), presentation);",
      "right" : "UsageViewManager.getInstance(myProject).showUsages(usageTargets, usages.toArray(new Usage[usages.size()]), presentation);",
      "info" : "ExpressionStatement[63786-63907]:ExpressionStatement[63862-63983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63978-64268]:Block[64054-64344]"
    }, {
      "left" : "if (myFindUsagesTitle == null || myProject == null)",
      "right" : "if (myFindUsagesTitle == null || myProject == null)",
      "info" : "IfStatement[63986-64110]:IfStatement[64062-64186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64038-64110]:Block[64114-64186]"
    }, {
      "left" : "e.getPresentation().setVisible(false);",
      "right" : "e.getPresentation().setVisible(false);",
      "info" : "ExpressionStatement[64048-64086]:ExpressionStatement[64124-64162]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[64095-64102]:ReturnStatement[64171-64178]"
    }, {
      "left" : "final Object[][] elements = getElements();",
      "right" : "final Object[][] elements = getElements();",
      "info" : "VariableDeclarationStatement[64117-64159]:VariableDeclarationStatement[64193-64235]"
    }, {
      "left" : "e.getPresentation().setEnabled(elements != null && elements[0].length + elements[1].length > 0);",
      "right" : "e.getPresentation().setEnabled(elements != null && elements[0].length + elements[1].length > 0);",
      "info" : "ExpressionStatement[64166-64262]:ExpressionStatement[64242-64338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64356-64385]:Block[64432-64461]"
    }, {
      "left" : "return myTextField;",
      "right" : "return myTextField;",
      "info" : "ReturnStatement[64362-64381]:ReturnStatement[64438-64457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64424-64743]:Block[64500-64819]"
    }, {
      "left" : "EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme();",
      "right" : "EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme();",
      "info" : "VariableDeclarationStatement[64430-64510]:VariableDeclarationStatement[64506-64586]"
    }, {
      "left" : "int size = UISettings.getInstance().PRESENTATION_MODE\n               ? UISettings.getInstance().PRESENTATION_MODE_FONT_SIZE - 4 : scheme.getEditorFontSize();",
      "right" : "int size = UISettings.getInstance().PRESENTATION_MODE\n               ? UISettings.getInstance().PRESENTATION_MODE_FONT_SIZE - 4 : scheme.getEditorFontSize();",
      "info" : "VariableDeclarationStatement[64515-64672]:VariableDeclarationStatement[64591-64748]"
    }, {
      "left" : "return new Font(scheme.getEditorFontName(), Font.PLAIN, size);",
      "right" : "return new Font(scheme.getEditorFontName(), Font.PLAIN, size);",
      "info" : "ReturnStatement[64677-64739]:ReturnStatement[64753-64815]"
    } ]
  },
  "interFileMappings" : { }
}