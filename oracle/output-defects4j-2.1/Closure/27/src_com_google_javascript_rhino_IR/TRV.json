{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private IR()",
      "right" : "private IR()",
      "info" : "MethodDeclaration[1781-1796]:MethodDeclaration[1781-1796]"
    }, {
      "left" : "public static Node empty()",
      "right" : "public static Node empty()",
      "info" : "MethodDeclaration[1800-1866]:MethodDeclaration[1800-1866]"
    }, {
      "left" : "public static Node function(Node name, Node params, Node body)",
      "right" : "public static Node function(Node name, Node params, Node body)",
      "info" : "MethodDeclaration[1870-2138]:MethodDeclaration[1870-2138]"
    }, {
      "left" : "public static Node paramList()",
      "right" : "public static Node paramList()",
      "info" : "MethodDeclaration[2142-2217]:MethodDeclaration[2142-2217]"
    }, {
      "left" : "public static Node paramList(Node param)",
      "right" : "public static Node paramList(Node param)",
      "info" : "MethodDeclaration[2221-2359]:MethodDeclaration[2221-2359]"
    }, {
      "left" : "public static Node paramList(Node ... params)",
      "right" : "public static Node paramList(Node ... params)",
      "info" : "MethodDeclaration[2363-2595]:MethodDeclaration[2363-2595]"
    }, {
      "left" : "public static Node paramList(List<Node> params)",
      "right" : "public static Node paramList(List<Node> params)",
      "info" : "MethodDeclaration[2599-2833]:MethodDeclaration[2599-2833]"
    }, {
      "left" : "public static Node block()",
      "right" : "public static Node block()",
      "info" : "MethodDeclaration[2837-2927]:MethodDeclaration[2837-2927]"
    }, {
      "left" : "public static Node block(Node stmt)",
      "right" : "public static Node block(Node stmt)",
      "info" : "MethodDeclaration[2931-3088]:MethodDeclaration[2931-3088]"
    }, {
      "left" : "public static Node block(Node ... stmts)",
      "right" : "public static Node block(Node ... stmts)",
      "info" : "MethodDeclaration[3092-3320]:MethodDeclaration[3092-3320]"
    }, {
      "left" : "public static Node script(Node ... stmts)",
      "right" : "public static Node script(Node ... stmts)",
      "info" : "MethodDeclaration[3325-3612]:MethodDeclaration[3419-3706]"
    }, {
      "left" : "public static Node var(Node name, Node value)",
      "right" : "public static Node var(Node name, Node value)",
      "info" : "MethodDeclaration[3616-3844]:MethodDeclaration[3710-3938]"
    }, {
      "left" : "public static Node var(Node name)",
      "right" : "public static Node var(Node name)",
      "info" : "MethodDeclaration[3848-3970]:MethodDeclaration[3942-4064]"
    }, {
      "left" : "public static Node returnNode()",
      "right" : "public static Node returnNode()",
      "info" : "MethodDeclaration[3974-4046]:MethodDeclaration[4068-4140]"
    }, {
      "left" : "public static Node returnNode(Node expr)",
      "right" : "public static Node returnNode(Node expr)",
      "info" : "MethodDeclaration[4050-4190]:MethodDeclaration[4144-4284]"
    }, {
      "left" : "public static Node throwNode(Node expr)",
      "right" : "public static Node throwNode(Node expr)",
      "info" : "MethodDeclaration[4194-4332]:MethodDeclaration[4288-4426]"
    }, {
      "left" : "public static Node exprResult(Node expr)",
      "right" : "public static Node exprResult(Node expr)",
      "info" : "MethodDeclaration[4336-4481]:MethodDeclaration[4430-4575]"
    }, {
      "left" : "public static Node ifNode(Node cond, Node then)",
      "right" : "public static Node ifNode(Node cond, Node then)",
      "info" : "MethodDeclaration[4485-4680]:MethodDeclaration[4579-4774]"
    }, {
      "left" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
      "right" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
      "info" : "MethodDeclaration[4684-4954]:MethodDeclaration[4778-5048]"
    }, {
      "left" : "public static Node doNode(Node body, Node cond)",
      "right" : "public static Node doNode(Node body, Node cond)",
      "info" : "MethodDeclaration[4958-5153]:MethodDeclaration[5052-5247]"
    }, {
      "left" : "public static Node forIn(Node target, Node cond, Node body)",
      "right" : "public static Node forIn(Node target, Node cond, Node body)",
      "info" : "MethodDeclaration[5157-5446]:MethodDeclaration[5251-5540]"
    }, {
      "left" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
      "right" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
      "info" : "MethodDeclaration[5450-5824]:MethodDeclaration[5544-5918]"
    }, {
      "left" : "public static Node switchNode(Node cond, Node ... cases)",
      "right" : "public static Node switchNode(Node cond, Node ... cases)",
      "info" : "MethodDeclaration[5828-6180]:MethodDeclaration[5922-6274]"
    }, {
      "left" : "public static Node caseNode(Node expr, Node body)",
      "right" : "public static Node caseNode(Node expr, Node body)",
      "info" : "MethodDeclaration[6184-6441]:MethodDeclaration[6278-6535]"
    }, {
      "left" : "public static Node defaultCase(Node body)",
      "right" : "public static Node defaultCase(Node body)",
      "info" : "MethodDeclaration[6445-6643]:MethodDeclaration[6539-6737]"
    }, {
      "left" : "public static Node label(Node name, Node stmt)",
      "right" : "public static Node label(Node name, Node stmt)",
      "info" : "MethodDeclaration[6647-6922]:MethodDeclaration[6741-7016]"
    }, {
      "left" : "public static Node labelName(String name)",
      "right" : "public static Node labelName(String name)",
      "info" : "MethodDeclaration[6926-7071]:MethodDeclaration[7020-7165]"
    }, {
      "left" : "public static Node tryCatchFinally(\n      Node tryBody, Node catchNode, Node finallyBody)",
      "right" : "public static Node tryCatchFinally(\n      Node tryBody, Node catchNode, Node finallyBody)",
      "info" : "MethodDeclaration[7669-7927]:MethodDeclaration[7764-8022]"
    }, {
      "left" : "public static Node catchNode(Node expr, Node body)",
      "right" : "public static Node catchNode(Node expr, Node body)",
      "info" : "MethodDeclaration[7931-8124]:MethodDeclaration[8026-8219]"
    }, {
      "left" : "public static Node breakNode()",
      "right" : "public static Node breakNode()",
      "info" : "MethodDeclaration[8128-8198]:MethodDeclaration[8223-8293]"
    }, {
      "left" : "public static Node breakNode(Node name)",
      "right" : "public static Node breakNode(Node name)",
      "info" : "MethodDeclaration[8202-8388]:MethodDeclaration[8297-8483]"
    }, {
      "left" : "public static Node continueNode()",
      "right" : "public static Node continueNode()",
      "info" : "MethodDeclaration[8392-8468]:MethodDeclaration[8487-8563]"
    }, {
      "left" : "public static Node continueNode(Node name)",
      "right" : "public static Node continueNode(Node name)",
      "info" : "MethodDeclaration[8472-8664]:MethodDeclaration[8567-8759]"
    }, {
      "left" : "public static Node call(Node target, Node ... args)",
      "right" : "public static Node call(Node target, Node ... args)",
      "info" : "MethodDeclaration[8675-8915]:MethodDeclaration[8770-9010]"
    }, {
      "left" : "public static Node newNode(Node target, Node ... args)",
      "right" : "public static Node newNode(Node target, Node ... args)",
      "info" : "MethodDeclaration[8919-9170]:MethodDeclaration[9014-9265]"
    }, {
      "left" : "public static Node name(String name)",
      "right" : "public static Node name(String name)",
      "info" : "MethodDeclaration[9174-9261]:MethodDeclaration[9269-9356]"
    }, {
      "left" : "public static Node getprop(Node target, Node prop)",
      "right" : "public static Node getprop(Node target, Node prop)",
      "info" : "MethodDeclaration[9265-9473]:MethodDeclaration[9360-9568]"
    }, {
      "left" : "public static Node getelem(Node target, Node elem)",
      "right" : "public static Node getelem(Node target, Node elem)",
      "info" : "MethodDeclaration[9477-9691]:MethodDeclaration[9572-9786]"
    }, {
      "left" : "public static Node assign(Node target, Node expr)",
      "right" : "public static Node assign(Node target, Node expr)",
      "info" : "MethodDeclaration[9695-9910]:MethodDeclaration[9790-10005]"
    }, {
      "left" : "public static Node hook(Node cond, Node trueval, Node falseval)",
      "right" : "public static Node hook(Node cond, Node trueval, Node falseval)",
      "info" : "MethodDeclaration[9914-10207]:MethodDeclaration[10009-10302]"
    }, {
      "left" : "public static Node comma(Node expr1, Node expr2)",
      "right" : "public static Node comma(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[10211-10313]:MethodDeclaration[10306-10408]"
    }, {
      "left" : "public static Node and(Node expr1, Node expr2)",
      "right" : "public static Node and(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[10317-10415]:MethodDeclaration[10412-10510]"
    }, {
      "left" : "public static Node or(Node expr1, Node expr2)",
      "right" : "public static Node or(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[10419-10515]:MethodDeclaration[10514-10610]"
    }, {
      "left" : "public static Node not(Node expr1)",
      "right" : "public static Node not(Node expr1)",
      "info" : "MethodDeclaration[10519-10597]:MethodDeclaration[10614-10692]"
    }, {
      "left" : "public static Node eq(Node expr1, Node expr2)",
      "right" : "public static Node eq(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[10601-10719]:MethodDeclaration[10696-10814]"
    }, {
      "left" : "public static Node sheq(Node expr1, Node expr2)",
      "right" : "public static Node sheq(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[10723-10846]:MethodDeclaration[10818-10941]"
    }, {
      "left" : "public static Node voidNode(Node expr1)",
      "right" : "public static Node voidNode(Node expr1)",
      "info" : "MethodDeclaration[10850-10934]:MethodDeclaration[10945-11029]"
    }, {
      "left" : "public static Node neg(Node expr1)",
      "right" : "public static Node neg(Node expr1)",
      "info" : "MethodDeclaration[10938-11016]:MethodDeclaration[11033-11111]"
    }, {
      "left" : "public static Node pos(Node expr1)",
      "right" : "public static Node pos(Node expr1)",
      "info" : "MethodDeclaration[11020-11098]:MethodDeclaration[11115-11193]"
    }, {
      "left" : "public static Node add(Node expr1, Node expr2)",
      "right" : "public static Node add(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[11102-11200]:MethodDeclaration[11197-11295]"
    }, {
      "left" : "public static Node sub(Node expr1, Node expr2)",
      "right" : "public static Node sub(Node expr1, Node expr2)",
      "info" : "MethodDeclaration[11204-11302]:MethodDeclaration[11299-11397]"
    }, {
      "left" : "public static Node objectlit(Node ... propdefs)",
      "right" : "public static Node objectlit(Node ... propdefs)",
      "info" : "MethodDeclaration[11362-11749]:MethodDeclaration[11457-11844]"
    }, {
      "left" : "public static Node propdef(Node string, Node value)",
      "right" : "public static Node propdef(Node string, Node value)",
      "info" : "MethodDeclaration[11788-12058]:MethodDeclaration[11883-12153]"
    }, {
      "left" : "public static Node arraylit(Node ... exprs)",
      "right" : "public static Node arraylit(Node ... exprs)",
      "info" : "MethodDeclaration[12062-12313]:MethodDeclaration[12157-12408]"
    }, {
      "left" : "public static Node regexp(Node expr)",
      "right" : "public static Node regexp(Node expr)",
      "info" : "MethodDeclaration[12317-12447]:MethodDeclaration[12412-12542]"
    }, {
      "left" : "public static Node regexp(Node expr, Node flags)",
      "right" : "public static Node regexp(Node expr, Node flags)",
      "info" : "MethodDeclaration[12451-12648]:MethodDeclaration[12546-12743]"
    }, {
      "left" : "public static Node string(String s)",
      "right" : "public static Node string(String s)",
      "info" : "MethodDeclaration[12652-12723]:MethodDeclaration[12747-12818]"
    }, {
      "left" : "public static Node stringKey(String s)",
      "right" : "public static Node stringKey(String s)",
      "info" : "MethodDeclaration[12727-12819]:MethodDeclaration[12822-12914]"
    }, {
      "left" : "public static Node number(double d)",
      "right" : "public static Node number(double d)",
      "info" : "MethodDeclaration[12823-12894]:MethodDeclaration[12918-12989]"
    }, {
      "left" : "public static Node thisNode()",
      "right" : "public static Node thisNode()",
      "info" : "MethodDeclaration[12898-12966]:MethodDeclaration[12993-13061]"
    }, {
      "left" : "public static Node trueNode()",
      "right" : "public static Node trueNode()",
      "info" : "MethodDeclaration[12970-13038]:MethodDeclaration[13065-13133]"
    }, {
      "left" : "public static Node falseNode()",
      "right" : "public static Node falseNode()",
      "info" : "MethodDeclaration[13042-13112]:MethodDeclaration[13137-13207]"
    }, {
      "left" : "public static Node nullNode()",
      "right" : "public static Node nullNode()",
      "info" : "MethodDeclaration[13116-13184]:MethodDeclaration[13211-13279]"
    }, {
      "left" : "private static Node binaryOp(int token, Node expr1, Node expr2)",
      "right" : "private static Node binaryOp(int token, Node expr1, Node expr2)",
      "info" : "MethodDeclaration[13209-13428]:MethodDeclaration[13304-13523]"
    }, {
      "left" : "private static Node unaryOp(int token, Node expr)",
      "right" : "private static Node unaryOp(int token, Node expr)",
      "info" : "MethodDeclaration[13432-13574]:MethodDeclaration[13527-13669]"
    }, {
      "left" : "private static boolean mayBeExpressionOrEmpty(Node n)",
      "right" : "private static boolean mayBeExpressionOrEmpty(Node n)",
      "info" : "MethodDeclaration[13578-13683]:MethodDeclaration[13673-13778]"
    }, {
      "left" : "private static boolean isAssignmentTarget(Node n)",
      "right" : "private static boolean isAssignmentTarget(Node n)",
      "info" : "MethodDeclaration[13687-13799]:MethodDeclaration[13782-13894]"
    }, {
      "left" : "private static boolean mayBeStatement(Node n)",
      "right" : "private static boolean mayBeStatement(Node n)",
      "info" : "MethodDeclaration[13966-14801]:MethodDeclaration[14061-14896]"
    }, {
      "left" : "private static boolean mayBeExpression(Node n)",
      "right" : "private static boolean mayBeExpression(Node n)",
      "info" : "MethodDeclaration[14805-16666]:MethodDeclaration[14900-16761]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1794-1796]:Block[1794-1796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1827-1866]:Block[1827-1866]"
    }, {
      "left" : "return new Node(Token.EMPTY);",
      "right" : "return new Node(Token.EMPTY);",
      "info" : "ReturnStatement[1833-1862]:ReturnStatement[1833-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1933-2138]:Block[1933-2138]"
    }, {
      "left" : "Preconditions.checkState(name.isName());",
      "right" : "Preconditions.checkState(name.isName());",
      "info" : "ExpressionStatement[1939-1979]:ExpressionStatement[1939-1979]"
    }, {
      "left" : "Preconditions.checkState(params.isParamList());",
      "right" : "Preconditions.checkState(params.isParamList());",
      "info" : "ExpressionStatement[1984-2031]:ExpressionStatement[1984-2031]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[2036-2077]:ExpressionStatement[2036-2077]"
    }, {
      "left" : "return new Node(Token.FUNCTION, name, params, body);",
      "right" : "return new Node(Token.FUNCTION, name, params, body);",
      "info" : "ReturnStatement[2082-2134]:ReturnStatement[2082-2134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2173-2217]:Block[2173-2217]"
    }, {
      "left" : "return new Node(Token.PARAM_LIST);",
      "right" : "return new Node(Token.PARAM_LIST);",
      "info" : "ReturnStatement[2179-2213]:ReturnStatement[2179-2213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2262-2359]:Block[2262-2359]"
    }, {
      "left" : "Preconditions.checkState(param.isName());",
      "right" : "Preconditions.checkState(param.isName());",
      "info" : "ExpressionStatement[2268-2309]:ExpressionStatement[2268-2309]"
    }, {
      "left" : "return new Node(Token.PARAM_LIST, param);",
      "right" : "return new Node(Token.PARAM_LIST, param);",
      "info" : "ReturnStatement[2314-2355]:ReturnStatement[2314-2355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2409-2595]:Block[2409-2595]"
    }, {
      "left" : "Node paramList = paramList();",
      "right" : "Node paramList = paramList();",
      "info" : "VariableDeclarationStatement[2415-2444]:VariableDeclarationStatement[2415-2444]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[2449-2569]:EnhancedForStatement[2449-2569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2475-2569]:Block[2475-2569]"
    }, {
      "left" : "Preconditions.checkState(param.isName());",
      "right" : "Preconditions.checkState(param.isName());",
      "info" : "ExpressionStatement[2483-2524]:ExpressionStatement[2483-2524]"
    }, {
      "left" : "paramList.addChildToBack(param);",
      "right" : "paramList.addChildToBack(param);",
      "info" : "ExpressionStatement[2531-2563]:ExpressionStatement[2531-2563]"
    }, {
      "left" : "return paramList;",
      "right" : "return paramList;",
      "info" : "ReturnStatement[2574-2591]:ReturnStatement[2574-2591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2647-2833]:Block[2647-2833]"
    }, {
      "left" : "Node paramList = paramList();",
      "right" : "Node paramList = paramList();",
      "info" : "VariableDeclarationStatement[2653-2682]:VariableDeclarationStatement[2653-2682]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[2687-2807]:EnhancedForStatement[2687-2807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2713-2807]:Block[2713-2807]"
    }, {
      "left" : "Preconditions.checkState(param.isName());",
      "right" : "Preconditions.checkState(param.isName());",
      "info" : "ExpressionStatement[2721-2762]:ExpressionStatement[2721-2762]"
    }, {
      "left" : "paramList.addChildToBack(param);",
      "right" : "paramList.addChildToBack(param);",
      "info" : "ExpressionStatement[2769-2801]:ExpressionStatement[2769-2801]"
    }, {
      "left" : "return paramList;",
      "right" : "return paramList;",
      "info" : "ReturnStatement[2812-2829]:ReturnStatement[2812-2829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2864-2927]:Block[2864-2927]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[2870-2905]:VariableDeclarationStatement[2870-2905]"
    }, {
      "left" : "return block;",
      "right" : "return block;",
      "info" : "ReturnStatement[2910-2923]:ReturnStatement[2910-2923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2967-3088]:Block[2967-3088]"
    }, {
      "left" : "Preconditions.checkState(mayBeStatement(stmt));",
      "right" : "Preconditions.checkState(mayBeStatement(stmt));",
      "info" : "ExpressionStatement[2973-3020]:ExpressionStatement[2973-3020]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK, stmt);",
      "right" : "Node block = new Node(Token.BLOCK, stmt);",
      "info" : "VariableDeclarationStatement[3025-3066]:VariableDeclarationStatement[3025-3066]"
    }, {
      "left" : "return block;",
      "right" : "return block;",
      "info" : "ReturnStatement[3071-3084]:ReturnStatement[3071-3084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3133-3320]:Block[3133-3320]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[3139-3174]:VariableDeclarationStatement[3139-3174]"
    }, {
      "left" : "for (Node stmt : stmts)",
      "right" : "for (Node stmt : stmts)",
      "info" : "EnhancedForStatement[3179-3298]:EnhancedForStatement[3179-3298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3203-3298]:Block[3203-3298]"
    }, {
      "left" : "Preconditions.checkState(mayBeStatement(stmt));",
      "right" : "Preconditions.checkState(mayBeStatement(stmt));",
      "info" : "ExpressionStatement[3211-3258]:ExpressionStatement[3211-3258]"
    }, {
      "left" : "block.addChildToBack(stmt);",
      "right" : "block.addChildToBack(stmt);",
      "info" : "ExpressionStatement[3265-3292]:ExpressionStatement[3265-3292]"
    }, {
      "left" : "return block;",
      "right" : "return block;",
      "info" : "ReturnStatement[3303-3316]:ReturnStatement[3303-3316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3367-3612]:Block[3461-3706]"
    }, {
      "left" : "Node block = new Node(Token.SCRIPT);",
      "right" : "Node block = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[3430-3466]:VariableDeclarationStatement[3524-3560]"
    }, {
      "left" : "for (Node stmt : stmts)",
      "right" : "for (Node stmt : stmts)",
      "info" : "EnhancedForStatement[3471-3590]:EnhancedForStatement[3565-3684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3495-3590]:Block[3589-3684]"
    }, {
      "left" : "Preconditions.checkState(mayBeStatement(stmt));",
      "right" : "Preconditions.checkState(mayBeStatement(stmt));",
      "info" : "ExpressionStatement[3503-3550]:ExpressionStatement[3597-3644]"
    }, {
      "left" : "block.addChildToBack(stmt);",
      "right" : "block.addChildToBack(stmt);",
      "info" : "ExpressionStatement[3557-3584]:ExpressionStatement[3651-3678]"
    }, {
      "left" : "return block;",
      "right" : "return block;",
      "info" : "ReturnStatement[3595-3608]:ReturnStatement[3689-3702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3662-3844]:Block[3756-3938]"
    }, {
      "left" : "Preconditions.checkState(name.isName() && !name.hasChildren());",
      "right" : "Preconditions.checkState(name.isName() && !name.hasChildren());",
      "info" : "ExpressionStatement[3668-3731]:ExpressionStatement[3762-3825]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(value));",
      "right" : "Preconditions.checkState(mayBeExpression(value));",
      "info" : "ExpressionStatement[3736-3785]:ExpressionStatement[3830-3879]"
    }, {
      "left" : "name.addChildToFront(value);",
      "right" : "name.addChildToFront(value);",
      "info" : "ExpressionStatement[3790-3818]:ExpressionStatement[3884-3912]"
    }, {
      "left" : "return var(name);",
      "right" : "return var(name);",
      "info" : "ReturnStatement[3823-3840]:ReturnStatement[3917-3934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3882-3970]:Block[3976-4064]"
    }, {
      "left" : "Preconditions.checkState(name.isName());",
      "right" : "Preconditions.checkState(name.isName());",
      "info" : "ExpressionStatement[3888-3928]:ExpressionStatement[3982-4022]"
    }, {
      "left" : "return new Node(Token.VAR, name);",
      "right" : "return new Node(Token.VAR, name);",
      "info" : "ReturnStatement[3933-3966]:ReturnStatement[4027-4060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4006-4046]:Block[4100-4140]"
    }, {
      "left" : "return new Node(Token.RETURN);",
      "right" : "return new Node(Token.RETURN);",
      "info" : "ReturnStatement[4012-4042]:ReturnStatement[4106-4136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4091-4190]:Block[4185-4284]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[4097-4145]:ExpressionStatement[4191-4239]"
    }, {
      "left" : "return new Node(Token.RETURN, expr);",
      "right" : "return new Node(Token.RETURN, expr);",
      "info" : "ReturnStatement[4150-4186]:ReturnStatement[4244-4280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4234-4332]:Block[4328-4426]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[4240-4288]:ExpressionStatement[4334-4382]"
    }, {
      "left" : "return new Node(Token.THROW, expr);",
      "right" : "return new Node(Token.THROW, expr);",
      "info" : "ReturnStatement[4293-4328]:ReturnStatement[4387-4422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4377-4481]:Block[4471-4575]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[4383-4431]:ExpressionStatement[4477-4525]"
    }, {
      "left" : "return new Node(Token.EXPR_RESULT, expr);",
      "right" : "return new Node(Token.EXPR_RESULT, expr);",
      "info" : "ReturnStatement[4436-4477]:ReturnStatement[4530-4571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4533-4680]:Block[4627-4774]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[4539-4587]:ExpressionStatement[4633-4681]"
    }, {
      "left" : "Preconditions.checkState(then.isBlock());",
      "right" : "Preconditions.checkState(then.isBlock());",
      "info" : "ExpressionStatement[4592-4633]:ExpressionStatement[4686-4727]"
    }, {
      "left" : "return new Node(Token.IF, cond, then);",
      "right" : "return new Node(Token.IF, cond, then);",
      "info" : "ReturnStatement[4638-4676]:ReturnStatement[4732-4770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4747-4954]:Block[4841-5048]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[4753-4801]:ExpressionStatement[4847-4895]"
    }, {
      "left" : "Preconditions.checkState(then.isBlock());",
      "right" : "Preconditions.checkState(then.isBlock());",
      "info" : "ExpressionStatement[4806-4847]:ExpressionStatement[4900-4941]"
    }, {
      "left" : "Preconditions.checkState(elseNode.isBlock());",
      "right" : "Preconditions.checkState(elseNode.isBlock());",
      "info" : "ExpressionStatement[4852-4897]:ExpressionStatement[4946-4991]"
    }, {
      "left" : "return new Node(Token.IF, cond, then, elseNode);",
      "right" : "return new Node(Token.IF, cond, then, elseNode);",
      "info" : "ReturnStatement[4902-4950]:ReturnStatement[4996-5044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5006-5153]:Block[5100-5247]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[5012-5053]:ExpressionStatement[5106-5147]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[5058-5106]:ExpressionStatement[5152-5200]"
    }, {
      "left" : "return new Node(Token.DO, body, cond);",
      "right" : "return new Node(Token.DO, body, cond);",
      "info" : "ReturnStatement[5111-5149]:ReturnStatement[5205-5243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5217-5446]:Block[5311-5540]"
    }, {
      "left" : "Preconditions.checkState(target.isVar() || mayBeExpression(target));",
      "right" : "Preconditions.checkState(target.isVar() || mayBeExpression(target));",
      "info" : "ExpressionStatement[5223-5291]:ExpressionStatement[5317-5385]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[5296-5344]:ExpressionStatement[5390-5438]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[5349-5390]:ExpressionStatement[5443-5484]"
    }, {
      "left" : "return new Node(Token.FOR, target, cond, body);",
      "right" : "return new Node(Token.FOR, target, cond, body);",
      "info" : "ReturnStatement[5395-5442]:ReturnStatement[5489-5536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5521-5824]:Block[5615-5918]"
    }, {
      "left" : "Preconditions.checkState(init.isVar() || mayBeExpressionOrEmpty(init));",
      "right" : "Preconditions.checkState(init.isVar() || mayBeExpressionOrEmpty(init));",
      "info" : "ExpressionStatement[5527-5598]:ExpressionStatement[5621-5692]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpressionOrEmpty(cond));",
      "right" : "Preconditions.checkState(mayBeExpressionOrEmpty(cond));",
      "info" : "ExpressionStatement[5603-5658]:ExpressionStatement[5697-5752]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpressionOrEmpty(incr));",
      "right" : "Preconditions.checkState(mayBeExpressionOrEmpty(incr));",
      "info" : "ExpressionStatement[5663-5718]:ExpressionStatement[5757-5812]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[5723-5764]:ExpressionStatement[5817-5858]"
    }, {
      "left" : "return new Node(Token.FOR, init, cond, incr, body);",
      "right" : "return new Node(Token.FOR, init, cond, incr, body);",
      "info" : "ReturnStatement[5769-5820]:ReturnStatement[5863-5914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5885-6180]:Block[5979-6274]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[5891-5939]:ExpressionStatement[5985-6033]"
    }, {
      "left" : "Node switchNode = new Node(Token.SWITCH, cond);",
      "right" : "Node switchNode = new Node(Token.SWITCH, cond);",
      "info" : "VariableDeclarationStatement[5944-5991]:VariableDeclarationStatement[6038-6085]"
    }, {
      "left" : "for (Node caseNode : cases)",
      "right" : "for (Node caseNode : cases)",
      "info" : "EnhancedForStatement[5996-6153]:EnhancedForStatement[6090-6247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6024-6153]:Block[6118-6247]"
    }, {
      "left" : "Preconditions.checkState(caseNode.isCase() || caseNode.isDefaultCase());",
      "right" : "Preconditions.checkState(caseNode.isCase() || caseNode.isDefaultCase());",
      "info" : "ExpressionStatement[6032-6104]:ExpressionStatement[6126-6198]"
    }, {
      "left" : "switchNode.addChildToBack(caseNode);",
      "right" : "switchNode.addChildToBack(caseNode);",
      "info" : "ExpressionStatement[6111-6147]:ExpressionStatement[6205-6241]"
    }, {
      "left" : "return switchNode;",
      "right" : "return switchNode;",
      "info" : "ReturnStatement[6158-6176]:ReturnStatement[6252-6270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6234-6441]:Block[6328-6535]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[6240-6288]:ExpressionStatement[6334-6382]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[6293-6334]:ExpressionStatement[6387-6428]"
    }, {
      "left" : "body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[6339-6392]:ExpressionStatement[6433-6486]"
    }, {
      "left" : "return new Node(Token.CASE, expr, body);",
      "right" : "return new Node(Token.CASE, expr, body);",
      "info" : "ReturnStatement[6397-6437]:ReturnStatement[6491-6531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6487-6643]:Block[6581-6737]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[6493-6534]:ExpressionStatement[6587-6628]"
    }, {
      "left" : "body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[6539-6592]:ExpressionStatement[6633-6686]"
    }, {
      "left" : "return new Node(Token.DEFAULT_CASE, body);",
      "right" : "return new Node(Token.DEFAULT_CASE, body);",
      "info" : "ReturnStatement[6597-6639]:ReturnStatement[6691-6733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6694-6922]:Block[6788-7016]"
    }, {
      "left" : "Preconditions.checkState(name.isLabelName());",
      "right" : "Preconditions.checkState(name.isLabelName());",
      "info" : "ExpressionStatement[6751-6796]:ExpressionStatement[6845-6890]"
    }, {
      "left" : "Preconditions.checkState(mayBeStatement(stmt));",
      "right" : "Preconditions.checkState(mayBeStatement(stmt));",
      "info" : "ExpressionStatement[6801-6848]:ExpressionStatement[6895-6942]"
    }, {
      "left" : "Node block = new Node(Token.LABEL, name, stmt);",
      "right" : "Node block = new Node(Token.LABEL, name, stmt);",
      "info" : "VariableDeclarationStatement[6853-6900]:VariableDeclarationStatement[6947-6994]"
    }, {
      "left" : "return block;",
      "right" : "return block;",
      "info" : "ReturnStatement[6905-6918]:ReturnStatement[6999-7012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6968-7071]:Block[7062-7165]"
    }, {
      "left" : "Preconditions.checkState(!name.isEmpty());",
      "right" : "Preconditions.checkState(!name.isEmpty());",
      "info" : "ExpressionStatement[6974-7016]:ExpressionStatement[7068-7110]"
    }, {
      "left" : "return Node.newString(Token.LABEL_NAME, name);",
      "right" : "return Node.newString(Token.LABEL_NAME, name);",
      "info" : "ReturnStatement[7021-7067]:ReturnStatement[7115-7161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7759-7927]:Block[7854-8022]"
    }, {
      "left" : "Preconditions.checkState(finallyBody.isBlock());",
      "right" : "Preconditions.checkState(finallyBody.isBlock());",
      "info" : "ExpressionStatement[7765-7813]:ExpressionStatement[7860-7908]"
    }, {
      "left" : "Node tryNode = tryCatch(tryBody, catchNode);",
      "right" : "Node tryNode = tryCatch(tryBody, catchNode);",
      "info" : "VariableDeclarationStatement[7818-7862]:VariableDeclarationStatement[7913-7957]"
    }, {
      "left" : "tryNode.addChildToBack(finallyBody);",
      "right" : "tryNode.addChildToBack(finallyBody);",
      "info" : "ExpressionStatement[7867-7903]:ExpressionStatement[7962-7998]"
    }, {
      "left" : "return tryNode;",
      "right" : "return tryNode;",
      "info" : "ReturnStatement[7908-7923]:ReturnStatement[8003-8018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7982-8124]:Block[8077-8219]"
    }, {
      "left" : "Preconditions.checkState(expr.isName());",
      "right" : "Preconditions.checkState(expr.isName());",
      "info" : "ExpressionStatement[7988-8028]:ExpressionStatement[8083-8123]"
    }, {
      "left" : "Preconditions.checkState(body.isBlock());",
      "right" : "Preconditions.checkState(body.isBlock());",
      "info" : "ExpressionStatement[8033-8074]:ExpressionStatement[8128-8169]"
    }, {
      "left" : "return new Node(Token.CATCH, expr, body);",
      "right" : "return new Node(Token.CATCH, expr, body);",
      "info" : "ReturnStatement[8079-8120]:ReturnStatement[8174-8215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8159-8198]:Block[8254-8293]"
    }, {
      "left" : "return new Node(Token.BREAK);",
      "right" : "return new Node(Token.BREAK);",
      "info" : "ReturnStatement[8165-8194]:ReturnStatement[8260-8289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8388]:Block[8337-8483]"
    }, {
      "left" : "Preconditions.checkState(name.isLabelName());",
      "right" : "Preconditions.checkState(name.isLabelName());",
      "info" : "ExpressionStatement[8299-8344]:ExpressionStatement[8394-8439]"
    }, {
      "left" : "return new Node(Token.BREAK, name);",
      "right" : "return new Node(Token.BREAK, name);",
      "info" : "ReturnStatement[8349-8384]:ReturnStatement[8444-8479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-8468]:Block[8521-8563]"
    }, {
      "left" : "return new Node(Token.CONTINUE);",
      "right" : "return new Node(Token.CONTINUE);",
      "info" : "ReturnStatement[8432-8464]:ReturnStatement[8527-8559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8515-8664]:Block[8610-8759]"
    }, {
      "left" : "Preconditions.checkState(name.isLabelName());",
      "right" : "Preconditions.checkState(name.isLabelName());",
      "info" : "ExpressionStatement[8572-8617]:ExpressionStatement[8667-8712]"
    }, {
      "left" : "return new Node(Token.CONTINUE, name);",
      "right" : "return new Node(Token.CONTINUE, name);",
      "info" : "ReturnStatement[8622-8660]:ReturnStatement[8717-8755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8727-8915]:Block[8822-9010]"
    }, {
      "left" : "Node call = new Node(Token.CALL, target);",
      "right" : "Node call = new Node(Token.CALL, target);",
      "info" : "VariableDeclarationStatement[8733-8774]:VariableDeclarationStatement[8828-8869]"
    }, {
      "left" : "for (Node arg : args)",
      "right" : "for (Node arg : args)",
      "info" : "EnhancedForStatement[8779-8894]:EnhancedForStatement[8874-8989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8801-8894]:Block[8896-8989]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(arg));",
      "right" : "Preconditions.checkState(mayBeExpression(arg));",
      "info" : "ExpressionStatement[8809-8856]:ExpressionStatement[8904-8951]"
    }, {
      "left" : "call.addChildToBack(arg);",
      "right" : "call.addChildToBack(arg);",
      "info" : "ExpressionStatement[8863-8888]:ExpressionStatement[8958-8983]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[8899-8911]:ReturnStatement[8994-9006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8974-9170]:Block[9069-9265]"
    }, {
      "left" : "Node newcall = new Node(Token.NEW, target);",
      "right" : "Node newcall = new Node(Token.NEW, target);",
      "info" : "VariableDeclarationStatement[8980-9023]:VariableDeclarationStatement[9075-9118]"
    }, {
      "left" : "for (Node arg : args)",
      "right" : "for (Node arg : args)",
      "info" : "EnhancedForStatement[9028-9146]:EnhancedForStatement[9123-9241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9050-9146]:Block[9145-9241]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(arg));",
      "right" : "Preconditions.checkState(mayBeExpression(arg));",
      "info" : "ExpressionStatement[9058-9105]:ExpressionStatement[9153-9200]"
    }, {
      "left" : "newcall.addChildToBack(arg);",
      "right" : "newcall.addChildToBack(arg);",
      "info" : "ExpressionStatement[9112-9140]:ExpressionStatement[9207-9235]"
    }, {
      "left" : "return newcall;",
      "right" : "return newcall;",
      "info" : "ReturnStatement[9151-9166]:ReturnStatement[9246-9261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9211-9261]:Block[9306-9356]"
    }, {
      "left" : "return Node.newString(Token.NAME, name);",
      "right" : "return Node.newString(Token.NAME, name);",
      "info" : "ReturnStatement[9217-9257]:ReturnStatement[9312-9352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9316-9473]:Block[9411-9568]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(target));",
      "right" : "Preconditions.checkState(mayBeExpression(target));",
      "info" : "ExpressionStatement[9322-9372]:ExpressionStatement[9417-9467]"
    }, {
      "left" : "Preconditions.checkState(prop.isString());",
      "right" : "Preconditions.checkState(prop.isString());",
      "info" : "ExpressionStatement[9377-9419]:ExpressionStatement[9472-9514]"
    }, {
      "left" : "return new Node(Token.GETPROP, target, prop);",
      "right" : "return new Node(Token.GETPROP, target, prop);",
      "info" : "ReturnStatement[9424-9469]:ReturnStatement[9519-9564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9528-9691]:Block[9623-9786]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(target));",
      "right" : "Preconditions.checkState(mayBeExpression(target));",
      "info" : "ExpressionStatement[9534-9584]:ExpressionStatement[9629-9679]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(elem));",
      "right" : "Preconditions.checkState(mayBeExpression(elem));",
      "info" : "ExpressionStatement[9589-9637]:ExpressionStatement[9684-9732]"
    }, {
      "left" : "return new Node(Token.GETELEM, target, elem);",
      "right" : "return new Node(Token.GETELEM, target, elem);",
      "info" : "ReturnStatement[9642-9687]:ReturnStatement[9737-9782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9745-9910]:Block[9840-10005]"
    }, {
      "left" : "Preconditions.checkState(isAssignmentTarget(target));",
      "right" : "Preconditions.checkState(isAssignmentTarget(target));",
      "info" : "ExpressionStatement[9751-9804]:ExpressionStatement[9846-9899]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[9809-9857]:ExpressionStatement[9904-9952]"
    }, {
      "left" : "return new Node(Token.ASSIGN, target, expr);",
      "right" : "return new Node(Token.ASSIGN, target, expr);",
      "info" : "ReturnStatement[9862-9906]:ReturnStatement[9957-10001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9978-10207]:Block[10073-10302]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(cond));",
      "right" : "Preconditions.checkState(mayBeExpression(cond));",
      "info" : "ExpressionStatement[9984-10032]:ExpressionStatement[10079-10127]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(trueval));",
      "right" : "Preconditions.checkState(mayBeExpression(trueval));",
      "info" : "ExpressionStatement[10037-10088]:ExpressionStatement[10132-10183]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(falseval));",
      "right" : "Preconditions.checkState(mayBeExpression(falseval));",
      "info" : "ExpressionStatement[10093-10145]:ExpressionStatement[10188-10240]"
    }, {
      "left" : "return new Node(Token.HOOK, cond, trueval, falseval);",
      "right" : "return new Node(Token.HOOK, cond, trueval, falseval);",
      "info" : "ReturnStatement[10150-10203]:ReturnStatement[10245-10298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10260-10313]:Block[10355-10408]"
    }, {
      "left" : "return binaryOp(Token.COMMA, expr1, expr2);",
      "right" : "return binaryOp(Token.COMMA, expr1, expr2);",
      "info" : "ReturnStatement[10266-10309]:ReturnStatement[10361-10404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10364-10415]:Block[10459-10510]"
    }, {
      "left" : "return binaryOp(Token.AND, expr1, expr2);",
      "right" : "return binaryOp(Token.AND, expr1, expr2);",
      "info" : "ReturnStatement[10370-10411]:ReturnStatement[10465-10506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10465-10515]:Block[10560-10610]"
    }, {
      "left" : "return binaryOp(Token.OR, expr1, expr2);",
      "right" : "return binaryOp(Token.OR, expr1, expr2);",
      "info" : "ReturnStatement[10471-10511]:ReturnStatement[10566-10606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10554-10597]:Block[10649-10692]"
    }, {
      "left" : "return unaryOp(Token.NOT, expr1);",
      "right" : "return unaryOp(Token.NOT, expr1);",
      "info" : "ReturnStatement[10560-10593]:ReturnStatement[10655-10688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10669-10719]:Block[10764-10814]"
    }, {
      "left" : "return binaryOp(Token.EQ, expr1, expr2);",
      "right" : "return binaryOp(Token.EQ, expr1, expr2);",
      "info" : "ReturnStatement[10675-10715]:ReturnStatement[10770-10810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10794-10846]:Block[10889-10941]"
    }, {
      "left" : "return binaryOp(Token.SHEQ, expr1, expr2);",
      "right" : "return binaryOp(Token.SHEQ, expr1, expr2);",
      "info" : "ReturnStatement[10800-10842]:ReturnStatement[10895-10937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10890-10934]:Block[10985-11029]"
    }, {
      "left" : "return unaryOp(Token.VOID, expr1);",
      "right" : "return unaryOp(Token.VOID, expr1);",
      "info" : "ReturnStatement[10896-10930]:ReturnStatement[10991-11025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10973-11016]:Block[11068-11111]"
    }, {
      "left" : "return unaryOp(Token.NEG, expr1);",
      "right" : "return unaryOp(Token.NEG, expr1);",
      "info" : "ReturnStatement[10979-11012]:ReturnStatement[11074-11107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11055-11098]:Block[11150-11193]"
    }, {
      "left" : "return unaryOp(Token.POS, expr1);",
      "right" : "return unaryOp(Token.POS, expr1);",
      "info" : "ReturnStatement[11061-11094]:ReturnStatement[11156-11189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11149-11200]:Block[11244-11295]"
    }, {
      "left" : "return binaryOp(Token.ADD, expr1, expr2);",
      "right" : "return binaryOp(Token.ADD, expr1, expr2);",
      "info" : "ReturnStatement[11155-11196]:ReturnStatement[11250-11291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11251-11302]:Block[11346-11397]"
    }, {
      "left" : "return binaryOp(Token.SUB, expr1, expr2);",
      "right" : "return binaryOp(Token.SUB, expr1, expr2);",
      "info" : "ReturnStatement[11257-11298]:ReturnStatement[11352-11393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11410-11749]:Block[11505-11844]"
    }, {
      "left" : "Node objectlit = new Node(Token.OBJECTLIT);",
      "right" : "Node objectlit = new Node(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[11416-11459]:VariableDeclarationStatement[11511-11554]"
    }, {
      "left" : "for (Node propdef : propdefs)",
      "right" : "for (Node propdef : propdefs)",
      "info" : "EnhancedForStatement[11464-11723]:EnhancedForStatement[11559-11818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11494-11723]:Block[11589-11818]"
    }, {
      "left" : "Preconditions.checkState(\n          propdef.isStringKey() ||\n          propdef.isGetterDef() || propdef.isSetterDef());",
      "right" : "Preconditions.checkState(\n          propdef.isStringKey() ||\n          propdef.isGetterDef() || propdef.isSetterDef());",
      "info" : "ExpressionStatement[11502-11621]:ExpressionStatement[11597-11716]"
    }, {
      "left" : "Preconditions.checkState(propdef.hasOneChild());",
      "right" : "Preconditions.checkState(propdef.hasOneChild());",
      "info" : "ExpressionStatement[11628-11676]:ExpressionStatement[11723-11771]"
    }, {
      "left" : "objectlit.addChildToBack(propdef);",
      "right" : "objectlit.addChildToBack(propdef);",
      "info" : "ExpressionStatement[11683-11717]:ExpressionStatement[11778-11812]"
    }, {
      "left" : "return objectlit;",
      "right" : "return objectlit;",
      "info" : "ReturnStatement[11728-11745]:ReturnStatement[11823-11840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11840-12058]:Block[11935-12153]"
    }, {
      "left" : "Preconditions.checkState(string.isStringKey());",
      "right" : "Preconditions.checkState(string.isStringKey());",
      "info" : "ExpressionStatement[11846-11893]:ExpressionStatement[11941-11988]"
    }, {
      "left" : "Preconditions.checkState(!string.hasChildren());",
      "right" : "Preconditions.checkState(!string.hasChildren());",
      "info" : "ExpressionStatement[11898-11946]:ExpressionStatement[11993-12041]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(value));",
      "right" : "Preconditions.checkState(mayBeExpression(value));",
      "info" : "ExpressionStatement[11951-12000]:ExpressionStatement[12046-12095]"
    }, {
      "left" : "string.addChildToFront(value);",
      "right" : "string.addChildToFront(value);",
      "info" : "ExpressionStatement[12005-12035]:ExpressionStatement[12100-12130]"
    }, {
      "left" : "return string;",
      "right" : "return string;",
      "info" : "ReturnStatement[12040-12054]:ReturnStatement[12135-12149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12106-12313]:Block[12201-12408]"
    }, {
      "left" : "Node arraylit = new Node(Token.ARRAYLIT);",
      "right" : "Node arraylit = new Node(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[12112-12153]:VariableDeclarationStatement[12207-12248]"
    }, {
      "left" : "for (Node expr : exprs)",
      "right" : "for (Node expr : exprs)",
      "info" : "EnhancedForStatement[12158-12288]:EnhancedForStatement[12253-12383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12182-12288]:Block[12277-12383]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpressionOrEmpty(expr));",
      "right" : "Preconditions.checkState(mayBeExpressionOrEmpty(expr));",
      "info" : "ExpressionStatement[12190-12245]:ExpressionStatement[12285-12340]"
    }, {
      "left" : "arraylit.addChildToBack(expr);",
      "right" : "arraylit.addChildToBack(expr);",
      "info" : "ExpressionStatement[12252-12282]:ExpressionStatement[12347-12377]"
    }, {
      "left" : "return arraylit;",
      "right" : "return arraylit;",
      "info" : "ReturnStatement[12293-12309]:ReturnStatement[12388-12404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12354-12447]:Block[12449-12542]"
    }, {
      "left" : "Preconditions.checkState(expr.isString());",
      "right" : "Preconditions.checkState(expr.isString());",
      "info" : "ExpressionStatement[12360-12402]:ExpressionStatement[12455-12497]"
    }, {
      "left" : "return new Node(Token.REGEXP, expr);",
      "right" : "return new Node(Token.REGEXP, expr);",
      "info" : "ReturnStatement[12407-12443]:ReturnStatement[12502-12538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12500-12648]:Block[12595-12743]"
    }, {
      "left" : "Preconditions.checkState(expr.isString());",
      "right" : "Preconditions.checkState(expr.isString());",
      "info" : "ExpressionStatement[12506-12548]:ExpressionStatement[12601-12643]"
    }, {
      "left" : "Preconditions.checkState(flags.isString());",
      "right" : "Preconditions.checkState(flags.isString());",
      "info" : "ExpressionStatement[12553-12596]:ExpressionStatement[12648-12691]"
    }, {
      "left" : "return new Node(Token.REGEXP, expr, flags);",
      "right" : "return new Node(Token.REGEXP, expr, flags);",
      "info" : "ReturnStatement[12601-12644]:ReturnStatement[12696-12739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12688-12723]:Block[12783-12818]"
    }, {
      "left" : "return Node.newString(s);",
      "right" : "return Node.newString(s);",
      "info" : "ReturnStatement[12694-12719]:ReturnStatement[12789-12814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12766-12819]:Block[12861-12914]"
    }, {
      "left" : "return Node.newString(Token.STRING_KEY, s);",
      "right" : "return Node.newString(Token.STRING_KEY, s);",
      "info" : "ReturnStatement[12772-12815]:ReturnStatement[12867-12910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12859-12894]:Block[12954-12989]"
    }, {
      "left" : "return Node.newNumber(d);",
      "right" : "return Node.newNumber(d);",
      "info" : "ReturnStatement[12865-12890]:ReturnStatement[12960-12985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12928-12966]:Block[13023-13061]"
    }, {
      "left" : "return new Node(Token.THIS);",
      "right" : "return new Node(Token.THIS);",
      "info" : "ReturnStatement[12934-12962]:ReturnStatement[13029-13057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13000-13038]:Block[13095-13133]"
    }, {
      "left" : "return new Node(Token.TRUE);",
      "right" : "return new Node(Token.TRUE);",
      "info" : "ReturnStatement[13006-13034]:ReturnStatement[13101-13129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13073-13112]:Block[13168-13207]"
    }, {
      "left" : "return new Node(Token.FALSE);",
      "right" : "return new Node(Token.FALSE);",
      "info" : "ReturnStatement[13079-13108]:ReturnStatement[13174-13203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13146-13184]:Block[13241-13279]"
    }, {
      "left" : "return new Node(Token.NULL);",
      "right" : "return new Node(Token.NULL);",
      "info" : "ReturnStatement[13152-13180]:ReturnStatement[13247-13275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13273-13428]:Block[13368-13523]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr1));",
      "right" : "Preconditions.checkState(mayBeExpression(expr1));",
      "info" : "ExpressionStatement[13279-13328]:ExpressionStatement[13374-13423]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr2));",
      "right" : "Preconditions.checkState(mayBeExpression(expr2));",
      "info" : "ExpressionStatement[13333-13382]:ExpressionStatement[13428-13477]"
    }, {
      "left" : "return new Node(token, expr1, expr2);",
      "right" : "return new Node(token, expr1, expr2);",
      "info" : "ReturnStatement[13387-13424]:ReturnStatement[13482-13519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13482-13574]:Block[13577-13669]"
    }, {
      "left" : "Preconditions.checkState(mayBeExpression(expr));",
      "right" : "Preconditions.checkState(mayBeExpression(expr));",
      "info" : "ExpressionStatement[13488-13536]:ExpressionStatement[13583-13631]"
    }, {
      "left" : "return new Node(token, expr);",
      "right" : "return new Node(token, expr);",
      "info" : "ReturnStatement[13541-13570]:ReturnStatement[13636-13665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13632-13683]:Block[13727-13778]"
    }, {
      "left" : "return n.isEmpty() || mayBeExpression(n);",
      "right" : "return n.isEmpty() || mayBeExpression(n);",
      "info" : "ReturnStatement[13638-13679]:ReturnStatement[13733-13774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13737-13799]:Block[13832-13894]"
    }, {
      "left" : "return n.isName() || n.isGetProp() || n.isGetElem();",
      "right" : "return n.isName() || n.isGetProp() || n.isGetElem();",
      "info" : "ReturnStatement[13743-13795]:ReturnStatement[13838-13890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14130-14801]:Block[14225-14896]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.RETURN:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.RETURN:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[14136-14797]:SwitchStatement[14231-14892]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[14165-14182]:SwitchCase[14260-14277]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14189-14209]:SwitchCase[14284-14304]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14310-14322]:ReturnStatement[14405-14417]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[14330-14347]:SwitchCase[14425-14442]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[14354-14371]:SwitchCase[14449-14466]"
    }, {
      "left" : "case Token.CONST:",
      "right" : "case Token.CONST:",
      "info" : "SwitchCase[14378-14395]:SwitchCase[14473-14490]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[14402-14422]:SwitchCase[14497-14517]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[14429-14449]:SwitchCase[14524-14544]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[14456-14470]:SwitchCase[14551-14565]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[14477-14500]:SwitchCase[14572-14595]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[14507-14522]:SwitchCase[14602-14617]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[14529-14543]:SwitchCase[14624-14638]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[14550-14567]:SwitchCase[14645-14662]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[14574-14592]:SwitchCase[14669-14687]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[14599-14617]:SwitchCase[14694-14712]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[14624-14641]:SwitchCase[14719-14736]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[14648-14663]:SwitchCase[14743-14758]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14670-14685]:SwitchCase[14765-14780]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[14692-14709]:SwitchCase[14787-14804]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[14716-14732]:SwitchCase[14811-14827]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14741-14753]:ReturnStatement[14836-14848]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14761-14769]:SwitchCase[14856-14864]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14778-14791]:ReturnStatement[14873-14886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14970-16666]:Block[15065-16761]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // FUNCTION is used both in expression and statement\n        // contexts.\n        return true;\n\n      case Token.ADD:\n      case Token.AND:\n      case Token.ARRAYLIT:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITNOT:\n      case Token.BITXOR:\n      case Token.CALL:\n      case Token.COMMA:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.FALSE:\n      case Token.GE:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GT:\n      case Token.HOOK:\n      case Token.IN:\n      case Token.INC:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NAME:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NEW:\n      case Token.NOT:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.OR:\n      case Token.POS:\n      case Token.REGEXP:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.STRING:\n      case Token.SUB:\n      case Token.THIS:\n      case Token.TYPEOF:\n      case Token.TRUE:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // FUNCTION is used both in expression and statement\n        // contexts.\n        return true;\n\n      case Token.ADD:\n      case Token.AND:\n      case Token.ARRAYLIT:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITNOT:\n      case Token.BITXOR:\n      case Token.CALL:\n      case Token.COMMA:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.FALSE:\n      case Token.GE:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GT:\n      case Token.HOOK:\n      case Token.IN:\n      case Token.INC:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NAME:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NEW:\n      case Token.NOT:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.OR:\n      case Token.POS:\n      case Token.REGEXP:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.STRING:\n      case Token.SUB:\n      case Token.THIS:\n      case Token.TYPEOF:\n      case Token.TRUE:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[14976-16662]:SwitchStatement[15071-16757]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15005-15025]:SwitchCase[15100-15120]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15116-15128]:ReturnStatement[15211-15223]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[15136-15151]:SwitchCase[15231-15246]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[15158-15173]:SwitchCase[15253-15268]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[15180-15200]:SwitchCase[15275-15295]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[15207-15225]:SwitchCase[15302-15320]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[15232-15256]:SwitchCase[15327-15351]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[15263-15288]:SwitchCase[15358-15383]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[15295-15320]:SwitchCase[15390-15415]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[15327-15349]:SwitchCase[15422-15444]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[15356-15378]:SwitchCase[15451-15473]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[15385-15408]:SwitchCase[15480-15503]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[15415-15437]:SwitchCase[15510-15532]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[15444-15466]:SwitchCase[15539-15561]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[15473-15495]:SwitchCase[15568-15590]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[15502-15524]:SwitchCase[15597-15619]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[15531-15553]:SwitchCase[15626-15648]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[15560-15578]:SwitchCase[15655-15673]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[15585-15602]:SwitchCase[15680-15697]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[15609-15627]:SwitchCase[15704-15722]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[15634-15652]:SwitchCase[15729-15747]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15659-15675]:SwitchCase[15754-15770]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[15682-15699]:SwitchCase[15777-15794]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[15706-15721]:SwitchCase[15801-15816]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[15728-15747]:SwitchCase[15823-15842]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[15754-15769]:SwitchCase[15849-15864]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[15776-15790]:SwitchCase[15871-15885]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[15797-15814]:SwitchCase[15892-15909]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[15821-15835]:SwitchCase[15916-15930]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[15842-15861]:SwitchCase[15937-15956]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[15868-15887]:SwitchCase[15963-15982]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[15894-15908]:SwitchCase[15989-16003]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[15915-15931]:SwitchCase[16010-16026]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[15938-15952]:SwitchCase[16033-16047]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[15959-15974]:SwitchCase[16054-16069]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[15981-16003]:SwitchCase[16076-16098]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[16010-16024]:SwitchCase[16105-16119]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[16031-16046]:SwitchCase[16126-16141]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[16053-16067]:SwitchCase[16148-16162]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[16074-16089]:SwitchCase[16169-16184]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[16096-16111]:SwitchCase[16191-16206]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16118-16134]:SwitchCase[16213-16229]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[16141-16155]:SwitchCase[16236-16250]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[16162-16177]:SwitchCase[16257-16272]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[16184-16199]:SwitchCase[16279-16294]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[16206-16221]:SwitchCase[16301-16316]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[16228-16246]:SwitchCase[16323-16341]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[16253-16269]:SwitchCase[16348-16364]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[16276-16297]:SwitchCase[16371-16392]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[16304-16318]:SwitchCase[16399-16413]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[16325-16340]:SwitchCase[16420-16435]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[16347-16365]:SwitchCase[16442-16460]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[16372-16387]:SwitchCase[16467-16482]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[16394-16410]:SwitchCase[16489-16505]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[16417-16433]:SwitchCase[16512-16528]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[16440-16458]:SwitchCase[16535-16553]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[16465-16480]:SwitchCase[16560-16575]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[16487-16503]:SwitchCase[16582-16598]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[16510-16528]:SwitchCase[16605-16623]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16535-16551]:SwitchCase[16630-16646]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[16558-16574]:SwitchCase[16653-16669]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[16581-16597]:SwitchCase[16676-16692]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16606-16618]:ReturnStatement[16701-16713]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16626-16634]:SwitchCase[16721-16729]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16643-16656]:ReturnStatement[16738-16751]"
    } ]
  },
  "interFileMappings" : { }
}