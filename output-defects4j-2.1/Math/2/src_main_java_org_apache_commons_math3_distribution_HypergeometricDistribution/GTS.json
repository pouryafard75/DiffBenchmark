{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HypergeometricDistribution",
      "right" : "HypergeometricDistribution",
      "info" : "TypeDeclaration[1277-11861]:TypeDeclaration[1277-11852]"
    }, {
      "left" : "private static final long serialVersionUID = -436928820673516179L;",
      "right" : "private static final long serialVersionUID = -436928820673516179L;",
      "info" : "FieldDeclaration[1683-1793]:FieldDeclaration[1683-1793]"
    }, {
      "left" : "private final int numberOfSuccesses;",
      "right" : "private final int numberOfSuccesses;",
      "info" : "FieldDeclaration[1798-1888]:FieldDeclaration[1798-1888]"
    }, {
      "left" : "private final int populationSize;",
      "right" : "private final int populationSize;",
      "info" : "FieldDeclaration[1893-1958]:FieldDeclaration[1893-1958]"
    }, {
      "left" : "private final int sampleSize;",
      "right" : "private final int sampleSize;",
      "info" : "FieldDeclaration[1963-2020]:FieldDeclaration[1963-2020]"
    }, {
      "left" : "private double numericalVariance = Double.NaN;",
      "right" : "private double numericalVariance = Double.NaN;",
      "info" : "FieldDeclaration[2025-2108]:FieldDeclaration[2025-2108]"
    }, {
      "left" : "private boolean numericalVarianceIsCalculated = false;",
      "right" : "private boolean numericalVarianceIsCalculated = false;",
      "info" : "FieldDeclaration[2113-2236]:FieldDeclaration[2113-2236]"
    }, {
      "left" : "public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException",
      "right" : "public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException",
      "info" : "MethodDeclaration[2242-3119]:MethodDeclaration[2242-3119]"
    }, {
      "left" : "public HypergeometricDistribution(RandomGenerator rng,\n                                      int populationSize,\n                                      int numberOfSuccesses,\n                                      int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException",
      "right" : "public HypergeometricDistribution(RandomGenerator rng,\n                                      int populationSize,\n                                      int numberOfSuccesses,\n                                      int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException",
      "info" : "MethodDeclaration[3125-5246]:MethodDeclaration[3125-5246]"
    }, {
      "left" : "public double cumulativeProbability(int x)",
      "right" : "public double cumulativeProbability(int x)",
      "info" : "MethodDeclaration[5252-5652]:MethodDeclaration[5252-5652]"
    }, {
      "left" : "private int[] getDomain(int n, int m, int k)",
      "right" : "private int[] getDomain(int n, int m, int k)",
      "info" : "MethodDeclaration[5658-6121]:MethodDeclaration[5658-6121]"
    }, {
      "left" : "private int getLowerDomain(int n, int m, int k)",
      "right" : "private int getLowerDomain(int n, int m, int k)",
      "info" : "MethodDeclaration[6127-6541]:MethodDeclaration[6127-6541]"
    }, {
      "left" : "public int getNumberOfSuccesses()",
      "right" : "public int getNumberOfSuccesses()",
      "info" : "MethodDeclaration[6547-6724]:MethodDeclaration[6547-6724]"
    }, {
      "left" : "public int getPopulationSize()",
      "right" : "public int getPopulationSize()",
      "info" : "MethodDeclaration[6730-6893]:MethodDeclaration[6730-6893]"
    }, {
      "left" : "public int getSampleSize()",
      "right" : "public int getSampleSize()",
      "info" : "MethodDeclaration[6899-7046]:MethodDeclaration[6899-7046]"
    }, {
      "left" : "private int getUpperDomain(int m, int k)",
      "right" : "private int getUpperDomain(int m, int k)",
      "info" : "MethodDeclaration[7052-7418]:MethodDeclaration[7052-7418]"
    }, {
      "left" : "public double probability(int x)",
      "right" : "public double probability(int x)",
      "info" : "MethodDeclaration[7424-8312]:MethodDeclaration[7424-8312]"
    }, {
      "left" : "public double upperCumulativeProbability(int x)",
      "right" : "public double upperCumulativeProbability(int x)",
      "info" : "MethodDeclaration[8318-8936]:MethodDeclaration[8318-8936]"
    }, {
      "left" : "private double innerCumulativeProbability(int x0, int x1, int dx)",
      "right" : "private double innerCumulativeProbability(int x0, int x1, int dx)",
      "info" : "MethodDeclaration[8942-9703]:MethodDeclaration[8942-9703]"
    }, {
      "left" : "public double getNumericalMean()",
      "right" : "public double getNumericalMean()",
      "info" : "MethodDeclaration[9709-10026]:MethodDeclaration[9709-10017]"
    }, {
      "left" : "public double getNumericalVariance()",
      "right" : "public double getNumericalVariance()",
      "info" : "MethodDeclaration[10032-10503]:MethodDeclaration[10023-10494]"
    }, {
      "left" : "protected double calculateNumericalVariance()",
      "right" : "protected double calculateNumericalVariance()",
      "info" : "MethodDeclaration[10509-10883]:MethodDeclaration[10500-10874]"
    }, {
      "left" : "public int getSupportLowerBound()",
      "right" : "public int getSupportLowerBound()",
      "info" : "MethodDeclaration[10889-11318]:MethodDeclaration[10880-11309]"
    }, {
      "left" : "public int getSupportUpperBound()",
      "right" : "public int getSupportUpperBound()",
      "info" : "MethodDeclaration[11324-11656]:MethodDeclaration[11315-11647]"
    }, {
      "left" : "public boolean isSupportConnected()",
      "right" : "public boolean isSupportConnected()",
      "info" : "MethodDeclaration[11662-11859]:MethodDeclaration[11653-11850]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3033-3119]:Block[3033-3119]"
    }, {
      "left" : "this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);",
      "right" : "this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);",
      "info" : "ConstructorInvocation[3043-3113]:ConstructorInvocation[3043-3113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4012-5246]:Block[4012-5246]"
    }, {
      "left" : "super(rng);",
      "right" : "super(rng);",
      "info" : "SuperConstructorInvocation[4022-4033]:SuperConstructorInvocation[4022-4033]"
    }, {
      "left" : "if (populationSize <= 0)",
      "right" : "if (populationSize <= 0)",
      "info" : "IfStatement[4043-4232]:IfStatement[4043-4232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4068-4232]:Block[4068-4232]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,\n                                                   populationSize);",
      "right" : "throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,\n                                                   populationSize);",
      "info" : "ThrowStatement[4082-4222]:ThrowStatement[4082-4222]"
    }, {
      "left" : "if (numberOfSuccesses < 0)",
      "right" : "if (numberOfSuccesses < 0)",
      "info" : "IfStatement[4241-4423]:IfStatement[4241-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4268-4423]:Block[4268-4423]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,\n                                           numberOfSuccesses);",
      "right" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,\n                                           numberOfSuccesses);",
      "info" : "ThrowStatement[4282-4413]:ThrowStatement[4282-4413]"
    }, {
      "left" : "if (sampleSize < 0)",
      "right" : "if (sampleSize < 0)",
      "info" : "IfStatement[4432-4598]:IfStatement[4432-4598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4452-4598]:Block[4452-4598]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                                           sampleSize);",
      "right" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                                           sampleSize);",
      "info" : "ThrowStatement[4466-4588]:ThrowStatement[4466-4588]"
    }, {
      "left" : "if (numberOfSuccesses > populationSize)",
      "right" : "if (numberOfSuccesses > populationSize)",
      "info" : "IfStatement[4608-4861]:IfStatement[4608-4861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4648-4861]:Block[4648-4861]"
    }, {
      "left" : "throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,\n                                                numberOfSuccesses, populationSize, true);",
      "right" : "throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,\n                                                numberOfSuccesses, populationSize, true);",
      "info" : "ThrowStatement[4662-4851]:ThrowStatement[4662-4851]"
    }, {
      "left" : "if (sampleSize > populationSize)",
      "right" : "if (sampleSize > populationSize)",
      "info" : "IfStatement[4870-5103]:IfStatement[4870-5103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4903-5103]:Block[4903-5103]"
    }, {
      "left" : "throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n                                                sampleSize, populationSize, true);",
      "right" : "throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n                                                sampleSize, populationSize, true);",
      "info" : "ThrowStatement[4917-5093]:ThrowStatement[4917-5093]"
    }, {
      "left" : "this.numberOfSuccesses = numberOfSuccesses;",
      "right" : "this.numberOfSuccesses = numberOfSuccesses;",
      "info" : "ExpressionStatement[5113-5156]:ExpressionStatement[5113-5156]"
    }, {
      "left" : "this.populationSize = populationSize;",
      "right" : "this.populationSize = populationSize;",
      "info" : "ExpressionStatement[5165-5202]:ExpressionStatement[5165-5202]"
    }, {
      "left" : "this.sampleSize = sampleSize;",
      "right" : "this.sampleSize = sampleSize;",
      "info" : "ExpressionStatement[5211-5240]:ExpressionStatement[5211-5240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5320-5652]:Block[5320-5652]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[5330-5341]:VariableDeclarationStatement[5330-5341]"
    }, {
      "left" : "int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "right" : "int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "info" : "VariableDeclarationStatement[5351-5423]:VariableDeclarationStatement[5351-5423]"
    }, {
      "left" : "if (x < domain[0])",
      "right" : "if (x < domain[0])",
      "info" : "IfStatement[5432-5625]:IfStatement[5432-5625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5451-5485]:Block[5451-5485]"
    }, {
      "left" : "ret = 0.0;",
      "right" : "ret = 0.0;",
      "info" : "ExpressionStatement[5465-5475]:ExpressionStatement[5465-5475]"
    }, {
      "left" : "if (x >= domain[1])",
      "right" : "if (x >= domain[1])",
      "info" : "IfStatement[5491-5625]:IfStatement[5491-5625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5511-5545]:Block[5511-5545]"
    }, {
      "left" : "ret = 1.0;",
      "right" : "ret = 1.0;",
      "info" : "ExpressionStatement[5525-5535]:ExpressionStatement[5525-5535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5551-5625]:Block[5551-5625]"
    }, {
      "left" : "ret = innerCumulativeProbability(domain[0], x, 1);",
      "right" : "ret = innerCumulativeProbability(domain[0], x, 1);",
      "info" : "ExpressionStatement[5565-5615]:ExpressionStatement[5565-5615]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[5635-5646]:ReturnStatement[5635-5646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6038-6121]:Block[6038-6121]"
    }, {
      "left" : "return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };",
      "right" : "return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };",
      "info" : "ReturnStatement[6048-6115]:ReturnStatement[6048-6115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6489-6541]:Block[6489-6541]"
    }, {
      "left" : "return FastMath.max(0, m - (n - k));",
      "right" : "return FastMath.max(0, m - (n - k));",
      "info" : "ReturnStatement[6499-6535]:ReturnStatement[6499-6535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-6724]:Block[6683-6724]"
    }, {
      "left" : "return numberOfSuccesses;",
      "right" : "return numberOfSuccesses;",
      "info" : "ReturnStatement[6693-6718]:ReturnStatement[6693-6718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6855-6893]:Block[6855-6893]"
    }, {
      "left" : "return populationSize;",
      "right" : "return populationSize;",
      "info" : "ReturnStatement[6865-6887]:ReturnStatement[6865-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7012-7046]:Block[7012-7046]"
    }, {
      "left" : "return sampleSize;",
      "right" : "return sampleSize;",
      "info" : "ReturnStatement[7022-7040]:ReturnStatement[7022-7040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7376-7418]:Block[7376-7418]"
    }, {
      "left" : "return FastMath.min(k, m);",
      "right" : "return FastMath.min(k, m);",
      "info" : "ReturnStatement[7386-7412]:ReturnStatement[7386-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7482-8312]:Block[7482-8312]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[7492-7503]:VariableDeclarationStatement[7492-7503]"
    }, {
      "left" : "int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "right" : "int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "info" : "VariableDeclarationStatement[7513-7585]:VariableDeclarationStatement[7513-7585]"
    }, {
      "left" : "if (x < domain[0] || x > domain[1])",
      "right" : "if (x < domain[0] || x > domain[1])",
      "info" : "IfStatement[7594-8285]:IfStatement[7594-8285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7630-7664]:Block[7630-7664]"
    }, {
      "left" : "ret = 0.0;",
      "right" : "ret = 0.0;",
      "info" : "ExpressionStatement[7644-7654]:ExpressionStatement[7644-7654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7670-8285]:Block[7670-8285]"
    }, {
      "left" : "double p = (double) sampleSize / (double) populationSize;",
      "right" : "double p = (double) sampleSize / (double) populationSize;",
      "info" : "VariableDeclarationStatement[7684-7741]:VariableDeclarationStatement[7684-7741]"
    }, {
      "left" : "double q = (double) (populationSize - sampleSize) / (double) populationSize;",
      "right" : "double q = (double) (populationSize - sampleSize) / (double) populationSize;",
      "info" : "VariableDeclarationStatement[7754-7830]:VariableDeclarationStatement[7754-7830]"
    }, {
      "left" : "double p1 = SaddlePointExpansion.logBinomialProbability(x,\n                    numberOfSuccesses, p, q);",
      "right" : "double p1 = SaddlePointExpansion.logBinomialProbability(x,\n                    numberOfSuccesses, p, q);",
      "info" : "VariableDeclarationStatement[7843-7947]:VariableDeclarationStatement[7843-7947]"
    }, {
      "left" : "double p2 =\n                SaddlePointExpansion.logBinomialProbability(sampleSize - x,\n                    populationSize - numberOfSuccesses, p, q);",
      "right" : "double p2 =\n                SaddlePointExpansion.logBinomialProbability(sampleSize - x,\n                    populationSize - numberOfSuccesses, p, q);",
      "info" : "VariableDeclarationStatement[7960-8110]:VariableDeclarationStatement[7960-8110]"
    }, {
      "left" : "double p3 =\n                SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);",
      "right" : "double p3 =\n                SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);",
      "info" : "VariableDeclarationStatement[8123-8229]:VariableDeclarationStatement[8123-8229]"
    }, {
      "left" : "ret = FastMath.exp(p1 + p2 - p3);",
      "right" : "ret = FastMath.exp(p1 + p2 - p3);",
      "info" : "ExpressionStatement[8242-8275]:ExpressionStatement[8242-8275]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[8295-8306]:ReturnStatement[8295-8306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8597-8936]:Block[8597-8936]"
    }, {
      "left" : "double ret;",
      "right" : "double ret;",
      "info" : "VariableDeclarationStatement[8607-8618]:VariableDeclarationStatement[8607-8618]"
    }, {
      "left" : "final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "right" : "final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",
      "info" : "VariableDeclarationStatement[8628-8706]:VariableDeclarationStatement[8628-8706]"
    }, {
      "left" : "if (x <= domain[0])",
      "right" : "if (x <= domain[0])",
      "info" : "IfStatement[8715-8909]:IfStatement[8715-8909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8735-8769]:Block[8735-8769]"
    }, {
      "left" : "ret = 1.0;",
      "right" : "ret = 1.0;",
      "info" : "ExpressionStatement[8749-8759]:ExpressionStatement[8749-8759]"
    }, {
      "left" : "if (x > domain[1])",
      "right" : "if (x > domain[1])",
      "info" : "IfStatement[8775-8909]:IfStatement[8775-8909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8794-8828]:Block[8794-8828]"
    }, {
      "left" : "ret = 0.0;",
      "right" : "ret = 0.0;",
      "info" : "ExpressionStatement[8808-8818]:ExpressionStatement[8808-8818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8834-8909]:Block[8834-8909]"
    }, {
      "left" : "ret = innerCumulativeProbability(domain[1], x, -1);",
      "right" : "ret = innerCumulativeProbability(domain[1], x, -1);",
      "info" : "ExpressionStatement[8848-8899]:ExpressionStatement[8848-8899]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[8919-8930]:ReturnStatement[8919-8930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9543-9703]:Block[9543-9703]"
    }, {
      "left" : "double ret = probability(x0);",
      "right" : "double ret = probability(x0);",
      "info" : "VariableDeclarationStatement[9553-9582]:VariableDeclarationStatement[9553-9582]"
    }, {
      "left" : "while (x0 != x1)",
      "right" : "while (x0 != x1)",
      "info" : "WhileStatement[9591-9677]:WhileStatement[9591-9677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9608-9677]:Block[9608-9677]"
    }, {
      "left" : "x0 += dx;",
      "right" : "x0 += dx;",
      "info" : "ExpressionStatement[9622-9631]:ExpressionStatement[9622-9631]"
    }, {
      "left" : "ret += probability(x0);",
      "right" : "ret += probability(x0);",
      "info" : "ExpressionStatement[9644-9667]:ExpressionStatement[9644-9667]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[9686-9697]:ReturnStatement[9686-9697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9920-10026]:Block[9920-10017]"
    }, {
      "left" : "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
      "right" : "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());",
      "info" : "ReturnStatement[9930-10020]:ReturnStatement[9930-10011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10294-10503]:Block[10285-10494]"
    }, {
      "left" : "if (!numericalVarianceIsCalculated)",
      "right" : "if (!numericalVarianceIsCalculated)",
      "info" : "IfStatement[10304-10463]:IfStatement[10295-10454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10340-10463]:Block[10331-10454]"
    }, {
      "left" : "numericalVariance = calculateNumericalVariance();",
      "right" : "numericalVariance = calculateNumericalVariance();",
      "info" : "ExpressionStatement[10354-10403]:ExpressionStatement[10345-10394]"
    }, {
      "left" : "numericalVarianceIsCalculated = true;",
      "right" : "numericalVarianceIsCalculated = true;",
      "info" : "ExpressionStatement[10416-10453]:ExpressionStatement[10407-10444]"
    }, {
      "left" : "return numericalVariance;",
      "right" : "return numericalVariance;",
      "info" : "ReturnStatement[10472-10497]:ReturnStatement[10463-10488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10675-10883]:Block[10666-10874]"
    }, {
      "left" : "final double N = getPopulationSize();",
      "right" : "final double N = getPopulationSize();",
      "info" : "VariableDeclarationStatement[10685-10722]:VariableDeclarationStatement[10676-10713]"
    }, {
      "left" : "final double m = getNumberOfSuccesses();",
      "right" : "final double m = getNumberOfSuccesses();",
      "info" : "VariableDeclarationStatement[10731-10771]:VariableDeclarationStatement[10722-10762]"
    }, {
      "left" : "final double n = getSampleSize();",
      "right" : "final double n = getSampleSize();",
      "info" : "VariableDeclarationStatement[10780-10813]:VariableDeclarationStatement[10771-10804]"
    }, {
      "left" : "return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));",
      "right" : "return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));",
      "info" : "ReturnStatement[10822-10877]:ReturnStatement[10813-10868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11187-11318]:Block[11178-11309]"
    }, {
      "left" : "return FastMath.max(0,\n                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());",
      "right" : "return FastMath.max(0,\n                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());",
      "info" : "ReturnStatement[11197-11312]:ReturnStatement[11188-11303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11579-11656]:Block[11570-11647]"
    }, {
      "left" : "return FastMath.min(getNumberOfSuccesses(), getSampleSize());",
      "right" : "return FastMath.min(getNumberOfSuccesses(), getSampleSize());",
      "info" : "ReturnStatement[11589-11650]:ReturnStatement[11580-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11831-11859]:Block[11822-11850]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11841-11853]:ReturnStatement[11832-11844]"
    } ]
  },
  "interFileMappings" : { }
}