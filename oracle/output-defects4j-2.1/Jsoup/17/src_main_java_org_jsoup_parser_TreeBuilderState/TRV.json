{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "abstract boolean process(Token t, TreeBuilder tb);",
      "right" : "abstract boolean process(Token t, TreeBuilder tb);",
      "info" : "MethodDeclaration[67107-67157]:MethodDeclaration[67109-67159]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67163-67625]:MethodDeclaration[67165-67627]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67631-67858]:MethodDeclaration[67633-67860]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67864-68093]:MethodDeclaration[67866-68095]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67208-67625]:Block[67210-67627]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67218-67597]:IfStatement[67220-67599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67239-67597]:Block[67241-67599]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67253-67293]:VariableDeclarationStatement[67255-67295]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67384-67562]:ForStatement[67386-67564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67424-67562]:Block[67426-67564]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67442-67466]:VariableDeclarationStatement[67444-67468]"
    }, {
      "left" : "if (!Character.isWhitespace(c))",
      "right" : "if (!Character.isWhitespace(c))",
      "info" : "IfStatement[67483-67548]:IfStatement[67485-67550]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67535-67548]:ReturnStatement[67537-67550]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67575-67587]:ReturnStatement[67577-67589]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67606-67619]:ReturnStatement[67608-67621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67705-67858]:Block[67707-67860]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67715-67735]:ExpressionStatement[67717-67737]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67744-67791]:ExpressionStatement[67746-67793]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67800-67823]:ExpressionStatement[67802-67825]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67832-67852]:ExpressionStatement[67834-67854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67939-68093]:Block[67941-68095]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67949-67969]:ExpressionStatement[67951-67971]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[67978-68026]:ExpressionStatement[67980-68028]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68035-68058]:ExpressionStatement[68037-68060]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68067-68087]:ExpressionStatement[68069-68089]"
    } ]
  },
  "interFileMappings" : { }
}