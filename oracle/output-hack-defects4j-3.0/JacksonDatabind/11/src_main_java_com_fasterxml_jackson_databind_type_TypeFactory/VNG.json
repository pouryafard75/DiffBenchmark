{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "TypeDeclaration[307-44583]:TypeDeclaration[307-44618]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1232-1280]:FieldDeclaration[1232-1280]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1286-1345]:FieldDeclaration[1286-1345]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1351-1648]:FieldDeclaration[1351-1648]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "info" : "FieldDeclaration[2002-2084]:FieldDeclaration[2002-2084]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "info" : "FieldDeclaration[2089-2169]:FieldDeclaration[2089-2169]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "info" : "FieldDeclaration[2174-2253]:FieldDeclaration[2174-2253]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "info" : "FieldDeclaration[2258-2335]:FieldDeclaration[2258-2335]"
    }, {
      "left" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "right" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "info" : "FieldDeclaration[2341-2634]:FieldDeclaration[2341-2634]"
    }, {
      "left" : "protected transient HierarchicType _cachedHashMapType;",
      "right" : "protected transient HierarchicType _cachedHashMapType;",
      "info" : "FieldDeclaration[2841-3017]:FieldDeclaration[2841-3017]"
    }, {
      "left" : "protected transient HierarchicType _cachedArrayListType;",
      "right" : "protected transient HierarchicType _cachedArrayListType;",
      "info" : "FieldDeclaration[3023-3203]:FieldDeclaration[3023-3203]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[3382-3570]:FieldDeclaration[3382-3570]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[3580-3615]:FieldDeclaration[3580-3615]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[3783-3879]:MethodDeclaration[3783-3879]"
    }, {
      "left" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "right" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "info" : "MethodDeclaration[3885-3997]:MethodDeclaration[3885-3997]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[4003-4392]:MethodDeclaration[4003-4392]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[4398-4665]:MethodDeclaration[4398-4665]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[4671-5180]:MethodDeclaration[4671-5180]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[5400-5689]:MethodDeclaration[5400-5689]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[5695-6241]:MethodDeclaration[5695-6241]"
    }, {
      "left" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "right" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "info" : "MethodDeclaration[6455-8377]:MethodDeclaration[6455-8377]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8383-8939]:MethodDeclaration[8383-8939]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[8949-10860]:MethodDeclaration[8949-10860]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[10866-11020]:MethodDeclaration[10866-11020]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[11026-12583]:MethodDeclaration[11026-12583]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[12589-13459]:MethodDeclaration[12589-13459]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[13643-13734]:MethodDeclaration[13643-13734]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[13740-13858]:MethodDeclaration[13740-13858]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[13868-13987]:MethodDeclaration[13868-13987]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> context)",
      "right" : "public JavaType constructType(Type type, Class<?> context)",
      "info" : "MethodDeclaration[13997-14188]:MethodDeclaration[13997-14188]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType context)",
      "right" : "public JavaType constructType(Type type, JavaType context)",
      "info" : "MethodDeclaration[14194-14385]:MethodDeclaration[14194-14385]"
    }, {
      "left" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "right" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "info" : "MethodDeclaration[14395-16184]:MethodDeclaration[14395-16184]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[16364-16723]:MethodDeclaration[16364-16723]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[16733-17046]:MethodDeclaration[16733-17046]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[17052-17456]:MethodDeclaration[17052-17456]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[17466-17853]:MethodDeclaration[17466-17853]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[17859-18261]:MethodDeclaration[17859-18261]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[18271-18656]:MethodDeclaration[18271-18656]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[18666-19036]:MethodDeclaration[18666-19036]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[19042-19446]:MethodDeclaration[19042-19446]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[19452-19826]:MethodDeclaration[19452-19826]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[19836-20240]:MethodDeclaration[19836-20240]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[20250-20599]:MethodDeclaration[20250-20599]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[20609-21488]:MethodDeclaration[20609-21488]"
    }, {
      "left" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[21495-21885]:MethodDeclaration[21495-21885]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[21895-23052]:MethodDeclaration[21895-23052]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[23058-23356]:MethodDeclaration[23058-23356]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[23362-25664]:MethodDeclaration[23362-25664]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[25670-25964]:MethodDeclaration[25670-25964]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[26213-26845]:MethodDeclaration[26213-26845]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[26851-27485]:MethodDeclaration[26851-27485]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[27491-28109]:MethodDeclaration[27491-28109]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[28115-28742]:MethodDeclaration[28115-28742]"
    }, {
      "left" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "right" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "info" : "MethodDeclaration[28922-31382]:MethodDeclaration[28922-31382]"
    }, {
      "left" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "right" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "info" : "MethodDeclaration[31392-32842]:MethodDeclaration[31392-32842]"
    }, {
      "left" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "right" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "info" : "MethodDeclaration[32852-35005]:MethodDeclaration[32852-35005]"
    }, {
      "left" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "right" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "info" : "MethodDeclaration[35016-35249]:MethodDeclaration[35016-35249]"
    }, {
      "left" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "right" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "info" : "MethodDeclaration[35255-37177]:MethodDeclaration[35255-37212]"
    }, {
      "left" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "right" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "info" : "MethodDeclaration[37183-37693]:MethodDeclaration[37218-37728]"
    }, {
      "left" : "private JavaType _mapType(Class<?> rawClass)",
      "right" : "private JavaType _mapType(Class<?> rawClass)",
      "info" : "MethodDeclaration[37699-38283]:MethodDeclaration[37734-38318]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass)",
      "right" : "private JavaType _collectionType(Class<?> rawClass)",
      "info" : "MethodDeclaration[38289-38877]:MethodDeclaration[38324-38912]"
    }, {
      "left" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "right" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "info" : "MethodDeclaration[38887-40000]:MethodDeclaration[38922-40035]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[40010-40096]:MethodDeclaration[40045-40131]"
    }, {
      "left" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "right" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "info" : "MethodDeclaration[40268-40899]:MethodDeclaration[40303-40934]"
    }, {
      "left" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[40905-41576]:MethodDeclaration[40940-41611]"
    }, {
      "left" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[41582-42500]:MethodDeclaration[41617-42535]"
    }, {
      "left" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "right" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "info" : "MethodDeclaration[42510-43572]:MethodDeclaration[42545-43607]"
    }, {
      "left" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[43578-44072]:MethodDeclaration[43613-44107]"
    }, {
      "left" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[44078-44581]:MethodDeclaration[44113-44616]"
    } ],
    "mappings" : [
 {
      "left" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "right" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "info" : "SingleMemberAnnotation[1114-1158]:SingleMemberAnnotation[1114-1158]"
    }, {
      "left" : "java.io.Serializable",
      "right" : "java.io.Serializable",
      "info" : "SimpleType[1205-1225]:SimpleType[1205-1225]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3783-3790]:Modifier[3783-3790]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleName[3791-3802]:SimpleName[3791-3802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3805-3879]:Block[3805-3879]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[3815-3846]:ExpressionStatement[3815-3846]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[3855-3873]:ExpressionStatement[3855-3873]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3885-3894]:Modifier[3885-3894]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleName[3895-3906]:SimpleName[3895-3906]"
    }, {
      "left" : "TypeParser p",
      "right" : "TypeParser p",
      "info" : "SingleVariableDeclaration[3907-3919]:SingleVariableDeclaration[3907-3919]"
    }, {
      "left" : "TypeModifier[] mods",
      "right" : "TypeModifier[] mods",
      "info" : "SingleVariableDeclaration[3921-3940]:SingleVariableDeclaration[3921-3940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3942-3997]:Block[3942-3997]"
    }, {
      "left" : "_parser = p;",
      "right" : "_parser = p;",
      "info" : "ExpressionStatement[3952-3964]:ExpressionStatement[3952-3964]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[3973-3991]:ExpressionStatement[3973-3991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4003-4009]:Modifier[4003-4009]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4010-4021]:SimpleType[4010-4021]"
    }, {
      "left" : "withModifier",
      "right" : "withModifier",
      "info" : "SimpleName[4022-4034]:SimpleName[4022-4034]"
    }, {
      "left" : "TypeModifier mod",
      "right" : "TypeModifier mod",
      "info" : "SingleVariableDeclaration[4035-4051]:SingleVariableDeclaration[4035-4051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4058-4392]:Block[4058-4392]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[4068-4178]:IfStatement[4068-4178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4085-4178]:Block[4085-4178]"
    }, {
      "left" : "return new TypeFactory(_parser, _modifiers);",
      "right" : "return new TypeFactory(_parser, _modifiers);",
      "info" : "ReturnStatement[4124-4168]:ReturnStatement[4124-4168]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[4187-4295]:IfStatement[4187-4295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4211-4295]:Block[4211-4295]"
    }, {
      "left" : "return new TypeFactory(_parser, new TypeModifier[] { mod });",
      "right" : "return new TypeFactory(_parser, new TypeModifier[] { mod });",
      "info" : "ReturnStatement[4225-4285]:ReturnStatement[4225-4285]"
    }, {
      "left" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));",
      "right" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));",
      "info" : "ReturnStatement[4304-4386]:ReturnStatement[4304-4386]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4601-4607]:Modifier[4601-4607]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4608-4614]:Modifier[4608-4614]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4615-4626]:SimpleType[4615-4626]"
    }, {
      "left" : "defaultInstance",
      "right" : "defaultInstance",
      "info" : "SimpleName[4627-4642]:SimpleName[4627-4642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4645-4665]:Block[4645-4665]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[4647-4663]:ReturnStatement[4647-4663]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5120-5126]:Modifier[5120-5126]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5127-5131]:PrimitiveType[5127-5131]"
    }, {
      "left" : "clearCache",
      "right" : "clearCache",
      "info" : "SimpleName[5132-5142]:SimpleName[5132-5142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5145-5180]:Block[5145-5180]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[5155-5174]:ExpressionStatement[5155-5174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5596-5602]:Modifier[5596-5602]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5603-5609]:Modifier[5603-5609]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[5610-5618]:SimpleType[5610-5618]"
    }, {
      "left" : "unknownType",
      "right" : "unknownType",
      "info" : "SimpleName[5619-5630]:SimpleName[5619-5630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5633-5689]:Block[5633-5689]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[5643-5683]:ReturnStatement[5643-5683]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5990-5996]:Modifier[5990-5996]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5997-6003]:Modifier[5997-6003]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[6004-6012]:ParameterizedType[6004-6012]"
    }, {
      "left" : "rawClass",
      "right" : "rawClass",
      "info" : "SimpleName[6013-6021]:SimpleName[6013-6021]"
    }, {
      "left" : "Type t",
      "right" : "Type t",
      "info" : "SingleVariableDeclaration[6022-6028]:SingleVariableDeclaration[6022-6028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6030-6241]:Block[6030-6241]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[6040-6111]:IfStatement[6040-6111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6067-6111]:Block[6067-6111]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[6081-6101]:ReturnStatement[6081-6101]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[6179-6235]:ReturnStatement[6179-6235]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6800-6806]:Modifier[6800-6806]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[6807-6815]:SimpleType[6807-6815]"
    }, {
      "left" : "constructSpecializedType",
      "right" : "constructSpecializedType",
      "info" : "SimpleName[6816-6840]:SimpleName[6816-6840]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[6841-6858]:SingleVariableDeclaration[6841-6858]"
    }, {
      "left" : "Class<?> subclass",
      "right" : "Class<?> subclass",
      "info" : "SingleVariableDeclaration[6860-6877]:SingleVariableDeclaration[6860-6877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6883-8377]:Block[6883-8377]"
    }, {
      "left" : "if (baseType.getRawClass() == subclass)",
      "right" : "if (baseType.getRawClass() == subclass)",
      "info" : "IfStatement[6990-7070]:IfStatement[6990-7070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7030-7070]:Block[7030-7070]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[7044-7060]:ReturnStatement[7044-7060]"
    }, {
      "left" : "if (baseType instanceof SimpleType)",
      "right" : "if (baseType instanceof SimpleType)",
      "info" : "IfStatement[7152-8266]:IfStatement[7152-8266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7188-8266]:Block[7188-8266]"
    }, {
      "left" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "right" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "info" : "IfStatement[7269-8256]:IfStatement[7269-8256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7412-8256]:Block[7412-8256]"
    }, {
      "left" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "right" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "info" : "IfStatement[7486-7685]:IfStatement[7486-7685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7542-7685]:Block[7542-7685]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "right" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "info" : "ThrowStatement[7564-7667]:ThrowStatement[7564-7667]"
    }, {
      "left" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "right" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "info" : "VariableDeclarationStatement[7748-7836]:VariableDeclarationStatement[7748-7836]"
    }, {
      "left" : "Object h = baseType.getValueHandler();",
      "right" : "Object h = baseType.getValueHandler();",
      "info" : "VariableDeclarationStatement[7906-7944]:VariableDeclarationStatement[7906-7944]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[7961-8054]:IfStatement[7961-8054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7976-8054]:Block[7976-8054]"
    }, {
      "left" : "subtype = subtype.withValueHandler(h);",
      "right" : "subtype = subtype.withValueHandler(h);",
      "info" : "ExpressionStatement[7998-8036]:ExpressionStatement[7998-8036]"
    }, {
      "left" : "h = baseType.getTypeHandler();",
      "right" : "h = baseType.getTypeHandler();",
      "info" : "ExpressionStatement[8071-8101]:ExpressionStatement[8071-8101]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[8118-8210]:IfStatement[8118-8210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8133-8210]:Block[8133-8210]"
    }, {
      "left" : "subtype = subtype.withTypeHandler(h);",
      "right" : "subtype = subtype.withTypeHandler(h);",
      "info" : "ExpressionStatement[8155-8192]:ExpressionStatement[8155-8192]"
    }, {
      "left" : "return subtype;",
      "right" : "return subtype;",
      "info" : "ReturnStatement[8227-8242]:ReturnStatement[8227-8242]"
    }, {
      "left" : "return baseType.narrowBy(subclass);",
      "right" : "return baseType.narrowBy(subclass);",
      "info" : "ReturnStatement[8336-8371]:ReturnStatement[8336-8371]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8798-8804]:Modifier[8798-8804]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[8805-8813]:SimpleType[8805-8813]"
    }, {
      "left" : "constructFromCanonical",
      "right" : "constructFromCanonical",
      "info" : "SimpleName[8814-8836]:SimpleName[8814-8836]"
    }, {
      "left" : "String canonical",
      "right" : "String canonical",
      "info" : "SingleVariableDeclaration[8837-8853]:SingleVariableDeclaration[8837-8853]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[8862-8886]:SimpleType[8862-8886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8891-8939]:Block[8891-8939]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[8901-8933]:ReturnStatement[8901-8933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9320-9326]:Modifier[9320-9326]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[9327-9337]:ArrayType[9327-9337]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[9338-9356]:SimpleName[9338-9356]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[9357-9370]:SingleVariableDeclaration[9357-9370]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[9372-9388]:SingleVariableDeclaration[9372-9388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9394-10860]:Block[9394-10860]"
    }, {
      "left" : "if (expType == type.getParameterSource())",
      "right" : "if (expType == type.getParameterSource())",
      "info" : "IfStatement[9962-10365]:IfStatement[9962-10365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10004-10365]:Block[10004-10365]"
    }, {
      "left" : "int count = type.containedTypeCount();",
      "right" : "int count = type.containedTypeCount();",
      "info" : "VariableDeclarationStatement[10085-10123]:VariableDeclarationStatement[10085-10123]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[10136-10164]:IfStatement[10136-10164]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10152-10164]:ReturnStatement[10152-10164]"
    }, {
      "left" : "JavaType[] result = new JavaType[count];",
      "right" : "JavaType[] result = new JavaType[count];",
      "info" : "VariableDeclarationStatement[10177-10217]:VariableDeclarationStatement[10177-10217]"
    }, {
      "left" : "for (int i = 0; i < count; ++i)",
      "right" : "for (int i = 0; i < count; ++i)",
      "info" : "ForStatement[10230-10328]:ForStatement[10230-10328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10262-10328]:Block[10262-10328]"
    }, {
      "left" : "result[i] = type.containedType(i);",
      "right" : "result[i] = type.containedType(i);",
      "info" : "ExpressionStatement[10280-10314]:ExpressionStatement[10280-10314]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10341-10355]:ReturnStatement[10341-10355]"
    }, {
      "left" : "Class<?> raw = type.getRawClass();",
      "right" : "Class<?> raw = type.getRawClass();",
      "info" : "VariableDeclarationStatement[10741-10775]:VariableDeclarationStatement[10741-10775]"
    }, {
      "left" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "right" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "info" : "ReturnStatement[10784-10854]:ReturnStatement[10784-10854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10866-10872]:Modifier[10866-10872]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[10873-10883]:ArrayType[10873-10883]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[10884-10902]:SimpleName[10884-10902]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[10903-10915]:SingleVariableDeclaration[10903-10915]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[10917-10933]:SingleVariableDeclaration[10917-10933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10935-11020]:Block[10935-11020]"
    }, {
      "left" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "right" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "info" : "ReturnStatement[10945-11014]:ReturnStatement[10945-11014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11026-11032]:Modifier[11026-11032]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[11033-11043]:ArrayType[11033-11043]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[11044-11062]:SimpleName[11044-11062]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[11063-11075]:SingleVariableDeclaration[11063-11075]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[11077-11093]:SingleVariableDeclaration[11077-11093]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[11095-11116]:SingleVariableDeclaration[11095-11116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11122-12583]:Block[11122-12583]"
    }, {
      "left" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "right" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "info" : "VariableDeclarationStatement[11178-11237]:VariableDeclarationStatement[11178-11237]"
    }, {
      "left" : "if (subType == null)",
      "right" : "if (subType == null)",
      "info" : "IfStatement[11310-11456]:IfStatement[11310-11456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11456]:Block[11331-11456]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "right" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "info" : "ThrowStatement[11345-11446]:ThrowStatement[11345-11446]"
    }, {
      "left" : "HierarchicType superType = subType;",
      "right" : "HierarchicType superType = subType;",
      "info" : "VariableDeclarationStatement[11519-11554]:VariableDeclarationStatement[11519-11554]"
    }, {
      "left" : "while (superType.getSuperType() != null)",
      "right" : "while (superType.getSuperType() != null)",
      "info" : "WhileStatement[11563-12402]:WhileStatement[11563-12402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11604-12402]:Block[11604-12402]"
    }, {
      "left" : "superType = superType.getSuperType();",
      "right" : "superType = superType.getSuperType();",
      "info" : "ExpressionStatement[11618-11655]:ExpressionStatement[11618-11655]"
    }, {
      "left" : "Class<?> raw = superType.getRawClass();",
      "right" : "Class<?> raw = superType.getRawClass();",
      "info" : "VariableDeclarationStatement[11668-11707]:VariableDeclarationStatement[11668-11707]"
    }, {
      "left" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "right" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "info" : "VariableDeclarationStatement[11720-11775]:VariableDeclarationStatement[11720-11775]"
    }, {
      "left" : "if (superType.isGeneric())",
      "right" : "if (superType.isGeneric())",
      "info" : "IfStatement[11788-12356]:IfStatement[11788-12356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11815-12356]:Block[11815-12356]"
    }, {
      "left" : "ParameterizedType pt = superType.asGeneric();",
      "right" : "ParameterizedType pt = superType.asGeneric();",
      "info" : "VariableDeclarationStatement[11866-11911]:VariableDeclarationStatement[11866-11911]"
    }, {
      "left" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "right" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[11928-11977]:VariableDeclarationStatement[11928-11977]"
    }, {
      "left" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "right" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "info" : "VariableDeclarationStatement[11994-12043]:VariableDeclarationStatement[11994-12043]"
    }, {
      "left" : "int len = actualTypes.length;",
      "right" : "int len = actualTypes.length;",
      "info" : "VariableDeclarationStatement[12060-12089]:VariableDeclarationStatement[12060-12089]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[12106-12342]:ForStatement[12106-12342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12136-12342]:Block[12136-12342]"
    }, {
      "left" : "String name = vars[i].getName();",
      "right" : "String name = vars[i].getName();",
      "info" : "VariableDeclarationStatement[12158-12190]:VariableDeclarationStatement[12158-12190]"
    }, {
      "left" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "right" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "info" : "VariableDeclarationStatement[12211-12268]:VariableDeclarationStatement[12211-12268]"
    }, {
      "left" : "newBindings.addBinding(name, type);",
      "right" : "newBindings.addBinding(name, type);",
      "info" : "ExpressionStatement[12289-12324]:ExpressionStatement[12289-12324]"
    }, {
      "left" : "bindings = newBindings;",
      "right" : "bindings = newBindings;",
      "info" : "ExpressionStatement[12369-12392]:ExpressionStatement[12369-12392]"
    }, {
      "left" : "if (!superType.isGeneric())",
      "right" : "if (!superType.isGeneric())",
      "info" : "IfStatement[12473-12537]:IfStatement[12473-12537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12501-12537]:Block[12501-12537]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12515-12527]:ReturnStatement[12515-12527]"
    }, {
      "left" : "return bindings.typesAsArray();",
      "right" : "return bindings.typesAsArray();",
      "info" : "ReturnStatement[12546-12577]:ReturnStatement[12546-12577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12932-12938]:Modifier[12932-12938]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[12939-12947]:SimpleType[12939-12947]"
    }, {
      "left" : "moreSpecificType",
      "right" : "moreSpecificType",
      "info" : "SimpleName[12948-12964]:SimpleName[12948-12964]"
    }, {
      "left" : "JavaType type1",
      "right" : "JavaType type1",
      "info" : "SingleVariableDeclaration[12965-12979]:SingleVariableDeclaration[12965-12979]"
    }, {
      "left" : "JavaType type2",
      "right" : "JavaType type2",
      "info" : "SingleVariableDeclaration[12981-12995]:SingleVariableDeclaration[12981-12995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13459]:Block[13001-13459]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[13011-13067]:IfStatement[13011-13067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13030-13067]:Block[13030-13067]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[13044-13057]:ReturnStatement[13044-13057]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[13076-13132]:IfStatement[13076-13132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13095-13132]:Block[13095-13132]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13109-13122]:ReturnStatement[13109-13122]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[13141-13177]:VariableDeclarationStatement[13141-13177]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[13186-13222]:VariableDeclarationStatement[13186-13222]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[13231-13286]:IfStatement[13231-13286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13249-13286]:Block[13249-13286]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13263-13276]:ReturnStatement[13263-13276]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[13361-13431]:IfStatement[13361-13431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13394-13431]:Block[13394-13431]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[13408-13421]:ReturnStatement[13408-13421]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13440-13453]:ReturnStatement[13440-13453]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13643-13649]:Modifier[13643-13649]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13650-13658]:SimpleType[13650-13658]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13659-13672]:SimpleName[13659-13672]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[13673-13682]:SingleVariableDeclaration[13673-13682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13684-13734]:Block[13684-13734]"
    }, {
      "left" : "return _constructType(type, null);",
      "right" : "return _constructType(type, null);",
      "info" : "ReturnStatement[13694-13728]:ReturnStatement[13694-13728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13740-13746]:Modifier[13740-13746]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13747-13755]:SimpleType[13747-13755]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13756-13769]:SimpleName[13756-13769]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[13770-13779]:SingleVariableDeclaration[13770-13779]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[13781-13802]:SingleVariableDeclaration[13781-13802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13804-13858]:Block[13804-13858]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[13814-13852]:ReturnStatement[13814-13852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13868-13874]:Modifier[13868-13874]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13875-13883]:SimpleType[13875-13883]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13884-13897]:SimpleName[13884-13897]"
    }, {
      "left" : "TypeReference<?> typeRef",
      "right" : "TypeReference<?> typeRef",
      "info" : "SingleVariableDeclaration[13898-13922]:SingleVariableDeclaration[13898-13922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13924-13987]:Block[13924-13987]"
    }, {
      "left" : "return _constructType(typeRef.getType(), null);",
      "right" : "return _constructType(typeRef.getType(), null);",
      "info" : "ReturnStatement[13934-13981]:ReturnStatement[13934-13981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13997-14003]:Modifier[13997-14003]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14004-14012]:SimpleType[14004-14012]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[14013-14026]:SimpleName[14013-14026]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14027-14036]:SingleVariableDeclaration[14027-14036]"
    }, {
      "left" : "Class<?> context",
      "right" : "Class<?> context",
      "info" : "SingleVariableDeclaration[14038-14054]:SingleVariableDeclaration[14038-14054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14056-14188]:Block[14056-14188]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[14066-14142]:VariableDeclarationStatement[14066-14142]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[14151-14182]:ReturnStatement[14151-14182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14194-14200]:Modifier[14194-14200]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14201-14209]:SimpleType[14201-14209]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[14210-14223]:SimpleName[14210-14223]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14224-14233]:SingleVariableDeclaration[14224-14233]"
    }, {
      "left" : "JavaType context",
      "right" : "JavaType context",
      "info" : "SingleVariableDeclaration[14235-14251]:SingleVariableDeclaration[14235-14251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14253-14385]:Block[14253-14385]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[14263-14339]:VariableDeclarationStatement[14263-14339]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[14348-14379]:ReturnStatement[14348-14379]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14599-14608]:Modifier[14599-14608]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14609-14617]:SimpleType[14609-14617]"
    }, {
      "left" : "_constructType",
      "right" : "_constructType",
      "info" : "SimpleName[14618-14632]:SimpleName[14618-14632]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14633-14642]:SingleVariableDeclaration[14633-14642]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[14644-14664]:SingleVariableDeclaration[14644-14664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14670-16184]:Block[14670-16184]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[14680-14700]:VariableDeclarationStatement[14680-14700]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[14735-15697]:IfStatement[14735-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14765-14839]:Block[14765-14839]"
    }, {
      "left" : "resultType = _fromClass((Class<?>) type, context);",
      "right" : "resultType = _fromClass((Class<?>) type, context);",
      "info" : "ExpressionStatement[14779-14829]:ExpressionStatement[14779-14829]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[14901-15697]:IfStatement[14901-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14940-15027]:Block[14940-15027]"
    }, {
      "left" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "right" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "info" : "ExpressionStatement[14954-15017]:ExpressionStatement[14954-15017]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[15041-15697]:IfStatement[15041-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15071-15133]:Block[15071-15133]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[15100-15123]:ReturnStatement[15100-15123]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[15147-15697]:IfStatement[15147-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15185-15271]:Block[15185-15271]"
    }, {
      "left" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "right" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "info" : "ExpressionStatement[15199-15261]:ExpressionStatement[15199-15261]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[15285-15697]:IfStatement[15285-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15322-15406]:Block[15322-15406]"
    }, {
      "left" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "right" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "info" : "ExpressionStatement[15336-15396]:ExpressionStatement[15336-15396]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[15420-15697]:IfStatement[15420-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15454-15535]:Block[15454-15535]"
    }, {
      "left" : "resultType = _fromWildcard((WildcardType) type, context);",
      "right" : "resultType = _fromWildcard((WildcardType) type, context);",
      "info" : "ExpressionStatement[15468-15525]:ExpressionStatement[15468-15525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15541-15697]:Block[15541-15697]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[15583-15687]:ThrowStatement[15583-15687]"
    }, {
      "left" : "if (_modifiers != null && !resultType.isContainerType())",
      "right" : "if (_modifiers != null && !resultType.isContainerType())",
      "info" : "IfStatement[15941-16151]:IfStatement[15941-16151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15998-16151]:Block[15998-16151]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[16012-16141]:EnhancedForStatement[16012-16141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16048-16141]:Block[16048-16141]"
    }, {
      "left" : "resultType = mod.modifyType(resultType, type, context, this);",
      "right" : "resultType = mod.modifyType(resultType, type, context, this);",
      "info" : "ExpressionStatement[16066-16127]:ExpressionStatement[16066-16127]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[16160-16178]:ReturnStatement[16160-16178]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16575-16581]:Modifier[16575-16581]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[16582-16591]:SimpleType[16582-16591]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[16592-16610]:SimpleName[16592-16610]"
    }, {
      "left" : "Class<?> elementType",
      "right" : "Class<?> elementType",
      "info" : "SingleVariableDeclaration[16611-16631]:SingleVariableDeclaration[16611-16631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16633-16723]:Block[16633-16723]"
    }, {
      "left" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "right" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "info" : "ReturnStatement[16643-16717]:ReturnStatement[16643-16717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16920-16926]:Modifier[16920-16926]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[16927-16936]:SimpleType[16927-16936]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[16937-16955]:SimpleName[16937-16955]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[16956-16976]:SingleVariableDeclaration[16956-16976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16978-17046]:Block[16978-17046]"
    }, {
      "left" : "return ArrayType.construct(elementType, null, null);",
      "right" : "return ArrayType.construct(elementType, null, null);",
      "info" : "ReturnStatement[16988-17040]:ReturnStatement[16988-17040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17248-17254]:Modifier[17248-17254]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[17255-17269]:SimpleType[17255-17269]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[17270-17293]:SimpleName[17270-17293]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[17294-17337]:SingleVariableDeclaration[17294-17337]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[17339-17360]:SingleVariableDeclaration[17339-17360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17362-17456]:Block[17362-17456]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[17372-17450]:ReturnStatement[17372-17450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17662-17668]:Modifier[17662-17668]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[17669-17683]:SimpleType[17669-17683]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[17684-17707]:SimpleName[17684-17707]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[17708-17751]:SingleVariableDeclaration[17708-17751]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[17753-17773]:SingleVariableDeclaration[17753-17773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17775-17853]:Block[17775-17853]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, elementType);",
      "right" : "return CollectionType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[17785-17847]:ReturnStatement[17785-17847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18060-18066]:Modifier[18060-18066]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[18067-18085]:SimpleType[18067-18085]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[18086-18113]:SimpleName[18086-18113]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[18114-18138]:SingleVariableDeclaration[18114-18138]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[18140-18161]:SingleVariableDeclaration[18140-18161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18163-18261]:Block[18163-18261]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[18173-18255]:ReturnStatement[18173-18255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18472-18478]:Modifier[18472-18478]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[18479-18497]:SimpleType[18479-18497]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[18498-18525]:SimpleName[18498-18525]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[18526-18550]:SingleVariableDeclaration[18526-18550]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[18552-18572]:SingleVariableDeclaration[18552-18572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18574-18656]:Block[18574-18656]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "right" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[18584-18650]:ReturnStatement[18584-18650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18864-18870]:Modifier[18864-18870]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[18871-18878]:SimpleType[18871-18878]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[18879-18895]:SimpleName[18879-18895]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[18896-18925]:SingleVariableDeclaration[18896-18925]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[18927-18943]:SingleVariableDeclaration[18927-18943]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[18945-18963]:SingleVariableDeclaration[18945-18963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18965-19036]:Block[18965-19036]"
    }, {
      "left" : "return MapType.construct(mapClass, keyType, valueType);",
      "right" : "return MapType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[18975-19030]:ReturnStatement[18975-19030]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19240-19246]:Modifier[19240-19246]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[19247-19254]:SimpleType[19247-19254]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[19255-19271]:SimpleName[19255-19271]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[19272-19301]:SingleVariableDeclaration[19272-19301]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[19303-19320]:SingleVariableDeclaration[19303-19320]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[19322-19341]:SingleVariableDeclaration[19322-19341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19343-19446]:Block[19343-19446]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[19353-19440]:ReturnStatement[19353-19440]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19654-19660]:Modifier[19654-19660]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[19661-19672]:SimpleType[19661-19672]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[19673-19693]:SimpleName[19673-19693]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[19694-19711]:SingleVariableDeclaration[19694-19711]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[19713-19729]:SingleVariableDeclaration[19713-19729]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[19731-19749]:SingleVariableDeclaration[19731-19749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19751-19826]:Block[19751-19826]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "right" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[19761-19820]:ReturnStatement[19761-19820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20038-20044]:Modifier[20038-20044]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[20045-20056]:SimpleType[20045-20056]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[20057-20077]:SimpleName[20057-20077]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[20078-20095]:SingleVariableDeclaration[20078-20095]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[20097-20114]:SingleVariableDeclaration[20097-20114]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[20116-20135]:SingleVariableDeclaration[20116-20135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20137-20240]:Block[20137-20240]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[20147-20234]:ReturnStatement[20147-20234]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[20425-20436]:MarkerAnnotation[20425-20436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20441-20447]:Modifier[20441-20447]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[20448-20456]:SimpleType[20448-20456]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[20457-20476]:SimpleName[20457-20476]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[20477-20493]:SingleVariableDeclaration[20477-20493]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[20495-20520]:SingleVariableDeclaration[20495-20520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20522-20599]:Block[20522-20599]"
    }, {
      "left" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "info" : "ReturnStatement[20532-20593]:ReturnStatement[20532-20593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20609-20615]:Modifier[20609-20615]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[20616-20624]:SimpleType[20616-20624]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[20625-20644]:SimpleName[20625-20644]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[20645-20661]:SingleVariableDeclaration[20645-20661]"
    }, {
      "left" : "Class<?> parameterTarget",
      "right" : "Class<?> parameterTarget",
      "info" : "SingleVariableDeclaration[20663-20687]:SingleVariableDeclaration[20663-20687]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[20701-20726]:SingleVariableDeclaration[20701-20726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20732-21488]:Block[20732-21488]"
    }, {
      "left" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "info" : "VariableDeclarationStatement[20818-20883]:VariableDeclarationStatement[20818-20883]"
    }, {
      "left" : "if (typeVars.length != parameterTypes.length)",
      "right" : "if (typeVars.length != parameterTypes.length)",
      "info" : "IfStatement[20892-21210]:IfStatement[20892-21210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20938-21210]:Block[20938-21210]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "right" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "info" : "ThrowStatement[20952-21200]:ThrowStatement[20952-21200]"
    }, {
      "left" : "String[] names = new String[typeVars.length];",
      "right" : "String[] names = new String[typeVars.length];",
      "info" : "VariableDeclarationStatement[21219-21264]:VariableDeclarationStatement[21219-21264]"
    }, {
      "left" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "info" : "ForStatement[21273-21383]:ForStatement[21273-21383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21326-21383]:Block[21326-21383]"
    }, {
      "left" : "names[i] = typeVars[i].getName();",
      "right" : "names[i] = typeVars[i].getName();",
      "info" : "ExpressionStatement[21340-21373]:ExpressionStatement[21340-21373]"
    }, {
      "left" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "right" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "info" : "ReturnStatement[21392-21482]:ReturnStatement[21392-21482]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21792-21798]:Modifier[21792-21798]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[21799-21807]:SimpleType[21799-21807]"
    }, {
      "left" : "uncheckedSimpleType",
      "right" : "uncheckedSimpleType",
      "info" : "SimpleName[21808-21827]:SimpleName[21808-21827]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[21828-21840]:SingleVariableDeclaration[21828-21840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21842-21885]:Block[21842-21885]"
    }, {
      "left" : "return new SimpleType(cls);",
      "right" : "return new SimpleType(cls);",
      "info" : "ReturnStatement[21852-21879]:ReturnStatement[21852-21879]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22640-22646]:Modifier[22640-22646]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[22647-22655]:SimpleType[22647-22655]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[22656-22681]:SimpleName[22656-22681]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[22682-22703]:SingleVariableDeclaration[22682-22703]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[22705-22727]:SingleVariableDeclaration[22705-22727]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[22741-22769]:SingleVariableDeclaration[22741-22769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22775-23052]:Block[22775-23052]"
    }, {
      "left" : "int len = parameterClasses.length;",
      "right" : "int len = parameterClasses.length;",
      "info" : "VariableDeclarationStatement[22785-22819]:VariableDeclarationStatement[22785-22819]"
    }, {
      "left" : "JavaType[] pt = new JavaType[len];",
      "right" : "JavaType[] pt = new JavaType[len];",
      "info" : "VariableDeclarationStatement[22828-22862]:VariableDeclarationStatement[22828-22862]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[22871-22971]:ForStatement[22871-22971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22901-22971]:Block[22901-22971]"
    }, {
      "left" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "right" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "info" : "ExpressionStatement[22915-22961]:ExpressionStatement[22915-22961]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "right" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "info" : "ReturnStatement[22980-23046]:ReturnStatement[22980-23046]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[23152-23163]:MarkerAnnotation[23152-23163]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23168-23174]:Modifier[23168-23174]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[23175-23183]:SimpleType[23175-23183]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[23184-23207]:SimpleName[23184-23207]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[23208-23229]:SingleVariableDeclaration[23208-23229]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[23231-23259]:SingleVariableDeclaration[23231-23259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23261-23356]:Block[23261-23356]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "info" : "ReturnStatement[23271-23350]:ReturnStatement[23271-23350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24154-24160]:Modifier[24154-24160]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[24161-24169]:SimpleType[24161-24169]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[24170-24195]:SimpleName[24170-24195]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[24196-24217]:SingleVariableDeclaration[24196-24217]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[24219-24241]:SingleVariableDeclaration[24219-24241]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[24255-24281]:SingleVariableDeclaration[24255-24281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24287-25664]:Block[24287-25664]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[24297-24317]:VariableDeclarationStatement[24297-24317]"
    }, {
      "left" : "if (parametrized.isArray())",
      "right" : "if (parametrized.isArray())",
      "info" : "IfStatement[24397-25631]:IfStatement[24397-25631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24425-24773]:Block[24425-24773]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[24527-24699]:IfStatement[24527-24699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24559-24699]:Block[24559-24699]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[24577-24685]:ThrowStatement[24577-24685]"
    }, {
      "left" : "resultType = constructArrayType(parameterTypes[0]);",
      "right" : "resultType = constructArrayType(parameterTypes[0]);",
      "info" : "ExpressionStatement[24712-24763]:ExpressionStatement[24712-24763]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(parametrized))",
      "right" : "if (Map.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[24787-25631]:IfStatement[24787-25631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24833-25145]:Block[24833-25145]"
    }, {
      "left" : "if (parameterTypes.length != 2)",
      "right" : "if (parameterTypes.length != 2)",
      "info" : "IfStatement[24847-25023]:IfStatement[24847-25023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24879-25023]:Block[24879-25023]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[24897-25009]:ThrowStatement[24897-25009]"
    }, {
      "left" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "right" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "info" : "ExpressionStatement[25036-25135]:ExpressionStatement[25036-25135]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(parametrized))",
      "right" : "if (Collection.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[25159-25631]:IfStatement[25159-25631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25212-25523]:Block[25212-25523]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[25226-25408]:IfStatement[25226-25408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25258-25408]:Block[25258-25408]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[25276-25394]:ThrowStatement[25276-25394]"
    }, {
      "left" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "right" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "info" : "ExpressionStatement[25421-25513]:ExpressionStatement[25421-25513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25529-25631]:Block[25529-25631]"
    }, {
      "left" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "right" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "info" : "ExpressionStatement[25543-25621]:ExpressionStatement[25543-25621]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[25640-25658]:ReturnStatement[25640-25658]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[25764-25775]:MarkerAnnotation[25764-25775]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25780-25786]:Modifier[25780-25786]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[25787-25795]:SimpleType[25787-25795]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[25796-25819]:SimpleName[25796-25819]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[25820-25841]:SingleVariableDeclaration[25820-25841]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[25843-25869]:SingleVariableDeclaration[25843-25869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25871-25964]:Block[25871-25964]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "info" : "ReturnStatement[25881-25958]:ReturnStatement[25881-25958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26671-26677]:Modifier[26671-26677]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[26678-26692]:SimpleType[26678-26692]"
    }, {
      "left" : "constructRawCollectionType",
      "right" : "constructRawCollectionType",
      "info" : "SimpleName[26693-26719]:SimpleName[26693-26719]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[26720-26763]:SingleVariableDeclaration[26720-26763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26765-26845]:Block[26765-26845]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, unknownType());",
      "right" : "return CollectionType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[26775-26839]:ReturnStatement[26775-26839]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27318-27324]:Modifier[27318-27324]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[27325-27343]:SimpleType[27325-27343]"
    }, {
      "left" : "constructRawCollectionLikeType",
      "right" : "constructRawCollectionLikeType",
      "info" : "SimpleName[27344-27374]:SimpleName[27344-27374]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[27375-27399]:SingleVariableDeclaration[27375-27399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27401-27485]:Block[27401-27485]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "right" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[27411-27479]:ReturnStatement[27411-27479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27962-27968]:Modifier[27962-27968]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[27969-27976]:SimpleType[27969-27976]"
    }, {
      "left" : "constructRawMapType",
      "right" : "constructRawMapType",
      "info" : "SimpleName[27977-27996]:SimpleName[27977-27996]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[27997-28026]:SingleVariableDeclaration[27997-28026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28028-28109]:Block[28028-28109]"
    }, {
      "left" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[28038-28103]:ReturnStatement[28038-28103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28595-28601]:Modifier[28595-28601]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[28602-28613]:SimpleType[28602-28613]"
    }, {
      "left" : "constructRawMapLikeType",
      "right" : "constructRawMapLikeType",
      "info" : "SimpleName[28614-28637]:SimpleName[28614-28637]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[28638-28655]:SingleVariableDeclaration[28638-28655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28657-28742]:Block[28657-28742]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[28667-28736]:ReturnStatement[28667-28736]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29048-29057]:Modifier[29048-29057]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[29058-29066]:SimpleType[29058-29066]"
    }, {
      "left" : "_fromClass",
      "right" : "_fromClass",
      "info" : "SimpleName[29067-29077]:SimpleName[29067-29077]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[29078-29090]:SingleVariableDeclaration[29078-29090]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[29092-29112]:SingleVariableDeclaration[29092-29112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29118-31382]:Block[29118-31382]"
    }, {
      "left" : "if (clz == String.class)",
      "right" : "if (clz == String.class)",
      "info" : "IfStatement[29195-29244]:IfStatement[29195-29244]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[29220-29244]:ReturnStatement[29220-29244]"
    }, {
      "left" : "if (clz == Boolean.TYPE)",
      "right" : "if (clz == Boolean.TYPE)",
      "info" : "IfStatement[29253-29300]:IfStatement[29253-29300]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[29278-29300]:ReturnStatement[29278-29300]"
    }, {
      "left" : "if (clz == Integer.TYPE)",
      "right" : "if (clz == Integer.TYPE)",
      "info" : "IfStatement[29309-29355]:IfStatement[29309-29355]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[29334-29355]:ReturnStatement[29334-29355]"
    }, {
      "left" : "if (clz == Long.TYPE)",
      "right" : "if (clz == Long.TYPE)",
      "info" : "IfStatement[29364-29408]:IfStatement[29364-29408]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[29386-29408]:ReturnStatement[29386-29408]"
    }, {
      "left" : "ClassKey key = new ClassKey(clz);",
      "right" : "ClassKey key = new ClassKey(clz);",
      "info" : "VariableDeclarationStatement[29497-29530]:VariableDeclarationStatement[29497-29530]"
    }, {
      "left" : "JavaType result = _typeCache.get(key);",
      "right" : "JavaType result = _typeCache.get(key);",
      "info" : "VariableDeclarationStatement[29539-29577]:VariableDeclarationStatement[29539-29577]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[29616-29674]:IfStatement[29616-29674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29636-29674]:Block[29636-29674]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[29650-29664]:ReturnStatement[29650-29664]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[29886-31294]:IfStatement[29886-31294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29905-30169]:Block[29905-30169]"
    }, {
      "left" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ExpressionStatement[29919-30006]:ExpressionStatement[29919-30006]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[30175-31294]:IfStatement[30175-31294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30193-30442]:Block[30193-30442]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[30207-30236]:ExpressionStatement[30207-30236]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[30448-31294]:IfStatement[30448-31294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30485-30532]:Block[30485-30532]"
    }, {
      "left" : "result = _mapType(clz);",
      "right" : "result = _mapType(clz);",
      "info" : "ExpressionStatement[30499-30522]:ExpressionStatement[30499-30522]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[30538-31294]:IfStatement[30538-31294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30582-30637]:Block[30582-30637]"
    }, {
      "left" : "result =  _collectionType(clz);",
      "right" : "result =  _collectionType(clz);",
      "info" : "ExpressionStatement[30596-30627]:ExpressionStatement[30596-30627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30643-31294]:Block[30643-31294]"
    }, {
      "left" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "right" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "info" : "IfStatement[30743-31284]:IfStatement[30743-31284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30786-31217]:Block[30786-31217]"
    }, {
      "left" : "JavaType[] pts = this.findTypeParameters(clz, Map.Entry.class);",
      "right" : "JavaType[] pts = this.findTypeParameters(clz, Map.Entry.class);",
      "info" : "VariableDeclarationStatement[30804-30867]:VariableDeclarationStatement[30804-30867]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[30884-30900]:VariableDeclarationStatement[30884-30900]"
    }, {
      "left" : "if (pts == null || pts.length != 2)",
      "right" : "if (pts == null || pts.length != 2)",
      "info" : "IfStatement[30917-31108]:IfStatement[30917-31108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30953-31017]:Block[30953-31017]"
    }, {
      "left" : "kt = vt = unknownType();",
      "right" : "kt = vt = unknownType();",
      "info" : "ExpressionStatement[30975-30999]:ExpressionStatement[30975-30999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31023-31108]:Block[31023-31108]"
    }, {
      "left" : "kt = pts[0];",
      "right" : "kt = pts[0];",
      "info" : "ExpressionStatement[31045-31057]:ExpressionStatement[31045-31057]"
    }, {
      "left" : "vt = pts[1];",
      "right" : "vt = pts[1];",
      "info" : "ExpressionStatement[31078-31090]:ExpressionStatement[31078-31090]"
    }, {
      "left" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "right" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "info" : "ExpressionStatement[31125-31203]:ExpressionStatement[31125-31203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31223-31284]:Block[31223-31284]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[31241-31270]:ExpressionStatement[31241-31270]"
    }, {
      "left" : "_typeCache.put(key, result);",
      "right" : "_typeCache.put(key, result);",
      "info" : "ExpressionStatement[31303-31331]:ExpressionStatement[31303-31331]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31362-31376]:ReturnStatement[31362-31376]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31500-31509]:Modifier[31500-31509]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[31510-31518]:SimpleType[31510-31518]"
    }, {
      "left" : "_fromParameterizedClass",
      "right" : "_fromParameterizedClass",
      "info" : "SimpleName[31519-31542]:SimpleName[31519-31542]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[31543-31555]:SingleVariableDeclaration[31543-31555]"
    }, {
      "left" : "List<JavaType> paramTypes",
      "right" : "List<JavaType> paramTypes",
      "info" : "SingleVariableDeclaration[31557-31582]:SingleVariableDeclaration[31557-31582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31588-32842]:Block[31588-32842]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[31598-31769]:IfStatement[31598-31769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31617-31769]:Block[31617-31769]"
    }, {
      "left" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ReturnStatement[31674-31759]:ReturnStatement[31674-31759]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[31778-31866]:IfStatement[31778-31866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31796-31866]:Block[31796-31866]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[31829-31856]:ReturnStatement[31829-31856]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[31875-32344]:IfStatement[31875-32344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31912-32344]:Block[31912-32344]"
    }, {
      "left" : "JavaType keyType, contentType;",
      "right" : "JavaType keyType, contentType;",
      "info" : "VariableDeclarationStatement[31984-32014]:VariableDeclarationStatement[31984-32014]"
    }, {
      "left" : "if (paramTypes.size() > 0)",
      "right" : "if (paramTypes.size() > 0)",
      "info" : "IfStatement[32027-32300]:IfStatement[32027-32300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32054-32300]:Block[32054-32300]"
    }, {
      "left" : "keyType = paramTypes.get(0);",
      "right" : "keyType = paramTypes.get(0);",
      "info" : "ExpressionStatement[32072-32100]:ExpressionStatement[32072-32100]"
    }, {
      "left" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "right" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "info" : "ExpressionStatement[32117-32217]:ExpressionStatement[32117-32217]"
    }, {
      "left" : "return MapType.construct(clz, keyType, contentType);",
      "right" : "return MapType.construct(clz, keyType, contentType);",
      "info" : "ReturnStatement[32234-32286]:ReturnStatement[32234-32286]"
    }, {
      "left" : "return _mapType(clz);",
      "right" : "return _mapType(clz);",
      "info" : "ReturnStatement[32313-32334]:ReturnStatement[32313-32334]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[32353-32578]:IfStatement[32353-32578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32397-32578]:Block[32397-32578]"
    }, {
      "left" : "if (paramTypes.size() >= 1)",
      "right" : "if (paramTypes.size() >= 1)",
      "info" : "IfStatement[32411-32527]:IfStatement[32411-32527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32439-32527]:Block[32439-32527]"
    }, {
      "left" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "right" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "info" : "ReturnStatement[32457-32513]:ReturnStatement[32457-32513]"
    }, {
      "left" : "return _collectionType(clz);",
      "right" : "return _collectionType(clz);",
      "info" : "ReturnStatement[32540-32568]:ReturnStatement[32540-32568]"
    }, {
      "left" : "if (paramTypes.size() == 0)",
      "right" : "if (paramTypes.size() == 0)",
      "info" : "IfStatement[32587-32666]:IfStatement[32587-32666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32615-32666]:Block[32615-32666]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[32629-32656]:ReturnStatement[32629-32656]"
    }, {
      "left" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "right" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "info" : "VariableDeclarationStatement[32718-32786]:VariableDeclarationStatement[32718-32786]"
    }, {
      "left" : "return constructSimpleType(clz, clz, pt);",
      "right" : "return constructSimpleType(clz, clz, pt);",
      "info" : "ReturnStatement[32795-32836]:ReturnStatement[32795-32836]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32964-32973]:Modifier[32964-32973]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[32974-32982]:SimpleType[32974-32982]"
    }, {
      "left" : "_fromParamType",
      "right" : "_fromParamType",
      "info" : "SimpleName[32983-32997]:SimpleName[32983-32997]"
    }, {
      "left" : "ParameterizedType type",
      "right" : "ParameterizedType type",
      "info" : "SingleVariableDeclaration[32998-33020]:SingleVariableDeclaration[32998-33020]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[33022-33042]:SingleVariableDeclaration[33022-33042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33048-35005]:Block[33048-35005]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "info" : "VariableDeclarationStatement[33344-33392]:VariableDeclarationStatement[33344-33392]"
    }, {
      "left" : "Type[] args = type.getActualTypeArguments();",
      "right" : "Type[] args = type.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[33401-33445]:VariableDeclarationStatement[33401-33445]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[33454-33504]:VariableDeclarationStatement[33454-33504]"
    }, {
      "left" : "JavaType[] pt;",
      "right" : "JavaType[] pt;",
      "info" : "VariableDeclarationStatement[33514-33528]:VariableDeclarationStatement[33514-33528]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[33546-33788]:IfStatement[33546-33788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33567-33605]:Block[33567-33605]"
    }, {
      "left" : "pt = NO_TYPES;",
      "right" : "pt = NO_TYPES;",
      "info" : "ExpressionStatement[33581-33595]:ExpressionStatement[33581-33595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33611-33788]:Block[33611-33788]"
    }, {
      "left" : "pt = new JavaType[paramCount];",
      "right" : "pt = new JavaType[paramCount];",
      "info" : "ExpressionStatement[33625-33655]:ExpressionStatement[33625-33655]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[33668-33778]:ForStatement[33668-33778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33705-33778]:Block[33705-33778]"
    }, {
      "left" : "pt[i] = _constructType(args[i], context);",
      "right" : "pt[i] = _constructType(args[i], context);",
      "info" : "ExpressionStatement[33723-33764]:ExpressionStatement[33723-33764]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(rawType))",
      "right" : "if (Map.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[33832-34316]:IfStatement[33832-34316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33873-34316]:Block[33873-34316]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[33887-33948]:VariableDeclarationStatement[33887-33948]"
    }, {
      "left" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "right" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "info" : "VariableDeclarationStatement[33961-34023]:VariableDeclarationStatement[33961-34023]"
    }, {
      "left" : "if (mapParams.length != 2)",
      "right" : "if (mapParams.length != 2)",
      "info" : "IfStatement[34036-34231]:IfStatement[34036-34231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34063-34231]:Block[34063-34231]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "info" : "ThrowStatement[34081-34217]:ThrowStatement[34081-34217]"
    }, {
      "left" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "right" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "info" : "ReturnStatement[34244-34306]:ReturnStatement[34244-34306]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(rawType))",
      "right" : "if (Collection.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[34325-34850]:IfStatement[34325-34850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34373-34850]:Block[34373-34850]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[34387-34448]:VariableDeclarationStatement[34387-34448]"
    }, {
      "left" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "right" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "info" : "VariableDeclarationStatement[34461-34537]:VariableDeclarationStatement[34461-34537]"
    }, {
      "left" : "if (collectionParams.length != 1)",
      "right" : "if (collectionParams.length != 1)",
      "info" : "IfStatement[34550-34765]:IfStatement[34550-34765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34584-34765]:Block[34584-34765]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "info" : "ThrowStatement[34602-34751]:ThrowStatement[34602-34751]"
    }, {
      "left" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "right" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "info" : "ReturnStatement[34778-34840]:ReturnStatement[34778-34840]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[34859-34950]:IfStatement[34859-34950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34880-34950]:Block[34880-34950]"
    }, {
      "left" : "return new SimpleType(rawType);",
      "right" : "return new SimpleType(rawType);",
      "info" : "ReturnStatement[34909-34940]:ReturnStatement[34909-34940]"
    }, {
      "left" : "return constructSimpleType(rawType, pt);",
      "right" : "return constructSimpleType(rawType, pt);",
      "info" : "ReturnStatement[34959-34999]:ReturnStatement[34959-34999]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[35016-35025]:Modifier[35016-35025]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[35026-35034]:SimpleType[35026-35034]"
    }, {
      "left" : "_fromArrayType",
      "right" : "_fromArrayType",
      "info" : "SimpleName[35035-35049]:SimpleName[35035-35049]"
    }, {
      "left" : "GenericArrayType type",
      "right" : "GenericArrayType type",
      "info" : "SingleVariableDeclaration[35050-35071]:SingleVariableDeclaration[35050-35071]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[35073-35093]:SingleVariableDeclaration[35073-35093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35099-35249]:Block[35099-35249]"
    }, {
      "left" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "right" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "info" : "VariableDeclarationStatement[35109-35185]:VariableDeclarationStatement[35109-35185]"
    }, {
      "left" : "return ArrayType.construct(compType, null, null);",
      "right" : "return ArrayType.construct(compType, null, null);",
      "info" : "ReturnStatement[35194-35243]:ReturnStatement[35194-35243]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[35255-35264]:Modifier[35255-35264]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[35265-35273]:SimpleType[35265-35273]"
    }, {
      "left" : "_fromVariable",
      "right" : "_fromVariable",
      "info" : "SimpleName[35274-35287]:SimpleName[35274-35287]"
    }, {
      "left" : "TypeVariable<?> type",
      "right" : "TypeVariable<?> type",
      "info" : "SingleVariableDeclaration[35288-35308]:SingleVariableDeclaration[35288-35308]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[35310-35330]:SingleVariableDeclaration[35310-35330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35336-37177]:Block[35336-37212]"
    }, {
      "left" : "final String name = type.getName();",
      "right" : "final String name = type.getName();",
      "info" : "VariableDeclarationStatement[35346-35381]:VariableDeclarationStatement[35346-35381]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[35460-36053]:IfStatement[35460-36088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35481-35588]:Block[35481-35616]"
    }, {
      "left" : "_unknownType",
      "right" : "TypeBindings",
      "info" : "SimpleName[35563-35575]:SimpleName[35570-35582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35594-36053]:Block[35622-36088]"
    }, {
      "left" : "JavaType actualType = context.findType(name);",
      "right" : "JavaType actualType = context.findType(name, false);",
      "info" : "VariableDeclarationStatement[35911-35956]:VariableDeclarationStatement[35939-35991]"
    }, {
      "left" : "if (actualType != null)",
      "right" : "if (actualType != null)",
      "info" : "IfStatement[35969-36043]:IfStatement[36004-36078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35993-36043]:Block[36028-36078]"
    }, {
      "left" : "return actualType;",
      "right" : "return actualType;",
      "info" : "ReturnStatement[36011-36029]:ReturnStatement[36046-36064]"
    }, {
      "left" : "Type[] bounds = type.getBounds();",
      "right" : "Type[] bounds = type.getBounds();",
      "info" : "VariableDeclarationStatement[36368-36401]:VariableDeclarationStatement[36403-36436]"
    }, {
      "left" : "context._addPlaceholder(name);",
      "right" : "context._addPlaceholder(name);",
      "info" : "ExpressionStatement[37090-37120]:ExpressionStatement[37125-37155]"
    }, {
      "left" : "return _constructType(bounds[0], context);",
      "right" : "return _constructType(bounds[0], context);",
      "info" : "ReturnStatement[37129-37171]:ReturnStatement[37164-37206]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37183-37192]:Modifier[37218-37227]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[37193-37201]:SimpleType[37228-37236]"
    }, {
      "left" : "_fromWildcard",
      "right" : "_fromWildcard",
      "info" : "SimpleName[37202-37215]:SimpleName[37237-37250]"
    }, {
      "left" : "WildcardType type",
      "right" : "WildcardType type",
      "info" : "SingleVariableDeclaration[37216-37233]:SingleVariableDeclaration[37251-37268]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[37235-37255]:SingleVariableDeclaration[37270-37290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37261-37693]:Block[37296-37728]"
    }, {
      "left" : "return _constructType(type.getUpperBounds()[0], context);",
      "right" : "return _constructType(type.getUpperBounds()[0], context);",
      "info" : "ReturnStatement[37630-37687]:ReturnStatement[37665-37722]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37699-37706]:Modifier[37734-37741]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[37707-37715]:SimpleType[37742-37750]"
    }, {
      "left" : "_mapType",
      "right" : "_mapType",
      "info" : "SimpleName[37716-37724]:SimpleName[37751-37759]"
    }, {
      "left" : "Class<?> rawClass",
      "right" : "Class<?> rawClass",
      "info" : "SingleVariableDeclaration[37725-37742]:SingleVariableDeclaration[37760-37777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37748-38283]:Block[37783-38318]"
    }, {
      "left" : "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
      "right" : "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
      "info" : "VariableDeclarationStatement[37758-37822]:VariableDeclarationStatement[37793-37857]"
    }, {
      "left" : "if (typeParams == null)",
      "right" : "if (typeParams == null)",
      "info" : "IfStatement[37870-37985]:IfStatement[37905-38020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37894-37985]:Block[37929-38020]"
    }, {
      "left" : "return MapType.construct(rawClass, _unknownType(), _unknownType());",
      "right" : "return MapType.construct(rawClass, _unknownType(), _unknownType());",
      "info" : "ReturnStatement[37908-37975]:ReturnStatement[37943-38010]"
    }, {
      "left" : "if (typeParams.length != 2)",
      "right" : "if (typeParams.length != 2)",
      "info" : "IfStatement[38038-38203]:IfStatement[38073-38238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38066-38203]:Block[38101-38238]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[38080-38193]:ThrowStatement[38115-38228]"
    }, {
      "left" : "return MapType.construct(rawClass, typeParams[0], typeParams[1]);",
      "right" : "return MapType.construct(rawClass, typeParams[0], typeParams[1]);",
      "info" : "ReturnStatement[38212-38277]:ReturnStatement[38247-38312]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38289-38296]:Modifier[38324-38331]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[38297-38305]:SimpleType[38332-38340]"
    }, {
      "left" : "_collectionType",
      "right" : "_collectionType",
      "info" : "SimpleName[38306-38321]:SimpleName[38341-38356]"
    }, {
      "left" : "Class<?> rawClass",
      "right" : "Class<?> rawClass",
      "info" : "SingleVariableDeclaration[38322-38339]:SingleVariableDeclaration[38357-38374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38345-38877]:Block[38380-38912]"
    }, {
      "left" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "right" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "info" : "VariableDeclarationStatement[38355-38426]:VariableDeclarationStatement[38390-38461]"
    }, {
      "left" : "if (typeParams == null)",
      "right" : "if (typeParams == null)",
      "info" : "IfStatement[38474-38580]:IfStatement[38509-38615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38498-38580]:Block[38533-38615]"
    }, {
      "left" : "return CollectionType.construct(rawClass, _unknownType());",
      "right" : "return CollectionType.construct(rawClass, _unknownType());",
      "info" : "ReturnStatement[38512-38570]:ReturnStatement[38547-38605]"
    }, {
      "left" : "if (typeParams.length != 1)",
      "right" : "if (typeParams.length != 1)",
      "info" : "IfStatement[38633-38805]:IfStatement[38668-38840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38661-38805]:Block[38696-38840]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[38675-38795]:ThrowStatement[38710-38830]"
    }, {
      "left" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "right" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "info" : "ReturnStatement[38814-38871]:ReturnStatement[38849-38906]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38887-38896]:Modifier[38922-38931]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[38897-38905]:SimpleType[38932-38940]"
    }, {
      "left" : "_resolveVariableViaSubTypes",
      "right" : "_resolveVariableViaSubTypes",
      "info" : "SimpleName[38906-38933]:SimpleName[38941-38968]"
    }, {
      "left" : "HierarchicType leafType",
      "right" : "HierarchicType leafType",
      "info" : "SingleVariableDeclaration[38934-38957]:SingleVariableDeclaration[38969-38992]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[38959-38978]:SingleVariableDeclaration[38994-39013]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[38980-39001]:SingleVariableDeclaration[39015-39036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39007-40000]:Block[39042-40035]"
    }, {
      "left" : "if (leafType != null && leafType.isGeneric())",
      "right" : "if (leafType != null && leafType.isGeneric())",
      "info" : "IfStatement[39099-39963]:IfStatement[39134-39998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39145-39963]:Block[39180-39998]"
    }, {
      "left" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "info" : "VariableDeclarationStatement[39159-39236]:VariableDeclarationStatement[39194-39271]"
    }, {
      "left" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "info" : "ForStatement[39249-39953]:ForStatement[39284-39988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39307-39953]:Block[39342-39988]"
    }, {
      "left" : "TypeVariable<?> tv = typeVariables[i];",
      "right" : "TypeVariable<?> tv = typeVariables[i];",
      "info" : "VariableDeclarationStatement[39325-39363]:VariableDeclarationStatement[39360-39398]"
    }, {
      "left" : "if (variableName.equals(tv.getName()))",
      "right" : "if (variableName.equals(tv.getName()))",
      "info" : "IfStatement[39380-39939]:IfStatement[39415-39974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39419-39939]:Block[39454-39974]"
    }, {
      "left" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "right" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "info" : "VariableDeclarationStatement[39491-39552]:VariableDeclarationStatement[39526-39587]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[39573-39762]:IfStatement[39608-39797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39610-39762]:Block[39645-39797]"
    }, {
      "left" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "right" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "info" : "ReturnStatement[39636-39740]:ReturnStatement[39671-39775]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[39883-39921]:ReturnStatement[39918-39956]"
    }, {
      "left" : "return _unknownType();",
      "right" : "return _unknownType();",
      "info" : "ReturnStatement[39972-39994]:ReturnStatement[40007-40029]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40010-40019]:Modifier[40045-40054]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[40020-40028]:SimpleType[40055-40063]"
    }, {
      "left" : "_unknownType",
      "right" : "_unknownType",
      "info" : "SimpleName[40029-40041]:SimpleName[40064-40076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40044-40096]:Block[40079-40131]"
    }, {
      "left" : "return new SimpleType(Object.class);",
      "right" : "return new SimpleType(Object.class);",
      "info" : "ReturnStatement[40054-40090]:ReturnStatement[40089-40125]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40568-40577]:Modifier[40603-40612]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[40578-40592]:SimpleType[40613-40627]"
    }, {
      "left" : "_findSuperTypeChain",
      "right" : "_findSuperTypeChain",
      "info" : "SimpleName[40594-40613]:SimpleName[40629-40648]"
    }, {
      "left" : "Class<?> subtype",
      "right" : "Class<?> subtype",
      "info" : "SingleVariableDeclaration[40614-40630]:SingleVariableDeclaration[40649-40665]"
    }, {
      "left" : "Class<?> supertype",
      "right" : "Class<?> supertype",
      "info" : "SingleVariableDeclaration[40632-40650]:SingleVariableDeclaration[40667-40685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40656-40899]:Block[40691-40934]"
    }, {
      "left" : "if (supertype.isInterface())",
      "right" : "if (supertype.isInterface())",
      "info" : "IfStatement[40731-40836]:IfStatement[40766-40871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40760-40836]:Block[40795-40871]"
    }, {
      "left" : "return _findSuperInterfaceChain(subtype, supertype);",
      "right" : "return _findSuperInterfaceChain(subtype, supertype);",
      "info" : "ReturnStatement[40774-40826]:ReturnStatement[40809-40861]"
    }, {
      "left" : "return _findSuperClassChain(subtype, supertype);",
      "right" : "return _findSuperClassChain(subtype, supertype);",
      "info" : "ReturnStatement[40845-40893]:ReturnStatement[40880-40928]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40905-40914]:Modifier[40940-40949]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[40915-40929]:SimpleType[40950-40964]"
    }, {
      "left" : "_findSuperClassChain",
      "right" : "_findSuperClassChain",
      "info" : "SimpleName[40930-40950]:SimpleName[40965-40985]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[40951-40967]:SingleVariableDeclaration[40986-41002]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[40969-40984]:SingleVariableDeclaration[41004-41019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40990-41576]:Block[41025-41611]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[41000-41057]:VariableDeclarationStatement[41035-41092]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[41066-41103]:VariableDeclarationStatement[41101-41138]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[41112-41170]:IfStatement[41147-41205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41131-41170]:Block[41166-41205]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[41145-41160]:ReturnStatement[41180-41195]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[41236-41277]:VariableDeclarationStatement[41271-41312]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[41286-41549]:IfStatement[41321-41584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41306-41549]:Block[41341-41584]"
    }, {
      "left" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "info" : "VariableDeclarationStatement[41320-41378]:VariableDeclarationStatement[41355-41413]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[41391-41539]:IfStatement[41426-41574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41408-41539]:Block[41443-41574]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[41426-41450]:ExpressionStatement[41461-41485]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[41467-41493]:ExpressionStatement[41502-41528]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[41510-41525]:ReturnStatement[41545-41560]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41558-41570]:ReturnStatement[41593-41605]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[41582-41591]:Modifier[41617-41626]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[41592-41606]:SimpleType[41627-41641]"
    }, {
      "left" : "_findSuperInterfaceChain",
      "right" : "_findSuperInterfaceChain",
      "info" : "SimpleName[41607-41631]:SimpleName[41642-41666]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[41632-41648]:SingleVariableDeclaration[41667-41683]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[41650-41665]:SingleVariableDeclaration[41685-41700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41671-42500]:Block[41706-42535]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[41681-41738]:VariableDeclarationStatement[41716-41773]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[41747-41784]:VariableDeclarationStatement[41782-41819]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[41793-41875]:IfStatement[41828-41910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41812-41875]:Block[41847-41910]"
    }, {
      "left" : "return new HierarchicType(currentType);",
      "right" : "return new HierarchicType(currentType);",
      "info" : "ReturnStatement[41826-41865]:ReturnStatement[41861-41900]"
    }, {
      "left" : "if (raw == HashMap.class)",
      "right" : "if (raw == HashMap.class)",
      "info" : "IfStatement[42118-42269]:IfStatement[42153-42304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42144-42269]:Block[42179-42304]"
    }, {
      "left" : "if (target == Map.class)",
      "right" : "if (target == Map.class)",
      "info" : "IfStatement[42158-42259]:IfStatement[42193-42294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42183-42259]:Block[42218-42294]"
    }, {
      "left" : "return _hashMapSuperInterfaceChain(current);",
      "right" : "return _hashMapSuperInterfaceChain(current);",
      "info" : "ReturnStatement[42201-42245]:ReturnStatement[42236-42280]"
    }, {
      "left" : "if (raw == ArrayList.class)",
      "right" : "if (raw == ArrayList.class)",
      "info" : "IfStatement[42278-42434]:IfStatement[42313-42469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42306-42434]:Block[42341-42469]"
    }, {
      "left" : "if (target == List.class)",
      "right" : "if (target == List.class)",
      "info" : "IfStatement[42320-42424]:IfStatement[42355-42459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42346-42424]:Block[42381-42459]"
    }, {
      "left" : "return _arrayListSuperInterfaceChain(current);",
      "right" : "return _arrayListSuperInterfaceChain(current);",
      "info" : "ReturnStatement[42364-42410]:ReturnStatement[42399-42445]"
    }, {
      "left" : "return _doFindSuperInterfaceChain(current, target);",
      "right" : "return _doFindSuperInterfaceChain(current, target);",
      "info" : "ReturnStatement[42443-42494]:ReturnStatement[42478-42529]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[42510-42519]:Modifier[42545-42554]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[42520-42534]:SimpleType[42555-42569]"
    }, {
      "left" : "_doFindSuperInterfaceChain",
      "right" : "_doFindSuperInterfaceChain",
      "info" : "SimpleName[42535-42561]:SimpleName[42570-42596]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[42562-42584]:SingleVariableDeclaration[42597-42619]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[42586-42601]:SingleVariableDeclaration[42621-42636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42607-43572]:Block[42642-43607]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[42617-42654]:VariableDeclarationStatement[42652-42689]"
    }, {
      "left" : "Type[] parents = raw.getGenericInterfaces();",
      "right" : "Type[] parents = raw.getGenericInterfaces();",
      "info" : "VariableDeclarationStatement[42663-42707]:VariableDeclarationStatement[42698-42742]"
    }, {
      "left" : "if (parents != null)",
      "right" : "if (parents != null)",
      "info" : "IfStatement[42832-43180]:IfStatement[42867-43215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42853-43180]:Block[42888-43215]"
    }, {
      "left" : "for (Type parent : parents)",
      "right" : "for (Type parent : parents)",
      "info" : "EnhancedForStatement[42867-43170]:EnhancedForStatement[42902-43205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42895-43170]:Block[42930-43205]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[42913-42975]:VariableDeclarationStatement[42948-43010]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[42992-43156]:IfStatement[43027-43191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43009-43156]:Block[43044-43191]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[43031-43055]:ExpressionStatement[43066-43090]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[43076-43102]:ExpressionStatement[43111-43137]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[43123-43138]:ReturnStatement[43158-43173]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[43228-43269]:VariableDeclarationStatement[43263-43304]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[43278-43545]:IfStatement[43313-43580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43298-43545]:Block[43333-43580]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[43312-43374]:VariableDeclarationStatement[43347-43409]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[43387-43535]:IfStatement[43422-43570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43404-43535]:Block[43439-43570]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[43422-43446]:ExpressionStatement[43457-43481]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[43463-43489]:ExpressionStatement[43498-43524]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[43506-43521]:ReturnStatement[43541-43556]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43554-43566]:ReturnStatement[43589-43601]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[43578-43587]:Modifier[43613-43622]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[43588-43600]:Modifier[43623-43635]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[43601-43615]:SimpleType[43636-43650]"
    }, {
      "left" : "_hashMapSuperInterfaceChain",
      "right" : "_hashMapSuperInterfaceChain",
      "info" : "SimpleName[43616-43643]:SimpleName[43651-43678]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[43644-43666]:SingleVariableDeclaration[43679-43701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43672-44072]:Block[43707-44107]"
    }, {
      "left" : "if (_cachedHashMapType == null)",
      "right" : "if (_cachedHashMapType == null)",
      "info" : "IfStatement[43682-43905]:IfStatement[43717-43940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43714-43905]:Block[43749-43940]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[43728-43784]:VariableDeclarationStatement[43763-43819]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, Map.class);",
      "right" : "_doFindSuperInterfaceChain(base, Map.class);",
      "info" : "ExpressionStatement[43797-43841]:ExpressionStatement[43832-43876]"
    }, {
      "left" : "_cachedHashMapType = base.getSuperType();",
      "right" : "_cachedHashMapType = base.getSuperType();",
      "info" : "ExpressionStatement[43854-43895]:ExpressionStatement[43889-43930]"
    }, {
      "left" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[43914-43978]:VariableDeclarationStatement[43949-44013]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[43987-44011]:ExpressionStatement[44022-44046]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[44020-44042]:ExpressionStatement[44055-44077]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[44051-44066]:ReturnStatement[44086-44101]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44078-44087]:Modifier[44113-44122]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[44088-44100]:Modifier[44123-44135]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[44101-44115]:SimpleType[44136-44150]"
    }, {
      "left" : "_arrayListSuperInterfaceChain",
      "right" : "_arrayListSuperInterfaceChain",
      "info" : "SimpleName[44116-44145]:SimpleName[44151-44180]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[44146-44168]:SingleVariableDeclaration[44181-44203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44174-44581]:Block[44209-44616]"
    }, {
      "left" : "if (_cachedArrayListType == null)",
      "right" : "if (_cachedArrayListType == null)",
      "info" : "IfStatement[44184-44412]:IfStatement[44219-44447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44218-44412]:Block[44253-44447]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[44232-44288]:VariableDeclarationStatement[44267-44323]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, List.class);",
      "right" : "_doFindSuperInterfaceChain(base, List.class);",
      "info" : "ExpressionStatement[44301-44346]:ExpressionStatement[44336-44381]"
    }, {
      "left" : "_cachedArrayListType = base.getSuperType();",
      "right" : "_cachedArrayListType = base.getSuperType();",
      "info" : "ExpressionStatement[44359-44402]:ExpressionStatement[44394-44437]"
    }, {
      "left" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[44421-44487]:VariableDeclarationStatement[44456-44522]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[44496-44520]:ExpressionStatement[44531-44555]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[44529-44551]:ExpressionStatement[44564-44586]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[44560-44575]:ReturnStatement[44595-44610]"
    } ]
  },
  "interFileMappings" : { }
}