{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ParserMinimalBase",
      "right" : "ParserMinimalBase",
      "info" : "TypeDeclaration[379-19727]:TypeDeclaration[379-19921]"
    }, {
      "left" : "protected final static int INT_TAB = '\\t';",
      "right" : "protected final static int INT_TAB = '\\t';",
      "info" : "FieldDeclaration[865-907]:FieldDeclaration[865-907]"
    }, {
      "left" : "protected final static int INT_LF = '\\n';",
      "right" : "protected final static int INT_LF = '\\n';",
      "info" : "FieldDeclaration[912-953]:FieldDeclaration[912-953]"
    }, {
      "left" : "protected final static int INT_CR = '\\r';",
      "right" : "protected final static int INT_CR = '\\r';",
      "info" : "FieldDeclaration[958-999]:FieldDeclaration[958-999]"
    }, {
      "left" : "protected final static int INT_SPACE = 0x0020;",
      "right" : "protected final static int INT_SPACE = 0x0020;",
      "info" : "FieldDeclaration[1004-1050]:FieldDeclaration[1004-1050]"
    }, {
      "left" : "protected final static int INT_LBRACKET = '[';",
      "right" : "protected final static int INT_LBRACKET = '[';",
      "info" : "FieldDeclaration[1070-1116]:FieldDeclaration[1070-1116]"
    }, {
      "left" : "protected final static int INT_RBRACKET = ']';",
      "right" : "protected final static int INT_RBRACKET = ']';",
      "info" : "FieldDeclaration[1121-1167]:FieldDeclaration[1121-1167]"
    }, {
      "left" : "protected final static int INT_LCURLY = '{';",
      "right" : "protected final static int INT_LCURLY = '{';",
      "info" : "FieldDeclaration[1172-1216]:FieldDeclaration[1172-1216]"
    }, {
      "left" : "protected final static int INT_RCURLY = '}';",
      "right" : "protected final static int INT_RCURLY = '}';",
      "info" : "FieldDeclaration[1221-1265]:FieldDeclaration[1221-1265]"
    }, {
      "left" : "protected final static int INT_QUOTE = '\"';",
      "right" : "protected final static int INT_QUOTE = '\"';",
      "info" : "FieldDeclaration[1270-1313]:FieldDeclaration[1270-1313]"
    }, {
      "left" : "protected final static int INT_BACKSLASH = '\\\\';",
      "right" : "protected final static int INT_BACKSLASH = '\\\\';",
      "info" : "FieldDeclaration[1318-1366]:FieldDeclaration[1318-1366]"
    }, {
      "left" : "protected final static int INT_SLASH = '/';",
      "right" : "protected final static int INT_SLASH = '/';",
      "info" : "FieldDeclaration[1371-1414]:FieldDeclaration[1371-1414]"
    }, {
      "left" : "protected final static int INT_COLON = ':';",
      "right" : "protected final static int INT_COLON = ':';",
      "info" : "FieldDeclaration[1419-1462]:FieldDeclaration[1419-1462]"
    }, {
      "left" : "protected final static int INT_COMMA = ',';",
      "right" : "protected final static int INT_COMMA = ',';",
      "info" : "FieldDeclaration[1467-1510]:FieldDeclaration[1467-1510]"
    }, {
      "left" : "protected final static int INT_HASH = '#';",
      "right" : "protected final static int INT_HASH = '#';",
      "info" : "FieldDeclaration[1515-1557]:FieldDeclaration[1515-1557]"
    }, {
      "left" : "protected final static int INT_PERIOD = '.';",
      "right" : "protected final static int INT_PERIOD = '.';",
      "info" : "FieldDeclaration[1581-1625]:FieldDeclaration[1581-1625]"
    }, {
      "left" : "protected final static int INT_e = 'e';",
      "right" : "protected final static int INT_e = 'e';",
      "info" : "FieldDeclaration[1630-1669]:FieldDeclaration[1630-1669]"
    }, {
      "left" : "protected final static int INT_E = 'E';",
      "right" : "protected final static int INT_E = 'E';",
      "info" : "FieldDeclaration[1674-1713]:FieldDeclaration[1674-1713]"
    }, {
      "left" : "protected JsonToken _currToken;",
      "right" : "protected JsonToken _currToken;",
      "info" : "FieldDeclaration[1905-2130]:FieldDeclaration[1905-2130]"
    }, {
      "left" : "protected JsonToken _lastClearedToken;",
      "right" : "protected JsonToken _lastClearedToken;",
      "info" : "FieldDeclaration[2136-2310]:FieldDeclaration[2136-2310]"
    }, {
      "left" : "protected ParserMinimalBase()",
      "right" : "protected ParserMinimalBase()",
      "info" : "MethodDeclaration[2478-2511]:MethodDeclaration[2478-2511]"
    }, {
      "left" : "protected ParserMinimalBase(int features)",
      "right" : "protected ParserMinimalBase(int features)",
      "info" : "MethodDeclaration[2516-2578]:MethodDeclaration[2516-2578]"
    }, {
      "left" : "public abstract JsonToken nextToken() throws IOException;",
      "right" : "public abstract JsonToken nextToken() throws IOException;",
      "info" : "MethodDeclaration[3253-3320]:MethodDeclaration[3253-3320]"
    }, {
      "left" : "public JsonToken getCurrentToken()",
      "right" : "public JsonToken getCurrentToken()",
      "info" : "MethodDeclaration[3325-3392]:MethodDeclaration[3325-3392]"
    }, {
      "left" : "public final int getCurrentTokenId()",
      "right" : "public final int getCurrentTokenId()",
      "info" : "MethodDeclaration[3398-3555]:MethodDeclaration[3398-3555]"
    }, {
      "left" : "public boolean hasCurrentToken()",
      "right" : "public boolean hasCurrentToken()",
      "info" : "MethodDeclaration[3561-3634]:MethodDeclaration[3561-3634]"
    }, {
      "left" : "public boolean hasTokenId(int id)",
      "right" : "public boolean hasTokenId(int id)",
      "info" : "MethodDeclaration[3639-3846]:MethodDeclaration[3639-3846]"
    }, {
      "left" : "public final boolean hasToken(JsonToken t)",
      "right" : "public final boolean hasToken(JsonToken t)",
      "info" : "MethodDeclaration[3852-3946]:MethodDeclaration[3852-3946]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[3956-4056]:MethodDeclaration[3956-4056]"
    }, {
      "left" : "public boolean isExpectedStartObjectToken()",
      "right" : "public boolean isExpectedStartObjectToken()",
      "info" : "MethodDeclaration[4061-4163]:MethodDeclaration[4061-4163]"
    }, {
      "left" : "public JsonToken nextValue() throws IOException",
      "right" : "public JsonToken nextValue() throws IOException",
      "info" : "MethodDeclaration[4173-4570]:MethodDeclaration[4173-4570]"
    }, {
      "left" : "public JsonParser skipChildren() throws IOException",
      "right" : "public JsonParser skipChildren() throws IOException",
      "info" : "MethodDeclaration[4576-5542]:MethodDeclaration[4576-5542]"
    }, {
      "left" : "protected abstract void _handleEOF() throws JsonParseException;",
      "right" : "protected abstract void _handleEOF() throws JsonParseException;",
      "info" : "MethodDeclaration[5548-5671]:MethodDeclaration[5548-5671]"
    }, {
      "left" : "public abstract String getCurrentName() throws IOException;",
      "right" : "public abstract String getCurrentName() throws IOException;",
      "info" : "MethodDeclaration[5758-5827]:MethodDeclaration[5758-5827]"
    }, {
      "left" : "public abstract void close() throws IOException;",
      "right" : "public abstract void close() throws IOException;",
      "info" : "MethodDeclaration[5832-5890]:MethodDeclaration[5832-5890]"
    }, {
      "left" : "public abstract boolean isClosed();",
      "right" : "public abstract boolean isClosed();",
      "info" : "MethodDeclaration[5895-5940]:MethodDeclaration[5895-5940]"
    }, {
      "left" : "public abstract JsonStreamContext getParsingContext();",
      "right" : "public abstract JsonStreamContext getParsingContext();",
      "info" : "MethodDeclaration[5946-6010]:MethodDeclaration[5946-6010]"
    }, {
      "left" : "public void clearCurrentToken()",
      "right" : "public void clearCurrentToken()",
      "info" : "MethodDeclaration[6314-6482]:MethodDeclaration[6314-6482]"
    }, {
      "left" : "public JsonToken getLastClearedToken()",
      "right" : "public JsonToken getLastClearedToken()",
      "info" : "MethodDeclaration[6488-6566]:MethodDeclaration[6488-6566]"
    }, {
      "left" : "public abstract void overrideCurrentName(String name);",
      "right" : "public abstract void overrideCurrentName(String name);",
      "info" : "MethodDeclaration[6572-6636]:MethodDeclaration[6572-6636]"
    }, {
      "left" : "public abstract String getText() throws IOException;",
      "right" : "public abstract String getText() throws IOException;",
      "info" : "MethodDeclaration[6843-6905]:MethodDeclaration[6843-6905]"
    }, {
      "left" : "public abstract char[] getTextCharacters() throws IOException;",
      "right" : "public abstract char[] getTextCharacters() throws IOException;",
      "info" : "MethodDeclaration[6910-6982]:MethodDeclaration[6910-6982]"
    }, {
      "left" : "public abstract boolean hasTextCharacters();",
      "right" : "public abstract boolean hasTextCharacters();",
      "info" : "MethodDeclaration[6987-7041]:MethodDeclaration[6987-7041]"
    }, {
      "left" : "public abstract int getTextLength() throws IOException;",
      "right" : "public abstract int getTextLength() throws IOException;",
      "info" : "MethodDeclaration[7046-7111]:MethodDeclaration[7046-7111]"
    }, {
      "left" : "public abstract int getTextOffset() throws IOException;",
      "right" : "public abstract int getTextOffset() throws IOException;",
      "info" : "MethodDeclaration[7116-7181]:MethodDeclaration[7116-7181]"
    }, {
      "left" : "public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException;",
      "right" : "public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException;",
      "info" : "MethodDeclaration[7388-7481]:MethodDeclaration[7388-7481]"
    }, {
      "left" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "right" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "info" : "MethodDeclaration[7682-8766]:MethodDeclaration[7682-8766]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[8772-9094]:MethodDeclaration[8772-9094]"
    }, {
      "left" : "public int getValueAsInt(int defaultValue) throws IOException",
      "right" : "public int getValueAsInt(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[9100-10111]:MethodDeclaration[9100-10111]"
    }, {
      "left" : "public long getValueAsLong() throws IOException",
      "right" : "public long getValueAsLong() throws IOException",
      "info" : "MethodDeclaration[10117-10445]:MethodDeclaration[10117-10445]"
    }, {
      "left" : "public long getValueAsLong(long defaultValue) throws IOException",
      "right" : "public long getValueAsLong(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[10455-11450]:MethodDeclaration[10455-11450]"
    }, {
      "left" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "right" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "info" : "MethodDeclaration[11456-12384]:MethodDeclaration[11456-12384]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[12390-12594]:MethodDeclaration[12390-12691]"
    }, {
      "left" : "public String getValueAsString(String defaultValue) throws IOException",
      "right" : "public String getValueAsString(String defaultValue) throws IOException",
      "info" : "MethodDeclaration[12604-12960]:MethodDeclaration[12701-13154]"
    }, {
      "left" : "protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException",
      "right" : "protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[13137-13620]:MethodDeclaration[13331-13814]"
    }, {
      "left" : "protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)\n        throws JsonParseException",
      "info" : "MethodDeclaration[13626-14960]:MethodDeclaration[13820-15154]"
    }, {
      "left" : "protected void _reportBase64EOF() throws JsonParseException",
      "right" : "protected void _reportBase64EOF() throws JsonParseException",
      "info" : "MethodDeclaration[14966-15201]:MethodDeclaration[15160-15395]"
    }, {
      "left" : "protected boolean _hasTextualNull(String value)",
      "right" : "protected boolean _hasTextualNull(String value)",
      "info" : "MethodDeclaration[15400-15749]:MethodDeclaration[15594-15943]"
    }, {
      "left" : "protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException",
      "right" : "protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException",
      "info" : "MethodDeclaration[15930-16278]:MethodDeclaration[16124-16472]"
    }, {
      "left" : "protected void _reportInvalidEOF() throws JsonParseException",
      "right" : "protected void _reportInvalidEOF() throws JsonParseException",
      "info" : "MethodDeclaration[16284-16398]:MethodDeclaration[16478-16592]"
    }, {
      "left" : "protected void _reportInvalidEOF(String msg) throws JsonParseException",
      "right" : "protected void _reportInvalidEOF(String msg) throws JsonParseException",
      "info" : "MethodDeclaration[16404-16535]:MethodDeclaration[16598-16729]"
    }, {
      "left" : "protected void _reportInvalidEOFInValue() throws JsonParseException",
      "right" : "protected void _reportInvalidEOFInValue() throws JsonParseException",
      "info" : "MethodDeclaration[16541-16658]:MethodDeclaration[16735-16852]"
    }, {
      "left" : "protected void _reportMissingRootWS(int ch) throws JsonParseException",
      "right" : "protected void _reportMissingRootWS(int ch) throws JsonParseException",
      "info" : "MethodDeclaration[16664-16823]:MethodDeclaration[16858-17017]"
    }, {
      "left" : "protected void _throwInvalidSpace(int i) throws JsonParseException",
      "right" : "protected void _throwInvalidSpace(int i) throws JsonParseException",
      "info" : "MethodDeclaration[16833-17093]:MethodDeclaration[17027-17287]"
    }, {
      "left" : "protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException",
      "right" : "protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException",
      "info" : "MethodDeclaration[17099-17782]:MethodDeclaration[17293-17976]"
    }, {
      "left" : "protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException",
      "right" : "protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException",
      "info" : "MethodDeclaration[17788-18245]:MethodDeclaration[17982-18439]"
    }, {
      "left" : "protected final static String _getCharDesc(int ch)",
      "right" : "protected final static String _getCharDesc(int ch)",
      "info" : "MethodDeclaration[18431-18769]:MethodDeclaration[18625-18963]"
    }, {
      "left" : "protected final void _reportError(String msg) throws JsonParseException",
      "right" : "protected final void _reportError(String msg) throws JsonParseException",
      "info" : "MethodDeclaration[18775-18890]:MethodDeclaration[18969-19084]"
    }, {
      "left" : "protected final void _wrapError(String msg, Throwable t) throws JsonParseException",
      "right" : "protected final void _wrapError(String msg, Throwable t) throws JsonParseException",
      "info" : "MethodDeclaration[18896-19025]:MethodDeclaration[19090-19219]"
    }, {
      "left" : "protected final void _throwInternal()",
      "right" : "protected final void _throwInternal()",
      "info" : "MethodDeclaration[19031-19113]:MethodDeclaration[19225-19307]"
    }, {
      "left" : "protected final JsonParseException _constructError(String msg, Throwable t)",
      "right" : "protected final JsonParseException _constructError(String msg, Throwable t)",
      "info" : "MethodDeclaration[19119-19271]:MethodDeclaration[19313-19465]"
    }, {
      "left" : "protected static byte[] _asciiBytes(String str)",
      "right" : "protected static byte[] _asciiBytes(String str)",
      "info" : "MethodDeclaration[19277-19504]:MethodDeclaration[19471-19698]"
    }, {
      "left" : "protected static String _ascii(byte[] b)",
      "right" : "protected static String _ascii(byte[] b)",
      "info" : "MethodDeclaration[19514-19725]:MethodDeclaration[19708-19919]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2508-2511]:Block[2508-2511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2558-2578]:Block[2558-2578]"
    }, {
      "left" : "super(features);",
      "right" : "super(features);",
      "info" : "SuperConstructorInvocation[2560-2576]:SuperConstructorInvocation[2560-2576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3370-3392]:Block[3370-3392]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[3372-3390]:ReturnStatement[3372-3390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3445-3555]:Block[3445-3555]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[3455-3486]:VariableDeclarationStatement[3455-3486]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[3495-3549]:ReturnStatement[3495-3549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3604-3634]:Block[3604-3634]"
    }, {
      "left" : "return _currToken != null;",
      "right" : "return _currToken != null;",
      "info" : "ReturnStatement[3606-3632]:ReturnStatement[3606-3632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3683-3846]:Block[3683-3846]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[3693-3724]:VariableDeclarationStatement[3693-3724]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[3733-3811]:IfStatement[3733-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3748-3811]:Block[3748-3811]"
    }, {
      "left" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "right" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "info" : "ReturnStatement[3762-3801]:ReturnStatement[3762-3801]"
    }, {
      "left" : "return t.id() == id;",
      "right" : "return t.id() == id;",
      "info" : "ReturnStatement[3820-3840]:ReturnStatement[3820-3840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3905-3946]:Block[3905-3946]"
    }, {
      "left" : "return (_currToken == t);",
      "right" : "return (_currToken == t);",
      "info" : "ReturnStatement[3915-3940]:ReturnStatement[3915-3940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4009-4056]:Block[4009-4056]"
    }, {
      "left" : "return _currToken == JsonToken.START_ARRAY;",
      "right" : "return _currToken == JsonToken.START_ARRAY;",
      "info" : "ReturnStatement[4011-4054]:ReturnStatement[4011-4054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4115-4163]:Block[4115-4163]"
    }, {
      "left" : "return _currToken == JsonToken.START_OBJECT;",
      "right" : "return _currToken == JsonToken.START_OBJECT;",
      "info" : "ReturnStatement[4117-4161]:ReturnStatement[4117-4161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4235-4570]:Block[4235-4570]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[4440-4466]:VariableDeclarationStatement[4440-4466]"
    }, {
      "left" : "if (t == JsonToken.FIELD_NAME)",
      "right" : "if (t == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[4475-4546]:IfStatement[4475-4546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4506-4546]:Block[4506-4546]"
    }, {
      "left" : "t = nextToken();",
      "right" : "t = nextToken();",
      "info" : "ExpressionStatement[4520-4536]:ExpressionStatement[4520-4536]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[4555-4564]:ReturnStatement[4555-4564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4646-5542]:Block[4646-5542]"
    }, {
      "left" : "if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY)",
      "right" : "if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY)",
      "info" : "IfStatement[4656-4785]:IfStatement[4656-4785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4749-4785]:Block[4749-4785]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4763-4775]:ReturnStatement[4763-4775]"
    }, {
      "left" : "int open = 1;",
      "right" : "int open = 1;",
      "info" : "VariableDeclarationStatement[4794-4807]:VariableDeclarationStatement[4794-4807]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[4958-5536]:WhileStatement[4958-5536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4971-5536]:Block[4971-5536]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[4985-5011]:VariableDeclarationStatement[4985-5011]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[5024-5323]:IfStatement[5024-5323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5039-5323]:Block[5039-5323]"
    }, {
      "left" : "_handleEOF();",
      "right" : "_handleEOF();",
      "info" : "ExpressionStatement[5057-5070]:ExpressionStatement[5057-5070]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5297-5309]:ReturnStatement[5297-5309]"
    }, {
      "left" : "if (t.isStructStart())",
      "right" : "if (t.isStructStart())",
      "info" : "IfStatement[5336-5526]:IfStatement[5336-5526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5359-5398]:Block[5359-5398]"
    }, {
      "left" : "++open;",
      "right" : "++open;",
      "info" : "ExpressionStatement[5377-5384]:ExpressionStatement[5377-5384]"
    }, {
      "left" : "if (t.isStructEnd())",
      "right" : "if (t.isStructEnd())",
      "info" : "IfStatement[5404-5526]:IfStatement[5404-5526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5425-5526]:Block[5425-5526]"
    }, {
      "left" : "if (--open == 0)",
      "right" : "if (--open == 0)",
      "info" : "IfStatement[5443-5512]:IfStatement[5443-5512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5460-5512]:Block[5460-5512]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5482-5494]:ReturnStatement[5482-5494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6356-6482]:Block[6356-6482]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[6366-6476]:IfStatement[6366-6476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6390-6476]:Block[6390-6476]"
    }, {
      "left" : "_lastClearedToken = _currToken;",
      "right" : "_lastClearedToken = _currToken;",
      "info" : "ExpressionStatement[6404-6435]:ExpressionStatement[6404-6435]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[6448-6466]:ExpressionStatement[6448-6466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6537-6566]:Block[6537-6566]"
    }, {
      "left" : "return _lastClearedToken;",
      "right" : "return _lastClearedToken;",
      "info" : "ReturnStatement[6539-6564]:ReturnStatement[6539-6564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7774-8766]:Block[7774-8766]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[7784-7809]:VariableDeclarationStatement[7784-7809]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[7818-8731]:IfStatement[7818-8731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7833-8731]:Block[7833-8731]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText().trim();\n                if (\"true\".equals(str)) {\n                    return true;\n                }\n                if (\"false\".equals(str)) {\n                    return false;\n                }\n                if (_hasTextualNull(str)) {\n                    return false;\n                }\n                break;\n            case ID_NUMBER_INT:\n                return getIntValue() != 0;\n            case ID_TRUE:\n                return true;\n            case ID_FALSE:\n            case ID_NULL:\n                return false;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Boolean) {\n                    return (Boolean) value;\n                }\n                break;\n            default:\n            }",
      "right" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText().trim();\n                if (\"true\".equals(str)) {\n                    return true;\n                }\n                if (\"false\".equals(str)) {\n                    return false;\n                }\n                if (_hasTextualNull(str)) {\n                    return false;\n                }\n                break;\n            case ID_NUMBER_INT:\n                return getIntValue() != 0;\n            case ID_TRUE:\n                return true;\n            case ID_FALSE:\n            case ID_NULL:\n                return false;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Boolean) {\n                    return (Boolean) value;\n                }\n                break;\n            default:\n            }",
      "info" : "SwitchStatement[7847-8721]:SwitchStatement[7847-8721]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[7877-7892]:SwitchCase[7877-7892]"
    }, {
      "left" : "String str = getText().trim();",
      "right" : "String str = getText().trim();",
      "info" : "VariableDeclarationStatement[7909-7939]:VariableDeclarationStatement[7909-7939]"
    }, {
      "left" : "if (\"true\".equals(str))",
      "right" : "if (\"true\".equals(str))",
      "info" : "IfStatement[7956-8032]:IfStatement[7956-8032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8032]:Block[7980-8032]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8002-8014]:ReturnStatement[8002-8014]"
    }, {
      "left" : "if (\"false\".equals(str))",
      "right" : "if (\"false\".equals(str))",
      "info" : "IfStatement[8049-8127]:IfStatement[8049-8127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8074-8127]:Block[8074-8127]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8096-8109]:ReturnStatement[8096-8109]"
    }, {
      "left" : "if (_hasTextualNull(str))",
      "right" : "if (_hasTextualNull(str))",
      "info" : "IfStatement[8144-8223]:IfStatement[8144-8223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8170-8223]:Block[8170-8223]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8192-8205]:ReturnStatement[8192-8205]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8240-8246]:BreakStatement[8240-8246]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[8259-8278]:SwitchCase[8259-8278]"
    }, {
      "left" : "return getIntValue() != 0;",
      "right" : "return getIntValue() != 0;",
      "info" : "ReturnStatement[8295-8321]:ReturnStatement[8295-8321]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[8334-8347]:SwitchCase[8334-8347]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8364-8376]:ReturnStatement[8364-8376]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[8389-8403]:SwitchCase[8389-8403]"
    }, {
      "left" : "case ID_NULL:",
      "right" : "case ID_NULL:",
      "info" : "SwitchCase[8416-8429]:SwitchCase[8416-8429]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8446-8459]:ReturnStatement[8446-8459]"
    }, {
      "left" : "case ID_EMBEDDED_OBJECT:",
      "right" : "case ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[8472-8496]:SwitchCase[8472-8496]"
    }, {
      "left" : "Object value = this.getEmbeddedObject();",
      "right" : "Object value = this.getEmbeddedObject();",
      "info" : "VariableDeclarationStatement[8513-8553]:VariableDeclarationStatement[8513-8553]"
    }, {
      "left" : "if (value instanceof Boolean)",
      "right" : "if (value instanceof Boolean)",
      "info" : "IfStatement[8570-8663]:IfStatement[8570-8663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8600-8663]:Block[8600-8663]"
    }, {
      "left" : "return (Boolean) value;",
      "right" : "return (Boolean) value;",
      "info" : "ReturnStatement[8622-8645]:ReturnStatement[8622-8645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8680-8686]:BreakStatement[8680-8686]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8699-8707]:SwitchCase[8699-8707]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8740-8760]:ReturnStatement[8740-8760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8836-9094]:Block[8836-9094]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[8846-8871]:VariableDeclarationStatement[8846-8871]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[8880-8962]:IfStatement[8880-8962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8917-8962]:Block[8917-8962]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[8931-8952]:ReturnStatement[8931-8952]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "info" : "IfStatement[8971-9055]:IfStatement[8971-9055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9010-9055]:Block[9010-9055]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[9024-9045]:ReturnStatement[9024-9045]"
    }, {
      "left" : "return getValueAsInt(0);",
      "right" : "return getValueAsInt(0);",
      "info" : "ReturnStatement[9064-9088]:ReturnStatement[9064-9088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9180-10111]:Block[9180-10111]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[9190-9215]:VariableDeclarationStatement[9190-9215]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[9224-9306]:IfStatement[9224-9306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9261-9306]:Block[9261-9306]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[9275-9296]:ReturnStatement[9275-9296]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "info" : "IfStatement[9315-9399]:IfStatement[9315-9399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9354-9399]:Block[9354-9399]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[9368-9389]:ReturnStatement[9368-9389]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[9408-10076]:IfStatement[9408-10076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9423-10076]:Block[9423-10076]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0;\n                }\n                return NumberInput.parseAsInt(str, defaultValue);\n            case ID_TRUE:\n                return 1;\n            case ID_FALSE:\n                return 0;\n            case ID_NULL:\n                return 0;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).intValue();\n                }\n            }",
      "right" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0;\n                }\n                return NumberInput.parseAsInt(str, defaultValue);\n            case ID_TRUE:\n                return 1;\n            case ID_FALSE:\n                return 0;\n            case ID_NULL:\n                return 0;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).intValue();\n                }\n            }",
      "info" : "SwitchStatement[9437-10066]:SwitchStatement[9437-10066]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[9467-9482]:SwitchCase[9467-9482]"
    }, {
      "left" : "String str = getText();",
      "right" : "String str = getText();",
      "info" : "VariableDeclarationStatement[9499-9522]:VariableDeclarationStatement[9499-9522]"
    }, {
      "left" : "if (_hasTextualNull(str))",
      "right" : "if (_hasTextualNull(str))",
      "info" : "IfStatement[9539-9614]:IfStatement[9539-9614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9565-9614]:Block[9565-9614]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9587-9596]:ReturnStatement[9587-9596]"
    }, {
      "left" : "return NumberInput.parseAsInt(str, defaultValue);",
      "right" : "return NumberInput.parseAsInt(str, defaultValue);",
      "info" : "ReturnStatement[9631-9680]:ReturnStatement[9631-9680]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[9693-9706]:SwitchCase[9693-9706]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[9723-9732]:ReturnStatement[9723-9732]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[9745-9759]:SwitchCase[9745-9759]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9776-9785]:ReturnStatement[9776-9785]"
    }, {
      "left" : "case ID_NULL:",
      "right" : "case ID_NULL:",
      "info" : "SwitchCase[9798-9811]:SwitchCase[9798-9811]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9828-9837]:ReturnStatement[9828-9837]"
    }, {
      "left" : "case ID_EMBEDDED_OBJECT:",
      "right" : "case ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[9850-9874]:SwitchCase[9850-9874]"
    }, {
      "left" : "Object value = this.getEmbeddedObject();",
      "right" : "Object value = this.getEmbeddedObject();",
      "info" : "VariableDeclarationStatement[9891-9931]:VariableDeclarationStatement[9891-9931]"
    }, {
      "left" : "if (value instanceof Number)",
      "right" : "if (value instanceof Number)",
      "info" : "IfStatement[9948-10052]:IfStatement[9948-10052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10052]:Block[9977-10052]"
    }, {
      "left" : "return ((Number) value).intValue();",
      "right" : "return ((Number) value).intValue();",
      "info" : "ReturnStatement[9999-10034]:ReturnStatement[9999-10034]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10085-10105]:ReturnStatement[10085-10105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10183-10445]:Block[10183-10445]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[10193-10218]:VariableDeclarationStatement[10193-10218]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[10227-10310]:IfStatement[10227-10310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10264-10310]:Block[10264-10310]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[10278-10300]:ReturnStatement[10278-10300]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "info" : "IfStatement[10319-10404]:IfStatement[10319-10404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10358-10404]:Block[10358-10404]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[10372-10394]:ReturnStatement[10372-10394]"
    }, {
      "left" : "return getValueAsLong(0L);",
      "right" : "return getValueAsLong(0L);",
      "info" : "ReturnStatement[10413-10439]:ReturnStatement[10413-10439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10538-11450]:Block[10538-11450]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[10548-10573]:VariableDeclarationStatement[10548-10573]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[10582-10665]:IfStatement[10582-10665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10619-10665]:Block[10619-10665]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[10633-10655]:ReturnStatement[10633-10655]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_FLOAT)",
      "info" : "IfStatement[10674-10759]:IfStatement[10674-10759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10713-10759]:Block[10713-10759]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[10727-10749]:ReturnStatement[10727-10749]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[10768-11415]:IfStatement[10768-11415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10783-11415]:Block[10783-11415]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0L;\n                }\n                return NumberInput.parseAsLong(str, defaultValue);\n            case ID_TRUE:\n                return 1L;\n            case ID_FALSE:\n            case ID_NULL:\n                return 0L;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).longValue();\n                }\n            }",
      "right" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0L;\n                }\n                return NumberInput.parseAsLong(str, defaultValue);\n            case ID_TRUE:\n                return 1L;\n            case ID_FALSE:\n            case ID_NULL:\n                return 0L;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).longValue();\n                }\n            }",
      "info" : "SwitchStatement[10797-11405]:SwitchStatement[10797-11405]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[10827-10842]:SwitchCase[10827-10842]"
    }, {
      "left" : "String str = getText();",
      "right" : "String str = getText();",
      "info" : "VariableDeclarationStatement[10859-10882]:VariableDeclarationStatement[10859-10882]"
    }, {
      "left" : "if (_hasTextualNull(str))",
      "right" : "if (_hasTextualNull(str))",
      "info" : "IfStatement[10899-10975]:IfStatement[10899-10975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10925-10975]:Block[10925-10975]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[10947-10957]:ReturnStatement[10947-10957]"
    }, {
      "left" : "return NumberInput.parseAsLong(str, defaultValue);",
      "right" : "return NumberInput.parseAsLong(str, defaultValue);",
      "info" : "ReturnStatement[10992-11042]:ReturnStatement[10992-11042]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[11055-11068]:SwitchCase[11055-11068]"
    }, {
      "left" : "return 1L;",
      "right" : "return 1L;",
      "info" : "ReturnStatement[11085-11095]:ReturnStatement[11085-11095]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[11108-11122]:SwitchCase[11108-11122]"
    }, {
      "left" : "case ID_NULL:",
      "right" : "case ID_NULL:",
      "info" : "SwitchCase[11135-11148]:SwitchCase[11135-11148]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[11165-11175]:ReturnStatement[11165-11175]"
    }, {
      "left" : "case ID_EMBEDDED_OBJECT:",
      "right" : "case ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[11188-11212]:SwitchCase[11188-11212]"
    }, {
      "left" : "Object value = this.getEmbeddedObject();",
      "right" : "Object value = this.getEmbeddedObject();",
      "info" : "VariableDeclarationStatement[11229-11269]:VariableDeclarationStatement[11229-11269]"
    }, {
      "left" : "if (value instanceof Number)",
      "right" : "if (value instanceof Number)",
      "info" : "IfStatement[11286-11391]:IfStatement[11286-11391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11315-11391]:Block[11315-11391]"
    }, {
      "left" : "return ((Number) value).longValue();",
      "right" : "return ((Number) value).longValue();",
      "info" : "ReturnStatement[11337-11373]:ReturnStatement[11337-11373]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11424-11444]:ReturnStatement[11424-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11545-12384]:Block[11545-12384]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[11555-11580]:VariableDeclarationStatement[11555-11580]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[11589-12349]:IfStatement[11589-12349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11604-12349]:Block[11604-12349]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0L;\n                }\n                return NumberInput.parseAsDouble(str, defaultValue);\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return getDoubleValue();\n            case ID_TRUE:\n                return 1.0;\n            case ID_FALSE:\n            case ID_NULL:\n                return 0.0;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).doubleValue();\n                }\n            }",
      "right" : "switch (t.id()) {\n            case ID_STRING:\n                String str = getText();\n                if (_hasTextualNull(str)) {\n                    return 0L;\n                }\n                return NumberInput.parseAsDouble(str, defaultValue);\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return getDoubleValue();\n            case ID_TRUE:\n                return 1.0;\n            case ID_FALSE:\n            case ID_NULL:\n                return 0.0;\n            case ID_EMBEDDED_OBJECT:\n                Object value = this.getEmbeddedObject();\n                if (value instanceof Number) {\n                    return ((Number) value).doubleValue();\n                }\n            }",
      "info" : "SwitchStatement[11618-12339]:SwitchStatement[11618-12339]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11648-11663]:SwitchCase[11648-11663]"
    }, {
      "left" : "String str = getText();",
      "right" : "String str = getText();",
      "info" : "VariableDeclarationStatement[11680-11703]:VariableDeclarationStatement[11680-11703]"
    }, {
      "left" : "if (_hasTextualNull(str))",
      "right" : "if (_hasTextualNull(str))",
      "info" : "IfStatement[11720-11796]:IfStatement[11720-11796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11746-11796]:Block[11746-11796]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[11768-11778]:ReturnStatement[11768-11778]"
    }, {
      "left" : "return NumberInput.parseAsDouble(str, defaultValue);",
      "right" : "return NumberInput.parseAsDouble(str, defaultValue);",
      "info" : "ReturnStatement[11813-11865]:ReturnStatement[11813-11865]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11878-11897]:SwitchCase[11878-11897]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11910-11931]:SwitchCase[11910-11931]"
    }, {
      "left" : "return getDoubleValue();",
      "right" : "return getDoubleValue();",
      "info" : "ReturnStatement[11948-11972]:ReturnStatement[11948-11972]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[11985-11998]:SwitchCase[11985-11998]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[12015-12026]:ReturnStatement[12015-12026]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[12039-12053]:SwitchCase[12039-12053]"
    }, {
      "left" : "case ID_NULL:",
      "right" : "case ID_NULL:",
      "info" : "SwitchCase[12066-12079]:SwitchCase[12066-12079]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[12096-12107]:ReturnStatement[12096-12107]"
    }, {
      "left" : "case ID_EMBEDDED_OBJECT:",
      "right" : "case ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[12120-12144]:SwitchCase[12120-12144]"
    }, {
      "left" : "Object value = this.getEmbeddedObject();",
      "right" : "Object value = this.getEmbeddedObject();",
      "info" : "VariableDeclarationStatement[12161-12201]:VariableDeclarationStatement[12161-12201]"
    }, {
      "left" : "if (value instanceof Number)",
      "right" : "if (value instanceof Number)",
      "info" : "IfStatement[12218-12325]:IfStatement[12218-12325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12247-12325]:Block[12247-12325]"
    }, {
      "left" : "return ((Number) value).doubleValue();",
      "right" : "return ((Number) value).doubleValue();",
      "info" : "ReturnStatement[12269-12307]:ReturnStatement[12269-12307]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[12358-12378]:ReturnStatement[12358-12378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12456-12594]:Block[12456-12691]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[12466-12549]:IfStatement[12558-12646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12508-12549]:Block[12508-12549]"
    }, {
      "left" : "return getText();",
      "right" : "return getText();",
      "info" : "ReturnStatement[12522-12539]:ReturnStatement[12522-12539]"
    }, {
      "left" : "return getValueAsString(null);",
      "right" : "return getValueAsString(null);",
      "info" : "ReturnStatement[12558-12588]:ReturnStatement[12655-12685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12689-12960]:Block[12786-13154]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[12699-12782]:IfStatement[12888-12976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12741-12782]:Block[12838-12879]"
    }, {
      "left" : "return getText();",
      "right" : "return getText();",
      "info" : "ReturnStatement[12755-12772]:ReturnStatement[12852-12869]"
    }, {
      "left" : "if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue())",
      "right" : "if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue())",
      "info" : "IfStatement[12791-12928]:IfStatement[12985-13122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12884-12928]:Block[13078-13122]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[12898-12918]:ReturnStatement[13092-13112]"
    }, {
      "left" : "return getText();",
      "right" : "return getText();",
      "info" : "ReturnStatement[12937-12954]:ReturnStatement[13131-13148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13400-13620]:Block[13594-13814]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13465-13614]:TryStatement[13659-13808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13469-13525]:Block[13663-13719]"
    }, {
      "left" : "b64variant.decode(str, builder);",
      "right" : "b64variant.decode(str, builder);",
      "info" : "ExpressionStatement[13483-13515]:ExpressionStatement[13677-13709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13561-13614]:Block[13755-13808]"
    }, {
      "left" : "_reportError(e.getMessage());",
      "right" : "_reportError(e.getMessage());",
      "info" : "ExpressionStatement[13575-13604]:ExpressionStatement[13769-13798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13976-14960]:Block[14170-15154]"
    }, {
      "left" : "String base;",
      "right" : "String base;",
      "info" : "VariableDeclarationStatement[13986-13998]:VariableDeclarationStatement[14180-14192]"
    }, {
      "left" : "if (ch <= INT_SPACE)",
      "right" : "if (ch <= INT_SPACE)",
      "info" : "IfStatement[14007-14842]:IfStatement[14201-15036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14028-14208]:Block[14222-14402]"
    }, {
      "left" : "base = \"Illegal white space character (code 0x\"+Integer.toHexString(ch)+\") as character #\"+(bindex+1)+\" of 4-char base64 unit: can only used between units\";",
      "right" : "base = \"Illegal white space character (code 0x\"+Integer.toHexString(ch)+\") as character #\"+(bindex+1)+\" of 4-char base64 unit: can only used between units\";",
      "info" : "ExpressionStatement[14042-14198]:ExpressionStatement[14236-14392]"
    }, {
      "left" : "if (b64variant.usesPaddingChar(ch))",
      "right" : "if (b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[14214-14842]:IfStatement[14408-15036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14250-14443]:Block[14444-14637]"
    }, {
      "left" : "base = \"Unexpected padding character ('\"+b64variant.getPaddingChar()+\"') as character #\"+(bindex+1)+\" of 4-char base64 unit: padding only legal as 3rd or 4th character\";",
      "right" : "base = \"Unexpected padding character ('\"+b64variant.getPaddingChar()+\"') as character #\"+(bindex+1)+\" of 4-char base64 unit: padding only legal as 3rd or 4th character\";",
      "info" : "ExpressionStatement[14264-14433]:ExpressionStatement[14458-14627]"
    }, {
      "left" : "if (!Character.isDefined(ch) || Character.isISOControl(ch))",
      "right" : "if (!Character.isDefined(ch) || Character.isISOControl(ch))",
      "info" : "IfStatement[14449-14842]:IfStatement[14643-15036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14509-14721]:Block[14703-14915]"
    }, {
      "left" : "base = \"Illegal character (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";",
      "right" : "base = \"Illegal character (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";",
      "info" : "ExpressionStatement[14629-14711]:ExpressionStatement[14823-14905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14727-14842]:Block[14921-15036]"
    }, {
      "left" : "base = \"Illegal character '\"+ch+\"' (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";",
      "right" : "base = \"Illegal character '\"+ch+\"' (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";",
      "info" : "ExpressionStatement[14741-14832]:ExpressionStatement[14935-15026]"
    }, {
      "left" : "if (msg != null)",
      "right" : "if (msg != null)",
      "info" : "IfStatement[14851-14917]:IfStatement[15045-15111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14868-14917]:Block[15062-15111]"
    }, {
      "left" : "base = base + \": \" + msg;",
      "right" : "base = base + \": \" + msg;",
      "info" : "ExpressionStatement[14882-14907]:ExpressionStatement[15076-15101]"
    }, {
      "left" : "throw _constructError(base);",
      "right" : "throw _constructError(base);",
      "info" : "ThrowStatement[14926-14954]:ThrowStatement[15120-15148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15117-15201]:Block[15311-15395]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-String in base64 content\");",
      "right" : "throw _constructError(\"Unexpected end-of-String in base64 content\");",
      "info" : "ThrowStatement[15127-15195]:ThrowStatement[15321-15389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15717-15749]:Block[15911-15943]"
    }, {
      "left" : "return \"null\".equals(value);",
      "right" : "return \"null\".equals(value);",
      "info" : "ReturnStatement[15719-15747]:ReturnStatement[15913-15941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16021-16278]:Block[16215-16472]"
    }, {
      "left" : "if (ch < 0)",
      "right" : "if (ch < 0)",
      "info" : "IfStatement[16031-16103]:IfStatement[16225-16297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16043-16103]:Block[16237-16297]"
    }, {
      "left" : "_reportInvalidEOF();",
      "right" : "_reportInvalidEOF();",
      "info" : "ExpressionStatement[16073-16093]:ExpressionStatement[16267-16287]"
    }, {
      "left" : "String msg = \"Unexpected character (\"+_getCharDesc(ch)+\")\";",
      "right" : "String msg = \"Unexpected character (\"+_getCharDesc(ch)+\")\";",
      "info" : "VariableDeclarationStatement[16112-16171]:VariableDeclarationStatement[16306-16365]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[16180-16245]:IfStatement[16374-16439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16201-16245]:Block[16395-16439]"
    }, {
      "left" : "msg += \": \"+comment;",
      "right" : "msg += \": \"+comment;",
      "info" : "ExpressionStatement[16215-16235]:ExpressionStatement[16409-16429]"
    }, {
      "left" : "_reportError(msg);",
      "right" : "_reportError(msg);",
      "info" : "ExpressionStatement[16254-16272]:ExpressionStatement[16448-16466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16345-16398]:Block[16539-16592]"
    }, {
      "left" : "_reportInvalidEOF(\" in \"+_currToken);",
      "right" : "_reportInvalidEOF(\" in \"+_currToken);",
      "info" : "ExpressionStatement[16355-16392]:ExpressionStatement[16549-16586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16475-16535]:Block[16669-16729]"
    }, {
      "left" : "_reportError(\"Unexpected end-of-input\"+msg);",
      "right" : "_reportError(\"Unexpected end-of-input\"+msg);",
      "info" : "ExpressionStatement[16485-16529]:ExpressionStatement[16679-16723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16609-16658]:Block[16803-16852]"
    }, {
      "left" : "_reportInvalidEOF(\" in a value\");",
      "right" : "_reportInvalidEOF(\" in a value\");",
      "info" : "ExpressionStatement[16619-16652]:ExpressionStatement[16813-16846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16734-16823]:Block[16928-17017]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"Expected space separating root-level values\");",
      "right" : "_reportUnexpectedChar(ch, \"Expected space separating root-level values\");",
      "info" : "ExpressionStatement[16744-16817]:ExpressionStatement[16938-17011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16900-17093]:Block[17094-17287]"
    }, {
      "left" : "char c = (char) i;",
      "right" : "char c = (char) i;",
      "info" : "VariableDeclarationStatement[16910-16928]:VariableDeclarationStatement[17104-17122]"
    }, {
      "left" : "String msg = \"Illegal character (\"+_getCharDesc(c)+\"): only regular white space (\\\\r, \\\\n, \\\\t) is allowed between tokens\";",
      "right" : "String msg = \"Illegal character (\"+_getCharDesc(c)+\"): only regular white space (\\\\r, \\\\n, \\\\t) is allowed between tokens\";",
      "info" : "VariableDeclarationStatement[16937-17060]:VariableDeclarationStatement[17131-17254]"
    }, {
      "left" : "_reportError(msg);",
      "right" : "_reportError(msg);",
      "info" : "ExpressionStatement[17069-17087]:ExpressionStatement[17263-17281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17416-17782]:Block[17610-17976]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > INT_SPACE)",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > INT_SPACE)",
      "info" : "IfStatement[17492-17776]:IfStatement[17686-17970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17563-17776]:Block[17757-17970]"
    }, {
      "left" : "char c = (char) i;",
      "right" : "char c = (char) i;",
      "info" : "VariableDeclarationStatement[17577-17595]:VariableDeclarationStatement[17771-17789]"
    }, {
      "left" : "String msg = \"Illegal unquoted character (\"+_getCharDesc(c)+\"): has to be escaped using backslash to be included in \"+ctxtDesc;",
      "right" : "String msg = \"Illegal unquoted character (\"+_getCharDesc(c)+\"): has to be escaped using backslash to be included in \"+ctxtDesc;",
      "info" : "VariableDeclarationStatement[17608-17735]:VariableDeclarationStatement[17802-17929]"
    }, {
      "left" : "_reportError(msg);",
      "right" : "_reportError(msg);",
      "info" : "ExpressionStatement[17748-17766]:ExpressionStatement[17942-17960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17878-18245]:Block[18072-18439]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER))",
      "right" : "if (isEnabled(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER))",
      "info" : "IfStatement[17920-18017]:IfStatement[18114-18211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17983-18017]:Block[18177-18211]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[17997-18007]:ReturnStatement[18191-18201]"
    }, {
      "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[18055-18147]:IfStatement[18249-18341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18113-18147]:Block[18307-18341]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[18127-18137]:ReturnStatement[18321-18331]"
    }, {
      "left" : "_reportError(\"Unrecognized character escape \"+_getCharDesc(ch));",
      "right" : "_reportError(\"Unrecognized character escape \"+_getCharDesc(ch));",
      "info" : "ExpressionStatement[18156-18220]:ExpressionStatement[18350-18414]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[18229-18239]:ReturnStatement[18423-18433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18486-18769]:Block[18680-18963]"
    }, {
      "left" : "char c = (char) ch;",
      "right" : "char c = (char) ch;",
      "info" : "VariableDeclarationStatement[18496-18515]:VariableDeclarationStatement[18690-18709]"
    }, {
      "left" : "if (Character.isISOControl(c))",
      "right" : "if (Character.isISOControl(c))",
      "info" : "IfStatement[18524-18613]:IfStatement[18718-18807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18555-18613]:Block[18749-18807]"
    }, {
      "left" : "return \"(CTRL-CHAR, code \"+ch+\")\";",
      "right" : "return \"(CTRL-CHAR, code \"+ch+\")\";",
      "info" : "ReturnStatement[18569-18603]:ReturnStatement[18763-18797]"
    }, {
      "left" : "if (ch > 255)",
      "right" : "if (ch > 255)",
      "info" : "IfStatement[18622-18723]:IfStatement[18816-18917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18636-18723]:Block[18830-18917]"
    }, {
      "left" : "return \"'\"+c+\"' (code \"+ch+\" / 0x\"+Integer.toHexString(ch)+\")\";",
      "right" : "return \"'\"+c+\"' (code \"+ch+\" / 0x\"+Integer.toHexString(ch)+\")\";",
      "info" : "ReturnStatement[18650-18713]:ReturnStatement[18844-18907]"
    }, {
      "left" : "return \"'\"+c+\"' (code \"+ch+\")\";",
      "right" : "return \"'\"+c+\"' (code \"+ch+\")\";",
      "info" : "ReturnStatement[18732-18763]:ReturnStatement[18926-18957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18847-18890]:Block[19041-19084]"
    }, {
      "left" : "throw _constructError(msg);",
      "right" : "throw _constructError(msg);",
      "info" : "ThrowStatement[18857-18884]:ThrowStatement[19051-19078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18979-19025]:Block[19173-19219]"
    }, {
      "left" : "throw _constructError(msg, t);",
      "right" : "throw _constructError(msg, t);",
      "info" : "ThrowStatement[18989-19019]:ThrowStatement[19183-19213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19069-19113]:Block[19263-19307]"
    }, {
      "left" : "VersionUtil.throwInternal();",
      "right" : "VersionUtil.throwInternal();",
      "info" : "ExpressionStatement[19079-19107]:ExpressionStatement[19273-19301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19195-19271]:Block[19389-19465]"
    }, {
      "left" : "return new JsonParseException(msg, getCurrentLocation(), t);",
      "right" : "return new JsonParseException(msg, getCurrentLocation(), t);",
      "info" : "ReturnStatement[19205-19265]:ReturnStatement[19399-19459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19325-19504]:Block[19519-19698]"
    }, {
      "left" : "byte[] b = new byte[str.length()];",
      "right" : "byte[] b = new byte[str.length()];",
      "info" : "VariableDeclarationStatement[19335-19369]:VariableDeclarationStatement[19529-19563]"
    }, {
      "left" : "for (int i = 0, len = str.length(); i < len; ++i)",
      "right" : "for (int i = 0, len = str.length(); i < len; ++i)",
      "info" : "ForStatement[19378-19480]:ForStatement[19572-19674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19428-19480]:Block[19622-19674]"
    }, {
      "left" : "b[i] = (byte) str.charAt(i);",
      "right" : "b[i] = (byte) str.charAt(i);",
      "info" : "ExpressionStatement[19442-19470]:ExpressionStatement[19636-19664]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[19489-19498]:ReturnStatement[19683-19692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19555-19725]:Block[19749-19919]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19565-19719]:TryStatement[19759-19913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19569-19626]:Block[19763-19820]"
    }, {
      "left" : "return new String(b, \"US-ASCII\");",
      "right" : "return new String(b, \"US-ASCII\");",
      "info" : "ReturnStatement[19583-19616]:ReturnStatement[19777-19810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19649-19719]:Block[19843-19913]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[19679-19709]:ThrowStatement[19873-19903]"
    } ]
  },
  "interFileMappings" : { }
}