{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "TypeDeclaration[1178-18703]:TypeDeclaration[1178-18928]"
    }, {
      "left" : "private static final String[] REPLACEMENT_CHARS;",
      "right" : "private static final String[] REPLACEMENT_CHARS;",
      "info" : "FieldDeclaration[5359-5407]:FieldDeclaration[5359-5407]"
    }, {
      "left" : "private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
      "right" : "private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
      "info" : "FieldDeclaration[5410-5468]:FieldDeclaration[5410-5468]"
    }, {
      "left" : "private final Writer out;",
      "right" : "private final Writer out;",
      "info" : "FieldDeclaration[6208-6309]:FieldDeclaration[6208-6309]"
    }, {
      "left" : "private int[] stack = new int[32];",
      "right" : "private int[] stack = new int[32];",
      "info" : "FieldDeclaration[6313-6347]:FieldDeclaration[6313-6347]"
    }, {
      "left" : "private int stackSize = 0;",
      "right" : "private int stackSize = 0;",
      "info" : "FieldDeclaration[6350-6376]:FieldDeclaration[6350-6376]"
    }, {
      "left" : "private String indent;",
      "right" : "private String indent;",
      "info" : "FieldDeclaration[6414-6566]:FieldDeclaration[6414-6566]"
    }, {
      "left" : "private String separator = \":\";",
      "right" : "private String separator = \":\";",
      "info" : "FieldDeclaration[6570-6664]:FieldDeclaration[6570-6664]"
    }, {
      "left" : "private boolean lenient;",
      "right" : "private boolean lenient;",
      "info" : "FieldDeclaration[6668-6692]:FieldDeclaration[6668-6692]"
    }, {
      "left" : "private boolean htmlSafe;",
      "right" : "private boolean htmlSafe;",
      "info" : "FieldDeclaration[6696-6721]:FieldDeclaration[6696-6721]"
    }, {
      "left" : "private String deferredName;",
      "right" : "private String deferredName;",
      "info" : "FieldDeclaration[6725-6753]:FieldDeclaration[6725-6753]"
    }, {
      "left" : "private boolean serializeNulls = true;",
      "right" : "private boolean serializeNulls = true;",
      "info" : "FieldDeclaration[6757-6795]:FieldDeclaration[6757-6795]"
    }, {
      "left" : "public JsonWriter(Writer out)",
      "right" : "public JsonWriter(Writer out)",
      "info" : "MethodDeclaration[6799-7165]:MethodDeclaration[6799-7165]"
    }, {
      "left" : "public final void setIndent(String indent)",
      "right" : "public final void setIndent(String indent)",
      "info" : "MethodDeclaration[7169-7696]:MethodDeclaration[7169-7696]"
    }, {
      "left" : "public final void setLenient(boolean lenient)",
      "right" : "public final void setLenient(boolean lenient)",
      "info" : "MethodDeclaration[7700-8294]:MethodDeclaration[7700-8294]"
    }, {
      "left" : "public boolean isLenient()",
      "right" : "public boolean isLenient()",
      "info" : "MethodDeclaration[8298-8421]:MethodDeclaration[8298-8421]"
    }, {
      "left" : "public final void setHtmlSafe(boolean htmlSafe)",
      "right" : "public final void setHtmlSafe(boolean htmlSafe)",
      "info" : "MethodDeclaration[8425-8871]:MethodDeclaration[8425-8871]"
    }, {
      "left" : "public final boolean isHtmlSafe()",
      "right" : "public final boolean isHtmlSafe()",
      "info" : "MethodDeclaration[8875-9050]:MethodDeclaration[8875-9050]"
    }, {
      "left" : "public final void setSerializeNulls(boolean serializeNulls)",
      "right" : "public final void setSerializeNulls(boolean serializeNulls)",
      "info" : "MethodDeclaration[9054-9311]:MethodDeclaration[9054-9311]"
    }, {
      "left" : "public final boolean getSerializeNulls()",
      "right" : "public final boolean getSerializeNulls()",
      "info" : "MethodDeclaration[9315-9541]:MethodDeclaration[9315-9541]"
    }, {
      "left" : "public JsonWriter beginArray() throws IOException",
      "right" : "public JsonWriter beginArray() throws IOException",
      "info" : "MethodDeclaration[9545-9816]:MethodDeclaration[9545-9816]"
    }, {
      "left" : "public JsonWriter endArray() throws IOException",
      "right" : "public JsonWriter endArray() throws IOException",
      "info" : "MethodDeclaration[9820-10006]:MethodDeclaration[9820-10006]"
    }, {
      "left" : "public JsonWriter beginObject() throws IOException",
      "right" : "public JsonWriter beginObject() throws IOException",
      "info" : "MethodDeclaration[10010-10285]:MethodDeclaration[10010-10285]"
    }, {
      "left" : "public JsonWriter endObject() throws IOException",
      "right" : "public JsonWriter endObject() throws IOException",
      "info" : "MethodDeclaration[10289-10479]:MethodDeclaration[10289-10479]"
    }, {
      "left" : "private JsonWriter open(int empty, String openBracket) throws IOException",
      "right" : "private JsonWriter open(int empty, String openBracket) throws IOException",
      "info" : "MethodDeclaration[10483-10745]:MethodDeclaration[10483-10745]"
    }, {
      "left" : "private JsonWriter close(int empty, int nonempty, String closeBracket)\n      throws IOException",
      "right" : "private JsonWriter close(int empty, int nonempty, String closeBracket)\n      throws IOException",
      "info" : "MethodDeclaration[10749-11329]:MethodDeclaration[10749-11329]"
    }, {
      "left" : "private void push(int newTop)",
      "right" : "private void push(int newTop)",
      "info" : "MethodDeclaration[11333-11573]:MethodDeclaration[11333-11573]"
    }, {
      "left" : "private int peek()",
      "right" : "private int peek()",
      "info" : "MethodDeclaration[11577-11790]:MethodDeclaration[11577-11790]"
    }, {
      "left" : "private void replaceTop(int topOfStack)",
      "right" : "private void replaceTop(int topOfStack)",
      "info" : "MethodDeclaration[11794-11959]:MethodDeclaration[11794-11959]"
    }, {
      "left" : "public JsonWriter name(String name) throws IOException",
      "right" : "public JsonWriter name(String name) throws IOException",
      "info" : "MethodDeclaration[11963-12468]:MethodDeclaration[11963-12468]"
    }, {
      "left" : "private void writeDeferredName() throws IOException",
      "right" : "private void writeDeferredName() throws IOException",
      "info" : "MethodDeclaration[12472-12642]:MethodDeclaration[12472-12642]"
    }, {
      "left" : "public JsonWriter value(String value) throws IOException",
      "right" : "public JsonWriter value(String value) throws IOException",
      "info" : "MethodDeclaration[12646-12994]:MethodDeclaration[12646-12994]"
    }, {
      "left" : "public JsonWriter jsonValue(String value) throws IOException",
      "right" : "public JsonWriter jsonValue(String value) throws IOException",
      "info" : "MethodDeclaration[12998-13409]:MethodDeclaration[12998-13409]"
    }, {
      "left" : "public JsonWriter nullValue() throws IOException",
      "right" : "public JsonWriter nullValue() throws IOException",
      "info" : "MethodDeclaration[13413-13795]:MethodDeclaration[13413-13795]"
    }, {
      "left" : "public JsonWriter value(boolean value) throws IOException",
      "right" : "public JsonWriter value(boolean value) throws IOException",
      "info" : "MethodDeclaration[13799-14035]:MethodDeclaration[13799-14035]"
    }, {
      "left" : "public JsonWriter value(double value) throws IOException",
      "right" : "public JsonWriter value(double value) throws IOException",
      "info" : "MethodDeclaration[14111-14628]:MethodDeclaration[14336-14853]"
    }, {
      "left" : "public JsonWriter value(long value) throws IOException",
      "right" : "public JsonWriter value(long value) throws IOException",
      "info" : "MethodDeclaration[14632-14861]:MethodDeclaration[14857-15086]"
    }, {
      "left" : "public JsonWriter value(Number value) throws IOException",
      "right" : "public JsonWriter value(Number value) throws IOException",
      "info" : "MethodDeclaration[14865-15516]:MethodDeclaration[15090-15741]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[15520-15794]:MethodDeclaration[15745-16019]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[15798-16185]:MethodDeclaration[16023-16410]"
    }, {
      "left" : "private void string(String value) throws IOException",
      "right" : "private void string(String value) throws IOException",
      "info" : "MethodDeclaration[16189-17029]:MethodDeclaration[16414-17254]"
    }, {
      "left" : "private void newline() throws IOException",
      "right" : "private void newline() throws IOException",
      "info" : "MethodDeclaration[17033-17234]:MethodDeclaration[17258-17459]"
    }, {
      "left" : "private void beforeName() throws IOException",
      "right" : "private void beforeName() throws IOException",
      "info" : "MethodDeclaration[17238-17703]:MethodDeclaration[17463-17928]"
    }, {
      "left" : "private void beforeValue() throws IOException",
      "right" : "private void beforeValue() throws IOException",
      "info" : "MethodDeclaration[17707-18701]:MethodDeclaration[17932-18926]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5478-6204]:Block[5478-6204]"
    }, {
      "left" : "REPLACEMENT_CHARS = new String[128];",
      "right" : "REPLACEMENT_CHARS = new String[128];",
      "info" : "ExpressionStatement[5484-5520]:ExpressionStatement[5484-5520]"
    }, {
      "left" : "for (int i = 0; i <= 0x1f; i++)",
      "right" : "for (int i = 0; i <= 0x1f; i++)",
      "info" : "ForStatement[5525-5628]:ForStatement[5525-5628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5557-5628]:Block[5557-5628]"
    }, {
      "left" : "REPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);",
      "right" : "REPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);",
      "info" : "ExpressionStatement[5565-5622]:ExpressionStatement[5565-5622]"
    }, {
      "left" : "REPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";",
      "right" : "REPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[5633-5665]:ExpressionStatement[5633-5665]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";",
      "right" : "REPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";",
      "info" : "ExpressionStatement[5670-5703]:ExpressionStatement[5670-5703]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\t'] = \"\\\\t\";",
      "right" : "REPLACEMENT_CHARS['\\t'] = \"\\\\t\";",
      "info" : "ExpressionStatement[5708-5740]:ExpressionStatement[5708-5740]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\b'] = \"\\\\b\";",
      "right" : "REPLACEMENT_CHARS['\\b'] = \"\\\\b\";",
      "info" : "ExpressionStatement[5745-5777]:ExpressionStatement[5745-5777]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\n'] = \"\\\\n\";",
      "right" : "REPLACEMENT_CHARS['\\n'] = \"\\\\n\";",
      "info" : "ExpressionStatement[5782-5814]:ExpressionStatement[5782-5814]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\r'] = \"\\\\r\";",
      "right" : "REPLACEMENT_CHARS['\\r'] = \"\\\\r\";",
      "info" : "ExpressionStatement[5819-5851]:ExpressionStatement[5819-5851]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\f'] = \"\\\\f\";",
      "right" : "REPLACEMENT_CHARS['\\f'] = \"\\\\f\";",
      "info" : "ExpressionStatement[5856-5888]:ExpressionStatement[5856-5888]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();",
      "info" : "ExpressionStatement[5893-5949]:ExpressionStatement[5893-5949]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";",
      "info" : "ExpressionStatement[5954-5999]:ExpressionStatement[5954-5999]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";",
      "info" : "ExpressionStatement[6004-6049]:ExpressionStatement[6004-6049]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";",
      "info" : "ExpressionStatement[6054-6099]:ExpressionStatement[6054-6099]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";",
      "info" : "ExpressionStatement[6104-6149]:ExpressionStatement[6104-6149]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";",
      "info" : "ExpressionStatement[6154-6200]:ExpressionStatement[6154-6200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6379-6410]:Block[6379-6410]"
    }, {
      "left" : "push(EMPTY_DOCUMENT);",
      "right" : "push(EMPTY_DOCUMENT);",
      "info" : "ExpressionStatement[6385-6406]:ExpressionStatement[6385-6406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7058-7165]:Block[7058-7165]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[7064-7141]:IfStatement[7064-7141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7081-7141]:Block[7081-7141]"
    }, {
      "left" : "throw new NullPointerException(\"out == null\");",
      "right" : "throw new NullPointerException(\"out == null\");",
      "info" : "ThrowStatement[7089-7135]:ThrowStatement[7089-7135]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[7146-7161]:ExpressionStatement[7146-7161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7696]:Block[7529-7696]"
    }, {
      "left" : "if (indent.length() == 0)",
      "right" : "if (indent.length() == 0)",
      "info" : "IfStatement[7535-7692]:IfStatement[7535-7692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7622]:Block[7561-7622]"
    }, {
      "left" : "this.indent = null;",
      "right" : "this.indent = null;",
      "info" : "ExpressionStatement[7569-7588]:ExpressionStatement[7569-7588]"
    }, {
      "left" : "this.separator = \":\";",
      "right" : "this.separator = \":\";",
      "info" : "ExpressionStatement[7595-7616]:ExpressionStatement[7595-7616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7628-7692]:Block[7628-7692]"
    }, {
      "left" : "this.indent = indent;",
      "right" : "this.indent = indent;",
      "info" : "ExpressionStatement[7636-7657]:ExpressionStatement[7636-7657]"
    }, {
      "left" : "this.separator = \": \";",
      "right" : "this.separator = \": \";",
      "info" : "ExpressionStatement[7664-7686]:ExpressionStatement[7664-7686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8294]:Block[8261-8294]"
    }, {
      "left" : "this.lenient = lenient;",
      "right" : "this.lenient = lenient;",
      "info" : "ExpressionStatement[8267-8290]:ExpressionStatement[8267-8290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8421]:Block[8396-8421]"
    }, {
      "left" : "return lenient;",
      "right" : "return lenient;",
      "info" : "ReturnStatement[8402-8417]:ReturnStatement[8402-8417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8836-8871]:Block[8836-8871]"
    }, {
      "left" : "this.htmlSafe = htmlSafe;",
      "right" : "this.htmlSafe = htmlSafe;",
      "info" : "ExpressionStatement[8842-8867]:ExpressionStatement[8842-8867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9024-9050]:Block[9024-9050]"
    }, {
      "left" : "return htmlSafe;",
      "right" : "return htmlSafe;",
      "info" : "ReturnStatement[9030-9046]:ReturnStatement[9030-9046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9264-9311]:Block[9264-9311]"
    }, {
      "left" : "this.serializeNulls = serializeNulls;",
      "right" : "this.serializeNulls = serializeNulls;",
      "info" : "ExpressionStatement[9270-9307]:ExpressionStatement[9270-9307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9509-9541]:Block[9509-9541]"
    }, {
      "left" : "return serializeNulls;",
      "right" : "return serializeNulls;",
      "info" : "ReturnStatement[9515-9537]:ReturnStatement[9515-9537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9751-9816]:Block[9751-9816]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[9757-9777]:ExpressionStatement[9757-9777]"
    }, {
      "left" : "return open(EMPTY_ARRAY, \"[\");",
      "right" : "return open(EMPTY_ARRAY, \"[\");",
      "info" : "ReturnStatement[9782-9812]:ReturnStatement[9782-9812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9949-10006]:Block[9949-10006]"
    }, {
      "left" : "return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");",
      "right" : "return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");",
      "info" : "ReturnStatement[9955-10002]:ReturnStatement[9955-10002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10219-10285]:Block[10219-10285]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[10225-10245]:ExpressionStatement[10225-10245]"
    }, {
      "left" : "return open(EMPTY_OBJECT, \"{\");",
      "right" : "return open(EMPTY_OBJECT, \"{\");",
      "info" : "ReturnStatement[10250-10281]:ReturnStatement[10250-10281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10420-10479]:Block[10420-10479]"
    }, {
      "left" : "return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");",
      "right" : "return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");",
      "info" : "ReturnStatement[10426-10475]:ReturnStatement[10426-10475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10659-10745]:Block[10659-10745]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[10665-10679]:ExpressionStatement[10665-10679]"
    }, {
      "left" : "push(empty);",
      "right" : "push(empty);",
      "info" : "ExpressionStatement[10684-10696]:ExpressionStatement[10684-10696]"
    }, {
      "left" : "out.write(openBracket);",
      "right" : "out.write(openBracket);",
      "info" : "ExpressionStatement[10701-10724]:ExpressionStatement[10701-10724]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10729-10741]:ReturnStatement[10729-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10953-11329]:Block[10953-11329]"
    }, {
      "left" : "int context = peek();",
      "right" : "int context = peek();",
      "info" : "VariableDeclarationStatement[10959-10980]:VariableDeclarationStatement[10959-10980]"
    }, {
      "left" : "if (context != nonempty && context != empty)",
      "right" : "if (context != nonempty && context != empty)",
      "info" : "IfStatement[10985-11096]:IfStatement[10985-11096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11030-11096]:Block[11030-11096]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[11038-11090]:ThrowStatement[11038-11090]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[11101-11207]:IfStatement[11101-11207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11127-11207]:Block[11127-11207]"
    }, {
      "left" : "throw new IllegalStateException(\"Dangling name: \" + deferredName);",
      "right" : "throw new IllegalStateException(\"Dangling name: \" + deferredName);",
      "info" : "ThrowStatement[11135-11201]:ThrowStatement[11135-11201]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[11213-11225]:ExpressionStatement[11213-11225]"
    }, {
      "left" : "if (context == nonempty)",
      "right" : "if (context == nonempty)",
      "info" : "IfStatement[11230-11279]:IfStatement[11230-11279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11255-11279]:Block[11255-11279]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[11263-11273]:ExpressionStatement[11263-11273]"
    }, {
      "left" : "out.write(closeBracket);",
      "right" : "out.write(closeBracket);",
      "info" : "ExpressionStatement[11284-11308]:ExpressionStatement[11284-11308]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11313-11325]:ReturnStatement[11313-11325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11363-11573]:Block[11363-11573]"
    }, {
      "left" : "if (stackSize == stack.length)",
      "right" : "if (stackSize == stack.length)",
      "info" : "IfStatement[11369-11536]:IfStatement[11369-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11400-11536]:Block[11400-11536]"
    }, {
      "left" : "int[] newStack = new int[stackSize * 2];",
      "right" : "int[] newStack = new int[stackSize * 2];",
      "info" : "VariableDeclarationStatement[11408-11448]:VariableDeclarationStatement[11408-11448]"
    }, {
      "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "info" : "ExpressionStatement[11455-11506]:ExpressionStatement[11455-11506]"
    }, {
      "left" : "stack = newStack;",
      "right" : "stack = newStack;",
      "info" : "ExpressionStatement[11513-11530]:ExpressionStatement[11513-11530]"
    }, {
      "left" : "stack[stackSize++] = newTop;",
      "right" : "stack[stackSize++] = newTop;",
      "info" : "ExpressionStatement[11541-11569]:ExpressionStatement[11541-11569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-11790]:Block[11656-11790]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[11662-11753]:IfStatement[11662-11753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11682-11753]:Block[11682-11753]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[11690-11747]:ThrowStatement[11690-11747]"
    }, {
      "left" : "return stack[stackSize - 1];",
      "right" : "return stack[stackSize - 1];",
      "info" : "ReturnStatement[11758-11786]:ReturnStatement[11758-11786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11915-11959]:Block[11915-11959]"
    }, {
      "left" : "stack[stackSize - 1] = topOfStack;",
      "right" : "stack[stackSize - 1] = topOfStack;",
      "info" : "ExpressionStatement[11921-11955]:ExpressionStatement[11921-11955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12162-12468]:Block[12162-12468]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[12168-12247]:IfStatement[12168-12247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12186-12247]:Block[12186-12247]"
    }, {
      "left" : "throw new NullPointerException(\"name == null\");",
      "right" : "throw new NullPointerException(\"name == null\");",
      "info" : "ThrowStatement[12194-12241]:ThrowStatement[12194-12241]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[12252-12326]:IfStatement[12252-12326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12278-12326]:Block[12278-12326]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[12286-12320]:ThrowStatement[12286-12320]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[12331-12422]:IfStatement[12331-12422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12351-12422]:Block[12351-12422]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[12359-12416]:ThrowStatement[12359-12416]"
    }, {
      "left" : "deferredName = name;",
      "right" : "deferredName = name;",
      "info" : "ExpressionStatement[12427-12447]:ExpressionStatement[12427-12447]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12452-12464]:ReturnStatement[12452-12464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12524-12642]:Block[12524-12642]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[12530-12638]:IfStatement[12530-12638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-12638]:Block[12556-12638]"
    }, {
      "left" : "beforeName();",
      "right" : "beforeName();",
      "info" : "ExpressionStatement[12564-12577]:ExpressionStatement[12564-12577]"
    }, {
      "left" : "string(deferredName);",
      "right" : "string(deferredName);",
      "info" : "ExpressionStatement[12584-12605]:ExpressionStatement[12584-12605]"
    }, {
      "left" : "deferredName = null;",
      "right" : "deferredName = null;",
      "info" : "ExpressionStatement[12612-12632]:ExpressionStatement[12612-12632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12852-12994]:Block[12852-12994]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[12858-12910]:IfStatement[12858-12910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12877-12910]:Block[12877-12910]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[12885-12904]:ReturnStatement[12885-12904]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[12915-12935]:ExpressionStatement[12915-12935]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[12940-12954]:ExpressionStatement[12940-12954]"
    }, {
      "left" : "string(value);",
      "right" : "string(value);",
      "info" : "ExpressionStatement[12959-12973]:ExpressionStatement[12959-12973]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12978-12990]:ReturnStatement[12978-12990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13263-13409]:Block[13263-13409]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[13269-13321]:IfStatement[13269-13321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13288-13321]:Block[13288-13321]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[13296-13315]:ReturnStatement[13296-13315]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13326-13346]:ExpressionStatement[13326-13346]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13351-13365]:ExpressionStatement[13351-13365]"
    }, {
      "left" : "out.append(value);",
      "right" : "out.append(value);",
      "info" : "ExpressionStatement[13370-13388]:ExpressionStatement[13370-13388]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13393-13405]:ReturnStatement[13393-13405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13532-13795]:Block[13532-13795]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[13538-13732]:IfStatement[13538-13732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13564-13732]:Block[13564-13732]"
    }, {
      "left" : "if (serializeNulls)",
      "right" : "if (serializeNulls)",
      "info" : "IfStatement[13572-13726]:IfStatement[13572-13726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13592-13630]:Block[13592-13630]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13602-13622]:ExpressionStatement[13602-13622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13636-13726]:Block[13636-13726]"
    }, {
      "left" : "deferredName = null;",
      "right" : "deferredName = null;",
      "info" : "ExpressionStatement[13646-13666]:ExpressionStatement[13646-13666]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13675-13687]:ReturnStatement[13675-13687]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13737-13751]:ExpressionStatement[13737-13751]"
    }, {
      "left" : "out.write(\"null\");",
      "right" : "out.write(\"null\");",
      "info" : "ExpressionStatement[13756-13774]:ExpressionStatement[13756-13774]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13779-13791]:ReturnStatement[13779-13791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13928-14035]:Block[13928-14035]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13934-13954]:ExpressionStatement[13934-13954]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13959-13973]:ExpressionStatement[13959-13973]"
    }, {
      "left" : "out.write(value ? \"true\" : \"false\");",
      "right" : "out.write(value ? \"true\" : \"false\");",
      "info" : "ExpressionStatement[13978-14014]:ExpressionStatement[13978-14014]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14019-14031]:ReturnStatement[14019-14031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14364-14628]:Block[14589-14853]"
    }, {
      "left" : "if (Double.isNaN(value) || Double.isInfinite(value))",
      "right" : "if (Double.isNaN(value) || Double.isInfinite(value))",
      "info" : "IfStatement[14370-14523]:IfStatement[14595-14748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14423-14523]:Block[14648-14748]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "right" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "info" : "ThrowStatement[14431-14517]:ThrowStatement[14656-14742]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[14528-14548]:ExpressionStatement[14753-14773]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[14553-14567]:ExpressionStatement[14778-14792]"
    }, {
      "left" : "out.append(Double.toString(value));",
      "right" : "out.append(Double.toString(value));",
      "info" : "ExpressionStatement[14572-14607]:ExpressionStatement[14797-14832]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14612-14624]:ReturnStatement[14837-14849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14758-14861]:Block[14983-15086]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[14764-14784]:ExpressionStatement[14989-15009]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[14789-14803]:ExpressionStatement[15014-15028]"
    }, {
      "left" : "out.write(Long.toString(value));",
      "right" : "out.write(Long.toString(value));",
      "info" : "ExpressionStatement[14808-14840]:ExpressionStatement[15033-15065]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14845-14857]:ReturnStatement[15070-15082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15118-15516]:Block[15343-15741]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[15124-15176]:IfStatement[15349-15401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15143-15176]:Block[15368-15401]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[15151-15170]:ReturnStatement[15376-15395]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[15182-15202]:ExpressionStatement[15407-15427]"
    }, {
      "left" : "String string = value.toString();",
      "right" : "String string = value.toString();",
      "info" : "VariableDeclarationStatement[15207-15240]:VariableDeclarationStatement[15432-15465]"
    }, {
      "left" : "if (!lenient\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
      "right" : "if (!lenient\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
      "info" : "IfStatement[15245-15452]:IfStatement[15470-15677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15352-15452]:Block[15577-15677]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "right" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "info" : "ThrowStatement[15360-15446]:ThrowStatement[15585-15671]"
    }, {
      "left" : "beforeValue();",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[15457-15471]:ExpressionStatement[15682-15696]"
    }, {
      "left" : "out.append(string);",
      "right" : "out.append(string);",
      "info" : "ExpressionStatement[15476-15495]:ExpressionStatement[15701-15720]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15500-15512]:ReturnStatement[15725-15737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15676-15794]:Block[15901-16019]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[15682-15773]:IfStatement[15907-15998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15702-15773]:Block[15927-15998]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[15710-15767]:ThrowStatement[15935-15992]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[15778-15790]:ExpressionStatement[16003-16015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15986-16185]:Block[16211-16410]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[15992-16004]:ExpressionStatement[16217-16229]"
    }, {
      "left" : "int size = stackSize;",
      "right" : "int size = stackSize;",
      "info" : "VariableDeclarationStatement[16010-16031]:VariableDeclarationStatement[16235-16256]"
    }, {
      "left" : "if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT)",
      "right" : "if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT)",
      "info" : "IfStatement[16036-16162]:IfStatement[16261-16387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16103-16162]:Block[16328-16387]"
    }, {
      "left" : "throw new IOException(\"Incomplete document\");",
      "right" : "throw new IOException(\"Incomplete document\");",
      "info" : "ThrowStatement[16111-16156]:ThrowStatement[16336-16381]"
    }, {
      "left" : "stackSize = 0;",
      "right" : "stackSize = 0;",
      "info" : "ExpressionStatement[16167-16181]:ExpressionStatement[16392-16406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16242-17029]:Block[16467-17254]"
    }, {
      "left" : "String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;",
      "right" : "String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;",
      "info" : "VariableDeclarationStatement[16248-16331]:VariableDeclarationStatement[16473-16556]"
    }, {
      "left" : "out.write(\"\\\"\");",
      "right" : "out.write(\"\\\"\");",
      "info" : "ExpressionStatement[16336-16352]:ExpressionStatement[16561-16577]"
    }, {
      "left" : "int last = 0;",
      "right" : "int last = 0;",
      "info" : "VariableDeclarationStatement[16357-16370]:VariableDeclarationStatement[16582-16595]"
    }, {
      "left" : "int length = value.length();",
      "right" : "int length = value.length();",
      "info" : "VariableDeclarationStatement[16375-16403]:VariableDeclarationStatement[16600-16628]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[16408-16928]:ForStatement[16633-17153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16441-16928]:Block[16666-17153]"
    }, {
      "left" : "char c = value.charAt(i);",
      "right" : "char c = value.charAt(i);",
      "info" : "VariableDeclarationStatement[16449-16474]:VariableDeclarationStatement[16674-16699]"
    }, {
      "left" : "String replacement;",
      "right" : "String replacement;",
      "info" : "VariableDeclarationStatement[16481-16500]:VariableDeclarationStatement[16706-16725]"
    }, {
      "left" : "if (c < 128)",
      "right" : "if (c < 128)",
      "info" : "IfStatement[16507-16800]:IfStatement[16732-17025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16520-16633]:Block[16745-16858]"
    }, {
      "left" : "replacement = replacements[c];",
      "right" : "replacement = replacements[c];",
      "info" : "ExpressionStatement[16530-16560]:ExpressionStatement[16755-16785]"
    }, {
      "left" : "if (replacement == null)",
      "right" : "if (replacement == null)",
      "info" : "IfStatement[16569-16625]:IfStatement[16794-16850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16594-16625]:Block[16819-16850]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16606-16615]:ContinueStatement[16831-16840]"
    }, {
      "left" : "if (c == '\\u2028')",
      "right" : "if (c == '\\u2028')",
      "info" : "IfStatement[16639-16800]:IfStatement[16864-17025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16658-16700]:Block[16883-16925]"
    }, {
      "left" : "replacement = \"\\\\u2028\";",
      "right" : "replacement = \"\\\\u2028\";",
      "info" : "ExpressionStatement[16668-16692]:ExpressionStatement[16893-16917]"
    }, {
      "left" : "if (c == '\\u2029')",
      "right" : "if (c == '\\u2029')",
      "info" : "IfStatement[16706-16800]:IfStatement[16931-17025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16725-16767]:Block[16950-16992]"
    }, {
      "left" : "replacement = \"\\\\u2029\";",
      "right" : "replacement = \"\\\\u2029\";",
      "info" : "ExpressionStatement[16735-16759]:ExpressionStatement[16960-16984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16773-16800]:Block[16998-17025]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16783-16792]:ContinueStatement[17008-17017]"
    }, {
      "left" : "if (last < i)",
      "right" : "if (last < i)",
      "info" : "IfStatement[16807-16872]:IfStatement[17032-17097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16821-16872]:Block[17046-17097]"
    }, {
      "left" : "out.write(value, last, i - last);",
      "right" : "out.write(value, last, i - last);",
      "info" : "ExpressionStatement[16831-16864]:ExpressionStatement[17056-17089]"
    }, {
      "left" : "out.write(replacement);",
      "right" : "out.write(replacement);",
      "info" : "ExpressionStatement[16879-16902]:ExpressionStatement[17104-17127]"
    }, {
      "left" : "last = i + 1;",
      "right" : "last = i + 1;",
      "info" : "ExpressionStatement[16909-16922]:ExpressionStatement[17134-17147]"
    }, {
      "left" : "if (last < length)",
      "right" : "if (last < length)",
      "info" : "IfStatement[16933-17004]:IfStatement[17158-17229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16952-17004]:Block[17177-17229]"
    }, {
      "left" : "out.write(value, last, length - last);",
      "right" : "out.write(value, last, length - last);",
      "info" : "ExpressionStatement[16960-16998]:ExpressionStatement[17185-17223]"
    }, {
      "left" : "out.write(\"\\\"\");",
      "right" : "out.write(\"\\\"\");",
      "info" : "ExpressionStatement[17009-17025]:ExpressionStatement[17234-17250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17075-17234]:Block[17300-17459]"
    }, {
      "left" : "if (indent == null)",
      "right" : "if (indent == null)",
      "info" : "IfStatement[17081-17122]:IfStatement[17306-17347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17101-17122]:Block[17326-17347]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17109-17116]:ReturnStatement[17334-17341]"
    }, {
      "left" : "out.write(\"\\n\");",
      "right" : "out.write(\"\\n\");",
      "info" : "ExpressionStatement[17128-17144]:ExpressionStatement[17353-17369]"
    }, {
      "left" : "for (int i = 1, size = stackSize; i < size; i++)",
      "right" : "for (int i = 1, size = stackSize; i < size; i++)",
      "info" : "ForStatement[17149-17230]:ForStatement[17374-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17198-17230]:Block[17423-17455]"
    }, {
      "left" : "out.write(indent);",
      "right" : "out.write(indent);",
      "info" : "ExpressionStatement[17206-17224]:ExpressionStatement[17431-17449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17419-17703]:Block[17644-17928]"
    }, {
      "left" : "int context = peek();",
      "right" : "int context = peek();",
      "info" : "VariableDeclarationStatement[17425-17446]:VariableDeclarationStatement[17650-17671]"
    }, {
      "left" : "if (context == NONEMPTY_OBJECT)",
      "right" : "if (context == NONEMPTY_OBJECT)",
      "info" : "IfStatement[17451-17653]:IfStatement[17676-17878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17483-17531]:Block[17708-17756]"
    }, {
      "left" : "out.write(',');",
      "right" : "out.write(',');",
      "info" : "ExpressionStatement[17510-17525]:ExpressionStatement[17735-17750]"
    }, {
      "left" : "if (context != EMPTY_OBJECT)",
      "right" : "if (context != EMPTY_OBJECT)",
      "info" : "IfStatement[17537-17653]:IfStatement[17762-17878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17566-17653]:Block[17791-17878]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[17595-17647]:ThrowStatement[17820-17872]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[17658-17668]:ExpressionStatement[17883-17893]"
    }, {
      "left" : "replaceTop(DANGLING_NAME);",
      "right" : "replaceTop(DANGLING_NAME);",
      "info" : "ExpressionStatement[17673-17699]:ExpressionStatement[17898-17924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17997-18701]:Block[18222-18926]"
    }, {
      "left" : "switch (peek()) {\n    case NONEMPTY_DOCUMENT:\n      if (!lenient) {\n        throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");\n      }\n      // fall-through\n    case EMPTY_DOCUMENT: // first in document\n      replaceTop(NONEMPTY_DOCUMENT);\n      break;\n\n    case EMPTY_ARRAY: // first in array\n      replaceTop(NONEMPTY_ARRAY);\n      newline();\n      break;\n\n    case NONEMPTY_ARRAY: // another in array\n      out.append(',');\n      newline();\n      break;\n\n    case DANGLING_NAME: // value for name\n      out.append(separator);\n      replaceTop(NONEMPTY_OBJECT);\n      break;\n\n    default:\n      throw new IllegalStateException(\"Nesting problem.\");\n    }",
      "right" : "switch (peek()) {\n    case NONEMPTY_DOCUMENT:\n      if (!lenient) {\n        throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");\n      }\n      // fall-through\n    case EMPTY_DOCUMENT: // first in document\n      replaceTop(NONEMPTY_DOCUMENT);\n      break;\n\n    case EMPTY_ARRAY: // first in array\n      replaceTop(NONEMPTY_ARRAY);\n      newline();\n      break;\n\n    case NONEMPTY_ARRAY: // another in array\n      out.append(',');\n      newline();\n      break;\n\n    case DANGLING_NAME: // value for name\n      out.append(separator);\n      replaceTop(NONEMPTY_OBJECT);\n      break;\n\n    default:\n      throw new IllegalStateException(\"Nesting problem.\");\n    }",
      "info" : "SwitchStatement[18003-18697]:SwitchStatement[18228-18922]"
    }, {
      "left" : "case NONEMPTY_DOCUMENT:",
      "right" : "case NONEMPTY_DOCUMENT:",
      "info" : "SwitchCase[18025-18048]:SwitchCase[18250-18273]"
    }, {
      "left" : "if (!lenient)",
      "right" : "if (!lenient)",
      "info" : "IfStatement[18055-18176]:IfStatement[18280-18401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18069-18176]:Block[18294-18401]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");",
      "right" : "throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");",
      "info" : "ThrowStatement[18079-18168]:ThrowStatement[18304-18393]"
    }, {
      "left" : "case EMPTY_DOCUMENT:",
      "right" : "case EMPTY_DOCUMENT:",
      "info" : "SwitchCase[18203-18223]:SwitchCase[18428-18448]"
    }, {
      "left" : "replaceTop(NONEMPTY_DOCUMENT);",
      "right" : "replaceTop(NONEMPTY_DOCUMENT);",
      "info" : "ExpressionStatement[18251-18281]:ExpressionStatement[18476-18506]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18288-18294]:BreakStatement[18513-18519]"
    }, {
      "left" : "case EMPTY_ARRAY:",
      "right" : "case EMPTY_ARRAY:",
      "info" : "SwitchCase[18300-18317]:SwitchCase[18525-18542]"
    }, {
      "left" : "replaceTop(NONEMPTY_ARRAY);",
      "right" : "replaceTop(NONEMPTY_ARRAY);",
      "info" : "ExpressionStatement[18342-18369]:ExpressionStatement[18567-18594]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[18376-18386]:ExpressionStatement[18601-18611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18393-18399]:BreakStatement[18618-18624]"
    }, {
      "left" : "case NONEMPTY_ARRAY:",
      "right" : "case NONEMPTY_ARRAY:",
      "info" : "SwitchCase[18405-18425]:SwitchCase[18630-18650]"
    }, {
      "left" : "out.append(',');",
      "right" : "out.append(',');",
      "info" : "ExpressionStatement[18452-18468]:ExpressionStatement[18677-18693]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[18475-18485]:ExpressionStatement[18700-18710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18492-18498]:BreakStatement[18717-18723]"
    }, {
      "left" : "case DANGLING_NAME:",
      "right" : "case DANGLING_NAME:",
      "info" : "SwitchCase[18504-18523]:SwitchCase[18729-18748]"
    }, {
      "left" : "out.append(separator);",
      "right" : "out.append(separator);",
      "info" : "ExpressionStatement[18548-18570]:ExpressionStatement[18773-18795]"
    }, {
      "left" : "replaceTop(NONEMPTY_OBJECT);",
      "right" : "replaceTop(NONEMPTY_OBJECT);",
      "info" : "ExpressionStatement[18577-18605]:ExpressionStatement[18802-18830]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18612-18618]:BreakStatement[18837-18843]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18624-18632]:SwitchCase[18849-18857]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[18639-18691]:ThrowStatement[18864-18916]"
    } ]
  },
  "interFileMappings" : { }
}