{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[3726-46589]:TypeDeclaration[3726-46713]"
    }, {
      "left" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "right" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "info" : "FieldDeclaration[3810-3950]:FieldDeclaration[3810-3950]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[3954-3988]:FieldDeclaration[3954-3988]"
    }, {
      "left" : "private final StaticSourceFile sourceFile;",
      "right" : "private final StaticSourceFile sourceFile;",
      "info" : "FieldDeclaration[3991-4033]:FieldDeclaration[3991-4033]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[4036-4068]:FieldDeclaration[4036-4068]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[4071-4099]:FieldDeclaration[4071-4099]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[4102-4144]:FieldDeclaration[4102-4144]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[4147-4201]:FieldDeclaration[4147-4201]"
    }, {
      "left" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "right" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "info" : "FieldDeclaration[4239-4316]:FieldDeclaration[4239-4316]"
    }, {
      "left" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "right" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "info" : "FieldDeclaration[4320-4510]:FieldDeclaration[4320-4510]"
    }, {
      "left" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "right" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "info" : "FieldDeclaration[4513-4828]:FieldDeclaration[4513-4828]"
    }, {
      "left" : "private final Set<String> reservedKeywords;",
      "right" : "private final Set<String> reservedKeywords;",
      "info" : "FieldDeclaration[4832-4875]:FieldDeclaration[4832-4875]"
    }, {
      "left" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "right" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "info" : "FieldDeclaration[4878-4940]:FieldDeclaration[4878-4940]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[5069-5119]:FieldDeclaration[5069-5119]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[5122-5224]:FieldDeclaration[5122-5224]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[5227-5261]:FieldDeclaration[5227-5261]"
    }, {
      "left" : "private Node templateNode;",
      "right" : "private Node templateNode;",
      "info" : "FieldDeclaration[5383-5409]:FieldDeclaration[5383-5409]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[5492-6556]:MethodDeclaration[5492-6556]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[6792-6996]:MethodDeclaration[6792-6996]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[7000-7923]:MethodDeclaration[7000-7923]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[7927-8652]:MethodDeclaration[7927-8652]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[8656-9141]:MethodDeclaration[8656-9141]"
    }, {
      "left" : "private void handleBlockComment(Comment comment)",
      "right" : "private void handleBlockComment(Comment comment)",
      "info" : "MethodDeclaration[9145-9540]:MethodDeclaration[9145-9540]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[9544-9887]:MethodDeclaration[9544-9887]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "info" : "MethodDeclaration[9891-10128]:MethodDeclaration[9891-10128]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "info" : "MethodDeclaration[10132-10527]:MethodDeclaration[10132-10527]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[10531-10790]:MethodDeclaration[10531-10790]"
    }, {
      "left" : "private Node transformNameAsString(Name node)",
      "right" : "private Node transformNameAsString(Name node)",
      "info" : "MethodDeclaration[10794-11086]:MethodDeclaration[10794-11086]"
    }, {
      "left" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "right" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[11090-11425]:MethodDeclaration[11090-11425]"
    }, {
      "left" : "private static String getStringValue(double value)",
      "right" : "private static String getStringValue(double value)",
      "info" : "MethodDeclaration[11429-11681]:MethodDeclaration[11429-11681]"
    }, {
      "left" : "private void setSourceInfo(Node irNode, AstNode node)",
      "right" : "private void setSourceInfo(Node irNode, AstNode node)",
      "info" : "MethodDeclaration[11685-12216]:MethodDeclaration[11685-12216]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "info" : "MethodDeclaration[12220-13454]:MethodDeclaration[12220-13454]"
    }, {
      "left" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "right" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "info" : "MethodDeclaration[13512-13652]:MethodDeclaration[13512-13652]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[13656-13925]:MethodDeclaration[13656-13925]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[13929-14021]:MethodDeclaration[13929-14021]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[14025-37992]:TypeDeclaration[14025-38116]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "info" : "MethodDeclaration[14098-14388]:MethodDeclaration[14098-14388]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[14394-15303]:MethodDeclaration[14394-15303]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[15309-15674]:MethodDeclaration[15309-15674]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[15680-16056]:MethodDeclaration[15680-16056]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[16062-16343]:MethodDeclaration[16062-16343]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[16349-17200]:MethodDeclaration[16349-17200]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[17206-17471]:MethodDeclaration[17206-17471]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[17477-17573]:MethodDeclaration[17477-17573]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[17579-17968]:MethodDeclaration[17579-17968]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[17974-18462]:MethodDeclaration[17974-18462]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[18468-18754]:MethodDeclaration[18468-18754]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[18760-19148]:MethodDeclaration[18760-19148]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[19154-19346]:MethodDeclaration[19154-19346]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[19352-19549]:MethodDeclaration[19352-19549]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[19555-19689]:MethodDeclaration[19555-19689]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[19695-19943]:MethodDeclaration[19695-19943]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[19949-20522]:MethodDeclaration[19949-20522]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[20528-20858]:MethodDeclaration[20528-20858]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[20864-21343]:MethodDeclaration[20864-21343]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[21349-24020]:MethodDeclaration[21349-24144]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[24026-24425]:MethodDeclaration[24150-24549]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[24431-24829]:MethodDeclaration[24555-24953]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[24835-24976]:MethodDeclaration[24959-25100]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[24982-25105]:MethodDeclaration[25106-25229]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[25111-25832]:MethodDeclaration[25235-25956]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[25838-25934]:MethodDeclaration[25962-26058]"
    }, {
      "left" : "Node processName(Name nameNode, boolean asString)",
      "right" : "Node processName(Name nameNode, boolean asString)",
      "info" : "MethodDeclaration[25940-26391]:MethodDeclaration[26064-26515]"
    }, {
      "left" : "private boolean isReservedKeyword(String identifier)",
      "right" : "private boolean isReservedKeyword(String identifier)",
      "info" : "MethodDeclaration[26397-26580]:MethodDeclaration[26521-26704]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[26586-26701]:MethodDeclaration[26710-26825]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[26707-26834]:MethodDeclaration[26831-26958]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[26840-28063]:MethodDeclaration[26964-28187]"
    }, {
      "left" : "Node getFnParamNode(Node fnNode)",
      "right" : "Node getFnParamNode(Node fnNode)",
      "info" : "MethodDeclaration[28069-28386]:MethodDeclaration[28193-28510]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[28392-28520]:MethodDeclaration[28516-28644]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[28526-28750]:MethodDeclaration[28650-28874]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[28756-29148]:MethodDeclaration[28880-29272]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[29154-29897]:MethodDeclaration[29278-30021]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[29903-30175]:MethodDeclaration[30027-30299]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[30181-30277]:MethodDeclaration[30305-30401]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[30283-31545]:MethodDeclaration[30407-31669]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[31551-32322]:MethodDeclaration[31675-32446]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[32328-32630]:MethodDeclaration[32452-32754]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[32636-32801]:MethodDeclaration[32760-32925]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[32807-33986]:MethodDeclaration[32931-34110]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[33992-35254]:MethodDeclaration[34116-35378]"
    }, {
      "left" : "private boolean validAssignmentTarget(Node target)",
      "right" : "private boolean validAssignmentTarget(Node target)",
      "info" : "MethodDeclaration[35260-35484]:MethodDeclaration[35384-35608]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[35490-35947]:MethodDeclaration[35614-36071]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[35953-36294]:MethodDeclaration[36077-36418]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[36300-36501]:MethodDeclaration[36424-36625]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[36507-36736]:MethodDeclaration[36631-36860]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[36742-37049]:MethodDeclaration[36866-37173]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[37055-37240]:MethodDeclaration[37179-37364]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[37246-37430]:MethodDeclaration[37370-37554]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[37436-37620]:MethodDeclaration[37560-37744]"
    }, {
      "left" : "void reportGetterParam(AstNode node)",
      "right" : "void reportGetterParam(AstNode node)",
      "info" : "MethodDeclaration[37626-37800]:MethodDeclaration[37750-37924]"
    }, {
      "left" : "void reportSetterParam(AstNode node)",
      "right" : "void reportSetterParam(AstNode node)",
      "info" : "MethodDeclaration[37806-37988]:MethodDeclaration[37930-38112]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[37996-45660]:MethodDeclaration[38120-45784]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[45736-45828]:MethodDeclaration[45860-45952]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[45832-45945]:MethodDeclaration[45956-46069]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[45949-46083]:MethodDeclaration[46073-46207]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[46087-46242]:MethodDeclaration[46211-46366]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[46246-46350]:MethodDeclaration[46370-46474]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[46354-46479]:MethodDeclaration[46478-46603]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[46483-46587]:MethodDeclaration[46607-46711]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5664-6556]:Block[5664-6556]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[5670-5703]:ExpressionStatement[5670-5703]"
    }, {
      "left" : "this.sourceFile = sourceFile;",
      "right" : "this.sourceFile = sourceFile;",
      "info" : "ExpressionStatement[5708-5737]:ExpressionStatement[5708-5737]"
    }, {
      "left" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "right" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "info" : "ExpressionStatement[5788-5855]:ExpressionStatement[5788-5855]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[5861-5882]:ExpressionStatement[5861-5882]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5887-5922]:ExpressionStatement[5887-5922]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[5927-5980]:ExpressionStatement[5927-5980]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[6065-6106]:ExpressionStatement[6065-6106]"
    }, {
      "left" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "right" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "info" : "SwitchStatement[6112-6552]:SwitchStatement[6112-6552]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[6149-6166]:SwitchCase[6149-6166]"
    }, {
      "left" : "reservedKeywords = null;",
      "right" : "reservedKeywords = null;",
      "info" : "ExpressionStatement[6234-6258]:ExpressionStatement[6234-6258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6267-6273]:BreakStatement[6267-6273]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[6280-6297]:SwitchCase[6280-6297]"
    }, {
      "left" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6306-6347]:ExpressionStatement[6306-6347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6356-6362]:BreakStatement[6356-6362]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[6369-6393]:SwitchCase[6369-6393]"
    }, {
      "left" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6402-6450]:ExpressionStatement[6402-6450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6459-6465]:BreakStatement[6459-6465]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6472-6480]:SwitchCase[6472-6480]"
    }, {
      "left" : "throw new IllegalStateException(\"unknown language mode\");",
      "right" : "throw new IllegalStateException(\"unknown language mode\");",
      "info" : "ThrowStatement[6489-6546]:ThrowStatement[6489-6546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6826-6996]:Block[6826-6996]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[6874-6917]:VariableDeclarationStatement[6874-6917]"
    }, {
      "left" : "templateNode.setStaticSourceFile(sourceFile);",
      "right" : "templateNode.setStaticSourceFile(sourceFile);",
      "info" : "ExpressionStatement[6922-6967]:ExpressionStatement[6922-6967]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[6972-6992]:ReturnStatement[6972-6992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7281-7923]:Block[7281-7923]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[7287-7380]:VariableDeclarationStatement[7287-7380]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[7385-7425]:VariableDeclarationStatement[7385-7425]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[7431-7854]:IfStatement[7431-7854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7463-7854]:Block[7463-7854]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[7471-7848]:EnhancedForStatement[7471-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7514-7848]:Block[7514-7848]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "right" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "info" : "IfStatement[7524-7840]:IfStatement[7524-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-7715]:Block[7634-7715]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "info" : "ExpressionStatement[7646-7705]:ExpressionStatement[7646-7705]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "right" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "info" : "IfStatement[7721-7840]:IfStatement[7721-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7780-7840]:Block[7780-7840]"
    }, {
      "left" : "irFactory.handleBlockComment(comment);",
      "right" : "irFactory.handleBlockComment(comment);",
      "info" : "ExpressionStatement[7792-7830]:ExpressionStatement[7792-7830]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[7860-7899]:ExpressionStatement[7860-7899]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[7905-7919]:ReturnStatement[7905-7919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7974-8652]:Block[7974-8652]"
    }, {
      "left" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "right" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[8137-8198]:VariableDeclarationStatement[8137-8198]"
    }, {
      "left" : "if (rootNodeJsDoc != null)",
      "right" : "if (rootNodeJsDoc != null)",
      "info" : "IfStatement[8203-8326]:IfStatement[8203-8326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8230-8326]:Block[8230-8326]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "right" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "info" : "ExpressionStatement[8238-8273]:ExpressionStatement[8238-8273]"
    }, {
      "left" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "right" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[8280-8320]:ExpressionStatement[8280-8320]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[8332-8648]:IfStatement[8332-8648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8362-8648]:Block[8362-8648]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[8370-8547]:IfStatement[8370-8547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8547]:Block[8465-8547]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[8475-8539]:ExpressionStatement[8475-8539]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[8554-8592]:ExpressionStatement[8554-8592]"
    }, {
      "left" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "right" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[8599-8642]:ExpressionStatement[8599-8642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8698-9141]:Block[8698-9141]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[8704-8734]:VariableDeclarationStatement[8704-8734]"
    }, {
      "left" : "if (!irNode.isBlock())",
      "right" : "if (!irNode.isBlock())",
      "info" : "IfStatement[8739-9118]:IfStatement[8739-9118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8762-9118]:Block[8762-9118]"
    }, {
      "left" : "if (irNode.isEmpty())",
      "right" : "if (irNode.isEmpty())",
      "info" : "IfStatement[8770-9112]:IfStatement[8770-9112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8792-8876]:Block[8792-8876]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[8802-8830]:ExpressionStatement[8802-8830]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[8839-8868]:ExpressionStatement[8839-8868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8882-9112]:Block[8882-9112]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[8892-8937]:VariableDeclarationStatement[8892-8937]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[8946-8985]:ExpressionStatement[8946-8985]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[8994-9033]:ExpressionStatement[8994-9033]"
    }, {
      "left" : "maybeSetLengthFrom(newBlock, node);",
      "right" : "maybeSetLengthFrom(newBlock, node);",
      "info" : "ExpressionStatement[9042-9077]:ExpressionStatement[9042-9077]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[9086-9104]:ExpressionStatement[9086-9104]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[9123-9137]:ReturnStatement[9123-9137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9282-9540]:Block[9282-9540]"
    }, {
      "left" : "String value = comment.getValue();",
      "right" : "String value = comment.getValue();",
      "info" : "VariableDeclarationStatement[9288-9322]:VariableDeclarationStatement[9288-9322]"
    }, {
      "left" : "if (value.indexOf(\"/* @\") != -1 ||\n        value.indexOf(\"\\n * @\") != -1)",
      "right" : "if (value.indexOf(\"/* @\") != -1 ||\n        value.indexOf(\"\\n * @\") != -1)",
      "info" : "IfStatement[9327-9536]:IfStatement[9327-9536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9401-9536]:Block[9401-9536]"
    }, {
      "left" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "right" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[9409-9530]:ExpressionStatement[9409-9530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9704-9887]:Block[9704-9887]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[9710-9865]:IfStatement[9710-9865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9774-9865]:Block[9774-9865]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[9782-9840]:ExpressionStatement[9782-9840]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9847-9859]:ReturnStatement[9847-9859]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9870-9883]:ReturnStatement[9870-9883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9966-10128]:Block[9966-10128]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[9972-10041]:VariableDeclarationStatement[9972-10041]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[10046-10074]:ExpressionStatement[10046-10074]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[10079-10124]:ExpressionStatement[10079-10124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10189-10527]:Block[10189-10527]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[10195-10233]:VariableDeclarationStatement[10195-10233]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[10238-10506]:IfStatement[10238-10506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10259-10506]:Block[10259-10506]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[10267-10336]:VariableDeclarationStatement[10267-10336]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[10343-10371]:ExpressionStatement[10343-10371]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[10378-10500]:IfStatement[10378-10500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10429-10500]:Block[10429-10500]"
    }, {
      "left" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[10439-10492]:ReturnStatement[10439-10492]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10511-10523]:ReturnStatement[10511-10523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10568-10790]:Block[10568-10790]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[10574-10608]:VariableDeclarationStatement[10574-10608]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[10613-10661]:VariableDeclarationStatement[10613-10661]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[10666-10734]:IfStatement[10666-10734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10689-10734]:Block[10689-10734]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[10697-10728]:ExpressionStatement[10697-10728]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[10739-10767]:ExpressionStatement[10739-10767]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[10772-10786]:ReturnStatement[10772-10786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10840-11086]:Block[10840-11086]"
    }, {
      "left" : "Node irNode = transformDispatcher.processName(node, true);",
      "right" : "Node irNode = transformDispatcher.processName(node, true);",
      "info" : "VariableDeclarationStatement[10846-10904]:VariableDeclarationStatement[10846-10904]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[10909-10957]:VariableDeclarationStatement[10909-10957]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[10962-11030]:IfStatement[10962-11030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10985-11030]:Block[10985-11030]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[10993-11024]:ExpressionStatement[10993-11024]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[11035-11063]:ExpressionStatement[11035-11063]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[11068-11082]:ReturnStatement[11068-11082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11154-11425]:Block[11154-11425]"
    }, {
      "left" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "right" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "info" : "VariableDeclarationStatement[11160-11229]:VariableDeclarationStatement[11160-11229]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "info" : "VariableDeclarationStatement[11234-11289]:VariableDeclarationStatement[11234-11289]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[11294-11362]:IfStatement[11294-11362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11317-11362]:Block[11317-11362]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[11325-11356]:ExpressionStatement[11325-11356]"
    }, {
      "left" : "setSourceInfo(irNode, literalNode);",
      "right" : "setSourceInfo(irNode, literalNode);",
      "info" : "ExpressionStatement[11367-11402]:ExpressionStatement[11367-11402]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[11407-11421]:ReturnStatement[11407-11421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11480-11681]:Block[11480-11681]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[11486-11516]:VariableDeclarationStatement[11486-11516]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[11557-11677]:IfStatement[11557-11677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11581-11627]:Block[11581-11627]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[11589-11621]:ReturnStatement[11589-11621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11633-11677]:Block[11633-11677]"
    }, {
      "left" : "return Double.toString(value);",
      "right" : "return Double.toString(value);",
      "info" : "ReturnStatement[11641-11671]:ReturnStatement[11641-11671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11739-12216]:Block[11739-12216]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[11745-12212]:IfStatement[11745-12212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11775-12212]:Block[11775-12212]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[12008-12038]:VariableDeclarationStatement[12008-12038]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[12045-12070]:ExpressionStatement[12045-12070]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[12077-12134]:VariableDeclarationStatement[12077-12134]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[12141-12166]:ExpressionStatement[12141-12166]"
    }, {
      "left" : "maybeSetLengthFrom(irNode, node);",
      "right" : "maybeSetLengthFrom(irNode, node);",
      "info" : "ExpressionStatement[12173-12206]:ExpressionStatement[12173-12206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12729-13454]:Block[12729-13454]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[12735-12768]:VariableDeclarationStatement[12735-12768]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[12773-12803]:VariableDeclarationStatement[12773-12803]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[12808-12850]:VariableDeclarationStatement[12808-12850]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[12930-12954]:VariableDeclarationStatement[12930-12954]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[12959-13276]:VariableDeclarationStatement[12959-13276]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[13281-13341]:ExpressionStatement[13281-13341]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[13346-13401]:ExpressionStatement[13346-13401]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[13406-13426]:ExpressionStatement[13406-13426]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[13431-13450]:ReturnStatement[13431-13450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13571-13652]:Block[13571-13652]"
    }, {
      "left" : "if (config.isIdeMode)",
      "right" : "if (config.isIdeMode)",
      "info" : "IfStatement[13577-13648]:IfStatement[13577-13648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13599-13648]:Block[13599-13648]"
    }, {
      "left" : "node.setLength(source.getLength());",
      "right" : "node.setLength(source.getLength());",
      "info" : "ExpressionStatement[13607-13642]:ExpressionStatement[13607-13642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13698-13925]:Block[13698-13925]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[13704-13761]:VariableDeclarationStatement[13704-13761]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[13766-13921]:IfStatement[13766-13921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13787-13817]:Block[13787-13817]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[13795-13811]:ReturnStatement[13795-13811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13823-13921]:Block[13823-13921]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[13883-13915]:ReturnStatement[13883-13915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13970-14021]:Block[13970-14021]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[13976-14017]:ReturnStatement[13976-14017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14176-14388]:Block[14176-14388]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[14184-14237]:VariableDeclarationStatement[14184-14237]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : n)",
      "right" : "for (com.google.javascript.rhino.head.Node child : n)",
      "info" : "EnhancedForStatement[14244-14363]:EnhancedForStatement[14244-14363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14298-14363]:Block[14298-14363]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[14308-14355]:ExpressionStatement[14308-14355]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[14370-14382]:ReturnStatement[14370-14382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14878-15303]:Block[14878-15303]"
    }, {
      "left" : "Node ret;",
      "right" : "Node ret;",
      "info" : "VariableDeclarationStatement[14886-14895]:VariableDeclarationStatement[14886-14895]"
    }, {
      "left" : "if (n instanceof Name)",
      "right" : "if (n instanceof Name)",
      "info" : "IfStatement[14902-15231]:IfStatement[14902-15231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14925-14980]:Block[14925-14980]"
    }, {
      "left" : "ret = transformNameAsString((Name)n);",
      "right" : "ret = transformNameAsString((Name)n);",
      "info" : "ExpressionStatement[14935-14972]:ExpressionStatement[14935-14972]"
    }, {
      "left" : "if (n instanceof NumberLiteral)",
      "right" : "if (n instanceof NumberLiteral)",
      "info" : "IfStatement[14986-15231]:IfStatement[14986-15231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15018-15136]:Block[15018-15136]"
    }, {
      "left" : "ret = transformNumberAsString((NumberLiteral)n);",
      "right" : "ret = transformNumberAsString((NumberLiteral)n);",
      "info" : "ExpressionStatement[15028-15076]:ExpressionStatement[15028-15076]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[15085-15128]:ExpressionStatement[15085-15128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15142-15231]:Block[15142-15231]"
    }, {
      "left" : "ret = transform(n);",
      "right" : "ret = transform(n);",
      "info" : "ExpressionStatement[15152-15171]:ExpressionStatement[15152-15171]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[15180-15223]:ExpressionStatement[15180-15223]"
    }, {
      "left" : "Preconditions.checkState(ret.isString());",
      "right" : "Preconditions.checkState(ret.isString());",
      "info" : "ExpressionStatement[15238-15279]:ExpressionStatement[15238-15279]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[15286-15297]:ReturnStatement[15286-15297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15674]:Block[15374-15674]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[15382-15474]:IfStatement[15382-15474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15417-15474]:Block[15417-15474]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[15427-15466]:ExpressionStatement[15427-15466]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[15482-15518]:VariableDeclarationStatement[15482-15518]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[15525-15649]:EnhancedForStatement[15525-15649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15573-15649]:Block[15573-15649]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[15583-15609]:VariableDeclarationStatement[15583-15609]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[15618-15641]:ExpressionStatement[15618-15641]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15656-15668]:ReturnStatement[15656-15668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15744-16056]:Block[15744-16056]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[15752-15805]:VariableDeclarationStatement[15752-15805]"
    }, {
      "left" : "Node target = assign.getFirstChild();",
      "right" : "Node target = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[15812-15849]:VariableDeclarationStatement[15812-15849]"
    }, {
      "left" : "if (!validAssignmentTarget(target))",
      "right" : "if (!validAssignmentTarget(target))",
      "info" : "IfStatement[15856-16029]:IfStatement[15856-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15892-16029]:Block[15892-16029]"
    }, {
      "left" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[15902-16021]:ExpressionStatement[15902-16021]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[16036-16050]:ReturnStatement[16036-16050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16114-16343]:Block[16114-16343]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[16122-16156]:VariableDeclarationStatement[16122-16156]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "right" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "info" : "EnhancedForStatement[16163-16289]:EnhancedForStatement[16163-16289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16224-16289]:Block[16224-16289]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[16234-16281]:ExpressionStatement[16234-16281]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[16296-16318]:ExpressionStatement[16296-16318]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16325-16337]:ReturnStatement[16325-16337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16724-17200]:Block[16724-17200]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[16796-16826]:VariableDeclarationStatement[16796-16826]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[16833-17113]:WhileStatement[16833-17113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16875-17113]:Block[16875-17113]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[16885-16956]:VariableDeclarationStatement[16885-16956]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[16965-17105]:IfStatement[16965-17105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16989-17051]:Block[16989-17051]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[17001-17041]:ExpressionStatement[17001-17041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17057-17105]:Block[17057-17105]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[17069-17095]:ExpressionStatement[17069-17095]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[17121-17194]:IfStatement[17121-17194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17145-17194]:Block[17145-17194]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[17155-17186]:ExpressionStatement[17155-17186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17242-17471]:Block[17242-17471]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[17250-17278]:IfStatement[17250-17278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17265-17278]:ReturnStatement[17265-17278]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[17286-17310]:VariableDeclarationStatement[17286-17310]"
    }, {
      "left" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[17317-17465]:ReturnStatement[17317-17465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17526-17573]:Block[17526-17573]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[17534-17567]:ReturnStatement[17534-17567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17650-17968]:Block[17650-17968]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[17658-17691]:VariableDeclarationStatement[17658-17691]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[17698-17943]:IfStatement[17698-17943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17741-17943]:Block[17741-17943]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[17751-17809]:VariableDeclarationStatement[17751-17809]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[17859-17895]:ExpressionStatement[17859-17895]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[17904-17935]:ExpressionStatement[17904-17935]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17950-17962]:ReturnStatement[17950-17962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18036-18462]:Block[18036-18462]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[18044-18087]:VariableDeclarationStatement[18044-18087]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[18094-18148]:VariableDeclarationStatement[18094-18148]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[18155-18372]:IfStatement[18155-18372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18199-18372]:Block[18199-18372]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[18209-18364]:ExpressionStatement[18209-18364]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[18379-18437]:ExpressionStatement[18379-18437]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18444-18456]:ReturnStatement[18444-18456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18548-18754]:Block[18548-18754]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[18556-18748]:ReturnStatement[18556-18748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18837-19148]:Block[18837-19148]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[18845-18881]:VariableDeclarationStatement[18845-18881]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[18888-19123]:IfStatement[18888-19123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18926-19123]:Block[18926-19123]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[18936-18989]:VariableDeclarationStatement[18936-18989]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[19039-19075]:ExpressionStatement[19039-19075]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[19084-19115]:ExpressionStatement[19084-19115]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19130-19142]:ReturnStatement[19130-19142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19204-19346]:Block[19204-19346]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[19212-19340]:ReturnStatement[19212-19340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19409-19549]:Block[19409-19549]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[19417-19543]:ReturnStatement[19417-19543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19689]:Block[19623-19689]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[19631-19664]:VariableDeclarationStatement[19631-19664]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19671-19683]:ReturnStatement[19671-19683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19776-19943]:Block[19776-19943]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[19784-19849]:VariableDeclarationStatement[19784-19849]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[19856-19918]:ExpressionStatement[19856-19918]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19925-19937]:ReturnStatement[19925-19937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20005-20522]:Block[20005-20522]"
    }, {
      "left" : "if (loopNode.isForEach())",
      "right" : "if (loopNode.isForEach())",
      "info" : "IfStatement[20013-20330]:IfStatement[20013-20330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20039-20330]:Block[20039-20330]"
    }, {
      "left" : "errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[20049-20191]:ExpressionStatement[20049-20191]"
    }, {
      "left" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "right" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "info" : "ReturnStatement[20269-20322]:ReturnStatement[20269-20322]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[20337-20516]:ReturnStatement[20337-20516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20580-20858]:Block[20580-20858]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[20588-20770]:VariableDeclarationStatement[20588-20770]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[20777-20833]:ExpressionStatement[20777-20833]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20840-20852]:ReturnStatement[20840-20852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20926-21343]:Block[20926-21343]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[20934-21054]:VariableDeclarationStatement[20934-21054]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[21061-21163]:EnhancedForStatement[21061-21163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21107-21163]:Block[21107-21163]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[21117-21155]:ExpressionStatement[21117-21155]"
    }, {
      "left" : "node.setLineno(node.getFirstChild().getLineno());",
      "right" : "node.setLineno(node.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[21171-21220]:ExpressionStatement[21171-21220]"
    }, {
      "left" : "node.setCharno(node.getFirstChild().getCharno());",
      "right" : "node.setCharno(node.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[21227-21276]:ExpressionStatement[21227-21276]"
    }, {
      "left" : "maybeSetLengthFrom(node, callNode);",
      "right" : "maybeSetLengthFrom(node, callNode);",
      "info" : "ExpressionStatement[21283-21318]:ExpressionStatement[21283-21318]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[21325-21337]:ReturnStatement[21325-21337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21415-24020]:Block[21415-24144]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[21423-21466]:VariableDeclarationStatement[21423-21466]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[21473-21507]:VariableDeclarationStatement[21473-21507]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[21514-22045]:IfStatement[21514-22045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21532-22045]:Block[21532-22045]"
    }, {
      "left" : "int functionType = functionNode.getFunctionType();",
      "right" : "int functionType = functionNode.getFunctionType();",
      "info" : "VariableDeclarationStatement[21542-21592]:VariableDeclarationStatement[21542-21592]"
    }, {
      "left" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "right" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "info" : "IfStatement[21601-21944]:IfStatement[21601-21944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21655-21944]:Block[21655-21944]"
    }, {
      "left" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[21667-21799]:ExpressionStatement[21667-21799]"
    }, {
      "left" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "right" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "info" : "ReturnStatement[21881-21934]:ReturnStatement[21881-21934]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[21953-21971]:ExpressionStatement[21953-21971]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[21980-22003]:ExpressionStatement[21980-22003]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[22012-22037]:ExpressionStatement[22012-22037]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[22052-22088]:VariableDeclarationStatement[22052-22088]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[22095-22126]:VariableDeclarationStatement[22095-22126]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[22133-22688]:IfStatement[22133-22688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22156-22688]:Block[22156-22688]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[22266-22310]:ExpressionStatement[22266-22310]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[22498-22583]:VariableDeclarationStatement[22498-22583]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[22592-22637]:ExpressionStatement[22592-22637]"
    }, {
      "left" : "maybeSetLengthFrom(newName, name);",
      "right" : "maybeSetLengthFrom(newName, name);",
      "info" : "ExpressionStatement[22646-22680]:ExpressionStatement[22646-22680]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[22696-22725]:ExpressionStatement[22696-22725]"
    }, {
      "left" : "Node lp = newNode(Token.PARAM_LIST);",
      "right" : "Node lp = newNode(Token.PARAM_LIST);",
      "info" : "VariableDeclarationStatement[22732-22768]:VariableDeclarationStatement[22732-22768]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[23223-23268]:VariableDeclarationStatement[23223-23268]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[23275-23409]:IfStatement[23275-23409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23295-23346]:Block[23295-23346]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[23305-23338]:ExpressionStatement[23305-23338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23352-23409]:Block[23352-23409]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[23362-23401]:ExpressionStatement[23362-23401]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[23416-23503]:VariableDeclarationStatement[23416-23503]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[23511-23555]:ExpressionStatement[23511-23555]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[23562-23663]:EnhancedForStatement[23562-23663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23609-23663]:Block[23609-23663]"
    }, {
      "left" : "lp.addChildToBack(transform(param));",
      "right" : "lp.addChildToBack(transform(param));",
      "info" : "ExpressionStatement[23619-23655]:ExpressionStatement[23619-23655]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[23670-23694]:ExpressionStatement[23670-23694]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[23702-23752]:VariableDeclarationStatement[23702-23752]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[23933-23959]:ExpressionStatement[24057-24083]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[23966-23996]:ExpressionStatement[24090-24120]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24002-24014]:ReturnStatement[24126-24138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24091-24425]:Block[24215-24549]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[24099-24129]:VariableDeclarationStatement[24223-24253]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[24136-24197]:ExpressionStatement[24260-24321]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[24204-24269]:ExpressionStatement[24328-24393]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[24276-24400]:IfStatement[24400-24524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24317-24400]:Block[24441-24524]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[24327-24392]:ExpressionStatement[24451-24516]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24407-24419]:ReturnStatement[24531-24543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24499-24829]:Block[24623-24953]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[24507-24659]:VariableDeclarationStatement[24631-24783]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[24666-24700]:ExpressionStatement[24790-24824]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[24707-24768]:ExpressionStatement[24831-24892]"
    }, {
      "left" : "maybeSetLengthFrom(n, exprNode);",
      "right" : "maybeSetLengthFrom(n, exprNode);",
      "info" : "ExpressionStatement[24775-24807]:ExpressionStatement[24899-24931]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24814-24823]:ReturnStatement[24938-24947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24904-24976]:Block[25028-25100]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[24912-24970]:ReturnStatement[25036-25094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25031-25105]:Block[25155-25229]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[25039-25099]:ReturnStatement[25163-25223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25186-25832]:Block[25310-25956]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[25194-25227]:VariableDeclarationStatement[25318-25351]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[25234-25251]:VariableDeclarationStatement[25358-25375]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[25258-25274]:VariableDeclarationStatement[25382-25398]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[25281-25739]:EnhancedForStatement[25405-25863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25327-25739]:Block[25451-25863]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[25337-25402]:IfStatement[25461-25526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25355-25402]:Block[25479-25526]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[25367-25392]:ExpressionStatement[25491-25516]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[25411-25448]:ExpressionStatement[25535-25572]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[25458-25491]:ExpressionStatement[25582-25615]"
    }, {
      "left" : "maybeSetLengthFrom(cur, label);",
      "right" : "maybeSetLengthFrom(cur, label);",
      "info" : "ExpressionStatement[25500-25531]:ExpressionStatement[25624-25655]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[25541-25627]:VariableDeclarationStatement[25665-25751]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[25636-25674]:ExpressionStatement[25760-25798]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[25684-25695]:ExpressionStatement[25808-25819]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[25704-25731]:ExpressionStatement[25828-25855]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[25746-25807]:ExpressionStatement[25870-25931]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25814-25826]:ReturnStatement[25938-25950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25884-25934]:Block[26008-26058]"
    }, {
      "left" : "return processName(nameNode, false);",
      "right" : "return processName(nameNode, false);",
      "info" : "ReturnStatement[25892-25928]:ReturnStatement[26016-26052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25990-26391]:Block[26114-26515]"
    }, {
      "left" : "if (asString)",
      "right" : "if (asString)",
      "info" : "IfStatement[25998-26385]:IfStatement[26122-26509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26012-26091]:Block[26136-26215]"
    }, {
      "left" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "info" : "ReturnStatement[26022-26083]:ReturnStatement[26146-26207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26097-26385]:Block[26221-26509]"
    }, {
      "left" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "right" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "info" : "IfStatement[26107-26309]:IfStatement[26231-26433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26156-26309]:Block[26280-26433]"
    }, {
      "left" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[26168-26299]:ExpressionStatement[26292-26423]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[26318-26377]:ReturnStatement[26442-26501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26493-26580]:Block[26617-26704]"
    }, {
      "left" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "right" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "info" : "ReturnStatement[26501-26574]:ReturnStatement[26625-26698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26650-26701]:Block[26774-26825]"
    }, {
      "left" : "return processFunctionCall(exprNode);",
      "right" : "return processFunctionCall(exprNode);",
      "info" : "ReturnStatement[26658-26695]:ReturnStatement[26782-26819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26774-26834]:Block[26898-26958]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[26782-26828]:ReturnStatement[26906-26952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26907-28063]:Block[27031-28187]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[26915-27007]:IfStatement[27039-27131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26950-27007]:Block[27074-27131]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[26960-26999]:ExpressionStatement[27084-27123]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[27015-27052]:VariableDeclarationStatement[27139-27176]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[27059-28038]:EnhancedForStatement[27183-28162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27111-28038]:Block[27235-28162]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[27121-27370]:IfStatement[27245-27494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27174-27370]:Block[27298-27494]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[27186-27360]:IfStatement[27310-27484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27205-27270]:Block[27329-27394]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[27219-27236]:ExpressionStatement[27343-27360]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27249-27258]:ContinueStatement[27373-27382]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[27276-27360]:IfStatement[27400-27484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27295-27360]:Block[27419-27484]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[27309-27326]:ExpressionStatement[27433-27450]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27339-27348]:ContinueStatement[27463-27472]"
    }, {
      "left" : "Node key = transformAsString(el.getLeft());",
      "right" : "Node key = transformAsString(el.getLeft());",
      "info" : "VariableDeclarationStatement[27380-27423]:VariableDeclarationStatement[27504-27547]"
    }, {
      "left" : "Node value = transform(el.getRight());",
      "right" : "Node value = transform(el.getRight());",
      "info" : "VariableDeclarationStatement[27432-27470]:VariableDeclarationStatement[27556-27594]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[27479-27960]:IfStatement[27603-28084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27498-27716]:Block[27622-27840]"
    }, {
      "left" : "key.setType(Token.GETTER_DEF);",
      "right" : "key.setType(Token.GETTER_DEF);",
      "info" : "ExpressionStatement[27510-27540]:ExpressionStatement[27634-27664]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[27551-27596]:ExpressionStatement[27675-27720]"
    }, {
      "left" : "if (getFnParamNode(value).hasChildren())",
      "right" : "if (getFnParamNode(value).hasChildren())",
      "info" : "IfStatement[27607-27706]:IfStatement[27731-27830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27648-27706]:Block[27772-27830]"
    }, {
      "left" : "reportGetterParam(el.getLeft());",
      "right" : "reportGetterParam(el.getLeft());",
      "info" : "ExpressionStatement[27662-27694]:ExpressionStatement[27786-27818]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[27722-27960]:IfStatement[27846-28084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27741-27960]:Block[27865-28084]"
    }, {
      "left" : "key.setType(Token.SETTER_DEF);",
      "right" : "key.setType(Token.SETTER_DEF);",
      "info" : "ExpressionStatement[27753-27783]:ExpressionStatement[27877-27907]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[27794-27839]:ExpressionStatement[27918-27963]"
    }, {
      "left" : "if (!getFnParamNode(value).hasOneChild())",
      "right" : "if (!getFnParamNode(value).hasOneChild())",
      "info" : "IfStatement[27850-27950]:IfStatement[27974-28074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27892-27950]:Block[28016-28074]"
    }, {
      "left" : "reportSetterParam(el.getLeft());",
      "right" : "reportSetterParam(el.getLeft());",
      "info" : "ExpressionStatement[27906-27938]:ExpressionStatement[28030-28062]"
    }, {
      "left" : "key.addChildToFront(value);",
      "right" : "key.addChildToFront(value);",
      "info" : "ExpressionStatement[27969-27996]:ExpressionStatement[28093-28120]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[28005-28030]:ExpressionStatement[28129-28154]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28045-28057]:ReturnStatement[28169-28181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28212-28386]:Block[28336-28510]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.isFunction());",
      "right" : "Preconditions.checkArgument(fnNode.isFunction());",
      "info" : "ExpressionStatement[28286-28335]:ExpressionStatement[28410-28459]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[28341-28381]:ReturnStatement[28465-28505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28462-28520]:Block[28586-28644]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[28470-28514]:ReturnStatement[28594-28638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28610-28750]:Block[28734-28874]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[28618-28666]:VariableDeclarationStatement[28742-28790]"
    }, {
      "left" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "right" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "info" : "ExpressionStatement[28673-28725]:ExpressionStatement[28797-28849]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28732-28744]:ReturnStatement[28856-28868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28815-29148]:Block[28939-29272]"
    }, {
      "left" : "Node leftChild = transform(getNode.getTarget());",
      "right" : "Node leftChild = transform(getNode.getTarget());",
      "info" : "VariableDeclarationStatement[28823-28871]:VariableDeclarationStatement[28947-28995]"
    }, {
      "left" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));",
      "right" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));",
      "info" : "VariableDeclarationStatement[28878-28980]:VariableDeclarationStatement[29002-29104]"
    }, {
      "left" : "newNode.setLineno(leftChild.getLineno());",
      "right" : "newNode.setLineno(leftChild.getLineno());",
      "info" : "ExpressionStatement[28987-29028]:ExpressionStatement[29111-29152]"
    }, {
      "left" : "newNode.setCharno(leftChild.getCharno());",
      "right" : "newNode.setCharno(leftChild.getCharno());",
      "info" : "ExpressionStatement[29035-29076]:ExpressionStatement[29159-29200]"
    }, {
      "left" : "maybeSetLengthFrom(newNode, getNode);",
      "right" : "maybeSetLengthFrom(newNode, getNode);",
      "info" : "ExpressionStatement[29083-29120]:ExpressionStatement[29207-29244]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[29127-29142]:ReturnStatement[29251-29266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29221-29897]:Block[29345-30021]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[29229-29292]:VariableDeclarationStatement[29353-29416]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[29338-29391]:ExpressionStatement[29462-29515]"
    }, {
      "left" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "right" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "info" : "ExpressionStatement[29398-29449]:ExpressionStatement[29522-29573]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[29456-29509]:VariableDeclarationStatement[29580-29633]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[29516-29554]:VariableDeclarationStatement[29640-29678]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[29561-29872]:IfStatement[29685-29996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29600-29872]:Block[29724-29996]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[29610-29648]:VariableDeclarationStatement[29734-29772]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[29727-29772]:ExpressionStatement[29851-29896]"
    }, {
      "left" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "right" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "info" : "ExpressionStatement[29781-29824]:ExpressionStatement[29905-29948]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[29833-29864]:ExpressionStatement[29957-29988]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29879-29891]:ReturnStatement[30003-30015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29976-30175]:Block[30100-30299]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[29984-30018]:VariableDeclarationStatement[30108-30142]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[30025-30150]:IfStatement[30149-30274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30069-30150]:Block[30193-30274]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[30079-30142]:ExpressionStatement[30203-30266]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[30157-30169]:ReturnStatement[30281-30293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30230-30277]:Block[30354-30401]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[30238-30271]:ReturnStatement[30362-30395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30350-31545]:Block[30474-31669]"
    }, {
      "left" : "String value = literalNode.getValue();",
      "right" : "String value = literalNode.getValue();",
      "info" : "VariableDeclarationStatement[30358-30396]:VariableDeclarationStatement[30482-30520]"
    }, {
      "left" : "Node n = newStringNode(value);",
      "right" : "Node n = newStringNode(value);",
      "info" : "VariableDeclarationStatement[30403-30433]:VariableDeclarationStatement[30527-30557]"
    }, {
      "left" : "if (value.indexOf('\\u000B') != -1)",
      "right" : "if (value.indexOf('\\u000B') != -1)",
      "info" : "IfStatement[30440-31523]:IfStatement[30564-31647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30475-31523]:Block[30599-31647]"
    }, {
      "left" : "int start = literalNode.getAbsolutePosition();",
      "right" : "int start = literalNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[31177-31223]:VariableDeclarationStatement[31301-31347]"
    }, {
      "left" : "int end = start + literalNode.getLength();",
      "right" : "int end = start + literalNode.getLength();",
      "info" : "VariableDeclarationStatement[31232-31274]:VariableDeclarationStatement[31356-31398]"
    }, {
      "left" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "right" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "info" : "IfStatement[31283-31515]:IfStatement[31407-31639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31456-31515]:Block[31580-31639]"
    }, {
      "left" : "n.putBooleanProp(Node.SLASH_V, true);",
      "right" : "n.putBooleanProp(Node.SLASH_V, true);",
      "info" : "ExpressionStatement[31468-31505]:ExpressionStatement[31592-31629]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31530-31539]:ReturnStatement[31654-31663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31609-32322]:Block[31733-32446]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[31617-31627]:VariableDeclarationStatement[31741-31751]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[31634-31830]:IfStatement[31758-31954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31660-31713]:Block[31784-31837]"
    }, {
      "left" : "node = newNode(Token.DEFAULT_CASE);",
      "right" : "node = newNode(Token.DEFAULT_CASE);",
      "info" : "ExpressionStatement[31670-31705]:ExpressionStatement[31794-31829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31719-31830]:Block[31843-31954]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[31729-31769]:VariableDeclarationStatement[31853-31893]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[31778-31822]:ExpressionStatement[31902-31946]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[31837-31871]:VariableDeclarationStatement[31961-31995]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[31878-31932]:ExpressionStatement[32002-32056]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[31939-31977]:ExpressionStatement[32063-32101]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[31984-32049]:ExpressionStatement[32108-32173]"
    }, {
      "left" : "maybeSetLengthFrom(block, caseNode);",
      "right" : "maybeSetLengthFrom(block, caseNode);",
      "info" : "ExpressionStatement[32056-32092]:ExpressionStatement[32180-32216]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[32099-32263]:IfStatement[32223-32387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32137-32263]:Block[32261-32387]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[32147-32255]:EnhancedForStatement[32271-32379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32194-32255]:Block[32318-32379]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[32206-32245]:ExpressionStatement[32330-32369]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[32270-32297]:ExpressionStatement[32394-32421]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32304-32316]:ReturnStatement[32428-32440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32401-32630]:Block[32525-32754]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[32409-32495]:VariableDeclarationStatement[32533-32619]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[32502-32605]:EnhancedForStatement[32626-32729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32549-32605]:Block[32673-32729]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[32559-32597]:ExpressionStatement[32683-32721]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32612-32624]:ReturnStatement[32736-32748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32707-32801]:Block[32831-32925]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[32715-32795]:ReturnStatement[32839-32919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32874-33986]:Block[32998-34110]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[32882-32968]:VariableDeclarationStatement[33006-33092]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[32975-33009]:VariableDeclarationStatement[33099-33133]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[33016-33040]:VariableDeclarationStatement[33140-33164]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[33048-33400]:EnhancedForStatement[33172-33524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33103-33400]:Block[33227-33524]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[33204-33347]:IfStatement[33328-33471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33226-33347]:Block[33350-33471]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[33238-33270]:ExpressionStatement[33362-33394]"
    }, {
      "left" : "maybeSetLengthFrom(block, cc);",
      "right" : "maybeSetLengthFrom(block, cc);",
      "info" : "ExpressionStatement[33281-33311]:ExpressionStatement[33405-33435]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[33322-33337]:ExpressionStatement[33446-33461]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[33356-33392]:ExpressionStatement[33480-33516]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[33407-33434]:ExpressionStatement[33531-33558]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[33442-33497]:VariableDeclarationStatement[33566-33621]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[33504-33598]:IfStatement[33628-33722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33530-33598]:Block[33654-33722]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[33540-33590]:ExpressionStatement[33664-33714]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[33801-33960]:IfStatement[33925-34084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33851-33960]:Block[33975-34084]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[33861-33903]:ExpressionStatement[33985-34027]"
    }, {
      "left" : "maybeSetLengthFrom(block, finallyBlock);",
      "right" : "maybeSetLengthFrom(block, finallyBlock);",
      "info" : "ExpressionStatement[33912-33952]:ExpressionStatement[34036-34076]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[33968-33980]:ReturnStatement[34092-34104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34060-35254]:Block[34184-35378]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[34068-34118]:VariableDeclarationStatement[34192-34242]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[34125-34173]:VariableDeclarationStatement[34249-34297]"
    }, {
      "left" : "if (type == Token.NEG && operand.isNumber())",
      "right" : "if (type == Token.NEG && operand.isNumber())",
      "info" : "IfStatement[34180-35248]:IfStatement[34304-35372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34225-34307]:Block[34349-34431]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[34235-34275]:ExpressionStatement[34359-34399]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[34284-34299]:ReturnStatement[34408-34423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34313-35248]:Block[34437-35372]"
    }, {
      "left" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "right" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "info" : "IfStatement[34323-35071]:IfStatement[34447-35195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34459-34685]:Block[34583-34809]"
    }, {
      "left" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "right" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "info" : "VariableDeclarationStatement[34471-34556]:VariableDeclarationStatement[34595-34680]"
    }, {
      "left" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34567-34675]:ExpressionStatement[34691-34799]"
    }, {
      "left" : "if (type == Token.INC || type == Token.DEC)",
      "right" : "if (type == Token.INC || type == Token.DEC)",
      "info" : "IfStatement[34692-35071]:IfStatement[34816-35195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34736-35071]:Block[34860-35195]"
    }, {
      "left" : "if (!validAssignmentTarget(operand))",
      "right" : "if (!validAssignmentTarget(operand))",
      "info" : "IfStatement[34748-35061]:IfStatement[34872-35185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34785-35061]:Block[34909-35185]"
    }, {
      "left" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "right" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "info" : "VariableDeclarationStatement[34799-34922]:VariableDeclarationStatement[34923-35046]"
    }, {
      "left" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34935-35049]:ExpressionStatement[35059-35173]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[35081-35116]:VariableDeclarationStatement[35205-35240]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[35125-35219]:IfStatement[35249-35343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35151-35219]:Block[35275-35343]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[35163-35209]:ExpressionStatement[35287-35333]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[35228-35240]:ReturnStatement[35352-35364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35311-35484]:Block[35435-35608]"
    }, {
      "left" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "right" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "info" : "SwitchStatement[35319-35458]:SwitchStatement[35443-35582]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[35355-35371]:SwitchCase[35479-35495]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[35380-35399]:SwitchCase[35504-35523]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[35408-35427]:SwitchCase[35532-35551]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35438-35450]:ReturnStatement[35562-35574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35465-35478]:ReturnStatement[35589-35602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35573-35947]:Block[35697-36071]"
    }, {
      "left" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "right" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "info" : "IfStatement[35581-35755]:IfStatement[35705-35879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35700-35755]:Block[35824-35879]"
    }, {
      "left" : "processIllegalToken(declarationNode);",
      "right" : "processIllegalToken(declarationNode);",
      "info" : "ExpressionStatement[35710-35747]:ExpressionStatement[35834-35871]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[35763-35794]:VariableDeclarationStatement[35887-35918]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[35801-35922]:EnhancedForStatement[35925-36046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35866-35922]:Block[35990-36046]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[35876-35914]:ExpressionStatement[36000-36038]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[35929-35941]:ReturnStatement[36053-36065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36036-36294]:Block[36160-36418]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[36044-36095]:VariableDeclarationStatement[36168-36219]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[36102-36269]:IfStatement[36226-36393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36148-36269]:Block[36272-36393]"
    }, {
      "left" : "Node initalizer = transform(initializerNode.getInitializer());",
      "right" : "Node initalizer = transform(initializerNode.getInitializer());",
      "info" : "VariableDeclarationStatement[36158-36220]:VariableDeclarationStatement[36282-36344]"
    }, {
      "left" : "node.addChildToBack(initalizer);",
      "right" : "node.addChildToBack(initalizer);",
      "info" : "ExpressionStatement[36229-36261]:ExpressionStatement[36353-36385]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[36276-36288]:ReturnStatement[36400-36412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36356-36501]:Block[36480-36625]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[36364-36495]:ReturnStatement[36488-36619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36576-36736]:Block[36700-36860]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[36584-36730]:ReturnStatement[36708-36854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36795-37049]:Block[36919-37173]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[36803-37008]:ExpressionStatement[36927-37132]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[37015-37043]:ReturnStatement[37139-37167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37100-37240]:Block[37224-37364]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37108-37234]:ExpressionStatement[37232-37358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37278-37430]:Block[37402-37554]"
    }, {
      "left" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37286-37424]:ExpressionStatement[37410-37548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37468-37620]:Block[37592-37744]"
    }, {
      "left" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37476-37614]:ExpressionStatement[37600-37738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37663-37800]:Block[37787-37924]"
    }, {
      "left" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37671-37794]:ExpressionStatement[37795-37918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37843-37988]:Block[37967-38112]"
    }, {
      "left" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37851-37982]:ExpressionStatement[37975-38106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38045-45660]:Block[38169-45784]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[38051-45569]:SwitchStatement[38175-45693]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "right" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "info" : "SwitchCase[38074-38125]:SwitchCase[38198-38249]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[38134-38154]:ReturnStatement[38258-38278]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "info" : "SwitchCase[38161-38211]:SwitchCase[38285-38335]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[38220-38239]:ReturnStatement[38344-38363]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "info" : "SwitchCase[38246-38297]:SwitchCase[38370-38421]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[38306-38326]:ReturnStatement[38430-38450]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "info" : "SwitchCase[38333-38384]:SwitchCase[38457-38508]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[38393-38413]:ReturnStatement[38517-38537]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EQ:",
      "right" : "case com.google.javascript.rhino.head.Token.EQ:",
      "info" : "SwitchCase[38420-38467]:SwitchCase[38544-38591]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[38476-38492]:ReturnStatement[38600-38616]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NE:",
      "right" : "case com.google.javascript.rhino.head.Token.NE:",
      "info" : "SwitchCase[38499-38546]:SwitchCase[38623-38670]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[38555-38571]:ReturnStatement[38679-38695]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LT:",
      "right" : "case com.google.javascript.rhino.head.Token.LT:",
      "info" : "SwitchCase[38578-38625]:SwitchCase[38702-38749]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[38634-38650]:ReturnStatement[38758-38774]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LE:",
      "right" : "case com.google.javascript.rhino.head.Token.LE:",
      "info" : "SwitchCase[38657-38704]:SwitchCase[38781-38828]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[38713-38729]:ReturnStatement[38837-38853]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GT:",
      "right" : "case com.google.javascript.rhino.head.Token.GT:",
      "info" : "SwitchCase[38736-38783]:SwitchCase[38860-38907]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[38792-38808]:ReturnStatement[38916-38932]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GE:",
      "right" : "case com.google.javascript.rhino.head.Token.GE:",
      "info" : "SwitchCase[38815-38862]:SwitchCase[38939-38986]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[38871-38887]:ReturnStatement[38995-39011]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.LSH:",
      "info" : "SwitchCase[38894-38942]:SwitchCase[39018-39066]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[38951-38968]:ReturnStatement[39075-39092]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.RSH:",
      "info" : "SwitchCase[38975-39023]:SwitchCase[39099-39147]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[39032-39049]:ReturnStatement[39156-39173]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.URSH:",
      "info" : "SwitchCase[39056-39105]:SwitchCase[39180-39229]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[39114-39132]:ReturnStatement[39238-39256]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ADD:",
      "info" : "SwitchCase[39139-39187]:SwitchCase[39263-39311]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[39196-39213]:ReturnStatement[39320-39337]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.SUB:",
      "info" : "SwitchCase[39220-39268]:SwitchCase[39344-39392]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[39277-39294]:ReturnStatement[39401-39418]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.MUL:",
      "info" : "SwitchCase[39301-39349]:SwitchCase[39425-39473]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[39358-39375]:ReturnStatement[39482-39499]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.DIV:",
      "info" : "SwitchCase[39382-39430]:SwitchCase[39506-39554]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[39439-39456]:ReturnStatement[39563-39580]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.MOD:",
      "info" : "SwitchCase[39463-39511]:SwitchCase[39587-39635]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[39520-39537]:ReturnStatement[39644-39661]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NOT:",
      "right" : "case com.google.javascript.rhino.head.Token.NOT:",
      "info" : "SwitchCase[39544-39592]:SwitchCase[39668-39716]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[39601-39618]:ReturnStatement[39725-39742]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "right" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "info" : "SwitchCase[39625-39676]:SwitchCase[39749-39800]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[39685-39705]:ReturnStatement[39809-39829]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.POS:",
      "right" : "case com.google.javascript.rhino.head.Token.POS:",
      "info" : "SwitchCase[39712-39760]:SwitchCase[39836-39884]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[39769-39786]:ReturnStatement[39893-39910]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEG:",
      "right" : "case com.google.javascript.rhino.head.Token.NEG:",
      "info" : "SwitchCase[39793-39841]:SwitchCase[39917-39965]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[39850-39867]:ReturnStatement[39974-39991]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEW:",
      "right" : "case com.google.javascript.rhino.head.Token.NEW:",
      "info" : "SwitchCase[39874-39922]:SwitchCase[39998-40046]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[39931-39948]:ReturnStatement[40055-40072]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "info" : "SwitchCase[39955-40007]:SwitchCase[40079-40131]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[40016-40037]:ReturnStatement[40140-40161]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "info" : "SwitchCase[40044-40095]:SwitchCase[40168-40219]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[40104-40124]:ReturnStatement[40228-40248]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "info" : "SwitchCase[40131-40183]:SwitchCase[40255-40307]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[40192-40213]:ReturnStatement[40316-40337]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "right" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "info" : "SwitchCase[40220-40272]:SwitchCase[40344-40396]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[40281-40302]:ReturnStatement[40405-40426]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CALL:",
      "right" : "case com.google.javascript.rhino.head.Token.CALL:",
      "info" : "SwitchCase[40309-40358]:SwitchCase[40433-40482]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[40367-40385]:ReturnStatement[40491-40509]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NAME:",
      "right" : "case com.google.javascript.rhino.head.Token.NAME:",
      "info" : "SwitchCase[40392-40441]:SwitchCase[40516-40565]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[40450-40468]:ReturnStatement[40574-40592]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "right" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "info" : "SwitchCase[40475-40526]:SwitchCase[40599-40650]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[40535-40555]:ReturnStatement[40659-40679]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.STRING:",
      "right" : "case com.google.javascript.rhino.head.Token.STRING:",
      "info" : "SwitchCase[40562-40613]:SwitchCase[40686-40737]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[40622-40642]:ReturnStatement[40746-40766]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NULL:",
      "right" : "case com.google.javascript.rhino.head.Token.NULL:",
      "info" : "SwitchCase[40649-40698]:SwitchCase[40773-40822]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[40707-40725]:ReturnStatement[40831-40849]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THIS:",
      "right" : "case com.google.javascript.rhino.head.Token.THIS:",
      "info" : "SwitchCase[40732-40781]:SwitchCase[40856-40905]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[40790-40808]:ReturnStatement[40914-40932]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "right" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "info" : "SwitchCase[40815-40865]:SwitchCase[40939-40989]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[40874-40893]:ReturnStatement[40998-41017]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "right" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "info" : "SwitchCase[40900-40949]:SwitchCase[41024-41073]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[40958-40976]:ReturnStatement[41082-41100]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "right" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "info" : "SwitchCase[40983-41032]:SwitchCase[41107-41156]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[41041-41059]:ReturnStatement[41165-41183]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "right" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "info" : "SwitchCase[41066-41115]:SwitchCase[41190-41239]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[41124-41142]:ReturnStatement[41248-41266]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "right" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "info" : "SwitchCase[41149-41200]:SwitchCase[41273-41324]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[41209-41229]:ReturnStatement[41333-41353]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THROW:",
      "right" : "case com.google.javascript.rhino.head.Token.THROW:",
      "info" : "SwitchCase[41236-41286]:SwitchCase[41360-41410]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[41295-41314]:ReturnStatement[41419-41438]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IN:",
      "right" : "case com.google.javascript.rhino.head.Token.IN:",
      "info" : "SwitchCase[41321-41368]:SwitchCase[41445-41492]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[41377-41393]:ReturnStatement[41501-41517]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "info" : "SwitchCase[41400-41455]:SwitchCase[41524-41579]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[41464-41488]:ReturnStatement[41588-41612]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "info" : "SwitchCase[41495-41548]:SwitchCase[41619-41672]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[41557-41579]:ReturnStatement[41681-41703]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "info" : "SwitchCase[41586-41640]:SwitchCase[41710-41764]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[41649-41672]:ReturnStatement[41773-41796]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRY:",
      "right" : "case com.google.javascript.rhino.head.Token.TRY:",
      "info" : "SwitchCase[41679-41727]:SwitchCase[41803-41851]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[41736-41753]:ReturnStatement[41860-41877]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LP:",
      "right" : "case com.google.javascript.rhino.head.Token.LP:",
      "info" : "SwitchCase[41804-41851]:SwitchCase[41928-41975]"
    }, {
      "left" : "return Token.PARAM_LIST;",
      "right" : "return Token.PARAM_LIST;",
      "info" : "ReturnStatement[41860-41884]:ReturnStatement[41984-42008]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "right" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "info" : "SwitchCase[41891-41941]:SwitchCase[42015-42065]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[41950-41969]:ReturnStatement[42074-42093]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "info" : "SwitchCase[41976-42027]:SwitchCase[42100-42151]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[42036-42056]:ReturnStatement[42160-42180]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[42063-42120]:SwitchCase[42187-42244]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[42129-42155]:ReturnStatement[42253-42279]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[42162-42220]:SwitchCase[42286-42344]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[42229-42256]:ReturnStatement[42353-42380]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[42263-42321]:SwitchCase[42387-42445]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[42330-42357]:ReturnStatement[42454-42481]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[42364-42419]:SwitchCase[42488-42543]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[42428-42452]:ReturnStatement[42552-42576]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[42459-42514]:SwitchCase[42583-42638]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[42523-42547]:ReturnStatement[42647-42671]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[42554-42610]:SwitchCase[42678-42734]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[42619-42644]:ReturnStatement[42743-42768]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[42651-42706]:SwitchCase[42775-42830]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[42715-42739]:ReturnStatement[42839-42863]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[42746-42801]:SwitchCase[42870-42925]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[42810-42834]:ReturnStatement[42934-42958]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[42841-42896]:SwitchCase[42965-43020]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[42905-42929]:ReturnStatement[43029-43053]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[42936-42991]:SwitchCase[43060-43115]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[43000-43024]:ReturnStatement[43124-43148]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[43031-43086]:SwitchCase[43155-43210]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[43095-43119]:ReturnStatement[43219-43243]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "right" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "info" : "SwitchCase[43126-43175]:SwitchCase[43250-43299]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[43184-43202]:ReturnStatement[43308-43326]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OR:",
      "right" : "case com.google.javascript.rhino.head.Token.OR:",
      "info" : "SwitchCase[43209-43256]:SwitchCase[43333-43380]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[43265-43281]:ReturnStatement[43389-43405]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.AND:",
      "right" : "case com.google.javascript.rhino.head.Token.AND:",
      "info" : "SwitchCase[43288-43336]:SwitchCase[43412-43460]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[43345-43362]:ReturnStatement[43469-43486]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INC:",
      "right" : "case com.google.javascript.rhino.head.Token.INC:",
      "info" : "SwitchCase[43369-43417]:SwitchCase[43493-43541]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[43426-43443]:ReturnStatement[43550-43567]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEC:",
      "right" : "case com.google.javascript.rhino.head.Token.DEC:",
      "info" : "SwitchCase[43450-43498]:SwitchCase[43574-43622]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[43507-43524]:ReturnStatement[43631-43648]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "right" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "info" : "SwitchCase[43531-43584]:SwitchCase[43655-43708]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[43593-43615]:ReturnStatement[43717-43739]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IF:",
      "right" : "case com.google.javascript.rhino.head.Token.IF:",
      "info" : "SwitchCase[43622-43669]:SwitchCase[43746-43793]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[43678-43694]:ReturnStatement[43802-43818]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "right" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "info" : "SwitchCase[43701-43752]:SwitchCase[43825-43876]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[43761-43781]:ReturnStatement[43885-43905]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CASE:",
      "right" : "case com.google.javascript.rhino.head.Token.CASE:",
      "info" : "SwitchCase[43788-43837]:SwitchCase[43912-43961]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[43846-43864]:ReturnStatement[43970-43988]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "right" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "info" : "SwitchCase[43871-43923]:SwitchCase[43995-44047]"
    }, {
      "left" : "return Token.DEFAULT_CASE;",
      "right" : "return Token.DEFAULT_CASE;",
      "info" : "ReturnStatement[43932-43958]:ReturnStatement[44056-44082]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "right" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "info" : "SwitchCase[43965-44015]:SwitchCase[44089-44139]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[44024-44043]:ReturnStatement[44148-44167]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DO:",
      "right" : "case com.google.javascript.rhino.head.Token.DO:",
      "info" : "SwitchCase[44050-44097]:SwitchCase[44174-44221]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[44106-44122]:ReturnStatement[44230-44246]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FOR:",
      "right" : "case com.google.javascript.rhino.head.Token.FOR:",
      "info" : "SwitchCase[44129-44177]:SwitchCase[44253-44301]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[44186-44203]:ReturnStatement[44310-44327]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "right" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "info" : "SwitchCase[44210-44260]:SwitchCase[44334-44384]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[44269-44288]:ReturnStatement[44393-44412]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "right" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "info" : "SwitchCase[44295-44348]:SwitchCase[44419-44472]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[44357-44379]:ReturnStatement[44481-44503]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VAR:",
      "right" : "case com.google.javascript.rhino.head.Token.VAR:",
      "info" : "SwitchCase[44386-44434]:SwitchCase[44510-44558]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[44443-44460]:ReturnStatement[44567-44584]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WITH:",
      "right" : "case com.google.javascript.rhino.head.Token.WITH:",
      "info" : "SwitchCase[44467-44516]:SwitchCase[44591-44640]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[44525-44543]:ReturnStatement[44649-44667]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "right" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "info" : "SwitchCase[44550-44600]:SwitchCase[44674-44724]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[44609-44628]:ReturnStatement[44733-44752]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.VOID:",
      "info" : "SwitchCase[44635-44684]:SwitchCase[44759-44808]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[44693-44711]:ReturnStatement[44817-44835]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "right" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "info" : "SwitchCase[44718-44768]:SwitchCase[44842-44892]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[44777-44796]:ReturnStatement[44901-44920]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "right" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "info" : "SwitchCase[44803-44853]:SwitchCase[44927-44977]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[44862-44881]:ReturnStatement[44986-45005]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "right" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "info" : "SwitchCase[44888-44938]:SwitchCase[45012-45062]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[44947-44966]:ReturnStatement[45071-45090]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "info" : "SwitchCase[44973-45027]:SwitchCase[45097-45151]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "info" : "SwitchCase[45034-45090]:SwitchCase[45158-45214]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[45099-45124]:ReturnStatement[45223-45248]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "right" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "info" : "SwitchCase[45131-45182]:SwitchCase[45255-45306]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[45191-45211]:ReturnStatement[45315-45335]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GET:",
      "right" : "case com.google.javascript.rhino.head.Token.GET:",
      "info" : "SwitchCase[45218-45266]:SwitchCase[45342-45390]"
    }, {
      "left" : "return Token.GETTER_DEF;",
      "right" : "return Token.GETTER_DEF;",
      "info" : "ReturnStatement[45275-45299]:ReturnStatement[45399-45423]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SET:",
      "right" : "case com.google.javascript.rhino.head.Token.SET:",
      "info" : "SwitchCase[45306-45354]:SwitchCase[45430-45478]"
    }, {
      "left" : "return Token.SETTER_DEF;",
      "right" : "return Token.SETTER_DEF;",
      "info" : "ReturnStatement[45363-45387]:ReturnStatement[45487-45511]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONST:",
      "right" : "case com.google.javascript.rhino.head.Token.CONST:",
      "info" : "SwitchCase[45394-45444]:SwitchCase[45518-45568]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[45453-45472]:ReturnStatement[45577-45596]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "right" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "info" : "SwitchCase[45479-45532]:SwitchCase[45603-45656]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[45541-45563]:ReturnStatement[45665-45687]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[45601-45656]:ThrowStatement[45725-45780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45767-45828]:Block[45891-45952]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45773-45824]:ReturnStatement[45897-45948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45876-45945]:Block[46000-46069]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45882-45941]:ReturnStatement[46006-46065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46006-46083]:Block[46130-46207]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46012-46079]:ReturnStatement[46136-46203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46157-46242]:Block[46281-46366]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46163-46238]:ReturnStatement[46287-46362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46287-46350]:Block[46411-46474]"
    }, {
      "left" : "return IR.string(value).clonePropsFrom(templateNode);",
      "right" : "return IR.string(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46293-46346]:ReturnStatement[46417-46470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46405-46479]:Block[46529-46603]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46411-46475]:ReturnStatement[46535-46599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46524-46587]:Block[46648-46711]"
    }, {
      "left" : "return IR.number(value).clonePropsFrom(templateNode);",
      "right" : "return IR.number(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46530-46583]:ReturnStatement[46654-46707]"
    } ]
  },
  "interFileMappings" : { }
}