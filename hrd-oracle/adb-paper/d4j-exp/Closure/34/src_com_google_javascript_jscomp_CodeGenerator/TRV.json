{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "right" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "info" : "FieldDeclaration[1219-1292]:FieldDeclaration[1219-1292]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1296-1435]:FieldDeclaration[1296-1435]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1439-1469]:FieldDeclaration[1439-1469]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1473-1523]:FieldDeclaration[1473-1523]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1527-2087]:MethodDeclaration[1527-2087]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[2091-2159]:MethodDeclaration[2091-2159]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2163-2278]:MethodDeclaration[2163-2278]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2282-2325]:MethodDeclaration[2282-2325]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2329-2432]:MethodDeclaration[2329-2432]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2436-2485]:MethodDeclaration[2436-2485]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[22567-22828]:MethodDeclaration[22538-22799]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[22832-23185]:MethodDeclaration[22803-23156]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[23189-23398]:MethodDeclaration[23160-23369]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[23402-25499]:MethodDeclaration[23373-25470]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[25503-26359]:MethodDeclaration[25474-26330]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[26363-26695]:MethodDeclaration[26334-26666]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[26699-26782]:MethodDeclaration[26670-26753]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[26786-26925]:MethodDeclaration[26757-26896]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[26929-27353]:MethodDeclaration[26900-27324]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[27357-28043]:MethodDeclaration[27328-28014]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[28047-28149]:MethodDeclaration[28018-28120]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[28153-28257]:MethodDeclaration[28124-28228]"
    }, {
      "left" : "private void addJsString(Node n)",
      "right" : "private void addJsString(Node n)",
      "info" : "MethodDeclaration[28261-28752]:MethodDeclaration[28232-28723]"
    }, {
      "left" : "private String jsString(String s, boolean useSlashV)",
      "right" : "private String jsString(String s, boolean useSlashV)",
      "info" : "MethodDeclaration[28756-29539]:MethodDeclaration[28727-29510]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[29543-29734]:MethodDeclaration[29514-29705]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[29738-29950]:MethodDeclaration[29709-29921]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[30079-30155]:MethodDeclaration[30050-30126]"
    }, {
      "left" : "private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV)",
      "right" : "private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV)",
      "info" : "MethodDeclaration[30159-33145]:MethodDeclaration[30130-33116]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[33149-33839]:MethodDeclaration[33120-33810]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[33842-34330]:MethodDeclaration[33813-34301]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[34334-34735]:MethodDeclaration[34305-34706]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[34940-35342]:EnumDeclaration[34911-35313]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[35346-35537]:MethodDeclaration[35317-35508]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35541-35876]:MethodDeclaration[35512-35847]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35880-36317]:MethodDeclaration[35851-36288]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[36321-36671]:MethodDeclaration[36292-36642]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[36675-37761]:MethodDeclaration[36646-37732]"
    } ],
    "mappings" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1527-1540]:SimpleName[1527-1540]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1548-1569]:SingleVariableDeclaration[1548-1569]"
    }, {
      "left" : "Charset outputCharset",
      "right" : "Charset outputCharset",
      "info" : "SingleVariableDeclaration[1571-1592]:SingleVariableDeclaration[1571-1592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1594-2087]:Block[1594-2087]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1600-1614]:ExpressionStatement[1600-1614]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1619-2083]:IfStatement[1619-2083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1684-2008]:Block[1684-2008]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1969-2002]:ExpressionStatement[1969-2002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2014-2083]:Block[2014-2083]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2022-2077]:ExpressionStatement[2022-2077]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[2091-2104]:SimpleName[2091-2104]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2105-2126]:SingleVariableDeclaration[2105-2126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2128-2159]:Block[2128-2159]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[2134-2155]:ConstructorInvocation[2134-2155]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2221-2227]:Modifier[2221-2227]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2228-2232]:PrimitiveType[2228-2232]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[2233-2244]:SimpleName[2233-2244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2247-2278]:Block[2247-2278]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2253-2274]:ExpressionStatement[2253-2274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2282-2286]:PrimitiveType[2282-2286]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2287-2290]:SimpleName[2287-2290]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2291-2301]:SingleVariableDeclaration[2291-2301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2303-2325]:Block[2303-2325]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2309-2321]:ExpressionStatement[2309-2321]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2329-2336]:Modifier[2329-2336]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2337-2341]:PrimitiveType[2337-2341]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2342-2355]:SimpleName[2342-2355]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2356-2373]:SingleVariableDeclaration[2356-2373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2375-2432]:Block[2375-2432]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2381-2428]:ExpressionStatement[2381-2428]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2436-2440]:PrimitiveType[2436-2440]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2441-2444]:SimpleName[2441-2444]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2445-2451]:SingleVariableDeclaration[2445-2451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2453-2485]:Block[2453-2485]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2459-2481]:ExpressionStatement[2459-2481]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22567-22573]:Modifier[22538-22544]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22574-22581]:PrimitiveType[22545-22552]"
    }, {
      "left" : "isSimpleNumber",
      "right" : "isSimpleNumber",
      "info" : "SimpleName[22582-22596]:SimpleName[22553-22567]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22597-22605]:SingleVariableDeclaration[22568-22576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22607-22828]:Block[22578-22799]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[22613-22634]:VariableDeclarationStatement[22584-22605]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[22639-22782]:ForStatement[22610-22753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22681-22782]:Block[22652-22753]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[22689-22714]:VariableDeclarationStatement[22660-22685]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[22721-22776]:IfStatement[22692-22747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22745-22776]:Block[22716-22747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22755-22768]:ReturnStatement[22726-22739]"
    }, {
      "left" : "return len > 0 && s.charAt(0) != '0';",
      "right" : "return len > 0 && s.charAt(0) != '0';",
      "info" : "ReturnStatement[22787-22824]:ReturnStatement[22758-22795]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22832-22838]:Modifier[22803-22809]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[22839-22845]:PrimitiveType[22810-22816]"
    }, {
      "left" : "getSimpleNumber",
      "right" : "getSimpleNumber",
      "info" : "SimpleName[22846-22861]:SimpleName[22817-22832]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22862-22870]:SingleVariableDeclaration[22833-22841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22872-23185]:Block[22843-23156]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[22878-23158]:IfStatement[22849-23129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22901-23158]:Block[22872-23129]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22909-23152]:TryStatement[22880-23123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22913-23044]:Block[22884-23015]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[22923-22950]:VariableDeclarationStatement[22894-22921]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[22959-23036]:IfStatement[22930-23007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23005-23036]:Block[22976-23007]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[23017-23026]:ReturnStatement[22988-22997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23077-23152]:Block[23048-23123]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[23163-23181]:ReturnStatement[23134-23152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23252-23259]:Modifier[23223-23230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23260-23267]:PrimitiveType[23231-23238]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[23268-23282]:SimpleName[23239-23253]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23283-23289]:SingleVariableDeclaration[23254-23260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23291-23398]:Block[23262-23369]"
    }, {
      "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[23297-23394]:ReturnStatement[23268-23365]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23675-23682]:Modifier[23646-23653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23683-23687]:PrimitiveType[23654-23658]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[23688-23708]:SimpleName[23659-23679]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23716-23722]:SingleVariableDeclaration[23687-23693]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[23724-23739]:SingleVariableDeclaration[23695-23710]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[23741-23767]:SingleVariableDeclaration[23712-23738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23769-25499]:Block[23740-25470]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[23775-23798]:VariableDeclarationStatement[23746-23769]"
    }, {
      "left" : "if (!allowNonBlockChild && !n.isBlock())",
      "right" : "if (!allowNonBlockChild && !n.isBlock())",
      "info" : "IfStatement[23804-23899]:IfStatement[23775-23870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23845-23899]:Block[23816-23870]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[23853-23893]:ThrowStatement[23824-23864]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[24030-25156]:IfStatement[24001-25127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24047-25156]:Block[24018-25127]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[24055-24095]:VariableDeclarationStatement[24026-24066]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[24102-24355]:IfStatement[24073-24326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24118-24355]:Block[24089-24326]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[24128-24331]:IfStatement[24099-24302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24164-24281]:Block[24135-24252]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24176-24192]:ExpressionStatement[24147-24163]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24203-24271]:ExpressionStatement[24174-24242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24287-24331]:Block[24258-24302]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[24299-24321]:ExpressionStatement[24270-24292]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24340-24347]:ReturnStatement[24311-24318]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[24363-25076]:IfStatement[24334-25047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24379-25076]:Block[24350-25047]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[24547-24597]:VariableDeclarationStatement[24518-24568]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[24606-24665]:VariableDeclarationStatement[24577-24636]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[24674-25068]:IfStatement[24645-25039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24744-24963]:Block[24715-24934]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24756-24772]:ExpressionStatement[24727-24743]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[24783-24825]:ExpressionStatement[24754-24796]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[24836-24856]:ExpressionStatement[24807-24827]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24867-24935]:ExpressionStatement[24838-24906]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24946-24953]:ReturnStatement[24917-24924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24969-25068]:Block[24940-25039]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[25024-25058]:ExpressionStatement[24995-25029]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[25084-25150]:IfStatement[25055-25121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25099-25150]:Block[25070-25121]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[25109-25142]:ExpressionStatement[25080-25113]"
    }, {
      "left" : "if (nodeToProcess.isEmpty())",
      "right" : "if (nodeToProcess.isEmpty())",
      "info" : "IfStatement[25162-25495]:IfStatement[25133-25466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25191-25227]:Block[25162-25198]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[25199-25221]:ExpressionStatement[25170-25192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25233-25495]:Block[25204-25466]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[25241-25269]:ExpressionStatement[25212-25240]"
    }, {
      "left" : "if (nodeToProcess.isVar())",
      "right" : "if (nodeToProcess.isVar())",
      "info" : "IfStatement[25426-25489]:IfStatement[25397-25460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25453-25489]:Block[25424-25460]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[25463-25481]:ExpressionStatement[25434-25452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25596-25603]:Modifier[25567-25574]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25604-25611]:PrimitiveType[25575-25582]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[25612-25636]:SimpleName[25583-25607]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25637-25643]:SingleVariableDeclaration[25608-25614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25645-26359]:Block[25616-26330]"
    }, {
      "left" : "if (n.isLabel())",
      "right" : "if (n.isLabel())",
      "info" : "IfStatement[25651-26355]:IfStatement[25622-26326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25668-26299]:Block[25639-26270]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[25676-25717]:VariableDeclarationStatement[25647-25688]"
    }, {
      "left" : "if (!labeledStatement.isBlock())",
      "right" : "if (!labeledStatement.isBlock())",
      "info" : "IfStatement[25724-26293]:IfStatement[25695-26264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25757-25825]:Block[25728-25796]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[25767-25817]:ReturnStatement[25738-25788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25831-26293]:Block[25802-26264]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[26006-26285]:IfStatement[25977-26256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26044-26124]:Block[26015-26095]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[26056-26114]:ReturnStatement[26027-26085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26130-26285]:Block[26101-26256]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26262-26275]:ReturnStatement[26233-26246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26305-26355]:Block[26276-26326]"
    }, {
      "left" : "return (n.isFunction() || n.isDo());",
      "right" : "return (n.isFunction() || n.isDo());",
      "info" : "ReturnStatement[26313-26349]:ReturnStatement[26284-26320]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26363-26370]:Modifier[26334-26341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26371-26375]:PrimitiveType[26342-26346]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[26376-26383]:SimpleName[26347-26354]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26384-26390]:SingleVariableDeclaration[26355-26361]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[26392-26409]:SingleVariableDeclaration[26363-26380]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[26411-26426]:SingleVariableDeclaration[26382-26397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26428-26695]:Block[26399-26666]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn())))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn())))",
      "info" : "IfStatement[26434-26691]:IfStatement[26405-26662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26564-26655]:Block[26535-26626]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[26572-26581]:ExpressionStatement[26543-26552]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[26588-26633]:ExpressionStatement[26559-26604]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[26640-26649]:ExpressionStatement[26611-26620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26661-26691]:Block[26632-26662]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[26669-26685]:ExpressionStatement[26640-26656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26699-26703]:PrimitiveType[26670-26674]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26704-26711]:SimpleName[26675-26682]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26712-26728]:SingleVariableDeclaration[26683-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26730-26782]:Block[26701-26753]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[26736-26778]:ExpressionStatement[26707-26749]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26786-26790]:PrimitiveType[26757-26761]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26791-26798]:SimpleName[26762-26769]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26799-26815]:SingleVariableDeclaration[26770-26786]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26817-26850]:SingleVariableDeclaration[26788-26821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26852-26925]:Block[26823-26896]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[26858-26921]:ExpressionStatement[26829-26892]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26929-26933]:PrimitiveType[26900-26904]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26934-26941]:SimpleName[26905-26912]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26942-26958]:SingleVariableDeclaration[26913-26929]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26960-26993]:SingleVariableDeclaration[26931-26964]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[27010-27028]:SingleVariableDeclaration[26981-26999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27030-27353]:Block[27001-27324]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27036-27349]:ForStatement[27007-27320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27091-27349]:Block[27062-27320]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[27099-27134]:VariableDeclarationStatement[27070-27105]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[27141-27343]:IfStatement[27112-27314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27154-27230]:Block[27125-27201]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[27164-27222]:ExpressionStatement[27135-27193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27236-27343]:Block[27207-27314]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27246-27265]:ExpressionStatement[27217-27236]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "info" : "ExpressionStatement[27274-27335]:ExpressionStatement[27245-27306]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27708-27712]:PrimitiveType[27679-27683]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[27713-27725]:SimpleName[27684-27696]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27726-27742]:SingleVariableDeclaration[27697-27713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27744-28043]:Block[27715-28014]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[27750-27779]:VariableDeclarationStatement[27721-27750]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27784-27982]:ForStatement[27755-27953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27839-27982]:Block[27810-27953]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[27847-27906]:IfStatement[27818-27877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27869-27906]:Block[27840-27877]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27879-27898]:ExpressionStatement[27850-27869]"
    }, {
      "left" : "addExpr(n, 1, Context.OTHER);",
      "right" : "addExpr(n, 1, Context.OTHER);",
      "info" : "ExpressionStatement[27913-27942]:ExpressionStatement[27884-27913]"
    }, {
      "left" : "lastWasEmpty = n.isEmpty();",
      "right" : "lastWasEmpty = n.isEmpty();",
      "info" : "ExpressionStatement[27949-27976]:ExpressionStatement[27920-27947]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[27988-28039]:IfStatement[27959-28010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28006-28039]:Block[27977-28010]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28014-28033]:ExpressionStatement[27985-28004]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28047-28051]:PrimitiveType[28018-28022]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[28052-28063]:SimpleName[28023-28034]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[28064-28077]:SingleVariableDeclaration[28035-28048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28079-28149]:Block[28050-28120]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[28085-28104]:ExpressionStatement[28056-28075]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[28109-28123]:ExpressionStatement[28080-28094]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[28128-28145]:ExpressionStatement[28099-28116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28153-28157]:PrimitiveType[28124-28128]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[28158-28172]:SimpleName[28129-28143]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28173-28179]:SingleVariableDeclaration[28144-28150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28181-28257]:Block[28152-28228]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[28187-28253]:ForStatement[28158-28224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28232-28253]:Block[28203-28224]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[28240-28247]:ExpressionStatement[28211-28218]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28341-28348]:Modifier[28312-28319]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28349-28353]:PrimitiveType[28320-28324]"
    }, {
      "left" : "addJsString",
      "right" : "addJsString",
      "info" : "SimpleName[28354-28365]:SimpleName[28325-28336]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28366-28372]:SingleVariableDeclaration[28337-28343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28374-28752]:Block[28345-28723]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[28380-28405]:VariableDeclarationStatement[28351-28376]"
    }, {
      "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "info" : "VariableDeclarationStatement[28410-28461]:VariableDeclarationStatement[28381-28432]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[28466-28748]:IfStatement[28437-28719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28481-28535]:Block[28452-28506]"
    }, {
      "left" : "add(jsString(n.getString(), useSlashV));",
      "right" : "add(jsString(n.getString(), useSlashV));",
      "info" : "ExpressionStatement[28489-28529]:ExpressionStatement[28460-28500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28541-28748]:Block[28512-28719]"
    }, {
      "left" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "right" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "info" : "VariableDeclarationStatement[28549-28591]:VariableDeclarationStatement[28520-28562]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[28598-28723]:IfStatement[28569-28694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28618-28723]:Block[28589-28694]"
    }, {
      "left" : "cached = jsString(n.getString(), useSlashV);",
      "right" : "cached = jsString(n.getString(), useSlashV);",
      "info" : "ExpressionStatement[28628-28672]:ExpressionStatement[28599-28643]"
    }, {
      "left" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "right" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "info" : "ExpressionStatement[28681-28715]:ExpressionStatement[28652-28686]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[28730-28742]:ExpressionStatement[28701-28713]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28756-28763]:Modifier[28727-28734]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28764-28770]:SimpleType[28735-28741]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[28771-28779]:SimpleName[28742-28750]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28780-28788]:SingleVariableDeclaration[28751-28759]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[28790-28807]:SingleVariableDeclaration[28761-28778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28809-29539]:Block[28780-29510]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[28815-28844]:VariableDeclarationStatement[28786-28815]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[28917-29071]:ForStatement[28888-29042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28954-29071]:Block[28925-29042]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[28962-29065]:SwitchStatement[28933-29036]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[28993-29002]:SwitchCase[28964-28973]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[29003-29013]:ExpressionStatement[28974-28984]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29014-29020]:BreakStatement[28985-28991]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29029-29039]:SwitchCase[29000-29010]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[29040-29050]:ExpressionStatement[29011-29021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29051-29057]:BreakStatement[29022-29028]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[29077-29109]:VariableDeclarationStatement[29048-29080]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[29114-29125]:VariableDeclarationStatement[29085-29096]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[29130-29427]:IfStatement[29101-29398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29153-29290]:Block[29124-29261]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[29217-29230]:ExpressionStatement[29188-29201]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[29237-29256]:ExpressionStatement[29208-29227]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[29263-29284]:ExpressionStatement[29234-29255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29296-29427]:Block[29267-29398]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[29354-29367]:ExpressionStatement[29325-29338]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[29374-29395]:ExpressionStatement[29345-29366]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[29402-29421]:ExpressionStatement[29373-29392]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);",
      "info" : "ReturnStatement[29433-29535]:ReturnStatement[29404-29506]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29579-29585]:Modifier[29550-29556]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29586-29592]:SimpleType[29557-29563]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[29593-29605]:SimpleName[29564-29576]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29606-29614]:SingleVariableDeclaration[29577-29585]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[29616-29651]:SingleVariableDeclaration[29587-29622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29653-29734]:Block[29624-29705]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false);",
      "info" : "ReturnStatement[29659-29730]:ReturnStatement[29630-29701]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29826-29832]:Modifier[29797-29803]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29833-29839]:SimpleType[29804-29810]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[29840-29868]:SimpleName[29811-29839]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29869-29877]:SingleVariableDeclaration[29840-29848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29879-29950]:Block[29850-29921]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false);",
      "info" : "ReturnStatement[29885-29946]:ReturnStatement[29856-29917]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30079-30085]:Modifier[30050-30056]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30086-30092]:SimpleType[30057-30063]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30093-30105]:SimpleName[30064-30076]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30106-30114]:SingleVariableDeclaration[30077-30085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30116-30155]:Block[30087-30126]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[30122-30151]:ReturnStatement[30093-30122]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30233-30240]:Modifier[30204-30211]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30241-30247]:Modifier[30212-30218]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30248-30254]:SimpleType[30219-30225]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[30255-30264]:SimpleName[30226-30235]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30272-30280]:SingleVariableDeclaration[30243-30251]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[30282-30292]:SingleVariableDeclaration[30253-30263]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[30300-30324]:SingleVariableDeclaration[30271-30295]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[30332-30356]:SingleVariableDeclaration[30303-30327]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[30364-30386]:SingleVariableDeclaration[30335-30357]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[30394-30429]:SingleVariableDeclaration[30365-30400]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[30437-30454]:SingleVariableDeclaration[30408-30425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30456-33145]:Block[30427-33116]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[30462-30515]:VariableDeclarationStatement[30433-30486]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[30520-30537]:ExpressionStatement[30491-30508]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[30542-33093]:ForStatement[30513-33064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30579-33093]:Block[30550-33064]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[30587-30608]:VariableDeclarationStatement[30558-30579]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[30615-33087]:SwitchStatement[30586-33058]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[30636-30646]:SwitchCase[30607-30617]"
    }, {
      "left" : "sb.append(\"\\\\x00\");",
      "right" : "sb.append(\"\\\\x00\");",
      "info" : "ExpressionStatement[30647-30666]:ExpressionStatement[30618-30637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30667-30673]:BreakStatement[30638-30644]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[30682-30696]:SwitchCase[30653-30667]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[30707-30816]:IfStatement[30678-30787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30722-30765]:Block[30693-30736]"
    }, {
      "left" : "sb.append(\"\\\\v\");",
      "right" : "sb.append(\"\\\\v\");",
      "info" : "ExpressionStatement[30736-30753]:ExpressionStatement[30707-30724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30771-30816]:Block[30742-30787]"
    }, {
      "left" : "sb.append(\"\\\\x0B\");",
      "right" : "sb.append(\"\\\\x0B\");",
      "info" : "ExpressionStatement[30785-30804]:ExpressionStatement[30756-30775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30827-30833]:BreakStatement[30798-30804]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[30842-30852]:SwitchCase[30813-30823]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[30853-30870]:ExpressionStatement[30824-30841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30871-30877]:BreakStatement[30842-30848]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[30886-30896]:SwitchCase[30857-30867]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[30897-30914]:ExpressionStatement[30868-30885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30915-30921]:BreakStatement[30886-30892]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[30930-30940]:SwitchCase[30901-30911]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[30941-30958]:ExpressionStatement[30912-30929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30959-30965]:BreakStatement[30930-30936]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[30974-30984]:SwitchCase[30945-30955]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[30985-31012]:ExpressionStatement[30956-30983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31013-31019]:BreakStatement[30984-30990]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[31028-31038]:SwitchCase[30999-31009]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[31039-31068]:ExpressionStatement[31010-31039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31069-31075]:BreakStatement[31040-31046]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[31084-31094]:SwitchCase[31055-31065]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[31095-31124]:ExpressionStatement[31066-31095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31125-31131]:BreakStatement[31096-31102]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[31140-31149]:SwitchCase[31111-31120]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[31222-31461]:IfStatement[31193-31432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31373-31416]:Block[31344-31387]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[31387-31404]:ExpressionStatement[31358-31375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31422-31461]:Block[31393-31432]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31436-31449]:ExpressionStatement[31407-31420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31472-31478]:BreakStatement[31443-31449]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[31487-31496]:SwitchCase[31458-31467]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[31550-31586]:VariableDeclarationStatement[31521-31557]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[31633-31668]:VariableDeclarationStatement[31604-31639]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[31680-32031]:IfStatement[31651-32002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31780-31823]:Block[31751-31794]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31794-31811]:ExpressionStatement[31765-31782]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[31829-32031]:IfStatement[31800-32002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31943-31986]:Block[31914-31957]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31957-31974]:ExpressionStatement[31928-31945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31992-32031]:Block[31963-32002]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32006-32019]:ExpressionStatement[31977-31990]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32042-32048]:BreakStatement[32013-32019]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32057-32065]:SwitchCase[32028-32036]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[32213-33079]:IfStatement[32184-33050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32247-32479]:Block[32218-32450]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[32261-32467]:IfStatement[32232-32438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32300-32343]:Block[32271-32314]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32316-32329]:ExpressionStatement[32287-32300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32349-32467]:Block[32320-32438]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32412-32453]:ExpressionStatement[32383-32424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-33079]:Block[32456-33050]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[32722-33067]:IfStatement[32693-33038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32748-32791]:Block[32719-32762]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32764-32777]:ExpressionStatement[32735-32748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32797-33067]:Block[32768-33038]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[33012-33053]:ExpressionStatement[32983-33024]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[33098-33115]:ExpressionStatement[33069-33086]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[33120-33141]:ReturnStatement[33091-33112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33149-33155]:Modifier[33120-33126]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33156-33162]:SimpleType[33127-33133]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[33163-33179]:SimpleName[33134-33150]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[33180-33188]:SingleVariableDeclaration[33151-33159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33190-33839]:Block[33161-33810]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[33271-33319]:IfStatement[33242-33290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33296-33319]:Block[33267-33290]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[33304-33313]:ReturnStatement[33275-33284]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[33403-33442]:VariableDeclarationStatement[33374-33413]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[33447-33809]:ForStatement[33418-33780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33484-33809]:Block[33455-33780]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[33492-33513]:VariableDeclarationStatement[33463-33484]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[33681-33803]:IfStatement[33652-33774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33707-33738]:Block[33678-33709]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33717-33730]:ExpressionStatement[33688-33701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33744-33803]:Block[33715-33774]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[33754-33795]:ExpressionStatement[33725-33766]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[33814-33835]:ReturnStatement[33785-33806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34008-34015]:Modifier[33979-33986]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34016-34022]:Modifier[33987-33993]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34023-34026]:PrimitiveType[33994-33997]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[34027-34048]:SimpleName[33998-34019]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34049-34055]:SingleVariableDeclaration[34020-34026]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[34057-34069]:SingleVariableDeclaration[34028-34040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34071-34330]:Block[34042-34301]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[34077-34087]:VariableDeclarationStatement[34048-34058]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[34092-34119]:VariableDeclarationStatement[34063-34090]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[34124-34312]:ForStatement[34095-34283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34175-34312]:Block[34146-34283]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[34183-34306]:IfStatement[34154-34277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34200-34260]:Block[34171-34231]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[34210-34252]:ExpressionStatement[34181-34223]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[34266-34306]:IfStatement[34237-34277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34284-34306]:Block[34255-34277]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[34294-34298]:ExpressionStatement[34265-34269]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[34317-34326]:ReturnStatement[34288-34297]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34393-34400]:Modifier[34364-34371]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34401-34407]:Modifier[34372-34378]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34408-34412]:SimpleType[34379-34383]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[34413-34434]:SimpleName[34384-34405]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34435-34441]:SingleVariableDeclaration[34406-34412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34443-34735]:Block[34414-34706]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[34449-34714]:ForStatement[34420-34685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34510-34714]:Block[34481-34685]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[34518-34708]:IfStatement[34489-34679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34535-34657]:Block[34506-34628]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[34545-34584]:VariableDeclarationStatement[34516-34555]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[34593-34649]:IfStatement[34564-34620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34613-34649]:Block[34584-34620]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34625-34639]:ReturnStatement[34596-34610]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[34663-34708]:IfStatement[34634-34679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34681-34708]:Block[34652-34679]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[34691-34700]:ReturnStatement[34662-34671]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34719-34731]:ReturnStatement[34690-34702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35346-35353]:Modifier[35317-35324]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35354-35361]:SimpleType[35325-35332]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[35362-35393]:SimpleName[35333-35364]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[35394-35416]:SingleVariableDeclaration[35365-35387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35418-35537]:Block[35389-35508]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[35424-35533]:ReturnStatement[35395-35504]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35706-35713]:Modifier[35677-35684]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35715-35722]:SimpleType[35686-35693]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[35723-35748]:SimpleName[35694-35719]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[35749-35764]:SingleVariableDeclaration[35720-35735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35766-35876]:Block[35737-35847]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[35772-35872]:ReturnStatement[35743-35843]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36164-36171]:Modifier[36135-36142]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[36173-36180]:SimpleType[36144-36151]"
    }, {
      "left" : "clearContextForNoInOperator",
      "right" : "clearContextForNoInOperator",
      "info" : "SimpleName[36181-36208]:SimpleName[36152-36179]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[36209-36224]:SingleVariableDeclaration[36180-36195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36226-36317]:Block[36197-36288]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[36232-36313]:ReturnStatement[36203-36284]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36395-36402]:Modifier[36366-36373]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36403-36409]:Modifier[36374-36380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36410-36414]:PrimitiveType[36381-36385]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36415-36448]:SimpleName[36386-36419]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[36456-36472]:SingleVariableDeclaration[36427-36443]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[36474-36480]:SingleVariableDeclaration[36445-36451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36482-36671]:Block[36453-36642]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36488-36667]:TryStatement[36459-36638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36492-36547]:Block[36463-36518]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[36500-36541]:ExpressionStatement[36471-36512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36571-36667]:Block[36542-36638]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[36630-36661]:ThrowStatement[36601-36632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36906-36913]:Modifier[36877-36884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36914-36920]:Modifier[36885-36891]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36921-36925]:PrimitiveType[36892-36896]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36926-36959]:SimpleName[36897-36930]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[36967-36980]:SingleVariableDeclaration[36938-36951]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[36982-36996]:SingleVariableDeclaration[36953-36967]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37011-37022]:SimpleType[36982-36993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37023-37761]:Block[36994-37732]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[37029-37533]:IfStatement[37000-37504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37080-37533]:Block[37051-37504]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[37342-37391]:VariableDeclarationStatement[37313-37362]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[37398-37452]:ExpressionStatement[37369-37423]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[37459-37513]:ExpressionStatement[37430-37484]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37520-37527]:ReturnStatement[37491-37498]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[37538-37757]:ExpressionStatement[37509-37728]"
    } ]
  },
  "interFileMappings" : { }
}