{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "TypeDeclaration[1219-10247]:TypeDeclaration[1219-10297]"
    }, {
      "left" : "private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));",
      "right" : "private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));",
      "info" : "FieldDeclaration[1792-1905]:FieldDeclaration[1792-1905]"
    }, {
      "left" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "right" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "info" : "FieldDeclaration[1910-2035]:FieldDeclaration[1910-2035]"
    }, {
      "left" : "private final double relativeThreshold;",
      "right" : "private final double relativeThreshold;",
      "info" : "FieldDeclaration[2040-2122]:FieldDeclaration[2040-2122]"
    }, {
      "left" : "private final double absoluteThreshold;",
      "right" : "private final double absoluteThreshold;",
      "info" : "FieldDeclaration[2127-2209]:FieldDeclaration[2127-2209]"
    }, {
      "left" : "public BrentOptimizer(double rel,\n                          double abs,\n                          ConvergenceChecker<UnivariatePointValuePair> checker)",
      "right" : "public BrentOptimizer(double rel,\n                          double abs,\n                          ConvergenceChecker<UnivariatePointValuePair> checker)",
      "info" : "MethodDeclaration[2215-3437]:MethodDeclaration[2215-3437]"
    }, {
      "left" : "public BrentOptimizer(double rel,\n                          double abs)",
      "right" : "public BrentOptimizer(double rel,\n                          double abs)",
      "info" : "MethodDeclaration[3443-4214]:MethodDeclaration[3443-4214]"
    }, {
      "left" : "protected UnivariatePointValuePair doOptimize()",
      "right" : "protected UnivariatePointValuePair doOptimize()",
      "info" : "MethodDeclaration[4220-9425]:MethodDeclaration[4220-9475]"
    }, {
      "left" : "private UnivariatePointValuePair best(UnivariatePointValuePair a,\n                                          UnivariatePointValuePair b,\n                                          boolean isMinim)",
      "right" : "private UnivariatePointValuePair best(UnivariatePointValuePair a,\n                                          UnivariatePointValuePair b,\n                                          boolean isMinim)",
      "info" : "MethodDeclaration[9431-10245]:MethodDeclaration[9481-10295]"
    } ],
    "mappings" : [
 {
      "left" : "BaseAbstractUnivariateOptimizer",
      "right" : "BaseAbstractUnivariateOptimizer",
      "info" : "SimpleType[1754-1785]:SimpleType[1754-1785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2957-2963]:Modifier[2957-2963]"
    }, {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "SimpleName[2964-2978]:SimpleName[2964-2978]"
    }, {
      "left" : "double rel",
      "right" : "double rel",
      "info" : "SingleVariableDeclaration[2979-2989]:SingleVariableDeclaration[2979-2989]"
    }, {
      "left" : "double abs",
      "right" : "double abs",
      "info" : "SingleVariableDeclaration[3017-3027]:SingleVariableDeclaration[3017-3027]"
    }, {
      "left" : "ConvergenceChecker<UnivariatePointValuePair> checker",
      "right" : "ConvergenceChecker<UnivariatePointValuePair> checker",
      "info" : "SingleVariableDeclaration[3055-3107]:SingleVariableDeclaration[3055-3107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3109-3437]:Block[3109-3437]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[3119-3134]:SuperConstructorInvocation[3119-3134]"
    }, {
      "left" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "right" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "info" : "IfStatement[3144-3273]:IfStatement[3144-3273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3178-3273]:Block[3178-3273]"
    }, {
      "left" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "right" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "info" : "ThrowStatement[3192-3263]:ThrowStatement[3192-3263]"
    }, {
      "left" : "if (abs <= 0)",
      "right" : "if (abs <= 0)",
      "info" : "IfStatement[3282-3364]:IfStatement[3282-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3296-3364]:Block[3296-3364]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(abs);",
      "right" : "throw new NotStrictlyPositiveException(abs);",
      "info" : "ThrowStatement[3310-3354]:ThrowStatement[3310-3354]"
    }, {
      "left" : "relativeThreshold = rel;",
      "right" : "relativeThreshold = rel;",
      "info" : "ExpressionStatement[3374-3398]:ExpressionStatement[3374-3398]"
    }, {
      "left" : "absoluteThreshold = abs;",
      "right" : "absoluteThreshold = abs;",
      "info" : "ExpressionStatement[3407-3431]:ExpressionStatement[3407-3431]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4105-4111]:Modifier[4105-4111]"
    }, {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "SimpleName[4112-4126]:SimpleName[4112-4126]"
    }, {
      "left" : "double rel",
      "right" : "double rel",
      "info" : "SingleVariableDeclaration[4127-4137]:SingleVariableDeclaration[4127-4137]"
    }, {
      "left" : "double abs",
      "right" : "double abs",
      "info" : "SingleVariableDeclaration[4165-4175]:SingleVariableDeclaration[4165-4175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-4214]:Block[4177-4214]"
    }, {
      "left" : "this(rel, abs, null);",
      "right" : "this(rel, abs, null);",
      "info" : "ConstructorInvocation[4187-4208]:ConstructorInvocation[4187-4208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4245-4254]:MarkerAnnotation[4245-4254]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4259-4268]:Modifier[4259-4268]"
    }, {
      "left" : "UnivariatePointValuePair",
      "right" : "UnivariatePointValuePair",
      "info" : "SimpleType[4269-4293]:SimpleType[4269-4293]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[4294-4304]:SimpleName[4294-4304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4307-9425]:Block[4307-9475]"
    }, {
      "left" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "right" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "info" : "VariableDeclarationStatement[4317-4376]:VariableDeclarationStatement[4317-4376]"
    }, {
      "left" : "final double lo = getMin();",
      "right" : "final double lo = getMin();",
      "info" : "VariableDeclarationStatement[4385-4412]:VariableDeclarationStatement[4385-4412]"
    }, {
      "left" : "final double mid = getStartValue();",
      "right" : "final double mid = getStartValue();",
      "info" : "VariableDeclarationStatement[4421-4456]:VariableDeclarationStatement[4421-4456]"
    }, {
      "left" : "final double hi = getMax();",
      "right" : "final double hi = getMax();",
      "info" : "VariableDeclarationStatement[4465-4492]:VariableDeclarationStatement[4465-4492]"
    }, {
      "left" : "final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[4555-4652]:VariableDeclarationStatement[4555-4652]"
    }, {
      "left" : "double a;",
      "right" : "double a;",
      "info" : "VariableDeclarationStatement[4662-4671]:VariableDeclarationStatement[4662-4671]"
    }, {
      "left" : "double b;",
      "right" : "double b;",
      "info" : "VariableDeclarationStatement[4680-4689]:VariableDeclarationStatement[4680-4689]"
    }, {
      "left" : "if (lo < hi)",
      "right" : "if (lo < hi)",
      "info" : "IfStatement[4698-4819]:IfStatement[4698-4819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4711-4762]:Block[4711-4762]"
    }, {
      "left" : "a = lo;",
      "right" : "a = lo;",
      "info" : "ExpressionStatement[4725-4732]:ExpressionStatement[4725-4732]"
    }, {
      "left" : "b = hi;",
      "right" : "b = hi;",
      "info" : "ExpressionStatement[4745-4752]:ExpressionStatement[4745-4752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4768-4819]:Block[4768-4819]"
    }, {
      "left" : "a = hi;",
      "right" : "a = hi;",
      "info" : "ExpressionStatement[4782-4789]:ExpressionStatement[4782-4789]"
    }, {
      "left" : "b = lo;",
      "right" : "b = lo;",
      "info" : "ExpressionStatement[4802-4809]:ExpressionStatement[4802-4809]"
    }, {
      "left" : "double x = mid;",
      "right" : "double x = mid;",
      "info" : "VariableDeclarationStatement[4829-4844]:VariableDeclarationStatement[4829-4844]"
    }, {
      "left" : "double v = x;",
      "right" : "double v = x;",
      "info" : "VariableDeclarationStatement[4853-4866]:VariableDeclarationStatement[4853-4866]"
    }, {
      "left" : "double w = x;",
      "right" : "double w = x;",
      "info" : "VariableDeclarationStatement[4875-4888]:VariableDeclarationStatement[4875-4888]"
    }, {
      "left" : "double d = 0;",
      "right" : "double d = 0;",
      "info" : "VariableDeclarationStatement[4897-4910]:VariableDeclarationStatement[4897-4910]"
    }, {
      "left" : "double e = 0;",
      "right" : "double e = 0;",
      "info" : "VariableDeclarationStatement[4919-4932]:VariableDeclarationStatement[4919-4932]"
    }, {
      "left" : "double fx = computeObjectiveValue(x);",
      "right" : "double fx = computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[4941-4978]:VariableDeclarationStatement[4941-4978]"
    }, {
      "left" : "if (!isMinim)",
      "right" : "if (!isMinim)",
      "info" : "IfStatement[4987-5034]:IfStatement[4987-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5001-5034]:Block[5001-5034]"
    }, {
      "left" : "fx = -fx;",
      "right" : "fx = -fx;",
      "info" : "ExpressionStatement[5015-5024]:ExpressionStatement[5015-5024]"
    }, {
      "left" : "double fv = fx;",
      "right" : "double fv = fx;",
      "info" : "VariableDeclarationStatement[5043-5058]:VariableDeclarationStatement[5043-5058]"
    }, {
      "left" : "double fw = fx;",
      "right" : "double fw = fx;",
      "info" : "VariableDeclarationStatement[5067-5082]:VariableDeclarationStatement[5067-5082]"
    }, {
      "left" : "UnivariatePointValuePair previous = null;",
      "right" : "UnivariatePointValuePair previous = null;",
      "info" : "VariableDeclarationStatement[5092-5133]:VariableDeclarationStatement[5092-5133]"
    }, {
      "left" : "UnivariatePointValuePair current\n            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);",
      "right" : "UnivariatePointValuePair current\n            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);",
      "info" : "VariableDeclarationStatement[5142-5241]:VariableDeclarationStatement[5142-5241]"
    }, {
      "left" : "int iter = 0;",
      "right" : "int iter = 0;",
      "info" : "VariableDeclarationStatement[5251-5264]:VariableDeclarationStatement[5251-5264]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[5273-9419]:WhileStatement[5273-9469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5286-9419]:Block[5286-9469]"
    }, {
      "left" : "final double m = 0.5 * (a + b);",
      "right" : "final double m = 0.5 * (a + b);",
      "info" : "VariableDeclarationStatement[5300-5331]:VariableDeclarationStatement[5300-5331]"
    }, {
      "left" : "final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;",
      "right" : "final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;",
      "info" : "VariableDeclarationStatement[5344-5420]:VariableDeclarationStatement[5344-5420]"
    }, {
      "left" : "final double tol2 = 2 * tol1;",
      "right" : "final double tol2 = 2 * tol1;",
      "info" : "VariableDeclarationStatement[5433-5462]:VariableDeclarationStatement[5433-5462]"
    }, {
      "left" : "final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);",
      "right" : "final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);",
      "info" : "VariableDeclarationStatement[5519-5584]:VariableDeclarationStatement[5519-5584]"
    }, {
      "left" : "if (!stop)",
      "right" : "if (!stop)",
      "info" : "IfStatement[5597-9389]:IfStatement[5597-9439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5608-9292]:Block[5608-9317]"
    }, {
      "left" : "double p = 0;",
      "right" : "double p = 0;",
      "info" : "VariableDeclarationStatement[5626-5639]:VariableDeclarationStatement[5626-5639]"
    }, {
      "left" : "double q = 0;",
      "right" : "double q = 0;",
      "info" : "VariableDeclarationStatement[5656-5669]:VariableDeclarationStatement[5656-5669]"
    }, {
      "left" : "double r = 0;",
      "right" : "double r = 0;",
      "info" : "VariableDeclarationStatement[5686-5699]:VariableDeclarationStatement[5686-5699]"
    }, {
      "left" : "double u = 0;",
      "right" : "double u = 0;",
      "info" : "VariableDeclarationStatement[5716-5729]:VariableDeclarationStatement[5716-5729]"
    }, {
      "left" : "if (FastMath.abs(e) > tol1)",
      "right" : "if (FastMath.abs(e) > tol1)",
      "info" : "IfStatement[5747-7419]:IfStatement[5747-7419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5775-7152]:Block[5775-7152]"
    }, {
      "left" : "r = (x - w) * (fx - fv);",
      "right" : "r = (x - w) * (fx - fv);",
      "info" : "ExpressionStatement[5814-5838]:ExpressionStatement[5814-5838]"
    }, {
      "left" : "q = (x - v) * (fx - fw);",
      "right" : "q = (x - v) * (fx - fw);",
      "info" : "ExpressionStatement[5859-5883]:ExpressionStatement[5859-5883]"
    }, {
      "left" : "p = (x - v) * q - (x - w) * r;",
      "right" : "p = (x - v) * q - (x - w) * r;",
      "info" : "ExpressionStatement[5904-5934]:ExpressionStatement[5904-5934]"
    }, {
      "left" : "q = 2 * (q - r);",
      "right" : "q = 2 * (q - r);",
      "info" : "ExpressionStatement[5955-5971]:ExpressionStatement[5955-5971]"
    }, {
      "left" : "if (q > 0)",
      "right" : "if (q > 0)",
      "info" : "IfStatement[5993-6120]:IfStatement[5993-6120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6004-6059]:Block[6004-6059]"
    }, {
      "left" : "p = -p;",
      "right" : "p = -p;",
      "info" : "ExpressionStatement[6030-6037]:ExpressionStatement[6030-6037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6065-6120]:Block[6065-6120]"
    }, {
      "left" : "q = -q;",
      "right" : "q = -q;",
      "info" : "ExpressionStatement[6091-6098]:ExpressionStatement[6091-6098]"
    }, {
      "left" : "r = e;",
      "right" : "r = e;",
      "info" : "ExpressionStatement[6142-6148]:ExpressionStatement[6142-6148]"
    }, {
      "left" : "e = d;",
      "right" : "e = d;",
      "info" : "ExpressionStatement[6169-6175]:ExpressionStatement[6169-6175]"
    }, {
      "left" : "if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r))",
      "right" : "if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r))",
      "info" : "IfStatement[6197-7134]:IfStatement[6197-7134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6332-6835]:Block[6332-6835]"
    }, {
      "left" : "d = p / q;",
      "right" : "d = p / q;",
      "info" : "ExpressionStatement[6415-6425]:ExpressionStatement[6415-6425]"
    }, {
      "left" : "u = x + d;",
      "right" : "u = x + d;",
      "info" : "ExpressionStatement[6450-6460]:ExpressionStatement[6450-6460]"
    }, {
      "left" : "if (u - a < tol2 || b - u < tol2)",
      "right" : "if (u - a < tol2 || b - u < tol2)",
      "info" : "IfStatement[6558-6813]:IfStatement[6558-6813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6592-6813]:Block[6592-6813]"
    }, {
      "left" : "if (x <= m)",
      "right" : "if (x <= m)",
      "info" : "IfStatement[6622-6787]:IfStatement[6622-6787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6634-6707]:Block[6634-6707]"
    }, {
      "left" : "d = tol1;",
      "right" : "d = tol1;",
      "info" : "ExpressionStatement[6668-6677]:ExpressionStatement[6668-6677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6713-6787]:Block[6713-6787]"
    }, {
      "left" : "d = -tol1;",
      "right" : "d = -tol1;",
      "info" : "ExpressionStatement[6747-6757]:ExpressionStatement[6747-6757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6841-7134]:Block[6841-7134]"
    }, {
      "left" : "if (x < m)",
      "right" : "if (x < m)",
      "info" : "IfStatement[6915-7064]:IfStatement[6915-7064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6926-6992]:Block[6926-6992]"
    }, {
      "left" : "e = b - x;",
      "right" : "e = b - x;",
      "info" : "ExpressionStatement[6956-6966]:ExpressionStatement[6956-6966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6998-7064]:Block[6998-7064]"
    }, {
      "left" : "e = a - x;",
      "right" : "e = a - x;",
      "info" : "ExpressionStatement[7028-7038]:ExpressionStatement[7028-7038]"
    }, {
      "left" : "d = GOLDEN_SECTION * e;",
      "right" : "d = GOLDEN_SECTION * e;",
      "info" : "ExpressionStatement[7089-7112]:ExpressionStatement[7089-7112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7158-7419]:Block[7158-7419]"
    }, {
      "left" : "if (x < m)",
      "right" : "if (x < m)",
      "info" : "IfStatement[7224-7357]:IfStatement[7224-7357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7235-7293]:Block[7235-7293]"
    }, {
      "left" : "e = b - x;",
      "right" : "e = b - x;",
      "info" : "ExpressionStatement[7261-7271]:ExpressionStatement[7261-7271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7299-7357]:Block[7299-7357]"
    }, {
      "left" : "e = a - x;",
      "right" : "e = a - x;",
      "info" : "ExpressionStatement[7325-7335]:ExpressionStatement[7325-7335]"
    }, {
      "left" : "d = GOLDEN_SECTION * e;",
      "right" : "d = GOLDEN_SECTION * e;",
      "info" : "ExpressionStatement[7378-7401]:ExpressionStatement[7378-7401]"
    }, {
      "left" : "if (FastMath.abs(d) < tol1)",
      "right" : "if (FastMath.abs(d) < tol1)",
      "info" : "IfStatement[7483-7747]:IfStatement[7483-7747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7511-7691]:Block[7511-7691]"
    }, {
      "left" : "if (d >= 0)",
      "right" : "if (d >= 0)",
      "info" : "IfStatement[7533-7673]:IfStatement[7533-7673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7545-7606]:Block[7545-7606]"
    }, {
      "left" : "u = x + tol1;",
      "right" : "u = x + tol1;",
      "info" : "ExpressionStatement[7571-7584]:ExpressionStatement[7571-7584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7612-7673]:Block[7612-7673]"
    }, {
      "left" : "u = x - tol1;",
      "right" : "u = x - tol1;",
      "info" : "ExpressionStatement[7638-7651]:ExpressionStatement[7638-7651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7697-7747]:Block[7697-7747]"
    }, {
      "left" : "u = x + d;",
      "right" : "u = x + d;",
      "info" : "ExpressionStatement[7719-7729]:ExpressionStatement[7719-7729]"
    }, {
      "left" : "double fu = computeObjectiveValue(u);",
      "right" : "double fu = computeObjectiveValue(u);",
      "info" : "VariableDeclarationStatement[7765-7802]:VariableDeclarationStatement[7765-7802]"
    }, {
      "left" : "if (!isMinim)",
      "right" : "if (!isMinim)",
      "info" : "IfStatement[7819-7882]:IfStatement[7819-7882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7833-7882]:Block[7833-7882]"
    }, {
      "left" : "fu = -fu;",
      "right" : "fu = -fu;",
      "info" : "ExpressionStatement[7855-7864]:ExpressionStatement[7855-7864]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[7953-7972]:ExpressionStatement[7953-7972]"
    }, {
      "left" : "current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",
      "right" : "current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",
      "info" : "ExpressionStatement[7989-8051]:ExpressionStatement[7989-8051]"
    }, {
      "left" : "if (checker != null)",
      "right" : "if (checker != null)",
      "info" : "IfStatement[8069-8241]:IfStatement[8069-8266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8090-8241]:Block[8090-8266]"
    }, {
      "left" : "if (checker.converged(iter, previous, current))",
      "right" : "if (checker.converged(iter, previous, current))",
      "info" : "IfStatement[8112-8223]:IfStatement[8112-8248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8160-8223]:Block[8160-8248]"
    }, {
      "left" : "if (fu <= fx)",
      "right" : "if (fu <= fx)",
      "info" : "IfStatement[8303-9278]:IfStatement[8328-9303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8317-8650]:Block[8342-8675]"
    }, {
      "left" : "if (u < x)",
      "right" : "if (u < x)",
      "info" : "IfStatement[8339-8464]:IfStatement[8364-8489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8350-8404]:Block[8375-8429]"
    }, {
      "left" : "b = x;",
      "right" : "b = x;",
      "info" : "ExpressionStatement[8376-8382]:ExpressionStatement[8401-8407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8410-8464]:Block[8435-8489]"
    }, {
      "left" : "a = x;",
      "right" : "a = x;",
      "info" : "ExpressionStatement[8436-8442]:ExpressionStatement[8461-8467]"
    }, {
      "left" : "v = w;",
      "right" : "v = w;",
      "info" : "ExpressionStatement[8485-8491]:ExpressionStatement[8510-8516]"
    }, {
      "left" : "fv = fw;",
      "right" : "fv = fw;",
      "info" : "ExpressionStatement[8512-8520]:ExpressionStatement[8537-8545]"
    }, {
      "left" : "w = x;",
      "right" : "w = x;",
      "info" : "ExpressionStatement[8541-8547]:ExpressionStatement[8566-8572]"
    }, {
      "left" : "fw = fx;",
      "right" : "fw = fx;",
      "info" : "ExpressionStatement[8568-8576]:ExpressionStatement[8593-8601]"
    }, {
      "left" : "x = u;",
      "right" : "x = u;",
      "info" : "ExpressionStatement[8597-8603]:ExpressionStatement[8622-8628]"
    }, {
      "left" : "fx = fu;",
      "right" : "fx = fu;",
      "info" : "ExpressionStatement[8624-8632]:ExpressionStatement[8649-8657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8656-9278]:Block[8681-9303]"
    }, {
      "left" : "if (u < x)",
      "right" : "if (u < x)",
      "info" : "IfStatement[8678-8803]:IfStatement[8703-8828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8689-8743]:Block[8714-8768]"
    }, {
      "left" : "a = u;",
      "right" : "a = u;",
      "info" : "ExpressionStatement[8715-8721]:ExpressionStatement[8740-8746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8749-8803]:Block[8774-8828]"
    }, {
      "left" : "b = u;",
      "right" : "b = u;",
      "info" : "ExpressionStatement[8775-8781]:ExpressionStatement[8800-8806]"
    }, {
      "left" : "if (fu <= fw ||\n                        Precision.equals(w, x))",
      "right" : "if (fu <= fw ||\n                        Precision.equals(w, x))",
      "info" : "IfStatement[8824-9260]:IfStatement[8849-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8888-9039]:Block[8913-9064]"
    }, {
      "left" : "v = w;",
      "right" : "v = w;",
      "info" : "ExpressionStatement[8914-8920]:ExpressionStatement[8939-8945]"
    }, {
      "left" : "fv = fw;",
      "right" : "fv = fw;",
      "info" : "ExpressionStatement[8945-8953]:ExpressionStatement[8970-8978]"
    }, {
      "left" : "w = u;",
      "right" : "w = u;",
      "info" : "ExpressionStatement[8978-8984]:ExpressionStatement[9003-9009]"
    }, {
      "left" : "fw = fu;",
      "right" : "fw = fu;",
      "info" : "ExpressionStatement[9009-9017]:ExpressionStatement[9034-9042]"
    }, {
      "left" : "if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w))",
      "right" : "if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w))",
      "info" : "IfStatement[9045-9260]:IfStatement[9070-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9173-9260]:Block[9198-9285]"
    }, {
      "left" : "v = u;",
      "right" : "v = u;",
      "info" : "ExpressionStatement[9199-9205]:ExpressionStatement[9224-9230]"
    }, {
      "left" : "fv = fu;",
      "right" : "fv = fu;",
      "info" : "ExpressionStatement[9230-9238]:ExpressionStatement[9255-9263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9298-9389]:Block[9323-9439]"
    }, {
      "left" : "++iter;",
      "right" : "++iter;",
      "info" : "ExpressionStatement[9402-9409]:ExpressionStatement[9452-9459]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9766-9773]:Modifier[9816-9823]"
    }, {
      "left" : "UnivariatePointValuePair",
      "right" : "UnivariatePointValuePair",
      "info" : "SimpleType[9774-9798]:SimpleType[9824-9848]"
    }, {
      "left" : "best",
      "right" : "best",
      "info" : "SimpleName[9799-9803]:SimpleName[9849-9853]"
    }, {
      "left" : "UnivariatePointValuePair a",
      "right" : "UnivariatePointValuePair a",
      "info" : "SingleVariableDeclaration[9804-9830]:SingleVariableDeclaration[9854-9880]"
    }, {
      "left" : "UnivariatePointValuePair b",
      "right" : "UnivariatePointValuePair b",
      "info" : "SingleVariableDeclaration[9874-9900]:SingleVariableDeclaration[9924-9950]"
    }, {
      "left" : "boolean isMinim",
      "right" : "boolean isMinim",
      "info" : "SingleVariableDeclaration[9944-9959]:SingleVariableDeclaration[9994-10009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9961-10245]:Block[10011-10295]"
    }, {
      "left" : "if (a == null)",
      "right" : "if (a == null)",
      "info" : "IfStatement[9971-10019]:IfStatement[10021-10069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9986-10019]:Block[10036-10069]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[10000-10009]:ReturnStatement[10050-10059]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[10028-10076]:IfStatement[10078-10126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10043-10076]:Block[10093-10126]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[10057-10066]:ReturnStatement[10107-10116]"
    }, {
      "left" : "if (isMinim)",
      "right" : "if (isMinim)",
      "info" : "IfStatement[10086-10239]:IfStatement[10136-10289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10099-10166]:Block[10149-10216]"
    }, {
      "left" : "return a.getValue() < b.getValue() ? a : b;",
      "right" : "return a.getValue() < b.getValue() ? a : b;",
      "info" : "ReturnStatement[10113-10156]:ReturnStatement[10163-10206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10172-10239]:Block[10222-10289]"
    }, {
      "left" : "return a.getValue() > b.getValue() ? a : b;",
      "right" : "return a.getValue() > b.getValue() ? a : b;",
      "info" : "ReturnStatement[10186-10229]:ReturnStatement[10236-10279]"
    } ]
  },
  "interFileMappings" : { }
}